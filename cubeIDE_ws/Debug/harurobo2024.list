
harurobo2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022db8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d74  08022fb8  08022fb8  00032fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024d2c  08024d2c  00040b10  2**0
                  CONTENTS
  4 .ARM          00000008  08024d2c  08024d2c  00034d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024d34  08024d34  00040b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08024d34  08024d34  00034d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024d4c  08024d4c  00034d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b10  20000000  08024d50  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016510  20000b10  08025860  00040b10  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20017020  08025860  00047020  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040b10  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040b3e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f3a5  00000000  00000000  00040bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c22  00000000  00000000  0006ff59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002260  00000000  00000000  00076b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a5a  00000000  00000000  00078de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322fa  00000000  00000000  0007a83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d946  00000000  00000000  000acb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119ca6  00000000  00000000  000da47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a524  00000000  00000000  001f4120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001fe644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b10 	.word	0x20000b10
 800021c:	00000000 	.word	0x00000000
 8000220:	08022fa0 	.word	0x08022fa0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b14 	.word	0x20000b14
 800023c:	08022fa0 	.word	0x08022fa0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_frsub>:
 8000688:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800068c:	e002      	b.n	8000694 <__addsf3>
 800068e:	bf00      	nop

08000690 <__aeabi_fsub>:
 8000690:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000694 <__addsf3>:
 8000694:	0042      	lsls	r2, r0, #1
 8000696:	bf1f      	itttt	ne
 8000698:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800069c:	ea92 0f03 	teqne	r2, r3
 80006a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006a8:	d06a      	beq.n	8000780 <__addsf3+0xec>
 80006aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006b2:	bfc1      	itttt	gt
 80006b4:	18d2      	addgt	r2, r2, r3
 80006b6:	4041      	eorgt	r1, r0
 80006b8:	4048      	eorgt	r0, r1
 80006ba:	4041      	eorgt	r1, r0
 80006bc:	bfb8      	it	lt
 80006be:	425b      	neglt	r3, r3
 80006c0:	2b19      	cmp	r3, #25
 80006c2:	bf88      	it	hi
 80006c4:	4770      	bxhi	lr
 80006c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4240      	negne	r0, r0
 80006d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006e2:	bf18      	it	ne
 80006e4:	4249      	negne	r1, r1
 80006e6:	ea92 0f03 	teq	r2, r3
 80006ea:	d03f      	beq.n	800076c <__addsf3+0xd8>
 80006ec:	f1a2 0201 	sub.w	r2, r2, #1
 80006f0:	fa41 fc03 	asr.w	ip, r1, r3
 80006f4:	eb10 000c 	adds.w	r0, r0, ip
 80006f8:	f1c3 0320 	rsb	r3, r3, #32
 80006fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000700:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000704:	d502      	bpl.n	800070c <__addsf3+0x78>
 8000706:	4249      	negs	r1, r1
 8000708:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800070c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000710:	d313      	bcc.n	800073a <__addsf3+0xa6>
 8000712:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000716:	d306      	bcc.n	8000726 <__addsf3+0x92>
 8000718:	0840      	lsrs	r0, r0, #1
 800071a:	ea4f 0131 	mov.w	r1, r1, rrx
 800071e:	f102 0201 	add.w	r2, r2, #1
 8000722:	2afe      	cmp	r2, #254	; 0xfe
 8000724:	d251      	bcs.n	80007ca <__addsf3+0x136>
 8000726:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800072a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800072e:	bf08      	it	eq
 8000730:	f020 0001 	biceq.w	r0, r0, #1
 8000734:	ea40 0003 	orr.w	r0, r0, r3
 8000738:	4770      	bx	lr
 800073a:	0049      	lsls	r1, r1, #1
 800073c:	eb40 0000 	adc.w	r0, r0, r0
 8000740:	3a01      	subs	r2, #1
 8000742:	bf28      	it	cs
 8000744:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000748:	d2ed      	bcs.n	8000726 <__addsf3+0x92>
 800074a:	fab0 fc80 	clz	ip, r0
 800074e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000752:	ebb2 020c 	subs.w	r2, r2, ip
 8000756:	fa00 f00c 	lsl.w	r0, r0, ip
 800075a:	bfaa      	itet	ge
 800075c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000760:	4252      	neglt	r2, r2
 8000762:	4318      	orrge	r0, r3
 8000764:	bfbc      	itt	lt
 8000766:	40d0      	lsrlt	r0, r2
 8000768:	4318      	orrlt	r0, r3
 800076a:	4770      	bx	lr
 800076c:	f092 0f00 	teq	r2, #0
 8000770:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000774:	bf06      	itte	eq
 8000776:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800077a:	3201      	addeq	r2, #1
 800077c:	3b01      	subne	r3, #1
 800077e:	e7b5      	b.n	80006ec <__addsf3+0x58>
 8000780:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000784:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000788:	bf18      	it	ne
 800078a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078e:	d021      	beq.n	80007d4 <__addsf3+0x140>
 8000790:	ea92 0f03 	teq	r2, r3
 8000794:	d004      	beq.n	80007a0 <__addsf3+0x10c>
 8000796:	f092 0f00 	teq	r2, #0
 800079a:	bf08      	it	eq
 800079c:	4608      	moveq	r0, r1
 800079e:	4770      	bx	lr
 80007a0:	ea90 0f01 	teq	r0, r1
 80007a4:	bf1c      	itt	ne
 80007a6:	2000      	movne	r0, #0
 80007a8:	4770      	bxne	lr
 80007aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007ae:	d104      	bne.n	80007ba <__addsf3+0x126>
 80007b0:	0040      	lsls	r0, r0, #1
 80007b2:	bf28      	it	cs
 80007b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007b8:	4770      	bx	lr
 80007ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007be:	bf3c      	itt	cc
 80007c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007c4:	4770      	bxcc	lr
 80007c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d2:	4770      	bx	lr
 80007d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007d8:	bf16      	itet	ne
 80007da:	4608      	movne	r0, r1
 80007dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007e0:	4601      	movne	r1, r0
 80007e2:	0242      	lsls	r2, r0, #9
 80007e4:	bf06      	itte	eq
 80007e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ea:	ea90 0f01 	teqeq	r0, r1
 80007ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_ui2f>:
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	e004      	b.n	8000804 <__aeabi_i2f+0x8>
 80007fa:	bf00      	nop

080007fc <__aeabi_i2f>:
 80007fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000800:	bf48      	it	mi
 8000802:	4240      	negmi	r0, r0
 8000804:	ea5f 0c00 	movs.w	ip, r0
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000810:	4601      	mov	r1, r0
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	e01c      	b.n	8000852 <__aeabi_l2f+0x2a>

08000818 <__aeabi_ul2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	e00a      	b.n	800083c <__aeabi_l2f+0x14>
 8000826:	bf00      	nop

08000828 <__aeabi_l2f>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000834:	d502      	bpl.n	800083c <__aeabi_l2f+0x14>
 8000836:	4240      	negs	r0, r0
 8000838:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083c:	ea5f 0c01 	movs.w	ip, r1
 8000840:	bf02      	ittt	eq
 8000842:	4684      	moveq	ip, r0
 8000844:	4601      	moveq	r1, r0
 8000846:	2000      	moveq	r0, #0
 8000848:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800084c:	bf08      	it	eq
 800084e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000852:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000856:	fabc f28c 	clz	r2, ip
 800085a:	3a08      	subs	r2, #8
 800085c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000860:	db10      	blt.n	8000884 <__aeabi_l2f+0x5c>
 8000862:	fa01 fc02 	lsl.w	ip, r1, r2
 8000866:	4463      	add	r3, ip
 8000868:	fa00 fc02 	lsl.w	ip, r0, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000874:	fa20 f202 	lsr.w	r2, r0, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	f020 0001 	biceq.w	r0, r0, #1
 8000882:	4770      	bx	lr
 8000884:	f102 0220 	add.w	r2, r2, #32
 8000888:	fa01 fc02 	lsl.w	ip, r1, r2
 800088c:	f1c2 0220 	rsb	r2, r2, #32
 8000890:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000894:	fa21 f202 	lsr.w	r2, r1, r2
 8000898:	eb43 0002 	adc.w	r0, r3, r2
 800089c:	bf08      	it	eq
 800089e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008a2:	4770      	bx	lr

080008a4 <__aeabi_ldivmod>:
 80008a4:	b97b      	cbnz	r3, 80008c6 <__aeabi_ldivmod+0x22>
 80008a6:	b972      	cbnz	r2, 80008c6 <__aeabi_ldivmod+0x22>
 80008a8:	2900      	cmp	r1, #0
 80008aa:	bfbe      	ittt	lt
 80008ac:	2000      	movlt	r0, #0
 80008ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80008b2:	e006      	blt.n	80008c2 <__aeabi_ldivmod+0x1e>
 80008b4:	bf08      	it	eq
 80008b6:	2800      	cmpeq	r0, #0
 80008b8:	bf1c      	itt	ne
 80008ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008be:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008c2:	f000 b9f5 	b.w	8000cb0 <__aeabi_idiv0>
 80008c6:	f1ad 0c08 	sub.w	ip, sp, #8
 80008ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ce:	2900      	cmp	r1, #0
 80008d0:	db09      	blt.n	80008e6 <__aeabi_ldivmod+0x42>
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db1a      	blt.n	800090c <__aeabi_ldivmod+0x68>
 80008d6:	f000 f887 	bl	80009e8 <__udivmoddi4>
 80008da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e2:	b004      	add	sp, #16
 80008e4:	4770      	bx	lr
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db1b      	blt.n	8000928 <__aeabi_ldivmod+0x84>
 80008f0:	f000 f87a 	bl	80009e8 <__udivmoddi4>
 80008f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008fc:	b004      	add	sp, #16
 80008fe:	4240      	negs	r0, r0
 8000900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000904:	4252      	negs	r2, r2
 8000906:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800090a:	4770      	bx	lr
 800090c:	4252      	negs	r2, r2
 800090e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000912:	f000 f869 	bl	80009e8 <__udivmoddi4>
 8000916:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800091e:	b004      	add	sp, #16
 8000920:	4240      	negs	r0, r0
 8000922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000926:	4770      	bx	lr
 8000928:	4252      	negs	r2, r2
 800092a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092e:	f000 f85b 	bl	80009e8 <__udivmoddi4>
 8000932:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800093a:	b004      	add	sp, #16
 800093c:	4252      	negs	r2, r2
 800093e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000954:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000958:	f000 b9aa 	b.w	8000cb0 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f840 	bl	80009e8 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__aeabi_d2lz>:
 8000974:	b508      	push	{r3, lr}
 8000976:	4602      	mov	r2, r0
 8000978:	460b      	mov	r3, r1
 800097a:	ec43 2b17 	vmov	d7, r2, r3
 800097e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	d403      	bmi.n	8000990 <__aeabi_d2lz+0x1c>
 8000988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800098c:	f000 b80c 	b.w	80009a8 <__aeabi_d2ulz>
 8000990:	eeb1 7b47 	vneg.f64	d7, d7
 8000994:	ec51 0b17 	vmov	r0, r1, d7
 8000998:	f000 f806 	bl	80009a8 <__aeabi_d2ulz>
 800099c:	4240      	negs	r0, r0
 800099e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009a2:	bd08      	pop	{r3, pc}
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <__aeabi_d2ulz>:
 80009a8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80009d8 <__aeabi_d2ulz+0x30>
 80009ac:	ec41 0b17 	vmov	d7, r0, r1
 80009b0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80009e0 <__aeabi_d2ulz+0x38>
 80009b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009b8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80009bc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009c0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009c8:	ee16 1a10 	vmov	r1, s12
 80009cc:	ee17 0a90 	vmov	r0, s15
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	f3af 8000 	nop.w
 80009d8:	00000000 	.word	0x00000000
 80009dc:	3df00000 	.word	0x3df00000
 80009e0:	00000000 	.word	0x00000000
 80009e4:	41f00000 	.word	0x41f00000

080009e8 <__udivmoddi4>:
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ec:	9e08      	ldr	r6, [sp, #32]
 80009ee:	460d      	mov	r5, r1
 80009f0:	4604      	mov	r4, r0
 80009f2:	460f      	mov	r7, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14a      	bne.n	8000a8e <__udivmoddi4+0xa6>
 80009f8:	428a      	cmp	r2, r1
 80009fa:	4694      	mov	ip, r2
 80009fc:	d965      	bls.n	8000aca <__udivmoddi4+0xe2>
 80009fe:	fab2 f382 	clz	r3, r2
 8000a02:	b143      	cbz	r3, 8000a16 <__udivmoddi4+0x2e>
 8000a04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a08:	f1c3 0220 	rsb	r2, r3, #32
 8000a0c:	409f      	lsls	r7, r3
 8000a0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000a12:	4317      	orrs	r7, r2
 8000a14:	409c      	lsls	r4, r3
 8000a16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1a:	fa1f f58c 	uxth.w	r5, ip
 8000a1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a22:	0c22      	lsrs	r2, r4, #16
 8000a24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a2c:	fb01 f005 	mul.w	r0, r1, r5
 8000a30:	4290      	cmp	r0, r2
 8000a32:	d90a      	bls.n	8000a4a <__udivmoddi4+0x62>
 8000a34:	eb1c 0202 	adds.w	r2, ip, r2
 8000a38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a3c:	f080 811c 	bcs.w	8000c78 <__udivmoddi4+0x290>
 8000a40:	4290      	cmp	r0, r2
 8000a42:	f240 8119 	bls.w	8000c78 <__udivmoddi4+0x290>
 8000a46:	3902      	subs	r1, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a12      	subs	r2, r2, r0
 8000a4c:	b2a4      	uxth	r4, r4
 8000a4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5a:	fb00 f505 	mul.w	r5, r0, r5
 8000a5e:	42a5      	cmp	r5, r4
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x90>
 8000a62:	eb1c 0404 	adds.w	r4, ip, r4
 8000a66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a6a:	f080 8107 	bcs.w	8000c7c <__udivmoddi4+0x294>
 8000a6e:	42a5      	cmp	r5, r4
 8000a70:	f240 8104 	bls.w	8000c7c <__udivmoddi4+0x294>
 8000a74:	4464      	add	r4, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11e      	cbz	r6, 8000a8a <__udivmoddi4+0xa2>
 8000a82:	40dc      	lsrs	r4, r3
 8000a84:	2300      	movs	r3, #0
 8000a86:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0xbc>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	f000 80ed 	beq.w	8000c72 <__udivmoddi4+0x28a>
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	fab3 f183 	clz	r1, r3
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d149      	bne.n	8000b40 <__udivmoddi4+0x158>
 8000aac:	42ab      	cmp	r3, r5
 8000aae:	d302      	bcc.n	8000ab6 <__udivmoddi4+0xce>
 8000ab0:	4282      	cmp	r2, r0
 8000ab2:	f200 80f8 	bhi.w	8000ca6 <__udivmoddi4+0x2be>
 8000ab6:	1a84      	subs	r4, r0, r2
 8000ab8:	eb65 0203 	sbc.w	r2, r5, r3
 8000abc:	2001      	movs	r0, #1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d0e2      	beq.n	8000a8a <__udivmoddi4+0xa2>
 8000ac4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac8:	e7df      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xe6>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f382 	clz	r3, r2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x210>
 8000ad8:	1a8a      	subs	r2, r1, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f fe8c 	uxth.w	lr, ip
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae8:	fb07 2015 	mls	r0, r7, r5, r2
 8000aec:	0c22      	lsrs	r2, r4, #16
 8000aee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af2:	fb0e f005 	mul.w	r0, lr, r5
 8000af6:	4290      	cmp	r0, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x124>
 8000afa:	eb1c 0202 	adds.w	r2, ip, r2
 8000afe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x122>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f200 80cb 	bhi.w	8000ca0 <__udivmoddi4+0x2b8>
 8000b0a:	4645      	mov	r5, r8
 8000b0c:	1a12      	subs	r2, r2, r0
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b14:	fb07 2210 	mls	r2, r7, r0, r2
 8000b18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x14e>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b2c:	d202      	bcs.n	8000b34 <__udivmoddi4+0x14c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f200 80bb 	bhi.w	8000caa <__udivmoddi4+0x2c2>
 8000b34:	4610      	mov	r0, r2
 8000b36:	eba4 040e 	sub.w	r4, r4, lr
 8000b3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3e:	e79f      	b.n	8000a80 <__udivmoddi4+0x98>
 8000b40:	f1c1 0720 	rsb	r7, r1, #32
 8000b44:	408b      	lsls	r3, r1
 8000b46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000b52:	fa20 f307 	lsr.w	r3, r0, r7
 8000b56:	40fd      	lsrs	r5, r7
 8000b58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b5c:	4323      	orrs	r3, r4
 8000b5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b62:	fa1f fe8c 	uxth.w	lr, ip
 8000b66:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6a:	0c1c      	lsrs	r4, r3, #16
 8000b6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b70:	fb08 f50e 	mul.w	r5, r8, lr
 8000b74:	42a5      	cmp	r5, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7e:	d90b      	bls.n	8000b98 <__udivmoddi4+0x1b0>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b88:	f080 8088 	bcs.w	8000c9c <__udivmoddi4+0x2b4>
 8000b8c:	42a5      	cmp	r5, r4
 8000b8e:	f240 8085 	bls.w	8000c9c <__udivmoddi4+0x2b4>
 8000b92:	f1a8 0802 	sub.w	r8, r8, #2
 8000b96:	4464      	add	r4, ip
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	b29d      	uxth	r5, r3
 8000b9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x1da>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000bb8:	d26c      	bcs.n	8000c94 <__udivmoddi4+0x2ac>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	d96a      	bls.n	8000c94 <__udivmoddi4+0x2ac>
 8000bbe:	3b02      	subs	r3, #2
 8000bc0:	4464      	add	r4, ip
 8000bc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	42ac      	cmp	r4, r5
 8000bd0:	46c8      	mov	r8, r9
 8000bd2:	46ae      	mov	lr, r5
 8000bd4:	d356      	bcc.n	8000c84 <__udivmoddi4+0x29c>
 8000bd6:	d053      	beq.n	8000c80 <__udivmoddi4+0x298>
 8000bd8:	b156      	cbz	r6, 8000bf0 <__udivmoddi4+0x208>
 8000bda:	ebb0 0208 	subs.w	r2, r0, r8
 8000bde:	eb64 040e 	sbc.w	r4, r4, lr
 8000be2:	fa04 f707 	lsl.w	r7, r4, r7
 8000be6:	40ca      	lsrs	r2, r1
 8000be8:	40cc      	lsrs	r4, r1
 8000bea:	4317      	orrs	r7, r2
 8000bec:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	f1c3 0120 	rsb	r1, r3, #32
 8000bfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c00:	fa20 f201 	lsr.w	r2, r0, r1
 8000c04:	fa25 f101 	lsr.w	r1, r5, r1
 8000c08:	409d      	lsls	r5, r3
 8000c0a:	432a      	orrs	r2, r5
 8000c0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c10:	fa1f fe8c 	uxth.w	lr, ip
 8000c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c18:	fb07 1510 	mls	r5, r7, r0, r1
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c22:	fb00 f50e 	mul.w	r5, r0, lr
 8000c26:	428d      	cmp	r5, r1
 8000c28:	fa04 f403 	lsl.w	r4, r4, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x258>
 8000c2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c36:	d22f      	bcs.n	8000c98 <__udivmoddi4+0x2b0>
 8000c38:	428d      	cmp	r5, r1
 8000c3a:	d92d      	bls.n	8000c98 <__udivmoddi4+0x2b0>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4461      	add	r1, ip
 8000c40:	1b49      	subs	r1, r1, r5
 8000c42:	b292      	uxth	r2, r2
 8000c44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c48:	fb07 1115 	mls	r1, r7, r5, r1
 8000c4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c50:	fb05 f10e 	mul.w	r1, r5, lr
 8000c54:	4291      	cmp	r1, r2
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x282>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c60:	d216      	bcs.n	8000c90 <__udivmoddi4+0x2a8>
 8000c62:	4291      	cmp	r1, r2
 8000c64:	d914      	bls.n	8000c90 <__udivmoddi4+0x2a8>
 8000c66:	3d02      	subs	r5, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a52      	subs	r2, r2, r1
 8000c6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c70:	e738      	b.n	8000ae4 <__udivmoddi4+0xfc>
 8000c72:	4631      	mov	r1, r6
 8000c74:	4630      	mov	r0, r6
 8000c76:	e708      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e6e6      	b.n	8000a4a <__udivmoddi4+0x62>
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	e6fb      	b.n	8000a78 <__udivmoddi4+0x90>
 8000c80:	4548      	cmp	r0, r9
 8000c82:	d2a9      	bcs.n	8000bd8 <__udivmoddi4+0x1f0>
 8000c84:	ebb9 0802 	subs.w	r8, r9, r2
 8000c88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	e7a3      	b.n	8000bd8 <__udivmoddi4+0x1f0>
 8000c90:	4645      	mov	r5, r8
 8000c92:	e7ea      	b.n	8000c6a <__udivmoddi4+0x282>
 8000c94:	462b      	mov	r3, r5
 8000c96:	e794      	b.n	8000bc2 <__udivmoddi4+0x1da>
 8000c98:	4640      	mov	r0, r8
 8000c9a:	e7d1      	b.n	8000c40 <__udivmoddi4+0x258>
 8000c9c:	46d0      	mov	r8, sl
 8000c9e:	e77b      	b.n	8000b98 <__udivmoddi4+0x1b0>
 8000ca0:	3d02      	subs	r5, #2
 8000ca2:	4462      	add	r2, ip
 8000ca4:	e732      	b.n	8000b0c <__udivmoddi4+0x124>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e70a      	b.n	8000ac0 <__udivmoddi4+0xd8>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	e742      	b.n	8000b36 <__udivmoddi4+0x14e>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <PushTx8Bytes+0xa4>)
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	3304      	adds	r3, #4
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <PushTx8Bytes+0xa4>)
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000cde:	2300      	movs	r3, #0
 8000ce0:	75fb      	strb	r3, [r7, #23]
 8000ce2:	e010      	b.n	8000d06 <PushTx8Bytes+0x52>
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	18d1      	adds	r1, r2, r3
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	7808      	ldrb	r0, [r1, #0]
 8000cf2:	4919      	ldr	r1, [pc, #100]	; (8000d58 <PushTx8Bytes+0xa4>)
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	440a      	add	r2, r1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	3301      	adds	r3, #1
 8000d04:	75fb      	strb	r3, [r7, #23]
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d8ea      	bhi.n	8000ce4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <PushTx8Bytes+0xa8>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d106      	bne.n	8000d24 <PushTx8Bytes+0x70>
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <PushTx8Bytes+0xac>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d20:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <PushTx8Bytes+0xac>)
 8000d22:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000d30:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <PushTx8Bytes+0xac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d102      	bne.n	8000d44 <PushTx8Bytes+0x90>
		isfull = 1;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <PushTx8Bytes+0xa8>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	371c      	adds	r7, #28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20002e04 	.word	0x20002e04
 8000d58:	20000e00 	.word	0x20000e00
 8000d5c:	20002e08 	.word	0x20002e08
 8000d60:	20002e00 	.word	0x20002e00

08000d64 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000d6e:	2304      	movs	r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000d76:	e035      	b.n	8000de4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <PopSendTx8Bytes+0xa0>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <PopSendTx8Bytes+0x28>
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <PopSendTx8Bytes+0xa8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d034      	beq.n	8000df6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <PopSendTx8Bytes+0xac>)
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4413      	add	r3, r2
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <PopSendTx8Bytes+0xac>)
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <PopSendTx8Bytes+0xb0>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	3308      	adds	r3, #8
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <PopSendTx8Bytes+0xac>)
 8000db8:	441a      	add	r2, r3
 8000dba:	463b      	mov	r3, r7
 8000dbc:	1d39      	adds	r1, r7, #4
 8000dbe:	f002 fade 	bl	800337e <HAL_CAN_AddTxMessage>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000dc6:	7ffb      	ldrb	r3, [r7, #31]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <PopSendTx8Bytes+0x6c>
 8000dcc:	7ffb      	ldrb	r3, [r7, #31]
 8000dce:	e014      	b.n	8000dfa <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000ddc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <PopSendTx8Bytes+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <PopSendTx8Bytes+0xb0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fb98 	bl	800351e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1c1      	bne.n	8000d78 <PopSendTx8Bytes+0x14>
 8000df4:	e000      	b.n	8000df8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000df6:	bf00      	nop
	}

	return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3720      	adds	r7, #32
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20002e08 	.word	0x20002e08
 8000e08:	20002e00 	.word	0x20002e00
 8000e0c:	20002e04 	.word	0x20002e04
 8000e10:	20000e00 	.word	0x20000e00
 8000e14:	20000b2c 	.word	0x20000b2c

08000e18 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000e1c:	f7ff ffa2 	bl	8000d64 <PopSendTx8Bytes>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000e28:	f7ff ff9c 	bl	8000d64 <PopSendTx8Bytes>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e34:	b08e      	sub	sp, #56	; 0x38
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	f107 0218 	add.w	r2, r7, #24
 8000e44:	2100      	movs	r1, #0
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f002 fb9e 	bl	8003588 <HAL_CAN_GetRxMessage>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000e52:	486e      	ldr	r0, [pc, #440]	; (800100c <WhenCANRxFifo0MsgPending+0x1dc>)
 8000e54:	f01e fbfa 	bl	801f64c <iprintf>
		Error_Handler();
 8000e58:	f001 fc33 	bl	80026c2 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4698      	mov	r8, r3
 8000e62:	4691      	mov	r9, r2
 8000e64:	4640      	mov	r0, r8
 8000e66:	4649      	mov	r1, r9
 8000e68:	f000 f9ea 	bl	8001240 <Extract_CAN_Device>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	733a      	strb	r2, [r7, #12]
 8000e72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000e76:	737a      	strb	r2, [r7, #13]
 8000e78:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000e7c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	2200      	movs	r2, #0
 8000e82:	461c      	mov	r4, r3
 8000e84:	4615      	mov	r5, r2
 8000e86:	4620      	mov	r0, r4
 8000e88:	4629      	mov	r1, r5
 8000e8a:	f000 fa25 	bl	80012d8 <Extract_CAN_CMD>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000e94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d139      	bne.n	8000f10 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ea2:	e013      	b.n	8000ecc <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000ea4:	7b3b      	ldrb	r3, [r7, #12]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000eac:	4958      	ldr	r1, [pc, #352]	; (8001010 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000eae:	4603      	mov	r3, r0
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a1b      	subs	r3, r3, r0
 8000eb4:	440b      	add	r3, r1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	7c3b      	ldrb	r3, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f000 80a0 	beq.w	8001002 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b50      	ldr	r3, [pc, #320]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ed2:	5c9b      	ldrb	r3, [r3, r2]
 8000ed4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d3e3      	bcc.n	8000ea4 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000edc:	7b3b      	ldrb	r3, [r7, #12]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	7b3b      	ldrb	r3, [r7, #12]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	461c      	mov	r4, r3
 8000eea:	7c38      	ldrb	r0, [r7, #16]
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000eee:	460b      	mov	r3, r1
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	1a5b      	subs	r3, r3, r1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4423      	add	r3, r4
 8000ef8:	4602      	mov	r2, r0
 8000efa:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000efc:	7b3b      	ldrb	r3, [r7, #12]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000f02:	5c9b      	ldrb	r3, [r3, r2]
 8000f04:	7b3a      	ldrb	r2, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2d9      	uxtb	r1, r3
 8000f0a:	4b42      	ldr	r3, [pc, #264]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000f0c:	5499      	strb	r1, [r3, r2]
 8000f0e:	e04a      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000f10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d146      	bne.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d10d      	bne.n	8000f3a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	7bba      	ldrb	r2, [r7, #14]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	cb03      	ldmia	r3!, {r0, r1}
 8000f34:	6010      	str	r0, [r2, #0]
 8000f36:	6051      	str	r1, [r2, #4]
 8000f38:	e035      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000f3a:	7b3b      	ldrb	r3, [r7, #12]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d10d      	bne.n	8000f5c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000f40:	7b7b      	ldrb	r3, [r7, #13]
 8000f42:	7bba      	ldrb	r2, [r7, #14]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4a34      	ldr	r2, [pc, #208]	; (800101c <WhenCANRxFifo0MsgPending+0x1ec>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	cb03      	ldmia	r3!, {r0, r1}
 8000f56:	6010      	str	r0, [r2, #0]
 8000f58:	6051      	str	r1, [r2, #4]
 8000f5a:	e024      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000f5c:	7b3b      	ldrb	r3, [r7, #12]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d10d      	bne.n	8000f7e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	7bba      	ldrb	r2, [r7, #14]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	cb03      	ldmia	r3!, {r0, r1}
 8000f78:	6010      	str	r0, [r2, #0]
 8000f7a:	6051      	str	r1, [r2, #4]
 8000f7c:	e013      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000f7e:	7b3b      	ldrb	r3, [r7, #12]
 8000f80:	2b06      	cmp	r3, #6
 8000f82:	d10d      	bne.n	8000fa0 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	7bba      	ldrb	r2, [r7, #14]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000f90:	4413      	add	r3, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	cb03      	ldmia	r3!, {r0, r1}
 8000f9a:	6010      	str	r0, [r2, #0]
 8000f9c:	6051      	str	r1, [r2, #4]
 8000f9e:	e002      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000fa2:	f01e fb53 	bl	801f64c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fa8:	785a      	ldrb	r2, [r3, #1]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d128      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fb4:	789a      	ldrb	r2, [r3, #2]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d122      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fc0:	78da      	ldrb	r2, [r3, #3]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d11c      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fcc:	791a      	ldrb	r2, [r3, #4]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	78db      	ldrb	r3, [r3, #3]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d116      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fd8:	795a      	ldrb	r2, [r3, #5]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d110      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fe4:	799a      	ldrb	r2, [r3, #6]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	795b      	ldrb	r3, [r3, #5]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d10a      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ff0:	7a1a      	ldrb	r2, [r3, #8]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	799b      	ldrb	r3, [r3, #6]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d104      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e000      	b.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8001002:	bf00      	nop
	}
}
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800100c:	08022fb8 	.word	0x08022fb8
 8001010:	20000b40 	.word	0x20000b40
 8001014:	20000b34 	.word	0x20000b34
 8001018:	20000b80 	.word	0x20000b80
 800101c:	20000c20 	.word	0x20000c20
 8001020:	20000cc0 	.word	0x20000cc0
 8001024:	20000d60 	.word	0x20000d60
 8001028:	08022fd0 	.word	0x08022fd0
 800102c:	20000b30 	.word	0x20000b30

08001030 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 800104c:	2300      	movs	r3, #0
 800104e:	77fb      	strb	r3, [r7, #31]
 8001050:	e015      	b.n	800107e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	461a      	mov	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4413      	add	r3, r2
 800105c:	2208      	movs	r2, #8
 800105e:	4619      	mov	r1, r3
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff fe27 	bl	8000cb4 <PushTx8Bytes>
 8001066:	4603      	mov	r3, r0
 8001068:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 800106a:	7cfb      	ldrb	r3, [r7, #19]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <SendBytes+0x48>
			Error_Handler();
 8001070:	f001 fb27 	bl	80026c2 <Error_Handler>
			return ret;
 8001074:	7cfb      	ldrb	r3, [r7, #19]
 8001076:	e027      	b.n	80010c8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8001078:	7ffb      	ldrb	r3, [r7, #31]
 800107a:	3301      	adds	r3, #1
 800107c:	77fb      	strb	r3, [r7, #31]
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8e5      	bhi.n	8001052 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d011      	beq.n	80010b0 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	4619      	mov	r1, r3
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff fe0b 	bl	8000cb4 <PushTx8Bytes>
 800109e:	4603      	mov	r3, r0
 80010a0:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80010a2:	7cfb      	ldrb	r3, [r7, #19]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <SendBytes+0x80>
			Error_Handler();
 80010a8:	f001 fb0b 	bl	80026c2 <Error_Handler>
			return ret;
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	e00b      	b.n	80010c8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80010b0:	f7ff fe58 	bl	8000d64 <PopSendTx8Bytes>
 80010b4:	4603      	mov	r3, r0
 80010b6:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <SendBytes+0x96>
		Error_Handler();
 80010be:	f001 fb00 	bl	80026c2 <Error_Handler>
		return ret;
 80010c2:	7cfb      	ldrb	r3, [r7, #19]
 80010c4:	e000      	b.n	80010c8 <SendBytes+0x98>
	}

	return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	210c      	movs	r1, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f884 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	463b      	mov	r3, r7
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff ff9d 	bl	8001030 <SendBytes>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <ServoDriver_Init>:
		return ans;
	}
}

////servo
void ServoDriver_Init(CAN_Device *can_device, CANServo_Param_Typedef *param){
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	float fdata[2];
	fdata[0] = param->pulse_width_min;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->pulse_width_max;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT1), (uint8_t *)fdata, sizeof(fdata));
 8001114:	2101      	movs	r1, #1
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f869 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2208      	movs	r2, #8
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff ff81 	bl	8001030 <SendBytes>
	fdata[0] = param->pwm_frequency;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->angle_range;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT2), (uint8_t *)fdata, sizeof(fdata));
 800113a:	2102      	movs	r1, #2
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f856 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	2208      	movs	r2, #8
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff ff6e 	bl	8001030 <SendBytes>
	fdata[0] = param->angle_offset;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0.0f;
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT3), (uint8_t *)fdata, sizeof(fdata));
 8001160:	2103      	movs	r1, #3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f843 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2208      	movs	r2, #8
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff ff5b 	bl	8001030 <SendBytes>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <ServoDriver_SendValue>:

void ServoDriver_SendValue(CAN_Device *can_device, float angle){
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	ed87 0a00 	vstr	s0, [r7]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_SET_TARGET), (uint8_t *)(&angle), sizeof(float)) != HAL_OK){
 800118e:	2104      	movs	r1, #4
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f82c 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	463b      	mov	r3, r7
 800119e:	2204      	movs	r2, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff ff45 	bl	8001030 <SendBytes>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <ServoDriver_SendValue+0x2e>
		Error_Handler();
 80011ac:	f001 fa89 	bl	80026c2 <Error_Handler>
	}
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <AirCylinder_SendOutput>:
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
		Error_Handler();
	}
}

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80011c4:	2102      	movs	r1, #2
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f811 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	1cfb      	adds	r3, r7, #3
 80011d4:	2201      	movs	r2, #1
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff ff2a 	bl	8001030 <SendBytes>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 80011e2:	f001 fa6e 	bl	80026c2 <Error_Handler>
	}
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 80011ee:	b4b0      	push	{r4, r5, r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	02db      	lsls	r3, r3, #11
 8001208:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	015b      	lsls	r3, r3, #5
 800121e:	b2db      	uxtb	r3, r3
 8001220:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	4313      	orrs	r3, r2
 800122a:	17da      	asrs	r2, r3, #31
 800122c:	461c      	mov	r4, r3
 800122e:	4615      	mov	r5, r2
 8001230:	4622      	mov	r2, r4
 8001232:	462b      	mov	r3, r5
}
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bcb0      	pop	{r4, r5, r7}
 800123e:	4770      	bx	lr

08001240 <Extract_CAN_Device>:
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
             | (cmd&0b11111) );
}

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 800124a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	0942      	lsrs	r2, r0, #5
 8001258:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 800125c:	094b      	lsrs	r3, r1, #5
 800125e:	b2d3      	uxtb	r3, r2
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	b2db      	uxtb	r3, r3
 8001266:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0a02      	lsrs	r2, r0, #8
 8001276:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800127a:	0a0b      	lsrs	r3, r1, #8
 800127c:	b2d3      	uxtb	r3, r2
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	b2db      	uxtb	r3, r3
 8001284:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	0ac2      	lsrs	r2, r0, #11
 8001294:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001298:	0acb      	lsrs	r3, r1, #11
 800129a:	b2d3      	uxtb	r3, r2
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	723b      	strb	r3, [r7, #8]
    return ans;
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	4611      	mov	r1, r2
 80012b0:	8019      	strh	r1, [r3, #0]
 80012b2:	3302      	adds	r3, #2
 80012b4:	0c12      	lsrs	r2, r2, #16
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	7b3a      	ldrb	r2, [r7, #12]
 80012bc:	f362 0307 	bfi	r3, r2, #0, #8
 80012c0:	7b7a      	ldrb	r2, [r7, #13]
 80012c2:	f362 230f 	bfi	r3, r2, #8, #8
 80012c6:	7bba      	ldrb	r2, [r7, #14]
 80012c8:	f362 4317 	bfi	r3, r2, #16, #8
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	e9c7 0100 	strd	r0, r1, [r7]
 80012e2:	783b      	ldrb	r3, [r7, #0]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_CAN1_Init+0x64>)
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <MX_CAN1_Init+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_CAN1_Init+0x64>)
 8001304:	2206      	movs	r2, #6
 8001306:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_CAN1_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_CAN1_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_CAN1_Init+0x64>)
 8001316:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800131a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_CAN1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_CAN1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_CAN1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_CAN1_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_CAN1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_CAN1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_CAN1_Init+0x64>)
 8001342:	2201      	movs	r2, #1
 8001344:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_CAN1_Init+0x64>)
 8001348:	f001 ff1e 	bl	8003188 <HAL_CAN_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001352:	f001 f9b6 	bl	80026c2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20002e0c 	.word	0x20002e0c
 8001360:	40006400 	.word	0x40006400

08001364 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_CAN_MspInit+0xac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d13f      	bne.n	8001406 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a22      	ldr	r2, [pc, #136]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 800138c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013b6:	2303      	movs	r3, #3
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013c6:	2309      	movs	r3, #9
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <HAL_CAN_MspInit+0xb4>)
 80013d2:	f003 f8d7 	bl	8004584 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2105      	movs	r1, #5
 80013da:	2013      	movs	r0, #19
 80013dc:	f002 fc92 	bl	8003d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80013e0:	2013      	movs	r0, #19
 80013e2:	f002 fcab 	bl	8003d3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2105      	movs	r1, #5
 80013ea:	2014      	movs	r0, #20
 80013ec:	f002 fc8a 	bl	8003d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80013f0:	2014      	movs	r0, #20
 80013f2:	f002 fca3 	bl	8003d3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2105      	movs	r1, #5
 80013fa:	2015      	movs	r0, #21
 80013fc:	f002 fc82 	bl	8003d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001400:	2015      	movs	r0, #21
 8001402:	f002 fc9b 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40006400 	.word	0x40006400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020c00 	.word	0x40020c00

0800141c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001428:	f00c fd28 	bl	800de7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <pvPortMallocMicroROS+0x180>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001434:	f000 f98a 	bl	800174c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001438:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <pvPortMallocMicroROS+0x184>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 8092 	bne.w	800156a <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01f      	beq.n	800148c <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 800144c:	2208      	movs	r2, #8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	2b00      	cmp	r3, #0
 800145c:	d016      	beq.n	800148c <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f023 0307 	bic.w	r3, r3, #7
 8001464:	3308      	adds	r3, #8
 8001466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00c      	beq.n	800148c <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001476:	b672      	cpsid	i
 8001478:	f383 8811 	msr	BASEPRI, r3
 800147c:	f3bf 8f6f 	isb	sy
 8001480:	f3bf 8f4f 	dsb	sy
 8001484:	b662      	cpsie	i
 8001486:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001488:	bf00      	nop
 800148a:	e7fe      	b.n	800148a <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d06b      	beq.n	800156a <pvPortMallocMicroROS+0x14e>
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	d866      	bhi.n	800156a <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800149c:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <pvPortMallocMicroROS+0x18c>)
 800149e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <pvPortMallocMicroROS+0x18c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014a6:	e004      	b.n	80014b2 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d903      	bls.n	80014c4 <pvPortMallocMicroROS+0xa8>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f1      	bne.n	80014a8 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <pvPortMallocMicroROS+0x180>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d04d      	beq.n	800156a <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2208      	movs	r2, #8
 80014d4:	4413      	add	r3, r2
 80014d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	2308      	movs	r3, #8
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d921      	bls.n	8001534 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00c      	beq.n	800151c <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001506:	b672      	cpsid	i
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	b662      	cpsie	i
 8001516:	613b      	str	r3, [r7, #16]
}
 8001518:	bf00      	nop
 800151a:	e7fe      	b.n	800151a <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1ad2      	subs	r2, r2, r3
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800152e:	69b8      	ldr	r0, [r7, #24]
 8001530:	f000 f96e 	bl	8001810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001540:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <pvPortMallocMicroROS+0x190>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d203      	bcs.n	8001556 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <pvPortMallocMicroROS+0x190>)
 8001554:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <pvPortMallocMicroROS+0x184>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	431a      	orrs	r2, r3
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800156a:	f00c fc95 	bl	800de98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00c      	beq.n	8001592 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157c:	b672      	cpsid	i
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	b662      	cpsie	i
 800158c:	60fb      	str	r3, [r7, #12]
}
 800158e:	bf00      	nop
 8001590:	e7fe      	b.n	8001590 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001592:	69fb      	ldr	r3, [r7, #28]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20006a3c 	.word	0x20006a3c
 80015a0:	20006a48 	.word	0x20006a48
 80015a4:	20006a40 	.word	0x20006a40
 80015a8:	20006a34 	.word	0x20006a34
 80015ac:	20006a44 	.word	0x20006a44

080015b0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d04c      	beq.n	800165c <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80015c2:	2308      	movs	r3, #8
 80015c4:	425b      	negs	r3, r3
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <vPortFreeMicroROS+0xb4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <vPortFreeMicroROS+0x48>
	__asm volatile
 80015de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e2:	b672      	cpsid	i
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	b662      	cpsie	i
 80015f2:	60fb      	str	r3, [r7, #12]
}
 80015f4:	bf00      	nop
 80015f6:	e7fe      	b.n	80015f6 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00c      	beq.n	800161a <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001604:	b672      	cpsid	i
 8001606:	f383 8811 	msr	BASEPRI, r3
 800160a:	f3bf 8f6f 	isb	sy
 800160e:	f3bf 8f4f 	dsb	sy
 8001612:	b662      	cpsie	i
 8001614:	60bb      	str	r3, [r7, #8]
}
 8001616:	bf00      	nop
 8001618:	e7fe      	b.n	8001618 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <vPortFreeMicroROS+0xb4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d019      	beq.n	800165c <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d115      	bne.n	800165c <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <vPortFreeMicroROS+0xb4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001640:	f00c fc1c 	bl	800de7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <vPortFreeMicroROS+0xb8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <vPortFreeMicroROS+0xb8>)
 8001650:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001652:	6938      	ldr	r0, [r7, #16]
 8001654:	f000 f8dc 	bl	8001810 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001658:	f00c fc1e 	bl	800de98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20006a48 	.word	0x20006a48
 8001668:	20006a40 	.word	0x20006a40

0800166c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001678:	2308      	movs	r3, #8
 800167a:	425b      	negs	r3, r3
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <getBlockSize+0x38>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	43db      	mvns	r3, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

	return count;
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	4618      	mov	r0, r3
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20006a48 	.word	0x20006a48

080016a8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80016b2:	f00c fbe3 	bl	800de7c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80016b6:	6838      	ldr	r0, [r7, #0]
 80016b8:	f7ff feb0 	bl	800141c <pvPortMallocMicroROS>
 80016bc:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d017      	beq.n	80016f4 <pvPortReallocMicroROS+0x4c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d014      	beq.n	80016f4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffce 	bl	800166c <getBlockSize>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2208      	movs	r2, #8
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d201      	bcs.n	80016e4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	68b8      	ldr	r0, [r7, #8]
 80016ea:	f01e fb28 	bl	801fd3e <memcpy>

		vPortFreeMicroROS(pv);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ff5e 	bl	80015b0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80016f4:	f00c fbd0 	bl	800de98 <xTaskResumeAll>

	return newmem;
 80016f8:	68bb      	ldr	r3, [r7, #8]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800170c:	f00c fbb6 	bl	800de7c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff fe7e 	bl	800141c <pvPortMallocMicroROS>
 8001720:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001726:	e004      	b.n	8001732 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	613a      	str	r2, [r7, #16]
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	617a      	str	r2, [r7, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f5      	bne.n	8001728 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800173c:	f00c fbac 	bl	800de98 <xTaskResumeAll>
  	return mem;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001752:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <prvHeapInit+0xac>)
 800175a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00c      	beq.n	8001780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3307      	adds	r3, #7
 800176a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f023 0307 	bic.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <prvHeapInit+0xac>)
 800177c:	4413      	add	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <prvHeapInit+0xb0>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <prvHeapInit+0xb0>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001798:	2208      	movs	r2, #8
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 0307 	bic.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <prvHeapInit+0xb4>)
 80017ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <prvHeapInit+0xb4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <prvHeapInit+0xb4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	1ad2      	subs	r2, r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <prvHeapInit+0xb4>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <prvHeapInit+0xb8>)
 80017da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <prvHeapInit+0xbc>)
 80017e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <prvHeapInit+0xc0>)
 80017e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20002e34 	.word	0x20002e34
 80017fc:	20006a34 	.word	0x20006a34
 8001800:	20006a3c 	.word	0x20006a3c
 8001804:	20006a44 	.word	0x20006a44
 8001808:	20006a40 	.word	0x20006a40
 800180c:	20006a48 	.word	0x20006a48

08001810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <prvInsertBlockIntoFreeList+0xac>)
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e002      	b.n	8001824 <prvInsertBlockIntoFreeList+0x14>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	d8f7      	bhi.n	800181e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	4413      	add	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d108      	bne.n	8001852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	441a      	add	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	441a      	add	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d118      	bne.n	8001898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <prvInsertBlockIntoFreeList+0xb0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d00d      	beq.n	800188e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	441a      	add	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e008      	b.n	80018a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <prvInsertBlockIntoFreeList+0xb0>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e003      	b.n	80018a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d002      	beq.n	80018ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20006a34 	.word	0x20006a34
 80018c0:	20006a3c 	.word	0x20006a3c

080018c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_DMA_Init+0x48>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <MX_DMA_Init+0x48>)
 80018d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_DMA_Init+0x48>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2105      	movs	r1, #5
 80018e6:	200c      	movs	r0, #12
 80018e8:	f002 fa0c 	bl	8003d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018ec:	200c      	movs	r0, #12
 80018ee:	f002 fa25 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2105      	movs	r1, #5
 80018f6:	200e      	movs	r0, #14
 80018f8:	f002 fa04 	bl	8003d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018fc:	200e      	movs	r0, #14
 80018fe:	f002 fa1d 	bl	8003d3c <HAL_NVIC_EnableIRQ>

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800191e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001924:	4904      	ldr	r1, [pc, #16]	; (8001938 <cubemx_transport_open+0x28>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f006 fa58 	bl	8007ddc <HAL_UART_Receive_DMA>
    return true;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20006a4c 	.word	0x20006a4c

0800193c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800194a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f006 fa89 	bl	8007e64 <HAL_UART_DMAStop>
    return true;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001970:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001976:	2b20      	cmp	r3, #32
 8001978:	d11a      	bne.n	80019b0 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	b29b      	uxth	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f006 f9ae 	bl	8007ce4 <HAL_UART_Transmit_DMA>
 8001988:	4603      	mov	r3, r0
 800198a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800198c:	e002      	b.n	8001994 <cubemx_transport_write+0x38>
            osDelay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f00b fa0a 	bl	800cda8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001994:	7cfb      	ldrb	r3, [r7, #19]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <cubemx_transport_write+0x46>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d1f5      	bne.n	800198e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 80019a2:	7cfb      	ldrb	r3, [r7, #19]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <cubemx_transport_write+0x50>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	e002      	b.n	80019b2 <cubemx_transport_write+0x56>
 80019ac:	2300      	movs	r3, #0
 80019ae:	e000      	b.n	80019b2 <cubemx_transport_write+0x56>
    }else{
        return 0;
 80019b0:	2300      	movs	r3, #0
    }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019d0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d6:	b672      	cpsid	i
}
 80019d8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <cubemx_transport_read+0x9c>)
 80019e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019ea:	b662      	cpsie	i
}
 80019ec:	bf00      	nop
        __enable_irq();
        ms_used++;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f00b f9d7 	bl	800cda8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <cubemx_transport_read+0xa0>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <cubemx_transport_read+0x9c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d103      	bne.n	8001a0e <cubemx_transport_read+0x52>
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbe3      	blt.n	80019d6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a12:	e011      	b.n	8001a38 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <cubemx_transport_read+0xa0>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	440b      	add	r3, r1
 8001a1e:	4910      	ldr	r1, [pc, #64]	; (8001a60 <cubemx_transport_read+0xa4>)
 8001a20:	5c8a      	ldrb	r2, [r1, r2]
 8001a22:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <cubemx_transport_read+0xa0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <cubemx_transport_read+0xa0>)
 8001a30:	6013      	str	r3, [r2, #0]
        wrote++;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <cubemx_transport_read+0xa0>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <cubemx_transport_read+0x9c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d003      	beq.n	8001a4c <cubemx_transport_read+0x90>
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3e3      	bcc.n	8001a14 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20007250 	.word	0x20007250
 8001a5c:	2000724c 	.word	0x2000724c
 8001a60:	20006a4c 	.word	0x20006a4c

08001a64 <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001a6c:	f7ff f9d4 	bl	8000e18 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001a80:	f7ff f9d0 	bl	8000e24 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001a94:	f7ff f9c0 	bl	8000e18 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001aa8:	f7ff f9bc 	bl	8000e24 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001abc:	f7ff f9ac 	bl	8000e18 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001ad0:	f7ff f9a8 	bl	8000e24 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff f9a2 	bl	8000e30 <WhenCANRxFifo0MsgPending>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20007340 	.word	0x20007340

08001af8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001afc:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <MX_FREERTOS_Init+0x48>)
 8001afe:	2100      	movs	r1, #0
 8001b00:	4810      	ldr	r0, [pc, #64]	; (8001b44 <MX_FREERTOS_Init+0x4c>)
 8001b02:	f00b f8ab 	bl	800cc5c <osThreadNew>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <MX_FREERTOS_Init+0x50>)
 8001b0a:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <MX_FREERTOS_Init+0x54>)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	480f      	ldr	r0, [pc, #60]	; (8001b50 <MX_FREERTOS_Init+0x58>)
 8001b12:	f00b f8a3 	bl	800cc5c <osThreadNew>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <MX_FREERTOS_Init+0x5c>)
 8001b1a:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <MX_FREERTOS_Init+0x60>)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	480e      	ldr	r0, [pc, #56]	; (8001b5c <MX_FREERTOS_Init+0x64>)
 8001b22:	f00b f89b 	bl	800cc5c <osThreadNew>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <MX_FREERTOS_Init+0x68>)
 8001b2a:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <MX_FREERTOS_Init+0x6c>)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_FREERTOS_Init+0x70>)
 8001b32:	f00b f893 	bl	800cc5c <osThreadNew>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <MX_FREERTOS_Init+0x74>)
 8001b3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	08023310 	.word	0x08023310
 8001b44:	08001f39 	.word	0x08001f39
 8001b48:	20007404 	.word	0x20007404
 8001b4c:	08023334 	.word	0x08023334
 8001b50:	080023b9 	.word	0x080023b9
 8001b54:	2000a344 	.word	0x2000a344
 8001b58:	08023358 	.word	0x08023358
 8001b5c:	080023f5 	.word	0x080023f5
 8001b60:	2000aba4 	.word	0x2000aba4
 8001b64:	0802337c 	.word	0x0802337c
 8001b68:	0800242d 	.word	0x0800242d
 8001b6c:	2000b404 	.word	0x2000b404

08001b70 <service_callback>:
  * @retval None
  */

//過去の遺物
void service_callback(const void *request, void *response)
{
 8001b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	60bb      	str	r3, [r7, #8]

	osDelay(1000);
 8001b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b88:	f00b f90e 	bl	800cda8 <osDelay>

	_res->sum = _req->a + _req->b + _req->c;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b98:	1884      	adds	r4, r0, r2
 8001b9a:	eb41 0503 	adc.w	r5, r1, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ba4:	eb14 0802 	adds.w	r8, r4, r2
 8001ba8:	eb45 0903 	adc.w	r9, r5, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	e9c3 8900 	strd	r8, r9, [r3]
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001bbc <subscription_callback>:

//速度司令を格納
void subscription_callback(const void * msgin)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	ed93 7b04 	vldr	d7, [r3, #16]
 8001bce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <subscription_callback+0x58>)
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	ed93 7b06 	vldr	d7, [r3, #24]
 8001bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <subscription_callback+0x58>)
 8001be4:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	ed93 7b08 	vldr	d7, [r3, #32]
 8001bee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <subscription_callback+0x58>)
 8001bf4:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001bfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <subscription_callback+0x58>)
 8001c04:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	2000bc68 	.word	0x2000bc68

08001c18 <print_int>:

//micro-rosでのデバッグ用
void print_int(int num){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	rosidl_runtime_c__String__init(&pub);
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <print_int+0x50>)
 8001c22:	f014 fa27 	bl	8016074 <rosidl_runtime_c__String__init>
	char val[12];
	snprintf(val, 12, "%d", num);
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <print_int+0x54>)
 8001c2e:	210c      	movs	r1, #12
 8001c30:	f01d fe28 	bl	801f884 <sniprintf>
	rosidl_runtime_c__String__assignn(&pub.data, val, sizeof(val));
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	220c      	movs	r2, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480a      	ldr	r0, [pc, #40]	; (8001c68 <print_int+0x50>)
 8001c3e:	f014 fa77 	bl	8016130 <rosidl_runtime_c__String__assignn>
	RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8001c42:	2200      	movs	r2, #0
 8001c44:	4908      	ldr	r1, [pc, #32]	; (8001c68 <print_int+0x50>)
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <print_int+0x58>)
 8001c48:	f010 fe8e 	bl	8012968 <rcl_publish>
 8001c4c:	6178      	str	r0, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <print_int+0x48>
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <print_int+0x5c>)
 8001c5c:	f01d fcf6 	bl	801f64c <iprintf>
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200072e8 	.word	0x200072e8
 8001c6c:	08023134 	.word	0x08023134
 8001c70:	200073fc 	.word	0x200073fc
 8001c74:	08023138 	.word	0x08023138

08001c78 <manipsub_callback>:

//マニピュレーションのためのコールバック関数群
void manipsub_callback(const void * msgin)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const manip_msgs__msg__Cmd * msub = (const manip_msgs__msg__Cmd *)msgin;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60fb      	str	r3, [r7, #12]

	  print_int(msub->num);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ffc3 	bl	8001c18 <print_int>
	  print_int(msub->top_base_arm);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ffbc 	bl	8001c18 <print_int>
	  print_int(msub->top_base_hand);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ffb5 	bl	8001c18 <print_int>

	  work_arm_deployer(msub->work_arm_deploy);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f000 f834 	bl	8001d24 <work_arm_deployer>
	  work_arm_setter(msub->work_arm);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f000 f899 	bl	8001dfc <work_arm_setter>
	  work_hand_setter(msub->work_hand);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f000 f872 	bl	8001dbc <work_hand_setter>
	  base1_arm_setter(msub->top_base_arm);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f000 f8ab 	bl	8001e3c <base1_arm_setter>
	  base1_hand_setter(msub->top_base_hand);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f000 f8c2 	bl	8001e78 <base1_hand_setter>
	  base2_arm_setter(msub->bottom_base_arm);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f000 f8db 	bl	8001eb8 <base2_arm_setter>
	  base2_hand_setter(msub->bottom_base_hand);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f000 f8f2 	bl	8001ef4 <base2_hand_setter>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <manipsub_callback+0xa8>)
 8001d14:	f002 fdfb 	bl	800490e <HAL_GPIO_TogglePin>
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020400 	.word	0x40020400

08001d24 <work_arm_deployer>:

void work_arm_deployer(int state){//state:{0:close,1:open}
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <work_arm_deployer+0x40>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8001d32:	491c      	ldr	r1, [pc, #112]	; (8001da4 <work_arm_deployer+0x80>)
 8001d34:	481c      	ldr	r0, [pc, #112]	; (8001da8 <work_arm_deployer+0x84>)
 8001d36:	f7ff f9e2 	bl	80010fe <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 8001d3a:	2064      	movs	r0, #100	; 0x64
 8001d3c:	f00b f834 	bl	800cda8 <osDelay>
		ServoDriver_SendValue(&servo_device1, 45.0f);
 8001d40:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001dac <work_arm_deployer+0x88>
 8001d44:	4818      	ldr	r0, [pc, #96]	; (8001da8 <work_arm_deployer+0x84>)
 8001d46:	f7ff fa1c 	bl	8001182 <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8001d4a:	4919      	ldr	r1, [pc, #100]	; (8001db0 <work_arm_deployer+0x8c>)
 8001d4c:	4819      	ldr	r0, [pc, #100]	; (8001db4 <work_arm_deployer+0x90>)
 8001d4e:	f7ff f9d6 	bl	80010fe <ServoDriver_Init>
		osDelay(100);
 8001d52:	2064      	movs	r0, #100	; 0x64
 8001d54:	f00b f828 	bl	800cda8 <osDelay>
		ServoDriver_SendValue(&servo_device2, 135.0f);
 8001d58:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001db8 <work_arm_deployer+0x94>
 8001d5c:	4815      	ldr	r0, [pc, #84]	; (8001db4 <work_arm_deployer+0x90>)
 8001d5e:	f7ff fa10 	bl	8001182 <ServoDriver_SendValue>
		ServoDriver_SendValue(&servo_device2, 45.0f);
		ServoDriver_Init(&servo_device1, &servo_param1);
		osDelay(100);
		ServoDriver_SendValue(&servo_device1, 135.0f);
	}
}
 8001d62:	e01a      	b.n	8001d9a <work_arm_deployer+0x76>
	}else if(state == 1){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d117      	bne.n	8001d9a <work_arm_deployer+0x76>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8001d6a:	4911      	ldr	r1, [pc, #68]	; (8001db0 <work_arm_deployer+0x8c>)
 8001d6c:	4811      	ldr	r0, [pc, #68]	; (8001db4 <work_arm_deployer+0x90>)
 8001d6e:	f7ff f9c6 	bl	80010fe <ServoDriver_Init>
		osDelay(100);
 8001d72:	2064      	movs	r0, #100	; 0x64
 8001d74:	f00b f818 	bl	800cda8 <osDelay>
		ServoDriver_SendValue(&servo_device2, 45.0f);
 8001d78:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001dac <work_arm_deployer+0x88>
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <work_arm_deployer+0x90>)
 8001d7e:	f7ff fa00 	bl	8001182 <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <work_arm_deployer+0x80>)
 8001d84:	4808      	ldr	r0, [pc, #32]	; (8001da8 <work_arm_deployer+0x84>)
 8001d86:	f7ff f9ba 	bl	80010fe <ServoDriver_Init>
		osDelay(100);
 8001d8a:	2064      	movs	r0, #100	; 0x64
 8001d8c:	f00b f80c 	bl	800cda8 <osDelay>
		ServoDriver_SendValue(&servo_device1, 135.0f);
 8001d90:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001db8 <work_arm_deployer+0x94>
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <work_arm_deployer+0x84>)
 8001d96:	f7ff f9f4 	bl	8001182 <ServoDriver_SendValue>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200073c8 	.word	0x200073c8
 8001da8:	200073dc 	.word	0x200073dc
 8001dac:	42340000 	.word	0x42340000
 8001db0:	200073e0 	.word	0x200073e0
 8001db4:	200073f4 	.word	0x200073f4
 8001db8:	43070000 	.word	0x43070000

08001dbc <work_hand_setter>:

void work_hand_setter(int state){//state:{0:open,1:close}
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d107      	bne.n	8001dda <work_hand_setter+0x1e>
		  air_device.device_num=1;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <work_hand_setter+0x3c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4809      	ldr	r0, [pc, #36]	; (8001df8 <work_hand_setter+0x3c>)
 8001dd4:	f7ff f9f0 	bl	80011b8 <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=1;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8001dd8:	e009      	b.n	8001dee <work_hand_setter+0x32>
	  }else if(state == 1){
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <work_hand_setter+0x32>
		  air_device.device_num=1;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <work_hand_setter+0x3c>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8001de6:	2101      	movs	r1, #1
 8001de8:	4803      	ldr	r0, [pc, #12]	; (8001df8 <work_hand_setter+0x3c>)
 8001dea:	f7ff f9e5 	bl	80011b8 <AirCylinder_SendOutput>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200073f8 	.word	0x200073f8

08001dfc <work_arm_setter>:

void work_arm_setter(int state){//state:{0:up,1:down}
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <work_arm_setter+0x1e>
		  air_device.device_num=0;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <work_arm_setter+0x3c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8001e10:	2100      	movs	r1, #0
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <work_arm_setter+0x3c>)
 8001e14:	f7ff f9d0 	bl	80011b8 <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=0;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8001e18:	e009      	b.n	8001e2e <work_arm_setter+0x32>
	  }else if(state == 1){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <work_arm_setter+0x32>
		  air_device.device_num=0;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <work_arm_setter+0x3c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8001e26:	2101      	movs	r1, #1
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <work_arm_setter+0x3c>)
 8001e2a:	f7ff f9c5 	bl	80011b8 <AirCylinder_SendOutput>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200073f8 	.word	0x200073f8

08001e3c <base1_arm_setter>:

void base1_arm_setter(int state){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <base1_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M5_struct,0.0f);
 8001e4a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001e70 <base1_arm_setter+0x34>
 8001e4e:	4809      	ldr	r0, [pc, #36]	; (8001e74 <base1_arm_setter+0x38>)
 8001e50:	f7ff f93e 	bl	80010d0 <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
	}
}
 8001e54:	e007      	b.n	8001e66 <base1_arm_setter+0x2a>
	}else if(state == 1){
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d104      	bne.n	8001e66 <base1_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
 8001e5c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <base1_arm_setter+0x38>)
 8001e62:	f7ff f935 	bl	80010d0 <MCMD_SetTarget>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	00000000 	.word	0x00000000
 8001e74:	20007348 	.word	0x20007348

08001e78 <base1_hand_setter>:

void base1_hand_setter(int state){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <base1_hand_setter+0x1e>
		air_device.device_num=3;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <base1_hand_setter+0x3c>)
 8001e88:	2203      	movs	r2, #3
 8001e8a:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <base1_hand_setter+0x3c>)
 8001e90:	f7ff f992 	bl	80011b8 <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=3;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8001e94:	e009      	b.n	8001eaa <base1_hand_setter+0x32>
		}else if(state == 1){
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <base1_hand_setter+0x32>
			air_device.device_num=3;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <base1_hand_setter+0x3c>)
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <base1_hand_setter+0x3c>)
 8001ea6:	f7ff f987 	bl	80011b8 <AirCylinder_SendOutput>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200073f8 	.word	0x200073f8

08001eb8 <base2_arm_setter>:

void base2_arm_setter(int state){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <base2_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M6_struct,0.0f);
 8001ec6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001eec <base2_arm_setter+0x34>
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <base2_arm_setter+0x38>)
 8001ecc:	f7ff f900 	bl	80010d0 <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
	}
}
 8001ed0:	e007      	b.n	8001ee2 <base2_arm_setter+0x2a>
	}else if(state == 1){
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d104      	bne.n	8001ee2 <base2_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
 8001ed8:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <base2_arm_setter+0x38>)
 8001ede:	f7ff f8f7 	bl	80010d0 <MCMD_SetTarget>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	00000000 	.word	0x00000000
 8001ef0:	20007388 	.word	0x20007388

08001ef4 <base2_hand_setter>:

void base2_hand_setter(int state){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <base2_hand_setter+0x1e>
		air_device.device_num=2;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <base2_hand_setter+0x3c>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4809      	ldr	r0, [pc, #36]	; (8001f30 <base2_hand_setter+0x3c>)
 8001f0c:	f7ff f954 	bl	80011b8 <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=2;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8001f10:	e009      	b.n	8001f26 <base2_hand_setter+0x32>
		}else if(state == 1){
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <base2_hand_setter+0x32>
			air_device.device_num=2;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <base2_hand_setter+0x3c>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <base2_hand_setter+0x3c>)
 8001f22:	f7ff f949 	bl	80011b8 <AirCylinder_SendOutput>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200073f8 	.word	0x200073f8
 8001f34:	00000000 	.word	0x00000000

08001f38 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b0f2      	sub	sp, #456	; 0x1c8
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f42:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f46:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f48:	f00d fc10 	bl	800f76c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの設定
  	rmw_uros_set_custom_transport(
 8001f4c:	4bd2      	ldr	r3, [pc, #840]	; (8002298 <StartDefaultTask+0x360>)
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	4bd2      	ldr	r3, [pc, #840]	; (800229c <StartDefaultTask+0x364>)
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	4bd2      	ldr	r3, [pc, #840]	; (80022a0 <StartDefaultTask+0x368>)
 8001f56:	4ad3      	ldr	r2, [pc, #844]	; (80022a4 <StartDefaultTask+0x36c>)
 8001f58:	49d3      	ldr	r1, [pc, #844]	; (80022a8 <StartDefaultTask+0x370>)
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f012 fabe 	bl	80144dc <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001f60:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001f64:	4618      	mov	r0, r3
 8001f66:	f011 ff4f 	bl	8013e08 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8001f6a:	4bd0      	ldr	r3, [pc, #832]	; (80022ac <StartDefaultTask+0x374>)
 8001f6c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8001f70:	4bcf      	ldr	r3, [pc, #828]	; (80022b0 <StartDefaultTask+0x378>)
 8001f72:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	freeRTOS_allocator.reallocate = microros_reallocate;
 8001f76:	4bcf      	ldr	r3, [pc, #828]	; (80022b4 <StartDefaultTask+0x37c>)
 8001f78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001f7c:	4bce      	ldr	r3, [pc, #824]	; (80022b8 <StartDefaultTask+0x380>)
 8001f7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001f82:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001f86:	4618      	mov	r0, r3
 8001f88:	f011 ff4c 	bl	8013e24 <rcutils_set_default_allocator>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8001f98:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8001f9c:	48c7      	ldr	r0, [pc, #796]	; (80022bc <StartDefaultTask+0x384>)
 8001f9e:	f01d fb55 	bl	801f64c <iprintf>
  	}

  	osDelay(100);
 8001fa2:	2064      	movs	r0, #100	; 0x64
 8001fa4:	f00a ff00 	bl	800cda8 <osDelay>

  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8001fa8:	4bc5      	ldr	r3, [pc, #788]	; (80022c0 <StartDefaultTask+0x388>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6898      	ldr	r0, [r3, #8]
 8001fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f01d fbb7 	bl	801f728 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8001fba:	f010 f955 	bl	8012268 <rcl_get_zero_initialized_init_options>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8001fc4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f011 ff49 	bl	8013e60 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8001fce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f010 fa50 	bl	8012478 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8001fd8:	f010 fd0c 	bl	80129f4 <rcl_get_zero_initialized_service>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  	publisher = rcl_get_zero_initialized_publisher();
 8001fe2:	f010 fbf3 	bl	80127cc <rcl_get_zero_initialized_publisher>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4ab6      	ldr	r2, [pc, #728]	; (80022c4 <StartDefaultTask+0x38c>)
 8001fea:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 8001fec:	f010 fe26 	bl	8012c3c <rcl_get_zero_initialized_subscription>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  	rcl_subscription_t manipsub = rcl_get_zero_initialized_subscription();
 8001ff6:	f010 fe21 	bl	8012c3c <rcl_get_zero_initialized_subscription>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8002000:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002004:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002008:	4618      	mov	r0, r3
 800200a:	f011 faa7 	bl	801355c <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 800200e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002012:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002016:	4618      	mov	r0, r3
 8002018:	f010 fba8 	bl	801276c <rcl_node_get_default_options>

  	osDelay(100);
 800201c:	2064      	movs	r0, #100	; 0x64
 800201e:	f00a fec3 	bl	800cda8 <osDelay>

  	//ノードの設定
  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002022:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 8002026:	466a      	mov	r2, sp
 8002028:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800202c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002030:	e882 0003 	stmia.w	r2, {r0, r1}
 8002034:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8002038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203a:	4620      	mov	r0, r4
 800203c:	f010 f916 	bl	801226c <rcl_init_options_init>
 8002040:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
 8002044:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <StartDefaultTask+0x122>
 800204c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002050:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8002054:	489c      	ldr	r0, [pc, #624]	; (80022c8 <StartDefaultTask+0x390>)
 8002056:	f01d faf9 	bl	801f64c <iprintf>
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 800205a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f010 fa01 	bl	8012468 <rcl_init_options_set_domain_id>
 8002066:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
 800206a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <StartDefaultTask+0x148>
 8002072:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002076:	f240 21f1 	movw	r1, #753	; 0x2f1
 800207a:	4893      	ldr	r0, [pc, #588]	; (80022c8 <StartDefaultTask+0x390>)
 800207c:	f01d fae6 	bl	801f64c <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002080:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002084:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8002088:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	f011 fd90 	bl	8013bb8 <rclc_support_init_with_options>
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8002098:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800209c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80020a0:	f107 0320 	add.w	r3, r7, #32
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	4a88      	ldr	r2, [pc, #544]	; (80022cc <StartDefaultTask+0x394>)
 80020aa:	4989      	ldr	r1, [pc, #548]	; (80022d0 <StartDefaultTask+0x398>)
 80020ac:	f011 fdba 	bl	8013c24 <rclc_node_init_with_options>
 80020b0:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 80020b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <StartDefaultTask+0x192>
 80020bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020c0:	f240 21f3 	movw	r1, #755	; 0x2f3
 80020c4:	4880      	ldr	r0, [pc, #512]	; (80022c8 <StartDefaultTask+0x390>)
 80020c6:	f01d fac1 	bl	801f64c <iprintf>
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 80020ca:	f00e f8af 	bl	801022c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80020d4:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 80020d8:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <StartDefaultTask+0x39c>)
 80020da:	f011 fe19 	bl	8013d10 <rclc_service_init_default>
 80020de:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 80020e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <StartDefaultTask+0x1c0>
 80020ea:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80020ee:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80020f2:	4875      	ldr	r0, [pc, #468]	; (80022c8 <StartDefaultTask+0x390>)
 80020f4:	f01d faaa 	bl	801f64c <iprintf>

	RCCHECK(rclc_publisher_init_default(
 80020f8:	f014 f8aa 	bl	8016250 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002102:	4b75      	ldr	r3, [pc, #468]	; (80022d8 <StartDefaultTask+0x3a0>)
 8002104:	486f      	ldr	r0, [pc, #444]	; (80022c4 <StartDefaultTask+0x38c>)
 8002106:	f011 fdc9 	bl	8013c9c <rclc_publisher_init_default>
 800210a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 800210e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <StartDefaultTask+0x1ec>
 8002116:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800211a:	f240 21f6 	movw	r1, #758	; 0x2f6
 800211e:	486a      	ldr	r0, [pc, #424]	; (80022c8 <StartDefaultTask+0x390>)
 8002120:	f01d fa94 	bl	801f64c <iprintf>
	  &publisher,
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

		RCCHECK(rclc_publisher_init_default(
 8002124:	f00e f9b2 	bl	801048c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 8002128:	4602      	mov	r2, r0
 800212a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800212e:	4b6b      	ldr	r3, [pc, #428]	; (80022dc <StartDefaultTask+0x3a4>)
 8002130:	486b      	ldr	r0, [pc, #428]	; (80022e0 <StartDefaultTask+0x3a8>)
 8002132:	f011 fdb3 	bl	8013c9c <rclc_publisher_init_default>
 8002136:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 800213a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <StartDefaultTask+0x218>
 8002142:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002146:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 800214a:	485f      	ldr	r0, [pc, #380]	; (80022c8 <StartDefaultTask+0x390>)
 800214c:	f01d fa7e 	bl	801f64c <iprintf>
		  &encpublisher,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002150:	f00e f984 	bl	801045c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 8002154:	4602      	mov	r2, r0
 8002156:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800215a:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800215e:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <StartDefaultTask+0x3ac>)
 8002160:	f011 fe10 	bl	8013d84 <rclc_subscription_init_default>
 8002164:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8002168:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <StartDefaultTask+0x246>
 8002170:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002174:	f240 3102 	movw	r1, #770	; 0x302
 8002178:	4853      	ldr	r0, [pc, #332]	; (80022c8 <StartDefaultTask+0x390>)
 800217a:	f01d fa67 	bl	801f64c <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));

		RCCHECK(rclc_subscription_init_default(
 800217e:	f00e fb93 	bl	80108a8 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>
 8002182:	4602      	mov	r2, r0
 8002184:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002188:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800218c:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <StartDefaultTask+0x3b0>)
 800218e:	f011 fdf9 	bl	8013d84 <rclc_subscription_init_default>
 8002192:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8002196:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <StartDefaultTask+0x274>
 800219e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80021a2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80021a6:	4848      	ldr	r0, [pc, #288]	; (80022c8 <StartDefaultTask+0x390>)
 80021a8:	f01d fa50 	bl	801f64c <iprintf>
		  &manipsub,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(manip_msgs, msg, Cmd),
		  "/manip_cmd_f7"));

		RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 80021ac:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80021b0:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80021b4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80021b8:	2203      	movs	r2, #3
 80021ba:	f011 f9d9 	bl	8013570 <rclc_executor_init>
 80021be:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 80021c2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <StartDefaultTask+0x2a0>
 80021ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80021ce:	f240 310e 	movw	r1, #782	; 0x30e
 80021d2:	483d      	ldr	r0, [pc, #244]	; (80022c8 <StartDefaultTask+0x390>)
 80021d4:	f01d fa3a 	bl	801f64c <iprintf>

  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 80021d8:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80021dc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <StartDefaultTask+0x3b4>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <StartDefaultTask+0x3b8>)
 80021e6:	4a43      	ldr	r2, [pc, #268]	; (80022f4 <StartDefaultTask+0x3bc>)
 80021e8:	f011 fa7c 	bl	80136e4 <rclc_executor_add_service>
 80021ec:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 80021f0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <StartDefaultTask+0x2ce>
 80021f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021fc:	f44f 7144 	mov.w	r1, #784	; 0x310
 8002200:	4831      	ldr	r0, [pc, #196]	; (80022c8 <StartDefaultTask+0x390>)
 8002202:	f01d fa23 	bl	801f64c <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8002206:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800220a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <StartDefaultTask+0x3c0>)
 8002214:	4a39      	ldr	r2, [pc, #228]	; (80022fc <StartDefaultTask+0x3c4>)
 8002216:	f011 fa27 	bl	8013668 <rclc_executor_add_subscription>
 800221a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 800221e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <StartDefaultTask+0x2fc>
 8002226:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800222a:	f240 3111 	movw	r1, #785	; 0x311
 800222e:	4826      	ldr	r0, [pc, #152]	; (80022c8 <StartDefaultTask+0x390>)
 8002230:	f01d fa0c 	bl	801f64c <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));
  	RCCHECK(rclc_executor_add_subscription(
 8002234:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002238:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800223c:	2300      	movs	r3, #0
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <StartDefaultTask+0x3c8>)
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <StartDefaultTask+0x3cc>)
 8002244:	f011 fa10 	bl	8013668 <rclc_executor_add_subscription>
 8002248:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 800224c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <StartDefaultTask+0x32a>
 8002254:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002258:	f44f 7145 	mov.w	r1, #788	; 0x314
 800225c:	481a      	ldr	r0, [pc, #104]	; (80022c8 <StartDefaultTask+0x390>)
 800225e:	f01d f9f5 	bl	801f64c <iprintf>
  	  		  &executor, &manipsub, &msub,
  	  		  &manipsub_callback, ON_NEW_DATA));

  	osDelay(100);
 8002262:	2064      	movs	r0, #100	; 0x64
 8002264:	f00a fda0 	bl	800cda8 <osDelay>

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 8002268:	4827      	ldr	r0, [pc, #156]	; (8002308 <StartDefaultTask+0x3d0>)
 800226a:	f013 ff03 	bl	8016074 <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 800226e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002272:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002276:	4a25      	ldr	r2, [pc, #148]	; (800230c <StartDefaultTask+0x3d4>)
 8002278:	461c      	mov	r4, r3
 800227a:	4615      	mov	r5, r2
 800227c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800227e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2214      	movs	r2, #20
 800228a:	4619      	mov	r1, r3
 800228c:	481e      	ldr	r0, [pc, #120]	; (8002308 <StartDefaultTask+0x3d0>)
 800228e:	f013 ff4f 	bl	8016130 <rosidl_runtime_c__String__assignn>
    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8002292:	2200      	movs	r2, #0
 8002294:	e03c      	b.n	8002310 <StartDefaultTask+0x3d8>
 8002296:	bf00      	nop
 8002298:	080019bd 	.word	0x080019bd
 800229c:	0800195d 	.word	0x0800195d
 80022a0:	0800193d 	.word	0x0800193d
 80022a4:	08001911 	.word	0x08001911
 80022a8:	2000bd30 	.word	0x2000bd30
 80022ac:	080026cd 	.word	0x080026cd
 80022b0:	08002711 	.word	0x08002711
 80022b4:	08002749 	.word	0x08002749
 80022b8:	080027b5 	.word	0x080027b5
 80022bc:	08023164 	.word	0x08023164
 80022c0:	200009a0 	.word	0x200009a0
 80022c4:	200073fc 	.word	0x200073fc
 80022c8:	0802318c 	.word	0x0802318c
 80022cc:	080231b8 	.word	0x080231b8
 80022d0:	080231bc 	.word	0x080231bc
 80022d4:	080231c4 	.word	0x080231c4
 80022d8:	080231d4 	.word	0x080231d4
 80022dc:	080231e4 	.word	0x080231e4
 80022e0:	20007400 	.word	0x20007400
 80022e4:	080231f0 	.word	0x080231f0
 80022e8:	08023200 	.word	0x08023200
 80022ec:	08001b71 	.word	0x08001b71
 80022f0:	20007270 	.word	0x20007270
 80022f4:	20007258 	.word	0x20007258
 80022f8:	08001bbd 	.word	0x08001bbd
 80022fc:	20007278 	.word	0x20007278
 8002300:	08001c79 	.word	0x08001c79
 8002304:	200072a8 	.word	0x200072a8
 8002308:	200072e8 	.word	0x200072e8
 800230c:	08023228 	.word	0x08023228
 8002310:	4921      	ldr	r1, [pc, #132]	; (8002398 <StartDefaultTask+0x460>)
 8002312:	4822      	ldr	r0, [pc, #136]	; (800239c <StartDefaultTask+0x464>)
 8002314:	f010 fb28 	bl	8012968 <rcl_publish>
 8002318:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 800231c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <StartDefaultTask+0x3fa>
 8002324:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002328:	f240 311e 	movw	r1, #798	; 0x31e
 800232c:	481c      	ldr	r0, [pc, #112]	; (80023a0 <StartDefaultTask+0x468>)
 800232e:	f01d f98d 	bl	801f64c <iprintf>

    //ピンの初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	481b      	ldr	r0, [pc, #108]	; (80023a4 <StartDefaultTask+0x46c>)
 8002338:	f002 fad0 	bl	80048dc <HAL_GPIO_WritePin>
//	mcmdMoter8Setting();
//	servo1Setting();
//	servo2Setting();
//	airSetting();

	printf("All Setting Finished\r\n");
 800233c:	481a      	ldr	r0, [pc, #104]	; (80023a8 <StartDefaultTask+0x470>)
 800233e:	f01d f9eb 	bl	801f718 <puts>
	finishCANsetting = true;
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <StartDefaultTask+0x474>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	f00a fd2d 	bl	800cda8 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800234e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002352:	a30f      	add	r3, pc, #60	; (adr r3, 8002390 <StartDefaultTask+0x458>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	4608      	mov	r0, r1
 800235a:	f011 fbf3 	bl	8013b44 <rclc_executor_spin_some>
	  RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));//printfを見たいときはコメントアウト
 800235e:	2200      	movs	r2, #0
 8002360:	4913      	ldr	r1, [pc, #76]	; (80023b0 <StartDefaultTask+0x478>)
 8002362:	4814      	ldr	r0, [pc, #80]	; (80023b4 <StartDefaultTask+0x47c>)
 8002364:	f010 fb00 	bl	8012968 <rcl_publish>
 8002368:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 800236c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <StartDefaultTask+0x44a>
 8002374:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002378:	f240 313a 	movw	r1, #826	; 0x33a
 800237c:	4808      	ldr	r0, [pc, #32]	; (80023a0 <StartDefaultTask+0x468>)
 800237e:	f01d f965 	bl	801f64c <iprintf>

	  osDelay(10);
 8002382:	200a      	movs	r0, #10
 8002384:	f00a fd10 	bl	800cda8 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8002388:	e7e1      	b.n	800234e <StartDefaultTask+0x416>
 800238a:	bf00      	nop
 800238c:	f3af 8000 	nop.w
 8002390:	05f5e100 	.word	0x05f5e100
 8002394:	00000000 	.word	0x00000000
 8002398:	200072e8 	.word	0x200072e8
 800239c:	200073fc 	.word	0x200073fc
 80023a0:	08023138 	.word	0x08023138
 80023a4:	40020400 	.word	0x40020400
 80023a8:	08023210 	.word	0x08023210
 80023ac:	2000bc64 	.word	0x2000bc64
 80023b0:	200072f8 	.word	0x200072f8
 80023b4:	20007400 	.word	0x20007400

080023b8 <StartSysCheckTask>:
	  air_device.device_num=1;
	  AirCylinder_SendOutput(&air_device, AIR_OFF);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <StartSysCheckTask+0x34>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <StartSysCheckTask+0x2c>
		  if(!finishCheck){
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <StartSysCheckTask+0x38>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f083 0301 	eor.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <StartSysCheckTask+0x2c>
			  osDelay(1000);//このdelayは必要？
 80023d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023da:	f00a fce5 	bl	800cda8 <osDelay>
			  //mcmdMotorCecker(&mcmd4M1_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
			  //mcmdMotorCecker(&mcmd4M2_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
			  //mcmdMotorCecker(&mcmd4M3_struct,MCMD_CTRL_VEL,-2.0f,10000,0.0f);
			  //mcmdMotorCecker(&mcmd4M4_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);

			  finishCheck = true;
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <StartSysCheckTask+0x38>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
//	  mcmdEncChecker(&mcmdM2_fb,&mcmd4M2_struct,100);
//	  mcmdEncChecker(&mcmdM3_fb,&mcmd4M3_struct,100);
//	  mcmdEncChecker(&mcmdM4_fb,&mcmd4M4_struct,100);
//	  mcmdEncChecker(&mcmdM5_fb,&mcmd4M5_struct,100);
//	  mcmdEncChecker(&mcmdM6_fb,&mcmd4M6_struct,100);
	  osDelay(10);
 80023e4:	200a      	movs	r0, #10
 80023e6:	f00a fcdf 	bl	800cda8 <osDelay>
	  if(finishCANsetting){
 80023ea:	e7e9      	b.n	80023c0 <StartSysCheckTask+0x8>
 80023ec:	2000bc64 	.word	0x2000bc64
 80023f0:	2000bc78 	.word	0x2000bc78

080023f4 <StartMotorRunTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorRunTask */
void StartMotorRunTask(void *argument)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //motorRun();

    osDelay(10);
 80023fc:	200a      	movs	r0, #10
 80023fe:	f00a fcd3 	bl	800cda8 <osDelay>
 8002402:	e7fb      	b.n	80023fc <StartMotorRunTask+0x8>

08002404 <read_encoder_value>:
* @param argument: Not used
* @retval None
*/

int16_t read_encoder_value(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
  uint16_t enc_buff = TIM1->CNT;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <read_encoder_value+0x24>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	80fb      	strh	r3, [r7, #6]
  TIM1->CNT = 0;//初期化
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <read_encoder_value+0x24>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
  return (int16_t)enc_buff;
 8002416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40010000 	.word	0x40010000

0800242c <StartEncorderTask>:
char usr_buf[1000];
int64_t count;
float quant_per_unit = 1.0/4096.0f;
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 800242c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncorderTask */
	//エンコーダーの読み取りをスタート
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002436:	213c      	movs	r1, #60	; 0x3c
 8002438:	4816      	ldr	r0, [pc, #88]	; (8002494 <StartEncorderTask+0x68>)
 800243a:	f005 f839 	bl	80074b0 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  for(;;)
  {
	  count += read_encoder_value();
 800243e:	f7ff ffe1 	bl	8002404 <read_encoder_value>
 8002442:	4603      	mov	r3, r0
 8002444:	b21b      	sxth	r3, r3
 8002446:	17da      	asrs	r2, r3, #31
 8002448:	461c      	mov	r4, r3
 800244a:	4615      	mov	r5, r2
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <StartEncorderTask+0x6c>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	eb14 0802 	adds.w	r8, r4, r2
 8002456:	eb45 0903 	adc.w	r9, r5, r3
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <StartEncorderTask+0x6c>)
 800245c:	e9c3 8900 	strd	r8, r9, [r3]

//	  enc.encfontright = Get_MCMD_Feedback(&(mcmd4M1_struct.device)).value;
//	  enc.encfrontleft = Get_MCMD_Feedback(&(mcmd4M2_struct.device)).value;
//	  enc.encbackright = Get_MCMD_Feedback(&(mcmd4M3_struct.device)).value;
//	  enc.encbackleft = Get_MCMD_Feedback(&(mcmd4M4_struct.device)).value;
	  enc.enclx = (int)(count*quant_per_unit);
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <StartEncorderTask+0x6c>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe f9dd 	bl	8000828 <__aeabi_l2f>
 800246e:	ee07 0a10 	vmov	s14, r0
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <StartEncorderTask+0x70>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002480:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <StartEncorderTask+0x74>)
 8002486:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
//	  enc.encly = 0.0f;
//	  enc.encadditional = Get_MCMD_Feedback(&(mcmd4M6_struct.device)).value;

    osDelay(100);
 800248a:	2064      	movs	r0, #100	; 0x64
 800248c:	f00a fc8c 	bl	800cda8 <osDelay>
	  count += read_encoder_value();
 8002490:	e7d5      	b.n	800243e <StartEncorderTask+0x12>
 8002492:	bf00      	nop
 8002494:	2000bce4 	.word	0x2000bce4
 8002498:	2000bc80 	.word	0x2000bc80
 800249c:	20000000 	.word	0x20000000
 80024a0:	200072f8 	.word	0x200072f8

080024a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a29      	ldr	r2, [pc, #164]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a23      	ldr	r2, [pc, #140]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024d8:	f043 0310 	orr.w	r3, r3, #16
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <MX_GPIO_Init+0xc0>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <MX_GPIO_Init+0xc0>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a17      	ldr	r2, [pc, #92]	; (8002564 <MX_GPIO_Init+0xc0>)
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <MX_GPIO_Init+0xc0>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <MX_GPIO_Init+0xc0>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a11      	ldr	r2, [pc, #68]	; (8002564 <MX_GPIO_Init+0xc0>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_GPIO_Init+0xc0>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 8002532:	2200      	movs	r2, #0
 8002534:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8002538:	480b      	ldr	r0, [pc, #44]	; (8002568 <MX_GPIO_Init+0xc4>)
 800253a:	f002 f9cf 	bl	80048dc <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 800253e:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8002542:	617b      	str	r3, [r7, #20]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_GPIO_Init+0xc4>)
 8002558:	f002 f814 	bl	8004584 <HAL_GPIO_Init>

}
 800255c:	bf00      	nop
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	40020400 	.word	0x40020400

0800256c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8002576:	1df9      	adds	r1, r7, #7
 8002578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800257c:	2201      	movs	r2, #1
 800257e:	4804      	ldr	r0, [pc, #16]	; (8002590 <__io_putchar+0x24>)
 8002580:	f005 fb2c 	bl	8007bdc <HAL_UART_Transmit>
    return ch;
 8002584:	79fb      	ldrb	r3, [r7, #7]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000bd30 	.word	0x2000bd30

08002594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002598:	f000 fda5 	bl	80030e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800259c:	f000 f812 	bl	80025c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a0:	f7ff ff80 	bl	80024a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80025a4:	f7ff f98e 	bl	80018c4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80025a8:	f000 fc74 	bl	8002e94 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80025ac:	f000 fbd4 	bl	8002d58 <MX_TIM1_Init>
  MX_CAN1_Init();
 80025b0:	f7fe fea2 	bl	80012f8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80025b4:	f00a fae8 	bl	800cb88 <osKernelInitialize>
  MX_FREERTOS_Init();
 80025b8:	f7ff fa9e 	bl	8001af8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80025bc:	f00a fb18 	bl	800cbf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <main+0x2c>
	...

080025c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b094      	sub	sp, #80	; 0x50
 80025c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ca:	f107 031c 	add.w	r3, r7, #28
 80025ce:	2234      	movs	r2, #52	; 0x34
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f01d fae6 	bl	801fba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b2c      	ldr	r3, [pc, #176]	; (800269c <SystemClock_Config+0xd8>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	4a2b      	ldr	r2, [pc, #172]	; (800269c <SystemClock_Config+0xd8>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6413      	str	r3, [r2, #64]	; 0x40
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <SystemClock_Config+0xd8>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <SystemClock_Config+0xdc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002608:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <SystemClock_Config+0xdc>)
 800260a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <SystemClock_Config+0xdc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800261c:	2301      	movs	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002626:	2302      	movs	r3, #2
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800262a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800262e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002630:	2304      	movs	r3, #4
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002634:	2360      	movs	r3, #96	; 0x60
 8002636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002638:	2302      	movs	r3, #2
 800263a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800263c:	2304      	movs	r3, #4
 800263e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002640:	2302      	movs	r3, #2
 8002642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fc83 	bl	8005f54 <HAL_RCC_OscConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002654:	f000 f835 	bl	80026c2 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002658:	f003 fc2c 	bl	8005eb4 <HAL_PWREx_EnableOverDrive>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002662:	f000 f82e 	bl	80026c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002666:	230f      	movs	r3, #15
 8002668:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266a:	2302      	movs	r3, #2
 800266c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	2103      	movs	r1, #3
 8002684:	4618      	mov	r0, r3
 8002686:	f003 ff13 	bl	80064b0 <HAL_RCC_ClockConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002690:	f000 f817 	bl	80026c2 <Error_Handler>
  }
}
 8002694:	bf00      	nop
 8002696:	3750      	adds	r7, #80	; 0x50
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	40007000 	.word	0x40007000

080026a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b4:	d101      	bne.n	80026ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026b6:	f000 fd23 	bl	8003100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80026c6:	b672      	cpsid	i
}
 80026c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026ca:	e7fe      	b.n	80026ca <Error_Handler+0x8>

080026cc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <microros_allocate+0x3c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <microros_allocate+0x3c>)
 80026e4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <microros_allocate+0x40>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <microros_allocate+0x40>)
 80026f4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fe90 	bl	800141c <pvPortMallocMicroROS>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000bc88 	.word	0x2000bc88
 800270c:	2000bc8c 	.word	0x2000bc8c

08002710 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7fe ffa3 	bl	800166c <getBlockSize>
 8002726:	4603      	mov	r3, r0
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <microros_deallocate+0x34>)
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	461a      	mov	r2, r3
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <microros_deallocate+0x34>)
 8002732:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe ff3b 	bl	80015b0 <vPortFreeMicroROS>
  }
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000bc8c 	.word	0x2000bc8c

08002748 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <microros_reallocate+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4413      	add	r3, r2
 800275e:	461a      	mov	r2, r3
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <microros_reallocate+0x64>)
 8002762:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <microros_reallocate+0x68>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	461a      	mov	r2, r3
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <microros_reallocate+0x68>)
 8002772:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800277a:	68b8      	ldr	r0, [r7, #8]
 800277c:	f7fe fe4e 	bl	800141c <pvPortMallocMicroROS>
 8002780:	4603      	mov	r3, r0
 8002782:	e00e      	b.n	80027a2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7fe ff71 	bl	800166c <getBlockSize>
 800278a:	4603      	mov	r3, r0
 800278c:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <microros_reallocate+0x68>)
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	461a      	mov	r2, r3
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <microros_reallocate+0x68>)
 8002796:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7fe ff84 	bl	80016a8 <pvPortReallocMicroROS>
 80027a0:	4603      	mov	r3, r0
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000bc88 	.word	0x2000bc88
 80027b0:	2000bc8c 	.word	0x2000bc8c

080027b4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <microros_zero_allocate+0x48>)
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <microros_zero_allocate+0x48>)
 80027d2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	4a08      	ldr	r2, [pc, #32]	; (8002800 <microros_zero_allocate+0x4c>)
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <microros_zero_allocate+0x4c>)
 80027e6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7fe ff89 	bl	8001702 <pvPortCallocMicroROS>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	2000bc88 	.word	0x2000bc88
 8002800:	2000bc8c 	.word	0x2000bc8c
 8002804:	00000000 	.word	0x00000000

08002808 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800281a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800281e:	a320      	add	r3, pc, #128	; (adr r3, 80028a0 <UTILS_NanosecondsToTimespec+0x98>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fe f83e 	bl	80008a4 <__aeabi_ldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002836:	a31a      	add	r3, pc, #104	; (adr r3, 80028a0 <UTILS_NanosecondsToTimespec+0x98>)
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	f7fe f832 	bl	80008a4 <__aeabi_ldivmod>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da20      	bge.n	800288e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <UTILS_NanosecondsToTimespec+0x90>)
 8002852:	fb82 1203 	smull	r1, r2, r2, r3
 8002856:	1712      	asrs	r2, r2, #28
 8002858:	17db      	asrs	r3, r3, #31
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	6979      	ldr	r1, [r7, #20]
 8002868:	17c8      	asrs	r0, r1, #31
 800286a:	460c      	mov	r4, r1
 800286c:	4605      	mov	r5, r0
 800286e:	ebb2 0804 	subs.w	r8, r2, r4
 8002872:	eb63 0905 	sbc.w	r9, r3, r5
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	4906      	ldr	r1, [pc, #24]	; (800289c <UTILS_NanosecondsToTimespec+0x94>)
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	441a      	add	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
    }
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002898:	44b82fa1 	.word	0x44b82fa1
 800289c:	3b9aca00 	.word	0x3b9aca00
 80028a0:	3b9aca00 	.word	0x3b9aca00
 80028a4:	00000000 	.word	0x00000000

080028a8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b08e      	sub	sp, #56	; 0x38
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6278      	str	r0, [r7, #36]	; 0x24
 80028b2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80028b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028b8:	2300      	movs	r3, #0
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80028ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ce:	4618      	mov	r0, r3
 80028d0:	f00b fd68 	bl	800e3a4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	17da      	asrs	r2, r3, #31
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	61fa      	str	r2, [r7, #28]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	000b      	movs	r3, r1
 80028e8:	2200      	movs	r2, #0
 80028ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	2200      	movs	r2, #0
 80028f2:	461c      	mov	r4, r3
 80028f4:	4615      	mov	r5, r2
 80028f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028fa:	1911      	adds	r1, r2, r4
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	416b      	adcs	r3, r5
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002906:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800290a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	f04f 0500 	mov.w	r5, #0
 800291a:	015d      	lsls	r5, r3, #5
 800291c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002920:	0154      	lsls	r4, r2, #5
 8002922:	4622      	mov	r2, r4
 8002924:	462b      	mov	r3, r5
 8002926:	ebb2 0800 	subs.w	r8, r2, r0
 800292a:	eb63 0901 	sbc.w	r9, r3, r1
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800293a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800293e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002942:	4690      	mov	r8, r2
 8002944:	4699      	mov	r9, r3
 8002946:	eb18 0a00 	adds.w	sl, r8, r0
 800294a:	eb49 0b01 	adc.w	fp, r9, r1
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800295a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800295e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002962:	ebb2 040a 	subs.w	r4, r2, sl
 8002966:	603c      	str	r4, [r7, #0]
 8002968:	eb63 030b 	sbc.w	r3, r3, fp
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002972:	4623      	mov	r3, r4
 8002974:	181b      	adds	r3, r3, r0
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	462b      	mov	r3, r5
 800297a:	eb41 0303 	adc.w	r3, r1, r3
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002986:	f7ff ff3f 	bl	8002808 <UTILS_NanosecondsToTimespec>

    return 0;
 800298a:	2300      	movs	r3, #0
 800298c:	4618      	mov	r0, r3
 800298e:	3738      	adds	r7, #56	; 0x38
 8002990:	46bd      	mov	sp, r7
 8002992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_MspInit+0x4c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_MspInit+0x4c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_MspInit+0x4c>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_MspInit+0x4c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	210f      	movs	r1, #15
 80029d2:	f06f 0001 	mvn.w	r0, #1
 80029d6:	f001 f995 	bl	8003d04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80029f8:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_InitTick+0xe4>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a33      	ldr	r2, [pc, #204]	; (8002acc <HAL_InitTick+0xe4>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_InitTick+0xe4>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a10:	f107 0210 	add.w	r2, r7, #16
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 ff6e 	bl	80068fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a2a:	f003 ff3f 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8002a2e:	6378      	str	r0, [r7, #52]	; 0x34
 8002a30:	e004      	b.n	8002a3c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a32:	f003 ff3b 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8002a36:	4603      	mov	r3, r0
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <HAL_InitTick+0xe8>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	0c9b      	lsrs	r3, r3, #18
 8002a46:	3b01      	subs	r3, #1
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a58:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002a60:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002a72:	4818      	ldr	r0, [pc, #96]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a74:	f004 fb9c 	bl	80071b0 <HAL_TIM_Base_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11b      	bne.n	8002abe <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002a86:	4813      	ldr	r0, [pc, #76]	; (8002ad4 <HAL_InitTick+0xec>)
 8002a88:	f004 fbf4 	bl	8007274 <HAL_TIM_Base_Start_IT>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002a92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d111      	bne.n	8002abe <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f001 f94e 	bl	8003d3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	d808      	bhi.n	8002ab8 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	201c      	movs	r0, #28
 8002aac:	f001 f92a 	bl	8003d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ab0:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_InitTick+0xf0>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e002      	b.n	8002abe <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002abe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3738      	adds	r7, #56	; 0x38
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	431bde83 	.word	0x431bde83
 8002ad4:	2000bc90 	.word	0x2000bc90
 8002ad8:	2000000c 	.word	0x2000000c

08002adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <NMI_Handler+0x4>

08002ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <HardFault_Handler+0x4>

08002ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <MemManage_Handler+0x4>

08002aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <BusFault_Handler+0x4>

08002af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <UsageFault_Handler+0x4>

08002afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <DMA1_Stream1_IRQHandler+0x10>)
 8002b0e:	f001 fac3 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000bdb8 	.word	0x2000bdb8

08002b1c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <DMA1_Stream3_IRQHandler+0x10>)
 8002b22:	f001 fab9 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000be18 	.word	0x2000be18

08002b30 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <CAN1_TX_IRQHandler+0x10>)
 8002b36:	f000 fe39 	bl	80037ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20002e0c 	.word	0x20002e0c

08002b44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <CAN1_RX0_IRQHandler+0x10>)
 8002b4a:	f000 fe2f 	bl	80037ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20002e0c 	.word	0x20002e0c

08002b58 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <CAN1_RX1_IRQHandler+0x10>)
 8002b5e:	f000 fe25 	bl	80037ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20002e0c 	.word	0x20002e0c

08002b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <TIM2_IRQHandler+0x10>)
 8002b72:	f004 fd2b 	bl	80075cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000bc90 	.word	0x2000bc90

08002b80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b84:	4802      	ldr	r0, [pc, #8]	; (8002b90 <USART3_IRQHandler+0x10>)
 8002b86:	f005 f9ff 	bl	8007f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2000bd30 	.word	0x2000bd30

08002b94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b98:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <OTG_FS_IRQHandler+0x10>)
 8002b9a:	f002 f818 	bl	8004bce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20011ca4 	.word	0x20011ca4

08002ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_kill>:

int _kill(int pid, int sig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bc2:	f01d f887 	bl	801fcd4 <__errno>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2216      	movs	r2, #22
 8002bca:	601a      	str	r2, [r3, #0]
  return -1;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_exit>:

void _exit (int status)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffe7 	bl	8002bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bea:	e7fe      	b.n	8002bea <_exit+0x12>

08002bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e00a      	b.n	8002c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bfe:	f3af 8000 	nop.w
 8002c02:	4601      	mov	r1, r0
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	60ba      	str	r2, [r7, #8]
 8002c0a:	b2ca      	uxtb	r2, r1
 8002c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3301      	adds	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	dbf0      	blt.n	8002bfe <_read+0x12>
  }

  return len;
 8002c1c:	687b      	ldr	r3, [r7, #4]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e009      	b.n	8002c4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	60ba      	str	r2, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fc93 	bl	800256c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	dbf1      	blt.n	8002c38 <_write+0x12>
  }
  return len;
 8002c54:	687b      	ldr	r3, [r7, #4]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <_close>:

int _close(int file)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c86:	605a      	str	r2, [r3, #4]
  return 0;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <_isatty>:

int _isatty(int file)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c9e:	2301      	movs	r3, #1
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <_sbrk+0x5c>)
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <_sbrk+0x60>)
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <_sbrk+0x64>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <_sbrk+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf8:	f01c ffec 	bl	801fcd4 <__errno>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	220c      	movs	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d06:	e009      	b.n	8002d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <_sbrk+0x64>)
 8002d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20080000 	.word	0x20080000
 8002d28:	00000400 	.word	0x00000400
 8002d2c:	2000bce0 	.word	0x2000bce0
 8002d30:	20017020 	.word	0x20017020

08002d34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <SystemInit+0x20>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <SystemInit+0x20>)
 8002d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08c      	sub	sp, #48	; 0x30
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f01c ff1c 	bl	801fba4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002d78:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <MX_TIM1_Init+0xb0>)
 8002d7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d7c:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d96:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002da2:	2303      	movs	r3, #3
 8002da4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002daa:	2301      	movs	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	4619      	mov	r1, r3
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002dce:	f004 fac9 	bl	8007364 <HAL_TIM_Encoder_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002dd8:	f7ff fc73 	bl	80026c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002de8:	463b      	mov	r3, r7
 8002dea:	4619      	mov	r1, r3
 8002dec:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_TIM1_Init+0xac>)
 8002dee:	f004 fdfb 	bl	80079e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002df8:	f7ff fc63 	bl	80026c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002dfc:	bf00      	nop
 8002dfe:	3730      	adds	r7, #48	; 0x30
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000bce4 	.word	0x2000bce4
 8002e08:	40010000 	.word	0x40010000

08002e0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d128      	bne.n	8002e80 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e4c:	f043 0310 	orr.w	r3, r3, #16
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002e5e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e70:	2301      	movs	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4805      	ldr	r0, [pc, #20]	; (8002e90 <HAL_TIM_Encoder_MspInit+0x84>)
 8002e7c:	f001 fb82 	bl	8004584 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002e80:	bf00      	nop
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40021000 	.word	0x40021000

08002e94 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <MX_USART3_UART_Init+0x5c>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <MX_USART3_UART_Init+0x58>)
 8002ed8:	f004 fe32 	bl	8007b40 <HAL_UART_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ee2:	f7ff fbee 	bl	80026c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000bd30 	.word	0x2000bd30
 8002ef0:	40004800 	.word	0x40004800

08002ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0ae      	sub	sp, #184	; 0xb8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	2290      	movs	r2, #144	; 0x90
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f01c fe45 	bl	801fba4 <memset>
  if(uartHandle->Instance==USART3)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a56      	ldr	r2, [pc, #344]	; (8003078 <HAL_UART_MspInit+0x184>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	f040 80a4 	bne.w	800306e <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 fd13 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002f40:	f7ff fbbf 	bl	80026c2 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f44:	4b4d      	ldr	r3, [pc, #308]	; (800307c <HAL_UART_MspInit+0x188>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	4a4c      	ldr	r2, [pc, #304]	; (800307c <HAL_UART_MspInit+0x188>)
 8002f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f50:	4b4a      	ldr	r3, [pc, #296]	; (800307c <HAL_UART_MspInit+0x188>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5c:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_UART_MspInit+0x188>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	4a46      	ldr	r2, [pc, #280]	; (800307c <HAL_UART_MspInit+0x188>)
 8002f62:	f043 0308 	orr.w	r3, r3, #8
 8002f66:	6313      	str	r3, [r2, #48]	; 0x30
 8002f68:	4b44      	ldr	r3, [pc, #272]	; (800307c <HAL_UART_MspInit+0x188>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f8e:	2307      	movs	r3, #7
 8002f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4839      	ldr	r0, [pc, #228]	; (8003080 <HAL_UART_MspInit+0x18c>)
 8002f9c:	f001 faf2 	bl	8004584 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002fa0:	4b38      	ldr	r3, [pc, #224]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fa2:	4a39      	ldr	r2, [pc, #228]	; (8003088 <HAL_UART_MspInit+0x194>)
 8002fa4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002fa6:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fae:	4b35      	ldr	r3, [pc, #212]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb4:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fba:	4b32      	ldr	r3, [pc, #200]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fc0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002fce:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fd8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fdc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002fe4:	4827      	ldr	r0, [pc, #156]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002fe6:	f000 feb7 	bl	8003d58 <HAL_DMA_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8002ff0:	f7ff fb67 	bl	80026c2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a23      	ldr	r2, [pc, #140]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002ff8:	675a      	str	r2, [r3, #116]	; 0x74
 8002ffa:	4a22      	ldr	r2, [pc, #136]	; (8003084 <HAL_UART_MspInit+0x190>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_UART_MspInit+0x198>)
 8003002:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_UART_MspInit+0x19c>)
 8003004:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_UART_MspInit+0x198>)
 8003008:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800300c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <HAL_UART_MspInit+0x198>)
 8003010:	2240      	movs	r2, #64	; 0x40
 8003012:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_UART_MspInit+0x198>)
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_UART_MspInit+0x198>)
 800301c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003020:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_UART_MspInit+0x198>)
 8003024:	2200      	movs	r2, #0
 8003026:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_UART_MspInit+0x198>)
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_UART_MspInit+0x198>)
 8003030:	2200      	movs	r2, #0
 8003032:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_UART_MspInit+0x198>)
 8003036:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800303a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_UART_MspInit+0x198>)
 800303e:	2200      	movs	r2, #0
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003042:	4812      	ldr	r0, [pc, #72]	; (800308c <HAL_UART_MspInit+0x198>)
 8003044:	f000 fe88 	bl	8003d58 <HAL_DMA_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 800304e:	f7ff fb38 	bl	80026c2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <HAL_UART_MspInit+0x198>)
 8003056:	671a      	str	r2, [r3, #112]	; 0x70
 8003058:	4a0c      	ldr	r2, [pc, #48]	; (800308c <HAL_UART_MspInit+0x198>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800305e:	2200      	movs	r2, #0
 8003060:	2105      	movs	r1, #5
 8003062:	2027      	movs	r0, #39	; 0x27
 8003064:	f000 fe4e 	bl	8003d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003068:	2027      	movs	r0, #39	; 0x27
 800306a:	f000 fe67 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800306e:	bf00      	nop
 8003070:	37b8      	adds	r7, #184	; 0xb8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40004800 	.word	0x40004800
 800307c:	40023800 	.word	0x40023800
 8003080:	40020c00 	.word	0x40020c00
 8003084:	2000bdb8 	.word	0x2000bdb8
 8003088:	40026028 	.word	0x40026028
 800308c:	2000be18 	.word	0x2000be18
 8003090:	40026058 	.word	0x40026058

08003094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800309a:	490e      	ldr	r1, [pc, #56]	; (80030d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800309c:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a0:	e002      	b.n	80030a8 <LoopCopyDataInit>

080030a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a6:	3304      	adds	r3, #4

080030a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ac:	d3f9      	bcc.n	80030a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030b0:	4c0b      	ldr	r4, [pc, #44]	; (80030e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b4:	e001      	b.n	80030ba <LoopFillZerobss>

080030b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b8:	3204      	adds	r2, #4

080030ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030bc:	d3fb      	bcc.n	80030b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030be:	f7ff fe39 	bl	8002d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030c2:	f01c fe0d 	bl	801fce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c6:	f7ff fa65 	bl	8002594 <main>
  bx  lr    
 80030ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d4:	20000b10 	.word	0x20000b10
  ldr r2, =_sidata
 80030d8:	08024d50 	.word	0x08024d50
  ldr r2, =_sbss
 80030dc:	20000b10 	.word	0x20000b10
  ldr r4, =_ebss
 80030e0:	20017020 	.word	0x20017020

080030e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e4:	e7fe      	b.n	80030e4 <ADC_IRQHandler>

080030e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ea:	2003      	movs	r0, #3
 80030ec:	f000 fdff 	bl	8003cee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f0:	200f      	movs	r0, #15
 80030f2:	f7ff fc79 	bl	80029e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f6:	f7ff fc4f 	bl	8002998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_IncTick+0x20>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_IncTick+0x24>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4413      	add	r3, r2
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_IncTick+0x24>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000010 	.word	0x20000010
 8003124:	2000be78 	.word	0x2000be78

08003128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_GetTick+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000be78 	.word	0x2000be78

08003140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7ff ffee 	bl	8003128 <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003158:	d005      	beq.n	8003166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_Delay+0x44>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003166:	bf00      	nop
 8003168:	f7ff ffde 	bl	8003128 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	429a      	cmp	r2, r3
 8003176:	d8f7      	bhi.n	8003168 <HAL_Delay+0x28>
  {
  }
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000010 	.word	0x20000010

08003188 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0ed      	b.n	8003376 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe f8dc 	bl	8001364 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031bc:	f7ff ffb4 	bl	8003128 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031c2:	e012      	b.n	80031ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031c4:	f7ff ffb0 	bl	8003128 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b0a      	cmp	r3, #10
 80031d0:	d90b      	bls.n	80031ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2205      	movs	r2, #5
 80031e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0c5      	b.n	8003376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0e5      	beq.n	80031c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0202 	bic.w	r2, r2, #2
 8003206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003208:	f7ff ff8e 	bl	8003128 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800320e:	e012      	b.n	8003236 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003210:	f7ff ff8a 	bl	8003128 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b0a      	cmp	r3, #10
 800321c:	d90b      	bls.n	8003236 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2205      	movs	r2, #5
 800322e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e09f      	b.n	8003376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e5      	bne.n	8003210 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7e1b      	ldrb	r3, [r3, #24]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d108      	bne.n	800325e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e007      	b.n	800326e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7e5b      	ldrb	r3, [r3, #25]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d108      	bne.n	8003288 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e007      	b.n	8003298 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e9b      	ldrb	r3, [r3, #26]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d108      	bne.n	80032b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0220 	orr.w	r2, r2, #32
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e007      	b.n	80032c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0220 	bic.w	r2, r2, #32
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7edb      	ldrb	r3, [r3, #27]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0210 	bic.w	r2, r2, #16
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e007      	b.n	80032ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0210 	orr.w	r2, r2, #16
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7f1b      	ldrb	r3, [r3, #28]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d108      	bne.n	8003306 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0208 	orr.w	r2, r2, #8
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e007      	b.n	8003316 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0208 	bic.w	r2, r2, #8
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	7f5b      	ldrb	r3, [r3, #29]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d108      	bne.n	8003330 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0204 	orr.w	r2, r2, #4
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e007      	b.n	8003340 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	ea42 0103 	orr.w	r1, r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	1e5a      	subs	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800337e:	b480      	push	{r7}
 8003380:	b089      	sub	sp, #36	; 0x24
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003392:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800339c:	7ffb      	ldrb	r3, [r7, #31]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d003      	beq.n	80033aa <HAL_CAN_AddTxMessage+0x2c>
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	f040 80ad 	bne.w	8003504 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8095 	beq.w	80034f4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	0e1b      	lsrs	r3, r3, #24
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033d4:	2201      	movs	r2, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	409a      	lsls	r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033f0:	68f9      	ldr	r1, [r7, #12]
 80033f2:	6809      	ldr	r1, [r1, #0]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3318      	adds	r3, #24
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	440b      	add	r3, r1
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e00f      	b.n	8003422 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800340c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003416:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3318      	adds	r3, #24
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	440b      	add	r3, r1
 8003420:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3318      	adds	r3, #24
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	440b      	add	r3, r1
 8003432:	3304      	adds	r3, #4
 8003434:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	7d1b      	ldrb	r3, [r3, #20]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d111      	bne.n	8003462 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3318      	adds	r3, #24
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	6811      	ldr	r1, [r2, #0]
 8003452:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3318      	adds	r3, #24
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	440b      	add	r3, r1
 800345e:	3304      	adds	r3, #4
 8003460:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3307      	adds	r3, #7
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	061a      	lsls	r2, r3, #24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3306      	adds	r3, #6
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3305      	adds	r3, #5
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	4313      	orrs	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	3204      	adds	r2, #4
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	4610      	mov	r0, r2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6811      	ldr	r1, [r2, #0]
 800348a:	ea43 0200 	orr.w	r2, r3, r0
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	440b      	add	r3, r1
 8003494:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003498:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3303      	adds	r3, #3
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	061a      	lsls	r2, r3, #24
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3302      	adds	r3, #2
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3301      	adds	r3, #1
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	4313      	orrs	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	7812      	ldrb	r2, [r2, #0]
 80034ba:	4610      	mov	r0, r2
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	6811      	ldr	r1, [r2, #0]
 80034c0:	ea43 0200 	orr.w	r2, r3, r0
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80034ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	3318      	adds	r3, #24
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	4413      	add	r3, r2
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	6811      	ldr	r1, [r2, #0]
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3318      	adds	r3, #24
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	440b      	add	r3, r1
 80034ee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e00e      	b.n	8003512 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e006      	b.n	8003512 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003530:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d002      	beq.n	800353e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003538:	7afb      	ldrb	r3, [r7, #11]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d11d      	bne.n	800357a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3301      	adds	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800359c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d003      	beq.n	80035ac <HAL_CAN_GetRxMessage+0x24>
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	f040 80f3 	bne.w	8003792 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10e      	bne.n	80035d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d116      	bne.n	80035ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0e7      	b.n	80037a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0d8      	b.n	80037a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	331b      	adds	r3, #27
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0204 	and.w	r2, r3, #4
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10c      	bne.n	8003626 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	331b      	adds	r3, #27
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4413      	add	r3, r2
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	0d5b      	lsrs	r3, r3, #21
 800361c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e00b      	b.n	800363e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	331b      	adds	r3, #27
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	4413      	add	r3, r2
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	08db      	lsrs	r3, r3, #3
 8003636:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	331b      	adds	r3, #27
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0202 	and.w	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	331b      	adds	r3, #27
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	4413      	add	r3, r2
 8003660:	3304      	adds	r3, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 020f 	and.w	r2, r3, #15
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	331b      	adds	r3, #27
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	b2da      	uxtb	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	331b      	adds	r3, #27
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	4413      	add	r3, r2
 8003690:	3304      	adds	r3, #4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	0a1a      	lsrs	r2, r3, #8
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	3301      	adds	r3, #1
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0c1a      	lsrs	r2, r3, #16
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	3302      	adds	r3, #2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0e1a      	lsrs	r2, r3, #24
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	3303      	adds	r3, #3
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	4413      	add	r3, r2
 800370a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	3304      	adds	r3, #4
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	4413      	add	r3, r2
 8003722:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0a1a      	lsrs	r2, r3, #8
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	3305      	adds	r3, #5
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4413      	add	r3, r2
 800373c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0c1a      	lsrs	r2, r3, #16
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3306      	adds	r3, #6
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	4413      	add	r3, r2
 8003756:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0e1a      	lsrs	r2, r3, #24
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	3307      	adds	r3, #7
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0220 	orr.w	r2, r2, #32
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	e007      	b.n	800378e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0220 	orr.w	r2, r2, #32
 800378c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e006      	b.n	80037a0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d07c      	beq.n	80038ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d023      	beq.n	8003844 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2201      	movs	r2, #1
 8003802:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe f928 	bl	8001a64 <HAL_CAN_TxMailbox0CompleteCallback>
 8003814:	e016      	b.n	8003844 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	e00c      	b.n	8003844 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	e002      	b.n	8003844 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe f91a 	bl	8001a78 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d024      	beq.n	8003898 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003856:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe f912 	bl	8001a8c <HAL_CAN_TxMailbox1CompleteCallback>
 8003868:	e016      	b.n	8003898 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	e00c      	b.n	8003898 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
 8003890:	e002      	b.n	8003898 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fe f904 	bl	8001aa0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d024      	beq.n	80038ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe f8fc 	bl	8001ab4 <HAL_CAN_TxMailbox2CompleteCallback>
 80038bc:	e016      	b.n	80038ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e00c      	b.n	80038ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	e002      	b.n	80038ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe f8ee 	bl	8001ac8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003906:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2210      	movs	r2, #16
 800390e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f8f4 	bl	8003b1a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe f8c6 	bl	8001adc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800396a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2210      	movs	r2, #16
 8003972:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8d6 	bl	8003b42 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8bd 	bl	8003b2e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2210      	movs	r2, #16
 80039ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8c0 	bl	8003b56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2208      	movs	r2, #8
 80039f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8b9 	bl	8003b6a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d07b      	beq.n	8003afa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d072      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f043 0302 	orr.w	r3, r3, #2
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f043 0304 	orr.w	r3, r3, #4
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d043      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03e      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a7a:	2b60      	cmp	r3, #96	; 0x60
 8003a7c:	d02b      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x32a>
 8003a7e:	2b60      	cmp	r3, #96	; 0x60
 8003a80:	d82e      	bhi.n	8003ae0 <HAL_CAN_IRQHandler+0x334>
 8003a82:	2b50      	cmp	r3, #80	; 0x50
 8003a84:	d022      	beq.n	8003acc <HAL_CAN_IRQHandler+0x320>
 8003a86:	2b50      	cmp	r3, #80	; 0x50
 8003a88:	d82a      	bhi.n	8003ae0 <HAL_CAN_IRQHandler+0x334>
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d019      	beq.n	8003ac2 <HAL_CAN_IRQHandler+0x316>
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d826      	bhi.n	8003ae0 <HAL_CAN_IRQHandler+0x334>
 8003a92:	2b30      	cmp	r3, #48	; 0x30
 8003a94:	d010      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x30c>
 8003a96:	2b30      	cmp	r3, #48	; 0x30
 8003a98:	d822      	bhi.n	8003ae0 <HAL_CAN_IRQHandler+0x334>
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d002      	beq.n	8003aa4 <HAL_CAN_IRQHandler+0x2f8>
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d005      	beq.n	8003aae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003aa2:	e01d      	b.n	8003ae0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	f043 0308 	orr.w	r3, r3, #8
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aac:	e019      	b.n	8003ae2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	f043 0310 	orr.w	r3, r3, #16
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ab6:	e014      	b.n	8003ae2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f043 0320 	orr.w	r3, r3, #32
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ac0:	e00f      	b.n	8003ae2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aca:	e00a      	b.n	8003ae2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ad4:	e005      	b.n	8003ae2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ade:	e000      	b.n	8003ae2 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ae0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003af0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2204      	movs	r2, #4
 8003af8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f836 	bl	8003b7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b12:	bf00      	nop
 8003b14:	3728      	adds	r7, #40	; 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc2:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	60d3      	str	r3, [r2, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00
 8003bd8:	05fa0000 	.word	0x05fa0000

08003bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 0307 	and.w	r3, r3, #7
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db0b      	blt.n	8003c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	4907      	ldr	r1, [pc, #28]	; (8003c30 <__NVIC_EnableIRQ+0x38>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2001      	movs	r0, #1
 8003c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000e100 	.word	0xe000e100

08003c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	db0a      	blt.n	8003c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	490c      	ldr	r1, [pc, #48]	; (8003c80 <__NVIC_SetPriority+0x4c>)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	0112      	lsls	r2, r2, #4
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	440b      	add	r3, r1
 8003c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c5c:	e00a      	b.n	8003c74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4908      	ldr	r1, [pc, #32]	; (8003c84 <__NVIC_SetPriority+0x50>)
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	3b04      	subs	r3, #4
 8003c6c:	0112      	lsls	r2, r2, #4
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	440b      	add	r3, r1
 8003c72:	761a      	strb	r2, [r3, #24]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000e100 	.word	0xe000e100
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	bf28      	it	cs
 8003ca6:	2304      	movcs	r3, #4
 8003ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d902      	bls.n	8003cb8 <NVIC_EncodePriority+0x30>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3b03      	subs	r3, #3
 8003cb6:	e000      	b.n	8003cba <NVIC_EncodePriority+0x32>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	401a      	ands	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	43d9      	mvns	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	4313      	orrs	r3, r2
         );
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff4c 	bl	8003b94 <__NVIC_SetPriorityGrouping>
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d16:	f7ff ff61 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003d1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	6978      	ldr	r0, [r7, #20]
 8003d22:	f7ff ffb1 	bl	8003c88 <NVIC_EncodePriority>
 8003d26:	4602      	mov	r2, r0
 8003d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ff80 	bl	8003c34 <__NVIC_SetPriority>
}
 8003d34:	bf00      	nop
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ff54 	bl	8003bf8 <__NVIC_EnableIRQ>
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d64:	f7ff f9e0 	bl	8003128 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e099      	b.n	8003ea8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d94:	e00f      	b.n	8003db6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d96:	f7ff f9c7 	bl	8003128 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d908      	bls.n	8003db6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2203      	movs	r2, #3
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e078      	b.n	8003ea8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e8      	bne.n	8003d96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4b38      	ldr	r3, [pc, #224]	; (8003eb0 <HAL_DMA_Init+0x158>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d107      	bne.n	8003e20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0307 	bic.w	r3, r3, #7
 8003e36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d117      	bne.n	8003e7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00e      	beq.n	8003e7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fb15 	bl	800448c <DMA_CheckFifoParam>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e76:	2301      	movs	r3, #1
 8003e78:	e016      	b.n	8003ea8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 facc 	bl	8004420 <DMA_CalcBaseAndBitshift>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	223f      	movs	r2, #63	; 0x3f
 8003e92:	409a      	lsls	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	e010803f 	.word	0xe010803f

08003eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_DMA_Start_IT+0x26>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e048      	b.n	8003f6c <HAL_DMA_Start_IT+0xb8>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d137      	bne.n	8003f5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa5e 	bl	80043c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	223f      	movs	r2, #63	; 0x3f
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0216 	orr.w	r2, r2, #22
 8003f22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f32:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0208 	orr.w	r2, r2, #8
 8003f4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e005      	b.n	8003f6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f82:	f7ff f8d1 	bl	8003128 <HAL_GetTick>
 8003f86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d008      	beq.n	8003fa6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e052      	b.n	800404c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0216 	bic.w	r2, r2, #22
 8003fb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HAL_DMA_Abort+0x62>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0208 	bic.w	r2, r2, #8
 8003fe4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff6:	e013      	b.n	8004020 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ff8:	f7ff f896 	bl	8003128 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b05      	cmp	r3, #5
 8004004:	d90c      	bls.n	8004020 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2203      	movs	r2, #3
 8004010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e015      	b.n	800404c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e4      	bne.n	8003ff8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	223f      	movs	r2, #63	; 0x3f
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d004      	beq.n	8004072 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e00c      	b.n	800408c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2205      	movs	r2, #5
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80040a4:	4b8e      	ldr	r3, [pc, #568]	; (80042e0 <HAL_DMA_IRQHandler+0x248>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a8e      	ldr	r2, [pc, #568]	; (80042e4 <HAL_DMA_IRQHandler+0x24c>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0a9b      	lsrs	r3, r3, #10
 80040b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	2208      	movs	r2, #8
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01a      	beq.n	8004104 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0204 	bic.w	r2, r2, #4
 80040ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	2208      	movs	r2, #8
 80040f2:	409a      	lsls	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f043 0201 	orr.w	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	2201      	movs	r2, #1
 800410a:	409a      	lsls	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d012      	beq.n	800413a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	2201      	movs	r2, #1
 8004128:	409a      	lsls	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f043 0202 	orr.w	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	2204      	movs	r2, #4
 8004140:	409a      	lsls	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d012      	beq.n	8004170 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	2204      	movs	r2, #4
 800415e:	409a      	lsls	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f043 0204 	orr.w	r2, r3, #4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	2210      	movs	r2, #16
 8004176:	409a      	lsls	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d043      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d03c      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2210      	movs	r2, #16
 8004194:	409a      	lsls	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d018      	beq.n	80041da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d108      	bne.n	80041c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d024      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
 80041c6:	e01f      	b.n	8004208 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01b      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
 80041d8:	e016      	b.n	8004208 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0208 	bic.w	r2, r2, #8
 80041f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	2220      	movs	r2, #32
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 808f 	beq.w	8004338 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8087 	beq.w	8004338 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2220      	movs	r2, #32
 8004230:	409a      	lsls	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b05      	cmp	r3, #5
 8004240:	d136      	bne.n	80042b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0216 	bic.w	r2, r2, #22
 8004250:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004260:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d103      	bne.n	8004272 <HAL_DMA_IRQHandler+0x1da>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0208 	bic.w	r2, r2, #8
 8004280:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	223f      	movs	r2, #63	; 0x3f
 8004288:	409a      	lsls	r2, r3
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d07e      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
        }
        return;
 80042ae:	e079      	b.n	80043a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01d      	beq.n	80042fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d031      	beq.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
 80042dc:	e02c      	b.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
 80042de:	bf00      	nop
 80042e0:	20000008 	.word	0x20000008
 80042e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d023      	beq.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
 80042f8:	e01e      	b.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10f      	bne.n	8004328 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0210 	bic.w	r2, r2, #16
 8004316:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	2b00      	cmp	r3, #0
 800433e:	d032      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d022      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2205      	movs	r2, #5
 8004350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3301      	adds	r3, #1
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	429a      	cmp	r2, r3
 800436e:	d307      	bcc.n	8004380 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f2      	bne.n	8004364 <HAL_DMA_IRQHandler+0x2cc>
 800437e:	e000      	b.n	8004382 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004380:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
 80043a2:	e000      	b.n	80043a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80043a4:	bf00      	nop
    }
  }
}
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d108      	bne.n	8004404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004402:	e007      	b.n	8004414 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3b10      	subs	r3, #16
 8004430:	4a13      	ldr	r2, [pc, #76]	; (8004480 <DMA_CalcBaseAndBitshift+0x60>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800443a:	4a12      	ldr	r2, [pc, #72]	; (8004484 <DMA_CalcBaseAndBitshift+0x64>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d908      	bls.n	8004460 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <DMA_CalcBaseAndBitshift+0x68>)
 8004456:	4013      	ands	r3, r2
 8004458:	1d1a      	adds	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	659a      	str	r2, [r3, #88]	; 0x58
 800445e:	e006      	b.n	800446e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <DMA_CalcBaseAndBitshift+0x68>)
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	aaaaaaab 	.word	0xaaaaaaab
 8004484:	080233b8 	.word	0x080233b8
 8004488:	fffffc00 	.word	0xfffffc00

0800448c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11f      	bne.n	80044e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d856      	bhi.n	800455a <DMA_CheckFifoParam+0xce>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <DMA_CheckFifoParam+0x28>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044d7 	.word	0x080044d7
 80044bc:	080044c5 	.word	0x080044c5
 80044c0:	0800455b 	.word	0x0800455b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d046      	beq.n	800455e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d4:	e043      	b.n	800455e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044de:	d140      	bne.n	8004562 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e4:	e03d      	b.n	8004562 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ee:	d121      	bne.n	8004534 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d837      	bhi.n	8004566 <DMA_CheckFifoParam+0xda>
 80044f6:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <DMA_CheckFifoParam+0x70>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004513 	.word	0x08004513
 8004504:	0800450d 	.word	0x0800450d
 8004508:	08004525 	.word	0x08004525
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	e030      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d025      	beq.n	800456a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004522:	e022      	b.n	800456a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800452c:	d11f      	bne.n	800456e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004532:	e01c      	b.n	800456e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d903      	bls.n	8004542 <DMA_CheckFifoParam+0xb6>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d003      	beq.n	8004548 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004540:	e018      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      break;
 8004546:	e015      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00e      	beq.n	8004572 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e00b      	b.n	8004572 <DMA_CheckFifoParam+0xe6>
      break;
 800455a:	bf00      	nop
 800455c:	e00a      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 800455e:	bf00      	nop
 8004560:	e008      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004562:	bf00      	nop
 8004564:	e006      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004566:	bf00      	nop
 8004568:	e004      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;   
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004572:	bf00      	nop
    }
  } 
  
  return status; 
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop

08004584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004584:	b480      	push	{r7}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e175      	b.n	8004890 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045a4:	2201      	movs	r2, #1
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	429a      	cmp	r2, r3
 80045be:	f040 8164 	bne.w	800488a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d005      	beq.n	80045da <HAL_GPIO_Init+0x56>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d130      	bne.n	800463c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	2203      	movs	r2, #3
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4013      	ands	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004610:	2201      	movs	r2, #1
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 0201 	and.w	r2, r3, #1
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b03      	cmp	r3, #3
 8004646:	d017      	beq.n	8004678 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d123      	bne.n	80046cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	08da      	lsrs	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3208      	adds	r2, #8
 800468c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	220f      	movs	r2, #15
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	08da      	lsrs	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3208      	adds	r2, #8
 80046c6:	69b9      	ldr	r1, [r7, #24]
 80046c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0203 	and.w	r2, r3, #3
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80be 	beq.w	800488a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800470e:	4b66      	ldr	r3, [pc, #408]	; (80048a8 <HAL_GPIO_Init+0x324>)
 8004710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004712:	4a65      	ldr	r2, [pc, #404]	; (80048a8 <HAL_GPIO_Init+0x324>)
 8004714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004718:	6453      	str	r3, [r2, #68]	; 0x44
 800471a:	4b63      	ldr	r3, [pc, #396]	; (80048a8 <HAL_GPIO_Init+0x324>)
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004726:	4a61      	ldr	r2, [pc, #388]	; (80048ac <HAL_GPIO_Init+0x328>)
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	3302      	adds	r3, #2
 800472e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	220f      	movs	r2, #15
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a58      	ldr	r2, [pc, #352]	; (80048b0 <HAL_GPIO_Init+0x32c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d037      	beq.n	80047c2 <HAL_GPIO_Init+0x23e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a57      	ldr	r2, [pc, #348]	; (80048b4 <HAL_GPIO_Init+0x330>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d031      	beq.n	80047be <HAL_GPIO_Init+0x23a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a56      	ldr	r2, [pc, #344]	; (80048b8 <HAL_GPIO_Init+0x334>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d02b      	beq.n	80047ba <HAL_GPIO_Init+0x236>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a55      	ldr	r2, [pc, #340]	; (80048bc <HAL_GPIO_Init+0x338>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d025      	beq.n	80047b6 <HAL_GPIO_Init+0x232>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a54      	ldr	r2, [pc, #336]	; (80048c0 <HAL_GPIO_Init+0x33c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01f      	beq.n	80047b2 <HAL_GPIO_Init+0x22e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a53      	ldr	r2, [pc, #332]	; (80048c4 <HAL_GPIO_Init+0x340>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d019      	beq.n	80047ae <HAL_GPIO_Init+0x22a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a52      	ldr	r2, [pc, #328]	; (80048c8 <HAL_GPIO_Init+0x344>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_GPIO_Init+0x226>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a51      	ldr	r2, [pc, #324]	; (80048cc <HAL_GPIO_Init+0x348>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00d      	beq.n	80047a6 <HAL_GPIO_Init+0x222>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a50      	ldr	r2, [pc, #320]	; (80048d0 <HAL_GPIO_Init+0x34c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <HAL_GPIO_Init+0x21e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a4f      	ldr	r2, [pc, #316]	; (80048d4 <HAL_GPIO_Init+0x350>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d101      	bne.n	800479e <HAL_GPIO_Init+0x21a>
 800479a:	2309      	movs	r3, #9
 800479c:	e012      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 800479e:	230a      	movs	r3, #10
 80047a0:	e010      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047a2:	2308      	movs	r3, #8
 80047a4:	e00e      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047a6:	2307      	movs	r3, #7
 80047a8:	e00c      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047aa:	2306      	movs	r3, #6
 80047ac:	e00a      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047ae:	2305      	movs	r3, #5
 80047b0:	e008      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047b2:	2304      	movs	r3, #4
 80047b4:	e006      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047b6:	2303      	movs	r3, #3
 80047b8:	e004      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e002      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <HAL_GPIO_Init+0x240>
 80047c2:	2300      	movs	r3, #0
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	f002 0203 	and.w	r2, r2, #3
 80047ca:	0092      	lsls	r2, r2, #2
 80047cc:	4093      	lsls	r3, r2
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047d4:	4935      	ldr	r1, [pc, #212]	; (80048ac <HAL_GPIO_Init+0x328>)
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	089b      	lsrs	r3, r3, #2
 80047da:	3302      	adds	r3, #2
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047e2:	4b3d      	ldr	r3, [pc, #244]	; (80048d8 <HAL_GPIO_Init+0x354>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004806:	4a34      	ldr	r2, [pc, #208]	; (80048d8 <HAL_GPIO_Init+0x354>)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800480c:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <HAL_GPIO_Init+0x354>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004830:	4a29      	ldr	r2, [pc, #164]	; (80048d8 <HAL_GPIO_Init+0x354>)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004836:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <HAL_GPIO_Init+0x354>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	43db      	mvns	r3, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4013      	ands	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800485a:	4a1f      	ldr	r2, [pc, #124]	; (80048d8 <HAL_GPIO_Init+0x354>)
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_GPIO_Init+0x354>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004884:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <HAL_GPIO_Init+0x354>)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3301      	adds	r3, #1
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	2b0f      	cmp	r3, #15
 8004894:	f67f ae86 	bls.w	80045a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	3724      	adds	r7, #36	; 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	40013800 	.word	0x40013800
 80048b0:	40020000 	.word	0x40020000
 80048b4:	40020400 	.word	0x40020400
 80048b8:	40020800 	.word	0x40020800
 80048bc:	40020c00 	.word	0x40020c00
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40021400 	.word	0x40021400
 80048c8:	40021800 	.word	0x40021800
 80048cc:	40021c00 	.word	0x40021c00
 80048d0:	40022000 	.word	0x40022000
 80048d4:	40022400 	.word	0x40022400
 80048d8:	40013c00 	.word	0x40013c00

080048dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
 80048e8:	4613      	mov	r3, r2
 80048ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048ec:	787b      	ldrb	r3, [r7, #1]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80048f8:	e003      	b.n	8004902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	041a      	lsls	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	619a      	str	r2, [r3, #24]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004920:	887a      	ldrh	r2, [r7, #2]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4013      	ands	r3, r2
 8004926:	041a      	lsls	r2, r3, #16
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43d9      	mvns	r1, r3
 800492c:	887b      	ldrh	r3, [r7, #2]
 800492e:	400b      	ands	r3, r1
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	619a      	str	r2, [r3, #24]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004944:	b08f      	sub	sp, #60	; 0x3c
 8004946:	af0a      	add	r7, sp, #40	; 0x28
 8004948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e116      	b.n	8004b82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f00b f8ee 	bl	800fb50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2203      	movs	r2, #3
 8004978:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f004 fe03 	bl	800959e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	687e      	ldr	r6, [r7, #4]
 80049a0:	466d      	mov	r5, sp
 80049a2:	f106 0410 	add.w	r4, r6, #16
 80049a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80049b6:	1d33      	adds	r3, r6, #4
 80049b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ba:	6838      	ldr	r0, [r7, #0]
 80049bc:	f004 fce4 	bl	8009388 <USB_CoreInit>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e0d7      	b.n	8004b82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f004 fdf1 	bl	80095c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	e04a      	b.n	8004a7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049e4:	7bfa      	ldrb	r2, [r7, #15]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	333d      	adds	r3, #61	; 0x3d
 80049f4:	2201      	movs	r2, #1
 80049f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	333c      	adds	r3, #60	; 0x3c
 8004a08:	7bfa      	ldrb	r2, [r7, #15]
 8004a0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a0c:	7bfa      	ldrb	r2, [r7, #15]
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	b298      	uxth	r0, r3
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3344      	adds	r3, #68	; 0x44
 8004a20:	4602      	mov	r2, r0
 8004a22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	3340      	adds	r3, #64	; 0x40
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	3348      	adds	r3, #72	; 0x48
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	334c      	adds	r3, #76	; 0x4c
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	3354      	adds	r3, #84	; 0x54
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	3301      	adds	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	7bfa      	ldrb	r2, [r7, #15]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d3af      	bcc.n	80049e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	e044      	b.n	8004b14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a8a:	7bfa      	ldrb	r2, [r7, #15]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	440b      	add	r3, r1
 8004a98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ab2:	7bfa      	ldrb	r2, [r7, #15]
 8004ab4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004acc:	7bfa      	ldrb	r2, [r7, #15]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ae2:	7bfa      	ldrb	r2, [r7, #15]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	3301      	adds	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d3b5      	bcc.n	8004a8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	687e      	ldr	r6, [r7, #4]
 8004b26:	466d      	mov	r5, sp
 8004b28:	f106 0410 	add.w	r4, r6, #16
 8004b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b38:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b3c:	1d33      	adds	r3, r6, #4
 8004b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b40:	6838      	ldr	r0, [r7, #0]
 8004b42:	f004 fd89 	bl	8009658 <USB_DevInit>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e014      	b.n	8004b82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d102      	bne.n	8004b76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 f97b 	bl	8005e6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f005 fed7 	bl	800a92e <USB_DevDisconnect>

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_PCD_Start+0x16>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e012      	b.n	8004bc6 <HAL_PCD_Start+0x3c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f004 fce5 	bl	800957c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f005 fe98 	bl	800a8ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b08d      	sub	sp, #52	; 0x34
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f005 ff56 	bl	800aa96 <USB_GetMode>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f040 84b7 	bne.w	8005560 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f005 feba 	bl	800a970 <USB_ReadInterrupts>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 84ad 	beq.w	800555e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f005 fea7 	bl	800a970 <USB_ReadInterrupts>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d107      	bne.n	8004c3c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f002 0202 	and.w	r2, r2, #2
 8004c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f005 fe95 	bl	800a970 <USB_ReadInterrupts>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d161      	bne.n	8004d14 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0210 	bic.w	r2, r2, #16
 8004c5e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f003 020f 	and.w	r2, r3, #15
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	0c5b      	lsrs	r3, r3, #17
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d124      	bne.n	8004cd6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d035      	beq.n	8004d04 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6a38      	ldr	r0, [r7, #32]
 8004cac:	f005 fccc 	bl	800a648 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cbc:	441a      	add	r2, r3
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cce:	441a      	add	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	621a      	str	r2, [r3, #32]
 8004cd4:	e016      	b.n	8004d04 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	0c5b      	lsrs	r3, r3, #17
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d110      	bne.n	8004d04 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ce8:	2208      	movs	r2, #8
 8004cea:	4619      	mov	r1, r3
 8004cec:	6a38      	ldr	r0, [r7, #32]
 8004cee:	f005 fcab 	bl	800a648 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cfe:	441a      	add	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0210 	orr.w	r2, r2, #16
 8004d12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f005 fe29 	bl	800a970 <USB_ReadInterrupts>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d28:	f040 80a7 	bne.w	8004e7a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f005 fe2e 	bl	800a996 <USB_ReadDevAllOutEpInterrupt>
 8004d3a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d3c:	e099      	b.n	8004e72 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 808e 	beq.w	8004e66 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f005 fe52 	bl	800a9fe <USB_ReadDevOutEPInterrupt>
 8004d5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	2301      	movs	r3, #1
 8004d76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fef0 	bl	8005b60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	461a      	mov	r2, r3
 8004d98:	2308      	movs	r3, #8
 8004d9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 ffc6 	bl	8005d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d030      	beq.n	8004e2c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d109      	bne.n	8004dea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	78db      	ldrb	r3, [r3, #3]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d108      	bne.n	8004e1a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f00a ffbf 	bl	800fd98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	461a      	mov	r2, r3
 8004e28:	2302      	movs	r3, #2
 8004e2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e42:	461a      	mov	r2, r3
 8004e44:	2320      	movs	r3, #32
 8004e46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e64:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	3301      	adds	r3, #1
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f47f af62 	bne.w	8004d3e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 fd76 	bl	800a970 <USB_ReadInterrupts>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e8e:	f040 80db 	bne.w	8005048 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f005 fd97 	bl	800a9ca <USB_ReadDevAllInEpInterrupt>
 8004e9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ea2:	e0cd      	b.n	8005040 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80c2 	beq.w	8005034 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f005 fdbd 	bl	800aa3a <USB_ReadDevInEPInterrupt>
 8004ec0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d057      	beq.n	8004f7c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69f9      	ldr	r1, [r7, #28]
 8004ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eec:	4013      	ands	r3, r2
 8004eee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	461a      	mov	r2, r3
 8004efe:	2301      	movs	r3, #1
 8004f00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d132      	bne.n	8004f70 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	334c      	adds	r3, #76	; 0x4c
 8004f1a:	6819      	ldr	r1, [r3, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4403      	add	r3, r0
 8004f2a:	3348      	adds	r3, #72	; 0x48
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4419      	add	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4403      	add	r3, r0
 8004f3e:	334c      	adds	r3, #76	; 0x4c
 8004f40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d113      	bne.n	8004f70 <HAL_PCD_IRQHandler+0x3a2>
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	3354      	adds	r3, #84	; 0x54
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d108      	bne.n	8004f70 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	f005 fdc6 	bl	800aafc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f00a fe89 	bl	800fc8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	461a      	mov	r2, r3
 8004f94:	2308      	movs	r3, #8
 8004f96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d008      	beq.n	8004fd0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d023      	beq.n	8005022 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fdc:	6a38      	ldr	r0, [r7, #32]
 8004fde:	f004 fc99 	bl	8009914 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3338      	adds	r3, #56	; 0x38
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	78db      	ldrb	r3, [r3, #3]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d108      	bne.n	8005010 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2200      	movs	r2, #0
 8005002:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f00a fed6 	bl	800fdbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	461a      	mov	r2, r3
 800501e:	2302      	movs	r3, #2
 8005020:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800502c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fd08 	bl	8005a44 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	3301      	adds	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	f47f af2e 	bne.w	8004ea4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f005 fc8f 	bl	800a970 <USB_ReadInterrupts>
 8005052:	4603      	mov	r3, r0
 8005054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800505c:	d122      	bne.n	80050a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005078:	2b01      	cmp	r3, #1
 800507a:	d108      	bne.n	800508e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005084:	2100      	movs	r1, #0
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f00b f850 	bl	801012c <HAL_PCDEx_LPM_Callback>
 800508c:	e002      	b.n	8005094 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f00a fe74 	bl	800fd7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80050a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f005 fc61 	bl	800a970 <USB_ReadInterrupts>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b8:	d112      	bne.n	80050e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d102      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f00a fe30 	bl	800fd30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80050de:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f005 fc43 	bl	800a970 <USB_ReadInterrupts>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f4:	d121      	bne.n	800513a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005104:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d111      	bne.n	8005134 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	089b      	lsrs	r3, r3, #2
 8005120:	f003 020f 	and.w	r2, r3, #15
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800512a:	2101      	movs	r1, #1
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f00a fffd 	bl	801012c <HAL_PCDEx_LPM_Callback>
 8005132:	e002      	b.n	800513a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f00a fdfb 	bl	800fd30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f005 fc16 	bl	800a970 <USB_ReadInterrupts>
 8005144:	4603      	mov	r3, r0
 8005146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800514a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514e:	f040 80b7 	bne.w	80052c0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2110      	movs	r1, #16
 800516c:	4618      	mov	r0, r3
 800516e:	f004 fbd1 	bl	8009914 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005172:	2300      	movs	r3, #0
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005176:	e046      	b.n	8005206 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	461a      	mov	r2, r3
 8005186:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800518a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	461a      	mov	r2, r3
 80051ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	3301      	adds	r3, #1
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800520c:	429a      	cmp	r2, r3
 800520e:	d3b3      	bcc.n	8005178 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005222:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	2b00      	cmp	r3, #0
 800522a:	d016      	beq.n	800525a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800523c:	f043 030b 	orr.w	r3, r3, #11
 8005240:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005252:	f043 030b 	orr.w	r3, r3, #11
 8005256:	6453      	str	r3, [r2, #68]	; 0x44
 8005258:	e015      	b.n	8005286 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005268:	4619      	mov	r1, r3
 800526a:	f242 032b 	movw	r3, #8235	; 0x202b
 800526e:	4313      	orrs	r3, r2
 8005270:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005280:	f043 030b 	orr.w	r3, r3, #11
 8005284:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005294:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005298:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052aa:	461a      	mov	r2, r3
 80052ac:	f005 fc26 	bl	800aafc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80052be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f005 fb53 	bl	800a970 <USB_ReadInterrupts>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d4:	d124      	bne.n	8005320 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f005 fbea 	bl	800aab4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f004 fb92 	bl	8009a0e <USB_GetDevSpeed>
 80052ea:	4603      	mov	r3, r0
 80052ec:	461a      	mov	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681c      	ldr	r4, [r3, #0]
 80052f6:	f001 facd 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80052fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005300:	b2db      	uxtb	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	4620      	mov	r0, r4
 8005306:	f004 f897 	bl	8009438 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f00a fce7 	bl	800fcde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800531e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f005 fb23 	bl	800a970 <USB_ReadInterrupts>
 800532a:	4603      	mov	r3, r0
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10a      	bne.n	800534a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f00a fcc4 	bl	800fcc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f002 0208 	and.w	r2, r2, #8
 8005348:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f005 fb0e 	bl	800a970 <USB_ReadInterrupts>
 8005354:	4603      	mov	r3, r0
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b80      	cmp	r3, #128	; 0x80
 800535c:	d122      	bne.n	80053a4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800536a:	2301      	movs	r3, #1
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
 800536e:	e014      	b.n	800539a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	4613      	mov	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fb27 	bl	80059e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	3301      	adds	r3, #1
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3e5      	bcc.n	8005370 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f005 fae1 	bl	800a970 <USB_ReadInterrupts>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b8:	d13b      	bne.n	8005432 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053ba:	2301      	movs	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
 80053be:	e02b      	b.n	8005418 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d4:	4613      	mov	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	3340      	adds	r3, #64	; 0x40
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d115      	bne.n	8005412 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80053e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da12      	bge.n	8005412 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	4613      	mov	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	333f      	adds	r3, #63	; 0x3f
 80053fc:	2201      	movs	r2, #1
 80053fe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005408:	b2db      	uxtb	r3, r3
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fae8 	bl	80059e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	3301      	adds	r3, #1
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541e:	429a      	cmp	r2, r3
 8005420:	d3ce      	bcc.n	80053c0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f005 fa9a 	bl	800a970 <USB_ReadInterrupts>
 800543c:	4603      	mov	r3, r0
 800543e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005446:	d155      	bne.n	80054f4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005448:	2301      	movs	r3, #1
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
 800544c:	e045      	b.n	80054da <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005462:	4613      	mov	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d12e      	bne.n	80054d4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005476:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005478:	2b00      	cmp	r3, #0
 800547a:	da2b      	bge.n	80054d4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005488:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800548c:	429a      	cmp	r2, r3
 800548e:	d121      	bne.n	80054d4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054d0:	6053      	str	r3, [r2, #4]
            break;
 80054d2:	e007      	b.n	80054e4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	3301      	adds	r3, #1
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d3b4      	bcc.n	800544e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80054f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f005 fa39 	bl	800a970 <USB_ReadInterrupts>
 80054fe:	4603      	mov	r3, r0
 8005500:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005508:	d10a      	bne.n	8005520 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f00a fc68 	bl	800fde0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800551e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f005 fa23 	bl	800a970 <USB_ReadInterrupts>
 800552a:	4603      	mov	r3, r0
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d115      	bne.n	8005560 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f00a fc58 	bl	800fdfc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	e000      	b.n	8005560 <HAL_PCD_IRQHandler+0x992>
      return;
 800555e:	bf00      	nop
    }
  }
}
 8005560:	3734      	adds	r7, #52	; 0x34
 8005562:	46bd      	mov	sp, r7
 8005564:	bd90      	pop	{r4, r7, pc}

08005566 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_PCD_SetAddress+0x1a>
 800557c:	2302      	movs	r3, #2
 800557e:	e013      	b.n	80055a8 <HAL_PCD_SetAddress+0x42>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f005 f981 	bl	800a8a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	4608      	mov	r0, r1
 80055ba:	4611      	mov	r1, r2
 80055bc:	461a      	mov	r2, r3
 80055be:	4603      	mov	r3, r0
 80055c0:	70fb      	strb	r3, [r7, #3]
 80055c2:	460b      	mov	r3, r1
 80055c4:	803b      	strh	r3, [r7, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da0f      	bge.n	80055f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	f003 020f 	and.w	r2, r3, #15
 80055dc:	4613      	mov	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	3338      	adds	r3, #56	; 0x38
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	3304      	adds	r3, #4
 80055ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	705a      	strb	r2, [r3, #1]
 80055f4:	e00f      	b.n	8005616 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	f003 020f 	and.w	r2, r3, #15
 80055fc:	4613      	mov	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4413      	add	r3, r2
 800560c:	3304      	adds	r3, #4
 800560e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005622:	883a      	ldrh	r2, [r7, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	78ba      	ldrb	r2, [r7, #2]
 800562c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005640:	78bb      	ldrb	r3, [r7, #2]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d102      	bne.n	800564c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_PCD_EP_Open+0xaa>
 8005656:	2302      	movs	r3, #2
 8005658:	e00e      	b.n	8005678 <HAL_PCD_EP_Open+0xc8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	4618      	mov	r0, r3
 800566a:	f004 f9f5 	bl	8009a58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005676:	7afb      	ldrb	r3, [r7, #11]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800568c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005690:	2b00      	cmp	r3, #0
 8005692:	da0f      	bge.n	80056b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	f003 020f 	and.w	r2, r3, #15
 800569a:	4613      	mov	r3, r2
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	3338      	adds	r3, #56	; 0x38
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4413      	add	r3, r2
 80056a8:	3304      	adds	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	705a      	strb	r2, [r3, #1]
 80056b2:	e00f      	b.n	80056d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	f003 020f 	and.w	r2, r3, #15
 80056ba:	4613      	mov	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	4413      	add	r3, r2
 80056ca:	3304      	adds	r3, #4
 80056cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_PCD_EP_Close+0x6e>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e00e      	b.n	800570c <HAL_PCD_EP_Close+0x8c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f004 fa33 	bl	8009b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	460b      	mov	r3, r1
 8005722:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	f003 020f 	and.w	r2, r3, #15
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	3304      	adds	r3, #4
 800573c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005756:	7afb      	ldrb	r3, [r7, #11]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	b2da      	uxtb	r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	f004 fd1a 	bl	800a1c0 <USB_EP0StartXfer>
 800578c:	e008      	b.n	80057a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	f004 fac0 	bl	8009d20 <USB_EPStartXfer>
  }

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80057cc:	681b      	ldr	r3, [r3, #0]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	460b      	mov	r3, r1
 80057e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	3338      	adds	r3, #56	; 0x38
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	3304      	adds	r3, #4
 8005800:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2200      	movs	r2, #0
 8005812:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2201      	movs	r2, #1
 8005818:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800581a:	7afb      	ldrb	r3, [r7, #11]
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	b2da      	uxtb	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d102      	bne.n	8005834 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	6979      	ldr	r1, [r7, #20]
 800584c:	f004 fcb8 	bl	800a1c0 <USB_EP0StartXfer>
 8005850:	e008      	b.n	8005864 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	6979      	ldr	r1, [r7, #20]
 8005860:	f004 fa5e 	bl	8009d20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	f003 020f 	and.w	r2, r3, #15
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	d901      	bls.n	800588c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e050      	b.n	800592e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800588c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005890:	2b00      	cmp	r3, #0
 8005892:	da0f      	bge.n	80058b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	f003 020f 	and.w	r2, r3, #15
 800589a:	4613      	mov	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	3338      	adds	r3, #56	; 0x38
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4413      	add	r3, r2
 80058a8:	3304      	adds	r3, #4
 80058aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	705a      	strb	r2, [r3, #1]
 80058b2:	e00d      	b.n	80058d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058b4:	78fa      	ldrb	r2, [r7, #3]
 80058b6:	4613      	mov	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4413      	add	r3, r2
 80058c6:	3304      	adds	r3, #4
 80058c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_PCD_EP_SetStall+0x82>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e01e      	b.n	800592e <HAL_PCD_EP_SetStall+0xc0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68f9      	ldr	r1, [r7, #12]
 80058fe:	4618      	mov	r0, r3
 8005900:	f004 fefa 	bl	800a6f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	b2d9      	uxtb	r1, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800591e:	461a      	mov	r2, r3
 8005920:	f005 f8ec 	bl	800aafc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	f003 020f 	and.w	r2, r3, #15
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d901      	bls.n	8005954 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e042      	b.n	80059da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005958:	2b00      	cmp	r3, #0
 800595a:	da0f      	bge.n	800597c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	f003 020f 	and.w	r2, r3, #15
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	3338      	adds	r3, #56	; 0x38
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	3304      	adds	r3, #4
 8005972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	705a      	strb	r2, [r3, #1]
 800597a:	e00f      	b.n	800599c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	f003 020f 	and.w	r2, r3, #15
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	4413      	add	r3, r2
 8005992:	3304      	adds	r3, #4
 8005994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_PCD_EP_ClrStall+0x86>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e00e      	b.n	80059da <HAL_PCD_EP_ClrStall+0xa4>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68f9      	ldr	r1, [r7, #12]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f004 ff02 	bl	800a7d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	460b      	mov	r3, r1
 80059ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80059ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da0c      	bge.n	8005a10 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	f003 020f 	and.w	r2, r3, #15
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	3338      	adds	r3, #56	; 0x38
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4413      	add	r3, r2
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e00c      	b.n	8005a2a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f003 020f 	and.w	r2, r3, #15
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	3304      	adds	r3, #4
 8005a28:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f004 fd21 	bl	800a478 <USB_EPStopXfer>
 8005a36:	4603      	mov	r3, r0
 8005a38:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	3338      	adds	r3, #56	; 0x38
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	3304      	adds	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1a      	ldr	r2, [r3, #32]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d901      	bls.n	8005a7c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e06c      	b.n	8005b56 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d902      	bls.n	8005a98 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	3303      	adds	r3, #3
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aa0:	e02b      	b.n	8005afa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d902      	bls.n	8005abe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3303      	adds	r3, #3
 8005ac2:	089b      	lsrs	r3, r3, #2
 8005ac4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6919      	ldr	r1, [r3, #16]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	4603      	mov	r3, r0
 8005adc:	6978      	ldr	r0, [r7, #20]
 8005ade:	f004 fd75 	bl	800a5cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	441a      	add	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	441a      	add	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d809      	bhi.n	8005b24 <PCD_WriteEmptyTxFifo+0xe0>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1a      	ldr	r2, [r3, #32]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d203      	bcs.n	8005b24 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1be      	bne.n	8005aa2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	699a      	ldr	r2, [r3, #24]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d811      	bhi.n	8005b54 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	2201      	movs	r2, #1
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	6939      	ldr	r1, [r7, #16]
 8005b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b50:	4013      	ands	r3, r2
 8005b52:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	333c      	adds	r3, #60	; 0x3c
 8005b78:	3304      	adds	r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d17b      	bne.n	8005c8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4a61      	ldr	r2, [pc, #388]	; (8005d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	f240 80b9 	bls.w	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80b3 	beq.w	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc8:	6093      	str	r3, [r2, #8]
 8005bca:	e0a7      	b.n	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	461a      	mov	r2, r3
 8005be4:	2320      	movs	r3, #32
 8005be6:	6093      	str	r3, [r2, #8]
 8005be8:	e098      	b.n	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f040 8093 	bne.w	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4a4b      	ldr	r2, [pc, #300]	; (8005d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d90f      	bls.n	8005c1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	461a      	mov	r2, r3
 8005c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c1a:	6093      	str	r3, [r2, #8]
 8005c1c:	e07e      	b.n	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3304      	adds	r3, #4
 8005c32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	0159      	lsls	r1, r3, #5
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	440b      	add	r3, r1
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d114      	bne.n	8005c80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	f004 ff46 	bl	800aafc <USB_EP0_OutStart>
 8005c70:	e006      	b.n	8005c80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	441a      	add	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f009 ffe6 	bl	800fc58 <HAL_PCD_DataOutStageCallback>
 8005c8c:	e046      	b.n	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4a26      	ldr	r2, [pc, #152]	; (8005d2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d124      	bne.n	8005ce0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	461a      	mov	r2, r3
 8005cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cb2:	6093      	str	r3, [r2, #8]
 8005cb4:	e032      	b.n	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2320      	movs	r3, #32
 8005cd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f009 ffbd 	bl	800fc58 <HAL_PCD_DataOutStageCallback>
 8005cde:	e01d      	b.n	8005d1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d114      	bne.n	8005d10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d108      	bne.n	8005d10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d08:	461a      	mov	r2, r3
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f004 fef6 	bl	800aafc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f009 ff9e 	bl	800fc58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3720      	adds	r7, #32
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	4f54300a 	.word	0x4f54300a
 8005d2c:	4f54310a 	.word	0x4f54310a

08005d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	333c      	adds	r3, #60	; 0x3c
 8005d48:	3304      	adds	r3, #4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d90e      	bls.n	8005d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f009 ff55 	bl	800fc34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d90c      	bls.n	8005dac <PCD_EP_OutSetupPacket_int+0x7c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d108      	bne.n	8005dac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005da4:	461a      	mov	r2, r3
 8005da6:	2101      	movs	r1, #1
 8005da8:	f004 fea8 	bl	800aafc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	4f54300a 	.word	0x4f54300a

08005dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d107      	bne.n	8005dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005dda:	883b      	ldrh	r3, [r7, #0]
 8005ddc:	0419      	lsls	r1, r3, #16
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28
 8005de8:	e028      	b.n	8005e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	0c1b      	lsrs	r3, r3, #16
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]
 8005dfc:	e00d      	b.n	8005e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	3340      	adds	r3, #64	; 0x40
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	0c1b      	lsrs	r3, r3, #16
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	4413      	add	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	3301      	adds	r3, #1
 8005e18:	73fb      	strb	r3, [r7, #15]
 8005e1a:	7bfa      	ldrb	r2, [r7, #15]
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d3ec      	bcc.n	8005dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e24:	883b      	ldrh	r3, [r7, #0]
 8005e26:	0418      	lsls	r0, r3, #16
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6819      	ldr	r1, [r3, #0]
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	4302      	orrs	r2, r0
 8005e34:	3340      	adds	r3, #64	; 0x40
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	10000003 	.word	0x10000003

08005eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ebe:	4b23      	ldr	r3, [pc, #140]	; (8005f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eca:	4b20      	ldr	r3, [pc, #128]	; (8005f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ee2:	f7fd f921 	bl	8003128 <HAL_GetTick>
 8005ee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ee8:	e009      	b.n	8005efe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005eea:	f7fd f91d 	bl	8003128 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ef8:	d901      	bls.n	8005efe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e022      	b.n	8005f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005efe:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0a:	d1ee      	bne.n	8005eea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f0c:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a0f      	ldr	r2, [pc, #60]	; (8005f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f18:	f7fd f906 	bl	8003128 <HAL_GetTick>
 8005f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f1e:	e009      	b.n	8005f34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f20:	f7fd f902 	bl	8003128 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f2e:	d901      	bls.n	8005f34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e007      	b.n	8005f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f40:	d1ee      	bne.n	8005f20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	40007000 	.word	0x40007000

08005f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e29b      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8087 	beq.w	8006086 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f78:	4b96      	ldr	r3, [pc, #600]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 030c 	and.w	r3, r3, #12
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d00c      	beq.n	8005f9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f84:	4b93      	ldr	r3, [pc, #588]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 030c 	and.w	r3, r3, #12
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d112      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x62>
 8005f90:	4b90      	ldr	r3, [pc, #576]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f9c:	d10b      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9e:	4b8d      	ldr	r3, [pc, #564]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d06c      	beq.n	8006084 <HAL_RCC_OscConfig+0x130>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d168      	bne.n	8006084 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e275      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbe:	d106      	bne.n	8005fce <HAL_RCC_OscConfig+0x7a>
 8005fc0:	4b84      	ldr	r3, [pc, #528]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a83      	ldr	r2, [pc, #524]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e02e      	b.n	800602c <HAL_RCC_OscConfig+0xd8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10c      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x9c>
 8005fd6:	4b7f      	ldr	r3, [pc, #508]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a7e      	ldr	r2, [pc, #504]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	4b7c      	ldr	r3, [pc, #496]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a7b      	ldr	r2, [pc, #492]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e01d      	b.n	800602c <HAL_RCC_OscConfig+0xd8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0xc0>
 8005ffa:	4b76      	ldr	r3, [pc, #472]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a75      	ldr	r2, [pc, #468]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	4b73      	ldr	r3, [pc, #460]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a72      	ldr	r2, [pc, #456]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 800600c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0xd8>
 8006014:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a6e      	ldr	r2, [pc, #440]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 800601a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4b6c      	ldr	r3, [pc, #432]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a6b      	ldr	r2, [pc, #428]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800602a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d013      	beq.n	800605c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006034:	f7fd f878 	bl	8003128 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800603c:	f7fd f874 	bl	8003128 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e229      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604e:	4b61      	ldr	r3, [pc, #388]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCC_OscConfig+0xe8>
 800605a:	e014      	b.n	8006086 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fd f864 	bl	8003128 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006064:	f7fd f860 	bl	8003128 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b64      	cmp	r3, #100	; 0x64
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e215      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006076:	4b57      	ldr	r3, [pc, #348]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x110>
 8006082:	e000      	b.n	8006086 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d069      	beq.n	8006166 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006092:	4b50      	ldr	r3, [pc, #320]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609e:	4b4d      	ldr	r3, [pc, #308]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d11c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x190>
 80060aa:	4b4a      	ldr	r3, [pc, #296]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d116      	bne.n	80060e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060b6:	4b47      	ldr	r3, [pc, #284]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_RCC_OscConfig+0x17a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d001      	beq.n	80060ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e1e9      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ce:	4b41      	ldr	r3, [pc, #260]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	493d      	ldr	r1, [pc, #244]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e2:	e040      	b.n	8006166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d023      	beq.n	8006134 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ec:	4b39      	ldr	r3, [pc, #228]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a38      	ldr	r2, [pc, #224]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fd f816 	bl	8003128 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006100:	f7fd f812 	bl	8003128 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e1c7      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006112:	4b30      	ldr	r3, [pc, #192]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611e:	4b2d      	ldr	r3, [pc, #180]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4929      	ldr	r1, [pc, #164]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 800612e:	4313      	orrs	r3, r2
 8006130:	600b      	str	r3, [r1, #0]
 8006132:	e018      	b.n	8006166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a26      	ldr	r2, [pc, #152]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fc fff2 	bl	8003128 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006148:	f7fc ffee 	bl	8003128 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e1a3      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615a:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d038      	beq.n	80061e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d019      	beq.n	80061ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800617a:	4b16      	ldr	r3, [pc, #88]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006186:	f7fc ffcf 	bl	8003128 <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800618e:	f7fc ffcb 	bl	8003128 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e180      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80061a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f0      	beq.n	800618e <HAL_RCC_OscConfig+0x23a>
 80061ac:	e01a      	b.n	80061e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ae:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80061b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b2:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <HAL_RCC_OscConfig+0x280>)
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ba:	f7fc ffb5 	bl	8003128 <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c0:	e00a      	b.n	80061d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061c2:	f7fc ffb1 	bl	8003128 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d903      	bls.n	80061d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e166      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
 80061d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d8:	4b92      	ldr	r3, [pc, #584]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80061da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1ee      	bne.n	80061c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80a4 	beq.w	800633a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061f2:	4b8c      	ldr	r3, [pc, #560]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80061fe:	4b89      	ldr	r3, [pc, #548]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	4a88      	ldr	r2, [pc, #544]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006208:	6413      	str	r3, [r2, #64]	; 0x40
 800620a:	4b86      	ldr	r3, [pc, #536]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006212:	60bb      	str	r3, [r7, #8]
 8006214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800621a:	4b83      	ldr	r3, [pc, #524]	; (8006428 <HAL_RCC_OscConfig+0x4d4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006222:	2b00      	cmp	r3, #0
 8006224:	d118      	bne.n	8006258 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006226:	4b80      	ldr	r3, [pc, #512]	; (8006428 <HAL_RCC_OscConfig+0x4d4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a7f      	ldr	r2, [pc, #508]	; (8006428 <HAL_RCC_OscConfig+0x4d4>)
 800622c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006232:	f7fc ff79 	bl	8003128 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800623a:	f7fc ff75 	bl	8003128 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b64      	cmp	r3, #100	; 0x64
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e12a      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800624c:	4b76      	ldr	r3, [pc, #472]	; (8006428 <HAL_RCC_OscConfig+0x4d4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d106      	bne.n	800626e <HAL_RCC_OscConfig+0x31a>
 8006260:	4b70      	ldr	r3, [pc, #448]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	4a6f      	ldr	r2, [pc, #444]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	6713      	str	r3, [r2, #112]	; 0x70
 800626c:	e02d      	b.n	80062ca <HAL_RCC_OscConfig+0x376>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10c      	bne.n	8006290 <HAL_RCC_OscConfig+0x33c>
 8006276:	4b6b      	ldr	r3, [pc, #428]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	4a6a      	ldr	r2, [pc, #424]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	6713      	str	r3, [r2, #112]	; 0x70
 8006282:	4b68      	ldr	r3, [pc, #416]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4a67      	ldr	r2, [pc, #412]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	6713      	str	r3, [r2, #112]	; 0x70
 800628e:	e01c      	b.n	80062ca <HAL_RCC_OscConfig+0x376>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b05      	cmp	r3, #5
 8006296:	d10c      	bne.n	80062b2 <HAL_RCC_OscConfig+0x35e>
 8006298:	4b62      	ldr	r3, [pc, #392]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	4a61      	ldr	r2, [pc, #388]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 800629e:	f043 0304 	orr.w	r3, r3, #4
 80062a2:	6713      	str	r3, [r2, #112]	; 0x70
 80062a4:	4b5f      	ldr	r3, [pc, #380]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80062a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a8:	4a5e      	ldr	r2, [pc, #376]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	6713      	str	r3, [r2, #112]	; 0x70
 80062b0:	e00b      	b.n	80062ca <HAL_RCC_OscConfig+0x376>
 80062b2:	4b5c      	ldr	r3, [pc, #368]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	4a5b      	ldr	r2, [pc, #364]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	6713      	str	r3, [r2, #112]	; 0x70
 80062be:	4b59      	ldr	r3, [pc, #356]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	4a58      	ldr	r2, [pc, #352]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80062c4:	f023 0304 	bic.w	r3, r3, #4
 80062c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d015      	beq.n	80062fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d2:	f7fc ff29 	bl	8003128 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d8:	e00a      	b.n	80062f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fc ff25 	bl	8003128 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e0d8      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f0:	4b4c      	ldr	r3, [pc, #304]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0ee      	beq.n	80062da <HAL_RCC_OscConfig+0x386>
 80062fc:	e014      	b.n	8006328 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fe:	f7fc ff13 	bl	8003128 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006304:	e00a      	b.n	800631c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006306:	f7fc ff0f 	bl	8003128 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f241 3288 	movw	r2, #5000	; 0x1388
 8006314:	4293      	cmp	r3, r2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e0c2      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800631c:	4b41      	ldr	r3, [pc, #260]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1ee      	bne.n	8006306 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d105      	bne.n	800633a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800632e:	4b3d      	ldr	r3, [pc, #244]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 80ae 	beq.w	80064a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006344:	4b37      	ldr	r3, [pc, #220]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 030c 	and.w	r3, r3, #12
 800634c:	2b08      	cmp	r3, #8
 800634e:	d06d      	beq.n	800642c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d14b      	bne.n	80063f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006358:	4b32      	ldr	r3, [pc, #200]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a31      	ldr	r2, [pc, #196]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 800635e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fc fee0 	bl	8003128 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800636c:	f7fc fedc 	bl	8003128 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e091      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637e:	4b29      	ldr	r3, [pc, #164]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	019b      	lsls	r3, r3, #6
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	3b01      	subs	r3, #1
 80063a4:	041b      	lsls	r3, r3, #16
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	071b      	lsls	r3, r3, #28
 80063b6:	491b      	ldr	r1, [pc, #108]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063bc:	4b19      	ldr	r3, [pc, #100]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a18      	ldr	r2, [pc, #96]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80063c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c8:	f7fc feae 	bl	8003128 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d0:	f7fc feaa 	bl	8003128 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e05f      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e2:	4b10      	ldr	r3, [pc, #64]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0x47c>
 80063ee:	e057      	b.n	80064a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a0b      	ldr	r2, [pc, #44]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 80063f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fc fe94 	bl	8003128 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006404:	f7fc fe90 	bl	8003128 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e045      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006416:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_RCC_OscConfig+0x4d0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0x4b0>
 8006422:	e03d      	b.n	80064a0 <HAL_RCC_OscConfig+0x54c>
 8006424:	40023800 	.word	0x40023800
 8006428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800642c:	4b1f      	ldr	r3, [pc, #124]	; (80064ac <HAL_RCC_OscConfig+0x558>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d030      	beq.n	800649c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006444:	429a      	cmp	r2, r3
 8006446:	d129      	bne.n	800649c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006452:	429a      	cmp	r2, r3
 8006454:	d122      	bne.n	800649c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800645c:	4013      	ands	r3, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006462:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006464:	4293      	cmp	r3, r2
 8006466:	d119      	bne.n	800649c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	3b01      	subs	r3, #1
 8006476:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006478:	429a      	cmp	r2, r3
 800647a:	d10f      	bne.n	800649c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006488:	429a      	cmp	r2, r3
 800648a:	d107      	bne.n	800649c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006498:	429a      	cmp	r2, r3
 800649a:	d001      	beq.n	80064a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40023800 	.word	0x40023800

080064b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0d0      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064c8:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d910      	bls.n	80064f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d6:	4b67      	ldr	r3, [pc, #412]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 020f 	bic.w	r2, r3, #15
 80064de:	4965      	ldr	r1, [pc, #404]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e6:	4b63      	ldr	r3, [pc, #396]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d001      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0b8      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d020      	beq.n	8006546 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006510:	4b59      	ldr	r3, [pc, #356]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a58      	ldr	r2, [pc, #352]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800651a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006528:	4b53      	ldr	r3, [pc, #332]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4a52      	ldr	r2, [pc, #328]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800652e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006534:	4b50      	ldr	r3, [pc, #320]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	494d      	ldr	r1, [pc, #308]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d040      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d107      	bne.n	800656a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655a:	4b47      	ldr	r3, [pc, #284]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d115      	bne.n	8006592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e07f      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d107      	bne.n	8006582 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006572:	4b41      	ldr	r3, [pc, #260]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e073      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006582:	4b3d      	ldr	r3, [pc, #244]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e06b      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006592:	4b39      	ldr	r3, [pc, #228]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f023 0203 	bic.w	r2, r3, #3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4936      	ldr	r1, [pc, #216]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a4:	f7fc fdc0 	bl	8003128 <HAL_GetTick>
 80065a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ac:	f7fc fdbc 	bl	8003128 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e053      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c2:	4b2d      	ldr	r3, [pc, #180]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 020c 	and.w	r2, r3, #12
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d1eb      	bne.n	80065ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065d4:	4b27      	ldr	r3, [pc, #156]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d210      	bcs.n	8006604 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e2:	4b24      	ldr	r3, [pc, #144]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 020f 	bic.w	r2, r3, #15
 80065ea:	4922      	ldr	r1, [pc, #136]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f2:	4b20      	ldr	r3, [pc, #128]	; (8006674 <HAL_RCC_ClockConfig+0x1c4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d001      	beq.n	8006604 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e032      	b.n	800666a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006610:	4b19      	ldr	r3, [pc, #100]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4916      	ldr	r1, [pc, #88]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	490e      	ldr	r1, [pc, #56]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006642:	f000 f821 	bl	8006688 <HAL_RCC_GetSysClockFreq>
 8006646:	4602      	mov	r2, r0
 8006648:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <HAL_RCC_ClockConfig+0x1c8>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	490a      	ldr	r1, [pc, #40]	; (800667c <HAL_RCC_ClockConfig+0x1cc>)
 8006654:	5ccb      	ldrb	r3, [r1, r3]
 8006656:	fa22 f303 	lsr.w	r3, r2, r3
 800665a:	4a09      	ldr	r2, [pc, #36]	; (8006680 <HAL_RCC_ClockConfig+0x1d0>)
 800665c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <HAL_RCC_ClockConfig+0x1d4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fc f9c0 	bl	80029e8 <HAL_InitTick>

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40023c00 	.word	0x40023c00
 8006678:	40023800 	.word	0x40023800
 800667c:	080233a0 	.word	0x080233a0
 8006680:	20000008 	.word	0x20000008
 8006684:	2000000c 	.word	0x2000000c

08006688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800668c:	b094      	sub	sp, #80	; 0x50
 800668e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	647b      	str	r3, [r7, #68]	; 0x44
 8006694:	2300      	movs	r3, #0
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006698:	2300      	movs	r3, #0
 800669a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066a0:	4b79      	ldr	r3, [pc, #484]	; (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 030c 	and.w	r3, r3, #12
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d00d      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x40>
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	f200 80e1 	bhi.w	8006874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_RCC_GetSysClockFreq+0x34>
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d003      	beq.n	80066c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80066ba:	e0db      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066bc:	4b73      	ldr	r3, [pc, #460]	; (800688c <HAL_RCC_GetSysClockFreq+0x204>)
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066c0:	e0db      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066c2:	4b73      	ldr	r3, [pc, #460]	; (8006890 <HAL_RCC_GetSysClockFreq+0x208>)
 80066c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066c6:	e0d8      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066c8:	4b6f      	ldr	r3, [pc, #444]	; (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80066d2:	4b6d      	ldr	r3, [pc, #436]	; (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d063      	beq.n	80067a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066de:	4b6a      	ldr	r3, [pc, #424]	; (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	099b      	lsrs	r3, r3, #6
 80066e4:	2200      	movs	r2, #0
 80066e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
 80066f2:	2300      	movs	r3, #0
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
 80066f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066fa:	4622      	mov	r2, r4
 80066fc:	462b      	mov	r3, r5
 80066fe:	f04f 0000 	mov.w	r0, #0
 8006702:	f04f 0100 	mov.w	r1, #0
 8006706:	0159      	lsls	r1, r3, #5
 8006708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800670c:	0150      	lsls	r0, r2, #5
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4621      	mov	r1, r4
 8006714:	1a51      	subs	r1, r2, r1
 8006716:	6139      	str	r1, [r7, #16]
 8006718:	4629      	mov	r1, r5
 800671a:	eb63 0301 	sbc.w	r3, r3, r1
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800672c:	4659      	mov	r1, fp
 800672e:	018b      	lsls	r3, r1, #6
 8006730:	4651      	mov	r1, sl
 8006732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006736:	4651      	mov	r1, sl
 8006738:	018a      	lsls	r2, r1, #6
 800673a:	4651      	mov	r1, sl
 800673c:	ebb2 0801 	subs.w	r8, r2, r1
 8006740:	4659      	mov	r1, fp
 8006742:	eb63 0901 	sbc.w	r9, r3, r1
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800675a:	4690      	mov	r8, r2
 800675c:	4699      	mov	r9, r3
 800675e:	4623      	mov	r3, r4
 8006760:	eb18 0303 	adds.w	r3, r8, r3
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	462b      	mov	r3, r5
 8006768:	eb49 0303 	adc.w	r3, r9, r3
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800677a:	4629      	mov	r1, r5
 800677c:	024b      	lsls	r3, r1, #9
 800677e:	4621      	mov	r1, r4
 8006780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006784:	4621      	mov	r1, r4
 8006786:	024a      	lsls	r2, r1, #9
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800678e:	2200      	movs	r2, #0
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
 8006792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006798:	f7fa f8d4 	bl	8000944 <__aeabi_uldivmod>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4613      	mov	r3, r2
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a4:	e058      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067a6:	4b38      	ldr	r3, [pc, #224]	; (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	099b      	lsrs	r3, r3, #6
 80067ac:	2200      	movs	r2, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	4611      	mov	r1, r2
 80067b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067b6:	623b      	str	r3, [r7, #32]
 80067b8:	2300      	movs	r3, #0
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
 80067bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067c0:	4642      	mov	r2, r8
 80067c2:	464b      	mov	r3, r9
 80067c4:	f04f 0000 	mov.w	r0, #0
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	0159      	lsls	r1, r3, #5
 80067ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d2:	0150      	lsls	r0, r2, #5
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4641      	mov	r1, r8
 80067da:	ebb2 0a01 	subs.w	sl, r2, r1
 80067de:	4649      	mov	r1, r9
 80067e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067f8:	ebb2 040a 	subs.w	r4, r2, sl
 80067fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	00eb      	lsls	r3, r5, #3
 800680a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800680e:	00e2      	lsls	r2, r4, #3
 8006810:	4614      	mov	r4, r2
 8006812:	461d      	mov	r5, r3
 8006814:	4643      	mov	r3, r8
 8006816:	18e3      	adds	r3, r4, r3
 8006818:	603b      	str	r3, [r7, #0]
 800681a:	464b      	mov	r3, r9
 800681c:	eb45 0303 	adc.w	r3, r5, r3
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800682e:	4629      	mov	r1, r5
 8006830:	028b      	lsls	r3, r1, #10
 8006832:	4621      	mov	r1, r4
 8006834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006838:	4621      	mov	r1, r4
 800683a:	028a      	lsls	r2, r1, #10
 800683c:	4610      	mov	r0, r2
 800683e:	4619      	mov	r1, r3
 8006840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006842:	2200      	movs	r2, #0
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	61fa      	str	r2, [r7, #28]
 8006848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800684c:	f7fa f87a 	bl	8000944 <__aeabi_uldivmod>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4613      	mov	r3, r2
 8006856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006858:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <HAL_RCC_GetSysClockFreq+0x200>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	3301      	adds	r3, #1
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800686a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006872:	e002      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCC_GetSysClockFreq+0x204>)
 8006876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800687a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800687c:	4618      	mov	r0, r3
 800687e:	3750      	adds	r7, #80	; 0x50
 8006880:	46bd      	mov	sp, r7
 8006882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006886:	bf00      	nop
 8006888:	40023800 	.word	0x40023800
 800688c:	00f42400 	.word	0x00f42400
 8006890:	007a1200 	.word	0x007a1200

08006894 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006898:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000008 	.word	0x20000008

080068ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068b0:	f7ff fff0 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80068b4:	4602      	mov	r2, r0
 80068b6:	4b05      	ldr	r3, [pc, #20]	; (80068cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	0a9b      	lsrs	r3, r3, #10
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4903      	ldr	r1, [pc, #12]	; (80068d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c2:	5ccb      	ldrb	r3, [r1, r3]
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40023800 	.word	0x40023800
 80068d0:	080233b0 	.word	0x080233b0

080068d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068d8:	f7ff ffdc 	bl	8006894 <HAL_RCC_GetHCLKFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	0b5b      	lsrs	r3, r3, #13
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	4903      	ldr	r1, [pc, #12]	; (80068f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ea:	5ccb      	ldrb	r3, [r1, r3]
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40023800 	.word	0x40023800
 80068f8:	080233b0 	.word	0x080233b0

080068fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	220f      	movs	r2, #15
 800690a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800690c:	4b12      	ldr	r3, [pc, #72]	; (8006958 <HAL_RCC_GetClockConfig+0x5c>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 0203 	and.w	r2, r3, #3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006918:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <HAL_RCC_GetClockConfig+0x5c>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006924:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <HAL_RCC_GetClockConfig+0x5c>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006930:	4b09      	ldr	r3, [pc, #36]	; (8006958 <HAL_RCC_GetClockConfig+0x5c>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	08db      	lsrs	r3, r3, #3
 8006936:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800693e:	4b07      	ldr	r3, [pc, #28]	; (800695c <HAL_RCC_GetClockConfig+0x60>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 020f 	and.w	r2, r3, #15
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	601a      	str	r2, [r3, #0]
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40023800 	.word	0x40023800
 800695c:	40023c00 	.word	0x40023c00

08006960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d012      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006988:	4b69      	ldr	r3, [pc, #420]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4a68      	ldr	r2, [pc, #416]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800698e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006992:	6093      	str	r3, [r2, #8]
 8006994:	4b66      	ldr	r3, [pc, #408]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699c:	4964      	ldr	r1, [pc, #400]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069ba:	4b5d      	ldr	r3, [pc, #372]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	4959      	ldr	r1, [pc, #356]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d8:	d101      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80069da:	2301      	movs	r3, #1
 80069dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069f6:	4b4e      	ldr	r3, [pc, #312]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	494a      	ldr	r1, [pc, #296]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a14:	d101      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006a16:	2301      	movs	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 808b 	beq.w	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a44:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	4a39      	ldr	r2, [pc, #228]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8006a50:	4b37      	ldr	r3, [pc, #220]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a5c:	4b35      	ldr	r3, [pc, #212]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a34      	ldr	r2, [pc, #208]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a68:	f7fc fb5e 	bl	8003128 <HAL_GetTick>
 8006a6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a70:	f7fc fb5a 	bl	8003128 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e38f      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a82:	4b2c      	ldr	r3, [pc, #176]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a8e:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d035      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d02e      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aac:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ab6:	4b1e      	ldr	r3, [pc, #120]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	4a1d      	ldr	r2, [pc, #116]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ac2:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac6:	4a1a      	ldr	r2, [pc, #104]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006acc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ace:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ad4:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d114      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae0:	f7fc fb22 	bl	8003128 <HAL_GetTick>
 8006ae4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae6:	e00a      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae8:	f7fc fb1e 	bl	8003128 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d901      	bls.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e351      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006afe:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0ee      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b16:	d111      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b26:	400b      	ands	r3, r1
 8006b28:	4901      	ldr	r1, [pc, #4]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
 8006b2e:	e00b      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40007000 	.word	0x40007000
 8006b38:	0ffffcff 	.word	0x0ffffcff
 8006b3c:	4bac      	ldr	r3, [pc, #688]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	4aab      	ldr	r2, [pc, #684]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b46:	6093      	str	r3, [r2, #8]
 8006b48:	4ba9      	ldr	r3, [pc, #676]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b54:	49a6      	ldr	r1, [pc, #664]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d010      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b66:	4ba2      	ldr	r3, [pc, #648]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b6c:	4aa0      	ldr	r2, [pc, #640]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b76:	4b9e      	ldr	r3, [pc, #632]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	499b      	ldr	r1, [pc, #620]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b94:	4b96      	ldr	r3, [pc, #600]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba2:	4993      	ldr	r1, [pc, #588]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bb6:	4b8e      	ldr	r3, [pc, #568]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc4:	498a      	ldr	r1, [pc, #552]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bd8:	4b85      	ldr	r3, [pc, #532]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be6:	4982      	ldr	r1, [pc, #520]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bfa:	4b7d      	ldr	r3, [pc, #500]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c08:	4979      	ldr	r1, [pc, #484]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c1c:	4b74      	ldr	r3, [pc, #464]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c22:	f023 0203 	bic.w	r2, r3, #3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	4971      	ldr	r1, [pc, #452]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c3e:	4b6c      	ldr	r3, [pc, #432]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c44:	f023 020c 	bic.w	r2, r3, #12
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4c:	4968      	ldr	r1, [pc, #416]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c60:	4b63      	ldr	r3, [pc, #396]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6e:	4960      	ldr	r1, [pc, #384]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c82:	4b5b      	ldr	r3, [pc, #364]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c90:	4957      	ldr	r1, [pc, #348]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ca4:	4b52      	ldr	r3, [pc, #328]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb2:	494f      	ldr	r1, [pc, #316]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006cc6:	4b4a      	ldr	r3, [pc, #296]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ccc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	4946      	ldr	r1, [pc, #280]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00a      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ce8:	4b41      	ldr	r3, [pc, #260]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf6:	493e      	ldr	r1, [pc, #248]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d0a:	4b39      	ldr	r3, [pc, #228]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d18:	4935      	ldr	r1, [pc, #212]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d2c:	4b30      	ldr	r3, [pc, #192]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d3a:	492d      	ldr	r1, [pc, #180]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d011      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d4e:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5c:	4924      	ldr	r1, [pc, #144]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d6c:	d101      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9c:	4914      	ldr	r1, [pc, #80]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006db0:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dc0:	490b      	ldr	r1, [pc, #44]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00f      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de4:	4902      	ldr	r1, [pc, #8]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006dee:	bf00      	nop
 8006df0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e00:	4b8a      	ldr	r3, [pc, #552]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e10:	4986      	ldr	r1, [pc, #536]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006e24:	4b81      	ldr	r3, [pc, #516]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e34:	497d      	ldr	r1, [pc, #500]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d006      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80d6 	beq.w	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e50:	4b76      	ldr	r3, [pc, #472]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a75      	ldr	r2, [pc, #468]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5c:	f7fc f964 	bl	8003128 <HAL_GetTick>
 8006e60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e64:	f7fc f960 	bl	8003128 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b64      	cmp	r3, #100	; 0x64
 8006e70:	d901      	bls.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e195      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e76:	4b6d      	ldr	r3, [pc, #436]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f0      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d021      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d11d      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e96:	4b65      	ldr	r3, [pc, #404]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e9c:	0c1b      	lsrs	r3, r3, #16
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ea4:	4b61      	ldr	r3, [pc, #388]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eaa:	0e1b      	lsrs	r3, r3, #24
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	019a      	lsls	r2, r3, #6
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	061b      	lsls	r3, r3, #24
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	071b      	lsls	r3, r3, #28
 8006eca:	4958      	ldr	r1, [pc, #352]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee6:	d00a      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d02e      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006efc:	d129      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006efe:	4b4b      	ldr	r3, [pc, #300]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f0c:	4b47      	ldr	r3, [pc, #284]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f12:	0f1b      	lsrs	r3, r3, #28
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	019a      	lsls	r2, r3, #6
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	061b      	lsls	r3, r3, #24
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	071b      	lsls	r3, r3, #28
 8006f32:	493e      	ldr	r1, [pc, #248]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f3a:	4b3c      	ldr	r3, [pc, #240]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f40:	f023 021f 	bic.w	r2, r3, #31
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	4938      	ldr	r1, [pc, #224]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d01d      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f5e:	4b33      	ldr	r3, [pc, #204]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f64:	0e1b      	lsrs	r3, r3, #24
 8006f66:	f003 030f 	and.w	r3, r3, #15
 8006f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f6c:	4b2f      	ldr	r3, [pc, #188]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f72:	0f1b      	lsrs	r3, r3, #28
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	019a      	lsls	r2, r3, #6
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	431a      	orrs	r2, r3
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	071b      	lsls	r3, r3, #28
 8006f92:	4926      	ldr	r1, [pc, #152]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d011      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	019a      	lsls	r2, r3, #6
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	061b      	lsls	r3, r3, #24
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	071b      	lsls	r3, r3, #28
 8006fc2:	491a      	ldr	r1, [pc, #104]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fca:	4b18      	ldr	r3, [pc, #96]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a17      	ldr	r2, [pc, #92]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd6:	f7fc f8a7 	bl	8003128 <HAL_GetTick>
 8006fda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fde:	f7fc f8a3 	bl	8003128 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b64      	cmp	r3, #100	; 0x64
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e0d8      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ff0:	4b0e      	ldr	r3, [pc, #56]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	f040 80ce 	bne.w	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007004:	4b09      	ldr	r3, [pc, #36]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a08      	ldr	r2, [pc, #32]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800700a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800700e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007010:	f7fc f88a 	bl	8003128 <HAL_GetTick>
 8007014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007016:	e00b      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007018:	f7fc f886 	bl	8003128 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	; 0x64
 8007024:	d904      	bls.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e0bb      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800702a:	bf00      	nop
 800702c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007030:	4b5e      	ldr	r3, [pc, #376]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703c:	d0ec      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800705a:	2b00      	cmp	r3, #0
 800705c:	d02e      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d12a      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007066:	4b51      	ldr	r3, [pc, #324]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007074:	4b4d      	ldr	r3, [pc, #308]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707a:	0f1b      	lsrs	r3, r3, #28
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	019a      	lsls	r2, r3, #6
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	431a      	orrs	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	061b      	lsls	r3, r3, #24
 8007094:	431a      	orrs	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	071b      	lsls	r3, r3, #28
 800709a:	4944      	ldr	r1, [pc, #272]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800709c:	4313      	orrs	r3, r2
 800709e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070a2:	4b42      	ldr	r3, [pc, #264]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80070a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	3b01      	subs	r3, #1
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	493d      	ldr	r1, [pc, #244]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d022      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070d0:	d11d      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070d2:	4b36      	ldr	r3, [pc, #216]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80070d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d8:	0e1b      	lsrs	r3, r3, #24
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070e0:	4b32      	ldr	r3, [pc, #200]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e6:	0f1b      	lsrs	r3, r3, #28
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	019a      	lsls	r2, r3, #6
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	431a      	orrs	r2, r3
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	061b      	lsls	r3, r3, #24
 8007100:	431a      	orrs	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	071b      	lsls	r3, r3, #28
 8007106:	4929      	ldr	r1, [pc, #164]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007108:	4313      	orrs	r3, r2
 800710a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d028      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800711a:	4b24      	ldr	r3, [pc, #144]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007120:	0e1b      	lsrs	r3, r3, #24
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007128:	4b20      	ldr	r3, [pc, #128]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	019a      	lsls	r2, r3, #6
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	431a      	orrs	r2, r3
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	061b      	lsls	r3, r3, #24
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	071b      	lsls	r3, r3, #28
 800714e:	4917      	ldr	r1, [pc, #92]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	4911      	ldr	r1, [pc, #68]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800716c:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a0e      	ldr	r2, [pc, #56]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007178:	f7fb ffd6 	bl	8003128 <HAL_GetTick>
 800717c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007180:	f7fb ffd2 	bl	8003128 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d901      	bls.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e007      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800719a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800719e:	d1ef      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40023800 	.word	0x40023800

080071b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e049      	b.n	8007256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f841 	bl	800725e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f000 fb34 	bl	800785c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d001      	beq.n	800728c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e054      	b.n	8007336 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a26      	ldr	r2, [pc, #152]	; (8007344 <HAL_TIM_Base_Start_IT+0xd0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d022      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0x80>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d01d      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0x80>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a22      	ldr	r2, [pc, #136]	; (8007348 <HAL_TIM_Base_Start_IT+0xd4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d018      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0x80>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a21      	ldr	r2, [pc, #132]	; (800734c <HAL_TIM_Base_Start_IT+0xd8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d013      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0x80>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <HAL_TIM_Base_Start_IT+0xdc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00e      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0x80>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1e      	ldr	r2, [pc, #120]	; (8007354 <HAL_TIM_Base_Start_IT+0xe0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d009      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0x80>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1c      	ldr	r2, [pc, #112]	; (8007358 <HAL_TIM_Base_Start_IT+0xe4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d004      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0x80>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1b      	ldr	r2, [pc, #108]	; (800735c <HAL_TIM_Base_Start_IT+0xe8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d115      	bne.n	8007320 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689a      	ldr	r2, [r3, #8]
 80072fa:	4b19      	ldr	r3, [pc, #100]	; (8007360 <HAL_TIM_Base_Start_IT+0xec>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b06      	cmp	r3, #6
 8007304:	d015      	beq.n	8007332 <HAL_TIM_Base_Start_IT+0xbe>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730c:	d011      	beq.n	8007332 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731e:	e008      	b.n	8007332 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e000      	b.n	8007334 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007332:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40010000 	.word	0x40010000
 8007348:	40000400 	.word	0x40000400
 800734c:	40000800 	.word	0x40000800
 8007350:	40000c00 	.word	0x40000c00
 8007354:	40010400 	.word	0x40010400
 8007358:	40014000 	.word	0x40014000
 800735c:	40001800 	.word	0x40001800
 8007360:	00010007 	.word	0x00010007

08007364 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e08f      	b.n	8007498 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fb fd3d 	bl	8002e0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6899      	ldr	r1, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	4b3e      	ldr	r3, [pc, #248]	; (80074a0 <HAL_TIM_Encoder_Init+0x13c>)
 80073a6:	400b      	ands	r3, r1
 80073a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f000 fa51 	bl	800785c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <HAL_TIM_Encoder_Init+0x140>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	4313      	orrs	r3, r2
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4b2b      	ldr	r3, [pc, #172]	; (80074a8 <HAL_TIM_Encoder_Init+0x144>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4b2a      	ldr	r3, [pc, #168]	; (80074ac <HAL_TIM_Encoder_Init+0x148>)
 8007402:	4013      	ands	r3, r2
 8007404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	4313      	orrs	r3, r2
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	011a      	lsls	r2, r3, #4
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	031b      	lsls	r3, r3, #12
 8007424:	4313      	orrs	r3, r2
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4313      	orrs	r3, r2
 800742a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800743a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	4313      	orrs	r3, r2
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	fffebff8 	.word	0xfffebff8
 80074a4:	fffffcfc 	.word	0xfffffcfc
 80074a8:	fffff3f3 	.word	0xfffff3f3
 80074ac:	ffff0f0f 	.word	0xffff0f0f

080074b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d110      	bne.n	8007502 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d102      	bne.n	80074ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80074e6:	7b7b      	ldrb	r3, [r7, #13]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d001      	beq.n	80074f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e069      	b.n	80075c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007500:	e031      	b.n	8007566 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b04      	cmp	r3, #4
 8007506:	d110      	bne.n	800752a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d102      	bne.n	8007514 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800750e:	7b3b      	ldrb	r3, [r7, #12]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d001      	beq.n	8007518 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e055      	b.n	80075c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007528:	e01d      	b.n	8007566 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d108      	bne.n	8007542 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d105      	bne.n	8007542 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007536:	7b7b      	ldrb	r3, [r7, #13]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d102      	bne.n	8007542 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800753c:	7b3b      	ldrb	r3, [r7, #12]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d001      	beq.n	8007546 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e03e      	b.n	80075c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2202      	movs	r2, #2
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2202      	movs	r2, #2
 8007552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2202      	movs	r2, #2
 800755a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_TIM_Encoder_Start+0xc4>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b04      	cmp	r3, #4
 8007570:	d008      	beq.n	8007584 <HAL_TIM_Encoder_Start+0xd4>
 8007572:	e00f      	b.n	8007594 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2201      	movs	r2, #1
 800757a:	2100      	movs	r1, #0
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fa0d 	bl	800799c <TIM_CCxChannelCmd>
      break;
 8007582:	e016      	b.n	80075b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2201      	movs	r2, #1
 800758a:	2104      	movs	r1, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fa05 	bl	800799c <TIM_CCxChannelCmd>
      break;
 8007592:	e00e      	b.n	80075b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2201      	movs	r2, #1
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f000 f9fd 	bl	800799c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2201      	movs	r2, #1
 80075a8:	2104      	movs	r1, #4
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f9f6 	bl	800799c <TIM_CCxChannelCmd>
      break;
 80075b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f042 0201 	orr.w	r2, r2, #1
 80075c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d122      	bne.n	8007628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d11b      	bne.n	8007628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0202 	mvn.w	r2, #2
 80075f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f905 	bl	800781e <HAL_TIM_IC_CaptureCallback>
 8007614:	e005      	b.n	8007622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8f7 	bl	800780a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f908 	bl	8007832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b04      	cmp	r3, #4
 8007634:	d122      	bne.n	800767c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b04      	cmp	r3, #4
 8007642:	d11b      	bne.n	800767c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0204 	mvn.w	r2, #4
 800764c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2202      	movs	r2, #2
 8007652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8db 	bl	800781e <HAL_TIM_IC_CaptureCallback>
 8007668:	e005      	b.n	8007676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8cd 	bl	800780a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f8de 	bl	8007832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b08      	cmp	r3, #8
 8007688:	d122      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b08      	cmp	r3, #8
 8007696:	d11b      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f06f 0208 	mvn.w	r2, #8
 80076a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2204      	movs	r2, #4
 80076a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f8b1 	bl	800781e <HAL_TIM_IC_CaptureCallback>
 80076bc:	e005      	b.n	80076ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f8a3 	bl	800780a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f8b4 	bl	8007832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b10      	cmp	r3, #16
 80076dc:	d122      	bne.n	8007724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d11b      	bne.n	8007724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0210 	mvn.w	r2, #16
 80076f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2208      	movs	r2, #8
 80076fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f887 	bl	800781e <HAL_TIM_IC_CaptureCallback>
 8007710:	e005      	b.n	800771e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f879 	bl	800780a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f88a 	bl	8007832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10e      	bne.n	8007750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b01      	cmp	r3, #1
 800773e:	d107      	bne.n	8007750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f06f 0201 	mvn.w	r2, #1
 8007748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fa ffaa 	bl	80026a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775a:	2b80      	cmp	r3, #128	; 0x80
 800775c:	d10e      	bne.n	800777c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007768:	2b80      	cmp	r3, #128	; 0x80
 800776a:	d107      	bne.n	800777c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9ce 	bl	8007b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778a:	d10e      	bne.n	80077aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007796:	2b80      	cmp	r3, #128	; 0x80
 8007798:	d107      	bne.n	80077aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f9c1 	bl	8007b2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	d10e      	bne.n	80077d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d107      	bne.n	80077d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f838 	bl	8007846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d10e      	bne.n	8007802 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	d107      	bne.n	8007802 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f06f 0220 	mvn.w	r2, #32
 80077fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f981 	bl	8007b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a40      	ldr	r2, [pc, #256]	; (8007970 <TIM_Base_SetConfig+0x114>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787a:	d00f      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a3d      	ldr	r2, [pc, #244]	; (8007974 <TIM_Base_SetConfig+0x118>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00b      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a3c      	ldr	r2, [pc, #240]	; (8007978 <TIM_Base_SetConfig+0x11c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d007      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a3b      	ldr	r2, [pc, #236]	; (800797c <TIM_Base_SetConfig+0x120>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_Base_SetConfig+0x40>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a3a      	ldr	r2, [pc, #232]	; (8007980 <TIM_Base_SetConfig+0x124>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d108      	bne.n	80078ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2f      	ldr	r2, [pc, #188]	; (8007970 <TIM_Base_SetConfig+0x114>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078bc:	d027      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2c      	ldr	r2, [pc, #176]	; (8007974 <TIM_Base_SetConfig+0x118>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d023      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2b      	ldr	r2, [pc, #172]	; (8007978 <TIM_Base_SetConfig+0x11c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d01f      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2a      	ldr	r2, [pc, #168]	; (800797c <TIM_Base_SetConfig+0x120>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a29      	ldr	r2, [pc, #164]	; (8007980 <TIM_Base_SetConfig+0x124>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d017      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a28      	ldr	r2, [pc, #160]	; (8007984 <TIM_Base_SetConfig+0x128>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a27      	ldr	r2, [pc, #156]	; (8007988 <TIM_Base_SetConfig+0x12c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00f      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a26      	ldr	r2, [pc, #152]	; (800798c <TIM_Base_SetConfig+0x130>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00b      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a25      	ldr	r2, [pc, #148]	; (8007990 <TIM_Base_SetConfig+0x134>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d007      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a24      	ldr	r2, [pc, #144]	; (8007994 <TIM_Base_SetConfig+0x138>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d003      	beq.n	800790e <TIM_Base_SetConfig+0xb2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a23      	ldr	r2, [pc, #140]	; (8007998 <TIM_Base_SetConfig+0x13c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d108      	bne.n	8007920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <TIM_Base_SetConfig+0x114>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d003      	beq.n	8007954 <TIM_Base_SetConfig+0xf8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a0c      	ldr	r2, [pc, #48]	; (8007980 <TIM_Base_SetConfig+0x124>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d103      	bne.n	800795c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	615a      	str	r2, [r3, #20]
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40010000 	.word	0x40010000
 8007974:	40000400 	.word	0x40000400
 8007978:	40000800 	.word	0x40000800
 800797c:	40000c00 	.word	0x40000c00
 8007980:	40010400 	.word	0x40010400
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800
 8007990:	40001800 	.word	0x40001800
 8007994:	40001c00 	.word	0x40001c00
 8007998:	40002000 	.word	0x40002000

0800799c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	2201      	movs	r2, #1
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a1a      	ldr	r2, [r3, #32]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	43db      	mvns	r3, r3
 80079be:	401a      	ands	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1a      	ldr	r2, [r3, #32]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	fa01 f303 	lsl.w	r3, r1, r3
 80079d4:	431a      	orrs	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e06d      	b.n	8007adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a30      	ldr	r2, [pc, #192]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d004      	beq.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a2f      	ldr	r2, [pc, #188]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d108      	bne.n	8007a46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a20      	ldr	r2, [pc, #128]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d022      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a72:	d01d      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1d      	ldr	r2, [pc, #116]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d018      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1c      	ldr	r2, [pc, #112]	; (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d013      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1a      	ldr	r2, [pc, #104]	; (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00e      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a15      	ldr	r2, [pc, #84]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d009      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a16      	ldr	r2, [pc, #88]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d004      	beq.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10c      	bne.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40010000 	.word	0x40010000
 8007aec:	40010400 	.word	0x40010400
 8007af0:	40000400 	.word	0x40000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	40000c00 	.word	0x40000c00
 8007afc:	40014000 	.word	0x40014000
 8007b00:	40001800 	.word	0x40001800

08007b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e040      	b.n	8007bd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fb f9c6 	bl	8002ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2224      	movs	r2, #36	; 0x24
 8007b6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0201 	bic.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fd32 	bl	80085e8 <UART_SetConfig>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e022      	b.n	8007bd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 ff8a 	bl	8008ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0201 	orr.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 f811 	bl	8008bf4 <UART_CheckIdleState>
 8007bd2:	4603      	mov	r3, r0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08a      	sub	sp, #40	; 0x28
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	4613      	mov	r3, r2
 8007bea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	d171      	bne.n	8007cd8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <HAL_UART_Transmit+0x24>
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e06a      	b.n	8007cda <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2221      	movs	r2, #33	; 0x21
 8007c10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c12:	f7fb fa89 	bl	8003128 <HAL_GetTick>
 8007c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	88fa      	ldrh	r2, [r7, #6]
 8007c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	88fa      	ldrh	r2, [r7, #6]
 8007c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c30:	d108      	bne.n	8007c44 <HAL_UART_Transmit+0x68>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d104      	bne.n	8007c44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e003      	b.n	8007c4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c4c:	e02c      	b.n	8007ca8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2200      	movs	r2, #0
 8007c56:	2180      	movs	r1, #128	; 0x80
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f001 f818 	bl	8008c8e <UART_WaitOnFlagUntilTimeout>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e038      	b.n	8007cda <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10b      	bne.n	8007c86 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	3302      	adds	r3, #2
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	e007      	b.n	8007c96 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	3301      	adds	r3, #1
 8007c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1cc      	bne.n	8007c4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2140      	movs	r1, #64	; 0x40
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 ffe5 	bl	8008c8e <UART_WaitOnFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e005      	b.n	8007cda <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e000      	b.n	8007cda <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007cd8:	2302      	movs	r3, #2
  }
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3720      	adds	r7, #32
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08a      	sub	sp, #40	; 0x28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d165      	bne.n	8007dc6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_UART_Transmit_DMA+0x22>
 8007d00:	88fb      	ldrh	r3, [r7, #6]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e05e      	b.n	8007dc8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	88fa      	ldrh	r2, [r7, #6]
 8007d14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	88fa      	ldrh	r2, [r7, #6]
 8007d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2221      	movs	r2, #33	; 0x21
 8007d2c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d027      	beq.n	8007d86 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3a:	4a25      	ldr	r2, [pc, #148]	; (8007dd0 <HAL_UART_Transmit_DMA+0xec>)
 8007d3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	4a24      	ldr	r2, [pc, #144]	; (8007dd4 <HAL_UART_Transmit_DMA+0xf0>)
 8007d44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	4a23      	ldr	r2, [pc, #140]	; (8007dd8 <HAL_UART_Transmit_DMA+0xf4>)
 8007d4c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	2200      	movs	r2, #0
 8007d54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3328      	adds	r3, #40	; 0x28
 8007d66:	461a      	mov	r2, r3
 8007d68:	88fb      	ldrh	r3, [r7, #6]
 8007d6a:	f7fc f8a3 	bl	8003eb4 <HAL_DMA_Start_IT>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2210      	movs	r2, #16
 8007d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e020      	b.n	8007dc8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2240      	movs	r2, #64	; 0x40
 8007d8c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3308      	adds	r3, #8
 8007dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dae:	623a      	str	r2, [r7, #32]
 8007db0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db2:	69f9      	ldr	r1, [r7, #28]
 8007db4:	6a3a      	ldr	r2, [r7, #32]
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1e5      	bne.n	8007d8e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e000      	b.n	8007dc8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007dc6:	2302      	movs	r3, #2
  }
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3728      	adds	r7, #40	; 0x28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	08009071 	.word	0x08009071
 8007dd4:	08009107 	.word	0x08009107
 8007dd8:	08009289 	.word	0x08009289

08007ddc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	; 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4613      	mov	r3, r2
 8007de8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d132      	bne.n	8007e5a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <HAL_UART_Receive_DMA+0x24>
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e02b      	b.n	8007e5c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d018      	beq.n	8007e4a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	613b      	str	r3, [r7, #16]
   return(result);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	623b      	str	r3, [r7, #32]
 8007e38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	69f9      	ldr	r1, [r7, #28]
 8007e3c:	6a3a      	ldr	r2, [r7, #32]
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e6      	bne.n	8007e18 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 ffe3 	bl	8008e1c <UART_Start_Receive_DMA>
 8007e56:	4603      	mov	r3, r0
 8007e58:	e000      	b.n	8007e5c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007e5a:	2302      	movs	r3, #2
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3728      	adds	r7, #40	; 0x28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b090      	sub	sp, #64	; 0x40
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e78:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e84:	2b80      	cmp	r3, #128	; 0x80
 8007e86:	d139      	bne.n	8007efc <HAL_UART_DMAStop+0x98>
 8007e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8a:	2b21      	cmp	r3, #33	; 0x21
 8007e8c:	d136      	bne.n	8007efc <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d015      	beq.n	8007ef6 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fc f850 	bl	8003f74 <HAL_DMA_Abort>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00d      	beq.n	8007ef6 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fc fa64 	bl	80043ac <HAL_DMA_GetError>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d105      	bne.n	8007ef6 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2210      	movs	r2, #16
 8007eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e044      	b.n	8007f80 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 f830 	bl	8008f5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b40      	cmp	r3, #64	; 0x40
 8007f08:	d139      	bne.n	8007f7e <HAL_UART_DMAStop+0x11a>
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	2b22      	cmp	r3, #34	; 0x22
 8007f0e:	d136      	bne.n	8007f7e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3308      	adds	r3, #8
 8007f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f26:	633b      	str	r3, [r7, #48]	; 0x30
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f30:	61ba      	str	r2, [r7, #24]
 8007f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	6979      	ldr	r1, [r7, #20]
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e5      	bne.n	8007f10 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d015      	beq.n	8007f78 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fc f80f 	bl	8003f74 <HAL_DMA_Abort>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fc fa23 	bl	80043ac <HAL_DMA_GetError>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d105      	bne.n	8007f78 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2210      	movs	r2, #16
 8007f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e003      	b.n	8007f80 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 f815 	bl	8008fa8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3740      	adds	r7, #64	; 0x40
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b0ba      	sub	sp, #232	; 0xe8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007fb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d115      	bne.n	8007ff0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc8:	f003 0320 	and.w	r3, r3, #32
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00f      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d009      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 82ac 	beq.w	800853e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
      }
      return;
 8007fee:	e2a6      	b.n	800853e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 8117 	beq.w	8008228 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008006:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800800a:	4b85      	ldr	r3, [pc, #532]	; (8008220 <HAL_UART_IRQHandler+0x298>)
 800800c:	4013      	ands	r3, r2
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 810a 	beq.w	8008228 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d011      	beq.n	8008044 <HAL_UART_IRQHandler+0xbc>
 8008020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00b      	beq.n	8008044 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2201      	movs	r2, #1
 8008032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803a:	f043 0201 	orr.w	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d011      	beq.n	8008074 <HAL_UART_IRQHandler+0xec>
 8008050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2202      	movs	r2, #2
 8008062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806a:	f043 0204 	orr.w	r2, r3, #4
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	2b00      	cmp	r3, #0
 800807e:	d011      	beq.n	80080a4 <HAL_UART_IRQHandler+0x11c>
 8008080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2204      	movs	r2, #4
 8008092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800809a:	f043 0202 	orr.w	r2, r3, #2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d017      	beq.n	80080e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d105      	bne.n	80080c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80080bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00b      	beq.n	80080e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2208      	movs	r2, #8
 80080ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d6:	f043 0208 	orr.w	r2, r3, #8
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d012      	beq.n	8008112 <HAL_UART_IRQHandler+0x18a>
 80080ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00c      	beq.n	8008112 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008108:	f043 0220 	orr.w	r2, r3, #32
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8212 	beq.w	8008542 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800811e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00d      	beq.n	8008146 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800812a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b00      	cmp	r3, #0
 8008134:	d007      	beq.n	8008146 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800814c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d005      	beq.n	800816a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800815e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008162:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008166:	2b00      	cmp	r3, #0
 8008168:	d04f      	beq.n	800820a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 ff1c 	bl	8008fa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d141      	bne.n	8008202 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3308      	adds	r3, #8
 8008184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800819c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1d9      	bne.n	800817e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d013      	beq.n	80081fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d6:	4a13      	ldr	r2, [pc, #76]	; (8008224 <HAL_UART_IRQHandler+0x29c>)
 80081d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fb ff38 	bl	8004054 <HAL_DMA_Abort_IT>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d017      	beq.n	800821a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f8:	e00f      	b.n	800821a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f9d4 	bl	80085a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008200:	e00b      	b.n	800821a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f9d0 	bl	80085a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008208:	e007      	b.n	800821a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f9cc 	bl	80085a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008218:	e193      	b.n	8008542 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821a:	bf00      	nop
    return;
 800821c:	e191      	b.n	8008542 <HAL_UART_IRQHandler+0x5ba>
 800821e:	bf00      	nop
 8008220:	04000120 	.word	0x04000120
 8008224:	08009307 	.word	0x08009307

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822c:	2b01      	cmp	r3, #1
 800822e:	f040 814c 	bne.w	80084ca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008236:	f003 0310 	and.w	r3, r3, #16
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 8145 	beq.w	80084ca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008244:	f003 0310 	and.w	r3, r3, #16
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 813e 	beq.w	80084ca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2210      	movs	r2, #16
 8008254:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	f040 80b6 	bne.w	80083d2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008272:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 8165 	beq.w	8008546 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008286:	429a      	cmp	r2, r3
 8008288:	f080 815d 	bcs.w	8008546 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008292:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a0:	f000 8086 	beq.w	80083b0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1da      	bne.n	80082a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3308      	adds	r3, #8
 80082f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008312:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008316:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800831a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e1      	bne.n	80082ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800833a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800833c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800834e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008350:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008354:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800835c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e3      	bne.n	800832a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800837e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008380:	f023 0310 	bic.w	r3, r3, #16
 8008384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008392:	65bb      	str	r3, [r7, #88]	; 0x58
 8008394:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e4      	bne.n	8008370 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fb fde2 	bl	8003f74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f8f6 	bl	80085bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083d0:	e0b9      	b.n	8008546 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083de:	b29b      	uxth	r3, r3
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80ab 	beq.w	800854a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80083f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80a6 	beq.w	800854a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008420:	647b      	str	r3, [r7, #68]	; 0x44
 8008422:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e4      	bne.n	80083fe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	623b      	str	r3, [r7, #32]
   return(result);
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	f023 0301 	bic.w	r3, r3, #1
 800844a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008458:	633a      	str	r2, [r7, #48]	; 0x30
 800845a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800845e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e3      	bne.n	8008434 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	60fb      	str	r3, [r7, #12]
   return(result);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f023 0310 	bic.w	r3, r3, #16
 8008494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	69b9      	ldr	r1, [r7, #24]
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	617b      	str	r3, [r7, #20]
   return(result);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e4      	bne.n	8008480 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f87a 	bl	80085bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084c8:	e03f      	b.n	800854a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <HAL_UART_IRQHandler+0x56c>
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f871 	bl	80085d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084f2:	e02d      	b.n	8008550 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00e      	beq.n	800851e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008508:	2b00      	cmp	r3, #0
 800850a:	d008      	beq.n	800851e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01c      	beq.n	800854e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4798      	blx	r3
    }
    return;
 800851c:	e017      	b.n	800854e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800851e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	2b00      	cmp	r3, #0
 8008528:	d012      	beq.n	8008550 <HAL_UART_IRQHandler+0x5c8>
 800852a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00c      	beq.n	8008550 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fefb 	bl	8009332 <UART_EndTransmit_IT>
    return;
 800853c:	e008      	b.n	8008550 <HAL_UART_IRQHandler+0x5c8>
      return;
 800853e:	bf00      	nop
 8008540:	e006      	b.n	8008550 <HAL_UART_IRQHandler+0x5c8>
    return;
 8008542:	bf00      	nop
 8008544:	e004      	b.n	8008550 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008546:	bf00      	nop
 8008548:	e002      	b.n	8008550 <HAL_UART_IRQHandler+0x5c8>
      return;
 800854a:	bf00      	nop
 800854c:	e000      	b.n	8008550 <HAL_UART_IRQHandler+0x5c8>
    return;
 800854e:	bf00      	nop
  }

}
 8008550:	37e8      	adds	r7, #232	; 0xe8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	4313      	orrs	r3, r2
 800860a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4ba6      	ldr	r3, [pc, #664]	; (80088ac <UART_SetConfig+0x2c4>)
 8008614:	4013      	ands	r3, r2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	6979      	ldr	r1, [r7, #20]
 800861c:	430b      	orrs	r3, r1
 800861e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	430a      	orrs	r2, r1
 8008658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a94      	ldr	r2, [pc, #592]	; (80088b0 <UART_SetConfig+0x2c8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d120      	bne.n	80086a6 <UART_SetConfig+0xbe>
 8008664:	4b93      	ldr	r3, [pc, #588]	; (80088b4 <UART_SetConfig+0x2cc>)
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	2b03      	cmp	r3, #3
 8008670:	d816      	bhi.n	80086a0 <UART_SetConfig+0xb8>
 8008672:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <UART_SetConfig+0x90>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	08008689 	.word	0x08008689
 800867c:	08008695 	.word	0x08008695
 8008680:	0800868f 	.word	0x0800868f
 8008684:	0800869b 	.word	0x0800869b
 8008688:	2301      	movs	r3, #1
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e150      	b.n	8008930 <UART_SetConfig+0x348>
 800868e:	2302      	movs	r3, #2
 8008690:	77fb      	strb	r3, [r7, #31]
 8008692:	e14d      	b.n	8008930 <UART_SetConfig+0x348>
 8008694:	2304      	movs	r3, #4
 8008696:	77fb      	strb	r3, [r7, #31]
 8008698:	e14a      	b.n	8008930 <UART_SetConfig+0x348>
 800869a:	2308      	movs	r3, #8
 800869c:	77fb      	strb	r3, [r7, #31]
 800869e:	e147      	b.n	8008930 <UART_SetConfig+0x348>
 80086a0:	2310      	movs	r3, #16
 80086a2:	77fb      	strb	r3, [r7, #31]
 80086a4:	e144      	b.n	8008930 <UART_SetConfig+0x348>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a83      	ldr	r2, [pc, #524]	; (80088b8 <UART_SetConfig+0x2d0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d132      	bne.n	8008716 <UART_SetConfig+0x12e>
 80086b0:	4b80      	ldr	r3, [pc, #512]	; (80088b4 <UART_SetConfig+0x2cc>)
 80086b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b6:	f003 030c 	and.w	r3, r3, #12
 80086ba:	2b0c      	cmp	r3, #12
 80086bc:	d828      	bhi.n	8008710 <UART_SetConfig+0x128>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <UART_SetConfig+0xdc>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086f9 	.word	0x080086f9
 80086c8:	08008711 	.word	0x08008711
 80086cc:	08008711 	.word	0x08008711
 80086d0:	08008711 	.word	0x08008711
 80086d4:	08008705 	.word	0x08008705
 80086d8:	08008711 	.word	0x08008711
 80086dc:	08008711 	.word	0x08008711
 80086e0:	08008711 	.word	0x08008711
 80086e4:	080086ff 	.word	0x080086ff
 80086e8:	08008711 	.word	0x08008711
 80086ec:	08008711 	.word	0x08008711
 80086f0:	08008711 	.word	0x08008711
 80086f4:	0800870b 	.word	0x0800870b
 80086f8:	2300      	movs	r3, #0
 80086fa:	77fb      	strb	r3, [r7, #31]
 80086fc:	e118      	b.n	8008930 <UART_SetConfig+0x348>
 80086fe:	2302      	movs	r3, #2
 8008700:	77fb      	strb	r3, [r7, #31]
 8008702:	e115      	b.n	8008930 <UART_SetConfig+0x348>
 8008704:	2304      	movs	r3, #4
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e112      	b.n	8008930 <UART_SetConfig+0x348>
 800870a:	2308      	movs	r3, #8
 800870c:	77fb      	strb	r3, [r7, #31]
 800870e:	e10f      	b.n	8008930 <UART_SetConfig+0x348>
 8008710:	2310      	movs	r3, #16
 8008712:	77fb      	strb	r3, [r7, #31]
 8008714:	e10c      	b.n	8008930 <UART_SetConfig+0x348>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a68      	ldr	r2, [pc, #416]	; (80088bc <UART_SetConfig+0x2d4>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d120      	bne.n	8008762 <UART_SetConfig+0x17a>
 8008720:	4b64      	ldr	r3, [pc, #400]	; (80088b4 <UART_SetConfig+0x2cc>)
 8008722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008726:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800872a:	2b30      	cmp	r3, #48	; 0x30
 800872c:	d013      	beq.n	8008756 <UART_SetConfig+0x16e>
 800872e:	2b30      	cmp	r3, #48	; 0x30
 8008730:	d814      	bhi.n	800875c <UART_SetConfig+0x174>
 8008732:	2b20      	cmp	r3, #32
 8008734:	d009      	beq.n	800874a <UART_SetConfig+0x162>
 8008736:	2b20      	cmp	r3, #32
 8008738:	d810      	bhi.n	800875c <UART_SetConfig+0x174>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <UART_SetConfig+0x15c>
 800873e:	2b10      	cmp	r3, #16
 8008740:	d006      	beq.n	8008750 <UART_SetConfig+0x168>
 8008742:	e00b      	b.n	800875c <UART_SetConfig+0x174>
 8008744:	2300      	movs	r3, #0
 8008746:	77fb      	strb	r3, [r7, #31]
 8008748:	e0f2      	b.n	8008930 <UART_SetConfig+0x348>
 800874a:	2302      	movs	r3, #2
 800874c:	77fb      	strb	r3, [r7, #31]
 800874e:	e0ef      	b.n	8008930 <UART_SetConfig+0x348>
 8008750:	2304      	movs	r3, #4
 8008752:	77fb      	strb	r3, [r7, #31]
 8008754:	e0ec      	b.n	8008930 <UART_SetConfig+0x348>
 8008756:	2308      	movs	r3, #8
 8008758:	77fb      	strb	r3, [r7, #31]
 800875a:	e0e9      	b.n	8008930 <UART_SetConfig+0x348>
 800875c:	2310      	movs	r3, #16
 800875e:	77fb      	strb	r3, [r7, #31]
 8008760:	e0e6      	b.n	8008930 <UART_SetConfig+0x348>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a56      	ldr	r2, [pc, #344]	; (80088c0 <UART_SetConfig+0x2d8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d120      	bne.n	80087ae <UART_SetConfig+0x1c6>
 800876c:	4b51      	ldr	r3, [pc, #324]	; (80088b4 <UART_SetConfig+0x2cc>)
 800876e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008776:	2bc0      	cmp	r3, #192	; 0xc0
 8008778:	d013      	beq.n	80087a2 <UART_SetConfig+0x1ba>
 800877a:	2bc0      	cmp	r3, #192	; 0xc0
 800877c:	d814      	bhi.n	80087a8 <UART_SetConfig+0x1c0>
 800877e:	2b80      	cmp	r3, #128	; 0x80
 8008780:	d009      	beq.n	8008796 <UART_SetConfig+0x1ae>
 8008782:	2b80      	cmp	r3, #128	; 0x80
 8008784:	d810      	bhi.n	80087a8 <UART_SetConfig+0x1c0>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <UART_SetConfig+0x1a8>
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d006      	beq.n	800879c <UART_SetConfig+0x1b4>
 800878e:	e00b      	b.n	80087a8 <UART_SetConfig+0x1c0>
 8008790:	2300      	movs	r3, #0
 8008792:	77fb      	strb	r3, [r7, #31]
 8008794:	e0cc      	b.n	8008930 <UART_SetConfig+0x348>
 8008796:	2302      	movs	r3, #2
 8008798:	77fb      	strb	r3, [r7, #31]
 800879a:	e0c9      	b.n	8008930 <UART_SetConfig+0x348>
 800879c:	2304      	movs	r3, #4
 800879e:	77fb      	strb	r3, [r7, #31]
 80087a0:	e0c6      	b.n	8008930 <UART_SetConfig+0x348>
 80087a2:	2308      	movs	r3, #8
 80087a4:	77fb      	strb	r3, [r7, #31]
 80087a6:	e0c3      	b.n	8008930 <UART_SetConfig+0x348>
 80087a8:	2310      	movs	r3, #16
 80087aa:	77fb      	strb	r3, [r7, #31]
 80087ac:	e0c0      	b.n	8008930 <UART_SetConfig+0x348>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a44      	ldr	r2, [pc, #272]	; (80088c4 <UART_SetConfig+0x2dc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d125      	bne.n	8008804 <UART_SetConfig+0x21c>
 80087b8:	4b3e      	ldr	r3, [pc, #248]	; (80088b4 <UART_SetConfig+0x2cc>)
 80087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c6:	d017      	beq.n	80087f8 <UART_SetConfig+0x210>
 80087c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087cc:	d817      	bhi.n	80087fe <UART_SetConfig+0x216>
 80087ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d2:	d00b      	beq.n	80087ec <UART_SetConfig+0x204>
 80087d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d8:	d811      	bhi.n	80087fe <UART_SetConfig+0x216>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <UART_SetConfig+0x1fe>
 80087de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e2:	d006      	beq.n	80087f2 <UART_SetConfig+0x20a>
 80087e4:	e00b      	b.n	80087fe <UART_SetConfig+0x216>
 80087e6:	2300      	movs	r3, #0
 80087e8:	77fb      	strb	r3, [r7, #31]
 80087ea:	e0a1      	b.n	8008930 <UART_SetConfig+0x348>
 80087ec:	2302      	movs	r3, #2
 80087ee:	77fb      	strb	r3, [r7, #31]
 80087f0:	e09e      	b.n	8008930 <UART_SetConfig+0x348>
 80087f2:	2304      	movs	r3, #4
 80087f4:	77fb      	strb	r3, [r7, #31]
 80087f6:	e09b      	b.n	8008930 <UART_SetConfig+0x348>
 80087f8:	2308      	movs	r3, #8
 80087fa:	77fb      	strb	r3, [r7, #31]
 80087fc:	e098      	b.n	8008930 <UART_SetConfig+0x348>
 80087fe:	2310      	movs	r3, #16
 8008800:	77fb      	strb	r3, [r7, #31]
 8008802:	e095      	b.n	8008930 <UART_SetConfig+0x348>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a2f      	ldr	r2, [pc, #188]	; (80088c8 <UART_SetConfig+0x2e0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d125      	bne.n	800885a <UART_SetConfig+0x272>
 800880e:	4b29      	ldr	r3, [pc, #164]	; (80088b4 <UART_SetConfig+0x2cc>)
 8008810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800881c:	d017      	beq.n	800884e <UART_SetConfig+0x266>
 800881e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008822:	d817      	bhi.n	8008854 <UART_SetConfig+0x26c>
 8008824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008828:	d00b      	beq.n	8008842 <UART_SetConfig+0x25a>
 800882a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800882e:	d811      	bhi.n	8008854 <UART_SetConfig+0x26c>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <UART_SetConfig+0x254>
 8008834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008838:	d006      	beq.n	8008848 <UART_SetConfig+0x260>
 800883a:	e00b      	b.n	8008854 <UART_SetConfig+0x26c>
 800883c:	2301      	movs	r3, #1
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e076      	b.n	8008930 <UART_SetConfig+0x348>
 8008842:	2302      	movs	r3, #2
 8008844:	77fb      	strb	r3, [r7, #31]
 8008846:	e073      	b.n	8008930 <UART_SetConfig+0x348>
 8008848:	2304      	movs	r3, #4
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	e070      	b.n	8008930 <UART_SetConfig+0x348>
 800884e:	2308      	movs	r3, #8
 8008850:	77fb      	strb	r3, [r7, #31]
 8008852:	e06d      	b.n	8008930 <UART_SetConfig+0x348>
 8008854:	2310      	movs	r3, #16
 8008856:	77fb      	strb	r3, [r7, #31]
 8008858:	e06a      	b.n	8008930 <UART_SetConfig+0x348>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1b      	ldr	r2, [pc, #108]	; (80088cc <UART_SetConfig+0x2e4>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d138      	bne.n	80088d6 <UART_SetConfig+0x2ee>
 8008864:	4b13      	ldr	r3, [pc, #76]	; (80088b4 <UART_SetConfig+0x2cc>)
 8008866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800886e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008872:	d017      	beq.n	80088a4 <UART_SetConfig+0x2bc>
 8008874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008878:	d82a      	bhi.n	80088d0 <UART_SetConfig+0x2e8>
 800887a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887e:	d00b      	beq.n	8008898 <UART_SetConfig+0x2b0>
 8008880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008884:	d824      	bhi.n	80088d0 <UART_SetConfig+0x2e8>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <UART_SetConfig+0x2aa>
 800888a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800888e:	d006      	beq.n	800889e <UART_SetConfig+0x2b6>
 8008890:	e01e      	b.n	80088d0 <UART_SetConfig+0x2e8>
 8008892:	2300      	movs	r3, #0
 8008894:	77fb      	strb	r3, [r7, #31]
 8008896:	e04b      	b.n	8008930 <UART_SetConfig+0x348>
 8008898:	2302      	movs	r3, #2
 800889a:	77fb      	strb	r3, [r7, #31]
 800889c:	e048      	b.n	8008930 <UART_SetConfig+0x348>
 800889e:	2304      	movs	r3, #4
 80088a0:	77fb      	strb	r3, [r7, #31]
 80088a2:	e045      	b.n	8008930 <UART_SetConfig+0x348>
 80088a4:	2308      	movs	r3, #8
 80088a6:	77fb      	strb	r3, [r7, #31]
 80088a8:	e042      	b.n	8008930 <UART_SetConfig+0x348>
 80088aa:	bf00      	nop
 80088ac:	efff69f3 	.word	0xefff69f3
 80088b0:	40011000 	.word	0x40011000
 80088b4:	40023800 	.word	0x40023800
 80088b8:	40004400 	.word	0x40004400
 80088bc:	40004800 	.word	0x40004800
 80088c0:	40004c00 	.word	0x40004c00
 80088c4:	40005000 	.word	0x40005000
 80088c8:	40011400 	.word	0x40011400
 80088cc:	40007800 	.word	0x40007800
 80088d0:	2310      	movs	r3, #16
 80088d2:	77fb      	strb	r3, [r7, #31]
 80088d4:	e02c      	b.n	8008930 <UART_SetConfig+0x348>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a72      	ldr	r2, [pc, #456]	; (8008aa4 <UART_SetConfig+0x4bc>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d125      	bne.n	800892c <UART_SetConfig+0x344>
 80088e0:	4b71      	ldr	r3, [pc, #452]	; (8008aa8 <UART_SetConfig+0x4c0>)
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80088ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80088ee:	d017      	beq.n	8008920 <UART_SetConfig+0x338>
 80088f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80088f4:	d817      	bhi.n	8008926 <UART_SetConfig+0x33e>
 80088f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088fa:	d00b      	beq.n	8008914 <UART_SetConfig+0x32c>
 80088fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008900:	d811      	bhi.n	8008926 <UART_SetConfig+0x33e>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <UART_SetConfig+0x326>
 8008906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800890a:	d006      	beq.n	800891a <UART_SetConfig+0x332>
 800890c:	e00b      	b.n	8008926 <UART_SetConfig+0x33e>
 800890e:	2300      	movs	r3, #0
 8008910:	77fb      	strb	r3, [r7, #31]
 8008912:	e00d      	b.n	8008930 <UART_SetConfig+0x348>
 8008914:	2302      	movs	r3, #2
 8008916:	77fb      	strb	r3, [r7, #31]
 8008918:	e00a      	b.n	8008930 <UART_SetConfig+0x348>
 800891a:	2304      	movs	r3, #4
 800891c:	77fb      	strb	r3, [r7, #31]
 800891e:	e007      	b.n	8008930 <UART_SetConfig+0x348>
 8008920:	2308      	movs	r3, #8
 8008922:	77fb      	strb	r3, [r7, #31]
 8008924:	e004      	b.n	8008930 <UART_SetConfig+0x348>
 8008926:	2310      	movs	r3, #16
 8008928:	77fb      	strb	r3, [r7, #31]
 800892a:	e001      	b.n	8008930 <UART_SetConfig+0x348>
 800892c:	2310      	movs	r3, #16
 800892e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008938:	d15b      	bne.n	80089f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800893a:	7ffb      	ldrb	r3, [r7, #31]
 800893c:	2b08      	cmp	r3, #8
 800893e:	d828      	bhi.n	8008992 <UART_SetConfig+0x3aa>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x360>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008975 	.word	0x08008975
 8008950:	0800897d 	.word	0x0800897d
 8008954:	08008993 	.word	0x08008993
 8008958:	08008983 	.word	0x08008983
 800895c:	08008993 	.word	0x08008993
 8008960:	08008993 	.word	0x08008993
 8008964:	08008993 	.word	0x08008993
 8008968:	0800898b 	.word	0x0800898b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fd ff9e 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8008970:	61b8      	str	r0, [r7, #24]
        break;
 8008972:	e013      	b.n	800899c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008974:	f7fd ffae 	bl	80068d4 <HAL_RCC_GetPCLK2Freq>
 8008978:	61b8      	str	r0, [r7, #24]
        break;
 800897a:	e00f      	b.n	800899c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800897c:	4b4b      	ldr	r3, [pc, #300]	; (8008aac <UART_SetConfig+0x4c4>)
 800897e:	61bb      	str	r3, [r7, #24]
        break;
 8008980:	e00c      	b.n	800899c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008982:	f7fd fe81 	bl	8006688 <HAL_RCC_GetSysClockFreq>
 8008986:	61b8      	str	r0, [r7, #24]
        break;
 8008988:	e008      	b.n	800899c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800898a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800898e:	61bb      	str	r3, [r7, #24]
        break;
 8008990:	e004      	b.n	800899c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	77bb      	strb	r3, [r7, #30]
        break;
 800899a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d074      	beq.n	8008a8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	005a      	lsls	r2, r3, #1
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	441a      	add	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b0f      	cmp	r3, #15
 80089bc:	d916      	bls.n	80089ec <UART_SetConfig+0x404>
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c4:	d212      	bcs.n	80089ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f023 030f 	bic.w	r3, r3, #15
 80089ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	085b      	lsrs	r3, r3, #1
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	b29a      	uxth	r2, r3
 80089dc:	89fb      	ldrh	r3, [r7, #14]
 80089de:	4313      	orrs	r3, r2
 80089e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	89fa      	ldrh	r2, [r7, #14]
 80089e8:	60da      	str	r2, [r3, #12]
 80089ea:	e04f      	b.n	8008a8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	77bb      	strb	r3, [r7, #30]
 80089f0:	e04c      	b.n	8008a8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089f2:	7ffb      	ldrb	r3, [r7, #31]
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d828      	bhi.n	8008a4a <UART_SetConfig+0x462>
 80089f8:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <UART_SetConfig+0x418>)
 80089fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fe:	bf00      	nop
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a2d 	.word	0x08008a2d
 8008a08:	08008a35 	.word	0x08008a35
 8008a0c:	08008a4b 	.word	0x08008a4b
 8008a10:	08008a3b 	.word	0x08008a3b
 8008a14:	08008a4b 	.word	0x08008a4b
 8008a18:	08008a4b 	.word	0x08008a4b
 8008a1c:	08008a4b 	.word	0x08008a4b
 8008a20:	08008a43 	.word	0x08008a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a24:	f7fd ff42 	bl	80068ac <HAL_RCC_GetPCLK1Freq>
 8008a28:	61b8      	str	r0, [r7, #24]
        break;
 8008a2a:	e013      	b.n	8008a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a2c:	f7fd ff52 	bl	80068d4 <HAL_RCC_GetPCLK2Freq>
 8008a30:	61b8      	str	r0, [r7, #24]
        break;
 8008a32:	e00f      	b.n	8008a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a34:	4b1d      	ldr	r3, [pc, #116]	; (8008aac <UART_SetConfig+0x4c4>)
 8008a36:	61bb      	str	r3, [r7, #24]
        break;
 8008a38:	e00c      	b.n	8008a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a3a:	f7fd fe25 	bl	8006688 <HAL_RCC_GetSysClockFreq>
 8008a3e:	61b8      	str	r0, [r7, #24]
        break;
 8008a40:	e008      	b.n	8008a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a46:	61bb      	str	r3, [r7, #24]
        break;
 8008a48:	e004      	b.n	8008a54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	77bb      	strb	r3, [r7, #30]
        break;
 8008a52:	bf00      	nop
    }

    if (pclk != 0U)
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d018      	beq.n	8008a8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	085a      	lsrs	r2, r3, #1
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	441a      	add	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b0f      	cmp	r3, #15
 8008a72:	d909      	bls.n	8008a88 <UART_SetConfig+0x4a0>
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a7a:	d205      	bcs.n	8008a88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60da      	str	r2, [r3, #12]
 8008a86:	e001      	b.n	8008a8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a98:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40007c00 	.word	0x40007c00
 8008aa8:	40023800 	.word	0x40023800
 8008aac:	00f42400 	.word	0x00f42400

08008ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	f003 0308 	and.w	r3, r3, #8
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	f003 0310 	and.w	r3, r3, #16
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01a      	beq.n	8008bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bae:	d10a      	bne.n	8008bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00a      	beq.n	8008be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	430a      	orrs	r2, r1
 8008be6:	605a      	str	r2, [r3, #4]
  }
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c04:	f7fa fa90 	bl	8003128 <HAL_GetTick>
 8008c08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0308 	and.w	r3, r3, #8
 8008c14:	2b08      	cmp	r3, #8
 8008c16:	d10e      	bne.n	8008c36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f831 	bl	8008c8e <UART_WaitOnFlagUntilTimeout>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e027      	b.n	8008c86 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d10e      	bne.n	8008c62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f81b 	bl	8008c8e <UART_WaitOnFlagUntilTimeout>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e011      	b.n	8008c86 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b09c      	sub	sp, #112	; 0x70
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	603b      	str	r3, [r7, #0]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c9e:	e0a7      	b.n	8008df0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ca6:	f000 80a3 	beq.w	8008df0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008caa:	f7fa fa3d 	bl	8003128 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d302      	bcc.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8008cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d13f      	bne.n	8008d40 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ce0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e6      	bne.n	8008cc0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	663b      	str	r3, [r7, #96]	; 0x60
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e5      	bne.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e068      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d050      	beq.n	8008df0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d5c:	d148      	bne.n	8008df0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d66:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d86:	637b      	str	r3, [r7, #52]	; 0x34
 8008d88:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e6      	bne.n	8008d68 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	613b      	str	r3, [r7, #16]
   return(result);
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3308      	adds	r3, #8
 8008db8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dba:	623a      	str	r2, [r7, #32]
 8008dbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbe:	69f9      	ldr	r1, [r7, #28]
 8008dc0:	6a3a      	ldr	r2, [r7, #32]
 8008dc2:	e841 2300 	strex	r3, r2, [r1]
 8008dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1e5      	bne.n	8008d9a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e010      	b.n	8008e12 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69da      	ldr	r2, [r3, #28]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	bf0c      	ite	eq
 8008e00:	2301      	moveq	r3, #1
 8008e02:	2300      	movne	r3, #0
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	461a      	mov	r2, r3
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	f43f af48 	beq.w	8008ca0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3770      	adds	r7, #112	; 0x70
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b096      	sub	sp, #88	; 0x58
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4613      	mov	r3, r2
 8008e28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2222      	movs	r2, #34	; 0x22
 8008e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d028      	beq.n	8008ea2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	4a3e      	ldr	r2, [pc, #248]	; (8008f50 <UART_Start_Receive_DMA+0x134>)
 8008e56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5c:	4a3d      	ldr	r2, [pc, #244]	; (8008f54 <UART_Start_Receive_DMA+0x138>)
 8008e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e64:	4a3c      	ldr	r2, [pc, #240]	; (8008f58 <UART_Start_Receive_DMA+0x13c>)
 8008e66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3324      	adds	r3, #36	; 0x24
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e80:	461a      	mov	r2, r3
 8008e82:	88fb      	ldrh	r3, [r7, #6]
 8008e84:	f7fb f816 	bl	8003eb4 <HAL_DMA_Start_IT>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2210      	movs	r2, #16
 8008e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e051      	b.n	8008f46 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d018      	beq.n	8008edc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ebe:	657b      	str	r3, [r7, #84]	; 0x54
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008efc:	637a      	str	r2, [r7, #52]	; 0x34
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e5      	bne.n	8008edc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3308      	adds	r3, #8
 8008f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f30:	623a      	str	r2, [r7, #32]
 8008f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	69f9      	ldr	r1, [r7, #28]
 8008f36:	6a3a      	ldr	r2, [r7, #32]
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e5      	bne.n	8008f10 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3758      	adds	r7, #88	; 0x58
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	08009123 	.word	0x08009123
 8008f54:	0800924b 	.word	0x0800924b
 8008f58:	08009289 	.word	0x08009289

08008f5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b089      	sub	sp, #36	; 0x24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f78:	61fb      	str	r3, [r7, #28]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	61bb      	str	r3, [r7, #24]
 8008f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6979      	ldr	r1, [r7, #20]
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e6      	bne.n	8008f64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008f9c:	bf00      	nop
 8008f9e:	3724      	adds	r7, #36	; 0x24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b095      	sub	sp, #84	; 0x54
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fce:	643b      	str	r3, [r7, #64]	; 0x40
 8008fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e6      	bne.n	8008fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f023 0301 	bic.w	r3, r3, #1
 8008ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3308      	adds	r3, #8
 8009000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e5      	bne.n	8008fe2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901a:	2b01      	cmp	r3, #1
 800901c:	d118      	bne.n	8009050 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	60bb      	str	r3, [r7, #8]
   return(result);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f023 0310 	bic.w	r3, r3, #16
 8009032:	647b      	str	r3, [r7, #68]	; 0x44
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800903c:	61bb      	str	r3, [r7, #24]
 800903e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6979      	ldr	r1, [r7, #20]
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	613b      	str	r3, [r7, #16]
   return(result);
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e6      	bne.n	800901e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2220      	movs	r2, #32
 8009054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009064:	bf00      	nop
 8009066:	3754      	adds	r7, #84	; 0x54
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b090      	sub	sp, #64	; 0x40
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009086:	d037      	beq.n	80090f8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908a:	2200      	movs	r2, #0
 800908c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3308      	adds	r3, #8
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	623b      	str	r3, [r7, #32]
   return(result);
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80090a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090b0:	633a      	str	r2, [r7, #48]	; 0x30
 80090b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e5      	bne.n	8009090 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d8:	637b      	str	r3, [r7, #52]	; 0x34
 80090da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e2:	61fb      	str	r3, [r7, #28]
 80090e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	69b9      	ldr	r1, [r7, #24]
 80090e8:	69fa      	ldr	r2, [r7, #28]
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	617b      	str	r3, [r7, #20]
   return(result);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e6      	bne.n	80090c4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090f6:	e002      	b.n	80090fe <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80090f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090fa:	f7ff fa2d 	bl	8008558 <HAL_UART_TxCpltCallback>
}
 80090fe:	bf00      	nop
 8009100:	3740      	adds	r7, #64	; 0x40
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7ff fa29 	bl	800856c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b09c      	sub	sp, #112	; 0x70
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009138:	d071      	beq.n	800921e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800913a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913c:	2200      	movs	r2, #0
 800913e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009156:	66bb      	str	r3, [r7, #104]	; 0x68
 8009158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009160:	65bb      	str	r3, [r7, #88]	; 0x58
 8009162:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800916e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e6      	bne.n	8009142 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	667b      	str	r3, [r7, #100]	; 0x64
 800918c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009194:	647a      	str	r2, [r7, #68]	; 0x44
 8009196:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800919a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e5      	bne.n	8009174 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	623b      	str	r3, [r7, #32]
   return(result);
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091be:	663b      	str	r3, [r7, #96]	; 0x60
 80091c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091c8:	633a      	str	r2, [r7, #48]	; 0x30
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e5      	bne.n	80091a8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091de:	2220      	movs	r2, #32
 80091e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d118      	bne.n	800921e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f023 0310 	bic.w	r3, r3, #16
 8009200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	69b9      	ldr	r1, [r7, #24]
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	617b      	str	r3, [r7, #20]
   return(result);
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e6      	bne.n	80091ec <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800921e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009220:	2200      	movs	r2, #0
 8009222:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009228:	2b01      	cmp	r3, #1
 800922a:	d107      	bne.n	800923c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800922c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009232:	4619      	mov	r1, r3
 8009234:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009236:	f7ff f9c1 	bl	80085bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800923a:	e002      	b.n	8009242 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800923c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800923e:	f7ff f99f 	bl	8008580 <HAL_UART_RxCpltCallback>
}
 8009242:	bf00      	nop
 8009244:	3770      	adds	r7, #112	; 0x70
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009256:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009262:	2b01      	cmp	r3, #1
 8009264:	d109      	bne.n	800927a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800926c:	085b      	lsrs	r3, r3, #1
 800926e:	b29b      	uxth	r3, r3
 8009270:	4619      	mov	r1, r3
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff f9a2 	bl	80085bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009278:	e002      	b.n	8009280 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff f98a 	bl	8008594 <HAL_UART_RxHalfCpltCallback>
}
 8009280:	bf00      	nop
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ae:	2b80      	cmp	r3, #128	; 0x80
 80092b0:	d109      	bne.n	80092c6 <UART_DMAError+0x3e>
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b21      	cmp	r3, #33	; 0x21
 80092b6:	d106      	bne.n	80092c6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80092c0:	6978      	ldr	r0, [r7, #20]
 80092c2:	f7ff fe4b 	bl	8008f5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d0:	2b40      	cmp	r3, #64	; 0x40
 80092d2:	d109      	bne.n	80092e8 <UART_DMAError+0x60>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b22      	cmp	r3, #34	; 0x22
 80092d8:	d106      	bne.n	80092e8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f7ff fe60 	bl	8008fa8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ee:	f043 0210 	orr.w	r2, r3, #16
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092f8:	6978      	ldr	r0, [r7, #20]
 80092fa:	f7ff f955 	bl	80085a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092fe:	bf00      	nop
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7ff f93f 	bl	80085a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b088      	sub	sp, #32
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	60bb      	str	r3, [r7, #8]
   return(result);
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934e:	61fb      	str	r3, [r7, #28]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	461a      	mov	r2, r3
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	61bb      	str	r3, [r7, #24]
 800935a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935c:	6979      	ldr	r1, [r7, #20]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	e841 2300 	strex	r3, r2, [r1]
 8009364:	613b      	str	r3, [r7, #16]
   return(result);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e6      	bne.n	800933a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff f8ed 	bl	8008558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800937e:	bf00      	nop
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009388:	b084      	sub	sp, #16
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	f107 001c 	add.w	r0, r7, #28
 8009396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	2b01      	cmp	r3, #1
 800939e:	d120      	bne.n	80093e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	4b20      	ldr	r3, [pc, #128]	; (8009434 <USB_CoreInit+0xac>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d105      	bne.n	80093d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fbee 	bl	800abb8 <USB_CoreReset>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]
 80093e0:	e010      	b.n	8009404 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fbe2 	bl	800abb8 <USB_CoreReset>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	2b01      	cmp	r3, #1
 8009408:	d10b      	bne.n	8009422 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f043 0206 	orr.w	r2, r3, #6
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f043 0220 	orr.w	r2, r3, #32
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009422:	7bfb      	ldrb	r3, [r7, #15]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800942e:	b004      	add	sp, #16
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	ffbdffbf 	.word	0xffbdffbf

08009438 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d165      	bne.n	8009518 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4a41      	ldr	r2, [pc, #260]	; (8009554 <USB_SetTurnaroundTime+0x11c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d906      	bls.n	8009462 <USB_SetTurnaroundTime+0x2a>
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4a40      	ldr	r2, [pc, #256]	; (8009558 <USB_SetTurnaroundTime+0x120>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d202      	bcs.n	8009462 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800945c:	230f      	movs	r3, #15
 800945e:	617b      	str	r3, [r7, #20]
 8009460:	e062      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	4a3c      	ldr	r2, [pc, #240]	; (8009558 <USB_SetTurnaroundTime+0x120>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d306      	bcc.n	8009478 <USB_SetTurnaroundTime+0x40>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	4a3b      	ldr	r2, [pc, #236]	; (800955c <USB_SetTurnaroundTime+0x124>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d202      	bcs.n	8009478 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009472:	230e      	movs	r3, #14
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	e057      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	4a38      	ldr	r2, [pc, #224]	; (800955c <USB_SetTurnaroundTime+0x124>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d306      	bcc.n	800948e <USB_SetTurnaroundTime+0x56>
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4a37      	ldr	r2, [pc, #220]	; (8009560 <USB_SetTurnaroundTime+0x128>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d202      	bcs.n	800948e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009488:	230d      	movs	r3, #13
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	e04c      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	4a33      	ldr	r2, [pc, #204]	; (8009560 <USB_SetTurnaroundTime+0x128>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d306      	bcc.n	80094a4 <USB_SetTurnaroundTime+0x6c>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	4a32      	ldr	r2, [pc, #200]	; (8009564 <USB_SetTurnaroundTime+0x12c>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d802      	bhi.n	80094a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800949e:	230c      	movs	r3, #12
 80094a0:	617b      	str	r3, [r7, #20]
 80094a2:	e041      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	4a2f      	ldr	r2, [pc, #188]	; (8009564 <USB_SetTurnaroundTime+0x12c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d906      	bls.n	80094ba <USB_SetTurnaroundTime+0x82>
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	4a2e      	ldr	r2, [pc, #184]	; (8009568 <USB_SetTurnaroundTime+0x130>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d802      	bhi.n	80094ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80094b4:	230b      	movs	r3, #11
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e036      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	4a2a      	ldr	r2, [pc, #168]	; (8009568 <USB_SetTurnaroundTime+0x130>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d906      	bls.n	80094d0 <USB_SetTurnaroundTime+0x98>
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	4a29      	ldr	r2, [pc, #164]	; (800956c <USB_SetTurnaroundTime+0x134>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d802      	bhi.n	80094d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80094ca:	230a      	movs	r3, #10
 80094cc:	617b      	str	r3, [r7, #20]
 80094ce:	e02b      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4a26      	ldr	r2, [pc, #152]	; (800956c <USB_SetTurnaroundTime+0x134>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d906      	bls.n	80094e6 <USB_SetTurnaroundTime+0xae>
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4a25      	ldr	r2, [pc, #148]	; (8009570 <USB_SetTurnaroundTime+0x138>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d202      	bcs.n	80094e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80094e0:	2309      	movs	r3, #9
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	e020      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	4a21      	ldr	r2, [pc, #132]	; (8009570 <USB_SetTurnaroundTime+0x138>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d306      	bcc.n	80094fc <USB_SetTurnaroundTime+0xc4>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	4a20      	ldr	r2, [pc, #128]	; (8009574 <USB_SetTurnaroundTime+0x13c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d802      	bhi.n	80094fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80094f6:	2308      	movs	r3, #8
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	e015      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	4a1d      	ldr	r2, [pc, #116]	; (8009574 <USB_SetTurnaroundTime+0x13c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d906      	bls.n	8009512 <USB_SetTurnaroundTime+0xda>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4a1c      	ldr	r2, [pc, #112]	; (8009578 <USB_SetTurnaroundTime+0x140>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d202      	bcs.n	8009512 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800950c:	2307      	movs	r3, #7
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	e00a      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009512:	2306      	movs	r3, #6
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	e007      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800951e:	2309      	movs	r3, #9
 8009520:	617b      	str	r3, [r7, #20]
 8009522:	e001      	b.n	8009528 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009524:	2309      	movs	r3, #9
 8009526:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	029b      	lsls	r3, r3, #10
 800953c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009540:	431a      	orrs	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	371c      	adds	r7, #28
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	00d8acbf 	.word	0x00d8acbf
 8009558:	00e4e1c0 	.word	0x00e4e1c0
 800955c:	00f42400 	.word	0x00f42400
 8009560:	01067380 	.word	0x01067380
 8009564:	011a499f 	.word	0x011a499f
 8009568:	01312cff 	.word	0x01312cff
 800956c:	014ca43f 	.word	0x014ca43f
 8009570:	016e3600 	.word	0x016e3600
 8009574:	01a6ab1f 	.word	0x01a6ab1f
 8009578:	01e84800 	.word	0x01e84800

0800957c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f043 0201 	orr.w	r2, r3, #1
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f023 0201 	bic.w	r2, r3, #1
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d115      	bne.n	800960e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095ee:	2001      	movs	r0, #1
 80095f0:	f7f9 fda6 	bl	8003140 <HAL_Delay>
      ms++;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	3301      	adds	r3, #1
 80095f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 fa4b 	bl	800aa96 <USB_GetMode>
 8009600:	4603      	mov	r3, r0
 8009602:	2b01      	cmp	r3, #1
 8009604:	d01e      	beq.n	8009644 <USB_SetCurrentMode+0x84>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b31      	cmp	r3, #49	; 0x31
 800960a:	d9f0      	bls.n	80095ee <USB_SetCurrentMode+0x2e>
 800960c:	e01a      	b.n	8009644 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d115      	bne.n	8009640 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009620:	2001      	movs	r0, #1
 8009622:	f7f9 fd8d 	bl	8003140 <HAL_Delay>
      ms++;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3301      	adds	r3, #1
 800962a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 fa32 	bl	800aa96 <USB_GetMode>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <USB_SetCurrentMode+0x84>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b31      	cmp	r3, #49	; 0x31
 800963c:	d9f0      	bls.n	8009620 <USB_SetCurrentMode+0x60>
 800963e:	e001      	b.n	8009644 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e005      	b.n	8009650 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b32      	cmp	r3, #50	; 0x32
 8009648:	d101      	bne.n	800964e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009658:	b084      	sub	sp, #16
 800965a:	b580      	push	{r7, lr}
 800965c:	b086      	sub	sp, #24
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009672:	2300      	movs	r3, #0
 8009674:	613b      	str	r3, [r7, #16]
 8009676:	e009      	b.n	800968c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	3340      	adds	r3, #64	; 0x40
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	2200      	movs	r2, #0
 8009684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	3301      	adds	r3, #1
 800968a:	613b      	str	r3, [r7, #16]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	2b0e      	cmp	r3, #14
 8009690:	d9f2      	bls.n	8009678 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d11c      	bne.n	80096d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096a6:	f043 0302 	orr.w	r3, r3, #2
 80096aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	e005      	b.n	80096de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096e4:	461a      	mov	r2, r3
 80096e6:	2300      	movs	r3, #0
 80096e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f0:	4619      	mov	r1, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f8:	461a      	mov	r2, r3
 80096fa:	680b      	ldr	r3, [r1, #0]
 80096fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	2b01      	cmp	r3, #1
 8009702:	d10c      	bne.n	800971e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d104      	bne.n	8009714 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800970a:	2100      	movs	r1, #0
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f965 	bl	80099dc <USB_SetDevSpeed>
 8009712:	e008      	b.n	8009726 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009714:	2101      	movs	r1, #1
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f960 	bl	80099dc <USB_SetDevSpeed>
 800971c:	e003      	b.n	8009726 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800971e:	2103      	movs	r1, #3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f95b 	bl	80099dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009726:	2110      	movs	r1, #16
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f8f3 	bl	8009914 <USB_FlushTxFifo>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f91f 	bl	800997c <USB_FlushRxFifo>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800974e:	461a      	mov	r2, r3
 8009750:	2300      	movs	r3, #0
 8009752:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800975a:	461a      	mov	r2, r3
 800975c:	2300      	movs	r3, #0
 800975e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009766:	461a      	mov	r2, r3
 8009768:	2300      	movs	r3, #0
 800976a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800976c:	2300      	movs	r3, #0
 800976e:	613b      	str	r3, [r7, #16]
 8009770:	e043      	b.n	80097fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009788:	d118      	bne.n	80097bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979c:	461a      	mov	r2, r3
 800979e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	e013      	b.n	80097ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b2:	461a      	mov	r2, r3
 80097b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	e008      	b.n	80097ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c8:	461a      	mov	r2, r3
 80097ca:	2300      	movs	r3, #0
 80097cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097da:	461a      	mov	r2, r3
 80097dc:	2300      	movs	r3, #0
 80097de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ec:	461a      	mov	r2, r3
 80097ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	3301      	adds	r3, #1
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d3b7      	bcc.n	8009772 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009802:	2300      	movs	r3, #0
 8009804:	613b      	str	r3, [r7, #16]
 8009806:	e043      	b.n	8009890 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800981a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800981e:	d118      	bne.n	8009852 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10a      	bne.n	800983c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009832:	461a      	mov	r2, r3
 8009834:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	e013      	b.n	8009864 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009848:	461a      	mov	r2, r3
 800984a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	e008      	b.n	8009864 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985e:	461a      	mov	r2, r3
 8009860:	2300      	movs	r3, #0
 8009862:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009870:	461a      	mov	r2, r3
 8009872:	2300      	movs	r3, #0
 8009874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009882:	461a      	mov	r2, r3
 8009884:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009888:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	3301      	adds	r3, #1
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	429a      	cmp	r2, r3
 8009896:	d3b7      	bcc.n	8009808 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80098b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d105      	bne.n	80098cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f043 0210 	orr.w	r2, r3, #16
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699a      	ldr	r2, [r3, #24]
 80098d0:	4b0e      	ldr	r3, [pc, #56]	; (800990c <USB_DevInit+0x2b4>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d005      	beq.n	80098ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	f043 0208 	orr.w	r2, r3, #8
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80098ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d105      	bne.n	80098fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	4b06      	ldr	r3, [pc, #24]	; (8009910 <USB_DevInit+0x2b8>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009908:	b004      	add	sp, #16
 800990a:	4770      	bx	lr
 800990c:	803c3800 	.word	0x803c3800
 8009910:	40000004 	.word	0x40000004

08009914 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3301      	adds	r3, #1
 8009926:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4a13      	ldr	r2, [pc, #76]	; (8009978 <USB_FlushTxFifo+0x64>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d901      	bls.n	8009934 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e01b      	b.n	800996c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	daf2      	bge.n	8009922 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	019b      	lsls	r3, r3, #6
 8009944:	f043 0220 	orr.w	r2, r3, #32
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4a08      	ldr	r2, [pc, #32]	; (8009978 <USB_FlushTxFifo+0x64>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d901      	bls.n	800995e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e006      	b.n	800996c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b20      	cmp	r3, #32
 8009968:	d0f0      	beq.n	800994c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	00030d40 	.word	0x00030d40

0800997c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3301      	adds	r3, #1
 800998c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4a11      	ldr	r2, [pc, #68]	; (80099d8 <USB_FlushRxFifo+0x5c>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d901      	bls.n	800999a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e018      	b.n	80099cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	daf2      	bge.n	8009988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2210      	movs	r2, #16
 80099aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4a08      	ldr	r2, [pc, #32]	; (80099d8 <USB_FlushRxFifo+0x5c>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d901      	bls.n	80099be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e006      	b.n	80099cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f003 0310 	and.w	r3, r3, #16
 80099c6:	2b10      	cmp	r3, #16
 80099c8:	d0f0      	beq.n	80099ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	00030d40 	.word	0x00030d40

080099dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	68f9      	ldr	r1, [r7, #12]
 80099f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099fc:	4313      	orrs	r3, r2
 80099fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b087      	sub	sp, #28
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f003 0306 	and.w	r3, r3, #6
 8009a26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d102      	bne.n	8009a34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	75fb      	strb	r3, [r7, #23]
 8009a32:	e00a      	b.n	8009a4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d002      	beq.n	8009a40 <USB_GetDevSpeed+0x32>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b06      	cmp	r3, #6
 8009a3e:	d102      	bne.n	8009a46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009a40:	2302      	movs	r3, #2
 8009a42:	75fb      	strb	r3, [r7, #23]
 8009a44:	e001      	b.n	8009a4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009a46:	230f      	movs	r3, #15
 8009a48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	371c      	adds	r7, #28
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d139      	bne.n	8009ae8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7a:	69da      	ldr	r2, [r3, #28]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	2101      	movs	r1, #1
 8009a86:	fa01 f303 	lsl.w	r3, r1, r3
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	68f9      	ldr	r1, [r7, #12]
 8009a8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a92:	4313      	orrs	r3, r2
 8009a94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d153      	bne.n	8009b54 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	791b      	ldrb	r3, [r3, #4]
 8009ac6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ac8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	059b      	lsls	r3, r3, #22
 8009ace:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	0159      	lsls	r1, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	440b      	add	r3, r1
 8009ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4b20      	ldr	r3, [pc, #128]	; (8009b64 <USB_ActivateEndpoint+0x10c>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	600b      	str	r3, [r1, #0]
 8009ae6:	e035      	b.n	8009b54 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aee:	69da      	ldr	r2, [r3, #28]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	2101      	movs	r1, #1
 8009afa:	fa01 f303 	lsl.w	r3, r1, r3
 8009afe:	041b      	lsls	r3, r3, #16
 8009b00:	68f9      	ldr	r1, [r7, #12]
 8009b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b06:	4313      	orrs	r3, r2
 8009b08:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d119      	bne.n	8009b54 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	791b      	ldrb	r3, [r3, #4]
 8009b3a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	0159      	lsls	r1, r3, #5
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	440b      	add	r3, r1
 8009b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <USB_ActivateEndpoint+0x10c>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	10008000 	.word	0x10008000

08009b68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d161      	bne.n	8009c48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b9a:	d11f      	bne.n	8009bdc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	0151      	lsls	r1, r2, #5
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	440a      	add	r2, r1
 8009bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	0151      	lsls	r1, r2, #5
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	440a      	add	r2, r1
 8009bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	f003 030f 	and.w	r3, r3, #15
 8009bec:	2101      	movs	r1, #1
 8009bee:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	43db      	mvns	r3, r3
 8009bf6:	68f9      	ldr	r1, [r7, #12]
 8009bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	2101      	movs	r1, #1
 8009c12:	fa01 f303 	lsl.w	r3, r1, r3
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	43db      	mvns	r3, r3
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c20:	4013      	ands	r3, r2
 8009c22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	0159      	lsls	r1, r3, #5
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	440b      	add	r3, r1
 8009c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4b35      	ldr	r3, [pc, #212]	; (8009d18 <USB_DeactivateEndpoint+0x1b0>)
 8009c42:	4013      	ands	r3, r2
 8009c44:	600b      	str	r3, [r1, #0]
 8009c46:	e060      	b.n	8009d0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c5e:	d11f      	bne.n	8009ca0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	0151      	lsls	r1, r2, #5
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	440a      	add	r2, r1
 8009c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	f003 030f 	and.w	r3, r3, #15
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb6:	041b      	lsls	r3, r3, #16
 8009cb8:	43db      	mvns	r3, r3
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cca:	69da      	ldr	r2, [r3, #28]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	f003 030f 	and.w	r3, r3, #15
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	43db      	mvns	r3, r3
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	0159      	lsls	r1, r3, #5
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	440b      	add	r3, r1
 8009cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d02:	4619      	mov	r1, r3
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <USB_DeactivateEndpoint+0x1b4>)
 8009d06:	4013      	ands	r3, r2
 8009d08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	ec337800 	.word	0xec337800
 8009d1c:	eff37800 	.word	0xeff37800

08009d20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	; 0x28
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	785b      	ldrb	r3, [r3, #1]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	f040 8163 	bne.w	800a008 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d132      	bne.n	8009db0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d56:	691a      	ldr	r2, [r3, #16]
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	0159      	lsls	r1, r3, #5
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	440b      	add	r3, r1
 8009d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d64:	4619      	mov	r1, r3
 8009d66:	4ba5      	ldr	r3, [pc, #660]	; (8009ffc <USB_EPStartXfer+0x2dc>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	0151      	lsls	r1, r2, #5
 8009d7e:	69fa      	ldr	r2, [r7, #28]
 8009d80:	440a      	add	r2, r1
 8009d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	0159      	lsls	r1, r3, #5
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	440b      	add	r3, r1
 8009da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da6:	4619      	mov	r1, r3
 8009da8:	4b95      	ldr	r3, [pc, #596]	; (800a000 <USB_EPStartXfer+0x2e0>)
 8009daa:	4013      	ands	r3, r2
 8009dac:	610b      	str	r3, [r1, #16]
 8009dae:	e074      	b.n	8009e9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	0159      	lsls	r1, r3, #5
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	440b      	add	r3, r1
 8009dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4b8c      	ldr	r3, [pc, #560]	; (800a000 <USB_EPStartXfer+0x2e0>)
 8009dce:	4013      	ands	r3, r2
 8009dd0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	0159      	lsls	r1, r3, #5
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	440b      	add	r3, r1
 8009de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dec:	4619      	mov	r1, r3
 8009dee:	4b83      	ldr	r3, [pc, #524]	; (8009ffc <USB_EPStartXfer+0x2dc>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e00:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6999      	ldr	r1, [r3, #24]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	440b      	add	r3, r1
 8009e0c:	1e59      	subs	r1, r3, #1
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e16:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009e18:	4b7a      	ldr	r3, [pc, #488]	; (800a004 <USB_EPStartXfer+0x2e4>)
 8009e1a:	400b      	ands	r3, r1
 8009e1c:	69b9      	ldr	r1, [r7, #24]
 8009e1e:	0148      	lsls	r0, r1, #5
 8009e20:	69f9      	ldr	r1, [r7, #28]
 8009e22:	4401      	add	r1, r0
 8009e24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e42:	69b9      	ldr	r1, [r7, #24]
 8009e44:	0148      	lsls	r0, r1, #5
 8009e46:	69f9      	ldr	r1, [r7, #28]
 8009e48:	4401      	add	r1, r0
 8009e4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	791b      	ldrb	r3, [r3, #4]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d11f      	bne.n	8009e9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009e78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	0151      	lsls	r1, r2, #5
 8009e8c:	69fa      	ldr	r2, [r7, #28]
 8009e8e:	440a      	add	r2, r1
 8009e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d14b      	bne.n	8009f38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d009      	beq.n	8009ebc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	791b      	ldrb	r3, [r3, #4]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d128      	bne.n	8009f16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d110      	bne.n	8009ef6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	0151      	lsls	r1, r2, #5
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	440a      	add	r2, r1
 8009eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	e00f      	b.n	8009f16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	69fa      	ldr	r2, [r7, #28]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	e137      	b.n	800a1a8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	69ba      	ldr	r2, [r7, #24]
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	69fa      	ldr	r2, [r7, #28]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	791b      	ldrb	r3, [r3, #4]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d015      	beq.n	8009f8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 811f 	beq.w	800a1a8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	f003 030f 	and.w	r3, r3, #15
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f80:	69f9      	ldr	r1, [r7, #28]
 8009f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f86:	4313      	orrs	r3, r2
 8009f88:	634b      	str	r3, [r1, #52]	; 0x34
 8009f8a:	e10d      	b.n	800a1a8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d110      	bne.n	8009fbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	e00f      	b.n	8009fde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	0151      	lsls	r1, r2, #5
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	440a      	add	r2, r1
 8009fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fdc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	6919      	ldr	r1, [r3, #16]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	781a      	ldrb	r2, [r3, #0]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	b298      	uxth	r0, r3
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 faea 	bl	800a5cc <USB_WritePacket>
 8009ff8:	e0d6      	b.n	800a1a8 <USB_EPStartXfer+0x488>
 8009ffa:	bf00      	nop
 8009ffc:	e007ffff 	.word	0xe007ffff
 800a000:	fff80000 	.word	0xfff80000
 800a004:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a014:	691a      	ldr	r2, [r3, #16]
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	0159      	lsls	r1, r3, #5
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	440b      	add	r3, r1
 800a01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a022:	4619      	mov	r1, r3
 800a024:	4b63      	ldr	r3, [pc, #396]	; (800a1b4 <USB_EPStartXfer+0x494>)
 800a026:	4013      	ands	r3, r2
 800a028:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	691a      	ldr	r2, [r3, #16]
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	0159      	lsls	r1, r3, #5
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	440b      	add	r3, r1
 800a040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a044:	4619      	mov	r1, r3
 800a046:	4b5c      	ldr	r3, [pc, #368]	; (800a1b8 <USB_EPStartXfer+0x498>)
 800a048:	4013      	ands	r3, r2
 800a04a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d123      	bne.n	800a09c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a060:	691a      	ldr	r2, [r3, #16]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a06a:	69b9      	ldr	r1, [r7, #24]
 800a06c:	0148      	lsls	r0, r1, #5
 800a06e:	69f9      	ldr	r1, [r7, #28]
 800a070:	4401      	add	r1, r0
 800a072:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a076:	4313      	orrs	r3, r2
 800a078:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	015a      	lsls	r2, r3, #5
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	4413      	add	r3, r2
 800a082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	69ba      	ldr	r2, [r7, #24]
 800a08a:	0151      	lsls	r1, r2, #5
 800a08c:	69fa      	ldr	r2, [r7, #28]
 800a08e:	440a      	add	r2, r1
 800a090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a098:	6113      	str	r3, [r2, #16]
 800a09a:	e037      	b.n	800a10c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	699a      	ldr	r2, [r3, #24]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	1e5a      	subs	r2, r3, #1
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	8afa      	ldrh	r2, [r7, #22]
 800a0b8:	fb03 f202 	mul.w	r2, r3, r2
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0cc:	691a      	ldr	r2, [r3, #16]
 800a0ce:	8afb      	ldrh	r3, [r7, #22]
 800a0d0:	04d9      	lsls	r1, r3, #19
 800a0d2:	4b3a      	ldr	r3, [pc, #232]	; (800a1bc <USB_EPStartXfer+0x49c>)
 800a0d4:	400b      	ands	r3, r1
 800a0d6:	69b9      	ldr	r1, [r7, #24]
 800a0d8:	0148      	lsls	r0, r1, #5
 800a0da:	69f9      	ldr	r1, [r7, #28]
 800a0dc:	4401      	add	r1, r0
 800a0de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f2:	691a      	ldr	r2, [r3, #16]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0fc:	69b9      	ldr	r1, [r7, #24]
 800a0fe:	0148      	lsls	r0, r1, #5
 800a100:	69f9      	ldr	r1, [r7, #28]
 800a102:	4401      	add	r1, r0
 800a104:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a108:	4313      	orrs	r3, r2
 800a10a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d10d      	bne.n	800a12e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d009      	beq.n	800a12e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	6919      	ldr	r1, [r3, #16]
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12a:	460a      	mov	r2, r1
 800a12c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	791b      	ldrb	r3, [r3, #4]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d128      	bne.n	800a188 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a142:	2b00      	cmp	r3, #0
 800a144:	d110      	bne.n	800a168 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	0151      	lsls	r1, r2, #5
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	440a      	add	r2, r1
 800a15c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	e00f      	b.n	800a188 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	0151      	lsls	r1, r2, #5
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	440a      	add	r2, r1
 800a17e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a186:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	0151      	lsls	r1, r2, #5
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	440a      	add	r2, r1
 800a19e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3720      	adds	r7, #32
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	fff80000 	.word	0xfff80000
 800a1b8:	e007ffff 	.word	0xe007ffff
 800a1bc:	1ff80000 	.word	0x1ff80000

0800a1c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	f040 80ce 	bne.w	800a37e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d132      	bne.n	800a250 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f6:	691a      	ldr	r2, [r3, #16]
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	0159      	lsls	r1, r3, #5
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	440b      	add	r3, r1
 800a200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a204:	4619      	mov	r1, r3
 800a206:	4b9a      	ldr	r3, [pc, #616]	; (800a470 <USB_EP0StartXfer+0x2b0>)
 800a208:	4013      	ands	r3, r2
 800a20a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	440a      	add	r2, r1
 800a222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a22a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a238:	691a      	ldr	r2, [r3, #16]
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	0159      	lsls	r1, r3, #5
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	440b      	add	r3, r1
 800a242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a246:	4619      	mov	r1, r3
 800a248:	4b8a      	ldr	r3, [pc, #552]	; (800a474 <USB_EP0StartXfer+0x2b4>)
 800a24a:	4013      	ands	r3, r2
 800a24c:	610b      	str	r3, [r1, #16]
 800a24e:	e04e      	b.n	800a2ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25c:	691a      	ldr	r2, [r3, #16]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	0159      	lsls	r1, r3, #5
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	440b      	add	r3, r1
 800a266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26a:	4619      	mov	r1, r3
 800a26c:	4b81      	ldr	r3, [pc, #516]	; (800a474 <USB_EP0StartXfer+0x2b4>)
 800a26e:	4013      	ands	r3, r2
 800a270:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27e:	691a      	ldr	r2, [r3, #16]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	0159      	lsls	r1, r3, #5
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	440b      	add	r3, r1
 800a288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28c:	4619      	mov	r1, r3
 800a28e:	4b78      	ldr	r3, [pc, #480]	; (800a470 <USB_EP0StartXfer+0x2b0>)
 800a290:	4013      	ands	r3, r2
 800a292:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	699a      	ldr	r2, [r3, #24]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d903      	bls.n	800a2a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	68da      	ldr	r2, [r3, #12]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	0151      	lsls	r1, r2, #5
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	440a      	add	r2, r1
 800a2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d4:	691a      	ldr	r2, [r3, #16]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2de:	6939      	ldr	r1, [r7, #16]
 800a2e0:	0148      	lsls	r0, r1, #5
 800a2e2:	6979      	ldr	r1, [r7, #20]
 800a2e4:	4401      	add	r1, r0
 800a2e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a2ee:	79fb      	ldrb	r3, [r7, #7]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d11e      	bne.n	800a332 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d009      	beq.n	800a310 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a308:	461a      	mov	r2, r3
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	0151      	lsls	r1, r2, #5
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	440a      	add	r2, r1
 800a326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a32a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	e097      	b.n	800a462 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	440a      	add	r2, r1
 800a348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a34c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a350:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 8083 	beq.w	800a462 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	2101      	movs	r1, #1
 800a36e:	fa01 f303 	lsl.w	r3, r1, r3
 800a372:	6979      	ldr	r1, [r7, #20]
 800a374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a378:	4313      	orrs	r3, r2
 800a37a:	634b      	str	r3, [r1, #52]	; 0x34
 800a37c:	e071      	b.n	800a462 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38a:	691a      	ldr	r2, [r3, #16]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	0159      	lsls	r1, r3, #5
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	440b      	add	r3, r1
 800a394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a398:	4619      	mov	r1, r3
 800a39a:	4b36      	ldr	r3, [pc, #216]	; (800a474 <USB_EP0StartXfer+0x2b4>)
 800a39c:	4013      	ands	r3, r2
 800a39e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	0159      	lsls	r1, r3, #5
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	440b      	add	r3, r1
 800a3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	4b2c      	ldr	r3, [pc, #176]	; (800a470 <USB_EP0StartXfer+0x2b0>)
 800a3be:	4013      	ands	r3, r2
 800a3c0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	68da      	ldr	r2, [r3, #12]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	0151      	lsls	r1, r2, #5
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	440a      	add	r2, r1
 800a3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	015a      	lsls	r2, r3, #5
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	4413      	add	r3, r2
 800a402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a406:	691a      	ldr	r2, [r3, #16]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	69db      	ldr	r3, [r3, #28]
 800a40c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a410:	6939      	ldr	r1, [r7, #16]
 800a412:	0148      	lsls	r0, r1, #5
 800a414:	6979      	ldr	r1, [r7, #20]
 800a416:	4401      	add	r1, r0
 800a418:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a41c:	4313      	orrs	r3, r2
 800a41e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d10d      	bne.n	800a442 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	6919      	ldr	r1, [r3, #16]
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43e:	460a      	mov	r2, r1
 800a440:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	0151      	lsls	r1, r2, #5
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	440a      	add	r2, r1
 800a458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a45c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a460:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	371c      	adds	r7, #28
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	e007ffff 	.word	0xe007ffff
 800a474:	fff80000 	.word	0xfff80000

0800a478 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	785b      	ldrb	r3, [r3, #1]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d14a      	bne.n	800a52c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4ae:	f040 8086 	bne.w	800a5be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	7812      	ldrb	r2, [r2, #0]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	7812      	ldrb	r2, [r2, #0]
 800a4ea:	0151      	lsls	r1, r2, #5
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	440a      	add	r2, r1
 800a4f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f242 7210 	movw	r2, #10000	; 0x2710
 800a506:	4293      	cmp	r3, r2
 800a508:	d902      	bls.n	800a510 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	75fb      	strb	r3, [r7, #23]
          break;
 800a50e:	e056      	b.n	800a5be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a528:	d0e7      	beq.n	800a4fa <USB_EPStopXfer+0x82>
 800a52a:	e048      	b.n	800a5be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a544:	d13b      	bne.n	800a5be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	7812      	ldrb	r2, [r2, #0]
 800a55a:	0151      	lsls	r1, r2, #5
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	440a      	add	r2, r1
 800a560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a564:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a568:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	7812      	ldrb	r2, [r2, #0]
 800a57e:	0151      	lsls	r1, r2, #5
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	440a      	add	r2, r1
 800a584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a58c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3301      	adds	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f242 7210 	movw	r2, #10000	; 0x2710
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d902      	bls.n	800a5a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a5a2:	e00c      	b.n	800a5be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5bc:	d0e7      	beq.n	800a58e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b089      	sub	sp, #36	; 0x24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	461a      	mov	r2, r3
 800a5da:	460b      	mov	r3, r1
 800a5dc:	71fb      	strb	r3, [r7, #7]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d123      	bne.n	800a63a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5f2:	88bb      	ldrh	r3, [r7, #4]
 800a5f4:	3303      	adds	r3, #3
 800a5f6:	089b      	lsrs	r3, r3, #2
 800a5f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	61bb      	str	r3, [r7, #24]
 800a5fe:	e018      	b.n	800a632 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	031a      	lsls	r2, r3, #12
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	4413      	add	r3, r2
 800a608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60c:	461a      	mov	r2, r3
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	3301      	adds	r3, #1
 800a618:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	3301      	adds	r3, #1
 800a61e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	3301      	adds	r3, #1
 800a624:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	3301      	adds	r3, #1
 800a62a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	3301      	adds	r3, #1
 800a630:	61bb      	str	r3, [r7, #24]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	429a      	cmp	r2, r3
 800a638:	d3e2      	bcc.n	800a600 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3724      	adds	r7, #36	; 0x24
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a648:	b480      	push	{r7}
 800a64a:	b08b      	sub	sp, #44	; 0x2c
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	4613      	mov	r3, r2
 800a654:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a65e:	88fb      	ldrh	r3, [r7, #6]
 800a660:	089b      	lsrs	r3, r3, #2
 800a662:	b29b      	uxth	r3, r3
 800a664:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a666:	88fb      	ldrh	r3, [r7, #6]
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a66e:	2300      	movs	r3, #0
 800a670:	623b      	str	r3, [r7, #32]
 800a672:	e014      	b.n	800a69e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	3301      	adds	r3, #1
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	3301      	adds	r3, #1
 800a68a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	3301      	adds	r3, #1
 800a690:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	3301      	adds	r3, #1
 800a696:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	3301      	adds	r3, #1
 800a69c:	623b      	str	r3, [r7, #32]
 800a69e:	6a3a      	ldr	r2, [r7, #32]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d3e6      	bcc.n	800a674 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a6a6:	8bfb      	ldrh	r3, [r7, #30]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01e      	beq.n	800a6ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f107 0310 	add.w	r3, r7, #16
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	701a      	strb	r2, [r3, #0]
      i++;
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	3301      	adds	r3, #1
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a6de:	8bfb      	ldrh	r3, [r7, #30]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6e4:	8bfb      	ldrh	r3, [r7, #30]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1ea      	bne.n	800a6c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	372c      	adds	r7, #44	; 0x2c
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	785b      	ldrb	r3, [r3, #1]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d12c      	bne.n	800a76e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	db12      	blt.n	800a74c <USB_EPSetStall+0x54>
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00f      	beq.n	800a74c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4413      	add	r3, r2
 800a734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	0151      	lsls	r1, r2, #5
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	440a      	add	r2, r1
 800a742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a746:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a74a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	0151      	lsls	r1, r2, #5
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	440a      	add	r2, r1
 800a762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a766:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	e02b      	b.n	800a7c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	db12      	blt.n	800a7a6 <USB_EPSetStall+0xae>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00f      	beq.n	800a7a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	015a      	lsls	r2, r3, #5
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	4413      	add	r3, r2
 800a78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	0151      	lsls	r1, r2, #5
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	440a      	add	r2, r1
 800a79c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a7a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	0151      	lsls	r1, r2, #5
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	440a      	add	r2, r1
 800a7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	785b      	ldrb	r3, [r3, #1]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d128      	bne.n	800a842 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	0151      	lsls	r1, r2, #5
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	440a      	add	r2, r1
 800a806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a80a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a80e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	791b      	ldrb	r3, [r3, #4]
 800a814:	2b03      	cmp	r3, #3
 800a816:	d003      	beq.n	800a820 <USB_EPClearStall+0x4c>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	791b      	ldrb	r3, [r3, #4]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d138      	bne.n	800a892 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	0151      	lsls	r1, r2, #5
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	440a      	add	r2, r1
 800a836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a83a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	e027      	b.n	800a892 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	0151      	lsls	r1, r2, #5
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	440a      	add	r2, r1
 800a858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a860:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	791b      	ldrb	r3, [r3, #4]
 800a866:	2b03      	cmp	r3, #3
 800a868:	d003      	beq.n	800a872 <USB_EPClearStall+0x9e>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	791b      	ldrb	r3, [r3, #4]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d10f      	bne.n	800a892 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	015a      	lsls	r2, r3, #5
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	4413      	add	r3, r2
 800a87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	0151      	lsls	r1, r2, #5
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	440a      	add	r2, r1
 800a888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a88c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a890:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a8c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	011b      	lsls	r3, r3, #4
 800a8d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a8d4:	68f9      	ldr	r1, [r7, #12]
 800a8d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a906:	f023 0303 	bic.w	r3, r3, #3
 800a90a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a91a:	f023 0302 	bic.w	r3, r3, #2
 800a91e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a948:	f023 0303 	bic.w	r3, r3, #3
 800a94c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a95c:	f043 0302 	orr.w	r3, r3, #2
 800a960:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4013      	ands	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a988:	68fb      	ldr	r3, [r7, #12]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a996:	b480      	push	{r7}
 800a998:	b085      	sub	sp, #20
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b2:	69db      	ldr	r3, [r3, #28]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	0c1b      	lsrs	r3, r3, #16
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b085      	sub	sp, #20
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	b29b      	uxth	r3, r3
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b087      	sub	sp, #28
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa5e:	78fb      	ldrb	r3, [r7, #3]
 800aa60:	f003 030f 	and.w	r3, r3, #15
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6a:	01db      	lsls	r3, r3, #7
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	4013      	ands	r3, r2
 800aa86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa88:	68bb      	ldr	r3, [r7, #8]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
	...

0800aab4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aace:	4619      	mov	r1, r3
 800aad0:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <USB_ActivateSetup+0x44>)
 800aad2:	4013      	ands	r3, r2
 800aad4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	fffff800 	.word	0xfffff800

0800aafc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	460b      	mov	r3, r1
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	333c      	adds	r3, #60	; 0x3c
 800ab12:	3304      	adds	r3, #4
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	4a26      	ldr	r2, [pc, #152]	; (800abb4 <USB_EP0_OutStart+0xb8>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d90a      	bls.n	800ab36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab30:	d101      	bne.n	800ab36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	e037      	b.n	800aba6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab64:	f043 0318 	orr.w	r3, r3, #24
 800ab68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab7e:	7afb      	ldrb	r3, [r7, #11]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d10f      	bne.n	800aba4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aba2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	371c      	adds	r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	4f54300a 	.word	0x4f54300a

0800abb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3301      	adds	r3, #1
 800abc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	4a13      	ldr	r2, [pc, #76]	; (800ac1c <USB_CoreReset+0x64>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d901      	bls.n	800abd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e01b      	b.n	800ac0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	daf2      	bge.n	800abc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	f043 0201 	orr.w	r2, r3, #1
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3301      	adds	r3, #1
 800abf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4a09      	ldr	r2, [pc, #36]	; (800ac1c <USB_CoreReset+0x64>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d901      	bls.n	800ac00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e006      	b.n	800ac0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d0f0      	beq.n	800abee <USB_CoreReset+0x36>

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	00030d40 	.word	0x00030d40

0800ac20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ac30:	f013 fbd4 	bl	801e3dc <malloc>
 800ac34:	4603      	mov	r3, r0
 800ac36:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d109      	bne.n	800ac52 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	32b0      	adds	r2, #176	; 0xb0
 800ac48:	2100      	movs	r1, #0
 800ac4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e0d4      	b.n	800adfc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac52:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ac56:	2100      	movs	r1, #0
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f014 ffa3 	bl	801fba4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	32b0      	adds	r2, #176	; 0xb0
 800ac68:	68f9      	ldr	r1, [r7, #12]
 800ac6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	32b0      	adds	r2, #176	; 0xb0
 800ac78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	7c1b      	ldrb	r3, [r3, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d138      	bne.n	800acfc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac8a:	4b5e      	ldr	r3, [pc, #376]	; (800ae04 <USBD_CDC_Init+0x1e4>)
 800ac8c:	7819      	ldrb	r1, [r3, #0]
 800ac8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac92:	2202      	movs	r2, #2
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f005 f926 	bl	800fee6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac9a:	4b5a      	ldr	r3, [pc, #360]	; (800ae04 <USBD_CDC_Init+0x1e4>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	f003 020f 	and.w	r2, r3, #15
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	440b      	add	r3, r1
 800acae:	3324      	adds	r3, #36	; 0x24
 800acb0:	2201      	movs	r2, #1
 800acb2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acb4:	4b54      	ldr	r3, [pc, #336]	; (800ae08 <USBD_CDC_Init+0x1e8>)
 800acb6:	7819      	ldrb	r1, [r3, #0]
 800acb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acbc:	2202      	movs	r2, #2
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f005 f911 	bl	800fee6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acc4:	4b50      	ldr	r3, [pc, #320]	; (800ae08 <USBD_CDC_Init+0x1e8>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	f003 020f 	and.w	r2, r3, #15
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acdc:	2201      	movs	r2, #1
 800acde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ace0:	4b4a      	ldr	r3, [pc, #296]	; (800ae0c <USBD_CDC_Init+0x1ec>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f003 020f 	and.w	r2, r3, #15
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	440b      	add	r3, r1
 800acf4:	3326      	adds	r3, #38	; 0x26
 800acf6:	2210      	movs	r2, #16
 800acf8:	801a      	strh	r2, [r3, #0]
 800acfa:	e035      	b.n	800ad68 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acfc:	4b41      	ldr	r3, [pc, #260]	; (800ae04 <USBD_CDC_Init+0x1e4>)
 800acfe:	7819      	ldrb	r1, [r3, #0]
 800ad00:	2340      	movs	r3, #64	; 0x40
 800ad02:	2202      	movs	r2, #2
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f005 f8ee 	bl	800fee6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad0a:	4b3e      	ldr	r3, [pc, #248]	; (800ae04 <USBD_CDC_Init+0x1e4>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	f003 020f 	and.w	r2, r3, #15
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	3324      	adds	r3, #36	; 0x24
 800ad20:	2201      	movs	r2, #1
 800ad22:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad24:	4b38      	ldr	r3, [pc, #224]	; (800ae08 <USBD_CDC_Init+0x1e8>)
 800ad26:	7819      	ldrb	r1, [r3, #0]
 800ad28:	2340      	movs	r3, #64	; 0x40
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f005 f8da 	bl	800fee6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad32:	4b35      	ldr	r3, [pc, #212]	; (800ae08 <USBD_CDC_Init+0x1e8>)
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	f003 020f 	and.w	r2, r3, #15
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	440b      	add	r3, r1
 800ad46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad4e:	4b2f      	ldr	r3, [pc, #188]	; (800ae0c <USBD_CDC_Init+0x1ec>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	f003 020f 	and.w	r2, r3, #15
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	440b      	add	r3, r1
 800ad62:	3326      	adds	r3, #38	; 0x26
 800ad64:	2210      	movs	r2, #16
 800ad66:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad68:	4b28      	ldr	r3, [pc, #160]	; (800ae0c <USBD_CDC_Init+0x1ec>)
 800ad6a:	7819      	ldrb	r1, [r3, #0]
 800ad6c:	2308      	movs	r3, #8
 800ad6e:	2203      	movs	r2, #3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f005 f8b8 	bl	800fee6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad76:	4b25      	ldr	r3, [pc, #148]	; (800ae0c <USBD_CDC_Init+0x1ec>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	f003 020f 	and.w	r2, r3, #15
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	440b      	add	r3, r1
 800ad8a:	3324      	adds	r3, #36	; 0x24
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	33b0      	adds	r3, #176	; 0xb0
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4413      	add	r3, r2
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800adc6:	2302      	movs	r3, #2
 800adc8:	e018      	b.n	800adfc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	7c1b      	ldrb	r3, [r3, #16]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800add2:	4b0d      	ldr	r3, [pc, #52]	; (800ae08 <USBD_CDC_Init+0x1e8>)
 800add4:	7819      	ldrb	r1, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800addc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f005 f96f 	bl	80100c4 <USBD_LL_PrepareReceive>
 800ade6:	e008      	b.n	800adfa <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ade8:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <USBD_CDC_Init+0x1e8>)
 800adea:	7819      	ldrb	r1, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adf2:	2340      	movs	r3, #64	; 0x40
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f005 f965 	bl	80100c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	2000009b 	.word	0x2000009b
 800ae08:	2000009c 	.word	0x2000009c
 800ae0c:	2000009d 	.word	0x2000009d

0800ae10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ae1c:	4b3a      	ldr	r3, [pc, #232]	; (800af08 <USBD_CDC_DeInit+0xf8>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f005 f885 	bl	800ff32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ae28:	4b37      	ldr	r3, [pc, #220]	; (800af08 <USBD_CDC_DeInit+0xf8>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	f003 020f 	and.w	r2, r3, #15
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	4613      	mov	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	440b      	add	r3, r1
 800ae3c:	3324      	adds	r3, #36	; 0x24
 800ae3e:	2200      	movs	r2, #0
 800ae40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ae42:	4b32      	ldr	r3, [pc, #200]	; (800af0c <USBD_CDC_DeInit+0xfc>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f005 f872 	bl	800ff32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae4e:	4b2f      	ldr	r3, [pc, #188]	; (800af0c <USBD_CDC_DeInit+0xfc>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	f003 020f 	and.w	r2, r3, #15
 800ae56:	6879      	ldr	r1, [r7, #4]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	440b      	add	r3, r1
 800ae62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae66:	2200      	movs	r2, #0
 800ae68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae6a:	4b29      	ldr	r3, [pc, #164]	; (800af10 <USBD_CDC_DeInit+0x100>)
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f005 f85e 	bl	800ff32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae76:	4b26      	ldr	r3, [pc, #152]	; (800af10 <USBD_CDC_DeInit+0x100>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	f003 020f 	and.w	r2, r3, #15
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	4613      	mov	r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	440b      	add	r3, r1
 800ae8a:	3324      	adds	r3, #36	; 0x24
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae90:	4b1f      	ldr	r3, [pc, #124]	; (800af10 <USBD_CDC_DeInit+0x100>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 020f 	and.w	r2, r3, #15
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	440b      	add	r3, r1
 800aea4:	3326      	adds	r3, #38	; 0x26
 800aea6:	2200      	movs	r2, #0
 800aea8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	32b0      	adds	r2, #176	; 0xb0
 800aeb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d01f      	beq.n	800aefc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	33b0      	adds	r3, #176	; 0xb0
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32b0      	adds	r2, #176	; 0xb0
 800aeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aede:	4618      	mov	r0, r3
 800aee0:	f013 fa84 	bl	801e3ec <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	32b0      	adds	r2, #176	; 0xb0
 800aeee:	2100      	movs	r1, #0
 800aef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	2000009b 	.word	0x2000009b
 800af0c:	2000009c 	.word	0x2000009c
 800af10:	2000009d 	.word	0x2000009d

0800af14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	32b0      	adds	r2, #176	; 0xb0
 800af28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af2e:	2300      	movs	r3, #0
 800af30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af32:	2300      	movs	r3, #0
 800af34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800af40:	2303      	movs	r3, #3
 800af42:	e0bf      	b.n	800b0c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d050      	beq.n	800aff2 <USBD_CDC_Setup+0xde>
 800af50:	2b20      	cmp	r3, #32
 800af52:	f040 80af 	bne.w	800b0b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	88db      	ldrh	r3, [r3, #6]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d03a      	beq.n	800afd4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	b25b      	sxtb	r3, r3
 800af64:	2b00      	cmp	r3, #0
 800af66:	da1b      	bge.n	800afa0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	33b0      	adds	r3, #176	; 0xb0
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	88d2      	ldrh	r2, [r2, #6]
 800af84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	88db      	ldrh	r3, [r3, #6]
 800af8a:	2b07      	cmp	r3, #7
 800af8c:	bf28      	it	cs
 800af8e:	2307      	movcs	r3, #7
 800af90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	89fa      	ldrh	r2, [r7, #14]
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 fd6d 	bl	800ca78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af9e:	e090      	b.n	800b0c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	785a      	ldrb	r2, [r3, #1]
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	88db      	ldrh	r3, [r3, #6]
 800afae:	2b3f      	cmp	r3, #63	; 0x3f
 800afb0:	d803      	bhi.n	800afba <USBD_CDC_Setup+0xa6>
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	88db      	ldrh	r3, [r3, #6]
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	e000      	b.n	800afbc <USBD_CDC_Setup+0xa8>
 800afba:	2240      	movs	r2, #64	; 0x40
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800afc2:	6939      	ldr	r1, [r7, #16]
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800afca:	461a      	mov	r2, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 fd7f 	bl	800cad0 <USBD_CtlPrepareRx>
      break;
 800afd2:	e076      	b.n	800b0c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	33b0      	adds	r3, #176	; 0xb0
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	7850      	ldrb	r0, [r2, #1]
 800afea:	2200      	movs	r2, #0
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	4798      	blx	r3
      break;
 800aff0:	e067      	b.n	800b0c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	785b      	ldrb	r3, [r3, #1]
 800aff6:	2b0b      	cmp	r3, #11
 800aff8:	d851      	bhi.n	800b09e <USBD_CDC_Setup+0x18a>
 800affa:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <USBD_CDC_Setup+0xec>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b031 	.word	0x0800b031
 800b004:	0800b0ad 	.word	0x0800b0ad
 800b008:	0800b09f 	.word	0x0800b09f
 800b00c:	0800b09f 	.word	0x0800b09f
 800b010:	0800b09f 	.word	0x0800b09f
 800b014:	0800b09f 	.word	0x0800b09f
 800b018:	0800b09f 	.word	0x0800b09f
 800b01c:	0800b09f 	.word	0x0800b09f
 800b020:	0800b09f 	.word	0x0800b09f
 800b024:	0800b09f 	.word	0x0800b09f
 800b028:	0800b05b 	.word	0x0800b05b
 800b02c:	0800b085 	.word	0x0800b085
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d107      	bne.n	800b04c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b03c:	f107 030a 	add.w	r3, r7, #10
 800b040:	2202      	movs	r2, #2
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 fd17 	bl	800ca78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b04a:	e032      	b.n	800b0b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f001 fca1 	bl	800c996 <USBD_CtlError>
            ret = USBD_FAIL;
 800b054:	2303      	movs	r3, #3
 800b056:	75fb      	strb	r3, [r7, #23]
          break;
 800b058:	e02b      	b.n	800b0b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b03      	cmp	r3, #3
 800b064:	d107      	bne.n	800b076 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b066:	f107 030d 	add.w	r3, r7, #13
 800b06a:	2201      	movs	r2, #1
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 fd02 	bl	800ca78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b074:	e01d      	b.n	800b0b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 fc8c 	bl	800c996 <USBD_CtlError>
            ret = USBD_FAIL;
 800b07e:	2303      	movs	r3, #3
 800b080:	75fb      	strb	r3, [r7, #23]
          break;
 800b082:	e016      	b.n	800b0b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d00f      	beq.n	800b0b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 fc7f 	bl	800c996 <USBD_CtlError>
            ret = USBD_FAIL;
 800b098:	2303      	movs	r3, #3
 800b09a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b09c:	e008      	b.n	800b0b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 fc78 	bl	800c996 <USBD_CtlError>
          ret = USBD_FAIL;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b0aa:	e002      	b.n	800b0b2 <USBD_CDC_Setup+0x19e>
          break;
 800b0ac:	bf00      	nop
 800b0ae:	e008      	b.n	800b0c2 <USBD_CDC_Setup+0x1ae>
          break;
 800b0b0:	bf00      	nop
      }
      break;
 800b0b2:	e006      	b.n	800b0c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f001 fc6d 	bl	800c996 <USBD_CtlError>
      ret = USBD_FAIL;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32b0      	adds	r2, #176	; 0xb0
 800b0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e065      	b.n	800b1c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	32b0      	adds	r2, #176	; 0xb0
 800b100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b104:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b106:	78fb      	ldrb	r3, [r7, #3]
 800b108:	f003 020f 	and.w	r2, r3, #15
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4613      	mov	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	440b      	add	r3, r1
 800b118:	3318      	adds	r3, #24
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d02f      	beq.n	800b180 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b120:	78fb      	ldrb	r3, [r7, #3]
 800b122:	f003 020f 	and.w	r2, r3, #15
 800b126:	6879      	ldr	r1, [r7, #4]
 800b128:	4613      	mov	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4413      	add	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	440b      	add	r3, r1
 800b132:	3318      	adds	r3, #24
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	78fb      	ldrb	r3, [r7, #3]
 800b138:	f003 010f 	and.w	r1, r3, #15
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	460b      	mov	r3, r1
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	440b      	add	r3, r1
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4403      	add	r3, r0
 800b148:	3348      	adds	r3, #72	; 0x48
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b150:	fb01 f303 	mul.w	r3, r1, r3
 800b154:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b156:	2b00      	cmp	r3, #0
 800b158:	d112      	bne.n	800b180 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b15a:	78fb      	ldrb	r3, [r7, #3]
 800b15c:	f003 020f 	and.w	r2, r3, #15
 800b160:	6879      	ldr	r1, [r7, #4]
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	440b      	add	r3, r1
 800b16c:	3318      	adds	r3, #24
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b172:	78f9      	ldrb	r1, [r7, #3]
 800b174:	2300      	movs	r3, #0
 800b176:	2200      	movs	r2, #0
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f004 ff82 	bl	8010082 <USBD_LL_Transmit>
 800b17e:	e01f      	b.n	800b1c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	33b0      	adds	r3, #176	; 0xb0
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d010      	beq.n	800b1c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	33b0      	adds	r3, #176	; 0xb0
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b1bc:	78fa      	ldrb	r2, [r7, #3]
 800b1be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	32b0      	adds	r2, #176	; 0xb0
 800b1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	32b0      	adds	r2, #176	; 0xb0
 800b1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e01a      	b.n	800b232 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1fc:	78fb      	ldrb	r3, [r7, #3]
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f004 ff80 	bl	8010106 <USBD_LL_GetRxDataSize>
 800b206:	4602      	mov	r2, r0
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	33b0      	adds	r3, #176	; 0xb0
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b22c:	4611      	mov	r1, r2
 800b22e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	32b0      	adds	r2, #176	; 0xb0
 800b24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b250:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b258:	2303      	movs	r3, #3
 800b25a:	e025      	b.n	800b2a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	33b0      	adds	r3, #176	; 0xb0
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d01a      	beq.n	800b2a6 <USBD_CDC_EP0_RxReady+0x6c>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b276:	2bff      	cmp	r3, #255	; 0xff
 800b278:	d015      	beq.n	800b2a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	33b0      	adds	r3, #176	; 0xb0
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4413      	add	r3, r2
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b292:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b29a:	b292      	uxth	r2, r2
 800b29c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	22ff      	movs	r2, #255	; 0xff
 800b2a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2b8:	2182      	movs	r1, #130	; 0x82
 800b2ba:	4818      	ldr	r0, [pc, #96]	; (800b31c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2bc:	f000 fd09 	bl	800bcd2 <USBD_GetEpDesc>
 800b2c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	4815      	ldr	r0, [pc, #84]	; (800b31c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2c6:	f000 fd04 	bl	800bcd2 <USBD_GetEpDesc>
 800b2ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2cc:	2181      	movs	r1, #129	; 0x81
 800b2ce:	4813      	ldr	r0, [pc, #76]	; (800b31c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2d0:	f000 fcff 	bl	800bcd2 <USBD_GetEpDesc>
 800b2d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2210      	movs	r2, #16
 800b2e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2f0:	711a      	strb	r2, [r3, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b304:	711a      	strb	r2, [r3, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2243      	movs	r2, #67	; 0x43
 800b30e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b310:	4b02      	ldr	r3, [pc, #8]	; (800b31c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b312:	4618      	mov	r0, r3
 800b314:	3718      	adds	r7, #24
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20000058 	.word	0x20000058

0800b320 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b328:	2182      	movs	r1, #130	; 0x82
 800b32a:	4818      	ldr	r0, [pc, #96]	; (800b38c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b32c:	f000 fcd1 	bl	800bcd2 <USBD_GetEpDesc>
 800b330:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b332:	2101      	movs	r1, #1
 800b334:	4815      	ldr	r0, [pc, #84]	; (800b38c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b336:	f000 fccc 	bl	800bcd2 <USBD_GetEpDesc>
 800b33a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b33c:	2181      	movs	r1, #129	; 0x81
 800b33e:	4813      	ldr	r0, [pc, #76]	; (800b38c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b340:	f000 fcc7 	bl	800bcd2 <USBD_GetEpDesc>
 800b344:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2210      	movs	r2, #16
 800b350:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d006      	beq.n	800b366 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	2200      	movs	r2, #0
 800b35c:	711a      	strb	r2, [r3, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f042 0202 	orr.w	r2, r2, #2
 800b364:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d006      	beq.n	800b37a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	711a      	strb	r2, [r3, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f042 0202 	orr.w	r2, r2, #2
 800b378:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2243      	movs	r2, #67	; 0x43
 800b37e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20000058 	.word	0x20000058

0800b390 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b398:	2182      	movs	r1, #130	; 0x82
 800b39a:	4818      	ldr	r0, [pc, #96]	; (800b3fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b39c:	f000 fc99 	bl	800bcd2 <USBD_GetEpDesc>
 800b3a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4815      	ldr	r0, [pc, #84]	; (800b3fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3a6:	f000 fc94 	bl	800bcd2 <USBD_GetEpDesc>
 800b3aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3ac:	2181      	movs	r1, #129	; 0x81
 800b3ae:	4813      	ldr	r0, [pc, #76]	; (800b3fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3b0:	f000 fc8f 	bl	800bcd2 <USBD_GetEpDesc>
 800b3b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2210      	movs	r2, #16
 800b3c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d006      	beq.n	800b3d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3d0:	711a      	strb	r2, [r3, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3e4:	711a      	strb	r2, [r3, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2243      	movs	r2, #67	; 0x43
 800b3ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3f0:	4b02      	ldr	r3, [pc, #8]	; (800b3fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3718      	adds	r7, #24
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	20000058 	.word	0x20000058

0800b400 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	220a      	movs	r2, #10
 800b40c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b40e:	4b03      	ldr	r3, [pc, #12]	; (800b41c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	20000014 	.word	0x20000014

0800b420 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	e009      	b.n	800b448 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	33b0      	adds	r3, #176	; 0xb0
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	32b0      	adds	r2, #176	; 0xb0
 800b46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b476:	2303      	movs	r3, #3
 800b478:	e008      	b.n	800b48c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	371c      	adds	r7, #28
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	32b0      	adds	r2, #176	; 0xb0
 800b4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	e004      	b.n	800b4c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
	...

0800b4d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	32b0      	adds	r2, #176	; 0xb0
 800b4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	32b0      	adds	r2, #176	; 0xb0
 800b4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e018      	b.n	800b534 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	7c1b      	ldrb	r3, [r3, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b50a:	4b0c      	ldr	r3, [pc, #48]	; (800b53c <USBD_CDC_ReceivePacket+0x68>)
 800b50c:	7819      	ldrb	r1, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b514:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f004 fdd3 	bl	80100c4 <USBD_LL_PrepareReceive>
 800b51e:	e008      	b.n	800b532 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b520:	4b06      	ldr	r3, [pc, #24]	; (800b53c <USBD_CDC_ReceivePacket+0x68>)
 800b522:	7819      	ldrb	r1, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b52a:	2340      	movs	r3, #64	; 0x40
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f004 fdc9 	bl	80100c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	2000009c 	.word	0x2000009c

0800b540 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	4613      	mov	r3, r2
 800b54c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b554:	2303      	movs	r3, #3
 800b556:	e01f      	b.n	800b598 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	79fa      	ldrb	r2, [r7, #7]
 800b58a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f004 fc43 	bl	800fe18 <USBD_LL_Init>
 800b592:	4603      	mov	r3, r0
 800b594:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b596:	7dfb      	ldrb	r3, [r7, #23]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e025      	b.n	800b604 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	32ae      	adds	r2, #174	; 0xae
 800b5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00f      	beq.n	800b5f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	32ae      	adds	r2, #174	; 0xae
 800b5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e4:	f107 020e 	add.w	r2, r7, #14
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	4798      	blx	r3
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f004 fc4b 	bl	800feb0 <USBD_LL_Start>
 800b61a:	4603      	mov	r3, r0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b62c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b62e:	4618      	mov	r0, r3
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b084      	sub	sp, #16
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	460b      	mov	r3, r1
 800b644:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b650:	2b00      	cmp	r3, #0
 800b652:	d009      	beq.n	800b668 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	78fa      	ldrb	r2, [r7, #3]
 800b65e:	4611      	mov	r1, r2
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	4798      	blx	r3
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b668:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	460b      	mov	r3, r1
 800b67c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	78fa      	ldrb	r2, [r7, #3]
 800b68c:	4611      	mov	r1, r2
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	4798      	blx	r3
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b698:	2303      	movs	r3, #3
 800b69a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f001 f932 	bl	800c922 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b6da:	f003 031f 	and.w	r3, r3, #31
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d01a      	beq.n	800b718 <USBD_LL_SetupStage+0x72>
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d822      	bhi.n	800b72c <USBD_LL_SetupStage+0x86>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <USBD_LL_SetupStage+0x4a>
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d00a      	beq.n	800b704 <USBD_LL_SetupStage+0x5e>
 800b6ee:	e01d      	b.n	800b72c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fb5f 	bl	800bdbc <USBD_StdDevReq>
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]
      break;
 800b702:	e020      	b.n	800b746 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fbc7 	bl	800bea0 <USBD_StdItfReq>
 800b712:	4603      	mov	r3, r0
 800b714:	73fb      	strb	r3, [r7, #15]
      break;
 800b716:	e016      	b.n	800b746 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fc29 	bl	800bf78 <USBD_StdEPReq>
 800b726:	4603      	mov	r3, r0
 800b728:	73fb      	strb	r3, [r7, #15]
      break;
 800b72a:	e00c      	b.n	800b746 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b732:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b736:	b2db      	uxtb	r3, r3
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f004 fc18 	bl	800ff70 <USBD_LL_StallEP>
 800b740:	4603      	mov	r3, r0
 800b742:	73fb      	strb	r3, [r7, #15]
      break;
 800b744:	bf00      	nop
  }

  return ret;
 800b746:	7bfb      	ldrb	r3, [r7, #15]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	460b      	mov	r3, r1
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b762:	7afb      	ldrb	r3, [r7, #11]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d16e      	bne.n	800b846 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b76e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b776:	2b03      	cmp	r3, #3
 800b778:	f040 8098 	bne.w	800b8ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	429a      	cmp	r2, r3
 800b786:	d913      	bls.n	800b7b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	689a      	ldr	r2, [r3, #8]
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	1ad2      	subs	r2, r2, r3
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	68da      	ldr	r2, [r3, #12]
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	bf28      	it	cs
 800b7a2:	4613      	movcs	r3, r2
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f001 f9ae 	bl	800cb0a <USBD_CtlContinueRx>
 800b7ae:	e07d      	b.n	800b8ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7b6:	f003 031f 	and.w	r3, r3, #31
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d014      	beq.n	800b7e8 <USBD_LL_DataOutStage+0x98>
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d81d      	bhi.n	800b7fe <USBD_LL_DataOutStage+0xae>
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <USBD_LL_DataOutStage+0x7c>
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d003      	beq.n	800b7d2 <USBD_LL_DataOutStage+0x82>
 800b7ca:	e018      	b.n	800b7fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	75bb      	strb	r3, [r7, #22]
            break;
 800b7d0:	e018      	b.n	800b804 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 fa5e 	bl	800bc9e <USBD_CoreFindIF>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e6:	e00d      	b.n	800b804 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f000 fa60 	bl	800bcb8 <USBD_CoreFindEP>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75bb      	strb	r3, [r7, #22]
            break;
 800b7fc:	e002      	b.n	800b804 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	75bb      	strb	r3, [r7, #22]
            break;
 800b802:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b804:	7dbb      	ldrb	r3, [r7, #22]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d119      	bne.n	800b83e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b03      	cmp	r3, #3
 800b814:	d113      	bne.n	800b83e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b816:	7dba      	ldrb	r2, [r7, #22]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	32ae      	adds	r2, #174	; 0xae
 800b81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00b      	beq.n	800b83e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b826:	7dba      	ldrb	r2, [r7, #22]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b82e:	7dba      	ldrb	r2, [r7, #22]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	32ae      	adds	r2, #174	; 0xae
 800b834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f001 f974 	bl	800cb2c <USBD_CtlSendStatus>
 800b844:	e032      	b.n	800b8ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b846:	7afb      	ldrb	r3, [r7, #11]
 800b848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	4619      	mov	r1, r3
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 fa31 	bl	800bcb8 <USBD_CoreFindEP>
 800b856:	4603      	mov	r3, r0
 800b858:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b85a:	7dbb      	ldrb	r3, [r7, #22]
 800b85c:	2bff      	cmp	r3, #255	; 0xff
 800b85e:	d025      	beq.n	800b8ac <USBD_LL_DataOutStage+0x15c>
 800b860:	7dbb      	ldrb	r3, [r7, #22]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d122      	bne.n	800b8ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d117      	bne.n	800b8a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b872:	7dba      	ldrb	r2, [r7, #22]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	32ae      	adds	r2, #174	; 0xae
 800b878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00f      	beq.n	800b8a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b882:	7dba      	ldrb	r2, [r7, #22]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b88a:	7dba      	ldrb	r2, [r7, #22]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	32ae      	adds	r2, #174	; 0xae
 800b890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	7afa      	ldrb	r2, [r7, #11]
 800b898:	4611      	mov	r1, r2
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	4798      	blx	r3
 800b89e:	4603      	mov	r3, r0
 800b8a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	e000      	b.n	800b8ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b086      	sub	sp, #24
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	60f8      	str	r0, [r7, #12]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	607a      	str	r2, [r7, #4]
 800b8c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8c4:	7afb      	ldrb	r3, [r7, #11]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d16f      	bne.n	800b9aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3314      	adds	r3, #20
 800b8ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d15a      	bne.n	800b990 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	689a      	ldr	r2, [r3, #8]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d914      	bls.n	800b910 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	689a      	ldr	r2, [r3, #8]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6879      	ldr	r1, [r7, #4]
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f001 f8d6 	bl	800caae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b902:	2300      	movs	r3, #0
 800b904:	2200      	movs	r2, #0
 800b906:	2100      	movs	r1, #0
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f004 fbdb 	bl	80100c4 <USBD_LL_PrepareReceive>
 800b90e:	e03f      	b.n	800b990 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	68da      	ldr	r2, [r3, #12]
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d11c      	bne.n	800b956 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b924:	429a      	cmp	r2, r3
 800b926:	d316      	bcc.n	800b956 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b932:	429a      	cmp	r2, r3
 800b934:	d20f      	bcs.n	800b956 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b936:	2200      	movs	r2, #0
 800b938:	2100      	movs	r1, #0
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f001 f8b7 	bl	800caae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b948:	2300      	movs	r3, #0
 800b94a:	2200      	movs	r2, #0
 800b94c:	2100      	movs	r1, #0
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f004 fbb8 	bl	80100c4 <USBD_LL_PrepareReceive>
 800b954:	e01c      	b.n	800b990 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d10f      	bne.n	800b982 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d009      	beq.n	800b982 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b982:	2180      	movs	r1, #128	; 0x80
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f004 faf3 	bl	800ff70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f001 f8e1 	bl	800cb52 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d03a      	beq.n	800ba10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff fe42 	bl	800b624 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b9a8:	e032      	b.n	800ba10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9aa:	7afb      	ldrb	r3, [r7, #11]
 800b9ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 f97f 	bl	800bcb8 <USBD_CoreFindEP>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	2bff      	cmp	r3, #255	; 0xff
 800b9c2:	d025      	beq.n	800ba10 <USBD_LL_DataInStage+0x15a>
 800b9c4:	7dfb      	ldrb	r3, [r7, #23]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d122      	bne.n	800ba10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d11c      	bne.n	800ba10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9d6:	7dfa      	ldrb	r2, [r7, #23]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	32ae      	adds	r2, #174	; 0xae
 800b9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d014      	beq.n	800ba10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9e6:	7dfa      	ldrb	r2, [r7, #23]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9ee:	7dfa      	ldrb	r2, [r7, #23]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	32ae      	adds	r2, #174	; 0xae
 800b9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	7afa      	ldrb	r2, [r7, #11]
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	4798      	blx	r3
 800ba02:	4603      	mov	r3, r0
 800ba04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba06:	7dbb      	ldrb	r3, [r7, #22]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba0c:	7dbb      	ldrb	r3, [r7, #22]
 800ba0e:	e000      	b.n	800ba12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d014      	beq.n	800ba80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00e      	beq.n	800ba80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6852      	ldr	r2, [r2, #4]
 800ba6e:	b2d2      	uxtb	r2, r2
 800ba70:	4611      	mov	r1, r2
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba80:	2340      	movs	r3, #64	; 0x40
 800ba82:	2200      	movs	r2, #0
 800ba84:	2100      	movs	r1, #0
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f004 fa2d 	bl	800fee6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2240      	movs	r2, #64	; 0x40
 800ba98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba9c:	2340      	movs	r3, #64	; 0x40
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2180      	movs	r1, #128	; 0x80
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f004 fa1f 	bl	800fee6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2240      	movs	r2, #64	; 0x40
 800bab2:	621a      	str	r2, [r3, #32]

  return ret;
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	78fa      	ldrb	r2, [r7, #3]
 800bace:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baec:	b2da      	uxtb	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2204      	movs	r2, #4
 800baf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	d106      	bne.n	800bb2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b082      	sub	sp, #8
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d110      	bne.n	800bb70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00b      	beq.n	800bb70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b082      	sub	sp, #8
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	32ae      	adds	r2, #174	; 0xae
 800bb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e01c      	b.n	800bbd6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d115      	bne.n	800bbd4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	32ae      	adds	r2, #174	; 0xae
 800bbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00b      	beq.n	800bbd4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	32ae      	adds	r2, #174	; 0xae
 800bbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbca:	6a1b      	ldr	r3, [r3, #32]
 800bbcc:	78fa      	ldrb	r2, [r7, #3]
 800bbce:	4611      	mov	r1, r2
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	32ae      	adds	r2, #174	; 0xae
 800bbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e01c      	b.n	800bc3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d115      	bne.n	800bc38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	32ae      	adds	r2, #174	; 0xae
 800bc16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	32ae      	adds	r2, #174	; 0xae
 800bc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	78fa      	ldrb	r2, [r7, #3]
 800bc32:	4611      	mov	r1, r2
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b083      	sub	sp, #12
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00e      	beq.n	800bc94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	6852      	ldr	r2, [r2, #4]
 800bc82:	b2d2      	uxtb	r2, r2
 800bc84:	4611      	mov	r1, r2
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	4798      	blx	r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc90:	2303      	movs	r3, #3
 800bc92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bce6:	2300      	movs	r3, #0
 800bce8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	885b      	ldrh	r3, [r3, #2]
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d920      	bls.n	800bd3c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd02:	e013      	b.n	800bd2c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd04:	f107 030a 	add.w	r3, r7, #10
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6978      	ldr	r0, [r7, #20]
 800bd0c:	f000 f81b 	bl	800bd46 <USBD_GetNextDesc>
 800bd10:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	785b      	ldrb	r3, [r3, #1]
 800bd16:	2b05      	cmp	r3, #5
 800bd18:	d108      	bne.n	800bd2c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	789b      	ldrb	r3, [r3, #2]
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d008      	beq.n	800bd3a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	885b      	ldrh	r3, [r3, #2]
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	897b      	ldrh	r3, [r7, #10]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d8e5      	bhi.n	800bd04 <USBD_GetEpDesc+0x32>
 800bd38:	e000      	b.n	800bd3c <USBD_GetEpDesc+0x6a>
          break;
 800bd3a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd3c:	693b      	ldr	r3, [r7, #16]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3718      	adds	r7, #24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b085      	sub	sp, #20
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	881a      	ldrh	r2, [r3, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	4413      	add	r3, r2
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4413      	add	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd72:	68fb      	ldr	r3, [r7, #12]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b087      	sub	sp, #28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	3301      	adds	r3, #1
 800bd96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd9e:	8a3b      	ldrh	r3, [r7, #16]
 800bda0:	021b      	lsls	r3, r3, #8
 800bda2:	b21a      	sxth	r2, r3
 800bda4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	b21b      	sxth	r3, r3
 800bdac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdae:	89fb      	ldrh	r3, [r7, #14]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	371c      	adds	r7, #28
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdd2:	2b40      	cmp	r3, #64	; 0x40
 800bdd4:	d005      	beq.n	800bde2 <USBD_StdDevReq+0x26>
 800bdd6:	2b40      	cmp	r3, #64	; 0x40
 800bdd8:	d857      	bhi.n	800be8a <USBD_StdDevReq+0xce>
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00f      	beq.n	800bdfe <USBD_StdDevReq+0x42>
 800bdde:	2b20      	cmp	r3, #32
 800bde0:	d153      	bne.n	800be8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	32ae      	adds	r2, #174	; 0xae
 800bdec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4798      	blx	r3
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	73fb      	strb	r3, [r7, #15]
      break;
 800bdfc:	e04a      	b.n	800be94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	785b      	ldrb	r3, [r3, #1]
 800be02:	2b09      	cmp	r3, #9
 800be04:	d83b      	bhi.n	800be7e <USBD_StdDevReq+0xc2>
 800be06:	a201      	add	r2, pc, #4	; (adr r2, 800be0c <USBD_StdDevReq+0x50>)
 800be08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0c:	0800be61 	.word	0x0800be61
 800be10:	0800be75 	.word	0x0800be75
 800be14:	0800be7f 	.word	0x0800be7f
 800be18:	0800be6b 	.word	0x0800be6b
 800be1c:	0800be7f 	.word	0x0800be7f
 800be20:	0800be3f 	.word	0x0800be3f
 800be24:	0800be35 	.word	0x0800be35
 800be28:	0800be7f 	.word	0x0800be7f
 800be2c:	0800be57 	.word	0x0800be57
 800be30:	0800be49 	.word	0x0800be49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa3c 	bl	800c2b4 <USBD_GetDescriptor>
          break;
 800be3c:	e024      	b.n	800be88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fbcb 	bl	800c5dc <USBD_SetAddress>
          break;
 800be46:	e01f      	b.n	800be88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fc0a 	bl	800c664 <USBD_SetConfig>
 800be50:	4603      	mov	r3, r0
 800be52:	73fb      	strb	r3, [r7, #15]
          break;
 800be54:	e018      	b.n	800be88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fcad 	bl	800c7b8 <USBD_GetConfig>
          break;
 800be5e:	e013      	b.n	800be88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fcde 	bl	800c824 <USBD_GetStatus>
          break;
 800be68:	e00e      	b.n	800be88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fd0d 	bl	800c88c <USBD_SetFeature>
          break;
 800be72:	e009      	b.n	800be88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fd31 	bl	800c8de <USBD_ClrFeature>
          break;
 800be7c:	e004      	b.n	800be88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fd88 	bl	800c996 <USBD_CtlError>
          break;
 800be86:	bf00      	nop
      }
      break;
 800be88:	e004      	b.n	800be94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fd82 	bl	800c996 <USBD_CtlError>
      break;
 800be92:	bf00      	nop
  }

  return ret;
 800be94:	7bfb      	ldrb	r3, [r7, #15]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop

0800bea0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800beb6:	2b40      	cmp	r3, #64	; 0x40
 800beb8:	d005      	beq.n	800bec6 <USBD_StdItfReq+0x26>
 800beba:	2b40      	cmp	r3, #64	; 0x40
 800bebc:	d852      	bhi.n	800bf64 <USBD_StdItfReq+0xc4>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <USBD_StdItfReq+0x26>
 800bec2:	2b20      	cmp	r3, #32
 800bec4:	d14e      	bne.n	800bf64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800becc:	b2db      	uxtb	r3, r3
 800bece:	3b01      	subs	r3, #1
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d840      	bhi.n	800bf56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	889b      	ldrh	r3, [r3, #4]
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d836      	bhi.n	800bf4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	889b      	ldrh	r3, [r3, #4]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	4619      	mov	r1, r3
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7ff fed9 	bl	800bc9e <USBD_CoreFindIF>
 800beec:	4603      	mov	r3, r0
 800beee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	2bff      	cmp	r3, #255	; 0xff
 800bef4:	d01d      	beq.n	800bf32 <USBD_StdItfReq+0x92>
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d11a      	bne.n	800bf32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800befc:	7bba      	ldrb	r2, [r7, #14]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	32ae      	adds	r2, #174	; 0xae
 800bf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00f      	beq.n	800bf2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf0c:	7bba      	ldrb	r2, [r7, #14]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf14:	7bba      	ldrb	r2, [r7, #14]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	32ae      	adds	r2, #174	; 0xae
 800bf1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	4798      	blx	r3
 800bf26:	4603      	mov	r3, r0
 800bf28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf2a:	e004      	b.n	800bf36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf30:	e001      	b.n	800bf36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf32:	2303      	movs	r3, #3
 800bf34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	88db      	ldrh	r3, [r3, #6]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d110      	bne.n	800bf60 <USBD_StdItfReq+0xc0>
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10d      	bne.n	800bf60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fdf1 	bl	800cb2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf4a:	e009      	b.n	800bf60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fd21 	bl	800c996 <USBD_CtlError>
          break;
 800bf54:	e004      	b.n	800bf60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fd1c 	bl	800c996 <USBD_CtlError>
          break;
 800bf5e:	e000      	b.n	800bf62 <USBD_StdItfReq+0xc2>
          break;
 800bf60:	bf00      	nop
      }
      break;
 800bf62:	e004      	b.n	800bf6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fd15 	bl	800c996 <USBD_CtlError>
      break;
 800bf6c:	bf00      	nop
  }

  return ret;
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	889b      	ldrh	r3, [r3, #4]
 800bf8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf94:	2b40      	cmp	r3, #64	; 0x40
 800bf96:	d007      	beq.n	800bfa8 <USBD_StdEPReq+0x30>
 800bf98:	2b40      	cmp	r3, #64	; 0x40
 800bf9a:	f200 817f 	bhi.w	800c29c <USBD_StdEPReq+0x324>
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d02a      	beq.n	800bff8 <USBD_StdEPReq+0x80>
 800bfa2:	2b20      	cmp	r3, #32
 800bfa4:	f040 817a 	bne.w	800c29c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfa8:	7bbb      	ldrb	r3, [r7, #14]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7ff fe83 	bl	800bcb8 <USBD_CoreFindEP>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfb6:	7b7b      	ldrb	r3, [r7, #13]
 800bfb8:	2bff      	cmp	r3, #255	; 0xff
 800bfba:	f000 8174 	beq.w	800c2a6 <USBD_StdEPReq+0x32e>
 800bfbe:	7b7b      	ldrb	r3, [r7, #13]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f040 8170 	bne.w	800c2a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfc6:	7b7a      	ldrb	r2, [r7, #13]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfce:	7b7a      	ldrb	r2, [r7, #13]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	32ae      	adds	r2, #174	; 0xae
 800bfd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 8163 	beq.w	800c2a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfe0:	7b7a      	ldrb	r2, [r7, #13]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	32ae      	adds	r2, #174	; 0xae
 800bfe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	4798      	blx	r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bff6:	e156      	b.n	800c2a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	785b      	ldrb	r3, [r3, #1]
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d008      	beq.n	800c012 <USBD_StdEPReq+0x9a>
 800c000:	2b03      	cmp	r3, #3
 800c002:	f300 8145 	bgt.w	800c290 <USBD_StdEPReq+0x318>
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 809b 	beq.w	800c142 <USBD_StdEPReq+0x1ca>
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d03c      	beq.n	800c08a <USBD_StdEPReq+0x112>
 800c010:	e13e      	b.n	800c290 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d002      	beq.n	800c024 <USBD_StdEPReq+0xac>
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d016      	beq.n	800c050 <USBD_StdEPReq+0xd8>
 800c022:	e02c      	b.n	800c07e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00d      	beq.n	800c046 <USBD_StdEPReq+0xce>
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	2b80      	cmp	r3, #128	; 0x80
 800c02e:	d00a      	beq.n	800c046 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c030:	7bbb      	ldrb	r3, [r7, #14]
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f003 ff9b 	bl	800ff70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c03a:	2180      	movs	r1, #128	; 0x80
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f003 ff97 	bl	800ff70 <USBD_LL_StallEP>
 800c042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c044:	e020      	b.n	800c088 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fca4 	bl	800c996 <USBD_CtlError>
              break;
 800c04e:	e01b      	b.n	800c088 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	885b      	ldrh	r3, [r3, #2]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10e      	bne.n	800c076 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00b      	beq.n	800c076 <USBD_StdEPReq+0xfe>
 800c05e:	7bbb      	ldrb	r3, [r7, #14]
 800c060:	2b80      	cmp	r3, #128	; 0x80
 800c062:	d008      	beq.n	800c076 <USBD_StdEPReq+0xfe>
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	88db      	ldrh	r3, [r3, #6]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d104      	bne.n	800c076 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f003 ff7d 	bl	800ff70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fd58 	bl	800cb2c <USBD_CtlSendStatus>

              break;
 800c07c:	e004      	b.n	800c088 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fc88 	bl	800c996 <USBD_CtlError>
              break;
 800c086:	bf00      	nop
          }
          break;
 800c088:	e107      	b.n	800c29a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b02      	cmp	r3, #2
 800c094:	d002      	beq.n	800c09c <USBD_StdEPReq+0x124>
 800c096:	2b03      	cmp	r3, #3
 800c098:	d016      	beq.n	800c0c8 <USBD_StdEPReq+0x150>
 800c09a:	e04b      	b.n	800c134 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00d      	beq.n	800c0be <USBD_StdEPReq+0x146>
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	2b80      	cmp	r3, #128	; 0x80
 800c0a6:	d00a      	beq.n	800c0be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f003 ff5f 	bl	800ff70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0b2:	2180      	movs	r1, #128	; 0x80
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f003 ff5b 	bl	800ff70 <USBD_LL_StallEP>
 800c0ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0bc:	e040      	b.n	800c140 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fc68 	bl	800c996 <USBD_CtlError>
              break;
 800c0c6:	e03b      	b.n	800c140 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	885b      	ldrh	r3, [r3, #2]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d136      	bne.n	800c13e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d004      	beq.n	800c0e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f003 ff65 	bl	800ffae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fd21 	bl	800cb2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7ff fde2 	bl	800bcb8 <USBD_CoreFindEP>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0f8:	7b7b      	ldrb	r3, [r7, #13]
 800c0fa:	2bff      	cmp	r3, #255	; 0xff
 800c0fc:	d01f      	beq.n	800c13e <USBD_StdEPReq+0x1c6>
 800c0fe:	7b7b      	ldrb	r3, [r7, #13]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d11c      	bne.n	800c13e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c104:	7b7a      	ldrb	r2, [r7, #13]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c10c:	7b7a      	ldrb	r2, [r7, #13]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	32ae      	adds	r2, #174	; 0xae
 800c112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d010      	beq.n	800c13e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c11c:	7b7a      	ldrb	r2, [r7, #13]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	32ae      	adds	r2, #174	; 0xae
 800c122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	4798      	blx	r3
 800c12e:	4603      	mov	r3, r0
 800c130:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c132:	e004      	b.n	800c13e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fc2d 	bl	800c996 <USBD_CtlError>
              break;
 800c13c:	e000      	b.n	800c140 <USBD_StdEPReq+0x1c8>
              break;
 800c13e:	bf00      	nop
          }
          break;
 800c140:	e0ab      	b.n	800c29a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d002      	beq.n	800c154 <USBD_StdEPReq+0x1dc>
 800c14e:	2b03      	cmp	r3, #3
 800c150:	d032      	beq.n	800c1b8 <USBD_StdEPReq+0x240>
 800c152:	e097      	b.n	800c284 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c154:	7bbb      	ldrb	r3, [r7, #14]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d007      	beq.n	800c16a <USBD_StdEPReq+0x1f2>
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	2b80      	cmp	r3, #128	; 0x80
 800c15e:	d004      	beq.n	800c16a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fc17 	bl	800c996 <USBD_CtlError>
                break;
 800c168:	e091      	b.n	800c28e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c16a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	da0b      	bge.n	800c18a <USBD_StdEPReq+0x212>
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c178:	4613      	mov	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	3310      	adds	r3, #16
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	4413      	add	r3, r2
 800c186:	3304      	adds	r3, #4
 800c188:	e00b      	b.n	800c1a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c18a:	7bbb      	ldrb	r3, [r7, #14]
 800c18c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c190:	4613      	mov	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	4413      	add	r3, r2
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fc61 	bl	800ca78 <USBD_CtlSendData>
              break;
 800c1b6:	e06a      	b.n	800c28e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	da11      	bge.n	800c1e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
 800c1c2:	f003 020f 	and.w	r2, r3, #15
 800c1c6:	6879      	ldr	r1, [r7, #4]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	440b      	add	r3, r1
 800c1d2:	3324      	adds	r3, #36	; 0x24
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d117      	bne.n	800c20a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fbda 	bl	800c996 <USBD_CtlError>
                  break;
 800c1e2:	e054      	b.n	800c28e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	f003 020f 	and.w	r2, r3, #15
 800c1ea:	6879      	ldr	r1, [r7, #4]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	440b      	add	r3, r1
 800c1f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1fa:	881b      	ldrh	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d104      	bne.n	800c20a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fbc7 	bl	800c996 <USBD_CtlError>
                  break;
 800c208:	e041      	b.n	800c28e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c20a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	da0b      	bge.n	800c22a <USBD_StdEPReq+0x2b2>
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c218:	4613      	mov	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	3310      	adds	r3, #16
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	4413      	add	r3, r2
 800c226:	3304      	adds	r3, #4
 800c228:	e00b      	b.n	800c242 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c22a:	7bbb      	ldrb	r3, [r7, #14]
 800c22c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c230:	4613      	mov	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4413      	add	r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	4413      	add	r3, r2
 800c240:	3304      	adds	r3, #4
 800c242:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <USBD_StdEPReq+0x2d8>
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	2b80      	cmp	r3, #128	; 0x80
 800c24e:	d103      	bne.n	800c258 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	e00e      	b.n	800c276 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f003 fec5 	bl	800ffec <USBD_LL_IsStallEP>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d003      	beq.n	800c270 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2201      	movs	r2, #1
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e002      	b.n	800c276 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2202      	movs	r2, #2
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fbfb 	bl	800ca78 <USBD_CtlSendData>
              break;
 800c282:	e004      	b.n	800c28e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fb85 	bl	800c996 <USBD_CtlError>
              break;
 800c28c:	bf00      	nop
          }
          break;
 800c28e:	e004      	b.n	800c29a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fb7f 	bl	800c996 <USBD_CtlError>
          break;
 800c298:	bf00      	nop
      }
      break;
 800c29a:	e005      	b.n	800c2a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fb79 	bl	800c996 <USBD_CtlError>
      break;
 800c2a4:	e000      	b.n	800c2a8 <USBD_StdEPReq+0x330>
      break;
 800c2a6:	bf00      	nop
  }

  return ret;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	885b      	ldrh	r3, [r3, #2]
 800c2ce:	0a1b      	lsrs	r3, r3, #8
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	2b0e      	cmp	r3, #14
 800c2d6:	f200 8152 	bhi.w	800c57e <USBD_GetDescriptor+0x2ca>
 800c2da:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <USBD_GetDescriptor+0x2c>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c351 	.word	0x0800c351
 800c2e4:	0800c369 	.word	0x0800c369
 800c2e8:	0800c3a9 	.word	0x0800c3a9
 800c2ec:	0800c57f 	.word	0x0800c57f
 800c2f0:	0800c57f 	.word	0x0800c57f
 800c2f4:	0800c51f 	.word	0x0800c51f
 800c2f8:	0800c54b 	.word	0x0800c54b
 800c2fc:	0800c57f 	.word	0x0800c57f
 800c300:	0800c57f 	.word	0x0800c57f
 800c304:	0800c57f 	.word	0x0800c57f
 800c308:	0800c57f 	.word	0x0800c57f
 800c30c:	0800c57f 	.word	0x0800c57f
 800c310:	0800c57f 	.word	0x0800c57f
 800c314:	0800c57f 	.word	0x0800c57f
 800c318:	0800c31d 	.word	0x0800c31d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c322:	69db      	ldr	r3, [r3, #28]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32e:	69db      	ldr	r3, [r3, #28]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c33e:	e126      	b.n	800c58e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fb27 	bl	800c996 <USBD_CtlError>
        err++;
 800c348:	7afb      	ldrb	r3, [r7, #11]
 800c34a:	3301      	adds	r3, #1
 800c34c:	72fb      	strb	r3, [r7, #11]
      break;
 800c34e:	e11e      	b.n	800c58e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	7c12      	ldrb	r2, [r2, #16]
 800c35c:	f107 0108 	add.w	r1, r7, #8
 800c360:	4610      	mov	r0, r2
 800c362:	4798      	blx	r3
 800c364:	60f8      	str	r0, [r7, #12]
      break;
 800c366:	e112      	b.n	800c58e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7c1b      	ldrb	r3, [r3, #16]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10d      	bne.n	800c38c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c378:	f107 0208 	add.w	r2, r7, #8
 800c37c:	4610      	mov	r0, r2
 800c37e:	4798      	blx	r3
 800c380:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3301      	adds	r3, #1
 800c386:	2202      	movs	r2, #2
 800c388:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c38a:	e100      	b.n	800c58e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c394:	f107 0208 	add.w	r2, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	701a      	strb	r2, [r3, #0]
      break;
 800c3a6:	e0f2      	b.n	800c58e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	885b      	ldrh	r3, [r3, #2]
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b05      	cmp	r3, #5
 800c3b0:	f200 80ac 	bhi.w	800c50c <USBD_GetDescriptor+0x258>
 800c3b4:	a201      	add	r2, pc, #4	; (adr r2, 800c3bc <USBD_GetDescriptor+0x108>)
 800c3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ba:	bf00      	nop
 800c3bc:	0800c3d5 	.word	0x0800c3d5
 800c3c0:	0800c409 	.word	0x0800c409
 800c3c4:	0800c43d 	.word	0x0800c43d
 800c3c8:	0800c471 	.word	0x0800c471
 800c3cc:	0800c4a5 	.word	0x0800c4a5
 800c3d0:	0800c4d9 	.word	0x0800c4d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00b      	beq.n	800c3f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	7c12      	ldrb	r2, [r2, #16]
 800c3ec:	f107 0108 	add.w	r1, r7, #8
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	4798      	blx	r3
 800c3f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3f6:	e091      	b.n	800c51c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3f8:	6839      	ldr	r1, [r7, #0]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 facb 	bl	800c996 <USBD_CtlError>
            err++;
 800c400:	7afb      	ldrb	r3, [r7, #11]
 800c402:	3301      	adds	r3, #1
 800c404:	72fb      	strb	r3, [r7, #11]
          break;
 800c406:	e089      	b.n	800c51c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00b      	beq.n	800c42c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	7c12      	ldrb	r2, [r2, #16]
 800c420:	f107 0108 	add.w	r1, r7, #8
 800c424:	4610      	mov	r0, r2
 800c426:	4798      	blx	r3
 800c428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c42a:	e077      	b.n	800c51c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c42c:	6839      	ldr	r1, [r7, #0]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fab1 	bl	800c996 <USBD_CtlError>
            err++;
 800c434:	7afb      	ldrb	r3, [r7, #11]
 800c436:	3301      	adds	r3, #1
 800c438:	72fb      	strb	r3, [r7, #11]
          break;
 800c43a:	e06f      	b.n	800c51c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00b      	beq.n	800c460 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	7c12      	ldrb	r2, [r2, #16]
 800c454:	f107 0108 	add.w	r1, r7, #8
 800c458:	4610      	mov	r0, r2
 800c45a:	4798      	blx	r3
 800c45c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c45e:	e05d      	b.n	800c51c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fa97 	bl	800c996 <USBD_CtlError>
            err++;
 800c468:	7afb      	ldrb	r3, [r7, #11]
 800c46a:	3301      	adds	r3, #1
 800c46c:	72fb      	strb	r3, [r7, #11]
          break;
 800c46e:	e055      	b.n	800c51c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00b      	beq.n	800c494 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	7c12      	ldrb	r2, [r2, #16]
 800c488:	f107 0108 	add.w	r1, r7, #8
 800c48c:	4610      	mov	r0, r2
 800c48e:	4798      	blx	r3
 800c490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c492:	e043      	b.n	800c51c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa7d 	bl	800c996 <USBD_CtlError>
            err++;
 800c49c:	7afb      	ldrb	r3, [r7, #11]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a2:	e03b      	b.n	800c51c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4aa:	695b      	ldr	r3, [r3, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00b      	beq.n	800c4c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	7c12      	ldrb	r2, [r2, #16]
 800c4bc:	f107 0108 	add.w	r1, r7, #8
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	4798      	blx	r3
 800c4c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4c6:	e029      	b.n	800c51c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fa63 	bl	800c996 <USBD_CtlError>
            err++;
 800c4d0:	7afb      	ldrb	r3, [r7, #11]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4d6:	e021      	b.n	800c51c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	7c12      	ldrb	r2, [r2, #16]
 800c4f0:	f107 0108 	add.w	r1, r7, #8
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	4798      	blx	r3
 800c4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fa:	e00f      	b.n	800c51c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 fa49 	bl	800c996 <USBD_CtlError>
            err++;
 800c504:	7afb      	ldrb	r3, [r7, #11]
 800c506:	3301      	adds	r3, #1
 800c508:	72fb      	strb	r3, [r7, #11]
          break;
 800c50a:	e007      	b.n	800c51c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fa41 	bl	800c996 <USBD_CtlError>
          err++;
 800c514:	7afb      	ldrb	r3, [r7, #11]
 800c516:	3301      	adds	r3, #1
 800c518:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c51a:	bf00      	nop
      }
      break;
 800c51c:	e037      	b.n	800c58e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	7c1b      	ldrb	r3, [r3, #16]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d109      	bne.n	800c53a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c52e:	f107 0208 	add.w	r2, r7, #8
 800c532:	4610      	mov	r0, r2
 800c534:	4798      	blx	r3
 800c536:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c538:	e029      	b.n	800c58e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fa2a 	bl	800c996 <USBD_CtlError>
        err++;
 800c542:	7afb      	ldrb	r3, [r7, #11]
 800c544:	3301      	adds	r3, #1
 800c546:	72fb      	strb	r3, [r7, #11]
      break;
 800c548:	e021      	b.n	800c58e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	7c1b      	ldrb	r3, [r3, #16]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10d      	bne.n	800c56e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c55a:	f107 0208 	add.w	r2, r7, #8
 800c55e:	4610      	mov	r0, r2
 800c560:	4798      	blx	r3
 800c562:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3301      	adds	r3, #1
 800c568:	2207      	movs	r2, #7
 800c56a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c56c:	e00f      	b.n	800c58e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fa10 	bl	800c996 <USBD_CtlError>
        err++;
 800c576:	7afb      	ldrb	r3, [r7, #11]
 800c578:	3301      	adds	r3, #1
 800c57a:	72fb      	strb	r3, [r7, #11]
      break;
 800c57c:	e007      	b.n	800c58e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fa08 	bl	800c996 <USBD_CtlError>
      err++;
 800c586:	7afb      	ldrb	r3, [r7, #11]
 800c588:	3301      	adds	r3, #1
 800c58a:	72fb      	strb	r3, [r7, #11]
      break;
 800c58c:	bf00      	nop
  }

  if (err != 0U)
 800c58e:	7afb      	ldrb	r3, [r7, #11]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d11e      	bne.n	800c5d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	88db      	ldrh	r3, [r3, #6]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d016      	beq.n	800c5ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c59c:	893b      	ldrh	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00e      	beq.n	800c5c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	88da      	ldrh	r2, [r3, #6]
 800c5a6:	893b      	ldrh	r3, [r7, #8]
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	bf28      	it	cs
 800c5ac:	4613      	movcs	r3, r2
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5b2:	893b      	ldrh	r3, [r7, #8]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	68f9      	ldr	r1, [r7, #12]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fa5d 	bl	800ca78 <USBD_CtlSendData>
 800c5be:	e009      	b.n	800c5d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f9e7 	bl	800c996 <USBD_CtlError>
 800c5c8:	e004      	b.n	800c5d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 faae 	bl	800cb2c <USBD_CtlSendStatus>
 800c5d0:	e000      	b.n	800c5d4 <USBD_GetDescriptor+0x320>
    return;
 800c5d2:	bf00      	nop
  }
}
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop

0800c5dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	889b      	ldrh	r3, [r3, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d131      	bne.n	800c652 <USBD_SetAddress+0x76>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	88db      	ldrh	r3, [r3, #6]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d12d      	bne.n	800c652 <USBD_SetAddress+0x76>
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	885b      	ldrh	r3, [r3, #2]
 800c5fa:	2b7f      	cmp	r3, #127	; 0x7f
 800c5fc:	d829      	bhi.n	800c652 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	885b      	ldrh	r3, [r3, #2]
 800c602:	b2db      	uxtb	r3, r3
 800c604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c608:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b03      	cmp	r3, #3
 800c614:	d104      	bne.n	800c620 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 f9bc 	bl	800c996 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61e:	e01d      	b.n	800c65c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	7bfa      	ldrb	r2, [r7, #15]
 800c624:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c628:	7bfb      	ldrb	r3, [r7, #15]
 800c62a:	4619      	mov	r1, r3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f003 fd09 	bl	8010044 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fa7a 	bl	800cb2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d004      	beq.n	800c648 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2202      	movs	r2, #2
 800c642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c646:	e009      	b.n	800c65c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c650:	e004      	b.n	800c65c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f99e 	bl	800c996 <USBD_CtlError>
  }
}
 800c65a:	bf00      	nop
 800c65c:	bf00      	nop
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	885b      	ldrh	r3, [r3, #2]
 800c676:	b2da      	uxtb	r2, r3
 800c678:	4b4e      	ldr	r3, [pc, #312]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c67a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c67c:	4b4d      	ldr	r3, [pc, #308]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d905      	bls.n	800c690 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f985 	bl	800c996 <USBD_CtlError>
    return USBD_FAIL;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e08c      	b.n	800c7aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c696:	b2db      	uxtb	r3, r3
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d002      	beq.n	800c6a2 <USBD_SetConfig+0x3e>
 800c69c:	2b03      	cmp	r3, #3
 800c69e:	d029      	beq.n	800c6f4 <USBD_SetConfig+0x90>
 800c6a0:	e075      	b.n	800c78e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6a2:	4b44      	ldr	r3, [pc, #272]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d020      	beq.n	800c6ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6aa:	4b42      	ldr	r3, [pc, #264]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6b4:	4b3f      	ldr	r3, [pc, #252]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7fe ffbd 	bl	800b63a <USBD_SetClassConfig>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d008      	beq.n	800c6dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 f962 	bl	800c996 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6da:	e065      	b.n	800c7a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 fa25 	bl	800cb2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2203      	movs	r2, #3
 800c6e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6ea:	e05d      	b.n	800c7a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fa1d 	bl	800cb2c <USBD_CtlSendStatus>
      break;
 800c6f2:	e059      	b.n	800c7a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6f4:	4b2f      	ldr	r3, [pc, #188]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d112      	bne.n	800c722 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2202      	movs	r2, #2
 800c700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c704:	4b2b      	ldr	r3, [pc, #172]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	461a      	mov	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c70e:	4b29      	ldr	r3, [pc, #164]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f7fe ffac 	bl	800b672 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fa06 	bl	800cb2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c720:	e042      	b.n	800c7a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c722:	4b24      	ldr	r3, [pc, #144]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d02a      	beq.n	800c786 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	b2db      	uxtb	r3, r3
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7fe ff9a 	bl	800b672 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c73e:	4b1d      	ldr	r3, [pc, #116]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	461a      	mov	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c748:	4b1a      	ldr	r3, [pc, #104]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	4619      	mov	r1, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7fe ff73 	bl	800b63a <USBD_SetClassConfig>
 800c754:	4603      	mov	r3, r0
 800c756:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00f      	beq.n	800c77e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f918 	bl	800c996 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7fe ff7f 	bl	800b672 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2202      	movs	r2, #2
 800c778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c77c:	e014      	b.n	800c7a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f9d4 	bl	800cb2c <USBD_CtlSendStatus>
      break;
 800c784:	e010      	b.n	800c7a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f9d0 	bl	800cb2c <USBD_CtlSendStatus>
      break;
 800c78c:	e00c      	b.n	800c7a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f900 	bl	800c996 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c796:	4b07      	ldr	r3, [pc, #28]	; (800c7b4 <USBD_SetConfig+0x150>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7fe ff68 	bl	800b672 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a6:	bf00      	nop
  }

  return ret;
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	2000be7c 	.word	0x2000be7c

0800c7b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	88db      	ldrh	r3, [r3, #6]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d004      	beq.n	800c7d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 f8e2 	bl	800c996 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7d2:	e023      	b.n	800c81c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	dc02      	bgt.n	800c7e6 <USBD_GetConfig+0x2e>
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	dc03      	bgt.n	800c7ec <USBD_GetConfig+0x34>
 800c7e4:	e015      	b.n	800c812 <USBD_GetConfig+0x5a>
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d00b      	beq.n	800c802 <USBD_GetConfig+0x4a>
 800c7ea:	e012      	b.n	800c812 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f93c 	bl	800ca78 <USBD_CtlSendData>
        break;
 800c800:	e00c      	b.n	800c81c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	3304      	adds	r3, #4
 800c806:	2201      	movs	r2, #1
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f934 	bl	800ca78 <USBD_CtlSendData>
        break;
 800c810:	e004      	b.n	800c81c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f8be 	bl	800c996 <USBD_CtlError>
        break;
 800c81a:	bf00      	nop
}
 800c81c:	bf00      	nop
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c834:	b2db      	uxtb	r3, r3
 800c836:	3b01      	subs	r3, #1
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d81e      	bhi.n	800c87a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	88db      	ldrh	r3, [r3, #6]
 800c840:	2b02      	cmp	r3, #2
 800c842:	d004      	beq.n	800c84e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f8a5 	bl	800c996 <USBD_CtlError>
        break;
 800c84c:	e01a      	b.n	800c884 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d005      	beq.n	800c86a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	f043 0202 	orr.w	r2, r3, #2
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	330c      	adds	r3, #12
 800c86e:	2202      	movs	r2, #2
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f900 	bl	800ca78 <USBD_CtlSendData>
      break;
 800c878:	e004      	b.n	800c884 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 f88a 	bl	800c996 <USBD_CtlError>
      break;
 800c882:	bf00      	nop
  }
}
 800c884:	bf00      	nop
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	885b      	ldrh	r3, [r3, #2]
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d107      	bne.n	800c8ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f940 	bl	800cb2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8ac:	e013      	b.n	800c8d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	885b      	ldrh	r3, [r3, #2]
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d10b      	bne.n	800c8ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	889b      	ldrh	r3, [r3, #4]
 800c8ba:	0a1b      	lsrs	r3, r3, #8
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f930 	bl	800cb2c <USBD_CtlSendStatus>
}
 800c8cc:	e003      	b.n	800c8d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 f860 	bl	800c996 <USBD_CtlError>
}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d80b      	bhi.n	800c90e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	885b      	ldrh	r3, [r3, #2]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d10c      	bne.n	800c918 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f910 	bl	800cb2c <USBD_CtlSendStatus>
      }
      break;
 800c90c:	e004      	b.n	800c918 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f840 	bl	800c996 <USBD_CtlError>
      break;
 800c916:	e000      	b.n	800c91a <USBD_ClrFeature+0x3c>
      break;
 800c918:	bf00      	nop
  }
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	781a      	ldrb	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3301      	adds	r3, #1
 800c93c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	781a      	ldrb	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3301      	adds	r3, #1
 800c94a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f7ff fa17 	bl	800bd80 <SWAPBYTE>
 800c952:	4603      	mov	r3, r0
 800c954:	461a      	mov	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3301      	adds	r3, #1
 800c95e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3301      	adds	r3, #1
 800c964:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f7ff fa0a 	bl	800bd80 <SWAPBYTE>
 800c96c:	4603      	mov	r3, r0
 800c96e:	461a      	mov	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3301      	adds	r3, #1
 800c978:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3301      	adds	r3, #1
 800c97e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f7ff f9fd 	bl	800bd80 <SWAPBYTE>
 800c986:	4603      	mov	r3, r0
 800c988:	461a      	mov	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	80da      	strh	r2, [r3, #6]
}
 800c98e:	bf00      	nop
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b082      	sub	sp, #8
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9a0:	2180      	movs	r1, #128	; 0x80
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f003 fae4 	bl	800ff70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f003 fae0 	bl	800ff70 <USBD_LL_StallEP>
}
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d036      	beq.n	800ca3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9d2:	6938      	ldr	r0, [r7, #16]
 800c9d4:	f000 f836 	bl	800ca44 <USBD_GetLen>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	3301      	adds	r3, #1
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	005b      	lsls	r3, r3, #1
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	7812      	ldrb	r2, [r2, #0]
 800c9f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	2203      	movs	r2, #3
 800ca00:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	3301      	adds	r3, #1
 800ca06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca08:	e013      	b.n	800ca32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca0a:	7dfb      	ldrb	r3, [r7, #23]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	4413      	add	r3, r2
 800ca10:	693a      	ldr	r2, [r7, #16]
 800ca12:	7812      	ldrb	r2, [r2, #0]
 800ca14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	613b      	str	r3, [r7, #16]
    idx++;
 800ca1c:	7dfb      	ldrb	r3, [r7, #23]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca22:	7dfb      	ldrb	r3, [r7, #23]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	4413      	add	r3, r2
 800ca28:	2200      	movs	r2, #0
 800ca2a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1e7      	bne.n	800ca0a <USBD_GetString+0x52>
 800ca3a:	e000      	b.n	800ca3e <USBD_GetString+0x86>
    return;
 800ca3c:	bf00      	nop
  }
}
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca54:	e005      	b.n	800ca62 <USBD_GetLen+0x1e>
  {
    len++;
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1f5      	bne.n	800ca56 <USBD_GetLen+0x12>
  }

  return len;
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2202      	movs	r2, #2
 800ca88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f003 faef 	bl	8010082 <USBD_LL_Transmit>

  return USBD_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b084      	sub	sp, #16
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	60b9      	str	r1, [r7, #8]
 800cab8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	2100      	movs	r1, #0
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f003 fade 	bl	8010082 <USBD_LL_Transmit>

  return USBD_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2203      	movs	r2, #3
 800cae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	2100      	movs	r1, #0
 800cafa:	68f8      	ldr	r0, [r7, #12]
 800cafc:	f003 fae2 	bl	80100c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	60f8      	str	r0, [r7, #12]
 800cb12:	60b9      	str	r1, [r7, #8]
 800cb14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f003 fad1 	bl	80100c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2204      	movs	r2, #4
 800cb38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	2200      	movs	r2, #0
 800cb40:	2100      	movs	r1, #0
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f003 fa9d 	bl	8010082 <USBD_LL_Transmit>

  return USBD_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b082      	sub	sp, #8
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2205      	movs	r2, #5
 800cb5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb62:	2300      	movs	r3, #0
 800cb64:	2200      	movs	r2, #0
 800cb66:	2100      	movs	r1, #0
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f003 faab 	bl	80100c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb78:	b480      	push	{r7}
 800cb7a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cb7c:	bf00      	nop
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
	...

0800cb88 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb8e:	f3ef 8305 	mrs	r3, IPSR
 800cb92:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10f      	bne.n	800cbba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb9a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb9e:	607b      	str	r3, [r7, #4]
  return(result);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d105      	bne.n	800cbb2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cba6:	f3ef 8311 	mrs	r3, BASEPRI
 800cbaa:	603b      	str	r3, [r7, #0]
  return(result);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d007      	beq.n	800cbc2 <osKernelInitialize+0x3a>
 800cbb2:	4b0e      	ldr	r3, [pc, #56]	; (800cbec <osKernelInitialize+0x64>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d103      	bne.n	800cbc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cbba:	f06f 0305 	mvn.w	r3, #5
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	e00c      	b.n	800cbdc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <osKernelInitialize+0x64>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d105      	bne.n	800cbd6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cbca:	4b08      	ldr	r3, [pc, #32]	; (800cbec <osKernelInitialize+0x64>)
 800cbcc:	2201      	movs	r2, #1
 800cbce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	e002      	b.n	800cbdc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cbd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	2000be80 	.word	0x2000be80

0800cbf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbf6:	f3ef 8305 	mrs	r3, IPSR
 800cbfa:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10f      	bne.n	800cc22 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc02:	f3ef 8310 	mrs	r3, PRIMASK
 800cc06:	607b      	str	r3, [r7, #4]
  return(result);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d105      	bne.n	800cc1a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc0e:	f3ef 8311 	mrs	r3, BASEPRI
 800cc12:	603b      	str	r3, [r7, #0]
  return(result);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d007      	beq.n	800cc2a <osKernelStart+0x3a>
 800cc1a:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <osKernelStart+0x68>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d103      	bne.n	800cc2a <osKernelStart+0x3a>
    stat = osErrorISR;
 800cc22:	f06f 0305 	mvn.w	r3, #5
 800cc26:	60fb      	str	r3, [r7, #12]
 800cc28:	e010      	b.n	800cc4c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc2a:	4b0b      	ldr	r3, [pc, #44]	; (800cc58 <osKernelStart+0x68>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d109      	bne.n	800cc46 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc32:	f7ff ffa1 	bl	800cb78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc36:	4b08      	ldr	r3, [pc, #32]	; (800cc58 <osKernelStart+0x68>)
 800cc38:	2202      	movs	r2, #2
 800cc3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc3c:	f001 f8b4 	bl	800dda8 <vTaskStartScheduler>
      stat = osOK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	e002      	b.n	800cc4c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	2000be80 	.word	0x2000be80

0800cc5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b090      	sub	sp, #64	; 0x40
 800cc60:	af04      	add	r7, sp, #16
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc6c:	f3ef 8305 	mrs	r3, IPSR
 800cc70:	61fb      	str	r3, [r7, #28]
  return(result);
 800cc72:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f040 808f 	bne.w	800cd98 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc7a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc7e:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d105      	bne.n	800cc92 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc86:	f3ef 8311 	mrs	r3, BASEPRI
 800cc8a:	617b      	str	r3, [r7, #20]
  return(result);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d003      	beq.n	800cc9a <osThreadNew+0x3e>
 800cc92:	4b44      	ldr	r3, [pc, #272]	; (800cda4 <osThreadNew+0x148>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d07e      	beq.n	800cd98 <osThreadNew+0x13c>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d07b      	beq.n	800cd98 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cca0:	2380      	movs	r3, #128	; 0x80
 800cca2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cca4:	2318      	movs	r3, #24
 800cca6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ccac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccb0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d045      	beq.n	800cd44 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <osThreadNew+0x6a>
        name = attr->name;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	699b      	ldr	r3, [r3, #24]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d008      	beq.n	800ccec <osThreadNew+0x90>
 800ccda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccdc:	2b38      	cmp	r3, #56	; 0x38
 800ccde:	d805      	bhi.n	800ccec <osThreadNew+0x90>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f003 0301 	and.w	r3, r3, #1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <osThreadNew+0x94>
        return (NULL);
 800ccec:	2300      	movs	r3, #0
 800ccee:	e054      	b.n	800cd9a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	695b      	ldr	r3, [r3, #20]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d003      	beq.n	800cd00 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	695b      	ldr	r3, [r3, #20]
 800ccfc:	089b      	lsrs	r3, r3, #2
 800ccfe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00e      	beq.n	800cd26 <osThreadNew+0xca>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	2b5b      	cmp	r3, #91	; 0x5b
 800cd0e:	d90a      	bls.n	800cd26 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d006      	beq.n	800cd26 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <osThreadNew+0xca>
        mem = 1;
 800cd20:	2301      	movs	r3, #1
 800cd22:	623b      	str	r3, [r7, #32]
 800cd24:	e010      	b.n	800cd48 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10c      	bne.n	800cd48 <osThreadNew+0xec>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d108      	bne.n	800cd48 <osThreadNew+0xec>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d104      	bne.n	800cd48 <osThreadNew+0xec>
          mem = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	623b      	str	r3, [r7, #32]
 800cd42:	e001      	b.n	800cd48 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d110      	bne.n	800cd70 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd56:	9202      	str	r2, [sp, #8]
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f000 fe3f 	bl	800d9e8 <xTaskCreateStatic>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	613b      	str	r3, [r7, #16]
 800cd6e:	e013      	b.n	800cd98 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cd70:	6a3b      	ldr	r3, [r7, #32]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d110      	bne.n	800cd98 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	f107 0310 	add.w	r3, r7, #16
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 fe90 	bl	800daae <xTaskCreate>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d001      	beq.n	800cd98 <osThreadNew+0x13c>
          hTask = NULL;
 800cd94:	2300      	movs	r3, #0
 800cd96:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd98:	693b      	ldr	r3, [r7, #16]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3730      	adds	r7, #48	; 0x30
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	2000be80 	.word	0x2000be80

0800cda8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdb0:	f3ef 8305 	mrs	r3, IPSR
 800cdb4:	613b      	str	r3, [r7, #16]
  return(result);
 800cdb6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10f      	bne.n	800cddc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdbc:	f3ef 8310 	mrs	r3, PRIMASK
 800cdc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d105      	bne.n	800cdd4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdc8:	f3ef 8311 	mrs	r3, BASEPRI
 800cdcc:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d007      	beq.n	800cde4 <osDelay+0x3c>
 800cdd4:	4b0a      	ldr	r3, [pc, #40]	; (800ce00 <osDelay+0x58>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d103      	bne.n	800cde4 <osDelay+0x3c>
    stat = osErrorISR;
 800cddc:	f06f 0305 	mvn.w	r3, #5
 800cde0:	617b      	str	r3, [r7, #20]
 800cde2:	e007      	b.n	800cdf4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 ffa4 	bl	800dd3c <vTaskDelay>
    }
  }

  return (stat);
 800cdf4:	697b      	ldr	r3, [r7, #20]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3718      	adds	r7, #24
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	2000be80 	.word	0x2000be80

0800ce04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	4a07      	ldr	r2, [pc, #28]	; (800ce30 <vApplicationGetIdleTaskMemory+0x2c>)
 800ce14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	4a06      	ldr	r2, [pc, #24]	; (800ce34 <vApplicationGetIdleTaskMemory+0x30>)
 800ce1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2280      	movs	r2, #128	; 0x80
 800ce20:	601a      	str	r2, [r3, #0]
}
 800ce22:	bf00      	nop
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	2000be84 	.word	0x2000be84
 800ce34:	2000bee0 	.word	0x2000bee0

0800ce38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	4a07      	ldr	r2, [pc, #28]	; (800ce64 <vApplicationGetTimerTaskMemory+0x2c>)
 800ce48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	4a06      	ldr	r2, [pc, #24]	; (800ce68 <vApplicationGetTimerTaskMemory+0x30>)
 800ce4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce56:	601a      	str	r2, [r3, #0]
}
 800ce58:	bf00      	nop
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr
 800ce64:	2000c0e0 	.word	0x2000c0e0
 800ce68:	2000c13c 	.word	0x2000c13c

0800ce6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f103 0208 	add.w	r2, r3, #8
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f103 0208 	add.w	r2, r3, #8
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f103 0208 	add.w	r2, r3, #8
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ceba:	bf00      	nop
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr

0800cec6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cec6:	b480      	push	{r7}
 800cec8:	b085      	sub	sp, #20
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	689a      	ldr	r2, [r3, #8]
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	683a      	ldr	r2, [r7, #0]
 800ceea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	1c5a      	adds	r2, r3, #1
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	601a      	str	r2, [r3, #0]
}
 800cf02:	bf00      	nop
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf0e:	b480      	push	{r7}
 800cf10:	b085      	sub	sp, #20
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf24:	d103      	bne.n	800cf2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	60fb      	str	r3, [r7, #12]
 800cf2c:	e00c      	b.n	800cf48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	3308      	adds	r3, #8
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e002      	b.n	800cf3c <vListInsert+0x2e>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d2f6      	bcs.n	800cf36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	1c5a      	adds	r2, r3, #1
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	601a      	str	r2, [r3, #0]
}
 800cf74:	bf00      	nop
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	6892      	ldr	r2, [r2, #8]
 800cf96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	6852      	ldr	r2, [r2, #4]
 800cfa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d103      	bne.n	800cfb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	689a      	ldr	r2, [r3, #8]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	1e5a      	subs	r2, r3, #1
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3714      	adds	r7, #20
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10c      	bne.n	800d002 <xQueueGenericReset+0x2e>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	b672      	cpsid	i
 800cfee:	f383 8811 	msr	BASEPRI, r3
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	b662      	cpsie	i
 800cffc:	60bb      	str	r3, [r7, #8]
}
 800cffe:	bf00      	nop
 800d000:	e7fe      	b.n	800d000 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d002:	f002 f8a3 	bl	800f14c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d00e:	68f9      	ldr	r1, [r7, #12]
 800d010:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d012:	fb01 f303 	mul.w	r3, r1, r3
 800d016:	441a      	add	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d032:	3b01      	subs	r3, #1
 800d034:	68f9      	ldr	r1, [r7, #12]
 800d036:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d038:	fb01 f303 	mul.w	r3, r1, r3
 800d03c:	441a      	add	r2, r3
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	22ff      	movs	r2, #255	; 0xff
 800d046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	22ff      	movs	r2, #255	; 0xff
 800d04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d114      	bne.n	800d082 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d01a      	beq.n	800d096 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	3310      	adds	r3, #16
 800d064:	4618      	mov	r0, r3
 800d066:	f001 f937 	bl	800e2d8 <xTaskRemoveFromEventList>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d012      	beq.n	800d096 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d070:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <xQueueGenericReset+0xd0>)
 800d072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	e009      	b.n	800d096 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3310      	adds	r3, #16
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff fef0 	bl	800ce6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	3324      	adds	r3, #36	; 0x24
 800d090:	4618      	mov	r0, r3
 800d092:	f7ff feeb 	bl	800ce6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d096:	f002 f88d 	bl	800f1b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d09a:	2301      	movs	r3, #1
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	e000ed04 	.word	0xe000ed04

0800d0a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b08e      	sub	sp, #56	; 0x38
 800d0ac:	af02      	add	r7, sp, #8
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
 800d0b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10c      	bne.n	800d0d6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	b672      	cpsid	i
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	b662      	cpsie	i
 800d0d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10c      	bne.n	800d0f6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	b672      	cpsid	i
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	b662      	cpsie	i
 800d0f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <xQueueGenericCreateStatic+0x5a>
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <xQueueGenericCreateStatic+0x5e>
 800d102:	2301      	movs	r3, #1
 800d104:	e000      	b.n	800d108 <xQueueGenericCreateStatic+0x60>
 800d106:	2300      	movs	r3, #0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10c      	bne.n	800d126 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	b672      	cpsid	i
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	b662      	cpsie	i
 800d120:	623b      	str	r3, [r7, #32]
}
 800d122:	bf00      	nop
 800d124:	e7fe      	b.n	800d124 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <xQueueGenericCreateStatic+0x8a>
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <xQueueGenericCreateStatic+0x8e>
 800d132:	2301      	movs	r3, #1
 800d134:	e000      	b.n	800d138 <xQueueGenericCreateStatic+0x90>
 800d136:	2300      	movs	r3, #0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10c      	bne.n	800d156 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	b672      	cpsid	i
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	b662      	cpsie	i
 800d150:	61fb      	str	r3, [r7, #28]
}
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d156:	2350      	movs	r3, #80	; 0x50
 800d158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b50      	cmp	r3, #80	; 0x50
 800d15e:	d00c      	beq.n	800d17a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	b672      	cpsid	i
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	b662      	cpsie	i
 800d174:	61bb      	str	r3, [r7, #24]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d17a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00d      	beq.n	800d1a2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d18e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	4613      	mov	r3, r2
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	68b9      	ldr	r1, [r7, #8]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f000 f805 	bl	800d1ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3730      	adds	r7, #48	; 0x30
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d103      	bne.n	800d1c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	69ba      	ldr	r2, [r7, #24]
 800d1c4:	601a      	str	r2, [r3, #0]
 800d1c6:	e002      	b.n	800d1ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1da:	2101      	movs	r1, #1
 800d1dc:	69b8      	ldr	r0, [r7, #24]
 800d1de:	f7ff fef9 	bl	800cfd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	78fa      	ldrb	r2, [r7, #3]
 800d1e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d1ea:	bf00      	nop
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
	...

0800d1f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08e      	sub	sp, #56	; 0x38
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d202:	2300      	movs	r3, #0
 800d204:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10c      	bne.n	800d22a <xQueueGenericSend+0x36>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	b672      	cpsid	i
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	b662      	cpsie	i
 800d224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d226:	bf00      	nop
 800d228:	e7fe      	b.n	800d228 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d103      	bne.n	800d238 <xQueueGenericSend+0x44>
 800d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <xQueueGenericSend+0x48>
 800d238:	2301      	movs	r3, #1
 800d23a:	e000      	b.n	800d23e <xQueueGenericSend+0x4a>
 800d23c:	2300      	movs	r3, #0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10c      	bne.n	800d25c <xQueueGenericSend+0x68>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d246:	b672      	cpsid	i
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	b662      	cpsie	i
 800d256:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d258:	bf00      	nop
 800d25a:	e7fe      	b.n	800d25a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d103      	bne.n	800d26a <xQueueGenericSend+0x76>
 800d262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d266:	2b01      	cmp	r3, #1
 800d268:	d101      	bne.n	800d26e <xQueueGenericSend+0x7a>
 800d26a:	2301      	movs	r3, #1
 800d26c:	e000      	b.n	800d270 <xQueueGenericSend+0x7c>
 800d26e:	2300      	movs	r3, #0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10c      	bne.n	800d28e <xQueueGenericSend+0x9a>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	b672      	cpsid	i
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	b662      	cpsie	i
 800d288:	623b      	str	r3, [r7, #32]
}
 800d28a:	bf00      	nop
 800d28c:	e7fe      	b.n	800d28c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d28e:	f001 fa11 	bl	800e6b4 <xTaskGetSchedulerState>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d102      	bne.n	800d29e <xQueueGenericSend+0xaa>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <xQueueGenericSend+0xae>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e000      	b.n	800d2a4 <xQueueGenericSend+0xb0>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10c      	bne.n	800d2c2 <xQueueGenericSend+0xce>
	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	b672      	cpsid	i
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	b662      	cpsie	i
 800d2bc:	61fb      	str	r3, [r7, #28]
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2c2:	f001 ff43 	bl	800f14c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d302      	bcc.n	800d2d8 <xQueueGenericSend+0xe4>
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	2b02      	cmp	r3, #2
 800d2d6:	d129      	bne.n	800d32c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2de:	f000 fa15 	bl	800d70c <prvCopyDataToQueue>
 800d2e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d010      	beq.n	800d30e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ee:	3324      	adds	r3, #36	; 0x24
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 fff1 	bl	800e2d8 <xTaskRemoveFromEventList>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d013      	beq.n	800d324 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d2fc:	4b3f      	ldr	r3, [pc, #252]	; (800d3fc <xQueueGenericSend+0x208>)
 800d2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	e00a      	b.n	800d324 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	2b00      	cmp	r3, #0
 800d312:	d007      	beq.n	800d324 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d314:	4b39      	ldr	r3, [pc, #228]	; (800d3fc <xQueueGenericSend+0x208>)
 800d316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d324:	f001 ff46 	bl	800f1b4 <vPortExitCritical>
				return pdPASS;
 800d328:	2301      	movs	r3, #1
 800d32a:	e063      	b.n	800d3f4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d103      	bne.n	800d33a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d332:	f001 ff3f 	bl	800f1b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d336:	2300      	movs	r3, #0
 800d338:	e05c      	b.n	800d3f4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d106      	bne.n	800d34e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d340:	f107 0314 	add.w	r3, r7, #20
 800d344:	4618      	mov	r0, r3
 800d346:	f001 f855 	bl	800e3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d34a:	2301      	movs	r3, #1
 800d34c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d34e:	f001 ff31 	bl	800f1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d352:	f000 fd93 	bl	800de7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d356:	f001 fef9 	bl	800f14c <vPortEnterCritical>
 800d35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d360:	b25b      	sxtb	r3, r3
 800d362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d366:	d103      	bne.n	800d370 <xQueueGenericSend+0x17c>
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d376:	b25b      	sxtb	r3, r3
 800d378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d37c:	d103      	bne.n	800d386 <xQueueGenericSend+0x192>
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	2200      	movs	r2, #0
 800d382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d386:	f001 ff15 	bl	800f1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d38a:	1d3a      	adds	r2, r7, #4
 800d38c:	f107 0314 	add.w	r3, r7, #20
 800d390:	4611      	mov	r1, r2
 800d392:	4618      	mov	r0, r3
 800d394:	f001 f844 	bl	800e420 <xTaskCheckForTimeOut>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d124      	bne.n	800d3e8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d39e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3a0:	f000 faac 	bl	800d8fc <prvIsQueueFull>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d018      	beq.n	800d3dc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	3310      	adds	r3, #16
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 ff3c 	bl	800e230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ba:	f000 fa37 	bl	800d82c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d3be:	f000 fd6b 	bl	800de98 <xTaskResumeAll>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f47f af7c 	bne.w	800d2c2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d3ca:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <xQueueGenericSend+0x208>)
 800d3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	e772      	b.n	800d2c2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3de:	f000 fa25 	bl	800d82c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3e2:	f000 fd59 	bl	800de98 <xTaskResumeAll>
 800d3e6:	e76c      	b.n	800d2c2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d3e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ea:	f000 fa1f 	bl	800d82c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3ee:	f000 fd53 	bl	800de98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d3f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3738      	adds	r7, #56	; 0x38
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	e000ed04 	.word	0xe000ed04

0800d400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08e      	sub	sp, #56	; 0x38
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
 800d40c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	2b00      	cmp	r3, #0
 800d416:	d10c      	bne.n	800d432 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41c:	b672      	cpsid	i
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	b662      	cpsie	i
 800d42c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d42e:	bf00      	nop
 800d430:	e7fe      	b.n	800d430 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d103      	bne.n	800d440 <xQueueGenericSendFromISR+0x40>
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d101      	bne.n	800d444 <xQueueGenericSendFromISR+0x44>
 800d440:	2301      	movs	r3, #1
 800d442:	e000      	b.n	800d446 <xQueueGenericSendFromISR+0x46>
 800d444:	2300      	movs	r3, #0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d10c      	bne.n	800d464 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44e:	b672      	cpsid	i
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	b662      	cpsie	i
 800d45e:	623b      	str	r3, [r7, #32]
}
 800d460:	bf00      	nop
 800d462:	e7fe      	b.n	800d462 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	2b02      	cmp	r3, #2
 800d468:	d103      	bne.n	800d472 <xQueueGenericSendFromISR+0x72>
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d101      	bne.n	800d476 <xQueueGenericSendFromISR+0x76>
 800d472:	2301      	movs	r3, #1
 800d474:	e000      	b.n	800d478 <xQueueGenericSendFromISR+0x78>
 800d476:	2300      	movs	r3, #0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10c      	bne.n	800d496 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	b672      	cpsid	i
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	b662      	cpsie	i
 800d490:	61fb      	str	r3, [r7, #28]
}
 800d492:	bf00      	nop
 800d494:	e7fe      	b.n	800d494 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d496:	f001 ff41 	bl	800f31c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d49a:	f3ef 8211 	mrs	r2, BASEPRI
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	b672      	cpsid	i
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	b662      	cpsie	i
 800d4b2:	61ba      	str	r2, [r7, #24]
 800d4b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d302      	bcc.n	800d4cc <xQueueGenericSendFromISR+0xcc>
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	d12c      	bne.n	800d526 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4d6:	683a      	ldr	r2, [r7, #0]
 800d4d8:	68b9      	ldr	r1, [r7, #8]
 800d4da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4dc:	f000 f916 	bl	800d70c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d4e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4e8:	d112      	bne.n	800d510 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d016      	beq.n	800d520 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	3324      	adds	r3, #36	; 0x24
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 feee 	bl	800e2d8 <xTaskRemoveFromEventList>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00e      	beq.n	800d520 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00b      	beq.n	800d520 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	e007      	b.n	800d520 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d510:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d514:	3301      	adds	r3, #1
 800d516:	b2db      	uxtb	r3, r3
 800d518:	b25a      	sxtb	r2, r3
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d520:	2301      	movs	r3, #1
 800d522:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d524:	e001      	b.n	800d52a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d526:	2300      	movs	r3, #0
 800d528:	637b      	str	r3, [r7, #52]	; 0x34
 800d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d534:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3738      	adds	r7, #56	; 0x38
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08c      	sub	sp, #48	; 0x30
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d54c:	2300      	movs	r3, #0
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d556:	2b00      	cmp	r3, #0
 800d558:	d10c      	bne.n	800d574 <xQueueReceive+0x34>
	__asm volatile
 800d55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55e:	b672      	cpsid	i
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	b662      	cpsie	i
 800d56e:	623b      	str	r3, [r7, #32]
}
 800d570:	bf00      	nop
 800d572:	e7fe      	b.n	800d572 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d103      	bne.n	800d582 <xQueueReceive+0x42>
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d101      	bne.n	800d586 <xQueueReceive+0x46>
 800d582:	2301      	movs	r3, #1
 800d584:	e000      	b.n	800d588 <xQueueReceive+0x48>
 800d586:	2300      	movs	r3, #0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10c      	bne.n	800d5a6 <xQueueReceive+0x66>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d590:	b672      	cpsid	i
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	b662      	cpsie	i
 800d5a0:	61fb      	str	r3, [r7, #28]
}
 800d5a2:	bf00      	nop
 800d5a4:	e7fe      	b.n	800d5a4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5a6:	f001 f885 	bl	800e6b4 <xTaskGetSchedulerState>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d102      	bne.n	800d5b6 <xQueueReceive+0x76>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d101      	bne.n	800d5ba <xQueueReceive+0x7a>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e000      	b.n	800d5bc <xQueueReceive+0x7c>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10c      	bne.n	800d5da <xQueueReceive+0x9a>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	b672      	cpsid	i
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	b662      	cpsie	i
 800d5d4:	61bb      	str	r3, [r7, #24]
}
 800d5d6:	bf00      	nop
 800d5d8:	e7fe      	b.n	800d5d8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5da:	f001 fdb7 	bl	800f14c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01f      	beq.n	800d62a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5ea:	68b9      	ldr	r1, [r7, #8]
 800d5ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ee:	f000 f8f7 	bl	800d7e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f4:	1e5a      	subs	r2, r3, #1
 800d5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00f      	beq.n	800d622 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	3310      	adds	r3, #16
 800d606:	4618      	mov	r0, r3
 800d608:	f000 fe66 	bl	800e2d8 <xTaskRemoveFromEventList>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d007      	beq.n	800d622 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d612:	4b3d      	ldr	r3, [pc, #244]	; (800d708 <xQueueReceive+0x1c8>)
 800d614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d622:	f001 fdc7 	bl	800f1b4 <vPortExitCritical>
				return pdPASS;
 800d626:	2301      	movs	r3, #1
 800d628:	e069      	b.n	800d6fe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d103      	bne.n	800d638 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d630:	f001 fdc0 	bl	800f1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d634:	2300      	movs	r3, #0
 800d636:	e062      	b.n	800d6fe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d106      	bne.n	800d64c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d63e:	f107 0310 	add.w	r3, r7, #16
 800d642:	4618      	mov	r0, r3
 800d644:	f000 fed6 	bl	800e3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d648:	2301      	movs	r3, #1
 800d64a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d64c:	f001 fdb2 	bl	800f1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d650:	f000 fc14 	bl	800de7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d654:	f001 fd7a 	bl	800f14c <vPortEnterCritical>
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d65e:	b25b      	sxtb	r3, r3
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d664:	d103      	bne.n	800d66e <xQueueReceive+0x12e>
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d674:	b25b      	sxtb	r3, r3
 800d676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d67a:	d103      	bne.n	800d684 <xQueueReceive+0x144>
 800d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d684:	f001 fd96 	bl	800f1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d688:	1d3a      	adds	r2, r7, #4
 800d68a:	f107 0310 	add.w	r3, r7, #16
 800d68e:	4611      	mov	r1, r2
 800d690:	4618      	mov	r0, r3
 800d692:	f000 fec5 	bl	800e420 <xTaskCheckForTimeOut>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d123      	bne.n	800d6e4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d69c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d69e:	f000 f917 	bl	800d8d0 <prvIsQueueEmpty>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d017      	beq.n	800d6d8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	3324      	adds	r3, #36	; 0x24
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 fdbd 	bl	800e230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6b8:	f000 f8b8 	bl	800d82c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6bc:	f000 fbec 	bl	800de98 <xTaskResumeAll>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d189      	bne.n	800d5da <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d6c6:	4b10      	ldr	r3, [pc, #64]	; (800d708 <xQueueReceive+0x1c8>)
 800d6c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	e780      	b.n	800d5da <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6da:	f000 f8a7 	bl	800d82c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6de:	f000 fbdb 	bl	800de98 <xTaskResumeAll>
 800d6e2:	e77a      	b.n	800d5da <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d6e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6e6:	f000 f8a1 	bl	800d82c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6ea:	f000 fbd5 	bl	800de98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6f0:	f000 f8ee 	bl	800d8d0 <prvIsQueueEmpty>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f43f af6f 	beq.w	800d5da <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3730      	adds	r7, #48	; 0x30
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	e000ed04 	.word	0xe000ed04

0800d70c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d718:	2300      	movs	r3, #0
 800d71a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d720:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10d      	bne.n	800d746 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d14d      	bne.n	800d7ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	4618      	mov	r0, r3
 800d738:	f000 ffda 	bl	800e6f0 <xTaskPriorityDisinherit>
 800d73c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	609a      	str	r2, [r3, #8]
 800d744:	e043      	b.n	800d7ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d119      	bne.n	800d780 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6858      	ldr	r0, [r3, #4]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d754:	461a      	mov	r2, r3
 800d756:	68b9      	ldr	r1, [r7, #8]
 800d758:	f012 faf1 	bl	801fd3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d764:	441a      	add	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	429a      	cmp	r2, r3
 800d774:	d32b      	bcc.n	800d7ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	605a      	str	r2, [r3, #4]
 800d77e:	e026      	b.n	800d7ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	68d8      	ldr	r0, [r3, #12]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d788:	461a      	mov	r2, r3
 800d78a:	68b9      	ldr	r1, [r7, #8]
 800d78c:	f012 fad7 	bl	801fd3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	68da      	ldr	r2, [r3, #12]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d798:	425b      	negs	r3, r3
 800d79a:	441a      	add	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d207      	bcs.n	800d7bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	689a      	ldr	r2, [r3, #8]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b4:	425b      	negs	r3, r3
 800d7b6:	441a      	add	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d105      	bne.n	800d7ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d7d6:	697b      	ldr	r3, [r7, #20]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d018      	beq.n	800d824 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	68da      	ldr	r2, [r3, #12]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fa:	441a      	add	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	68da      	ldr	r2, [r3, #12]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d303      	bcc.n	800d814 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68d9      	ldr	r1, [r3, #12]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d81c:	461a      	mov	r2, r3
 800d81e:	6838      	ldr	r0, [r7, #0]
 800d820:	f012 fa8d 	bl	801fd3e <memcpy>
	}
}
 800d824:	bf00      	nop
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d834:	f001 fc8a 	bl	800f14c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d83e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d840:	e011      	b.n	800d866 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d846:	2b00      	cmp	r3, #0
 800d848:	d012      	beq.n	800d870 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	3324      	adds	r3, #36	; 0x24
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 fd42 	bl	800e2d8 <xTaskRemoveFromEventList>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d85a:	f000 fe47 	bl	800e4ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
 800d860:	3b01      	subs	r3, #1
 800d862:	b2db      	uxtb	r3, r3
 800d864:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	dce9      	bgt.n	800d842 <prvUnlockQueue+0x16>
 800d86e:	e000      	b.n	800d872 <prvUnlockQueue+0x46>
					break;
 800d870:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	22ff      	movs	r2, #255	; 0xff
 800d876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d87a:	f001 fc9b 	bl	800f1b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d87e:	f001 fc65 	bl	800f14c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d888:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d88a:	e011      	b.n	800d8b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d012      	beq.n	800d8ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	3310      	adds	r3, #16
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 fd1d 	bl	800e2d8 <xTaskRemoveFromEventList>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d001      	beq.n	800d8a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d8a4:	f000 fe22 	bl	800e4ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d8a8:	7bbb      	ldrb	r3, [r7, #14]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	dce9      	bgt.n	800d88c <prvUnlockQueue+0x60>
 800d8b8:	e000      	b.n	800d8bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d8ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	22ff      	movs	r2, #255	; 0xff
 800d8c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d8c4:	f001 fc76 	bl	800f1b4 <vPortExitCritical>
}
 800d8c8:	bf00      	nop
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8d8:	f001 fc38 	bl	800f14c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d102      	bne.n	800d8ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	e001      	b.n	800d8ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8ee:	f001 fc61 	bl	800f1b4 <vPortExitCritical>

	return xReturn;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3710      	adds	r7, #16
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d904:	f001 fc22 	bl	800f14c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d910:	429a      	cmp	r2, r3
 800d912:	d102      	bne.n	800d91a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d914:	2301      	movs	r3, #1
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	e001      	b.n	800d91e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d91e:	f001 fc49 	bl	800f1b4 <vPortExitCritical>

	return xReturn;
 800d922:	68fb      	ldr	r3, [r7, #12]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d936:	2300      	movs	r3, #0
 800d938:	60fb      	str	r3, [r7, #12]
 800d93a:	e014      	b.n	800d966 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d93c:	4a0f      	ldr	r2, [pc, #60]	; (800d97c <vQueueAddToRegistry+0x50>)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10b      	bne.n	800d960 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d948:	490c      	ldr	r1, [pc, #48]	; (800d97c <vQueueAddToRegistry+0x50>)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d952:	4a0a      	ldr	r2, [pc, #40]	; (800d97c <vQueueAddToRegistry+0x50>)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	4413      	add	r3, r2
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d95e:	e006      	b.n	800d96e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	3301      	adds	r3, #1
 800d964:	60fb      	str	r3, [r7, #12]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b07      	cmp	r3, #7
 800d96a:	d9e7      	bls.n	800d93c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d96c:	bf00      	nop
 800d96e:	bf00      	nop
 800d970:	3714      	adds	r7, #20
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	2000c53c 	.word	0x2000c53c

0800d980 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d990:	f001 fbdc 	bl	800f14c <vPortEnterCritical>
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d99a:	b25b      	sxtb	r3, r3
 800d99c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9a0:	d103      	bne.n	800d9aa <vQueueWaitForMessageRestricted+0x2a>
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9b0:	b25b      	sxtb	r3, r3
 800d9b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9b6:	d103      	bne.n	800d9c0 <vQueueWaitForMessageRestricted+0x40>
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9c0:	f001 fbf8 	bl	800f1b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d106      	bne.n	800d9da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	3324      	adds	r3, #36	; 0x24
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	68b9      	ldr	r1, [r7, #8]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 fc51 	bl	800e27c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d9da:	6978      	ldr	r0, [r7, #20]
 800d9dc:	f7ff ff26 	bl	800d82c <prvUnlockQueue>
	}
 800d9e0:	bf00      	nop
 800d9e2:	3718      	adds	r7, #24
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08e      	sub	sp, #56	; 0x38
 800d9ec:	af04      	add	r7, sp, #16
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10c      	bne.n	800da16 <xTaskCreateStatic+0x2e>
	__asm volatile
 800d9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da00:	b672      	cpsid	i
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	b662      	cpsie	i
 800da10:	623b      	str	r3, [r7, #32]
}
 800da12:	bf00      	nop
 800da14:	e7fe      	b.n	800da14 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800da16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d10c      	bne.n	800da36 <xTaskCreateStatic+0x4e>
	__asm volatile
 800da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da20:	b672      	cpsid	i
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	b662      	cpsie	i
 800da30:	61fb      	str	r3, [r7, #28]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da36:	235c      	movs	r3, #92	; 0x5c
 800da38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	2b5c      	cmp	r3, #92	; 0x5c
 800da3e:	d00c      	beq.n	800da5a <xTaskCreateStatic+0x72>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	b672      	cpsid	i
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	b662      	cpsie	i
 800da54:	61bb      	str	r3, [r7, #24]
}
 800da56:	bf00      	nop
 800da58:	e7fe      	b.n	800da58 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d01e      	beq.n	800daa0 <xTaskCreateStatic+0xb8>
 800da62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da64:	2b00      	cmp	r3, #0
 800da66:	d01b      	beq.n	800daa0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	2202      	movs	r2, #2
 800da76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da7a:	2300      	movs	r3, #0
 800da7c:	9303      	str	r3, [sp, #12]
 800da7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da80:	9302      	str	r3, [sp, #8]
 800da82:	f107 0314 	add.w	r3, r7, #20
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f000 f850 	bl	800db38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da9a:	f000 f8df 	bl	800dc5c <prvAddNewTaskToReadyList>
 800da9e:	e001      	b.n	800daa4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800daa0:	2300      	movs	r3, #0
 800daa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800daa4:	697b      	ldr	r3, [r7, #20]
	}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3728      	adds	r7, #40	; 0x28
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b08c      	sub	sp, #48	; 0x30
 800dab2:	af04      	add	r7, sp, #16
 800dab4:	60f8      	str	r0, [r7, #12]
 800dab6:	60b9      	str	r1, [r7, #8]
 800dab8:	603b      	str	r3, [r7, #0]
 800daba:	4613      	mov	r3, r2
 800dabc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dabe:	88fb      	ldrh	r3, [r7, #6]
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	4618      	mov	r0, r3
 800dac4:	f001 fc6e 	bl	800f3a4 <pvPortMalloc>
 800dac8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00e      	beq.n	800daee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dad0:	205c      	movs	r0, #92	; 0x5c
 800dad2:	f001 fc67 	bl	800f3a4 <pvPortMalloc>
 800dad6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	697a      	ldr	r2, [r7, #20]
 800dae2:	631a      	str	r2, [r3, #48]	; 0x30
 800dae4:	e005      	b.n	800daf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dae6:	6978      	ldr	r0, [r7, #20]
 800dae8:	f001 fd26 	bl	800f538 <vPortFree>
 800daec:	e001      	b.n	800daf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d017      	beq.n	800db28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db00:	88fa      	ldrh	r2, [r7, #6]
 800db02:	2300      	movs	r3, #0
 800db04:	9303      	str	r3, [sp, #12]
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	9302      	str	r3, [sp, #8]
 800db0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	68b9      	ldr	r1, [r7, #8]
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f000 f80e 	bl	800db38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db1c:	69f8      	ldr	r0, [r7, #28]
 800db1e:	f000 f89d 	bl	800dc5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db22:	2301      	movs	r3, #1
 800db24:	61bb      	str	r3, [r7, #24]
 800db26:	e002      	b.n	800db2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db2e:	69bb      	ldr	r3, [r7, #24]
	}
 800db30:	4618      	mov	r0, r3
 800db32:	3720      	adds	r7, #32
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b088      	sub	sp, #32
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
 800db44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800db46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	461a      	mov	r2, r3
 800db50:	21a5      	movs	r1, #165	; 0xa5
 800db52:	f012 f827 	bl	801fba4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800db60:	440b      	add	r3, r1
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4413      	add	r3, r2
 800db66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	f023 0307 	bic.w	r3, r3, #7
 800db6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	f003 0307 	and.w	r3, r3, #7
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00c      	beq.n	800db94 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800db7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7e:	b672      	cpsid	i
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	b662      	cpsie	i
 800db8e:	617b      	str	r3, [r7, #20]
}
 800db90:	bf00      	nop
 800db92:	e7fe      	b.n	800db92 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d01f      	beq.n	800dbda <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db9a:	2300      	movs	r3, #0
 800db9c:	61fb      	str	r3, [r7, #28]
 800db9e:	e012      	b.n	800dbc6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	4413      	add	r3, r2
 800dba6:	7819      	ldrb	r1, [r3, #0]
 800dba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	4413      	add	r3, r2
 800dbae:	3334      	adds	r3, #52	; 0x34
 800dbb0:	460a      	mov	r2, r1
 800dbb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	4413      	add	r3, r2
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d006      	beq.n	800dbce <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	61fb      	str	r3, [r7, #28]
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	2b0f      	cmp	r3, #15
 800dbca:	d9e9      	bls.n	800dba0 <prvInitialiseNewTask+0x68>
 800dbcc:	e000      	b.n	800dbd0 <prvInitialiseNewTask+0x98>
			{
				break;
 800dbce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dbd8:	e003      	b.n	800dbe2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	2b37      	cmp	r3, #55	; 0x37
 800dbe6:	d901      	bls.n	800dbec <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dbe8:	2337      	movs	r3, #55	; 0x37
 800dbea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc00:	3304      	adds	r3, #4
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7ff f952 	bl	800ceac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	3318      	adds	r3, #24
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff f94d 	bl	800ceac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	68f9      	ldr	r1, [r7, #12]
 800dc3a:	69b8      	ldr	r0, [r7, #24]
 800dc3c:	f001 f97a 	bl	800ef34 <pxPortInitialiseStack>
 800dc40:	4602      	mov	r2, r0
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc52:	bf00      	nop
 800dc54:	3720      	adds	r7, #32
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
	...

0800dc5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc64:	f001 fa72 	bl	800f14c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc68:	4b2d      	ldr	r3, [pc, #180]	; (800dd20 <prvAddNewTaskToReadyList+0xc4>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	4a2c      	ldr	r2, [pc, #176]	; (800dd20 <prvAddNewTaskToReadyList+0xc4>)
 800dc70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc72:	4b2c      	ldr	r3, [pc, #176]	; (800dd24 <prvAddNewTaskToReadyList+0xc8>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d109      	bne.n	800dc8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc7a:	4a2a      	ldr	r2, [pc, #168]	; (800dd24 <prvAddNewTaskToReadyList+0xc8>)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc80:	4b27      	ldr	r3, [pc, #156]	; (800dd20 <prvAddNewTaskToReadyList+0xc4>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d110      	bne.n	800dcaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc88:	f000 fc54 	bl	800e534 <prvInitialiseTaskLists>
 800dc8c:	e00d      	b.n	800dcaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc8e:	4b26      	ldr	r3, [pc, #152]	; (800dd28 <prvAddNewTaskToReadyList+0xcc>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d109      	bne.n	800dcaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc96:	4b23      	ldr	r3, [pc, #140]	; (800dd24 <prvAddNewTaskToReadyList+0xc8>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d802      	bhi.n	800dcaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dca4:	4a1f      	ldr	r2, [pc, #124]	; (800dd24 <prvAddNewTaskToReadyList+0xc8>)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dcaa:	4b20      	ldr	r3, [pc, #128]	; (800dd2c <prvAddNewTaskToReadyList+0xd0>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	4a1e      	ldr	r2, [pc, #120]	; (800dd2c <prvAddNewTaskToReadyList+0xd0>)
 800dcb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dcb4:	4b1d      	ldr	r3, [pc, #116]	; (800dd2c <prvAddNewTaskToReadyList+0xd0>)
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc0:	4b1b      	ldr	r3, [pc, #108]	; (800dd30 <prvAddNewTaskToReadyList+0xd4>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d903      	bls.n	800dcd0 <prvAddNewTaskToReadyList+0x74>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dccc:	4a18      	ldr	r2, [pc, #96]	; (800dd30 <prvAddNewTaskToReadyList+0xd4>)
 800dcce:	6013      	str	r3, [r2, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4a15      	ldr	r2, [pc, #84]	; (800dd34 <prvAddNewTaskToReadyList+0xd8>)
 800dcde:	441a      	add	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	3304      	adds	r3, #4
 800dce4:	4619      	mov	r1, r3
 800dce6:	4610      	mov	r0, r2
 800dce8:	f7ff f8ed 	bl	800cec6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dcec:	f001 fa62 	bl	800f1b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dcf0:	4b0d      	ldr	r3, [pc, #52]	; (800dd28 <prvAddNewTaskToReadyList+0xcc>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00e      	beq.n	800dd16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dcf8:	4b0a      	ldr	r3, [pc, #40]	; (800dd24 <prvAddNewTaskToReadyList+0xc8>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d207      	bcs.n	800dd16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd06:	4b0c      	ldr	r3, [pc, #48]	; (800dd38 <prvAddNewTaskToReadyList+0xdc>)
 800dd08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd0c:	601a      	str	r2, [r3, #0]
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd16:	bf00      	nop
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	2000ca50 	.word	0x2000ca50
 800dd24:	2000c57c 	.word	0x2000c57c
 800dd28:	2000ca5c 	.word	0x2000ca5c
 800dd2c:	2000ca6c 	.word	0x2000ca6c
 800dd30:	2000ca58 	.word	0x2000ca58
 800dd34:	2000c580 	.word	0x2000c580
 800dd38:	e000ed04 	.word	0xe000ed04

0800dd3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd44:	2300      	movs	r3, #0
 800dd46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d019      	beq.n	800dd82 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd4e:	4b14      	ldr	r3, [pc, #80]	; (800dda0 <vTaskDelay+0x64>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00c      	beq.n	800dd70 <vTaskDelay+0x34>
	__asm volatile
 800dd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5a:	b672      	cpsid	i
 800dd5c:	f383 8811 	msr	BASEPRI, r3
 800dd60:	f3bf 8f6f 	isb	sy
 800dd64:	f3bf 8f4f 	dsb	sy
 800dd68:	b662      	cpsie	i
 800dd6a:	60bb      	str	r3, [r7, #8]
}
 800dd6c:	bf00      	nop
 800dd6e:	e7fe      	b.n	800dd6e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800dd70:	f000 f884 	bl	800de7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd74:	2100      	movs	r1, #0
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fd2c 	bl	800e7d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd7c:	f000 f88c 	bl	800de98 <xTaskResumeAll>
 800dd80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d107      	bne.n	800dd98 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800dd88:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <vTaskDelay+0x68>)
 800dd8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd98:	bf00      	nop
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	2000ca78 	.word	0x2000ca78
 800dda4:	e000ed04 	.word	0xe000ed04

0800dda8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b08a      	sub	sp, #40	; 0x28
 800ddac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ddb6:	463a      	mov	r2, r7
 800ddb8:	1d39      	adds	r1, r7, #4
 800ddba:	f107 0308 	add.w	r3, r7, #8
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7ff f820 	bl	800ce04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	68ba      	ldr	r2, [r7, #8]
 800ddca:	9202      	str	r2, [sp, #8]
 800ddcc:	9301      	str	r3, [sp, #4]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	460a      	mov	r2, r1
 800ddd6:	4923      	ldr	r1, [pc, #140]	; (800de64 <vTaskStartScheduler+0xbc>)
 800ddd8:	4823      	ldr	r0, [pc, #140]	; (800de68 <vTaskStartScheduler+0xc0>)
 800ddda:	f7ff fe05 	bl	800d9e8 <xTaskCreateStatic>
 800ddde:	4603      	mov	r3, r0
 800dde0:	4a22      	ldr	r2, [pc, #136]	; (800de6c <vTaskStartScheduler+0xc4>)
 800dde2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dde4:	4b21      	ldr	r3, [pc, #132]	; (800de6c <vTaskStartScheduler+0xc4>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ddec:	2301      	movs	r3, #1
 800ddee:	617b      	str	r3, [r7, #20]
 800ddf0:	e001      	b.n	800ddf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d102      	bne.n	800de02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ddfc:	f000 fd3e 	bl	800e87c <xTimerCreateTimerTask>
 800de00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d118      	bne.n	800de3a <vTaskStartScheduler+0x92>
	__asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	b672      	cpsid	i
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	b662      	cpsie	i
 800de1c:	613b      	str	r3, [r7, #16]
}
 800de1e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de20:	4b13      	ldr	r3, [pc, #76]	; (800de70 <vTaskStartScheduler+0xc8>)
 800de22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de28:	4b12      	ldr	r3, [pc, #72]	; (800de74 <vTaskStartScheduler+0xcc>)
 800de2a:	2201      	movs	r2, #1
 800de2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de2e:	4b12      	ldr	r3, [pc, #72]	; (800de78 <vTaskStartScheduler+0xd0>)
 800de30:	2200      	movs	r2, #0
 800de32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de34:	f001 f90c 	bl	800f050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de38:	e010      	b.n	800de5c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de40:	d10c      	bne.n	800de5c <vTaskStartScheduler+0xb4>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	b672      	cpsid	i
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	b662      	cpsie	i
 800de56:	60fb      	str	r3, [r7, #12]
}
 800de58:	bf00      	nop
 800de5a:	e7fe      	b.n	800de5a <vTaskStartScheduler+0xb2>
}
 800de5c:	bf00      	nop
 800de5e:	3718      	adds	r7, #24
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	08023294 	.word	0x08023294
 800de68:	0800e505 	.word	0x0800e505
 800de6c:	2000ca74 	.word	0x2000ca74
 800de70:	2000ca70 	.word	0x2000ca70
 800de74:	2000ca5c 	.word	0x2000ca5c
 800de78:	2000ca54 	.word	0x2000ca54

0800de7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de7c:	b480      	push	{r7}
 800de7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800de80:	4b04      	ldr	r3, [pc, #16]	; (800de94 <vTaskSuspendAll+0x18>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	3301      	adds	r3, #1
 800de86:	4a03      	ldr	r2, [pc, #12]	; (800de94 <vTaskSuspendAll+0x18>)
 800de88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800de8a:	bf00      	nop
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr
 800de94:	2000ca78 	.word	0x2000ca78

0800de98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de9e:	2300      	movs	r3, #0
 800dea0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dea2:	2300      	movs	r3, #0
 800dea4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dea6:	4b43      	ldr	r3, [pc, #268]	; (800dfb4 <xTaskResumeAll+0x11c>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10c      	bne.n	800dec8 <xTaskResumeAll+0x30>
	__asm volatile
 800deae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb2:	b672      	cpsid	i
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	b662      	cpsie	i
 800dec2:	603b      	str	r3, [r7, #0]
}
 800dec4:	bf00      	nop
 800dec6:	e7fe      	b.n	800dec6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dec8:	f001 f940 	bl	800f14c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800decc:	4b39      	ldr	r3, [pc, #228]	; (800dfb4 <xTaskResumeAll+0x11c>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3b01      	subs	r3, #1
 800ded2:	4a38      	ldr	r2, [pc, #224]	; (800dfb4 <xTaskResumeAll+0x11c>)
 800ded4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ded6:	4b37      	ldr	r3, [pc, #220]	; (800dfb4 <xTaskResumeAll+0x11c>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d162      	bne.n	800dfa4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dede:	4b36      	ldr	r3, [pc, #216]	; (800dfb8 <xTaskResumeAll+0x120>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d05e      	beq.n	800dfa4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dee6:	e02f      	b.n	800df48 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dee8:	4b34      	ldr	r3, [pc, #208]	; (800dfbc <xTaskResumeAll+0x124>)
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	3318      	adds	r3, #24
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff f843 	bl	800cf80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3304      	adds	r3, #4
 800defe:	4618      	mov	r0, r3
 800df00:	f7ff f83e 	bl	800cf80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df08:	4b2d      	ldr	r3, [pc, #180]	; (800dfc0 <xTaskResumeAll+0x128>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d903      	bls.n	800df18 <xTaskResumeAll+0x80>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df14:	4a2a      	ldr	r2, [pc, #168]	; (800dfc0 <xTaskResumeAll+0x128>)
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1c:	4613      	mov	r3, r2
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4a27      	ldr	r2, [pc, #156]	; (800dfc4 <xTaskResumeAll+0x12c>)
 800df26:	441a      	add	r2, r3
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	3304      	adds	r3, #4
 800df2c:	4619      	mov	r1, r3
 800df2e:	4610      	mov	r0, r2
 800df30:	f7fe ffc9 	bl	800cec6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df38:	4b23      	ldr	r3, [pc, #140]	; (800dfc8 <xTaskResumeAll+0x130>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3e:	429a      	cmp	r2, r3
 800df40:	d302      	bcc.n	800df48 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800df42:	4b22      	ldr	r3, [pc, #136]	; (800dfcc <xTaskResumeAll+0x134>)
 800df44:	2201      	movs	r2, #1
 800df46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df48:	4b1c      	ldr	r3, [pc, #112]	; (800dfbc <xTaskResumeAll+0x124>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1cb      	bne.n	800dee8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df56:	f000 fb8d 	bl	800e674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800df5a:	4b1d      	ldr	r3, [pc, #116]	; (800dfd0 <xTaskResumeAll+0x138>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d010      	beq.n	800df88 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df66:	f000 f847 	bl	800dff8 <xTaskIncrementTick>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800df70:	4b16      	ldr	r3, [pc, #88]	; (800dfcc <xTaskResumeAll+0x134>)
 800df72:	2201      	movs	r2, #1
 800df74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	3b01      	subs	r3, #1
 800df7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1f1      	bne.n	800df66 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800df82:	4b13      	ldr	r3, [pc, #76]	; (800dfd0 <xTaskResumeAll+0x138>)
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df88:	4b10      	ldr	r3, [pc, #64]	; (800dfcc <xTaskResumeAll+0x134>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d009      	beq.n	800dfa4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df90:	2301      	movs	r3, #1
 800df92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df94:	4b0f      	ldr	r3, [pc, #60]	; (800dfd4 <xTaskResumeAll+0x13c>)
 800df96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df9a:	601a      	str	r2, [r3, #0]
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfa4:	f001 f906 	bl	800f1b4 <vPortExitCritical>

	return xAlreadyYielded;
 800dfa8:	68bb      	ldr	r3, [r7, #8]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	2000ca78 	.word	0x2000ca78
 800dfb8:	2000ca50 	.word	0x2000ca50
 800dfbc:	2000ca10 	.word	0x2000ca10
 800dfc0:	2000ca58 	.word	0x2000ca58
 800dfc4:	2000c580 	.word	0x2000c580
 800dfc8:	2000c57c 	.word	0x2000c57c
 800dfcc:	2000ca64 	.word	0x2000ca64
 800dfd0:	2000ca60 	.word	0x2000ca60
 800dfd4:	e000ed04 	.word	0xe000ed04

0800dfd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dfde:	4b05      	ldr	r3, [pc, #20]	; (800dff4 <xTaskGetTickCount+0x1c>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dfe4:	687b      	ldr	r3, [r7, #4]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	370c      	adds	r7, #12
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	2000ca54 	.word	0x2000ca54

0800dff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dffe:	2300      	movs	r3, #0
 800e000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e002:	4b50      	ldr	r3, [pc, #320]	; (800e144 <xTaskIncrementTick+0x14c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	f040 808b 	bne.w	800e122 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e00c:	4b4e      	ldr	r3, [pc, #312]	; (800e148 <xTaskIncrementTick+0x150>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3301      	adds	r3, #1
 800e012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e014:	4a4c      	ldr	r2, [pc, #304]	; (800e148 <xTaskIncrementTick+0x150>)
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d122      	bne.n	800e066 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e020:	4b4a      	ldr	r3, [pc, #296]	; (800e14c <xTaskIncrementTick+0x154>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00c      	beq.n	800e044 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02e:	b672      	cpsid	i
 800e030:	f383 8811 	msr	BASEPRI, r3
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	b662      	cpsie	i
 800e03e:	603b      	str	r3, [r7, #0]
}
 800e040:	bf00      	nop
 800e042:	e7fe      	b.n	800e042 <xTaskIncrementTick+0x4a>
 800e044:	4b41      	ldr	r3, [pc, #260]	; (800e14c <xTaskIncrementTick+0x154>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	60fb      	str	r3, [r7, #12]
 800e04a:	4b41      	ldr	r3, [pc, #260]	; (800e150 <xTaskIncrementTick+0x158>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a3f      	ldr	r2, [pc, #252]	; (800e14c <xTaskIncrementTick+0x154>)
 800e050:	6013      	str	r3, [r2, #0]
 800e052:	4a3f      	ldr	r2, [pc, #252]	; (800e150 <xTaskIncrementTick+0x158>)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6013      	str	r3, [r2, #0]
 800e058:	4b3e      	ldr	r3, [pc, #248]	; (800e154 <xTaskIncrementTick+0x15c>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	3301      	adds	r3, #1
 800e05e:	4a3d      	ldr	r2, [pc, #244]	; (800e154 <xTaskIncrementTick+0x15c>)
 800e060:	6013      	str	r3, [r2, #0]
 800e062:	f000 fb07 	bl	800e674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e066:	4b3c      	ldr	r3, [pc, #240]	; (800e158 <xTaskIncrementTick+0x160>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	693a      	ldr	r2, [r7, #16]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d349      	bcc.n	800e104 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e070:	4b36      	ldr	r3, [pc, #216]	; (800e14c <xTaskIncrementTick+0x154>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d104      	bne.n	800e084 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e07a:	4b37      	ldr	r3, [pc, #220]	; (800e158 <xTaskIncrementTick+0x160>)
 800e07c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e080:	601a      	str	r2, [r3, #0]
					break;
 800e082:	e03f      	b.n	800e104 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e084:	4b31      	ldr	r3, [pc, #196]	; (800e14c <xTaskIncrementTick+0x154>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e094:	693a      	ldr	r2, [r7, #16]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d203      	bcs.n	800e0a4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e09c:	4a2e      	ldr	r2, [pc, #184]	; (800e158 <xTaskIncrementTick+0x160>)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0a2:	e02f      	b.n	800e104 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe ff69 	bl	800cf80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d004      	beq.n	800e0c0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	3318      	adds	r3, #24
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe ff60 	bl	800cf80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c4:	4b25      	ldr	r3, [pc, #148]	; (800e15c <xTaskIncrementTick+0x164>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d903      	bls.n	800e0d4 <xTaskIncrementTick+0xdc>
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d0:	4a22      	ldr	r2, [pc, #136]	; (800e15c <xTaskIncrementTick+0x164>)
 800e0d2:	6013      	str	r3, [r2, #0]
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d8:	4613      	mov	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4a1f      	ldr	r2, [pc, #124]	; (800e160 <xTaskIncrementTick+0x168>)
 800e0e2:	441a      	add	r2, r3
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	f7fe feeb 	bl	800cec6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f4:	4b1b      	ldr	r3, [pc, #108]	; (800e164 <xTaskIncrementTick+0x16c>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d3b8      	bcc.n	800e070 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e0fe:	2301      	movs	r3, #1
 800e100:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e102:	e7b5      	b.n	800e070 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e104:	4b17      	ldr	r3, [pc, #92]	; (800e164 <xTaskIncrementTick+0x16c>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10a:	4915      	ldr	r1, [pc, #84]	; (800e160 <xTaskIncrementTick+0x168>)
 800e10c:	4613      	mov	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	4413      	add	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	440b      	add	r3, r1
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d907      	bls.n	800e12c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800e11c:	2301      	movs	r3, #1
 800e11e:	617b      	str	r3, [r7, #20]
 800e120:	e004      	b.n	800e12c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e122:	4b11      	ldr	r3, [pc, #68]	; (800e168 <xTaskIncrementTick+0x170>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	3301      	adds	r3, #1
 800e128:	4a0f      	ldr	r2, [pc, #60]	; (800e168 <xTaskIncrementTick+0x170>)
 800e12a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e12c:	4b0f      	ldr	r3, [pc, #60]	; (800e16c <xTaskIncrementTick+0x174>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800e134:	2301      	movs	r3, #1
 800e136:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e138:	697b      	ldr	r3, [r7, #20]
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3718      	adds	r7, #24
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	2000ca78 	.word	0x2000ca78
 800e148:	2000ca54 	.word	0x2000ca54
 800e14c:	2000ca08 	.word	0x2000ca08
 800e150:	2000ca0c 	.word	0x2000ca0c
 800e154:	2000ca68 	.word	0x2000ca68
 800e158:	2000ca70 	.word	0x2000ca70
 800e15c:	2000ca58 	.word	0x2000ca58
 800e160:	2000c580 	.word	0x2000c580
 800e164:	2000c57c 	.word	0x2000c57c
 800e168:	2000ca60 	.word	0x2000ca60
 800e16c:	2000ca64 	.word	0x2000ca64

0800e170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e176:	4b29      	ldr	r3, [pc, #164]	; (800e21c <vTaskSwitchContext+0xac>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d003      	beq.n	800e186 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e17e:	4b28      	ldr	r3, [pc, #160]	; (800e220 <vTaskSwitchContext+0xb0>)
 800e180:	2201      	movs	r2, #1
 800e182:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e184:	e043      	b.n	800e20e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800e186:	4b26      	ldr	r3, [pc, #152]	; (800e220 <vTaskSwitchContext+0xb0>)
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e18c:	4b25      	ldr	r3, [pc, #148]	; (800e224 <vTaskSwitchContext+0xb4>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	60fb      	str	r3, [r7, #12]
 800e192:	e012      	b.n	800e1ba <vTaskSwitchContext+0x4a>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d10c      	bne.n	800e1b4 <vTaskSwitchContext+0x44>
	__asm volatile
 800e19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19e:	b672      	cpsid	i
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	b662      	cpsie	i
 800e1ae:	607b      	str	r3, [r7, #4]
}
 800e1b0:	bf00      	nop
 800e1b2:	e7fe      	b.n	800e1b2 <vTaskSwitchContext+0x42>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	60fb      	str	r3, [r7, #12]
 800e1ba:	491b      	ldr	r1, [pc, #108]	; (800e228 <vTaskSwitchContext+0xb8>)
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	440b      	add	r3, r1
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d0e2      	beq.n	800e194 <vTaskSwitchContext+0x24>
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	4413      	add	r3, r2
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	4a13      	ldr	r2, [pc, #76]	; (800e228 <vTaskSwitchContext+0xb8>)
 800e1da:	4413      	add	r3, r2
 800e1dc:	60bb      	str	r3, [r7, #8]
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	685a      	ldr	r2, [r3, #4]
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	605a      	str	r2, [r3, #4]
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	685a      	ldr	r2, [r3, #4]
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	3308      	adds	r3, #8
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d104      	bne.n	800e1fe <vTaskSwitchContext+0x8e>
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	605a      	str	r2, [r3, #4]
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	4a09      	ldr	r2, [pc, #36]	; (800e22c <vTaskSwitchContext+0xbc>)
 800e206:	6013      	str	r3, [r2, #0]
 800e208:	4a06      	ldr	r2, [pc, #24]	; (800e224 <vTaskSwitchContext+0xb4>)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6013      	str	r3, [r2, #0]
}
 800e20e:	bf00      	nop
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	2000ca78 	.word	0x2000ca78
 800e220:	2000ca64 	.word	0x2000ca64
 800e224:	2000ca58 	.word	0x2000ca58
 800e228:	2000c580 	.word	0x2000c580
 800e22c:	2000c57c 	.word	0x2000c57c

0800e230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10c      	bne.n	800e25a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e244:	b672      	cpsid	i
 800e246:	f383 8811 	msr	BASEPRI, r3
 800e24a:	f3bf 8f6f 	isb	sy
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	b662      	cpsie	i
 800e254:	60fb      	str	r3, [r7, #12]
}
 800e256:	bf00      	nop
 800e258:	e7fe      	b.n	800e258 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e25a:	4b07      	ldr	r3, [pc, #28]	; (800e278 <vTaskPlaceOnEventList+0x48>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	3318      	adds	r3, #24
 800e260:	4619      	mov	r1, r3
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7fe fe53 	bl	800cf0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e268:	2101      	movs	r1, #1
 800e26a:	6838      	ldr	r0, [r7, #0]
 800e26c:	f000 fab2 	bl	800e7d4 <prvAddCurrentTaskToDelayedList>
}
 800e270:	bf00      	nop
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	2000c57c 	.word	0x2000c57c

0800e27c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10c      	bne.n	800e2a8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e292:	b672      	cpsid	i
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	b662      	cpsie	i
 800e2a2:	617b      	str	r3, [r7, #20]
}
 800e2a4:	bf00      	nop
 800e2a6:	e7fe      	b.n	800e2a6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2a8:	4b0a      	ldr	r3, [pc, #40]	; (800e2d4 <vTaskPlaceOnEventListRestricted+0x58>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	3318      	adds	r3, #24
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f7fe fe08 	bl	800cec6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800e2bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e2c2:	6879      	ldr	r1, [r7, #4]
 800e2c4:	68b8      	ldr	r0, [r7, #8]
 800e2c6:	f000 fa85 	bl	800e7d4 <prvAddCurrentTaskToDelayedList>
	}
 800e2ca:	bf00      	nop
 800e2cc:	3718      	adds	r7, #24
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	2000c57c 	.word	0x2000c57c

0800e2d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b086      	sub	sp, #24
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10c      	bne.n	800e308 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f2:	b672      	cpsid	i
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	b662      	cpsie	i
 800e302:	60fb      	str	r3, [r7, #12]
}
 800e304:	bf00      	nop
 800e306:	e7fe      	b.n	800e306 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	3318      	adds	r3, #24
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fe fe37 	bl	800cf80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e312:	4b1e      	ldr	r3, [pc, #120]	; (800e38c <xTaskRemoveFromEventList+0xb4>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d11d      	bne.n	800e356 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	3304      	adds	r3, #4
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fe fe2e 	bl	800cf80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e328:	4b19      	ldr	r3, [pc, #100]	; (800e390 <xTaskRemoveFromEventList+0xb8>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d903      	bls.n	800e338 <xTaskRemoveFromEventList+0x60>
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e334:	4a16      	ldr	r2, [pc, #88]	; (800e390 <xTaskRemoveFromEventList+0xb8>)
 800e336:	6013      	str	r3, [r2, #0]
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33c:	4613      	mov	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4a13      	ldr	r2, [pc, #76]	; (800e394 <xTaskRemoveFromEventList+0xbc>)
 800e346:	441a      	add	r2, r3
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	3304      	adds	r3, #4
 800e34c:	4619      	mov	r1, r3
 800e34e:	4610      	mov	r0, r2
 800e350:	f7fe fdb9 	bl	800cec6 <vListInsertEnd>
 800e354:	e005      	b.n	800e362 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	3318      	adds	r3, #24
 800e35a:	4619      	mov	r1, r3
 800e35c:	480e      	ldr	r0, [pc, #56]	; (800e398 <xTaskRemoveFromEventList+0xc0>)
 800e35e:	f7fe fdb2 	bl	800cec6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e366:	4b0d      	ldr	r3, [pc, #52]	; (800e39c <xTaskRemoveFromEventList+0xc4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d905      	bls.n	800e37c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e370:	2301      	movs	r3, #1
 800e372:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e374:	4b0a      	ldr	r3, [pc, #40]	; (800e3a0 <xTaskRemoveFromEventList+0xc8>)
 800e376:	2201      	movs	r2, #1
 800e378:	601a      	str	r2, [r3, #0]
 800e37a:	e001      	b.n	800e380 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e37c:	2300      	movs	r3, #0
 800e37e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e380:	697b      	ldr	r3, [r7, #20]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3718      	adds	r7, #24
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	2000ca78 	.word	0x2000ca78
 800e390:	2000ca58 	.word	0x2000ca58
 800e394:	2000c580 	.word	0x2000c580
 800e398:	2000ca10 	.word	0x2000ca10
 800e39c:	2000c57c 	.word	0x2000c57c
 800e3a0:	2000ca64 	.word	0x2000ca64

0800e3a4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10c      	bne.n	800e3cc <vTaskSetTimeOutState+0x28>
	__asm volatile
 800e3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b6:	b672      	cpsid	i
 800e3b8:	f383 8811 	msr	BASEPRI, r3
 800e3bc:	f3bf 8f6f 	isb	sy
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	b662      	cpsie	i
 800e3c6:	60fb      	str	r3, [r7, #12]
}
 800e3c8:	bf00      	nop
 800e3ca:	e7fe      	b.n	800e3ca <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800e3cc:	f000 febe 	bl	800f14c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3d0:	4b06      	ldr	r3, [pc, #24]	; (800e3ec <vTaskSetTimeOutState+0x48>)
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800e3d8:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <vTaskSetTimeOutState+0x4c>)
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800e3e0:	f000 fee8 	bl	800f1b4 <vPortExitCritical>
}
 800e3e4:	bf00      	nop
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	2000ca68 	.word	0x2000ca68
 800e3f0:	2000ca54 	.word	0x2000ca54

0800e3f4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3fc:	4b06      	ldr	r3, [pc, #24]	; (800e418 <vTaskInternalSetTimeOutState+0x24>)
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e404:	4b05      	ldr	r3, [pc, #20]	; (800e41c <vTaskInternalSetTimeOutState+0x28>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	605a      	str	r2, [r3, #4]
}
 800e40c:	bf00      	nop
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	2000ca68 	.word	0x2000ca68
 800e41c:	2000ca54 	.word	0x2000ca54

0800e420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b088      	sub	sp, #32
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10c      	bne.n	800e44a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	b672      	cpsid	i
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	b662      	cpsie	i
 800e444:	613b      	str	r3, [r7, #16]
}
 800e446:	bf00      	nop
 800e448:	e7fe      	b.n	800e448 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10c      	bne.n	800e46a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	b672      	cpsid	i
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	b662      	cpsie	i
 800e464:	60fb      	str	r3, [r7, #12]
}
 800e466:	bf00      	nop
 800e468:	e7fe      	b.n	800e468 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e46a:	f000 fe6f 	bl	800f14c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e46e:	4b1d      	ldr	r3, [pc, #116]	; (800e4e4 <xTaskCheckForTimeOut+0xc4>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	69ba      	ldr	r2, [r7, #24]
 800e47a:	1ad3      	subs	r3, r2, r3
 800e47c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e486:	d102      	bne.n	800e48e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e488:	2300      	movs	r3, #0
 800e48a:	61fb      	str	r3, [r7, #28]
 800e48c:	e023      	b.n	800e4d6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	4b15      	ldr	r3, [pc, #84]	; (800e4e8 <xTaskCheckForTimeOut+0xc8>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	429a      	cmp	r2, r3
 800e498:	d007      	beq.n	800e4aa <xTaskCheckForTimeOut+0x8a>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	69ba      	ldr	r2, [r7, #24]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d302      	bcc.n	800e4aa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	61fb      	str	r3, [r7, #28]
 800e4a8:	e015      	b.n	800e4d6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	697a      	ldr	r2, [r7, #20]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d20b      	bcs.n	800e4cc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	1ad2      	subs	r2, r2, r3
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7ff ff97 	bl	800e3f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	61fb      	str	r3, [r7, #28]
 800e4ca:	e004      	b.n	800e4d6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e4d6:	f000 fe6d 	bl	800f1b4 <vPortExitCritical>

	return xReturn;
 800e4da:	69fb      	ldr	r3, [r7, #28]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3720      	adds	r7, #32
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	2000ca54 	.word	0x2000ca54
 800e4e8:	2000ca68 	.word	0x2000ca68

0800e4ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e4f0:	4b03      	ldr	r3, [pc, #12]	; (800e500 <vTaskMissedYield+0x14>)
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	601a      	str	r2, [r3, #0]
}
 800e4f6:	bf00      	nop
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr
 800e500:	2000ca64 	.word	0x2000ca64

0800e504 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e50c:	f000 f852 	bl	800e5b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e510:	4b06      	ldr	r3, [pc, #24]	; (800e52c <prvIdleTask+0x28>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d9f9      	bls.n	800e50c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e518:	4b05      	ldr	r3, [pc, #20]	; (800e530 <prvIdleTask+0x2c>)
 800e51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e528:	e7f0      	b.n	800e50c <prvIdleTask+0x8>
 800e52a:	bf00      	nop
 800e52c:	2000c580 	.word	0x2000c580
 800e530:	e000ed04 	.word	0xe000ed04

0800e534 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e53a:	2300      	movs	r3, #0
 800e53c:	607b      	str	r3, [r7, #4]
 800e53e:	e00c      	b.n	800e55a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	4613      	mov	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4413      	add	r3, r2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4a12      	ldr	r2, [pc, #72]	; (800e594 <prvInitialiseTaskLists+0x60>)
 800e54c:	4413      	add	r3, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fe fc8c 	bl	800ce6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	3301      	adds	r3, #1
 800e558:	607b      	str	r3, [r7, #4]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b37      	cmp	r3, #55	; 0x37
 800e55e:	d9ef      	bls.n	800e540 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e560:	480d      	ldr	r0, [pc, #52]	; (800e598 <prvInitialiseTaskLists+0x64>)
 800e562:	f7fe fc83 	bl	800ce6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e566:	480d      	ldr	r0, [pc, #52]	; (800e59c <prvInitialiseTaskLists+0x68>)
 800e568:	f7fe fc80 	bl	800ce6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e56c:	480c      	ldr	r0, [pc, #48]	; (800e5a0 <prvInitialiseTaskLists+0x6c>)
 800e56e:	f7fe fc7d 	bl	800ce6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e572:	480c      	ldr	r0, [pc, #48]	; (800e5a4 <prvInitialiseTaskLists+0x70>)
 800e574:	f7fe fc7a 	bl	800ce6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e578:	480b      	ldr	r0, [pc, #44]	; (800e5a8 <prvInitialiseTaskLists+0x74>)
 800e57a:	f7fe fc77 	bl	800ce6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e57e:	4b0b      	ldr	r3, [pc, #44]	; (800e5ac <prvInitialiseTaskLists+0x78>)
 800e580:	4a05      	ldr	r2, [pc, #20]	; (800e598 <prvInitialiseTaskLists+0x64>)
 800e582:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e584:	4b0a      	ldr	r3, [pc, #40]	; (800e5b0 <prvInitialiseTaskLists+0x7c>)
 800e586:	4a05      	ldr	r2, [pc, #20]	; (800e59c <prvInitialiseTaskLists+0x68>)
 800e588:	601a      	str	r2, [r3, #0]
}
 800e58a:	bf00      	nop
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	2000c580 	.word	0x2000c580
 800e598:	2000c9e0 	.word	0x2000c9e0
 800e59c:	2000c9f4 	.word	0x2000c9f4
 800e5a0:	2000ca10 	.word	0x2000ca10
 800e5a4:	2000ca24 	.word	0x2000ca24
 800e5a8:	2000ca3c 	.word	0x2000ca3c
 800e5ac:	2000ca08 	.word	0x2000ca08
 800e5b0:	2000ca0c 	.word	0x2000ca0c

0800e5b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5ba:	e019      	b.n	800e5f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e5bc:	f000 fdc6 	bl	800f14c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5c0:	4b10      	ldr	r3, [pc, #64]	; (800e604 <prvCheckTasksWaitingTermination+0x50>)
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fe fcd7 	bl	800cf80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e5d2:	4b0d      	ldr	r3, [pc, #52]	; (800e608 <prvCheckTasksWaitingTermination+0x54>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	4a0b      	ldr	r2, [pc, #44]	; (800e608 <prvCheckTasksWaitingTermination+0x54>)
 800e5da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5dc:	4b0b      	ldr	r3, [pc, #44]	; (800e60c <prvCheckTasksWaitingTermination+0x58>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	4a0a      	ldr	r2, [pc, #40]	; (800e60c <prvCheckTasksWaitingTermination+0x58>)
 800e5e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e5e6:	f000 fde5 	bl	800f1b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f810 	bl	800e610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5f0:	4b06      	ldr	r3, [pc, #24]	; (800e60c <prvCheckTasksWaitingTermination+0x58>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1e1      	bne.n	800e5bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e5f8:	bf00      	nop
 800e5fa:	bf00      	nop
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	2000ca24 	.word	0x2000ca24
 800e608:	2000ca50 	.word	0x2000ca50
 800e60c:	2000ca38 	.word	0x2000ca38

0800e610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d108      	bne.n	800e634 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e626:	4618      	mov	r0, r3
 800e628:	f000 ff86 	bl	800f538 <vPortFree>
				vPortFree( pxTCB );
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 ff83 	bl	800f538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e632:	e01a      	b.n	800e66a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d103      	bne.n	800e646 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 ff7a 	bl	800f538 <vPortFree>
	}
 800e644:	e011      	b.n	800e66a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e64c:	2b02      	cmp	r3, #2
 800e64e:	d00c      	beq.n	800e66a <prvDeleteTCB+0x5a>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	b672      	cpsid	i
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	b662      	cpsie	i
 800e664:	60fb      	str	r3, [r7, #12]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <prvDeleteTCB+0x58>
	}
 800e66a:	bf00      	nop
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
	...

0800e674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e67a:	4b0c      	ldr	r3, [pc, #48]	; (800e6ac <prvResetNextTaskUnblockTime+0x38>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d104      	bne.n	800e68e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e684:	4b0a      	ldr	r3, [pc, #40]	; (800e6b0 <prvResetNextTaskUnblockTime+0x3c>)
 800e686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e68a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e68c:	e008      	b.n	800e6a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e68e:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <prvResetNextTaskUnblockTime+0x38>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	4a04      	ldr	r2, [pc, #16]	; (800e6b0 <prvResetNextTaskUnblockTime+0x3c>)
 800e69e:	6013      	str	r3, [r2, #0]
}
 800e6a0:	bf00      	nop
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr
 800e6ac:	2000ca08 	.word	0x2000ca08
 800e6b0:	2000ca70 	.word	0x2000ca70

0800e6b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e6ba:	4b0b      	ldr	r3, [pc, #44]	; (800e6e8 <xTaskGetSchedulerState+0x34>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d102      	bne.n	800e6c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	607b      	str	r3, [r7, #4]
 800e6c6:	e008      	b.n	800e6da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c8:	4b08      	ldr	r3, [pc, #32]	; (800e6ec <xTaskGetSchedulerState+0x38>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d102      	bne.n	800e6d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e6d0:	2302      	movs	r3, #2
 800e6d2:	607b      	str	r3, [r7, #4]
 800e6d4:	e001      	b.n	800e6da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e6da:	687b      	ldr	r3, [r7, #4]
	}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	2000ca5c 	.word	0x2000ca5c
 800e6ec:	2000ca78 	.word	0x2000ca78

0800e6f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b086      	sub	sp, #24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d05a      	beq.n	800e7bc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e706:	4b30      	ldr	r3, [pc, #192]	; (800e7c8 <xTaskPriorityDisinherit+0xd8>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	693a      	ldr	r2, [r7, #16]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d00c      	beq.n	800e72a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	b672      	cpsid	i
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	b662      	cpsie	i
 800e724:	60fb      	str	r3, [r7, #12]
}
 800e726:	bf00      	nop
 800e728:	e7fe      	b.n	800e728 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10c      	bne.n	800e74c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	b672      	cpsid	i
 800e738:	f383 8811 	msr	BASEPRI, r3
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	f3bf 8f4f 	dsb	sy
 800e744:	b662      	cpsie	i
 800e746:	60bb      	str	r3, [r7, #8]
}
 800e748:	bf00      	nop
 800e74a:	e7fe      	b.n	800e74a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e750:	1e5a      	subs	r2, r3, #1
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e75e:	429a      	cmp	r2, r3
 800e760:	d02c      	beq.n	800e7bc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e766:	2b00      	cmp	r3, #0
 800e768:	d128      	bne.n	800e7bc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	3304      	adds	r3, #4
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fc06 	bl	800cf80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e780:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78c:	4b0f      	ldr	r3, [pc, #60]	; (800e7cc <xTaskPriorityDisinherit+0xdc>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	429a      	cmp	r2, r3
 800e792:	d903      	bls.n	800e79c <xTaskPriorityDisinherit+0xac>
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e798:	4a0c      	ldr	r2, [pc, #48]	; (800e7cc <xTaskPriorityDisinherit+0xdc>)
 800e79a:	6013      	str	r3, [r2, #0]
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	4a09      	ldr	r2, [pc, #36]	; (800e7d0 <xTaskPriorityDisinherit+0xe0>)
 800e7aa:	441a      	add	r2, r3
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	f7fe fb87 	bl	800cec6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7bc:	697b      	ldr	r3, [r7, #20]
	}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	2000c57c 	.word	0x2000c57c
 800e7cc:	2000ca58 	.word	0x2000ca58
 800e7d0:	2000c580 	.word	0x2000c580

0800e7d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e7de:	4b21      	ldr	r3, [pc, #132]	; (800e864 <prvAddCurrentTaskToDelayedList+0x90>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7e4:	4b20      	ldr	r3, [pc, #128]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe fbc8 	bl	800cf80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7f6:	d10a      	bne.n	800e80e <prvAddCurrentTaskToDelayedList+0x3a>
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7fe:	4b1a      	ldr	r3, [pc, #104]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3304      	adds	r3, #4
 800e804:	4619      	mov	r1, r3
 800e806:	4819      	ldr	r0, [pc, #100]	; (800e86c <prvAddCurrentTaskToDelayedList+0x98>)
 800e808:	f7fe fb5d 	bl	800cec6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e80c:	e026      	b.n	800e85c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4413      	add	r3, r2
 800e814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e816:	4b14      	ldr	r3, [pc, #80]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	429a      	cmp	r2, r3
 800e824:	d209      	bcs.n	800e83a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e826:	4b12      	ldr	r3, [pc, #72]	; (800e870 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	4b0f      	ldr	r3, [pc, #60]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3304      	adds	r3, #4
 800e830:	4619      	mov	r1, r3
 800e832:	4610      	mov	r0, r2
 800e834:	f7fe fb6b 	bl	800cf0e <vListInsert>
}
 800e838:	e010      	b.n	800e85c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e83a:	4b0e      	ldr	r3, [pc, #56]	; (800e874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <prvAddCurrentTaskToDelayedList+0x94>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3304      	adds	r3, #4
 800e844:	4619      	mov	r1, r3
 800e846:	4610      	mov	r0, r2
 800e848:	f7fe fb61 	bl	800cf0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e84c:	4b0a      	ldr	r3, [pc, #40]	; (800e878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	68ba      	ldr	r2, [r7, #8]
 800e852:	429a      	cmp	r2, r3
 800e854:	d202      	bcs.n	800e85c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e856:	4a08      	ldr	r2, [pc, #32]	; (800e878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	6013      	str	r3, [r2, #0]
}
 800e85c:	bf00      	nop
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	2000ca54 	.word	0x2000ca54
 800e868:	2000c57c 	.word	0x2000c57c
 800e86c:	2000ca3c 	.word	0x2000ca3c
 800e870:	2000ca0c 	.word	0x2000ca0c
 800e874:	2000ca08 	.word	0x2000ca08
 800e878:	2000ca70 	.word	0x2000ca70

0800e87c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08a      	sub	sp, #40	; 0x28
 800e880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e882:	2300      	movs	r3, #0
 800e884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e886:	f000 fb15 	bl	800eeb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e88a:	4b1d      	ldr	r3, [pc, #116]	; (800e900 <xTimerCreateTimerTask+0x84>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d021      	beq.n	800e8d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e892:	2300      	movs	r3, #0
 800e894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e896:	2300      	movs	r3, #0
 800e898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e89a:	1d3a      	adds	r2, r7, #4
 800e89c:	f107 0108 	add.w	r1, r7, #8
 800e8a0:	f107 030c 	add.w	r3, r7, #12
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe fac7 	bl	800ce38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e8aa:	6879      	ldr	r1, [r7, #4]
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	9202      	str	r2, [sp, #8]
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	2302      	movs	r3, #2
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	460a      	mov	r2, r1
 800e8bc:	4911      	ldr	r1, [pc, #68]	; (800e904 <xTimerCreateTimerTask+0x88>)
 800e8be:	4812      	ldr	r0, [pc, #72]	; (800e908 <xTimerCreateTimerTask+0x8c>)
 800e8c0:	f7ff f892 	bl	800d9e8 <xTaskCreateStatic>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	4a11      	ldr	r2, [pc, #68]	; (800e90c <xTimerCreateTimerTask+0x90>)
 800e8c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e8ca:	4b10      	ldr	r3, [pc, #64]	; (800e90c <xTimerCreateTimerTask+0x90>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d10c      	bne.n	800e8f6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800e8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e0:	b672      	cpsid	i
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	b662      	cpsie	i
 800e8f0:	613b      	str	r3, [r7, #16]
}
 800e8f2:	bf00      	nop
 800e8f4:	e7fe      	b.n	800e8f4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800e8f6:	697b      	ldr	r3, [r7, #20]
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3718      	adds	r7, #24
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	2000caac 	.word	0x2000caac
 800e904:	0802329c 	.word	0x0802329c
 800e908:	0800ea4d 	.word	0x0800ea4d
 800e90c:	2000cab0 	.word	0x2000cab0

0800e910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08a      	sub	sp, #40	; 0x28
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	607a      	str	r2, [r7, #4]
 800e91c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e91e:	2300      	movs	r3, #0
 800e920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d10c      	bne.n	800e942 <xTimerGenericCommand+0x32>
	__asm volatile
 800e928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92c:	b672      	cpsid	i
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	b662      	cpsie	i
 800e93c:	623b      	str	r3, [r7, #32]
}
 800e93e:	bf00      	nop
 800e940:	e7fe      	b.n	800e940 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e942:	4b1a      	ldr	r3, [pc, #104]	; (800e9ac <xTimerGenericCommand+0x9c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d02a      	beq.n	800e9a0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	2b05      	cmp	r3, #5
 800e95a:	dc18      	bgt.n	800e98e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e95c:	f7ff feaa 	bl	800e6b4 <xTaskGetSchedulerState>
 800e960:	4603      	mov	r3, r0
 800e962:	2b02      	cmp	r3, #2
 800e964:	d109      	bne.n	800e97a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e966:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <xTimerGenericCommand+0x9c>)
 800e968:	6818      	ldr	r0, [r3, #0]
 800e96a:	f107 0110 	add.w	r1, r7, #16
 800e96e:	2300      	movs	r3, #0
 800e970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e972:	f7fe fc3f 	bl	800d1f4 <xQueueGenericSend>
 800e976:	6278      	str	r0, [r7, #36]	; 0x24
 800e978:	e012      	b.n	800e9a0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e97a:	4b0c      	ldr	r3, [pc, #48]	; (800e9ac <xTimerGenericCommand+0x9c>)
 800e97c:	6818      	ldr	r0, [r3, #0]
 800e97e:	f107 0110 	add.w	r1, r7, #16
 800e982:	2300      	movs	r3, #0
 800e984:	2200      	movs	r2, #0
 800e986:	f7fe fc35 	bl	800d1f4 <xQueueGenericSend>
 800e98a:	6278      	str	r0, [r7, #36]	; 0x24
 800e98c:	e008      	b.n	800e9a0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e98e:	4b07      	ldr	r3, [pc, #28]	; (800e9ac <xTimerGenericCommand+0x9c>)
 800e990:	6818      	ldr	r0, [r3, #0]
 800e992:	f107 0110 	add.w	r1, r7, #16
 800e996:	2300      	movs	r3, #0
 800e998:	683a      	ldr	r2, [r7, #0]
 800e99a:	f7fe fd31 	bl	800d400 <xQueueGenericSendFromISR>
 800e99e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3728      	adds	r7, #40	; 0x28
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	2000caac 	.word	0x2000caac

0800e9b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b088      	sub	sp, #32
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9ba:	4b23      	ldr	r3, [pc, #140]	; (800ea48 <prvProcessExpiredTimer+0x98>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	3304      	adds	r3, #4
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fe fad9 	bl	800cf80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9d4:	f003 0304 	and.w	r3, r3, #4
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d024      	beq.n	800ea26 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	699a      	ldr	r2, [r3, #24]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	18d1      	adds	r1, r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	6978      	ldr	r0, [r7, #20]
 800e9ea:	f000 f8d3 	bl	800eb94 <prvInsertTimerInActiveList>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d021      	beq.n	800ea38 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	6978      	ldr	r0, [r7, #20]
 800ea00:	f7ff ff86 	bl	800e910 <xTimerGenericCommand>
 800ea04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d115      	bne.n	800ea38 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ea0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea10:	b672      	cpsid	i
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	b662      	cpsie	i
 800ea20:	60fb      	str	r3, [r7, #12]
}
 800ea22:	bf00      	nop
 800ea24:	e7fe      	b.n	800ea24 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea2c:	f023 0301 	bic.w	r3, r3, #1
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	6a1b      	ldr	r3, [r3, #32]
 800ea3c:	6978      	ldr	r0, [r7, #20]
 800ea3e:	4798      	blx	r3
}
 800ea40:	bf00      	nop
 800ea42:	3718      	adds	r7, #24
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	2000caa4 	.word	0x2000caa4

0800ea4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea54:	f107 0308 	add.w	r3, r7, #8
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 f857 	bl	800eb0c <prvGetNextExpireTime>
 800ea5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	4619      	mov	r1, r3
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f000 f803 	bl	800ea70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea6a:	f000 f8d5 	bl	800ec18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea6e:	e7f1      	b.n	800ea54 <prvTimerTask+0x8>

0800ea70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea7a:	f7ff f9ff 	bl	800de7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea7e:	f107 0308 	add.w	r3, r7, #8
 800ea82:	4618      	mov	r0, r3
 800ea84:	f000 f866 	bl	800eb54 <prvSampleTimeNow>
 800ea88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d130      	bne.n	800eaf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10a      	bne.n	800eaac <prvProcessTimerOrBlockTask+0x3c>
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d806      	bhi.n	800eaac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ea9e:	f7ff f9fb 	bl	800de98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eaa2:	68f9      	ldr	r1, [r7, #12]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7ff ff83 	bl	800e9b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eaaa:	e024      	b.n	800eaf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d008      	beq.n	800eac4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eab2:	4b13      	ldr	r3, [pc, #76]	; (800eb00 <prvProcessTimerOrBlockTask+0x90>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d101      	bne.n	800eac0 <prvProcessTimerOrBlockTask+0x50>
 800eabc:	2301      	movs	r3, #1
 800eabe:	e000      	b.n	800eac2 <prvProcessTimerOrBlockTask+0x52>
 800eac0:	2300      	movs	r3, #0
 800eac2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eac4:	4b0f      	ldr	r3, [pc, #60]	; (800eb04 <prvProcessTimerOrBlockTask+0x94>)
 800eac6:	6818      	ldr	r0, [r3, #0]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	4619      	mov	r1, r3
 800ead2:	f7fe ff55 	bl	800d980 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ead6:	f7ff f9df 	bl	800de98 <xTaskResumeAll>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d10a      	bne.n	800eaf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eae0:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <prvProcessTimerOrBlockTask+0x98>)
 800eae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae6:	601a      	str	r2, [r3, #0]
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	f3bf 8f6f 	isb	sy
}
 800eaf0:	e001      	b.n	800eaf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eaf2:	f7ff f9d1 	bl	800de98 <xTaskResumeAll>
}
 800eaf6:	bf00      	nop
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	2000caa8 	.word	0x2000caa8
 800eb04:	2000caac 	.word	0x2000caac
 800eb08:	e000ed04 	.word	0xe000ed04

0800eb0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb14:	4b0e      	ldr	r3, [pc, #56]	; (800eb50 <prvGetNextExpireTime+0x44>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d101      	bne.n	800eb22 <prvGetNextExpireTime+0x16>
 800eb1e:	2201      	movs	r2, #1
 800eb20:	e000      	b.n	800eb24 <prvGetNextExpireTime+0x18>
 800eb22:	2200      	movs	r2, #0
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d105      	bne.n	800eb3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb30:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <prvGetNextExpireTime+0x44>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	e001      	b.n	800eb40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb40:	68fb      	ldr	r3, [r7, #12]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3714      	adds	r7, #20
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop
 800eb50:	2000caa4 	.word	0x2000caa4

0800eb54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eb5c:	f7ff fa3c 	bl	800dfd8 <xTaskGetTickCount>
 800eb60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb62:	4b0b      	ldr	r3, [pc, #44]	; (800eb90 <prvSampleTimeNow+0x3c>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d205      	bcs.n	800eb78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb6c:	f000 f93c 	bl	800ede8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	601a      	str	r2, [r3, #0]
 800eb76:	e002      	b.n	800eb7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eb7e:	4a04      	ldr	r2, [pc, #16]	; (800eb90 <prvSampleTimeNow+0x3c>)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eb84:	68fb      	ldr	r3, [r7, #12]
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	2000cab4 	.word	0x2000cab4

0800eb94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b086      	sub	sp, #24
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
 800eba0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eba2:	2300      	movs	r3, #0
 800eba4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	68ba      	ldr	r2, [r7, #8]
 800ebaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ebb2:	68ba      	ldr	r2, [r7, #8]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d812      	bhi.n	800ebe0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	1ad2      	subs	r2, r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d302      	bcc.n	800ebce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	617b      	str	r3, [r7, #20]
 800ebcc:	e01b      	b.n	800ec06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ebce:	4b10      	ldr	r3, [pc, #64]	; (800ec10 <prvInsertTimerInActiveList+0x7c>)
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	4610      	mov	r0, r2
 800ebda:	f7fe f998 	bl	800cf0e <vListInsert>
 800ebde:	e012      	b.n	800ec06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d206      	bcs.n	800ebf6 <prvInsertTimerInActiveList+0x62>
 800ebe8:	68ba      	ldr	r2, [r7, #8]
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d302      	bcc.n	800ebf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	617b      	str	r3, [r7, #20]
 800ebf4:	e007      	b.n	800ec06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebf6:	4b07      	ldr	r3, [pc, #28]	; (800ec14 <prvInsertTimerInActiveList+0x80>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	4619      	mov	r1, r3
 800ec00:	4610      	mov	r0, r2
 800ec02:	f7fe f984 	bl	800cf0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec06:	697b      	ldr	r3, [r7, #20]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3718      	adds	r7, #24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	2000caa8 	.word	0x2000caa8
 800ec14:	2000caa4 	.word	0x2000caa4

0800ec18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b08e      	sub	sp, #56	; 0x38
 800ec1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec1e:	e0d0      	b.n	800edc2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	da1a      	bge.n	800ec5c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec26:	1d3b      	adds	r3, r7, #4
 800ec28:	3304      	adds	r3, #4
 800ec2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10c      	bne.n	800ec4c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	b672      	cpsid	i
 800ec38:	f383 8811 	msr	BASEPRI, r3
 800ec3c:	f3bf 8f6f 	isb	sy
 800ec40:	f3bf 8f4f 	dsb	sy
 800ec44:	b662      	cpsie	i
 800ec46:	61fb      	str	r3, [r7, #28]
}
 800ec48:	bf00      	nop
 800ec4a:	e7fe      	b.n	800ec4a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec52:	6850      	ldr	r0, [r2, #4]
 800ec54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec56:	6892      	ldr	r2, [r2, #8]
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f2c0 80af 	blt.w	800edc2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ec68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6a:	695b      	ldr	r3, [r3, #20]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d004      	beq.n	800ec7a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec72:	3304      	adds	r3, #4
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fe f983 	bl	800cf80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec7a:	463b      	mov	r3, r7
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7ff ff69 	bl	800eb54 <prvSampleTimeNow>
 800ec82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b09      	cmp	r3, #9
 800ec88:	f200 809a 	bhi.w	800edc0 <prvProcessReceivedCommands+0x1a8>
 800ec8c:	a201      	add	r2, pc, #4	; (adr r2, 800ec94 <prvProcessReceivedCommands+0x7c>)
 800ec8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec92:	bf00      	nop
 800ec94:	0800ecbd 	.word	0x0800ecbd
 800ec98:	0800ecbd 	.word	0x0800ecbd
 800ec9c:	0800ecbd 	.word	0x0800ecbd
 800eca0:	0800ed35 	.word	0x0800ed35
 800eca4:	0800ed49 	.word	0x0800ed49
 800eca8:	0800ed97 	.word	0x0800ed97
 800ecac:	0800ecbd 	.word	0x0800ecbd
 800ecb0:	0800ecbd 	.word	0x0800ecbd
 800ecb4:	0800ed35 	.word	0x0800ed35
 800ecb8:	0800ed49 	.word	0x0800ed49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecc2:	f043 0301 	orr.w	r3, r3, #1
 800ecc6:	b2da      	uxtb	r2, r3
 800ecc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	18d1      	adds	r1, r2, r3
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecdc:	f7ff ff5a 	bl	800eb94 <prvInsertTimerInActiveList>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d06d      	beq.n	800edc2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecf4:	f003 0304 	and.w	r3, r3, #4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d062      	beq.n	800edc2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	441a      	add	r2, r3
 800ed04:	2300      	movs	r3, #0
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	2300      	movs	r3, #0
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed0e:	f7ff fdff 	bl	800e910 <xTimerGenericCommand>
 800ed12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d153      	bne.n	800edc2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800ed1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1e:	b672      	cpsid	i
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	b662      	cpsie	i
 800ed2e:	61bb      	str	r3, [r7, #24]
}
 800ed30:	bf00      	nop
 800ed32:	e7fe      	b.n	800ed32 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed3a:	f023 0301 	bic.w	r3, r3, #1
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ed46:	e03c      	b.n	800edc2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed4e:	f043 0301 	orr.w	r3, r3, #1
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10c      	bne.n	800ed82 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6c:	b672      	cpsid	i
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	b662      	cpsie	i
 800ed7c:	617b      	str	r3, [r7, #20]
}
 800ed7e:	bf00      	nop
 800ed80:	e7fe      	b.n	800ed80 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ed82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed84:	699a      	ldr	r2, [r3, #24]
 800ed86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed88:	18d1      	adds	r1, r2, r3
 800ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed90:	f7ff ff00 	bl	800eb94 <prvInsertTimerInActiveList>
					break;
 800ed94:	e015      	b.n	800edc2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ed96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed9c:	f003 0302 	and.w	r3, r3, #2
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d103      	bne.n	800edac <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800eda4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eda6:	f000 fbc7 	bl	800f538 <vPortFree>
 800edaa:	e00a      	b.n	800edc2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edb2:	f023 0301 	bic.w	r3, r3, #1
 800edb6:	b2da      	uxtb	r2, r3
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800edbe:	e000      	b.n	800edc2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800edc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edc2:	4b08      	ldr	r3, [pc, #32]	; (800ede4 <prvProcessReceivedCommands+0x1cc>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	1d39      	adds	r1, r7, #4
 800edc8:	2200      	movs	r2, #0
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe fbb8 	bl	800d540 <xQueueReceive>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f47f af24 	bne.w	800ec20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800edd8:	bf00      	nop
 800edda:	bf00      	nop
 800eddc:	3730      	adds	r7, #48	; 0x30
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	2000caac 	.word	0x2000caac

0800ede8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b088      	sub	sp, #32
 800edec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edee:	e04a      	b.n	800ee86 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edf0:	4b2e      	ldr	r3, [pc, #184]	; (800eeac <prvSwitchTimerLists+0xc4>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edfa:	4b2c      	ldr	r3, [pc, #176]	; (800eeac <prvSwitchTimerLists+0xc4>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	3304      	adds	r3, #4
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fe f8b9 	bl	800cf80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	6a1b      	ldr	r3, [r3, #32]
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee1c:	f003 0304 	and.w	r3, r3, #4
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d030      	beq.n	800ee86 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d90e      	bls.n	800ee54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee42:	4b1a      	ldr	r3, [pc, #104]	; (800eeac <prvSwitchTimerLists+0xc4>)
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	3304      	adds	r3, #4
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	f7fe f85e 	bl	800cf0e <vListInsert>
 800ee52:	e018      	b.n	800ee86 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee54:	2300      	movs	r3, #0
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	2300      	movs	r3, #0
 800ee5a:	693a      	ldr	r2, [r7, #16]
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f7ff fd56 	bl	800e910 <xTimerGenericCommand>
 800ee64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d10c      	bne.n	800ee86 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee70:	b672      	cpsid	i
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	b662      	cpsie	i
 800ee80:	603b      	str	r3, [r7, #0]
}
 800ee82:	bf00      	nop
 800ee84:	e7fe      	b.n	800ee84 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee86:	4b09      	ldr	r3, [pc, #36]	; (800eeac <prvSwitchTimerLists+0xc4>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1af      	bne.n	800edf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ee90:	4b06      	ldr	r3, [pc, #24]	; (800eeac <prvSwitchTimerLists+0xc4>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ee96:	4b06      	ldr	r3, [pc, #24]	; (800eeb0 <prvSwitchTimerLists+0xc8>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a04      	ldr	r2, [pc, #16]	; (800eeac <prvSwitchTimerLists+0xc4>)
 800ee9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ee9e:	4a04      	ldr	r2, [pc, #16]	; (800eeb0 <prvSwitchTimerLists+0xc8>)
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	6013      	str	r3, [r2, #0]
}
 800eea4:	bf00      	nop
 800eea6:	3718      	adds	r7, #24
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	2000caa4 	.word	0x2000caa4
 800eeb0:	2000caa8 	.word	0x2000caa8

0800eeb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eeba:	f000 f947 	bl	800f14c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eebe:	4b15      	ldr	r3, [pc, #84]	; (800ef14 <prvCheckForValidListAndQueue+0x60>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d120      	bne.n	800ef08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eec6:	4814      	ldr	r0, [pc, #80]	; (800ef18 <prvCheckForValidListAndQueue+0x64>)
 800eec8:	f7fd ffd0 	bl	800ce6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eecc:	4813      	ldr	r0, [pc, #76]	; (800ef1c <prvCheckForValidListAndQueue+0x68>)
 800eece:	f7fd ffcd 	bl	800ce6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eed2:	4b13      	ldr	r3, [pc, #76]	; (800ef20 <prvCheckForValidListAndQueue+0x6c>)
 800eed4:	4a10      	ldr	r2, [pc, #64]	; (800ef18 <prvCheckForValidListAndQueue+0x64>)
 800eed6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eed8:	4b12      	ldr	r3, [pc, #72]	; (800ef24 <prvCheckForValidListAndQueue+0x70>)
 800eeda:	4a10      	ldr	r2, [pc, #64]	; (800ef1c <prvCheckForValidListAndQueue+0x68>)
 800eedc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eede:	2300      	movs	r3, #0
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	4b11      	ldr	r3, [pc, #68]	; (800ef28 <prvCheckForValidListAndQueue+0x74>)
 800eee4:	4a11      	ldr	r2, [pc, #68]	; (800ef2c <prvCheckForValidListAndQueue+0x78>)
 800eee6:	2110      	movs	r1, #16
 800eee8:	200a      	movs	r0, #10
 800eeea:	f7fe f8dd 	bl	800d0a8 <xQueueGenericCreateStatic>
 800eeee:	4603      	mov	r3, r0
 800eef0:	4a08      	ldr	r2, [pc, #32]	; (800ef14 <prvCheckForValidListAndQueue+0x60>)
 800eef2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eef4:	4b07      	ldr	r3, [pc, #28]	; (800ef14 <prvCheckForValidListAndQueue+0x60>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d005      	beq.n	800ef08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eefc:	4b05      	ldr	r3, [pc, #20]	; (800ef14 <prvCheckForValidListAndQueue+0x60>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	490b      	ldr	r1, [pc, #44]	; (800ef30 <prvCheckForValidListAndQueue+0x7c>)
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fe fd12 	bl	800d92c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef08:	f000 f954 	bl	800f1b4 <vPortExitCritical>
}
 800ef0c:	bf00      	nop
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	2000caac 	.word	0x2000caac
 800ef18:	2000ca7c 	.word	0x2000ca7c
 800ef1c:	2000ca90 	.word	0x2000ca90
 800ef20:	2000caa4 	.word	0x2000caa4
 800ef24:	2000caa8 	.word	0x2000caa8
 800ef28:	2000cb58 	.word	0x2000cb58
 800ef2c:	2000cab8 	.word	0x2000cab8
 800ef30:	080232a4 	.word	0x080232a4

0800ef34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	3b04      	subs	r3, #4
 800ef44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3b04      	subs	r3, #4
 800ef52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	f023 0201 	bic.w	r2, r3, #1
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	3b04      	subs	r3, #4
 800ef62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef64:	4a0c      	ldr	r2, [pc, #48]	; (800ef98 <pxPortInitialiseStack+0x64>)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	3b14      	subs	r3, #20
 800ef6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	3b04      	subs	r3, #4
 800ef7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f06f 0202 	mvn.w	r2, #2
 800ef82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	3b20      	subs	r3, #32
 800ef88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr
 800ef98:	0800ef9d 	.word	0x0800ef9d

0800ef9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800efa6:	4b14      	ldr	r3, [pc, #80]	; (800eff8 <prvTaskExitError+0x5c>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efae:	d00c      	beq.n	800efca <prvTaskExitError+0x2e>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb4:	b672      	cpsid	i
 800efb6:	f383 8811 	msr	BASEPRI, r3
 800efba:	f3bf 8f6f 	isb	sy
 800efbe:	f3bf 8f4f 	dsb	sy
 800efc2:	b662      	cpsie	i
 800efc4:	60fb      	str	r3, [r7, #12]
}
 800efc6:	bf00      	nop
 800efc8:	e7fe      	b.n	800efc8 <prvTaskExitError+0x2c>
	__asm volatile
 800efca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efce:	b672      	cpsid	i
 800efd0:	f383 8811 	msr	BASEPRI, r3
 800efd4:	f3bf 8f6f 	isb	sy
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	b662      	cpsie	i
 800efde:	60bb      	str	r3, [r7, #8]
}
 800efe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800efe2:	bf00      	nop
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d0fc      	beq.n	800efe4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800efea:	bf00      	nop
 800efec:	bf00      	nop
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	200000a0 	.word	0x200000a0
 800effc:	00000000 	.word	0x00000000

0800f000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f000:	4b07      	ldr	r3, [pc, #28]	; (800f020 <pxCurrentTCBConst2>)
 800f002:	6819      	ldr	r1, [r3, #0]
 800f004:	6808      	ldr	r0, [r1, #0]
 800f006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00a:	f380 8809 	msr	PSP, r0
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f04f 0000 	mov.w	r0, #0
 800f016:	f380 8811 	msr	BASEPRI, r0
 800f01a:	4770      	bx	lr
 800f01c:	f3af 8000 	nop.w

0800f020 <pxCurrentTCBConst2>:
 800f020:	2000c57c 	.word	0x2000c57c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f024:	bf00      	nop
 800f026:	bf00      	nop

0800f028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f028:	4808      	ldr	r0, [pc, #32]	; (800f04c <prvPortStartFirstTask+0x24>)
 800f02a:	6800      	ldr	r0, [r0, #0]
 800f02c:	6800      	ldr	r0, [r0, #0]
 800f02e:	f380 8808 	msr	MSP, r0
 800f032:	f04f 0000 	mov.w	r0, #0
 800f036:	f380 8814 	msr	CONTROL, r0
 800f03a:	b662      	cpsie	i
 800f03c:	b661      	cpsie	f
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	f3bf 8f6f 	isb	sy
 800f046:	df00      	svc	0
 800f048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f04a:	bf00      	nop
 800f04c:	e000ed08 	.word	0xe000ed08

0800f050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f056:	4b37      	ldr	r3, [pc, #220]	; (800f134 <xPortStartScheduler+0xe4>)
 800f058:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	22ff      	movs	r2, #255	; 0xff
 800f066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f070:	78fb      	ldrb	r3, [r7, #3]
 800f072:	b2db      	uxtb	r3, r3
 800f074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f078:	b2da      	uxtb	r2, r3
 800f07a:	4b2f      	ldr	r3, [pc, #188]	; (800f138 <xPortStartScheduler+0xe8>)
 800f07c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f07e:	4b2f      	ldr	r3, [pc, #188]	; (800f13c <xPortStartScheduler+0xec>)
 800f080:	2207      	movs	r2, #7
 800f082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f084:	e009      	b.n	800f09a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f086:	4b2d      	ldr	r3, [pc, #180]	; (800f13c <xPortStartScheduler+0xec>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3b01      	subs	r3, #1
 800f08c:	4a2b      	ldr	r2, [pc, #172]	; (800f13c <xPortStartScheduler+0xec>)
 800f08e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f090:	78fb      	ldrb	r3, [r7, #3]
 800f092:	b2db      	uxtb	r3, r3
 800f094:	005b      	lsls	r3, r3, #1
 800f096:	b2db      	uxtb	r3, r3
 800f098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f09a:	78fb      	ldrb	r3, [r7, #3]
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0a2:	2b80      	cmp	r3, #128	; 0x80
 800f0a4:	d0ef      	beq.n	800f086 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f0a6:	4b25      	ldr	r3, [pc, #148]	; (800f13c <xPortStartScheduler+0xec>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f1c3 0307 	rsb	r3, r3, #7
 800f0ae:	2b04      	cmp	r3, #4
 800f0b0:	d00c      	beq.n	800f0cc <xPortStartScheduler+0x7c>
	__asm volatile
 800f0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b6:	b672      	cpsid	i
 800f0b8:	f383 8811 	msr	BASEPRI, r3
 800f0bc:	f3bf 8f6f 	isb	sy
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	b662      	cpsie	i
 800f0c6:	60bb      	str	r3, [r7, #8]
}
 800f0c8:	bf00      	nop
 800f0ca:	e7fe      	b.n	800f0ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f0cc:	4b1b      	ldr	r3, [pc, #108]	; (800f13c <xPortStartScheduler+0xec>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	021b      	lsls	r3, r3, #8
 800f0d2:	4a1a      	ldr	r2, [pc, #104]	; (800f13c <xPortStartScheduler+0xec>)
 800f0d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f0d6:	4b19      	ldr	r3, [pc, #100]	; (800f13c <xPortStartScheduler+0xec>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0de:	4a17      	ldr	r2, [pc, #92]	; (800f13c <xPortStartScheduler+0xec>)
 800f0e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	b2da      	uxtb	r2, r3
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f0ea:	4b15      	ldr	r3, [pc, #84]	; (800f140 <xPortStartScheduler+0xf0>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4a14      	ldr	r2, [pc, #80]	; (800f140 <xPortStartScheduler+0xf0>)
 800f0f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f0f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f0f6:	4b12      	ldr	r3, [pc, #72]	; (800f140 <xPortStartScheduler+0xf0>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a11      	ldr	r2, [pc, #68]	; (800f140 <xPortStartScheduler+0xf0>)
 800f0fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f100:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f102:	f000 f8dd 	bl	800f2c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f106:	4b0f      	ldr	r3, [pc, #60]	; (800f144 <xPortStartScheduler+0xf4>)
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f10c:	f000 f8fc 	bl	800f308 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f110:	4b0d      	ldr	r3, [pc, #52]	; (800f148 <xPortStartScheduler+0xf8>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a0c      	ldr	r2, [pc, #48]	; (800f148 <xPortStartScheduler+0xf8>)
 800f116:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f11a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f11c:	f7ff ff84 	bl	800f028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f120:	f7ff f826 	bl	800e170 <vTaskSwitchContext>
	prvTaskExitError();
 800f124:	f7ff ff3a 	bl	800ef9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f128:	2300      	movs	r3, #0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	e000e400 	.word	0xe000e400
 800f138:	2000cba8 	.word	0x2000cba8
 800f13c:	2000cbac 	.word	0x2000cbac
 800f140:	e000ed20 	.word	0xe000ed20
 800f144:	200000a0 	.word	0x200000a0
 800f148:	e000ef34 	.word	0xe000ef34

0800f14c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
	__asm volatile
 800f152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f156:	b672      	cpsid	i
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	b662      	cpsie	i
 800f166:	607b      	str	r3, [r7, #4]
}
 800f168:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f16a:	4b10      	ldr	r3, [pc, #64]	; (800f1ac <vPortEnterCritical+0x60>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3301      	adds	r3, #1
 800f170:	4a0e      	ldr	r2, [pc, #56]	; (800f1ac <vPortEnterCritical+0x60>)
 800f172:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f174:	4b0d      	ldr	r3, [pc, #52]	; (800f1ac <vPortEnterCritical+0x60>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d111      	bne.n	800f1a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f17c:	4b0c      	ldr	r3, [pc, #48]	; (800f1b0 <vPortEnterCritical+0x64>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	b2db      	uxtb	r3, r3
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00c      	beq.n	800f1a0 <vPortEnterCritical+0x54>
	__asm volatile
 800f186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18a:	b672      	cpsid	i
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
 800f198:	b662      	cpsie	i
 800f19a:	603b      	str	r3, [r7, #0]
}
 800f19c:	bf00      	nop
 800f19e:	e7fe      	b.n	800f19e <vPortEnterCritical+0x52>
	}
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr
 800f1ac:	200000a0 	.word	0x200000a0
 800f1b0:	e000ed04 	.word	0xe000ed04

0800f1b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f1ba:	4b13      	ldr	r3, [pc, #76]	; (800f208 <vPortExitCritical+0x54>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10c      	bne.n	800f1dc <vPortExitCritical+0x28>
	__asm volatile
 800f1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c6:	b672      	cpsid	i
 800f1c8:	f383 8811 	msr	BASEPRI, r3
 800f1cc:	f3bf 8f6f 	isb	sy
 800f1d0:	f3bf 8f4f 	dsb	sy
 800f1d4:	b662      	cpsie	i
 800f1d6:	607b      	str	r3, [r7, #4]
}
 800f1d8:	bf00      	nop
 800f1da:	e7fe      	b.n	800f1da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f1dc:	4b0a      	ldr	r3, [pc, #40]	; (800f208 <vPortExitCritical+0x54>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	3b01      	subs	r3, #1
 800f1e2:	4a09      	ldr	r2, [pc, #36]	; (800f208 <vPortExitCritical+0x54>)
 800f1e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f1e6:	4b08      	ldr	r3, [pc, #32]	; (800f208 <vPortExitCritical+0x54>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d105      	bne.n	800f1fa <vPortExitCritical+0x46>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	f383 8811 	msr	BASEPRI, r3
}
 800f1f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f1fa:	bf00      	nop
 800f1fc:	370c      	adds	r7, #12
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	200000a0 	.word	0x200000a0
 800f20c:	00000000 	.word	0x00000000

0800f210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f210:	f3ef 8009 	mrs	r0, PSP
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	4b15      	ldr	r3, [pc, #84]	; (800f270 <pxCurrentTCBConst>)
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	f01e 0f10 	tst.w	lr, #16
 800f220:	bf08      	it	eq
 800f222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22a:	6010      	str	r0, [r2, #0]
 800f22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f230:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f234:	b672      	cpsid	i
 800f236:	f380 8811 	msr	BASEPRI, r0
 800f23a:	f3bf 8f4f 	dsb	sy
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	b662      	cpsie	i
 800f244:	f7fe ff94 	bl	800e170 <vTaskSwitchContext>
 800f248:	f04f 0000 	mov.w	r0, #0
 800f24c:	f380 8811 	msr	BASEPRI, r0
 800f250:	bc09      	pop	{r0, r3}
 800f252:	6819      	ldr	r1, [r3, #0]
 800f254:	6808      	ldr	r0, [r1, #0]
 800f256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25a:	f01e 0f10 	tst.w	lr, #16
 800f25e:	bf08      	it	eq
 800f260:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f264:	f380 8809 	msr	PSP, r0
 800f268:	f3bf 8f6f 	isb	sy
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop

0800f270 <pxCurrentTCBConst>:
 800f270:	2000c57c 	.word	0x2000c57c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f274:	bf00      	nop
 800f276:	bf00      	nop

0800f278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f282:	b672      	cpsid	i
 800f284:	f383 8811 	msr	BASEPRI, r3
 800f288:	f3bf 8f6f 	isb	sy
 800f28c:	f3bf 8f4f 	dsb	sy
 800f290:	b662      	cpsie	i
 800f292:	607b      	str	r3, [r7, #4]
}
 800f294:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f296:	f7fe feaf 	bl	800dff8 <xTaskIncrementTick>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d003      	beq.n	800f2a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f2a0:	4b06      	ldr	r3, [pc, #24]	; (800f2bc <SysTick_Handler+0x44>)
 800f2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2a6:	601a      	str	r2, [r3, #0]
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	f383 8811 	msr	BASEPRI, r3
}
 800f2b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f2b4:	bf00      	nop
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	e000ed04 	.word	0xe000ed04

0800f2c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f2c4:	4b0b      	ldr	r3, [pc, #44]	; (800f2f4 <vPortSetupTimerInterrupt+0x34>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f2ca:	4b0b      	ldr	r3, [pc, #44]	; (800f2f8 <vPortSetupTimerInterrupt+0x38>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f2d0:	4b0a      	ldr	r3, [pc, #40]	; (800f2fc <vPortSetupTimerInterrupt+0x3c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a0a      	ldr	r2, [pc, #40]	; (800f300 <vPortSetupTimerInterrupt+0x40>)
 800f2d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f2da:	099b      	lsrs	r3, r3, #6
 800f2dc:	4a09      	ldr	r2, [pc, #36]	; (800f304 <vPortSetupTimerInterrupt+0x44>)
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f2e2:	4b04      	ldr	r3, [pc, #16]	; (800f2f4 <vPortSetupTimerInterrupt+0x34>)
 800f2e4:	2207      	movs	r2, #7
 800f2e6:	601a      	str	r2, [r3, #0]
}
 800f2e8:	bf00      	nop
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop
 800f2f4:	e000e010 	.word	0xe000e010
 800f2f8:	e000e018 	.word	0xe000e018
 800f2fc:	20000008 	.word	0x20000008
 800f300:	10624dd3 	.word	0x10624dd3
 800f304:	e000e014 	.word	0xe000e014

0800f308 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f308:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f318 <vPortEnableVFP+0x10>
 800f30c:	6801      	ldr	r1, [r0, #0]
 800f30e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f312:	6001      	str	r1, [r0, #0]
 800f314:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f316:	bf00      	nop
 800f318:	e000ed88 	.word	0xe000ed88

0800f31c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f322:	f3ef 8305 	mrs	r3, IPSR
 800f326:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2b0f      	cmp	r3, #15
 800f32c:	d916      	bls.n	800f35c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f32e:	4a19      	ldr	r2, [pc, #100]	; (800f394 <vPortValidateInterruptPriority+0x78>)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4413      	add	r3, r2
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f338:	4b17      	ldr	r3, [pc, #92]	; (800f398 <vPortValidateInterruptPriority+0x7c>)
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	7afa      	ldrb	r2, [r7, #11]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d20c      	bcs.n	800f35c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f346:	b672      	cpsid	i
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	b662      	cpsie	i
 800f356:	607b      	str	r3, [r7, #4]
}
 800f358:	bf00      	nop
 800f35a:	e7fe      	b.n	800f35a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f35c:	4b0f      	ldr	r3, [pc, #60]	; (800f39c <vPortValidateInterruptPriority+0x80>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f364:	4b0e      	ldr	r3, [pc, #56]	; (800f3a0 <vPortValidateInterruptPriority+0x84>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d90c      	bls.n	800f386 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f370:	b672      	cpsid	i
 800f372:	f383 8811 	msr	BASEPRI, r3
 800f376:	f3bf 8f6f 	isb	sy
 800f37a:	f3bf 8f4f 	dsb	sy
 800f37e:	b662      	cpsie	i
 800f380:	603b      	str	r3, [r7, #0]
}
 800f382:	bf00      	nop
 800f384:	e7fe      	b.n	800f384 <vPortValidateInterruptPriority+0x68>
	}
 800f386:	bf00      	nop
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	e000e3f0 	.word	0xe000e3f0
 800f398:	2000cba8 	.word	0x2000cba8
 800f39c:	e000ed0c 	.word	0xe000ed0c
 800f3a0:	2000cbac 	.word	0x2000cbac

0800f3a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b08a      	sub	sp, #40	; 0x28
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f3b0:	f7fe fd64 	bl	800de7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f3b4:	4b5b      	ldr	r3, [pc, #364]	; (800f524 <pvPortMalloc+0x180>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d101      	bne.n	800f3c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3bc:	f000 f91a 	bl	800f5f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3c0:	4b59      	ldr	r3, [pc, #356]	; (800f528 <pvPortMalloc+0x184>)
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	4013      	ands	r3, r2
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	f040 8092 	bne.w	800f4f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d01f      	beq.n	800f414 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f3d4:	2208      	movs	r2, #8
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4413      	add	r3, r2
 800f3da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f003 0307 	and.w	r3, r3, #7
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d016      	beq.n	800f414 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f023 0307 	bic.w	r3, r3, #7
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f003 0307 	and.w	r3, r3, #7
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00c      	beq.n	800f414 <pvPortMalloc+0x70>
	__asm volatile
 800f3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fe:	b672      	cpsid	i
 800f400:	f383 8811 	msr	BASEPRI, r3
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	f3bf 8f4f 	dsb	sy
 800f40c:	b662      	cpsie	i
 800f40e:	617b      	str	r3, [r7, #20]
}
 800f410:	bf00      	nop
 800f412:	e7fe      	b.n	800f412 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d06b      	beq.n	800f4f2 <pvPortMalloc+0x14e>
 800f41a:	4b44      	ldr	r3, [pc, #272]	; (800f52c <pvPortMalloc+0x188>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	429a      	cmp	r2, r3
 800f422:	d866      	bhi.n	800f4f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f424:	4b42      	ldr	r3, [pc, #264]	; (800f530 <pvPortMalloc+0x18c>)
 800f426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f428:	4b41      	ldr	r3, [pc, #260]	; (800f530 <pvPortMalloc+0x18c>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f42e:	e004      	b.n	800f43a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	429a      	cmp	r2, r3
 800f442:	d903      	bls.n	800f44c <pvPortMalloc+0xa8>
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1f1      	bne.n	800f430 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f44c:	4b35      	ldr	r3, [pc, #212]	; (800f524 <pvPortMalloc+0x180>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f452:	429a      	cmp	r2, r3
 800f454:	d04d      	beq.n	800f4f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f456:	6a3b      	ldr	r3, [r7, #32]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2208      	movs	r2, #8
 800f45c:	4413      	add	r3, r2
 800f45e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	6a3b      	ldr	r3, [r7, #32]
 800f466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	1ad2      	subs	r2, r2, r3
 800f470:	2308      	movs	r3, #8
 800f472:	005b      	lsls	r3, r3, #1
 800f474:	429a      	cmp	r2, r3
 800f476:	d921      	bls.n	800f4bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4413      	add	r3, r2
 800f47e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	f003 0307 	and.w	r3, r3, #7
 800f486:	2b00      	cmp	r3, #0
 800f488:	d00c      	beq.n	800f4a4 <pvPortMalloc+0x100>
	__asm volatile
 800f48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48e:	b672      	cpsid	i
 800f490:	f383 8811 	msr	BASEPRI, r3
 800f494:	f3bf 8f6f 	isb	sy
 800f498:	f3bf 8f4f 	dsb	sy
 800f49c:	b662      	cpsie	i
 800f49e:	613b      	str	r3, [r7, #16]
}
 800f4a0:	bf00      	nop
 800f4a2:	e7fe      	b.n	800f4a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	1ad2      	subs	r2, r2, r3
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f4b6:	69b8      	ldr	r0, [r7, #24]
 800f4b8:	f000 f8fe 	bl	800f6b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4bc:	4b1b      	ldr	r3, [pc, #108]	; (800f52c <pvPortMalloc+0x188>)
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	1ad3      	subs	r3, r2, r3
 800f4c6:	4a19      	ldr	r2, [pc, #100]	; (800f52c <pvPortMalloc+0x188>)
 800f4c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4ca:	4b18      	ldr	r3, [pc, #96]	; (800f52c <pvPortMalloc+0x188>)
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	4b19      	ldr	r3, [pc, #100]	; (800f534 <pvPortMalloc+0x190>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d203      	bcs.n	800f4de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4d6:	4b15      	ldr	r3, [pc, #84]	; (800f52c <pvPortMalloc+0x188>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a16      	ldr	r2, [pc, #88]	; (800f534 <pvPortMalloc+0x190>)
 800f4dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e0:	685a      	ldr	r2, [r3, #4]
 800f4e2:	4b11      	ldr	r3, [pc, #68]	; (800f528 <pvPortMalloc+0x184>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	431a      	orrs	r2, r3
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f4f2:	f7fe fcd1 	bl	800de98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	f003 0307 	and.w	r3, r3, #7
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00c      	beq.n	800f51a <pvPortMalloc+0x176>
	__asm volatile
 800f500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f504:	b672      	cpsid	i
 800f506:	f383 8811 	msr	BASEPRI, r3
 800f50a:	f3bf 8f6f 	isb	sy
 800f50e:	f3bf 8f4f 	dsb	sy
 800f512:	b662      	cpsie	i
 800f514:	60fb      	str	r3, [r7, #12]
}
 800f516:	bf00      	nop
 800f518:	e7fe      	b.n	800f518 <pvPortMalloc+0x174>
	return pvReturn;
 800f51a:	69fb      	ldr	r3, [r7, #28]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3728      	adds	r7, #40	; 0x28
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	200107b8 	.word	0x200107b8
 800f528:	200107c4 	.word	0x200107c4
 800f52c:	200107bc 	.word	0x200107bc
 800f530:	200107b0 	.word	0x200107b0
 800f534:	200107c0 	.word	0x200107c0

0800f538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d04c      	beq.n	800f5e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f54a:	2308      	movs	r3, #8
 800f54c:	425b      	negs	r3, r3
 800f54e:	697a      	ldr	r2, [r7, #20]
 800f550:	4413      	add	r3, r2
 800f552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	685a      	ldr	r2, [r3, #4]
 800f55c:	4b23      	ldr	r3, [pc, #140]	; (800f5ec <vPortFree+0xb4>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4013      	ands	r3, r2
 800f562:	2b00      	cmp	r3, #0
 800f564:	d10c      	bne.n	800f580 <vPortFree+0x48>
	__asm volatile
 800f566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56a:	b672      	cpsid	i
 800f56c:	f383 8811 	msr	BASEPRI, r3
 800f570:	f3bf 8f6f 	isb	sy
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	b662      	cpsie	i
 800f57a:	60fb      	str	r3, [r7, #12]
}
 800f57c:	bf00      	nop
 800f57e:	e7fe      	b.n	800f57e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00c      	beq.n	800f5a2 <vPortFree+0x6a>
	__asm volatile
 800f588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58c:	b672      	cpsid	i
 800f58e:	f383 8811 	msr	BASEPRI, r3
 800f592:	f3bf 8f6f 	isb	sy
 800f596:	f3bf 8f4f 	dsb	sy
 800f59a:	b662      	cpsie	i
 800f59c:	60bb      	str	r3, [r7, #8]
}
 800f59e:	bf00      	nop
 800f5a0:	e7fe      	b.n	800f5a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	4b11      	ldr	r3, [pc, #68]	; (800f5ec <vPortFree+0xb4>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4013      	ands	r3, r2
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d019      	beq.n	800f5e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d115      	bne.n	800f5e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	685a      	ldr	r2, [r3, #4]
 800f5bc:	4b0b      	ldr	r3, [pc, #44]	; (800f5ec <vPortFree+0xb4>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	43db      	mvns	r3, r3
 800f5c2:	401a      	ands	r2, r3
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f5c8:	f7fe fc58 	bl	800de7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	685a      	ldr	r2, [r3, #4]
 800f5d0:	4b07      	ldr	r3, [pc, #28]	; (800f5f0 <vPortFree+0xb8>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	4a06      	ldr	r2, [pc, #24]	; (800f5f0 <vPortFree+0xb8>)
 800f5d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5da:	6938      	ldr	r0, [r7, #16]
 800f5dc:	f000 f86c 	bl	800f6b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f5e0:	f7fe fc5a 	bl	800de98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f5e4:	bf00      	nop
 800f5e6:	3718      	adds	r7, #24
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	200107c4 	.word	0x200107c4
 800f5f0:	200107bc 	.word	0x200107bc

0800f5f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b085      	sub	sp, #20
 800f5f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f5fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f5fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f600:	4b27      	ldr	r3, [pc, #156]	; (800f6a0 <prvHeapInit+0xac>)
 800f602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f003 0307 	and.w	r3, r3, #7
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00c      	beq.n	800f628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3307      	adds	r3, #7
 800f612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f023 0307 	bic.w	r3, r3, #7
 800f61a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	4a1f      	ldr	r2, [pc, #124]	; (800f6a0 <prvHeapInit+0xac>)
 800f624:	4413      	add	r3, r2
 800f626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f62c:	4a1d      	ldr	r2, [pc, #116]	; (800f6a4 <prvHeapInit+0xb0>)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f632:	4b1c      	ldr	r3, [pc, #112]	; (800f6a4 <prvHeapInit+0xb0>)
 800f634:	2200      	movs	r2, #0
 800f636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	4413      	add	r3, r2
 800f63e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f640:	2208      	movs	r2, #8
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	1a9b      	subs	r3, r3, r2
 800f646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f023 0307 	bic.w	r3, r3, #7
 800f64e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	4a15      	ldr	r2, [pc, #84]	; (800f6a8 <prvHeapInit+0xb4>)
 800f654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f656:	4b14      	ldr	r3, [pc, #80]	; (800f6a8 <prvHeapInit+0xb4>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2200      	movs	r2, #0
 800f65c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f65e:	4b12      	ldr	r3, [pc, #72]	; (800f6a8 <prvHeapInit+0xb4>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2200      	movs	r2, #0
 800f664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	1ad2      	subs	r2, r2, r3
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f674:	4b0c      	ldr	r3, [pc, #48]	; (800f6a8 <prvHeapInit+0xb4>)
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	4a0a      	ldr	r2, [pc, #40]	; (800f6ac <prvHeapInit+0xb8>)
 800f682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	4a09      	ldr	r2, [pc, #36]	; (800f6b0 <prvHeapInit+0xbc>)
 800f68a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f68c:	4b09      	ldr	r3, [pc, #36]	; (800f6b4 <prvHeapInit+0xc0>)
 800f68e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f692:	601a      	str	r2, [r3, #0]
}
 800f694:	bf00      	nop
 800f696:	3714      	adds	r7, #20
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr
 800f6a0:	2000cbb0 	.word	0x2000cbb0
 800f6a4:	200107b0 	.word	0x200107b0
 800f6a8:	200107b8 	.word	0x200107b8
 800f6ac:	200107c0 	.word	0x200107c0
 800f6b0:	200107bc 	.word	0x200107bc
 800f6b4:	200107c4 	.word	0x200107c4

0800f6b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f6c0:	4b28      	ldr	r3, [pc, #160]	; (800f764 <prvInsertBlockIntoFreeList+0xac>)
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	e002      	b.n	800f6cc <prvInsertBlockIntoFreeList+0x14>
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d8f7      	bhi.n	800f6c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	68ba      	ldr	r2, [r7, #8]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d108      	bne.n	800f6fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	685a      	ldr	r2, [r3, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	441a      	add	r2, r3
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	441a      	add	r2, r3
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d118      	bne.n	800f740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	4b15      	ldr	r3, [pc, #84]	; (800f768 <prvInsertBlockIntoFreeList+0xb0>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	429a      	cmp	r2, r3
 800f718:	d00d      	beq.n	800f736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	685a      	ldr	r2, [r3, #4]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	441a      	add	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	601a      	str	r2, [r3, #0]
 800f734:	e008      	b.n	800f748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f736:	4b0c      	ldr	r3, [pc, #48]	; (800f768 <prvInsertBlockIntoFreeList+0xb0>)
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	601a      	str	r2, [r3, #0]
 800f73e:	e003      	b.n	800f748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d002      	beq.n	800f756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f756:	bf00      	nop
 800f758:	3714      	adds	r7, #20
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	200107b0 	.word	0x200107b0
 800f768:	200107b8 	.word	0x200107b8

0800f76c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f770:	2200      	movs	r2, #0
 800f772:	4912      	ldr	r1, [pc, #72]	; (800f7bc <MX_USB_DEVICE_Init+0x50>)
 800f774:	4812      	ldr	r0, [pc, #72]	; (800f7c0 <MX_USB_DEVICE_Init+0x54>)
 800f776:	f7fb fee3 	bl	800b540 <USBD_Init>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f780:	f7f2 ff9f 	bl	80026c2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f784:	490f      	ldr	r1, [pc, #60]	; (800f7c4 <MX_USB_DEVICE_Init+0x58>)
 800f786:	480e      	ldr	r0, [pc, #56]	; (800f7c0 <MX_USB_DEVICE_Init+0x54>)
 800f788:	f7fb ff0a 	bl	800b5a0 <USBD_RegisterClass>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d001      	beq.n	800f796 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f792:	f7f2 ff96 	bl	80026c2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f796:	490c      	ldr	r1, [pc, #48]	; (800f7c8 <MX_USB_DEVICE_Init+0x5c>)
 800f798:	4809      	ldr	r0, [pc, #36]	; (800f7c0 <MX_USB_DEVICE_Init+0x54>)
 800f79a:	f7fb fe41 	bl	800b420 <USBD_CDC_RegisterInterface>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f7a4:	f7f2 ff8d 	bl	80026c2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f7a8:	4805      	ldr	r0, [pc, #20]	; (800f7c0 <MX_USB_DEVICE_Init+0x54>)
 800f7aa:	f7fb ff2f 	bl	800b60c <USBD_Start>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f7b4:	f7f2 ff85 	bl	80026c2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f7b8:	bf00      	nop
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	200000b8 	.word	0x200000b8
 800f7c0:	200107c8 	.word	0x200107c8
 800f7c4:	20000020 	.word	0x20000020
 800f7c8:	200000a4 	.word	0x200000a4

0800f7cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	4905      	ldr	r1, [pc, #20]	; (800f7e8 <CDC_Init_FS+0x1c>)
 800f7d4:	4805      	ldr	r0, [pc, #20]	; (800f7ec <CDC_Init_FS+0x20>)
 800f7d6:	f7fb fe3d 	bl	800b454 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f7da:	4905      	ldr	r1, [pc, #20]	; (800f7f0 <CDC_Init_FS+0x24>)
 800f7dc:	4803      	ldr	r0, [pc, #12]	; (800f7ec <CDC_Init_FS+0x20>)
 800f7de:	f7fb fe5b 	bl	800b498 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f7e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	200112a4 	.word	0x200112a4
 800f7ec:	200107c8 	.word	0x200107c8
 800f7f0:	20010aa4 	.word	0x20010aa4

0800f7f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f7f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	4603      	mov	r3, r0
 800f80c:	6039      	str	r1, [r7, #0]
 800f80e:	71fb      	strb	r3, [r7, #7]
 800f810:	4613      	mov	r3, r2
 800f812:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f814:	79fb      	ldrb	r3, [r7, #7]
 800f816:	2b23      	cmp	r3, #35	; 0x23
 800f818:	d84a      	bhi.n	800f8b0 <CDC_Control_FS+0xac>
 800f81a:	a201      	add	r2, pc, #4	; (adr r2, 800f820 <CDC_Control_FS+0x1c>)
 800f81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f820:	0800f8b1 	.word	0x0800f8b1
 800f824:	0800f8b1 	.word	0x0800f8b1
 800f828:	0800f8b1 	.word	0x0800f8b1
 800f82c:	0800f8b1 	.word	0x0800f8b1
 800f830:	0800f8b1 	.word	0x0800f8b1
 800f834:	0800f8b1 	.word	0x0800f8b1
 800f838:	0800f8b1 	.word	0x0800f8b1
 800f83c:	0800f8b1 	.word	0x0800f8b1
 800f840:	0800f8b1 	.word	0x0800f8b1
 800f844:	0800f8b1 	.word	0x0800f8b1
 800f848:	0800f8b1 	.word	0x0800f8b1
 800f84c:	0800f8b1 	.word	0x0800f8b1
 800f850:	0800f8b1 	.word	0x0800f8b1
 800f854:	0800f8b1 	.word	0x0800f8b1
 800f858:	0800f8b1 	.word	0x0800f8b1
 800f85c:	0800f8b1 	.word	0x0800f8b1
 800f860:	0800f8b1 	.word	0x0800f8b1
 800f864:	0800f8b1 	.word	0x0800f8b1
 800f868:	0800f8b1 	.word	0x0800f8b1
 800f86c:	0800f8b1 	.word	0x0800f8b1
 800f870:	0800f8b1 	.word	0x0800f8b1
 800f874:	0800f8b1 	.word	0x0800f8b1
 800f878:	0800f8b1 	.word	0x0800f8b1
 800f87c:	0800f8b1 	.word	0x0800f8b1
 800f880:	0800f8b1 	.word	0x0800f8b1
 800f884:	0800f8b1 	.word	0x0800f8b1
 800f888:	0800f8b1 	.word	0x0800f8b1
 800f88c:	0800f8b1 	.word	0x0800f8b1
 800f890:	0800f8b1 	.word	0x0800f8b1
 800f894:	0800f8b1 	.word	0x0800f8b1
 800f898:	0800f8b1 	.word	0x0800f8b1
 800f89c:	0800f8b1 	.word	0x0800f8b1
 800f8a0:	0800f8b1 	.word	0x0800f8b1
 800f8a4:	0800f8b1 	.word	0x0800f8b1
 800f8a8:	0800f8b1 	.word	0x0800f8b1
 800f8ac:	0800f8b1 	.word	0x0800f8b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f8b0:	bf00      	nop
  }

  return (USBD_OK);
 800f8b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	4805      	ldr	r0, [pc, #20]	; (800f8e4 <CDC_Receive_FS+0x24>)
 800f8ce:	f7fb fde3 	bl	800b498 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f8d2:	4804      	ldr	r0, [pc, #16]	; (800f8e4 <CDC_Receive_FS+0x24>)
 800f8d4:	f7fb fdfe 	bl	800b4d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f8d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	200107c8 	.word	0x200107c8

0800f8e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	371c      	adds	r7, #28
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
	...

0800f90c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	4603      	mov	r3, r0
 800f914:	6039      	str	r1, [r7, #0]
 800f916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	2212      	movs	r2, #18
 800f91c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f91e:	4b03      	ldr	r3, [pc, #12]	; (800f92c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f920:	4618      	mov	r0, r3
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr
 800f92c:	200000d8 	.word	0x200000d8

0800f930 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	4603      	mov	r3, r0
 800f938:	6039      	str	r1, [r7, #0]
 800f93a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	2204      	movs	r2, #4
 800f940:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f942:	4b03      	ldr	r3, [pc, #12]	; (800f950 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f944:	4618      	mov	r0, r3
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr
 800f950:	200000f8 	.word	0x200000f8

0800f954 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	4603      	mov	r3, r0
 800f95c:	6039      	str	r1, [r7, #0]
 800f95e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f960:	79fb      	ldrb	r3, [r7, #7]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d105      	bne.n	800f972 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f966:	683a      	ldr	r2, [r7, #0]
 800f968:	4907      	ldr	r1, [pc, #28]	; (800f988 <USBD_FS_ProductStrDescriptor+0x34>)
 800f96a:	4808      	ldr	r0, [pc, #32]	; (800f98c <USBD_FS_ProductStrDescriptor+0x38>)
 800f96c:	f7fd f824 	bl	800c9b8 <USBD_GetString>
 800f970:	e004      	b.n	800f97c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f972:	683a      	ldr	r2, [r7, #0]
 800f974:	4904      	ldr	r1, [pc, #16]	; (800f988 <USBD_FS_ProductStrDescriptor+0x34>)
 800f976:	4805      	ldr	r0, [pc, #20]	; (800f98c <USBD_FS_ProductStrDescriptor+0x38>)
 800f978:	f7fd f81e 	bl	800c9b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f97c:	4b02      	ldr	r3, [pc, #8]	; (800f988 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	20011aa4 	.word	0x20011aa4
 800f98c:	080232ac 	.word	0x080232ac

0800f990 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	4603      	mov	r3, r0
 800f998:	6039      	str	r1, [r7, #0]
 800f99a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f99c:	683a      	ldr	r2, [r7, #0]
 800f99e:	4904      	ldr	r1, [pc, #16]	; (800f9b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f9a0:	4804      	ldr	r0, [pc, #16]	; (800f9b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f9a2:	f7fd f809 	bl	800c9b8 <USBD_GetString>
  return USBD_StrDesc;
 800f9a6:	4b02      	ldr	r3, [pc, #8]	; (800f9b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	20011aa4 	.word	0x20011aa4
 800f9b4:	080232c4 	.word	0x080232c4

0800f9b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	4603      	mov	r3, r0
 800f9c0:	6039      	str	r1, [r7, #0]
 800f9c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	221a      	movs	r2, #26
 800f9c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f9ca:	f000 f855 	bl	800fa78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f9ce:	4b02      	ldr	r3, [pc, #8]	; (800f9d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	200000fc 	.word	0x200000fc

0800f9dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	6039      	str	r1, [r7, #0]
 800f9e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f9e8:	79fb      	ldrb	r3, [r7, #7]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d105      	bne.n	800f9fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f9ee:	683a      	ldr	r2, [r7, #0]
 800f9f0:	4907      	ldr	r1, [pc, #28]	; (800fa10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f9f2:	4808      	ldr	r0, [pc, #32]	; (800fa14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f9f4:	f7fc ffe0 	bl	800c9b8 <USBD_GetString>
 800f9f8:	e004      	b.n	800fa04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f9fa:	683a      	ldr	r2, [r7, #0]
 800f9fc:	4904      	ldr	r1, [pc, #16]	; (800fa10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f9fe:	4805      	ldr	r0, [pc, #20]	; (800fa14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa00:	f7fc ffda 	bl	800c9b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa04:	4b02      	ldr	r3, [pc, #8]	; (800fa10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	20011aa4 	.word	0x20011aa4
 800fa14:	080232d8 	.word	0x080232d8

0800fa18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	4603      	mov	r3, r0
 800fa20:	6039      	str	r1, [r7, #0]
 800fa22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa24:	79fb      	ldrb	r3, [r7, #7]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d105      	bne.n	800fa36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	4907      	ldr	r1, [pc, #28]	; (800fa4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa2e:	4808      	ldr	r0, [pc, #32]	; (800fa50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa30:	f7fc ffc2 	bl	800c9b8 <USBD_GetString>
 800fa34:	e004      	b.n	800fa40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa36:	683a      	ldr	r2, [r7, #0]
 800fa38:	4904      	ldr	r1, [pc, #16]	; (800fa4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa3a:	4805      	ldr	r0, [pc, #20]	; (800fa50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa3c:	f7fc ffbc 	bl	800c9b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa40:	4b02      	ldr	r3, [pc, #8]	; (800fa4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	20011aa4 	.word	0x20011aa4
 800fa50:	080232e4 	.word	0x080232e4

0800fa54 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	6039      	str	r1, [r7, #0]
 800fa5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	220c      	movs	r2, #12
 800fa64:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fa66:	4b03      	ldr	r3, [pc, #12]	; (800fa74 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	200000ec 	.word	0x200000ec

0800fa78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fa7e:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <Get_SerialNum+0x44>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fa84:	4b0e      	ldr	r3, [pc, #56]	; (800fac0 <Get_SerialNum+0x48>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fa8a:	4b0e      	ldr	r3, [pc, #56]	; (800fac4 <Get_SerialNum+0x4c>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4413      	add	r3, r2
 800fa96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d009      	beq.n	800fab2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fa9e:	2208      	movs	r2, #8
 800faa0:	4909      	ldr	r1, [pc, #36]	; (800fac8 <Get_SerialNum+0x50>)
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f000 f814 	bl	800fad0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800faa8:	2204      	movs	r2, #4
 800faaa:	4908      	ldr	r1, [pc, #32]	; (800facc <Get_SerialNum+0x54>)
 800faac:	68b8      	ldr	r0, [r7, #8]
 800faae:	f000 f80f 	bl	800fad0 <IntToUnicode>
  }
}
 800fab2:	bf00      	nop
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	1ff0f420 	.word	0x1ff0f420
 800fac0:	1ff0f424 	.word	0x1ff0f424
 800fac4:	1ff0f428 	.word	0x1ff0f428
 800fac8:	200000fe 	.word	0x200000fe
 800facc:	2000010e 	.word	0x2000010e

0800fad0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b087      	sub	sp, #28
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	4613      	mov	r3, r2
 800fadc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fae2:	2300      	movs	r3, #0
 800fae4:	75fb      	strb	r3, [r7, #23]
 800fae6:	e027      	b.n	800fb38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	0f1b      	lsrs	r3, r3, #28
 800faec:	2b09      	cmp	r3, #9
 800faee:	d80b      	bhi.n	800fb08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	0f1b      	lsrs	r3, r3, #28
 800faf4:	b2da      	uxtb	r2, r3
 800faf6:	7dfb      	ldrb	r3, [r7, #23]
 800faf8:	005b      	lsls	r3, r3, #1
 800fafa:	4619      	mov	r1, r3
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	440b      	add	r3, r1
 800fb00:	3230      	adds	r2, #48	; 0x30
 800fb02:	b2d2      	uxtb	r2, r2
 800fb04:	701a      	strb	r2, [r3, #0]
 800fb06:	e00a      	b.n	800fb1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	0f1b      	lsrs	r3, r3, #28
 800fb0c:	b2da      	uxtb	r2, r3
 800fb0e:	7dfb      	ldrb	r3, [r7, #23]
 800fb10:	005b      	lsls	r3, r3, #1
 800fb12:	4619      	mov	r1, r3
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	440b      	add	r3, r1
 800fb18:	3237      	adds	r2, #55	; 0x37
 800fb1a:	b2d2      	uxtb	r2, r2
 800fb1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	011b      	lsls	r3, r3, #4
 800fb22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
 800fb26:	005b      	lsls	r3, r3, #1
 800fb28:	3301      	adds	r3, #1
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	2200      	movs	r2, #0
 800fb30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fb32:	7dfb      	ldrb	r3, [r7, #23]
 800fb34:	3301      	adds	r3, #1
 800fb36:	75fb      	strb	r3, [r7, #23]
 800fb38:	7dfa      	ldrb	r2, [r7, #23]
 800fb3a:	79fb      	ldrb	r3, [r7, #7]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d3d3      	bcc.n	800fae8 <IntToUnicode+0x18>
  }
}
 800fb40:	bf00      	nop
 800fb42:	bf00      	nop
 800fb44:	371c      	adds	r7, #28
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
	...

0800fb50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b0ae      	sub	sp, #184	; 0xb8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	601a      	str	r2, [r3, #0]
 800fb60:	605a      	str	r2, [r3, #4]
 800fb62:	609a      	str	r2, [r3, #8]
 800fb64:	60da      	str	r2, [r3, #12]
 800fb66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fb68:	f107 0314 	add.w	r3, r7, #20
 800fb6c:	2290      	movs	r2, #144	; 0x90
 800fb6e:	2100      	movs	r1, #0
 800fb70:	4618      	mov	r0, r3
 800fb72:	f010 f817 	bl	801fba4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fb7e:	d151      	bne.n	800fc24 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fb80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fb84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800fb86:	2300      	movs	r3, #0
 800fb88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fb8c:	f107 0314 	add.w	r3, r7, #20
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7f6 fee5 	bl	8006960 <HAL_RCCEx_PeriphCLKConfig>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d001      	beq.n	800fba0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fb9c:	f7f2 fd91 	bl	80026c2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fba0:	4b22      	ldr	r3, [pc, #136]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fba4:	4a21      	ldr	r2, [pc, #132]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fba6:	f043 0301 	orr.w	r3, r3, #1
 800fbaa:	6313      	str	r3, [r2, #48]	; 0x30
 800fbac:	4b1f      	ldr	r3, [pc, #124]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbb0:	f003 0301 	and.w	r3, r3, #1
 800fbb4:	613b      	str	r3, [r7, #16]
 800fbb6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fbb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fbbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbc0:	2302      	movs	r3, #2
 800fbc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbcc:	2303      	movs	r3, #3
 800fbce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fbd2:	230a      	movs	r3, #10
 800fbd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fbdc:	4619      	mov	r1, r3
 800fbde:	4814      	ldr	r0, [pc, #80]	; (800fc30 <HAL_PCD_MspInit+0xe0>)
 800fbe0:	f7f4 fcd0 	bl	8004584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fbe4:	4b11      	ldr	r3, [pc, #68]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fbe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbe8:	4a10      	ldr	r2, [pc, #64]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fbea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbee:	6353      	str	r3, [r2, #52]	; 0x34
 800fbf0:	4b0e      	ldr	r3, [pc, #56]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbf8:	60fb      	str	r3, [r7, #12]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	4b0b      	ldr	r3, [pc, #44]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc00:	4a0a      	ldr	r2, [pc, #40]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fc02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc06:	6453      	str	r3, [r2, #68]	; 0x44
 800fc08:	4b08      	ldr	r3, [pc, #32]	; (800fc2c <HAL_PCD_MspInit+0xdc>)
 800fc0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc10:	60bb      	str	r3, [r7, #8]
 800fc12:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fc14:	2200      	movs	r2, #0
 800fc16:	2105      	movs	r1, #5
 800fc18:	2043      	movs	r0, #67	; 0x43
 800fc1a:	f7f4 f873 	bl	8003d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc1e:	2043      	movs	r0, #67	; 0x43
 800fc20:	f7f4 f88c 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc24:	bf00      	nop
 800fc26:	37b8      	adds	r7, #184	; 0xb8
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	40023800 	.word	0x40023800
 800fc30:	40020000 	.word	0x40020000

0800fc34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fc48:	4619      	mov	r1, r3
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	f7fb fd2b 	bl	800b6a6 <USBD_LL_SetupStage>
}
 800fc50:	bf00      	nop
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	460b      	mov	r3, r1
 800fc62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fc6a:	78fa      	ldrb	r2, [r7, #3]
 800fc6c:	6879      	ldr	r1, [r7, #4]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	00db      	lsls	r3, r3, #3
 800fc72:	4413      	add	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	440b      	add	r3, r1
 800fc78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	78fb      	ldrb	r3, [r7, #3]
 800fc80:	4619      	mov	r1, r3
 800fc82:	f7fb fd65 	bl	800b750 <USBD_LL_DataOutStage>
}
 800fc86:	bf00      	nop
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b082      	sub	sp, #8
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	460b      	mov	r3, r1
 800fc98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fca0:	78fa      	ldrb	r2, [r7, #3]
 800fca2:	6879      	ldr	r1, [r7, #4]
 800fca4:	4613      	mov	r3, r2
 800fca6:	00db      	lsls	r3, r3, #3
 800fca8:	4413      	add	r3, r2
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	440b      	add	r3, r1
 800fcae:	334c      	adds	r3, #76	; 0x4c
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	78fb      	ldrb	r3, [r7, #3]
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	f7fb fdfe 	bl	800b8b6 <USBD_LL_DataInStage>
}
 800fcba:	bf00      	nop
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b082      	sub	sp, #8
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7fb ff32 	bl	800bb3a <USBD_LL_SOF>
}
 800fcd6:	bf00      	nop
 800fcd8:	3708      	adds	r7, #8
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcde:	b580      	push	{r7, lr}
 800fce0:	b084      	sub	sp, #16
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fce6:	2301      	movs	r3, #1
 800fce8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d102      	bne.n	800fcf8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	73fb      	strb	r3, [r7, #15]
 800fcf6:	e008      	b.n	800fd0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d102      	bne.n	800fd06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fd00:	2301      	movs	r3, #1
 800fd02:	73fb      	strb	r3, [r7, #15]
 800fd04:	e001      	b.n	800fd0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fd06:	f7f2 fcdc 	bl	80026c2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd10:	7bfa      	ldrb	r2, [r7, #15]
 800fd12:	4611      	mov	r1, r2
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7fb fed2 	bl	800babe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fb fe7a 	bl	800ba1a <USBD_LL_Reset>
}
 800fd26:	bf00      	nop
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
	...

0800fd30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fb fecd 	bl	800bade <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	6812      	ldr	r2, [r2, #0]
 800fd52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd56:	f043 0301 	orr.w	r3, r3, #1
 800fd5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a1b      	ldr	r3, [r3, #32]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d005      	beq.n	800fd70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd64:	4b04      	ldr	r3, [pc, #16]	; (800fd78 <HAL_PCD_SuspendCallback+0x48>)
 800fd66:	691b      	ldr	r3, [r3, #16]
 800fd68:	4a03      	ldr	r2, [pc, #12]	; (800fd78 <HAL_PCD_SuspendCallback+0x48>)
 800fd6a:	f043 0306 	orr.w	r3, r3, #6
 800fd6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fd70:	bf00      	nop
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	e000ed00 	.word	0xe000ed00

0800fd7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7fb febd 	bl	800bb0a <USBD_LL_Resume>
}
 800fd90:	bf00      	nop
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	460b      	mov	r3, r1
 800fda2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fdaa:	78fa      	ldrb	r2, [r7, #3]
 800fdac:	4611      	mov	r1, r2
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fb ff15 	bl	800bbde <USBD_LL_IsoOUTIncomplete>
}
 800fdb4:	bf00      	nop
 800fdb6:	3708      	adds	r7, #8
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fdce:	78fa      	ldrb	r2, [r7, #3]
 800fdd0:	4611      	mov	r1, r2
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fb fed1 	bl	800bb7a <USBD_LL_IsoINIncomplete>
}
 800fdd8:	bf00      	nop
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fb ff27 	bl	800bc42 <USBD_LL_DevConnected>
}
 800fdf4:	bf00      	nop
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fb ff24 	bl	800bc58 <USBD_LL_DevDisconnected>
}
 800fe10:	bf00      	nop
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d13c      	bne.n	800fea2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fe28:	4a20      	ldr	r2, [pc, #128]	; (800feac <USBD_LL_Init+0x94>)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	4a1e      	ldr	r2, [pc, #120]	; (800feac <USBD_LL_Init+0x94>)
 800fe34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fe38:	4b1c      	ldr	r3, [pc, #112]	; (800feac <USBD_LL_Init+0x94>)
 800fe3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fe3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fe40:	4b1a      	ldr	r3, [pc, #104]	; (800feac <USBD_LL_Init+0x94>)
 800fe42:	2206      	movs	r2, #6
 800fe44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fe46:	4b19      	ldr	r3, [pc, #100]	; (800feac <USBD_LL_Init+0x94>)
 800fe48:	2202      	movs	r2, #2
 800fe4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fe4c:	4b17      	ldr	r3, [pc, #92]	; (800feac <USBD_LL_Init+0x94>)
 800fe4e:	2200      	movs	r2, #0
 800fe50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fe52:	4b16      	ldr	r3, [pc, #88]	; (800feac <USBD_LL_Init+0x94>)
 800fe54:	2202      	movs	r2, #2
 800fe56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fe58:	4b14      	ldr	r3, [pc, #80]	; (800feac <USBD_LL_Init+0x94>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fe5e:	4b13      	ldr	r3, [pc, #76]	; (800feac <USBD_LL_Init+0x94>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fe64:	4b11      	ldr	r3, [pc, #68]	; (800feac <USBD_LL_Init+0x94>)
 800fe66:	2200      	movs	r2, #0
 800fe68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fe6a:	4b10      	ldr	r3, [pc, #64]	; (800feac <USBD_LL_Init+0x94>)
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fe70:	4b0e      	ldr	r3, [pc, #56]	; (800feac <USBD_LL_Init+0x94>)
 800fe72:	2200      	movs	r2, #0
 800fe74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fe76:	480d      	ldr	r0, [pc, #52]	; (800feac <USBD_LL_Init+0x94>)
 800fe78:	f7f4 fd63 	bl	8004942 <HAL_PCD_Init>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fe82:	f7f2 fc1e 	bl	80026c2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fe86:	2180      	movs	r1, #128	; 0x80
 800fe88:	4808      	ldr	r0, [pc, #32]	; (800feac <USBD_LL_Init+0x94>)
 800fe8a:	f7f5 ffde 	bl	8005e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fe8e:	2240      	movs	r2, #64	; 0x40
 800fe90:	2100      	movs	r1, #0
 800fe92:	4806      	ldr	r0, [pc, #24]	; (800feac <USBD_LL_Init+0x94>)
 800fe94:	f7f5 ff92 	bl	8005dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fe98:	2280      	movs	r2, #128	; 0x80
 800fe9a:	2101      	movs	r1, #1
 800fe9c:	4803      	ldr	r0, [pc, #12]	; (800feac <USBD_LL_Init+0x94>)
 800fe9e:	f7f5 ff8d 	bl	8005dbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	20011ca4 	.word	0x20011ca4

0800feb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800feb8:	2300      	movs	r3, #0
 800feba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800febc:	2300      	movs	r3, #0
 800febe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7f4 fe5f 	bl	8004b8a <HAL_PCD_Start>
 800fecc:	4603      	mov	r3, r0
 800fece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fed0:	7bfb      	ldrb	r3, [r7, #15]
 800fed2:	4618      	mov	r0, r3
 800fed4:	f000 f97e 	bl	80101d4 <USBD_Get_USB_Status>
 800fed8:	4603      	mov	r3, r0
 800feda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fedc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}

0800fee6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fee6:	b580      	push	{r7, lr}
 800fee8:	b084      	sub	sp, #16
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
 800feee:	4608      	mov	r0, r1
 800fef0:	4611      	mov	r1, r2
 800fef2:	461a      	mov	r2, r3
 800fef4:	4603      	mov	r3, r0
 800fef6:	70fb      	strb	r3, [r7, #3]
 800fef8:	460b      	mov	r3, r1
 800fefa:	70bb      	strb	r3, [r7, #2]
 800fefc:	4613      	mov	r3, r2
 800fefe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff00:	2300      	movs	r3, #0
 800ff02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff04:	2300      	movs	r3, #0
 800ff06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ff0e:	78bb      	ldrb	r3, [r7, #2]
 800ff10:	883a      	ldrh	r2, [r7, #0]
 800ff12:	78f9      	ldrb	r1, [r7, #3]
 800ff14:	f7f5 fb4c 	bl	80055b0 <HAL_PCD_EP_Open>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 f958 	bl	80101d4 <USBD_Get_USB_Status>
 800ff24:	4603      	mov	r3, r0
 800ff26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b084      	sub	sp, #16
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff42:	2300      	movs	r3, #0
 800ff44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff4c:	78fa      	ldrb	r2, [r7, #3]
 800ff4e:	4611      	mov	r1, r2
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7f5 fb95 	bl	8005680 <HAL_PCD_EP_Close>
 800ff56:	4603      	mov	r3, r0
 800ff58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff5a:	7bfb      	ldrb	r3, [r7, #15]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f000 f939 	bl	80101d4 <USBD_Get_USB_Status>
 800ff62:	4603      	mov	r3, r0
 800ff64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	460b      	mov	r3, r1
 800ff7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff80:	2300      	movs	r3, #0
 800ff82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ff8a:	78fa      	ldrb	r2, [r7, #3]
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7f5 fc6d 	bl	800586e <HAL_PCD_EP_SetStall>
 800ff94:	4603      	mov	r3, r0
 800ff96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff98:	7bfb      	ldrb	r3, [r7, #15]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f000 f91a 	bl	80101d4 <USBD_Get_USB_Status>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b084      	sub	sp, #16
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ffc8:	78fa      	ldrb	r2, [r7, #3]
 800ffca:	4611      	mov	r1, r2
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7f5 fcb2 	bl	8005936 <HAL_PCD_EP_ClrStall>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffd6:	7bfb      	ldrb	r3, [r7, #15]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f000 f8fb 	bl	80101d4 <USBD_Get_USB_Status>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3710      	adds	r7, #16
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b085      	sub	sp, #20
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	460b      	mov	r3, r1
 800fff6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fffe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010004:	2b00      	cmp	r3, #0
 8010006:	da0b      	bge.n	8010020 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010008:	78fb      	ldrb	r3, [r7, #3]
 801000a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801000e:	68f9      	ldr	r1, [r7, #12]
 8010010:	4613      	mov	r3, r2
 8010012:	00db      	lsls	r3, r3, #3
 8010014:	4413      	add	r3, r2
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	440b      	add	r3, r1
 801001a:	333e      	adds	r3, #62	; 0x3e
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	e00b      	b.n	8010038 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010020:	78fb      	ldrb	r3, [r7, #3]
 8010022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010026:	68f9      	ldr	r1, [r7, #12]
 8010028:	4613      	mov	r3, r2
 801002a:	00db      	lsls	r3, r3, #3
 801002c:	4413      	add	r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	440b      	add	r3, r1
 8010032:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010036:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010038:	4618      	mov	r0, r3
 801003a:	3714      	adds	r7, #20
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	460b      	mov	r3, r1
 801004e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010050:	2300      	movs	r3, #0
 8010052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010054:	2300      	movs	r3, #0
 8010056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801005e:	78fa      	ldrb	r2, [r7, #3]
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7f5 fa7f 	bl	8005566 <HAL_PCD_SetAddress>
 8010068:	4603      	mov	r3, r0
 801006a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801006c:	7bfb      	ldrb	r3, [r7, #15]
 801006e:	4618      	mov	r0, r3
 8010070:	f000 f8b0 	bl	80101d4 <USBD_Get_USB_Status>
 8010074:	4603      	mov	r3, r0
 8010076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010078:	7bbb      	ldrb	r3, [r7, #14]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b086      	sub	sp, #24
 8010086:	af00      	add	r7, sp, #0
 8010088:	60f8      	str	r0, [r7, #12]
 801008a:	607a      	str	r2, [r7, #4]
 801008c:	603b      	str	r3, [r7, #0]
 801008e:	460b      	mov	r3, r1
 8010090:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010092:	2300      	movs	r3, #0
 8010094:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010096:	2300      	movs	r3, #0
 8010098:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80100a0:	7af9      	ldrb	r1, [r7, #11]
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	f7f5 fb98 	bl	80057da <HAL_PCD_EP_Transmit>
 80100aa:	4603      	mov	r3, r0
 80100ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100ae:	7dfb      	ldrb	r3, [r7, #23]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f000 f88f 	bl	80101d4 <USBD_Get_USB_Status>
 80100b6:	4603      	mov	r3, r0
 80100b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80100ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3718      	adds	r7, #24
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b086      	sub	sp, #24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	607a      	str	r2, [r7, #4]
 80100ce:	603b      	str	r3, [r7, #0]
 80100d0:	460b      	mov	r3, r1
 80100d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100d4:	2300      	movs	r3, #0
 80100d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100d8:	2300      	movs	r3, #0
 80100da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80100e2:	7af9      	ldrb	r1, [r7, #11]
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	f7f5 fb14 	bl	8005714 <HAL_PCD_EP_Receive>
 80100ec:	4603      	mov	r3, r0
 80100ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100f0:	7dfb      	ldrb	r3, [r7, #23]
 80100f2:	4618      	mov	r0, r3
 80100f4:	f000 f86e 	bl	80101d4 <USBD_Get_USB_Status>
 80100f8:	4603      	mov	r3, r0
 80100fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80100fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3718      	adds	r7, #24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b082      	sub	sp, #8
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	460b      	mov	r3, r1
 8010110:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010118:	78fa      	ldrb	r2, [r7, #3]
 801011a:	4611      	mov	r1, r2
 801011c:	4618      	mov	r0, r3
 801011e:	f7f5 fb44 	bl	80057aa <HAL_PCD_EP_GetRxCount>
 8010122:	4603      	mov	r3, r0
}
 8010124:	4618      	mov	r0, r3
 8010126:	3708      	adds	r7, #8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	460b      	mov	r3, r1
 8010136:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010138:	78fb      	ldrb	r3, [r7, #3]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <HAL_PCDEx_LPM_Callback+0x18>
 801013e:	2b01      	cmp	r3, #1
 8010140:	d01f      	beq.n	8010182 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010142:	e03b      	b.n	80101bc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6a1b      	ldr	r3, [r3, #32]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d007      	beq.n	801015c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801014c:	f000 f83c 	bl	80101c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010150:	4b1c      	ldr	r3, [pc, #112]	; (80101c4 <HAL_PCDEx_LPM_Callback+0x98>)
 8010152:	691b      	ldr	r3, [r3, #16]
 8010154:	4a1b      	ldr	r2, [pc, #108]	; (80101c4 <HAL_PCDEx_LPM_Callback+0x98>)
 8010156:	f023 0306 	bic.w	r3, r3, #6
 801015a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	6812      	ldr	r2, [r2, #0]
 801016a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801016e:	f023 0301 	bic.w	r3, r3, #1
 8010172:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801017a:	4618      	mov	r0, r3
 801017c:	f7fb fcc5 	bl	800bb0a <USBD_LL_Resume>
    break;
 8010180:	e01c      	b.n	80101bc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	6812      	ldr	r2, [r2, #0]
 8010190:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010194:	f043 0301 	orr.w	r3, r3, #1
 8010198:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fb fc9c 	bl	800bade <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6a1b      	ldr	r3, [r3, #32]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d005      	beq.n	80101ba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101ae:	4b05      	ldr	r3, [pc, #20]	; (80101c4 <HAL_PCDEx_LPM_Callback+0x98>)
 80101b0:	691b      	ldr	r3, [r3, #16]
 80101b2:	4a04      	ldr	r2, [pc, #16]	; (80101c4 <HAL_PCDEx_LPM_Callback+0x98>)
 80101b4:	f043 0306 	orr.w	r3, r3, #6
 80101b8:	6113      	str	r3, [r2, #16]
    break;
 80101ba:	bf00      	nop
}
 80101bc:	bf00      	nop
 80101be:	3708      	adds	r7, #8
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	e000ed00 	.word	0xe000ed00

080101c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80101cc:	f7f2 f9fa 	bl	80025c4 <SystemClock_Config>
}
 80101d0:	bf00      	nop
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	4603      	mov	r3, r0
 80101dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101de:	2300      	movs	r3, #0
 80101e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80101e2:	79fb      	ldrb	r3, [r7, #7]
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	d817      	bhi.n	8010218 <USBD_Get_USB_Status+0x44>
 80101e8:	a201      	add	r2, pc, #4	; (adr r2, 80101f0 <USBD_Get_USB_Status+0x1c>)
 80101ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ee:	bf00      	nop
 80101f0:	08010201 	.word	0x08010201
 80101f4:	08010207 	.word	0x08010207
 80101f8:	0801020d 	.word	0x0801020d
 80101fc:	08010213 	.word	0x08010213
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010200:	2300      	movs	r3, #0
 8010202:	73fb      	strb	r3, [r7, #15]
    break;
 8010204:	e00b      	b.n	801021e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010206:	2303      	movs	r3, #3
 8010208:	73fb      	strb	r3, [r7, #15]
    break;
 801020a:	e008      	b.n	801021e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801020c:	2301      	movs	r3, #1
 801020e:	73fb      	strb	r3, [r7, #15]
    break;
 8010210:	e005      	b.n	801021e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010212:	2303      	movs	r3, #3
 8010214:	73fb      	strb	r3, [r7, #15]
    break;
 8010216:	e002      	b.n	801021e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010218:	2303      	movs	r3, #3
 801021a:	73fb      	strb	r3, [r7, #15]
    break;
 801021c:	bf00      	nop
  }
  return usb_status;
 801021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3714      	adds	r7, #20
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 801022c:	4b04      	ldr	r3, [pc, #16]	; (8010240 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	b10a      	cbz	r2, 8010236 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 8010232:	4803      	ldr	r0, [pc, #12]	; (8010240 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8010234:	4770      	bx	lr
 8010236:	4a03      	ldr	r2, [pc, #12]	; (8010244 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 8010238:	4801      	ldr	r0, [pc, #4]	; (8010240 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801023a:	6812      	ldr	r2, [r2, #0]
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	4770      	bx	lr
 8010240:	20000120 	.word	0x20000120
 8010244:	200008bc 	.word	0x200008bc

08010248 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8010248:	4b04      	ldr	r3, [pc, #16]	; (801025c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801024a:	4805      	ldr	r0, [pc, #20]	; (8010260 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	4905      	ldr	r1, [pc, #20]	; (8010264 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 8010250:	4a05      	ldr	r2, [pc, #20]	; (8010268 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 8010252:	6003      	str	r3, [r0, #0]
 8010254:	600b      	str	r3, [r1, #0]
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	4770      	bx	lr
 801025a:	bf00      	nop
 801025c:	200008bc 	.word	0x200008bc
 8010260:	2000013c 	.word	0x2000013c
 8010264:	20000148 	.word	0x20000148
 8010268:	20000120 	.word	0x20000120

0801026c <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 801026c:	f006 b880 	b.w	8016370 <custom_test_msgs__srv__AddThreeInts_Request__init>

08010270 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 8010270:	f006 b882 	b.w	8016378 <custom_test_msgs__srv__AddThreeInts_Request__fini>

08010274 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 8010274:	f006 b882 	b.w	801637c <custom_test_msgs__srv__AddThreeInts_Response__init>

08010278 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 8010278:	f006 b884 	b.w	8016384 <custom_test_msgs__srv__AddThreeInts_Response__fini>

0801027c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 801027c:	4b04      	ldr	r3, [pc, #16]	; (8010290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	b10a      	cbz	r2, 8010286 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 8010282:	4803      	ldr	r0, [pc, #12]	; (8010290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8010284:	4770      	bx	lr
 8010286:	4a03      	ldr	r2, [pc, #12]	; (8010294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8010288:	4801      	ldr	r0, [pc, #4]	; (8010290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801028a:	6812      	ldr	r2, [r2, #0]
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	4770      	bx	lr
 8010290:	20000208 	.word	0x20000208
 8010294:	200008c0 	.word	0x200008c0

08010298 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8010298:	4b04      	ldr	r3, [pc, #16]	; (80102ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	b10a      	cbz	r2, 80102a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 801029e:	4803      	ldr	r0, [pc, #12]	; (80102ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80102a0:	4770      	bx	lr
 80102a2:	4a03      	ldr	r2, [pc, #12]	; (80102b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 80102a4:	4801      	ldr	r0, [pc, #4]	; (80102ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80102a6:	6812      	ldr	r2, [r2, #0]
 80102a8:	601a      	str	r2, [r3, #0]
 80102aa:	4770      	bx	lr
 80102ac:	20000250 	.word	0x20000250
 80102b0:	200008c0 	.word	0x200008c0

080102b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80102b4:	4b13      	ldr	r3, [pc, #76]	; (8010304 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	b132      	cbz	r2, 80102c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	689a      	ldr	r2, [r3, #8]
 80102be:	b152      	cbz	r2, 80102d6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 80102c0:	68da      	ldr	r2, [r3, #12]
 80102c2:	b182      	cbz	r2, 80102e6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 80102c4:	480f      	ldr	r0, [pc, #60]	; (8010304 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80102c6:	4770      	bx	lr
 80102c8:	4a0f      	ldr	r2, [pc, #60]	; (8010308 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80102ca:	6812      	ldr	r2, [r2, #0]
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	689a      	ldr	r2, [r3, #8]
 80102d2:	2a00      	cmp	r2, #0
 80102d4:	d1f4      	bne.n	80102c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 80102d6:	4a0d      	ldr	r2, [pc, #52]	; (801030c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 80102d8:	6811      	ldr	r1, [r2, #0]
 80102da:	b179      	cbz	r1, 80102fc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 80102dc:	6852      	ldr	r2, [r2, #4]
 80102de:	609a      	str	r2, [r3, #8]
 80102e0:	68da      	ldr	r2, [r3, #12]
 80102e2:	2a00      	cmp	r2, #0
 80102e4:	d1ee      	bne.n	80102c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 80102e6:	4a0a      	ldr	r2, [pc, #40]	; (8010310 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 80102e8:	6811      	ldr	r1, [r2, #0]
 80102ea:	b119      	cbz	r1, 80102f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 80102ec:	6852      	ldr	r2, [r2, #4]
 80102ee:	4805      	ldr	r0, [pc, #20]	; (8010304 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80102f0:	60da      	str	r2, [r3, #12]
 80102f2:	4770      	bx	lr
 80102f4:	4904      	ldr	r1, [pc, #16]	; (8010308 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80102f6:	6809      	ldr	r1, [r1, #0]
 80102f8:	6011      	str	r1, [r2, #0]
 80102fa:	e7f7      	b.n	80102ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 80102fc:	4902      	ldr	r1, [pc, #8]	; (8010308 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80102fe:	6809      	ldr	r1, [r1, #0]
 8010300:	6011      	str	r1, [r2, #0]
 8010302:	e7eb      	b.n	80102dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 8010304:	2000026c 	.word	0x2000026c
 8010308:	200008c0 	.word	0x200008c0
 801030c:	20000208 	.word	0x20000208
 8010310:	20000250 	.word	0x20000250

08010314 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8010314:	4800      	ldr	r0, [pc, #0]	; (8010318 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 8010316:	4770      	bx	lr
 8010318:	20000294 	.word	0x20000294

0801031c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 801031c:	4800      	ldr	r0, [pc, #0]	; (8010320 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 801031e:	4770      	bx	lr
 8010320:	200002a0 	.word	0x200002a0

08010324 <_AddThreeInts_Response__max_serialized_size>:
 8010324:	2108      	movs	r1, #8
 8010326:	2000      	movs	r0, #0
 8010328:	b508      	push	{r3, lr}
 801032a:	f001 fed5 	bl	80120d8 <ucdr_alignment>
 801032e:	3008      	adds	r0, #8
 8010330:	bd08      	pop	{r3, pc}
 8010332:	bf00      	nop

08010334 <_AddThreeInts_Response__cdr_deserialize>:
 8010334:	b109      	cbz	r1, 801033a <_AddThreeInts_Response__cdr_deserialize+0x6>
 8010336:	f001 bc1b 	b.w	8011b70 <ucdr_deserialize_int64_t>
 801033a:	4608      	mov	r0, r1
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop

08010340 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8010340:	b1b8      	cbz	r0, 8010372 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8010342:	b538      	push	{r3, r4, r5, lr}
 8010344:	460d      	mov	r5, r1
 8010346:	2108      	movs	r1, #8
 8010348:	4628      	mov	r0, r5
 801034a:	f001 fec5 	bl	80120d8 <ucdr_alignment>
 801034e:	f105 0308 	add.w	r3, r5, #8
 8010352:	2108      	movs	r1, #8
 8010354:	f1c5 0508 	rsb	r5, r5, #8
 8010358:	181c      	adds	r4, r3, r0
 801035a:	4620      	mov	r0, r4
 801035c:	f001 febc 	bl	80120d8 <ucdr_alignment>
 8010360:	2108      	movs	r1, #8
 8010362:	4408      	add	r0, r1
 8010364:	4404      	add	r4, r0
 8010366:	4620      	mov	r0, r4
 8010368:	f001 feb6 	bl	80120d8 <ucdr_alignment>
 801036c:	4428      	add	r0, r5
 801036e:	4420      	add	r0, r4
 8010370:	bd38      	pop	{r3, r4, r5, pc}
 8010372:	4770      	bx	lr

08010374 <_AddThreeInts_Response__get_serialized_size>:
 8010374:	b130      	cbz	r0, 8010384 <_AddThreeInts_Response__get_serialized_size+0x10>
 8010376:	2108      	movs	r1, #8
 8010378:	2000      	movs	r0, #0
 801037a:	b508      	push	{r3, lr}
 801037c:	f001 feac 	bl	80120d8 <ucdr_alignment>
 8010380:	3008      	adds	r0, #8
 8010382:	bd08      	pop	{r3, pc}
 8010384:	4770      	bx	lr
 8010386:	bf00      	nop

08010388 <_AddThreeInts_Request__cdr_deserialize>:
 8010388:	b538      	push	{r3, r4, r5, lr}
 801038a:	460c      	mov	r4, r1
 801038c:	b171      	cbz	r1, 80103ac <_AddThreeInts_Request__cdr_deserialize+0x24>
 801038e:	4605      	mov	r5, r0
 8010390:	f001 fbee 	bl	8011b70 <ucdr_deserialize_int64_t>
 8010394:	f104 0108 	add.w	r1, r4, #8
 8010398:	4628      	mov	r0, r5
 801039a:	f001 fbe9 	bl	8011b70 <ucdr_deserialize_int64_t>
 801039e:	f104 0110 	add.w	r1, r4, #16
 80103a2:	4628      	mov	r0, r5
 80103a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103a8:	f001 bbe2 	b.w	8011b70 <ucdr_deserialize_int64_t>
 80103ac:	4608      	mov	r0, r1
 80103ae:	bd38      	pop	{r3, r4, r5, pc}

080103b0 <_AddThreeInts_Request__cdr_serialize>:
 80103b0:	b198      	cbz	r0, 80103da <_AddThreeInts_Request__cdr_serialize+0x2a>
 80103b2:	b570      	push	{r4, r5, r6, lr}
 80103b4:	460d      	mov	r5, r1
 80103b6:	4604      	mov	r4, r0
 80103b8:	e9d0 2300 	ldrd	r2, r3, [r0]
 80103bc:	4608      	mov	r0, r1
 80103be:	f001 fb07 	bl	80119d0 <ucdr_serialize_int64_t>
 80103c2:	4628      	mov	r0, r5
 80103c4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80103c8:	f001 fb02 	bl	80119d0 <ucdr_serialize_int64_t>
 80103cc:	4628      	mov	r0, r5
 80103ce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80103d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103d6:	f001 bafb 	b.w	80119d0 <ucdr_serialize_int64_t>
 80103da:	4770      	bx	lr

080103dc <_AddThreeInts_Response__cdr_serialize>:
 80103dc:	b120      	cbz	r0, 80103e8 <_AddThreeInts_Response__cdr_serialize+0xc>
 80103de:	e9d0 2300 	ldrd	r2, r3, [r0]
 80103e2:	4608      	mov	r0, r1
 80103e4:	f001 baf4 	b.w	80119d0 <ucdr_serialize_int64_t>
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop

080103ec <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 80103ec:	b138      	cbz	r0, 80103fe <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 80103ee:	b508      	push	{r3, lr}
 80103f0:	460b      	mov	r3, r1
 80103f2:	2108      	movs	r1, #8
 80103f4:	4618      	mov	r0, r3
 80103f6:	f001 fe6f 	bl	80120d8 <ucdr_alignment>
 80103fa:	3008      	adds	r0, #8
 80103fc:	bd08      	pop	{r3, pc}
 80103fe:	4770      	bx	lr

08010400 <_AddThreeInts_Request__get_serialized_size>:
 8010400:	b190      	cbz	r0, 8010428 <_AddThreeInts_Request__get_serialized_size+0x28>
 8010402:	2108      	movs	r1, #8
 8010404:	2000      	movs	r0, #0
 8010406:	b510      	push	{r4, lr}
 8010408:	f001 fe66 	bl	80120d8 <ucdr_alignment>
 801040c:	2108      	movs	r1, #8
 801040e:	1844      	adds	r4, r0, r1
 8010410:	4620      	mov	r0, r4
 8010412:	f001 fe61 	bl	80120d8 <ucdr_alignment>
 8010416:	2108      	movs	r1, #8
 8010418:	4408      	add	r0, r1
 801041a:	4404      	add	r4, r0
 801041c:	4620      	mov	r0, r4
 801041e:	f001 fe5b 	bl	80120d8 <ucdr_alignment>
 8010422:	3008      	adds	r0, #8
 8010424:	4420      	add	r0, r4
 8010426:	bd10      	pop	{r4, pc}
 8010428:	4770      	bx	lr
 801042a:	bf00      	nop

0801042c <_AddThreeInts_Request__max_serialized_size>:
 801042c:	b538      	push	{r3, r4, r5, lr}
 801042e:	2108      	movs	r1, #8
 8010430:	2000      	movs	r0, #0
 8010432:	f001 fe51 	bl	80120d8 <ucdr_alignment>
 8010436:	2108      	movs	r1, #8
 8010438:	1845      	adds	r5, r0, r1
 801043a:	4628      	mov	r0, r5
 801043c:	f001 fe4c 	bl	80120d8 <ucdr_alignment>
 8010440:	2108      	movs	r1, #8
 8010442:	1844      	adds	r4, r0, r1
 8010444:	442c      	add	r4, r5
 8010446:	4620      	mov	r0, r4
 8010448:	f001 fe46 	bl	80120d8 <ucdr_alignment>
 801044c:	3008      	adds	r0, #8
 801044e:	4420      	add	r0, r4
 8010450:	bd38      	pop	{r3, r4, r5, pc}
 8010452:	bf00      	nop

08010454 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8010454:	4800      	ldr	r0, [pc, #0]	; (8010458 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 8010456:	4770      	bx	lr
 8010458:	20000288 	.word	0x20000288

0801045c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 801045c:	4b04      	ldr	r3, [pc, #16]	; (8010470 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	b10a      	cbz	r2, 8010466 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 8010462:	4803      	ldr	r0, [pc, #12]	; (8010470 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8010464:	4770      	bx	lr
 8010466:	4a03      	ldr	r2, [pc, #12]	; (8010474 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8010468:	4801      	ldr	r0, [pc, #4]	; (8010470 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801046a:	6812      	ldr	r2, [r2, #0]
 801046c:	601a      	str	r2, [r3, #0]
 801046e:	4770      	bx	lr
 8010470:	200002ec 	.word	0x200002ec
 8010474:	200008bc 	.word	0x200008bc

08010478 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8010478:	4a02      	ldr	r2, [pc, #8]	; (8010484 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 801047a:	4b03      	ldr	r3, [pc, #12]	; (8010488 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 801047c:	6812      	ldr	r2, [r2, #0]
 801047e:	601a      	str	r2, [r3, #0]
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	200008bc 	.word	0x200008bc
 8010488:	200002ec 	.word	0x200002ec

0801048c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 801048c:	4b04      	ldr	r3, [pc, #16]	; (80104a0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801048e:	681a      	ldr	r2, [r3, #0]
 8010490:	b10a      	cbz	r2, 8010496 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 8010492:	4803      	ldr	r0, [pc, #12]	; (80104a0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8010494:	4770      	bx	lr
 8010496:	4a03      	ldr	r2, [pc, #12]	; (80104a4 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8010498:	4801      	ldr	r0, [pc, #4]	; (80104a0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801049a:	6812      	ldr	r2, [r2, #0]
 801049c:	601a      	str	r2, [r3, #0]
 801049e:	4770      	bx	lr
 80104a0:	20000300 	.word	0x20000300
 80104a4:	200008bc 	.word	0x200008bc

080104a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80104a8:	4a02      	ldr	r2, [pc, #8]	; (80104b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 80104aa:	4b03      	ldr	r3, [pc, #12]	; (80104b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 80104ac:	6812      	ldr	r2, [r2, #0]
 80104ae:	601a      	str	r2, [r3, #0]
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	200008bc 	.word	0x200008bc
 80104b8:	20000300 	.word	0x20000300

080104bc <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 80104bc:	f005 bf64 	b.w	8016388 <drive_msgs__msg__Omni__init>

080104c0 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 80104c0:	f005 bf74 	b.w	80163ac <drive_msgs__msg__Omni__fini>

080104c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80104c4:	4b04      	ldr	r3, [pc, #16]	; (80104d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	b10a      	cbz	r2, 80104ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 80104ca:	4803      	ldr	r0, [pc, #12]	; (80104d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80104cc:	4770      	bx	lr
 80104ce:	4a03      	ldr	r2, [pc, #12]	; (80104dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 80104d0:	4801      	ldr	r0, [pc, #4]	; (80104d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80104d2:	6812      	ldr	r2, [r2, #0]
 80104d4:	601a      	str	r2, [r3, #0]
 80104d6:	4770      	bx	lr
 80104d8:	20000438 	.word	0x20000438
 80104dc:	200008c0 	.word	0x200008c0

080104e0 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 80104e0:	f005 bf68 	b.w	80163b4 <drive_msgs__msg__OmniEnc__init>

080104e4 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 80104e4:	f005 bf78 	b.w	80163d8 <drive_msgs__msg__OmniEnc__fini>

080104e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80104e8:	4b04      	ldr	r3, [pc, #16]	; (80104fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	b10a      	cbz	r2, 80104f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 80104ee:	4803      	ldr	r0, [pc, #12]	; (80104fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80104f0:	4770      	bx	lr
 80104f2:	4a03      	ldr	r2, [pc, #12]	; (8010500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 80104f4:	4801      	ldr	r0, [pc, #4]	; (80104fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80104f6:	6812      	ldr	r2, [r2, #0]
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	4770      	bx	lr
 80104fc:	20000624 	.word	0x20000624
 8010500:	200008c0 	.word	0x200008c0

08010504 <_Omni__cdr_serialize>:
 8010504:	b330      	cbz	r0, 8010554 <_Omni__cdr_serialize+0x50>
 8010506:	b570      	push	{r4, r5, r6, lr}
 8010508:	6806      	ldr	r6, [r0, #0]
 801050a:	4604      	mov	r4, r0
 801050c:	460d      	mov	r5, r1
 801050e:	b1f6      	cbz	r6, 801054e <_Omni__cdr_serialize+0x4a>
 8010510:	4630      	mov	r0, r6
 8010512:	f7ef fef5 	bl	8000300 <strlen>
 8010516:	1c42      	adds	r2, r0, #1
 8010518:	4631      	mov	r1, r6
 801051a:	6060      	str	r0, [r4, #4]
 801051c:	4628      	mov	r0, r5
 801051e:	f001 fe4b 	bl	80121b8 <ucdr_serialize_sequence_char>
 8010522:	4628      	mov	r0, r5
 8010524:	ed94 0b04 	vldr	d0, [r4, #16]
 8010528:	f001 fbe8 	bl	8011cfc <ucdr_serialize_double>
 801052c:	4628      	mov	r0, r5
 801052e:	ed94 0b06 	vldr	d0, [r4, #24]
 8010532:	f001 fbe3 	bl	8011cfc <ucdr_serialize_double>
 8010536:	4628      	mov	r0, r5
 8010538:	ed94 0b08 	vldr	d0, [r4, #32]
 801053c:	f001 fbde 	bl	8011cfc <ucdr_serialize_double>
 8010540:	4628      	mov	r0, r5
 8010542:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8010546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801054a:	f001 bbd7 	b.w	8011cfc <ucdr_serialize_double>
 801054e:	4632      	mov	r2, r6
 8010550:	4630      	mov	r0, r6
 8010552:	e7e1      	b.n	8010518 <_Omni__cdr_serialize+0x14>
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop

08010558 <get_serialized_size_drive_msgs__msg__Omni>:
 8010558:	b570      	push	{r4, r5, r6, lr}
 801055a:	4604      	mov	r4, r0
 801055c:	b310      	cbz	r0, 80105a4 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 801055e:	460d      	mov	r5, r1
 8010560:	2104      	movs	r1, #4
 8010562:	4628      	mov	r0, r5
 8010564:	f001 fdb8 	bl	80120d8 <ucdr_alignment>
 8010568:	6866      	ldr	r6, [r4, #4]
 801056a:	1d6b      	adds	r3, r5, #5
 801056c:	2108      	movs	r1, #8
 801056e:	f1c5 0508 	rsb	r5, r5, #8
 8010572:	4433      	add	r3, r6
 8010574:	181e      	adds	r6, r3, r0
 8010576:	4630      	mov	r0, r6
 8010578:	f001 fdae 	bl	80120d8 <ucdr_alignment>
 801057c:	2108      	movs	r1, #8
 801057e:	1844      	adds	r4, r0, r1
 8010580:	4426      	add	r6, r4
 8010582:	4630      	mov	r0, r6
 8010584:	f001 fda8 	bl	80120d8 <ucdr_alignment>
 8010588:	2108      	movs	r1, #8
 801058a:	1844      	adds	r4, r0, r1
 801058c:	4434      	add	r4, r6
 801058e:	4620      	mov	r0, r4
 8010590:	f001 fda2 	bl	80120d8 <ucdr_alignment>
 8010594:	2108      	movs	r1, #8
 8010596:	4408      	add	r0, r1
 8010598:	4404      	add	r4, r0
 801059a:	4620      	mov	r0, r4
 801059c:	f001 fd9c 	bl	80120d8 <ucdr_alignment>
 80105a0:	4428      	add	r0, r5
 80105a2:	4420      	add	r0, r4
 80105a4:	bd70      	pop	{r4, r5, r6, pc}
 80105a6:	bf00      	nop

080105a8 <_Omni__cdr_deserialize>:
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	460c      	mov	r4, r1
 80105ac:	b082      	sub	sp, #8
 80105ae:	b329      	cbz	r1, 80105fc <_Omni__cdr_deserialize+0x54>
 80105b0:	688e      	ldr	r6, [r1, #8]
 80105b2:	ab01      	add	r3, sp, #4
 80105b4:	6809      	ldr	r1, [r1, #0]
 80105b6:	4605      	mov	r5, r0
 80105b8:	4632      	mov	r2, r6
 80105ba:	f001 fe0f 	bl	80121dc <ucdr_deserialize_sequence_char>
 80105be:	9b01      	ldr	r3, [sp, #4]
 80105c0:	b9c0      	cbnz	r0, 80105f4 <_Omni__cdr_deserialize+0x4c>
 80105c2:	429e      	cmp	r6, r3
 80105c4:	d31d      	bcc.n	8010602 <_Omni__cdr_deserialize+0x5a>
 80105c6:	f104 0110 	add.w	r1, r4, #16
 80105ca:	4628      	mov	r0, r5
 80105cc:	f001 fc66 	bl	8011e9c <ucdr_deserialize_double>
 80105d0:	f104 0118 	add.w	r1, r4, #24
 80105d4:	4628      	mov	r0, r5
 80105d6:	f001 fc61 	bl	8011e9c <ucdr_deserialize_double>
 80105da:	f104 0120 	add.w	r1, r4, #32
 80105de:	4628      	mov	r0, r5
 80105e0:	f001 fc5c 	bl	8011e9c <ucdr_deserialize_double>
 80105e4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80105e8:	4628      	mov	r0, r5
 80105ea:	b002      	add	sp, #8
 80105ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105f0:	f001 bc54 	b.w	8011e9c <ucdr_deserialize_double>
 80105f4:	b103      	cbz	r3, 80105f8 <_Omni__cdr_deserialize+0x50>
 80105f6:	3b01      	subs	r3, #1
 80105f8:	6063      	str	r3, [r4, #4]
 80105fa:	e7e4      	b.n	80105c6 <_Omni__cdr_deserialize+0x1e>
 80105fc:	4608      	mov	r0, r1
 80105fe:	b002      	add	sp, #8
 8010600:	bd70      	pop	{r4, r5, r6, pc}
 8010602:	2101      	movs	r1, #1
 8010604:	75a8      	strb	r0, [r5, #22]
 8010606:	7569      	strb	r1, [r5, #21]
 8010608:	6060      	str	r0, [r4, #4]
 801060a:	4628      	mov	r0, r5
 801060c:	f001 fd7c 	bl	8012108 <ucdr_align_to>
 8010610:	9901      	ldr	r1, [sp, #4]
 8010612:	4628      	mov	r0, r5
 8010614:	f001 fdb0 	bl	8012178 <ucdr_advance_buffer>
 8010618:	e7d5      	b.n	80105c6 <_Omni__cdr_deserialize+0x1e>
 801061a:	bf00      	nop

0801061c <_Omni__max_serialized_size>:
 801061c:	b538      	push	{r3, r4, r5, lr}
 801061e:	2108      	movs	r1, #8
 8010620:	2000      	movs	r0, #0
 8010622:	f001 fd59 	bl	80120d8 <ucdr_alignment>
 8010626:	2108      	movs	r1, #8
 8010628:	1845      	adds	r5, r0, r1
 801062a:	4628      	mov	r0, r5
 801062c:	f001 fd54 	bl	80120d8 <ucdr_alignment>
 8010630:	2108      	movs	r1, #8
 8010632:	1844      	adds	r4, r0, r1
 8010634:	442c      	add	r4, r5
 8010636:	4620      	mov	r0, r4
 8010638:	f001 fd4e 	bl	80120d8 <ucdr_alignment>
 801063c:	2108      	movs	r1, #8
 801063e:	4408      	add	r0, r1
 8010640:	4404      	add	r4, r0
 8010642:	4620      	mov	r0, r4
 8010644:	f001 fd48 	bl	80120d8 <ucdr_alignment>
 8010648:	3008      	adds	r0, #8
 801064a:	4420      	add	r0, r4
 801064c:	bd38      	pop	{r3, r4, r5, pc}
 801064e:	bf00      	nop

08010650 <_Omni__get_serialized_size>:
 8010650:	b538      	push	{r3, r4, r5, lr}
 8010652:	4604      	mov	r4, r0
 8010654:	b1f0      	cbz	r0, 8010694 <_Omni__get_serialized_size+0x44>
 8010656:	2104      	movs	r1, #4
 8010658:	2000      	movs	r0, #0
 801065a:	f001 fd3d 	bl	80120d8 <ucdr_alignment>
 801065e:	6863      	ldr	r3, [r4, #4]
 8010660:	2108      	movs	r1, #8
 8010662:	3305      	adds	r3, #5
 8010664:	181d      	adds	r5, r3, r0
 8010666:	4628      	mov	r0, r5
 8010668:	f001 fd36 	bl	80120d8 <ucdr_alignment>
 801066c:	2108      	movs	r1, #8
 801066e:	1844      	adds	r4, r0, r1
 8010670:	4425      	add	r5, r4
 8010672:	4628      	mov	r0, r5
 8010674:	f001 fd30 	bl	80120d8 <ucdr_alignment>
 8010678:	2108      	movs	r1, #8
 801067a:	1844      	adds	r4, r0, r1
 801067c:	442c      	add	r4, r5
 801067e:	4620      	mov	r0, r4
 8010680:	f001 fd2a 	bl	80120d8 <ucdr_alignment>
 8010684:	2108      	movs	r1, #8
 8010686:	4408      	add	r0, r1
 8010688:	4404      	add	r4, r0
 801068a:	4620      	mov	r0, r4
 801068c:	f001 fd24 	bl	80120d8 <ucdr_alignment>
 8010690:	3008      	adds	r0, #8
 8010692:	4420      	add	r0, r4
 8010694:	bd38      	pop	{r3, r4, r5, pc}
 8010696:	bf00      	nop

08010698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8010698:	4800      	ldr	r0, [pc, #0]	; (801069c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 801069a:	4770      	bx	lr
 801069c:	20000630 	.word	0x20000630

080106a0 <_OmniEnc__cdr_serialize>:
 80106a0:	b3a8      	cbz	r0, 801070e <_OmniEnc__cdr_serialize+0x6e>
 80106a2:	b570      	push	{r4, r5, r6, lr}
 80106a4:	6806      	ldr	r6, [r0, #0]
 80106a6:	4604      	mov	r4, r0
 80106a8:	460d      	mov	r5, r1
 80106aa:	b36e      	cbz	r6, 8010708 <_OmniEnc__cdr_serialize+0x68>
 80106ac:	4630      	mov	r0, r6
 80106ae:	f7ef fe27 	bl	8000300 <strlen>
 80106b2:	1c42      	adds	r2, r0, #1
 80106b4:	4631      	mov	r1, r6
 80106b6:	6060      	str	r0, [r4, #4]
 80106b8:	4628      	mov	r0, r5
 80106ba:	f001 fd7d 	bl	80121b8 <ucdr_serialize_sequence_char>
 80106be:	4628      	mov	r0, r5
 80106c0:	ed94 0b04 	vldr	d0, [r4, #16]
 80106c4:	f001 fb1a 	bl	8011cfc <ucdr_serialize_double>
 80106c8:	4628      	mov	r0, r5
 80106ca:	ed94 0b06 	vldr	d0, [r4, #24]
 80106ce:	f001 fb15 	bl	8011cfc <ucdr_serialize_double>
 80106d2:	4628      	mov	r0, r5
 80106d4:	ed94 0b08 	vldr	d0, [r4, #32]
 80106d8:	f001 fb10 	bl	8011cfc <ucdr_serialize_double>
 80106dc:	4628      	mov	r0, r5
 80106de:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 80106e2:	f001 fb0b 	bl	8011cfc <ucdr_serialize_double>
 80106e6:	4628      	mov	r0, r5
 80106e8:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 80106ec:	f001 fb06 	bl	8011cfc <ucdr_serialize_double>
 80106f0:	4628      	mov	r0, r5
 80106f2:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 80106f6:	f001 fb01 	bl	8011cfc <ucdr_serialize_double>
 80106fa:	4628      	mov	r0, r5
 80106fc:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8010700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010704:	f001 bafa 	b.w	8011cfc <ucdr_serialize_double>
 8010708:	4632      	mov	r2, r6
 801070a:	4630      	mov	r0, r6
 801070c:	e7d2      	b.n	80106b4 <_OmniEnc__cdr_serialize+0x14>
 801070e:	4770      	bx	lr

08010710 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 8010710:	b570      	push	{r4, r5, r6, lr}
 8010712:	460c      	mov	r4, r1
 8010714:	4605      	mov	r5, r0
 8010716:	2104      	movs	r1, #4
 8010718:	4620      	mov	r0, r4
 801071a:	f001 fcdd 	bl	80120d8 <ucdr_alignment>
 801071e:	686b      	ldr	r3, [r5, #4]
 8010720:	2108      	movs	r1, #8
 8010722:	4423      	add	r3, r4
 8010724:	f1c4 0408 	rsb	r4, r4, #8
 8010728:	3305      	adds	r3, #5
 801072a:	18c6      	adds	r6, r0, r3
 801072c:	4630      	mov	r0, r6
 801072e:	f001 fcd3 	bl	80120d8 <ucdr_alignment>
 8010732:	2108      	movs	r1, #8
 8010734:	1845      	adds	r5, r0, r1
 8010736:	442e      	add	r6, r5
 8010738:	4630      	mov	r0, r6
 801073a:	f001 fccd 	bl	80120d8 <ucdr_alignment>
 801073e:	2108      	movs	r1, #8
 8010740:	1845      	adds	r5, r0, r1
 8010742:	4435      	add	r5, r6
 8010744:	4628      	mov	r0, r5
 8010746:	f001 fcc7 	bl	80120d8 <ucdr_alignment>
 801074a:	2108      	movs	r1, #8
 801074c:	4408      	add	r0, r1
 801074e:	4405      	add	r5, r0
 8010750:	4628      	mov	r0, r5
 8010752:	f001 fcc1 	bl	80120d8 <ucdr_alignment>
 8010756:	2108      	movs	r1, #8
 8010758:	4408      	add	r0, r1
 801075a:	1946      	adds	r6, r0, r5
 801075c:	4630      	mov	r0, r6
 801075e:	f001 fcbb 	bl	80120d8 <ucdr_alignment>
 8010762:	2108      	movs	r1, #8
 8010764:	1845      	adds	r5, r0, r1
 8010766:	4435      	add	r5, r6
 8010768:	4628      	mov	r0, r5
 801076a:	f001 fcb5 	bl	80120d8 <ucdr_alignment>
 801076e:	2108      	movs	r1, #8
 8010770:	4408      	add	r0, r1
 8010772:	4405      	add	r5, r0
 8010774:	4628      	mov	r0, r5
 8010776:	f001 fcaf 	bl	80120d8 <ucdr_alignment>
 801077a:	4420      	add	r0, r4
 801077c:	4428      	add	r0, r5
 801077e:	bd70      	pop	{r4, r5, r6, pc}

08010780 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 8010780:	b108      	cbz	r0, 8010786 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 8010782:	f7ff bfc5 	b.w	8010710 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8010786:	4770      	bx	lr

08010788 <_OmniEnc__get_serialized_size>:
 8010788:	b110      	cbz	r0, 8010790 <_OmniEnc__get_serialized_size+0x8>
 801078a:	2100      	movs	r1, #0
 801078c:	f7ff bfc0 	b.w	8010710 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop

08010794 <_OmniEnc__cdr_deserialize>:
 8010794:	b570      	push	{r4, r5, r6, lr}
 8010796:	460c      	mov	r4, r1
 8010798:	b082      	sub	sp, #8
 801079a:	b3a1      	cbz	r1, 8010806 <_OmniEnc__cdr_deserialize+0x72>
 801079c:	688e      	ldr	r6, [r1, #8]
 801079e:	ab01      	add	r3, sp, #4
 80107a0:	6809      	ldr	r1, [r1, #0]
 80107a2:	4605      	mov	r5, r0
 80107a4:	4632      	mov	r2, r6
 80107a6:	f001 fd19 	bl	80121dc <ucdr_deserialize_sequence_char>
 80107aa:	9b01      	ldr	r3, [sp, #4]
 80107ac:	bb38      	cbnz	r0, 80107fe <_OmniEnc__cdr_deserialize+0x6a>
 80107ae:	429e      	cmp	r6, r3
 80107b0:	d32c      	bcc.n	801080c <_OmniEnc__cdr_deserialize+0x78>
 80107b2:	f104 0110 	add.w	r1, r4, #16
 80107b6:	4628      	mov	r0, r5
 80107b8:	f001 fb70 	bl	8011e9c <ucdr_deserialize_double>
 80107bc:	f104 0118 	add.w	r1, r4, #24
 80107c0:	4628      	mov	r0, r5
 80107c2:	f001 fb6b 	bl	8011e9c <ucdr_deserialize_double>
 80107c6:	f104 0120 	add.w	r1, r4, #32
 80107ca:	4628      	mov	r0, r5
 80107cc:	f001 fb66 	bl	8011e9c <ucdr_deserialize_double>
 80107d0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80107d4:	4628      	mov	r0, r5
 80107d6:	f001 fb61 	bl	8011e9c <ucdr_deserialize_double>
 80107da:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80107de:	4628      	mov	r0, r5
 80107e0:	f001 fb5c 	bl	8011e9c <ucdr_deserialize_double>
 80107e4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80107e8:	4628      	mov	r0, r5
 80107ea:	f001 fb57 	bl	8011e9c <ucdr_deserialize_double>
 80107ee:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80107f2:	4628      	mov	r0, r5
 80107f4:	b002      	add	sp, #8
 80107f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107fa:	f001 bb4f 	b.w	8011e9c <ucdr_deserialize_double>
 80107fe:	b103      	cbz	r3, 8010802 <_OmniEnc__cdr_deserialize+0x6e>
 8010800:	3b01      	subs	r3, #1
 8010802:	6063      	str	r3, [r4, #4]
 8010804:	e7d5      	b.n	80107b2 <_OmniEnc__cdr_deserialize+0x1e>
 8010806:	4608      	mov	r0, r1
 8010808:	b002      	add	sp, #8
 801080a:	bd70      	pop	{r4, r5, r6, pc}
 801080c:	2101      	movs	r1, #1
 801080e:	75a8      	strb	r0, [r5, #22]
 8010810:	7569      	strb	r1, [r5, #21]
 8010812:	6060      	str	r0, [r4, #4]
 8010814:	4628      	mov	r0, r5
 8010816:	f001 fc77 	bl	8012108 <ucdr_align_to>
 801081a:	9901      	ldr	r1, [sp, #4]
 801081c:	4628      	mov	r0, r5
 801081e:	f001 fcab 	bl	8012178 <ucdr_advance_buffer>
 8010822:	e7c6      	b.n	80107b2 <_OmniEnc__cdr_deserialize+0x1e>

08010824 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 8010824:	b570      	push	{r4, r5, r6, lr}
 8010826:	460c      	mov	r4, r1
 8010828:	4603      	mov	r3, r0
 801082a:	2200      	movs	r2, #0
 801082c:	2108      	movs	r1, #8
 801082e:	f104 0508 	add.w	r5, r4, #8
 8010832:	4620      	mov	r0, r4
 8010834:	701a      	strb	r2, [r3, #0]
 8010836:	f1c4 0408 	rsb	r4, r4, #8
 801083a:	f001 fc4d 	bl	80120d8 <ucdr_alignment>
 801083e:	4405      	add	r5, r0
 8010840:	2108      	movs	r1, #8
 8010842:	4628      	mov	r0, r5
 8010844:	f001 fc48 	bl	80120d8 <ucdr_alignment>
 8010848:	2108      	movs	r1, #8
 801084a:	1846      	adds	r6, r0, r1
 801084c:	442e      	add	r6, r5
 801084e:	4630      	mov	r0, r6
 8010850:	f001 fc42 	bl	80120d8 <ucdr_alignment>
 8010854:	2108      	movs	r1, #8
 8010856:	1845      	adds	r5, r0, r1
 8010858:	442e      	add	r6, r5
 801085a:	4630      	mov	r0, r6
 801085c:	f001 fc3c 	bl	80120d8 <ucdr_alignment>
 8010860:	2108      	movs	r1, #8
 8010862:	4408      	add	r0, r1
 8010864:	4406      	add	r6, r0
 8010866:	4630      	mov	r0, r6
 8010868:	f001 fc36 	bl	80120d8 <ucdr_alignment>
 801086c:	2108      	movs	r1, #8
 801086e:	1845      	adds	r5, r0, r1
 8010870:	4435      	add	r5, r6
 8010872:	4628      	mov	r0, r5
 8010874:	f001 fc30 	bl	80120d8 <ucdr_alignment>
 8010878:	2108      	movs	r1, #8
 801087a:	4408      	add	r0, r1
 801087c:	4405      	add	r5, r0
 801087e:	4628      	mov	r0, r5
 8010880:	f001 fc2a 	bl	80120d8 <ucdr_alignment>
 8010884:	4420      	add	r0, r4
 8010886:	4428      	add	r0, r5
 8010888:	bd70      	pop	{r4, r5, r6, pc}
 801088a:	bf00      	nop

0801088c <_OmniEnc__max_serialized_size>:
 801088c:	b500      	push	{lr}
 801088e:	b083      	sub	sp, #12
 8010890:	2100      	movs	r1, #0
 8010892:	f10d 0007 	add.w	r0, sp, #7
 8010896:	f7ff ffc5 	bl	8010824 <max_serialized_size_drive_msgs__msg__OmniEnc>
 801089a:	b003      	add	sp, #12
 801089c:	f85d fb04 	ldr.w	pc, [sp], #4

080108a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80108a0:	4800      	ldr	r0, [pc, #0]	; (80108a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 80108a2:	4770      	bx	lr
 80108a4:	20000658 	.word	0x20000658

080108a8 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 80108a8:	4b04      	ldr	r3, [pc, #16]	; (80108bc <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	b10a      	cbz	r2, 80108b2 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 80108ae:	4803      	ldr	r0, [pc, #12]	; (80108bc <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 80108b0:	4770      	bx	lr
 80108b2:	4a03      	ldr	r2, [pc, #12]	; (80108c0 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 80108b4:	4801      	ldr	r0, [pc, #4]	; (80108bc <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 80108b6:	6812      	ldr	r2, [r2, #0]
 80108b8:	601a      	str	r2, [r3, #0]
 80108ba:	4770      	bx	lr
 80108bc:	20000688 	.word	0x20000688
 80108c0:	200008bc 	.word	0x200008bc

080108c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 80108c4:	4a02      	ldr	r2, [pc, #8]	; (80108d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xc>)
 80108c6:	4b03      	ldr	r3, [pc, #12]	; (80108d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x10>)
 80108c8:	6812      	ldr	r2, [r2, #0]
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	200008bc 	.word	0x200008bc
 80108d4:	20000688 	.word	0x20000688

080108d8 <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_init_function>:
 80108d8:	f005 bd82 	b.w	80163e0 <manip_msgs__msg__Cmd__init>

080108dc <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_fini_function>:
 80108dc:	f005 bd84 	b.w	80163e8 <manip_msgs__msg__Cmd__fini>

080108e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 80108e0:	4b04      	ldr	r3, [pc, #16]	; (80108f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	b10a      	cbz	r2, 80108ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 80108e6:	4803      	ldr	r0, [pc, #12]	; (80108f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 80108e8:	4770      	bx	lr
 80108ea:	4a03      	ldr	r2, [pc, #12]	; (80108f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 80108ec:	4801      	ldr	r0, [pc, #4]	; (80108f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 80108ee:	6812      	ldr	r2, [r2, #0]
 80108f0:	601a      	str	r2, [r3, #0]
 80108f2:	4770      	bx	lr
 80108f4:	20000874 	.word	0x20000874
 80108f8:	200008c0 	.word	0x200008c0

080108fc <get_serialized_size_manip_msgs__msg__Cmd.part.0>:
 80108fc:	b570      	push	{r4, r5, r6, lr}
 80108fe:	2108      	movs	r1, #8
 8010900:	4604      	mov	r4, r0
 8010902:	f001 fbe9 	bl	80120d8 <ucdr_alignment>
 8010906:	2108      	movs	r1, #8
 8010908:	1866      	adds	r6, r4, r1
 801090a:	f1c4 0408 	rsb	r4, r4, #8
 801090e:	4406      	add	r6, r0
 8010910:	4630      	mov	r0, r6
 8010912:	f001 fbe1 	bl	80120d8 <ucdr_alignment>
 8010916:	2108      	movs	r1, #8
 8010918:	1845      	adds	r5, r0, r1
 801091a:	442e      	add	r6, r5
 801091c:	4630      	mov	r0, r6
 801091e:	f001 fbdb 	bl	80120d8 <ucdr_alignment>
 8010922:	2108      	movs	r1, #8
 8010924:	1845      	adds	r5, r0, r1
 8010926:	4435      	add	r5, r6
 8010928:	4628      	mov	r0, r5
 801092a:	f001 fbd5 	bl	80120d8 <ucdr_alignment>
 801092e:	2108      	movs	r1, #8
 8010930:	4408      	add	r0, r1
 8010932:	4405      	add	r5, r0
 8010934:	4628      	mov	r0, r5
 8010936:	f001 fbcf 	bl	80120d8 <ucdr_alignment>
 801093a:	2108      	movs	r1, #8
 801093c:	4408      	add	r0, r1
 801093e:	1946      	adds	r6, r0, r5
 8010940:	4630      	mov	r0, r6
 8010942:	f001 fbc9 	bl	80120d8 <ucdr_alignment>
 8010946:	2108      	movs	r1, #8
 8010948:	1845      	adds	r5, r0, r1
 801094a:	4435      	add	r5, r6
 801094c:	4628      	mov	r0, r5
 801094e:	f001 fbc3 	bl	80120d8 <ucdr_alignment>
 8010952:	2108      	movs	r1, #8
 8010954:	4408      	add	r0, r1
 8010956:	4405      	add	r5, r0
 8010958:	4628      	mov	r0, r5
 801095a:	f001 fbbd 	bl	80120d8 <ucdr_alignment>
 801095e:	4420      	add	r0, r4
 8010960:	4428      	add	r0, r5
 8010962:	bd70      	pop	{r4, r5, r6, pc}

08010964 <get_serialized_size_manip_msgs__msg__Cmd>:
 8010964:	b110      	cbz	r0, 801096c <get_serialized_size_manip_msgs__msg__Cmd+0x8>
 8010966:	4608      	mov	r0, r1
 8010968:	f7ff bfc8 	b.w	80108fc <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop

08010970 <_Cmd__get_serialized_size>:
 8010970:	b110      	cbz	r0, 8010978 <_Cmd__get_serialized_size+0x8>
 8010972:	2000      	movs	r0, #0
 8010974:	f7ff bfc2 	b.w	80108fc <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop

0801097c <_Cmd__cdr_deserialize>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	460c      	mov	r4, r1
 8010980:	b339      	cbz	r1, 80109d2 <_Cmd__cdr_deserialize+0x56>
 8010982:	4605      	mov	r5, r0
 8010984:	f001 f8f4 	bl	8011b70 <ucdr_deserialize_int64_t>
 8010988:	f104 0108 	add.w	r1, r4, #8
 801098c:	4628      	mov	r0, r5
 801098e:	f001 f8ef 	bl	8011b70 <ucdr_deserialize_int64_t>
 8010992:	f104 0110 	add.w	r1, r4, #16
 8010996:	4628      	mov	r0, r5
 8010998:	f001 f8ea 	bl	8011b70 <ucdr_deserialize_int64_t>
 801099c:	f104 0118 	add.w	r1, r4, #24
 80109a0:	4628      	mov	r0, r5
 80109a2:	f001 f8e5 	bl	8011b70 <ucdr_deserialize_int64_t>
 80109a6:	f104 0120 	add.w	r1, r4, #32
 80109aa:	4628      	mov	r0, r5
 80109ac:	f001 f8e0 	bl	8011b70 <ucdr_deserialize_int64_t>
 80109b0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80109b4:	4628      	mov	r0, r5
 80109b6:	f001 f8db 	bl	8011b70 <ucdr_deserialize_int64_t>
 80109ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80109be:	4628      	mov	r0, r5
 80109c0:	f001 f8d6 	bl	8011b70 <ucdr_deserialize_int64_t>
 80109c4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80109c8:	4628      	mov	r0, r5
 80109ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ce:	f001 b8cf 	b.w	8011b70 <ucdr_deserialize_int64_t>
 80109d2:	4608      	mov	r0, r1
 80109d4:	bd38      	pop	{r3, r4, r5, pc}
 80109d6:	bf00      	nop

080109d8 <_Cmd__cdr_serialize>:
 80109d8:	b360      	cbz	r0, 8010a34 <_Cmd__cdr_serialize+0x5c>
 80109da:	b570      	push	{r4, r5, r6, lr}
 80109dc:	460d      	mov	r5, r1
 80109de:	4604      	mov	r4, r0
 80109e0:	e9d0 2300 	ldrd	r2, r3, [r0]
 80109e4:	4608      	mov	r0, r1
 80109e6:	f000 fff3 	bl	80119d0 <ucdr_serialize_int64_t>
 80109ea:	4628      	mov	r0, r5
 80109ec:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80109f0:	f000 ffee 	bl	80119d0 <ucdr_serialize_int64_t>
 80109f4:	4628      	mov	r0, r5
 80109f6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80109fa:	f000 ffe9 	bl	80119d0 <ucdr_serialize_int64_t>
 80109fe:	4628      	mov	r0, r5
 8010a00:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8010a04:	f000 ffe4 	bl	80119d0 <ucdr_serialize_int64_t>
 8010a08:	4628      	mov	r0, r5
 8010a0a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8010a0e:	f000 ffdf 	bl	80119d0 <ucdr_serialize_int64_t>
 8010a12:	4628      	mov	r0, r5
 8010a14:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8010a18:	f000 ffda 	bl	80119d0 <ucdr_serialize_int64_t>
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8010a22:	f000 ffd5 	bl	80119d0 <ucdr_serialize_int64_t>
 8010a26:	4628      	mov	r0, r5
 8010a28:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a30:	f000 bfce 	b.w	80119d0 <ucdr_serialize_int64_t>
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop

08010a38 <max_serialized_size_manip_msgs__msg__Cmd>:
 8010a38:	b570      	push	{r4, r5, r6, lr}
 8010a3a:	460c      	mov	r4, r1
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	2108      	movs	r1, #8
 8010a40:	f104 0608 	add.w	r6, r4, #8
 8010a44:	7003      	strb	r3, [r0, #0]
 8010a46:	4620      	mov	r0, r4
 8010a48:	f1c4 0408 	rsb	r4, r4, #8
 8010a4c:	f001 fb44 	bl	80120d8 <ucdr_alignment>
 8010a50:	4406      	add	r6, r0
 8010a52:	2108      	movs	r1, #8
 8010a54:	4630      	mov	r0, r6
 8010a56:	f001 fb3f 	bl	80120d8 <ucdr_alignment>
 8010a5a:	2108      	movs	r1, #8
 8010a5c:	1845      	adds	r5, r0, r1
 8010a5e:	442e      	add	r6, r5
 8010a60:	4630      	mov	r0, r6
 8010a62:	f001 fb39 	bl	80120d8 <ucdr_alignment>
 8010a66:	2108      	movs	r1, #8
 8010a68:	1845      	adds	r5, r0, r1
 8010a6a:	4435      	add	r5, r6
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	f001 fb33 	bl	80120d8 <ucdr_alignment>
 8010a72:	2108      	movs	r1, #8
 8010a74:	4408      	add	r0, r1
 8010a76:	4405      	add	r5, r0
 8010a78:	4628      	mov	r0, r5
 8010a7a:	f001 fb2d 	bl	80120d8 <ucdr_alignment>
 8010a7e:	2108      	movs	r1, #8
 8010a80:	4408      	add	r0, r1
 8010a82:	1946      	adds	r6, r0, r5
 8010a84:	4630      	mov	r0, r6
 8010a86:	f001 fb27 	bl	80120d8 <ucdr_alignment>
 8010a8a:	2108      	movs	r1, #8
 8010a8c:	1845      	adds	r5, r0, r1
 8010a8e:	4435      	add	r5, r6
 8010a90:	4628      	mov	r0, r5
 8010a92:	f001 fb21 	bl	80120d8 <ucdr_alignment>
 8010a96:	2108      	movs	r1, #8
 8010a98:	4408      	add	r0, r1
 8010a9a:	4405      	add	r5, r0
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	f001 fb1b 	bl	80120d8 <ucdr_alignment>
 8010aa2:	4420      	add	r0, r4
 8010aa4:	4428      	add	r0, r5
 8010aa6:	bd70      	pop	{r4, r5, r6, pc}

08010aa8 <_Cmd__max_serialized_size>:
 8010aa8:	b500      	push	{lr}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	2100      	movs	r1, #0
 8010aae:	f10d 0007 	add.w	r0, sp, #7
 8010ab2:	f7ff ffc1 	bl	8010a38 <max_serialized_size_manip_msgs__msg__Cmd>
 8010ab6:	b003      	add	sp, #12
 8010ab8:	f85d fb04 	ldr.w	pc, [sp], #4

08010abc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8010abc:	4800      	ldr	r0, [pc, #0]	; (8010ac0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x4>)
 8010abe:	4770      	bx	lr
 8010ac0:	20000880 	.word	0x20000880

08010ac4 <ucdr_serialize_bool>:
 8010ac4:	b538      	push	{r3, r4, r5, lr}
 8010ac6:	460d      	mov	r5, r1
 8010ac8:	2101      	movs	r1, #1
 8010aca:	4604      	mov	r4, r0
 8010acc:	f001 fab8 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010ad0:	b148      	cbz	r0, 8010ae6 <ucdr_serialize_bool+0x22>
 8010ad2:	68a3      	ldr	r3, [r4, #8]
 8010ad4:	2101      	movs	r1, #1
 8010ad6:	701d      	strb	r5, [r3, #0]
 8010ad8:	68a2      	ldr	r2, [r4, #8]
 8010ada:	6923      	ldr	r3, [r4, #16]
 8010adc:	440a      	add	r2, r1
 8010ade:	7561      	strb	r1, [r4, #21]
 8010ae0:	440b      	add	r3, r1
 8010ae2:	60a2      	str	r2, [r4, #8]
 8010ae4:	6123      	str	r3, [r4, #16]
 8010ae6:	7da0      	ldrb	r0, [r4, #22]
 8010ae8:	f080 0001 	eor.w	r0, r0, #1
 8010aec:	bd38      	pop	{r3, r4, r5, pc}
 8010aee:	bf00      	nop

08010af0 <ucdr_deserialize_bool>:
 8010af0:	b538      	push	{r3, r4, r5, lr}
 8010af2:	460d      	mov	r5, r1
 8010af4:	2101      	movs	r1, #1
 8010af6:	4604      	mov	r4, r0
 8010af8:	f001 faa2 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010afc:	b160      	cbz	r0, 8010b18 <ucdr_deserialize_bool+0x28>
 8010afe:	68a2      	ldr	r2, [r4, #8]
 8010b00:	2101      	movs	r1, #1
 8010b02:	6923      	ldr	r3, [r4, #16]
 8010b04:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010b08:	440b      	add	r3, r1
 8010b0a:	3800      	subs	r0, #0
 8010b0c:	bf18      	it	ne
 8010b0e:	2001      	movne	r0, #1
 8010b10:	7028      	strb	r0, [r5, #0]
 8010b12:	60a2      	str	r2, [r4, #8]
 8010b14:	6123      	str	r3, [r4, #16]
 8010b16:	7561      	strb	r1, [r4, #21]
 8010b18:	7da0      	ldrb	r0, [r4, #22]
 8010b1a:	f080 0001 	eor.w	r0, r0, #1
 8010b1e:	bd38      	pop	{r3, r4, r5, pc}

08010b20 <ucdr_serialize_uint8_t>:
 8010b20:	b538      	push	{r3, r4, r5, lr}
 8010b22:	460d      	mov	r5, r1
 8010b24:	2101      	movs	r1, #1
 8010b26:	4604      	mov	r4, r0
 8010b28:	f001 fa8a 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010b2c:	b148      	cbz	r0, 8010b42 <ucdr_serialize_uint8_t+0x22>
 8010b2e:	68a3      	ldr	r3, [r4, #8]
 8010b30:	2101      	movs	r1, #1
 8010b32:	701d      	strb	r5, [r3, #0]
 8010b34:	68a2      	ldr	r2, [r4, #8]
 8010b36:	6923      	ldr	r3, [r4, #16]
 8010b38:	440a      	add	r2, r1
 8010b3a:	7561      	strb	r1, [r4, #21]
 8010b3c:	440b      	add	r3, r1
 8010b3e:	60a2      	str	r2, [r4, #8]
 8010b40:	6123      	str	r3, [r4, #16]
 8010b42:	7da0      	ldrb	r0, [r4, #22]
 8010b44:	f080 0001 	eor.w	r0, r0, #1
 8010b48:	bd38      	pop	{r3, r4, r5, pc}
 8010b4a:	bf00      	nop

08010b4c <ucdr_deserialize_uint8_t>:
 8010b4c:	b538      	push	{r3, r4, r5, lr}
 8010b4e:	460d      	mov	r5, r1
 8010b50:	2101      	movs	r1, #1
 8010b52:	4604      	mov	r4, r0
 8010b54:	f001 fa74 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010b58:	b150      	cbz	r0, 8010b70 <ucdr_deserialize_uint8_t+0x24>
 8010b5a:	68a3      	ldr	r3, [r4, #8]
 8010b5c:	2101      	movs	r1, #1
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	702b      	strb	r3, [r5, #0]
 8010b62:	68a2      	ldr	r2, [r4, #8]
 8010b64:	6923      	ldr	r3, [r4, #16]
 8010b66:	440a      	add	r2, r1
 8010b68:	7561      	strb	r1, [r4, #21]
 8010b6a:	440b      	add	r3, r1
 8010b6c:	60a2      	str	r2, [r4, #8]
 8010b6e:	6123      	str	r3, [r4, #16]
 8010b70:	7da0      	ldrb	r0, [r4, #22]
 8010b72:	f080 0001 	eor.w	r0, r0, #1
 8010b76:	bd38      	pop	{r3, r4, r5, pc}

08010b78 <ucdr_serialize_uint16_t>:
 8010b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	b082      	sub	sp, #8
 8010b80:	4604      	mov	r4, r0
 8010b82:	2102      	movs	r1, #2
 8010b84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010b88:	f001 faae 	bl	80120e8 <ucdr_buffer_alignment>
 8010b8c:	4601      	mov	r1, r0
 8010b8e:	4620      	mov	r0, r4
 8010b90:	7d67      	ldrb	r7, [r4, #21]
 8010b92:	f001 faf1 	bl	8012178 <ucdr_advance_buffer>
 8010b96:	2102      	movs	r1, #2
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f001 fa45 	bl	8012028 <ucdr_check_buffer_available_for>
 8010b9e:	bb78      	cbnz	r0, 8010c00 <ucdr_serialize_uint16_t+0x88>
 8010ba0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010ba4:	42ab      	cmp	r3, r5
 8010ba6:	d926      	bls.n	8010bf6 <ucdr_serialize_uint16_t+0x7e>
 8010ba8:	1b5e      	subs	r6, r3, r5
 8010baa:	60a3      	str	r3, [r4, #8]
 8010bac:	6923      	ldr	r3, [r4, #16]
 8010bae:	4620      	mov	r0, r4
 8010bb0:	f1c6 0802 	rsb	r8, r6, #2
 8010bb4:	4433      	add	r3, r6
 8010bb6:	4641      	mov	r1, r8
 8010bb8:	6123      	str	r3, [r4, #16]
 8010bba:	f001 fa41 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d03b      	beq.n	8010c3a <ucdr_serialize_uint16_t+0xc2>
 8010bc2:	7d23      	ldrb	r3, [r4, #20]
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d04a      	beq.n	8010c5e <ucdr_serialize_uint16_t+0xe6>
 8010bc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010bcc:	702b      	strb	r3, [r5, #0]
 8010bce:	2e00      	cmp	r6, #0
 8010bd0:	d040      	beq.n	8010c54 <ucdr_serialize_uint16_t+0xdc>
 8010bd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010bd6:	706b      	strb	r3, [r5, #1]
 8010bd8:	6923      	ldr	r3, [r4, #16]
 8010bda:	2102      	movs	r1, #2
 8010bdc:	68a2      	ldr	r2, [r4, #8]
 8010bde:	3302      	adds	r3, #2
 8010be0:	7da0      	ldrb	r0, [r4, #22]
 8010be2:	4442      	add	r2, r8
 8010be4:	7561      	strb	r1, [r4, #21]
 8010be6:	1b9e      	subs	r6, r3, r6
 8010be8:	f080 0001 	eor.w	r0, r0, #1
 8010bec:	60a2      	str	r2, [r4, #8]
 8010bee:	6126      	str	r6, [r4, #16]
 8010bf0:	b002      	add	sp, #8
 8010bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bf6:	2102      	movs	r1, #2
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f001 fa21 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010bfe:	b190      	cbz	r0, 8010c26 <ucdr_serialize_uint16_t+0xae>
 8010c00:	7d23      	ldrb	r3, [r4, #20]
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	68a3      	ldr	r3, [r4, #8]
 8010c06:	d014      	beq.n	8010c32 <ucdr_serialize_uint16_t+0xba>
 8010c08:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010c0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010c10:	7019      	strb	r1, [r3, #0]
 8010c12:	68a3      	ldr	r3, [r4, #8]
 8010c14:	705a      	strb	r2, [r3, #1]
 8010c16:	2102      	movs	r1, #2
 8010c18:	68a2      	ldr	r2, [r4, #8]
 8010c1a:	6923      	ldr	r3, [r4, #16]
 8010c1c:	440a      	add	r2, r1
 8010c1e:	7561      	strb	r1, [r4, #21]
 8010c20:	440b      	add	r3, r1
 8010c22:	60a2      	str	r2, [r4, #8]
 8010c24:	6123      	str	r3, [r4, #16]
 8010c26:	7da0      	ldrb	r0, [r4, #22]
 8010c28:	f080 0001 	eor.w	r0, r0, #1
 8010c2c:	b002      	add	sp, #8
 8010c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010c36:	801a      	strh	r2, [r3, #0]
 8010c38:	e7ed      	b.n	8010c16 <ucdr_serialize_uint16_t+0x9e>
 8010c3a:	68a2      	ldr	r2, [r4, #8]
 8010c3c:	6923      	ldr	r3, [r4, #16]
 8010c3e:	7da0      	ldrb	r0, [r4, #22]
 8010c40:	1b92      	subs	r2, r2, r6
 8010c42:	1b9b      	subs	r3, r3, r6
 8010c44:	7567      	strb	r7, [r4, #21]
 8010c46:	f080 0001 	eor.w	r0, r0, #1
 8010c4a:	60a2      	str	r2, [r4, #8]
 8010c4c:	6123      	str	r3, [r4, #16]
 8010c4e:	b002      	add	sp, #8
 8010c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c54:	68a3      	ldr	r3, [r4, #8]
 8010c56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010c5a:	701a      	strb	r2, [r3, #0]
 8010c5c:	e7bc      	b.n	8010bd8 <ucdr_serialize_uint16_t+0x60>
 8010c5e:	4628      	mov	r0, r5
 8010c60:	f10d 0506 	add.w	r5, sp, #6
 8010c64:	4632      	mov	r2, r6
 8010c66:	4629      	mov	r1, r5
 8010c68:	f00f f869 	bl	801fd3e <memcpy>
 8010c6c:	4642      	mov	r2, r8
 8010c6e:	19a9      	adds	r1, r5, r6
 8010c70:	68a0      	ldr	r0, [r4, #8]
 8010c72:	f00f f864 	bl	801fd3e <memcpy>
 8010c76:	e7af      	b.n	8010bd8 <ucdr_serialize_uint16_t+0x60>

08010c78 <ucdr_serialize_endian_uint16_t>:
 8010c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	b083      	sub	sp, #12
 8010c80:	460d      	mov	r5, r1
 8010c82:	2102      	movs	r1, #2
 8010c84:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010c88:	f001 fa2e 	bl	80120e8 <ucdr_buffer_alignment>
 8010c8c:	4601      	mov	r1, r0
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010c94:	f001 fa70 	bl	8012178 <ucdr_advance_buffer>
 8010c98:	2102      	movs	r1, #2
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f001 f9c4 	bl	8012028 <ucdr_check_buffer_available_for>
 8010ca0:	bb70      	cbnz	r0, 8010d00 <ucdr_serialize_endian_uint16_t+0x88>
 8010ca2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010ca6:	42be      	cmp	r6, r7
 8010ca8:	d925      	bls.n	8010cf6 <ucdr_serialize_endian_uint16_t+0x7e>
 8010caa:	6923      	ldr	r3, [r4, #16]
 8010cac:	4620      	mov	r0, r4
 8010cae:	60a6      	str	r6, [r4, #8]
 8010cb0:	1bf6      	subs	r6, r6, r7
 8010cb2:	4433      	add	r3, r6
 8010cb4:	f1c6 0902 	rsb	r9, r6, #2
 8010cb8:	6123      	str	r3, [r4, #16]
 8010cba:	4649      	mov	r1, r9
 8010cbc:	f001 f9c0 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	d039      	beq.n	8010d38 <ucdr_serialize_endian_uint16_t+0xc0>
 8010cc4:	2d01      	cmp	r5, #1
 8010cc6:	d04a      	beq.n	8010d5e <ucdr_serialize_endian_uint16_t+0xe6>
 8010cc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ccc:	703b      	strb	r3, [r7, #0]
 8010cce:	2e00      	cmp	r6, #0
 8010cd0:	d040      	beq.n	8010d54 <ucdr_serialize_endian_uint16_t+0xdc>
 8010cd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010cd6:	707b      	strb	r3, [r7, #1]
 8010cd8:	6923      	ldr	r3, [r4, #16]
 8010cda:	2102      	movs	r1, #2
 8010cdc:	68a2      	ldr	r2, [r4, #8]
 8010cde:	7da0      	ldrb	r0, [r4, #22]
 8010ce0:	3302      	adds	r3, #2
 8010ce2:	444a      	add	r2, r9
 8010ce4:	7561      	strb	r1, [r4, #21]
 8010ce6:	1b9b      	subs	r3, r3, r6
 8010ce8:	f080 0001 	eor.w	r0, r0, #1
 8010cec:	60a2      	str	r2, [r4, #8]
 8010cee:	6123      	str	r3, [r4, #16]
 8010cf0:	b003      	add	sp, #12
 8010cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cf6:	2102      	movs	r1, #2
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f001 f9a1 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010cfe:	b188      	cbz	r0, 8010d24 <ucdr_serialize_endian_uint16_t+0xac>
 8010d00:	2d01      	cmp	r5, #1
 8010d02:	68a3      	ldr	r3, [r4, #8]
 8010d04:	d014      	beq.n	8010d30 <ucdr_serialize_endian_uint16_t+0xb8>
 8010d06:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010d0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d0e:	7019      	strb	r1, [r3, #0]
 8010d10:	68a3      	ldr	r3, [r4, #8]
 8010d12:	705a      	strb	r2, [r3, #1]
 8010d14:	2102      	movs	r1, #2
 8010d16:	68a2      	ldr	r2, [r4, #8]
 8010d18:	6923      	ldr	r3, [r4, #16]
 8010d1a:	440a      	add	r2, r1
 8010d1c:	7561      	strb	r1, [r4, #21]
 8010d1e:	440b      	add	r3, r1
 8010d20:	60a2      	str	r2, [r4, #8]
 8010d22:	6123      	str	r3, [r4, #16]
 8010d24:	7da0      	ldrb	r0, [r4, #22]
 8010d26:	f080 0001 	eor.w	r0, r0, #1
 8010d2a:	b003      	add	sp, #12
 8010d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010d34:	801a      	strh	r2, [r3, #0]
 8010d36:	e7ed      	b.n	8010d14 <ucdr_serialize_endian_uint16_t+0x9c>
 8010d38:	68a2      	ldr	r2, [r4, #8]
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	7da0      	ldrb	r0, [r4, #22]
 8010d3e:	1b92      	subs	r2, r2, r6
 8010d40:	1b9b      	subs	r3, r3, r6
 8010d42:	f884 8015 	strb.w	r8, [r4, #21]
 8010d46:	f080 0001 	eor.w	r0, r0, #1
 8010d4a:	60a2      	str	r2, [r4, #8]
 8010d4c:	6123      	str	r3, [r4, #16]
 8010d4e:	b003      	add	sp, #12
 8010d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d54:	68a3      	ldr	r3, [r4, #8]
 8010d56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d5a:	701a      	strb	r2, [r3, #0]
 8010d5c:	e7bc      	b.n	8010cd8 <ucdr_serialize_endian_uint16_t+0x60>
 8010d5e:	f10d 0506 	add.w	r5, sp, #6
 8010d62:	4632      	mov	r2, r6
 8010d64:	4638      	mov	r0, r7
 8010d66:	4629      	mov	r1, r5
 8010d68:	f00e ffe9 	bl	801fd3e <memcpy>
 8010d6c:	464a      	mov	r2, r9
 8010d6e:	19a9      	adds	r1, r5, r6
 8010d70:	68a0      	ldr	r0, [r4, #8]
 8010d72:	f00e ffe4 	bl	801fd3e <memcpy>
 8010d76:	e7af      	b.n	8010cd8 <ucdr_serialize_endian_uint16_t+0x60>

08010d78 <ucdr_deserialize_uint16_t>:
 8010d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	460d      	mov	r5, r1
 8010d80:	2102      	movs	r1, #2
 8010d82:	f001 f9b1 	bl	80120e8 <ucdr_buffer_alignment>
 8010d86:	4601      	mov	r1, r0
 8010d88:	4620      	mov	r0, r4
 8010d8a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010d8e:	f001 f9f3 	bl	8012178 <ucdr_advance_buffer>
 8010d92:	2102      	movs	r1, #2
 8010d94:	4620      	mov	r0, r4
 8010d96:	f001 f947 	bl	8012028 <ucdr_check_buffer_available_for>
 8010d9a:	bb60      	cbnz	r0, 8010df6 <ucdr_deserialize_uint16_t+0x7e>
 8010d9c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010da0:	42be      	cmp	r6, r7
 8010da2:	d923      	bls.n	8010dec <ucdr_deserialize_uint16_t+0x74>
 8010da4:	6923      	ldr	r3, [r4, #16]
 8010da6:	4620      	mov	r0, r4
 8010da8:	60a6      	str	r6, [r4, #8]
 8010daa:	1bf6      	subs	r6, r6, r7
 8010dac:	4433      	add	r3, r6
 8010dae:	f1c6 0902 	rsb	r9, r6, #2
 8010db2:	6123      	str	r3, [r4, #16]
 8010db4:	4649      	mov	r1, r9
 8010db6:	f001 f943 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d034      	beq.n	8010e28 <ucdr_deserialize_uint16_t+0xb0>
 8010dbe:	7d23      	ldrb	r3, [r4, #20]
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d042      	beq.n	8010e4a <ucdr_deserialize_uint16_t+0xd2>
 8010dc4:	787b      	ldrb	r3, [r7, #1]
 8010dc6:	702b      	strb	r3, [r5, #0]
 8010dc8:	2e00      	cmp	r6, #0
 8010dca:	d03a      	beq.n	8010e42 <ucdr_deserialize_uint16_t+0xca>
 8010dcc:	783b      	ldrb	r3, [r7, #0]
 8010dce:	706b      	strb	r3, [r5, #1]
 8010dd0:	6923      	ldr	r3, [r4, #16]
 8010dd2:	2102      	movs	r1, #2
 8010dd4:	68a2      	ldr	r2, [r4, #8]
 8010dd6:	3302      	adds	r3, #2
 8010dd8:	7da0      	ldrb	r0, [r4, #22]
 8010dda:	444a      	add	r2, r9
 8010ddc:	7561      	strb	r1, [r4, #21]
 8010dde:	1b9b      	subs	r3, r3, r6
 8010de0:	f080 0001 	eor.w	r0, r0, #1
 8010de4:	60a2      	str	r2, [r4, #8]
 8010de6:	6123      	str	r3, [r4, #16]
 8010de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dec:	2102      	movs	r1, #2
 8010dee:	4620      	mov	r0, r4
 8010df0:	f001 f926 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010df4:	b180      	cbz	r0, 8010e18 <ucdr_deserialize_uint16_t+0xa0>
 8010df6:	7d23      	ldrb	r3, [r4, #20]
 8010df8:	2b01      	cmp	r3, #1
 8010dfa:	68a3      	ldr	r3, [r4, #8]
 8010dfc:	d011      	beq.n	8010e22 <ucdr_deserialize_uint16_t+0xaa>
 8010dfe:	785b      	ldrb	r3, [r3, #1]
 8010e00:	702b      	strb	r3, [r5, #0]
 8010e02:	68a3      	ldr	r3, [r4, #8]
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	706b      	strb	r3, [r5, #1]
 8010e08:	2102      	movs	r1, #2
 8010e0a:	68a2      	ldr	r2, [r4, #8]
 8010e0c:	6923      	ldr	r3, [r4, #16]
 8010e0e:	440a      	add	r2, r1
 8010e10:	7561      	strb	r1, [r4, #21]
 8010e12:	440b      	add	r3, r1
 8010e14:	60a2      	str	r2, [r4, #8]
 8010e16:	6123      	str	r3, [r4, #16]
 8010e18:	7da0      	ldrb	r0, [r4, #22]
 8010e1a:	f080 0001 	eor.w	r0, r0, #1
 8010e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e22:	881b      	ldrh	r3, [r3, #0]
 8010e24:	802b      	strh	r3, [r5, #0]
 8010e26:	e7ef      	b.n	8010e08 <ucdr_deserialize_uint16_t+0x90>
 8010e28:	68a2      	ldr	r2, [r4, #8]
 8010e2a:	6923      	ldr	r3, [r4, #16]
 8010e2c:	1b92      	subs	r2, r2, r6
 8010e2e:	7da0      	ldrb	r0, [r4, #22]
 8010e30:	1b9b      	subs	r3, r3, r6
 8010e32:	f884 8015 	strb.w	r8, [r4, #21]
 8010e36:	f080 0001 	eor.w	r0, r0, #1
 8010e3a:	60a2      	str	r2, [r4, #8]
 8010e3c:	6123      	str	r3, [r4, #16]
 8010e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e42:	68a3      	ldr	r3, [r4, #8]
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	706b      	strb	r3, [r5, #1]
 8010e48:	e7c2      	b.n	8010dd0 <ucdr_deserialize_uint16_t+0x58>
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	4632      	mov	r2, r6
 8010e4e:	4628      	mov	r0, r5
 8010e50:	f00e ff75 	bl	801fd3e <memcpy>
 8010e54:	464a      	mov	r2, r9
 8010e56:	19a8      	adds	r0, r5, r6
 8010e58:	68a1      	ldr	r1, [r4, #8]
 8010e5a:	f00e ff70 	bl	801fd3e <memcpy>
 8010e5e:	e7b7      	b.n	8010dd0 <ucdr_deserialize_uint16_t+0x58>

08010e60 <ucdr_deserialize_endian_uint16_t>:
 8010e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e64:	4604      	mov	r4, r0
 8010e66:	460e      	mov	r6, r1
 8010e68:	2102      	movs	r1, #2
 8010e6a:	4615      	mov	r5, r2
 8010e6c:	f001 f93c 	bl	80120e8 <ucdr_buffer_alignment>
 8010e70:	4601      	mov	r1, r0
 8010e72:	4620      	mov	r0, r4
 8010e74:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e78:	f001 f97e 	bl	8012178 <ucdr_advance_buffer>
 8010e7c:	2102      	movs	r1, #2
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f001 f8d2 	bl	8012028 <ucdr_check_buffer_available_for>
 8010e84:	bb70      	cbnz	r0, 8010ee4 <ucdr_deserialize_endian_uint16_t+0x84>
 8010e86:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8010e8a:	454f      	cmp	r7, r9
 8010e8c:	d925      	bls.n	8010eda <ucdr_deserialize_endian_uint16_t+0x7a>
 8010e8e:	6923      	ldr	r3, [r4, #16]
 8010e90:	4620      	mov	r0, r4
 8010e92:	60a7      	str	r7, [r4, #8]
 8010e94:	eba7 0709 	sub.w	r7, r7, r9
 8010e98:	443b      	add	r3, r7
 8010e9a:	f1c7 0a02 	rsb	sl, r7, #2
 8010e9e:	6123      	str	r3, [r4, #16]
 8010ea0:	4651      	mov	r1, sl
 8010ea2:	f001 f8cd 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d034      	beq.n	8010f14 <ucdr_deserialize_endian_uint16_t+0xb4>
 8010eaa:	2e01      	cmp	r6, #1
 8010eac:	d043      	beq.n	8010f36 <ucdr_deserialize_endian_uint16_t+0xd6>
 8010eae:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010eb2:	702b      	strb	r3, [r5, #0]
 8010eb4:	2f00      	cmp	r7, #0
 8010eb6:	d03a      	beq.n	8010f2e <ucdr_deserialize_endian_uint16_t+0xce>
 8010eb8:	f899 3000 	ldrb.w	r3, [r9]
 8010ebc:	706b      	strb	r3, [r5, #1]
 8010ebe:	6923      	ldr	r3, [r4, #16]
 8010ec0:	2102      	movs	r1, #2
 8010ec2:	68a2      	ldr	r2, [r4, #8]
 8010ec4:	3302      	adds	r3, #2
 8010ec6:	7da0      	ldrb	r0, [r4, #22]
 8010ec8:	4452      	add	r2, sl
 8010eca:	7561      	strb	r1, [r4, #21]
 8010ecc:	1bdb      	subs	r3, r3, r7
 8010ece:	f080 0001 	eor.w	r0, r0, #1
 8010ed2:	60a2      	str	r2, [r4, #8]
 8010ed4:	6123      	str	r3, [r4, #16]
 8010ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eda:	2102      	movs	r1, #2
 8010edc:	4620      	mov	r0, r4
 8010ede:	f001 f8af 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010ee2:	b178      	cbz	r0, 8010f04 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010ee4:	2e01      	cmp	r6, #1
 8010ee6:	68a3      	ldr	r3, [r4, #8]
 8010ee8:	d011      	beq.n	8010f0e <ucdr_deserialize_endian_uint16_t+0xae>
 8010eea:	785b      	ldrb	r3, [r3, #1]
 8010eec:	702b      	strb	r3, [r5, #0]
 8010eee:	68a3      	ldr	r3, [r4, #8]
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	706b      	strb	r3, [r5, #1]
 8010ef4:	2102      	movs	r1, #2
 8010ef6:	68a2      	ldr	r2, [r4, #8]
 8010ef8:	6923      	ldr	r3, [r4, #16]
 8010efa:	440a      	add	r2, r1
 8010efc:	7561      	strb	r1, [r4, #21]
 8010efe:	440b      	add	r3, r1
 8010f00:	60a2      	str	r2, [r4, #8]
 8010f02:	6123      	str	r3, [r4, #16]
 8010f04:	7da0      	ldrb	r0, [r4, #22]
 8010f06:	f080 0001 	eor.w	r0, r0, #1
 8010f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	802b      	strh	r3, [r5, #0]
 8010f12:	e7ef      	b.n	8010ef4 <ucdr_deserialize_endian_uint16_t+0x94>
 8010f14:	68a2      	ldr	r2, [r4, #8]
 8010f16:	6923      	ldr	r3, [r4, #16]
 8010f18:	1bd2      	subs	r2, r2, r7
 8010f1a:	7da0      	ldrb	r0, [r4, #22]
 8010f1c:	1bdb      	subs	r3, r3, r7
 8010f1e:	f884 8015 	strb.w	r8, [r4, #21]
 8010f22:	f080 0001 	eor.w	r0, r0, #1
 8010f26:	60a2      	str	r2, [r4, #8]
 8010f28:	6123      	str	r3, [r4, #16]
 8010f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f2e:	68a3      	ldr	r3, [r4, #8]
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	706b      	strb	r3, [r5, #1]
 8010f34:	e7c3      	b.n	8010ebe <ucdr_deserialize_endian_uint16_t+0x5e>
 8010f36:	4649      	mov	r1, r9
 8010f38:	463a      	mov	r2, r7
 8010f3a:	4628      	mov	r0, r5
 8010f3c:	f00e feff 	bl	801fd3e <memcpy>
 8010f40:	4652      	mov	r2, sl
 8010f42:	19e8      	adds	r0, r5, r7
 8010f44:	68a1      	ldr	r1, [r4, #8]
 8010f46:	f00e fefa 	bl	801fd3e <memcpy>
 8010f4a:	e7b8      	b.n	8010ebe <ucdr_deserialize_endian_uint16_t+0x5e>

08010f4c <ucdr_serialize_uint32_t>:
 8010f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f50:	b082      	sub	sp, #8
 8010f52:	4604      	mov	r4, r0
 8010f54:	9101      	str	r1, [sp, #4]
 8010f56:	2104      	movs	r1, #4
 8010f58:	f001 f8c6 	bl	80120e8 <ucdr_buffer_alignment>
 8010f5c:	4601      	mov	r1, r0
 8010f5e:	4620      	mov	r0, r4
 8010f60:	7d67      	ldrb	r7, [r4, #21]
 8010f62:	f001 f909 	bl	8012178 <ucdr_advance_buffer>
 8010f66:	2104      	movs	r1, #4
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f001 f85d 	bl	8012028 <ucdr_check_buffer_available_for>
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	d139      	bne.n	8010fe6 <ucdr_serialize_uint32_t+0x9a>
 8010f72:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010f76:	42ab      	cmp	r3, r5
 8010f78:	d930      	bls.n	8010fdc <ucdr_serialize_uint32_t+0x90>
 8010f7a:	1b5e      	subs	r6, r3, r5
 8010f7c:	60a3      	str	r3, [r4, #8]
 8010f7e:	6923      	ldr	r3, [r4, #16]
 8010f80:	4620      	mov	r0, r4
 8010f82:	f1c6 0804 	rsb	r8, r6, #4
 8010f86:	4433      	add	r3, r6
 8010f88:	4641      	mov	r1, r8
 8010f8a:	6123      	str	r3, [r4, #16]
 8010f8c:	f001 f858 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010f90:	2800      	cmp	r0, #0
 8010f92:	d04c      	beq.n	801102e <ucdr_serialize_uint32_t+0xe2>
 8010f94:	7d23      	ldrb	r3, [r4, #20]
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d063      	beq.n	8011062 <ucdr_serialize_uint32_t+0x116>
 8010f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010f9e:	702b      	strb	r3, [r5, #0]
 8010fa0:	2e00      	cmp	r6, #0
 8010fa2:	d051      	beq.n	8011048 <ucdr_serialize_uint32_t+0xfc>
 8010fa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010fa8:	2e01      	cmp	r6, #1
 8010faa:	706b      	strb	r3, [r5, #1]
 8010fac:	d050      	beq.n	8011050 <ucdr_serialize_uint32_t+0x104>
 8010fae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010fb2:	2e02      	cmp	r6, #2
 8010fb4:	70ab      	strb	r3, [r5, #2]
 8010fb6:	d04f      	beq.n	8011058 <ucdr_serialize_uint32_t+0x10c>
 8010fb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010fbc:	70eb      	strb	r3, [r5, #3]
 8010fbe:	6923      	ldr	r3, [r4, #16]
 8010fc0:	2104      	movs	r1, #4
 8010fc2:	68a2      	ldr	r2, [r4, #8]
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	7da0      	ldrb	r0, [r4, #22]
 8010fc8:	4442      	add	r2, r8
 8010fca:	7561      	strb	r1, [r4, #21]
 8010fcc:	1b9e      	subs	r6, r3, r6
 8010fce:	f080 0001 	eor.w	r0, r0, #1
 8010fd2:	60a2      	str	r2, [r4, #8]
 8010fd4:	6126      	str	r6, [r4, #16]
 8010fd6:	b002      	add	sp, #8
 8010fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fdc:	2104      	movs	r1, #4
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f001 f82e 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8010fe4:	b1d0      	cbz	r0, 801101c <ucdr_serialize_uint32_t+0xd0>
 8010fe6:	7d23      	ldrb	r3, [r4, #20]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	68a3      	ldr	r3, [r4, #8]
 8010fec:	d01c      	beq.n	8011028 <ucdr_serialize_uint32_t+0xdc>
 8010fee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010ff2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ff6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010ffa:	7018      	strb	r0, [r3, #0]
 8010ffc:	68a3      	ldr	r3, [r4, #8]
 8010ffe:	705a      	strb	r2, [r3, #1]
 8011000:	68a3      	ldr	r3, [r4, #8]
 8011002:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011006:	7099      	strb	r1, [r3, #2]
 8011008:	68a3      	ldr	r3, [r4, #8]
 801100a:	70da      	strb	r2, [r3, #3]
 801100c:	2104      	movs	r1, #4
 801100e:	68a2      	ldr	r2, [r4, #8]
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	440a      	add	r2, r1
 8011014:	7561      	strb	r1, [r4, #21]
 8011016:	440b      	add	r3, r1
 8011018:	60a2      	str	r2, [r4, #8]
 801101a:	6123      	str	r3, [r4, #16]
 801101c:	7da0      	ldrb	r0, [r4, #22]
 801101e:	f080 0001 	eor.w	r0, r0, #1
 8011022:	b002      	add	sp, #8
 8011024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011028:	9a01      	ldr	r2, [sp, #4]
 801102a:	601a      	str	r2, [r3, #0]
 801102c:	e7ee      	b.n	801100c <ucdr_serialize_uint32_t+0xc0>
 801102e:	68a2      	ldr	r2, [r4, #8]
 8011030:	6923      	ldr	r3, [r4, #16]
 8011032:	7da0      	ldrb	r0, [r4, #22]
 8011034:	1b92      	subs	r2, r2, r6
 8011036:	1b9b      	subs	r3, r3, r6
 8011038:	7567      	strb	r7, [r4, #21]
 801103a:	f080 0001 	eor.w	r0, r0, #1
 801103e:	60a2      	str	r2, [r4, #8]
 8011040:	6123      	str	r3, [r4, #16]
 8011042:	b002      	add	sp, #8
 8011044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011048:	68a3      	ldr	r3, [r4, #8]
 801104a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801104e:	701a      	strb	r2, [r3, #0]
 8011050:	68a3      	ldr	r3, [r4, #8]
 8011052:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011056:	701a      	strb	r2, [r3, #0]
 8011058:	68a3      	ldr	r3, [r4, #8]
 801105a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801105e:	701a      	strb	r2, [r3, #0]
 8011060:	e7ad      	b.n	8010fbe <ucdr_serialize_uint32_t+0x72>
 8011062:	4628      	mov	r0, r5
 8011064:	ad01      	add	r5, sp, #4
 8011066:	4632      	mov	r2, r6
 8011068:	4629      	mov	r1, r5
 801106a:	f00e fe68 	bl	801fd3e <memcpy>
 801106e:	4642      	mov	r2, r8
 8011070:	19a9      	adds	r1, r5, r6
 8011072:	68a0      	ldr	r0, [r4, #8]
 8011074:	f00e fe63 	bl	801fd3e <memcpy>
 8011078:	e7a1      	b.n	8010fbe <ucdr_serialize_uint32_t+0x72>
 801107a:	bf00      	nop

0801107c <ucdr_serialize_endian_uint32_t>:
 801107c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011080:	4604      	mov	r4, r0
 8011082:	b083      	sub	sp, #12
 8011084:	460d      	mov	r5, r1
 8011086:	2104      	movs	r1, #4
 8011088:	9201      	str	r2, [sp, #4]
 801108a:	f001 f82d 	bl	80120e8 <ucdr_buffer_alignment>
 801108e:	4601      	mov	r1, r0
 8011090:	4620      	mov	r0, r4
 8011092:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011096:	f001 f86f 	bl	8012178 <ucdr_advance_buffer>
 801109a:	2104      	movs	r1, #4
 801109c:	4620      	mov	r0, r4
 801109e:	f000 ffc3 	bl	8012028 <ucdr_check_buffer_available_for>
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d138      	bne.n	8011118 <ucdr_serialize_endian_uint32_t+0x9c>
 80110a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80110aa:	42b7      	cmp	r7, r6
 80110ac:	d92f      	bls.n	801110e <ucdr_serialize_endian_uint32_t+0x92>
 80110ae:	6923      	ldr	r3, [r4, #16]
 80110b0:	4620      	mov	r0, r4
 80110b2:	60a7      	str	r7, [r4, #8]
 80110b4:	1bbf      	subs	r7, r7, r6
 80110b6:	443b      	add	r3, r7
 80110b8:	f1c7 0904 	rsb	r9, r7, #4
 80110bc:	6123      	str	r3, [r4, #16]
 80110be:	4649      	mov	r1, r9
 80110c0:	f000 ffbe 	bl	8012040 <ucdr_check_final_buffer_behavior>
 80110c4:	2800      	cmp	r0, #0
 80110c6:	d04a      	beq.n	801115e <ucdr_serialize_endian_uint32_t+0xe2>
 80110c8:	2d01      	cmp	r5, #1
 80110ca:	d063      	beq.n	8011194 <ucdr_serialize_endian_uint32_t+0x118>
 80110cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80110d0:	7033      	strb	r3, [r6, #0]
 80110d2:	2f00      	cmp	r7, #0
 80110d4:	d051      	beq.n	801117a <ucdr_serialize_endian_uint32_t+0xfe>
 80110d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80110da:	2f01      	cmp	r7, #1
 80110dc:	7073      	strb	r3, [r6, #1]
 80110de:	d050      	beq.n	8011182 <ucdr_serialize_endian_uint32_t+0x106>
 80110e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80110e4:	2f02      	cmp	r7, #2
 80110e6:	70b3      	strb	r3, [r6, #2]
 80110e8:	d04f      	beq.n	801118a <ucdr_serialize_endian_uint32_t+0x10e>
 80110ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80110ee:	70f3      	strb	r3, [r6, #3]
 80110f0:	6923      	ldr	r3, [r4, #16]
 80110f2:	2104      	movs	r1, #4
 80110f4:	68a2      	ldr	r2, [r4, #8]
 80110f6:	7da0      	ldrb	r0, [r4, #22]
 80110f8:	3304      	adds	r3, #4
 80110fa:	444a      	add	r2, r9
 80110fc:	7561      	strb	r1, [r4, #21]
 80110fe:	1bdb      	subs	r3, r3, r7
 8011100:	f080 0001 	eor.w	r0, r0, #1
 8011104:	60a2      	str	r2, [r4, #8]
 8011106:	6123      	str	r3, [r4, #16]
 8011108:	b003      	add	sp, #12
 801110a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801110e:	2104      	movs	r1, #4
 8011110:	4620      	mov	r0, r4
 8011112:	f000 ff95 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011116:	b1c8      	cbz	r0, 801114c <ucdr_serialize_endian_uint32_t+0xd0>
 8011118:	2d01      	cmp	r5, #1
 801111a:	68a3      	ldr	r3, [r4, #8]
 801111c:	d01c      	beq.n	8011158 <ucdr_serialize_endian_uint32_t+0xdc>
 801111e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011122:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011126:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801112a:	7018      	strb	r0, [r3, #0]
 801112c:	68a3      	ldr	r3, [r4, #8]
 801112e:	705a      	strb	r2, [r3, #1]
 8011130:	68a3      	ldr	r3, [r4, #8]
 8011132:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011136:	7099      	strb	r1, [r3, #2]
 8011138:	68a3      	ldr	r3, [r4, #8]
 801113a:	70da      	strb	r2, [r3, #3]
 801113c:	2104      	movs	r1, #4
 801113e:	68a2      	ldr	r2, [r4, #8]
 8011140:	6923      	ldr	r3, [r4, #16]
 8011142:	440a      	add	r2, r1
 8011144:	7561      	strb	r1, [r4, #21]
 8011146:	440b      	add	r3, r1
 8011148:	60a2      	str	r2, [r4, #8]
 801114a:	6123      	str	r3, [r4, #16]
 801114c:	7da0      	ldrb	r0, [r4, #22]
 801114e:	f080 0001 	eor.w	r0, r0, #1
 8011152:	b003      	add	sp, #12
 8011154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011158:	9a01      	ldr	r2, [sp, #4]
 801115a:	601a      	str	r2, [r3, #0]
 801115c:	e7ee      	b.n	801113c <ucdr_serialize_endian_uint32_t+0xc0>
 801115e:	68a2      	ldr	r2, [r4, #8]
 8011160:	6923      	ldr	r3, [r4, #16]
 8011162:	7da0      	ldrb	r0, [r4, #22]
 8011164:	1bd2      	subs	r2, r2, r7
 8011166:	1bdb      	subs	r3, r3, r7
 8011168:	f884 8015 	strb.w	r8, [r4, #21]
 801116c:	f080 0001 	eor.w	r0, r0, #1
 8011170:	60a2      	str	r2, [r4, #8]
 8011172:	6123      	str	r3, [r4, #16]
 8011174:	b003      	add	sp, #12
 8011176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801117a:	68a3      	ldr	r3, [r4, #8]
 801117c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011180:	701a      	strb	r2, [r3, #0]
 8011182:	68a3      	ldr	r3, [r4, #8]
 8011184:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011188:	701a      	strb	r2, [r3, #0]
 801118a:	68a3      	ldr	r3, [r4, #8]
 801118c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011190:	701a      	strb	r2, [r3, #0]
 8011192:	e7ad      	b.n	80110f0 <ucdr_serialize_endian_uint32_t+0x74>
 8011194:	ad01      	add	r5, sp, #4
 8011196:	463a      	mov	r2, r7
 8011198:	4630      	mov	r0, r6
 801119a:	4629      	mov	r1, r5
 801119c:	f00e fdcf 	bl	801fd3e <memcpy>
 80111a0:	464a      	mov	r2, r9
 80111a2:	19e9      	adds	r1, r5, r7
 80111a4:	68a0      	ldr	r0, [r4, #8]
 80111a6:	f00e fdca 	bl	801fd3e <memcpy>
 80111aa:	e7a1      	b.n	80110f0 <ucdr_serialize_endian_uint32_t+0x74>

080111ac <ucdr_deserialize_uint32_t>:
 80111ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111b0:	4604      	mov	r4, r0
 80111b2:	460d      	mov	r5, r1
 80111b4:	2104      	movs	r1, #4
 80111b6:	f000 ff97 	bl	80120e8 <ucdr_buffer_alignment>
 80111ba:	4601      	mov	r1, r0
 80111bc:	4620      	mov	r0, r4
 80111be:	f894 8015 	ldrb.w	r8, [r4, #21]
 80111c2:	f000 ffd9 	bl	8012178 <ucdr_advance_buffer>
 80111c6:	2104      	movs	r1, #4
 80111c8:	4620      	mov	r0, r4
 80111ca:	f000 ff2d 	bl	8012028 <ucdr_check_buffer_available_for>
 80111ce:	2800      	cmp	r0, #0
 80111d0:	d138      	bne.n	8011244 <ucdr_deserialize_uint32_t+0x98>
 80111d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80111d6:	42b7      	cmp	r7, r6
 80111d8:	d92f      	bls.n	801123a <ucdr_deserialize_uint32_t+0x8e>
 80111da:	6923      	ldr	r3, [r4, #16]
 80111dc:	4620      	mov	r0, r4
 80111de:	60a7      	str	r7, [r4, #8]
 80111e0:	1bbf      	subs	r7, r7, r6
 80111e2:	443b      	add	r3, r7
 80111e4:	f1c7 0904 	rsb	r9, r7, #4
 80111e8:	6123      	str	r3, [r4, #16]
 80111ea:	4649      	mov	r1, r9
 80111ec:	f000 ff28 	bl	8012040 <ucdr_check_final_buffer_behavior>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d046      	beq.n	8011282 <ucdr_deserialize_uint32_t+0xd6>
 80111f4:	7d23      	ldrb	r3, [r4, #20]
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d05c      	beq.n	80112b4 <ucdr_deserialize_uint32_t+0x108>
 80111fa:	78f3      	ldrb	r3, [r6, #3]
 80111fc:	702b      	strb	r3, [r5, #0]
 80111fe:	2f00      	cmp	r7, #0
 8011200:	d04c      	beq.n	801129c <ucdr_deserialize_uint32_t+0xf0>
 8011202:	78b3      	ldrb	r3, [r6, #2]
 8011204:	2f01      	cmp	r7, #1
 8011206:	706b      	strb	r3, [r5, #1]
 8011208:	f105 0302 	add.w	r3, r5, #2
 801120c:	d04a      	beq.n	80112a4 <ucdr_deserialize_uint32_t+0xf8>
 801120e:	7873      	ldrb	r3, [r6, #1]
 8011210:	2f02      	cmp	r7, #2
 8011212:	70ab      	strb	r3, [r5, #2]
 8011214:	f105 0303 	add.w	r3, r5, #3
 8011218:	d048      	beq.n	80112ac <ucdr_deserialize_uint32_t+0x100>
 801121a:	7833      	ldrb	r3, [r6, #0]
 801121c:	70eb      	strb	r3, [r5, #3]
 801121e:	6923      	ldr	r3, [r4, #16]
 8011220:	2104      	movs	r1, #4
 8011222:	68a2      	ldr	r2, [r4, #8]
 8011224:	3304      	adds	r3, #4
 8011226:	7da0      	ldrb	r0, [r4, #22]
 8011228:	444a      	add	r2, r9
 801122a:	7561      	strb	r1, [r4, #21]
 801122c:	1bdb      	subs	r3, r3, r7
 801122e:	f080 0001 	eor.w	r0, r0, #1
 8011232:	60a2      	str	r2, [r4, #8]
 8011234:	6123      	str	r3, [r4, #16]
 8011236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801123a:	2104      	movs	r1, #4
 801123c:	4620      	mov	r0, r4
 801123e:	f000 feff 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011242:	b1b0      	cbz	r0, 8011272 <ucdr_deserialize_uint32_t+0xc6>
 8011244:	7d23      	ldrb	r3, [r4, #20]
 8011246:	2b01      	cmp	r3, #1
 8011248:	68a3      	ldr	r3, [r4, #8]
 801124a:	d017      	beq.n	801127c <ucdr_deserialize_uint32_t+0xd0>
 801124c:	78db      	ldrb	r3, [r3, #3]
 801124e:	702b      	strb	r3, [r5, #0]
 8011250:	68a3      	ldr	r3, [r4, #8]
 8011252:	789b      	ldrb	r3, [r3, #2]
 8011254:	706b      	strb	r3, [r5, #1]
 8011256:	68a3      	ldr	r3, [r4, #8]
 8011258:	785b      	ldrb	r3, [r3, #1]
 801125a:	70ab      	strb	r3, [r5, #2]
 801125c:	68a3      	ldr	r3, [r4, #8]
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	70eb      	strb	r3, [r5, #3]
 8011262:	2104      	movs	r1, #4
 8011264:	68a2      	ldr	r2, [r4, #8]
 8011266:	6923      	ldr	r3, [r4, #16]
 8011268:	440a      	add	r2, r1
 801126a:	7561      	strb	r1, [r4, #21]
 801126c:	440b      	add	r3, r1
 801126e:	60a2      	str	r2, [r4, #8]
 8011270:	6123      	str	r3, [r4, #16]
 8011272:	7da0      	ldrb	r0, [r4, #22]
 8011274:	f080 0001 	eor.w	r0, r0, #1
 8011278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	602b      	str	r3, [r5, #0]
 8011280:	e7ef      	b.n	8011262 <ucdr_deserialize_uint32_t+0xb6>
 8011282:	68a2      	ldr	r2, [r4, #8]
 8011284:	6923      	ldr	r3, [r4, #16]
 8011286:	1bd2      	subs	r2, r2, r7
 8011288:	7da0      	ldrb	r0, [r4, #22]
 801128a:	1bdb      	subs	r3, r3, r7
 801128c:	f884 8015 	strb.w	r8, [r4, #21]
 8011290:	f080 0001 	eor.w	r0, r0, #1
 8011294:	60a2      	str	r2, [r4, #8]
 8011296:	6123      	str	r3, [r4, #16]
 8011298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801129c:	68a3      	ldr	r3, [r4, #8]
 801129e:	789b      	ldrb	r3, [r3, #2]
 80112a0:	706b      	strb	r3, [r5, #1]
 80112a2:	1cab      	adds	r3, r5, #2
 80112a4:	68a2      	ldr	r2, [r4, #8]
 80112a6:	7852      	ldrb	r2, [r2, #1]
 80112a8:	f803 2b01 	strb.w	r2, [r3], #1
 80112ac:	68a2      	ldr	r2, [r4, #8]
 80112ae:	7812      	ldrb	r2, [r2, #0]
 80112b0:	701a      	strb	r2, [r3, #0]
 80112b2:	e7b4      	b.n	801121e <ucdr_deserialize_uint32_t+0x72>
 80112b4:	4631      	mov	r1, r6
 80112b6:	463a      	mov	r2, r7
 80112b8:	4628      	mov	r0, r5
 80112ba:	f00e fd40 	bl	801fd3e <memcpy>
 80112be:	464a      	mov	r2, r9
 80112c0:	19e8      	adds	r0, r5, r7
 80112c2:	68a1      	ldr	r1, [r4, #8]
 80112c4:	f00e fd3b 	bl	801fd3e <memcpy>
 80112c8:	e7a9      	b.n	801121e <ucdr_deserialize_uint32_t+0x72>
 80112ca:	bf00      	nop

080112cc <ucdr_deserialize_endian_uint32_t>:
 80112cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112d0:	4604      	mov	r4, r0
 80112d2:	460e      	mov	r6, r1
 80112d4:	2104      	movs	r1, #4
 80112d6:	4615      	mov	r5, r2
 80112d8:	f000 ff06 	bl	80120e8 <ucdr_buffer_alignment>
 80112dc:	4601      	mov	r1, r0
 80112de:	4620      	mov	r0, r4
 80112e0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80112e4:	f000 ff48 	bl	8012178 <ucdr_advance_buffer>
 80112e8:	2104      	movs	r1, #4
 80112ea:	4620      	mov	r0, r4
 80112ec:	f000 fe9c 	bl	8012028 <ucdr_check_buffer_available_for>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	d13c      	bne.n	801136e <ucdr_deserialize_endian_uint32_t+0xa2>
 80112f4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80112f8:	42bb      	cmp	r3, r7
 80112fa:	d933      	bls.n	8011364 <ucdr_deserialize_endian_uint32_t+0x98>
 80112fc:	eba3 0907 	sub.w	r9, r3, r7
 8011300:	60a3      	str	r3, [r4, #8]
 8011302:	6923      	ldr	r3, [r4, #16]
 8011304:	4620      	mov	r0, r4
 8011306:	f1c9 0a04 	rsb	sl, r9, #4
 801130a:	444b      	add	r3, r9
 801130c:	4651      	mov	r1, sl
 801130e:	6123      	str	r3, [r4, #16]
 8011310:	f000 fe96 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011314:	2800      	cmp	r0, #0
 8011316:	d048      	beq.n	80113aa <ucdr_deserialize_endian_uint32_t+0xde>
 8011318:	2e01      	cmp	r6, #1
 801131a:	d061      	beq.n	80113e0 <ucdr_deserialize_endian_uint32_t+0x114>
 801131c:	78fb      	ldrb	r3, [r7, #3]
 801131e:	702b      	strb	r3, [r5, #0]
 8011320:	f1b9 0f00 	cmp.w	r9, #0
 8011324:	d050      	beq.n	80113c8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011326:	78bb      	ldrb	r3, [r7, #2]
 8011328:	f1b9 0f01 	cmp.w	r9, #1
 801132c:	706b      	strb	r3, [r5, #1]
 801132e:	f105 0302 	add.w	r3, r5, #2
 8011332:	d04d      	beq.n	80113d0 <ucdr_deserialize_endian_uint32_t+0x104>
 8011334:	787b      	ldrb	r3, [r7, #1]
 8011336:	f1b9 0f02 	cmp.w	r9, #2
 801133a:	70ab      	strb	r3, [r5, #2]
 801133c:	f105 0303 	add.w	r3, r5, #3
 8011340:	d04a      	beq.n	80113d8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011342:	783b      	ldrb	r3, [r7, #0]
 8011344:	70eb      	strb	r3, [r5, #3]
 8011346:	6923      	ldr	r3, [r4, #16]
 8011348:	2104      	movs	r1, #4
 801134a:	68a2      	ldr	r2, [r4, #8]
 801134c:	3304      	adds	r3, #4
 801134e:	7da0      	ldrb	r0, [r4, #22]
 8011350:	4452      	add	r2, sl
 8011352:	7561      	strb	r1, [r4, #21]
 8011354:	eba3 0309 	sub.w	r3, r3, r9
 8011358:	f080 0001 	eor.w	r0, r0, #1
 801135c:	60a2      	str	r2, [r4, #8]
 801135e:	6123      	str	r3, [r4, #16]
 8011360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011364:	2104      	movs	r1, #4
 8011366:	4620      	mov	r0, r4
 8011368:	f000 fe6a 	bl	8012040 <ucdr_check_final_buffer_behavior>
 801136c:	b1a8      	cbz	r0, 801139a <ucdr_deserialize_endian_uint32_t+0xce>
 801136e:	2e01      	cmp	r6, #1
 8011370:	68a3      	ldr	r3, [r4, #8]
 8011372:	d017      	beq.n	80113a4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011374:	78db      	ldrb	r3, [r3, #3]
 8011376:	702b      	strb	r3, [r5, #0]
 8011378:	68a3      	ldr	r3, [r4, #8]
 801137a:	789b      	ldrb	r3, [r3, #2]
 801137c:	706b      	strb	r3, [r5, #1]
 801137e:	68a3      	ldr	r3, [r4, #8]
 8011380:	785b      	ldrb	r3, [r3, #1]
 8011382:	70ab      	strb	r3, [r5, #2]
 8011384:	68a3      	ldr	r3, [r4, #8]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	70eb      	strb	r3, [r5, #3]
 801138a:	2104      	movs	r1, #4
 801138c:	68a2      	ldr	r2, [r4, #8]
 801138e:	6923      	ldr	r3, [r4, #16]
 8011390:	440a      	add	r2, r1
 8011392:	7561      	strb	r1, [r4, #21]
 8011394:	440b      	add	r3, r1
 8011396:	60a2      	str	r2, [r4, #8]
 8011398:	6123      	str	r3, [r4, #16]
 801139a:	7da0      	ldrb	r0, [r4, #22]
 801139c:	f080 0001 	eor.w	r0, r0, #1
 80113a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	602b      	str	r3, [r5, #0]
 80113a8:	e7ef      	b.n	801138a <ucdr_deserialize_endian_uint32_t+0xbe>
 80113aa:	68a2      	ldr	r2, [r4, #8]
 80113ac:	6923      	ldr	r3, [r4, #16]
 80113ae:	eba2 0209 	sub.w	r2, r2, r9
 80113b2:	7da0      	ldrb	r0, [r4, #22]
 80113b4:	eba3 0309 	sub.w	r3, r3, r9
 80113b8:	f884 8015 	strb.w	r8, [r4, #21]
 80113bc:	f080 0001 	eor.w	r0, r0, #1
 80113c0:	60a2      	str	r2, [r4, #8]
 80113c2:	6123      	str	r3, [r4, #16]
 80113c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113c8:	68a3      	ldr	r3, [r4, #8]
 80113ca:	789b      	ldrb	r3, [r3, #2]
 80113cc:	706b      	strb	r3, [r5, #1]
 80113ce:	1cab      	adds	r3, r5, #2
 80113d0:	68a2      	ldr	r2, [r4, #8]
 80113d2:	7852      	ldrb	r2, [r2, #1]
 80113d4:	f803 2b01 	strb.w	r2, [r3], #1
 80113d8:	68a2      	ldr	r2, [r4, #8]
 80113da:	7812      	ldrb	r2, [r2, #0]
 80113dc:	701a      	strb	r2, [r3, #0]
 80113de:	e7b2      	b.n	8011346 <ucdr_deserialize_endian_uint32_t+0x7a>
 80113e0:	4639      	mov	r1, r7
 80113e2:	464a      	mov	r2, r9
 80113e4:	4628      	mov	r0, r5
 80113e6:	f00e fcaa 	bl	801fd3e <memcpy>
 80113ea:	4652      	mov	r2, sl
 80113ec:	eb05 0009 	add.w	r0, r5, r9
 80113f0:	68a1      	ldr	r1, [r4, #8]
 80113f2:	f00e fca4 	bl	801fd3e <memcpy>
 80113f6:	e7a6      	b.n	8011346 <ucdr_deserialize_endian_uint32_t+0x7a>

080113f8 <ucdr_serialize_uint64_t>:
 80113f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113fc:	4604      	mov	r4, r0
 80113fe:	b082      	sub	sp, #8
 8011400:	2108      	movs	r1, #8
 8011402:	e9cd 2300 	strd	r2, r3, [sp]
 8011406:	f000 fe6f 	bl	80120e8 <ucdr_buffer_alignment>
 801140a:	4601      	mov	r1, r0
 801140c:	4620      	mov	r0, r4
 801140e:	7d67      	ldrb	r7, [r4, #21]
 8011410:	f000 feb2 	bl	8012178 <ucdr_advance_buffer>
 8011414:	2108      	movs	r1, #8
 8011416:	4620      	mov	r0, r4
 8011418:	f000 fe06 	bl	8012028 <ucdr_check_buffer_available_for>
 801141c:	2800      	cmp	r0, #0
 801141e:	d14e      	bne.n	80114be <ucdr_serialize_uint64_t+0xc6>
 8011420:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011424:	42ab      	cmp	r3, r5
 8011426:	d945      	bls.n	80114b4 <ucdr_serialize_uint64_t+0xbc>
 8011428:	1b5e      	subs	r6, r3, r5
 801142a:	60a3      	str	r3, [r4, #8]
 801142c:	6923      	ldr	r3, [r4, #16]
 801142e:	4620      	mov	r0, r4
 8011430:	f1c6 0808 	rsb	r8, r6, #8
 8011434:	4433      	add	r3, r6
 8011436:	4641      	mov	r1, r8
 8011438:	6123      	str	r3, [r4, #16]
 801143a:	f000 fe01 	bl	8012040 <ucdr_check_final_buffer_behavior>
 801143e:	2800      	cmp	r0, #0
 8011440:	d074      	beq.n	801152c <ucdr_serialize_uint64_t+0x134>
 8011442:	7d23      	ldrb	r3, [r4, #20]
 8011444:	2b01      	cmp	r3, #1
 8011446:	f000 809b 	beq.w	8011580 <ucdr_serialize_uint64_t+0x188>
 801144a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801144e:	702b      	strb	r3, [r5, #0]
 8011450:	2e00      	cmp	r6, #0
 8011452:	d078      	beq.n	8011546 <ucdr_serialize_uint64_t+0x14e>
 8011454:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011458:	2e01      	cmp	r6, #1
 801145a:	706b      	strb	r3, [r5, #1]
 801145c:	d077      	beq.n	801154e <ucdr_serialize_uint64_t+0x156>
 801145e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011462:	2e02      	cmp	r6, #2
 8011464:	70ab      	strb	r3, [r5, #2]
 8011466:	d076      	beq.n	8011556 <ucdr_serialize_uint64_t+0x15e>
 8011468:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801146c:	2e03      	cmp	r6, #3
 801146e:	70eb      	strb	r3, [r5, #3]
 8011470:	d075      	beq.n	801155e <ucdr_serialize_uint64_t+0x166>
 8011472:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011476:	2e04      	cmp	r6, #4
 8011478:	712b      	strb	r3, [r5, #4]
 801147a:	d074      	beq.n	8011566 <ucdr_serialize_uint64_t+0x16e>
 801147c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011480:	2e05      	cmp	r6, #5
 8011482:	716b      	strb	r3, [r5, #5]
 8011484:	d073      	beq.n	801156e <ucdr_serialize_uint64_t+0x176>
 8011486:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801148a:	2e06      	cmp	r6, #6
 801148c:	71ab      	strb	r3, [r5, #6]
 801148e:	d072      	beq.n	8011576 <ucdr_serialize_uint64_t+0x17e>
 8011490:	f89d 3000 	ldrb.w	r3, [sp]
 8011494:	71eb      	strb	r3, [r5, #7]
 8011496:	6923      	ldr	r3, [r4, #16]
 8011498:	2108      	movs	r1, #8
 801149a:	68a2      	ldr	r2, [r4, #8]
 801149c:	3308      	adds	r3, #8
 801149e:	7da0      	ldrb	r0, [r4, #22]
 80114a0:	4442      	add	r2, r8
 80114a2:	7561      	strb	r1, [r4, #21]
 80114a4:	1b9e      	subs	r6, r3, r6
 80114a6:	f080 0001 	eor.w	r0, r0, #1
 80114aa:	60a2      	str	r2, [r4, #8]
 80114ac:	6126      	str	r6, [r4, #16]
 80114ae:	b002      	add	sp, #8
 80114b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b4:	2108      	movs	r1, #8
 80114b6:	4620      	mov	r0, r4
 80114b8:	f000 fdc2 	bl	8012040 <ucdr_check_final_buffer_behavior>
 80114bc:	b350      	cbz	r0, 8011514 <ucdr_serialize_uint64_t+0x11c>
 80114be:	7d23      	ldrb	r3, [r4, #20]
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d02d      	beq.n	8011520 <ucdr_serialize_uint64_t+0x128>
 80114c4:	68a3      	ldr	r3, [r4, #8]
 80114c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80114ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80114ce:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80114d2:	7018      	strb	r0, [r3, #0]
 80114d4:	68a3      	ldr	r3, [r4, #8]
 80114d6:	705a      	strb	r2, [r3, #1]
 80114d8:	68a3      	ldr	r3, [r4, #8]
 80114da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80114de:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80114e2:	7099      	strb	r1, [r3, #2]
 80114e4:	68a3      	ldr	r3, [r4, #8]
 80114e6:	70da      	strb	r2, [r3, #3]
 80114e8:	68a3      	ldr	r3, [r4, #8]
 80114ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80114ee:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80114f2:	7118      	strb	r0, [r3, #4]
 80114f4:	68a3      	ldr	r3, [r4, #8]
 80114f6:	715a      	strb	r2, [r3, #5]
 80114f8:	68a3      	ldr	r3, [r4, #8]
 80114fa:	f89d 2000 	ldrb.w	r2, [sp]
 80114fe:	7199      	strb	r1, [r3, #6]
 8011500:	68a3      	ldr	r3, [r4, #8]
 8011502:	71da      	strb	r2, [r3, #7]
 8011504:	2108      	movs	r1, #8
 8011506:	68a2      	ldr	r2, [r4, #8]
 8011508:	6923      	ldr	r3, [r4, #16]
 801150a:	440a      	add	r2, r1
 801150c:	7561      	strb	r1, [r4, #21]
 801150e:	440b      	add	r3, r1
 8011510:	60a2      	str	r2, [r4, #8]
 8011512:	6123      	str	r3, [r4, #16]
 8011514:	7da0      	ldrb	r0, [r4, #22]
 8011516:	f080 0001 	eor.w	r0, r0, #1
 801151a:	b002      	add	sp, #8
 801151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011520:	466b      	mov	r3, sp
 8011522:	68a2      	ldr	r2, [r4, #8]
 8011524:	cb03      	ldmia	r3!, {r0, r1}
 8011526:	6010      	str	r0, [r2, #0]
 8011528:	6051      	str	r1, [r2, #4]
 801152a:	e7eb      	b.n	8011504 <ucdr_serialize_uint64_t+0x10c>
 801152c:	68a2      	ldr	r2, [r4, #8]
 801152e:	6923      	ldr	r3, [r4, #16]
 8011530:	7da0      	ldrb	r0, [r4, #22]
 8011532:	1b92      	subs	r2, r2, r6
 8011534:	1b9b      	subs	r3, r3, r6
 8011536:	7567      	strb	r7, [r4, #21]
 8011538:	f080 0001 	eor.w	r0, r0, #1
 801153c:	60a2      	str	r2, [r4, #8]
 801153e:	6123      	str	r3, [r4, #16]
 8011540:	b002      	add	sp, #8
 8011542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011546:	68a3      	ldr	r3, [r4, #8]
 8011548:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801154c:	701a      	strb	r2, [r3, #0]
 801154e:	68a3      	ldr	r3, [r4, #8]
 8011550:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011554:	701a      	strb	r2, [r3, #0]
 8011556:	68a3      	ldr	r3, [r4, #8]
 8011558:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801155c:	701a      	strb	r2, [r3, #0]
 801155e:	68a3      	ldr	r3, [r4, #8]
 8011560:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011564:	701a      	strb	r2, [r3, #0]
 8011566:	68a3      	ldr	r3, [r4, #8]
 8011568:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801156c:	701a      	strb	r2, [r3, #0]
 801156e:	68a3      	ldr	r3, [r4, #8]
 8011570:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011574:	701a      	strb	r2, [r3, #0]
 8011576:	68a3      	ldr	r3, [r4, #8]
 8011578:	f89d 2000 	ldrb.w	r2, [sp]
 801157c:	701a      	strb	r2, [r3, #0]
 801157e:	e78a      	b.n	8011496 <ucdr_serialize_uint64_t+0x9e>
 8011580:	4628      	mov	r0, r5
 8011582:	466d      	mov	r5, sp
 8011584:	4632      	mov	r2, r6
 8011586:	4629      	mov	r1, r5
 8011588:	f00e fbd9 	bl	801fd3e <memcpy>
 801158c:	4642      	mov	r2, r8
 801158e:	19a9      	adds	r1, r5, r6
 8011590:	68a0      	ldr	r0, [r4, #8]
 8011592:	f00e fbd4 	bl	801fd3e <memcpy>
 8011596:	e77e      	b.n	8011496 <ucdr_serialize_uint64_t+0x9e>

08011598 <ucdr_serialize_int16_t>:
 8011598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801159c:	460b      	mov	r3, r1
 801159e:	b082      	sub	sp, #8
 80115a0:	4604      	mov	r4, r0
 80115a2:	2102      	movs	r1, #2
 80115a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80115a8:	f000 fd9e 	bl	80120e8 <ucdr_buffer_alignment>
 80115ac:	4601      	mov	r1, r0
 80115ae:	4620      	mov	r0, r4
 80115b0:	7d67      	ldrb	r7, [r4, #21]
 80115b2:	f000 fde1 	bl	8012178 <ucdr_advance_buffer>
 80115b6:	2102      	movs	r1, #2
 80115b8:	4620      	mov	r0, r4
 80115ba:	f000 fd35 	bl	8012028 <ucdr_check_buffer_available_for>
 80115be:	bb78      	cbnz	r0, 8011620 <ucdr_serialize_int16_t+0x88>
 80115c0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80115c4:	42ab      	cmp	r3, r5
 80115c6:	d926      	bls.n	8011616 <ucdr_serialize_int16_t+0x7e>
 80115c8:	1b5e      	subs	r6, r3, r5
 80115ca:	60a3      	str	r3, [r4, #8]
 80115cc:	6923      	ldr	r3, [r4, #16]
 80115ce:	4620      	mov	r0, r4
 80115d0:	f1c6 0802 	rsb	r8, r6, #2
 80115d4:	4433      	add	r3, r6
 80115d6:	4641      	mov	r1, r8
 80115d8:	6123      	str	r3, [r4, #16]
 80115da:	f000 fd31 	bl	8012040 <ucdr_check_final_buffer_behavior>
 80115de:	2800      	cmp	r0, #0
 80115e0:	d03b      	beq.n	801165a <ucdr_serialize_int16_t+0xc2>
 80115e2:	7d23      	ldrb	r3, [r4, #20]
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d04a      	beq.n	801167e <ucdr_serialize_int16_t+0xe6>
 80115e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115ec:	702b      	strb	r3, [r5, #0]
 80115ee:	2e00      	cmp	r6, #0
 80115f0:	d040      	beq.n	8011674 <ucdr_serialize_int16_t+0xdc>
 80115f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80115f6:	706b      	strb	r3, [r5, #1]
 80115f8:	6923      	ldr	r3, [r4, #16]
 80115fa:	2102      	movs	r1, #2
 80115fc:	68a2      	ldr	r2, [r4, #8]
 80115fe:	3302      	adds	r3, #2
 8011600:	7da0      	ldrb	r0, [r4, #22]
 8011602:	4442      	add	r2, r8
 8011604:	7561      	strb	r1, [r4, #21]
 8011606:	1b9e      	subs	r6, r3, r6
 8011608:	f080 0001 	eor.w	r0, r0, #1
 801160c:	60a2      	str	r2, [r4, #8]
 801160e:	6126      	str	r6, [r4, #16]
 8011610:	b002      	add	sp, #8
 8011612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011616:	2102      	movs	r1, #2
 8011618:	4620      	mov	r0, r4
 801161a:	f000 fd11 	bl	8012040 <ucdr_check_final_buffer_behavior>
 801161e:	b190      	cbz	r0, 8011646 <ucdr_serialize_int16_t+0xae>
 8011620:	7d23      	ldrb	r3, [r4, #20]
 8011622:	2b01      	cmp	r3, #1
 8011624:	68a3      	ldr	r3, [r4, #8]
 8011626:	d014      	beq.n	8011652 <ucdr_serialize_int16_t+0xba>
 8011628:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801162c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011630:	7019      	strb	r1, [r3, #0]
 8011632:	68a3      	ldr	r3, [r4, #8]
 8011634:	705a      	strb	r2, [r3, #1]
 8011636:	2102      	movs	r1, #2
 8011638:	68a2      	ldr	r2, [r4, #8]
 801163a:	6923      	ldr	r3, [r4, #16]
 801163c:	440a      	add	r2, r1
 801163e:	7561      	strb	r1, [r4, #21]
 8011640:	440b      	add	r3, r1
 8011642:	60a2      	str	r2, [r4, #8]
 8011644:	6123      	str	r3, [r4, #16]
 8011646:	7da0      	ldrb	r0, [r4, #22]
 8011648:	f080 0001 	eor.w	r0, r0, #1
 801164c:	b002      	add	sp, #8
 801164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011652:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011656:	801a      	strh	r2, [r3, #0]
 8011658:	e7ed      	b.n	8011636 <ucdr_serialize_int16_t+0x9e>
 801165a:	68a2      	ldr	r2, [r4, #8]
 801165c:	6923      	ldr	r3, [r4, #16]
 801165e:	7da0      	ldrb	r0, [r4, #22]
 8011660:	1b92      	subs	r2, r2, r6
 8011662:	1b9b      	subs	r3, r3, r6
 8011664:	7567      	strb	r7, [r4, #21]
 8011666:	f080 0001 	eor.w	r0, r0, #1
 801166a:	60a2      	str	r2, [r4, #8]
 801166c:	6123      	str	r3, [r4, #16]
 801166e:	b002      	add	sp, #8
 8011670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011674:	68a3      	ldr	r3, [r4, #8]
 8011676:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801167a:	701a      	strb	r2, [r3, #0]
 801167c:	e7bc      	b.n	80115f8 <ucdr_serialize_int16_t+0x60>
 801167e:	4628      	mov	r0, r5
 8011680:	f10d 0506 	add.w	r5, sp, #6
 8011684:	4632      	mov	r2, r6
 8011686:	4629      	mov	r1, r5
 8011688:	f00e fb59 	bl	801fd3e <memcpy>
 801168c:	4642      	mov	r2, r8
 801168e:	19a9      	adds	r1, r5, r6
 8011690:	68a0      	ldr	r0, [r4, #8]
 8011692:	f00e fb54 	bl	801fd3e <memcpy>
 8011696:	e7af      	b.n	80115f8 <ucdr_serialize_int16_t+0x60>

08011698 <ucdr_deserialize_int16_t>:
 8011698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801169c:	4604      	mov	r4, r0
 801169e:	460d      	mov	r5, r1
 80116a0:	2102      	movs	r1, #2
 80116a2:	f000 fd21 	bl	80120e8 <ucdr_buffer_alignment>
 80116a6:	4601      	mov	r1, r0
 80116a8:	4620      	mov	r0, r4
 80116aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80116ae:	f000 fd63 	bl	8012178 <ucdr_advance_buffer>
 80116b2:	2102      	movs	r1, #2
 80116b4:	4620      	mov	r0, r4
 80116b6:	f000 fcb7 	bl	8012028 <ucdr_check_buffer_available_for>
 80116ba:	bb60      	cbnz	r0, 8011716 <ucdr_deserialize_int16_t+0x7e>
 80116bc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80116c0:	42be      	cmp	r6, r7
 80116c2:	d923      	bls.n	801170c <ucdr_deserialize_int16_t+0x74>
 80116c4:	6923      	ldr	r3, [r4, #16]
 80116c6:	4620      	mov	r0, r4
 80116c8:	60a6      	str	r6, [r4, #8]
 80116ca:	1bf6      	subs	r6, r6, r7
 80116cc:	4433      	add	r3, r6
 80116ce:	f1c6 0902 	rsb	r9, r6, #2
 80116d2:	6123      	str	r3, [r4, #16]
 80116d4:	4649      	mov	r1, r9
 80116d6:	f000 fcb3 	bl	8012040 <ucdr_check_final_buffer_behavior>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d034      	beq.n	8011748 <ucdr_deserialize_int16_t+0xb0>
 80116de:	7d23      	ldrb	r3, [r4, #20]
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	d042      	beq.n	801176a <ucdr_deserialize_int16_t+0xd2>
 80116e4:	787b      	ldrb	r3, [r7, #1]
 80116e6:	702b      	strb	r3, [r5, #0]
 80116e8:	2e00      	cmp	r6, #0
 80116ea:	d03a      	beq.n	8011762 <ucdr_deserialize_int16_t+0xca>
 80116ec:	783b      	ldrb	r3, [r7, #0]
 80116ee:	706b      	strb	r3, [r5, #1]
 80116f0:	6923      	ldr	r3, [r4, #16]
 80116f2:	2102      	movs	r1, #2
 80116f4:	68a2      	ldr	r2, [r4, #8]
 80116f6:	3302      	adds	r3, #2
 80116f8:	7da0      	ldrb	r0, [r4, #22]
 80116fa:	444a      	add	r2, r9
 80116fc:	7561      	strb	r1, [r4, #21]
 80116fe:	1b9b      	subs	r3, r3, r6
 8011700:	f080 0001 	eor.w	r0, r0, #1
 8011704:	60a2      	str	r2, [r4, #8]
 8011706:	6123      	str	r3, [r4, #16]
 8011708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801170c:	2102      	movs	r1, #2
 801170e:	4620      	mov	r0, r4
 8011710:	f000 fc96 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011714:	b180      	cbz	r0, 8011738 <ucdr_deserialize_int16_t+0xa0>
 8011716:	7d23      	ldrb	r3, [r4, #20]
 8011718:	2b01      	cmp	r3, #1
 801171a:	68a3      	ldr	r3, [r4, #8]
 801171c:	d011      	beq.n	8011742 <ucdr_deserialize_int16_t+0xaa>
 801171e:	785b      	ldrb	r3, [r3, #1]
 8011720:	702b      	strb	r3, [r5, #0]
 8011722:	68a3      	ldr	r3, [r4, #8]
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	706b      	strb	r3, [r5, #1]
 8011728:	2102      	movs	r1, #2
 801172a:	68a2      	ldr	r2, [r4, #8]
 801172c:	6923      	ldr	r3, [r4, #16]
 801172e:	440a      	add	r2, r1
 8011730:	7561      	strb	r1, [r4, #21]
 8011732:	440b      	add	r3, r1
 8011734:	60a2      	str	r2, [r4, #8]
 8011736:	6123      	str	r3, [r4, #16]
 8011738:	7da0      	ldrb	r0, [r4, #22]
 801173a:	f080 0001 	eor.w	r0, r0, #1
 801173e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011742:	881b      	ldrh	r3, [r3, #0]
 8011744:	802b      	strh	r3, [r5, #0]
 8011746:	e7ef      	b.n	8011728 <ucdr_deserialize_int16_t+0x90>
 8011748:	68a2      	ldr	r2, [r4, #8]
 801174a:	6923      	ldr	r3, [r4, #16]
 801174c:	1b92      	subs	r2, r2, r6
 801174e:	7da0      	ldrb	r0, [r4, #22]
 8011750:	1b9b      	subs	r3, r3, r6
 8011752:	f884 8015 	strb.w	r8, [r4, #21]
 8011756:	f080 0001 	eor.w	r0, r0, #1
 801175a:	60a2      	str	r2, [r4, #8]
 801175c:	6123      	str	r3, [r4, #16]
 801175e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011762:	68a3      	ldr	r3, [r4, #8]
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	706b      	strb	r3, [r5, #1]
 8011768:	e7c2      	b.n	80116f0 <ucdr_deserialize_int16_t+0x58>
 801176a:	4639      	mov	r1, r7
 801176c:	4632      	mov	r2, r6
 801176e:	4628      	mov	r0, r5
 8011770:	f00e fae5 	bl	801fd3e <memcpy>
 8011774:	464a      	mov	r2, r9
 8011776:	19a8      	adds	r0, r5, r6
 8011778:	68a1      	ldr	r1, [r4, #8]
 801177a:	f00e fae0 	bl	801fd3e <memcpy>
 801177e:	e7b7      	b.n	80116f0 <ucdr_deserialize_int16_t+0x58>

08011780 <ucdr_serialize_int32_t>:
 8011780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011784:	b082      	sub	sp, #8
 8011786:	4604      	mov	r4, r0
 8011788:	9101      	str	r1, [sp, #4]
 801178a:	2104      	movs	r1, #4
 801178c:	f000 fcac 	bl	80120e8 <ucdr_buffer_alignment>
 8011790:	4601      	mov	r1, r0
 8011792:	4620      	mov	r0, r4
 8011794:	7d67      	ldrb	r7, [r4, #21]
 8011796:	f000 fcef 	bl	8012178 <ucdr_advance_buffer>
 801179a:	2104      	movs	r1, #4
 801179c:	4620      	mov	r0, r4
 801179e:	f000 fc43 	bl	8012028 <ucdr_check_buffer_available_for>
 80117a2:	2800      	cmp	r0, #0
 80117a4:	d139      	bne.n	801181a <ucdr_serialize_int32_t+0x9a>
 80117a6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80117aa:	42ab      	cmp	r3, r5
 80117ac:	d930      	bls.n	8011810 <ucdr_serialize_int32_t+0x90>
 80117ae:	1b5e      	subs	r6, r3, r5
 80117b0:	60a3      	str	r3, [r4, #8]
 80117b2:	6923      	ldr	r3, [r4, #16]
 80117b4:	4620      	mov	r0, r4
 80117b6:	f1c6 0804 	rsb	r8, r6, #4
 80117ba:	4433      	add	r3, r6
 80117bc:	4641      	mov	r1, r8
 80117be:	6123      	str	r3, [r4, #16]
 80117c0:	f000 fc3e 	bl	8012040 <ucdr_check_final_buffer_behavior>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	d04c      	beq.n	8011862 <ucdr_serialize_int32_t+0xe2>
 80117c8:	7d23      	ldrb	r3, [r4, #20]
 80117ca:	2b01      	cmp	r3, #1
 80117cc:	d063      	beq.n	8011896 <ucdr_serialize_int32_t+0x116>
 80117ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117d2:	702b      	strb	r3, [r5, #0]
 80117d4:	2e00      	cmp	r6, #0
 80117d6:	d051      	beq.n	801187c <ucdr_serialize_int32_t+0xfc>
 80117d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117dc:	2e01      	cmp	r6, #1
 80117de:	706b      	strb	r3, [r5, #1]
 80117e0:	d050      	beq.n	8011884 <ucdr_serialize_int32_t+0x104>
 80117e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80117e6:	2e02      	cmp	r6, #2
 80117e8:	70ab      	strb	r3, [r5, #2]
 80117ea:	d04f      	beq.n	801188c <ucdr_serialize_int32_t+0x10c>
 80117ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117f0:	70eb      	strb	r3, [r5, #3]
 80117f2:	6923      	ldr	r3, [r4, #16]
 80117f4:	2104      	movs	r1, #4
 80117f6:	68a2      	ldr	r2, [r4, #8]
 80117f8:	3304      	adds	r3, #4
 80117fa:	7da0      	ldrb	r0, [r4, #22]
 80117fc:	4442      	add	r2, r8
 80117fe:	7561      	strb	r1, [r4, #21]
 8011800:	1b9e      	subs	r6, r3, r6
 8011802:	f080 0001 	eor.w	r0, r0, #1
 8011806:	60a2      	str	r2, [r4, #8]
 8011808:	6126      	str	r6, [r4, #16]
 801180a:	b002      	add	sp, #8
 801180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011810:	2104      	movs	r1, #4
 8011812:	4620      	mov	r0, r4
 8011814:	f000 fc14 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011818:	b1d0      	cbz	r0, 8011850 <ucdr_serialize_int32_t+0xd0>
 801181a:	7d23      	ldrb	r3, [r4, #20]
 801181c:	2b01      	cmp	r3, #1
 801181e:	68a3      	ldr	r3, [r4, #8]
 8011820:	d01c      	beq.n	801185c <ucdr_serialize_int32_t+0xdc>
 8011822:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011826:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801182a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801182e:	7018      	strb	r0, [r3, #0]
 8011830:	68a3      	ldr	r3, [r4, #8]
 8011832:	705a      	strb	r2, [r3, #1]
 8011834:	68a3      	ldr	r3, [r4, #8]
 8011836:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801183a:	7099      	strb	r1, [r3, #2]
 801183c:	68a3      	ldr	r3, [r4, #8]
 801183e:	70da      	strb	r2, [r3, #3]
 8011840:	2104      	movs	r1, #4
 8011842:	68a2      	ldr	r2, [r4, #8]
 8011844:	6923      	ldr	r3, [r4, #16]
 8011846:	440a      	add	r2, r1
 8011848:	7561      	strb	r1, [r4, #21]
 801184a:	440b      	add	r3, r1
 801184c:	60a2      	str	r2, [r4, #8]
 801184e:	6123      	str	r3, [r4, #16]
 8011850:	7da0      	ldrb	r0, [r4, #22]
 8011852:	f080 0001 	eor.w	r0, r0, #1
 8011856:	b002      	add	sp, #8
 8011858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801185c:	9a01      	ldr	r2, [sp, #4]
 801185e:	601a      	str	r2, [r3, #0]
 8011860:	e7ee      	b.n	8011840 <ucdr_serialize_int32_t+0xc0>
 8011862:	68a2      	ldr	r2, [r4, #8]
 8011864:	6923      	ldr	r3, [r4, #16]
 8011866:	7da0      	ldrb	r0, [r4, #22]
 8011868:	1b92      	subs	r2, r2, r6
 801186a:	1b9b      	subs	r3, r3, r6
 801186c:	7567      	strb	r7, [r4, #21]
 801186e:	f080 0001 	eor.w	r0, r0, #1
 8011872:	60a2      	str	r2, [r4, #8]
 8011874:	6123      	str	r3, [r4, #16]
 8011876:	b002      	add	sp, #8
 8011878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187c:	68a3      	ldr	r3, [r4, #8]
 801187e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011882:	701a      	strb	r2, [r3, #0]
 8011884:	68a3      	ldr	r3, [r4, #8]
 8011886:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801188a:	701a      	strb	r2, [r3, #0]
 801188c:	68a3      	ldr	r3, [r4, #8]
 801188e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011892:	701a      	strb	r2, [r3, #0]
 8011894:	e7ad      	b.n	80117f2 <ucdr_serialize_int32_t+0x72>
 8011896:	4628      	mov	r0, r5
 8011898:	ad01      	add	r5, sp, #4
 801189a:	4632      	mov	r2, r6
 801189c:	4629      	mov	r1, r5
 801189e:	f00e fa4e 	bl	801fd3e <memcpy>
 80118a2:	4642      	mov	r2, r8
 80118a4:	19a9      	adds	r1, r5, r6
 80118a6:	68a0      	ldr	r0, [r4, #8]
 80118a8:	f00e fa49 	bl	801fd3e <memcpy>
 80118ac:	e7a1      	b.n	80117f2 <ucdr_serialize_int32_t+0x72>
 80118ae:	bf00      	nop

080118b0 <ucdr_deserialize_int32_t>:
 80118b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118b4:	4604      	mov	r4, r0
 80118b6:	460d      	mov	r5, r1
 80118b8:	2104      	movs	r1, #4
 80118ba:	f000 fc15 	bl	80120e8 <ucdr_buffer_alignment>
 80118be:	4601      	mov	r1, r0
 80118c0:	4620      	mov	r0, r4
 80118c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80118c6:	f000 fc57 	bl	8012178 <ucdr_advance_buffer>
 80118ca:	2104      	movs	r1, #4
 80118cc:	4620      	mov	r0, r4
 80118ce:	f000 fbab 	bl	8012028 <ucdr_check_buffer_available_for>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d138      	bne.n	8011948 <ucdr_deserialize_int32_t+0x98>
 80118d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80118da:	42b7      	cmp	r7, r6
 80118dc:	d92f      	bls.n	801193e <ucdr_deserialize_int32_t+0x8e>
 80118de:	6923      	ldr	r3, [r4, #16]
 80118e0:	4620      	mov	r0, r4
 80118e2:	60a7      	str	r7, [r4, #8]
 80118e4:	1bbf      	subs	r7, r7, r6
 80118e6:	443b      	add	r3, r7
 80118e8:	f1c7 0904 	rsb	r9, r7, #4
 80118ec:	6123      	str	r3, [r4, #16]
 80118ee:	4649      	mov	r1, r9
 80118f0:	f000 fba6 	bl	8012040 <ucdr_check_final_buffer_behavior>
 80118f4:	2800      	cmp	r0, #0
 80118f6:	d046      	beq.n	8011986 <ucdr_deserialize_int32_t+0xd6>
 80118f8:	7d23      	ldrb	r3, [r4, #20]
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d05c      	beq.n	80119b8 <ucdr_deserialize_int32_t+0x108>
 80118fe:	78f3      	ldrb	r3, [r6, #3]
 8011900:	702b      	strb	r3, [r5, #0]
 8011902:	2f00      	cmp	r7, #0
 8011904:	d04c      	beq.n	80119a0 <ucdr_deserialize_int32_t+0xf0>
 8011906:	78b3      	ldrb	r3, [r6, #2]
 8011908:	2f01      	cmp	r7, #1
 801190a:	706b      	strb	r3, [r5, #1]
 801190c:	f105 0302 	add.w	r3, r5, #2
 8011910:	d04a      	beq.n	80119a8 <ucdr_deserialize_int32_t+0xf8>
 8011912:	7873      	ldrb	r3, [r6, #1]
 8011914:	2f02      	cmp	r7, #2
 8011916:	70ab      	strb	r3, [r5, #2]
 8011918:	f105 0303 	add.w	r3, r5, #3
 801191c:	d048      	beq.n	80119b0 <ucdr_deserialize_int32_t+0x100>
 801191e:	7833      	ldrb	r3, [r6, #0]
 8011920:	70eb      	strb	r3, [r5, #3]
 8011922:	6923      	ldr	r3, [r4, #16]
 8011924:	2104      	movs	r1, #4
 8011926:	68a2      	ldr	r2, [r4, #8]
 8011928:	3304      	adds	r3, #4
 801192a:	7da0      	ldrb	r0, [r4, #22]
 801192c:	444a      	add	r2, r9
 801192e:	7561      	strb	r1, [r4, #21]
 8011930:	1bdb      	subs	r3, r3, r7
 8011932:	f080 0001 	eor.w	r0, r0, #1
 8011936:	60a2      	str	r2, [r4, #8]
 8011938:	6123      	str	r3, [r4, #16]
 801193a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801193e:	2104      	movs	r1, #4
 8011940:	4620      	mov	r0, r4
 8011942:	f000 fb7d 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011946:	b1b0      	cbz	r0, 8011976 <ucdr_deserialize_int32_t+0xc6>
 8011948:	7d23      	ldrb	r3, [r4, #20]
 801194a:	2b01      	cmp	r3, #1
 801194c:	68a3      	ldr	r3, [r4, #8]
 801194e:	d017      	beq.n	8011980 <ucdr_deserialize_int32_t+0xd0>
 8011950:	78db      	ldrb	r3, [r3, #3]
 8011952:	702b      	strb	r3, [r5, #0]
 8011954:	68a3      	ldr	r3, [r4, #8]
 8011956:	789b      	ldrb	r3, [r3, #2]
 8011958:	706b      	strb	r3, [r5, #1]
 801195a:	68a3      	ldr	r3, [r4, #8]
 801195c:	785b      	ldrb	r3, [r3, #1]
 801195e:	70ab      	strb	r3, [r5, #2]
 8011960:	68a3      	ldr	r3, [r4, #8]
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	70eb      	strb	r3, [r5, #3]
 8011966:	2104      	movs	r1, #4
 8011968:	68a2      	ldr	r2, [r4, #8]
 801196a:	6923      	ldr	r3, [r4, #16]
 801196c:	440a      	add	r2, r1
 801196e:	7561      	strb	r1, [r4, #21]
 8011970:	440b      	add	r3, r1
 8011972:	60a2      	str	r2, [r4, #8]
 8011974:	6123      	str	r3, [r4, #16]
 8011976:	7da0      	ldrb	r0, [r4, #22]
 8011978:	f080 0001 	eor.w	r0, r0, #1
 801197c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	602b      	str	r3, [r5, #0]
 8011984:	e7ef      	b.n	8011966 <ucdr_deserialize_int32_t+0xb6>
 8011986:	68a2      	ldr	r2, [r4, #8]
 8011988:	6923      	ldr	r3, [r4, #16]
 801198a:	1bd2      	subs	r2, r2, r7
 801198c:	7da0      	ldrb	r0, [r4, #22]
 801198e:	1bdb      	subs	r3, r3, r7
 8011990:	f884 8015 	strb.w	r8, [r4, #21]
 8011994:	f080 0001 	eor.w	r0, r0, #1
 8011998:	60a2      	str	r2, [r4, #8]
 801199a:	6123      	str	r3, [r4, #16]
 801199c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119a0:	68a3      	ldr	r3, [r4, #8]
 80119a2:	789b      	ldrb	r3, [r3, #2]
 80119a4:	706b      	strb	r3, [r5, #1]
 80119a6:	1cab      	adds	r3, r5, #2
 80119a8:	68a2      	ldr	r2, [r4, #8]
 80119aa:	7852      	ldrb	r2, [r2, #1]
 80119ac:	f803 2b01 	strb.w	r2, [r3], #1
 80119b0:	68a2      	ldr	r2, [r4, #8]
 80119b2:	7812      	ldrb	r2, [r2, #0]
 80119b4:	701a      	strb	r2, [r3, #0]
 80119b6:	e7b4      	b.n	8011922 <ucdr_deserialize_int32_t+0x72>
 80119b8:	4631      	mov	r1, r6
 80119ba:	463a      	mov	r2, r7
 80119bc:	4628      	mov	r0, r5
 80119be:	f00e f9be 	bl	801fd3e <memcpy>
 80119c2:	464a      	mov	r2, r9
 80119c4:	19e8      	adds	r0, r5, r7
 80119c6:	68a1      	ldr	r1, [r4, #8]
 80119c8:	f00e f9b9 	bl	801fd3e <memcpy>
 80119cc:	e7a9      	b.n	8011922 <ucdr_deserialize_int32_t+0x72>
 80119ce:	bf00      	nop

080119d0 <ucdr_serialize_int64_t>:
 80119d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d4:	4604      	mov	r4, r0
 80119d6:	b082      	sub	sp, #8
 80119d8:	2108      	movs	r1, #8
 80119da:	e9cd 2300 	strd	r2, r3, [sp]
 80119de:	f000 fb83 	bl	80120e8 <ucdr_buffer_alignment>
 80119e2:	4601      	mov	r1, r0
 80119e4:	4620      	mov	r0, r4
 80119e6:	7d67      	ldrb	r7, [r4, #21]
 80119e8:	f000 fbc6 	bl	8012178 <ucdr_advance_buffer>
 80119ec:	2108      	movs	r1, #8
 80119ee:	4620      	mov	r0, r4
 80119f0:	f000 fb1a 	bl	8012028 <ucdr_check_buffer_available_for>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d14e      	bne.n	8011a96 <ucdr_serialize_int64_t+0xc6>
 80119f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80119fc:	42ab      	cmp	r3, r5
 80119fe:	d945      	bls.n	8011a8c <ucdr_serialize_int64_t+0xbc>
 8011a00:	1b5e      	subs	r6, r3, r5
 8011a02:	60a3      	str	r3, [r4, #8]
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	4620      	mov	r0, r4
 8011a08:	f1c6 0808 	rsb	r8, r6, #8
 8011a0c:	4433      	add	r3, r6
 8011a0e:	4641      	mov	r1, r8
 8011a10:	6123      	str	r3, [r4, #16]
 8011a12:	f000 fb15 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d074      	beq.n	8011b04 <ucdr_serialize_int64_t+0x134>
 8011a1a:	7d23      	ldrb	r3, [r4, #20]
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	f000 809b 	beq.w	8011b58 <ucdr_serialize_int64_t+0x188>
 8011a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011a26:	702b      	strb	r3, [r5, #0]
 8011a28:	2e00      	cmp	r6, #0
 8011a2a:	d078      	beq.n	8011b1e <ucdr_serialize_int64_t+0x14e>
 8011a2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011a30:	2e01      	cmp	r6, #1
 8011a32:	706b      	strb	r3, [r5, #1]
 8011a34:	d077      	beq.n	8011b26 <ucdr_serialize_int64_t+0x156>
 8011a36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011a3a:	2e02      	cmp	r6, #2
 8011a3c:	70ab      	strb	r3, [r5, #2]
 8011a3e:	d076      	beq.n	8011b2e <ucdr_serialize_int64_t+0x15e>
 8011a40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011a44:	2e03      	cmp	r6, #3
 8011a46:	70eb      	strb	r3, [r5, #3]
 8011a48:	d075      	beq.n	8011b36 <ucdr_serialize_int64_t+0x166>
 8011a4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011a4e:	2e04      	cmp	r6, #4
 8011a50:	712b      	strb	r3, [r5, #4]
 8011a52:	d074      	beq.n	8011b3e <ucdr_serialize_int64_t+0x16e>
 8011a54:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011a58:	2e05      	cmp	r6, #5
 8011a5a:	716b      	strb	r3, [r5, #5]
 8011a5c:	d073      	beq.n	8011b46 <ucdr_serialize_int64_t+0x176>
 8011a5e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011a62:	2e06      	cmp	r6, #6
 8011a64:	71ab      	strb	r3, [r5, #6]
 8011a66:	d072      	beq.n	8011b4e <ucdr_serialize_int64_t+0x17e>
 8011a68:	f89d 3000 	ldrb.w	r3, [sp]
 8011a6c:	71eb      	strb	r3, [r5, #7]
 8011a6e:	6923      	ldr	r3, [r4, #16]
 8011a70:	2108      	movs	r1, #8
 8011a72:	68a2      	ldr	r2, [r4, #8]
 8011a74:	3308      	adds	r3, #8
 8011a76:	7da0      	ldrb	r0, [r4, #22]
 8011a78:	4442      	add	r2, r8
 8011a7a:	7561      	strb	r1, [r4, #21]
 8011a7c:	1b9e      	subs	r6, r3, r6
 8011a7e:	f080 0001 	eor.w	r0, r0, #1
 8011a82:	60a2      	str	r2, [r4, #8]
 8011a84:	6126      	str	r6, [r4, #16]
 8011a86:	b002      	add	sp, #8
 8011a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a8c:	2108      	movs	r1, #8
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f000 fad6 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011a94:	b350      	cbz	r0, 8011aec <ucdr_serialize_int64_t+0x11c>
 8011a96:	7d23      	ldrb	r3, [r4, #20]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d02d      	beq.n	8011af8 <ucdr_serialize_int64_t+0x128>
 8011a9c:	68a3      	ldr	r3, [r4, #8]
 8011a9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011aa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011aa6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011aaa:	7018      	strb	r0, [r3, #0]
 8011aac:	68a3      	ldr	r3, [r4, #8]
 8011aae:	705a      	strb	r2, [r3, #1]
 8011ab0:	68a3      	ldr	r3, [r4, #8]
 8011ab2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011ab6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011aba:	7099      	strb	r1, [r3, #2]
 8011abc:	68a3      	ldr	r3, [r4, #8]
 8011abe:	70da      	strb	r2, [r3, #3]
 8011ac0:	68a3      	ldr	r3, [r4, #8]
 8011ac2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011ac6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8011aca:	7118      	strb	r0, [r3, #4]
 8011acc:	68a3      	ldr	r3, [r4, #8]
 8011ace:	715a      	strb	r2, [r3, #5]
 8011ad0:	68a3      	ldr	r3, [r4, #8]
 8011ad2:	f89d 2000 	ldrb.w	r2, [sp]
 8011ad6:	7199      	strb	r1, [r3, #6]
 8011ad8:	68a3      	ldr	r3, [r4, #8]
 8011ada:	71da      	strb	r2, [r3, #7]
 8011adc:	2108      	movs	r1, #8
 8011ade:	68a2      	ldr	r2, [r4, #8]
 8011ae0:	6923      	ldr	r3, [r4, #16]
 8011ae2:	440a      	add	r2, r1
 8011ae4:	7561      	strb	r1, [r4, #21]
 8011ae6:	440b      	add	r3, r1
 8011ae8:	60a2      	str	r2, [r4, #8]
 8011aea:	6123      	str	r3, [r4, #16]
 8011aec:	7da0      	ldrb	r0, [r4, #22]
 8011aee:	f080 0001 	eor.w	r0, r0, #1
 8011af2:	b002      	add	sp, #8
 8011af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af8:	466b      	mov	r3, sp
 8011afa:	68a2      	ldr	r2, [r4, #8]
 8011afc:	cb03      	ldmia	r3!, {r0, r1}
 8011afe:	6010      	str	r0, [r2, #0]
 8011b00:	6051      	str	r1, [r2, #4]
 8011b02:	e7eb      	b.n	8011adc <ucdr_serialize_int64_t+0x10c>
 8011b04:	68a2      	ldr	r2, [r4, #8]
 8011b06:	6923      	ldr	r3, [r4, #16]
 8011b08:	7da0      	ldrb	r0, [r4, #22]
 8011b0a:	1b92      	subs	r2, r2, r6
 8011b0c:	1b9b      	subs	r3, r3, r6
 8011b0e:	7567      	strb	r7, [r4, #21]
 8011b10:	f080 0001 	eor.w	r0, r0, #1
 8011b14:	60a2      	str	r2, [r4, #8]
 8011b16:	6123      	str	r3, [r4, #16]
 8011b18:	b002      	add	sp, #8
 8011b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b1e:	68a3      	ldr	r3, [r4, #8]
 8011b20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b24:	701a      	strb	r2, [r3, #0]
 8011b26:	68a3      	ldr	r3, [r4, #8]
 8011b28:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011b2c:	701a      	strb	r2, [r3, #0]
 8011b2e:	68a3      	ldr	r3, [r4, #8]
 8011b30:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b34:	701a      	strb	r2, [r3, #0]
 8011b36:	68a3      	ldr	r3, [r4, #8]
 8011b38:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011b3c:	701a      	strb	r2, [r3, #0]
 8011b3e:	68a3      	ldr	r3, [r4, #8]
 8011b40:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011b44:	701a      	strb	r2, [r3, #0]
 8011b46:	68a3      	ldr	r3, [r4, #8]
 8011b48:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011b4c:	701a      	strb	r2, [r3, #0]
 8011b4e:	68a3      	ldr	r3, [r4, #8]
 8011b50:	f89d 2000 	ldrb.w	r2, [sp]
 8011b54:	701a      	strb	r2, [r3, #0]
 8011b56:	e78a      	b.n	8011a6e <ucdr_serialize_int64_t+0x9e>
 8011b58:	4628      	mov	r0, r5
 8011b5a:	466d      	mov	r5, sp
 8011b5c:	4632      	mov	r2, r6
 8011b5e:	4629      	mov	r1, r5
 8011b60:	f00e f8ed 	bl	801fd3e <memcpy>
 8011b64:	4642      	mov	r2, r8
 8011b66:	19a9      	adds	r1, r5, r6
 8011b68:	68a0      	ldr	r0, [r4, #8]
 8011b6a:	f00e f8e8 	bl	801fd3e <memcpy>
 8011b6e:	e77e      	b.n	8011a6e <ucdr_serialize_int64_t+0x9e>

08011b70 <ucdr_deserialize_int64_t>:
 8011b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b74:	4604      	mov	r4, r0
 8011b76:	460d      	mov	r5, r1
 8011b78:	2108      	movs	r1, #8
 8011b7a:	f000 fab5 	bl	80120e8 <ucdr_buffer_alignment>
 8011b7e:	4601      	mov	r1, r0
 8011b80:	4620      	mov	r0, r4
 8011b82:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011b86:	f000 faf7 	bl	8012178 <ucdr_advance_buffer>
 8011b8a:	2108      	movs	r1, #8
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	f000 fa4b 	bl	8012028 <ucdr_check_buffer_available_for>
 8011b92:	2800      	cmp	r0, #0
 8011b94:	d151      	bne.n	8011c3a <ucdr_deserialize_int64_t+0xca>
 8011b96:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011b9a:	42be      	cmp	r6, r7
 8011b9c:	d948      	bls.n	8011c30 <ucdr_deserialize_int64_t+0xc0>
 8011b9e:	6923      	ldr	r3, [r4, #16]
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	60a6      	str	r6, [r4, #8]
 8011ba4:	1bf6      	subs	r6, r6, r7
 8011ba6:	4433      	add	r3, r6
 8011ba8:	f1c6 0908 	rsb	r9, r6, #8
 8011bac:	6123      	str	r3, [r4, #16]
 8011bae:	4649      	mov	r1, r9
 8011bb0:	f000 fa46 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	d06d      	beq.n	8011c94 <ucdr_deserialize_int64_t+0x124>
 8011bb8:	7d23      	ldrb	r3, [r4, #20]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	f000 8093 	beq.w	8011ce6 <ucdr_deserialize_int64_t+0x176>
 8011bc0:	79fb      	ldrb	r3, [r7, #7]
 8011bc2:	702b      	strb	r3, [r5, #0]
 8011bc4:	2e00      	cmp	r6, #0
 8011bc6:	d072      	beq.n	8011cae <ucdr_deserialize_int64_t+0x13e>
 8011bc8:	79bb      	ldrb	r3, [r7, #6]
 8011bca:	2e01      	cmp	r6, #1
 8011bcc:	706b      	strb	r3, [r5, #1]
 8011bce:	f105 0302 	add.w	r3, r5, #2
 8011bd2:	d070      	beq.n	8011cb6 <ucdr_deserialize_int64_t+0x146>
 8011bd4:	797b      	ldrb	r3, [r7, #5]
 8011bd6:	2e02      	cmp	r6, #2
 8011bd8:	70ab      	strb	r3, [r5, #2]
 8011bda:	f105 0303 	add.w	r3, r5, #3
 8011bde:	d06e      	beq.n	8011cbe <ucdr_deserialize_int64_t+0x14e>
 8011be0:	793b      	ldrb	r3, [r7, #4]
 8011be2:	2e03      	cmp	r6, #3
 8011be4:	70eb      	strb	r3, [r5, #3]
 8011be6:	f105 0304 	add.w	r3, r5, #4
 8011bea:	d06c      	beq.n	8011cc6 <ucdr_deserialize_int64_t+0x156>
 8011bec:	78fb      	ldrb	r3, [r7, #3]
 8011bee:	2e04      	cmp	r6, #4
 8011bf0:	712b      	strb	r3, [r5, #4]
 8011bf2:	f105 0305 	add.w	r3, r5, #5
 8011bf6:	d06a      	beq.n	8011cce <ucdr_deserialize_int64_t+0x15e>
 8011bf8:	78bb      	ldrb	r3, [r7, #2]
 8011bfa:	2e05      	cmp	r6, #5
 8011bfc:	716b      	strb	r3, [r5, #5]
 8011bfe:	f105 0306 	add.w	r3, r5, #6
 8011c02:	d068      	beq.n	8011cd6 <ucdr_deserialize_int64_t+0x166>
 8011c04:	787b      	ldrb	r3, [r7, #1]
 8011c06:	2e06      	cmp	r6, #6
 8011c08:	71ab      	strb	r3, [r5, #6]
 8011c0a:	f105 0307 	add.w	r3, r5, #7
 8011c0e:	d066      	beq.n	8011cde <ucdr_deserialize_int64_t+0x16e>
 8011c10:	783b      	ldrb	r3, [r7, #0]
 8011c12:	71eb      	strb	r3, [r5, #7]
 8011c14:	6923      	ldr	r3, [r4, #16]
 8011c16:	2108      	movs	r1, #8
 8011c18:	68a2      	ldr	r2, [r4, #8]
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	7da0      	ldrb	r0, [r4, #22]
 8011c1e:	444a      	add	r2, r9
 8011c20:	7561      	strb	r1, [r4, #21]
 8011c22:	1b9e      	subs	r6, r3, r6
 8011c24:	f080 0001 	eor.w	r0, r0, #1
 8011c28:	60a2      	str	r2, [r4, #8]
 8011c2a:	6126      	str	r6, [r4, #16]
 8011c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c30:	2108      	movs	r1, #8
 8011c32:	4620      	mov	r0, r4
 8011c34:	f000 fa04 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011c38:	b310      	cbz	r0, 8011c80 <ucdr_deserialize_int64_t+0x110>
 8011c3a:	7d23      	ldrb	r3, [r4, #20]
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	68a3      	ldr	r3, [r4, #8]
 8011c40:	d023      	beq.n	8011c8a <ucdr_deserialize_int64_t+0x11a>
 8011c42:	79db      	ldrb	r3, [r3, #7]
 8011c44:	702b      	strb	r3, [r5, #0]
 8011c46:	68a3      	ldr	r3, [r4, #8]
 8011c48:	799b      	ldrb	r3, [r3, #6]
 8011c4a:	706b      	strb	r3, [r5, #1]
 8011c4c:	68a3      	ldr	r3, [r4, #8]
 8011c4e:	795b      	ldrb	r3, [r3, #5]
 8011c50:	70ab      	strb	r3, [r5, #2]
 8011c52:	68a3      	ldr	r3, [r4, #8]
 8011c54:	791b      	ldrb	r3, [r3, #4]
 8011c56:	70eb      	strb	r3, [r5, #3]
 8011c58:	68a3      	ldr	r3, [r4, #8]
 8011c5a:	78db      	ldrb	r3, [r3, #3]
 8011c5c:	712b      	strb	r3, [r5, #4]
 8011c5e:	68a3      	ldr	r3, [r4, #8]
 8011c60:	789b      	ldrb	r3, [r3, #2]
 8011c62:	716b      	strb	r3, [r5, #5]
 8011c64:	68a3      	ldr	r3, [r4, #8]
 8011c66:	785b      	ldrb	r3, [r3, #1]
 8011c68:	71ab      	strb	r3, [r5, #6]
 8011c6a:	68a3      	ldr	r3, [r4, #8]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	71eb      	strb	r3, [r5, #7]
 8011c70:	2108      	movs	r1, #8
 8011c72:	68a2      	ldr	r2, [r4, #8]
 8011c74:	6923      	ldr	r3, [r4, #16]
 8011c76:	440a      	add	r2, r1
 8011c78:	7561      	strb	r1, [r4, #21]
 8011c7a:	440b      	add	r3, r1
 8011c7c:	60a2      	str	r2, [r4, #8]
 8011c7e:	6123      	str	r3, [r4, #16]
 8011c80:	7da0      	ldrb	r0, [r4, #22]
 8011c82:	f080 0001 	eor.w	r0, r0, #1
 8011c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	602a      	str	r2, [r5, #0]
 8011c90:	606b      	str	r3, [r5, #4]
 8011c92:	e7ed      	b.n	8011c70 <ucdr_deserialize_int64_t+0x100>
 8011c94:	68a2      	ldr	r2, [r4, #8]
 8011c96:	6923      	ldr	r3, [r4, #16]
 8011c98:	1b92      	subs	r2, r2, r6
 8011c9a:	7da0      	ldrb	r0, [r4, #22]
 8011c9c:	1b9b      	subs	r3, r3, r6
 8011c9e:	f884 8015 	strb.w	r8, [r4, #21]
 8011ca2:	f080 0001 	eor.w	r0, r0, #1
 8011ca6:	60a2      	str	r2, [r4, #8]
 8011ca8:	6123      	str	r3, [r4, #16]
 8011caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cae:	68a3      	ldr	r3, [r4, #8]
 8011cb0:	799b      	ldrb	r3, [r3, #6]
 8011cb2:	706b      	strb	r3, [r5, #1]
 8011cb4:	1cab      	adds	r3, r5, #2
 8011cb6:	68a2      	ldr	r2, [r4, #8]
 8011cb8:	7952      	ldrb	r2, [r2, #5]
 8011cba:	f803 2b01 	strb.w	r2, [r3], #1
 8011cbe:	68a2      	ldr	r2, [r4, #8]
 8011cc0:	7912      	ldrb	r2, [r2, #4]
 8011cc2:	f803 2b01 	strb.w	r2, [r3], #1
 8011cc6:	68a2      	ldr	r2, [r4, #8]
 8011cc8:	78d2      	ldrb	r2, [r2, #3]
 8011cca:	f803 2b01 	strb.w	r2, [r3], #1
 8011cce:	68a2      	ldr	r2, [r4, #8]
 8011cd0:	7892      	ldrb	r2, [r2, #2]
 8011cd2:	f803 2b01 	strb.w	r2, [r3], #1
 8011cd6:	68a2      	ldr	r2, [r4, #8]
 8011cd8:	7852      	ldrb	r2, [r2, #1]
 8011cda:	f803 2b01 	strb.w	r2, [r3], #1
 8011cde:	68a2      	ldr	r2, [r4, #8]
 8011ce0:	7812      	ldrb	r2, [r2, #0]
 8011ce2:	701a      	strb	r2, [r3, #0]
 8011ce4:	e796      	b.n	8011c14 <ucdr_deserialize_int64_t+0xa4>
 8011ce6:	4639      	mov	r1, r7
 8011ce8:	4632      	mov	r2, r6
 8011cea:	4628      	mov	r0, r5
 8011cec:	f00e f827 	bl	801fd3e <memcpy>
 8011cf0:	464a      	mov	r2, r9
 8011cf2:	19a8      	adds	r0, r5, r6
 8011cf4:	68a1      	ldr	r1, [r4, #8]
 8011cf6:	f00e f822 	bl	801fd3e <memcpy>
 8011cfa:	e78b      	b.n	8011c14 <ucdr_deserialize_int64_t+0xa4>

08011cfc <ucdr_serialize_double>:
 8011cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d00:	4604      	mov	r4, r0
 8011d02:	b082      	sub	sp, #8
 8011d04:	2108      	movs	r1, #8
 8011d06:	ed8d 0b00 	vstr	d0, [sp]
 8011d0a:	f000 f9ed 	bl	80120e8 <ucdr_buffer_alignment>
 8011d0e:	4601      	mov	r1, r0
 8011d10:	4620      	mov	r0, r4
 8011d12:	7d67      	ldrb	r7, [r4, #21]
 8011d14:	f000 fa30 	bl	8012178 <ucdr_advance_buffer>
 8011d18:	2108      	movs	r1, #8
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f000 f984 	bl	8012028 <ucdr_check_buffer_available_for>
 8011d20:	2800      	cmp	r0, #0
 8011d22:	d14e      	bne.n	8011dc2 <ucdr_serialize_double+0xc6>
 8011d24:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011d28:	42ab      	cmp	r3, r5
 8011d2a:	d945      	bls.n	8011db8 <ucdr_serialize_double+0xbc>
 8011d2c:	1b5e      	subs	r6, r3, r5
 8011d2e:	60a3      	str	r3, [r4, #8]
 8011d30:	6923      	ldr	r3, [r4, #16]
 8011d32:	4620      	mov	r0, r4
 8011d34:	f1c6 0808 	rsb	r8, r6, #8
 8011d38:	4433      	add	r3, r6
 8011d3a:	4641      	mov	r1, r8
 8011d3c:	6123      	str	r3, [r4, #16]
 8011d3e:	f000 f97f 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011d42:	2800      	cmp	r0, #0
 8011d44:	d074      	beq.n	8011e30 <ucdr_serialize_double+0x134>
 8011d46:	7d23      	ldrb	r3, [r4, #20]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	f000 809b 	beq.w	8011e84 <ucdr_serialize_double+0x188>
 8011d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d52:	702b      	strb	r3, [r5, #0]
 8011d54:	2e00      	cmp	r6, #0
 8011d56:	d078      	beq.n	8011e4a <ucdr_serialize_double+0x14e>
 8011d58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d5c:	2e01      	cmp	r6, #1
 8011d5e:	706b      	strb	r3, [r5, #1]
 8011d60:	d077      	beq.n	8011e52 <ucdr_serialize_double+0x156>
 8011d62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011d66:	2e02      	cmp	r6, #2
 8011d68:	70ab      	strb	r3, [r5, #2]
 8011d6a:	d076      	beq.n	8011e5a <ucdr_serialize_double+0x15e>
 8011d6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011d70:	2e03      	cmp	r6, #3
 8011d72:	70eb      	strb	r3, [r5, #3]
 8011d74:	d075      	beq.n	8011e62 <ucdr_serialize_double+0x166>
 8011d76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011d7a:	2e04      	cmp	r6, #4
 8011d7c:	712b      	strb	r3, [r5, #4]
 8011d7e:	d074      	beq.n	8011e6a <ucdr_serialize_double+0x16e>
 8011d80:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011d84:	2e05      	cmp	r6, #5
 8011d86:	716b      	strb	r3, [r5, #5]
 8011d88:	d073      	beq.n	8011e72 <ucdr_serialize_double+0x176>
 8011d8a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011d8e:	2e06      	cmp	r6, #6
 8011d90:	71ab      	strb	r3, [r5, #6]
 8011d92:	d072      	beq.n	8011e7a <ucdr_serialize_double+0x17e>
 8011d94:	f89d 3000 	ldrb.w	r3, [sp]
 8011d98:	71eb      	strb	r3, [r5, #7]
 8011d9a:	6923      	ldr	r3, [r4, #16]
 8011d9c:	2108      	movs	r1, #8
 8011d9e:	68a2      	ldr	r2, [r4, #8]
 8011da0:	3308      	adds	r3, #8
 8011da2:	7da0      	ldrb	r0, [r4, #22]
 8011da4:	4442      	add	r2, r8
 8011da6:	7561      	strb	r1, [r4, #21]
 8011da8:	1b9e      	subs	r6, r3, r6
 8011daa:	f080 0001 	eor.w	r0, r0, #1
 8011dae:	60a2      	str	r2, [r4, #8]
 8011db0:	6126      	str	r6, [r4, #16]
 8011db2:	b002      	add	sp, #8
 8011db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db8:	2108      	movs	r1, #8
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f000 f940 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011dc0:	b350      	cbz	r0, 8011e18 <ucdr_serialize_double+0x11c>
 8011dc2:	7d23      	ldrb	r3, [r4, #20]
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d02d      	beq.n	8011e24 <ucdr_serialize_double+0x128>
 8011dc8:	68a3      	ldr	r3, [r4, #8]
 8011dca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011dce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011dd2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011dd6:	7018      	strb	r0, [r3, #0]
 8011dd8:	68a3      	ldr	r3, [r4, #8]
 8011dda:	705a      	strb	r2, [r3, #1]
 8011ddc:	68a3      	ldr	r3, [r4, #8]
 8011dde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011de2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011de6:	7099      	strb	r1, [r3, #2]
 8011de8:	68a3      	ldr	r3, [r4, #8]
 8011dea:	70da      	strb	r2, [r3, #3]
 8011dec:	68a3      	ldr	r3, [r4, #8]
 8011dee:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011df2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8011df6:	7118      	strb	r0, [r3, #4]
 8011df8:	68a3      	ldr	r3, [r4, #8]
 8011dfa:	715a      	strb	r2, [r3, #5]
 8011dfc:	68a3      	ldr	r3, [r4, #8]
 8011dfe:	f89d 2000 	ldrb.w	r2, [sp]
 8011e02:	7199      	strb	r1, [r3, #6]
 8011e04:	68a3      	ldr	r3, [r4, #8]
 8011e06:	71da      	strb	r2, [r3, #7]
 8011e08:	2108      	movs	r1, #8
 8011e0a:	68a2      	ldr	r2, [r4, #8]
 8011e0c:	6923      	ldr	r3, [r4, #16]
 8011e0e:	440a      	add	r2, r1
 8011e10:	7561      	strb	r1, [r4, #21]
 8011e12:	440b      	add	r3, r1
 8011e14:	60a2      	str	r2, [r4, #8]
 8011e16:	6123      	str	r3, [r4, #16]
 8011e18:	7da0      	ldrb	r0, [r4, #22]
 8011e1a:	f080 0001 	eor.w	r0, r0, #1
 8011e1e:	b002      	add	sp, #8
 8011e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e24:	466b      	mov	r3, sp
 8011e26:	68a2      	ldr	r2, [r4, #8]
 8011e28:	cb03      	ldmia	r3!, {r0, r1}
 8011e2a:	6010      	str	r0, [r2, #0]
 8011e2c:	6051      	str	r1, [r2, #4]
 8011e2e:	e7eb      	b.n	8011e08 <ucdr_serialize_double+0x10c>
 8011e30:	68a2      	ldr	r2, [r4, #8]
 8011e32:	6923      	ldr	r3, [r4, #16]
 8011e34:	7da0      	ldrb	r0, [r4, #22]
 8011e36:	1b92      	subs	r2, r2, r6
 8011e38:	1b9b      	subs	r3, r3, r6
 8011e3a:	7567      	strb	r7, [r4, #21]
 8011e3c:	f080 0001 	eor.w	r0, r0, #1
 8011e40:	60a2      	str	r2, [r4, #8]
 8011e42:	6123      	str	r3, [r4, #16]
 8011e44:	b002      	add	sp, #8
 8011e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e4a:	68a3      	ldr	r3, [r4, #8]
 8011e4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e50:	701a      	strb	r2, [r3, #0]
 8011e52:	68a3      	ldr	r3, [r4, #8]
 8011e54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e58:	701a      	strb	r2, [r3, #0]
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e60:	701a      	strb	r2, [r3, #0]
 8011e62:	68a3      	ldr	r3, [r4, #8]
 8011e64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011e68:	701a      	strb	r2, [r3, #0]
 8011e6a:	68a3      	ldr	r3, [r4, #8]
 8011e6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011e70:	701a      	strb	r2, [r3, #0]
 8011e72:	68a3      	ldr	r3, [r4, #8]
 8011e74:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011e78:	701a      	strb	r2, [r3, #0]
 8011e7a:	68a3      	ldr	r3, [r4, #8]
 8011e7c:	f89d 2000 	ldrb.w	r2, [sp]
 8011e80:	701a      	strb	r2, [r3, #0]
 8011e82:	e78a      	b.n	8011d9a <ucdr_serialize_double+0x9e>
 8011e84:	4628      	mov	r0, r5
 8011e86:	466d      	mov	r5, sp
 8011e88:	4632      	mov	r2, r6
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	f00d ff57 	bl	801fd3e <memcpy>
 8011e90:	4642      	mov	r2, r8
 8011e92:	19a9      	adds	r1, r5, r6
 8011e94:	68a0      	ldr	r0, [r4, #8]
 8011e96:	f00d ff52 	bl	801fd3e <memcpy>
 8011e9a:	e77e      	b.n	8011d9a <ucdr_serialize_double+0x9e>

08011e9c <ucdr_deserialize_double>:
 8011e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	460d      	mov	r5, r1
 8011ea4:	2108      	movs	r1, #8
 8011ea6:	f000 f91f 	bl	80120e8 <ucdr_buffer_alignment>
 8011eaa:	4601      	mov	r1, r0
 8011eac:	4620      	mov	r0, r4
 8011eae:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011eb2:	f000 f961 	bl	8012178 <ucdr_advance_buffer>
 8011eb6:	2108      	movs	r1, #8
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f000 f8b5 	bl	8012028 <ucdr_check_buffer_available_for>
 8011ebe:	2800      	cmp	r0, #0
 8011ec0:	d151      	bne.n	8011f66 <ucdr_deserialize_double+0xca>
 8011ec2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011ec6:	42be      	cmp	r6, r7
 8011ec8:	d948      	bls.n	8011f5c <ucdr_deserialize_double+0xc0>
 8011eca:	6923      	ldr	r3, [r4, #16]
 8011ecc:	4620      	mov	r0, r4
 8011ece:	60a6      	str	r6, [r4, #8]
 8011ed0:	1bf6      	subs	r6, r6, r7
 8011ed2:	4433      	add	r3, r6
 8011ed4:	f1c6 0908 	rsb	r9, r6, #8
 8011ed8:	6123      	str	r3, [r4, #16]
 8011eda:	4649      	mov	r1, r9
 8011edc:	f000 f8b0 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	d06d      	beq.n	8011fc0 <ucdr_deserialize_double+0x124>
 8011ee4:	7d23      	ldrb	r3, [r4, #20]
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	f000 8093 	beq.w	8012012 <ucdr_deserialize_double+0x176>
 8011eec:	79fb      	ldrb	r3, [r7, #7]
 8011eee:	702b      	strb	r3, [r5, #0]
 8011ef0:	2e00      	cmp	r6, #0
 8011ef2:	d072      	beq.n	8011fda <ucdr_deserialize_double+0x13e>
 8011ef4:	79bb      	ldrb	r3, [r7, #6]
 8011ef6:	2e01      	cmp	r6, #1
 8011ef8:	706b      	strb	r3, [r5, #1]
 8011efa:	f105 0302 	add.w	r3, r5, #2
 8011efe:	d070      	beq.n	8011fe2 <ucdr_deserialize_double+0x146>
 8011f00:	797b      	ldrb	r3, [r7, #5]
 8011f02:	2e02      	cmp	r6, #2
 8011f04:	70ab      	strb	r3, [r5, #2]
 8011f06:	f105 0303 	add.w	r3, r5, #3
 8011f0a:	d06e      	beq.n	8011fea <ucdr_deserialize_double+0x14e>
 8011f0c:	793b      	ldrb	r3, [r7, #4]
 8011f0e:	2e03      	cmp	r6, #3
 8011f10:	70eb      	strb	r3, [r5, #3]
 8011f12:	f105 0304 	add.w	r3, r5, #4
 8011f16:	d06c      	beq.n	8011ff2 <ucdr_deserialize_double+0x156>
 8011f18:	78fb      	ldrb	r3, [r7, #3]
 8011f1a:	2e04      	cmp	r6, #4
 8011f1c:	712b      	strb	r3, [r5, #4]
 8011f1e:	f105 0305 	add.w	r3, r5, #5
 8011f22:	d06a      	beq.n	8011ffa <ucdr_deserialize_double+0x15e>
 8011f24:	78bb      	ldrb	r3, [r7, #2]
 8011f26:	2e05      	cmp	r6, #5
 8011f28:	716b      	strb	r3, [r5, #5]
 8011f2a:	f105 0306 	add.w	r3, r5, #6
 8011f2e:	d068      	beq.n	8012002 <ucdr_deserialize_double+0x166>
 8011f30:	787b      	ldrb	r3, [r7, #1]
 8011f32:	2e06      	cmp	r6, #6
 8011f34:	71ab      	strb	r3, [r5, #6]
 8011f36:	f105 0307 	add.w	r3, r5, #7
 8011f3a:	d066      	beq.n	801200a <ucdr_deserialize_double+0x16e>
 8011f3c:	783b      	ldrb	r3, [r7, #0]
 8011f3e:	71eb      	strb	r3, [r5, #7]
 8011f40:	6923      	ldr	r3, [r4, #16]
 8011f42:	2108      	movs	r1, #8
 8011f44:	68a2      	ldr	r2, [r4, #8]
 8011f46:	3308      	adds	r3, #8
 8011f48:	7da0      	ldrb	r0, [r4, #22]
 8011f4a:	444a      	add	r2, r9
 8011f4c:	7561      	strb	r1, [r4, #21]
 8011f4e:	1b9e      	subs	r6, r3, r6
 8011f50:	f080 0001 	eor.w	r0, r0, #1
 8011f54:	60a2      	str	r2, [r4, #8]
 8011f56:	6126      	str	r6, [r4, #16]
 8011f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f5c:	2108      	movs	r1, #8
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f000 f86e 	bl	8012040 <ucdr_check_final_buffer_behavior>
 8011f64:	b310      	cbz	r0, 8011fac <ucdr_deserialize_double+0x110>
 8011f66:	7d23      	ldrb	r3, [r4, #20]
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	68a3      	ldr	r3, [r4, #8]
 8011f6c:	d023      	beq.n	8011fb6 <ucdr_deserialize_double+0x11a>
 8011f6e:	79db      	ldrb	r3, [r3, #7]
 8011f70:	702b      	strb	r3, [r5, #0]
 8011f72:	68a3      	ldr	r3, [r4, #8]
 8011f74:	799b      	ldrb	r3, [r3, #6]
 8011f76:	706b      	strb	r3, [r5, #1]
 8011f78:	68a3      	ldr	r3, [r4, #8]
 8011f7a:	795b      	ldrb	r3, [r3, #5]
 8011f7c:	70ab      	strb	r3, [r5, #2]
 8011f7e:	68a3      	ldr	r3, [r4, #8]
 8011f80:	791b      	ldrb	r3, [r3, #4]
 8011f82:	70eb      	strb	r3, [r5, #3]
 8011f84:	68a3      	ldr	r3, [r4, #8]
 8011f86:	78db      	ldrb	r3, [r3, #3]
 8011f88:	712b      	strb	r3, [r5, #4]
 8011f8a:	68a3      	ldr	r3, [r4, #8]
 8011f8c:	789b      	ldrb	r3, [r3, #2]
 8011f8e:	716b      	strb	r3, [r5, #5]
 8011f90:	68a3      	ldr	r3, [r4, #8]
 8011f92:	785b      	ldrb	r3, [r3, #1]
 8011f94:	71ab      	strb	r3, [r5, #6]
 8011f96:	68a3      	ldr	r3, [r4, #8]
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	71eb      	strb	r3, [r5, #7]
 8011f9c:	2108      	movs	r1, #8
 8011f9e:	68a2      	ldr	r2, [r4, #8]
 8011fa0:	6923      	ldr	r3, [r4, #16]
 8011fa2:	440a      	add	r2, r1
 8011fa4:	7561      	strb	r1, [r4, #21]
 8011fa6:	440b      	add	r3, r1
 8011fa8:	60a2      	str	r2, [r4, #8]
 8011faa:	6123      	str	r3, [r4, #16]
 8011fac:	7da0      	ldrb	r0, [r4, #22]
 8011fae:	f080 0001 	eor.w	r0, r0, #1
 8011fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	602a      	str	r2, [r5, #0]
 8011fbc:	606b      	str	r3, [r5, #4]
 8011fbe:	e7ed      	b.n	8011f9c <ucdr_deserialize_double+0x100>
 8011fc0:	68a2      	ldr	r2, [r4, #8]
 8011fc2:	6923      	ldr	r3, [r4, #16]
 8011fc4:	1b92      	subs	r2, r2, r6
 8011fc6:	7da0      	ldrb	r0, [r4, #22]
 8011fc8:	1b9b      	subs	r3, r3, r6
 8011fca:	f884 8015 	strb.w	r8, [r4, #21]
 8011fce:	f080 0001 	eor.w	r0, r0, #1
 8011fd2:	60a2      	str	r2, [r4, #8]
 8011fd4:	6123      	str	r3, [r4, #16]
 8011fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fda:	68a3      	ldr	r3, [r4, #8]
 8011fdc:	799b      	ldrb	r3, [r3, #6]
 8011fde:	706b      	strb	r3, [r5, #1]
 8011fe0:	1cab      	adds	r3, r5, #2
 8011fe2:	68a2      	ldr	r2, [r4, #8]
 8011fe4:	7952      	ldrb	r2, [r2, #5]
 8011fe6:	f803 2b01 	strb.w	r2, [r3], #1
 8011fea:	68a2      	ldr	r2, [r4, #8]
 8011fec:	7912      	ldrb	r2, [r2, #4]
 8011fee:	f803 2b01 	strb.w	r2, [r3], #1
 8011ff2:	68a2      	ldr	r2, [r4, #8]
 8011ff4:	78d2      	ldrb	r2, [r2, #3]
 8011ff6:	f803 2b01 	strb.w	r2, [r3], #1
 8011ffa:	68a2      	ldr	r2, [r4, #8]
 8011ffc:	7892      	ldrb	r2, [r2, #2]
 8011ffe:	f803 2b01 	strb.w	r2, [r3], #1
 8012002:	68a2      	ldr	r2, [r4, #8]
 8012004:	7852      	ldrb	r2, [r2, #1]
 8012006:	f803 2b01 	strb.w	r2, [r3], #1
 801200a:	68a2      	ldr	r2, [r4, #8]
 801200c:	7812      	ldrb	r2, [r2, #0]
 801200e:	701a      	strb	r2, [r3, #0]
 8012010:	e796      	b.n	8011f40 <ucdr_deserialize_double+0xa4>
 8012012:	4639      	mov	r1, r7
 8012014:	4632      	mov	r2, r6
 8012016:	4628      	mov	r0, r5
 8012018:	f00d fe91 	bl	801fd3e <memcpy>
 801201c:	464a      	mov	r2, r9
 801201e:	19a8      	adds	r0, r5, r6
 8012020:	68a1      	ldr	r1, [r4, #8]
 8012022:	f00d fe8c 	bl	801fd3e <memcpy>
 8012026:	e78b      	b.n	8011f40 <ucdr_deserialize_double+0xa4>

08012028 <ucdr_check_buffer_available_for>:
 8012028:	7d83      	ldrb	r3, [r0, #22]
 801202a:	b93b      	cbnz	r3, 801203c <ucdr_check_buffer_available_for+0x14>
 801202c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012030:	4419      	add	r1, r3
 8012032:	4288      	cmp	r0, r1
 8012034:	bf34      	ite	cc
 8012036:	2000      	movcc	r0, #0
 8012038:	2001      	movcs	r0, #1
 801203a:	4770      	bx	lr
 801203c:	2000      	movs	r0, #0
 801203e:	4770      	bx	lr

08012040 <ucdr_check_final_buffer_behavior>:
 8012040:	7d83      	ldrb	r3, [r0, #22]
 8012042:	b943      	cbnz	r3, 8012056 <ucdr_check_final_buffer_behavior+0x16>
 8012044:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8012048:	b510      	push	{r4, lr}
 801204a:	4291      	cmp	r1, r2
 801204c:	4604      	mov	r4, r0
 801204e:	d205      	bcs.n	801205c <ucdr_check_final_buffer_behavior+0x1c>
 8012050:	2301      	movs	r3, #1
 8012052:	4618      	mov	r0, r3
 8012054:	bd10      	pop	{r4, pc}
 8012056:	2300      	movs	r3, #0
 8012058:	4618      	mov	r0, r3
 801205a:	4770      	bx	lr
 801205c:	6982      	ldr	r2, [r0, #24]
 801205e:	b13a      	cbz	r2, 8012070 <ucdr_check_final_buffer_behavior+0x30>
 8012060:	69c1      	ldr	r1, [r0, #28]
 8012062:	4790      	blx	r2
 8012064:	f080 0301 	eor.w	r3, r0, #1
 8012068:	75a0      	strb	r0, [r4, #22]
 801206a:	b2db      	uxtb	r3, r3
 801206c:	4618      	mov	r0, r3
 801206e:	bd10      	pop	{r4, pc}
 8012070:	2001      	movs	r0, #1
 8012072:	75a0      	strb	r0, [r4, #22]
 8012074:	e7fa      	b.n	801206c <ucdr_check_final_buffer_behavior+0x2c>
 8012076:	bf00      	nop

08012078 <ucdr_set_on_full_buffer_callback>:
 8012078:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801207c:	4770      	bx	lr
 801207e:	bf00      	nop

08012080 <ucdr_init_buffer_origin_offset_endian>:
 8012080:	b410      	push	{r4}
 8012082:	9c01      	ldr	r4, [sp, #4]
 8012084:	440a      	add	r2, r1
 8012086:	6001      	str	r1, [r0, #0]
 8012088:	6042      	str	r2, [r0, #4]
 801208a:	190a      	adds	r2, r1, r4
 801208c:	441c      	add	r4, r3
 801208e:	6082      	str	r2, [r0, #8]
 8012090:	2200      	movs	r2, #0
 8012092:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8012096:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801209a:	7542      	strb	r2, [r0, #21]
 801209c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120a0:	7582      	strb	r2, [r0, #22]
 80120a2:	7503      	strb	r3, [r0, #20]
 80120a4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop

080120ac <ucdr_init_buffer_origin_offset>:
 80120ac:	b510      	push	{r4, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	9c04      	ldr	r4, [sp, #16]
 80120b2:	9400      	str	r4, [sp, #0]
 80120b4:	2401      	movs	r4, #1
 80120b6:	9401      	str	r4, [sp, #4]
 80120b8:	f7ff ffe2 	bl	8012080 <ucdr_init_buffer_origin_offset_endian>
 80120bc:	b002      	add	sp, #8
 80120be:	bd10      	pop	{r4, pc}

080120c0 <ucdr_init_buffer_origin>:
 80120c0:	b510      	push	{r4, lr}
 80120c2:	2400      	movs	r4, #0
 80120c4:	b082      	sub	sp, #8
 80120c6:	9400      	str	r4, [sp, #0]
 80120c8:	f7ff fff0 	bl	80120ac <ucdr_init_buffer_origin_offset>
 80120cc:	b002      	add	sp, #8
 80120ce:	bd10      	pop	{r4, pc}

080120d0 <ucdr_init_buffer>:
 80120d0:	2300      	movs	r3, #0
 80120d2:	f7ff bff5 	b.w	80120c0 <ucdr_init_buffer_origin>
 80120d6:	bf00      	nop

080120d8 <ucdr_alignment>:
 80120d8:	fbb0 f2f1 	udiv	r2, r0, r1
 80120dc:	fb02 0011 	mls	r0, r2, r1, r0
 80120e0:	1e4b      	subs	r3, r1, #1
 80120e2:	1a08      	subs	r0, r1, r0
 80120e4:	4018      	ands	r0, r3
 80120e6:	4770      	bx	lr

080120e8 <ucdr_buffer_alignment>:
 80120e8:	7d43      	ldrb	r3, [r0, #21]
 80120ea:	428b      	cmp	r3, r1
 80120ec:	d209      	bcs.n	8012102 <ucdr_buffer_alignment+0x1a>
 80120ee:	6903      	ldr	r3, [r0, #16]
 80120f0:	1e4a      	subs	r2, r1, #1
 80120f2:	fbb3 f0f1 	udiv	r0, r3, r1
 80120f6:	fb01 3010 	mls	r0, r1, r0, r3
 80120fa:	1a09      	subs	r1, r1, r0
 80120fc:	ea01 0002 	and.w	r0, r1, r2
 8012100:	4770      	bx	lr
 8012102:	2000      	movs	r0, #0
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop

08012108 <ucdr_align_to>:
 8012108:	b538      	push	{r3, r4, r5, lr}
 801210a:	4604      	mov	r4, r0
 801210c:	460d      	mov	r5, r1
 801210e:	f7ff ffeb 	bl	80120e8 <ucdr_buffer_alignment>
 8012112:	68a3      	ldr	r3, [r4, #8]
 8012114:	7565      	strb	r5, [r4, #21]
 8012116:	181a      	adds	r2, r3, r0
 8012118:	6923      	ldr	r3, [r4, #16]
 801211a:	4418      	add	r0, r3
 801211c:	6863      	ldr	r3, [r4, #4]
 801211e:	4293      	cmp	r3, r2
 8012120:	6120      	str	r0, [r4, #16]
 8012122:	bf28      	it	cs
 8012124:	4613      	movcs	r3, r2
 8012126:	60a3      	str	r3, [r4, #8]
 8012128:	bd38      	pop	{r3, r4, r5, pc}
 801212a:	bf00      	nop

0801212c <ucdr_buffer_length>:
 801212c:	6882      	ldr	r2, [r0, #8]
 801212e:	6800      	ldr	r0, [r0, #0]
 8012130:	1a10      	subs	r0, r2, r0
 8012132:	4770      	bx	lr

08012134 <ucdr_buffer_remaining>:
 8012134:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012138:	1a10      	subs	r0, r2, r0
 801213a:	4770      	bx	lr

0801213c <ucdr_check_final_buffer_behavior_array>:
 801213c:	b538      	push	{r3, r4, r5, lr}
 801213e:	7d83      	ldrb	r3, [r0, #22]
 8012140:	b9a3      	cbnz	r3, 801216c <ucdr_check_final_buffer_behavior_array+0x30>
 8012142:	4604      	mov	r4, r0
 8012144:	460d      	mov	r5, r1
 8012146:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801214a:	429a      	cmp	r2, r3
 801214c:	d300      	bcc.n	8012150 <ucdr_check_final_buffer_behavior_array+0x14>
 801214e:	b931      	cbnz	r1, 801215e <ucdr_check_final_buffer_behavior_array+0x22>
 8012150:	4620      	mov	r0, r4
 8012152:	f7ff ffef 	bl	8012134 <ucdr_buffer_remaining>
 8012156:	42a8      	cmp	r0, r5
 8012158:	bf28      	it	cs
 801215a:	4628      	movcs	r0, r5
 801215c:	bd38      	pop	{r3, r4, r5, pc}
 801215e:	6983      	ldr	r3, [r0, #24]
 8012160:	b133      	cbz	r3, 8012170 <ucdr_check_final_buffer_behavior_array+0x34>
 8012162:	69c1      	ldr	r1, [r0, #28]
 8012164:	4798      	blx	r3
 8012166:	75a0      	strb	r0, [r4, #22]
 8012168:	2800      	cmp	r0, #0
 801216a:	d0f1      	beq.n	8012150 <ucdr_check_final_buffer_behavior_array+0x14>
 801216c:	2000      	movs	r0, #0
 801216e:	bd38      	pop	{r3, r4, r5, pc}
 8012170:	2301      	movs	r3, #1
 8012172:	7583      	strb	r3, [r0, #22]
 8012174:	e7fa      	b.n	801216c <ucdr_check_final_buffer_behavior_array+0x30>
 8012176:	bf00      	nop

08012178 <ucdr_advance_buffer>:
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	4604      	mov	r4, r0
 801217c:	460d      	mov	r5, r1
 801217e:	f7ff ff53 	bl	8012028 <ucdr_check_buffer_available_for>
 8012182:	b178      	cbz	r0, 80121a4 <ucdr_advance_buffer+0x2c>
 8012184:	6923      	ldr	r3, [r4, #16]
 8012186:	68a2      	ldr	r2, [r4, #8]
 8012188:	442b      	add	r3, r5
 801218a:	442a      	add	r2, r5
 801218c:	6123      	str	r3, [r4, #16]
 801218e:	2301      	movs	r3, #1
 8012190:	60a2      	str	r2, [r4, #8]
 8012192:	7563      	strb	r3, [r4, #21]
 8012194:	bd38      	pop	{r3, r4, r5, pc}
 8012196:	68a2      	ldr	r2, [r4, #8]
 8012198:	1a2d      	subs	r5, r5, r0
 801219a:	6923      	ldr	r3, [r4, #16]
 801219c:	4402      	add	r2, r0
 801219e:	4418      	add	r0, r3
 80121a0:	60a2      	str	r2, [r4, #8]
 80121a2:	6120      	str	r0, [r4, #16]
 80121a4:	4629      	mov	r1, r5
 80121a6:	2201      	movs	r2, #1
 80121a8:	4620      	mov	r0, r4
 80121aa:	f7ff ffc7 	bl	801213c <ucdr_check_final_buffer_behavior_array>
 80121ae:	2800      	cmp	r0, #0
 80121b0:	d1f1      	bne.n	8012196 <ucdr_advance_buffer+0x1e>
 80121b2:	2301      	movs	r3, #1
 80121b4:	7563      	strb	r3, [r4, #21]
 80121b6:	bd38      	pop	{r3, r4, r5, pc}

080121b8 <ucdr_serialize_sequence_char>:
 80121b8:	b570      	push	{r4, r5, r6, lr}
 80121ba:	4615      	mov	r5, r2
 80121bc:	460e      	mov	r6, r1
 80121be:	7d01      	ldrb	r1, [r0, #20]
 80121c0:	4604      	mov	r4, r0
 80121c2:	f7fe ff5b 	bl	801107c <ucdr_serialize_endian_uint32_t>
 80121c6:	b90d      	cbnz	r5, 80121cc <ucdr_serialize_sequence_char+0x14>
 80121c8:	2001      	movs	r0, #1
 80121ca:	bd70      	pop	{r4, r5, r6, pc}
 80121cc:	462b      	mov	r3, r5
 80121ce:	4632      	mov	r2, r6
 80121d0:	7d21      	ldrb	r1, [r4, #20]
 80121d2:	4620      	mov	r0, r4
 80121d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121d8:	f004 b908 	b.w	80163ec <ucdr_serialize_endian_array_char>

080121dc <ucdr_deserialize_sequence_char>:
 80121dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121e0:	461d      	mov	r5, r3
 80121e2:	4616      	mov	r6, r2
 80121e4:	460f      	mov	r7, r1
 80121e6:	461a      	mov	r2, r3
 80121e8:	7d01      	ldrb	r1, [r0, #20]
 80121ea:	4604      	mov	r4, r0
 80121ec:	f7ff f86e 	bl	80112cc <ucdr_deserialize_endian_uint32_t>
 80121f0:	682b      	ldr	r3, [r5, #0]
 80121f2:	429e      	cmp	r6, r3
 80121f4:	d201      	bcs.n	80121fa <ucdr_deserialize_sequence_char+0x1e>
 80121f6:	2201      	movs	r2, #1
 80121f8:	75a2      	strb	r2, [r4, #22]
 80121fa:	b913      	cbnz	r3, 8012202 <ucdr_deserialize_sequence_char+0x26>
 80121fc:	2001      	movs	r0, #1
 80121fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012202:	463a      	mov	r2, r7
 8012204:	7d21      	ldrb	r1, [r4, #20]
 8012206:	4620      	mov	r0, r4
 8012208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801220c:	f004 b920 	b.w	8016450 <ucdr_deserialize_endian_array_char>

08012210 <ucdr_serialize_sequence_uint8_t>:
 8012210:	b570      	push	{r4, r5, r6, lr}
 8012212:	4615      	mov	r5, r2
 8012214:	460e      	mov	r6, r1
 8012216:	7d01      	ldrb	r1, [r0, #20]
 8012218:	4604      	mov	r4, r0
 801221a:	f7fe ff2f 	bl	801107c <ucdr_serialize_endian_uint32_t>
 801221e:	b90d      	cbnz	r5, 8012224 <ucdr_serialize_sequence_uint8_t+0x14>
 8012220:	2001      	movs	r0, #1
 8012222:	bd70      	pop	{r4, r5, r6, pc}
 8012224:	462b      	mov	r3, r5
 8012226:	4632      	mov	r2, r6
 8012228:	7d21      	ldrb	r1, [r4, #20]
 801222a:	4620      	mov	r0, r4
 801222c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012230:	f004 b974 	b.w	801651c <ucdr_serialize_endian_array_uint8_t>

08012234 <ucdr_deserialize_sequence_uint8_t>:
 8012234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012238:	461d      	mov	r5, r3
 801223a:	4616      	mov	r6, r2
 801223c:	460f      	mov	r7, r1
 801223e:	461a      	mov	r2, r3
 8012240:	7d01      	ldrb	r1, [r0, #20]
 8012242:	4604      	mov	r4, r0
 8012244:	f7ff f842 	bl	80112cc <ucdr_deserialize_endian_uint32_t>
 8012248:	682b      	ldr	r3, [r5, #0]
 801224a:	429e      	cmp	r6, r3
 801224c:	d201      	bcs.n	8012252 <ucdr_deserialize_sequence_uint8_t+0x1e>
 801224e:	2201      	movs	r2, #1
 8012250:	75a2      	strb	r2, [r4, #22]
 8012252:	b913      	cbnz	r3, 801225a <ucdr_deserialize_sequence_uint8_t+0x26>
 8012254:	2001      	movs	r0, #1
 8012256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801225a:	463a      	mov	r2, r7
 801225c:	7d21      	ldrb	r1, [r4, #20]
 801225e:	4620      	mov	r0, r4
 8012260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012264:	f004 b9c0 	b.w	80165e8 <ucdr_deserialize_endian_array_uint8_t>

08012268 <rcl_get_zero_initialized_init_options>:
 8012268:	2000      	movs	r0, #0
 801226a:	4770      	bx	lr

0801226c <rcl_init_options_init>:
 801226c:	b084      	sub	sp, #16
 801226e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012270:	b097      	sub	sp, #92	; 0x5c
 8012272:	ae1d      	add	r6, sp, #116	; 0x74
 8012274:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012278:	2800      	cmp	r0, #0
 801227a:	d058      	beq.n	801232e <rcl_init_options_init+0xc2>
 801227c:	6803      	ldr	r3, [r0, #0]
 801227e:	4605      	mov	r5, r0
 8012280:	b133      	cbz	r3, 8012290 <rcl_init_options_init+0x24>
 8012282:	2464      	movs	r4, #100	; 0x64
 8012284:	4620      	mov	r0, r4
 8012286:	b017      	add	sp, #92	; 0x5c
 8012288:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801228c:	b004      	add	sp, #16
 801228e:	4770      	bx	lr
 8012290:	4630      	mov	r0, r6
 8012292:	f001 fdf3 	bl	8013e7c <rcutils_allocator_is_valid>
 8012296:	2800      	cmp	r0, #0
 8012298:	d049      	beq.n	801232e <rcl_init_options_init+0xc2>
 801229a:	46b4      	mov	ip, r6
 801229c:	ac11      	add	r4, sp, #68	; 0x44
 801229e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122a4:	f8dc 3000 	ldr.w	r3, [ip]
 80122a8:	2050      	movs	r0, #80	; 0x50
 80122aa:	9921      	ldr	r1, [sp, #132]	; 0x84
 80122ac:	6023      	str	r3, [r4, #0]
 80122ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80122b0:	4798      	blx	r3
 80122b2:	4604      	mov	r4, r0
 80122b4:	6028      	str	r0, [r5, #0]
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d03b      	beq.n	8012332 <rcl_init_options_init+0xc6>
 80122ba:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80122be:	4686      	mov	lr, r0
 80122c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80122c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80122c8:	f8dc 3000 	ldr.w	r3, [ip]
 80122cc:	a802      	add	r0, sp, #8
 80122ce:	f8ce 3000 	str.w	r3, [lr]
 80122d2:	f001 fff1 	bl	80142b8 <rmw_get_zero_initialized_init_options>
 80122d6:	f10d 0e08 	add.w	lr, sp, #8
 80122da:	f104 0c18 	add.w	ip, r4, #24
 80122de:	682f      	ldr	r7, [r5, #0]
 80122e0:	ac20      	add	r4, sp, #128	; 0x80
 80122e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122fa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80122fe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012302:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012306:	e88d 0003 	stmia.w	sp, {r0, r1}
 801230a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801230e:	f107 0018 	add.w	r0, r7, #24
 8012312:	f002 f8f9 	bl	8014508 <rmw_init_options_init>
 8012316:	4604      	mov	r4, r0
 8012318:	2800      	cmp	r0, #0
 801231a:	d0b3      	beq.n	8012284 <rcl_init_options_init+0x18>
 801231c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801231e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012320:	6828      	ldr	r0, [r5, #0]
 8012322:	4798      	blx	r3
 8012324:	4620      	mov	r0, r4
 8012326:	f007 ff8d 	bl	801a244 <rcl_convert_rmw_ret_to_rcl_ret>
 801232a:	4604      	mov	r4, r0
 801232c:	e7aa      	b.n	8012284 <rcl_init_options_init+0x18>
 801232e:	240b      	movs	r4, #11
 8012330:	e7a8      	b.n	8012284 <rcl_init_options_init+0x18>
 8012332:	240a      	movs	r4, #10
 8012334:	e7a6      	b.n	8012284 <rcl_init_options_init+0x18>
 8012336:	bf00      	nop

08012338 <rcl_init_options_fini>:
 8012338:	b530      	push	{r4, r5, lr}
 801233a:	b087      	sub	sp, #28
 801233c:	b1f0      	cbz	r0, 801237c <rcl_init_options_fini+0x44>
 801233e:	6803      	ldr	r3, [r0, #0]
 8012340:	4604      	mov	r4, r0
 8012342:	b1db      	cbz	r3, 801237c <rcl_init_options_fini+0x44>
 8012344:	469c      	mov	ip, r3
 8012346:	f10d 0e04 	add.w	lr, sp, #4
 801234a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801234e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012352:	f8dc 3000 	ldr.w	r3, [ip]
 8012356:	a801      	add	r0, sp, #4
 8012358:	f8ce 3000 	str.w	r3, [lr]
 801235c:	f001 fd8e 	bl	8013e7c <rcutils_allocator_is_valid>
 8012360:	b160      	cbz	r0, 801237c <rcl_init_options_fini+0x44>
 8012362:	6820      	ldr	r0, [r4, #0]
 8012364:	3018      	adds	r0, #24
 8012366:	f002 f989 	bl	801467c <rmw_init_options_fini>
 801236a:	4605      	mov	r5, r0
 801236c:	b950      	cbnz	r0, 8012384 <rcl_init_options_fini+0x4c>
 801236e:	6820      	ldr	r0, [r4, #0]
 8012370:	9b02      	ldr	r3, [sp, #8]
 8012372:	9905      	ldr	r1, [sp, #20]
 8012374:	4798      	blx	r3
 8012376:	4628      	mov	r0, r5
 8012378:	b007      	add	sp, #28
 801237a:	bd30      	pop	{r4, r5, pc}
 801237c:	250b      	movs	r5, #11
 801237e:	4628      	mov	r0, r5
 8012380:	b007      	add	sp, #28
 8012382:	bd30      	pop	{r4, r5, pc}
 8012384:	f007 ff5e 	bl	801a244 <rcl_convert_rmw_ret_to_rcl_ret>
 8012388:	4605      	mov	r5, r0
 801238a:	e7f8      	b.n	801237e <rcl_init_options_fini+0x46>

0801238c <rcl_init_options_copy>:
 801238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012390:	b094      	sub	sp, #80	; 0x50
 8012392:	2800      	cmp	r0, #0
 8012394:	d05b      	beq.n	801244e <rcl_init_options_copy+0xc2>
 8012396:	4604      	mov	r4, r0
 8012398:	6800      	ldr	r0, [r0, #0]
 801239a:	2800      	cmp	r0, #0
 801239c:	d057      	beq.n	801244e <rcl_init_options_copy+0xc2>
 801239e:	460e      	mov	r6, r1
 80123a0:	f001 fd6c 	bl	8013e7c <rcutils_allocator_is_valid>
 80123a4:	2e00      	cmp	r6, #0
 80123a6:	d052      	beq.n	801244e <rcl_init_options_copy+0xc2>
 80123a8:	f080 0001 	eor.w	r0, r0, #1
 80123ac:	b2c0      	uxtb	r0, r0
 80123ae:	2800      	cmp	r0, #0
 80123b0:	d14d      	bne.n	801244e <rcl_init_options_copy+0xc2>
 80123b2:	6833      	ldr	r3, [r6, #0]
 80123b4:	b123      	cbz	r3, 80123c0 <rcl_init_options_copy+0x34>
 80123b6:	2464      	movs	r4, #100	; 0x64
 80123b8:	4620      	mov	r0, r4
 80123ba:	b014      	add	sp, #80	; 0x50
 80123bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c0:	6827      	ldr	r7, [r4, #0]
 80123c2:	ad0f      	add	r5, sp, #60	; 0x3c
 80123c4:	46bc      	mov	ip, r7
 80123c6:	f8d7 8000 	ldr.w	r8, [r7]
 80123ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80123d0:	f8dc 3000 	ldr.w	r3, [ip]
 80123d4:	2050      	movs	r0, #80	; 0x50
 80123d6:	4619      	mov	r1, r3
 80123d8:	602b      	str	r3, [r5, #0]
 80123da:	47c0      	blx	r8
 80123dc:	4605      	mov	r5, r0
 80123de:	6030      	str	r0, [r6, #0]
 80123e0:	b3d0      	cbz	r0, 8012458 <rcl_init_options_copy+0xcc>
 80123e2:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 80123e6:	4686      	mov	lr, r0
 80123e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80123f0:	f8dc 3000 	ldr.w	r3, [ip]
 80123f4:	4668      	mov	r0, sp
 80123f6:	f8ce 3000 	str.w	r3, [lr]
 80123fa:	f001 ff5d 	bl	80142b8 <rmw_get_zero_initialized_init_options>
 80123fe:	46ee      	mov	lr, sp
 8012400:	f105 0c18 	add.w	ip, r5, #24
 8012404:	6824      	ldr	r4, [r4, #0]
 8012406:	6835      	ldr	r5, [r6, #0]
 8012408:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801240c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012410:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012418:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801241c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012420:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012424:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012428:	f104 0018 	add.w	r0, r4, #24
 801242c:	f105 0118 	add.w	r1, r5, #24
 8012430:	f002 f8d2 	bl	80145d8 <rmw_init_options_copy>
 8012434:	4604      	mov	r4, r0
 8012436:	2800      	cmp	r0, #0
 8012438:	d0be      	beq.n	80123b8 <rcl_init_options_copy+0x2c>
 801243a:	f001 fd45 	bl	8013ec8 <rcutils_get_error_string>
 801243e:	f001 fd5b 	bl	8013ef8 <rcutils_reset_error>
 8012442:	4630      	mov	r0, r6
 8012444:	f7ff ff78 	bl	8012338 <rcl_init_options_fini>
 8012448:	b140      	cbz	r0, 801245c <rcl_init_options_copy+0xd0>
 801244a:	4604      	mov	r4, r0
 801244c:	e7b4      	b.n	80123b8 <rcl_init_options_copy+0x2c>
 801244e:	240b      	movs	r4, #11
 8012450:	4620      	mov	r0, r4
 8012452:	b014      	add	sp, #80	; 0x50
 8012454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012458:	240a      	movs	r4, #10
 801245a:	e7ad      	b.n	80123b8 <rcl_init_options_copy+0x2c>
 801245c:	4620      	mov	r0, r4
 801245e:	b014      	add	sp, #80	; 0x50
 8012460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012464:	f007 beee 	b.w	801a244 <rcl_convert_rmw_ret_to_rcl_ret>

08012468 <rcl_init_options_set_domain_id>:
 8012468:	b120      	cbz	r0, 8012474 <rcl_init_options_set_domain_id+0xc>
 801246a:	6803      	ldr	r3, [r0, #0]
 801246c:	b113      	cbz	r3, 8012474 <rcl_init_options_set_domain_id+0xc>
 801246e:	2000      	movs	r0, #0
 8012470:	6259      	str	r1, [r3, #36]	; 0x24
 8012472:	4770      	bx	lr
 8012474:	200b      	movs	r0, #11
 8012476:	4770      	bx	lr

08012478 <rcl_get_zero_initialized_node>:
 8012478:	4a03      	ldr	r2, [pc, #12]	; (8012488 <rcl_get_zero_initialized_node+0x10>)
 801247a:	4603      	mov	r3, r0
 801247c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012480:	e883 0003 	stmia.w	r3, {r0, r1}
 8012484:	4618      	mov	r0, r3
 8012486:	4770      	bx	lr
 8012488:	08023c18 	.word	0x08023c18

0801248c <rcl_node_init>:
 801248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012490:	b0a9      	sub	sp, #164	; 0xa4
 8012492:	4604      	mov	r4, r0
 8012494:	460e      	mov	r6, r1
 8012496:	4615      	mov	r5, r2
 8012498:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 801249c:	a823      	add	r0, sp, #140	; 0x8c
 801249e:	461f      	mov	r7, r3
 80124a0:	f007 ffe0 	bl	801a464 <rcl_guard_condition_get_default_options>
 80124a4:	f1b8 0f00 	cmp.w	r8, #0
 80124a8:	f000 80f3 	beq.w	8012692 <rcl_node_init+0x206>
 80124ac:	4640      	mov	r0, r8
 80124ae:	f001 fce5 	bl	8013e7c <rcutils_allocator_is_valid>
 80124b2:	2d00      	cmp	r5, #0
 80124b4:	bf18      	it	ne
 80124b6:	2c00      	cmpne	r4, #0
 80124b8:	f080 0001 	eor.w	r0, r0, #1
 80124bc:	bf0c      	ite	eq
 80124be:	f04f 0c01 	moveq.w	ip, #1
 80124c2:	f04f 0c00 	movne.w	ip, #0
 80124c6:	2e00      	cmp	r6, #0
 80124c8:	bf08      	it	eq
 80124ca:	f04c 0c01 	orreq.w	ip, ip, #1
 80124ce:	ea4c 0c00 	orr.w	ip, ip, r0
 80124d2:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80124d6:	f040 80dc 	bne.w	8012692 <rcl_node_init+0x206>
 80124da:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80124de:	f1ba 0f00 	cmp.w	sl, #0
 80124e2:	f040 80fc 	bne.w	80126de <rcl_node_init+0x252>
 80124e6:	2f00      	cmp	r7, #0
 80124e8:	f000 80d3 	beq.w	8012692 <rcl_node_init+0x206>
 80124ec:	4638      	mov	r0, r7
 80124ee:	f007 fec7 	bl	801a280 <rcl_context_is_valid>
 80124f2:	4683      	mov	fp, r0
 80124f4:	2800      	cmp	r0, #0
 80124f6:	f000 80d2 	beq.w	801269e <rcl_node_init+0x212>
 80124fa:	4652      	mov	r2, sl
 80124fc:	4630      	mov	r0, r6
 80124fe:	a922      	add	r1, sp, #136	; 0x88
 8012500:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8012504:	f001 ff8a 	bl	801441c <rmw_validate_node_name>
 8012508:	4682      	mov	sl, r0
 801250a:	2800      	cmp	r0, #0
 801250c:	f040 80c3 	bne.w	8012696 <rcl_node_init+0x20a>
 8012510:	9822      	ldr	r0, [sp, #136]	; 0x88
 8012512:	2800      	cmp	r0, #0
 8012514:	f040 80f1 	bne.w	80126fa <rcl_node_init+0x26e>
 8012518:	4628      	mov	r0, r5
 801251a:	f7ed fef1 	bl	8000300 <strlen>
 801251e:	2800      	cmp	r0, #0
 8012520:	f040 80c0 	bne.w	80126a4 <rcl_node_init+0x218>
 8012524:	4d79      	ldr	r5, [pc, #484]	; (801270c <rcl_node_init+0x280>)
 8012526:	a922      	add	r1, sp, #136	; 0x88
 8012528:	2200      	movs	r2, #0
 801252a:	4628      	mov	r0, r5
 801252c:	f001 ff58 	bl	80143e0 <rmw_validate_namespace>
 8012530:	4682      	mov	sl, r0
 8012532:	2800      	cmp	r0, #0
 8012534:	f040 80af 	bne.w	8012696 <rcl_node_init+0x20a>
 8012538:	9822      	ldr	r0, [sp, #136]	; 0x88
 801253a:	2800      	cmp	r0, #0
 801253c:	f040 80d5 	bne.w	80126ea <rcl_node_init+0x25e>
 8012540:	f8d8 3000 	ldr.w	r3, [r8]
 8012544:	2078      	movs	r0, #120	; 0x78
 8012546:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801254a:	4798      	blx	r3
 801254c:	4682      	mov	sl, r0
 801254e:	6060      	str	r0, [r4, #4]
 8012550:	2800      	cmp	r0, #0
 8012552:	f000 80cf 	beq.w	80126f4 <rcl_node_init+0x268>
 8012556:	2200      	movs	r2, #0
 8012558:	2300      	movs	r3, #0
 801255a:	a808      	add	r0, sp, #32
 801255c:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8012560:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8012564:	f000 f902 	bl	801276c <rcl_node_get_default_options>
 8012568:	a908      	add	r1, sp, #32
 801256a:	4650      	mov	r0, sl
 801256c:	2268      	movs	r2, #104	; 0x68
 801256e:	f00d fbe6 	bl	801fd3e <memcpy>
 8012572:	6861      	ldr	r1, [r4, #4]
 8012574:	4640      	mov	r0, r8
 8012576:	6027      	str	r7, [r4, #0]
 8012578:	f000 f906 	bl	8012788 <rcl_node_options_copy>
 801257c:	2800      	cmp	r0, #0
 801257e:	d158      	bne.n	8012632 <rcl_node_init+0x1a6>
 8012580:	4628      	mov	r0, r5
 8012582:	f7ed febd 	bl	8000300 <strlen>
 8012586:	4428      	add	r0, r5
 8012588:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801258c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012590:	2b2f      	cmp	r3, #47	; 0x2f
 8012592:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	bf0c      	ite	eq
 801259a:	4b5d      	ldreq	r3, [pc, #372]	; (8012710 <rcl_node_init+0x284>)
 801259c:	4b5d      	ldrne	r3, [pc, #372]	; (8012714 <rcl_node_init+0x288>)
 801259e:	9302      	str	r3, [sp, #8]
 80125a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80125a4:	9301      	str	r3, [sp, #4]
 80125a6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80125aa:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80125ae:	f001 fcbf 	bl	8013f30 <rcutils_format_string_limit>
 80125b2:	6823      	ldr	r3, [r4, #0]
 80125b4:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 80125b8:	4631      	mov	r1, r6
 80125ba:	6818      	ldr	r0, [r3, #0]
 80125bc:	462a      	mov	r2, r5
 80125be:	6866      	ldr	r6, [r4, #4]
 80125c0:	3028      	adds	r0, #40	; 0x28
 80125c2:	f002 fa87 	bl	8014ad4 <rmw_create_node>
 80125c6:	6863      	ldr	r3, [r4, #4]
 80125c8:	66b0      	str	r0, [r6, #104]	; 0x68
 80125ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d032      	beq.n	8012636 <rcl_node_init+0x1aa>
 80125d0:	f002 fb10 	bl	8014bf4 <rmw_node_get_graph_guard_condition>
 80125d4:	4682      	mov	sl, r0
 80125d6:	b360      	cbz	r0, 8012632 <rcl_node_init+0x1a6>
 80125d8:	f8d8 3000 	ldr.w	r3, [r8]
 80125dc:	2008      	movs	r0, #8
 80125de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125e2:	6866      	ldr	r6, [r4, #4]
 80125e4:	4798      	blx	r3
 80125e6:	6863      	ldr	r3, [r4, #4]
 80125e8:	66f0      	str	r0, [r6, #108]	; 0x6c
 80125ea:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 80125ee:	f1bb 0f00 	cmp.w	fp, #0
 80125f2:	d020      	beq.n	8012636 <rcl_node_init+0x1aa>
 80125f4:	a806      	add	r0, sp, #24
 80125f6:	ae23      	add	r6, sp, #140	; 0x8c
 80125f8:	f007 fea8 	bl	801a34c <rcl_get_zero_initialized_guard_condition>
 80125fc:	a806      	add	r0, sp, #24
 80125fe:	6863      	ldr	r3, [r4, #4]
 8012600:	46c4      	mov	ip, r8
 8012602:	c803      	ldmia	r0, {r0, r1}
 8012604:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8012608:	e88b 0003 	stmia.w	fp, {r0, r1}
 801260c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012610:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012612:	f8dc 3000 	ldr.w	r3, [ip]
 8012616:	6033      	str	r3, [r6, #0]
 8012618:	ab28      	add	r3, sp, #160	; 0xa0
 801261a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801261e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012622:	4651      	mov	r1, sl
 8012624:	463a      	mov	r2, r7
 8012626:	4670      	mov	r0, lr
 8012628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801262a:	f007 fe99 	bl	801a360 <rcl_guard_condition_init_from_rmw>
 801262e:	4682      	mov	sl, r0
 8012630:	b328      	cbz	r0, 801267e <rcl_node_init+0x1f2>
 8012632:	6863      	ldr	r3, [r4, #4]
 8012634:	b1f3      	cbz	r3, 8012674 <rcl_node_init+0x1e8>
 8012636:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8012638:	b128      	cbz	r0, 8012646 <rcl_node_init+0x1ba>
 801263a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801263e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012642:	4798      	blx	r3
 8012644:	6863      	ldr	r3, [r4, #4]
 8012646:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012648:	b110      	cbz	r0, 8012650 <rcl_node_init+0x1c4>
 801264a:	f002 fa55 	bl	8014af8 <rmw_destroy_node>
 801264e:	6863      	ldr	r3, [r4, #4]
 8012650:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8012652:	b148      	cbz	r0, 8012668 <rcl_node_init+0x1dc>
 8012654:	f007 fee0 	bl	801a418 <rcl_guard_condition_fini>
 8012658:	6863      	ldr	r3, [r4, #4]
 801265a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801265e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8012660:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012664:	4798      	blx	r3
 8012666:	6863      	ldr	r3, [r4, #4]
 8012668:	4618      	mov	r0, r3
 801266a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801266e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012672:	4798      	blx	r3
 8012674:	2300      	movs	r3, #0
 8012676:	f04f 0a01 	mov.w	sl, #1
 801267a:	e9c4 3300 	strd	r3, r3, [r4]
 801267e:	f1b9 0f00 	cmp.w	r9, #0
 8012682:	d008      	beq.n	8012696 <rcl_node_init+0x20a>
 8012684:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012688:	4628      	mov	r0, r5
 801268a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801268e:	4798      	blx	r3
 8012690:	e001      	b.n	8012696 <rcl_node_init+0x20a>
 8012692:	f04f 0a0b 	mov.w	sl, #11
 8012696:	4650      	mov	r0, sl
 8012698:	b029      	add	sp, #164	; 0xa4
 801269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269e:	f04f 0a65 	mov.w	sl, #101	; 0x65
 80126a2:	e7f8      	b.n	8012696 <rcl_node_init+0x20a>
 80126a4:	782b      	ldrb	r3, [r5, #0]
 80126a6:	2b2f      	cmp	r3, #47	; 0x2f
 80126a8:	f43f af3d 	beq.w	8012526 <rcl_node_init+0x9a>
 80126ac:	9503      	str	r5, [sp, #12]
 80126ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80126b2:	9300      	str	r3, [sp, #0]
 80126b4:	4b18      	ldr	r3, [pc, #96]	; (8012718 <rcl_node_init+0x28c>)
 80126b6:	9302      	str	r3, [sp, #8]
 80126b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126bc:	9301      	str	r3, [sp, #4]
 80126be:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80126c2:	f001 fc35 	bl	8013f30 <rcutils_format_string_limit>
 80126c6:	4605      	mov	r5, r0
 80126c8:	b1e0      	cbz	r0, 8012704 <rcl_node_init+0x278>
 80126ca:	2200      	movs	r2, #0
 80126cc:	a922      	add	r1, sp, #136	; 0x88
 80126ce:	9222      	str	r2, [sp, #136]	; 0x88
 80126d0:	f001 fe86 	bl	80143e0 <rmw_validate_namespace>
 80126d4:	4682      	mov	sl, r0
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d1d4      	bne.n	8012684 <rcl_node_init+0x1f8>
 80126da:	46d9      	mov	r9, fp
 80126dc:	e72c      	b.n	8012538 <rcl_node_init+0xac>
 80126de:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80126e2:	4650      	mov	r0, sl
 80126e4:	b029      	add	sp, #164	; 0xa4
 80126e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ea:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80126ee:	f001 fe89 	bl	8014404 <rmw_namespace_validation_result_string>
 80126f2:	e7c4      	b.n	801267e <rcl_node_init+0x1f2>
 80126f4:	f04f 0a0a 	mov.w	sl, #10
 80126f8:	e7c1      	b.n	801267e <rcl_node_init+0x1f2>
 80126fa:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 80126fe:	f001 fee1 	bl	80144c4 <rmw_node_name_validation_result_string>
 8012702:	e7c8      	b.n	8012696 <rcl_node_init+0x20a>
 8012704:	f04f 0a0a 	mov.w	sl, #10
 8012708:	e7c5      	b.n	8012696 <rcl_node_init+0x20a>
 801270a:	bf00      	nop
 801270c:	08023c00 	.word	0x08023c00
 8012710:	08023c08 	.word	0x08023c08
 8012714:	08023c10 	.word	0x08023c10
 8012718:	08023c04 	.word	0x08023c04

0801271c <rcl_node_is_valid>:
 801271c:	b130      	cbz	r0, 801272c <rcl_node_is_valid+0x10>
 801271e:	6843      	ldr	r3, [r0, #4]
 8012720:	b123      	cbz	r3, 801272c <rcl_node_is_valid+0x10>
 8012722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012724:	b113      	cbz	r3, 801272c <rcl_node_is_valid+0x10>
 8012726:	6800      	ldr	r0, [r0, #0]
 8012728:	f007 bdaa 	b.w	801a280 <rcl_context_is_valid>
 801272c:	2000      	movs	r0, #0
 801272e:	4770      	bx	lr

08012730 <rcl_node_get_name>:
 8012730:	b120      	cbz	r0, 801273c <rcl_node_get_name+0xc>
 8012732:	6840      	ldr	r0, [r0, #4]
 8012734:	b110      	cbz	r0, 801273c <rcl_node_get_name+0xc>
 8012736:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012738:	b100      	cbz	r0, 801273c <rcl_node_get_name+0xc>
 801273a:	6880      	ldr	r0, [r0, #8]
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop

08012740 <rcl_node_get_namespace>:
 8012740:	b120      	cbz	r0, 801274c <rcl_node_get_namespace+0xc>
 8012742:	6840      	ldr	r0, [r0, #4]
 8012744:	b110      	cbz	r0, 801274c <rcl_node_get_namespace+0xc>
 8012746:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012748:	b100      	cbz	r0, 801274c <rcl_node_get_namespace+0xc>
 801274a:	68c0      	ldr	r0, [r0, #12]
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop

08012750 <rcl_node_get_options>:
 8012750:	b128      	cbz	r0, 801275e <rcl_node_get_options+0xe>
 8012752:	6840      	ldr	r0, [r0, #4]
 8012754:	b118      	cbz	r0, 801275e <rcl_node_get_options+0xe>
 8012756:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8012758:	2b00      	cmp	r3, #0
 801275a:	bf08      	it	eq
 801275c:	2000      	moveq	r0, #0
 801275e:	4770      	bx	lr

08012760 <rcl_node_get_rmw_handle>:
 8012760:	b110      	cbz	r0, 8012768 <rcl_node_get_rmw_handle+0x8>
 8012762:	6840      	ldr	r0, [r0, #4]
 8012764:	b100      	cbz	r0, 8012768 <rcl_node_get_rmw_handle+0x8>
 8012766:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop

0801276c <rcl_node_get_default_options>:
 801276c:	b510      	push	{r4, lr}
 801276e:	4604      	mov	r4, r0
 8012770:	2268      	movs	r2, #104	; 0x68
 8012772:	2100      	movs	r1, #0
 8012774:	f00d fa16 	bl	801fba4 <memset>
 8012778:	4620      	mov	r0, r4
 801277a:	f001 fb71 	bl	8013e60 <rcutils_get_default_allocator>
 801277e:	2301      	movs	r3, #1
 8012780:	4620      	mov	r0, r4
 8012782:	7523      	strb	r3, [r4, #20]
 8012784:	bd10      	pop	{r4, pc}
 8012786:	bf00      	nop

08012788 <rcl_node_options_copy>:
 8012788:	2800      	cmp	r0, #0
 801278a:	bf18      	it	ne
 801278c:	4288      	cmpne	r0, r1
 801278e:	d01b      	beq.n	80127c8 <rcl_node_options_copy+0x40>
 8012790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012792:	fab1 f681 	clz	r6, r1
 8012796:	460c      	mov	r4, r1
 8012798:	0976      	lsrs	r6, r6, #5
 801279a:	b199      	cbz	r1, 80127c4 <rcl_node_options_copy+0x3c>
 801279c:	4605      	mov	r5, r0
 801279e:	8a87      	ldrh	r7, [r0, #20]
 80127a0:	4684      	mov	ip, r0
 80127a2:	468e      	mov	lr, r1
 80127a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80127aa:	682b      	ldr	r3, [r5, #0]
 80127ac:	2250      	movs	r2, #80	; 0x50
 80127ae:	f10c 0118 	add.w	r1, ip, #24
 80127b2:	f104 0018 	add.w	r0, r4, #24
 80127b6:	f8ce 3000 	str.w	r3, [lr]
 80127ba:	82a7      	strh	r7, [r4, #20]
 80127bc:	f00d fabf 	bl	801fd3e <memcpy>
 80127c0:	4630      	mov	r0, r6
 80127c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127c4:	200b      	movs	r0, #11
 80127c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127c8:	200b      	movs	r0, #11
 80127ca:	4770      	bx	lr

080127cc <rcl_get_zero_initialized_publisher>:
 80127cc:	4b01      	ldr	r3, [pc, #4]	; (80127d4 <rcl_get_zero_initialized_publisher+0x8>)
 80127ce:	6818      	ldr	r0, [r3, #0]
 80127d0:	4770      	bx	lr
 80127d2:	bf00      	nop
 80127d4:	08023c20 	.word	0x08023c20

080127d8 <rcl_publisher_init>:
 80127d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127dc:	b088      	sub	sp, #32
 80127de:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80127e0:	2e00      	cmp	r6, #0
 80127e2:	d06b      	beq.n	80128bc <rcl_publisher_init+0xe4>
 80127e4:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 80127e8:	4605      	mov	r5, r0
 80127ea:	460f      	mov	r7, r1
 80127ec:	4690      	mov	r8, r2
 80127ee:	4650      	mov	r0, sl
 80127f0:	4699      	mov	r9, r3
 80127f2:	f001 fb43 	bl	8013e7c <rcutils_allocator_is_valid>
 80127f6:	f080 0401 	eor.w	r4, r0, #1
 80127fa:	b2e4      	uxtb	r4, r4
 80127fc:	2c00      	cmp	r4, #0
 80127fe:	d15d      	bne.n	80128bc <rcl_publisher_init+0xe4>
 8012800:	2d00      	cmp	r5, #0
 8012802:	d05b      	beq.n	80128bc <rcl_publisher_init+0xe4>
 8012804:	682b      	ldr	r3, [r5, #0]
 8012806:	b123      	cbz	r3, 8012812 <rcl_publisher_init+0x3a>
 8012808:	2464      	movs	r4, #100	; 0x64
 801280a:	4620      	mov	r0, r4
 801280c:	b008      	add	sp, #32
 801280e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012812:	4638      	mov	r0, r7
 8012814:	f7ff ff82 	bl	801271c <rcl_node_is_valid>
 8012818:	2800      	cmp	r0, #0
 801281a:	d054      	beq.n	80128c6 <rcl_publisher_init+0xee>
 801281c:	f1b8 0f00 	cmp.w	r8, #0
 8012820:	d04c      	beq.n	80128bc <rcl_publisher_init+0xe4>
 8012822:	fab9 f389 	clz	r3, r9
 8012826:	095b      	lsrs	r3, r3, #5
 8012828:	f1b9 0f00 	cmp.w	r9, #0
 801282c:	d046      	beq.n	80128bc <rcl_publisher_init+0xe4>
 801282e:	aa07      	add	r2, sp, #28
 8012830:	9307      	str	r3, [sp, #28]
 8012832:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012836:	f106 0358 	add.w	r3, r6, #88	; 0x58
 801283a:	9205      	str	r2, [sp, #20]
 801283c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012840:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012844:	4649      	mov	r1, r9
 8012846:	4638      	mov	r0, r7
 8012848:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801284c:	f007 ff54 	bl	801a6f8 <rcl_node_resolve_name>
 8012850:	2800      	cmp	r0, #0
 8012852:	d14f      	bne.n	80128f4 <rcl_publisher_init+0x11c>
 8012854:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012856:	20c8      	movs	r0, #200	; 0xc8
 8012858:	6e31      	ldr	r1, [r6, #96]	; 0x60
 801285a:	4798      	blx	r3
 801285c:	6028      	str	r0, [r5, #0]
 801285e:	2800      	cmp	r0, #0
 8012860:	d050      	beq.n	8012904 <rcl_publisher_init+0x12c>
 8012862:	4638      	mov	r0, r7
 8012864:	f7ff ff7c 	bl	8012760 <rcl_node_get_rmw_handle>
 8012868:	f106 0364 	add.w	r3, r6, #100	; 0x64
 801286c:	4641      	mov	r1, r8
 801286e:	9a07      	ldr	r2, [sp, #28]
 8012870:	9300      	str	r3, [sp, #0]
 8012872:	4633      	mov	r3, r6
 8012874:	682c      	ldr	r4, [r5, #0]
 8012876:	f002 fa27 	bl	8014cc8 <rmw_create_publisher>
 801287a:	682b      	ldr	r3, [r5, #0]
 801287c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8012880:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8012884:	b370      	cbz	r0, 80128e4 <rcl_publisher_init+0x10c>
 8012886:	f103 0170 	add.w	r1, r3, #112	; 0x70
 801288a:	f002 fb01 	bl	8014e90 <rmw_publisher_get_actual_qos>
 801288e:	682b      	ldr	r3, [r5, #0]
 8012890:	4604      	mov	r4, r0
 8012892:	b9d0      	cbnz	r0, 80128ca <rcl_publisher_init+0xf2>
 8012894:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8012898:	4631      	mov	r1, r6
 801289a:	4618      	mov	r0, r3
 801289c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80128a0:	2270      	movs	r2, #112	; 0x70
 80128a2:	f00d fa4c 	bl	801fd3e <memcpy>
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 80128ac:	9807      	ldr	r0, [sp, #28]
 80128ae:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80128b0:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80128b2:	4798      	blx	r3
 80128b4:	4620      	mov	r0, r4
 80128b6:	b008      	add	sp, #32
 80128b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128bc:	240b      	movs	r4, #11
 80128be:	4620      	mov	r0, r4
 80128c0:	b008      	add	sp, #32
 80128c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128c6:	24c8      	movs	r4, #200	; 0xc8
 80128c8:	e79f      	b.n	801280a <rcl_publisher_init+0x32>
 80128ca:	b1cb      	cbz	r3, 8012900 <rcl_publisher_init+0x128>
 80128cc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80128d0:	b142      	cbz	r2, 80128e4 <rcl_publisher_init+0x10c>
 80128d2:	4638      	mov	r0, r7
 80128d4:	f7ff ff44 	bl	8012760 <rcl_node_get_rmw_handle>
 80128d8:	682b      	ldr	r3, [r5, #0]
 80128da:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80128de:	f002 faeb 	bl	8014eb8 <rmw_destroy_publisher>
 80128e2:	682b      	ldr	r3, [r5, #0]
 80128e4:	4618      	mov	r0, r3
 80128e6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80128e8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80128ea:	2401      	movs	r4, #1
 80128ec:	4790      	blx	r2
 80128ee:	2300      	movs	r3, #0
 80128f0:	602b      	str	r3, [r5, #0]
 80128f2:	e7db      	b.n	80128ac <rcl_publisher_init+0xd4>
 80128f4:	2867      	cmp	r0, #103	; 0x67
 80128f6:	d007      	beq.n	8012908 <rcl_publisher_init+0x130>
 80128f8:	2869      	cmp	r0, #105	; 0x69
 80128fa:	d005      	beq.n	8012908 <rcl_publisher_init+0x130>
 80128fc:	280a      	cmp	r0, #10
 80128fe:	d001      	beq.n	8012904 <rcl_publisher_init+0x12c>
 8012900:	2401      	movs	r4, #1
 8012902:	e7d3      	b.n	80128ac <rcl_publisher_init+0xd4>
 8012904:	240a      	movs	r4, #10
 8012906:	e7d1      	b.n	80128ac <rcl_publisher_init+0xd4>
 8012908:	2467      	movs	r4, #103	; 0x67
 801290a:	e7cf      	b.n	80128ac <rcl_publisher_init+0xd4>

0801290c <rcl_publisher_get_default_options>:
 801290c:	b570      	push	{r4, r5, r6, lr}
 801290e:	4d14      	ldr	r5, [pc, #80]	; (8012960 <rcl_publisher_get_default_options+0x54>)
 8012910:	b088      	sub	sp, #32
 8012912:	4604      	mov	r4, r0
 8012914:	2250      	movs	r2, #80	; 0x50
 8012916:	4913      	ldr	r1, [pc, #76]	; (8012964 <rcl_publisher_get_default_options+0x58>)
 8012918:	4628      	mov	r0, r5
 801291a:	f00d fa10 	bl	801fd3e <memcpy>
 801291e:	a802      	add	r0, sp, #8
 8012920:	f001 fa9e 	bl	8013e60 <rcutils_get_default_allocator>
 8012924:	f10d 0c08 	add.w	ip, sp, #8
 8012928:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 801292c:	466e      	mov	r6, sp
 801292e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012932:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012936:	f8dc 3000 	ldr.w	r3, [ip]
 801293a:	4630      	mov	r0, r6
 801293c:	f8ce 3000 	str.w	r3, [lr]
 8012940:	f001 fcca 	bl	80142d8 <rmw_get_default_publisher_options>
 8012944:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8012948:	2270      	movs	r2, #112	; 0x70
 801294a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801294e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012952:	4629      	mov	r1, r5
 8012954:	4620      	mov	r0, r4
 8012956:	f00d f9f2 	bl	801fd3e <memcpy>
 801295a:	4620      	mov	r0, r4
 801295c:	b008      	add	sp, #32
 801295e:	bd70      	pop	{r4, r5, r6, pc}
 8012960:	200121b0 	.word	0x200121b0
 8012964:	08023c28 	.word	0x08023c28

08012968 <rcl_publish>:
 8012968:	b1f8      	cbz	r0, 80129aa <rcl_publish+0x42>
 801296a:	6803      	ldr	r3, [r0, #0]
 801296c:	b570      	push	{r4, r5, r6, lr}
 801296e:	4604      	mov	r4, r0
 8012970:	b1b3      	cbz	r3, 80129a0 <rcl_publish+0x38>
 8012972:	4616      	mov	r6, r2
 8012974:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8012978:	b192      	cbz	r2, 80129a0 <rcl_publish+0x38>
 801297a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 801297e:	460d      	mov	r5, r1
 8012980:	f007 fc7e 	bl	801a280 <rcl_context_is_valid>
 8012984:	b160      	cbz	r0, 80129a0 <rcl_publish+0x38>
 8012986:	6823      	ldr	r3, [r4, #0]
 8012988:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801298c:	b140      	cbz	r0, 80129a0 <rcl_publish+0x38>
 801298e:	b155      	cbz	r5, 80129a6 <rcl_publish+0x3e>
 8012990:	4632      	mov	r2, r6
 8012992:	4629      	mov	r1, r5
 8012994:	f002 f938 	bl	8014c08 <rmw_publish>
 8012998:	3800      	subs	r0, #0
 801299a:	bf18      	it	ne
 801299c:	2001      	movne	r0, #1
 801299e:	bd70      	pop	{r4, r5, r6, pc}
 80129a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	200b      	movs	r0, #11
 80129a8:	bd70      	pop	{r4, r5, r6, pc}
 80129aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80129ae:	4770      	bx	lr

080129b0 <rcl_publisher_is_valid>:
 80129b0:	b1a0      	cbz	r0, 80129dc <rcl_publisher_is_valid+0x2c>
 80129b2:	6803      	ldr	r3, [r0, #0]
 80129b4:	b510      	push	{r4, lr}
 80129b6:	4604      	mov	r4, r0
 80129b8:	b173      	cbz	r3, 80129d8 <rcl_publisher_is_valid+0x28>
 80129ba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80129be:	b15a      	cbz	r2, 80129d8 <rcl_publisher_is_valid+0x28>
 80129c0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80129c4:	f007 fc5c 	bl	801a280 <rcl_context_is_valid>
 80129c8:	b130      	cbz	r0, 80129d8 <rcl_publisher_is_valid+0x28>
 80129ca:	6823      	ldr	r3, [r4, #0]
 80129cc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80129d0:	3800      	subs	r0, #0
 80129d2:	bf18      	it	ne
 80129d4:	2001      	movne	r0, #1
 80129d6:	bd10      	pop	{r4, pc}
 80129d8:	2000      	movs	r0, #0
 80129da:	bd10      	pop	{r4, pc}
 80129dc:	2000      	movs	r0, #0
 80129de:	4770      	bx	lr

080129e0 <rcl_publisher_is_valid_except_context>:
 80129e0:	b130      	cbz	r0, 80129f0 <rcl_publisher_is_valid_except_context+0x10>
 80129e2:	6800      	ldr	r0, [r0, #0]
 80129e4:	b120      	cbz	r0, 80129f0 <rcl_publisher_is_valid_except_context+0x10>
 80129e6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 80129ea:	3800      	subs	r0, #0
 80129ec:	bf18      	it	ne
 80129ee:	2001      	movne	r0, #1
 80129f0:	4770      	bx	lr
 80129f2:	bf00      	nop

080129f4 <rcl_get_zero_initialized_service>:
 80129f4:	4b01      	ldr	r3, [pc, #4]	; (80129fc <rcl_get_zero_initialized_service+0x8>)
 80129f6:	6818      	ldr	r0, [r3, #0]
 80129f8:	4770      	bx	lr
 80129fa:	bf00      	nop
 80129fc:	08023c78 	.word	0x08023c78

08012a00 <rcl_service_init>:
 8012a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a04:	b088      	sub	sp, #32
 8012a06:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012a08:	b1ff      	cbz	r7, 8012a4a <rcl_service_init+0x4a>
 8012a0a:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8012a0e:	4605      	mov	r5, r0
 8012a10:	460e      	mov	r6, r1
 8012a12:	4691      	mov	r9, r2
 8012a14:	4650      	mov	r0, sl
 8012a16:	4698      	mov	r8, r3
 8012a18:	f001 fa30 	bl	8013e7c <rcutils_allocator_is_valid>
 8012a1c:	f080 0401 	eor.w	r4, r0, #1
 8012a20:	b2e4      	uxtb	r4, r4
 8012a22:	b994      	cbnz	r4, 8012a4a <rcl_service_init+0x4a>
 8012a24:	b18d      	cbz	r5, 8012a4a <rcl_service_init+0x4a>
 8012a26:	4630      	mov	r0, r6
 8012a28:	f7ff fe78 	bl	801271c <rcl_node_is_valid>
 8012a2c:	2800      	cmp	r0, #0
 8012a2e:	d05d      	beq.n	8012aec <rcl_service_init+0xec>
 8012a30:	f1b8 0f00 	cmp.w	r8, #0
 8012a34:	d009      	beq.n	8012a4a <rcl_service_init+0x4a>
 8012a36:	f1b9 0f00 	cmp.w	r9, #0
 8012a3a:	d006      	beq.n	8012a4a <rcl_service_init+0x4a>
 8012a3c:	682b      	ldr	r3, [r5, #0]
 8012a3e:	b14b      	cbz	r3, 8012a54 <rcl_service_init+0x54>
 8012a40:	2464      	movs	r4, #100	; 0x64
 8012a42:	4620      	mov	r0, r4
 8012a44:	b008      	add	sp, #32
 8012a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a4a:	240b      	movs	r4, #11
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	b008      	add	sp, #32
 8012a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a54:	aa07      	add	r2, sp, #28
 8012a56:	9304      	str	r3, [sp, #16]
 8012a58:	9307      	str	r3, [sp, #28]
 8012a5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012a5e:	9205      	str	r2, [sp, #20]
 8012a60:	2201      	movs	r2, #1
 8012a62:	9203      	str	r2, [sp, #12]
 8012a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a68:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a6c:	4641      	mov	r1, r8
 8012a6e:	4630      	mov	r0, r6
 8012a70:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012a74:	f007 fe40 	bl	801a6f8 <rcl_node_resolve_name>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	d146      	bne.n	8012b0a <rcl_service_init+0x10a>
 8012a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a7e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8012a82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012a84:	4798      	blx	r3
 8012a86:	6028      	str	r0, [r5, #0]
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	d046      	beq.n	8012b1a <rcl_service_init+0x11a>
 8012a8c:	4630      	mov	r0, r6
 8012a8e:	f7ff fe67 	bl	8012760 <rcl_node_get_rmw_handle>
 8012a92:	463b      	mov	r3, r7
 8012a94:	4649      	mov	r1, r9
 8012a96:	9a07      	ldr	r2, [sp, #28]
 8012a98:	682c      	ldr	r4, [r5, #0]
 8012a9a:	f002 fbb1 	bl	8015200 <rmw_create_service>
 8012a9e:	682b      	ldr	r3, [r5, #0]
 8012aa0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8012aa4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8012aa8:	b338      	cbz	r0, 8012afa <rcl_service_init+0xfa>
 8012aaa:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8012aae:	f002 fcd9 	bl	8015464 <rmw_service_request_subscription_get_actual_qos>
 8012ab2:	bb00      	cbnz	r0, 8012af6 <rcl_service_init+0xf6>
 8012ab4:	682b      	ldr	r3, [r5, #0]
 8012ab6:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8012aba:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8012abe:	f002 fcbd 	bl	801543c <rmw_service_response_publisher_get_actual_qos>
 8012ac2:	4604      	mov	r4, r0
 8012ac4:	b9b8      	cbnz	r0, 8012af6 <rcl_service_init+0xf6>
 8012ac6:	6828      	ldr	r0, [r5, #0]
 8012ac8:	2268      	movs	r2, #104	; 0x68
 8012aca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012ace:	4639      	mov	r1, r7
 8012ad0:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8012ad4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8012ad8:	f00d f931 	bl	801fd3e <memcpy>
 8012adc:	9807      	ldr	r0, [sp, #28]
 8012ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ae0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012ae2:	4798      	blx	r3
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	b008      	add	sp, #32
 8012ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aec:	24c8      	movs	r4, #200	; 0xc8
 8012aee:	4620      	mov	r0, r4
 8012af0:	b008      	add	sp, #32
 8012af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012af6:	682b      	ldr	r3, [r5, #0]
 8012af8:	b16b      	cbz	r3, 8012b16 <rcl_service_init+0x116>
 8012afa:	4618      	mov	r0, r3
 8012afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012afe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012b00:	2401      	movs	r4, #1
 8012b02:	4790      	blx	r2
 8012b04:	2300      	movs	r3, #0
 8012b06:	602b      	str	r3, [r5, #0]
 8012b08:	e7e8      	b.n	8012adc <rcl_service_init+0xdc>
 8012b0a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d905      	bls.n	8012b1e <rcl_service_init+0x11e>
 8012b12:	280a      	cmp	r0, #10
 8012b14:	d001      	beq.n	8012b1a <rcl_service_init+0x11a>
 8012b16:	2401      	movs	r4, #1
 8012b18:	e7e0      	b.n	8012adc <rcl_service_init+0xdc>
 8012b1a:	240a      	movs	r4, #10
 8012b1c:	e7de      	b.n	8012adc <rcl_service_init+0xdc>
 8012b1e:	2468      	movs	r4, #104	; 0x68
 8012b20:	e7dc      	b.n	8012adc <rcl_service_init+0xdc>
 8012b22:	bf00      	nop

08012b24 <rcl_service_get_default_options>:
 8012b24:	b530      	push	{r4, r5, lr}
 8012b26:	4d0f      	ldr	r5, [pc, #60]	; (8012b64 <rcl_service_get_default_options+0x40>)
 8012b28:	b087      	sub	sp, #28
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	2250      	movs	r2, #80	; 0x50
 8012b2e:	490e      	ldr	r1, [pc, #56]	; (8012b68 <rcl_service_get_default_options+0x44>)
 8012b30:	4628      	mov	r0, r5
 8012b32:	f00d f904 	bl	801fd3e <memcpy>
 8012b36:	4668      	mov	r0, sp
 8012b38:	f001 f992 	bl	8013e60 <rcutils_get_default_allocator>
 8012b3c:	46ec      	mov	ip, sp
 8012b3e:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8012b42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012b4a:	f8dc 3000 	ldr.w	r3, [ip]
 8012b4e:	2268      	movs	r2, #104	; 0x68
 8012b50:	4629      	mov	r1, r5
 8012b52:	4620      	mov	r0, r4
 8012b54:	f8ce 3000 	str.w	r3, [lr]
 8012b58:	f00d f8f1 	bl	801fd3e <memcpy>
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	b007      	add	sp, #28
 8012b60:	bd30      	pop	{r4, r5, pc}
 8012b62:	bf00      	nop
 8012b64:	20012220 	.word	0x20012220
 8012b68:	08023c80 	.word	0x08023c80

08012b6c <rcl_service_get_rmw_handle>:
 8012b6c:	b118      	cbz	r0, 8012b76 <rcl_service_get_rmw_handle+0xa>
 8012b6e:	6800      	ldr	r0, [r0, #0]
 8012b70:	b108      	cbz	r0, 8012b76 <rcl_service_get_rmw_handle+0xa>
 8012b72:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012b76:	4770      	bx	lr

08012b78 <rcl_take_request>:
 8012b78:	b570      	push	{r4, r5, r6, lr}
 8012b7a:	468e      	mov	lr, r1
 8012b7c:	b08c      	sub	sp, #48	; 0x30
 8012b7e:	460c      	mov	r4, r1
 8012b80:	4616      	mov	r6, r2
 8012b82:	f10d 0c18 	add.w	ip, sp, #24
 8012b86:	4605      	mov	r5, r0
 8012b88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b90:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012b94:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b98:	b30d      	cbz	r5, 8012bde <rcl_take_request+0x66>
 8012b9a:	682b      	ldr	r3, [r5, #0]
 8012b9c:	b1fb      	cbz	r3, 8012bde <rcl_take_request+0x66>
 8012b9e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8012ba2:	b1e0      	cbz	r0, 8012bde <rcl_take_request+0x66>
 8012ba4:	b336      	cbz	r6, 8012bf4 <rcl_take_request+0x7c>
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	4632      	mov	r2, r6
 8012baa:	a902      	add	r1, sp, #8
 8012bac:	f88d 3007 	strb.w	r3, [sp, #7]
 8012bb0:	f10d 0307 	add.w	r3, sp, #7
 8012bb4:	f002 fa22 	bl	8014ffc <rmw_take_request>
 8012bb8:	4605      	mov	r5, r0
 8012bba:	b198      	cbz	r0, 8012be4 <rcl_take_request+0x6c>
 8012bbc:	280a      	cmp	r0, #10
 8012bbe:	bf18      	it	ne
 8012bc0:	2501      	movne	r5, #1
 8012bc2:	f10d 0e18 	add.w	lr, sp, #24
 8012bc6:	46a4      	mov	ip, r4
 8012bc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012bcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bd0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012bd4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012bd8:	4628      	mov	r0, r5
 8012bda:	b00c      	add	sp, #48	; 0x30
 8012bdc:	bd70      	pop	{r4, r5, r6, pc}
 8012bde:	f44f 7516 	mov.w	r5, #600	; 0x258
 8012be2:	e7ee      	b.n	8012bc2 <rcl_take_request+0x4a>
 8012be4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012be8:	f240 2359 	movw	r3, #601	; 0x259
 8012bec:	2a00      	cmp	r2, #0
 8012bee:	bf08      	it	eq
 8012bf0:	461d      	moveq	r5, r3
 8012bf2:	e7e6      	b.n	8012bc2 <rcl_take_request+0x4a>
 8012bf4:	250b      	movs	r5, #11
 8012bf6:	e7e4      	b.n	8012bc2 <rcl_take_request+0x4a>

08012bf8 <rcl_send_response>:
 8012bf8:	b170      	cbz	r0, 8012c18 <rcl_send_response+0x20>
 8012bfa:	6800      	ldr	r0, [r0, #0]
 8012bfc:	b160      	cbz	r0, 8012c18 <rcl_send_response+0x20>
 8012bfe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012c02:	b148      	cbz	r0, 8012c18 <rcl_send_response+0x20>
 8012c04:	b169      	cbz	r1, 8012c22 <rcl_send_response+0x2a>
 8012c06:	b510      	push	{r4, lr}
 8012c08:	b14a      	cbz	r2, 8012c1e <rcl_send_response+0x26>
 8012c0a:	f002 fa55 	bl	80150b8 <rmw_send_response>
 8012c0e:	b110      	cbz	r0, 8012c16 <rcl_send_response+0x1e>
 8012c10:	2802      	cmp	r0, #2
 8012c12:	bf18      	it	ne
 8012c14:	2001      	movne	r0, #1
 8012c16:	bd10      	pop	{r4, pc}
 8012c18:	f44f 7016 	mov.w	r0, #600	; 0x258
 8012c1c:	4770      	bx	lr
 8012c1e:	200b      	movs	r0, #11
 8012c20:	bd10      	pop	{r4, pc}
 8012c22:	200b      	movs	r0, #11
 8012c24:	4770      	bx	lr
 8012c26:	bf00      	nop

08012c28 <rcl_service_is_valid>:
 8012c28:	b130      	cbz	r0, 8012c38 <rcl_service_is_valid+0x10>
 8012c2a:	6800      	ldr	r0, [r0, #0]
 8012c2c:	b120      	cbz	r0, 8012c38 <rcl_service_is_valid+0x10>
 8012c2e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012c32:	3800      	subs	r0, #0
 8012c34:	bf18      	it	ne
 8012c36:	2001      	movne	r0, #1
 8012c38:	4770      	bx	lr
 8012c3a:	bf00      	nop

08012c3c <rcl_get_zero_initialized_subscription>:
 8012c3c:	4b01      	ldr	r3, [pc, #4]	; (8012c44 <rcl_get_zero_initialized_subscription+0x8>)
 8012c3e:	6818      	ldr	r0, [r3, #0]
 8012c40:	4770      	bx	lr
 8012c42:	bf00      	nop
 8012c44:	08023cd0 	.word	0x08023cd0

08012c48 <rcl_subscription_init>:
 8012c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c4c:	b088      	sub	sp, #32
 8012c4e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012c50:	b1ff      	cbz	r7, 8012c92 <rcl_subscription_init+0x4a>
 8012c52:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8012c56:	4605      	mov	r5, r0
 8012c58:	460e      	mov	r6, r1
 8012c5a:	4691      	mov	r9, r2
 8012c5c:	4650      	mov	r0, sl
 8012c5e:	4698      	mov	r8, r3
 8012c60:	f001 f90c 	bl	8013e7c <rcutils_allocator_is_valid>
 8012c64:	f080 0401 	eor.w	r4, r0, #1
 8012c68:	b2e4      	uxtb	r4, r4
 8012c6a:	b994      	cbnz	r4, 8012c92 <rcl_subscription_init+0x4a>
 8012c6c:	b18d      	cbz	r5, 8012c92 <rcl_subscription_init+0x4a>
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f7ff fd54 	bl	801271c <rcl_node_is_valid>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d055      	beq.n	8012d24 <rcl_subscription_init+0xdc>
 8012c78:	f1b9 0f00 	cmp.w	r9, #0
 8012c7c:	d009      	beq.n	8012c92 <rcl_subscription_init+0x4a>
 8012c7e:	f1b8 0f00 	cmp.w	r8, #0
 8012c82:	d006      	beq.n	8012c92 <rcl_subscription_init+0x4a>
 8012c84:	682b      	ldr	r3, [r5, #0]
 8012c86:	b14b      	cbz	r3, 8012c9c <rcl_subscription_init+0x54>
 8012c88:	2464      	movs	r4, #100	; 0x64
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	b008      	add	sp, #32
 8012c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c92:	240b      	movs	r4, #11
 8012c94:	4620      	mov	r0, r4
 8012c96:	b008      	add	sp, #32
 8012c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c9c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012ca0:	aa07      	add	r2, sp, #28
 8012ca2:	9307      	str	r3, [sp, #28]
 8012ca4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012ca8:	9205      	str	r2, [sp, #20]
 8012caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012cae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012cb2:	4641      	mov	r1, r8
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012cba:	f007 fd1d 	bl	801a6f8 <rcl_node_resolve_name>
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	d15f      	bne.n	8012d82 <rcl_subscription_init+0x13a>
 8012cc2:	21c8      	movs	r1, #200	; 0xc8
 8012cc4:	2001      	movs	r0, #1
 8012cc6:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8012cca:	4798      	blx	r3
 8012ccc:	6028      	str	r0, [r5, #0]
 8012cce:	2800      	cmp	r0, #0
 8012cd0:	d05f      	beq.n	8012d92 <rcl_subscription_init+0x14a>
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	f7ff fd44 	bl	8012760 <rcl_node_get_rmw_handle>
 8012cd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012cdc:	4649      	mov	r1, r9
 8012cde:	9a07      	ldr	r2, [sp, #28]
 8012ce0:	9300      	str	r3, [sp, #0]
 8012ce2:	463b      	mov	r3, r7
 8012ce4:	682c      	ldr	r4, [r5, #0]
 8012ce6:	f002 fbd1 	bl	801548c <rmw_create_subscription>
 8012cea:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8012cee:	682c      	ldr	r4, [r5, #0]
 8012cf0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8012cf4:	b348      	cbz	r0, 8012d4a <rcl_subscription_init+0x102>
 8012cf6:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8012cfa:	f002 fcbd 	bl	8015678 <rmw_subscription_get_actual_qos>
 8012cfe:	4604      	mov	r4, r0
 8012d00:	b9a8      	cbnz	r0, 8012d2e <rcl_subscription_init+0xe6>
 8012d02:	6828      	ldr	r0, [r5, #0]
 8012d04:	2270      	movs	r2, #112	; 0x70
 8012d06:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8012d10:	f00d f815 	bl	801fd3e <memcpy>
 8012d14:	9807      	ldr	r0, [sp, #28]
 8012d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d18:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012d1a:	4798      	blx	r3
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	b008      	add	sp, #32
 8012d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d24:	24c8      	movs	r4, #200	; 0xc8
 8012d26:	4620      	mov	r0, r4
 8012d28:	b008      	add	sp, #32
 8012d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d2e:	682c      	ldr	r4, [r5, #0]
 8012d30:	b36c      	cbz	r4, 8012d8e <rcl_subscription_init+0x146>
 8012d32:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8012d36:	b14b      	cbz	r3, 8012d4c <rcl_subscription_init+0x104>
 8012d38:	4630      	mov	r0, r6
 8012d3a:	f7ff fd11 	bl	8012760 <rcl_node_get_rmw_handle>
 8012d3e:	682b      	ldr	r3, [r5, #0]
 8012d40:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8012d44:	f002 fcac 	bl	80156a0 <rmw_destroy_subscription>
 8012d48:	682c      	ldr	r4, [r5, #0]
 8012d4a:	b194      	cbz	r4, 8012d72 <rcl_subscription_init+0x12a>
 8012d4c:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8012d50:	4630      	mov	r0, r6
 8012d52:	f001 f893 	bl	8013e7c <rcutils_allocator_is_valid>
 8012d56:	b158      	cbz	r0, 8012d70 <rcl_subscription_init+0x128>
 8012d58:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012d5a:	b148      	cbz	r0, 8012d70 <rcl_subscription_init+0x128>
 8012d5c:	4631      	mov	r1, r6
 8012d5e:	f001 fac3 	bl	80142e8 <rmw_subscription_content_filter_options_fini>
 8012d62:	4606      	mov	r6, r0
 8012d64:	b9c8      	cbnz	r0, 8012d9a <rcl_subscription_init+0x152>
 8012d66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012d68:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8012d6a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012d6c:	4798      	blx	r3
 8012d6e:	66e6      	str	r6, [r4, #108]	; 0x6c
 8012d70:	682c      	ldr	r4, [r5, #0]
 8012d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d74:	4620      	mov	r0, r4
 8012d76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012d78:	2401      	movs	r4, #1
 8012d7a:	4798      	blx	r3
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	602b      	str	r3, [r5, #0]
 8012d80:	e7c8      	b.n	8012d14 <rcl_subscription_init+0xcc>
 8012d82:	2867      	cmp	r0, #103	; 0x67
 8012d84:	d007      	beq.n	8012d96 <rcl_subscription_init+0x14e>
 8012d86:	2869      	cmp	r0, #105	; 0x69
 8012d88:	d005      	beq.n	8012d96 <rcl_subscription_init+0x14e>
 8012d8a:	280a      	cmp	r0, #10
 8012d8c:	d001      	beq.n	8012d92 <rcl_subscription_init+0x14a>
 8012d8e:	2401      	movs	r4, #1
 8012d90:	e7c0      	b.n	8012d14 <rcl_subscription_init+0xcc>
 8012d92:	240a      	movs	r4, #10
 8012d94:	e7be      	b.n	8012d14 <rcl_subscription_init+0xcc>
 8012d96:	2467      	movs	r4, #103	; 0x67
 8012d98:	e7bc      	b.n	8012d14 <rcl_subscription_init+0xcc>
 8012d9a:	f007 fa53 	bl	801a244 <rcl_convert_rmw_ret_to_rcl_ret>
 8012d9e:	682c      	ldr	r4, [r5, #0]
 8012da0:	e7e7      	b.n	8012d72 <rcl_subscription_init+0x12a>
 8012da2:	bf00      	nop

08012da4 <rcl_subscription_get_default_options>:
 8012da4:	b570      	push	{r4, r5, r6, lr}
 8012da6:	4d14      	ldr	r5, [pc, #80]	; (8012df8 <rcl_subscription_get_default_options+0x54>)
 8012da8:	b08a      	sub	sp, #40	; 0x28
 8012daa:	4604      	mov	r4, r0
 8012dac:	2250      	movs	r2, #80	; 0x50
 8012dae:	4913      	ldr	r1, [pc, #76]	; (8012dfc <rcl_subscription_get_default_options+0x58>)
 8012db0:	4628      	mov	r0, r5
 8012db2:	f00c ffc4 	bl	801fd3e <memcpy>
 8012db6:	a804      	add	r0, sp, #16
 8012db8:	f001 f852 	bl	8013e60 <rcutils_get_default_allocator>
 8012dbc:	f10d 0c10 	add.w	ip, sp, #16
 8012dc0:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8012dc4:	466e      	mov	r6, sp
 8012dc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012dca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012dce:	f8dc 3000 	ldr.w	r3, [ip]
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	f8ce 3000 	str.w	r3, [lr]
 8012dd8:	f001 faa0 	bl	801431c <rmw_get_default_subscription_options>
 8012ddc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8012de0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012de4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012de8:	2270      	movs	r2, #112	; 0x70
 8012dea:	4629      	mov	r1, r5
 8012dec:	4620      	mov	r0, r4
 8012dee:	f00c ffa6 	bl	801fd3e <memcpy>
 8012df2:	4620      	mov	r0, r4
 8012df4:	b00a      	add	sp, #40	; 0x28
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	20012288 	.word	0x20012288
 8012dfc:	08023cd8 	.word	0x08023cd8

08012e00 <rcl_take>:
 8012e00:	2800      	cmp	r0, #0
 8012e02:	d049      	beq.n	8012e98 <rcl_take+0x98>
 8012e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e08:	4615      	mov	r5, r2
 8012e0a:	6802      	ldr	r2, [r0, #0]
 8012e0c:	b0a4      	sub	sp, #144	; 0x90
 8012e0e:	4604      	mov	r4, r0
 8012e10:	2a00      	cmp	r2, #0
 8012e12:	d039      	beq.n	8012e88 <rcl_take+0x88>
 8012e14:	461f      	mov	r7, r3
 8012e16:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8012e1a:	b3ab      	cbz	r3, 8012e88 <rcl_take+0x88>
 8012e1c:	460e      	mov	r6, r1
 8012e1e:	2900      	cmp	r1, #0
 8012e20:	d038      	beq.n	8012e94 <rcl_take+0x94>
 8012e22:	2d00      	cmp	r5, #0
 8012e24:	d03c      	beq.n	8012ea0 <rcl_take+0xa0>
 8012e26:	a802      	add	r0, sp, #8
 8012e28:	f04f 0800 	mov.w	r8, #0
 8012e2c:	f001 fa7c 	bl	8014328 <rmw_get_zero_initialized_message_info>
 8012e30:	f10d 0c08 	add.w	ip, sp, #8
 8012e34:	46ae      	mov	lr, r5
 8012e36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e4e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012e52:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012e56:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8012e5a:	462b      	mov	r3, r5
 8012e5c:	6820      	ldr	r0, [r4, #0]
 8012e5e:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8012e62:	4631      	mov	r1, r6
 8012e64:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8012e68:	9700      	str	r7, [sp, #0]
 8012e6a:	f002 fc7b 	bl	8015764 <rmw_take_with_info>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	b9c0      	cbnz	r0, 8012ea4 <rcl_take+0xa4>
 8012e72:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8012e76:	f240 1291 	movw	r2, #401	; 0x191
 8012e7a:	2900      	cmp	r1, #0
 8012e7c:	bf08      	it	eq
 8012e7e:	4613      	moveq	r3, r2
 8012e80:	4618      	mov	r0, r3
 8012e82:	b024      	add	sp, #144	; 0x90
 8012e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e88:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	b024      	add	sp, #144	; 0x90
 8012e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e94:	230b      	movs	r3, #11
 8012e96:	e7f3      	b.n	8012e80 <rcl_take+0x80>
 8012e98:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	4770      	bx	lr
 8012ea0:	ad14      	add	r5, sp, #80	; 0x50
 8012ea2:	e7c0      	b.n	8012e26 <rcl_take+0x26>
 8012ea4:	f007 f9ce 	bl	801a244 <rcl_convert_rmw_ret_to_rcl_ret>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	e7e9      	b.n	8012e80 <rcl_take+0x80>

08012eac <rcl_subscription_get_rmw_handle>:
 8012eac:	b118      	cbz	r0, 8012eb6 <rcl_subscription_get_rmw_handle+0xa>
 8012eae:	6800      	ldr	r0, [r0, #0]
 8012eb0:	b108      	cbz	r0, 8012eb6 <rcl_subscription_get_rmw_handle+0xa>
 8012eb2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8012eb6:	4770      	bx	lr

08012eb8 <rcl_subscription_is_valid>:
 8012eb8:	b130      	cbz	r0, 8012ec8 <rcl_subscription_is_valid+0x10>
 8012eba:	6800      	ldr	r0, [r0, #0]
 8012ebc:	b120      	cbz	r0, 8012ec8 <rcl_subscription_is_valid+0x10>
 8012ebe:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8012ec2:	3800      	subs	r0, #0
 8012ec4:	bf18      	it	ne
 8012ec6:	2001      	movne	r0, #1
 8012ec8:	4770      	bx	lr
 8012eca:	bf00      	nop

08012ecc <_rclc_check_for_new_data>:
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d046      	beq.n	8012f5e <_rclc_check_for_new_data+0x92>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	b530      	push	{r4, r5, lr}
 8012ed4:	7802      	ldrb	r2, [r0, #0]
 8012ed6:	b085      	sub	sp, #20
 8012ed8:	2a0a      	cmp	r2, #10
 8012eda:	d842      	bhi.n	8012f62 <_rclc_check_for_new_data+0x96>
 8012edc:	e8df f002 	tbb	[pc, r2]
 8012ee0:	14181212 	.word	0x14181212
 8012ee4:	06060614 	.word	0x06060614
 8012ee8:	2e1a      	.short	0x2e1a
 8012eea:	16          	.byte	0x16
 8012eeb:	00          	.byte	0x00
 8012eec:	6a0a      	ldr	r2, [r1, #32]
 8012eee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8012ef6:	1a12      	subs	r2, r2, r0
 8012ef8:	bf18      	it	ne
 8012efa:	2201      	movne	r2, #1
 8012efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012f00:	b005      	add	sp, #20
 8012f02:	bd30      	pop	{r4, r5, pc}
 8012f04:	680a      	ldr	r2, [r1, #0]
 8012f06:	e7f2      	b.n	8012eee <_rclc_check_for_new_data+0x22>
 8012f08:	698a      	ldr	r2, [r1, #24]
 8012f0a:	e7f0      	b.n	8012eee <_rclc_check_for_new_data+0x22>
 8012f0c:	688a      	ldr	r2, [r1, #8]
 8012f0e:	e7ee      	b.n	8012eee <_rclc_check_for_new_data+0x22>
 8012f10:	690a      	ldr	r2, [r1, #16]
 8012f12:	e7ec      	b.n	8012eee <_rclc_check_for_new_data+0x22>
 8012f14:	685c      	ldr	r4, [r3, #4]
 8012f16:	4608      	mov	r0, r1
 8012f18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f24:	f104 0110 	add.w	r1, r4, #16
 8012f28:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012f2c:	9500      	str	r5, [sp, #0]
 8012f2e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8012f32:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8012f36:	f008 ff4b 	bl	801bdd0 <rcl_action_client_wait_set_get_entities_ready>
 8012f3a:	e7e1      	b.n	8012f00 <_rclc_check_for_new_data+0x34>
 8012f3c:	685c      	ldr	r4, [r3, #4]
 8012f3e:	4608      	mov	r0, r1
 8012f40:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8012f44:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8012f48:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8012f4c:	e9cd 2100 	strd	r2, r1, [sp]
 8012f50:	f104 0220 	add.w	r2, r4, #32
 8012f54:	f104 0110 	add.w	r1, r4, #16
 8012f58:	f009 f952 	bl	801c200 <rcl_action_server_wait_set_get_entities_ready>
 8012f5c:	e7d0      	b.n	8012f00 <_rclc_check_for_new_data+0x34>
 8012f5e:	200b      	movs	r0, #11
 8012f60:	4770      	bx	lr
 8012f62:	2001      	movs	r0, #1
 8012f64:	e7cc      	b.n	8012f00 <_rclc_check_for_new_data+0x34>
 8012f66:	bf00      	nop

08012f68 <_rclc_take_new_data>:
 8012f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f6a:	b09b      	sub	sp, #108	; 0x6c
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	f000 8088 	beq.w	8013082 <_rclc_take_new_data+0x11a>
 8012f72:	7803      	ldrb	r3, [r0, #0]
 8012f74:	4604      	mov	r4, r0
 8012f76:	2b0a      	cmp	r3, #10
 8012f78:	f200 8167 	bhi.w	801324a <_rclc_take_new_data+0x2e2>
 8012f7c:	e8df f003 	tbb	[pc, r3]
 8012f80:	44152d2d 	.word	0x44152d2d
 8012f84:	19191944 	.word	0x19191944
 8012f88:	065a      	.short	0x065a
 8012f8a:	15          	.byte	0x15
 8012f8b:	00          	.byte	0x00
 8012f8c:	6840      	ldr	r0, [r0, #4]
 8012f8e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f040 80b2 	bne.w	80130fc <_rclc_take_new_data+0x194>
 8012f98:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f040 80e4 	bne.w	801316a <_rclc_take_new_data+0x202>
 8012fa2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d16f      	bne.n	801308a <_rclc_take_new_data+0x122>
 8012faa:	2500      	movs	r5, #0
 8012fac:	4628      	mov	r0, r5
 8012fae:	b01b      	add	sp, #108	; 0x6c
 8012fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fb2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8012fb4:	6a0b      	ldr	r3, [r1, #32]
 8012fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d0f5      	beq.n	8012faa <_rclc_take_new_data+0x42>
 8012fbe:	6882      	ldr	r2, [r0, #8]
 8012fc0:	f100 0110 	add.w	r1, r0, #16
 8012fc4:	6840      	ldr	r0, [r0, #4]
 8012fc6:	f7ff fdd7 	bl	8012b78 <rcl_take_request>
 8012fca:	4605      	mov	r5, r0
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d0ec      	beq.n	8012faa <_rclc_take_new_data+0x42>
 8012fd0:	f240 2359 	movw	r3, #601	; 0x259
 8012fd4:	4298      	cmp	r0, r3
 8012fd6:	d013      	beq.n	8013000 <_rclc_take_new_data+0x98>
 8012fd8:	e029      	b.n	801302e <_rclc_take_new_data+0xc6>
 8012fda:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8012fdc:	680b      	ldr	r3, [r1, #0]
 8012fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d0e1      	beq.n	8012faa <_rclc_take_new_data+0x42>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	aa0a      	add	r2, sp, #40	; 0x28
 8012fea:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8012fee:	f7ff ff07 	bl	8012e00 <rcl_take>
 8012ff2:	4605      	mov	r5, r0
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	d0d9      	beq.n	8012fac <_rclc_take_new_data+0x44>
 8012ff8:	f240 1391 	movw	r3, #401	; 0x191
 8012ffc:	4298      	cmp	r0, r3
 8012ffe:	d116      	bne.n	801302e <_rclc_take_new_data+0xc6>
 8013000:	2300      	movs	r3, #0
 8013002:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8013006:	e7d1      	b.n	8012fac <_rclc_take_new_data+0x44>
 8013008:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801300a:	698b      	ldr	r3, [r1, #24]
 801300c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d0ca      	beq.n	8012faa <_rclc_take_new_data+0x42>
 8013014:	6882      	ldr	r2, [r0, #8]
 8013016:	f100 0110 	add.w	r1, r0, #16
 801301a:	6840      	ldr	r0, [r0, #4]
 801301c:	f007 f8c0 	bl	801a1a0 <rcl_take_response>
 8013020:	4605      	mov	r5, r0
 8013022:	2800      	cmp	r0, #0
 8013024:	d0c1      	beq.n	8012faa <_rclc_take_new_data+0x42>
 8013026:	f240 13f5 	movw	r3, #501	; 0x1f5
 801302a:	4298      	cmp	r0, r3
 801302c:	d0be      	beq.n	8012fac <_rclc_take_new_data+0x44>
 801302e:	f000 ff63 	bl	8013ef8 <rcutils_reset_error>
 8013032:	e7bb      	b.n	8012fac <_rclc_take_new_data+0x44>
 8013034:	6840      	ldr	r0, [r0, #4]
 8013036:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801303a:	2b00      	cmp	r3, #0
 801303c:	d17d      	bne.n	801313a <_rclc_take_new_data+0x1d2>
 801303e:	69c3      	ldr	r3, [r0, #28]
 8013040:	b11b      	cbz	r3, 801304a <_rclc_take_new_data+0xe2>
 8013042:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013046:	2b00      	cmp	r3, #0
 8013048:	d144      	bne.n	80130d4 <_rclc_take_new_data+0x16c>
 801304a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801304e:	2b00      	cmp	r3, #0
 8013050:	f040 80ac 	bne.w	80131ac <_rclc_take_new_data+0x244>
 8013054:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8013058:	2b00      	cmp	r3, #0
 801305a:	d0a6      	beq.n	8012faa <_rclc_take_new_data+0x42>
 801305c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801305e:	a90a      	add	r1, sp, #40	; 0x28
 8013060:	3010      	adds	r0, #16
 8013062:	f008 fd8d 	bl	801bb80 <rcl_action_take_result_response>
 8013066:	4605      	mov	r5, r0
 8013068:	2800      	cmp	r0, #0
 801306a:	d1e0      	bne.n	801302e <_rclc_take_new_data+0xc6>
 801306c:	6860      	ldr	r0, [r4, #4]
 801306e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013072:	f009 f9f5 	bl	801c460 <rclc_action_find_handle_by_result_request_sequence_number>
 8013076:	2800      	cmp	r0, #0
 8013078:	d098      	beq.n	8012fac <_rclc_take_new_data+0x44>
 801307a:	2301      	movs	r3, #1
 801307c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8013080:	e794      	b.n	8012fac <_rclc_take_new_data+0x44>
 8013082:	250b      	movs	r5, #11
 8013084:	4628      	mov	r0, r5
 8013086:	b01b      	add	sp, #108	; 0x6c
 8013088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801308a:	ae04      	add	r6, sp, #16
 801308c:	3010      	adds	r0, #16
 801308e:	aa0a      	add	r2, sp, #40	; 0x28
 8013090:	4631      	mov	r1, r6
 8013092:	f008 ffe9 	bl	801c068 <rcl_action_take_cancel_request>
 8013096:	4605      	mov	r5, r0
 8013098:	2800      	cmp	r0, #0
 801309a:	d1c8      	bne.n	801302e <_rclc_take_new_data+0xc6>
 801309c:	a90a      	add	r1, sp, #40	; 0x28
 801309e:	6860      	ldr	r0, [r4, #4]
 80130a0:	f009 f99e 	bl	801c3e0 <rclc_action_find_goal_handle_by_uuid>
 80130a4:	4607      	mov	r7, r0
 80130a6:	2800      	cmp	r0, #0
 80130a8:	f000 80bb 	beq.w	8013222 <_rclc_take_new_data+0x2ba>
 80130ac:	2101      	movs	r1, #1
 80130ae:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80130b2:	f009 f91f 	bl	801c2f4 <rcl_action_transition_goal_state>
 80130b6:	2803      	cmp	r0, #3
 80130b8:	4684      	mov	ip, r0
 80130ba:	f040 80a7 	bne.w	801320c <_rclc_take_new_data+0x2a4>
 80130be:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80130c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80130c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80130ca:	e884 0003 	stmia.w	r4, {r0, r1}
 80130ce:	f887 c008 	strb.w	ip, [r7, #8]
 80130d2:	e76b      	b.n	8012fac <_rclc_take_new_data+0x44>
 80130d4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80130d6:	3010      	adds	r0, #16
 80130d8:	f008 fdd2 	bl	801bc80 <rcl_action_take_feedback>
 80130dc:	4605      	mov	r5, r0
 80130de:	2800      	cmp	r0, #0
 80130e0:	d1a5      	bne.n	801302e <_rclc_take_new_data+0xc6>
 80130e2:	6860      	ldr	r0, [r4, #4]
 80130e4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80130e6:	f009 f97b 	bl	801c3e0 <rclc_action_find_goal_handle_by_uuid>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2800      	cmp	r0, #0
 80130ee:	f000 80a3 	beq.w	8013238 <_rclc_take_new_data+0x2d0>
 80130f2:	2201      	movs	r2, #1
 80130f4:	6860      	ldr	r0, [r4, #4]
 80130f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80130fa:	e7a6      	b.n	801304a <_rclc_take_new_data+0xe2>
 80130fc:	f009 f94a 	bl	801c394 <rclc_action_take_goal_handle>
 8013100:	4606      	mov	r6, r0
 8013102:	6860      	ldr	r0, [r4, #4]
 8013104:	2e00      	cmp	r6, #0
 8013106:	f43f af47 	beq.w	8012f98 <_rclc_take_new_data+0x30>
 801310a:	6070      	str	r0, [r6, #4]
 801310c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8013110:	69f2      	ldr	r2, [r6, #28]
 8013112:	3010      	adds	r0, #16
 8013114:	f008 fef2 	bl	801befc <rcl_action_take_goal_request>
 8013118:	4605      	mov	r5, r0
 801311a:	2800      	cmp	r0, #0
 801311c:	f040 808e 	bne.w	801323c <_rclc_take_new_data+0x2d4>
 8013120:	69f7      	ldr	r7, [r6, #28]
 8013122:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013124:	7235      	strb	r5, [r6, #8]
 8013126:	f8c6 0009 	str.w	r0, [r6, #9]
 801312a:	f8c6 100d 	str.w	r1, [r6, #13]
 801312e:	6860      	ldr	r0, [r4, #4]
 8013130:	f8c6 2011 	str.w	r2, [r6, #17]
 8013134:	f8c6 3015 	str.w	r3, [r6, #21]
 8013138:	e72e      	b.n	8012f98 <_rclc_take_new_data+0x30>
 801313a:	aa04      	add	r2, sp, #16
 801313c:	a90a      	add	r1, sp, #40	; 0x28
 801313e:	3010      	adds	r0, #16
 8013140:	f008 fca6 	bl	801ba90 <rcl_action_take_goal_response>
 8013144:	4605      	mov	r5, r0
 8013146:	2800      	cmp	r0, #0
 8013148:	f47f af71 	bne.w	801302e <_rclc_take_new_data+0xc6>
 801314c:	6860      	ldr	r0, [r4, #4]
 801314e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013152:	f009 f973 	bl	801c43c <rclc_action_find_handle_by_goal_request_sequence_number>
 8013156:	b130      	cbz	r0, 8013166 <_rclc_take_new_data+0x1fe>
 8013158:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801315c:	2201      	movs	r2, #1
 801315e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8013162:	f880 2020 	strb.w	r2, [r0, #32]
 8013166:	6860      	ldr	r0, [r4, #4]
 8013168:	e769      	b.n	801303e <_rclc_take_new_data+0xd6>
 801316a:	3010      	adds	r0, #16
 801316c:	aa04      	add	r2, sp, #16
 801316e:	a90a      	add	r1, sp, #40	; 0x28
 8013170:	f008 ff3a 	bl	801bfe8 <rcl_action_take_result_request>
 8013174:	4605      	mov	r5, r0
 8013176:	2800      	cmp	r0, #0
 8013178:	f47f af59 	bne.w	801302e <_rclc_take_new_data+0xc6>
 801317c:	a904      	add	r1, sp, #16
 801317e:	6860      	ldr	r0, [r4, #4]
 8013180:	f009 f92e 	bl	801c3e0 <rclc_action_find_goal_handle_by_uuid>
 8013184:	4607      	mov	r7, r0
 8013186:	b160      	cbz	r0, 80131a2 <_rclc_take_new_data+0x23a>
 8013188:	ad0a      	add	r5, sp, #40	; 0x28
 801318a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801318e:	f04f 0c02 	mov.w	ip, #2
 8013192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013194:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013196:	e895 0003 	ldmia.w	r5, {r0, r1}
 801319a:	e886 0003 	stmia.w	r6, {r0, r1}
 801319e:	f887 c008 	strb.w	ip, [r7, #8]
 80131a2:	6860      	ldr	r0, [r4, #4]
 80131a4:	2300      	movs	r3, #0
 80131a6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80131aa:	e6fa      	b.n	8012fa2 <_rclc_take_new_data+0x3a>
 80131ac:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80131b0:	a90a      	add	r1, sp, #40	; 0x28
 80131b2:	3010      	adds	r0, #16
 80131b4:	f008 fd24 	bl	801bc00 <rcl_action_take_cancel_response>
 80131b8:	4605      	mov	r5, r0
 80131ba:	2800      	cmp	r0, #0
 80131bc:	f47f af37 	bne.w	801302e <_rclc_take_new_data+0xc6>
 80131c0:	6860      	ldr	r0, [r4, #4]
 80131c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80131c6:	f009 f95d 	bl	801c484 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80131ca:	4606      	mov	r6, r0
 80131cc:	6860      	ldr	r0, [r4, #4]
 80131ce:	2e00      	cmp	r6, #0
 80131d0:	f43f af40 	beq.w	8013054 <_rclc_take_new_data+0xec>
 80131d4:	2701      	movs	r7, #1
 80131d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80131d8:	84b7      	strh	r7, [r6, #36]	; 0x24
 80131da:	2b00      	cmp	r3, #0
 80131dc:	f43f af3a 	beq.w	8013054 <_rclc_take_new_data+0xec>
 80131e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80131e2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80131e6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80131ea:	f009 f8f9 	bl	801c3e0 <rclc_action_find_goal_handle_by_uuid>
 80131ee:	b138      	cbz	r0, 8013200 <_rclc_take_new_data+0x298>
 80131f0:	6860      	ldr	r0, [r4, #4]
 80131f2:	3501      	adds	r5, #1
 80131f4:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 80131f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80131fa:	42ab      	cmp	r3, r5
 80131fc:	d8f0      	bhi.n	80131e0 <_rclc_take_new_data+0x278>
 80131fe:	e729      	b.n	8013054 <_rclc_take_new_data+0xec>
 8013200:	6860      	ldr	r0, [r4, #4]
 8013202:	3501      	adds	r5, #1
 8013204:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013206:	42ab      	cmp	r3, r5
 8013208:	d8ea      	bhi.n	80131e0 <_rclc_take_new_data+0x278>
 801320a:	e723      	b.n	8013054 <_rclc_take_new_data+0xec>
 801320c:	ab06      	add	r3, sp, #24
 801320e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013210:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013214:	2103      	movs	r1, #3
 8013216:	6860      	ldr	r0, [r4, #4]
 8013218:	e896 000c 	ldmia.w	r6, {r2, r3}
 801321c:	f009 f9a8 	bl	801c570 <rclc_action_server_goal_cancel_reject>
 8013220:	e6c4      	b.n	8012fac <_rclc_take_new_data+0x44>
 8013222:	ab06      	add	r3, sp, #24
 8013224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013226:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801322a:	2102      	movs	r1, #2
 801322c:	6860      	ldr	r0, [r4, #4]
 801322e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013232:	f009 f99d 	bl	801c570 <rclc_action_server_goal_cancel_reject>
 8013236:	e6b9      	b.n	8012fac <_rclc_take_new_data+0x44>
 8013238:	6860      	ldr	r0, [r4, #4]
 801323a:	e706      	b.n	801304a <_rclc_take_new_data+0xe2>
 801323c:	4631      	mov	r1, r6
 801323e:	6860      	ldr	r0, [r4, #4]
 8013240:	f009 f8b8 	bl	801c3b4 <rclc_action_remove_used_goal_handle>
 8013244:	f000 fe58 	bl	8013ef8 <rcutils_reset_error>
 8013248:	e6b0      	b.n	8012fac <_rclc_take_new_data+0x44>
 801324a:	2501      	movs	r5, #1
 801324c:	e6ae      	b.n	8012fac <_rclc_take_new_data+0x44>
 801324e:	bf00      	nop

08013250 <_rclc_execute.part.0>:
 8013250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013252:	7803      	ldrb	r3, [r0, #0]
 8013254:	b085      	sub	sp, #20
 8013256:	4604      	mov	r4, r0
 8013258:	2b0a      	cmp	r3, #10
 801325a:	f200 8139 	bhi.w	80134d0 <_rclc_execute.part.0+0x280>
 801325e:	e8df f003 	tbb	[pc, r3]
 8013262:	4268      	.short	0x4268
 8013264:	06a75b4d 	.word	0x06a75b4d
 8013268:	721d0606 	.word	0x721d0606
 801326c:	62          	.byte	0x62
 801326d:	00          	.byte	0x00
 801326e:	2b06      	cmp	r3, #6
 8013270:	f000 8126 	beq.w	80134c0 <_rclc_execute.part.0+0x270>
 8013274:	2b07      	cmp	r3, #7
 8013276:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013278:	f040 811c 	bne.w	80134b4 <_rclc_execute.part.0+0x264>
 801327c:	f104 0510 	add.w	r5, r4, #16
 8013280:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8013284:	6880      	ldr	r0, [r0, #8]
 8013286:	4798      	blx	r3
 8013288:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801328a:	4629      	mov	r1, r5
 801328c:	6860      	ldr	r0, [r4, #4]
 801328e:	f7ff fcb3 	bl	8012bf8 <rcl_send_response>
 8013292:	4604      	mov	r4, r0
 8013294:	b378      	cbz	r0, 80132f6 <_rclc_execute.part.0+0xa6>
 8013296:	f000 fe2f 	bl	8013ef8 <rcutils_reset_error>
 801329a:	e02c      	b.n	80132f6 <_rclc_execute.part.0+0xa6>
 801329c:	6840      	ldr	r0, [r0, #4]
 801329e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f000 808e 	beq.w	80133c4 <_rclc_execute.part.0+0x174>
 80132a8:	2600      	movs	r6, #0
 80132aa:	2701      	movs	r7, #1
 80132ac:	e004      	b.n	80132b8 <_rclc_execute.part.0+0x68>
 80132ae:	f009 f84b 	bl	801c348 <rclc_action_send_result_request>
 80132b2:	b998      	cbnz	r0, 80132dc <_rclc_execute.part.0+0x8c>
 80132b4:	722f      	strb	r7, [r5, #8]
 80132b6:	6860      	ldr	r0, [r4, #4]
 80132b8:	f009 f8f6 	bl	801c4a8 <rclc_action_find_first_handle_with_goal_response>
 80132bc:	4605      	mov	r5, r0
 80132be:	2800      	cmp	r0, #0
 80132c0:	d07f      	beq.n	80133c2 <_rclc_execute.part.0+0x172>
 80132c2:	6863      	ldr	r3, [r4, #4]
 80132c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80132c6:	699b      	ldr	r3, [r3, #24]
 80132c8:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 80132cc:	f885 6020 	strb.w	r6, [r5, #32]
 80132d0:	4798      	blx	r3
 80132d2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80132d6:	4628      	mov	r0, r5
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d1e8      	bne.n	80132ae <_rclc_execute.part.0+0x5e>
 80132dc:	6860      	ldr	r0, [r4, #4]
 80132de:	4629      	mov	r1, r5
 80132e0:	f009 f868 	bl	801c3b4 <rclc_action_remove_used_goal_handle>
 80132e4:	e7e7      	b.n	80132b6 <_rclc_execute.part.0+0x66>
 80132e6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80132ea:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 80132ee:	b100      	cbz	r0, 80132f2 <_rclc_execute.part.0+0xa2>
 80132f0:	68a0      	ldr	r0, [r4, #8]
 80132f2:	2400      	movs	r4, #0
 80132f4:	4798      	blx	r3
 80132f6:	4620      	mov	r0, r4
 80132f8:	b005      	add	sp, #20
 80132fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132fc:	6840      	ldr	r0, [r0, #4]
 80132fe:	f007 fc7d 	bl	801abfc <rcl_timer_call>
 8013302:	f240 3321 	movw	r3, #801	; 0x321
 8013306:	4604      	mov	r4, r0
 8013308:	4298      	cmp	r0, r3
 801330a:	d001      	beq.n	8013310 <_rclc_execute.part.0+0xc0>
 801330c:	2800      	cmp	r0, #0
 801330e:	d1c2      	bne.n	8013296 <_rclc_execute.part.0+0x46>
 8013310:	2400      	movs	r4, #0
 8013312:	4620      	mov	r0, r4
 8013314:	b005      	add	sp, #20
 8013316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013318:	2400      	movs	r4, #0
 801331a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801331c:	6880      	ldr	r0, [r0, #8]
 801331e:	4798      	blx	r3
 8013320:	4620      	mov	r0, r4
 8013322:	b005      	add	sp, #20
 8013324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013326:	2400      	movs	r4, #0
 8013328:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801332a:	4798      	blx	r3
 801332c:	4620      	mov	r0, r4
 801332e:	b005      	add	sp, #20
 8013330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013332:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8013336:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013338:	b100      	cbz	r0, 801333c <_rclc_execute.part.0+0xec>
 801333a:	68a0      	ldr	r0, [r4, #8]
 801333c:	2400      	movs	r4, #0
 801333e:	4798      	blx	r3
 8013340:	4620      	mov	r0, r4
 8013342:	b005      	add	sp, #20
 8013344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013346:	6840      	ldr	r0, [r0, #4]
 8013348:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801334c:	bb3b      	cbnz	r3, 801339e <_rclc_execute.part.0+0x14e>
 801334e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d07d      	beq.n	8013452 <_rclc_execute.part.0+0x202>
 8013356:	f640 0634 	movw	r6, #2100	; 0x834
 801335a:	2701      	movs	r7, #1
 801335c:	e007      	b.n	801336e <_rclc_execute.part.0+0x11e>
 801335e:	4628      	mov	r0, r5
 8013360:	f009 f8ba 	bl	801c4d8 <rclc_action_server_response_goal_request>
 8013364:	4629      	mov	r1, r5
 8013366:	6860      	ldr	r0, [r4, #4]
 8013368:	f009 f824 	bl	801c3b4 <rclc_action_remove_used_goal_handle>
 801336c:	6860      	ldr	r0, [r4, #4]
 801336e:	2100      	movs	r1, #0
 8013370:	f009 f84c 	bl	801c40c <rclc_action_find_first_handle_by_status>
 8013374:	4605      	mov	r5, r0
 8013376:	2800      	cmp	r0, #0
 8013378:	d068      	beq.n	801344c <_rclc_execute.part.0+0x1fc>
 801337a:	6863      	ldr	r3, [r4, #4]
 801337c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801337e:	699b      	ldr	r3, [r3, #24]
 8013380:	4798      	blx	r3
 8013382:	42b0      	cmp	r0, r6
 8013384:	f04f 0100 	mov.w	r1, #0
 8013388:	d1e9      	bne.n	801335e <_rclc_execute.part.0+0x10e>
 801338a:	2101      	movs	r1, #1
 801338c:	4628      	mov	r0, r5
 801338e:	f009 f8a3 	bl	801c4d8 <rclc_action_server_response_goal_request>
 8013392:	722f      	strb	r7, [r5, #8]
 8013394:	e7ea      	b.n	801336c <_rclc_execute.part.0+0x11c>
 8013396:	6848      	ldr	r0, [r1, #4]
 8013398:	f009 f80c 	bl	801c3b4 <rclc_action_remove_used_goal_handle>
 801339c:	6860      	ldr	r0, [r4, #4]
 801339e:	f009 f841 	bl	801c424 <rclc_action_find_first_terminated_handle>
 80133a2:	4601      	mov	r1, r0
 80133a4:	2800      	cmp	r0, #0
 80133a6:	d1f6      	bne.n	8013396 <_rclc_execute.part.0+0x146>
 80133a8:	6860      	ldr	r0, [r4, #4]
 80133aa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80133ae:	e7ce      	b.n	801334e <_rclc_execute.part.0+0xfe>
 80133b0:	2400      	movs	r4, #0
 80133b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80133b4:	f100 0110 	add.w	r1, r0, #16
 80133b8:	6880      	ldr	r0, [r0, #8]
 80133ba:	4798      	blx	r3
 80133bc:	4620      	mov	r0, r4
 80133be:	b005      	add	sp, #20
 80133c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133c2:	6860      	ldr	r0, [r4, #4]
 80133c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80133c8:	b18b      	cbz	r3, 80133ee <_rclc_execute.part.0+0x19e>
 80133ca:	68c5      	ldr	r5, [r0, #12]
 80133cc:	b32d      	cbz	r5, 801341a <_rclc_execute.part.0+0x1ca>
 80133ce:	2600      	movs	r6, #0
 80133d0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80133d4:	b143      	cbz	r3, 80133e8 <_rclc_execute.part.0+0x198>
 80133d6:	69c3      	ldr	r3, [r0, #28]
 80133d8:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 80133dc:	b123      	cbz	r3, 80133e8 <_rclc_execute.part.0+0x198>
 80133de:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80133e0:	4628      	mov	r0, r5
 80133e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80133e4:	4798      	blx	r3
 80133e6:	6860      	ldr	r0, [r4, #4]
 80133e8:	682d      	ldr	r5, [r5, #0]
 80133ea:	2d00      	cmp	r5, #0
 80133ec:	d1f0      	bne.n	80133d0 <_rclc_execute.part.0+0x180>
 80133ee:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80133f2:	b193      	cbz	r3, 801341a <_rclc_execute.part.0+0x1ca>
 80133f4:	68c5      	ldr	r5, [r0, #12]
 80133f6:	b185      	cbz	r5, 801341a <_rclc_execute.part.0+0x1ca>
 80133f8:	2600      	movs	r6, #0
 80133fa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80133fe:	b14b      	cbz	r3, 8013414 <_rclc_execute.part.0+0x1c4>
 8013400:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013402:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8013406:	b12b      	cbz	r3, 8013414 <_rclc_execute.part.0+0x1c4>
 8013408:	4628      	mov	r0, r5
 801340a:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 801340e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013410:	4798      	blx	r3
 8013412:	6860      	ldr	r0, [r4, #4]
 8013414:	682d      	ldr	r5, [r5, #0]
 8013416:	2d00      	cmp	r5, #0
 8013418:	d1ef      	bne.n	80133fa <_rclc_execute.part.0+0x1aa>
 801341a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 801341e:	2b00      	cmp	r3, #0
 8013420:	f43f af76 	beq.w	8013310 <_rclc_execute.part.0+0xc0>
 8013424:	2700      	movs	r7, #0
 8013426:	e00b      	b.n	8013440 <_rclc_execute.part.0+0x1f0>
 8013428:	6863      	ldr	r3, [r4, #4]
 801342a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801342c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801342e:	6a1e      	ldr	r6, [r3, #32]
 8013430:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8013434:	47b0      	blx	r6
 8013436:	6860      	ldr	r0, [r4, #4]
 8013438:	4629      	mov	r1, r5
 801343a:	f008 ffbb 	bl	801c3b4 <rclc_action_remove_used_goal_handle>
 801343e:	6860      	ldr	r0, [r4, #4]
 8013440:	f009 f83e 	bl	801c4c0 <rclc_action_find_first_handle_with_result_response>
 8013444:	4605      	mov	r5, r0
 8013446:	2800      	cmp	r0, #0
 8013448:	d1ee      	bne.n	8013428 <_rclc_execute.part.0+0x1d8>
 801344a:	e761      	b.n	8013310 <_rclc_execute.part.0+0xc0>
 801344c:	6860      	ldr	r0, [r4, #4]
 801344e:	f880 5020 	strb.w	r5, [r0, #32]
 8013452:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8013456:	2b00      	cmp	r3, #0
 8013458:	f43f af5a 	beq.w	8013310 <_rclc_execute.part.0+0xc0>
 801345c:	68c5      	ldr	r5, [r0, #12]
 801345e:	b1b5      	cbz	r5, 801348e <_rclc_execute.part.0+0x23e>
 8013460:	2602      	movs	r6, #2
 8013462:	e001      	b.n	8013468 <_rclc_execute.part.0+0x218>
 8013464:	682d      	ldr	r5, [r5, #0]
 8013466:	b195      	cbz	r5, 801348e <_rclc_execute.part.0+0x23e>
 8013468:	f995 3008 	ldrsb.w	r3, [r5, #8]
 801346c:	2b03      	cmp	r3, #3
 801346e:	d1f9      	bne.n	8013464 <_rclc_execute.part.0+0x214>
 8013470:	69c3      	ldr	r3, [r0, #28]
 8013472:	4628      	mov	r0, r5
 8013474:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013476:	4798      	blx	r3
 8013478:	4603      	mov	r3, r0
 801347a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 801347e:	4628      	mov	r0, r5
 8013480:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8013484:	b143      	cbz	r3, 8013498 <_rclc_execute.part.0+0x248>
 8013486:	f009 f847 	bl	801c518 <rclc_action_server_goal_cancel_accept>
 801348a:	6860      	ldr	r0, [r4, #4]
 801348c:	e7ea      	b.n	8013464 <_rclc_execute.part.0+0x214>
 801348e:	2300      	movs	r3, #0
 8013490:	461c      	mov	r4, r3
 8013492:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8013496:	e72e      	b.n	80132f6 <_rclc_execute.part.0+0xa6>
 8013498:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801349a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 801349e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80134a2:	2101      	movs	r1, #1
 80134a4:	6860      	ldr	r0, [r4, #4]
 80134a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134aa:	f009 f861 	bl	801c570 <rclc_action_server_goal_cancel_reject>
 80134ae:	722e      	strb	r6, [r5, #8]
 80134b0:	6860      	ldr	r0, [r4, #4]
 80134b2:	e7d7      	b.n	8013464 <_rclc_execute.part.0+0x214>
 80134b4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80134b6:	f104 0510 	add.w	r5, r4, #16
 80134ba:	6880      	ldr	r0, [r0, #8]
 80134bc:	4798      	blx	r3
 80134be:	e6e3      	b.n	8013288 <_rclc_execute.part.0+0x38>
 80134c0:	f100 0510 	add.w	r5, r0, #16
 80134c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80134c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80134c8:	4629      	mov	r1, r5
 80134ca:	6880      	ldr	r0, [r0, #8]
 80134cc:	4798      	blx	r3
 80134ce:	e6db      	b.n	8013288 <_rclc_execute.part.0+0x38>
 80134d0:	2401      	movs	r4, #1
 80134d2:	e710      	b.n	80132f6 <_rclc_execute.part.0+0xa6>

080134d4 <rclc_executor_trigger_any>:
 80134d4:	2800      	cmp	r0, #0
 80134d6:	d03d      	beq.n	8013554 <rclc_executor_trigger_any+0x80>
 80134d8:	2900      	cmp	r1, #0
 80134da:	d03c      	beq.n	8013556 <rclc_executor_trigger_any+0x82>
 80134dc:	4603      	mov	r3, r0
 80134de:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 80134e2:	2200      	movs	r2, #0
 80134e4:	2800      	cmp	r0, #0
 80134e6:	d035      	beq.n	8013554 <rclc_executor_trigger_any+0x80>
 80134e8:	b430      	push	{r4, r5}
 80134ea:	f893 c000 	ldrb.w	ip, [r3]
 80134ee:	f1bc 0f08 	cmp.w	ip, #8
 80134f2:	d11d      	bne.n	8013530 <rclc_executor_trigger_any+0x5c>
 80134f4:	685c      	ldr	r4, [r3, #4]
 80134f6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80134f8:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80134fc:	d105      	bne.n	801350a <rclc_executor_trigger_any+0x36>
 80134fe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8013502:	b910      	cbnz	r0, 801350a <rclc_executor_trigger_any+0x36>
 8013504:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8013508:	b128      	cbz	r0, 8013516 <rclc_executor_trigger_any+0x42>
 801350a:	bc30      	pop	{r4, r5}
 801350c:	4770      	bx	lr
 801350e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8013512:	2800      	cmp	r0, #0
 8013514:	d1f9      	bne.n	801350a <rclc_executor_trigger_any+0x36>
 8013516:	3201      	adds	r2, #1
 8013518:	3340      	adds	r3, #64	; 0x40
 801351a:	4291      	cmp	r1, r2
 801351c:	d017      	beq.n	801354e <rclc_executor_trigger_any+0x7a>
 801351e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8013522:	2800      	cmp	r0, #0
 8013524:	d0f1      	beq.n	801350a <rclc_executor_trigger_any+0x36>
 8013526:	f893 c000 	ldrb.w	ip, [r3]
 801352a:	f1bc 0f08 	cmp.w	ip, #8
 801352e:	d0e1      	beq.n	80134f4 <rclc_executor_trigger_any+0x20>
 8013530:	f1bc 0f09 	cmp.w	ip, #9
 8013534:	d1eb      	bne.n	801350e <rclc_executor_trigger_any+0x3a>
 8013536:	685c      	ldr	r4, [r3, #4]
 8013538:	6a25      	ldr	r5, [r4, #32]
 801353a:	2d00      	cmp	r5, #0
 801353c:	d1e5      	bne.n	801350a <rclc_executor_trigger_any+0x36>
 801353e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8013542:	2800      	cmp	r0, #0
 8013544:	d1e1      	bne.n	801350a <rclc_executor_trigger_any+0x36>
 8013546:	3201      	adds	r2, #1
 8013548:	3340      	adds	r3, #64	; 0x40
 801354a:	4291      	cmp	r1, r2
 801354c:	d1e7      	bne.n	801351e <rclc_executor_trigger_any+0x4a>
 801354e:	2000      	movs	r0, #0
 8013550:	bc30      	pop	{r4, r5}
 8013552:	4770      	bx	lr
 8013554:	4770      	bx	lr
 8013556:	4608      	mov	r0, r1
 8013558:	4770      	bx	lr
 801355a:	bf00      	nop

0801355c <rclc_executor_get_zero_initialized_executor>:
 801355c:	b510      	push	{r4, lr}
 801355e:	4604      	mov	r4, r0
 8013560:	2288      	movs	r2, #136	; 0x88
 8013562:	4902      	ldr	r1, [pc, #8]	; (801356c <rclc_executor_get_zero_initialized_executor+0x10>)
 8013564:	f00c fbeb 	bl	801fd3e <memcpy>
 8013568:	4620      	mov	r0, r4
 801356a:	bd10      	pop	{r4, pc}
 801356c:	08023d28 	.word	0x08023d28

08013570 <rclc_executor_init>:
 8013570:	2900      	cmp	r1, #0
 8013572:	d06a      	beq.n	801364a <rclc_executor_init+0xda>
 8013574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013578:	4605      	mov	r5, r0
 801357a:	b0b0      	sub	sp, #192	; 0xc0
 801357c:	2800      	cmp	r0, #0
 801357e:	d05c      	beq.n	801363a <rclc_executor_init+0xca>
 8013580:	4616      	mov	r6, r2
 8013582:	4618      	mov	r0, r3
 8013584:	4688      	mov	r8, r1
 8013586:	461f      	mov	r7, r3
 8013588:	f000 fc78 	bl	8013e7c <rcutils_allocator_is_valid>
 801358c:	2e00      	cmp	r6, #0
 801358e:	d054      	beq.n	801363a <rclc_executor_init+0xca>
 8013590:	f080 0401 	eor.w	r4, r0, #1
 8013594:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8013598:	d14f      	bne.n	801363a <rclc_executor_init+0xca>
 801359a:	2288      	movs	r2, #136	; 0x88
 801359c:	4930      	ldr	r1, [pc, #192]	; (8013660 <rclc_executor_init+0xf0>)
 801359e:	a80e      	add	r0, sp, #56	; 0x38
 80135a0:	f00c fbcd 	bl	801fd3e <memcpy>
 80135a4:	a90e      	add	r1, sp, #56	; 0x38
 80135a6:	2288      	movs	r2, #136	; 0x88
 80135a8:	4628      	mov	r0, r5
 80135aa:	f00c fbc8 	bl	801fd3e <memcpy>
 80135ae:	4668      	mov	r0, sp
 80135b0:	f8c5 8000 	str.w	r8, [r5]
 80135b4:	60ae      	str	r6, [r5, #8]
 80135b6:	f007 fc97 	bl	801aee8 <rcl_get_zero_initialized_wait_set>
 80135ba:	46ec      	mov	ip, sp
 80135bc:	f105 0e14 	add.w	lr, r5, #20
 80135c0:	f8d7 8000 	ldr.w	r8, [r7]
 80135c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135d8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013658 <rclc_executor_init+0xe8>
 80135dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135e0:	f8dc 3000 	ldr.w	r3, [ip]
 80135e4:	01b0      	lsls	r0, r6, #6
 80135e6:	6939      	ldr	r1, [r7, #16]
 80135e8:	f8ce 3000 	str.w	r3, [lr]
 80135ec:	612f      	str	r7, [r5, #16]
 80135ee:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 80135f2:	47c0      	blx	r8
 80135f4:	6068      	str	r0, [r5, #4]
 80135f6:	b908      	cbnz	r0, 80135fc <rclc_executor_init+0x8c>
 80135f8:	e029      	b.n	801364e <rclc_executor_init+0xde>
 80135fa:	6868      	ldr	r0, [r5, #4]
 80135fc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8013600:	3401      	adds	r4, #1
 8013602:	4631      	mov	r1, r6
 8013604:	f000 fac0 	bl	8013b88 <rclc_executor_handle_init>
 8013608:	42a6      	cmp	r6, r4
 801360a:	d8f6      	bhi.n	80135fa <rclc_executor_init+0x8a>
 801360c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8013610:	f000 faae 	bl	8013b70 <rclc_executor_handle_counters_zero_init>
 8013614:	4a13      	ldr	r2, [pc, #76]	; (8013664 <rclc_executor_init+0xf4>)
 8013616:	2300      	movs	r3, #0
 8013618:	6868      	ldr	r0, [r5, #4]
 801361a:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 801361e:	b168      	cbz	r0, 801363c <rclc_executor_init+0xcc>
 8013620:	68ab      	ldr	r3, [r5, #8]
 8013622:	b173      	cbz	r3, 8013642 <rclc_executor_init+0xd2>
 8013624:	692a      	ldr	r2, [r5, #16]
 8013626:	fab2 f382 	clz	r3, r2
 801362a:	095b      	lsrs	r3, r3, #5
 801362c:	b14a      	cbz	r2, 8013642 <rclc_executor_init+0xd2>
 801362e:	4618      	mov	r0, r3
 8013630:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 8013634:	b030      	add	sp, #192	; 0xc0
 8013636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801363a:	200b      	movs	r0, #11
 801363c:	b030      	add	sp, #192	; 0xc0
 801363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013642:	2000      	movs	r0, #0
 8013644:	b030      	add	sp, #192	; 0xc0
 8013646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801364a:	200b      	movs	r0, #11
 801364c:	4770      	bx	lr
 801364e:	200a      	movs	r0, #10
 8013650:	e7f4      	b.n	801363c <rclc_executor_init+0xcc>
 8013652:	bf00      	nop
 8013654:	f3af 8000 	nop.w
 8013658:	3b9aca00 	.word	0x3b9aca00
 801365c:	00000000 	.word	0x00000000
 8013660:	08023d28 	.word	0x08023d28
 8013664:	080134d5 	.word	0x080134d5

08013668 <rclc_executor_add_subscription>:
 8013668:	2b00      	cmp	r3, #0
 801366a:	bf18      	it	ne
 801366c:	2a00      	cmpne	r2, #0
 801366e:	b570      	push	{r4, r5, r6, lr}
 8013670:	4604      	mov	r4, r0
 8013672:	bf0c      	ite	eq
 8013674:	2001      	moveq	r0, #1
 8013676:	2000      	movne	r0, #0
 8013678:	f89d c010 	ldrb.w	ip, [sp, #16]
 801367c:	2900      	cmp	r1, #0
 801367e:	bf08      	it	eq
 8013680:	f040 0001 	orreq.w	r0, r0, #1
 8013684:	bb28      	cbnz	r0, 80136d2 <rclc_executor_add_subscription+0x6a>
 8013686:	fab4 f584 	clz	r5, r4
 801368a:	096d      	lsrs	r5, r5, #5
 801368c:	b30c      	cbz	r4, 80136d2 <rclc_executor_add_subscription+0x6a>
 801368e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8013692:	4286      	cmp	r6, r0
 8013694:	d301      	bcc.n	801369a <rclc_executor_add_subscription+0x32>
 8013696:	2001      	movs	r0, #1
 8013698:	bd70      	pop	{r4, r5, r6, pc}
 801369a:	6860      	ldr	r0, [r4, #4]
 801369c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 80136a0:	f800 500e 	strb.w	r5, [r0, lr]
 80136a4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80136a8:	3601      	adds	r6, #1
 80136aa:	6303      	str	r3, [r0, #48]	; 0x30
 80136ac:	2301      	movs	r3, #1
 80136ae:	62c5      	str	r5, [r0, #44]	; 0x2c
 80136b0:	f104 0514 	add.w	r5, r4, #20
 80136b4:	f880 c001 	strb.w	ip, [r0, #1]
 80136b8:	8703      	strh	r3, [r0, #56]	; 0x38
 80136ba:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80136be:	4628      	mov	r0, r5
 80136c0:	60e6      	str	r6, [r4, #12]
 80136c2:	f007 fc25 	bl	801af10 <rcl_wait_set_is_valid>
 80136c6:	b930      	cbnz	r0, 80136d6 <rclc_executor_add_subscription+0x6e>
 80136c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80136ca:	2000      	movs	r0, #0
 80136cc:	3301      	adds	r3, #1
 80136ce:	64a3      	str	r3, [r4, #72]	; 0x48
 80136d0:	bd70      	pop	{r4, r5, r6, pc}
 80136d2:	200b      	movs	r0, #11
 80136d4:	bd70      	pop	{r4, r5, r6, pc}
 80136d6:	4628      	mov	r0, r5
 80136d8:	f007 fc20 	bl	801af1c <rcl_wait_set_fini>
 80136dc:	2800      	cmp	r0, #0
 80136de:	d0f3      	beq.n	80136c8 <rclc_executor_add_subscription+0x60>
 80136e0:	bd70      	pop	{r4, r5, r6, pc}
 80136e2:	bf00      	nop

080136e4 <rclc_executor_add_service>:
 80136e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e6:	9d06      	ldr	r5, [sp, #24]
 80136e8:	4604      	mov	r4, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	bf18      	it	ne
 80136ee:	2d00      	cmpne	r5, #0
 80136f0:	bf0c      	ite	eq
 80136f2:	2001      	moveq	r0, #1
 80136f4:	2000      	movne	r0, #0
 80136f6:	2a00      	cmp	r2, #0
 80136f8:	bf08      	it	eq
 80136fa:	f040 0001 	orreq.w	r0, r0, #1
 80136fe:	2900      	cmp	r1, #0
 8013700:	bf08      	it	eq
 8013702:	f040 0001 	orreq.w	r0, r0, #1
 8013706:	bb40      	cbnz	r0, 801375a <rclc_executor_add_service+0x76>
 8013708:	fab4 f684 	clz	r6, r4
 801370c:	0976      	lsrs	r6, r6, #5
 801370e:	b324      	cbz	r4, 801375a <rclc_executor_add_service+0x76>
 8013710:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8013714:	42b8      	cmp	r0, r7
 8013716:	d301      	bcc.n	801371c <rclc_executor_add_service+0x38>
 8013718:	2001      	movs	r0, #1
 801371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801371c:	6867      	ldr	r7, [r4, #4]
 801371e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8013722:	f100 0c01 	add.w	ip, r0, #1
 8013726:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 801372a:	6283      	str	r3, [r0, #40]	; 0x28
 801372c:	2305      	movs	r3, #5
 801372e:	6305      	str	r5, [r0, #48]	; 0x30
 8013730:	f104 0514 	add.w	r5, r4, #20
 8013734:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8013738:	f827 300e 	strh.w	r3, [r7, lr]
 801373c:	2301      	movs	r3, #1
 801373e:	62c6      	str	r6, [r0, #44]	; 0x2c
 8013740:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8013744:	4628      	mov	r0, r5
 8013746:	f8c4 c00c 	str.w	ip, [r4, #12]
 801374a:	f007 fbe1 	bl	801af10 <rcl_wait_set_is_valid>
 801374e:	b930      	cbnz	r0, 801375e <rclc_executor_add_service+0x7a>
 8013750:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013752:	2000      	movs	r0, #0
 8013754:	3301      	adds	r3, #1
 8013756:	6563      	str	r3, [r4, #84]	; 0x54
 8013758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801375a:	200b      	movs	r0, #11
 801375c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801375e:	4628      	mov	r0, r5
 8013760:	f007 fbdc 	bl	801af1c <rcl_wait_set_fini>
 8013764:	2800      	cmp	r0, #0
 8013766:	d0f3      	beq.n	8013750 <rclc_executor_add_service+0x6c>
 8013768:	e7d7      	b.n	801371a <rclc_executor_add_service+0x36>
 801376a:	bf00      	nop

0801376c <rclc_executor_prepare>:
 801376c:	2800      	cmp	r0, #0
 801376e:	d044      	beq.n	80137fa <rclc_executor_prepare+0x8e>
 8013770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013772:	f100 0514 	add.w	r5, r0, #20
 8013776:	b09b      	sub	sp, #108	; 0x6c
 8013778:	4604      	mov	r4, r0
 801377a:	4628      	mov	r0, r5
 801377c:	f007 fbc8 	bl	801af10 <rcl_wait_set_is_valid>
 8013780:	b110      	cbz	r0, 8013788 <rclc_executor_prepare+0x1c>
 8013782:	2000      	movs	r0, #0
 8013784:	b01b      	add	sp, #108	; 0x6c
 8013786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013788:	4628      	mov	r0, r5
 801378a:	f007 fbc7 	bl	801af1c <rcl_wait_set_fini>
 801378e:	2800      	cmp	r0, #0
 8013790:	d130      	bne.n	80137f4 <rclc_executor_prepare+0x88>
 8013792:	a80c      	add	r0, sp, #48	; 0x30
 8013794:	ae04      	add	r6, sp, #16
 8013796:	f007 fba7 	bl	801aee8 <rcl_get_zero_initialized_wait_set>
 801379a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801379e:	46ae      	mov	lr, r5
 80137a0:	6927      	ldr	r7, [r4, #16]
 80137a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80137aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80137b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80137ba:	f8dc 3000 	ldr.w	r3, [ip]
 80137be:	f8ce 3000 	str.w	r3, [lr]
 80137c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80137c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	4628      	mov	r0, r5
 80137ca:	6822      	ldr	r2, [r4, #0]
 80137cc:	6033      	str	r3, [r6, #0]
 80137ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80137d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80137d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80137d6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 80137da:	e9cd 2100 	strd	r2, r1, [sp]
 80137de:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80137e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80137e2:	f007 fe9b 	bl	801b51c <rcl_wait_set_init>
 80137e6:	2800      	cmp	r0, #0
 80137e8:	d0cc      	beq.n	8013784 <rclc_executor_prepare+0x18>
 80137ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80137ec:	f000 fb84 	bl	8013ef8 <rcutils_reset_error>
 80137f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80137f2:	e7c7      	b.n	8013784 <rclc_executor_prepare+0x18>
 80137f4:	f000 fb80 	bl	8013ef8 <rcutils_reset_error>
 80137f8:	e7cb      	b.n	8013792 <rclc_executor_prepare+0x26>
 80137fa:	200b      	movs	r0, #11
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop

08013800 <rclc_executor_spin_some.part.0>:
 8013800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013804:	4605      	mov	r5, r0
 8013806:	4691      	mov	r9, r2
 8013808:	4698      	mov	r8, r3
 801380a:	f7ff ffaf 	bl	801376c <rclc_executor_prepare>
 801380e:	f105 0614 	add.w	r6, r5, #20
 8013812:	4630      	mov	r0, r6
 8013814:	f007 fc4e 	bl	801b0b4 <rcl_wait_set_clear>
 8013818:	4607      	mov	r7, r0
 801381a:	2800      	cmp	r0, #0
 801381c:	f040 80a8 	bne.w	8013970 <rclc_executor_spin_some.part.0+0x170>
 8013820:	68ab      	ldr	r3, [r5, #8]
 8013822:	b30b      	cbz	r3, 8013868 <rclc_executor_spin_some.part.0+0x68>
 8013824:	4604      	mov	r4, r0
 8013826:	6869      	ldr	r1, [r5, #4]
 8013828:	01a2      	lsls	r2, r4, #6
 801382a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 801382e:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8013832:	b1cb      	cbz	r3, 8013868 <rclc_executor_spin_some.part.0+0x68>
 8013834:	5c8b      	ldrb	r3, [r1, r2]
 8013836:	2b0a      	cmp	r3, #10
 8013838:	f200 80de 	bhi.w	80139f8 <rclc_executor_spin_some.part.0+0x1f8>
 801383c:	e8df f003 	tbb	[pc, r3]
 8013840:	8da99d9d 	.word	0x8da99d9d
 8013844:	0606068d 	.word	0x0606068d
 8013848:	c1ce      	.short	0xc1ce
 801384a:	b5          	.byte	0xb5
 801384b:	00          	.byte	0x00
 801384c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013850:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013854:	4630      	mov	r0, r6
 8013856:	f007 ff7d 	bl	801b754 <rcl_wait_set_add_service>
 801385a:	2800      	cmp	r0, #0
 801385c:	f040 8087 	bne.w	801396e <rclc_executor_spin_some.part.0+0x16e>
 8013860:	3401      	adds	r4, #1
 8013862:	68ab      	ldr	r3, [r5, #8]
 8013864:	429c      	cmp	r4, r3
 8013866:	d3de      	bcc.n	8013826 <rclc_executor_spin_some.part.0+0x26>
 8013868:	4643      	mov	r3, r8
 801386a:	464a      	mov	r2, r9
 801386c:	4630      	mov	r0, r6
 801386e:	f007 ff9f 	bl	801b7b0 <rcl_wait>
 8013872:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8013876:	2b00      	cmp	r3, #0
 8013878:	f000 80c6 	beq.w	8013a08 <rclc_executor_spin_some.part.0+0x208>
 801387c:	2b01      	cmp	r3, #1
 801387e:	f040 80bb 	bne.w	80139f8 <rclc_executor_spin_some.part.0+0x1f8>
 8013882:	68ab      	ldr	r3, [r5, #8]
 8013884:	2b00      	cmp	r3, #0
 8013886:	f000 8159 	beq.w	8013b3c <rclc_executor_spin_some.part.0+0x33c>
 801388a:	2400      	movs	r4, #0
 801388c:	f240 1991 	movw	r9, #401	; 0x191
 8013890:	46a0      	mov	r8, r4
 8013892:	e00a      	b.n	80138aa <rclc_executor_spin_some.part.0+0xaa>
 8013894:	f7ff fb1a 	bl	8012ecc <_rclc_check_for_new_data>
 8013898:	4604      	mov	r4, r0
 801389a:	b110      	cbz	r0, 80138a2 <rclc_executor_spin_some.part.0+0xa2>
 801389c:	4548      	cmp	r0, r9
 801389e:	f040 80b1 	bne.w	8013a04 <rclc_executor_spin_some.part.0+0x204>
 80138a2:	68ab      	ldr	r3, [r5, #8]
 80138a4:	4598      	cmp	r8, r3
 80138a6:	f080 8126 	bcs.w	8013af6 <rclc_executor_spin_some.part.0+0x2f6>
 80138aa:	686a      	ldr	r2, [r5, #4]
 80138ac:	4631      	mov	r1, r6
 80138ae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80138b2:	f108 0801 	add.w	r8, r8, #1
 80138b6:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 80138ba:	f1bc 0f00 	cmp.w	ip, #0
 80138be:	d1e9      	bne.n	8013894 <rclc_executor_spin_some.part.0+0x94>
 80138c0:	4619      	mov	r1, r3
 80138c2:	4610      	mov	r0, r2
 80138c4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 80138c8:	4798      	blx	r3
 80138ca:	2800      	cmp	r0, #0
 80138cc:	f000 809a 	beq.w	8013a04 <rclc_executor_spin_some.part.0+0x204>
 80138d0:	68ab      	ldr	r3, [r5, #8]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f000 8096 	beq.w	8013a04 <rclc_executor_spin_some.part.0+0x204>
 80138d8:	f04f 0800 	mov.w	r8, #0
 80138dc:	f240 1991 	movw	r9, #401	; 0x191
 80138e0:	e009      	b.n	80138f6 <rclc_executor_spin_some.part.0+0xf6>
 80138e2:	f7ff fb41 	bl	8012f68 <_rclc_take_new_data>
 80138e6:	4604      	mov	r4, r0
 80138e8:	b110      	cbz	r0, 80138f0 <rclc_executor_spin_some.part.0+0xf0>
 80138ea:	4548      	cmp	r0, r9
 80138ec:	f040 808a 	bne.w	8013a04 <rclc_executor_spin_some.part.0+0x204>
 80138f0:	68ab      	ldr	r3, [r5, #8]
 80138f2:	4598      	cmp	r8, r3
 80138f4:	d209      	bcs.n	801390a <rclc_executor_spin_some.part.0+0x10a>
 80138f6:	6868      	ldr	r0, [r5, #4]
 80138f8:	4631      	mov	r1, r6
 80138fa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80138fe:	f108 0801 	add.w	r8, r8, #1
 8013902:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8013906:	2a00      	cmp	r2, #0
 8013908:	d1eb      	bne.n	80138e2 <rclc_executor_spin_some.part.0+0xe2>
 801390a:	2b00      	cmp	r3, #0
 801390c:	d07a      	beq.n	8013a04 <rclc_executor_spin_some.part.0+0x204>
 801390e:	2600      	movs	r6, #0
 8013910:	e00e      	b.n	8013930 <rclc_executor_spin_some.part.0+0x130>
 8013912:	f812 200c 	ldrb.w	r2, [r2, ip]
 8013916:	2a08      	cmp	r2, #8
 8013918:	f000 80fc 	beq.w	8013b14 <rclc_executor_spin_some.part.0+0x314>
 801391c:	2a09      	cmp	r2, #9
 801391e:	f000 80ee 	beq.w	8013afe <rclc_executor_spin_some.part.0+0x2fe>
 8013922:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8013926:	b98a      	cbnz	r2, 801394c <rclc_executor_spin_some.part.0+0x14c>
 8013928:	3601      	adds	r6, #1
 801392a:	429e      	cmp	r6, r3
 801392c:	d267      	bcs.n	80139fe <rclc_executor_spin_some.part.0+0x1fe>
 801392e:	2400      	movs	r4, #0
 8013930:	686a      	ldr	r2, [r5, #4]
 8013932:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8013936:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801393a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 801393e:	2900      	cmp	r1, #0
 8013940:	d060      	beq.n	8013a04 <rclc_executor_spin_some.part.0+0x204>
 8013942:	7841      	ldrb	r1, [r0, #1]
 8013944:	2900      	cmp	r1, #0
 8013946:	d0e4      	beq.n	8013912 <rclc_executor_spin_some.part.0+0x112>
 8013948:	2901      	cmp	r1, #1
 801394a:	d1ed      	bne.n	8013928 <rclc_executor_spin_some.part.0+0x128>
 801394c:	f7ff fc80 	bl	8013250 <_rclc_execute.part.0>
 8013950:	2800      	cmp	r0, #0
 8013952:	f040 80b5 	bne.w	8013ac0 <rclc_executor_spin_some.part.0+0x2c0>
 8013956:	68ab      	ldr	r3, [r5, #8]
 8013958:	e7e6      	b.n	8013928 <rclc_executor_spin_some.part.0+0x128>
 801395a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 801395e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013962:	4630      	mov	r0, r6
 8013964:	f007 feca 	bl	801b6fc <rcl_wait_set_add_client>
 8013968:	2800      	cmp	r0, #0
 801396a:	f43f af79 	beq.w	8013860 <rclc_executor_spin_some.part.0+0x60>
 801396e:	4607      	mov	r7, r0
 8013970:	f000 fac2 	bl	8013ef8 <rcutils_reset_error>
 8013974:	4638      	mov	r0, r7
 8013976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801397a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 801397e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013982:	4630      	mov	r0, r6
 8013984:	f007 fb6a 	bl	801b05c <rcl_wait_set_add_subscription>
 8013988:	2800      	cmp	r0, #0
 801398a:	f43f af69 	beq.w	8013860 <rclc_executor_spin_some.part.0+0x60>
 801398e:	4607      	mov	r7, r0
 8013990:	e7ee      	b.n	8013970 <rclc_executor_spin_some.part.0+0x170>
 8013992:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013996:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801399a:	4630      	mov	r0, r6
 801399c:	f007 fe7e 	bl	801b69c <rcl_wait_set_add_timer>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	f43f af5d 	beq.w	8013860 <rclc_executor_spin_some.part.0+0x60>
 80139a6:	4607      	mov	r7, r0
 80139a8:	e7e2      	b.n	8013970 <rclc_executor_spin_some.part.0+0x170>
 80139aa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80139ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80139b2:	4630      	mov	r0, r6
 80139b4:	f007 fe46 	bl	801b644 <rcl_wait_set_add_guard_condition>
 80139b8:	2800      	cmp	r0, #0
 80139ba:	f43f af51 	beq.w	8013860 <rclc_executor_spin_some.part.0+0x60>
 80139be:	4607      	mov	r7, r0
 80139c0:	e7d6      	b.n	8013970 <rclc_executor_spin_some.part.0+0x170>
 80139c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80139c6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80139ca:	4630      	mov	r0, r6
 80139cc:	3110      	adds	r1, #16
 80139ce:	f008 fbc3 	bl	801c158 <rcl_action_wait_set_add_action_server>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	f43f af44 	beq.w	8013860 <rclc_executor_spin_some.part.0+0x60>
 80139d8:	4607      	mov	r7, r0
 80139da:	e7c9      	b.n	8013970 <rclc_executor_spin_some.part.0+0x170>
 80139dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80139e0:	2300      	movs	r3, #0
 80139e2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80139e6:	4630      	mov	r0, r6
 80139e8:	3110      	adds	r1, #16
 80139ea:	f008 f98d 	bl	801bd08 <rcl_action_wait_set_add_action_client>
 80139ee:	2800      	cmp	r0, #0
 80139f0:	f43f af36 	beq.w	8013860 <rclc_executor_spin_some.part.0+0x60>
 80139f4:	4607      	mov	r7, r0
 80139f6:	e7bb      	b.n	8013970 <rclc_executor_spin_some.part.0+0x170>
 80139f8:	2701      	movs	r7, #1
 80139fa:	f000 fa7d 	bl	8013ef8 <rcutils_reset_error>
 80139fe:	4638      	mov	r0, r7
 8013a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a04:	4627      	mov	r7, r4
 8013a06:	e7fa      	b.n	80139fe <rclc_executor_spin_some.part.0+0x1fe>
 8013a08:	68ab      	ldr	r3, [r5, #8]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	f000 8093 	beq.w	8013b36 <rclc_executor_spin_some.part.0+0x336>
 8013a10:	2400      	movs	r4, #0
 8013a12:	f240 1991 	movw	r9, #401	; 0x191
 8013a16:	46a0      	mov	r8, r4
 8013a18:	e008      	b.n	8013a2c <rclc_executor_spin_some.part.0+0x22c>
 8013a1a:	f7ff fa57 	bl	8012ecc <_rclc_check_for_new_data>
 8013a1e:	4604      	mov	r4, r0
 8013a20:	b108      	cbz	r0, 8013a26 <rclc_executor_spin_some.part.0+0x226>
 8013a22:	4548      	cmp	r0, r9
 8013a24:	d1ee      	bne.n	8013a04 <rclc_executor_spin_some.part.0+0x204>
 8013a26:	68ab      	ldr	r3, [r5, #8]
 8013a28:	4598      	cmp	r8, r3
 8013a2a:	d266      	bcs.n	8013afa <rclc_executor_spin_some.part.0+0x2fa>
 8013a2c:	686a      	ldr	r2, [r5, #4]
 8013a2e:	4631      	mov	r1, r6
 8013a30:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8013a34:	f108 0801 	add.w	r8, r8, #1
 8013a38:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8013a3c:	f1bc 0f00 	cmp.w	ip, #0
 8013a40:	d1eb      	bne.n	8013a1a <rclc_executor_spin_some.part.0+0x21a>
 8013a42:	4619      	mov	r1, r3
 8013a44:	4610      	mov	r0, r2
 8013a46:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8013a4a:	4798      	blx	r3
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	d0d9      	beq.n	8013a04 <rclc_executor_spin_some.part.0+0x204>
 8013a50:	68ab      	ldr	r3, [r5, #8]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d0d6      	beq.n	8013a04 <rclc_executor_spin_some.part.0+0x204>
 8013a56:	f04f 0a00 	mov.w	sl, #0
 8013a5a:	f240 1891 	movw	r8, #401	; 0x191
 8013a5e:	f240 2959 	movw	r9, #601	; 0x259
 8013a62:	e00e      	b.n	8013a82 <rclc_executor_spin_some.part.0+0x282>
 8013a64:	f813 300b 	ldrb.w	r3, [r3, fp]
 8013a68:	2b08      	cmp	r3, #8
 8013a6a:	d034      	beq.n	8013ad6 <rclc_executor_spin_some.part.0+0x2d6>
 8013a6c:	2b09      	cmp	r3, #9
 8013a6e:	d029      	beq.n	8013ac4 <rclc_executor_spin_some.part.0+0x2c4>
 8013a70:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8013a74:	bb03      	cbnz	r3, 8013ab8 <rclc_executor_spin_some.part.0+0x2b8>
 8013a76:	f10a 0a01 	add.w	sl, sl, #1
 8013a7a:	68ab      	ldr	r3, [r5, #8]
 8013a7c:	459a      	cmp	sl, r3
 8013a7e:	d2be      	bcs.n	80139fe <rclc_executor_spin_some.part.0+0x1fe>
 8013a80:	2400      	movs	r4, #0
 8013a82:	6868      	ldr	r0, [r5, #4]
 8013a84:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8013a88:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8013a8c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d0b7      	beq.n	8013a04 <rclc_executor_spin_some.part.0+0x204>
 8013a94:	4631      	mov	r1, r6
 8013a96:	f7ff fa67 	bl	8012f68 <_rclc_take_new_data>
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	bf18      	it	ne
 8013a9e:	4540      	cmpne	r0, r8
 8013aa0:	d001      	beq.n	8013aa6 <rclc_executor_spin_some.part.0+0x2a6>
 8013aa2:	4548      	cmp	r0, r9
 8013aa4:	d10c      	bne.n	8013ac0 <rclc_executor_spin_some.part.0+0x2c0>
 8013aa6:	686b      	ldr	r3, [r5, #4]
 8013aa8:	eb13 000b 	adds.w	r0, r3, fp
 8013aac:	d021      	beq.n	8013af2 <rclc_executor_spin_some.part.0+0x2f2>
 8013aae:	7842      	ldrb	r2, [r0, #1]
 8013ab0:	2a00      	cmp	r2, #0
 8013ab2:	d0d7      	beq.n	8013a64 <rclc_executor_spin_some.part.0+0x264>
 8013ab4:	2a01      	cmp	r2, #1
 8013ab6:	d1de      	bne.n	8013a76 <rclc_executor_spin_some.part.0+0x276>
 8013ab8:	f7ff fbca 	bl	8013250 <_rclc_execute.part.0>
 8013abc:	2800      	cmp	r0, #0
 8013abe:	d0da      	beq.n	8013a76 <rclc_executor_spin_some.part.0+0x276>
 8013ac0:	4607      	mov	r7, r0
 8013ac2:	e79c      	b.n	80139fe <rclc_executor_spin_some.part.0+0x1fe>
 8013ac4:	6843      	ldr	r3, [r0, #4]
 8013ac6:	6a1a      	ldr	r2, [r3, #32]
 8013ac8:	2a00      	cmp	r2, #0
 8013aca:	d1f5      	bne.n	8013ab8 <rclc_executor_spin_some.part.0+0x2b8>
 8013acc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d0d0      	beq.n	8013a76 <rclc_executor_spin_some.part.0+0x276>
 8013ad4:	e7f0      	b.n	8013ab8 <rclc_executor_spin_some.part.0+0x2b8>
 8013ad6:	6843      	ldr	r3, [r0, #4]
 8013ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013ada:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8013ade:	d1eb      	bne.n	8013ab8 <rclc_executor_spin_some.part.0+0x2b8>
 8013ae0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013ae4:	2a00      	cmp	r2, #0
 8013ae6:	d1e7      	bne.n	8013ab8 <rclc_executor_spin_some.part.0+0x2b8>
 8013ae8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d0c2      	beq.n	8013a76 <rclc_executor_spin_some.part.0+0x276>
 8013af0:	e7e2      	b.n	8013ab8 <rclc_executor_spin_some.part.0+0x2b8>
 8013af2:	270b      	movs	r7, #11
 8013af4:	e783      	b.n	80139fe <rclc_executor_spin_some.part.0+0x1fe>
 8013af6:	686a      	ldr	r2, [r5, #4]
 8013af8:	e6e2      	b.n	80138c0 <rclc_executor_spin_some.part.0+0xc0>
 8013afa:	686a      	ldr	r2, [r5, #4]
 8013afc:	e7a1      	b.n	8013a42 <rclc_executor_spin_some.part.0+0x242>
 8013afe:	6842      	ldr	r2, [r0, #4]
 8013b00:	6a11      	ldr	r1, [r2, #32]
 8013b02:	2900      	cmp	r1, #0
 8013b04:	f47f af22 	bne.w	801394c <rclc_executor_spin_some.part.0+0x14c>
 8013b08:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8013b0c:	2a00      	cmp	r2, #0
 8013b0e:	f43f af0b 	beq.w	8013928 <rclc_executor_spin_some.part.0+0x128>
 8013b12:	e71b      	b.n	801394c <rclc_executor_spin_some.part.0+0x14c>
 8013b14:	6842      	ldr	r2, [r0, #4]
 8013b16:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8013b18:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8013b1c:	f47f af16 	bne.w	801394c <rclc_executor_spin_some.part.0+0x14c>
 8013b20:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8013b24:	2900      	cmp	r1, #0
 8013b26:	f47f af11 	bne.w	801394c <rclc_executor_spin_some.part.0+0x14c>
 8013b2a:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8013b2e:	2a00      	cmp	r2, #0
 8013b30:	f43f aefa 	beq.w	8013928 <rclc_executor_spin_some.part.0+0x128>
 8013b34:	e70a      	b.n	801394c <rclc_executor_spin_some.part.0+0x14c>
 8013b36:	686a      	ldr	r2, [r5, #4]
 8013b38:	461c      	mov	r4, r3
 8013b3a:	e782      	b.n	8013a42 <rclc_executor_spin_some.part.0+0x242>
 8013b3c:	686a      	ldr	r2, [r5, #4]
 8013b3e:	461c      	mov	r4, r3
 8013b40:	e6be      	b.n	80138c0 <rclc_executor_spin_some.part.0+0xc0>
 8013b42:	bf00      	nop

08013b44 <rclc_executor_spin_some>:
 8013b44:	b190      	cbz	r0, 8013b6c <rclc_executor_spin_some+0x28>
 8013b46:	b570      	push	{r4, r5, r6, lr}
 8013b48:	4604      	mov	r4, r0
 8013b4a:	6800      	ldr	r0, [r0, #0]
 8013b4c:	4616      	mov	r6, r2
 8013b4e:	461d      	mov	r5, r3
 8013b50:	f006 fb96 	bl	801a280 <rcl_context_is_valid>
 8013b54:	b130      	cbz	r0, 8013b64 <rclc_executor_spin_some+0x20>
 8013b56:	4632      	mov	r2, r6
 8013b58:	462b      	mov	r3, r5
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b60:	f7ff be4e 	b.w	8013800 <rclc_executor_spin_some.part.0>
 8013b64:	f000 f9c8 	bl	8013ef8 <rcutils_reset_error>
 8013b68:	2001      	movs	r0, #1
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}
 8013b6c:	200b      	movs	r0, #11
 8013b6e:	4770      	bx	lr

08013b70 <rclc_executor_handle_counters_zero_init>:
 8013b70:	b130      	cbz	r0, 8013b80 <rclc_executor_handle_counters_zero_init+0x10>
 8013b72:	2220      	movs	r2, #32
 8013b74:	2100      	movs	r1, #0
 8013b76:	b508      	push	{r3, lr}
 8013b78:	f00c f814 	bl	801fba4 <memset>
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	bd08      	pop	{r3, pc}
 8013b80:	200b      	movs	r0, #11
 8013b82:	4770      	bx	lr
 8013b84:	0000      	movs	r0, r0
	...

08013b88 <rclc_executor_handle_init>:
 8013b88:	4603      	mov	r3, r0
 8013b8a:	b178      	cbz	r0, 8013bac <rclc_executor_handle_init+0x24>
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	f04f 0c0b 	mov.w	ip, #11
 8013b92:	6341      	str	r1, [r0, #52]	; 0x34
 8013b94:	4610      	mov	r0, r2
 8013b96:	f8a3 c000 	strh.w	ip, [r3]
 8013b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8013b9c:	871a      	strh	r2, [r3, #56]	; 0x38
 8013b9e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8013bb0 <rclc_executor_handle_init+0x28>
 8013ba2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8013ba6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8013baa:	4770      	bx	lr
 8013bac:	200b      	movs	r0, #11
 8013bae:	4770      	bx	lr
	...

08013bb8 <rclc_support_init_with_options>:
 8013bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bbc:	b083      	sub	sp, #12
 8013bbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	bf18      	it	ne
 8013bc4:	2f00      	cmpne	r7, #0
 8013bc6:	d027      	beq.n	8013c18 <rclc_support_init_with_options+0x60>
 8013bc8:	4604      	mov	r4, r0
 8013bca:	b328      	cbz	r0, 8013c18 <rclc_support_init_with_options+0x60>
 8013bcc:	46e9      	mov	r9, sp
 8013bce:	461d      	mov	r5, r3
 8013bd0:	460e      	mov	r6, r1
 8013bd2:	4690      	mov	r8, r2
 8013bd4:	4648      	mov	r0, r9
 8013bd6:	f006 fb49 	bl	801a26c <rcl_get_zero_initialized_context>
 8013bda:	462a      	mov	r2, r5
 8013bdc:	4623      	mov	r3, r4
 8013bde:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013be2:	e884 0003 	stmia.w	r4, {r0, r1}
 8013be6:	4641      	mov	r1, r8
 8013be8:	4630      	mov	r0, r6
 8013bea:	f006 fc5d 	bl	801a4a8 <rcl_init>
 8013bee:	4605      	mov	r5, r0
 8013bf0:	b960      	cbnz	r0, 8013c0c <rclc_support_init_with_options+0x54>
 8013bf2:	463a      	mov	r2, r7
 8013bf4:	f104 010c 	add.w	r1, r4, #12
 8013bf8:	2003      	movs	r0, #3
 8013bfa:	60a7      	str	r7, [r4, #8]
 8013bfc:	f006 ff6a 	bl	801aad4 <rcl_clock_init>
 8013c00:	4605      	mov	r5, r0
 8013c02:	b918      	cbnz	r0, 8013c0c <rclc_support_init_with_options+0x54>
 8013c04:	4628      	mov	r0, r5
 8013c06:	b003      	add	sp, #12
 8013c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c0c:	f000 f974 	bl	8013ef8 <rcutils_reset_error>
 8013c10:	4628      	mov	r0, r5
 8013c12:	b003      	add	sp, #12
 8013c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c18:	250b      	movs	r5, #11
 8013c1a:	4628      	mov	r0, r5
 8013c1c:	b003      	add	sp, #12
 8013c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c22:	bf00      	nop

08013c24 <rclc_node_init_with_options>:
 8013c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c28:	b087      	sub	sp, #28
 8013c2a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013c2c:	2e00      	cmp	r6, #0
 8013c2e:	bf18      	it	ne
 8013c30:	2b00      	cmpne	r3, #0
 8013c32:	bf0c      	ite	eq
 8013c34:	f04f 0c01 	moveq.w	ip, #1
 8013c38:	f04f 0c00 	movne.w	ip, #0
 8013c3c:	2a00      	cmp	r2, #0
 8013c3e:	bf08      	it	eq
 8013c40:	f04c 0c01 	orreq.w	ip, ip, #1
 8013c44:	2900      	cmp	r1, #0
 8013c46:	bf08      	it	eq
 8013c48:	f04c 0c01 	orreq.w	ip, ip, #1
 8013c4c:	f1bc 0f00 	cmp.w	ip, #0
 8013c50:	d118      	bne.n	8013c84 <rclc_node_init_with_options+0x60>
 8013c52:	4604      	mov	r4, r0
 8013c54:	b1b0      	cbz	r0, 8013c84 <rclc_node_init_with_options+0x60>
 8013c56:	f10d 0910 	add.w	r9, sp, #16
 8013c5a:	460d      	mov	r5, r1
 8013c5c:	4698      	mov	r8, r3
 8013c5e:	4617      	mov	r7, r2
 8013c60:	4648      	mov	r0, r9
 8013c62:	f7fe fc09 	bl	8012478 <rcl_get_zero_initialized_node>
 8013c66:	9600      	str	r6, [sp, #0]
 8013c68:	4643      	mov	r3, r8
 8013c6a:	463a      	mov	r2, r7
 8013c6c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013c70:	e884 0003 	stmia.w	r4, {r0, r1}
 8013c74:	4629      	mov	r1, r5
 8013c76:	4620      	mov	r0, r4
 8013c78:	f7fe fc08 	bl	801248c <rcl_node_init>
 8013c7c:	b930      	cbnz	r0, 8013c8c <rclc_node_init_with_options+0x68>
 8013c7e:	b007      	add	sp, #28
 8013c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c84:	200b      	movs	r0, #11
 8013c86:	b007      	add	sp, #28
 8013c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c8c:	9003      	str	r0, [sp, #12]
 8013c8e:	f000 f933 	bl	8013ef8 <rcutils_reset_error>
 8013c92:	9803      	ldr	r0, [sp, #12]
 8013c94:	b007      	add	sp, #28
 8013c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c9a:	bf00      	nop

08013c9c <rclc_publisher_init_default>:
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	bf18      	it	ne
 8013ca0:	2a00      	cmpne	r2, #0
 8013ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca6:	4616      	mov	r6, r2
 8013ca8:	bf0c      	ite	eq
 8013caa:	2201      	moveq	r2, #1
 8013cac:	2200      	movne	r2, #0
 8013cae:	b0a0      	sub	sp, #128	; 0x80
 8013cb0:	2900      	cmp	r1, #0
 8013cb2:	bf08      	it	eq
 8013cb4:	f042 0201 	orreq.w	r2, r2, #1
 8013cb8:	bb1a      	cbnz	r2, 8013d02 <rclc_publisher_init_default+0x66>
 8013cba:	4604      	mov	r4, r0
 8013cbc:	b308      	cbz	r0, 8013d02 <rclc_publisher_init_default+0x66>
 8013cbe:	f10d 0810 	add.w	r8, sp, #16
 8013cc2:	461f      	mov	r7, r3
 8013cc4:	460d      	mov	r5, r1
 8013cc6:	f7fe fd81 	bl	80127cc <rcl_get_zero_initialized_publisher>
 8013cca:	6020      	str	r0, [r4, #0]
 8013ccc:	4640      	mov	r0, r8
 8013cce:	f7fe fe1d 	bl	801290c <rcl_publisher_get_default_options>
 8013cd2:	2250      	movs	r2, #80	; 0x50
 8013cd4:	490d      	ldr	r1, [pc, #52]	; (8013d0c <rclc_publisher_init_default+0x70>)
 8013cd6:	4640      	mov	r0, r8
 8013cd8:	f00c f831 	bl	801fd3e <memcpy>
 8013cdc:	463b      	mov	r3, r7
 8013cde:	4632      	mov	r2, r6
 8013ce0:	4629      	mov	r1, r5
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	f8cd 8000 	str.w	r8, [sp]
 8013ce8:	f7fe fd76 	bl	80127d8 <rcl_publisher_init>
 8013cec:	b910      	cbnz	r0, 8013cf4 <rclc_publisher_init_default+0x58>
 8013cee:	b020      	add	sp, #128	; 0x80
 8013cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf4:	9003      	str	r0, [sp, #12]
 8013cf6:	f000 f8ff 	bl	8013ef8 <rcutils_reset_error>
 8013cfa:	9803      	ldr	r0, [sp, #12]
 8013cfc:	b020      	add	sp, #128	; 0x80
 8013cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d02:	200b      	movs	r0, #11
 8013d04:	b020      	add	sp, #128	; 0x80
 8013d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d0a:	bf00      	nop
 8013d0c:	08023db0 	.word	0x08023db0

08013d10 <rclc_service_init_default>:
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	bf18      	it	ne
 8013d14:	2a00      	cmpne	r2, #0
 8013d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d1a:	4616      	mov	r6, r2
 8013d1c:	bf0c      	ite	eq
 8013d1e:	2201      	moveq	r2, #1
 8013d20:	2200      	movne	r2, #0
 8013d22:	b09e      	sub	sp, #120	; 0x78
 8013d24:	2900      	cmp	r1, #0
 8013d26:	bf08      	it	eq
 8013d28:	f042 0201 	orreq.w	r2, r2, #1
 8013d2c:	bb1a      	cbnz	r2, 8013d76 <rclc_service_init_default+0x66>
 8013d2e:	4604      	mov	r4, r0
 8013d30:	b308      	cbz	r0, 8013d76 <rclc_service_init_default+0x66>
 8013d32:	f10d 0810 	add.w	r8, sp, #16
 8013d36:	461f      	mov	r7, r3
 8013d38:	460d      	mov	r5, r1
 8013d3a:	f7fe fe5b 	bl	80129f4 <rcl_get_zero_initialized_service>
 8013d3e:	6020      	str	r0, [r4, #0]
 8013d40:	4640      	mov	r0, r8
 8013d42:	f7fe feef 	bl	8012b24 <rcl_service_get_default_options>
 8013d46:	2250      	movs	r2, #80	; 0x50
 8013d48:	490d      	ldr	r1, [pc, #52]	; (8013d80 <rclc_service_init_default+0x70>)
 8013d4a:	4640      	mov	r0, r8
 8013d4c:	f00b fff7 	bl	801fd3e <memcpy>
 8013d50:	463b      	mov	r3, r7
 8013d52:	4632      	mov	r2, r6
 8013d54:	4629      	mov	r1, r5
 8013d56:	4620      	mov	r0, r4
 8013d58:	f8cd 8000 	str.w	r8, [sp]
 8013d5c:	f7fe fe50 	bl	8012a00 <rcl_service_init>
 8013d60:	b910      	cbnz	r0, 8013d68 <rclc_service_init_default+0x58>
 8013d62:	b01e      	add	sp, #120	; 0x78
 8013d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d68:	9003      	str	r0, [sp, #12]
 8013d6a:	f000 f8c5 	bl	8013ef8 <rcutils_reset_error>
 8013d6e:	9803      	ldr	r0, [sp, #12]
 8013d70:	b01e      	add	sp, #120	; 0x78
 8013d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d76:	200b      	movs	r0, #11
 8013d78:	b01e      	add	sp, #120	; 0x78
 8013d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d7e:	bf00      	nop
 8013d80:	08023e00 	.word	0x08023e00

08013d84 <rclc_subscription_init_default>:
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	bf18      	it	ne
 8013d88:	2a00      	cmpne	r2, #0
 8013d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d8e:	4616      	mov	r6, r2
 8013d90:	bf0c      	ite	eq
 8013d92:	2201      	moveq	r2, #1
 8013d94:	2200      	movne	r2, #0
 8013d96:	b0a0      	sub	sp, #128	; 0x80
 8013d98:	2900      	cmp	r1, #0
 8013d9a:	bf08      	it	eq
 8013d9c:	f042 0201 	orreq.w	r2, r2, #1
 8013da0:	bb1a      	cbnz	r2, 8013dea <rclc_subscription_init_default+0x66>
 8013da2:	4604      	mov	r4, r0
 8013da4:	b308      	cbz	r0, 8013dea <rclc_subscription_init_default+0x66>
 8013da6:	f10d 0810 	add.w	r8, sp, #16
 8013daa:	461f      	mov	r7, r3
 8013dac:	460d      	mov	r5, r1
 8013dae:	f7fe ff45 	bl	8012c3c <rcl_get_zero_initialized_subscription>
 8013db2:	6020      	str	r0, [r4, #0]
 8013db4:	4640      	mov	r0, r8
 8013db6:	f7fe fff5 	bl	8012da4 <rcl_subscription_get_default_options>
 8013dba:	2250      	movs	r2, #80	; 0x50
 8013dbc:	490d      	ldr	r1, [pc, #52]	; (8013df4 <rclc_subscription_init_default+0x70>)
 8013dbe:	4640      	mov	r0, r8
 8013dc0:	f00b ffbd 	bl	801fd3e <memcpy>
 8013dc4:	463b      	mov	r3, r7
 8013dc6:	4632      	mov	r2, r6
 8013dc8:	4629      	mov	r1, r5
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f8cd 8000 	str.w	r8, [sp]
 8013dd0:	f7fe ff3a 	bl	8012c48 <rcl_subscription_init>
 8013dd4:	b910      	cbnz	r0, 8013ddc <rclc_subscription_init_default+0x58>
 8013dd6:	b020      	add	sp, #128	; 0x80
 8013dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ddc:	9003      	str	r0, [sp, #12]
 8013dde:	f000 f88b 	bl	8013ef8 <rcutils_reset_error>
 8013de2:	9803      	ldr	r0, [sp, #12]
 8013de4:	b020      	add	sp, #128	; 0x80
 8013de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dea:	200b      	movs	r0, #11
 8013dec:	b020      	add	sp, #128	; 0x80
 8013dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df2:	bf00      	nop
 8013df4:	08023e50 	.word	0x08023e50

08013df8 <__default_zero_allocate>:
 8013df8:	f00a ba78 	b.w	801e2ec <calloc>

08013dfc <__default_reallocate>:
 8013dfc:	f00a bc16 	b.w	801e62c <realloc>

08013e00 <__default_deallocate>:
 8013e00:	f00a baf4 	b.w	801e3ec <free>

08013e04 <__default_allocate>:
 8013e04:	f00a baea 	b.w	801e3dc <malloc>

08013e08 <rcutils_get_zero_initialized_allocator>:
 8013e08:	b510      	push	{r4, lr}
 8013e0a:	4c05      	ldr	r4, [pc, #20]	; (8013e20 <rcutils_get_zero_initialized_allocator+0x18>)
 8013e0c:	4686      	mov	lr, r0
 8013e0e:	4684      	mov	ip, r0
 8013e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013e12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e16:	6823      	ldr	r3, [r4, #0]
 8013e18:	4670      	mov	r0, lr
 8013e1a:	f8cc 3000 	str.w	r3, [ip]
 8013e1e:	bd10      	pop	{r4, pc}
 8013e20:	08023ea0 	.word	0x08023ea0

08013e24 <rcutils_set_default_allocator>:
 8013e24:	b1a8      	cbz	r0, 8013e52 <rcutils_set_default_allocator+0x2e>
 8013e26:	6802      	ldr	r2, [r0, #0]
 8013e28:	b1a2      	cbz	r2, 8013e54 <rcutils_set_default_allocator+0x30>
 8013e2a:	6841      	ldr	r1, [r0, #4]
 8013e2c:	b1a1      	cbz	r1, 8013e58 <rcutils_set_default_allocator+0x34>
 8013e2e:	b410      	push	{r4}
 8013e30:	68c4      	ldr	r4, [r0, #12]
 8013e32:	b164      	cbz	r4, 8013e4e <rcutils_set_default_allocator+0x2a>
 8013e34:	6880      	ldr	r0, [r0, #8]
 8013e36:	b138      	cbz	r0, 8013e48 <rcutils_set_default_allocator+0x24>
 8013e38:	4b08      	ldr	r3, [pc, #32]	; (8013e5c <rcutils_set_default_allocator+0x38>)
 8013e3a:	601a      	str	r2, [r3, #0]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8013e42:	2001      	movs	r0, #1
 8013e44:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8013e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e4c:	4770      	bx	lr
 8013e4e:	4620      	mov	r0, r4
 8013e50:	e7fa      	b.n	8013e48 <rcutils_set_default_allocator+0x24>
 8013e52:	4770      	bx	lr
 8013e54:	4610      	mov	r0, r2
 8013e56:	4770      	bx	lr
 8013e58:	4608      	mov	r0, r1
 8013e5a:	4770      	bx	lr
 8013e5c:	200008a8 	.word	0x200008a8

08013e60 <rcutils_get_default_allocator>:
 8013e60:	b510      	push	{r4, lr}
 8013e62:	4c05      	ldr	r4, [pc, #20]	; (8013e78 <rcutils_get_default_allocator+0x18>)
 8013e64:	4686      	mov	lr, r0
 8013e66:	4684      	mov	ip, r0
 8013e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013e6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e6e:	6823      	ldr	r3, [r4, #0]
 8013e70:	4670      	mov	r0, lr
 8013e72:	f8cc 3000 	str.w	r3, [ip]
 8013e76:	bd10      	pop	{r4, pc}
 8013e78:	200008a8 	.word	0x200008a8

08013e7c <rcutils_allocator_is_valid>:
 8013e7c:	b158      	cbz	r0, 8013e96 <rcutils_allocator_is_valid+0x1a>
 8013e7e:	6803      	ldr	r3, [r0, #0]
 8013e80:	b143      	cbz	r3, 8013e94 <rcutils_allocator_is_valid+0x18>
 8013e82:	6843      	ldr	r3, [r0, #4]
 8013e84:	b133      	cbz	r3, 8013e94 <rcutils_allocator_is_valid+0x18>
 8013e86:	68c3      	ldr	r3, [r0, #12]
 8013e88:	b123      	cbz	r3, 8013e94 <rcutils_allocator_is_valid+0x18>
 8013e8a:	6880      	ldr	r0, [r0, #8]
 8013e8c:	3800      	subs	r0, #0
 8013e8e:	bf18      	it	ne
 8013e90:	2001      	movne	r0, #1
 8013e92:	4770      	bx	lr
 8013e94:	4618      	mov	r0, r3
 8013e96:	4770      	bx	lr

08013e98 <rcutils_get_env>:
 8013e98:	b168      	cbz	r0, 8013eb6 <rcutils_get_env+0x1e>
 8013e9a:	b510      	push	{r4, lr}
 8013e9c:	460c      	mov	r4, r1
 8013e9e:	b129      	cbz	r1, 8013eac <rcutils_get_env+0x14>
 8013ea0:	f00a fa54 	bl	801e34c <getenv>
 8013ea4:	b120      	cbz	r0, 8013eb0 <rcutils_get_env+0x18>
 8013ea6:	6020      	str	r0, [r4, #0]
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	bd10      	pop	{r4, pc}
 8013eac:	4803      	ldr	r0, [pc, #12]	; (8013ebc <rcutils_get_env+0x24>)
 8013eae:	bd10      	pop	{r4, pc}
 8013eb0:	4b03      	ldr	r3, [pc, #12]	; (8013ec0 <rcutils_get_env+0x28>)
 8013eb2:	6023      	str	r3, [r4, #0]
 8013eb4:	bd10      	pop	{r4, pc}
 8013eb6:	4803      	ldr	r0, [pc, #12]	; (8013ec4 <rcutils_get_env+0x2c>)
 8013eb8:	4770      	bx	lr
 8013eba:	bf00      	nop
 8013ebc:	08023ed0 	.word	0x08023ed0
 8013ec0:	08024288 	.word	0x08024288
 8013ec4:	08023eb4 	.word	0x08023eb4

08013ec8 <rcutils_get_error_string>:
 8013ec8:	4b06      	ldr	r3, [pc, #24]	; (8013ee4 <rcutils_get_error_string+0x1c>)
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	b13b      	cbz	r3, 8013ede <rcutils_get_error_string+0x16>
 8013ece:	4b06      	ldr	r3, [pc, #24]	; (8013ee8 <rcutils_get_error_string+0x20>)
 8013ed0:	781a      	ldrb	r2, [r3, #0]
 8013ed2:	b90a      	cbnz	r2, 8013ed8 <rcutils_get_error_string+0x10>
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	701a      	strb	r2, [r3, #0]
 8013ed8:	4b04      	ldr	r3, [pc, #16]	; (8013eec <rcutils_get_error_string+0x24>)
 8013eda:	7818      	ldrb	r0, [r3, #0]
 8013edc:	4770      	bx	lr
 8013ede:	4b04      	ldr	r3, [pc, #16]	; (8013ef0 <rcutils_get_error_string+0x28>)
 8013ee0:	7818      	ldrb	r0, [r3, #0]
 8013ee2:	4770      	bx	lr
 8013ee4:	200122f8 	.word	0x200122f8
 8013ee8:	20012311 	.word	0x20012311
 8013eec:	20012310 	.word	0x20012310
 8013ef0:	08023560 	.word	0x08023560
 8013ef4:	00000000 	.word	0x00000000

08013ef8 <rcutils_reset_error>:
 8013ef8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8013f18 <rcutils_reset_error+0x20>
 8013efc:	2300      	movs	r3, #0
 8013efe:	4a08      	ldr	r2, [pc, #32]	; (8013f20 <rcutils_reset_error+0x28>)
 8013f00:	4808      	ldr	r0, [pc, #32]	; (8013f24 <rcutils_reset_error+0x2c>)
 8013f02:	8013      	strh	r3, [r2, #0]
 8013f04:	4908      	ldr	r1, [pc, #32]	; (8013f28 <rcutils_reset_error+0x30>)
 8013f06:	7003      	strb	r3, [r0, #0]
 8013f08:	700b      	strb	r3, [r1, #0]
 8013f0a:	ed82 7b02 	vstr	d7, [r2, #8]
 8013f0e:	4a07      	ldr	r2, [pc, #28]	; (8013f2c <rcutils_reset_error+0x34>)
 8013f10:	7013      	strb	r3, [r2, #0]
 8013f12:	4770      	bx	lr
 8013f14:	f3af 8000 	nop.w
	...
 8013f20:	20012300 	.word	0x20012300
 8013f24:	20012311 	.word	0x20012311
 8013f28:	20012310 	.word	0x20012310
 8013f2c:	200122f8 	.word	0x200122f8

08013f30 <rcutils_format_string_limit>:
 8013f30:	b40f      	push	{r0, r1, r2, r3}
 8013f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f34:	b083      	sub	sp, #12
 8013f36:	ac08      	add	r4, sp, #32
 8013f38:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013f3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013f3e:	b326      	cbz	r6, 8013f8a <rcutils_format_string_limit+0x5a>
 8013f40:	a808      	add	r0, sp, #32
 8013f42:	f7ff ff9b 	bl	8013e7c <rcutils_allocator_is_valid>
 8013f46:	b300      	cbz	r0, 8013f8a <rcutils_format_string_limit+0x5a>
 8013f48:	2100      	movs	r1, #0
 8013f4a:	ab0f      	add	r3, sp, #60	; 0x3c
 8013f4c:	4632      	mov	r2, r6
 8013f4e:	4608      	mov	r0, r1
 8013f50:	e9cd 3300 	strd	r3, r3, [sp]
 8013f54:	f000 f906 	bl	8014164 <rcutils_vsnprintf>
 8013f58:	1c43      	adds	r3, r0, #1
 8013f5a:	4605      	mov	r5, r0
 8013f5c:	d015      	beq.n	8013f8a <rcutils_format_string_limit+0x5a>
 8013f5e:	1c47      	adds	r7, r0, #1
 8013f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f62:	429f      	cmp	r7, r3
 8013f64:	d901      	bls.n	8013f6a <rcutils_format_string_limit+0x3a>
 8013f66:	1e5d      	subs	r5, r3, #1
 8013f68:	461f      	mov	r7, r3
 8013f6a:	9b08      	ldr	r3, [sp, #32]
 8013f6c:	4638      	mov	r0, r7
 8013f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013f70:	4798      	blx	r3
 8013f72:	4604      	mov	r4, r0
 8013f74:	b148      	cbz	r0, 8013f8a <rcutils_format_string_limit+0x5a>
 8013f76:	4632      	mov	r2, r6
 8013f78:	4639      	mov	r1, r7
 8013f7a:	9b01      	ldr	r3, [sp, #4]
 8013f7c:	f000 f8f2 	bl	8014164 <rcutils_vsnprintf>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	db09      	blt.n	8013f98 <rcutils_format_string_limit+0x68>
 8013f84:	2300      	movs	r3, #0
 8013f86:	5563      	strb	r3, [r4, r5]
 8013f88:	e000      	b.n	8013f8c <rcutils_format_string_limit+0x5c>
 8013f8a:	2400      	movs	r4, #0
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	b003      	add	sp, #12
 8013f90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013f94:	b004      	add	sp, #16
 8013f96:	4770      	bx	lr
 8013f98:	4620      	mov	r0, r4
 8013f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013f9e:	2400      	movs	r4, #0
 8013fa0:	4798      	blx	r3
 8013fa2:	e7f3      	b.n	8013f8c <rcutils_format_string_limit+0x5c>

08013fa4 <rcutils_repl_str>:
 8013fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa8:	ed2d 8b02 	vpush	{d8}
 8013fac:	b087      	sub	sp, #28
 8013fae:	2600      	movs	r6, #0
 8013fb0:	4680      	mov	r8, r0
 8013fb2:	468a      	mov	sl, r1
 8013fb4:	9000      	str	r0, [sp, #0]
 8013fb6:	4608      	mov	r0, r1
 8013fb8:	ee08 2a10 	vmov	s16, r2
 8013fbc:	4699      	mov	r9, r3
 8013fbe:	2510      	movs	r5, #16
 8013fc0:	f7ec f99e 	bl	8000300 <strlen>
 8013fc4:	4637      	mov	r7, r6
 8013fc6:	46b3      	mov	fp, r6
 8013fc8:	9001      	str	r0, [sp, #4]
 8013fca:	e01e      	b.n	801400a <rcutils_repl_str+0x66>
 8013fcc:	f10b 0b01 	add.w	fp, fp, #1
 8013fd0:	9b01      	ldr	r3, [sp, #4]
 8013fd2:	455e      	cmp	r6, fp
 8013fd4:	eb04 0803 	add.w	r8, r4, r3
 8013fd8:	d211      	bcs.n	8013ffe <rcutils_repl_str+0x5a>
 8013fda:	442e      	add	r6, r5
 8013fdc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013fe0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fe8:	00b1      	lsls	r1, r6, #2
 8013fea:	4798      	blx	r3
 8013fec:	2800      	cmp	r0, #0
 8013fee:	f000 8088 	beq.w	8014102 <rcutils_repl_str+0x15e>
 8013ff2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8013ff6:	4607      	mov	r7, r0
 8013ff8:	bf28      	it	cs
 8013ffa:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8013ffe:	9a00      	ldr	r2, [sp, #0]
 8014000:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8014004:	1aa4      	subs	r4, r4, r2
 8014006:	f843 4c04 	str.w	r4, [r3, #-4]
 801400a:	4651      	mov	r1, sl
 801400c:	4640      	mov	r0, r8
 801400e:	f00b fdf0 	bl	801fbf2 <strstr>
 8014012:	4604      	mov	r4, r0
 8014014:	4638      	mov	r0, r7
 8014016:	2c00      	cmp	r4, #0
 8014018:	d1d8      	bne.n	8013fcc <rcutils_repl_str+0x28>
 801401a:	4640      	mov	r0, r8
 801401c:	f7ec f970 	bl	8000300 <strlen>
 8014020:	9b00      	ldr	r3, [sp, #0]
 8014022:	eba8 0803 	sub.w	r8, r8, r3
 8014026:	eb08 0400 	add.w	r4, r8, r0
 801402a:	9402      	str	r4, [sp, #8]
 801402c:	f1bb 0f00 	cmp.w	fp, #0
 8014030:	d045      	beq.n	80140be <rcutils_repl_str+0x11a>
 8014032:	ee18 0a10 	vmov	r0, s16
 8014036:	f7ec f963 	bl	8000300 <strlen>
 801403a:	9a01      	ldr	r2, [sp, #4]
 801403c:	4606      	mov	r6, r0
 801403e:	f8d9 3000 	ldr.w	r3, [r9]
 8014042:	1a82      	subs	r2, r0, r2
 8014044:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014048:	fb0b 4202 	mla	r2, fp, r2, r4
 801404c:	1c50      	adds	r0, r2, #1
 801404e:	9205      	str	r2, [sp, #20]
 8014050:	4798      	blx	r3
 8014052:	4682      	mov	sl, r0
 8014054:	2800      	cmp	r0, #0
 8014056:	d054      	beq.n	8014102 <rcutils_repl_str+0x15e>
 8014058:	683a      	ldr	r2, [r7, #0]
 801405a:	463d      	mov	r5, r7
 801405c:	9900      	ldr	r1, [sp, #0]
 801405e:	2401      	movs	r4, #1
 8014060:	f00b fe6d 	bl	801fd3e <memcpy>
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801406a:	eb0a 0803 	add.w	r8, sl, r3
 801406e:	ee18 7a10 	vmov	r7, s16
 8014072:	f8dd a000 	ldr.w	sl, [sp]
 8014076:	f8cd 9000 	str.w	r9, [sp]
 801407a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801407e:	4632      	mov	r2, r6
 8014080:	4639      	mov	r1, r7
 8014082:	4640      	mov	r0, r8
 8014084:	44b0      	add	r8, r6
 8014086:	f00b fe5a 	bl	801fd3e <memcpy>
 801408a:	f855 2b04 	ldr.w	r2, [r5], #4
 801408e:	45a3      	cmp	fp, r4
 8014090:	444a      	add	r2, r9
 8014092:	eb0a 0102 	add.w	r1, sl, r2
 8014096:	d02a      	beq.n	80140ee <rcutils_repl_str+0x14a>
 8014098:	6828      	ldr	r0, [r5, #0]
 801409a:	1a82      	subs	r2, r0, r2
 801409c:	4640      	mov	r0, r8
 801409e:	4490      	add	r8, r2
 80140a0:	f00b fe4d 	bl	801fd3e <memcpy>
 80140a4:	1c62      	adds	r2, r4, #1
 80140a6:	45a3      	cmp	fp, r4
 80140a8:	4614      	mov	r4, r2
 80140aa:	d8e8      	bhi.n	801407e <rcutils_repl_str+0xda>
 80140ac:	f8dd 9000 	ldr.w	r9, [sp]
 80140b0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80140b4:	2300      	movs	r3, #0
 80140b6:	9a05      	ldr	r2, [sp, #20]
 80140b8:	f80a 3002 	strb.w	r3, [sl, r2]
 80140bc:	e00b      	b.n	80140d6 <rcutils_repl_str+0x132>
 80140be:	4620      	mov	r0, r4
 80140c0:	f8d9 3000 	ldr.w	r3, [r9]
 80140c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80140c8:	3001      	adds	r0, #1
 80140ca:	4798      	blx	r3
 80140cc:	4682      	mov	sl, r0
 80140ce:	b110      	cbz	r0, 80140d6 <rcutils_repl_str+0x132>
 80140d0:	9900      	ldr	r1, [sp, #0]
 80140d2:	f00b fe2c 	bl	801fd2e <strcpy>
 80140d6:	4638      	mov	r0, r7
 80140d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80140dc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80140e0:	4798      	blx	r3
 80140e2:	4650      	mov	r0, sl
 80140e4:	b007      	add	sp, #28
 80140e6:	ecbd 8b02 	vpop	{d8}
 80140ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ee:	9b02      	ldr	r3, [sp, #8]
 80140f0:	4640      	mov	r0, r8
 80140f2:	f8dd 9000 	ldr.w	r9, [sp]
 80140f6:	1a9a      	subs	r2, r3, r2
 80140f8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80140fc:	f00b fe1f 	bl	801fd3e <memcpy>
 8014100:	e7d8      	b.n	80140b4 <rcutils_repl_str+0x110>
 8014102:	f04f 0a00 	mov.w	sl, #0
 8014106:	e7e6      	b.n	80140d6 <rcutils_repl_str+0x132>

08014108 <rcutils_snprintf>:
 8014108:	b40c      	push	{r2, r3}
 801410a:	b530      	push	{r4, r5, lr}
 801410c:	b083      	sub	sp, #12
 801410e:	ab06      	add	r3, sp, #24
 8014110:	f853 2b04 	ldr.w	r2, [r3], #4
 8014114:	9301      	str	r3, [sp, #4]
 8014116:	b1e2      	cbz	r2, 8014152 <rcutils_snprintf+0x4a>
 8014118:	fab0 f480 	clz	r4, r0
 801411c:	fab1 f581 	clz	r5, r1
 8014120:	ea50 0c01 	orrs.w	ip, r0, r1
 8014124:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014128:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801412c:	d008      	beq.n	8014140 <rcutils_snprintf+0x38>
 801412e:	b984      	cbnz	r4, 8014152 <rcutils_snprintf+0x4a>
 8014130:	b97d      	cbnz	r5, 8014152 <rcutils_snprintf+0x4a>
 8014132:	f00b fc69 	bl	801fa08 <vsniprintf>
 8014136:	b003      	add	sp, #12
 8014138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801413c:	b002      	add	sp, #8
 801413e:	4770      	bx	lr
 8014140:	4661      	mov	r1, ip
 8014142:	4660      	mov	r0, ip
 8014144:	f00b fc60 	bl	801fa08 <vsniprintf>
 8014148:	b003      	add	sp, #12
 801414a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801414e:	b002      	add	sp, #8
 8014150:	4770      	bx	lr
 8014152:	f00b fdbf 	bl	801fcd4 <__errno>
 8014156:	2216      	movs	r2, #22
 8014158:	4603      	mov	r3, r0
 801415a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801415e:	601a      	str	r2, [r3, #0]
 8014160:	e7e9      	b.n	8014136 <rcutils_snprintf+0x2e>
 8014162:	bf00      	nop

08014164 <rcutils_vsnprintf>:
 8014164:	b570      	push	{r4, r5, r6, lr}
 8014166:	b1b2      	cbz	r2, 8014196 <rcutils_vsnprintf+0x32>
 8014168:	fab0 f480 	clz	r4, r0
 801416c:	fab1 f581 	clz	r5, r1
 8014170:	ea50 0c01 	orrs.w	ip, r0, r1
 8014174:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014178:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801417c:	d005      	beq.n	801418a <rcutils_vsnprintf+0x26>
 801417e:	b954      	cbnz	r4, 8014196 <rcutils_vsnprintf+0x32>
 8014180:	b94d      	cbnz	r5, 8014196 <rcutils_vsnprintf+0x32>
 8014182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014186:	f00b bc3f 	b.w	801fa08 <vsniprintf>
 801418a:	4661      	mov	r1, ip
 801418c:	4660      	mov	r0, ip
 801418e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014192:	f00b bc39 	b.w	801fa08 <vsniprintf>
 8014196:	f00b fd9d 	bl	801fcd4 <__errno>
 801419a:	2316      	movs	r3, #22
 801419c:	6003      	str	r3, [r0, #0]
 801419e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141a2:	bd70      	pop	{r4, r5, r6, pc}

080141a4 <rcutils_strdup>:
 80141a4:	b084      	sub	sp, #16
 80141a6:	b570      	push	{r4, r5, r6, lr}
 80141a8:	b082      	sub	sp, #8
 80141aa:	4605      	mov	r5, r0
 80141ac:	ac07      	add	r4, sp, #28
 80141ae:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80141b2:	b1b0      	cbz	r0, 80141e2 <rcutils_strdup+0x3e>
 80141b4:	f7ec f8a4 	bl	8000300 <strlen>
 80141b8:	1c42      	adds	r2, r0, #1
 80141ba:	9b07      	ldr	r3, [sp, #28]
 80141bc:	4606      	mov	r6, r0
 80141be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141c0:	4610      	mov	r0, r2
 80141c2:	9201      	str	r2, [sp, #4]
 80141c4:	4798      	blx	r3
 80141c6:	4604      	mov	r4, r0
 80141c8:	b128      	cbz	r0, 80141d6 <rcutils_strdup+0x32>
 80141ca:	9a01      	ldr	r2, [sp, #4]
 80141cc:	4629      	mov	r1, r5
 80141ce:	f00b fdb6 	bl	801fd3e <memcpy>
 80141d2:	2300      	movs	r3, #0
 80141d4:	55a3      	strb	r3, [r4, r6]
 80141d6:	4620      	mov	r0, r4
 80141d8:	b002      	add	sp, #8
 80141da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141de:	b004      	add	sp, #16
 80141e0:	4770      	bx	lr
 80141e2:	4604      	mov	r4, r0
 80141e4:	e7f7      	b.n	80141d6 <rcutils_strdup+0x32>
 80141e6:	bf00      	nop

080141e8 <rcutils_strndup>:
 80141e8:	b082      	sub	sp, #8
 80141ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ec:	ac06      	add	r4, sp, #24
 80141ee:	4605      	mov	r5, r0
 80141f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80141f4:	b188      	cbz	r0, 801421a <rcutils_strndup+0x32>
 80141f6:	1c4f      	adds	r7, r1, #1
 80141f8:	460e      	mov	r6, r1
 80141fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141fc:	4638      	mov	r0, r7
 80141fe:	4790      	blx	r2
 8014200:	4604      	mov	r4, r0
 8014202:	b128      	cbz	r0, 8014210 <rcutils_strndup+0x28>
 8014204:	463a      	mov	r2, r7
 8014206:	4629      	mov	r1, r5
 8014208:	f00b fd99 	bl	801fd3e <memcpy>
 801420c:	2300      	movs	r3, #0
 801420e:	55a3      	strb	r3, [r4, r6]
 8014210:	4620      	mov	r0, r4
 8014212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014216:	b002      	add	sp, #8
 8014218:	4770      	bx	lr
 801421a:	4604      	mov	r4, r0
 801421c:	e7f8      	b.n	8014210 <rcutils_strndup+0x28>
 801421e:	bf00      	nop

08014220 <rcutils_system_time_now>:
 8014220:	b300      	cbz	r0, 8014264 <rcutils_system_time_now+0x44>
 8014222:	b570      	push	{r4, r5, r6, lr}
 8014224:	b084      	sub	sp, #16
 8014226:	4604      	mov	r4, r0
 8014228:	2001      	movs	r0, #1
 801422a:	4669      	mov	r1, sp
 801422c:	f7ee fb3c 	bl	80028a8 <clock_gettime>
 8014230:	e9dd 3100 	ldrd	r3, r1, [sp]
 8014234:	2900      	cmp	r1, #0
 8014236:	db12      	blt.n	801425e <rcutils_system_time_now+0x3e>
 8014238:	ea53 0201 	orrs.w	r2, r3, r1
 801423c:	9d02      	ldr	r5, [sp, #8]
 801423e:	d101      	bne.n	8014244 <rcutils_system_time_now+0x24>
 8014240:	2d00      	cmp	r5, #0
 8014242:	db0c      	blt.n	801425e <rcutils_system_time_now+0x3e>
 8014244:	4e08      	ldr	r6, [pc, #32]	; (8014268 <rcutils_system_time_now+0x48>)
 8014246:	2000      	movs	r0, #0
 8014248:	fba3 3206 	umull	r3, r2, r3, r6
 801424c:	195b      	adds	r3, r3, r5
 801424e:	fb06 2201 	mla	r2, r6, r1, r2
 8014252:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8014256:	e9c4 3200 	strd	r3, r2, [r4]
 801425a:	b004      	add	sp, #16
 801425c:	bd70      	pop	{r4, r5, r6, pc}
 801425e:	2002      	movs	r0, #2
 8014260:	b004      	add	sp, #16
 8014262:	bd70      	pop	{r4, r5, r6, pc}
 8014264:	200b      	movs	r0, #11
 8014266:	4770      	bx	lr
 8014268:	3b9aca00 	.word	0x3b9aca00

0801426c <rcutils_steady_time_now>:
 801426c:	b300      	cbz	r0, 80142b0 <rcutils_steady_time_now+0x44>
 801426e:	b570      	push	{r4, r5, r6, lr}
 8014270:	b084      	sub	sp, #16
 8014272:	4604      	mov	r4, r0
 8014274:	2000      	movs	r0, #0
 8014276:	4669      	mov	r1, sp
 8014278:	f7ee fb16 	bl	80028a8 <clock_gettime>
 801427c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8014280:	2900      	cmp	r1, #0
 8014282:	db12      	blt.n	80142aa <rcutils_steady_time_now+0x3e>
 8014284:	ea53 0201 	orrs.w	r2, r3, r1
 8014288:	9d02      	ldr	r5, [sp, #8]
 801428a:	d101      	bne.n	8014290 <rcutils_steady_time_now+0x24>
 801428c:	2d00      	cmp	r5, #0
 801428e:	db0c      	blt.n	80142aa <rcutils_steady_time_now+0x3e>
 8014290:	4e08      	ldr	r6, [pc, #32]	; (80142b4 <rcutils_steady_time_now+0x48>)
 8014292:	2000      	movs	r0, #0
 8014294:	fba3 3206 	umull	r3, r2, r3, r6
 8014298:	195b      	adds	r3, r3, r5
 801429a:	fb06 2201 	mla	r2, r6, r1, r2
 801429e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80142a2:	e9c4 3200 	strd	r3, r2, [r4]
 80142a6:	b004      	add	sp, #16
 80142a8:	bd70      	pop	{r4, r5, r6, pc}
 80142aa:	2002      	movs	r0, #2
 80142ac:	b004      	add	sp, #16
 80142ae:	bd70      	pop	{r4, r5, r6, pc}
 80142b0:	200b      	movs	r0, #11
 80142b2:	4770      	bx	lr
 80142b4:	3b9aca00 	.word	0x3b9aca00

080142b8 <rmw_get_zero_initialized_init_options>:
 80142b8:	b510      	push	{r4, lr}
 80142ba:	4604      	mov	r4, r0
 80142bc:	2238      	movs	r2, #56	; 0x38
 80142be:	2100      	movs	r1, #0
 80142c0:	f00b fc70 	bl	801fba4 <memset>
 80142c4:	f104 0010 	add.w	r0, r4, #16
 80142c8:	f000 f80a 	bl	80142e0 <rmw_get_default_security_options>
 80142cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142d0:	4620      	mov	r0, r4
 80142d2:	60e3      	str	r3, [r4, #12]
 80142d4:	bd10      	pop	{r4, pc}
 80142d6:	bf00      	nop

080142d8 <rmw_get_default_publisher_options>:
 80142d8:	2200      	movs	r2, #0
 80142da:	6002      	str	r2, [r0, #0]
 80142dc:	7102      	strb	r2, [r0, #4]
 80142de:	4770      	bx	lr

080142e0 <rmw_get_default_security_options>:
 80142e0:	2200      	movs	r2, #0
 80142e2:	7002      	strb	r2, [r0, #0]
 80142e4:	6042      	str	r2, [r0, #4]
 80142e6:	4770      	bx	lr

080142e8 <rmw_subscription_content_filter_options_fini>:
 80142e8:	b1b0      	cbz	r0, 8014318 <rmw_subscription_content_filter_options_fini+0x30>
 80142ea:	b538      	push	{r3, r4, r5, lr}
 80142ec:	4604      	mov	r4, r0
 80142ee:	4608      	mov	r0, r1
 80142f0:	460d      	mov	r5, r1
 80142f2:	f7ff fdc3 	bl	8013e7c <rcutils_allocator_is_valid>
 80142f6:	b168      	cbz	r0, 8014314 <rmw_subscription_content_filter_options_fini+0x2c>
 80142f8:	6820      	ldr	r0, [r4, #0]
 80142fa:	b120      	cbz	r0, 8014306 <rmw_subscription_content_filter_options_fini+0x1e>
 80142fc:	686b      	ldr	r3, [r5, #4]
 80142fe:	6929      	ldr	r1, [r5, #16]
 8014300:	4798      	blx	r3
 8014302:	2300      	movs	r3, #0
 8014304:	6023      	str	r3, [r4, #0]
 8014306:	1d20      	adds	r0, r4, #4
 8014308:	f008 fa06 	bl	801c718 <rcutils_string_array_fini>
 801430c:	3800      	subs	r0, #0
 801430e:	bf18      	it	ne
 8014310:	2001      	movne	r0, #1
 8014312:	bd38      	pop	{r3, r4, r5, pc}
 8014314:	200b      	movs	r0, #11
 8014316:	bd38      	pop	{r3, r4, r5, pc}
 8014318:	200b      	movs	r0, #11
 801431a:	4770      	bx	lr

0801431c <rmw_get_default_subscription_options>:
 801431c:	2200      	movs	r2, #0
 801431e:	e9c0 2200 	strd	r2, r2, [r0]
 8014322:	6082      	str	r2, [r0, #8]
 8014324:	4770      	bx	lr
 8014326:	bf00      	nop

08014328 <rmw_get_zero_initialized_message_info>:
 8014328:	b510      	push	{r4, lr}
 801432a:	4604      	mov	r4, r0
 801432c:	2240      	movs	r2, #64	; 0x40
 801432e:	2100      	movs	r1, #0
 8014330:	f00b fc38 	bl	801fba4 <memset>
 8014334:	4620      	mov	r0, r4
 8014336:	bd10      	pop	{r4, pc}

08014338 <rmw_validate_namespace_with_size>:
 8014338:	2800      	cmp	r0, #0
 801433a:	d043      	beq.n	80143c4 <rmw_validate_namespace_with_size+0x8c>
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	4614      	mov	r4, r2
 8014340:	b0c2      	sub	sp, #264	; 0x108
 8014342:	b32a      	cbz	r2, 8014390 <rmw_validate_namespace_with_size+0x58>
 8014344:	2901      	cmp	r1, #1
 8014346:	460d      	mov	r5, r1
 8014348:	461e      	mov	r6, r3
 801434a:	d102      	bne.n	8014352 <rmw_validate_namespace_with_size+0x1a>
 801434c:	7803      	ldrb	r3, [r0, #0]
 801434e:	2b2f      	cmp	r3, #47	; 0x2f
 8014350:	d012      	beq.n	8014378 <rmw_validate_namespace_with_size+0x40>
 8014352:	aa01      	add	r2, sp, #4
 8014354:	4669      	mov	r1, sp
 8014356:	f008 fbd3 	bl	801cb00 <rmw_validate_full_topic_name>
 801435a:	b980      	cbnz	r0, 801437e <rmw_validate_namespace_with_size+0x46>
 801435c:	9a00      	ldr	r2, [sp, #0]
 801435e:	b14a      	cbz	r2, 8014374 <rmw_validate_namespace_with_size+0x3c>
 8014360:	2a07      	cmp	r2, #7
 8014362:	d007      	beq.n	8014374 <rmw_validate_namespace_with_size+0x3c>
 8014364:	1e53      	subs	r3, r2, #1
 8014366:	2b05      	cmp	r3, #5
 8014368:	d82e      	bhi.n	80143c8 <rmw_validate_namespace_with_size+0x90>
 801436a:	e8df f003 	tbb	[pc, r3]
 801436e:	1f1c      	.short	0x1f1c
 8014370:	14282522 	.word	0x14282522
 8014374:	2df5      	cmp	r5, #245	; 0xf5
 8014376:	d804      	bhi.n	8014382 <rmw_validate_namespace_with_size+0x4a>
 8014378:	2300      	movs	r3, #0
 801437a:	4618      	mov	r0, r3
 801437c:	6023      	str	r3, [r4, #0]
 801437e:	b042      	add	sp, #264	; 0x108
 8014380:	bd70      	pop	{r4, r5, r6, pc}
 8014382:	2307      	movs	r3, #7
 8014384:	6023      	str	r3, [r4, #0]
 8014386:	2e00      	cmp	r6, #0
 8014388:	d0f9      	beq.n	801437e <rmw_validate_namespace_with_size+0x46>
 801438a:	23f4      	movs	r3, #244	; 0xf4
 801438c:	6033      	str	r3, [r6, #0]
 801438e:	e7f6      	b.n	801437e <rmw_validate_namespace_with_size+0x46>
 8014390:	200b      	movs	r0, #11
 8014392:	b042      	add	sp, #264	; 0x108
 8014394:	bd70      	pop	{r4, r5, r6, pc}
 8014396:	2306      	movs	r3, #6
 8014398:	6023      	str	r3, [r4, #0]
 801439a:	2e00      	cmp	r6, #0
 801439c:	d0ef      	beq.n	801437e <rmw_validate_namespace_with_size+0x46>
 801439e:	9b01      	ldr	r3, [sp, #4]
 80143a0:	6033      	str	r3, [r6, #0]
 80143a2:	b042      	add	sp, #264	; 0x108
 80143a4:	bd70      	pop	{r4, r5, r6, pc}
 80143a6:	2301      	movs	r3, #1
 80143a8:	6023      	str	r3, [r4, #0]
 80143aa:	e7f6      	b.n	801439a <rmw_validate_namespace_with_size+0x62>
 80143ac:	2302      	movs	r3, #2
 80143ae:	6023      	str	r3, [r4, #0]
 80143b0:	e7f3      	b.n	801439a <rmw_validate_namespace_with_size+0x62>
 80143b2:	2303      	movs	r3, #3
 80143b4:	6023      	str	r3, [r4, #0]
 80143b6:	e7f0      	b.n	801439a <rmw_validate_namespace_with_size+0x62>
 80143b8:	2304      	movs	r3, #4
 80143ba:	6023      	str	r3, [r4, #0]
 80143bc:	e7ed      	b.n	801439a <rmw_validate_namespace_with_size+0x62>
 80143be:	2305      	movs	r3, #5
 80143c0:	6023      	str	r3, [r4, #0]
 80143c2:	e7ea      	b.n	801439a <rmw_validate_namespace_with_size+0x62>
 80143c4:	200b      	movs	r0, #11
 80143c6:	4770      	bx	lr
 80143c8:	4613      	mov	r3, r2
 80143ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80143ce:	4a03      	ldr	r2, [pc, #12]	; (80143dc <rmw_validate_namespace_with_size+0xa4>)
 80143d0:	a802      	add	r0, sp, #8
 80143d2:	f7ff fe99 	bl	8014108 <rcutils_snprintf>
 80143d6:	2001      	movs	r0, #1
 80143d8:	e7d1      	b.n	801437e <rmw_validate_namespace_with_size+0x46>
 80143da:	bf00      	nop
 80143dc:	08023eec 	.word	0x08023eec

080143e0 <rmw_validate_namespace>:
 80143e0:	b168      	cbz	r0, 80143fe <rmw_validate_namespace+0x1e>
 80143e2:	b570      	push	{r4, r5, r6, lr}
 80143e4:	460d      	mov	r5, r1
 80143e6:	4616      	mov	r6, r2
 80143e8:	4604      	mov	r4, r0
 80143ea:	f7eb ff89 	bl	8000300 <strlen>
 80143ee:	4633      	mov	r3, r6
 80143f0:	4601      	mov	r1, r0
 80143f2:	462a      	mov	r2, r5
 80143f4:	4620      	mov	r0, r4
 80143f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143fa:	f7ff bf9d 	b.w	8014338 <rmw_validate_namespace_with_size>
 80143fe:	200b      	movs	r0, #11
 8014400:	4770      	bx	lr
 8014402:	bf00      	nop

08014404 <rmw_namespace_validation_result_string>:
 8014404:	2807      	cmp	r0, #7
 8014406:	d803      	bhi.n	8014410 <rmw_namespace_validation_result_string+0xc>
 8014408:	4b02      	ldr	r3, [pc, #8]	; (8014414 <rmw_namespace_validation_result_string+0x10>)
 801440a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801440e:	4770      	bx	lr
 8014410:	4801      	ldr	r0, [pc, #4]	; (8014418 <rmw_namespace_validation_result_string+0x14>)
 8014412:	4770      	bx	lr
 8014414:	080240e4 	.word	0x080240e4
 8014418:	08023f3c 	.word	0x08023f3c

0801441c <rmw_validate_node_name>:
 801441c:	2800      	cmp	r0, #0
 801441e:	d042      	beq.n	80144a6 <rmw_validate_node_name+0x8a>
 8014420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014424:	460d      	mov	r5, r1
 8014426:	2900      	cmp	r1, #0
 8014428:	d03f      	beq.n	80144aa <rmw_validate_node_name+0x8e>
 801442a:	4604      	mov	r4, r0
 801442c:	4616      	mov	r6, r2
 801442e:	f7eb ff67 	bl	8000300 <strlen>
 8014432:	b310      	cbz	r0, 801447a <rmw_validate_node_name+0x5e>
 8014434:	1e63      	subs	r3, r4, #1
 8014436:	f1c4 0101 	rsb	r1, r4, #1
 801443a:	eb03 0800 	add.w	r8, r3, r0
 801443e:	18cf      	adds	r7, r1, r3
 8014440:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014444:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8014448:	f02e 0c20 	bic.w	ip, lr, #32
 801444c:	2a09      	cmp	r2, #9
 801444e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8014452:	d905      	bls.n	8014460 <rmw_validate_node_name+0x44>
 8014454:	f1bc 0f19 	cmp.w	ip, #25
 8014458:	d902      	bls.n	8014460 <rmw_validate_node_name+0x44>
 801445a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801445e:	d114      	bne.n	801448a <rmw_validate_node_name+0x6e>
 8014460:	4598      	cmp	r8, r3
 8014462:	d1ec      	bne.n	801443e <rmw_validate_node_name+0x22>
 8014464:	7822      	ldrb	r2, [r4, #0]
 8014466:	4b16      	ldr	r3, [pc, #88]	; (80144c0 <rmw_validate_node_name+0xa4>)
 8014468:	5cd3      	ldrb	r3, [r2, r3]
 801446a:	f013 0304 	ands.w	r3, r3, #4
 801446e:	d113      	bne.n	8014498 <rmw_validate_node_name+0x7c>
 8014470:	28ff      	cmp	r0, #255	; 0xff
 8014472:	d81c      	bhi.n	80144ae <rmw_validate_node_name+0x92>
 8014474:	4618      	mov	r0, r3
 8014476:	602b      	str	r3, [r5, #0]
 8014478:	e00c      	b.n	8014494 <rmw_validate_node_name+0x78>
 801447a:	2301      	movs	r3, #1
 801447c:	602b      	str	r3, [r5, #0]
 801447e:	b17e      	cbz	r6, 80144a0 <rmw_validate_node_name+0x84>
 8014480:	2300      	movs	r3, #0
 8014482:	4618      	mov	r0, r3
 8014484:	6033      	str	r3, [r6, #0]
 8014486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801448a:	2302      	movs	r3, #2
 801448c:	602b      	str	r3, [r5, #0]
 801448e:	b13e      	cbz	r6, 80144a0 <rmw_validate_node_name+0x84>
 8014490:	2000      	movs	r0, #0
 8014492:	6037      	str	r7, [r6, #0]
 8014494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014498:	2303      	movs	r3, #3
 801449a:	602b      	str	r3, [r5, #0]
 801449c:	2e00      	cmp	r6, #0
 801449e:	d1ef      	bne.n	8014480 <rmw_validate_node_name+0x64>
 80144a0:	2000      	movs	r0, #0
 80144a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144a6:	200b      	movs	r0, #11
 80144a8:	4770      	bx	lr
 80144aa:	200b      	movs	r0, #11
 80144ac:	e7f2      	b.n	8014494 <rmw_validate_node_name+0x78>
 80144ae:	2204      	movs	r2, #4
 80144b0:	602a      	str	r2, [r5, #0]
 80144b2:	2e00      	cmp	r6, #0
 80144b4:	d0f4      	beq.n	80144a0 <rmw_validate_node_name+0x84>
 80144b6:	22fe      	movs	r2, #254	; 0xfe
 80144b8:	4618      	mov	r0, r3
 80144ba:	6032      	str	r2, [r6, #0]
 80144bc:	e7ea      	b.n	8014494 <rmw_validate_node_name+0x78>
 80144be:	bf00      	nop
 80144c0:	0802491c 	.word	0x0802491c

080144c4 <rmw_node_name_validation_result_string>:
 80144c4:	2804      	cmp	r0, #4
 80144c6:	d803      	bhi.n	80144d0 <rmw_node_name_validation_result_string+0xc>
 80144c8:	4b02      	ldr	r3, [pc, #8]	; (80144d4 <rmw_node_name_validation_result_string+0x10>)
 80144ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80144ce:	4770      	bx	lr
 80144d0:	4801      	ldr	r0, [pc, #4]	; (80144d8 <rmw_node_name_validation_result_string+0x14>)
 80144d2:	4770      	bx	lr
 80144d4:	080241f0 	.word	0x080241f0
 80144d8:	08024104 	.word	0x08024104

080144dc <rmw_uros_set_custom_transport>:
 80144dc:	b470      	push	{r4, r5, r6}
 80144de:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80144e2:	b162      	cbz	r2, 80144fe <rmw_uros_set_custom_transport+0x22>
 80144e4:	b15b      	cbz	r3, 80144fe <rmw_uros_set_custom_transport+0x22>
 80144e6:	b155      	cbz	r5, 80144fe <rmw_uros_set_custom_transport+0x22>
 80144e8:	b14e      	cbz	r6, 80144fe <rmw_uros_set_custom_transport+0x22>
 80144ea:	4c06      	ldr	r4, [pc, #24]	; (8014504 <rmw_uros_set_custom_transport+0x28>)
 80144ec:	7020      	strb	r0, [r4, #0]
 80144ee:	2000      	movs	r0, #0
 80144f0:	6166      	str	r6, [r4, #20]
 80144f2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80144f6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80144fa:	bc70      	pop	{r4, r5, r6}
 80144fc:	4770      	bx	lr
 80144fe:	200b      	movs	r0, #11
 8014500:	bc70      	pop	{r4, r5, r6}
 8014502:	4770      	bx	lr
 8014504:	20012314 	.word	0x20012314

08014508 <rmw_init_options_init>:
 8014508:	b084      	sub	sp, #16
 801450a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801450c:	b083      	sub	sp, #12
 801450e:	ad09      	add	r5, sp, #36	; 0x24
 8014510:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014514:	b130      	cbz	r0, 8014524 <rmw_init_options_init+0x1c>
 8014516:	4604      	mov	r4, r0
 8014518:	4628      	mov	r0, r5
 801451a:	f7ff fcaf 	bl	8013e7c <rcutils_allocator_is_valid>
 801451e:	b108      	cbz	r0, 8014524 <rmw_init_options_init+0x1c>
 8014520:	68a6      	ldr	r6, [r4, #8]
 8014522:	b12e      	cbz	r6, 8014530 <rmw_init_options_init+0x28>
 8014524:	200b      	movs	r0, #11
 8014526:	b003      	add	sp, #12
 8014528:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801452c:	b004      	add	sp, #16
 801452e:	4770      	bx	lr
 8014530:	2200      	movs	r2, #0
 8014532:	2300      	movs	r3, #0
 8014534:	f104 0c20 	add.w	ip, r4, #32
 8014538:	f8df e098 	ldr.w	lr, [pc, #152]	; 80145d4 <rmw_init_options_init+0xcc>
 801453c:	466f      	mov	r7, sp
 801453e:	e9c4 2300 	strd	r2, r3, [r4]
 8014542:	4b20      	ldr	r3, [pc, #128]	; (80145c4 <rmw_init_options_init+0xbc>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	60a3      	str	r3, [r4, #8]
 8014548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801454a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801454e:	682b      	ldr	r3, [r5, #0]
 8014550:	4638      	mov	r0, r7
 8014552:	f8cc 3000 	str.w	r3, [ip]
 8014556:	f8c4 e01c 	str.w	lr, [r4, #28]
 801455a:	60e6      	str	r6, [r4, #12]
 801455c:	f7ff fec0 	bl	80142e0 <rmw_get_default_security_options>
 8014560:	f104 0310 	add.w	r3, r4, #16
 8014564:	2203      	movs	r2, #3
 8014566:	e897 0003 	ldmia.w	r7, {r0, r1}
 801456a:	e883 0003 	stmia.w	r3, {r0, r1}
 801456e:	4816      	ldr	r0, [pc, #88]	; (80145c8 <rmw_init_options_init+0xc0>)
 8014570:	4916      	ldr	r1, [pc, #88]	; (80145cc <rmw_init_options_init+0xc4>)
 8014572:	7626      	strb	r6, [r4, #24]
 8014574:	f001 fa62 	bl	8015a3c <rmw_uxrce_init_init_options_impl_memory>
 8014578:	4813      	ldr	r0, [pc, #76]	; (80145c8 <rmw_init_options_init+0xc0>)
 801457a:	f008 fc25 	bl	801cdc8 <get_memory>
 801457e:	b1f0      	cbz	r0, 80145be <rmw_init_options_init+0xb6>
 8014580:	4a13      	ldr	r2, [pc, #76]	; (80145d0 <rmw_init_options_init+0xc8>)
 8014582:	6883      	ldr	r3, [r0, #8]
 8014584:	6851      	ldr	r1, [r2, #4]
 8014586:	6363      	str	r3, [r4, #52]	; 0x34
 8014588:	7810      	ldrb	r0, [r2, #0]
 801458a:	6159      	str	r1, [r3, #20]
 801458c:	68d1      	ldr	r1, [r2, #12]
 801458e:	7418      	strb	r0, [r3, #16]
 8014590:	61d9      	str	r1, [r3, #28]
 8014592:	6911      	ldr	r1, [r2, #16]
 8014594:	6219      	str	r1, [r3, #32]
 8014596:	6951      	ldr	r1, [r2, #20]
 8014598:	6892      	ldr	r2, [r2, #8]
 801459a:	6259      	str	r1, [r3, #36]	; 0x24
 801459c:	619a      	str	r2, [r3, #24]
 801459e:	f004 fb65 	bl	8018c6c <uxr_nanos>
 80145a2:	f009 ffd7 	bl	801e554 <srand>
 80145a6:	f00a f803 	bl	801e5b0 <rand>
 80145aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80145ac:	6298      	str	r0, [r3, #40]	; 0x28
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d0f9      	beq.n	80145a6 <rmw_init_options_init+0x9e>
 80145b2:	2000      	movs	r0, #0
 80145b4:	b003      	add	sp, #12
 80145b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80145ba:	b004      	add	sp, #16
 80145bc:	4770      	bx	lr
 80145be:	2001      	movs	r0, #1
 80145c0:	e7b1      	b.n	8014526 <rmw_init_options_init+0x1e>
 80145c2:	bf00      	nop
 80145c4:	08024874 	.word	0x08024874
 80145c8:	20016d6c 	.word	0x20016d6c
 80145cc:	20012608 	.word	0x20012608
 80145d0:	20012314 	.word	0x20012314
 80145d4:	08023c00 	.word	0x08023c00

080145d8 <rmw_init_options_copy>:
 80145d8:	2800      	cmp	r0, #0
 80145da:	d047      	beq.n	801466c <rmw_init_options_copy+0x94>
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	460d      	mov	r5, r1
 80145e0:	b149      	cbz	r1, 80145f6 <rmw_init_options_copy+0x1e>
 80145e2:	4604      	mov	r4, r0
 80145e4:	6880      	ldr	r0, [r0, #8]
 80145e6:	b120      	cbz	r0, 80145f2 <rmw_init_options_copy+0x1a>
 80145e8:	4b22      	ldr	r3, [pc, #136]	; (8014674 <rmw_init_options_copy+0x9c>)
 80145ea:	6819      	ldr	r1, [r3, #0]
 80145ec:	f7eb fe28 	bl	8000240 <strcmp>
 80145f0:	bba8      	cbnz	r0, 801465e <rmw_init_options_copy+0x86>
 80145f2:	68ab      	ldr	r3, [r5, #8]
 80145f4:	b11b      	cbz	r3, 80145fe <rmw_init_options_copy+0x26>
 80145f6:	f04f 0c0b 	mov.w	ip, #11
 80145fa:	4660      	mov	r0, ip
 80145fc:	bd70      	pop	{r4, r5, r6, pc}
 80145fe:	4623      	mov	r3, r4
 8014600:	462a      	mov	r2, r5
 8014602:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014606:	f8d3 e000 	ldr.w	lr, [r3]
 801460a:	3310      	adds	r3, #16
 801460c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8014610:	3210      	adds	r2, #16
 8014612:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8014616:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801461a:	42b3      	cmp	r3, r6
 801461c:	f842 ec10 	str.w	lr, [r2, #-16]
 8014620:	f842 cc0c 	str.w	ip, [r2, #-12]
 8014624:	f842 0c08 	str.w	r0, [r2, #-8]
 8014628:	f842 1c04 	str.w	r1, [r2, #-4]
 801462c:	d1eb      	bne.n	8014606 <rmw_init_options_copy+0x2e>
 801462e:	6819      	ldr	r1, [r3, #0]
 8014630:	685b      	ldr	r3, [r3, #4]
 8014632:	4811      	ldr	r0, [pc, #68]	; (8014678 <rmw_init_options_copy+0xa0>)
 8014634:	6011      	str	r1, [r2, #0]
 8014636:	6053      	str	r3, [r2, #4]
 8014638:	f008 fbc6 	bl	801cdc8 <get_memory>
 801463c:	b198      	cbz	r0, 8014666 <rmw_init_options_copy+0x8e>
 801463e:	6883      	ldr	r3, [r0, #8]
 8014640:	f04f 0c00 	mov.w	ip, #0
 8014644:	636b      	str	r3, [r5, #52]	; 0x34
 8014646:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8014648:	f103 0410 	add.w	r4, r3, #16
 801464c:	3510      	adds	r5, #16
 801464e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801465a:	4660      	mov	r0, ip
 801465c:	bd70      	pop	{r4, r5, r6, pc}
 801465e:	f04f 0c0c 	mov.w	ip, #12
 8014662:	4660      	mov	r0, ip
 8014664:	bd70      	pop	{r4, r5, r6, pc}
 8014666:	f04f 0c01 	mov.w	ip, #1
 801466a:	e7c6      	b.n	80145fa <rmw_init_options_copy+0x22>
 801466c:	f04f 0c0b 	mov.w	ip, #11
 8014670:	4660      	mov	r0, ip
 8014672:	4770      	bx	lr
 8014674:	08024874 	.word	0x08024874
 8014678:	20016d6c 	.word	0x20016d6c

0801467c <rmw_init_options_fini>:
 801467c:	b510      	push	{r4, lr}
 801467e:	b08e      	sub	sp, #56	; 0x38
 8014680:	b388      	cbz	r0, 80146e6 <rmw_init_options_fini+0x6a>
 8014682:	4604      	mov	r4, r0
 8014684:	3020      	adds	r0, #32
 8014686:	f7ff fbf9 	bl	8013e7c <rcutils_allocator_is_valid>
 801468a:	b360      	cbz	r0, 80146e6 <rmw_init_options_fini+0x6a>
 801468c:	68a0      	ldr	r0, [r4, #8]
 801468e:	b120      	cbz	r0, 801469a <rmw_init_options_fini+0x1e>
 8014690:	4b1a      	ldr	r3, [pc, #104]	; (80146fc <rmw_init_options_fini+0x80>)
 8014692:	6819      	ldr	r1, [r3, #0]
 8014694:	f7eb fdd4 	bl	8000240 <strcmp>
 8014698:	bb68      	cbnz	r0, 80146f6 <rmw_init_options_fini+0x7a>
 801469a:	4b19      	ldr	r3, [pc, #100]	; (8014700 <rmw_init_options_fini+0x84>)
 801469c:	6819      	ldr	r1, [r3, #0]
 801469e:	b331      	cbz	r1, 80146ee <rmw_init_options_fini+0x72>
 80146a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80146a2:	e001      	b.n	80146a8 <rmw_init_options_fini+0x2c>
 80146a4:	6849      	ldr	r1, [r1, #4]
 80146a6:	b311      	cbz	r1, 80146ee <rmw_init_options_fini+0x72>
 80146a8:	688b      	ldr	r3, [r1, #8]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d1fa      	bne.n	80146a4 <rmw_init_options_fini+0x28>
 80146ae:	4814      	ldr	r0, [pc, #80]	; (8014700 <rmw_init_options_fini+0x84>)
 80146b0:	f008 fb9a 	bl	801cde8 <put_memory>
 80146b4:	4668      	mov	r0, sp
 80146b6:	f7ff fdff 	bl	80142b8 <rmw_get_zero_initialized_init_options>
 80146ba:	46ee      	mov	lr, sp
 80146bc:	46a4      	mov	ip, r4
 80146be:	2400      	movs	r4, #0
 80146c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80146c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80146cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80146d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80146dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80146e0:	4620      	mov	r0, r4
 80146e2:	b00e      	add	sp, #56	; 0x38
 80146e4:	bd10      	pop	{r4, pc}
 80146e6:	240b      	movs	r4, #11
 80146e8:	4620      	mov	r0, r4
 80146ea:	b00e      	add	sp, #56	; 0x38
 80146ec:	bd10      	pop	{r4, pc}
 80146ee:	2401      	movs	r4, #1
 80146f0:	4620      	mov	r0, r4
 80146f2:	b00e      	add	sp, #56	; 0x38
 80146f4:	bd10      	pop	{r4, pc}
 80146f6:	240c      	movs	r4, #12
 80146f8:	e7f2      	b.n	80146e0 <rmw_init_options_fini+0x64>
 80146fa:	bf00      	nop
 80146fc:	08024874 	.word	0x08024874
 8014700:	20016d6c 	.word	0x20016d6c

08014704 <rmw_init>:
 8014704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014708:	b083      	sub	sp, #12
 801470a:	2800      	cmp	r0, #0
 801470c:	f000 80d3 	beq.w	80148b6 <rmw_init+0x1b2>
 8014710:	460e      	mov	r6, r1
 8014712:	2900      	cmp	r1, #0
 8014714:	f000 80cf 	beq.w	80148b6 <rmw_init+0x1b2>
 8014718:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801471a:	4605      	mov	r5, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	f000 80ca 	beq.w	80148b6 <rmw_init+0x1b2>
 8014722:	4b78      	ldr	r3, [pc, #480]	; (8014904 <rmw_init+0x200>)
 8014724:	6880      	ldr	r0, [r0, #8]
 8014726:	681f      	ldr	r7, [r3, #0]
 8014728:	b128      	cbz	r0, 8014736 <rmw_init+0x32>
 801472a:	4639      	mov	r1, r7
 801472c:	f7eb fd88 	bl	8000240 <strcmp>
 8014730:	2800      	cmp	r0, #0
 8014732:	f040 80ca 	bne.w	80148ca <rmw_init+0x1c6>
 8014736:	4c74      	ldr	r4, [pc, #464]	; (8014908 <rmw_init+0x204>)
 8014738:	f04f 0800 	mov.w	r8, #0
 801473c:	4973      	ldr	r1, [pc, #460]	; (801490c <rmw_init+0x208>)
 801473e:	4874      	ldr	r0, [pc, #464]	; (8014910 <rmw_init+0x20c>)
 8014740:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014744:	60b7      	str	r7, [r6, #8]
 8014746:	e9c6 2300 	strd	r2, r3, [r6]
 801474a:	68eb      	ldr	r3, [r5, #12]
 801474c:	2201      	movs	r2, #1
 801474e:	64b3      	str	r3, [r6, #72]	; 0x48
 8014750:	f001 f914 	bl	801597c <rmw_uxrce_init_session_memory>
 8014754:	4620      	mov	r0, r4
 8014756:	2204      	movs	r2, #4
 8014758:	496e      	ldr	r1, [pc, #440]	; (8014914 <rmw_init+0x210>)
 801475a:	f001 f94f 	bl	80159fc <rmw_uxrce_init_static_input_buffer_memory>
 801475e:	486c      	ldr	r0, [pc, #432]	; (8014910 <rmw_init+0x20c>)
 8014760:	f884 800d 	strb.w	r8, [r4, #13]
 8014764:	f008 fb30 	bl	801cdc8 <get_memory>
 8014768:	2800      	cmp	r0, #0
 801476a:	f000 80a9 	beq.w	80148c0 <rmw_init+0x1bc>
 801476e:	6884      	ldr	r4, [r0, #8]
 8014770:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014772:	f104 0910 	add.w	r9, r4, #16
 8014776:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8014778:	f890 c010 	ldrb.w	ip, [r0, #16]
 801477c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014780:	9101      	str	r1, [sp, #4]
 8014782:	4661      	mov	r1, ip
 8014784:	6a00      	ldr	r0, [r0, #32]
 8014786:	9000      	str	r0, [sp, #0]
 8014788:	4648      	mov	r0, r9
 801478a:	f002 fa19 	bl	8016bc0 <uxr_set_custom_transport_callbacks>
 801478e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014792:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8014796:	4960      	ldr	r1, [pc, #384]	; (8014918 <rmw_init+0x214>)
 8014798:	4860      	ldr	r0, [pc, #384]	; (801491c <rmw_init+0x218>)
 801479a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 801479e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80147a2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80147a6:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80147aa:	2201      	movs	r2, #1
 80147ac:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80147b0:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80147b4:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80147b8:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80147bc:	64f4      	str	r4, [r6, #76]	; 0x4c
 80147be:	f001 f8bd 	bl	801593c <rmw_uxrce_init_node_memory>
 80147c2:	2205      	movs	r2, #5
 80147c4:	4956      	ldr	r1, [pc, #344]	; (8014920 <rmw_init+0x21c>)
 80147c6:	4857      	ldr	r0, [pc, #348]	; (8014924 <rmw_init+0x220>)
 80147c8:	f001 f898 	bl	80158fc <rmw_uxrce_init_subscription_memory>
 80147cc:	220a      	movs	r2, #10
 80147ce:	4956      	ldr	r1, [pc, #344]	; (8014928 <rmw_init+0x224>)
 80147d0:	4856      	ldr	r0, [pc, #344]	; (801492c <rmw_init+0x228>)
 80147d2:	f001 f873 	bl	80158bc <rmw_uxrce_init_publisher_memory>
 80147d6:	2201      	movs	r2, #1
 80147d8:	4955      	ldr	r1, [pc, #340]	; (8014930 <rmw_init+0x22c>)
 80147da:	4856      	ldr	r0, [pc, #344]	; (8014934 <rmw_init+0x230>)
 80147dc:	f001 f82e 	bl	801583c <rmw_uxrce_init_service_memory>
 80147e0:	2201      	movs	r2, #1
 80147e2:	4955      	ldr	r1, [pc, #340]	; (8014938 <rmw_init+0x234>)
 80147e4:	4855      	ldr	r0, [pc, #340]	; (801493c <rmw_init+0x238>)
 80147e6:	f001 f849 	bl	801587c <rmw_uxrce_init_client_memory>
 80147ea:	220f      	movs	r2, #15
 80147ec:	4954      	ldr	r1, [pc, #336]	; (8014940 <rmw_init+0x23c>)
 80147ee:	4855      	ldr	r0, [pc, #340]	; (8014944 <rmw_init+0x240>)
 80147f0:	f001 f8e4 	bl	80159bc <rmw_uxrce_init_topic_memory>
 80147f4:	2203      	movs	r2, #3
 80147f6:	4954      	ldr	r1, [pc, #336]	; (8014948 <rmw_init+0x244>)
 80147f8:	4854      	ldr	r0, [pc, #336]	; (801494c <rmw_init+0x248>)
 80147fa:	f001 f91f 	bl	8015a3c <rmw_uxrce_init_init_options_impl_memory>
 80147fe:	2204      	movs	r2, #4
 8014800:	4953      	ldr	r1, [pc, #332]	; (8014950 <rmw_init+0x24c>)
 8014802:	4854      	ldr	r0, [pc, #336]	; (8014954 <rmw_init+0x250>)
 8014804:	f001 f93a 	bl	8015a7c <rmw_uxrce_init_wait_set_memory>
 8014808:	4953      	ldr	r1, [pc, #332]	; (8014958 <rmw_init+0x254>)
 801480a:	4854      	ldr	r0, [pc, #336]	; (801495c <rmw_init+0x258>)
 801480c:	2204      	movs	r2, #4
 801480e:	f001 f955 	bl	8015abc <rmw_uxrce_init_guard_condition_memory>
 8014812:	4642      	mov	r2, r8
 8014814:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8014816:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8014818:	f000 fff8 	bl	801580c <rmw_uxrce_transport_init>
 801481c:	4607      	mov	r7, r0
 801481e:	2800      	cmp	r0, #0
 8014820:	d158      	bne.n	80148d4 <rmw_init+0x1d0>
 8014822:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8014824:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8014828:	f504 7122 	add.w	r1, r4, #648	; 0x288
 801482c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801482e:	4628      	mov	r0, r5
 8014830:	f002 fbf6 	bl	8017020 <uxr_init_session>
 8014834:	4622      	mov	r2, r4
 8014836:	494a      	ldr	r1, [pc, #296]	; (8014960 <rmw_init+0x25c>)
 8014838:	4628      	mov	r0, r5
 801483a:	f002 fc15 	bl	8017068 <uxr_set_topic_callback>
 801483e:	463a      	mov	r2, r7
 8014840:	4948      	ldr	r1, [pc, #288]	; (8014964 <rmw_init+0x260>)
 8014842:	4628      	mov	r0, r5
 8014844:	f002 fc0c 	bl	8017060 <uxr_set_status_callback>
 8014848:	463a      	mov	r2, r7
 801484a:	4947      	ldr	r1, [pc, #284]	; (8014968 <rmw_init+0x264>)
 801484c:	4628      	mov	r0, r5
 801484e:	f002 fc0f 	bl	8017070 <uxr_set_request_callback>
 8014852:	463a      	mov	r2, r7
 8014854:	4945      	ldr	r1, [pc, #276]	; (801496c <rmw_init+0x268>)
 8014856:	4628      	mov	r0, r5
 8014858:	f002 fc0e 	bl	8017078 <uxr_set_reply_callback>
 801485c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014860:	2304      	movs	r3, #4
 8014862:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8014866:	0092      	lsls	r2, r2, #2
 8014868:	4628      	mov	r0, r5
 801486a:	f002 fc45 	bl	80170f8 <uxr_create_input_reliable_stream>
 801486e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014872:	2304      	movs	r3, #4
 8014874:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8014878:	0092      	lsls	r2, r2, #2
 801487a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801487e:	4628      	mov	r0, r5
 8014880:	f002 fc10 	bl	80170a4 <uxr_create_output_reliable_stream>
 8014884:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8014888:	4628      	mov	r0, r5
 801488a:	f002 fc2f 	bl	80170ec <uxr_create_input_best_effort_stream>
 801488e:	f241 3194 	movw	r1, #5012	; 0x1394
 8014892:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8014896:	4628      	mov	r0, r5
 8014898:	4421      	add	r1, r4
 801489a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801489e:	f002 fbef 	bl	8017080 <uxr_create_output_best_effort_stream>
 80148a2:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 80148a6:	4628      	mov	r0, r5
 80148a8:	f003 f978 	bl	8017b9c <uxr_create_session>
 80148ac:	b1f8      	cbz	r0, 80148ee <rmw_init+0x1ea>
 80148ae:	4638      	mov	r0, r7
 80148b0:	b003      	add	sp, #12
 80148b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148b6:	270b      	movs	r7, #11
 80148b8:	4638      	mov	r0, r7
 80148ba:	b003      	add	sp, #12
 80148bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148c0:	2701      	movs	r7, #1
 80148c2:	4638      	mov	r0, r7
 80148c4:	b003      	add	sp, #12
 80148c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148ca:	270c      	movs	r7, #12
 80148cc:	4638      	mov	r0, r7
 80148ce:	b003      	add	sp, #12
 80148d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148d4:	4648      	mov	r0, r9
 80148d6:	f002 f9b1 	bl	8016c3c <uxr_close_custom_transport>
 80148da:	4621      	mov	r1, r4
 80148dc:	480c      	ldr	r0, [pc, #48]	; (8014910 <rmw_init+0x20c>)
 80148de:	f008 fa83 	bl	801cde8 <put_memory>
 80148e2:	4638      	mov	r0, r7
 80148e4:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80148e8:	b003      	add	sp, #12
 80148ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148ee:	4648      	mov	r0, r9
 80148f0:	f002 f9a4 	bl	8016c3c <uxr_close_custom_transport>
 80148f4:	4621      	mov	r1, r4
 80148f6:	4806      	ldr	r0, [pc, #24]	; (8014910 <rmw_init+0x20c>)
 80148f8:	f008 fa76 	bl	801cde8 <put_memory>
 80148fc:	64f7      	str	r7, [r6, #76]	; 0x4c
 80148fe:	2701      	movs	r7, #1
 8014900:	e7d5      	b.n	80148ae <rmw_init+0x1aa>
 8014902:	bf00      	nop
 8014904:	08024874 	.word	0x08024874
 8014908:	20016dbc 	.word	0x20016dbc
 801490c:	20013068 	.word	0x20013068
 8014910:	20016dac 	.word	0x20016dac
 8014914:	20014610 	.word	0x20014610
 8014918:	2001268c 	.word	0x2001268c
 801491c:	20016d7c 	.word	0x20016d7c
 8014920:	20016710 	.word	0x20016710
 8014924:	20016dcc 	.word	0x20016dcc
 8014928:	20012730 	.word	0x20012730
 801492c:	20016d8c 	.word	0x20016d8c
 8014930:	20012fa0 	.word	0x20012fa0
 8014934:	20016d9c 	.word	0x20016d9c
 8014938:	200124c0 	.word	0x200124c0
 801493c:	200124ac 	.word	0x200124ac
 8014940:	20016b48 	.word	0x20016b48
 8014944:	20016ddc 	.word	0x20016ddc
 8014948:	20012608 	.word	0x20012608
 801494c:	20016d6c 	.word	0x20016d6c
 8014950:	20016cec 	.word	0x20016cec
 8014954:	20016dec 	.word	0x20016dec
 8014958:	20012588 	.word	0x20012588
 801495c:	20016d5c 	.word	0x20016d5c
 8014960:	0801cc01 	.word	0x0801cc01
 8014964:	0801cbf9 	.word	0x0801cbf9
 8014968:	0801cc99 	.word	0x0801cc99
 801496c:	0801cd35 	.word	0x0801cd35

08014970 <rmw_context_fini>:
 8014970:	4b17      	ldr	r3, [pc, #92]	; (80149d0 <rmw_context_fini+0x60>)
 8014972:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8014974:	b570      	push	{r4, r5, r6, lr}
 8014976:	681c      	ldr	r4, [r3, #0]
 8014978:	4605      	mov	r5, r0
 801497a:	b334      	cbz	r4, 80149ca <rmw_context_fini+0x5a>
 801497c:	2600      	movs	r6, #0
 801497e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8014982:	6902      	ldr	r2, [r0, #16]
 8014984:	428a      	cmp	r2, r1
 8014986:	d018      	beq.n	80149ba <rmw_context_fini+0x4a>
 8014988:	2c00      	cmp	r4, #0
 801498a:	d1f8      	bne.n	801497e <rmw_context_fini+0xe>
 801498c:	b189      	cbz	r1, 80149b2 <rmw_context_fini+0x42>
 801498e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8014992:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8014996:	789b      	ldrb	r3, [r3, #2]
 8014998:	2b01      	cmp	r3, #1
 801499a:	bf14      	ite	ne
 801499c:	210a      	movne	r1, #10
 801499e:	2100      	moveq	r1, #0
 80149a0:	f003 f8d4 	bl	8017b4c <uxr_delete_session_retries>
 80149a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80149a6:	f001 f8a9 	bl	8015afc <rmw_uxrce_fini_session_memory>
 80149aa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80149ac:	3010      	adds	r0, #16
 80149ae:	f002 f945 	bl	8016c3c <uxr_close_custom_transport>
 80149b2:	2300      	movs	r3, #0
 80149b4:	4630      	mov	r0, r6
 80149b6:	64eb      	str	r3, [r5, #76]	; 0x4c
 80149b8:	bd70      	pop	{r4, r5, r6, pc}
 80149ba:	3018      	adds	r0, #24
 80149bc:	f000 f89c 	bl	8014af8 <rmw_destroy_node>
 80149c0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80149c2:	4606      	mov	r6, r0
 80149c4:	2c00      	cmp	r4, #0
 80149c6:	d1da      	bne.n	801497e <rmw_context_fini+0xe>
 80149c8:	e7e0      	b.n	801498c <rmw_context_fini+0x1c>
 80149ca:	4626      	mov	r6, r4
 80149cc:	e7de      	b.n	801498c <rmw_context_fini+0x1c>
 80149ce:	bf00      	nop
 80149d0:	20016d7c 	.word	0x20016d7c

080149d4 <create_node>:
 80149d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149d8:	b083      	sub	sp, #12
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d064      	beq.n	8014aa8 <create_node+0xd4>
 80149de:	4606      	mov	r6, r0
 80149e0:	4838      	ldr	r0, [pc, #224]	; (8014ac4 <create_node+0xf0>)
 80149e2:	460f      	mov	r7, r1
 80149e4:	4690      	mov	r8, r2
 80149e6:	461d      	mov	r5, r3
 80149e8:	f008 f9ee 	bl	801cdc8 <get_memory>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d05b      	beq.n	8014aa8 <create_node+0xd4>
 80149f0:	6884      	ldr	r4, [r0, #8]
 80149f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80149f4:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80149f8:	f104 0518 	add.w	r5, r4, #24
 80149fc:	6123      	str	r3, [r4, #16]
 80149fe:	f008 fa4b 	bl	801ce98 <rmw_get_implementation_identifier>
 8014a02:	f8c4 9020 	str.w	r9, [r4, #32]
 8014a06:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8014a0a:	4630      	mov	r0, r6
 8014a0c:	f7eb fc78 	bl	8000300 <strlen>
 8014a10:	1c42      	adds	r2, r0, #1
 8014a12:	2a3c      	cmp	r2, #60	; 0x3c
 8014a14:	d840      	bhi.n	8014a98 <create_node+0xc4>
 8014a16:	4648      	mov	r0, r9
 8014a18:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8014a1c:	4631      	mov	r1, r6
 8014a1e:	f00b f98e 	bl	801fd3e <memcpy>
 8014a22:	4638      	mov	r0, r7
 8014a24:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8014a28:	f7eb fc6a 	bl	8000300 <strlen>
 8014a2c:	1c42      	adds	r2, r0, #1
 8014a2e:	2a3c      	cmp	r2, #60	; 0x3c
 8014a30:	d832      	bhi.n	8014a98 <create_node+0xc4>
 8014a32:	4639      	mov	r1, r7
 8014a34:	4648      	mov	r0, r9
 8014a36:	f00b f982 	bl	801fd3e <memcpy>
 8014a3a:	6923      	ldr	r3, [r4, #16]
 8014a3c:	2101      	movs	r1, #1
 8014a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a42:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8014a46:	1842      	adds	r2, r0, r1
 8014a48:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8014a4c:	f002 f8fa 	bl	8016c44 <uxr_object_id>
 8014a50:	6160      	str	r0, [r4, #20]
 8014a52:	783b      	ldrb	r3, [r7, #0]
 8014a54:	2b2f      	cmp	r3, #47	; 0x2f
 8014a56:	d12c      	bne.n	8014ab2 <create_node+0xde>
 8014a58:	787b      	ldrb	r3, [r7, #1]
 8014a5a:	bb53      	cbnz	r3, 8014ab2 <create_node+0xde>
 8014a5c:	4633      	mov	r3, r6
 8014a5e:	4a1a      	ldr	r2, [pc, #104]	; (8014ac8 <create_node+0xf4>)
 8014a60:	213c      	movs	r1, #60	; 0x3c
 8014a62:	481a      	ldr	r0, [pc, #104]	; (8014acc <create_node+0xf8>)
 8014a64:	f00a ff0e 	bl	801f884 <sniprintf>
 8014a68:	6920      	ldr	r0, [r4, #16]
 8014a6a:	2106      	movs	r1, #6
 8014a6c:	fa1f f388 	uxth.w	r3, r8
 8014a70:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8014a74:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014a78:	9101      	str	r1, [sp, #4]
 8014a7a:	4914      	ldr	r1, [pc, #80]	; (8014acc <create_node+0xf8>)
 8014a7c:	9100      	str	r1, [sp, #0]
 8014a7e:	6811      	ldr	r1, [r2, #0]
 8014a80:	6962      	ldr	r2, [r4, #20]
 8014a82:	f001 fe31 	bl	80166e8 <uxr_buffer_create_participant_bin>
 8014a86:	4602      	mov	r2, r0
 8014a88:	6920      	ldr	r0, [r4, #16]
 8014a8a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014a8e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014a92:	f001 f9b7 	bl	8015e04 <run_xrce_session>
 8014a96:	b918      	cbnz	r0, 8014aa0 <create_node+0xcc>
 8014a98:	4628      	mov	r0, r5
 8014a9a:	2500      	movs	r5, #0
 8014a9c:	f001 f834 	bl	8015b08 <rmw_uxrce_fini_node_memory>
 8014aa0:	4628      	mov	r0, r5
 8014aa2:	b003      	add	sp, #12
 8014aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014aa8:	2500      	movs	r5, #0
 8014aaa:	4628      	mov	r0, r5
 8014aac:	b003      	add	sp, #12
 8014aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ab2:	463b      	mov	r3, r7
 8014ab4:	4a06      	ldr	r2, [pc, #24]	; (8014ad0 <create_node+0xfc>)
 8014ab6:	213c      	movs	r1, #60	; 0x3c
 8014ab8:	9600      	str	r6, [sp, #0]
 8014aba:	4804      	ldr	r0, [pc, #16]	; (8014acc <create_node+0xf8>)
 8014abc:	f00a fee2 	bl	801f884 <sniprintf>
 8014ac0:	e7d2      	b.n	8014a68 <create_node+0x94>
 8014ac2:	bf00      	nop
 8014ac4:	20016d7c 	.word	0x20016d7c
 8014ac8:	08024214 	.word	0x08024214
 8014acc:	20012330 	.word	0x20012330
 8014ad0:	08023c10 	.word	0x08023c10

08014ad4 <rmw_create_node>:
 8014ad4:	468c      	mov	ip, r1
 8014ad6:	4611      	mov	r1, r2
 8014ad8:	f1bc 0f00 	cmp.w	ip, #0
 8014adc:	d00a      	beq.n	8014af4 <rmw_create_node+0x20>
 8014ade:	f89c 3000 	ldrb.w	r3, [ip]
 8014ae2:	b13b      	cbz	r3, 8014af4 <rmw_create_node+0x20>
 8014ae4:	b132      	cbz	r2, 8014af4 <rmw_create_node+0x20>
 8014ae6:	7813      	ldrb	r3, [r2, #0]
 8014ae8:	b123      	cbz	r3, 8014af4 <rmw_create_node+0x20>
 8014aea:	4603      	mov	r3, r0
 8014aec:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8014aee:	4660      	mov	r0, ip
 8014af0:	f7ff bf70 	b.w	80149d4 <create_node>
 8014af4:	2000      	movs	r0, #0
 8014af6:	4770      	bx	lr

08014af8 <rmw_destroy_node>:
 8014af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014afa:	b328      	cbz	r0, 8014b48 <rmw_destroy_node+0x50>
 8014afc:	4607      	mov	r7, r0
 8014afe:	6800      	ldr	r0, [r0, #0]
 8014b00:	b120      	cbz	r0, 8014b0c <rmw_destroy_node+0x14>
 8014b02:	4b37      	ldr	r3, [pc, #220]	; (8014be0 <rmw_destroy_node+0xe8>)
 8014b04:	6819      	ldr	r1, [r3, #0]
 8014b06:	f7eb fb9b 	bl	8000240 <strcmp>
 8014b0a:	b9e8      	cbnz	r0, 8014b48 <rmw_destroy_node+0x50>
 8014b0c:	687d      	ldr	r5, [r7, #4]
 8014b0e:	b1dd      	cbz	r5, 8014b48 <rmw_destroy_node+0x50>
 8014b10:	4b34      	ldr	r3, [pc, #208]	; (8014be4 <rmw_destroy_node+0xec>)
 8014b12:	681c      	ldr	r4, [r3, #0]
 8014b14:	2c00      	cmp	r4, #0
 8014b16:	d060      	beq.n	8014bda <rmw_destroy_node+0xe2>
 8014b18:	2600      	movs	r6, #0
 8014b1a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014b1e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8014b22:	429d      	cmp	r5, r3
 8014b24:	d013      	beq.n	8014b4e <rmw_destroy_node+0x56>
 8014b26:	2c00      	cmp	r4, #0
 8014b28:	d1f7      	bne.n	8014b1a <rmw_destroy_node+0x22>
 8014b2a:	4b2f      	ldr	r3, [pc, #188]	; (8014be8 <rmw_destroy_node+0xf0>)
 8014b2c:	681c      	ldr	r4, [r3, #0]
 8014b2e:	b1c4      	cbz	r4, 8014b62 <rmw_destroy_node+0x6a>
 8014b30:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014b34:	6a0b      	ldr	r3, [r1, #32]
 8014b36:	429d      	cmp	r5, r3
 8014b38:	d1f9      	bne.n	8014b2e <rmw_destroy_node+0x36>
 8014b3a:	317c      	adds	r1, #124	; 0x7c
 8014b3c:	4638      	mov	r0, r7
 8014b3e:	f000 fdaf 	bl	80156a0 <rmw_destroy_subscription>
 8014b42:	2801      	cmp	r0, #1
 8014b44:	4606      	mov	r6, r0
 8014b46:	d1f2      	bne.n	8014b2e <rmw_destroy_node+0x36>
 8014b48:	2601      	movs	r6, #1
 8014b4a:	4630      	mov	r0, r6
 8014b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b4e:	3184      	adds	r1, #132	; 0x84
 8014b50:	4638      	mov	r0, r7
 8014b52:	f000 f9b1 	bl	8014eb8 <rmw_destroy_publisher>
 8014b56:	2801      	cmp	r0, #1
 8014b58:	4606      	mov	r6, r0
 8014b5a:	d0f5      	beq.n	8014b48 <rmw_destroy_node+0x50>
 8014b5c:	2c00      	cmp	r4, #0
 8014b5e:	d1dc      	bne.n	8014b1a <rmw_destroy_node+0x22>
 8014b60:	e7e3      	b.n	8014b2a <rmw_destroy_node+0x32>
 8014b62:	4b22      	ldr	r3, [pc, #136]	; (8014bec <rmw_destroy_node+0xf4>)
 8014b64:	681c      	ldr	r4, [r3, #0]
 8014b66:	b16c      	cbz	r4, 8014b84 <rmw_destroy_node+0x8c>
 8014b68:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014b6c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014b6e:	429d      	cmp	r5, r3
 8014b70:	d1f9      	bne.n	8014b66 <rmw_destroy_node+0x6e>
 8014b72:	317c      	adds	r1, #124	; 0x7c
 8014b74:	4638      	mov	r0, r7
 8014b76:	f000 fc1d 	bl	80153b4 <rmw_destroy_service>
 8014b7a:	2801      	cmp	r0, #1
 8014b7c:	4606      	mov	r6, r0
 8014b7e:	d0e3      	beq.n	8014b48 <rmw_destroy_node+0x50>
 8014b80:	2c00      	cmp	r4, #0
 8014b82:	d1f1      	bne.n	8014b68 <rmw_destroy_node+0x70>
 8014b84:	4b1a      	ldr	r3, [pc, #104]	; (8014bf0 <rmw_destroy_node+0xf8>)
 8014b86:	681c      	ldr	r4, [r3, #0]
 8014b88:	b16c      	cbz	r4, 8014ba6 <rmw_destroy_node+0xae>
 8014b8a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014b8e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014b90:	429d      	cmp	r5, r3
 8014b92:	d1f9      	bne.n	8014b88 <rmw_destroy_node+0x90>
 8014b94:	317c      	adds	r1, #124	; 0x7c
 8014b96:	4638      	mov	r0, r7
 8014b98:	f008 f93a 	bl	801ce10 <rmw_destroy_client>
 8014b9c:	2801      	cmp	r0, #1
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	d0d2      	beq.n	8014b48 <rmw_destroy_node+0x50>
 8014ba2:	2c00      	cmp	r4, #0
 8014ba4:	d1f1      	bne.n	8014b8a <rmw_destroy_node+0x92>
 8014ba6:	6928      	ldr	r0, [r5, #16]
 8014ba8:	696a      	ldr	r2, [r5, #20]
 8014baa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014bae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014bb2:	6819      	ldr	r1, [r3, #0]
 8014bb4:	f001 fd4c 	bl	8016650 <uxr_buffer_delete_entity>
 8014bb8:	4602      	mov	r2, r0
 8014bba:	6928      	ldr	r0, [r5, #16]
 8014bbc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014bc0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014bc4:	f001 f91e 	bl	8015e04 <run_xrce_session>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	4638      	mov	r0, r7
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	bf08      	it	eq
 8014bd0:	2602      	moveq	r6, #2
 8014bd2:	f000 ff99 	bl	8015b08 <rmw_uxrce_fini_node_memory>
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bda:	4626      	mov	r6, r4
 8014bdc:	e7a5      	b.n	8014b2a <rmw_destroy_node+0x32>
 8014bde:	bf00      	nop
 8014be0:	08024874 	.word	0x08024874
 8014be4:	20016d8c 	.word	0x20016d8c
 8014be8:	20016dcc 	.word	0x20016dcc
 8014bec:	20016d9c 	.word	0x20016d9c
 8014bf0:	200124ac 	.word	0x200124ac

08014bf4 <rmw_node_get_graph_guard_condition>:
 8014bf4:	6843      	ldr	r3, [r0, #4]
 8014bf6:	6918      	ldr	r0, [r3, #16]
 8014bf8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8014bfc:	4770      	bx	lr
 8014bfe:	bf00      	nop

08014c00 <flush_session>:
 8014c00:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8014c02:	f002 be59 	b.w	80178b8 <uxr_run_session_until_confirm_delivery>
 8014c06:	bf00      	nop

08014c08 <rmw_publish>:
 8014c08:	2800      	cmp	r0, #0
 8014c0a:	d053      	beq.n	8014cb4 <rmw_publish+0xac>
 8014c0c:	b570      	push	{r4, r5, r6, lr}
 8014c0e:	460d      	mov	r5, r1
 8014c10:	b08e      	sub	sp, #56	; 0x38
 8014c12:	2900      	cmp	r1, #0
 8014c14:	d04b      	beq.n	8014cae <rmw_publish+0xa6>
 8014c16:	4604      	mov	r4, r0
 8014c18:	6800      	ldr	r0, [r0, #0]
 8014c1a:	f001 fa05 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	d045      	beq.n	8014cae <rmw_publish+0xa6>
 8014c22:	6866      	ldr	r6, [r4, #4]
 8014c24:	2e00      	cmp	r6, #0
 8014c26:	d042      	beq.n	8014cae <rmw_publish+0xa6>
 8014c28:	69b4      	ldr	r4, [r6, #24]
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	6923      	ldr	r3, [r4, #16]
 8014c2e:	4798      	blx	r3
 8014c30:	69f3      	ldr	r3, [r6, #28]
 8014c32:	9005      	str	r0, [sp, #20]
 8014c34:	b113      	cbz	r3, 8014c3c <rmw_publish+0x34>
 8014c36:	a805      	add	r0, sp, #20
 8014c38:	4798      	blx	r3
 8014c3a:	9805      	ldr	r0, [sp, #20]
 8014c3c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014c40:	691b      	ldr	r3, [r3, #16]
 8014c42:	9000      	str	r0, [sp, #0]
 8014c44:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8014c48:	6972      	ldr	r2, [r6, #20]
 8014c4a:	ab06      	add	r3, sp, #24
 8014c4c:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8014c4e:	f004 f8ad 	bl	8018dac <uxr_prepare_output_stream>
 8014c52:	b1d8      	cbz	r0, 8014c8c <rmw_publish+0x84>
 8014c54:	68a3      	ldr	r3, [r4, #8]
 8014c56:	a906      	add	r1, sp, #24
 8014c58:	4628      	mov	r0, r5
 8014c5a:	4798      	blx	r3
 8014c5c:	6a33      	ldr	r3, [r6, #32]
 8014c5e:	4604      	mov	r4, r0
 8014c60:	b10b      	cbz	r3, 8014c66 <rmw_publish+0x5e>
 8014c62:	a806      	add	r0, sp, #24
 8014c64:	4798      	blx	r3
 8014c66:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8014c6a:	2b01      	cmp	r3, #1
 8014c6c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014c70:	d022      	beq.n	8014cb8 <rmw_publish+0xb0>
 8014c72:	6918      	ldr	r0, [r3, #16]
 8014c74:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8014c76:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014c7a:	f002 fe1d 	bl	80178b8 <uxr_run_session_until_confirm_delivery>
 8014c7e:	4020      	ands	r0, r4
 8014c80:	b2c4      	uxtb	r4, r0
 8014c82:	f084 0001 	eor.w	r0, r4, #1
 8014c86:	b2c0      	uxtb	r0, r0
 8014c88:	b00e      	add	sp, #56	; 0x38
 8014c8a:	bd70      	pop	{r4, r5, r6, pc}
 8014c8c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014c90:	6918      	ldr	r0, [r3, #16]
 8014c92:	9b05      	ldr	r3, [sp, #20]
 8014c94:	9602      	str	r6, [sp, #8]
 8014c96:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014c9a:	9300      	str	r3, [sp, #0]
 8014c9c:	4b09      	ldr	r3, [pc, #36]	; (8014cc4 <rmw_publish+0xbc>)
 8014c9e:	9301      	str	r3, [sp, #4]
 8014ca0:	ab06      	add	r3, sp, #24
 8014ca2:	6972      	ldr	r2, [r6, #20]
 8014ca4:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8014ca6:	f004 f8b1 	bl	8018e0c <uxr_prepare_output_stream_fragmented>
 8014caa:	2800      	cmp	r0, #0
 8014cac:	d1d2      	bne.n	8014c54 <rmw_publish+0x4c>
 8014cae:	2001      	movs	r0, #1
 8014cb0:	b00e      	add	sp, #56	; 0x38
 8014cb2:	bd70      	pop	{r4, r5, r6, pc}
 8014cb4:	2001      	movs	r0, #1
 8014cb6:	4770      	bx	lr
 8014cb8:	6918      	ldr	r0, [r3, #16]
 8014cba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014cbe:	f002 fa41 	bl	8017144 <uxr_flash_output_streams>
 8014cc2:	e7de      	b.n	8014c82 <rmw_publish+0x7a>
 8014cc4:	08014c01 	.word	0x08014c01

08014cc8 <rmw_create_publisher>:
 8014cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ccc:	b087      	sub	sp, #28
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	f000 80d2 	beq.w	8014e78 <rmw_create_publisher+0x1b0>
 8014cd4:	460e      	mov	r6, r1
 8014cd6:	2900      	cmp	r1, #0
 8014cd8:	f000 80ce 	beq.w	8014e78 <rmw_create_publisher+0x1b0>
 8014cdc:	4604      	mov	r4, r0
 8014cde:	6800      	ldr	r0, [r0, #0]
 8014ce0:	4615      	mov	r5, r2
 8014ce2:	461f      	mov	r7, r3
 8014ce4:	f001 f9a0 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 8014ce8:	f080 0001 	eor.w	r0, r0, #1
 8014cec:	b2c0      	uxtb	r0, r0
 8014cee:	2800      	cmp	r0, #0
 8014cf0:	f040 80c2 	bne.w	8014e78 <rmw_create_publisher+0x1b0>
 8014cf4:	2d00      	cmp	r5, #0
 8014cf6:	f000 80bf 	beq.w	8014e78 <rmw_create_publisher+0x1b0>
 8014cfa:	782b      	ldrb	r3, [r5, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f000 80bb 	beq.w	8014e78 <rmw_create_publisher+0x1b0>
 8014d02:	2f00      	cmp	r7, #0
 8014d04:	f000 80b8 	beq.w	8014e78 <rmw_create_publisher+0x1b0>
 8014d08:	485e      	ldr	r0, [pc, #376]	; (8014e84 <rmw_create_publisher+0x1bc>)
 8014d0a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014d0e:	f008 f85b 	bl	801cdc8 <get_memory>
 8014d12:	2800      	cmp	r0, #0
 8014d14:	f000 80b0 	beq.w	8014e78 <rmw_create_publisher+0x1b0>
 8014d18:	6884      	ldr	r4, [r0, #8]
 8014d1a:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8014d1e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8014d22:	f008 f8b9 	bl	801ce98 <rmw_get_implementation_identifier>
 8014d26:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8014d2a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8014d2e:	4628      	mov	r0, r5
 8014d30:	f7eb fae6 	bl	8000300 <strlen>
 8014d34:	3001      	adds	r0, #1
 8014d36:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8014d3a:	283c      	cmp	r0, #60	; 0x3c
 8014d3c:	f200 808f 	bhi.w	8014e5e <rmw_create_publisher+0x196>
 8014d40:	462b      	mov	r3, r5
 8014d42:	4a51      	ldr	r2, [pc, #324]	; (8014e88 <rmw_create_publisher+0x1c0>)
 8014d44:	213c      	movs	r1, #60	; 0x3c
 8014d46:	4650      	mov	r0, sl
 8014d48:	f00a fd9c 	bl	801f884 <sniprintf>
 8014d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014d50:	4639      	mov	r1, r7
 8014d52:	2250      	movs	r2, #80	; 0x50
 8014d54:	67e3      	str	r3, [r4, #124]	; 0x7c
 8014d56:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014d5a:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8014d5e:	f00a ffee 	bl	801fd3e <memcpy>
 8014d62:	7a3b      	ldrb	r3, [r7, #8]
 8014d64:	4630      	mov	r0, r6
 8014d66:	4949      	ldr	r1, [pc, #292]	; (8014e8c <rmw_create_publisher+0x1c4>)
 8014d68:	2b02      	cmp	r3, #2
 8014d6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014d6e:	bf0c      	ite	eq
 8014d70:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8014d74:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8014d78:	67a3      	str	r3, [r4, #120]	; 0x78
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014d80:	f001 f960 	bl	8016044 <get_message_typesupport_handle>
 8014d84:	2800      	cmp	r0, #0
 8014d86:	d06a      	beq.n	8014e5e <rmw_create_publisher+0x196>
 8014d88:	6842      	ldr	r2, [r0, #4]
 8014d8a:	61a2      	str	r2, [r4, #24]
 8014d8c:	2a00      	cmp	r2, #0
 8014d8e:	d066      	beq.n	8014e5e <rmw_create_publisher+0x196>
 8014d90:	4629      	mov	r1, r5
 8014d92:	463b      	mov	r3, r7
 8014d94:	4648      	mov	r0, r9
 8014d96:	f008 f8af 	bl	801cef8 <create_topic>
 8014d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8014d9c:	2800      	cmp	r0, #0
 8014d9e:	d062      	beq.n	8014e66 <rmw_create_publisher+0x19e>
 8014da0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014da4:	2103      	movs	r1, #3
 8014da6:	2506      	movs	r5, #6
 8014da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014dac:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8014db0:	1c42      	adds	r2, r0, #1
 8014db2:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8014db6:	f001 ff45 	bl	8016c44 <uxr_object_id>
 8014dba:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8014dbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014dc2:	6120      	str	r0, [r4, #16]
 8014dc4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8014dc8:	6910      	ldr	r0, [r2, #16]
 8014dca:	9500      	str	r5, [sp, #0]
 8014dcc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014dd0:	6819      	ldr	r1, [r3, #0]
 8014dd2:	6922      	ldr	r2, [r4, #16]
 8014dd4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014dd8:	f001 fcee 	bl	80167b8 <uxr_buffer_create_publisher_bin>
 8014ddc:	4602      	mov	r2, r0
 8014dde:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014de2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014de6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014dea:	f001 f80b 	bl	8015e04 <run_xrce_session>
 8014dee:	b3b0      	cbz	r0, 8014e5e <rmw_create_publisher+0x196>
 8014df0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014df4:	2105      	movs	r1, #5
 8014df6:	f10d 0a10 	add.w	sl, sp, #16
 8014dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014dfe:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8014e02:	1c42      	adds	r2, r0, #1
 8014e04:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8014e08:	f001 ff1c 	bl	8016c44 <uxr_object_id>
 8014e0c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014e10:	4639      	mov	r1, r7
 8014e12:	6160      	str	r0, [r4, #20]
 8014e14:	691e      	ldr	r6, [r3, #16]
 8014e16:	4650      	mov	r0, sl
 8014e18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014e1c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8014e20:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8014e24:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8014e28:	f001 f808 	bl	8015e3c <convert_qos_profile>
 8014e2c:	9503      	str	r5, [sp, #12]
 8014e2e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014e32:	9001      	str	r0, [sp, #4]
 8014e34:	4630      	mov	r0, r6
 8014e36:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014e3a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014e3e:	9300      	str	r3, [sp, #0]
 8014e40:	6839      	ldr	r1, [r7, #0]
 8014e42:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8014e46:	f001 fd17 	bl	8016878 <uxr_buffer_create_datawriter_bin>
 8014e4a:	4602      	mov	r2, r0
 8014e4c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014e50:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014e54:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014e58:	f000 ffd4 	bl	8015e04 <run_xrce_session>
 8014e5c:	b970      	cbnz	r0, 8014e7c <rmw_create_publisher+0x1b4>
 8014e5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014e60:	b108      	cbz	r0, 8014e66 <rmw_create_publisher+0x19e>
 8014e62:	f000 fec1 	bl	8015be8 <rmw_uxrce_fini_topic_memory>
 8014e66:	4640      	mov	r0, r8
 8014e68:	f04f 0800 	mov.w	r8, #0
 8014e6c:	f000 fe64 	bl	8015b38 <rmw_uxrce_fini_publisher_memory>
 8014e70:	4640      	mov	r0, r8
 8014e72:	b007      	add	sp, #28
 8014e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e78:	f04f 0800 	mov.w	r8, #0
 8014e7c:	4640      	mov	r0, r8
 8014e7e:	b007      	add	sp, #28
 8014e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e84:	20016d8c 	.word	0x20016d8c
 8014e88:	08024214 	.word	0x08024214
 8014e8c:	080234cc 	.word	0x080234cc

08014e90 <rmw_publisher_get_actual_qos>:
 8014e90:	b178      	cbz	r0, 8014eb2 <rmw_publisher_get_actual_qos+0x22>
 8014e92:	b510      	push	{r4, lr}
 8014e94:	fab1 f481 	clz	r4, r1
 8014e98:	0964      	lsrs	r4, r4, #5
 8014e9a:	b141      	cbz	r1, 8014eae <rmw_publisher_get_actual_qos+0x1e>
 8014e9c:	6843      	ldr	r3, [r0, #4]
 8014e9e:	2250      	movs	r2, #80	; 0x50
 8014ea0:	4608      	mov	r0, r1
 8014ea2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8014ea6:	f00a ff4a 	bl	801fd3e <memcpy>
 8014eaa:	4620      	mov	r0, r4
 8014eac:	bd10      	pop	{r4, pc}
 8014eae:	200b      	movs	r0, #11
 8014eb0:	bd10      	pop	{r4, pc}
 8014eb2:	200b      	movs	r0, #11
 8014eb4:	4770      	bx	lr
 8014eb6:	bf00      	nop

08014eb8 <rmw_destroy_publisher>:
 8014eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ebc:	b128      	cbz	r0, 8014eca <rmw_destroy_publisher+0x12>
 8014ebe:	4604      	mov	r4, r0
 8014ec0:	6800      	ldr	r0, [r0, #0]
 8014ec2:	460d      	mov	r5, r1
 8014ec4:	f001 f8b0 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 8014ec8:	b918      	cbnz	r0, 8014ed2 <rmw_destroy_publisher+0x1a>
 8014eca:	2401      	movs	r4, #1
 8014ecc:	4620      	mov	r0, r4
 8014ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ed2:	6863      	ldr	r3, [r4, #4]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d0f8      	beq.n	8014eca <rmw_destroy_publisher+0x12>
 8014ed8:	fab5 f485 	clz	r4, r5
 8014edc:	0964      	lsrs	r4, r4, #5
 8014ede:	2d00      	cmp	r5, #0
 8014ee0:	d0f3      	beq.n	8014eca <rmw_destroy_publisher+0x12>
 8014ee2:	6828      	ldr	r0, [r5, #0]
 8014ee4:	f001 f8a0 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 8014ee8:	2800      	cmp	r0, #0
 8014eea:	d0ee      	beq.n	8014eca <rmw_destroy_publisher+0x12>
 8014eec:	686e      	ldr	r6, [r5, #4]
 8014eee:	2e00      	cmp	r6, #0
 8014ef0:	d0eb      	beq.n	8014eca <rmw_destroy_publisher+0x12>
 8014ef2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8014ef4:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8014ef8:	f008 f84e 	bl	801cf98 <destroy_topic>
 8014efc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014f00:	6972      	ldr	r2, [r6, #20]
 8014f02:	6918      	ldr	r0, [r3, #16]
 8014f04:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014f08:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014f0c:	6819      	ldr	r1, [r3, #0]
 8014f0e:	f001 fb9f 	bl	8016650 <uxr_buffer_delete_entity>
 8014f12:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014f16:	4680      	mov	r8, r0
 8014f18:	6932      	ldr	r2, [r6, #16]
 8014f1a:	6918      	ldr	r0, [r3, #16]
 8014f1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014f20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014f24:	6819      	ldr	r1, [r3, #0]
 8014f26:	f001 fb93 	bl	8016650 <uxr_buffer_delete_entity>
 8014f2a:	4606      	mov	r6, r0
 8014f2c:	6938      	ldr	r0, [r7, #16]
 8014f2e:	4642      	mov	r2, r8
 8014f30:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014f34:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014f38:	f000 ff64 	bl	8015e04 <run_xrce_session>
 8014f3c:	693f      	ldr	r7, [r7, #16]
 8014f3e:	4632      	mov	r2, r6
 8014f40:	4606      	mov	r6, r0
 8014f42:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8014f46:	4638      	mov	r0, r7
 8014f48:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8014f4c:	f000 ff5a 	bl	8015e04 <run_xrce_session>
 8014f50:	b126      	cbz	r6, 8014f5c <rmw_destroy_publisher+0xa4>
 8014f52:	b118      	cbz	r0, 8014f5c <rmw_destroy_publisher+0xa4>
 8014f54:	4628      	mov	r0, r5
 8014f56:	f000 fdef 	bl	8015b38 <rmw_uxrce_fini_publisher_memory>
 8014f5a:	e7b7      	b.n	8014ecc <rmw_destroy_publisher+0x14>
 8014f5c:	2402      	movs	r4, #2
 8014f5e:	e7f9      	b.n	8014f54 <rmw_destroy_publisher+0x9c>

08014f60 <rmw_send_request>:
 8014f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f64:	4604      	mov	r4, r0
 8014f66:	6800      	ldr	r0, [r0, #0]
 8014f68:	b08b      	sub	sp, #44	; 0x2c
 8014f6a:	460e      	mov	r6, r1
 8014f6c:	4615      	mov	r5, r2
 8014f6e:	b128      	cbz	r0, 8014f7c <rmw_send_request+0x1c>
 8014f70:	4b21      	ldr	r3, [pc, #132]	; (8014ff8 <rmw_send_request+0x98>)
 8014f72:	6819      	ldr	r1, [r3, #0]
 8014f74:	f7eb f964 	bl	8000240 <strcmp>
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d139      	bne.n	8014ff0 <rmw_send_request+0x90>
 8014f7c:	6864      	ldr	r4, [r4, #4]
 8014f7e:	2700      	movs	r7, #0
 8014f80:	6963      	ldr	r3, [r4, #20]
 8014f82:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8014f86:	689b      	ldr	r3, [r3, #8]
 8014f88:	4798      	blx	r3
 8014f8a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014f8e:	4630      	mov	r0, r6
 8014f90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f94:	4798      	blx	r3
 8014f96:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014f9a:	9000      	str	r0, [sp, #0]
 8014f9c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8014fa0:	6922      	ldr	r2, [r4, #16]
 8014fa2:	ab02      	add	r3, sp, #8
 8014fa4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8014fa6:	f003 ff01 	bl	8018dac <uxr_prepare_output_stream>
 8014faa:	e9c5 0700 	strd	r0, r7, [r5]
 8014fae:	b198      	cbz	r0, 8014fd8 <rmw_send_request+0x78>
 8014fb0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014fb4:	a902      	add	r1, sp, #8
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	4798      	blx	r3
 8014fba:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8014fbe:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014fc2:	2b01      	cmp	r3, #1
 8014fc4:	d00c      	beq.n	8014fe0 <rmw_send_request+0x80>
 8014fc6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8014fc8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014fcc:	f002 fc74 	bl	80178b8 <uxr_run_session_until_confirm_delivery>
 8014fd0:	4638      	mov	r0, r7
 8014fd2:	b00b      	add	sp, #44	; 0x2c
 8014fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fd8:	2001      	movs	r0, #1
 8014fda:	b00b      	add	sp, #44	; 0x2c
 8014fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fe0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014fe4:	f002 f8ae 	bl	8017144 <uxr_flash_output_streams>
 8014fe8:	4638      	mov	r0, r7
 8014fea:	b00b      	add	sp, #44	; 0x2c
 8014fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ff0:	200c      	movs	r0, #12
 8014ff2:	b00b      	add	sp, #44	; 0x2c
 8014ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ff8:	08024874 	.word	0x08024874

08014ffc <rmw_take_request>:
 8014ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015000:	4605      	mov	r5, r0
 8015002:	6800      	ldr	r0, [r0, #0]
 8015004:	b089      	sub	sp, #36	; 0x24
 8015006:	460c      	mov	r4, r1
 8015008:	4690      	mov	r8, r2
 801500a:	461e      	mov	r6, r3
 801500c:	b128      	cbz	r0, 801501a <rmw_take_request+0x1e>
 801500e:	4b28      	ldr	r3, [pc, #160]	; (80150b0 <rmw_take_request+0xb4>)
 8015010:	6819      	ldr	r1, [r3, #0]
 8015012:	f7eb f915 	bl	8000240 <strcmp>
 8015016:	2800      	cmp	r0, #0
 8015018:	d146      	bne.n	80150a8 <rmw_take_request+0xac>
 801501a:	b10e      	cbz	r6, 8015020 <rmw_take_request+0x24>
 801501c:	2300      	movs	r3, #0
 801501e:	7033      	strb	r3, [r6, #0]
 8015020:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015024:	f000 fe70 	bl	8015d08 <rmw_uxrce_clean_expired_static_input_buffer>
 8015028:	4648      	mov	r0, r9
 801502a:	f000 fe43 	bl	8015cb4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801502e:	4607      	mov	r7, r0
 8015030:	b3b0      	cbz	r0, 80150a0 <rmw_take_request+0xa4>
 8015032:	6885      	ldr	r5, [r0, #8]
 8015034:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8015038:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 801503c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8015040:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8015044:	7423      	strb	r3, [r4, #16]
 8015046:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801504a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801504e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8015052:	74e3      	strb	r3, [r4, #19]
 8015054:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8015058:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801505c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8015060:	6161      	str	r1, [r4, #20]
 8015062:	61a2      	str	r2, [r4, #24]
 8015064:	61e3      	str	r3, [r4, #28]
 8015066:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801506a:	689b      	ldr	r3, [r3, #8]
 801506c:	4798      	blx	r3
 801506e:	6844      	ldr	r4, [r0, #4]
 8015070:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015074:	f105 0110 	add.w	r1, r5, #16
 8015078:	4668      	mov	r0, sp
 801507a:	f7fd f829 	bl	80120d0 <ucdr_init_buffer>
 801507e:	4641      	mov	r1, r8
 8015080:	68e3      	ldr	r3, [r4, #12]
 8015082:	4668      	mov	r0, sp
 8015084:	4798      	blx	r3
 8015086:	4639      	mov	r1, r7
 8015088:	4604      	mov	r4, r0
 801508a:	480a      	ldr	r0, [pc, #40]	; (80150b4 <rmw_take_request+0xb8>)
 801508c:	f007 feac 	bl	801cde8 <put_memory>
 8015090:	b106      	cbz	r6, 8015094 <rmw_take_request+0x98>
 8015092:	7034      	strb	r4, [r6, #0]
 8015094:	f084 0001 	eor.w	r0, r4, #1
 8015098:	b2c0      	uxtb	r0, r0
 801509a:	b009      	add	sp, #36	; 0x24
 801509c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150a0:	2001      	movs	r0, #1
 80150a2:	b009      	add	sp, #36	; 0x24
 80150a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150a8:	200c      	movs	r0, #12
 80150aa:	b009      	add	sp, #36	; 0x24
 80150ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150b0:	08024874 	.word	0x08024874
 80150b4:	20016dbc 	.word	0x20016dbc

080150b8 <rmw_send_response>:
 80150b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ba:	4605      	mov	r5, r0
 80150bc:	6800      	ldr	r0, [r0, #0]
 80150be:	b091      	sub	sp, #68	; 0x44
 80150c0:	460c      	mov	r4, r1
 80150c2:	4616      	mov	r6, r2
 80150c4:	b128      	cbz	r0, 80150d2 <rmw_send_response+0x1a>
 80150c6:	4b29      	ldr	r3, [pc, #164]	; (801516c <rmw_send_response+0xb4>)
 80150c8:	6819      	ldr	r1, [r3, #0]
 80150ca:	f7eb f8b9 	bl	8000240 <strcmp>
 80150ce:	2800      	cmp	r0, #0
 80150d0:	d141      	bne.n	8015156 <rmw_send_response+0x9e>
 80150d2:	686d      	ldr	r5, [r5, #4]
 80150d4:	68a1      	ldr	r1, [r4, #8]
 80150d6:	6860      	ldr	r0, [r4, #4]
 80150d8:	6faf      	ldr	r7, [r5, #120]	; 0x78
 80150da:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80150de:	9307      	str	r3, [sp, #28]
 80150e0:	4623      	mov	r3, r4
 80150e2:	9206      	str	r2, [sp, #24]
 80150e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150e8:	789b      	ldrb	r3, [r3, #2]
 80150ea:	f88d 2017 	strb.w	r2, [sp, #23]
 80150ee:	f88d 3016 	strb.w	r3, [sp, #22]
 80150f2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80150f6:	68e2      	ldr	r2, [r4, #12]
 80150f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80150fc:	ab02      	add	r3, sp, #8
 80150fe:	696c      	ldr	r4, [r5, #20]
 8015100:	c307      	stmia	r3!, {r0, r1, r2}
 8015102:	68e3      	ldr	r3, [r4, #12]
 8015104:	4798      	blx	r3
 8015106:	6844      	ldr	r4, [r0, #4]
 8015108:	4630      	mov	r0, r6
 801510a:	6923      	ldr	r3, [r4, #16]
 801510c:	4798      	blx	r3
 801510e:	f100 0318 	add.w	r3, r0, #24
 8015112:	6938      	ldr	r0, [r7, #16]
 8015114:	9300      	str	r3, [sp, #0]
 8015116:	ab08      	add	r3, sp, #32
 8015118:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801511c:	692a      	ldr	r2, [r5, #16]
 801511e:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8015120:	f003 fe44 	bl	8018dac <uxr_prepare_output_stream>
 8015124:	b910      	cbnz	r0, 801512c <rmw_send_response+0x74>
 8015126:	2001      	movs	r0, #1
 8015128:	b011      	add	sp, #68	; 0x44
 801512a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801512c:	a902      	add	r1, sp, #8
 801512e:	a808      	add	r0, sp, #32
 8015130:	f004 ffa8 	bl	801a084 <uxr_serialize_SampleIdentity>
 8015134:	68a3      	ldr	r3, [r4, #8]
 8015136:	a908      	add	r1, sp, #32
 8015138:	4630      	mov	r0, r6
 801513a:	4798      	blx	r3
 801513c:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8015140:	6938      	ldr	r0, [r7, #16]
 8015142:	2b01      	cmp	r3, #1
 8015144:	d00a      	beq.n	801515c <rmw_send_response+0xa4>
 8015146:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015148:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801514c:	f002 fbb4 	bl	80178b8 <uxr_run_session_until_confirm_delivery>
 8015150:	2000      	movs	r0, #0
 8015152:	b011      	add	sp, #68	; 0x44
 8015154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015156:	200c      	movs	r0, #12
 8015158:	b011      	add	sp, #68	; 0x44
 801515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801515c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015160:	f001 fff0 	bl	8017144 <uxr_flash_output_streams>
 8015164:	2000      	movs	r0, #0
 8015166:	b011      	add	sp, #68	; 0x44
 8015168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801516a:	bf00      	nop
 801516c:	08024874 	.word	0x08024874

08015170 <rmw_take_response>:
 8015170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015174:	4604      	mov	r4, r0
 8015176:	6800      	ldr	r0, [r0, #0]
 8015178:	b088      	sub	sp, #32
 801517a:	460f      	mov	r7, r1
 801517c:	4690      	mov	r8, r2
 801517e:	461d      	mov	r5, r3
 8015180:	b120      	cbz	r0, 801518c <rmw_take_response+0x1c>
 8015182:	4b1d      	ldr	r3, [pc, #116]	; (80151f8 <rmw_take_response+0x88>)
 8015184:	6819      	ldr	r1, [r3, #0]
 8015186:	f7eb f85b 	bl	8000240 <strcmp>
 801518a:	bb68      	cbnz	r0, 80151e8 <rmw_take_response+0x78>
 801518c:	b10d      	cbz	r5, 8015192 <rmw_take_response+0x22>
 801518e:	2300      	movs	r3, #0
 8015190:	702b      	strb	r3, [r5, #0]
 8015192:	6864      	ldr	r4, [r4, #4]
 8015194:	f000 fdb8 	bl	8015d08 <rmw_uxrce_clean_expired_static_input_buffer>
 8015198:	4620      	mov	r0, r4
 801519a:	f000 fd8b 	bl	8015cb4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801519e:	4606      	mov	r6, r0
 80151a0:	b330      	cbz	r0, 80151f0 <rmw_take_response+0x80>
 80151a2:	6963      	ldr	r3, [r4, #20]
 80151a4:	6884      	ldr	r4, [r0, #8]
 80151a6:	68db      	ldr	r3, [r3, #12]
 80151a8:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80151ac:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80151b0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80151b4:	4798      	blx	r3
 80151b6:	6847      	ldr	r7, [r0, #4]
 80151b8:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80151bc:	f104 0110 	add.w	r1, r4, #16
 80151c0:	4668      	mov	r0, sp
 80151c2:	f7fc ff85 	bl	80120d0 <ucdr_init_buffer>
 80151c6:	4641      	mov	r1, r8
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	4668      	mov	r0, sp
 80151cc:	4798      	blx	r3
 80151ce:	4631      	mov	r1, r6
 80151d0:	4604      	mov	r4, r0
 80151d2:	480a      	ldr	r0, [pc, #40]	; (80151fc <rmw_take_response+0x8c>)
 80151d4:	f007 fe08 	bl	801cde8 <put_memory>
 80151d8:	b105      	cbz	r5, 80151dc <rmw_take_response+0x6c>
 80151da:	702c      	strb	r4, [r5, #0]
 80151dc:	f084 0001 	eor.w	r0, r4, #1
 80151e0:	b2c0      	uxtb	r0, r0
 80151e2:	b008      	add	sp, #32
 80151e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e8:	200c      	movs	r0, #12
 80151ea:	b008      	add	sp, #32
 80151ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f0:	2001      	movs	r0, #1
 80151f2:	b008      	add	sp, #32
 80151f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f8:	08024874 	.word	0x08024874
 80151fc:	20016dbc 	.word	0x20016dbc

08015200 <rmw_create_service>:
 8015200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015204:	b091      	sub	sp, #68	; 0x44
 8015206:	2900      	cmp	r1, #0
 8015208:	f000 80bb 	beq.w	8015382 <rmw_create_service+0x182>
 801520c:	4606      	mov	r6, r0
 801520e:	2800      	cmp	r0, #0
 8015210:	f000 80b7 	beq.w	8015382 <rmw_create_service+0x182>
 8015214:	4614      	mov	r4, r2
 8015216:	6800      	ldr	r0, [r0, #0]
 8015218:	4689      	mov	r9, r1
 801521a:	461d      	mov	r5, r3
 801521c:	f000 ff04 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 8015220:	2c00      	cmp	r4, #0
 8015222:	f000 80ae 	beq.w	8015382 <rmw_create_service+0x182>
 8015226:	f080 0001 	eor.w	r0, r0, #1
 801522a:	b2c0      	uxtb	r0, r0
 801522c:	2800      	cmp	r0, #0
 801522e:	f040 80a8 	bne.w	8015382 <rmw_create_service+0x182>
 8015232:	7823      	ldrb	r3, [r4, #0]
 8015234:	2b00      	cmp	r3, #0
 8015236:	f000 80a4 	beq.w	8015382 <rmw_create_service+0x182>
 801523a:	2d00      	cmp	r5, #0
 801523c:	f000 80a1 	beq.w	8015382 <rmw_create_service+0x182>
 8015240:	4856      	ldr	r0, [pc, #344]	; (801539c <rmw_create_service+0x19c>)
 8015242:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8015246:	f007 fdbf 	bl	801cdc8 <get_memory>
 801524a:	4606      	mov	r6, r0
 801524c:	2800      	cmp	r0, #0
 801524e:	f000 8099 	beq.w	8015384 <rmw_create_service+0x184>
 8015252:	6887      	ldr	r7, [r0, #8]
 8015254:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8015258:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801525c:	f007 fe1c 	bl	801ce98 <rmw_get_implementation_identifier>
 8015260:	67f8      	str	r0, [r7, #124]	; 0x7c
 8015262:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8015266:	4620      	mov	r0, r4
 8015268:	f7eb f84a 	bl	8000300 <strlen>
 801526c:	1c42      	adds	r2, r0, #1
 801526e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8015272:	2a3c      	cmp	r2, #60	; 0x3c
 8015274:	f200 808a 	bhi.w	801538c <rmw_create_service+0x18c>
 8015278:	4621      	mov	r1, r4
 801527a:	4650      	mov	r0, sl
 801527c:	f00a fd5f 	bl	801fd3e <memcpy>
 8015280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015284:	4629      	mov	r1, r5
 8015286:	2250      	movs	r2, #80	; 0x50
 8015288:	f107 0020 	add.w	r0, r7, #32
 801528c:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8015290:	677b      	str	r3, [r7, #116]	; 0x74
 8015292:	f00a fd54 	bl	801fd3e <memcpy>
 8015296:	4648      	mov	r0, r9
 8015298:	4941      	ldr	r1, [pc, #260]	; (80153a0 <rmw_create_service+0x1a0>)
 801529a:	f000 fedf 	bl	801605c <get_service_typesupport_handle>
 801529e:	2800      	cmp	r0, #0
 80152a0:	d074      	beq.n	801538c <rmw_create_service+0x18c>
 80152a2:	6843      	ldr	r3, [r0, #4]
 80152a4:	617b      	str	r3, [r7, #20]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d070      	beq.n	801538c <rmw_create_service+0x18c>
 80152aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80152ae:	2108      	movs	r1, #8
 80152b0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80153a8 <rmw_create_service+0x1a8>
 80152b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80152b8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80153ac <rmw_create_service+0x1ac>
 80152bc:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 80152c0:	1c42      	adds	r2, r0, #1
 80152c2:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 80152c6:	f001 fcbd 	bl	8016c44 <uxr_object_id>
 80152ca:	2364      	movs	r3, #100	; 0x64
 80152cc:	6138      	str	r0, [r7, #16]
 80152ce:	4652      	mov	r2, sl
 80152d0:	4649      	mov	r1, r9
 80152d2:	6978      	ldr	r0, [r7, #20]
 80152d4:	f000 fdfc 	bl	8015ed0 <generate_service_types>
 80152d8:	2800      	cmp	r0, #0
 80152da:	d057      	beq.n	801538c <rmw_create_service+0x18c>
 80152dc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80153b0 <rmw_create_service+0x1b0>
 80152e0:	233c      	movs	r3, #60	; 0x3c
 80152e2:	4a30      	ldr	r2, [pc, #192]	; (80153a4 <rmw_create_service+0x1a4>)
 80152e4:	4620      	mov	r0, r4
 80152e6:	4659      	mov	r1, fp
 80152e8:	f000 fdc0 	bl	8015e6c <generate_service_topics>
 80152ec:	2800      	cmp	r0, #0
 80152ee:	d04d      	beq.n	801538c <rmw_create_service+0x18c>
 80152f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80152f4:	a80c      	add	r0, sp, #48	; 0x30
 80152f6:	4629      	mov	r1, r5
 80152f8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80152fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015300:	f000 fd9c 	bl	8015e3c <convert_qos_profile>
 8015304:	4a27      	ldr	r2, [pc, #156]	; (80153a4 <rmw_create_service+0x1a4>)
 8015306:	a80c      	add	r0, sp, #48	; 0x30
 8015308:	9400      	str	r4, [sp, #0]
 801530a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801530c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015310:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8015314:	c803      	ldmia	r0, {r0, r1}
 8015316:	9a08      	ldr	r2, [sp, #32]
 8015318:	9005      	str	r0, [sp, #20]
 801531a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801531e:	2306      	movs	r3, #6
 8015320:	f8ad 1018 	strh.w	r1, [sp, #24]
 8015324:	9307      	str	r3, [sp, #28]
 8015326:	6811      	ldr	r1, [r2, #0]
 8015328:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801532c:	693a      	ldr	r2, [r7, #16]
 801532e:	f001 fb91 	bl	8016a54 <uxr_buffer_create_replier_bin>
 8015332:	4602      	mov	r2, r0
 8015334:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015338:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801533c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015340:	f000 fd60 	bl	8015e04 <run_xrce_session>
 8015344:	b310      	cbz	r0, 801538c <rmw_create_service+0x18c>
 8015346:	7a2b      	ldrb	r3, [r5, #8]
 8015348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801534c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015350:	2b02      	cmp	r3, #2
 8015352:	920e      	str	r2, [sp, #56]	; 0x38
 8015354:	f04f 0200 	mov.w	r2, #0
 8015358:	920f      	str	r2, [sp, #60]	; 0x3c
 801535a:	bf0c      	ite	eq
 801535c:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8015360:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8015364:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015368:	930b      	str	r3, [sp, #44]	; 0x2c
 801536a:	ab0e      	add	r3, sp, #56	; 0x38
 801536c:	673a      	str	r2, [r7, #112]	; 0x70
 801536e:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8015372:	9300      	str	r3, [sp, #0]
 8015374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015376:	6811      	ldr	r1, [r2, #0]
 8015378:	693a      	ldr	r2, [r7, #16]
 801537a:	f001 fc93 	bl	8016ca4 <uxr_buffer_request_data>
 801537e:	8338      	strh	r0, [r7, #24]
 8015380:	e000      	b.n	8015384 <rmw_create_service+0x184>
 8015382:	2600      	movs	r6, #0
 8015384:	4630      	mov	r0, r6
 8015386:	b011      	add	sp, #68	; 0x44
 8015388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801538c:	4630      	mov	r0, r6
 801538e:	2600      	movs	r6, #0
 8015390:	f000 fbfe 	bl	8015b90 <rmw_uxrce_fini_service_memory>
 8015394:	4630      	mov	r0, r6
 8015396:	b011      	add	sp, #68	; 0x44
 8015398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801539c:	20016d9c 	.word	0x20016d9c
 80153a0:	080234cc 	.word	0x080234cc
 80153a4:	2001240c 	.word	0x2001240c
 80153a8:	20012448 	.word	0x20012448
 80153ac:	200123a8 	.word	0x200123a8
 80153b0:	2001236c 	.word	0x2001236c

080153b4 <rmw_destroy_service>:
 80153b4:	b570      	push	{r4, r5, r6, lr}
 80153b6:	b128      	cbz	r0, 80153c4 <rmw_destroy_service+0x10>
 80153b8:	4604      	mov	r4, r0
 80153ba:	6800      	ldr	r0, [r0, #0]
 80153bc:	460d      	mov	r5, r1
 80153be:	f000 fe33 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 80153c2:	b910      	cbnz	r0, 80153ca <rmw_destroy_service+0x16>
 80153c4:	2401      	movs	r4, #1
 80153c6:	4620      	mov	r0, r4
 80153c8:	bd70      	pop	{r4, r5, r6, pc}
 80153ca:	6863      	ldr	r3, [r4, #4]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d0f9      	beq.n	80153c4 <rmw_destroy_service+0x10>
 80153d0:	2d00      	cmp	r5, #0
 80153d2:	d0f7      	beq.n	80153c4 <rmw_destroy_service+0x10>
 80153d4:	6828      	ldr	r0, [r5, #0]
 80153d6:	f000 fe27 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 80153da:	2800      	cmp	r0, #0
 80153dc:	d0f2      	beq.n	80153c4 <rmw_destroy_service+0x10>
 80153de:	686e      	ldr	r6, [r5, #4]
 80153e0:	2e00      	cmp	r6, #0
 80153e2:	d0ef      	beq.n	80153c4 <rmw_destroy_service+0x10>
 80153e4:	6864      	ldr	r4, [r4, #4]
 80153e6:	6932      	ldr	r2, [r6, #16]
 80153e8:	6920      	ldr	r0, [r4, #16]
 80153ea:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80153ee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80153f2:	6819      	ldr	r1, [r3, #0]
 80153f4:	f001 fc90 	bl	8016d18 <uxr_buffer_cancel_data>
 80153f8:	4602      	mov	r2, r0
 80153fa:	6920      	ldr	r0, [r4, #16]
 80153fc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015400:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015404:	f000 fcfe 	bl	8015e04 <run_xrce_session>
 8015408:	6920      	ldr	r0, [r4, #16]
 801540a:	6932      	ldr	r2, [r6, #16]
 801540c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015410:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015414:	6819      	ldr	r1, [r3, #0]
 8015416:	f001 f91b 	bl	8016650 <uxr_buffer_delete_entity>
 801541a:	4602      	mov	r2, r0
 801541c:	6920      	ldr	r0, [r4, #16]
 801541e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015422:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015426:	f000 fced 	bl	8015e04 <run_xrce_session>
 801542a:	4603      	mov	r3, r0
 801542c:	4628      	mov	r0, r5
 801542e:	2b00      	cmp	r3, #0
 8015430:	bf14      	ite	ne
 8015432:	2400      	movne	r4, #0
 8015434:	2402      	moveq	r4, #2
 8015436:	f000 fbab 	bl	8015b90 <rmw_uxrce_fini_service_memory>
 801543a:	e7c4      	b.n	80153c6 <rmw_destroy_service+0x12>

0801543c <rmw_service_response_publisher_get_actual_qos>:
 801543c:	b181      	cbz	r1, 8015460 <rmw_service_response_publisher_get_actual_qos+0x24>
 801543e:	4603      	mov	r3, r0
 8015440:	b510      	push	{r4, lr}
 8015442:	fab0 f480 	clz	r4, r0
 8015446:	0964      	lsrs	r4, r4, #5
 8015448:	b140      	cbz	r0, 801545c <rmw_service_response_publisher_get_actual_qos+0x20>
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	4608      	mov	r0, r1
 801544e:	2250      	movs	r2, #80	; 0x50
 8015450:	f103 0120 	add.w	r1, r3, #32
 8015454:	f00a fc73 	bl	801fd3e <memcpy>
 8015458:	4620      	mov	r0, r4
 801545a:	bd10      	pop	{r4, pc}
 801545c:	200b      	movs	r0, #11
 801545e:	bd10      	pop	{r4, pc}
 8015460:	200b      	movs	r0, #11
 8015462:	4770      	bx	lr

08015464 <rmw_service_request_subscription_get_actual_qos>:
 8015464:	b178      	cbz	r0, 8015486 <rmw_service_request_subscription_get_actual_qos+0x22>
 8015466:	b510      	push	{r4, lr}
 8015468:	fab1 f481 	clz	r4, r1
 801546c:	0964      	lsrs	r4, r4, #5
 801546e:	b141      	cbz	r1, 8015482 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8015470:	6843      	ldr	r3, [r0, #4]
 8015472:	2250      	movs	r2, #80	; 0x50
 8015474:	4608      	mov	r0, r1
 8015476:	f103 0120 	add.w	r1, r3, #32
 801547a:	f00a fc60 	bl	801fd3e <memcpy>
 801547e:	4620      	mov	r0, r4
 8015480:	bd10      	pop	{r4, pc}
 8015482:	200b      	movs	r0, #11
 8015484:	bd10      	pop	{r4, pc}
 8015486:	200b      	movs	r0, #11
 8015488:	4770      	bx	lr
 801548a:	bf00      	nop

0801548c <rmw_create_subscription>:
 801548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015490:	b08d      	sub	sp, #52	; 0x34
 8015492:	2900      	cmp	r1, #0
 8015494:	f000 80d8 	beq.w	8015648 <rmw_create_subscription+0x1bc>
 8015498:	4604      	mov	r4, r0
 801549a:	2800      	cmp	r0, #0
 801549c:	f000 80d4 	beq.w	8015648 <rmw_create_subscription+0x1bc>
 80154a0:	6800      	ldr	r0, [r0, #0]
 80154a2:	460e      	mov	r6, r1
 80154a4:	4615      	mov	r5, r2
 80154a6:	461f      	mov	r7, r3
 80154a8:	f000 fdbe 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 80154ac:	f080 0001 	eor.w	r0, r0, #1
 80154b0:	b2c0      	uxtb	r0, r0
 80154b2:	2800      	cmp	r0, #0
 80154b4:	f040 80c8 	bne.w	8015648 <rmw_create_subscription+0x1bc>
 80154b8:	2d00      	cmp	r5, #0
 80154ba:	f000 80c5 	beq.w	8015648 <rmw_create_subscription+0x1bc>
 80154be:	782b      	ldrb	r3, [r5, #0]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	f000 80c1 	beq.w	8015648 <rmw_create_subscription+0x1bc>
 80154c6:	2f00      	cmp	r7, #0
 80154c8:	f000 80be 	beq.w	8015648 <rmw_create_subscription+0x1bc>
 80154cc:	4867      	ldr	r0, [pc, #412]	; (801566c <rmw_create_subscription+0x1e0>)
 80154ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80154d2:	f007 fc79 	bl	801cdc8 <get_memory>
 80154d6:	4604      	mov	r4, r0
 80154d8:	2800      	cmp	r0, #0
 80154da:	f000 80b6 	beq.w	801564a <rmw_create_subscription+0x1be>
 80154de:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80154e2:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 80154e6:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 80154ea:	f007 fcd5 	bl	801ce98 <rmw_get_implementation_identifier>
 80154ee:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 80154f2:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 80154f6:	4628      	mov	r0, r5
 80154f8:	f7ea ff02 	bl	8000300 <strlen>
 80154fc:	3001      	adds	r0, #1
 80154fe:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 8015502:	283c      	cmp	r0, #60	; 0x3c
 8015504:	f200 80a5 	bhi.w	8015652 <rmw_create_subscription+0x1c6>
 8015508:	462b      	mov	r3, r5
 801550a:	4a59      	ldr	r2, [pc, #356]	; (8015670 <rmw_create_subscription+0x1e4>)
 801550c:	213c      	movs	r1, #60	; 0x3c
 801550e:	4650      	mov	r0, sl
 8015510:	f00a f9b8 	bl	801f884 <sniprintf>
 8015514:	4639      	mov	r1, r7
 8015516:	2250      	movs	r2, #80	; 0x50
 8015518:	f108 0028 	add.w	r0, r8, #40	; 0x28
 801551c:	f8c8 9020 	str.w	r9, [r8, #32]
 8015520:	f00a fc0d 	bl	801fd3e <memcpy>
 8015524:	4630      	mov	r0, r6
 8015526:	4953      	ldr	r1, [pc, #332]	; (8015674 <rmw_create_subscription+0x1e8>)
 8015528:	f000 fd8c 	bl	8016044 <get_message_typesupport_handle>
 801552c:	2800      	cmp	r0, #0
 801552e:	f000 8090 	beq.w	8015652 <rmw_create_subscription+0x1c6>
 8015532:	6842      	ldr	r2, [r0, #4]
 8015534:	f8c8 2018 	str.w	r2, [r8, #24]
 8015538:	2a00      	cmp	r2, #0
 801553a:	f000 808a 	beq.w	8015652 <rmw_create_subscription+0x1c6>
 801553e:	4629      	mov	r1, r5
 8015540:	463b      	mov	r3, r7
 8015542:	4648      	mov	r0, r9
 8015544:	f007 fcd8 	bl	801cef8 <create_topic>
 8015548:	f8c8 001c 	str.w	r0, [r8, #28]
 801554c:	2800      	cmp	r0, #0
 801554e:	f000 8085 	beq.w	801565c <rmw_create_subscription+0x1d0>
 8015552:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015556:	2104      	movs	r1, #4
 8015558:	2506      	movs	r5, #6
 801555a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801555e:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8015562:	1c42      	adds	r2, r0, #1
 8015564:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8015568:	f001 fb6c 	bl	8016c44 <uxr_object_id>
 801556c:	f8c8 0010 	str.w	r0, [r8, #16]
 8015570:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015574:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8015578:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801557c:	9500      	str	r5, [sp, #0]
 801557e:	6819      	ldr	r1, [r3, #0]
 8015580:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015584:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015588:	f001 f946 	bl	8016818 <uxr_buffer_create_subscriber_bin>
 801558c:	4602      	mov	r2, r0
 801558e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015592:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015596:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801559a:	f000 fc33 	bl	8015e04 <run_xrce_session>
 801559e:	2800      	cmp	r0, #0
 80155a0:	d057      	beq.n	8015652 <rmw_create_subscription+0x1c6>
 80155a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80155a6:	4629      	mov	r1, r5
 80155a8:	ae08      	add	r6, sp, #32
 80155aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80155ae:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 80155b2:	1c42      	adds	r2, r0, #1
 80155b4:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 80155b8:	f001 fb44 	bl	8016c44 <uxr_object_id>
 80155bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80155c0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80155c4:	4639      	mov	r1, r7
 80155c6:	f8c8 0014 	str.w	r0, [r8, #20]
 80155ca:	4630      	mov	r0, r6
 80155cc:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 80155d0:	9305      	str	r3, [sp, #20]
 80155d2:	f000 fc33 	bl	8015e3c <convert_qos_profile>
 80155d6:	9503      	str	r5, [sp, #12]
 80155d8:	9b05      	ldr	r3, [sp, #20]
 80155da:	e896 0003 	ldmia.w	r6, {r0, r1}
 80155de:	9001      	str	r0, [sp, #4]
 80155e0:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80155e4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80155e8:	691b      	ldr	r3, [r3, #16]
 80155ea:	9300      	str	r3, [sp, #0]
 80155ec:	f8db 1000 	ldr.w	r1, [fp]
 80155f0:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 80155f4:	f001 f9b6 	bl	8016964 <uxr_buffer_create_datareader_bin>
 80155f8:	4602      	mov	r2, r0
 80155fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80155fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015602:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015606:	f000 fbfd 	bl	8015e04 <run_xrce_session>
 801560a:	b310      	cbz	r0, 8015652 <rmw_create_subscription+0x1c6>
 801560c:	7a3b      	ldrb	r3, [r7, #8]
 801560e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015612:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015616:	2b02      	cmp	r3, #2
 8015618:	920a      	str	r2, [sp, #40]	; 0x28
 801561a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801561e:	f04f 0200 	mov.w	r2, #0
 8015622:	bf08      	it	eq
 8015624:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8015628:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801562c:	bf18      	it	ne
 801562e:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 8015632:	920b      	str	r2, [sp, #44]	; 0x2c
 8015634:	9307      	str	r3, [sp, #28]
 8015636:	ab0a      	add	r3, sp, #40	; 0x28
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	9b07      	ldr	r3, [sp, #28]
 801563c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8015640:	6809      	ldr	r1, [r1, #0]
 8015642:	f001 fb2f 	bl	8016ca4 <uxr_buffer_request_data>
 8015646:	e000      	b.n	801564a <rmw_create_subscription+0x1be>
 8015648:	2400      	movs	r4, #0
 801564a:	4620      	mov	r0, r4
 801564c:	b00d      	add	sp, #52	; 0x34
 801564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015652:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8015656:	b108      	cbz	r0, 801565c <rmw_create_subscription+0x1d0>
 8015658:	f000 fac6 	bl	8015be8 <rmw_uxrce_fini_topic_memory>
 801565c:	4620      	mov	r0, r4
 801565e:	2400      	movs	r4, #0
 8015660:	f000 fa80 	bl	8015b64 <rmw_uxrce_fini_subscription_memory>
 8015664:	4620      	mov	r0, r4
 8015666:	b00d      	add	sp, #52	; 0x34
 8015668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801566c:	20016dcc 	.word	0x20016dcc
 8015670:	08024214 	.word	0x08024214
 8015674:	080234cc 	.word	0x080234cc

08015678 <rmw_subscription_get_actual_qos>:
 8015678:	b178      	cbz	r0, 801569a <rmw_subscription_get_actual_qos+0x22>
 801567a:	b510      	push	{r4, lr}
 801567c:	fab1 f481 	clz	r4, r1
 8015680:	0964      	lsrs	r4, r4, #5
 8015682:	b141      	cbz	r1, 8015696 <rmw_subscription_get_actual_qos+0x1e>
 8015684:	6843      	ldr	r3, [r0, #4]
 8015686:	2250      	movs	r2, #80	; 0x50
 8015688:	4608      	mov	r0, r1
 801568a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801568e:	f00a fb56 	bl	801fd3e <memcpy>
 8015692:	4620      	mov	r0, r4
 8015694:	bd10      	pop	{r4, pc}
 8015696:	200b      	movs	r0, #11
 8015698:	bd10      	pop	{r4, pc}
 801569a:	200b      	movs	r0, #11
 801569c:	4770      	bx	lr
 801569e:	bf00      	nop

080156a0 <rmw_destroy_subscription>:
 80156a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156a4:	b128      	cbz	r0, 80156b2 <rmw_destroy_subscription+0x12>
 80156a6:	4604      	mov	r4, r0
 80156a8:	6800      	ldr	r0, [r0, #0]
 80156aa:	460d      	mov	r5, r1
 80156ac:	f000 fcbc 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 80156b0:	b918      	cbnz	r0, 80156ba <rmw_destroy_subscription+0x1a>
 80156b2:	2401      	movs	r4, #1
 80156b4:	4620      	mov	r0, r4
 80156b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ba:	6863      	ldr	r3, [r4, #4]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d0f8      	beq.n	80156b2 <rmw_destroy_subscription+0x12>
 80156c0:	fab5 f485 	clz	r4, r5
 80156c4:	0964      	lsrs	r4, r4, #5
 80156c6:	2d00      	cmp	r5, #0
 80156c8:	d0f3      	beq.n	80156b2 <rmw_destroy_subscription+0x12>
 80156ca:	6828      	ldr	r0, [r5, #0]
 80156cc:	f000 fcac 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 80156d0:	2800      	cmp	r0, #0
 80156d2:	d0ee      	beq.n	80156b2 <rmw_destroy_subscription+0x12>
 80156d4:	686e      	ldr	r6, [r5, #4]
 80156d6:	2e00      	cmp	r6, #0
 80156d8:	d0eb      	beq.n	80156b2 <rmw_destroy_subscription+0x12>
 80156da:	6a37      	ldr	r7, [r6, #32]
 80156dc:	6972      	ldr	r2, [r6, #20]
 80156de:	6938      	ldr	r0, [r7, #16]
 80156e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80156e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80156e8:	6819      	ldr	r1, [r3, #0]
 80156ea:	f001 fb15 	bl	8016d18 <uxr_buffer_cancel_data>
 80156ee:	4602      	mov	r2, r0
 80156f0:	6938      	ldr	r0, [r7, #16]
 80156f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80156f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80156fa:	f000 fb83 	bl	8015e04 <run_xrce_session>
 80156fe:	69f0      	ldr	r0, [r6, #28]
 8015700:	f007 fc4a 	bl	801cf98 <destroy_topic>
 8015704:	6a33      	ldr	r3, [r6, #32]
 8015706:	6972      	ldr	r2, [r6, #20]
 8015708:	6918      	ldr	r0, [r3, #16]
 801570a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801570e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015712:	6819      	ldr	r1, [r3, #0]
 8015714:	f000 ff9c 	bl	8016650 <uxr_buffer_delete_entity>
 8015718:	6a33      	ldr	r3, [r6, #32]
 801571a:	4680      	mov	r8, r0
 801571c:	6932      	ldr	r2, [r6, #16]
 801571e:	6918      	ldr	r0, [r3, #16]
 8015720:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015724:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015728:	6819      	ldr	r1, [r3, #0]
 801572a:	f000 ff91 	bl	8016650 <uxr_buffer_delete_entity>
 801572e:	4606      	mov	r6, r0
 8015730:	6938      	ldr	r0, [r7, #16]
 8015732:	4642      	mov	r2, r8
 8015734:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015738:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801573c:	f000 fb62 	bl	8015e04 <run_xrce_session>
 8015740:	693f      	ldr	r7, [r7, #16]
 8015742:	4632      	mov	r2, r6
 8015744:	4606      	mov	r6, r0
 8015746:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801574a:	4638      	mov	r0, r7
 801574c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8015750:	f000 fb58 	bl	8015e04 <run_xrce_session>
 8015754:	b126      	cbz	r6, 8015760 <rmw_destroy_subscription+0xc0>
 8015756:	b118      	cbz	r0, 8015760 <rmw_destroy_subscription+0xc0>
 8015758:	4628      	mov	r0, r5
 801575a:	f000 fa03 	bl	8015b64 <rmw_uxrce_fini_subscription_memory>
 801575e:	e7a9      	b.n	80156b4 <rmw_destroy_subscription+0x14>
 8015760:	2402      	movs	r4, #2
 8015762:	e7f9      	b.n	8015758 <rmw_destroy_subscription+0xb8>

08015764 <rmw_take_with_info>:
 8015764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015766:	4604      	mov	r4, r0
 8015768:	6800      	ldr	r0, [r0, #0]
 801576a:	b089      	sub	sp, #36	; 0x24
 801576c:	460f      	mov	r7, r1
 801576e:	4615      	mov	r5, r2
 8015770:	b128      	cbz	r0, 801577e <rmw_take_with_info+0x1a>
 8015772:	4b24      	ldr	r3, [pc, #144]	; (8015804 <rmw_take_with_info+0xa0>)
 8015774:	6819      	ldr	r1, [r3, #0]
 8015776:	f7ea fd63 	bl	8000240 <strcmp>
 801577a:	2800      	cmp	r0, #0
 801577c:	d13e      	bne.n	80157fc <rmw_take_with_info+0x98>
 801577e:	b305      	cbz	r5, 80157c2 <rmw_take_with_info+0x5e>
 8015780:	2300      	movs	r3, #0
 8015782:	6864      	ldr	r4, [r4, #4]
 8015784:	702b      	strb	r3, [r5, #0]
 8015786:	f000 fabf 	bl	8015d08 <rmw_uxrce_clean_expired_static_input_buffer>
 801578a:	4620      	mov	r0, r4
 801578c:	f000 fa92 	bl	8015cb4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015790:	4606      	mov	r6, r0
 8015792:	b1f0      	cbz	r0, 80157d2 <rmw_take_with_info+0x6e>
 8015794:	6881      	ldr	r1, [r0, #8]
 8015796:	4668      	mov	r0, sp
 8015798:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801579c:	3110      	adds	r1, #16
 801579e:	f7fc fc97 	bl	80120d0 <ucdr_init_buffer>
 80157a2:	69a3      	ldr	r3, [r4, #24]
 80157a4:	4639      	mov	r1, r7
 80157a6:	4668      	mov	r0, sp
 80157a8:	68db      	ldr	r3, [r3, #12]
 80157aa:	4798      	blx	r3
 80157ac:	4604      	mov	r4, r0
 80157ae:	4631      	mov	r1, r6
 80157b0:	4815      	ldr	r0, [pc, #84]	; (8015808 <rmw_take_with_info+0xa4>)
 80157b2:	f007 fb19 	bl	801cde8 <put_memory>
 80157b6:	702c      	strb	r4, [r5, #0]
 80157b8:	f084 0001 	eor.w	r0, r4, #1
 80157bc:	b2c0      	uxtb	r0, r0
 80157be:	b009      	add	sp, #36	; 0x24
 80157c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157c2:	6864      	ldr	r4, [r4, #4]
 80157c4:	f000 faa0 	bl	8015d08 <rmw_uxrce_clean_expired_static_input_buffer>
 80157c8:	4620      	mov	r0, r4
 80157ca:	f000 fa73 	bl	8015cb4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80157ce:	4605      	mov	r5, r0
 80157d0:	b910      	cbnz	r0, 80157d8 <rmw_take_with_info+0x74>
 80157d2:	2001      	movs	r0, #1
 80157d4:	b009      	add	sp, #36	; 0x24
 80157d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157d8:	68a9      	ldr	r1, [r5, #8]
 80157da:	4668      	mov	r0, sp
 80157dc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80157e0:	3110      	adds	r1, #16
 80157e2:	f7fc fc75 	bl	80120d0 <ucdr_init_buffer>
 80157e6:	69a3      	ldr	r3, [r4, #24]
 80157e8:	4639      	mov	r1, r7
 80157ea:	4668      	mov	r0, sp
 80157ec:	68db      	ldr	r3, [r3, #12]
 80157ee:	4798      	blx	r3
 80157f0:	4629      	mov	r1, r5
 80157f2:	4604      	mov	r4, r0
 80157f4:	4804      	ldr	r0, [pc, #16]	; (8015808 <rmw_take_with_info+0xa4>)
 80157f6:	f007 faf7 	bl	801cde8 <put_memory>
 80157fa:	e7dd      	b.n	80157b8 <rmw_take_with_info+0x54>
 80157fc:	200c      	movs	r0, #12
 80157fe:	b009      	add	sp, #36	; 0x24
 8015800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015802:	bf00      	nop
 8015804:	08024874 	.word	0x08024874
 8015808:	20016dbc 	.word	0x20016dbc

0801580c <rmw_uxrce_transport_init>:
 801580c:	b508      	push	{r3, lr}
 801580e:	b108      	cbz	r0, 8015814 <rmw_uxrce_transport_init+0x8>
 8015810:	f100 0210 	add.w	r2, r0, #16
 8015814:	b139      	cbz	r1, 8015826 <rmw_uxrce_transport_init+0x1a>
 8015816:	6949      	ldr	r1, [r1, #20]
 8015818:	4610      	mov	r0, r2
 801581a:	f001 f9db 	bl	8016bd4 <uxr_init_custom_transport>
 801581e:	f080 0001 	eor.w	r0, r0, #1
 8015822:	b2c0      	uxtb	r0, r0
 8015824:	bd08      	pop	{r3, pc}
 8015826:	4b04      	ldr	r3, [pc, #16]	; (8015838 <rmw_uxrce_transport_init+0x2c>)
 8015828:	4610      	mov	r0, r2
 801582a:	6859      	ldr	r1, [r3, #4]
 801582c:	f001 f9d2 	bl	8016bd4 <uxr_init_custom_transport>
 8015830:	f080 0001 	eor.w	r0, r0, #1
 8015834:	b2c0      	uxtb	r0, r0
 8015836:	bd08      	pop	{r3, pc}
 8015838:	20012314 	.word	0x20012314

0801583c <rmw_uxrce_init_service_memory>:
 801583c:	b1e2      	cbz	r2, 8015878 <rmw_uxrce_init_service_memory+0x3c>
 801583e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015842:	7b05      	ldrb	r5, [r0, #12]
 8015844:	4606      	mov	r6, r0
 8015846:	b9ad      	cbnz	r5, 8015874 <rmw_uxrce_init_service_memory+0x38>
 8015848:	23c8      	movs	r3, #200	; 0xc8
 801584a:	4617      	mov	r7, r2
 801584c:	460c      	mov	r4, r1
 801584e:	46a8      	mov	r8, r5
 8015850:	6083      	str	r3, [r0, #8]
 8015852:	f240 1301 	movw	r3, #257	; 0x101
 8015856:	e9c0 5500 	strd	r5, r5, [r0]
 801585a:	8183      	strh	r3, [r0, #12]
 801585c:	3501      	adds	r5, #1
 801585e:	4621      	mov	r1, r4
 8015860:	4630      	mov	r0, r6
 8015862:	f007 fac1 	bl	801cde8 <put_memory>
 8015866:	42af      	cmp	r7, r5
 8015868:	60a4      	str	r4, [r4, #8]
 801586a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801586e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015872:	d1f3      	bne.n	801585c <rmw_uxrce_init_service_memory+0x20>
 8015874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015878:	4770      	bx	lr
 801587a:	bf00      	nop

0801587c <rmw_uxrce_init_client_memory>:
 801587c:	b1e2      	cbz	r2, 80158b8 <rmw_uxrce_init_client_memory+0x3c>
 801587e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015882:	7b05      	ldrb	r5, [r0, #12]
 8015884:	4606      	mov	r6, r0
 8015886:	b9ad      	cbnz	r5, 80158b4 <rmw_uxrce_init_client_memory+0x38>
 8015888:	23c8      	movs	r3, #200	; 0xc8
 801588a:	4617      	mov	r7, r2
 801588c:	460c      	mov	r4, r1
 801588e:	46a8      	mov	r8, r5
 8015890:	6083      	str	r3, [r0, #8]
 8015892:	f240 1301 	movw	r3, #257	; 0x101
 8015896:	e9c0 5500 	strd	r5, r5, [r0]
 801589a:	8183      	strh	r3, [r0, #12]
 801589c:	3501      	adds	r5, #1
 801589e:	4621      	mov	r1, r4
 80158a0:	4630      	mov	r0, r6
 80158a2:	f007 faa1 	bl	801cde8 <put_memory>
 80158a6:	42af      	cmp	r7, r5
 80158a8:	60a4      	str	r4, [r4, #8]
 80158aa:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80158ae:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80158b2:	d1f3      	bne.n	801589c <rmw_uxrce_init_client_memory+0x20>
 80158b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158b8:	4770      	bx	lr
 80158ba:	bf00      	nop

080158bc <rmw_uxrce_init_publisher_memory>:
 80158bc:	b1e2      	cbz	r2, 80158f8 <rmw_uxrce_init_publisher_memory+0x3c>
 80158be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158c2:	7b05      	ldrb	r5, [r0, #12]
 80158c4:	4606      	mov	r6, r0
 80158c6:	b9ad      	cbnz	r5, 80158f4 <rmw_uxrce_init_publisher_memory+0x38>
 80158c8:	23d8      	movs	r3, #216	; 0xd8
 80158ca:	4617      	mov	r7, r2
 80158cc:	460c      	mov	r4, r1
 80158ce:	46a8      	mov	r8, r5
 80158d0:	6083      	str	r3, [r0, #8]
 80158d2:	f240 1301 	movw	r3, #257	; 0x101
 80158d6:	e9c0 5500 	strd	r5, r5, [r0]
 80158da:	8183      	strh	r3, [r0, #12]
 80158dc:	3501      	adds	r5, #1
 80158de:	4621      	mov	r1, r4
 80158e0:	4630      	mov	r0, r6
 80158e2:	f007 fa81 	bl	801cde8 <put_memory>
 80158e6:	42af      	cmp	r7, r5
 80158e8:	60a4      	str	r4, [r4, #8]
 80158ea:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80158ee:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80158f2:	d1f3      	bne.n	80158dc <rmw_uxrce_init_publisher_memory+0x20>
 80158f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f8:	4770      	bx	lr
 80158fa:	bf00      	nop

080158fc <rmw_uxrce_init_subscription_memory>:
 80158fc:	b1e2      	cbz	r2, 8015938 <rmw_uxrce_init_subscription_memory+0x3c>
 80158fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015902:	7b05      	ldrb	r5, [r0, #12]
 8015904:	4606      	mov	r6, r0
 8015906:	b9ad      	cbnz	r5, 8015934 <rmw_uxrce_init_subscription_memory+0x38>
 8015908:	23d8      	movs	r3, #216	; 0xd8
 801590a:	4617      	mov	r7, r2
 801590c:	460c      	mov	r4, r1
 801590e:	46a8      	mov	r8, r5
 8015910:	6083      	str	r3, [r0, #8]
 8015912:	f240 1301 	movw	r3, #257	; 0x101
 8015916:	e9c0 5500 	strd	r5, r5, [r0]
 801591a:	8183      	strh	r3, [r0, #12]
 801591c:	3501      	adds	r5, #1
 801591e:	4621      	mov	r1, r4
 8015920:	4630      	mov	r0, r6
 8015922:	f007 fa61 	bl	801cde8 <put_memory>
 8015926:	42af      	cmp	r7, r5
 8015928:	60a4      	str	r4, [r4, #8]
 801592a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 801592e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015932:	d1f3      	bne.n	801591c <rmw_uxrce_init_subscription_memory+0x20>
 8015934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015938:	4770      	bx	lr
 801593a:	bf00      	nop

0801593c <rmw_uxrce_init_node_memory>:
 801593c:	b1e2      	cbz	r2, 8015978 <rmw_uxrce_init_node_memory+0x3c>
 801593e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015942:	7b05      	ldrb	r5, [r0, #12]
 8015944:	4606      	mov	r6, r0
 8015946:	b9ad      	cbnz	r5, 8015974 <rmw_uxrce_init_node_memory+0x38>
 8015948:	23a4      	movs	r3, #164	; 0xa4
 801594a:	4617      	mov	r7, r2
 801594c:	460c      	mov	r4, r1
 801594e:	46a8      	mov	r8, r5
 8015950:	6083      	str	r3, [r0, #8]
 8015952:	f240 1301 	movw	r3, #257	; 0x101
 8015956:	e9c0 5500 	strd	r5, r5, [r0]
 801595a:	8183      	strh	r3, [r0, #12]
 801595c:	3501      	adds	r5, #1
 801595e:	4621      	mov	r1, r4
 8015960:	4630      	mov	r0, r6
 8015962:	f007 fa41 	bl	801cde8 <put_memory>
 8015966:	42af      	cmp	r7, r5
 8015968:	60a4      	str	r4, [r4, #8]
 801596a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 801596e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015972:	d1f3      	bne.n	801595c <rmw_uxrce_init_node_memory+0x20>
 8015974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015978:	4770      	bx	lr
 801597a:	bf00      	nop

0801597c <rmw_uxrce_init_session_memory>:
 801597c:	b1ea      	cbz	r2, 80159ba <rmw_uxrce_init_session_memory+0x3e>
 801597e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015982:	7b05      	ldrb	r5, [r0, #12]
 8015984:	4606      	mov	r6, r0
 8015986:	b9b5      	cbnz	r5, 80159b6 <rmw_uxrce_init_session_memory+0x3a>
 8015988:	f241 58a8 	movw	r8, #5544	; 0x15a8
 801598c:	f240 1301 	movw	r3, #257	; 0x101
 8015990:	4617      	mov	r7, r2
 8015992:	460c      	mov	r4, r1
 8015994:	46a9      	mov	r9, r5
 8015996:	f8c0 8008 	str.w	r8, [r0, #8]
 801599a:	8183      	strh	r3, [r0, #12]
 801599c:	e9c0 5500 	strd	r5, r5, [r0]
 80159a0:	3501      	adds	r5, #1
 80159a2:	4621      	mov	r1, r4
 80159a4:	4630      	mov	r0, r6
 80159a6:	f007 fa1f 	bl	801cde8 <put_memory>
 80159aa:	42af      	cmp	r7, r5
 80159ac:	60a4      	str	r4, [r4, #8]
 80159ae:	f884 900c 	strb.w	r9, [r4, #12]
 80159b2:	4444      	add	r4, r8
 80159b4:	d1f4      	bne.n	80159a0 <rmw_uxrce_init_session_memory+0x24>
 80159b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ba:	4770      	bx	lr

080159bc <rmw_uxrce_init_topic_memory>:
 80159bc:	b1e2      	cbz	r2, 80159f8 <rmw_uxrce_init_topic_memory+0x3c>
 80159be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159c2:	7b05      	ldrb	r5, [r0, #12]
 80159c4:	4606      	mov	r6, r0
 80159c6:	b9ad      	cbnz	r5, 80159f4 <rmw_uxrce_init_topic_memory+0x38>
 80159c8:	231c      	movs	r3, #28
 80159ca:	4617      	mov	r7, r2
 80159cc:	460c      	mov	r4, r1
 80159ce:	46a8      	mov	r8, r5
 80159d0:	6083      	str	r3, [r0, #8]
 80159d2:	f240 1301 	movw	r3, #257	; 0x101
 80159d6:	e9c0 5500 	strd	r5, r5, [r0]
 80159da:	8183      	strh	r3, [r0, #12]
 80159dc:	3501      	adds	r5, #1
 80159de:	4621      	mov	r1, r4
 80159e0:	4630      	mov	r0, r6
 80159e2:	f007 fa01 	bl	801cde8 <put_memory>
 80159e6:	42af      	cmp	r7, r5
 80159e8:	60a4      	str	r4, [r4, #8]
 80159ea:	f104 041c 	add.w	r4, r4, #28
 80159ee:	f804 8c10 	strb.w	r8, [r4, #-16]
 80159f2:	d1f3      	bne.n	80159dc <rmw_uxrce_init_topic_memory+0x20>
 80159f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159f8:	4770      	bx	lr
 80159fa:	bf00      	nop

080159fc <rmw_uxrce_init_static_input_buffer_memory>:
 80159fc:	b1ea      	cbz	r2, 8015a3a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80159fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a02:	7b05      	ldrb	r5, [r0, #12]
 8015a04:	4606      	mov	r6, r0
 8015a06:	b9b5      	cbnz	r5, 8015a36 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8015a08:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8015a0c:	4617      	mov	r7, r2
 8015a0e:	460c      	mov	r4, r1
 8015a10:	46a8      	mov	r8, r5
 8015a12:	6083      	str	r3, [r0, #8]
 8015a14:	f240 1301 	movw	r3, #257	; 0x101
 8015a18:	e9c0 5500 	strd	r5, r5, [r0]
 8015a1c:	8183      	strh	r3, [r0, #12]
 8015a1e:	3501      	adds	r5, #1
 8015a20:	4621      	mov	r1, r4
 8015a22:	4630      	mov	r0, r6
 8015a24:	f007 f9e0 	bl	801cde8 <put_memory>
 8015a28:	42af      	cmp	r7, r5
 8015a2a:	60a4      	str	r4, [r4, #8]
 8015a2c:	f884 800c 	strb.w	r8, [r4, #12]
 8015a30:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8015a34:	d1f3      	bne.n	8015a1e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a3a:	4770      	bx	lr

08015a3c <rmw_uxrce_init_init_options_impl_memory>:
 8015a3c:	b1e2      	cbz	r2, 8015a78 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8015a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a42:	7b05      	ldrb	r5, [r0, #12]
 8015a44:	4606      	mov	r6, r0
 8015a46:	b9ad      	cbnz	r5, 8015a74 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015a48:	232c      	movs	r3, #44	; 0x2c
 8015a4a:	4617      	mov	r7, r2
 8015a4c:	460c      	mov	r4, r1
 8015a4e:	46a8      	mov	r8, r5
 8015a50:	6083      	str	r3, [r0, #8]
 8015a52:	f240 1301 	movw	r3, #257	; 0x101
 8015a56:	e9c0 5500 	strd	r5, r5, [r0]
 8015a5a:	8183      	strh	r3, [r0, #12]
 8015a5c:	3501      	adds	r5, #1
 8015a5e:	4621      	mov	r1, r4
 8015a60:	4630      	mov	r0, r6
 8015a62:	f007 f9c1 	bl	801cde8 <put_memory>
 8015a66:	42af      	cmp	r7, r5
 8015a68:	60a4      	str	r4, [r4, #8]
 8015a6a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8015a6e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015a72:	d1f3      	bne.n	8015a5c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a78:	4770      	bx	lr
 8015a7a:	bf00      	nop

08015a7c <rmw_uxrce_init_wait_set_memory>:
 8015a7c:	b1e2      	cbz	r2, 8015ab8 <rmw_uxrce_init_wait_set_memory+0x3c>
 8015a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a82:	7b05      	ldrb	r5, [r0, #12]
 8015a84:	4606      	mov	r6, r0
 8015a86:	b9ad      	cbnz	r5, 8015ab4 <rmw_uxrce_init_wait_set_memory+0x38>
 8015a88:	231c      	movs	r3, #28
 8015a8a:	4617      	mov	r7, r2
 8015a8c:	460c      	mov	r4, r1
 8015a8e:	46a8      	mov	r8, r5
 8015a90:	6083      	str	r3, [r0, #8]
 8015a92:	f240 1301 	movw	r3, #257	; 0x101
 8015a96:	e9c0 5500 	strd	r5, r5, [r0]
 8015a9a:	8183      	strh	r3, [r0, #12]
 8015a9c:	3501      	adds	r5, #1
 8015a9e:	4621      	mov	r1, r4
 8015aa0:	4630      	mov	r0, r6
 8015aa2:	f007 f9a1 	bl	801cde8 <put_memory>
 8015aa6:	42af      	cmp	r7, r5
 8015aa8:	60a4      	str	r4, [r4, #8]
 8015aaa:	f104 041c 	add.w	r4, r4, #28
 8015aae:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015ab2:	d1f3      	bne.n	8015a9c <rmw_uxrce_init_wait_set_memory+0x20>
 8015ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ab8:	4770      	bx	lr
 8015aba:	bf00      	nop

08015abc <rmw_uxrce_init_guard_condition_memory>:
 8015abc:	b1e2      	cbz	r2, 8015af8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8015abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac2:	7b05      	ldrb	r5, [r0, #12]
 8015ac4:	4606      	mov	r6, r0
 8015ac6:	b9ad      	cbnz	r5, 8015af4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8015ac8:	2320      	movs	r3, #32
 8015aca:	4617      	mov	r7, r2
 8015acc:	460c      	mov	r4, r1
 8015ace:	46a8      	mov	r8, r5
 8015ad0:	6083      	str	r3, [r0, #8]
 8015ad2:	f240 1301 	movw	r3, #257	; 0x101
 8015ad6:	e9c0 5500 	strd	r5, r5, [r0]
 8015ada:	8183      	strh	r3, [r0, #12]
 8015adc:	3501      	adds	r5, #1
 8015ade:	4621      	mov	r1, r4
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	f007 f981 	bl	801cde8 <put_memory>
 8015ae6:	42af      	cmp	r7, r5
 8015ae8:	60a4      	str	r4, [r4, #8]
 8015aea:	f104 0420 	add.w	r4, r4, #32
 8015aee:	f804 8c14 	strb.w	r8, [r4, #-20]
 8015af2:	d1f3      	bne.n	8015adc <rmw_uxrce_init_guard_condition_memory+0x20>
 8015af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015af8:	4770      	bx	lr
 8015afa:	bf00      	nop

08015afc <rmw_uxrce_fini_session_memory>:
 8015afc:	4601      	mov	r1, r0
 8015afe:	4801      	ldr	r0, [pc, #4]	; (8015b04 <rmw_uxrce_fini_session_memory+0x8>)
 8015b00:	f007 b972 	b.w	801cde8 <put_memory>
 8015b04:	20016dac 	.word	0x20016dac

08015b08 <rmw_uxrce_fini_node_memory>:
 8015b08:	b538      	push	{r3, r4, r5, lr}
 8015b0a:	4604      	mov	r4, r0
 8015b0c:	6800      	ldr	r0, [r0, #0]
 8015b0e:	b128      	cbz	r0, 8015b1c <rmw_uxrce_fini_node_memory+0x14>
 8015b10:	4b07      	ldr	r3, [pc, #28]	; (8015b30 <rmw_uxrce_fini_node_memory+0x28>)
 8015b12:	6819      	ldr	r1, [r3, #0]
 8015b14:	f7ea fb94 	bl	8000240 <strcmp>
 8015b18:	b940      	cbnz	r0, 8015b2c <rmw_uxrce_fini_node_memory+0x24>
 8015b1a:	6020      	str	r0, [r4, #0]
 8015b1c:	6861      	ldr	r1, [r4, #4]
 8015b1e:	b129      	cbz	r1, 8015b2c <rmw_uxrce_fini_node_memory+0x24>
 8015b20:	2500      	movs	r5, #0
 8015b22:	4804      	ldr	r0, [pc, #16]	; (8015b34 <rmw_uxrce_fini_node_memory+0x2c>)
 8015b24:	610d      	str	r5, [r1, #16]
 8015b26:	f007 f95f 	bl	801cde8 <put_memory>
 8015b2a:	6065      	str	r5, [r4, #4]
 8015b2c:	bd38      	pop	{r3, r4, r5, pc}
 8015b2e:	bf00      	nop
 8015b30:	08024874 	.word	0x08024874
 8015b34:	20016d7c 	.word	0x20016d7c

08015b38 <rmw_uxrce_fini_publisher_memory>:
 8015b38:	b510      	push	{r4, lr}
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	6800      	ldr	r0, [r0, #0]
 8015b3e:	b128      	cbz	r0, 8015b4c <rmw_uxrce_fini_publisher_memory+0x14>
 8015b40:	4b06      	ldr	r3, [pc, #24]	; (8015b5c <rmw_uxrce_fini_publisher_memory+0x24>)
 8015b42:	6819      	ldr	r1, [r3, #0]
 8015b44:	f7ea fb7c 	bl	8000240 <strcmp>
 8015b48:	b938      	cbnz	r0, 8015b5a <rmw_uxrce_fini_publisher_memory+0x22>
 8015b4a:	6020      	str	r0, [r4, #0]
 8015b4c:	6861      	ldr	r1, [r4, #4]
 8015b4e:	b121      	cbz	r1, 8015b5a <rmw_uxrce_fini_publisher_memory+0x22>
 8015b50:	4803      	ldr	r0, [pc, #12]	; (8015b60 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015b52:	f007 f949 	bl	801cde8 <put_memory>
 8015b56:	2300      	movs	r3, #0
 8015b58:	6063      	str	r3, [r4, #4]
 8015b5a:	bd10      	pop	{r4, pc}
 8015b5c:	08024874 	.word	0x08024874
 8015b60:	20016d8c 	.word	0x20016d8c

08015b64 <rmw_uxrce_fini_subscription_memory>:
 8015b64:	b510      	push	{r4, lr}
 8015b66:	4604      	mov	r4, r0
 8015b68:	6800      	ldr	r0, [r0, #0]
 8015b6a:	b128      	cbz	r0, 8015b78 <rmw_uxrce_fini_subscription_memory+0x14>
 8015b6c:	4b06      	ldr	r3, [pc, #24]	; (8015b88 <rmw_uxrce_fini_subscription_memory+0x24>)
 8015b6e:	6819      	ldr	r1, [r3, #0]
 8015b70:	f7ea fb66 	bl	8000240 <strcmp>
 8015b74:	b938      	cbnz	r0, 8015b86 <rmw_uxrce_fini_subscription_memory+0x22>
 8015b76:	6020      	str	r0, [r4, #0]
 8015b78:	6861      	ldr	r1, [r4, #4]
 8015b7a:	b121      	cbz	r1, 8015b86 <rmw_uxrce_fini_subscription_memory+0x22>
 8015b7c:	4803      	ldr	r0, [pc, #12]	; (8015b8c <rmw_uxrce_fini_subscription_memory+0x28>)
 8015b7e:	f007 f933 	bl	801cde8 <put_memory>
 8015b82:	2300      	movs	r3, #0
 8015b84:	6063      	str	r3, [r4, #4]
 8015b86:	bd10      	pop	{r4, pc}
 8015b88:	08024874 	.word	0x08024874
 8015b8c:	20016dcc 	.word	0x20016dcc

08015b90 <rmw_uxrce_fini_service_memory>:
 8015b90:	b510      	push	{r4, lr}
 8015b92:	4604      	mov	r4, r0
 8015b94:	6800      	ldr	r0, [r0, #0]
 8015b96:	b128      	cbz	r0, 8015ba4 <rmw_uxrce_fini_service_memory+0x14>
 8015b98:	4b06      	ldr	r3, [pc, #24]	; (8015bb4 <rmw_uxrce_fini_service_memory+0x24>)
 8015b9a:	6819      	ldr	r1, [r3, #0]
 8015b9c:	f7ea fb50 	bl	8000240 <strcmp>
 8015ba0:	b938      	cbnz	r0, 8015bb2 <rmw_uxrce_fini_service_memory+0x22>
 8015ba2:	6020      	str	r0, [r4, #0]
 8015ba4:	6861      	ldr	r1, [r4, #4]
 8015ba6:	b121      	cbz	r1, 8015bb2 <rmw_uxrce_fini_service_memory+0x22>
 8015ba8:	4803      	ldr	r0, [pc, #12]	; (8015bb8 <rmw_uxrce_fini_service_memory+0x28>)
 8015baa:	f007 f91d 	bl	801cde8 <put_memory>
 8015bae:	2300      	movs	r3, #0
 8015bb0:	6063      	str	r3, [r4, #4]
 8015bb2:	bd10      	pop	{r4, pc}
 8015bb4:	08024874 	.word	0x08024874
 8015bb8:	20016d9c 	.word	0x20016d9c

08015bbc <rmw_uxrce_fini_client_memory>:
 8015bbc:	b510      	push	{r4, lr}
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	6800      	ldr	r0, [r0, #0]
 8015bc2:	b128      	cbz	r0, 8015bd0 <rmw_uxrce_fini_client_memory+0x14>
 8015bc4:	4b06      	ldr	r3, [pc, #24]	; (8015be0 <rmw_uxrce_fini_client_memory+0x24>)
 8015bc6:	6819      	ldr	r1, [r3, #0]
 8015bc8:	f7ea fb3a 	bl	8000240 <strcmp>
 8015bcc:	b938      	cbnz	r0, 8015bde <rmw_uxrce_fini_client_memory+0x22>
 8015bce:	6020      	str	r0, [r4, #0]
 8015bd0:	6861      	ldr	r1, [r4, #4]
 8015bd2:	b121      	cbz	r1, 8015bde <rmw_uxrce_fini_client_memory+0x22>
 8015bd4:	4803      	ldr	r0, [pc, #12]	; (8015be4 <rmw_uxrce_fini_client_memory+0x28>)
 8015bd6:	f007 f907 	bl	801cde8 <put_memory>
 8015bda:	2300      	movs	r3, #0
 8015bdc:	6063      	str	r3, [r4, #4]
 8015bde:	bd10      	pop	{r4, pc}
 8015be0:	08024874 	.word	0x08024874
 8015be4:	200124ac 	.word	0x200124ac

08015be8 <rmw_uxrce_fini_topic_memory>:
 8015be8:	b510      	push	{r4, lr}
 8015bea:	4604      	mov	r4, r0
 8015bec:	4803      	ldr	r0, [pc, #12]	; (8015bfc <rmw_uxrce_fini_topic_memory+0x14>)
 8015bee:	4621      	mov	r1, r4
 8015bf0:	f007 f8fa 	bl	801cde8 <put_memory>
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	61a3      	str	r3, [r4, #24]
 8015bf8:	bd10      	pop	{r4, pc}
 8015bfa:	bf00      	nop
 8015bfc:	20016ddc 	.word	0x20016ddc

08015c00 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8015c00:	b082      	sub	sp, #8
 8015c02:	492b      	ldr	r1, [pc, #172]	; (8015cb0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015c04:	b530      	push	{r4, r5, lr}
 8015c06:	680d      	ldr	r5, [r1, #0]
 8015c08:	ac03      	add	r4, sp, #12
 8015c0a:	e884 000c 	stmia.w	r4, {r2, r3}
 8015c0e:	461c      	mov	r4, r3
 8015c10:	2d00      	cmp	r5, #0
 8015c12:	d04b      	beq.n	8015cac <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8015c14:	462b      	mov	r3, r5
 8015c16:	2100      	movs	r1, #0
 8015c18:	689a      	ldr	r2, [r3, #8]
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8015c20:	4290      	cmp	r0, r2
 8015c22:	bf08      	it	eq
 8015c24:	3101      	addeq	r1, #1
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d1f6      	bne.n	8015c18 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8015c2a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015c2e:	2b02      	cmp	r3, #2
 8015c30:	d029      	beq.n	8015c86 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015c32:	d820      	bhi.n	8015c76 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015c34:	428c      	cmp	r4, r1
 8015c36:	d828      	bhi.n	8015c8a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015c38:	fab4 f284 	clz	r2, r4
 8015c3c:	0952      	lsrs	r2, r2, #5
 8015c3e:	b324      	cbz	r4, 8015c8a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015c40:	b1dd      	cbz	r5, 8015c7a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015c42:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8015c46:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8015c4a:	e001      	b.n	8015c50 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8015c4c:	686d      	ldr	r5, [r5, #4]
 8015c4e:	b1ad      	cbz	r5, 8015c7c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015c50:	68ab      	ldr	r3, [r5, #8]
 8015c52:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8015c56:	4288      	cmp	r0, r1
 8015c58:	d1f8      	bne.n	8015c4c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015c5a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8015c5e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8015c62:	4561      	cmp	r1, ip
 8015c64:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015c68:	eb73 0e04 	sbcs.w	lr, r3, r4
 8015c6c:	daee      	bge.n	8015c4c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015c6e:	468c      	mov	ip, r1
 8015c70:	461c      	mov	r4, r3
 8015c72:	462a      	mov	r2, r5
 8015c74:	e7ea      	b.n	8015c4c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015c76:	2b03      	cmp	r3, #3
 8015c78:	d0dc      	beq.n	8015c34 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	4610      	mov	r0, r2
 8015c7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c82:	b002      	add	sp, #8
 8015c84:	4770      	bx	lr
 8015c86:	428c      	cmp	r4, r1
 8015c88:	d905      	bls.n	8015c96 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8015c8a:	4809      	ldr	r0, [pc, #36]	; (8015cb0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c90:	b002      	add	sp, #8
 8015c92:	f007 b899 	b.w	801cdc8 <get_memory>
 8015c96:	fab4 f284 	clz	r2, r4
 8015c9a:	0952      	lsrs	r2, r2, #5
 8015c9c:	2c00      	cmp	r4, #0
 8015c9e:	d1ed      	bne.n	8015c7c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015ca0:	4803      	ldr	r0, [pc, #12]	; (8015cb0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015ca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ca6:	b002      	add	sp, #8
 8015ca8:	f007 b88e 	b.w	801cdc8 <get_memory>
 8015cac:	4629      	mov	r1, r5
 8015cae:	e7bc      	b.n	8015c2a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015cb0:	20016dbc 	.word	0x20016dbc

08015cb4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015cb4:	4b12      	ldr	r3, [pc, #72]	; (8015d00 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	b530      	push	{r4, r5, lr}
 8015cba:	b1f3      	cbz	r3, 8015cfa <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8015cbc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8015cc0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8015cc4:	2400      	movs	r4, #0
 8015cc6:	e001      	b.n	8015ccc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	b1a3      	cbz	r3, 8015cf6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8015ccc:	689a      	ldr	r2, [r3, #8]
 8015cce:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8015cd2:	4288      	cmp	r0, r1
 8015cd4:	d1f8      	bne.n	8015cc8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015cd6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8015cda:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8015cde:	4571      	cmp	r1, lr
 8015ce0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015ce4:	eb72 050c 	sbcs.w	r5, r2, ip
 8015ce8:	daee      	bge.n	8015cc8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015cea:	461c      	mov	r4, r3
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	468e      	mov	lr, r1
 8015cf0:	4694      	mov	ip, r2
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d1ea      	bne.n	8015ccc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	bd30      	pop	{r4, r5, pc}
 8015cfa:	461c      	mov	r4, r3
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	bd30      	pop	{r4, r5, pc}
 8015d00:	20016dbc 	.word	0x20016dbc
 8015d04:	00000000 	.word	0x00000000

08015d08 <rmw_uxrce_clean_expired_static_input_buffer>:
 8015d08:	4b3d      	ldr	r3, [pc, #244]	; (8015e00 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d0e:	681f      	ldr	r7, [r3, #0]
 8015d10:	ed2d 8b06 	vpush	{d8-d10}
 8015d14:	b08d      	sub	sp, #52	; 0x34
 8015d16:	f007 fae3 	bl	801d2e0 <rmw_uros_epoch_nanos>
 8015d1a:	2f00      	cmp	r7, #0
 8015d1c:	d05d      	beq.n	8015dda <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015d1e:	46b8      	mov	r8, r7
 8015d20:	4681      	mov	r9, r0
 8015d22:	468a      	mov	sl, r1
 8015d24:	ac04      	add	r4, sp, #16
 8015d26:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015d2a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8015d2e:	2b04      	cmp	r3, #4
 8015d30:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8015de8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8015d34:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8015df0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8015d38:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8015df8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8015d3c:	d03f      	beq.n	8015dbe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015d3e:	2b05      	cmp	r3, #5
 8015d40:	d044      	beq.n	8015dcc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8015d42:	2b03      	cmp	r3, #3
 8015d44:	d03b      	beq.n	8015dbe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015d46:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015d4a:	ed8d ab06 	vstr	d10, [sp, #24]
 8015d4e:	ab08      	add	r3, sp, #32
 8015d50:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015d54:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8015d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d5a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015d5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d62:	f006 fe45 	bl	801c9f0 <rmw_time_equal>
 8015d66:	b118      	cbz	r0, 8015d70 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8015d68:	ed8d 9b04 	vstr	d9, [sp, #16]
 8015d6c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015d70:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8015d74:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8015d78:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8015d7c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8015d80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d84:	f006 fe8a 	bl	801ca9c <rmw_time_total_nsec>
 8015d88:	1830      	adds	r0, r6, r0
 8015d8a:	eb47 0101 	adc.w	r1, r7, r1
 8015d8e:	4548      	cmp	r0, r9
 8015d90:	eb71 030a 	sbcs.w	r3, r1, sl
 8015d94:	db05      	blt.n	8015da2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8015d96:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8015d9a:	4591      	cmp	r9, r2
 8015d9c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8015da0:	da03      	bge.n	8015daa <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8015da2:	4641      	mov	r1, r8
 8015da4:	4816      	ldr	r0, [pc, #88]	; (8015e00 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015da6:	f007 f81f 	bl	801cde8 <put_memory>
 8015daa:	f1bb 0f00 	cmp.w	fp, #0
 8015dae:	d014      	beq.n	8015dda <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015db0:	46d8      	mov	r8, fp
 8015db2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015db6:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8015dba:	2b04      	cmp	r3, #4
 8015dbc:	d1bf      	bne.n	8015d3e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8015dbe:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8015dc2:	3340      	adds	r3, #64	; 0x40
 8015dc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015dca:	e7c0      	b.n	8015d4e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015dcc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8015dd0:	3348      	adds	r3, #72	; 0x48
 8015dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015dd8:	e7b9      	b.n	8015d4e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015dda:	b00d      	add	sp, #52	; 0x34
 8015ddc:	ecbd 8b06 	vpop	{d8-d10}
 8015de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de4:	f3af 8000 	nop.w
	...
 8015df0:	00000001 	.word	0x00000001
 8015df4:	00000000 	.word	0x00000000
 8015df8:	0000001e 	.word	0x0000001e
 8015dfc:	00000000 	.word	0x00000000
 8015e00:	20016dbc 	.word	0x20016dbc

08015e04 <run_xrce_session>:
 8015e04:	b510      	push	{r4, lr}
 8015e06:	788c      	ldrb	r4, [r1, #2]
 8015e08:	b086      	sub	sp, #24
 8015e0a:	2c01      	cmp	r4, #1
 8015e0c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8015e10:	d00c      	beq.n	8015e2c <run_xrce_session+0x28>
 8015e12:	2401      	movs	r4, #1
 8015e14:	4619      	mov	r1, r3
 8015e16:	f10d 020e 	add.w	r2, sp, #14
 8015e1a:	f10d 0317 	add.w	r3, sp, #23
 8015e1e:	9400      	str	r4, [sp, #0]
 8015e20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e24:	f001 fd6c 	bl	8017900 <uxr_run_session_until_all_status>
 8015e28:	b006      	add	sp, #24
 8015e2a:	bd10      	pop	{r4, pc}
 8015e2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e30:	f001 f988 	bl	8017144 <uxr_flash_output_streams>
 8015e34:	4620      	mov	r0, r4
 8015e36:	b006      	add	sp, #24
 8015e38:	bd10      	pop	{r4, pc}
 8015e3a:	bf00      	nop

08015e3c <convert_qos_profile>:
 8015e3c:	7a4a      	ldrb	r2, [r1, #9]
 8015e3e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8015e42:	2a02      	cmp	r2, #2
 8015e44:	bf18      	it	ne
 8015e46:	2200      	movne	r2, #0
 8015e48:	7002      	strb	r2, [r0, #0]
 8015e4a:	f1ac 0202 	sub.w	r2, ip, #2
 8015e4e:	fab2 f282 	clz	r2, r2
 8015e52:	0952      	lsrs	r2, r2, #5
 8015e54:	7042      	strb	r2, [r0, #1]
 8015e56:	780a      	ldrb	r2, [r1, #0]
 8015e58:	8889      	ldrh	r1, [r1, #4]
 8015e5a:	f1a2 0202 	sub.w	r2, r2, #2
 8015e5e:	8081      	strh	r1, [r0, #4]
 8015e60:	fab2 f282 	clz	r2, r2
 8015e64:	0952      	lsrs	r2, r2, #5
 8015e66:	7082      	strb	r2, [r0, #2]
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop

08015e6c <generate_service_topics>:
 8015e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e6e:	461d      	mov	r5, r3
 8015e70:	b083      	sub	sp, #12
 8015e72:	4606      	mov	r6, r0
 8015e74:	4c11      	ldr	r4, [pc, #68]	; (8015ebc <generate_service_topics+0x50>)
 8015e76:	4608      	mov	r0, r1
 8015e78:	4b11      	ldr	r3, [pc, #68]	; (8015ec0 <generate_service_topics+0x54>)
 8015e7a:	4617      	mov	r7, r2
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	4a11      	ldr	r2, [pc, #68]	; (8015ec4 <generate_service_topics+0x58>)
 8015e80:	9401      	str	r4, [sp, #4]
 8015e82:	9600      	str	r6, [sp, #0]
 8015e84:	f009 fcfe 	bl	801f884 <sniprintf>
 8015e88:	4a0f      	ldr	r2, [pc, #60]	; (8015ec8 <generate_service_topics+0x5c>)
 8015e8a:	4604      	mov	r4, r0
 8015e8c:	4b0f      	ldr	r3, [pc, #60]	; (8015ecc <generate_service_topics+0x60>)
 8015e8e:	9201      	str	r2, [sp, #4]
 8015e90:	4638      	mov	r0, r7
 8015e92:	4a0c      	ldr	r2, [pc, #48]	; (8015ec4 <generate_service_topics+0x58>)
 8015e94:	4629      	mov	r1, r5
 8015e96:	9600      	str	r6, [sp, #0]
 8015e98:	f009 fcf4 	bl	801f884 <sniprintf>
 8015e9c:	2c00      	cmp	r4, #0
 8015e9e:	bfa8      	it	ge
 8015ea0:	42a5      	cmpge	r5, r4
 8015ea2:	bfcc      	ite	gt
 8015ea4:	2401      	movgt	r4, #1
 8015ea6:	2400      	movle	r4, #0
 8015ea8:	dd05      	ble.n	8015eb6 <generate_service_topics+0x4a>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	bfa8      	it	ge
 8015eae:	4285      	cmpge	r5, r0
 8015eb0:	bfcc      	ite	gt
 8015eb2:	2401      	movgt	r4, #1
 8015eb4:	2400      	movle	r4, #0
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	b003      	add	sp, #12
 8015eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ebc:	08024230 	.word	0x08024230
 8015ec0:	0802422c 	.word	0x0802422c
 8015ec4:	08024210 	.word	0x08024210
 8015ec8:	08024224 	.word	0x08024224
 8015ecc:	08024220 	.word	0x08024220

08015ed0 <generate_service_types>:
 8015ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed4:	4606      	mov	r6, r0
 8015ed6:	b087      	sub	sp, #28
 8015ed8:	461c      	mov	r4, r3
 8015eda:	6883      	ldr	r3, [r0, #8]
 8015edc:	460d      	mov	r5, r1
 8015ede:	4617      	mov	r7, r2
 8015ee0:	4798      	blx	r3
 8015ee2:	68f3      	ldr	r3, [r6, #12]
 8015ee4:	4606      	mov	r6, r0
 8015ee6:	4798      	blx	r3
 8015ee8:	2300      	movs	r3, #0
 8015eea:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8015eee:	6872      	ldr	r2, [r6, #4]
 8015ef0:	702b      	strb	r3, [r5, #0]
 8015ef2:	6813      	ldr	r3, [r2, #0]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d03f      	beq.n	8015f78 <generate_service_types+0xa8>
 8015ef8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8015f8c <generate_service_types+0xbc>
 8015efc:	4649      	mov	r1, r9
 8015efe:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8015f94 <generate_service_types+0xc4>
 8015f02:	4628      	mov	r0, r5
 8015f04:	f8df a090 	ldr.w	sl, [pc, #144]	; 8015f98 <generate_service_types+0xc8>
 8015f08:	f8cd 8014 	str.w	r8, [sp, #20]
 8015f0c:	6852      	ldr	r2, [r2, #4]
 8015f0e:	9100      	str	r1, [sp, #0]
 8015f10:	4621      	mov	r1, r4
 8015f12:	f8cd 8008 	str.w	r8, [sp, #8]
 8015f16:	f8cd a004 	str.w	sl, [sp, #4]
 8015f1a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8015f1e:	4a1a      	ldr	r2, [pc, #104]	; (8015f88 <generate_service_types+0xb8>)
 8015f20:	f009 fcb0 	bl	801f884 <sniprintf>
 8015f24:	2300      	movs	r3, #0
 8015f26:	42a0      	cmp	r0, r4
 8015f28:	ea6f 0600 	mvn.w	r6, r0
 8015f2c:	703b      	strb	r3, [r7, #0]
 8015f2e:	f8db 3000 	ldr.w	r3, [fp]
 8015f32:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8015f36:	bfac      	ite	ge
 8015f38:	2500      	movge	r5, #0
 8015f3a:	2501      	movlt	r5, #1
 8015f3c:	b30b      	cbz	r3, 8015f82 <generate_service_types+0xb2>
 8015f3e:	4a13      	ldr	r2, [pc, #76]	; (8015f8c <generate_service_types+0xbc>)
 8015f40:	f8cd 8014 	str.w	r8, [sp, #20]
 8015f44:	402e      	ands	r6, r5
 8015f46:	f8db 1004 	ldr.w	r1, [fp, #4]
 8015f4a:	4638      	mov	r0, r7
 8015f4c:	9104      	str	r1, [sp, #16]
 8015f4e:	4621      	mov	r1, r4
 8015f50:	e9cd 2a00 	strd	r2, sl, [sp]
 8015f54:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015f58:	4a0b      	ldr	r2, [pc, #44]	; (8015f88 <generate_service_types+0xb8>)
 8015f5a:	f009 fc93 	bl	801f884 <sniprintf>
 8015f5e:	2800      	cmp	r0, #0
 8015f60:	bfb4      	ite	lt
 8015f62:	2600      	movlt	r6, #0
 8015f64:	f006 0601 	andge.w	r6, r6, #1
 8015f68:	42a0      	cmp	r0, r4
 8015f6a:	bfac      	ite	ge
 8015f6c:	2000      	movge	r0, #0
 8015f6e:	f006 0001 	andlt.w	r0, r6, #1
 8015f72:	b007      	add	sp, #28
 8015f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f78:	4b05      	ldr	r3, [pc, #20]	; (8015f90 <generate_service_types+0xc0>)
 8015f7a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8015f8c <generate_service_types+0xbc>
 8015f7e:	4619      	mov	r1, r3
 8015f80:	e7bd      	b.n	8015efe <generate_service_types+0x2e>
 8015f82:	4b03      	ldr	r3, [pc, #12]	; (8015f90 <generate_service_types+0xc0>)
 8015f84:	461a      	mov	r2, r3
 8015f86:	e7db      	b.n	8015f40 <generate_service_types+0x70>
 8015f88:	08024208 	.word	0x08024208
 8015f8c:	08024204 	.word	0x08024204
 8015f90:	08024288 	.word	0x08024288
 8015f94:	08024218 	.word	0x08024218
 8015f98:	0802421c 	.word	0x0802421c

08015f9c <generate_type_name>:
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	b530      	push	{r4, r5, lr}
 8015fa0:	700b      	strb	r3, [r1, #0]
 8015fa2:	b087      	sub	sp, #28
 8015fa4:	6803      	ldr	r3, [r0, #0]
 8015fa6:	4614      	mov	r4, r2
 8015fa8:	b1bb      	cbz	r3, 8015fda <generate_type_name+0x3e>
 8015faa:	4a0e      	ldr	r2, [pc, #56]	; (8015fe4 <generate_type_name+0x48>)
 8015fac:	4615      	mov	r5, r2
 8015fae:	9500      	str	r5, [sp, #0]
 8015fb0:	9203      	str	r2, [sp, #12]
 8015fb2:	4d0d      	ldr	r5, [pc, #52]	; (8015fe8 <generate_type_name+0x4c>)
 8015fb4:	6842      	ldr	r2, [r0, #4]
 8015fb6:	4608      	mov	r0, r1
 8015fb8:	490c      	ldr	r1, [pc, #48]	; (8015fec <generate_type_name+0x50>)
 8015fba:	9204      	str	r2, [sp, #16]
 8015fbc:	9105      	str	r1, [sp, #20]
 8015fbe:	9102      	str	r1, [sp, #8]
 8015fc0:	4621      	mov	r1, r4
 8015fc2:	4a0b      	ldr	r2, [pc, #44]	; (8015ff0 <generate_type_name+0x54>)
 8015fc4:	9501      	str	r5, [sp, #4]
 8015fc6:	f009 fc5d 	bl	801f884 <sniprintf>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	bfa8      	it	ge
 8015fce:	4284      	cmpge	r4, r0
 8015fd0:	bfcc      	ite	gt
 8015fd2:	2001      	movgt	r0, #1
 8015fd4:	2000      	movle	r0, #0
 8015fd6:	b007      	add	sp, #28
 8015fd8:	bd30      	pop	{r4, r5, pc}
 8015fda:	4b06      	ldr	r3, [pc, #24]	; (8015ff4 <generate_type_name+0x58>)
 8015fdc:	4a01      	ldr	r2, [pc, #4]	; (8015fe4 <generate_type_name+0x48>)
 8015fde:	461d      	mov	r5, r3
 8015fe0:	e7e5      	b.n	8015fae <generate_type_name+0x12>
 8015fe2:	bf00      	nop
 8015fe4:	08024204 	.word	0x08024204
 8015fe8:	0802421c 	.word	0x0802421c
 8015fec:	08024218 	.word	0x08024218
 8015ff0:	08024208 	.word	0x08024208
 8015ff4:	08024288 	.word	0x08024288

08015ff8 <generate_topic_name>:
 8015ff8:	b530      	push	{r4, r5, lr}
 8015ffa:	4614      	mov	r4, r2
 8015ffc:	b083      	sub	sp, #12
 8015ffe:	4605      	mov	r5, r0
 8016000:	4b07      	ldr	r3, [pc, #28]	; (8016020 <generate_topic_name+0x28>)
 8016002:	4a08      	ldr	r2, [pc, #32]	; (8016024 <generate_topic_name+0x2c>)
 8016004:	4608      	mov	r0, r1
 8016006:	9500      	str	r5, [sp, #0]
 8016008:	4621      	mov	r1, r4
 801600a:	f009 fc3b 	bl	801f884 <sniprintf>
 801600e:	2800      	cmp	r0, #0
 8016010:	bfa8      	it	ge
 8016012:	4284      	cmpge	r4, r0
 8016014:	bfcc      	ite	gt
 8016016:	2001      	movgt	r0, #1
 8016018:	2000      	movle	r0, #0
 801601a:	b003      	add	sp, #12
 801601c:	bd30      	pop	{r4, r5, pc}
 801601e:	bf00      	nop
 8016020:	08024238 	.word	0x08024238
 8016024:	08023c08 	.word	0x08023c08

08016028 <is_uxrce_rmw_identifier_valid>:
 8016028:	b510      	push	{r4, lr}
 801602a:	4604      	mov	r4, r0
 801602c:	b140      	cbz	r0, 8016040 <is_uxrce_rmw_identifier_valid+0x18>
 801602e:	f006 ff33 	bl	801ce98 <rmw_get_implementation_identifier>
 8016032:	4601      	mov	r1, r0
 8016034:	4620      	mov	r0, r4
 8016036:	f7ea f903 	bl	8000240 <strcmp>
 801603a:	fab0 f080 	clz	r0, r0
 801603e:	0940      	lsrs	r0, r0, #5
 8016040:	bd10      	pop	{r4, pc}
 8016042:	bf00      	nop

08016044 <get_message_typesupport_handle>:
 8016044:	6883      	ldr	r3, [r0, #8]
 8016046:	4718      	bx	r3

08016048 <get_message_typesupport_handle_function>:
 8016048:	b510      	push	{r4, lr}
 801604a:	4604      	mov	r4, r0
 801604c:	6800      	ldr	r0, [r0, #0]
 801604e:	f7ea f8f7 	bl	8000240 <strcmp>
 8016052:	2800      	cmp	r0, #0
 8016054:	bf0c      	ite	eq
 8016056:	4620      	moveq	r0, r4
 8016058:	2000      	movne	r0, #0
 801605a:	bd10      	pop	{r4, pc}

0801605c <get_service_typesupport_handle>:
 801605c:	6883      	ldr	r3, [r0, #8]
 801605e:	4718      	bx	r3

08016060 <get_service_typesupport_handle_function>:
 8016060:	b510      	push	{r4, lr}
 8016062:	4604      	mov	r4, r0
 8016064:	6800      	ldr	r0, [r0, #0]
 8016066:	f7ea f8eb 	bl	8000240 <strcmp>
 801606a:	2800      	cmp	r0, #0
 801606c:	bf0c      	ite	eq
 801606e:	4620      	moveq	r0, r4
 8016070:	2000      	movne	r0, #0
 8016072:	bd10      	pop	{r4, pc}

08016074 <rosidl_runtime_c__String__init>:
 8016074:	b510      	push	{r4, lr}
 8016076:	4604      	mov	r4, r0
 8016078:	b086      	sub	sp, #24
 801607a:	b170      	cbz	r0, 801609a <rosidl_runtime_c__String__init+0x26>
 801607c:	a801      	add	r0, sp, #4
 801607e:	f7fd feef 	bl	8013e60 <rcutils_get_default_allocator>
 8016082:	9b01      	ldr	r3, [sp, #4]
 8016084:	9905      	ldr	r1, [sp, #20]
 8016086:	2001      	movs	r0, #1
 8016088:	4798      	blx	r3
 801608a:	6020      	str	r0, [r4, #0]
 801608c:	b128      	cbz	r0, 801609a <rosidl_runtime_c__String__init+0x26>
 801608e:	2100      	movs	r1, #0
 8016090:	2201      	movs	r2, #1
 8016092:	7001      	strb	r1, [r0, #0]
 8016094:	4610      	mov	r0, r2
 8016096:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801609a:	b006      	add	sp, #24
 801609c:	bd10      	pop	{r4, pc}
 801609e:	bf00      	nop

080160a0 <rosidl_runtime_c__String__fini>:
 80160a0:	b320      	cbz	r0, 80160ec <rosidl_runtime_c__String__fini+0x4c>
 80160a2:	6803      	ldr	r3, [r0, #0]
 80160a4:	b510      	push	{r4, lr}
 80160a6:	4604      	mov	r4, r0
 80160a8:	b086      	sub	sp, #24
 80160aa:	b173      	cbz	r3, 80160ca <rosidl_runtime_c__String__fini+0x2a>
 80160ac:	6883      	ldr	r3, [r0, #8]
 80160ae:	b1f3      	cbz	r3, 80160ee <rosidl_runtime_c__String__fini+0x4e>
 80160b0:	a801      	add	r0, sp, #4
 80160b2:	f7fd fed5 	bl	8013e60 <rcutils_get_default_allocator>
 80160b6:	9b02      	ldr	r3, [sp, #8]
 80160b8:	9905      	ldr	r1, [sp, #20]
 80160ba:	6820      	ldr	r0, [r4, #0]
 80160bc:	4798      	blx	r3
 80160be:	2300      	movs	r3, #0
 80160c0:	e9c4 3300 	strd	r3, r3, [r4]
 80160c4:	60a3      	str	r3, [r4, #8]
 80160c6:	b006      	add	sp, #24
 80160c8:	bd10      	pop	{r4, pc}
 80160ca:	6843      	ldr	r3, [r0, #4]
 80160cc:	b9db      	cbnz	r3, 8016106 <rosidl_runtime_c__String__fini+0x66>
 80160ce:	6883      	ldr	r3, [r0, #8]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d0f8      	beq.n	80160c6 <rosidl_runtime_c__String__fini+0x26>
 80160d4:	4b12      	ldr	r3, [pc, #72]	; (8016120 <rosidl_runtime_c__String__fini+0x80>)
 80160d6:	2251      	movs	r2, #81	; 0x51
 80160d8:	2101      	movs	r1, #1
 80160da:	4812      	ldr	r0, [pc, #72]	; (8016124 <rosidl_runtime_c__String__fini+0x84>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	68db      	ldr	r3, [r3, #12]
 80160e0:	f009 faa6 	bl	801f630 <fwrite>
 80160e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80160e8:	f008 f91e 	bl	801e328 <exit>
 80160ec:	4770      	bx	lr
 80160ee:	4b0c      	ldr	r3, [pc, #48]	; (8016120 <rosidl_runtime_c__String__fini+0x80>)
 80160f0:	224c      	movs	r2, #76	; 0x4c
 80160f2:	2101      	movs	r1, #1
 80160f4:	480c      	ldr	r0, [pc, #48]	; (8016128 <rosidl_runtime_c__String__fini+0x88>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	68db      	ldr	r3, [r3, #12]
 80160fa:	f009 fa99 	bl	801f630 <fwrite>
 80160fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016102:	f008 f911 	bl	801e328 <exit>
 8016106:	4b06      	ldr	r3, [pc, #24]	; (8016120 <rosidl_runtime_c__String__fini+0x80>)
 8016108:	224e      	movs	r2, #78	; 0x4e
 801610a:	2101      	movs	r1, #1
 801610c:	4807      	ldr	r0, [pc, #28]	; (801612c <rosidl_runtime_c__String__fini+0x8c>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	68db      	ldr	r3, [r3, #12]
 8016112:	f009 fa8d 	bl	801f630 <fwrite>
 8016116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801611a:	f008 f905 	bl	801e328 <exit>
 801611e:	bf00      	nop
 8016120:	200009a0 	.word	0x200009a0
 8016124:	080242dc 	.word	0x080242dc
 8016128:	0802423c 	.word	0x0802423c
 801612c:	0802428c 	.word	0x0802428c

08016130 <rosidl_runtime_c__String__assignn>:
 8016130:	2900      	cmp	r1, #0
 8016132:	bf18      	it	ne
 8016134:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 8016138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801613c:	bf0c      	ite	eq
 801613e:	2401      	moveq	r4, #1
 8016140:	2400      	movne	r4, #0
 8016142:	b087      	sub	sp, #28
 8016144:	2800      	cmp	r0, #0
 8016146:	bf08      	it	eq
 8016148:	f044 0401 	orreq.w	r4, r4, #1
 801614c:	b124      	cbz	r4, 8016158 <rosidl_runtime_c__String__assignn+0x28>
 801614e:	2400      	movs	r4, #0
 8016150:	4620      	mov	r0, r4
 8016152:	b007      	add	sp, #28
 8016154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016158:	4616      	mov	r6, r2
 801615a:	4605      	mov	r5, r0
 801615c:	a801      	add	r0, sp, #4
 801615e:	460f      	mov	r7, r1
 8016160:	f106 0901 	add.w	r9, r6, #1
 8016164:	f7fd fe7c 	bl	8013e60 <rcutils_get_default_allocator>
 8016168:	9b03      	ldr	r3, [sp, #12]
 801616a:	9a05      	ldr	r2, [sp, #20]
 801616c:	4649      	mov	r1, r9
 801616e:	6828      	ldr	r0, [r5, #0]
 8016170:	4798      	blx	r3
 8016172:	4680      	mov	r8, r0
 8016174:	2800      	cmp	r0, #0
 8016176:	d0eb      	beq.n	8016150 <rosidl_runtime_c__String__assignn+0x20>
 8016178:	4639      	mov	r1, r7
 801617a:	4632      	mov	r2, r6
 801617c:	f009 fddf 	bl	801fd3e <memcpy>
 8016180:	f808 4006 	strb.w	r4, [r8, r6]
 8016184:	2401      	movs	r4, #1
 8016186:	f8c5 9008 	str.w	r9, [r5, #8]
 801618a:	4620      	mov	r0, r4
 801618c:	e9c5 8600 	strd	r8, r6, [r5]
 8016190:	b007      	add	sp, #28
 8016192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016196:	bf00      	nop

08016198 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801619c:	6805      	ldr	r5, [r0, #0]
 801619e:	4604      	mov	r4, r0
 80161a0:	460e      	mov	r6, r1
 80161a2:	4628      	mov	r0, r5
 80161a4:	f7ea f84c 	bl	8000240 <strcmp>
 80161a8:	b1c8      	cbz	r0, 80161de <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80161aa:	4b11      	ldr	r3, [pc, #68]	; (80161f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	429d      	cmp	r5, r3
 80161b0:	d112      	bne.n	80161d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80161b2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80161b6:	f8d8 4000 	ldr.w	r4, [r8]
 80161ba:	b16c      	cbz	r4, 80161d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80161bc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80161c0:	2700      	movs	r7, #0
 80161c2:	3d04      	subs	r5, #4
 80161c4:	4631      	mov	r1, r6
 80161c6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80161ca:	f7ea f839 	bl	8000240 <strcmp>
 80161ce:	00bb      	lsls	r3, r7, #2
 80161d0:	b140      	cbz	r0, 80161e4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80161d2:	3701      	adds	r7, #1
 80161d4:	42bc      	cmp	r4, r7
 80161d6:	d1f5      	bne.n	80161c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80161d8:	2000      	movs	r0, #0
 80161da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161de:	4620      	mov	r0, r4
 80161e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80161e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161ec:	58d3      	ldr	r3, [r2, r3]
 80161ee:	4718      	bx	r3
 80161f0:	200008bc 	.word	0x200008bc

080161f4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80161f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f8:	6805      	ldr	r5, [r0, #0]
 80161fa:	4604      	mov	r4, r0
 80161fc:	460e      	mov	r6, r1
 80161fe:	4628      	mov	r0, r5
 8016200:	f7ea f81e 	bl	8000240 <strcmp>
 8016204:	b1c8      	cbz	r0, 801623a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8016206:	4b11      	ldr	r3, [pc, #68]	; (801624c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	429d      	cmp	r5, r3
 801620c:	d112      	bne.n	8016234 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801620e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016212:	f8d8 4000 	ldr.w	r4, [r8]
 8016216:	b16c      	cbz	r4, 8016234 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8016218:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801621c:	2700      	movs	r7, #0
 801621e:	3d04      	subs	r5, #4
 8016220:	4631      	mov	r1, r6
 8016222:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016226:	f7ea f80b 	bl	8000240 <strcmp>
 801622a:	00bb      	lsls	r3, r7, #2
 801622c:	b140      	cbz	r0, 8016240 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 801622e:	3701      	adds	r7, #1
 8016230:	42bc      	cmp	r4, r7
 8016232:	d1f5      	bne.n	8016220 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8016234:	2000      	movs	r0, #0
 8016236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801623a:	4620      	mov	r0, r4
 801623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016240:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016248:	58d3      	ldr	r3, [r2, r3]
 801624a:	4718      	bx	r3
 801624c:	200008bc 	.word	0x200008bc

08016250 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8016250:	4b04      	ldr	r3, [pc, #16]	; (8016264 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8016252:	681a      	ldr	r2, [r3, #0]
 8016254:	b10a      	cbz	r2, 801625a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 8016256:	4803      	ldr	r0, [pc, #12]	; (8016264 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8016258:	4770      	bx	lr
 801625a:	4a03      	ldr	r2, [pc, #12]	; (8016268 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 801625c:	4801      	ldr	r0, [pc, #4]	; (8016264 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801625e:	6812      	ldr	r2, [r2, #0]
 8016260:	601a      	str	r2, [r3, #0]
 8016262:	4770      	bx	lr
 8016264:	200008cc 	.word	0x200008cc
 8016268:	200008bc 	.word	0x200008bc

0801626c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 801626c:	4a02      	ldr	r2, [pc, #8]	; (8016278 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 801626e:	4b03      	ldr	r3, [pc, #12]	; (801627c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8016270:	6812      	ldr	r2, [r2, #0]
 8016272:	601a      	str	r2, [r3, #0]
 8016274:	4770      	bx	lr
 8016276:	bf00      	nop
 8016278:	200008bc 	.word	0x200008bc
 801627c:	200008cc 	.word	0x200008cc

08016280 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8016280:	f007 b83c 	b.w	801d2fc <std_msgs__msg__String__init>

08016284 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 8016284:	f007 b84c 	b.w	801d320 <std_msgs__msg__String__fini>

08016288 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 8016288:	4b04      	ldr	r3, [pc, #16]	; (801629c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801628a:	681a      	ldr	r2, [r3, #0]
 801628c:	b10a      	cbz	r2, 8016292 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801628e:	4803      	ldr	r0, [pc, #12]	; (801629c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8016290:	4770      	bx	lr
 8016292:	4a03      	ldr	r2, [pc, #12]	; (80162a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8016294:	4801      	ldr	r0, [pc, #4]	; (801629c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8016296:	6812      	ldr	r2, [r2, #0]
 8016298:	601a      	str	r2, [r3, #0]
 801629a:	4770      	bx	lr
 801629c:	20000914 	.word	0x20000914
 80162a0:	200008c0 	.word	0x200008c0

080162a4 <_String__max_serialized_size>:
 80162a4:	2000      	movs	r0, #0
 80162a6:	4770      	bx	lr

080162a8 <_String__cdr_serialize>:
 80162a8:	b1c8      	cbz	r0, 80162de <_String__cdr_serialize+0x36>
 80162aa:	b570      	push	{r4, r5, r6, lr}
 80162ac:	6806      	ldr	r6, [r0, #0]
 80162ae:	4604      	mov	r4, r0
 80162b0:	460d      	mov	r5, r1
 80162b2:	b15e      	cbz	r6, 80162cc <_String__cdr_serialize+0x24>
 80162b4:	4630      	mov	r0, r6
 80162b6:	f7ea f823 	bl	8000300 <strlen>
 80162ba:	4603      	mov	r3, r0
 80162bc:	1c42      	adds	r2, r0, #1
 80162be:	4631      	mov	r1, r6
 80162c0:	4628      	mov	r0, r5
 80162c2:	6063      	str	r3, [r4, #4]
 80162c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162c8:	f7fb bf76 	b.w	80121b8 <ucdr_serialize_sequence_char>
 80162cc:	4633      	mov	r3, r6
 80162ce:	4632      	mov	r2, r6
 80162d0:	4631      	mov	r1, r6
 80162d2:	4628      	mov	r0, r5
 80162d4:	6063      	str	r3, [r4, #4]
 80162d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162da:	f7fb bf6d 	b.w	80121b8 <ucdr_serialize_sequence_char>
 80162de:	4770      	bx	lr

080162e0 <get_serialized_size_std_msgs__msg__String>:
 80162e0:	b510      	push	{r4, lr}
 80162e2:	4604      	mov	r4, r0
 80162e4:	b130      	cbz	r0, 80162f4 <get_serialized_size_std_msgs__msg__String+0x14>
 80162e6:	4608      	mov	r0, r1
 80162e8:	2104      	movs	r1, #4
 80162ea:	f7fb fef5 	bl	80120d8 <ucdr_alignment>
 80162ee:	6863      	ldr	r3, [r4, #4]
 80162f0:	3305      	adds	r3, #5
 80162f2:	4418      	add	r0, r3
 80162f4:	bd10      	pop	{r4, pc}
 80162f6:	bf00      	nop

080162f8 <_String__cdr_deserialize>:
 80162f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162fa:	460c      	mov	r4, r1
 80162fc:	b083      	sub	sp, #12
 80162fe:	b1a1      	cbz	r1, 801632a <_String__cdr_deserialize+0x32>
 8016300:	688f      	ldr	r7, [r1, #8]
 8016302:	ab01      	add	r3, sp, #4
 8016304:	6809      	ldr	r1, [r1, #0]
 8016306:	4606      	mov	r6, r0
 8016308:	463a      	mov	r2, r7
 801630a:	f7fb ff67 	bl	80121dc <ucdr_deserialize_sequence_char>
 801630e:	9b01      	ldr	r3, [sp, #4]
 8016310:	4605      	mov	r5, r0
 8016312:	b920      	cbnz	r0, 801631e <_String__cdr_deserialize+0x26>
 8016314:	429f      	cmp	r7, r3
 8016316:	d30c      	bcc.n	8016332 <_String__cdr_deserialize+0x3a>
 8016318:	4628      	mov	r0, r5
 801631a:	b003      	add	sp, #12
 801631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801631e:	b103      	cbz	r3, 8016322 <_String__cdr_deserialize+0x2a>
 8016320:	3b01      	subs	r3, #1
 8016322:	4628      	mov	r0, r5
 8016324:	6063      	str	r3, [r4, #4]
 8016326:	b003      	add	sp, #12
 8016328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801632a:	460d      	mov	r5, r1
 801632c:	4628      	mov	r0, r5
 801632e:	b003      	add	sp, #12
 8016330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016332:	2101      	movs	r1, #1
 8016334:	4630      	mov	r0, r6
 8016336:	75b5      	strb	r5, [r6, #22]
 8016338:	7571      	strb	r1, [r6, #21]
 801633a:	6065      	str	r5, [r4, #4]
 801633c:	f7fb fee4 	bl	8012108 <ucdr_align_to>
 8016340:	4630      	mov	r0, r6
 8016342:	9901      	ldr	r1, [sp, #4]
 8016344:	f7fb ff18 	bl	8012178 <ucdr_advance_buffer>
 8016348:	4628      	mov	r0, r5
 801634a:	b003      	add	sp, #12
 801634c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801634e:	bf00      	nop

08016350 <_String__get_serialized_size>:
 8016350:	b510      	push	{r4, lr}
 8016352:	4604      	mov	r4, r0
 8016354:	b130      	cbz	r0, 8016364 <_String__get_serialized_size+0x14>
 8016356:	2104      	movs	r1, #4
 8016358:	2000      	movs	r0, #0
 801635a:	f7fb febd 	bl	80120d8 <ucdr_alignment>
 801635e:	6863      	ldr	r3, [r4, #4]
 8016360:	3305      	adds	r3, #5
 8016362:	4418      	add	r0, r3
 8016364:	bd10      	pop	{r4, pc}
 8016366:	bf00      	nop

08016368 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8016368:	4800      	ldr	r0, [pc, #0]	; (801636c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 801636a:	4770      	bx	lr
 801636c:	20000920 	.word	0x20000920

08016370 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 8016370:	3800      	subs	r0, #0
 8016372:	bf18      	it	ne
 8016374:	2001      	movne	r0, #1
 8016376:	4770      	bx	lr

08016378 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 8016378:	4770      	bx	lr
 801637a:	bf00      	nop

0801637c <custom_test_msgs__srv__AddThreeInts_Response__init>:
 801637c:	3800      	subs	r0, #0
 801637e:	bf18      	it	ne
 8016380:	2001      	movne	r0, #1
 8016382:	4770      	bx	lr

08016384 <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 8016384:	4770      	bx	lr
 8016386:	bf00      	nop

08016388 <drive_msgs__msg__Omni__init>:
 8016388:	b538      	push	{r3, r4, r5, lr}
 801638a:	4604      	mov	r4, r0
 801638c:	b128      	cbz	r0, 801639a <drive_msgs__msg__Omni__init+0x12>
 801638e:	f7ff fe71 	bl	8016074 <rosidl_runtime_c__String__init>
 8016392:	4605      	mov	r5, r0
 8016394:	b120      	cbz	r0, 80163a0 <drive_msgs__msg__Omni__init+0x18>
 8016396:	4628      	mov	r0, r5
 8016398:	bd38      	pop	{r3, r4, r5, pc}
 801639a:	4605      	mov	r5, r0
 801639c:	4628      	mov	r0, r5
 801639e:	bd38      	pop	{r3, r4, r5, pc}
 80163a0:	4620      	mov	r0, r4
 80163a2:	f7ff fe7d 	bl	80160a0 <rosidl_runtime_c__String__fini>
 80163a6:	4628      	mov	r0, r5
 80163a8:	bd38      	pop	{r3, r4, r5, pc}
 80163aa:	bf00      	nop

080163ac <drive_msgs__msg__Omni__fini>:
 80163ac:	b108      	cbz	r0, 80163b2 <drive_msgs__msg__Omni__fini+0x6>
 80163ae:	f7ff be77 	b.w	80160a0 <rosidl_runtime_c__String__fini>
 80163b2:	4770      	bx	lr

080163b4 <drive_msgs__msg__OmniEnc__init>:
 80163b4:	b538      	push	{r3, r4, r5, lr}
 80163b6:	4604      	mov	r4, r0
 80163b8:	b128      	cbz	r0, 80163c6 <drive_msgs__msg__OmniEnc__init+0x12>
 80163ba:	f7ff fe5b 	bl	8016074 <rosidl_runtime_c__String__init>
 80163be:	4605      	mov	r5, r0
 80163c0:	b120      	cbz	r0, 80163cc <drive_msgs__msg__OmniEnc__init+0x18>
 80163c2:	4628      	mov	r0, r5
 80163c4:	bd38      	pop	{r3, r4, r5, pc}
 80163c6:	4605      	mov	r5, r0
 80163c8:	4628      	mov	r0, r5
 80163ca:	bd38      	pop	{r3, r4, r5, pc}
 80163cc:	4620      	mov	r0, r4
 80163ce:	f7ff fe67 	bl	80160a0 <rosidl_runtime_c__String__fini>
 80163d2:	4628      	mov	r0, r5
 80163d4:	bd38      	pop	{r3, r4, r5, pc}
 80163d6:	bf00      	nop

080163d8 <drive_msgs__msg__OmniEnc__fini>:
 80163d8:	b108      	cbz	r0, 80163de <drive_msgs__msg__OmniEnc__fini+0x6>
 80163da:	f7ff be61 	b.w	80160a0 <rosidl_runtime_c__String__fini>
 80163de:	4770      	bx	lr

080163e0 <manip_msgs__msg__Cmd__init>:
 80163e0:	3800      	subs	r0, #0
 80163e2:	bf18      	it	ne
 80163e4:	2001      	movne	r0, #1
 80163e6:	4770      	bx	lr

080163e8 <manip_msgs__msg__Cmd__fini>:
 80163e8:	4770      	bx	lr
 80163ea:	bf00      	nop

080163ec <ucdr_serialize_endian_array_char>:
 80163ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163f0:	4619      	mov	r1, r3
 80163f2:	461f      	mov	r7, r3
 80163f4:	4605      	mov	r5, r0
 80163f6:	4690      	mov	r8, r2
 80163f8:	f7fb fe16 	bl	8012028 <ucdr_check_buffer_available_for>
 80163fc:	b9e0      	cbnz	r0, 8016438 <ucdr_serialize_endian_array_char+0x4c>
 80163fe:	463e      	mov	r6, r7
 8016400:	e00b      	b.n	801641a <ucdr_serialize_endian_array_char+0x2e>
 8016402:	4441      	add	r1, r8
 8016404:	68a8      	ldr	r0, [r5, #8]
 8016406:	4622      	mov	r2, r4
 8016408:	1b36      	subs	r6, r6, r4
 801640a:	f009 fc98 	bl	801fd3e <memcpy>
 801640e:	68ab      	ldr	r3, [r5, #8]
 8016410:	6928      	ldr	r0, [r5, #16]
 8016412:	4423      	add	r3, r4
 8016414:	4420      	add	r0, r4
 8016416:	60ab      	str	r3, [r5, #8]
 8016418:	6128      	str	r0, [r5, #16]
 801641a:	4631      	mov	r1, r6
 801641c:	2201      	movs	r2, #1
 801641e:	4628      	mov	r0, r5
 8016420:	f7fb fe8c 	bl	801213c <ucdr_check_final_buffer_behavior_array>
 8016424:	1bb9      	subs	r1, r7, r6
 8016426:	4604      	mov	r4, r0
 8016428:	2800      	cmp	r0, #0
 801642a:	d1ea      	bne.n	8016402 <ucdr_serialize_endian_array_char+0x16>
 801642c:	2301      	movs	r3, #1
 801642e:	7da8      	ldrb	r0, [r5, #22]
 8016430:	756b      	strb	r3, [r5, #21]
 8016432:	4058      	eors	r0, r3
 8016434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016438:	463a      	mov	r2, r7
 801643a:	4641      	mov	r1, r8
 801643c:	68a8      	ldr	r0, [r5, #8]
 801643e:	f009 fc7e 	bl	801fd3e <memcpy>
 8016442:	68aa      	ldr	r2, [r5, #8]
 8016444:	692b      	ldr	r3, [r5, #16]
 8016446:	443a      	add	r2, r7
 8016448:	443b      	add	r3, r7
 801644a:	60aa      	str	r2, [r5, #8]
 801644c:	612b      	str	r3, [r5, #16]
 801644e:	e7ed      	b.n	801642c <ucdr_serialize_endian_array_char+0x40>

08016450 <ucdr_deserialize_endian_array_char>:
 8016450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016454:	4619      	mov	r1, r3
 8016456:	461f      	mov	r7, r3
 8016458:	4605      	mov	r5, r0
 801645a:	4690      	mov	r8, r2
 801645c:	f7fb fde4 	bl	8012028 <ucdr_check_buffer_available_for>
 8016460:	b9e8      	cbnz	r0, 801649e <ucdr_deserialize_endian_array_char+0x4e>
 8016462:	463e      	mov	r6, r7
 8016464:	e00c      	b.n	8016480 <ucdr_deserialize_endian_array_char+0x30>
 8016466:	eb08 0003 	add.w	r0, r8, r3
 801646a:	68a9      	ldr	r1, [r5, #8]
 801646c:	4622      	mov	r2, r4
 801646e:	1b36      	subs	r6, r6, r4
 8016470:	f009 fc65 	bl	801fd3e <memcpy>
 8016474:	68ab      	ldr	r3, [r5, #8]
 8016476:	6928      	ldr	r0, [r5, #16]
 8016478:	4423      	add	r3, r4
 801647a:	4420      	add	r0, r4
 801647c:	60ab      	str	r3, [r5, #8]
 801647e:	6128      	str	r0, [r5, #16]
 8016480:	4631      	mov	r1, r6
 8016482:	2201      	movs	r2, #1
 8016484:	4628      	mov	r0, r5
 8016486:	f7fb fe59 	bl	801213c <ucdr_check_final_buffer_behavior_array>
 801648a:	1bbb      	subs	r3, r7, r6
 801648c:	4604      	mov	r4, r0
 801648e:	2800      	cmp	r0, #0
 8016490:	d1e9      	bne.n	8016466 <ucdr_deserialize_endian_array_char+0x16>
 8016492:	2301      	movs	r3, #1
 8016494:	7da8      	ldrb	r0, [r5, #22]
 8016496:	756b      	strb	r3, [r5, #21]
 8016498:	4058      	eors	r0, r3
 801649a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801649e:	463a      	mov	r2, r7
 80164a0:	68a9      	ldr	r1, [r5, #8]
 80164a2:	4640      	mov	r0, r8
 80164a4:	f009 fc4b 	bl	801fd3e <memcpy>
 80164a8:	68aa      	ldr	r2, [r5, #8]
 80164aa:	692b      	ldr	r3, [r5, #16]
 80164ac:	443a      	add	r2, r7
 80164ae:	443b      	add	r3, r7
 80164b0:	60aa      	str	r2, [r5, #8]
 80164b2:	612b      	str	r3, [r5, #16]
 80164b4:	e7ed      	b.n	8016492 <ucdr_deserialize_endian_array_char+0x42>
 80164b6:	bf00      	nop

080164b8 <ucdr_serialize_array_uint8_t>:
 80164b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164bc:	4688      	mov	r8, r1
 80164be:	4611      	mov	r1, r2
 80164c0:	4617      	mov	r7, r2
 80164c2:	4605      	mov	r5, r0
 80164c4:	f7fb fdb0 	bl	8012028 <ucdr_check_buffer_available_for>
 80164c8:	b9e0      	cbnz	r0, 8016504 <ucdr_serialize_array_uint8_t+0x4c>
 80164ca:	463e      	mov	r6, r7
 80164cc:	e00b      	b.n	80164e6 <ucdr_serialize_array_uint8_t+0x2e>
 80164ce:	4441      	add	r1, r8
 80164d0:	68a8      	ldr	r0, [r5, #8]
 80164d2:	4622      	mov	r2, r4
 80164d4:	1b36      	subs	r6, r6, r4
 80164d6:	f009 fc32 	bl	801fd3e <memcpy>
 80164da:	68ab      	ldr	r3, [r5, #8]
 80164dc:	6928      	ldr	r0, [r5, #16]
 80164de:	4423      	add	r3, r4
 80164e0:	4420      	add	r0, r4
 80164e2:	60ab      	str	r3, [r5, #8]
 80164e4:	6128      	str	r0, [r5, #16]
 80164e6:	4631      	mov	r1, r6
 80164e8:	2201      	movs	r2, #1
 80164ea:	4628      	mov	r0, r5
 80164ec:	f7fb fe26 	bl	801213c <ucdr_check_final_buffer_behavior_array>
 80164f0:	1bb9      	subs	r1, r7, r6
 80164f2:	4604      	mov	r4, r0
 80164f4:	2800      	cmp	r0, #0
 80164f6:	d1ea      	bne.n	80164ce <ucdr_serialize_array_uint8_t+0x16>
 80164f8:	2301      	movs	r3, #1
 80164fa:	7da8      	ldrb	r0, [r5, #22]
 80164fc:	756b      	strb	r3, [r5, #21]
 80164fe:	4058      	eors	r0, r3
 8016500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016504:	463a      	mov	r2, r7
 8016506:	4641      	mov	r1, r8
 8016508:	68a8      	ldr	r0, [r5, #8]
 801650a:	f009 fc18 	bl	801fd3e <memcpy>
 801650e:	68aa      	ldr	r2, [r5, #8]
 8016510:	692b      	ldr	r3, [r5, #16]
 8016512:	443a      	add	r2, r7
 8016514:	443b      	add	r3, r7
 8016516:	60aa      	str	r2, [r5, #8]
 8016518:	612b      	str	r3, [r5, #16]
 801651a:	e7ed      	b.n	80164f8 <ucdr_serialize_array_uint8_t+0x40>

0801651c <ucdr_serialize_endian_array_uint8_t>:
 801651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016520:	4619      	mov	r1, r3
 8016522:	461f      	mov	r7, r3
 8016524:	4605      	mov	r5, r0
 8016526:	4690      	mov	r8, r2
 8016528:	f7fb fd7e 	bl	8012028 <ucdr_check_buffer_available_for>
 801652c:	b9e0      	cbnz	r0, 8016568 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801652e:	463e      	mov	r6, r7
 8016530:	e00b      	b.n	801654a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8016532:	4441      	add	r1, r8
 8016534:	68a8      	ldr	r0, [r5, #8]
 8016536:	4622      	mov	r2, r4
 8016538:	1b36      	subs	r6, r6, r4
 801653a:	f009 fc00 	bl	801fd3e <memcpy>
 801653e:	68ab      	ldr	r3, [r5, #8]
 8016540:	6928      	ldr	r0, [r5, #16]
 8016542:	4423      	add	r3, r4
 8016544:	4420      	add	r0, r4
 8016546:	60ab      	str	r3, [r5, #8]
 8016548:	6128      	str	r0, [r5, #16]
 801654a:	4631      	mov	r1, r6
 801654c:	2201      	movs	r2, #1
 801654e:	4628      	mov	r0, r5
 8016550:	f7fb fdf4 	bl	801213c <ucdr_check_final_buffer_behavior_array>
 8016554:	1bb9      	subs	r1, r7, r6
 8016556:	4604      	mov	r4, r0
 8016558:	2800      	cmp	r0, #0
 801655a:	d1ea      	bne.n	8016532 <ucdr_serialize_endian_array_uint8_t+0x16>
 801655c:	2301      	movs	r3, #1
 801655e:	7da8      	ldrb	r0, [r5, #22]
 8016560:	756b      	strb	r3, [r5, #21]
 8016562:	4058      	eors	r0, r3
 8016564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016568:	463a      	mov	r2, r7
 801656a:	4641      	mov	r1, r8
 801656c:	68a8      	ldr	r0, [r5, #8]
 801656e:	f009 fbe6 	bl	801fd3e <memcpy>
 8016572:	68aa      	ldr	r2, [r5, #8]
 8016574:	692b      	ldr	r3, [r5, #16]
 8016576:	443a      	add	r2, r7
 8016578:	443b      	add	r3, r7
 801657a:	60aa      	str	r2, [r5, #8]
 801657c:	612b      	str	r3, [r5, #16]
 801657e:	e7ed      	b.n	801655c <ucdr_serialize_endian_array_uint8_t+0x40>

08016580 <ucdr_deserialize_array_uint8_t>:
 8016580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016584:	4688      	mov	r8, r1
 8016586:	4611      	mov	r1, r2
 8016588:	4617      	mov	r7, r2
 801658a:	4605      	mov	r5, r0
 801658c:	f7fb fd4c 	bl	8012028 <ucdr_check_buffer_available_for>
 8016590:	b9e8      	cbnz	r0, 80165ce <ucdr_deserialize_array_uint8_t+0x4e>
 8016592:	463e      	mov	r6, r7
 8016594:	e00c      	b.n	80165b0 <ucdr_deserialize_array_uint8_t+0x30>
 8016596:	eb08 0003 	add.w	r0, r8, r3
 801659a:	68a9      	ldr	r1, [r5, #8]
 801659c:	4622      	mov	r2, r4
 801659e:	1b36      	subs	r6, r6, r4
 80165a0:	f009 fbcd 	bl	801fd3e <memcpy>
 80165a4:	68ab      	ldr	r3, [r5, #8]
 80165a6:	6928      	ldr	r0, [r5, #16]
 80165a8:	4423      	add	r3, r4
 80165aa:	4420      	add	r0, r4
 80165ac:	60ab      	str	r3, [r5, #8]
 80165ae:	6128      	str	r0, [r5, #16]
 80165b0:	4631      	mov	r1, r6
 80165b2:	2201      	movs	r2, #1
 80165b4:	4628      	mov	r0, r5
 80165b6:	f7fb fdc1 	bl	801213c <ucdr_check_final_buffer_behavior_array>
 80165ba:	1bbb      	subs	r3, r7, r6
 80165bc:	4604      	mov	r4, r0
 80165be:	2800      	cmp	r0, #0
 80165c0:	d1e9      	bne.n	8016596 <ucdr_deserialize_array_uint8_t+0x16>
 80165c2:	2301      	movs	r3, #1
 80165c4:	7da8      	ldrb	r0, [r5, #22]
 80165c6:	756b      	strb	r3, [r5, #21]
 80165c8:	4058      	eors	r0, r3
 80165ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165ce:	463a      	mov	r2, r7
 80165d0:	68a9      	ldr	r1, [r5, #8]
 80165d2:	4640      	mov	r0, r8
 80165d4:	f009 fbb3 	bl	801fd3e <memcpy>
 80165d8:	68aa      	ldr	r2, [r5, #8]
 80165da:	692b      	ldr	r3, [r5, #16]
 80165dc:	443a      	add	r2, r7
 80165de:	443b      	add	r3, r7
 80165e0:	60aa      	str	r2, [r5, #8]
 80165e2:	612b      	str	r3, [r5, #16]
 80165e4:	e7ed      	b.n	80165c2 <ucdr_deserialize_array_uint8_t+0x42>
 80165e6:	bf00      	nop

080165e8 <ucdr_deserialize_endian_array_uint8_t>:
 80165e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165ec:	4619      	mov	r1, r3
 80165ee:	461f      	mov	r7, r3
 80165f0:	4605      	mov	r5, r0
 80165f2:	4690      	mov	r8, r2
 80165f4:	f7fb fd18 	bl	8012028 <ucdr_check_buffer_available_for>
 80165f8:	b9e8      	cbnz	r0, 8016636 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 80165fa:	463e      	mov	r6, r7
 80165fc:	e00c      	b.n	8016618 <ucdr_deserialize_endian_array_uint8_t+0x30>
 80165fe:	eb08 0003 	add.w	r0, r8, r3
 8016602:	68a9      	ldr	r1, [r5, #8]
 8016604:	4622      	mov	r2, r4
 8016606:	1b36      	subs	r6, r6, r4
 8016608:	f009 fb99 	bl	801fd3e <memcpy>
 801660c:	68ab      	ldr	r3, [r5, #8]
 801660e:	6928      	ldr	r0, [r5, #16]
 8016610:	4423      	add	r3, r4
 8016612:	4420      	add	r0, r4
 8016614:	60ab      	str	r3, [r5, #8]
 8016616:	6128      	str	r0, [r5, #16]
 8016618:	4631      	mov	r1, r6
 801661a:	2201      	movs	r2, #1
 801661c:	4628      	mov	r0, r5
 801661e:	f7fb fd8d 	bl	801213c <ucdr_check_final_buffer_behavior_array>
 8016622:	1bbb      	subs	r3, r7, r6
 8016624:	4604      	mov	r4, r0
 8016626:	2800      	cmp	r0, #0
 8016628:	d1e9      	bne.n	80165fe <ucdr_deserialize_endian_array_uint8_t+0x16>
 801662a:	2301      	movs	r3, #1
 801662c:	7da8      	ldrb	r0, [r5, #22]
 801662e:	756b      	strb	r3, [r5, #21]
 8016630:	4058      	eors	r0, r3
 8016632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016636:	463a      	mov	r2, r7
 8016638:	68a9      	ldr	r1, [r5, #8]
 801663a:	4640      	mov	r0, r8
 801663c:	f009 fb7f 	bl	801fd3e <memcpy>
 8016640:	68aa      	ldr	r2, [r5, #8]
 8016642:	692b      	ldr	r3, [r5, #16]
 8016644:	443a      	add	r2, r7
 8016646:	443b      	add	r3, r7
 8016648:	60aa      	str	r2, [r5, #8]
 801664a:	612b      	str	r3, [r5, #16]
 801664c:	e7ed      	b.n	801662a <ucdr_deserialize_endian_array_uint8_t+0x42>
 801664e:	bf00      	nop

08016650 <uxr_buffer_delete_entity>:
 8016650:	b510      	push	{r4, lr}
 8016652:	2300      	movs	r3, #0
 8016654:	b08e      	sub	sp, #56	; 0x38
 8016656:	4604      	mov	r4, r0
 8016658:	9103      	str	r1, [sp, #12]
 801665a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801665e:	2303      	movs	r3, #3
 8016660:	2204      	movs	r2, #4
 8016662:	9300      	str	r3, [sp, #0]
 8016664:	ab06      	add	r3, sp, #24
 8016666:	f001 fb77 	bl	8017d58 <uxr_prepare_stream_to_write_submessage>
 801666a:	b918      	cbnz	r0, 8016674 <uxr_buffer_delete_entity+0x24>
 801666c:	4604      	mov	r4, r0
 801666e:	4620      	mov	r0, r4
 8016670:	b00e      	add	sp, #56	; 0x38
 8016672:	bd10      	pop	{r4, pc}
 8016674:	9902      	ldr	r1, [sp, #8]
 8016676:	aa05      	add	r2, sp, #20
 8016678:	4620      	mov	r0, r4
 801667a:	f001 fca9 	bl	8017fd0 <uxr_init_base_object_request>
 801667e:	4604      	mov	r4, r0
 8016680:	a905      	add	r1, sp, #20
 8016682:	a806      	add	r0, sp, #24
 8016684:	f003 fbae 	bl	8019de4 <uxr_serialize_DELETE_Payload>
 8016688:	4620      	mov	r0, r4
 801668a:	b00e      	add	sp, #56	; 0x38
 801668c:	bd10      	pop	{r4, pc}
 801668e:	bf00      	nop

08016690 <uxr_common_create_entity>:
 8016690:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016694:	b510      	push	{r4, lr}
 8016696:	f1bc 0f01 	cmp.w	ip, #1
 801669a:	b08c      	sub	sp, #48	; 0x30
 801669c:	4604      	mov	r4, r0
 801669e:	9202      	str	r2, [sp, #8]
 80166a0:	bf0c      	ite	eq
 80166a2:	f003 0201 	andeq.w	r2, r3, #1
 80166a6:	2200      	movne	r2, #0
 80166a8:	330e      	adds	r3, #14
 80166aa:	9103      	str	r1, [sp, #12]
 80166ac:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80166b0:	441a      	add	r2, r3
 80166b2:	ab04      	add	r3, sp, #16
 80166b4:	9101      	str	r1, [sp, #4]
 80166b6:	2101      	movs	r1, #1
 80166b8:	b292      	uxth	r2, r2
 80166ba:	9100      	str	r1, [sp, #0]
 80166bc:	9903      	ldr	r1, [sp, #12]
 80166be:	f001 fb4b 	bl	8017d58 <uxr_prepare_stream_to_write_submessage>
 80166c2:	b918      	cbnz	r0, 80166cc <uxr_common_create_entity+0x3c>
 80166c4:	4604      	mov	r4, r0
 80166c6:	4620      	mov	r0, r4
 80166c8:	b00c      	add	sp, #48	; 0x30
 80166ca:	bd10      	pop	{r4, pc}
 80166cc:	9902      	ldr	r1, [sp, #8]
 80166ce:	4620      	mov	r0, r4
 80166d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166d2:	f001 fc7d 	bl	8017fd0 <uxr_init_base_object_request>
 80166d6:	4604      	mov	r4, r0
 80166d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80166da:	a804      	add	r0, sp, #16
 80166dc:	f003 fadc 	bl	8019c98 <uxr_serialize_CREATE_Payload>
 80166e0:	4620      	mov	r0, r4
 80166e2:	b00c      	add	sp, #48	; 0x30
 80166e4:	bd10      	pop	{r4, pc}
 80166e6:	bf00      	nop

080166e8 <uxr_buffer_create_participant_bin>:
 80166e8:	b570      	push	{r4, r5, r6, lr}
 80166ea:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80166ee:	4605      	mov	r5, r0
 80166f0:	ac11      	add	r4, sp, #68	; 0x44
 80166f2:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 80166f6:	2303      	movs	r3, #3
 80166f8:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 80166fc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016700:	7223      	strb	r3, [r4, #8]
 8016702:	2300      	movs	r3, #0
 8016704:	2201      	movs	r2, #1
 8016706:	f88d 3014 	strb.w	r3, [sp, #20]
 801670a:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 801670c:	7122      	strb	r2, [r4, #4]
 801670e:	b1cb      	cbz	r3, 8016744 <uxr_buffer_create_participant_bin+0x5c>
 8016710:	f88d 201c 	strb.w	r2, [sp, #28]
 8016714:	9308      	str	r3, [sp, #32]
 8016716:	f44f 7200 	mov.w	r2, #512	; 0x200
 801671a:	a915      	add	r1, sp, #84	; 0x54
 801671c:	a809      	add	r0, sp, #36	; 0x24
 801671e:	f7fb fcd7 	bl	80120d0 <ucdr_init_buffer>
 8016722:	a905      	add	r1, sp, #20
 8016724:	a809      	add	r0, sp, #36	; 0x24
 8016726:	f002 fe6d 	bl	8019404 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801672a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801672c:	9600      	str	r6, [sp, #0]
 801672e:	4628      	mov	r0, r5
 8016730:	9401      	str	r4, [sp, #4]
 8016732:	60e3      	str	r3, [r4, #12]
 8016734:	b29b      	uxth	r3, r3
 8016736:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801673a:	f7ff ffa9 	bl	8016690 <uxr_common_create_entity>
 801673e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8016742:	bd70      	pop	{r4, r5, r6, pc}
 8016744:	f88d 301c 	strb.w	r3, [sp, #28]
 8016748:	e7e5      	b.n	8016716 <uxr_buffer_create_participant_bin+0x2e>
 801674a:	bf00      	nop

0801674c <uxr_buffer_create_topic_bin>:
 801674c:	b570      	push	{r4, r5, r6, lr}
 801674e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8016752:	4605      	mov	r5, r0
 8016754:	4618      	mov	r0, r3
 8016756:	9105      	str	r1, [sp, #20]
 8016758:	a997      	add	r1, sp, #604	; 0x25c
 801675a:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 801675e:	ac13      	add	r4, sp, #76	; 0x4c
 8016760:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016764:	2302      	movs	r3, #2
 8016766:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 801676a:	f000 fa8d 	bl	8016c88 <uxr_object_id_to_raw>
 801676e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8016770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016774:	a917      	add	r1, sp, #92	; 0x5c
 8016776:	a80b      	add	r0, sp, #44	; 0x2c
 8016778:	9306      	str	r3, [sp, #24]
 801677a:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 801677c:	930a      	str	r3, [sp, #40]	; 0x28
 801677e:	2303      	movs	r3, #3
 8016780:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8016784:	2301      	movs	r3, #1
 8016786:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801678a:	2300      	movs	r3, #0
 801678c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016790:	f7fb fc9e 	bl	80120d0 <ucdr_init_buffer>
 8016794:	a906      	add	r1, sp, #24
 8016796:	a80b      	add	r0, sp, #44	; 0x2c
 8016798:	f002 fe56 	bl	8019448 <uxr_serialize_OBJK_Topic_Binary>
 801679c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801679e:	4628      	mov	r0, r5
 80167a0:	9600      	str	r6, [sp, #0]
 80167a2:	9316      	str	r3, [sp, #88]	; 0x58
 80167a4:	b29b      	uxth	r3, r3
 80167a6:	9401      	str	r4, [sp, #4]
 80167a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80167ac:	f7ff ff70 	bl	8016690 <uxr_common_create_entity>
 80167b0:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80167b4:	bd70      	pop	{r4, r5, r6, pc}
 80167b6:	bf00      	nop

080167b8 <uxr_buffer_create_publisher_bin>:
 80167b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ba:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80167be:	2603      	movs	r6, #3
 80167c0:	4605      	mov	r5, r0
 80167c2:	4618      	mov	r0, r3
 80167c4:	9105      	str	r1, [sp, #20]
 80167c6:	a992      	add	r1, sp, #584	; 0x248
 80167c8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80167cc:	ac0e      	add	r4, sp, #56	; 0x38
 80167ce:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80167d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80167d6:	f000 fa57 	bl	8016c88 <uxr_object_id_to_raw>
 80167da:	2300      	movs	r3, #0
 80167dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80167e0:	a912      	add	r1, sp, #72	; 0x48
 80167e2:	a806      	add	r0, sp, #24
 80167e4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80167e8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80167ec:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 80167f0:	f7fb fc6e 	bl	80120d0 <ucdr_init_buffer>
 80167f4:	a993      	add	r1, sp, #588	; 0x24c
 80167f6:	a806      	add	r0, sp, #24
 80167f8:	f002 feda 	bl	80195b0 <uxr_serialize_OBJK_Publisher_Binary>
 80167fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167fe:	4628      	mov	r0, r5
 8016800:	9700      	str	r7, [sp, #0]
 8016802:	9311      	str	r3, [sp, #68]	; 0x44
 8016804:	b29b      	uxth	r3, r3
 8016806:	9401      	str	r4, [sp, #4]
 8016808:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801680c:	f7ff ff40 	bl	8016690 <uxr_common_create_entity>
 8016810:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8016814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016816:	bf00      	nop

08016818 <uxr_buffer_create_subscriber_bin>:
 8016818:	b570      	push	{r4, r5, r6, lr}
 801681a:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 801681e:	4605      	mov	r5, r0
 8016820:	4618      	mov	r0, r3
 8016822:	9105      	str	r1, [sp, #20]
 8016824:	a992      	add	r1, sp, #584	; 0x248
 8016826:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 801682a:	ac0e      	add	r4, sp, #56	; 0x38
 801682c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016830:	2304      	movs	r3, #4
 8016832:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8016836:	f000 fa27 	bl	8016c88 <uxr_object_id_to_raw>
 801683a:	2300      	movs	r3, #0
 801683c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016840:	a912      	add	r1, sp, #72	; 0x48
 8016842:	a806      	add	r0, sp, #24
 8016844:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8016848:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 801684c:	2303      	movs	r3, #3
 801684e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8016852:	f7fb fc3d 	bl	80120d0 <ucdr_init_buffer>
 8016856:	a993      	add	r1, sp, #588	; 0x24c
 8016858:	a806      	add	r0, sp, #24
 801685a:	f002 ff59 	bl	8019710 <uxr_serialize_OBJK_Subscriber_Binary>
 801685e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016860:	4628      	mov	r0, r5
 8016862:	9600      	str	r6, [sp, #0]
 8016864:	9311      	str	r3, [sp, #68]	; 0x44
 8016866:	b29b      	uxth	r3, r3
 8016868:	9401      	str	r4, [sp, #4]
 801686a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801686e:	f7ff ff0f 	bl	8016690 <uxr_common_create_entity>
 8016872:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8016876:	bd70      	pop	{r4, r5, r6, pc}

08016878 <uxr_buffer_create_datawriter_bin>:
 8016878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801687c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016880:	4606      	mov	r6, r0
 8016882:	4618      	mov	r0, r3
 8016884:	2703      	movs	r7, #3
 8016886:	ac1d      	add	r4, sp, #116	; 0x74
 8016888:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 801688c:	9105      	str	r1, [sp, #20]
 801688e:	a9a1      	add	r1, sp, #644	; 0x284
 8016890:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8016894:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016898:	2305      	movs	r3, #5
 801689a:	7123      	strb	r3, [r4, #4]
 801689c:	f000 f9f4 	bl	8016c88 <uxr_object_id_to_raw>
 80168a0:	a90e      	add	r1, sp, #56	; 0x38
 80168a2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80168a4:	7227      	strb	r7, [r4, #8]
 80168a6:	f000 f9ef 	bl	8016c88 <uxr_object_id_to_raw>
 80168aa:	2300      	movs	r3, #0
 80168ac:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80168b0:	3d00      	subs	r5, #0
 80168b2:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 80168b6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80168ba:	bf18      	it	ne
 80168bc:	2501      	movne	r5, #1
 80168be:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80168c2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80168c6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80168ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80168ce:	2301      	movs	r3, #1
 80168d0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80168d4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80168d8:	bb8a      	cbnz	r2, 801693e <uxr_buffer_create_datawriter_bin+0xc6>
 80168da:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80168de:	f04f 0c13 	mov.w	ip, #19
 80168e2:	250b      	movs	r5, #11
 80168e4:	2221      	movs	r2, #33	; 0x21
 80168e6:	2111      	movs	r1, #17
 80168e8:	2009      	movs	r0, #9
 80168ea:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80168ee:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 80168f2:	b923      	cbnz	r3, 80168fe <uxr_buffer_create_datawriter_bin+0x86>
 80168f4:	4672      	mov	r2, lr
 80168f6:	4661      	mov	r1, ip
 80168f8:	4628      	mov	r0, r5
 80168fa:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80168fe:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8016902:	2b01      	cmp	r3, #1
 8016904:	d025      	beq.n	8016952 <uxr_buffer_create_datawriter_bin+0xda>
 8016906:	2b03      	cmp	r3, #3
 8016908:	d029      	beq.n	801695e <uxr_buffer_create_datawriter_bin+0xe6>
 801690a:	b32b      	cbz	r3, 8016958 <uxr_buffer_create_datawriter_bin+0xe0>
 801690c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016910:	a921      	add	r1, sp, #132	; 0x84
 8016912:	a806      	add	r0, sp, #24
 8016914:	f7fb fbdc 	bl	80120d0 <ucdr_init_buffer>
 8016918:	a90e      	add	r1, sp, #56	; 0x38
 801691a:	a806      	add	r0, sp, #24
 801691c:	f002 ffaa 	bl	8019874 <uxr_serialize_OBJK_DataWriter_Binary>
 8016920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016922:	f8cd 8000 	str.w	r8, [sp]
 8016926:	4630      	mov	r0, r6
 8016928:	9401      	str	r4, [sp, #4]
 801692a:	60e3      	str	r3, [r4, #12]
 801692c:	b29b      	uxth	r3, r3
 801692e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016932:	f7ff fead 	bl	8016690 <uxr_common_create_entity>
 8016936:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801693e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8016942:	f04f 0c12 	mov.w	ip, #18
 8016946:	250a      	movs	r5, #10
 8016948:	2220      	movs	r2, #32
 801694a:	2110      	movs	r1, #16
 801694c:	2008      	movs	r0, #8
 801694e:	2702      	movs	r7, #2
 8016950:	e7cd      	b.n	80168ee <uxr_buffer_create_datawriter_bin+0x76>
 8016952:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8016956:	e7d9      	b.n	801690c <uxr_buffer_create_datawriter_bin+0x94>
 8016958:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801695c:	e7d6      	b.n	801690c <uxr_buffer_create_datawriter_bin+0x94>
 801695e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016962:	e7d3      	b.n	801690c <uxr_buffer_create_datawriter_bin+0x94>

08016964 <uxr_buffer_create_datareader_bin>:
 8016964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016968:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801696c:	4606      	mov	r6, r0
 801696e:	4618      	mov	r0, r3
 8016970:	2703      	movs	r7, #3
 8016972:	ac1f      	add	r4, sp, #124	; 0x7c
 8016974:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8016978:	9105      	str	r1, [sp, #20]
 801697a:	a9a3      	add	r1, sp, #652	; 0x28c
 801697c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8016980:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016984:	2306      	movs	r3, #6
 8016986:	7123      	strb	r3, [r4, #4]
 8016988:	f000 f97e 	bl	8016c88 <uxr_object_id_to_raw>
 801698c:	a90e      	add	r1, sp, #56	; 0x38
 801698e:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8016990:	7227      	strb	r7, [r4, #8]
 8016992:	f000 f979 	bl	8016c88 <uxr_object_id_to_raw>
 8016996:	2300      	movs	r3, #0
 8016998:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801699c:	3d00      	subs	r5, #0
 801699e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 80169a2:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80169a6:	bf18      	it	ne
 80169a8:	2501      	movne	r5, #1
 80169aa:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80169ae:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80169b2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80169b6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80169ba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80169be:	2301      	movs	r3, #1
 80169c0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80169c4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80169c8:	bb8a      	cbnz	r2, 8016a2e <uxr_buffer_create_datareader_bin+0xca>
 80169ca:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80169ce:	f04f 0c13 	mov.w	ip, #19
 80169d2:	250b      	movs	r5, #11
 80169d4:	2221      	movs	r2, #33	; 0x21
 80169d6:	2111      	movs	r1, #17
 80169d8:	2009      	movs	r0, #9
 80169da:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80169de:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 80169e2:	b923      	cbnz	r3, 80169ee <uxr_buffer_create_datareader_bin+0x8a>
 80169e4:	4672      	mov	r2, lr
 80169e6:	4661      	mov	r1, ip
 80169e8:	4628      	mov	r0, r5
 80169ea:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80169ee:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 80169f2:	2b01      	cmp	r3, #1
 80169f4:	d025      	beq.n	8016a42 <uxr_buffer_create_datareader_bin+0xde>
 80169f6:	2b03      	cmp	r3, #3
 80169f8:	d029      	beq.n	8016a4e <uxr_buffer_create_datareader_bin+0xea>
 80169fa:	b32b      	cbz	r3, 8016a48 <uxr_buffer_create_datareader_bin+0xe4>
 80169fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016a00:	a923      	add	r1, sp, #140	; 0x8c
 8016a02:	a806      	add	r0, sp, #24
 8016a04:	f7fb fb64 	bl	80120d0 <ucdr_init_buffer>
 8016a08:	a90e      	add	r1, sp, #56	; 0x38
 8016a0a:	a806      	add	r0, sp, #24
 8016a0c:	f002 fef6 	bl	80197fc <uxr_serialize_OBJK_DataReader_Binary>
 8016a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a12:	f8cd 8000 	str.w	r8, [sp]
 8016a16:	4630      	mov	r0, r6
 8016a18:	9401      	str	r4, [sp, #4]
 8016a1a:	60e3      	str	r3, [r4, #12]
 8016a1c:	b29b      	uxth	r3, r3
 8016a1e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016a22:	f7ff fe35 	bl	8016690 <uxr_common_create_entity>
 8016a26:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8016a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a2e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8016a32:	f04f 0c12 	mov.w	ip, #18
 8016a36:	250a      	movs	r5, #10
 8016a38:	2220      	movs	r2, #32
 8016a3a:	2110      	movs	r1, #16
 8016a3c:	2008      	movs	r0, #8
 8016a3e:	2702      	movs	r7, #2
 8016a40:	e7cd      	b.n	80169de <uxr_buffer_create_datareader_bin+0x7a>
 8016a42:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8016a46:	e7d9      	b.n	80169fc <uxr_buffer_create_datareader_bin+0x98>
 8016a48:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8016a4c:	e7d6      	b.n	80169fc <uxr_buffer_create_datareader_bin+0x98>
 8016a4e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016a52:	e7d3      	b.n	80169fc <uxr_buffer_create_datareader_bin+0x98>

08016a54 <uxr_buffer_create_replier_bin>:
 8016a54:	b570      	push	{r4, r5, r6, lr}
 8016a56:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8016a5a:	4605      	mov	r5, r0
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	9105      	str	r1, [sp, #20]
 8016a60:	a999      	add	r1, sp, #612	; 0x264
 8016a62:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8016a66:	ac15      	add	r4, sp, #84	; 0x54
 8016a68:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016a6c:	2308      	movs	r3, #8
 8016a6e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8016a72:	f000 f909 	bl	8016c88 <uxr_object_id_to_raw>
 8016a76:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8016a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016a7c:	a919      	add	r1, sp, #100	; 0x64
 8016a7e:	a80d      	add	r0, sp, #52	; 0x34
 8016a80:	9306      	str	r3, [sp, #24]
 8016a82:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8016a84:	9307      	str	r3, [sp, #28]
 8016a86:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8016a88:	9308      	str	r3, [sp, #32]
 8016a8a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8016a8c:	930c      	str	r3, [sp, #48]	; 0x30
 8016a8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016a90:	930a      	str	r3, [sp, #40]	; 0x28
 8016a92:	2301      	movs	r3, #1
 8016a94:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8016a98:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016a9c:	2303      	movs	r3, #3
 8016a9e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8016aa2:	f7fb fb15 	bl	80120d0 <ucdr_init_buffer>
 8016aa6:	a906      	add	r1, sp, #24
 8016aa8:	a80d      	add	r0, sp, #52	; 0x34
 8016aaa:	f002 ff0f 	bl	80198cc <uxr_serialize_OBJK_Replier_Binary>
 8016aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ab0:	4628      	mov	r0, r5
 8016ab2:	9600      	str	r6, [sp, #0]
 8016ab4:	9318      	str	r3, [sp, #96]	; 0x60
 8016ab6:	b29b      	uxth	r3, r3
 8016ab8:	9401      	str	r4, [sp, #4]
 8016aba:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016abe:	f7ff fde7 	bl	8016690 <uxr_common_create_entity>
 8016ac2:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8016ac6:	bd70      	pop	{r4, r5, r6, pc}

08016ac8 <get_custom_error>:
 8016ac8:	4b01      	ldr	r3, [pc, #4]	; (8016ad0 <get_custom_error+0x8>)
 8016aca:	7818      	ldrb	r0, [r3, #0]
 8016acc:	4770      	bx	lr
 8016ace:	bf00      	nop
 8016ad0:	20016dfc 	.word	0x20016dfc

08016ad4 <recv_custom_msg>:
 8016ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad8:	4693      	mov	fp, r2
 8016ada:	b089      	sub	sp, #36	; 0x24
 8016adc:	2200      	movs	r2, #0
 8016ade:	4604      	mov	r4, r0
 8016ae0:	468a      	mov	sl, r1
 8016ae2:	9305      	str	r3, [sp, #20]
 8016ae4:	f88d 201e 	strb.w	r2, [sp, #30]
 8016ae8:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8016aec:	b322      	cbz	r2, 8016b38 <recv_custom_msg+0x64>
 8016aee:	f200 2902 	addw	r9, r0, #514	; 0x202
 8016af2:	f10d 081f 	add.w	r8, sp, #31
 8016af6:	af05      	add	r7, sp, #20
 8016af8:	f10d 061e 	add.w	r6, sp, #30
 8016afc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8016b00:	e002      	b.n	8016b08 <recv_custom_msg+0x34>
 8016b02:	9b05      	ldr	r3, [sp, #20]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	dd0f      	ble.n	8016b28 <recv_custom_msg+0x54>
 8016b08:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8016b0c:	4623      	mov	r3, r4
 8016b0e:	4622      	mov	r2, r4
 8016b10:	4648      	mov	r0, r9
 8016b12:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016b16:	e9cd 5600 	strd	r5, r6, [sp]
 8016b1a:	f001 fc6f 	bl	80183fc <uxr_read_framed_msg>
 8016b1e:	2800      	cmp	r0, #0
 8016b20:	d0ef      	beq.n	8016b02 <recv_custom_msg+0x2e>
 8016b22:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016b26:	b1b3      	cbz	r3, 8016b56 <recv_custom_msg+0x82>
 8016b28:	4b0f      	ldr	r3, [pc, #60]	; (8016b68 <recv_custom_msg+0x94>)
 8016b2a:	2000      	movs	r0, #0
 8016b2c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8016b30:	701a      	strb	r2, [r3, #0]
 8016b32:	b009      	add	sp, #36	; 0x24
 8016b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b38:	f10d 021f 	add.w	r2, sp, #31
 8016b3c:	4601      	mov	r1, r0
 8016b3e:	9200      	str	r2, [sp, #0]
 8016b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b44:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8016b48:	47a8      	blx	r5
 8016b4a:	2800      	cmp	r0, #0
 8016b4c:	d0ec      	beq.n	8016b28 <recv_custom_msg+0x54>
 8016b4e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d1e8      	bne.n	8016b28 <recv_custom_msg+0x54>
 8016b56:	f8cb 0000 	str.w	r0, [fp]
 8016b5a:	2001      	movs	r0, #1
 8016b5c:	f8ca 4000 	str.w	r4, [sl]
 8016b60:	b009      	add	sp, #36	; 0x24
 8016b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b66:	bf00      	nop
 8016b68:	20016dfc 	.word	0x20016dfc

08016b6c <send_custom_msg>:
 8016b6c:	b530      	push	{r4, r5, lr}
 8016b6e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8016b72:	b087      	sub	sp, #28
 8016b74:	4614      	mov	r4, r2
 8016b76:	b995      	cbnz	r5, 8016b9e <send_custom_msg+0x32>
 8016b78:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8016b7c:	f10d 0317 	add.w	r3, sp, #23
 8016b80:	47a8      	blx	r5
 8016b82:	1e03      	subs	r3, r0, #0
 8016b84:	bf18      	it	ne
 8016b86:	2301      	movne	r3, #1
 8016b88:	42a0      	cmp	r0, r4
 8016b8a:	bf18      	it	ne
 8016b8c:	2300      	movne	r3, #0
 8016b8e:	b91b      	cbnz	r3, 8016b98 <send_custom_msg+0x2c>
 8016b90:	4a0a      	ldr	r2, [pc, #40]	; (8016bbc <send_custom_msg+0x50>)
 8016b92:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8016b96:	7011      	strb	r1, [r2, #0]
 8016b98:	4618      	mov	r0, r3
 8016b9a:	b007      	add	sp, #28
 8016b9c:	bd30      	pop	{r4, r5, pc}
 8016b9e:	460b      	mov	r3, r1
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	f10d 0117 	add.w	r1, sp, #23
 8016ba6:	9400      	str	r4, [sp, #0]
 8016ba8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016bac:	4602      	mov	r2, r0
 8016bae:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8016bb2:	f200 2002 	addw	r0, r0, #514	; 0x202
 8016bb6:	f001 fa43 	bl	8018040 <uxr_write_framed_msg>
 8016bba:	e7e2      	b.n	8016b82 <send_custom_msg+0x16>
 8016bbc:	20016dfc 	.word	0x20016dfc

08016bc0 <uxr_set_custom_transport_callbacks>:
 8016bc0:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8016bc4:	9901      	ldr	r1, [sp, #4]
 8016bc6:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8016bca:	9b00      	ldr	r3, [sp, #0]
 8016bcc:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8016bd0:	4770      	bx	lr
 8016bd2:	bf00      	nop

08016bd4 <uxr_init_custom_transport>:
 8016bd4:	b538      	push	{r3, r4, r5, lr}
 8016bd6:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8016bda:	b303      	cbz	r3, 8016c1e <uxr_init_custom_transport+0x4a>
 8016bdc:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8016be0:	4604      	mov	r4, r0
 8016be2:	b1e2      	cbz	r2, 8016c1e <uxr_init_custom_transport+0x4a>
 8016be4:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8016be8:	b1ca      	cbz	r2, 8016c1e <uxr_init_custom_transport+0x4a>
 8016bea:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8016bee:	b1b2      	cbz	r2, 8016c1e <uxr_init_custom_transport+0x4a>
 8016bf0:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8016bf4:	4798      	blx	r3
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	b188      	cbz	r0, 8016c1e <uxr_init_custom_transport+0x4a>
 8016bfa:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8016bfe:	b98b      	cbnz	r3, 8016c24 <uxr_init_custom_transport+0x50>
 8016c00:	4b0b      	ldr	r3, [pc, #44]	; (8016c30 <uxr_init_custom_transport+0x5c>)
 8016c02:	4628      	mov	r0, r5
 8016c04:	490b      	ldr	r1, [pc, #44]	; (8016c34 <uxr_init_custom_transport+0x60>)
 8016c06:	4a0c      	ldr	r2, [pc, #48]	; (8016c38 <uxr_init_custom_transport+0x64>)
 8016c08:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8016c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016c10:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8016c14:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8016c18:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8016c1c:	bd38      	pop	{r3, r4, r5, pc}
 8016c1e:	2500      	movs	r5, #0
 8016c20:	4628      	mov	r0, r5
 8016c22:	bd38      	pop	{r3, r4, r5, pc}
 8016c24:	2100      	movs	r1, #0
 8016c26:	f204 2002 	addw	r0, r4, #514	; 0x202
 8016c2a:	f001 fa03 	bl	8018034 <uxr_init_framing_io>
 8016c2e:	e7e7      	b.n	8016c00 <uxr_init_custom_transport+0x2c>
 8016c30:	08016ad5 	.word	0x08016ad5
 8016c34:	08016b6d 	.word	0x08016b6d
 8016c38:	08016ac9 	.word	0x08016ac9

08016c3c <uxr_close_custom_transport>:
 8016c3c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8016c40:	4718      	bx	r3
 8016c42:	bf00      	nop

08016c44 <uxr_object_id>:
 8016c44:	b082      	sub	sp, #8
 8016c46:	2300      	movs	r3, #0
 8016c48:	f88d 1006 	strb.w	r1, [sp, #6]
 8016c4c:	f360 030f 	bfi	r3, r0, #0, #16
 8016c50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016c54:	f362 431f 	bfi	r3, r2, #16, #16
 8016c58:	4618      	mov	r0, r3
 8016c5a:	b002      	add	sp, #8
 8016c5c:	4770      	bx	lr
 8016c5e:	bf00      	nop

08016c60 <uxr_object_id_from_raw>:
 8016c60:	7843      	ldrb	r3, [r0, #1]
 8016c62:	b082      	sub	sp, #8
 8016c64:	7801      	ldrb	r1, [r0, #0]
 8016c66:	2000      	movs	r0, #0
 8016c68:	091a      	lsrs	r2, r3, #4
 8016c6a:	f003 030f 	and.w	r3, r3, #15
 8016c6e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8016c72:	f88d 3006 	strb.w	r3, [sp, #6]
 8016c76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016c7a:	f362 000f 	bfi	r0, r2, #0, #16
 8016c7e:	f363 401f 	bfi	r0, r3, #16, #16
 8016c82:	b002      	add	sp, #8
 8016c84:	4770      	bx	lr
 8016c86:	bf00      	nop

08016c88 <uxr_object_id_to_raw>:
 8016c88:	4602      	mov	r2, r0
 8016c8a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8016c8e:	b082      	sub	sp, #8
 8016c90:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8016c94:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8016c98:	f881 c000 	strb.w	ip, [r1]
 8016c9c:	7048      	strb	r0, [r1, #1]
 8016c9e:	b002      	add	sp, #8
 8016ca0:	4770      	bx	lr
 8016ca2:	bf00      	nop

08016ca4 <uxr_buffer_request_data>:
 8016ca4:	b530      	push	{r4, r5, lr}
 8016ca6:	b095      	sub	sp, #84	; 0x54
 8016ca8:	4604      	mov	r4, r0
 8016caa:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8016cac:	9303      	str	r3, [sp, #12]
 8016cae:	2d00      	cmp	r5, #0
 8016cb0:	f88d 301c 	strb.w	r3, [sp, #28]
 8016cb4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8016cb8:	f04f 0200 	mov.w	r2, #0
 8016cbc:	bf14      	ite	ne
 8016cbe:	2101      	movne	r1, #1
 8016cc0:	4611      	moveq	r1, r2
 8016cc2:	f88d 201d 	strb.w	r2, [sp, #29]
 8016cc6:	f88d 201e 	strb.w	r2, [sp, #30]
 8016cca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8016cce:	d021      	beq.n	8016d14 <uxr_buffer_request_data+0x70>
 8016cd0:	686b      	ldr	r3, [r5, #4]
 8016cd2:	2210      	movs	r2, #16
 8016cd4:	6829      	ldr	r1, [r5, #0]
 8016cd6:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8016cda:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8016cde:	2308      	movs	r3, #8
 8016ce0:	2100      	movs	r1, #0
 8016ce2:	4620      	mov	r0, r4
 8016ce4:	e9cd 3100 	strd	r3, r1, [sp]
 8016ce8:	ab0c      	add	r3, sp, #48	; 0x30
 8016cea:	9905      	ldr	r1, [sp, #20]
 8016cec:	f001 f834 	bl	8017d58 <uxr_prepare_stream_to_write_submessage>
 8016cf0:	b918      	cbnz	r0, 8016cfa <uxr_buffer_request_data+0x56>
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	b015      	add	sp, #84	; 0x54
 8016cf8:	bd30      	pop	{r4, r5, pc}
 8016cfa:	9904      	ldr	r1, [sp, #16]
 8016cfc:	aa06      	add	r2, sp, #24
 8016cfe:	4620      	mov	r0, r4
 8016d00:	f001 f966 	bl	8017fd0 <uxr_init_base_object_request>
 8016d04:	4604      	mov	r4, r0
 8016d06:	a906      	add	r1, sp, #24
 8016d08:	a80c      	add	r0, sp, #48	; 0x30
 8016d0a:	f003 f915 	bl	8019f38 <uxr_serialize_READ_DATA_Payload>
 8016d0e:	4620      	mov	r0, r4
 8016d10:	b015      	add	sp, #84	; 0x54
 8016d12:	bd30      	pop	{r4, r5, pc}
 8016d14:	2208      	movs	r2, #8
 8016d16:	e7e2      	b.n	8016cde <uxr_buffer_request_data+0x3a>

08016d18 <uxr_buffer_cancel_data>:
 8016d18:	b510      	push	{r4, lr}
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	b094      	sub	sp, #80	; 0x50
 8016d1e:	4604      	mov	r4, r0
 8016d20:	9205      	str	r2, [sp, #20]
 8016d22:	9301      	str	r3, [sp, #4]
 8016d24:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016d28:	f88d 301e 	strb.w	r3, [sp, #30]
 8016d2c:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8016d30:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8016d34:	2308      	movs	r3, #8
 8016d36:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016d3a:	2201      	movs	r2, #1
 8016d3c:	9300      	str	r3, [sp, #0]
 8016d3e:	ab0c      	add	r3, sp, #48	; 0x30
 8016d40:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8016d44:	2210      	movs	r2, #16
 8016d46:	f001 f807 	bl	8017d58 <uxr_prepare_stream_to_write_submessage>
 8016d4a:	b918      	cbnz	r0, 8016d54 <uxr_buffer_cancel_data+0x3c>
 8016d4c:	4604      	mov	r4, r0
 8016d4e:	4620      	mov	r0, r4
 8016d50:	b014      	add	sp, #80	; 0x50
 8016d52:	bd10      	pop	{r4, pc}
 8016d54:	9905      	ldr	r1, [sp, #20]
 8016d56:	aa06      	add	r2, sp, #24
 8016d58:	4620      	mov	r0, r4
 8016d5a:	f001 f939 	bl	8017fd0 <uxr_init_base_object_request>
 8016d5e:	4604      	mov	r4, r0
 8016d60:	a906      	add	r1, sp, #24
 8016d62:	a80c      	add	r0, sp, #48	; 0x30
 8016d64:	f003 f8e8 	bl	8019f38 <uxr_serialize_READ_DATA_Payload>
 8016d68:	4620      	mov	r0, r4
 8016d6a:	b014      	add	sp, #80	; 0x50
 8016d6c:	bd10      	pop	{r4, pc}
 8016d6e:	bf00      	nop

08016d70 <read_submessage_format>:
 8016d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d74:	b095      	sub	sp, #84	; 0x54
 8016d76:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8016d7a:	b113      	cbz	r3, 8016d82 <read_submessage_format+0x12>
 8016d7c:	b015      	add	sp, #84	; 0x54
 8016d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d82:	4606      	mov	r6, r0
 8016d84:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016d86:	460c      	mov	r4, r1
 8016d88:	4615      	mov	r5, r2
 8016d8a:	9004      	str	r0, [sp, #16]
 8016d8c:	4699      	mov	r9, r3
 8016d8e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016d90:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8016d94:	9005      	str	r0, [sp, #20]
 8016d96:	a80c      	add	r0, sp, #48	; 0x30
 8016d98:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016d9c:	1a52      	subs	r2, r2, r1
 8016d9e:	f7fb f997 	bl	80120d0 <ucdr_init_buffer>
 8016da2:	a80c      	add	r0, sp, #48	; 0x30
 8016da4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016da8:	f7fb f966 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 8016dac:	69e2      	ldr	r2, [r4, #28]
 8016dae:	b19a      	cbz	r2, 8016dd8 <read_submessage_format+0x68>
 8016db0:	f1b8 0f07 	cmp.w	r8, #7
 8016db4:	f882 9014 	strb.w	r9, [r2, #20]
 8016db8:	d040      	beq.n	8016e3c <read_submessage_format+0xcc>
 8016dba:	f1b8 0f08 	cmp.w	r8, #8
 8016dbe:	d02e      	beq.n	8016e1e <read_submessage_format+0xae>
 8016dc0:	f1b8 0f06 	cmp.w	r8, #6
 8016dc4:	d011      	beq.n	8016dea <read_submessage_format+0x7a>
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	7513      	strb	r3, [r2, #20]
 8016dca:	4629      	mov	r1, r5
 8016dcc:	4620      	mov	r0, r4
 8016dce:	f7fb f9d3 	bl	8012178 <ucdr_advance_buffer>
 8016dd2:	b015      	add	sp, #84	; 0x54
 8016dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dd8:	f1b8 0f07 	cmp.w	r8, #7
 8016ddc:	d02e      	beq.n	8016e3c <read_submessage_format+0xcc>
 8016dde:	f1b8 0f08 	cmp.w	r8, #8
 8016de2:	d01c      	beq.n	8016e1e <read_submessage_format+0xae>
 8016de4:	f1b8 0f06 	cmp.w	r8, #6
 8016de8:	d1ef      	bne.n	8016dca <read_submessage_format+0x5a>
 8016dea:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8016dee:	f1b8 0f00 	cmp.w	r8, #0
 8016df2:	d011      	beq.n	8016e18 <read_submessage_format+0xa8>
 8016df4:	ab0c      	add	r3, sp, #48	; 0x30
 8016df6:	9501      	str	r5, [sp, #4]
 8016df8:	463a      	mov	r2, r7
 8016dfa:	4630      	mov	r0, r6
 8016dfc:	9300      	str	r3, [sp, #0]
 8016dfe:	2306      	movs	r3, #6
 8016e00:	f88d 3016 	strb.w	r3, [sp, #22]
 8016e04:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8016e08:	9302      	str	r3, [sp, #8]
 8016e0a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016e0e:	47c0      	blx	r8
 8016e10:	2301      	movs	r3, #1
 8016e12:	69e2      	ldr	r2, [r4, #28]
 8016e14:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8016e18:	2a00      	cmp	r2, #0
 8016e1a:	d1d4      	bne.n	8016dc6 <read_submessage_format+0x56>
 8016e1c:	e7d5      	b.n	8016dca <read_submessage_format+0x5a>
 8016e1e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d0f8      	beq.n	8016e18 <read_submessage_format+0xa8>
 8016e26:	a80c      	add	r0, sp, #48	; 0x30
 8016e28:	a906      	add	r1, sp, #24
 8016e2a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016e2e:	f003 f94f 	bl	801a0d0 <uxr_deserialize_SampleIdentity>
 8016e32:	b9a0      	cbnz	r0, 8016e5e <read_submessage_format+0xee>
 8016e34:	69e2      	ldr	r2, [r4, #28]
 8016e36:	2a00      	cmp	r2, #0
 8016e38:	d1c5      	bne.n	8016dc6 <read_submessage_format+0x56>
 8016e3a:	e7c6      	b.n	8016dca <read_submessage_format+0x5a>
 8016e3c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8016e40:	b13b      	cbz	r3, 8016e52 <read_submessage_format+0xe2>
 8016e42:	a906      	add	r1, sp, #24
 8016e44:	a80c      	add	r0, sp, #48	; 0x30
 8016e46:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016e4a:	f002 fe15 	bl	8019a78 <uxr_deserialize_BaseObjectRequest>
 8016e4e:	bb60      	cbnz	r0, 8016eaa <read_submessage_format+0x13a>
 8016e50:	69e2      	ldr	r2, [r4, #28]
 8016e52:	68a3      	ldr	r3, [r4, #8]
 8016e54:	442b      	add	r3, r5
 8016e56:	60a3      	str	r3, [r4, #8]
 8016e58:	2a00      	cmp	r2, #0
 8016e5a:	d1b4      	bne.n	8016dc6 <read_submessage_format+0x56>
 8016e5c:	e7b5      	b.n	8016dca <read_submessage_format+0x5a>
 8016e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e60:	a80c      	add	r0, sp, #48	; 0x30
 8016e62:	eba8 0803 	sub.w	r8, r8, r3
 8016e66:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8016e6a:	44a8      	add	r8, r5
 8016e6c:	1a52      	subs	r2, r2, r1
 8016e6e:	f7fb f92f 	bl	80120d0 <ucdr_init_buffer>
 8016e72:	a80c      	add	r0, sp, #48	; 0x30
 8016e74:	fa1f f888 	uxth.w	r8, r8
 8016e78:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016e7c:	f7fb f8fc 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 8016e80:	ab0c      	add	r3, sp, #48	; 0x30
 8016e82:	2108      	movs	r1, #8
 8016e84:	f8cd 8004 	str.w	r8, [sp, #4]
 8016e88:	9300      	str	r3, [sp, #0]
 8016e8a:	463a      	mov	r2, r7
 8016e8c:	f88d 1016 	strb.w	r1, [sp, #22]
 8016e90:	ab06      	add	r3, sp, #24
 8016e92:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8016e96:	4630      	mov	r0, r6
 8016e98:	9102      	str	r1, [sp, #8]
 8016e9a:	9905      	ldr	r1, [sp, #20]
 8016e9c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8016ea0:	47b8      	blx	r7
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8016ea8:	e7c4      	b.n	8016e34 <read_submessage_format+0xc4>
 8016eaa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8016eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016eb0:	a80c      	add	r0, sp, #48	; 0x30
 8016eb2:	1a52      	subs	r2, r2, r1
 8016eb4:	eba8 0803 	sub.w	r8, r8, r3
 8016eb8:	f7fb f90a 	bl	80120d0 <ucdr_init_buffer>
 8016ebc:	a80c      	add	r0, sp, #48	; 0x30
 8016ebe:	44a8      	add	r8, r5
 8016ec0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016ec4:	f7fb f8d8 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 8016ec8:	ab0c      	add	r3, sp, #48	; 0x30
 8016eca:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016ece:	fa1f f888 	uxth.w	r8, r8
 8016ed2:	9300      	str	r3, [sp, #0]
 8016ed4:	463a      	mov	r2, r7
 8016ed6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016eda:	4630      	mov	r0, r6
 8016edc:	f8cd 8004 	str.w	r8, [sp, #4]
 8016ee0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016ee4:	2107      	movs	r1, #7
 8016ee6:	f88d 1016 	strb.w	r1, [sp, #22]
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8016ef0:	9102      	str	r1, [sp, #8]
 8016ef2:	9905      	ldr	r1, [sp, #20]
 8016ef4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8016ef8:	47b8      	blx	r7
 8016efa:	2301      	movs	r3, #1
 8016efc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8016f00:	e7a6      	b.n	8016e50 <read_submessage_format+0xe0>
 8016f02:	bf00      	nop

08016f04 <on_get_fragmentation_info>:
 8016f04:	b500      	push	{lr}
 8016f06:	b08b      	sub	sp, #44	; 0x2c
 8016f08:	4601      	mov	r1, r0
 8016f0a:	2204      	movs	r2, #4
 8016f0c:	a802      	add	r0, sp, #8
 8016f0e:	f7fb f8df 	bl	80120d0 <ucdr_init_buffer>
 8016f12:	f10d 0305 	add.w	r3, sp, #5
 8016f16:	f10d 0206 	add.w	r2, sp, #6
 8016f1a:	a901      	add	r1, sp, #4
 8016f1c:	a802      	add	r0, sp, #8
 8016f1e:	f001 fe5d 	bl	8018bdc <uxr_read_submessage_header>
 8016f22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016f26:	2b0d      	cmp	r3, #13
 8016f28:	d003      	beq.n	8016f32 <on_get_fragmentation_info+0x2e>
 8016f2a:	2000      	movs	r0, #0
 8016f2c:	b00b      	add	sp, #44	; 0x2c
 8016f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016f36:	f013 0f02 	tst.w	r3, #2
 8016f3a:	bf14      	ite	ne
 8016f3c:	2002      	movne	r0, #2
 8016f3e:	2001      	moveq	r0, #1
 8016f40:	b00b      	add	sp, #44	; 0x2c
 8016f42:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f46:	bf00      	nop

08016f48 <read_submessage_get_info>:
 8016f48:	b570      	push	{r4, r5, r6, lr}
 8016f4a:	2500      	movs	r5, #0
 8016f4c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8016f50:	460e      	mov	r6, r1
 8016f52:	4604      	mov	r4, r0
 8016f54:	f44f 7224 	mov.w	r2, #656	; 0x290
 8016f58:	4629      	mov	r1, r5
 8016f5a:	a810      	add	r0, sp, #64	; 0x40
 8016f5c:	9503      	str	r5, [sp, #12]
 8016f5e:	9504      	str	r5, [sp, #16]
 8016f60:	f008 fe20 	bl	801fba4 <memset>
 8016f64:	a903      	add	r1, sp, #12
 8016f66:	4630      	mov	r0, r6
 8016f68:	f002 ff26 	bl	8019db8 <uxr_deserialize_GET_INFO_Payload>
 8016f6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016f70:	4620      	mov	r0, r4
 8016f72:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8016f76:	f001 f823 	bl	8017fc0 <uxr_session_header_offset>
 8016f7a:	462b      	mov	r3, r5
 8016f7c:	220c      	movs	r2, #12
 8016f7e:	a905      	add	r1, sp, #20
 8016f80:	9000      	str	r0, [sp, #0]
 8016f82:	a808      	add	r0, sp, #32
 8016f84:	f7fb f892 	bl	80120ac <ucdr_init_buffer_origin_offset>
 8016f88:	a910      	add	r1, sp, #64	; 0x40
 8016f8a:	a808      	add	r0, sp, #32
 8016f8c:	f002 ff88 	bl	8019ea0 <uxr_serialize_INFO_Payload>
 8016f90:	9b08      	ldr	r3, [sp, #32]
 8016f92:	462a      	mov	r2, r5
 8016f94:	4629      	mov	r1, r5
 8016f96:	4620      	mov	r0, r4
 8016f98:	f000 ffbe 	bl	8017f18 <uxr_stamp_session_header>
 8016f9c:	a808      	add	r0, sp, #32
 8016f9e:	f7fb f8c5 	bl	801212c <ucdr_buffer_length>
 8016fa2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016fa4:	4602      	mov	r2, r0
 8016fa6:	a905      	add	r1, sp, #20
 8016fa8:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016fac:	47a0      	blx	r4
 8016fae:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8016fb2:	bd70      	pop	{r4, r5, r6, pc}

08016fb4 <write_submessage_acknack.isra.0>:
 8016fb4:	b570      	push	{r4, r5, r6, lr}
 8016fb6:	b092      	sub	sp, #72	; 0x48
 8016fb8:	4605      	mov	r5, r0
 8016fba:	460e      	mov	r6, r1
 8016fbc:	4614      	mov	r4, r2
 8016fbe:	f000 ffff 	bl	8017fc0 <uxr_session_header_offset>
 8016fc2:	a905      	add	r1, sp, #20
 8016fc4:	9000      	str	r0, [sp, #0]
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	a80a      	add	r0, sp, #40	; 0x28
 8016fca:	2211      	movs	r2, #17
 8016fcc:	f7fb f86e 	bl	80120ac <ucdr_init_buffer_origin_offset>
 8016fd0:	2218      	movs	r2, #24
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	210a      	movs	r1, #10
 8016fd6:	fb02 5404 	mla	r4, r2, r4, r5
 8016fda:	a80a      	add	r0, sp, #40	; 0x28
 8016fdc:	2205      	movs	r2, #5
 8016fde:	3450      	adds	r4, #80	; 0x50
 8016fe0:	f001 fde2 	bl	8018ba8 <uxr_buffer_submessage_header>
 8016fe4:	a903      	add	r1, sp, #12
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	f006 fb50 	bl	801d68c <uxr_compute_acknack>
 8016fec:	ba40      	rev16	r0, r0
 8016fee:	a903      	add	r1, sp, #12
 8016ff0:	f88d 6010 	strb.w	r6, [sp, #16]
 8016ff4:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016ff8:	a80a      	add	r0, sp, #40	; 0x28
 8016ffa:	f002 ffc3 	bl	8019f84 <uxr_serialize_ACKNACK_Payload>
 8016ffe:	2200      	movs	r2, #0
 8017000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017002:	4628      	mov	r0, r5
 8017004:	4611      	mov	r1, r2
 8017006:	f000 ff87 	bl	8017f18 <uxr_stamp_session_header>
 801700a:	a80a      	add	r0, sp, #40	; 0x28
 801700c:	f7fb f88e 	bl	801212c <ucdr_buffer_length>
 8017010:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8017012:	4602      	mov	r2, r0
 8017014:	a905      	add	r1, sp, #20
 8017016:	e9d3 0400 	ldrd	r0, r4, [r3]
 801701a:	47a0      	blx	r4
 801701c:	b012      	add	sp, #72	; 0x48
 801701e:	bd70      	pop	{r4, r5, r6, pc}

08017020 <uxr_init_session>:
 8017020:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8017058 <uxr_init_session+0x38>
 8017024:	2300      	movs	r3, #0
 8017026:	b510      	push	{r4, lr}
 8017028:	4604      	mov	r4, r0
 801702a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801702e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8017032:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8017036:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801703a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801703e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8017042:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8017046:	2181      	movs	r1, #129	; 0x81
 8017048:	f000 feca 	bl	8017de0 <uxr_init_session_info>
 801704c:	f104 0008 	add.w	r0, r4, #8
 8017050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017054:	f001 bcc4 	b.w	80189e0 <uxr_init_stream_storage>
	...

08017060 <uxr_set_status_callback>:
 8017060:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8017064:	4770      	bx	lr
 8017066:	bf00      	nop

08017068 <uxr_set_topic_callback>:
 8017068:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801706c:	4770      	bx	lr
 801706e:	bf00      	nop

08017070 <uxr_set_request_callback>:
 8017070:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8017074:	4770      	bx	lr
 8017076:	bf00      	nop

08017078 <uxr_set_reply_callback>:
 8017078:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801707c:	4770      	bx	lr
 801707e:	bf00      	nop

08017080 <uxr_create_output_best_effort_stream>:
 8017080:	b510      	push	{r4, lr}
 8017082:	4604      	mov	r4, r0
 8017084:	b084      	sub	sp, #16
 8017086:	e9cd 2100 	strd	r2, r1, [sp]
 801708a:	f000 ff99 	bl	8017fc0 <uxr_session_header_offset>
 801708e:	4603      	mov	r3, r0
 8017090:	f104 0008 	add.w	r0, r4, #8
 8017094:	e9dd 2100 	ldrd	r2, r1, [sp]
 8017098:	b004      	add	sp, #16
 801709a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801709e:	f001 bce5 	b.w	8018a6c <uxr_add_output_best_effort_buffer>
 80170a2:	bf00      	nop

080170a4 <uxr_create_output_reliable_stream>:
 80170a4:	b530      	push	{r4, r5, lr}
 80170a6:	b089      	sub	sp, #36	; 0x24
 80170a8:	4604      	mov	r4, r0
 80170aa:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80170ae:	9303      	str	r3, [sp, #12]
 80170b0:	f000 ff86 	bl	8017fc0 <uxr_session_header_offset>
 80170b4:	4605      	mov	r5, r0
 80170b6:	9905      	ldr	r1, [sp, #20]
 80170b8:	f104 0008 	add.w	r0, r4, #8
 80170bc:	9500      	str	r5, [sp, #0]
 80170be:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80170c2:	f001 fce7 	bl	8018a94 <uxr_add_output_reliable_buffer>
 80170c6:	2200      	movs	r2, #0
 80170c8:	fa5f fc80 	uxtb.w	ip, r0
 80170cc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80170d0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80170d4:	0e03      	lsrs	r3, r0, #24
 80170d6:	f36c 0207 	bfi	r2, ip, #0, #8
 80170da:	f364 220f 	bfi	r2, r4, #8, #8
 80170de:	f361 4217 	bfi	r2, r1, #16, #8
 80170e2:	f363 621f 	bfi	r2, r3, #24, #8
 80170e6:	4610      	mov	r0, r2
 80170e8:	b009      	add	sp, #36	; 0x24
 80170ea:	bd30      	pop	{r4, r5, pc}

080170ec <uxr_create_input_best_effort_stream>:
 80170ec:	b082      	sub	sp, #8
 80170ee:	3008      	adds	r0, #8
 80170f0:	b002      	add	sp, #8
 80170f2:	f001 bce9 	b.w	8018ac8 <uxr_add_input_best_effort_buffer>
 80170f6:	bf00      	nop

080170f8 <uxr_create_input_reliable_stream>:
 80170f8:	b510      	push	{r4, lr}
 80170fa:	4c0c      	ldr	r4, [pc, #48]	; (801712c <uxr_create_input_reliable_stream+0x34>)
 80170fc:	b084      	sub	sp, #16
 80170fe:	3008      	adds	r0, #8
 8017100:	9400      	str	r4, [sp, #0]
 8017102:	f001 fcf7 	bl	8018af4 <uxr_add_input_reliable_buffer>
 8017106:	2200      	movs	r2, #0
 8017108:	fa5f fe80 	uxtb.w	lr, r0
 801710c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8017110:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8017114:	0e03      	lsrs	r3, r0, #24
 8017116:	f36e 0207 	bfi	r2, lr, #0, #8
 801711a:	f36c 220f 	bfi	r2, ip, #8, #8
 801711e:	f361 4217 	bfi	r2, r1, #16, #8
 8017122:	f363 621f 	bfi	r2, r3, #24, #8
 8017126:	4610      	mov	r0, r2
 8017128:	b004      	add	sp, #16
 801712a:	bd10      	pop	{r4, pc}
 801712c:	08016f05 	.word	0x08016f05

08017130 <uxr_epoch_nanos>:
 8017130:	b510      	push	{r4, lr}
 8017132:	4604      	mov	r4, r0
 8017134:	f001 fd9a 	bl	8018c6c <uxr_nanos>
 8017138:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801713c:	1ac0      	subs	r0, r0, r3
 801713e:	eb61 0102 	sbc.w	r1, r1, r2
 8017142:	bd10      	pop	{r4, pc}

08017144 <uxr_flash_output_streams>:
 8017144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017148:	7e03      	ldrb	r3, [r0, #24]
 801714a:	b084      	sub	sp, #16
 801714c:	4604      	mov	r4, r0
 801714e:	b1fb      	cbz	r3, 8017190 <uxr_flash_output_streams+0x4c>
 8017150:	f04f 0900 	mov.w	r9, #0
 8017154:	f10d 0802 	add.w	r8, sp, #2
 8017158:	af03      	add	r7, sp, #12
 801715a:	ae02      	add	r6, sp, #8
 801715c:	4648      	mov	r0, r9
 801715e:	2201      	movs	r2, #1
 8017160:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8017164:	4611      	mov	r1, r2
 8017166:	3508      	adds	r5, #8
 8017168:	f001 fbe0 	bl	801892c <uxr_stream_id>
 801716c:	4684      	mov	ip, r0
 801716e:	4643      	mov	r3, r8
 8017170:	463a      	mov	r2, r7
 8017172:	4631      	mov	r1, r6
 8017174:	4628      	mov	r0, r5
 8017176:	f8cd c004 	str.w	ip, [sp, #4]
 801717a:	f006 fb11 	bl	801d7a0 <uxr_prepare_best_effort_buffer_to_send>
 801717e:	2800      	cmp	r0, #0
 8017180:	d13d      	bne.n	80171fe <uxr_flash_output_streams+0xba>
 8017182:	f109 0901 	add.w	r9, r9, #1
 8017186:	7e23      	ldrb	r3, [r4, #24]
 8017188:	fa5f f089 	uxtb.w	r0, r9
 801718c:	4283      	cmp	r3, r0
 801718e:	d8e6      	bhi.n	801715e <uxr_flash_output_streams+0x1a>
 8017190:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8017194:	b383      	cbz	r3, 80171f8 <uxr_flash_output_streams+0xb4>
 8017196:	f04f 0900 	mov.w	r9, #0
 801719a:	f10d 0802 	add.w	r8, sp, #2
 801719e:	af03      	add	r7, sp, #12
 80171a0:	ae02      	add	r6, sp, #8
 80171a2:	4648      	mov	r0, r9
 80171a4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80171a8:	2201      	movs	r2, #1
 80171aa:	2102      	movs	r1, #2
 80171ac:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80171b0:	f001 fbbc 	bl	801892c <uxr_stream_id>
 80171b4:	9001      	str	r0, [sp, #4]
 80171b6:	3520      	adds	r5, #32
 80171b8:	e00c      	b.n	80171d4 <uxr_flash_output_streams+0x90>
 80171ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80171be:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80171c2:	9b02      	ldr	r3, [sp, #8]
 80171c4:	f000 fea8 	bl	8017f18 <uxr_stamp_session_header>
 80171c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80171ca:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80171ce:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80171d2:	47d0      	blx	sl
 80171d4:	4643      	mov	r3, r8
 80171d6:	463a      	mov	r2, r7
 80171d8:	4631      	mov	r1, r6
 80171da:	4628      	mov	r0, r5
 80171dc:	f006 fd04 	bl	801dbe8 <uxr_prepare_next_reliable_buffer_to_send>
 80171e0:	4603      	mov	r3, r0
 80171e2:	4620      	mov	r0, r4
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d1e8      	bne.n	80171ba <uxr_flash_output_streams+0x76>
 80171e8:	f109 0901 	add.w	r9, r9, #1
 80171ec:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80171f0:	fa5f f089 	uxtb.w	r0, r9
 80171f4:	4283      	cmp	r3, r0
 80171f6:	d8d5      	bhi.n	80171a4 <uxr_flash_output_streams+0x60>
 80171f8:	b004      	add	sp, #16
 80171fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171fe:	9b02      	ldr	r3, [sp, #8]
 8017200:	4620      	mov	r0, r4
 8017202:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017206:	f109 0901 	add.w	r9, r9, #1
 801720a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801720e:	f000 fe83 	bl	8017f18 <uxr_stamp_session_header>
 8017212:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017214:	9a03      	ldr	r2, [sp, #12]
 8017216:	685d      	ldr	r5, [r3, #4]
 8017218:	6818      	ldr	r0, [r3, #0]
 801721a:	9902      	ldr	r1, [sp, #8]
 801721c:	47a8      	blx	r5
 801721e:	7e23      	ldrb	r3, [r4, #24]
 8017220:	fa5f f089 	uxtb.w	r0, r9
 8017224:	4283      	cmp	r3, r0
 8017226:	d89a      	bhi.n	801715e <uxr_flash_output_streams+0x1a>
 8017228:	e7b2      	b.n	8017190 <uxr_flash_output_streams+0x4c>
 801722a:	bf00      	nop

0801722c <read_submessage_info>:
 801722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017230:	460d      	mov	r5, r1
 8017232:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8017236:	4606      	mov	r6, r0
 8017238:	4669      	mov	r1, sp
 801723a:	4628      	mov	r0, r5
 801723c:	f002 fcce 	bl	8019bdc <uxr_deserialize_BaseObjectReply>
 8017240:	4604      	mov	r4, r0
 8017242:	a902      	add	r1, sp, #8
 8017244:	4628      	mov	r0, r5
 8017246:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801724a:	f7f9 fc51 	bl	8010af0 <ucdr_deserialize_bool>
 801724e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8017252:	4004      	ands	r4, r0
 8017254:	b2e4      	uxtb	r4, r4
 8017256:	b95b      	cbnz	r3, 8017270 <read_submessage_info+0x44>
 8017258:	a987      	add	r1, sp, #540	; 0x21c
 801725a:	4628      	mov	r0, r5
 801725c:	f7f9 fc48 	bl	8010af0 <ucdr_deserialize_bool>
 8017260:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8017264:	4680      	mov	r8, r0
 8017266:	b94b      	cbnz	r3, 801727c <read_submessage_info+0x50>
 8017268:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017270:	a903      	add	r1, sp, #12
 8017272:	4628      	mov	r0, r5
 8017274:	f002 fb5e 	bl	8019934 <uxr_deserialize_ObjectVariant>
 8017278:	4004      	ands	r4, r0
 801727a:	e7ed      	b.n	8017258 <read_submessage_info+0x2c>
 801727c:	a988      	add	r1, sp, #544	; 0x220
 801727e:	4628      	mov	r0, r5
 8017280:	f7f9 fc64 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8017284:	ea14 0f08 	tst.w	r4, r8
 8017288:	d0ee      	beq.n	8017268 <read_submessage_info+0x3c>
 801728a:	2800      	cmp	r0, #0
 801728c:	d0ec      	beq.n	8017268 <read_submessage_info+0x3c>
 801728e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8017292:	2b0d      	cmp	r3, #13
 8017294:	d1e8      	bne.n	8017268 <read_submessage_info+0x3c>
 8017296:	a98a      	add	r1, sp, #552	; 0x228
 8017298:	4628      	mov	r0, r5
 801729a:	f7fa f9fd 	bl	8011698 <ucdr_deserialize_int16_t>
 801729e:	b138      	cbz	r0, 80172b0 <read_submessage_info+0x84>
 80172a0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	dd06      	ble.n	80172b6 <read_submessage_info+0x8a>
 80172a8:	2f00      	cmp	r7, #0
 80172aa:	bf14      	ite	ne
 80172ac:	2001      	movne	r0, #1
 80172ae:	2002      	moveq	r0, #2
 80172b0:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80172b4:	e7d8      	b.n	8017268 <read_submessage_info+0x3c>
 80172b6:	2000      	movs	r0, #0
 80172b8:	e7fa      	b.n	80172b0 <read_submessage_info+0x84>
 80172ba:	bf00      	nop

080172bc <read_submessage_list>:
 80172bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c0:	4604      	mov	r4, r0
 80172c2:	b097      	sub	sp, #92	; 0x5c
 80172c4:	460d      	mov	r5, r1
 80172c6:	4ec1      	ldr	r6, [pc, #772]	; (80175cc <read_submessage_list+0x310>)
 80172c8:	9209      	str	r2, [sp, #36]	; 0x24
 80172ca:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80172ce:	aa0c      	add	r2, sp, #48	; 0x30
 80172d0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80172d4:	4628      	mov	r0, r5
 80172d6:	f001 fc81 	bl	8018bdc <uxr_read_submessage_header>
 80172da:	2800      	cmp	r0, #0
 80172dc:	f000 8142 	beq.w	8017564 <read_submessage_list+0x2a8>
 80172e0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80172e4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80172e8:	3b02      	subs	r3, #2
 80172ea:	2b0d      	cmp	r3, #13
 80172ec:	d8ed      	bhi.n	80172ca <read_submessage_list+0xe>
 80172ee:	a101      	add	r1, pc, #4	; (adr r1, 80172f4 <read_submessage_list+0x38>)
 80172f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80172f4:	0801755b 	.word	0x0801755b
 80172f8:	080172cb 	.word	0x080172cb
 80172fc:	0801754b 	.word	0x0801754b
 8017300:	080174e9 	.word	0x080174e9
 8017304:	080174df 	.word	0x080174df
 8017308:	080172cb 	.word	0x080172cb
 801730c:	080172cb 	.word	0x080172cb
 8017310:	08017435 	.word	0x08017435
 8017314:	080173c7 	.word	0x080173c7
 8017318:	08017387 	.word	0x08017387
 801731c:	080172cb 	.word	0x080172cb
 8017320:	080172cb 	.word	0x080172cb
 8017324:	080172cb 	.word	0x080172cb
 8017328:	0801732d 	.word	0x0801732d
 801732c:	a910      	add	r1, sp, #64	; 0x40
 801732e:	4628      	mov	r0, r5
 8017330:	f002 fe7c 	bl	801a02c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8017334:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8017338:	f1b8 0f00 	cmp.w	r8, #0
 801733c:	f000 811a 	beq.w	8017574 <read_submessage_list+0x2b8>
 8017340:	f001 fc94 	bl	8018c6c <uxr_nanos>
 8017344:	4602      	mov	r2, r0
 8017346:	460b      	mov	r3, r1
 8017348:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801734c:	2100      	movs	r1, #0
 801734e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8017350:	9006      	str	r0, [sp, #24]
 8017352:	468c      	mov	ip, r1
 8017354:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017356:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801735a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801735c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8017360:	468c      	mov	ip, r1
 8017362:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017364:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017368:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801736c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8017370:	fbc7 0106 	smlal	r0, r1, r7, r6
 8017374:	e9cd 0100 	strd	r0, r1, [sp]
 8017378:	4620      	mov	r0, r4
 801737a:	47c0      	blx	r8
 801737c:	f04f 0301 	mov.w	r3, #1
 8017380:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8017384:	e7a1      	b.n	80172ca <read_submessage_list+0xe>
 8017386:	a910      	add	r1, sp, #64	; 0x40
 8017388:	4628      	mov	r0, r5
 801738a:	f002 fe3b 	bl	801a004 <uxr_deserialize_HEARTBEAT_Payload>
 801738e:	2100      	movs	r1, #0
 8017390:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8017394:	f001 faf8 	bl	8018988 <uxr_stream_id_from_raw>
 8017398:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801739c:	900f      	str	r0, [sp, #60]	; 0x3c
 801739e:	f104 0008 	add.w	r0, r4, #8
 80173a2:	4641      	mov	r1, r8
 80173a4:	f001 fbde 	bl	8018b64 <uxr_get_input_reliable_stream>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	d08e      	beq.n	80172ca <read_submessage_list+0xe>
 80173ac:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80173b0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80173b4:	f006 f95e 	bl	801d674 <uxr_process_heartbeat>
 80173b8:	4642      	mov	r2, r8
 80173ba:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80173be:	4620      	mov	r0, r4
 80173c0:	f7ff fdf8 	bl	8016fb4 <write_submessage_acknack.isra.0>
 80173c4:	e781      	b.n	80172ca <read_submessage_list+0xe>
 80173c6:	a910      	add	r1, sp, #64	; 0x40
 80173c8:	4628      	mov	r0, r5
 80173ca:	f002 fdf3 	bl	8019fb4 <uxr_deserialize_ACKNACK_Payload>
 80173ce:	2100      	movs	r1, #0
 80173d0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80173d4:	f001 fad8 	bl	8018988 <uxr_stream_id_from_raw>
 80173d8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80173dc:	900d      	str	r0, [sp, #52]	; 0x34
 80173de:	f104 0008 	add.w	r0, r4, #8
 80173e2:	f001 fba9 	bl	8018b38 <uxr_get_output_reliable_stream>
 80173e6:	4680      	mov	r8, r0
 80173e8:	2800      	cmp	r0, #0
 80173ea:	f43f af6e 	beq.w	80172ca <read_submessage_list+0xe>
 80173ee:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80173f2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80173f6:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80173fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80173fe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8017402:	b289      	uxth	r1, r1
 8017404:	f006 fc98 	bl	801dd38 <uxr_process_acknack>
 8017408:	4640      	mov	r0, r8
 801740a:	f006 fc59 	bl	801dcc0 <uxr_begin_output_nack_buffer_it>
 801740e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8017412:	e005      	b.n	8017420 <read_submessage_list+0x164>
 8017414:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017416:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 801741a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801741e:	47c8      	blx	r9
 8017420:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8017424:	aa0f      	add	r2, sp, #60	; 0x3c
 8017426:	4651      	mov	r1, sl
 8017428:	4640      	mov	r0, r8
 801742a:	f006 fc4b 	bl	801dcc4 <uxr_next_reliable_nack_buffer_to_send>
 801742e:	2800      	cmp	r0, #0
 8017430:	d1f0      	bne.n	8017414 <read_submessage_list+0x158>
 8017432:	e74a      	b.n	80172ca <read_submessage_list+0xe>
 8017434:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8017438:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801743c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8017440:	4628      	mov	r0, r5
 8017442:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8017446:	4651      	mov	r1, sl
 8017448:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801744c:	f1a8 0804 	sub.w	r8, r8, #4
 8017450:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8017454:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8017458:	fa1f f888 	uxth.w	r8, r8
 801745c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017460:	f009 090e 	and.w	r9, r9, #14
 8017464:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8017468:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801746c:	f002 fb04 	bl	8019a78 <uxr_deserialize_BaseObjectRequest>
 8017470:	4650      	mov	r0, sl
 8017472:	a90f      	add	r1, sp, #60	; 0x3c
 8017474:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8017478:	f000 fdca 	bl	8018010 <uxr_parse_base_object_request>
 801747c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801747e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8017482:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8017486:	9110      	str	r1, [sp, #64]	; 0x40
 8017488:	f1bb 0f00 	cmp.w	fp, #0
 801748c:	d006      	beq.n	801749c <read_submessage_list+0x1e0>
 801748e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8017492:	4652      	mov	r2, sl
 8017494:	4620      	mov	r0, r4
 8017496:	9300      	str	r3, [sp, #0]
 8017498:	2300      	movs	r3, #0
 801749a:	47d8      	blx	fp
 801749c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801749e:	b182      	cbz	r2, 80174c2 <read_submessage_list+0x206>
 80174a0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80174a2:	f04f 0c00 	mov.w	ip, #0
 80174a6:	3902      	subs	r1, #2
 80174a8:	e003      	b.n	80174b2 <read_submessage_list+0x1f6>
 80174aa:	f10c 0c01 	add.w	ip, ip, #1
 80174ae:	4594      	cmp	ip, r2
 80174b0:	d007      	beq.n	80174c2 <read_submessage_list+0x206>
 80174b2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80174b6:	4553      	cmp	r3, sl
 80174b8:	d1f7      	bne.n	80174aa <read_submessage_list+0x1ee>
 80174ba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80174bc:	2200      	movs	r2, #0
 80174be:	f803 200c 	strb.w	r2, [r3, ip]
 80174c2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80174c6:	464b      	mov	r3, r9
 80174c8:	4642      	mov	r2, r8
 80174ca:	4620      	mov	r0, r4
 80174cc:	9102      	str	r1, [sp, #8]
 80174ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80174d0:	9101      	str	r1, [sp, #4]
 80174d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80174d4:	9100      	str	r1, [sp, #0]
 80174d6:	4629      	mov	r1, r5
 80174d8:	f7ff fc4a 	bl	8016d70 <read_submessage_format>
 80174dc:	e6f5      	b.n	80172ca <read_submessage_list+0xe>
 80174de:	4629      	mov	r1, r5
 80174e0:	4620      	mov	r0, r4
 80174e2:	f7ff fea3 	bl	801722c <read_submessage_info>
 80174e6:	e6f0      	b.n	80172ca <read_submessage_list+0xe>
 80174e8:	2a00      	cmp	r2, #0
 80174ea:	d03e      	beq.n	801756a <read_submessage_list+0x2ae>
 80174ec:	a910      	add	r1, sp, #64	; 0x40
 80174ee:	4628      	mov	r0, r5
 80174f0:	f002 fcb8 	bl	8019e64 <uxr_deserialize_STATUS_Payload>
 80174f4:	a90e      	add	r1, sp, #56	; 0x38
 80174f6:	aa0d      	add	r2, sp, #52	; 0x34
 80174f8:	a810      	add	r0, sp, #64	; 0x40
 80174fa:	f000 fd89 	bl	8018010 <uxr_parse_base_object_request>
 80174fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017500:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8017504:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8017508:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801750c:	910f      	str	r1, [sp, #60]	; 0x3c
 801750e:	f1ba 0f00 	cmp.w	sl, #0
 8017512:	d006      	beq.n	8017522 <read_submessage_list+0x266>
 8017514:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8017518:	4642      	mov	r2, r8
 801751a:	4620      	mov	r0, r4
 801751c:	9300      	str	r3, [sp, #0]
 801751e:	464b      	mov	r3, r9
 8017520:	47d0      	blx	sl
 8017522:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8017524:	2a00      	cmp	r2, #0
 8017526:	f43f aed0 	beq.w	80172ca <read_submessage_list+0xe>
 801752a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801752c:	2100      	movs	r1, #0
 801752e:	3802      	subs	r0, #2
 8017530:	e003      	b.n	801753a <read_submessage_list+0x27e>
 8017532:	3101      	adds	r1, #1
 8017534:	4291      	cmp	r1, r2
 8017536:	f43f aec8 	beq.w	80172ca <read_submessage_list+0xe>
 801753a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801753e:	4543      	cmp	r3, r8
 8017540:	d1f7      	bne.n	8017532 <read_submessage_list+0x276>
 8017542:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017544:	f803 9001 	strb.w	r9, [r3, r1]
 8017548:	e6bf      	b.n	80172ca <read_submessage_list+0xe>
 801754a:	2a00      	cmp	r2, #0
 801754c:	f47f aebd 	bne.w	80172ca <read_submessage_list+0xe>
 8017550:	4629      	mov	r1, r5
 8017552:	4620      	mov	r0, r4
 8017554:	f000 fca0 	bl	8017e98 <uxr_read_create_session_status>
 8017558:	e6b7      	b.n	80172ca <read_submessage_list+0xe>
 801755a:	4629      	mov	r1, r5
 801755c:	4620      	mov	r0, r4
 801755e:	f7ff fcf3 	bl	8016f48 <read_submessage_get_info>
 8017562:	e6b2      	b.n	80172ca <read_submessage_list+0xe>
 8017564:	b017      	add	sp, #92	; 0x5c
 8017566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801756a:	4629      	mov	r1, r5
 801756c:	4620      	mov	r0, r4
 801756e:	f000 fca1 	bl	8017eb4 <uxr_read_delete_session_status>
 8017572:	e6aa      	b.n	80172ca <read_submessage_list+0xe>
 8017574:	f001 fb7a 	bl	8018c6c <uxr_nanos>
 8017578:	4642      	mov	r2, r8
 801757a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801757c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801757e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017582:	1818      	adds	r0, r3, r0
 8017584:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017586:	eb42 0101 	adc.w	r1, r2, r1
 801758a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801758c:	4642      	mov	r2, r8
 801758e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017592:	469c      	mov	ip, r3
 8017594:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8017598:	fbc3 7806 	smlal	r7, r8, r3, r6
 801759c:	4643      	mov	r3, r8
 801759e:	eb1c 0c07 	adds.w	ip, ip, r7
 80175a2:	eb42 0203 	adc.w	r2, r2, r3
 80175a6:	ebb0 030c 	subs.w	r3, r0, ip
 80175aa:	eb61 0202 	sbc.w	r2, r1, r2
 80175ae:	2a00      	cmp	r2, #0
 80175b0:	db08      	blt.n	80175c4 <read_submessage_list+0x308>
 80175b2:	085b      	lsrs	r3, r3, #1
 80175b4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80175b8:	1052      	asrs	r2, r2, #1
 80175ba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80175be:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 80175c2:	e6db      	b.n	801737c <read_submessage_list+0xc0>
 80175c4:	3301      	adds	r3, #1
 80175c6:	f142 0200 	adc.w	r2, r2, #0
 80175ca:	e7f2      	b.n	80175b2 <read_submessage_list+0x2f6>
 80175cc:	3b9aca00 	.word	0x3b9aca00

080175d0 <listen_message_reliably>:
 80175d0:	1e0b      	subs	r3, r1, #0
 80175d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175d6:	bfb8      	it	lt
 80175d8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80175dc:	b09d      	sub	sp, #116	; 0x74
 80175de:	4680      	mov	r8, r0
 80175e0:	9305      	str	r3, [sp, #20]
 80175e2:	f001 fb27 	bl	8018c34 <uxr_millis>
 80175e6:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80175ea:	4681      	mov	r9, r0
 80175ec:	2a00      	cmp	r2, #0
 80175ee:	f000 809a 	beq.w	8017726 <listen_message_reliably+0x156>
 80175f2:	2600      	movs	r6, #0
 80175f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80175f8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80175fc:	460f      	mov	r7, r1
 80175fe:	4630      	mov	r0, r6
 8017600:	9303      	str	r3, [sp, #12]
 8017602:	e00e      	b.n	8017622 <listen_message_reliably+0x52>
 8017604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017606:	3601      	adds	r6, #1
 8017608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801760a:	455a      	cmp	r2, fp
 801760c:	9903      	ldr	r1, [sp, #12]
 801760e:	b2f0      	uxtb	r0, r6
 8017610:	eb73 0101 	sbcs.w	r1, r3, r1
 8017614:	da01      	bge.n	801761a <listen_message_reliably+0x4a>
 8017616:	4693      	mov	fp, r2
 8017618:	9303      	str	r3, [sp, #12]
 801761a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801761e:	4283      	cmp	r3, r0
 8017620:	d95f      	bls.n	80176e2 <listen_message_reliably+0x112>
 8017622:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8017626:	2102      	movs	r1, #2
 8017628:	2201      	movs	r2, #1
 801762a:	00e4      	lsls	r4, r4, #3
 801762c:	f001 f97e 	bl	801892c <uxr_stream_id>
 8017630:	4601      	mov	r1, r0
 8017632:	f104 0520 	add.w	r5, r4, #32
 8017636:	463b      	mov	r3, r7
 8017638:	464a      	mov	r2, r9
 801763a:	9109      	str	r1, [sp, #36]	; 0x24
 801763c:	4445      	add	r5, r8
 801763e:	4628      	mov	r0, r5
 8017640:	f006 fb12 	bl	801dc68 <uxr_update_output_stream_heartbeat_timestamp>
 8017644:	eb08 0304 	add.w	r3, r8, r4
 8017648:	2800      	cmp	r0, #0
 801764a:	d0db      	beq.n	8017604 <listen_message_reliably+0x34>
 801764c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8017650:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8017654:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017658:	4640      	mov	r0, r8
 801765a:	3501      	adds	r5, #1
 801765c:	4444      	add	r4, r8
 801765e:	9304      	str	r3, [sp, #16]
 8017660:	f000 fcae 	bl	8017fc0 <uxr_session_header_offset>
 8017664:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017668:	2300      	movs	r3, #0
 801766a:	2211      	movs	r2, #17
 801766c:	a90c      	add	r1, sp, #48	; 0x30
 801766e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8017672:	9000      	str	r0, [sp, #0]
 8017674:	4650      	mov	r0, sl
 8017676:	3601      	adds	r6, #1
 8017678:	f7fa fd18 	bl	80120ac <ucdr_init_buffer_origin_offset>
 801767c:	2300      	movs	r3, #0
 801767e:	2205      	movs	r2, #5
 8017680:	210b      	movs	r1, #11
 8017682:	4650      	mov	r0, sl
 8017684:	f001 fa90 	bl	8018ba8 <uxr_buffer_submessage_header>
 8017688:	2101      	movs	r1, #1
 801768a:	8968      	ldrh	r0, [r5, #10]
 801768c:	f006 fbb0 	bl	801ddf0 <uxr_seq_num_add>
 8017690:	892b      	ldrh	r3, [r5, #8]
 8017692:	4602      	mov	r2, r0
 8017694:	a90a      	add	r1, sp, #40	; 0x28
 8017696:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801769a:	4650      	mov	r0, sl
 801769c:	9b04      	ldr	r3, [sp, #16]
 801769e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80176a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80176a6:	f002 fc99 	bl	8019fdc <uxr_serialize_HEARTBEAT_Payload>
 80176aa:	2200      	movs	r2, #0
 80176ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176ae:	4640      	mov	r0, r8
 80176b0:	4611      	mov	r1, r2
 80176b2:	f000 fc31 	bl	8017f18 <uxr_stamp_session_header>
 80176b6:	4650      	mov	r0, sl
 80176b8:	f7fa fd38 	bl	801212c <ucdr_buffer_length>
 80176bc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80176c0:	4602      	mov	r2, r0
 80176c2:	a90c      	add	r1, sp, #48	; 0x30
 80176c4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80176c8:	47a8      	blx	r5
 80176ca:	9903      	ldr	r1, [sp, #12]
 80176cc:	b2f0      	uxtb	r0, r6
 80176ce:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80176d2:	455a      	cmp	r2, fp
 80176d4:	eb73 0101 	sbcs.w	r1, r3, r1
 80176d8:	db9d      	blt.n	8017616 <listen_message_reliably+0x46>
 80176da:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80176de:	4283      	cmp	r3, r0
 80176e0:	d89f      	bhi.n	8017622 <listen_message_reliably+0x52>
 80176e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80176e6:	9a03      	ldr	r2, [sp, #12]
 80176e8:	429a      	cmp	r2, r3
 80176ea:	bf08      	it	eq
 80176ec:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80176f0:	d019      	beq.n	8017726 <listen_message_reliably+0x156>
 80176f2:	ebab 0309 	sub.w	r3, fp, r9
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	9d05      	ldr	r5, [sp, #20]
 80176fa:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80176fe:	aa08      	add	r2, sp, #32
 8017700:	bf08      	it	eq
 8017702:	2301      	moveq	r3, #1
 8017704:	a907      	add	r1, sp, #28
 8017706:	6884      	ldr	r4, [r0, #8]
 8017708:	429d      	cmp	r5, r3
 801770a:	6800      	ldr	r0, [r0, #0]
 801770c:	bfa8      	it	ge
 801770e:	461d      	movge	r5, r3
 8017710:	462b      	mov	r3, r5
 8017712:	47a0      	blx	r4
 8017714:	b948      	cbnz	r0, 801772a <listen_message_reliably+0x15a>
 8017716:	9b05      	ldr	r3, [sp, #20]
 8017718:	1b5b      	subs	r3, r3, r5
 801771a:	2b00      	cmp	r3, #0
 801771c:	9305      	str	r3, [sp, #20]
 801771e:	f73f af60 	bgt.w	80175e2 <listen_message_reliably+0x12>
 8017722:	4604      	mov	r4, r0
 8017724:	e012      	b.n	801774c <listen_message_reliably+0x17c>
 8017726:	9b05      	ldr	r3, [sp, #20]
 8017728:	e7e5      	b.n	80176f6 <listen_message_reliably+0x126>
 801772a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801772e:	4604      	mov	r4, r0
 8017730:	2500      	movs	r5, #0
 8017732:	a80c      	add	r0, sp, #48	; 0x30
 8017734:	f7fa fccc 	bl	80120d0 <ucdr_init_buffer>
 8017738:	f10d 031a 	add.w	r3, sp, #26
 801773c:	aa06      	add	r2, sp, #24
 801773e:	a90c      	add	r1, sp, #48	; 0x30
 8017740:	4640      	mov	r0, r8
 8017742:	f88d 5018 	strb.w	r5, [sp, #24]
 8017746:	f000 fbfb 	bl	8017f40 <uxr_read_session_header>
 801774a:	b918      	cbnz	r0, 8017754 <listen_message_reliably+0x184>
 801774c:	4620      	mov	r0, r4
 801774e:	b01d      	add	sp, #116	; 0x74
 8017750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017754:	4629      	mov	r1, r5
 8017756:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801775a:	f001 f915 	bl	8018988 <uxr_stream_id_from_raw>
 801775e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017762:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8017766:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801776a:	2e01      	cmp	r6, #1
 801776c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8017770:	d04b      	beq.n	801780a <listen_message_reliably+0x23a>
 8017772:	2e02      	cmp	r6, #2
 8017774:	d00f      	beq.n	8017796 <listen_message_reliably+0x1c6>
 8017776:	2e00      	cmp	r6, #0
 8017778:	d1e8      	bne.n	801774c <listen_message_reliably+0x17c>
 801777a:	4631      	mov	r1, r6
 801777c:	4630      	mov	r0, r6
 801777e:	f001 f903 	bl	8018988 <uxr_stream_id_from_raw>
 8017782:	4602      	mov	r2, r0
 8017784:	a90c      	add	r1, sp, #48	; 0x30
 8017786:	4640      	mov	r0, r8
 8017788:	920a      	str	r2, [sp, #40]	; 0x28
 801778a:	f7ff fd97 	bl	80172bc <read_submessage_list>
 801778e:	4620      	mov	r0, r4
 8017790:	b01d      	add	sp, #116	; 0x74
 8017792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017796:	4629      	mov	r1, r5
 8017798:	f108 0008 	add.w	r0, r8, #8
 801779c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80177a0:	f001 f9e0 	bl	8018b64 <uxr_get_input_reliable_stream>
 80177a4:	4607      	mov	r7, r0
 80177a6:	b338      	cbz	r0, 80177f8 <listen_message_reliably+0x228>
 80177a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80177aa:	a80c      	add	r0, sp, #48	; 0x30
 80177ac:	9203      	str	r2, [sp, #12]
 80177ae:	f7fa fcc1 	bl	8012134 <ucdr_buffer_remaining>
 80177b2:	4603      	mov	r3, r0
 80177b4:	f10d 0019 	add.w	r0, sp, #25
 80177b8:	9a03      	ldr	r2, [sp, #12]
 80177ba:	4651      	mov	r1, sl
 80177bc:	9000      	str	r0, [sp, #0]
 80177be:	4638      	mov	r0, r7
 80177c0:	f005 fe5c 	bl	801d47c <uxr_receive_reliable_message>
 80177c4:	b1c0      	cbz	r0, 80177f8 <listen_message_reliably+0x228>
 80177c6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80177ca:	b393      	cbz	r3, 8017832 <listen_message_reliably+0x262>
 80177cc:	ae14      	add	r6, sp, #80	; 0x50
 80177ce:	f04f 0a02 	mov.w	sl, #2
 80177d2:	e00a      	b.n	80177ea <listen_message_reliably+0x21a>
 80177d4:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80177d8:	4631      	mov	r1, r6
 80177da:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80177de:	4640      	mov	r0, r8
 80177e0:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80177e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80177e6:	f7ff fd69 	bl	80172bc <read_submessage_list>
 80177ea:	2204      	movs	r2, #4
 80177ec:	4631      	mov	r1, r6
 80177ee:	4638      	mov	r0, r7
 80177f0:	f005 fec6 	bl	801d580 <uxr_next_input_reliable_buffer_available>
 80177f4:	2800      	cmp	r0, #0
 80177f6:	d1ed      	bne.n	80177d4 <listen_message_reliably+0x204>
 80177f8:	4640      	mov	r0, r8
 80177fa:	462a      	mov	r2, r5
 80177fc:	4649      	mov	r1, r9
 80177fe:	f7ff fbd9 	bl	8016fb4 <write_submessage_acknack.isra.0>
 8017802:	4620      	mov	r0, r4
 8017804:	b01d      	add	sp, #116	; 0x74
 8017806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801780a:	4629      	mov	r1, r5
 801780c:	f108 0008 	add.w	r0, r8, #8
 8017810:	f001 f99e 	bl	8018b50 <uxr_get_input_best_effort_stream>
 8017814:	2800      	cmp	r0, #0
 8017816:	d099      	beq.n	801774c <listen_message_reliably+0x17c>
 8017818:	4651      	mov	r1, sl
 801781a:	f005 fda5 	bl	801d368 <uxr_receive_best_effort_message>
 801781e:	2800      	cmp	r0, #0
 8017820:	d094      	beq.n	801774c <listen_message_reliably+0x17c>
 8017822:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8017826:	a90c      	add	r1, sp, #48	; 0x30
 8017828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801782a:	4640      	mov	r0, r8
 801782c:	f7ff fd46 	bl	80172bc <read_submessage_list>
 8017830:	e78c      	b.n	801774c <listen_message_reliably+0x17c>
 8017832:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8017836:	a90c      	add	r1, sp, #48	; 0x30
 8017838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801783a:	4640      	mov	r0, r8
 801783c:	f7ff fd3e 	bl	80172bc <read_submessage_list>
 8017840:	e7c4      	b.n	80177cc <listen_message_reliably+0x1fc>
 8017842:	bf00      	nop

08017844 <uxr_run_session_timeout>:
 8017844:	b570      	push	{r4, r5, r6, lr}
 8017846:	4604      	mov	r4, r0
 8017848:	460d      	mov	r5, r1
 801784a:	f001 f9f3 	bl	8018c34 <uxr_millis>
 801784e:	4606      	mov	r6, r0
 8017850:	4620      	mov	r0, r4
 8017852:	f7ff fc77 	bl	8017144 <uxr_flash_output_streams>
 8017856:	4629      	mov	r1, r5
 8017858:	4620      	mov	r0, r4
 801785a:	f7ff feb9 	bl	80175d0 <listen_message_reliably>
 801785e:	f001 f9e9 	bl	8018c34 <uxr_millis>
 8017862:	1b83      	subs	r3, r0, r6
 8017864:	1ae9      	subs	r1, r5, r3
 8017866:	2900      	cmp	r1, #0
 8017868:	dcf6      	bgt.n	8017858 <uxr_run_session_timeout+0x14>
 801786a:	f104 0008 	add.w	r0, r4, #8
 801786e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017872:	f001 b983 	b.w	8018b7c <uxr_output_streams_confirmed>
 8017876:	bf00      	nop

08017878 <uxr_run_session_until_data>:
 8017878:	b570      	push	{r4, r5, r6, lr}
 801787a:	4604      	mov	r4, r0
 801787c:	460d      	mov	r5, r1
 801787e:	f001 f9d9 	bl	8018c34 <uxr_millis>
 8017882:	4606      	mov	r6, r0
 8017884:	4620      	mov	r0, r4
 8017886:	f7ff fc5d 	bl	8017144 <uxr_flash_output_streams>
 801788a:	2300      	movs	r3, #0
 801788c:	4629      	mov	r1, r5
 801788e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8017892:	e005      	b.n	80178a0 <uxr_run_session_until_data+0x28>
 8017894:	f001 f9ce 	bl	8018c34 <uxr_millis>
 8017898:	1b83      	subs	r3, r0, r6
 801789a:	1ae9      	subs	r1, r5, r3
 801789c:	2900      	cmp	r1, #0
 801789e:	dd07      	ble.n	80178b0 <uxr_run_session_until_data+0x38>
 80178a0:	4620      	mov	r0, r4
 80178a2:	f7ff fe95 	bl	80175d0 <listen_message_reliably>
 80178a6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80178aa:	2800      	cmp	r0, #0
 80178ac:	d0f2      	beq.n	8017894 <uxr_run_session_until_data+0x1c>
 80178ae:	bd70      	pop	{r4, r5, r6, pc}
 80178b0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80178b4:	bd70      	pop	{r4, r5, r6, pc}
 80178b6:	bf00      	nop

080178b8 <uxr_run_session_until_confirm_delivery>:
 80178b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178bc:	4606      	mov	r6, r0
 80178be:	460d      	mov	r5, r1
 80178c0:	f001 f9b8 	bl	8018c34 <uxr_millis>
 80178c4:	4607      	mov	r7, r0
 80178c6:	4630      	mov	r0, r6
 80178c8:	f106 0808 	add.w	r8, r6, #8
 80178cc:	f7ff fc3a 	bl	8017144 <uxr_flash_output_streams>
 80178d0:	2d00      	cmp	r5, #0
 80178d2:	db10      	blt.n	80178f6 <uxr_run_session_until_confirm_delivery+0x3e>
 80178d4:	462c      	mov	r4, r5
 80178d6:	e006      	b.n	80178e6 <uxr_run_session_until_confirm_delivery+0x2e>
 80178d8:	f7ff fe7a 	bl	80175d0 <listen_message_reliably>
 80178dc:	f001 f9aa 	bl	8018c34 <uxr_millis>
 80178e0:	1bc3      	subs	r3, r0, r7
 80178e2:	1aec      	subs	r4, r5, r3
 80178e4:	d407      	bmi.n	80178f6 <uxr_run_session_until_confirm_delivery+0x3e>
 80178e6:	4640      	mov	r0, r8
 80178e8:	f001 f948 	bl	8018b7c <uxr_output_streams_confirmed>
 80178ec:	4603      	mov	r3, r0
 80178ee:	4621      	mov	r1, r4
 80178f0:	4630      	mov	r0, r6
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d0f0      	beq.n	80178d8 <uxr_run_session_until_confirm_delivery+0x20>
 80178f6:	4640      	mov	r0, r8
 80178f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178fc:	f001 b93e 	b.w	8018b7c <uxr_output_streams_confirmed>

08017900 <uxr_run_session_until_all_status>:
 8017900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017904:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8017908:	4606      	mov	r6, r0
 801790a:	4688      	mov	r8, r1
 801790c:	4692      	mov	sl, r2
 801790e:	461f      	mov	r7, r3
 8017910:	f7ff fc18 	bl	8017144 <uxr_flash_output_streams>
 8017914:	f1bb 0f00 	cmp.w	fp, #0
 8017918:	d004      	beq.n	8017924 <uxr_run_session_until_all_status+0x24>
 801791a:	465a      	mov	r2, fp
 801791c:	21ff      	movs	r1, #255	; 0xff
 801791e:	4638      	mov	r0, r7
 8017920:	f008 f940 	bl	801fba4 <memset>
 8017924:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8017928:	1e7d      	subs	r5, r7, #1
 801792a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 801792e:	f001 f981 	bl	8018c34 <uxr_millis>
 8017932:	4641      	mov	r1, r8
 8017934:	4681      	mov	r9, r0
 8017936:	4630      	mov	r0, r6
 8017938:	f7ff fe4a 	bl	80175d0 <listen_message_reliably>
 801793c:	f001 f97a 	bl	8018c34 <uxr_millis>
 8017940:	eba0 0009 	sub.w	r0, r0, r9
 8017944:	eba8 0100 	sub.w	r1, r8, r0
 8017948:	f1bb 0f00 	cmp.w	fp, #0
 801794c:	d029      	beq.n	80179a2 <uxr_run_session_until_all_status+0xa2>
 801794e:	46ae      	mov	lr, r5
 8017950:	f04f 0c00 	mov.w	ip, #0
 8017954:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8017958:	2cff      	cmp	r4, #255	; 0xff
 801795a:	d015      	beq.n	8017988 <uxr_run_session_until_all_status+0x88>
 801795c:	f10c 0c01 	add.w	ip, ip, #1
 8017960:	45e3      	cmp	fp, ip
 8017962:	d8f7      	bhi.n	8017954 <uxr_run_session_until_all_status+0x54>
 8017964:	2300      	movs	r3, #0
 8017966:	67f3      	str	r3, [r6, #124]	; 0x7c
 8017968:	e000      	b.n	801796c <uxr_run_session_until_all_status+0x6c>
 801796a:	b158      	cbz	r0, 8017984 <uxr_run_session_until_all_status+0x84>
 801796c:	462b      	mov	r3, r5
 801796e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8017972:	3302      	adds	r3, #2
 8017974:	2801      	cmp	r0, #1
 8017976:	eba3 0307 	sub.w	r3, r3, r7
 801797a:	bf8c      	ite	hi
 801797c:	2000      	movhi	r0, #0
 801797e:	2001      	movls	r0, #1
 8017980:	459b      	cmp	fp, r3
 8017982:	d8f2      	bhi.n	801796a <uxr_run_session_until_all_status+0x6a>
 8017984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017988:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 801798c:	f10c 0c01 	add.w	ip, ip, #1
 8017990:	45dc      	cmp	ip, fp
 8017992:	d201      	bcs.n	8017998 <uxr_run_session_until_all_status+0x98>
 8017994:	2b00      	cmp	r3, #0
 8017996:	d0dd      	beq.n	8017954 <uxr_run_session_until_all_status+0x54>
 8017998:	2900      	cmp	r1, #0
 801799a:	dde3      	ble.n	8017964 <uxr_run_session_until_all_status+0x64>
 801799c:	2b00      	cmp	r3, #0
 801799e:	d1ca      	bne.n	8017936 <uxr_run_session_until_all_status+0x36>
 80179a0:	e7e0      	b.n	8017964 <uxr_run_session_until_all_status+0x64>
 80179a2:	2001      	movs	r0, #1
 80179a4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80179a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179ac <wait_session_status>:
 80179ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b0:	4604      	mov	r4, r0
 80179b2:	b09d      	sub	sp, #116	; 0x74
 80179b4:	20ff      	movs	r0, #255	; 0xff
 80179b6:	9303      	str	r3, [sp, #12]
 80179b8:	7160      	strb	r0, [r4, #5]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	f000 80b6 	beq.w	8017b2c <wait_session_status+0x180>
 80179c0:	4689      	mov	r9, r1
 80179c2:	4692      	mov	sl, r2
 80179c4:	f04f 0b00 	mov.w	fp, #0
 80179c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80179ca:	4652      	mov	r2, sl
 80179cc:	4649      	mov	r1, r9
 80179ce:	e9d3 0500 	ldrd	r0, r5, [r3]
 80179d2:	47a8      	blx	r5
 80179d4:	f001 f92e 	bl	8018c34 <uxr_millis>
 80179d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80179dc:	4605      	mov	r5, r0
 80179de:	e009      	b.n	80179f4 <wait_session_status+0x48>
 80179e0:	f001 f928 	bl	8018c34 <uxr_millis>
 80179e4:	1b40      	subs	r0, r0, r5
 80179e6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	dd40      	ble.n	8017a70 <wait_session_status+0xc4>
 80179ee:	7960      	ldrb	r0, [r4, #5]
 80179f0:	28ff      	cmp	r0, #255	; 0xff
 80179f2:	d145      	bne.n	8017a80 <wait_session_status+0xd4>
 80179f4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80179f6:	a908      	add	r1, sp, #32
 80179f8:	6896      	ldr	r6, [r2, #8]
 80179fa:	6810      	ldr	r0, [r2, #0]
 80179fc:	aa09      	add	r2, sp, #36	; 0x24
 80179fe:	47b0      	blx	r6
 8017a00:	2800      	cmp	r0, #0
 8017a02:	d0ed      	beq.n	80179e0 <wait_session_status+0x34>
 8017a04:	a80c      	add	r0, sp, #48	; 0x30
 8017a06:	2600      	movs	r6, #0
 8017a08:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8017a0c:	f7fa fb60 	bl	80120d0 <ucdr_init_buffer>
 8017a10:	f10d 031e 	add.w	r3, sp, #30
 8017a14:	aa07      	add	r2, sp, #28
 8017a16:	a90c      	add	r1, sp, #48	; 0x30
 8017a18:	4620      	mov	r0, r4
 8017a1a:	f88d 601c 	strb.w	r6, [sp, #28]
 8017a1e:	f000 fa8f 	bl	8017f40 <uxr_read_session_header>
 8017a22:	2800      	cmp	r0, #0
 8017a24:	d0dc      	beq.n	80179e0 <wait_session_status+0x34>
 8017a26:	4631      	mov	r1, r6
 8017a28:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8017a2c:	f000 ffac 	bl	8018988 <uxr_stream_id_from_raw>
 8017a30:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017a34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017a38:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8017a3c:	2f01      	cmp	r7, #1
 8017a3e:	9302      	str	r3, [sp, #8]
 8017a40:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8017a44:	d05c      	beq.n	8017b00 <wait_session_status+0x154>
 8017a46:	2f02      	cmp	r7, #2
 8017a48:	d020      	beq.n	8017a8c <wait_session_status+0xe0>
 8017a4a:	2f00      	cmp	r7, #0
 8017a4c:	d1c8      	bne.n	80179e0 <wait_session_status+0x34>
 8017a4e:	4639      	mov	r1, r7
 8017a50:	4638      	mov	r0, r7
 8017a52:	f000 ff99 	bl	8018988 <uxr_stream_id_from_raw>
 8017a56:	a90c      	add	r1, sp, #48	; 0x30
 8017a58:	4602      	mov	r2, r0
 8017a5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	f7ff fc2d 	bl	80172bc <read_submessage_list>
 8017a62:	f001 f8e7 	bl	8018c34 <uxr_millis>
 8017a66:	1b40      	subs	r0, r0, r5
 8017a68:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	dcbe      	bgt.n	80179ee <wait_session_status+0x42>
 8017a70:	f10b 0b01 	add.w	fp, fp, #1
 8017a74:	9b03      	ldr	r3, [sp, #12]
 8017a76:	7960      	ldrb	r0, [r4, #5]
 8017a78:	455b      	cmp	r3, fp
 8017a7a:	d001      	beq.n	8017a80 <wait_session_status+0xd4>
 8017a7c:	28ff      	cmp	r0, #255	; 0xff
 8017a7e:	d0a3      	beq.n	80179c8 <wait_session_status+0x1c>
 8017a80:	38ff      	subs	r0, #255	; 0xff
 8017a82:	bf18      	it	ne
 8017a84:	2001      	movne	r0, #1
 8017a86:	b01d      	add	sp, #116	; 0x74
 8017a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a8c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8017a90:	4631      	mov	r1, r6
 8017a92:	f104 0008 	add.w	r0, r4, #8
 8017a96:	9304      	str	r3, [sp, #16]
 8017a98:	f001 f864 	bl	8018b64 <uxr_get_input_reliable_stream>
 8017a9c:	4680      	mov	r8, r0
 8017a9e:	b348      	cbz	r0, 8017af4 <wait_session_status+0x148>
 8017aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017aa2:	a80c      	add	r0, sp, #48	; 0x30
 8017aa4:	9205      	str	r2, [sp, #20]
 8017aa6:	f7fa fb45 	bl	8012134 <ucdr_buffer_remaining>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	f10d 001d 	add.w	r0, sp, #29
 8017ab0:	9a05      	ldr	r2, [sp, #20]
 8017ab2:	9000      	str	r0, [sp, #0]
 8017ab4:	4640      	mov	r0, r8
 8017ab6:	9902      	ldr	r1, [sp, #8]
 8017ab8:	f005 fce0 	bl	801d47c <uxr_receive_reliable_message>
 8017abc:	b1d0      	cbz	r0, 8017af4 <wait_session_status+0x148>
 8017abe:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d03a      	beq.n	8017b3c <wait_session_status+0x190>
 8017ac6:	9f04      	ldr	r7, [sp, #16]
 8017ac8:	e00a      	b.n	8017ae0 <wait_session_status+0x134>
 8017aca:	f04f 0302 	mov.w	r3, #2
 8017ace:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8017ad2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8017ad6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8017ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017adc:	f7ff fbee 	bl	80172bc <read_submessage_list>
 8017ae0:	a914      	add	r1, sp, #80	; 0x50
 8017ae2:	2204      	movs	r2, #4
 8017ae4:	4640      	mov	r0, r8
 8017ae6:	f005 fd4b 	bl	801d580 <uxr_next_input_reliable_buffer_available>
 8017aea:	4603      	mov	r3, r0
 8017aec:	a914      	add	r1, sp, #80	; 0x50
 8017aee:	4620      	mov	r0, r4
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d1ea      	bne.n	8017aca <wait_session_status+0x11e>
 8017af4:	4632      	mov	r2, r6
 8017af6:	9904      	ldr	r1, [sp, #16]
 8017af8:	4620      	mov	r0, r4
 8017afa:	f7ff fa5b 	bl	8016fb4 <write_submessage_acknack.isra.0>
 8017afe:	e76f      	b.n	80179e0 <wait_session_status+0x34>
 8017b00:	4631      	mov	r1, r6
 8017b02:	f104 0008 	add.w	r0, r4, #8
 8017b06:	f001 f823 	bl	8018b50 <uxr_get_input_best_effort_stream>
 8017b0a:	2800      	cmp	r0, #0
 8017b0c:	f43f af68 	beq.w	80179e0 <wait_session_status+0x34>
 8017b10:	9902      	ldr	r1, [sp, #8]
 8017b12:	f005 fc29 	bl	801d368 <uxr_receive_best_effort_message>
 8017b16:	2800      	cmp	r0, #0
 8017b18:	f43f af62 	beq.w	80179e0 <wait_session_status+0x34>
 8017b1c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8017b20:	a90c      	add	r1, sp, #48	; 0x30
 8017b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b24:	4620      	mov	r0, r4
 8017b26:	f7ff fbc9 	bl	80172bc <read_submessage_list>
 8017b2a:	e759      	b.n	80179e0 <wait_session_status+0x34>
 8017b2c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017b2e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017b32:	47a0      	blx	r4
 8017b34:	2001      	movs	r0, #1
 8017b36:	b01d      	add	sp, #116	; 0x74
 8017b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b3c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8017b40:	a90c      	add	r1, sp, #48	; 0x30
 8017b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b44:	4620      	mov	r0, r4
 8017b46:	f7ff fbb9 	bl	80172bc <read_submessage_list>
 8017b4a:	e7bc      	b.n	8017ac6 <wait_session_status+0x11a>

08017b4c <uxr_delete_session_retries>:
 8017b4c:	b530      	push	{r4, r5, lr}
 8017b4e:	b08f      	sub	sp, #60	; 0x3c
 8017b50:	4604      	mov	r4, r0
 8017b52:	460d      	mov	r5, r1
 8017b54:	f000 fa34 	bl	8017fc0 <uxr_session_header_offset>
 8017b58:	2300      	movs	r3, #0
 8017b5a:	2210      	movs	r2, #16
 8017b5c:	a902      	add	r1, sp, #8
 8017b5e:	9000      	str	r0, [sp, #0]
 8017b60:	a806      	add	r0, sp, #24
 8017b62:	f7fa faa3 	bl	80120ac <ucdr_init_buffer_origin_offset>
 8017b66:	a906      	add	r1, sp, #24
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f000 f979 	bl	8017e60 <uxr_buffer_delete_session>
 8017b6e:	2200      	movs	r2, #0
 8017b70:	9b06      	ldr	r3, [sp, #24]
 8017b72:	4620      	mov	r0, r4
 8017b74:	4611      	mov	r1, r2
 8017b76:	f000 f9cf 	bl	8017f18 <uxr_stamp_session_header>
 8017b7a:	a806      	add	r0, sp, #24
 8017b7c:	f7fa fad6 	bl	801212c <ucdr_buffer_length>
 8017b80:	462b      	mov	r3, r5
 8017b82:	4602      	mov	r2, r0
 8017b84:	a902      	add	r1, sp, #8
 8017b86:	4620      	mov	r0, r4
 8017b88:	f7ff ff10 	bl	80179ac <wait_session_status>
 8017b8c:	b118      	cbz	r0, 8017b96 <uxr_delete_session_retries+0x4a>
 8017b8e:	7960      	ldrb	r0, [r4, #5]
 8017b90:	fab0 f080 	clz	r0, r0
 8017b94:	0940      	lsrs	r0, r0, #5
 8017b96:	b00f      	add	sp, #60	; 0x3c
 8017b98:	bd30      	pop	{r4, r5, pc}
 8017b9a:	bf00      	nop

08017b9c <uxr_create_session>:
 8017b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba0:	f100 0b08 	add.w	fp, r0, #8
 8017ba4:	4604      	mov	r4, r0
 8017ba6:	b0ab      	sub	sp, #172	; 0xac
 8017ba8:	4658      	mov	r0, fp
 8017baa:	465e      	mov	r6, fp
 8017bac:	f000 ff22 	bl	80189f4 <uxr_reset_stream_storage>
 8017bb0:	4620      	mov	r0, r4
 8017bb2:	f000 fa05 	bl	8017fc0 <uxr_session_header_offset>
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	221c      	movs	r2, #28
 8017bba:	a90b      	add	r1, sp, #44	; 0x2c
 8017bbc:	9000      	str	r0, [sp, #0]
 8017bbe:	a812      	add	r0, sp, #72	; 0x48
 8017bc0:	f7fa fa74 	bl	80120ac <ucdr_init_buffer_origin_offset>
 8017bc4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017bc6:	a912      	add	r1, sp, #72	; 0x48
 8017bc8:	4620      	mov	r0, r4
 8017bca:	8a1a      	ldrh	r2, [r3, #16]
 8017bcc:	3a04      	subs	r2, #4
 8017bce:	b292      	uxth	r2, r2
 8017bd0:	f000 f91c 	bl	8017e0c <uxr_buffer_create_session>
 8017bd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017bd6:	4620      	mov	r0, r4
 8017bd8:	f000 f98a 	bl	8017ef0 <uxr_stamp_create_session_header>
 8017bdc:	a812      	add	r0, sp, #72	; 0x48
 8017bde:	f7fa faa5 	bl	801212c <ucdr_buffer_length>
 8017be2:	23ff      	movs	r3, #255	; 0xff
 8017be4:	4681      	mov	r9, r0
 8017be6:	7163      	strb	r3, [r4, #5]
 8017be8:	230a      	movs	r3, #10
 8017bea:	9303      	str	r3, [sp, #12]
 8017bec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017bee:	464a      	mov	r2, r9
 8017bf0:	a90b      	add	r1, sp, #44	; 0x2c
 8017bf2:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017bf6:	47a8      	blx	r5
 8017bf8:	f001 f81c 	bl	8018c34 <uxr_millis>
 8017bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c00:	4605      	mov	r5, r0
 8017c02:	e009      	b.n	8017c18 <uxr_create_session+0x7c>
 8017c04:	f001 f816 	bl	8018c34 <uxr_millis>
 8017c08:	1b40      	subs	r0, r0, r5
 8017c0a:	7962      	ldrb	r2, [r4, #5]
 8017c0c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	dd38      	ble.n	8017c86 <uxr_create_session+0xea>
 8017c14:	2aff      	cmp	r2, #255	; 0xff
 8017c16:	d13c      	bne.n	8017c92 <uxr_create_session+0xf6>
 8017c18:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8017c1a:	a907      	add	r1, sp, #28
 8017c1c:	6897      	ldr	r7, [r2, #8]
 8017c1e:	6810      	ldr	r0, [r2, #0]
 8017c20:	aa08      	add	r2, sp, #32
 8017c22:	47b8      	blx	r7
 8017c24:	2800      	cmp	r0, #0
 8017c26:	d0ed      	beq.n	8017c04 <uxr_create_session+0x68>
 8017c28:	a81a      	add	r0, sp, #104	; 0x68
 8017c2a:	2700      	movs	r7, #0
 8017c2c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017c30:	f7fa fa4e 	bl	80120d0 <ucdr_init_buffer>
 8017c34:	f10d 031a 	add.w	r3, sp, #26
 8017c38:	aa06      	add	r2, sp, #24
 8017c3a:	a91a      	add	r1, sp, #104	; 0x68
 8017c3c:	4620      	mov	r0, r4
 8017c3e:	f88d 7018 	strb.w	r7, [sp, #24]
 8017c42:	f000 f97d 	bl	8017f40 <uxr_read_session_header>
 8017c46:	2800      	cmp	r0, #0
 8017c48:	d0dc      	beq.n	8017c04 <uxr_create_session+0x68>
 8017c4a:	4639      	mov	r1, r7
 8017c4c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017c50:	f000 fe9a 	bl	8018988 <uxr_stream_id_from_raw>
 8017c54:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017c58:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8017c5c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017c60:	2f01      	cmp	r7, #1
 8017c62:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8017c66:	d053      	beq.n	8017d10 <uxr_create_session+0x174>
 8017c68:	2f02      	cmp	r7, #2
 8017c6a:	d018      	beq.n	8017c9e <uxr_create_session+0x102>
 8017c6c:	2f00      	cmp	r7, #0
 8017c6e:	d1c9      	bne.n	8017c04 <uxr_create_session+0x68>
 8017c70:	4639      	mov	r1, r7
 8017c72:	4638      	mov	r0, r7
 8017c74:	f000 fe88 	bl	8018988 <uxr_stream_id_from_raw>
 8017c78:	a91a      	add	r1, sp, #104	; 0x68
 8017c7a:	4602      	mov	r2, r0
 8017c7c:	900a      	str	r0, [sp, #40]	; 0x28
 8017c7e:	4620      	mov	r0, r4
 8017c80:	f7ff fb1c 	bl	80172bc <read_submessage_list>
 8017c84:	e7be      	b.n	8017c04 <uxr_create_session+0x68>
 8017c86:	9b03      	ldr	r3, [sp, #12]
 8017c88:	3b01      	subs	r3, #1
 8017c8a:	9303      	str	r3, [sp, #12]
 8017c8c:	d001      	beq.n	8017c92 <uxr_create_session+0xf6>
 8017c8e:	2aff      	cmp	r2, #255	; 0xff
 8017c90:	d0ac      	beq.n	8017bec <uxr_create_session+0x50>
 8017c92:	2a00      	cmp	r2, #0
 8017c94:	d051      	beq.n	8017d3a <uxr_create_session+0x19e>
 8017c96:	2000      	movs	r0, #0
 8017c98:	b02b      	add	sp, #172	; 0xac
 8017c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c9e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017ca2:	4641      	mov	r1, r8
 8017ca4:	4630      	mov	r0, r6
 8017ca6:	9304      	str	r3, [sp, #16]
 8017ca8:	f000 ff5c 	bl	8018b64 <uxr_get_input_reliable_stream>
 8017cac:	4682      	mov	sl, r0
 8017cae:	b348      	cbz	r0, 8017d04 <uxr_create_session+0x168>
 8017cb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017cb2:	a81a      	add	r0, sp, #104	; 0x68
 8017cb4:	9205      	str	r2, [sp, #20]
 8017cb6:	f7fa fa3d 	bl	8012134 <ucdr_buffer_remaining>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	f10d 0019 	add.w	r0, sp, #25
 8017cc0:	9a05      	ldr	r2, [sp, #20]
 8017cc2:	4659      	mov	r1, fp
 8017cc4:	9000      	str	r0, [sp, #0]
 8017cc6:	4650      	mov	r0, sl
 8017cc8:	f005 fbd8 	bl	801d47c <uxr_receive_reliable_message>
 8017ccc:	b1d0      	cbz	r0, 8017d04 <uxr_create_session+0x168>
 8017cce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d038      	beq.n	8017d48 <uxr_create_session+0x1ac>
 8017cd6:	9f04      	ldr	r7, [sp, #16]
 8017cd8:	e00a      	b.n	8017cf0 <uxr_create_session+0x154>
 8017cda:	f04f 0302 	mov.w	r3, #2
 8017cde:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8017ce2:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8017ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cec:	f7ff fae6 	bl	80172bc <read_submessage_list>
 8017cf0:	a922      	add	r1, sp, #136	; 0x88
 8017cf2:	2204      	movs	r2, #4
 8017cf4:	4650      	mov	r0, sl
 8017cf6:	f005 fc43 	bl	801d580 <uxr_next_input_reliable_buffer_available>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	a922      	add	r1, sp, #136	; 0x88
 8017cfe:	4620      	mov	r0, r4
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d1ea      	bne.n	8017cda <uxr_create_session+0x13e>
 8017d04:	4642      	mov	r2, r8
 8017d06:	9904      	ldr	r1, [sp, #16]
 8017d08:	4620      	mov	r0, r4
 8017d0a:	f7ff f953 	bl	8016fb4 <write_submessage_acknack.isra.0>
 8017d0e:	e779      	b.n	8017c04 <uxr_create_session+0x68>
 8017d10:	4641      	mov	r1, r8
 8017d12:	4630      	mov	r0, r6
 8017d14:	f000 ff1c 	bl	8018b50 <uxr_get_input_best_effort_stream>
 8017d18:	2800      	cmp	r0, #0
 8017d1a:	f43f af73 	beq.w	8017c04 <uxr_create_session+0x68>
 8017d1e:	4659      	mov	r1, fp
 8017d20:	f005 fb22 	bl	801d368 <uxr_receive_best_effort_message>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	f43f af6d 	beq.w	8017c04 <uxr_create_session+0x68>
 8017d2a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8017d2e:	a91a      	add	r1, sp, #104	; 0x68
 8017d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d32:	4620      	mov	r0, r4
 8017d34:	f7ff fac2 	bl	80172bc <read_submessage_list>
 8017d38:	e764      	b.n	8017c04 <uxr_create_session+0x68>
 8017d3a:	4630      	mov	r0, r6
 8017d3c:	f000 fe5a 	bl	80189f4 <uxr_reset_stream_storage>
 8017d40:	2001      	movs	r0, #1
 8017d42:	b02b      	add	sp, #172	; 0xac
 8017d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d48:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8017d4c:	a91a      	add	r1, sp, #104	; 0x68
 8017d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d50:	4620      	mov	r0, r4
 8017d52:	f7ff fab3 	bl	80172bc <read_submessage_list>
 8017d56:	e7be      	b.n	8017cd6 <uxr_create_session+0x13a>

08017d58 <uxr_prepare_stream_to_write_submessage>:
 8017d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d5c:	b082      	sub	sp, #8
 8017d5e:	4604      	mov	r4, r0
 8017d60:	4610      	mov	r0, r2
 8017d62:	4615      	mov	r5, r2
 8017d64:	461e      	mov	r6, r3
 8017d66:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8017d6a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8017d6e:	f105 0904 	add.w	r9, r5, #4
 8017d72:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8017d76:	9101      	str	r1, [sp, #4]
 8017d78:	f000 ff56 	bl	8018c28 <uxr_submessage_padding>
 8017d7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017d80:	4481      	add	r9, r0
 8017d82:	2b01      	cmp	r3, #1
 8017d84:	d01d      	beq.n	8017dc2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8017d86:	2b02      	cmp	r3, #2
 8017d88:	d116      	bne.n	8017db8 <uxr_prepare_stream_to_write_submessage+0x60>
 8017d8a:	f104 0008 	add.w	r0, r4, #8
 8017d8e:	4651      	mov	r1, sl
 8017d90:	f000 fed2 	bl	8018b38 <uxr_get_output_reliable_stream>
 8017d94:	4604      	mov	r4, r0
 8017d96:	b158      	cbz	r0, 8017db0 <uxr_prepare_stream_to_write_submessage+0x58>
 8017d98:	4649      	mov	r1, r9
 8017d9a:	4632      	mov	r2, r6
 8017d9c:	f005 fdb6 	bl	801d90c <uxr_prepare_reliable_buffer_to_write>
 8017da0:	4604      	mov	r4, r0
 8017da2:	b12c      	cbz	r4, 8017db0 <uxr_prepare_stream_to_write_submessage+0x58>
 8017da4:	4643      	mov	r3, r8
 8017da6:	b2aa      	uxth	r2, r5
 8017da8:	4639      	mov	r1, r7
 8017daa:	4630      	mov	r0, r6
 8017dac:	f000 fefc 	bl	8018ba8 <uxr_buffer_submessage_header>
 8017db0:	4620      	mov	r0, r4
 8017db2:	b002      	add	sp, #8
 8017db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017db8:	2400      	movs	r4, #0
 8017dba:	4620      	mov	r0, r4
 8017dbc:	b002      	add	sp, #8
 8017dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dc2:	f104 0008 	add.w	r0, r4, #8
 8017dc6:	4651      	mov	r1, sl
 8017dc8:	f000 feae 	bl	8018b28 <uxr_get_output_best_effort_stream>
 8017dcc:	4604      	mov	r4, r0
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	d0ee      	beq.n	8017db0 <uxr_prepare_stream_to_write_submessage+0x58>
 8017dd2:	4649      	mov	r1, r9
 8017dd4:	4632      	mov	r2, r6
 8017dd6:	f005 fcc3 	bl	801d760 <uxr_prepare_best_effort_buffer_to_write>
 8017dda:	4604      	mov	r4, r0
 8017ddc:	e7e1      	b.n	8017da2 <uxr_prepare_stream_to_write_submessage+0x4a>
 8017dde:	bf00      	nop

08017de0 <uxr_init_session_info>:
 8017de0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8017de4:	23ff      	movs	r3, #255	; 0xff
 8017de6:	7102      	strb	r2, [r0, #4]
 8017de8:	f880 c001 	strb.w	ip, [r0, #1]
 8017dec:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017df0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017df4:	7001      	strb	r1, [r0, #0]
 8017df6:	f880 c002 	strb.w	ip, [r0, #2]
 8017dfa:	7143      	strb	r3, [r0, #5]
 8017dfc:	70c2      	strb	r2, [r0, #3]
 8017dfe:	b500      	push	{lr}
 8017e00:	f04f 0e09 	mov.w	lr, #9
 8017e04:	f8a0 e006 	strh.w	lr, [r0, #6]
 8017e08:	f85d fb04 	ldr.w	pc, [sp], #4

08017e0c <uxr_buffer_create_session>:
 8017e0c:	b530      	push	{r4, r5, lr}
 8017e0e:	2300      	movs	r3, #0
 8017e10:	b089      	sub	sp, #36	; 0x24
 8017e12:	4d12      	ldr	r5, [pc, #72]	; (8017e5c <uxr_buffer_create_session+0x50>)
 8017e14:	460c      	mov	r4, r1
 8017e16:	9307      	str	r3, [sp, #28]
 8017e18:	4619      	mov	r1, r3
 8017e1a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017e1e:	2201      	movs	r2, #1
 8017e20:	9301      	str	r3, [sp, #4]
 8017e22:	80c2      	strh	r2, [r0, #6]
 8017e24:	f88d 2004 	strb.w	r2, [sp, #4]
 8017e28:	682a      	ldr	r2, [r5, #0]
 8017e2a:	9303      	str	r3, [sp, #12]
 8017e2c:	9200      	str	r2, [sp, #0]
 8017e2e:	88aa      	ldrh	r2, [r5, #4]
 8017e30:	9306      	str	r3, [sp, #24]
 8017e32:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017e36:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8017e3a:	9202      	str	r2, [sp, #8]
 8017e3c:	7802      	ldrb	r2, [r0, #0]
 8017e3e:	4620      	mov	r0, r4
 8017e40:	f88d 200c 	strb.w	r2, [sp, #12]
 8017e44:	2210      	movs	r2, #16
 8017e46:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8017e4a:	f000 fead 	bl	8018ba8 <uxr_buffer_submessage_header>
 8017e4e:	4669      	mov	r1, sp
 8017e50:	4620      	mov	r0, r4
 8017e52:	f001 ff1f 	bl	8019c94 <uxr_serialize_CREATE_CLIENT_Payload>
 8017e56:	b009      	add	sp, #36	; 0x24
 8017e58:	bd30      	pop	{r4, r5, pc}
 8017e5a:	bf00      	nop
 8017e5c:	080232f4 	.word	0x080232f4

08017e60 <uxr_buffer_delete_session>:
 8017e60:	4a0c      	ldr	r2, [pc, #48]	; (8017e94 <uxr_buffer_delete_session+0x34>)
 8017e62:	2302      	movs	r3, #2
 8017e64:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8017e68:	b510      	push	{r4, lr}
 8017e6a:	460c      	mov	r4, r1
 8017e6c:	b082      	sub	sp, #8
 8017e6e:	8911      	ldrh	r1, [r2, #8]
 8017e70:	2204      	movs	r2, #4
 8017e72:	80c3      	strh	r3, [r0, #6]
 8017e74:	2300      	movs	r3, #0
 8017e76:	f8ad 1006 	strh.w	r1, [sp, #6]
 8017e7a:	4620      	mov	r0, r4
 8017e7c:	2103      	movs	r1, #3
 8017e7e:	f8ad c004 	strh.w	ip, [sp, #4]
 8017e82:	f000 fe91 	bl	8018ba8 <uxr_buffer_submessage_header>
 8017e86:	a901      	add	r1, sp, #4
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f001 ffab 	bl	8019de4 <uxr_serialize_DELETE_Payload>
 8017e8e:	b002      	add	sp, #8
 8017e90:	bd10      	pop	{r4, pc}
 8017e92:	bf00      	nop
 8017e94:	080232f4 	.word	0x080232f4

08017e98 <uxr_read_create_session_status>:
 8017e98:	b510      	push	{r4, lr}
 8017e9a:	460b      	mov	r3, r1
 8017e9c:	b088      	sub	sp, #32
 8017e9e:	4604      	mov	r4, r0
 8017ea0:	a901      	add	r1, sp, #4
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	f001 ffae 	bl	8019e04 <uxr_deserialize_STATUS_AGENT_Payload>
 8017ea8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017eac:	7163      	strb	r3, [r4, #5]
 8017eae:	b008      	add	sp, #32
 8017eb0:	bd10      	pop	{r4, pc}
 8017eb2:	bf00      	nop

08017eb4 <uxr_read_delete_session_status>:
 8017eb4:	b510      	push	{r4, lr}
 8017eb6:	b084      	sub	sp, #16
 8017eb8:	4604      	mov	r4, r0
 8017eba:	4608      	mov	r0, r1
 8017ebc:	a902      	add	r1, sp, #8
 8017ebe:	f001 ffd1 	bl	8019e64 <uxr_deserialize_STATUS_Payload>
 8017ec2:	88e3      	ldrh	r3, [r4, #6]
 8017ec4:	2b02      	cmp	r3, #2
 8017ec6:	d001      	beq.n	8017ecc <uxr_read_delete_session_status+0x18>
 8017ec8:	b004      	add	sp, #16
 8017eca:	bd10      	pop	{r4, pc}
 8017ecc:	f10d 000a 	add.w	r0, sp, #10
 8017ed0:	f7fe fec6 	bl	8016c60 <uxr_object_id_from_raw>
 8017ed4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8017ed8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8017edc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	2b02      	cmp	r3, #2
 8017ee4:	d1f0      	bne.n	8017ec8 <uxr_read_delete_session_status+0x14>
 8017ee6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017eea:	7163      	strb	r3, [r4, #5]
 8017eec:	e7ec      	b.n	8017ec8 <uxr_read_delete_session_status+0x14>
 8017eee:	bf00      	nop

08017ef0 <uxr_stamp_create_session_header>:
 8017ef0:	b510      	push	{r4, lr}
 8017ef2:	2208      	movs	r2, #8
 8017ef4:	b08a      	sub	sp, #40	; 0x28
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	eb0d 0002 	add.w	r0, sp, r2
 8017efc:	f7fa f8e8 	bl	80120d0 <ucdr_init_buffer>
 8017f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f04:	2300      	movs	r3, #0
 8017f06:	a802      	add	r0, sp, #8
 8017f08:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8017f0c:	9400      	str	r4, [sp, #0]
 8017f0e:	461a      	mov	r2, r3
 8017f10:	f001 f846 	bl	8018fa0 <uxr_serialize_message_header>
 8017f14:	b00a      	add	sp, #40	; 0x28
 8017f16:	bd10      	pop	{r4, pc}

08017f18 <uxr_stamp_session_header>:
 8017f18:	b530      	push	{r4, r5, lr}
 8017f1a:	b08d      	sub	sp, #52	; 0x34
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	460d      	mov	r5, r1
 8017f20:	4619      	mov	r1, r3
 8017f22:	a804      	add	r0, sp, #16
 8017f24:	9203      	str	r2, [sp, #12]
 8017f26:	2208      	movs	r2, #8
 8017f28:	f7fa f8d2 	bl	80120d0 <ucdr_init_buffer>
 8017f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f30:	9b03      	ldr	r3, [sp, #12]
 8017f32:	462a      	mov	r2, r5
 8017f34:	a804      	add	r0, sp, #16
 8017f36:	9400      	str	r4, [sp, #0]
 8017f38:	f001 f832 	bl	8018fa0 <uxr_serialize_message_header>
 8017f3c:	b00d      	add	sp, #52	; 0x34
 8017f3e:	bd30      	pop	{r4, r5, pc}

08017f40 <uxr_read_session_header>:
 8017f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f44:	4607      	mov	r7, r0
 8017f46:	b084      	sub	sp, #16
 8017f48:	4608      	mov	r0, r1
 8017f4a:	460c      	mov	r4, r1
 8017f4c:	4615      	mov	r5, r2
 8017f4e:	461e      	mov	r6, r3
 8017f50:	f7fa f8f0 	bl	8012134 <ucdr_buffer_remaining>
 8017f54:	2808      	cmp	r0, #8
 8017f56:	d803      	bhi.n	8017f60 <uxr_read_session_header+0x20>
 8017f58:	2000      	movs	r0, #0
 8017f5a:	b004      	add	sp, #16
 8017f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f60:	f10d 080c 	add.w	r8, sp, #12
 8017f64:	4633      	mov	r3, r6
 8017f66:	462a      	mov	r2, r5
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f10d 010b 	add.w	r1, sp, #11
 8017f6e:	f8cd 8000 	str.w	r8, [sp]
 8017f72:	f001 f833 	bl	8018fdc <uxr_deserialize_message_header>
 8017f76:	783a      	ldrb	r2, [r7, #0]
 8017f78:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8017f7c:	4293      	cmp	r3, r2
 8017f7e:	d1eb      	bne.n	8017f58 <uxr_read_session_header+0x18>
 8017f80:	061b      	lsls	r3, r3, #24
 8017f82:	d41b      	bmi.n	8017fbc <uxr_read_session_header+0x7c>
 8017f84:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8017f88:	787b      	ldrb	r3, [r7, #1]
 8017f8a:	429a      	cmp	r2, r3
 8017f8c:	d003      	beq.n	8017f96 <uxr_read_session_header+0x56>
 8017f8e:	2001      	movs	r0, #1
 8017f90:	f080 0001 	eor.w	r0, r0, #1
 8017f94:	e7e1      	b.n	8017f5a <uxr_read_session_header+0x1a>
 8017f96:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8017f9a:	1cb8      	adds	r0, r7, #2
 8017f9c:	78bb      	ldrb	r3, [r7, #2]
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	d1f5      	bne.n	8017f8e <uxr_read_session_header+0x4e>
 8017fa2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8017fa6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d1ef      	bne.n	8017f8e <uxr_read_session_header+0x4e>
 8017fae:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8017fb2:	7843      	ldrb	r3, [r0, #1]
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	d1ea      	bne.n	8017f8e <uxr_read_session_header+0x4e>
 8017fb8:	2000      	movs	r0, #0
 8017fba:	e7e9      	b.n	8017f90 <uxr_read_session_header+0x50>
 8017fbc:	2001      	movs	r0, #1
 8017fbe:	e7cc      	b.n	8017f5a <uxr_read_session_header+0x1a>

08017fc0 <uxr_session_header_offset>:
 8017fc0:	f990 3000 	ldrsb.w	r3, [r0]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	bfac      	ite	ge
 8017fc8:	2008      	movge	r0, #8
 8017fca:	2004      	movlt	r0, #4
 8017fcc:	4770      	bx	lr
 8017fce:	bf00      	nop

08017fd0 <uxr_init_base_object_request>:
 8017fd0:	b510      	push	{r4, lr}
 8017fd2:	b082      	sub	sp, #8
 8017fd4:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8017fd8:	9101      	str	r1, [sp, #4]
 8017fda:	88c3      	ldrh	r3, [r0, #6]
 8017fdc:	f1a3 010a 	sub.w	r1, r3, #10
 8017fe0:	b289      	uxth	r1, r1
 8017fe2:	42a1      	cmp	r1, r4
 8017fe4:	d80f      	bhi.n	8018006 <uxr_init_base_object_request+0x36>
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	b29c      	uxth	r4, r3
 8017fea:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8017fee:	b2db      	uxtb	r3, r3
 8017ff0:	80c4      	strh	r4, [r0, #6]
 8017ff2:	1c91      	adds	r1, r2, #2
 8017ff4:	9801      	ldr	r0, [sp, #4]
 8017ff6:	f882 c000 	strb.w	ip, [r2]
 8017ffa:	7053      	strb	r3, [r2, #1]
 8017ffc:	f7fe fe44 	bl	8016c88 <uxr_object_id_to_raw>
 8018000:	4620      	mov	r0, r4
 8018002:	b002      	add	sp, #8
 8018004:	bd10      	pop	{r4, pc}
 8018006:	230a      	movs	r3, #10
 8018008:	f04f 0c00 	mov.w	ip, #0
 801800c:	461c      	mov	r4, r3
 801800e:	e7ef      	b.n	8017ff0 <uxr_init_base_object_request+0x20>

08018010 <uxr_parse_base_object_request>:
 8018010:	b570      	push	{r4, r5, r6, lr}
 8018012:	4604      	mov	r4, r0
 8018014:	3002      	adds	r0, #2
 8018016:	460d      	mov	r5, r1
 8018018:	4616      	mov	r6, r2
 801801a:	f7fe fe21 	bl	8016c60 <uxr_object_id_from_raw>
 801801e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8018022:	8028      	strh	r0, [r5, #0]
 8018024:	806b      	strh	r3, [r5, #2]
 8018026:	7822      	ldrb	r2, [r4, #0]
 8018028:	7863      	ldrb	r3, [r4, #1]
 801802a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801802e:	8033      	strh	r3, [r6, #0]
 8018030:	bd70      	pop	{r4, r5, r6, pc}
 8018032:	bf00      	nop

08018034 <uxr_init_framing_io>:
 8018034:	2300      	movs	r3, #0
 8018036:	7041      	strb	r1, [r0, #1]
 8018038:	7003      	strb	r3, [r0, #0]
 801803a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801803c:	4770      	bx	lr
 801803e:	bf00      	nop

08018040 <uxr_write_framed_msg>:
 8018040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018044:	4617      	mov	r7, r2
 8018046:	7842      	ldrb	r2, [r0, #1]
 8018048:	460e      	mov	r6, r1
 801804a:	b083      	sub	sp, #12
 801804c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8018050:	469b      	mov	fp, r3
 8018052:	237e      	movs	r3, #126	; 0x7e
 8018054:	4604      	mov	r4, r0
 8018056:	2901      	cmp	r1, #1
 8018058:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801805c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018060:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8018064:	f240 8115 	bls.w	8018292 <uxr_write_framed_msg+0x252>
 8018068:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801806c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8018070:	2202      	movs	r2, #2
 8018072:	2901      	cmp	r1, #1
 8018074:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018078:	d952      	bls.n	8018120 <uxr_write_framed_msg+0xe0>
 801807a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801807c:	2103      	movs	r1, #3
 801807e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8018082:	b2dd      	uxtb	r5, r3
 8018084:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018088:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801808c:	2a01      	cmp	r2, #1
 801808e:	d95c      	bls.n	801814a <uxr_write_framed_msg+0x10a>
 8018090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018092:	1862      	adds	r2, r4, r1
 8018094:	3101      	adds	r1, #1
 8018096:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801809a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801809e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80180a2:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80180a6:	2a01      	cmp	r2, #1
 80180a8:	d961      	bls.n	801816e <uxr_write_framed_msg+0x12e>
 80180aa:	1c4a      	adds	r2, r1, #1
 80180ac:	4421      	add	r1, r4
 80180ae:	b2d2      	uxtb	r2, r2
 80180b0:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80180b4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d06a      	beq.n	8018192 <uxr_write_framed_msg+0x152>
 80180bc:	f04f 0800 	mov.w	r8, #0
 80180c0:	46c1      	mov	r9, r8
 80180c2:	e016      	b.n	80180f2 <uxr_write_framed_msg+0xb2>
 80180c4:	2a29      	cmp	r2, #41	; 0x29
 80180c6:	d868      	bhi.n	801819a <uxr_write_framed_msg+0x15a>
 80180c8:	18a0      	adds	r0, r4, r2
 80180ca:	3201      	adds	r2, #1
 80180cc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80180d0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80180d4:	ea88 0101 	eor.w	r1, r8, r1
 80180d8:	4b7d      	ldr	r3, [pc, #500]	; (80182d0 <uxr_write_framed_msg+0x290>)
 80180da:	f109 0901 	add.w	r9, r9, #1
 80180de:	b2c9      	uxtb	r1, r1
 80180e0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80180e4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80180e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180ea:	454b      	cmp	r3, r9
 80180ec:	d969      	bls.n	80181c2 <uxr_write_framed_msg+0x182>
 80180ee:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80180f2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80180f6:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80180fa:	2801      	cmp	r0, #1
 80180fc:	d8e2      	bhi.n	80180c4 <uxr_write_framed_msg+0x84>
 80180fe:	1c50      	adds	r0, r2, #1
 8018100:	b2c0      	uxtb	r0, r0
 8018102:	2829      	cmp	r0, #41	; 0x29
 8018104:	d849      	bhi.n	801819a <uxr_write_framed_msg+0x15a>
 8018106:	18a0      	adds	r0, r4, r2
 8018108:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801810c:	3202      	adds	r2, #2
 801810e:	f081 0520 	eor.w	r5, r1, #32
 8018112:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018116:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801811a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801811e:	e7d9      	b.n	80180d4 <uxr_write_framed_msg+0x94>
 8018120:	2104      	movs	r1, #4
 8018122:	f04f 0c03 	mov.w	ip, #3
 8018126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018128:	4422      	add	r2, r4
 801812a:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801812e:	44a4      	add	ip, r4
 8018130:	b2dd      	uxtb	r5, r3
 8018132:	f080 0020 	eor.w	r0, r0, #32
 8018136:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801813a:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801813e:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8018142:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018146:	2a01      	cmp	r2, #1
 8018148:	d8a2      	bhi.n	8018090 <uxr_write_framed_msg+0x50>
 801814a:	1862      	adds	r2, r4, r1
 801814c:	207d      	movs	r0, #125	; 0x7d
 801814e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018150:	f085 0520 	eor.w	r5, r5, #32
 8018154:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8018158:	3102      	adds	r1, #2
 801815a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801815e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8018162:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018166:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801816a:	2a01      	cmp	r2, #1
 801816c:	d89d      	bhi.n	80180aa <uxr_write_framed_msg+0x6a>
 801816e:	1c4d      	adds	r5, r1, #1
 8018170:	1c8a      	adds	r2, r1, #2
 8018172:	f080 0020 	eor.w	r0, r0, #32
 8018176:	4421      	add	r1, r4
 8018178:	fa54 f585 	uxtab	r5, r4, r5
 801817c:	b2d2      	uxtb	r2, r2
 801817e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018182:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8018186:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801818a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801818e:	2b00      	cmp	r3, #0
 8018190:	d194      	bne.n	80180bc <uxr_write_framed_msg+0x7c>
 8018192:	4619      	mov	r1, r3
 8018194:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018198:	e019      	b.n	80181ce <uxr_write_framed_msg+0x18e>
 801819a:	2500      	movs	r5, #0
 801819c:	e000      	b.n	80181a0 <uxr_write_framed_msg+0x160>
 801819e:	b160      	cbz	r0, 80181ba <uxr_write_framed_msg+0x17a>
 80181a0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80181a4:	1b52      	subs	r2, r2, r5
 80181a6:	4653      	mov	r3, sl
 80181a8:	4638      	mov	r0, r7
 80181aa:	4421      	add	r1, r4
 80181ac:	47b0      	blx	r6
 80181ae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80181b2:	4405      	add	r5, r0
 80181b4:	4295      	cmp	r5, r2
 80181b6:	d3f2      	bcc.n	801819e <uxr_write_framed_msg+0x15e>
 80181b8:	d066      	beq.n	8018288 <uxr_write_framed_msg+0x248>
 80181ba:	2000      	movs	r0, #0
 80181bc:	b003      	add	sp, #12
 80181be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c2:	fa5f f188 	uxtb.w	r1, r8
 80181c6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80181ca:	f8ad 8004 	strh.w	r8, [sp, #4]
 80181ce:	f04f 0900 	mov.w	r9, #0
 80181d2:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80181d6:	46c8      	mov	r8, r9
 80181d8:	e013      	b.n	8018202 <uxr_write_framed_msg+0x1c2>
 80181da:	2a29      	cmp	r2, #41	; 0x29
 80181dc:	d824      	bhi.n	8018228 <uxr_write_framed_msg+0x1e8>
 80181de:	18a3      	adds	r3, r4, r2
 80181e0:	3201      	adds	r2, #1
 80181e2:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80181e6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80181ea:	f109 0901 	add.w	r9, r9, #1
 80181ee:	f1b9 0f02 	cmp.w	r9, #2
 80181f2:	d02d      	beq.n	8018250 <uxr_write_framed_msg+0x210>
 80181f4:	f109 0308 	add.w	r3, r9, #8
 80181f8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80181fc:	446b      	add	r3, sp
 80181fe:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8018202:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018206:	2b01      	cmp	r3, #1
 8018208:	d8e7      	bhi.n	80181da <uxr_write_framed_msg+0x19a>
 801820a:	1c53      	adds	r3, r2, #1
 801820c:	b2db      	uxtb	r3, r3
 801820e:	2b29      	cmp	r3, #41	; 0x29
 8018210:	d80a      	bhi.n	8018228 <uxr_write_framed_msg+0x1e8>
 8018212:	18a3      	adds	r3, r4, r2
 8018214:	f081 0120 	eor.w	r1, r1, #32
 8018218:	3202      	adds	r2, #2
 801821a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801821e:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8018222:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018226:	e7e0      	b.n	80181ea <uxr_write_framed_msg+0x1aa>
 8018228:	2500      	movs	r5, #0
 801822a:	e001      	b.n	8018230 <uxr_write_framed_msg+0x1f0>
 801822c:	2800      	cmp	r0, #0
 801822e:	d0c4      	beq.n	80181ba <uxr_write_framed_msg+0x17a>
 8018230:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018234:	1b52      	subs	r2, r2, r5
 8018236:	4653      	mov	r3, sl
 8018238:	4638      	mov	r0, r7
 801823a:	4421      	add	r1, r4
 801823c:	47b0      	blx	r6
 801823e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018242:	4405      	add	r5, r0
 8018244:	4295      	cmp	r5, r2
 8018246:	d3f1      	bcc.n	801822c <uxr_write_framed_msg+0x1ec>
 8018248:	d1b7      	bne.n	80181ba <uxr_write_framed_msg+0x17a>
 801824a:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801824e:	e7d1      	b.n	80181f4 <uxr_write_framed_msg+0x1b4>
 8018250:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018254:	b19a      	cbz	r2, 801827e <uxr_write_framed_msg+0x23e>
 8018256:	2500      	movs	r5, #0
 8018258:	e001      	b.n	801825e <uxr_write_framed_msg+0x21e>
 801825a:	2800      	cmp	r0, #0
 801825c:	d0ad      	beq.n	80181ba <uxr_write_framed_msg+0x17a>
 801825e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018262:	1b52      	subs	r2, r2, r5
 8018264:	4653      	mov	r3, sl
 8018266:	4638      	mov	r0, r7
 8018268:	4421      	add	r1, r4
 801826a:	47b0      	blx	r6
 801826c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018270:	4405      	add	r5, r0
 8018272:	4295      	cmp	r5, r2
 8018274:	d3f1      	bcc.n	801825a <uxr_write_framed_msg+0x21a>
 8018276:	d1a0      	bne.n	80181ba <uxr_write_framed_msg+0x17a>
 8018278:	2300      	movs	r3, #0
 801827a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801827e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018280:	b298      	uxth	r0, r3
 8018282:	b003      	add	sp, #12
 8018284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018288:	f04f 0300 	mov.w	r3, #0
 801828c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018290:	e72a      	b.n	80180e8 <uxr_write_framed_msg+0xa8>
 8018292:	217d      	movs	r1, #125	; 0x7d
 8018294:	f082 0220 	eor.w	r2, r2, #32
 8018298:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801829c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80182a0:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80182a4:	2203      	movs	r2, #3
 80182a6:	2901      	cmp	r1, #1
 80182a8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80182ac:	d803      	bhi.n	80182b6 <uxr_write_framed_msg+0x276>
 80182ae:	2105      	movs	r1, #5
 80182b0:	f04f 0c04 	mov.w	ip, #4
 80182b4:	e737      	b.n	8018126 <uxr_write_framed_msg+0xe6>
 80182b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182b8:	2104      	movs	r1, #4
 80182ba:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80182be:	b2dd      	uxtb	r5, r3
 80182c0:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80182c4:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80182c8:	2a01      	cmp	r2, #1
 80182ca:	f63f aee1 	bhi.w	8018090 <uxr_write_framed_msg+0x50>
 80182ce:	e73c      	b.n	801814a <uxr_write_framed_msg+0x10a>
 80182d0:	08024474 	.word	0x08024474

080182d4 <uxr_framing_read_transport>:
 80182d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d8:	4604      	mov	r4, r0
 80182da:	b085      	sub	sp, #20
 80182dc:	4692      	mov	sl, r2
 80182de:	4689      	mov	r9, r1
 80182e0:	461d      	mov	r5, r3
 80182e2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80182e4:	f000 fca6 	bl	8018c34 <uxr_millis>
 80182e8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80182ec:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 80182f0:	4680      	mov	r8, r0
 80182f2:	42ba      	cmp	r2, r7
 80182f4:	d05f      	beq.n	80183b6 <uxr_framing_read_transport+0xe2>
 80182f6:	d817      	bhi.n	8018328 <uxr_framing_read_transport+0x54>
 80182f8:	3f01      	subs	r7, #1
 80182fa:	1aba      	subs	r2, r7, r2
 80182fc:	2700      	movs	r7, #0
 80182fe:	b2d2      	uxtb	r2, r2
 8018300:	42b2      	cmp	r2, r6
 8018302:	d81a      	bhi.n	801833a <uxr_framing_read_transport+0x66>
 8018304:	19d3      	adds	r3, r2, r7
 8018306:	42b3      	cmp	r3, r6
 8018308:	d852      	bhi.n	80183b0 <uxr_framing_read_transport+0xdc>
 801830a:	b9d2      	cbnz	r2, 8018342 <uxr_framing_read_transport+0x6e>
 801830c:	2600      	movs	r6, #0
 801830e:	f000 fc91 	bl	8018c34 <uxr_millis>
 8018312:	682b      	ldr	r3, [r5, #0]
 8018314:	eba0 0008 	sub.w	r0, r0, r8
 8018318:	1a1b      	subs	r3, r3, r0
 801831a:	4630      	mov	r0, r6
 801831c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018320:	602b      	str	r3, [r5, #0]
 8018322:	b005      	add	sp, #20
 8018324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018328:	2f00      	cmp	r7, #0
 801832a:	d060      	beq.n	80183ee <uxr_framing_read_transport+0x11a>
 801832c:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8018330:	3f01      	subs	r7, #1
 8018332:	b2d2      	uxtb	r2, r2
 8018334:	b2ff      	uxtb	r7, r7
 8018336:	42b2      	cmp	r2, r6
 8018338:	d9e4      	bls.n	8018304 <uxr_framing_read_transport+0x30>
 801833a:	b2f2      	uxtb	r2, r6
 801833c:	2700      	movs	r7, #0
 801833e:	2a00      	cmp	r2, #0
 8018340:	d0e4      	beq.n	801830c <uxr_framing_read_transport+0x38>
 8018342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018344:	4650      	mov	r0, sl
 8018346:	9203      	str	r2, [sp, #12]
 8018348:	9300      	str	r3, [sp, #0]
 801834a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801834e:	682b      	ldr	r3, [r5, #0]
 8018350:	3102      	adds	r1, #2
 8018352:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80183f8 <uxr_framing_read_transport+0x124>
 8018356:	4421      	add	r1, r4
 8018358:	47c8      	blx	r9
 801835a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801835e:	4606      	mov	r6, r0
 8018360:	4403      	add	r3, r0
 8018362:	0859      	lsrs	r1, r3, #1
 8018364:	fbab 2101 	umull	r2, r1, fp, r1
 8018368:	222a      	movs	r2, #42	; 0x2a
 801836a:	0889      	lsrs	r1, r1, #2
 801836c:	fb02 3111 	mls	r1, r2, r1, r3
 8018370:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8018374:	2800      	cmp	r0, #0
 8018376:	d0c9      	beq.n	801830c <uxr_framing_read_transport+0x38>
 8018378:	9a03      	ldr	r2, [sp, #12]
 801837a:	4290      	cmp	r0, r2
 801837c:	d1c7      	bne.n	801830e <uxr_framing_read_transport+0x3a>
 801837e:	2f00      	cmp	r7, #0
 8018380:	d0c5      	beq.n	801830e <uxr_framing_read_transport+0x3a>
 8018382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018384:	3102      	adds	r1, #2
 8018386:	463a      	mov	r2, r7
 8018388:	4650      	mov	r0, sl
 801838a:	4421      	add	r1, r4
 801838c:	9300      	str	r3, [sp, #0]
 801838e:	2300      	movs	r3, #0
 8018390:	47c8      	blx	r9
 8018392:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8018396:	4406      	add	r6, r0
 8018398:	1813      	adds	r3, r2, r0
 801839a:	085a      	lsrs	r2, r3, #1
 801839c:	fbab 1b02 	umull	r1, fp, fp, r2
 80183a0:	222a      	movs	r2, #42	; 0x2a
 80183a2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80183a6:	fb02 331b 	mls	r3, r2, fp, r3
 80183aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80183ae:	e7ae      	b.n	801830e <uxr_framing_read_transport+0x3a>
 80183b0:	1ab6      	subs	r6, r6, r2
 80183b2:	b2f7      	uxtb	r7, r6
 80183b4:	e7a9      	b.n	801830a <uxr_framing_read_transport+0x36>
 80183b6:	2300      	movs	r3, #0
 80183b8:	2e28      	cmp	r6, #40	; 0x28
 80183ba:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80183bc:	d9bd      	bls.n	801833a <uxr_framing_read_transport+0x66>
 80183be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183c0:	2229      	movs	r2, #41	; 0x29
 80183c2:	1ca1      	adds	r1, r4, #2
 80183c4:	4650      	mov	r0, sl
 80183c6:	9300      	str	r3, [sp, #0]
 80183c8:	682b      	ldr	r3, [r5, #0]
 80183ca:	47c8      	blx	r9
 80183cc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80183d0:	4606      	mov	r6, r0
 80183d2:	212a      	movs	r1, #42	; 0x2a
 80183d4:	4403      	add	r3, r0
 80183d6:	4808      	ldr	r0, [pc, #32]	; (80183f8 <uxr_framing_read_transport+0x124>)
 80183d8:	085a      	lsrs	r2, r3, #1
 80183da:	fba0 0202 	umull	r0, r2, r0, r2
 80183de:	0892      	lsrs	r2, r2, #2
 80183e0:	fb01 3312 	mls	r3, r1, r2, r3
 80183e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80183e8:	2e00      	cmp	r6, #0
 80183ea:	d08f      	beq.n	801830c <uxr_framing_read_transport+0x38>
 80183ec:	e78f      	b.n	801830e <uxr_framing_read_transport+0x3a>
 80183ee:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 80183f2:	b2d2      	uxtb	r2, r2
 80183f4:	e784      	b.n	8018300 <uxr_framing_read_transport+0x2c>
 80183f6:	bf00      	nop
 80183f8:	30c30c31 	.word	0x30c30c31

080183fc <uxr_read_framed_msg>:
 80183fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018400:	461e      	mov	r6, r3
 8018402:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8018406:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801840a:	b083      	sub	sp, #12
 801840c:	4604      	mov	r4, r0
 801840e:	4688      	mov	r8, r1
 8018410:	429d      	cmp	r5, r3
 8018412:	4691      	mov	r9, r2
 8018414:	f000 818c 	beq.w	8018730 <uxr_read_framed_msg+0x334>
 8018418:	7823      	ldrb	r3, [r4, #0]
 801841a:	4dc3      	ldr	r5, [pc, #780]	; (8018728 <uxr_read_framed_msg+0x32c>)
 801841c:	4fc3      	ldr	r7, [pc, #780]	; (801872c <uxr_read_framed_msg+0x330>)
 801841e:	2b07      	cmp	r3, #7
 8018420:	d8fd      	bhi.n	801841e <uxr_read_framed_msg+0x22>
 8018422:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018426:	011c      	.short	0x011c
 8018428:	00d900fb 	.word	0x00d900fb
 801842c:	008f00ba 	.word	0x008f00ba
 8018430:	00320051 	.word	0x00320051
 8018434:	0008      	.short	0x0008
 8018436:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801843a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801843e:	4299      	cmp	r1, r3
 8018440:	f000 814d 	beq.w	80186de <uxr_read_framed_msg+0x2e2>
 8018444:	18e2      	adds	r2, r4, r3
 8018446:	7892      	ldrb	r2, [r2, #2]
 8018448:	2a7d      	cmp	r2, #125	; 0x7d
 801844a:	f000 81b8 	beq.w	80187be <uxr_read_framed_msg+0x3c2>
 801844e:	3301      	adds	r3, #1
 8018450:	212a      	movs	r1, #42	; 0x2a
 8018452:	2a7e      	cmp	r2, #126	; 0x7e
 8018454:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018458:	fba5 c000 	umull	ip, r0, r5, r0
 801845c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018460:	fb01 3310 	mls	r3, r1, r0, r3
 8018464:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018468:	f000 8257 	beq.w	801891a <uxr_read_framed_msg+0x51e>
 801846c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801846e:	2000      	movs	r0, #0
 8018470:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8018472:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018476:	7020      	strb	r0, [r4, #0]
 8018478:	b29b      	uxth	r3, r3
 801847a:	4299      	cmp	r1, r3
 801847c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801847e:	f000 8178 	beq.w	8018772 <uxr_read_framed_msg+0x376>
 8018482:	2000      	movs	r0, #0
 8018484:	b003      	add	sp, #12
 8018486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801848a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801848e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018492:	4298      	cmp	r0, r3
 8018494:	f000 8132 	beq.w	80186fc <uxr_read_framed_msg+0x300>
 8018498:	18e2      	adds	r2, r4, r3
 801849a:	7891      	ldrb	r1, [r2, #2]
 801849c:	297d      	cmp	r1, #125	; 0x7d
 801849e:	f000 8170 	beq.w	8018782 <uxr_read_framed_msg+0x386>
 80184a2:	3301      	adds	r3, #1
 80184a4:	202a      	movs	r0, #42	; 0x2a
 80184a6:	297e      	cmp	r1, #126	; 0x7e
 80184a8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80184ac:	fba5 c202 	umull	ip, r2, r5, r2
 80184b0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80184b4:	fb00 3312 	mls	r3, r0, r2, r3
 80184b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80184bc:	f000 821d 	beq.w	80188fa <uxr_read_framed_msg+0x4fe>
 80184c0:	2307      	movs	r3, #7
 80184c2:	86a1      	strh	r1, [r4, #52]	; 0x34
 80184c4:	7023      	strb	r3, [r4, #0]
 80184c6:	e7aa      	b.n	801841e <uxr_read_framed_msg+0x22>
 80184c8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80184ca:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80184ce:	459e      	cmp	lr, r3
 80184d0:	d827      	bhi.n	8018522 <uxr_read_framed_msg+0x126>
 80184d2:	e032      	b.n	801853a <uxr_read_framed_msg+0x13e>
 80184d4:	fba5 b101 	umull	fp, r1, r5, r1
 80184d8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80184dc:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80184e0:	0889      	lsrs	r1, r1, #2
 80184e2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80184e6:	fb0b 0111 	mls	r1, fp, r1, r0
 80184ea:	f000 80d4 	beq.w	8018696 <uxr_read_framed_msg+0x29a>
 80184ee:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80184f2:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80184f6:	f000 80cb 	beq.w	8018690 <uxr_read_framed_msg+0x294>
 80184fa:	f806 c003 	strb.w	ip, [r6, r3]
 80184fe:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8018500:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8018502:	ea80 010c 	eor.w	r1, r0, ip
 8018506:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801850a:	3301      	adds	r3, #1
 801850c:	b2c9      	uxtb	r1, r1
 801850e:	b29b      	uxth	r3, r3
 8018510:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8018514:	4573      	cmp	r3, lr
 8018516:	8663      	strh	r3, [r4, #50]	; 0x32
 8018518:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801851c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801851e:	f080 811d 	bcs.w	801875c <uxr_read_framed_msg+0x360>
 8018522:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8018526:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801852a:	1c50      	adds	r0, r2, #1
 801852c:	eb04 0c02 	add.w	ip, r4, r2
 8018530:	4592      	cmp	sl, r2
 8018532:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8018536:	d1cd      	bne.n	80184d4 <uxr_read_framed_msg+0xd8>
 8018538:	459e      	cmp	lr, r3
 801853a:	f040 8114 	bne.w	8018766 <uxr_read_framed_msg+0x36a>
 801853e:	2306      	movs	r3, #6
 8018540:	7023      	strb	r3, [r4, #0]
 8018542:	e76c      	b.n	801841e <uxr_read_framed_msg+0x22>
 8018544:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8018548:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801854c:	4298      	cmp	r0, r3
 801854e:	f000 80c6 	beq.w	80186de <uxr_read_framed_msg+0x2e2>
 8018552:	18e2      	adds	r2, r4, r3
 8018554:	7891      	ldrb	r1, [r2, #2]
 8018556:	297d      	cmp	r1, #125	; 0x7d
 8018558:	f000 8193 	beq.w	8018882 <uxr_read_framed_msg+0x486>
 801855c:	3301      	adds	r3, #1
 801855e:	202a      	movs	r0, #42	; 0x2a
 8018560:	297e      	cmp	r1, #126	; 0x7e
 8018562:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018566:	fba5 c202 	umull	ip, r2, r5, r2
 801856a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801856e:	fb00 3312 	mls	r3, r0, r2, r3
 8018572:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018576:	f000 81d0 	beq.w	801891a <uxr_read_framed_msg+0x51e>
 801857a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801857c:	2000      	movs	r0, #0
 801857e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018582:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018584:	8660      	strh	r0, [r4, #50]	; 0x32
 8018586:	b29b      	uxth	r3, r3
 8018588:	86e0      	strh	r0, [r4, #54]	; 0x36
 801858a:	428b      	cmp	r3, r1
 801858c:	8623      	strh	r3, [r4, #48]	; 0x30
 801858e:	f240 80e2 	bls.w	8018756 <uxr_read_framed_msg+0x35a>
 8018592:	7020      	strb	r0, [r4, #0]
 8018594:	b003      	add	sp, #12
 8018596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801859a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801859e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80185a2:	4298      	cmp	r0, r3
 80185a4:	f000 80aa 	beq.w	80186fc <uxr_read_framed_msg+0x300>
 80185a8:	18e2      	adds	r2, r4, r3
 80185aa:	7891      	ldrb	r1, [r2, #2]
 80185ac:	297d      	cmp	r1, #125	; 0x7d
 80185ae:	f000 8186 	beq.w	80188be <uxr_read_framed_msg+0x4c2>
 80185b2:	3301      	adds	r3, #1
 80185b4:	202a      	movs	r0, #42	; 0x2a
 80185b6:	297e      	cmp	r1, #126	; 0x7e
 80185b8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80185bc:	fba5 c202 	umull	ip, r2, r5, r2
 80185c0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80185c4:	fb00 3312 	mls	r3, r0, r2, r3
 80185c8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80185cc:	f000 8195 	beq.w	80188fa <uxr_read_framed_msg+0x4fe>
 80185d0:	2304      	movs	r3, #4
 80185d2:	8621      	strh	r1, [r4, #48]	; 0x30
 80185d4:	7023      	strb	r3, [r4, #0]
 80185d6:	e722      	b.n	801841e <uxr_read_framed_msg+0x22>
 80185d8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80185dc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80185e0:	4290      	cmp	r0, r2
 80185e2:	f000 80b4 	beq.w	801874e <uxr_read_framed_msg+0x352>
 80185e6:	18a3      	adds	r3, r4, r2
 80185e8:	7899      	ldrb	r1, [r3, #2]
 80185ea:	297d      	cmp	r1, #125	; 0x7d
 80185ec:	f000 8107 	beq.w	80187fe <uxr_read_framed_msg+0x402>
 80185f0:	3201      	adds	r2, #1
 80185f2:	232a      	movs	r3, #42	; 0x2a
 80185f4:	297e      	cmp	r1, #126	; 0x7e
 80185f6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80185fa:	fba5 c000 	umull	ip, r0, r5, r0
 80185fe:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018602:	fb03 2210 	mls	r2, r3, r0, r2
 8018606:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801860a:	f000 818a 	beq.w	8018922 <uxr_read_framed_msg+0x526>
 801860e:	7863      	ldrb	r3, [r4, #1]
 8018610:	428b      	cmp	r3, r1
 8018612:	bf0c      	ite	eq
 8018614:	2303      	moveq	r3, #3
 8018616:	2300      	movne	r3, #0
 8018618:	7023      	strb	r3, [r4, #0]
 801861a:	e700      	b.n	801841e <uxr_read_framed_msg+0x22>
 801861c:	2300      	movs	r3, #0
 801861e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8018622:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8018626:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801862a:	4299      	cmp	r1, r3
 801862c:	d06a      	beq.n	8018704 <uxr_read_framed_msg+0x308>
 801862e:	18e2      	adds	r2, r4, r3
 8018630:	7890      	ldrb	r0, [r2, #2]
 8018632:	287d      	cmp	r0, #125	; 0x7d
 8018634:	f000 8100 	beq.w	8018838 <uxr_read_framed_msg+0x43c>
 8018638:	3301      	adds	r3, #1
 801863a:	212a      	movs	r1, #42	; 0x2a
 801863c:	287e      	cmp	r0, #126	; 0x7e
 801863e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8018642:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018646:	fba5 c202 	umull	ip, r2, r5, r2
 801864a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801864e:	fb01 3312 	mls	r3, r1, r2, r3
 8018652:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018656:	d055      	beq.n	8018704 <uxr_read_framed_msg+0x308>
 8018658:	2302      	movs	r3, #2
 801865a:	7023      	strb	r3, [r4, #0]
 801865c:	e6df      	b.n	801841e <uxr_read_framed_msg+0x22>
 801865e:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8018662:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8018666:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801866a:	1c5a      	adds	r2, r3, #1
 801866c:	459c      	cmp	ip, r3
 801866e:	eb04 0103 	add.w	r1, r4, r3
 8018672:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8018676:	f43f af04 	beq.w	8018482 <uxr_read_framed_msg+0x86>
 801867a:	fba5 0303 	umull	r0, r3, r5, r3
 801867e:	7889      	ldrb	r1, [r1, #2]
 8018680:	089b      	lsrs	r3, r3, #2
 8018682:	297e      	cmp	r1, #126	; 0x7e
 8018684:	fb0e 2313 	mls	r3, lr, r3, r2
 8018688:	b2db      	uxtb	r3, r3
 801868a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801868e:	d1ec      	bne.n	801866a <uxr_read_framed_msg+0x26e>
 8018690:	2301      	movs	r3, #1
 8018692:	7023      	strb	r3, [r4, #0]
 8018694:	e6c3      	b.n	801841e <uxr_read_framed_msg+0x22>
 8018696:	1c50      	adds	r0, r2, #1
 8018698:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801869c:	3202      	adds	r2, #2
 801869e:	0841      	lsrs	r1, r0, #1
 80186a0:	fba5 c101 	umull	ip, r1, r5, r1
 80186a4:	0889      	lsrs	r1, r1, #2
 80186a6:	fb0b 0111 	mls	r1, fp, r1, r0
 80186aa:	1860      	adds	r0, r4, r1
 80186ac:	b2c9      	uxtb	r1, r1
 80186ae:	458a      	cmp	sl, r1
 80186b0:	f43f af42 	beq.w	8018538 <uxr_read_framed_msg+0x13c>
 80186b4:	0851      	lsrs	r1, r2, #1
 80186b6:	7880      	ldrb	r0, [r0, #2]
 80186b8:	fba5 a101 	umull	sl, r1, r5, r1
 80186bc:	287e      	cmp	r0, #126	; 0x7e
 80186be:	f080 0c20 	eor.w	ip, r0, #32
 80186c2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80186c6:	fb0b 2211 	mls	r2, fp, r1, r2
 80186ca:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80186ce:	f47f af14 	bne.w	80184fa <uxr_read_framed_msg+0xfe>
 80186d2:	459e      	cmp	lr, r3
 80186d4:	f43f af33 	beq.w	801853e <uxr_read_framed_msg+0x142>
 80186d8:	2301      	movs	r3, #1
 80186da:	7023      	strb	r3, [r4, #0]
 80186dc:	e69f      	b.n	801841e <uxr_read_framed_msg+0x22>
 80186de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80186e0:	9300      	str	r3, [sp, #0]
 80186e2:	2301      	movs	r3, #1
 80186e4:	9301      	str	r3, [sp, #4]
 80186e6:	464a      	mov	r2, r9
 80186e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186ea:	4641      	mov	r1, r8
 80186ec:	4620      	mov	r0, r4
 80186ee:	f7ff fdf1 	bl	80182d4 <uxr_framing_read_transport>
 80186f2:	2800      	cmp	r0, #0
 80186f4:	f43f aec5 	beq.w	8018482 <uxr_read_framed_msg+0x86>
 80186f8:	7823      	ldrb	r3, [r4, #0]
 80186fa:	e690      	b.n	801841e <uxr_read_framed_msg+0x22>
 80186fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80186fe:	9300      	str	r3, [sp, #0]
 8018700:	2302      	movs	r3, #2
 8018702:	e7ef      	b.n	80186e4 <uxr_read_framed_msg+0x2e8>
 8018704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018706:	464a      	mov	r2, r9
 8018708:	4641      	mov	r1, r8
 801870a:	4620      	mov	r0, r4
 801870c:	9300      	str	r3, [sp, #0]
 801870e:	2304      	movs	r3, #4
 8018710:	9301      	str	r3, [sp, #4]
 8018712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018714:	f7ff fdde 	bl	80182d4 <uxr_framing_read_transport>
 8018718:	2800      	cmp	r0, #0
 801871a:	d1ed      	bne.n	80186f8 <uxr_read_framed_msg+0x2fc>
 801871c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018720:	2b7e      	cmp	r3, #126	; 0x7e
 8018722:	d0e9      	beq.n	80186f8 <uxr_read_framed_msg+0x2fc>
 8018724:	e6ad      	b.n	8018482 <uxr_read_framed_msg+0x86>
 8018726:	bf00      	nop
 8018728:	30c30c31 	.word	0x30c30c31
 801872c:	08024474 	.word	0x08024474
 8018730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018732:	9300      	str	r3, [sp, #0]
 8018734:	2305      	movs	r3, #5
 8018736:	9301      	str	r3, [sp, #4]
 8018738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801873a:	f7ff fdcb 	bl	80182d4 <uxr_framing_read_transport>
 801873e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8018742:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018746:	429a      	cmp	r2, r3
 8018748:	f43f ae9b 	beq.w	8018482 <uxr_read_framed_msg+0x86>
 801874c:	e664      	b.n	8018418 <uxr_read_framed_msg+0x1c>
 801874e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018750:	9300      	str	r3, [sp, #0]
 8018752:	2303      	movs	r3, #3
 8018754:	e7c6      	b.n	80186e4 <uxr_read_framed_msg+0x2e8>
 8018756:	2305      	movs	r3, #5
 8018758:	7023      	strb	r3, [r4, #0]
 801875a:	e660      	b.n	801841e <uxr_read_framed_msg+0x22>
 801875c:	f43f aeef 	beq.w	801853e <uxr_read_framed_msg+0x142>
 8018760:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8018764:	d094      	beq.n	8018690 <uxr_read_framed_msg+0x294>
 8018766:	ebae 0303 	sub.w	r3, lr, r3
 801876a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801876c:	3302      	adds	r3, #2
 801876e:	9200      	str	r2, [sp, #0]
 8018770:	e7b8      	b.n	80186e4 <uxr_read_framed_msg+0x2e8>
 8018772:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018778:	7013      	strb	r3, [r2, #0]
 801877a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801877c:	b003      	add	sp, #12
 801877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018782:	1c59      	adds	r1, r3, #1
 8018784:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018788:	084a      	lsrs	r2, r1, #1
 801878a:	fba5 e202 	umull	lr, r2, r5, r2
 801878e:	0892      	lsrs	r2, r2, #2
 8018790:	fb0c 1212 	mls	r2, ip, r2, r1
 8018794:	b2d1      	uxtb	r1, r2
 8018796:	4288      	cmp	r0, r1
 8018798:	d0b0      	beq.n	80186fc <uxr_read_framed_msg+0x300>
 801879a:	3302      	adds	r3, #2
 801879c:	4422      	add	r2, r4
 801879e:	7891      	ldrb	r1, [r2, #2]
 80187a0:	085a      	lsrs	r2, r3, #1
 80187a2:	fba5 0202 	umull	r0, r2, r5, r2
 80187a6:	297e      	cmp	r1, #126	; 0x7e
 80187a8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80187ac:	fb0c 3312 	mls	r3, ip, r2, r3
 80187b0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80187b4:	f000 80a1 	beq.w	80188fa <uxr_read_framed_msg+0x4fe>
 80187b8:	f081 0120 	eor.w	r1, r1, #32
 80187bc:	e680      	b.n	80184c0 <uxr_read_framed_msg+0xc4>
 80187be:	f103 0c01 	add.w	ip, r3, #1
 80187c2:	202a      	movs	r0, #42	; 0x2a
 80187c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80187c8:	fba5 e202 	umull	lr, r2, r5, r2
 80187cc:	0892      	lsrs	r2, r2, #2
 80187ce:	fb00 c212 	mls	r2, r0, r2, ip
 80187d2:	fa5f fc82 	uxtb.w	ip, r2
 80187d6:	4561      	cmp	r1, ip
 80187d8:	d081      	beq.n	80186de <uxr_read_framed_msg+0x2e2>
 80187da:	3302      	adds	r3, #2
 80187dc:	4422      	add	r2, r4
 80187de:	0859      	lsrs	r1, r3, #1
 80187e0:	7892      	ldrb	r2, [r2, #2]
 80187e2:	fba5 c101 	umull	ip, r1, r5, r1
 80187e6:	2a7e      	cmp	r2, #126	; 0x7e
 80187e8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80187ec:	fb00 3311 	mls	r3, r0, r1, r3
 80187f0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80187f4:	f000 8091 	beq.w	801891a <uxr_read_framed_msg+0x51e>
 80187f8:	f082 0220 	eor.w	r2, r2, #32
 80187fc:	e636      	b.n	801846c <uxr_read_framed_msg+0x70>
 80187fe:	1c51      	adds	r1, r2, #1
 8018800:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018804:	084b      	lsrs	r3, r1, #1
 8018806:	fba5 e303 	umull	lr, r3, r5, r3
 801880a:	089b      	lsrs	r3, r3, #2
 801880c:	fb0c 1313 	mls	r3, ip, r3, r1
 8018810:	b2d9      	uxtb	r1, r3
 8018812:	4288      	cmp	r0, r1
 8018814:	d09b      	beq.n	801874e <uxr_read_framed_msg+0x352>
 8018816:	3202      	adds	r2, #2
 8018818:	4423      	add	r3, r4
 801881a:	0850      	lsrs	r0, r2, #1
 801881c:	789b      	ldrb	r3, [r3, #2]
 801881e:	fba5 1000 	umull	r1, r0, r5, r0
 8018822:	2b7e      	cmp	r3, #126	; 0x7e
 8018824:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018828:	fb0c 2210 	mls	r2, ip, r0, r2
 801882c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8018830:	d077      	beq.n	8018922 <uxr_read_framed_msg+0x526>
 8018832:	f083 0120 	eor.w	r1, r3, #32
 8018836:	e6ea      	b.n	801860e <uxr_read_framed_msg+0x212>
 8018838:	f103 0c01 	add.w	ip, r3, #1
 801883c:	202a      	movs	r0, #42	; 0x2a
 801883e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018842:	fba5 e202 	umull	lr, r2, r5, r2
 8018846:	0892      	lsrs	r2, r2, #2
 8018848:	fb00 c212 	mls	r2, r0, r2, ip
 801884c:	fa5f fc82 	uxtb.w	ip, r2
 8018850:	4561      	cmp	r1, ip
 8018852:	f43f af57 	beq.w	8018704 <uxr_read_framed_msg+0x308>
 8018856:	3302      	adds	r3, #2
 8018858:	4422      	add	r2, r4
 801885a:	7891      	ldrb	r1, [r2, #2]
 801885c:	085a      	lsrs	r2, r3, #1
 801885e:	fba5 c202 	umull	ip, r2, r5, r2
 8018862:	297e      	cmp	r1, #126	; 0x7e
 8018864:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8018868:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801886c:	fb00 3312 	mls	r3, r0, r2, r3
 8018870:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018874:	f43f af46 	beq.w	8018704 <uxr_read_framed_msg+0x308>
 8018878:	f081 0120 	eor.w	r1, r1, #32
 801887c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8018880:	e6ea      	b.n	8018658 <uxr_read_framed_msg+0x25c>
 8018882:	1c59      	adds	r1, r3, #1
 8018884:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018888:	084a      	lsrs	r2, r1, #1
 801888a:	fba5 e202 	umull	lr, r2, r5, r2
 801888e:	0892      	lsrs	r2, r2, #2
 8018890:	fb0c 1212 	mls	r2, ip, r2, r1
 8018894:	b2d1      	uxtb	r1, r2
 8018896:	4288      	cmp	r0, r1
 8018898:	f43f af21 	beq.w	80186de <uxr_read_framed_msg+0x2e2>
 801889c:	3302      	adds	r3, #2
 801889e:	4422      	add	r2, r4
 80188a0:	7891      	ldrb	r1, [r2, #2]
 80188a2:	085a      	lsrs	r2, r3, #1
 80188a4:	fba5 0202 	umull	r0, r2, r5, r2
 80188a8:	297e      	cmp	r1, #126	; 0x7e
 80188aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80188ae:	fb0c 3312 	mls	r3, ip, r2, r3
 80188b2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80188b6:	d030      	beq.n	801891a <uxr_read_framed_msg+0x51e>
 80188b8:	f081 0120 	eor.w	r1, r1, #32
 80188bc:	e65d      	b.n	801857a <uxr_read_framed_msg+0x17e>
 80188be:	1c59      	adds	r1, r3, #1
 80188c0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80188c4:	084a      	lsrs	r2, r1, #1
 80188c6:	fba5 e202 	umull	lr, r2, r5, r2
 80188ca:	0892      	lsrs	r2, r2, #2
 80188cc:	fb0c 1212 	mls	r2, ip, r2, r1
 80188d0:	b2d1      	uxtb	r1, r2
 80188d2:	4288      	cmp	r0, r1
 80188d4:	f43f af12 	beq.w	80186fc <uxr_read_framed_msg+0x300>
 80188d8:	3302      	adds	r3, #2
 80188da:	4422      	add	r2, r4
 80188dc:	7891      	ldrb	r1, [r2, #2]
 80188de:	085a      	lsrs	r2, r3, #1
 80188e0:	fba5 0202 	umull	r0, r2, r5, r2
 80188e4:	297e      	cmp	r1, #126	; 0x7e
 80188e6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80188ea:	fb0c 3312 	mls	r3, ip, r2, r3
 80188ee:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80188f2:	d002      	beq.n	80188fa <uxr_read_framed_msg+0x4fe>
 80188f4:	f081 0120 	eor.w	r1, r1, #32
 80188f8:	e66a      	b.n	80185d0 <uxr_read_framed_msg+0x1d4>
 80188fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188fc:	9300      	str	r3, [sp, #0]
 80188fe:	2302      	movs	r3, #2
 8018900:	9301      	str	r3, [sp, #4]
 8018902:	464a      	mov	r2, r9
 8018904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018906:	4641      	mov	r1, r8
 8018908:	4620      	mov	r0, r4
 801890a:	f7ff fce3 	bl	80182d4 <uxr_framing_read_transport>
 801890e:	2800      	cmp	r0, #0
 8018910:	f47f aef2 	bne.w	80186f8 <uxr_read_framed_msg+0x2fc>
 8018914:	2301      	movs	r3, #1
 8018916:	7023      	strb	r3, [r4, #0]
 8018918:	e581      	b.n	801841e <uxr_read_framed_msg+0x22>
 801891a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801891c:	9300      	str	r3, [sp, #0]
 801891e:	2301      	movs	r3, #1
 8018920:	e7ee      	b.n	8018900 <uxr_read_framed_msg+0x504>
 8018922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018924:	9300      	str	r3, [sp, #0]
 8018926:	2303      	movs	r3, #3
 8018928:	e7ea      	b.n	8018900 <uxr_read_framed_msg+0x504>
 801892a:	bf00      	nop

0801892c <uxr_stream_id>:
 801892c:	2901      	cmp	r1, #1
 801892e:	4684      	mov	ip, r0
 8018930:	b500      	push	{lr}
 8018932:	b083      	sub	sp, #12
 8018934:	d01f      	beq.n	8018976 <uxr_stream_id+0x4a>
 8018936:	2902      	cmp	r1, #2
 8018938:	f04f 0e00 	mov.w	lr, #0
 801893c:	d020      	beq.n	8018980 <uxr_stream_id+0x54>
 801893e:	2300      	movs	r3, #0
 8018940:	2000      	movs	r0, #0
 8018942:	f36e 0307 	bfi	r3, lr, #0, #8
 8018946:	f36c 230f 	bfi	r3, ip, #8, #8
 801894a:	f361 4317 	bfi	r3, r1, #16, #8
 801894e:	f362 631f 	bfi	r3, r2, #24, #8
 8018952:	fa5f fc83 	uxtb.w	ip, r3
 8018956:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801895a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801895e:	0e1b      	lsrs	r3, r3, #24
 8018960:	f36c 0007 	bfi	r0, ip, #0, #8
 8018964:	f361 200f 	bfi	r0, r1, #8, #8
 8018968:	f362 4017 	bfi	r0, r2, #16, #8
 801896c:	f363 601f 	bfi	r0, r3, #24, #8
 8018970:	b003      	add	sp, #12
 8018972:	f85d fb04 	ldr.w	pc, [sp], #4
 8018976:	f100 0e01 	add.w	lr, r0, #1
 801897a:	fa5f fe8e 	uxtb.w	lr, lr
 801897e:	e7de      	b.n	801893e <uxr_stream_id+0x12>
 8018980:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8018984:	e7db      	b.n	801893e <uxr_stream_id+0x12>
 8018986:	bf00      	nop

08018988 <uxr_stream_id_from_raw>:
 8018988:	b082      	sub	sp, #8
 801898a:	b130      	cbz	r0, 801899a <uxr_stream_id_from_raw+0x12>
 801898c:	0603      	lsls	r3, r0, #24
 801898e:	d421      	bmi.n	80189d4 <uxr_stream_id_from_raw+0x4c>
 8018990:	1e42      	subs	r2, r0, #1
 8018992:	f04f 0c01 	mov.w	ip, #1
 8018996:	b2d2      	uxtb	r2, r2
 8018998:	e001      	b.n	801899e <uxr_stream_id_from_raw+0x16>
 801899a:	4684      	mov	ip, r0
 801899c:	4602      	mov	r2, r0
 801899e:	2300      	movs	r3, #0
 80189a0:	f360 0307 	bfi	r3, r0, #0, #8
 80189a4:	2000      	movs	r0, #0
 80189a6:	f362 230f 	bfi	r3, r2, #8, #8
 80189aa:	f36c 4317 	bfi	r3, ip, #16, #8
 80189ae:	f361 631f 	bfi	r3, r1, #24, #8
 80189b2:	fa5f fc83 	uxtb.w	ip, r3
 80189b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80189ba:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80189be:	0e1b      	lsrs	r3, r3, #24
 80189c0:	f36c 0007 	bfi	r0, ip, #0, #8
 80189c4:	f361 200f 	bfi	r0, r1, #8, #8
 80189c8:	f362 4017 	bfi	r0, r2, #16, #8
 80189cc:	f363 601f 	bfi	r0, r3, #24, #8
 80189d0:	b002      	add	sp, #8
 80189d2:	4770      	bx	lr
 80189d4:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80189d8:	f04f 0c02 	mov.w	ip, #2
 80189dc:	e7df      	b.n	801899e <uxr_stream_id_from_raw+0x16>
 80189de:	bf00      	nop

080189e0 <uxr_init_stream_storage>:
 80189e0:	2300      	movs	r3, #0
 80189e2:	7403      	strb	r3, [r0, #16]
 80189e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80189e8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80189ec:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80189f0:	4770      	bx	lr
 80189f2:	bf00      	nop

080189f4 <uxr_reset_stream_storage>:
 80189f4:	b570      	push	{r4, r5, r6, lr}
 80189f6:	7c03      	ldrb	r3, [r0, #16]
 80189f8:	4604      	mov	r4, r0
 80189fa:	b14b      	cbz	r3, 8018a10 <uxr_reset_stream_storage+0x1c>
 80189fc:	4606      	mov	r6, r0
 80189fe:	2500      	movs	r5, #0
 8018a00:	4630      	mov	r0, r6
 8018a02:	3501      	adds	r5, #1
 8018a04:	f004 fea6 	bl	801d754 <uxr_reset_output_best_effort_stream>
 8018a08:	7c23      	ldrb	r3, [r4, #16]
 8018a0a:	3610      	adds	r6, #16
 8018a0c:	42ab      	cmp	r3, r5
 8018a0e:	d8f7      	bhi.n	8018a00 <uxr_reset_stream_storage+0xc>
 8018a10:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018a14:	b15b      	cbz	r3, 8018a2e <uxr_reset_stream_storage+0x3a>
 8018a16:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018a1a:	2500      	movs	r5, #0
 8018a1c:	4630      	mov	r0, r6
 8018a1e:	3501      	adds	r5, #1
 8018a20:	f004 fc9e 	bl	801d360 <uxr_reset_input_best_effort_stream>
 8018a24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018a28:	3602      	adds	r6, #2
 8018a2a:	42ab      	cmp	r3, r5
 8018a2c:	d8f6      	bhi.n	8018a1c <uxr_reset_stream_storage+0x28>
 8018a2e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8018a32:	b15b      	cbz	r3, 8018a4c <uxr_reset_stream_storage+0x58>
 8018a34:	f104 0618 	add.w	r6, r4, #24
 8018a38:	2500      	movs	r5, #0
 8018a3a:	4630      	mov	r0, r6
 8018a3c:	3501      	adds	r5, #1
 8018a3e:	f004 ff37 	bl	801d8b0 <uxr_reset_output_reliable_stream>
 8018a42:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8018a46:	3628      	adds	r6, #40	; 0x28
 8018a48:	42ab      	cmp	r3, r5
 8018a4a:	d8f6      	bhi.n	8018a3a <uxr_reset_stream_storage+0x46>
 8018a4c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018a50:	b15b      	cbz	r3, 8018a6a <uxr_reset_stream_storage+0x76>
 8018a52:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8018a56:	2500      	movs	r5, #0
 8018a58:	4630      	mov	r0, r6
 8018a5a:	3501      	adds	r5, #1
 8018a5c:	f004 fcec 	bl	801d438 <uxr_reset_input_reliable_stream>
 8018a60:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018a64:	3618      	adds	r6, #24
 8018a66:	42ab      	cmp	r3, r5
 8018a68:	d8f6      	bhi.n	8018a58 <uxr_reset_stream_storage+0x64>
 8018a6a:	bd70      	pop	{r4, r5, r6, pc}

08018a6c <uxr_add_output_best_effort_buffer>:
 8018a6c:	b510      	push	{r4, lr}
 8018a6e:	7c04      	ldrb	r4, [r0, #16]
 8018a70:	b082      	sub	sp, #8
 8018a72:	f104 0c01 	add.w	ip, r4, #1
 8018a76:	f880 c010 	strb.w	ip, [r0, #16]
 8018a7a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8018a7e:	f004 fe5f 	bl	801d740 <uxr_init_output_best_effort_stream>
 8018a82:	2201      	movs	r2, #1
 8018a84:	4620      	mov	r0, r4
 8018a86:	4611      	mov	r1, r2
 8018a88:	b002      	add	sp, #8
 8018a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a8e:	f7ff bf4d 	b.w	801892c <uxr_stream_id>
 8018a92:	bf00      	nop

08018a94 <uxr_add_output_reliable_buffer>:
 8018a94:	b510      	push	{r4, lr}
 8018a96:	b084      	sub	sp, #16
 8018a98:	4684      	mov	ip, r0
 8018a9a:	2028      	movs	r0, #40	; 0x28
 8018a9c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8018aa0:	9400      	str	r4, [sp, #0]
 8018aa2:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8018aa6:	fb00 c004 	mla	r0, r0, r4, ip
 8018aaa:	f104 0e01 	add.w	lr, r4, #1
 8018aae:	3018      	adds	r0, #24
 8018ab0:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8018ab4:	f004 fec4 	bl	801d840 <uxr_init_output_reliable_stream>
 8018ab8:	2201      	movs	r2, #1
 8018aba:	2102      	movs	r1, #2
 8018abc:	4620      	mov	r0, r4
 8018abe:	b004      	add	sp, #16
 8018ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ac4:	f7ff bf32 	b.w	801892c <uxr_stream_id>

08018ac8 <uxr_add_input_best_effort_buffer>:
 8018ac8:	b510      	push	{r4, lr}
 8018aca:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8018ace:	b082      	sub	sp, #8
 8018ad0:	1c62      	adds	r2, r4, #1
 8018ad2:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8018ad6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8018ada:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018ade:	f004 fc3b 	bl	801d358 <uxr_init_input_best_effort_stream>
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	2101      	movs	r1, #1
 8018ae6:	4620      	mov	r0, r4
 8018ae8:	b002      	add	sp, #8
 8018aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018aee:	f7ff bf1d 	b.w	801892c <uxr_stream_id>
 8018af2:	bf00      	nop

08018af4 <uxr_add_input_reliable_buffer>:
 8018af4:	b510      	push	{r4, lr}
 8018af6:	b084      	sub	sp, #16
 8018af8:	4684      	mov	ip, r0
 8018afa:	2018      	movs	r0, #24
 8018afc:	9c06      	ldr	r4, [sp, #24]
 8018afe:	9400      	str	r4, [sp, #0]
 8018b00:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8018b04:	fb00 c004 	mla	r0, r0, r4, ip
 8018b08:	f104 0e01 	add.w	lr, r4, #1
 8018b0c:	3048      	adds	r0, #72	; 0x48
 8018b0e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8018b12:	f004 fc6b 	bl	801d3ec <uxr_init_input_reliable_stream>
 8018b16:	2200      	movs	r2, #0
 8018b18:	2102      	movs	r1, #2
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	b004      	add	sp, #16
 8018b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b22:	f7ff bf03 	b.w	801892c <uxr_stream_id>
 8018b26:	bf00      	nop

08018b28 <uxr_get_output_best_effort_stream>:
 8018b28:	7c03      	ldrb	r3, [r0, #16]
 8018b2a:	428b      	cmp	r3, r1
 8018b2c:	bf8c      	ite	hi
 8018b2e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8018b32:	2000      	movls	r0, #0
 8018b34:	4770      	bx	lr
 8018b36:	bf00      	nop

08018b38 <uxr_get_output_reliable_stream>:
 8018b38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8018b3c:	428b      	cmp	r3, r1
 8018b3e:	d904      	bls.n	8018b4a <uxr_get_output_reliable_stream+0x12>
 8018b40:	2328      	movs	r3, #40	; 0x28
 8018b42:	fb03 0001 	mla	r0, r3, r1, r0
 8018b46:	3018      	adds	r0, #24
 8018b48:	4770      	bx	lr
 8018b4a:	2000      	movs	r0, #0
 8018b4c:	4770      	bx	lr
 8018b4e:	bf00      	nop

08018b50 <uxr_get_input_best_effort_stream>:
 8018b50:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8018b54:	428b      	cmp	r3, r1
 8018b56:	d903      	bls.n	8018b60 <uxr_get_input_best_effort_stream+0x10>
 8018b58:	3121      	adds	r1, #33	; 0x21
 8018b5a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8018b5e:	4770      	bx	lr
 8018b60:	2000      	movs	r0, #0
 8018b62:	4770      	bx	lr

08018b64 <uxr_get_input_reliable_stream>:
 8018b64:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8018b68:	428b      	cmp	r3, r1
 8018b6a:	d904      	bls.n	8018b76 <uxr_get_input_reliable_stream+0x12>
 8018b6c:	2318      	movs	r3, #24
 8018b6e:	fb03 0001 	mla	r0, r3, r1, r0
 8018b72:	3048      	adds	r0, #72	; 0x48
 8018b74:	4770      	bx	lr
 8018b76:	2000      	movs	r0, #0
 8018b78:	4770      	bx	lr
 8018b7a:	bf00      	nop

08018b7c <uxr_output_streams_confirmed>:
 8018b7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8018b80:	b183      	cbz	r3, 8018ba4 <uxr_output_streams_confirmed+0x28>
 8018b82:	b570      	push	{r4, r5, r6, lr}
 8018b84:	4606      	mov	r6, r0
 8018b86:	f100 0518 	add.w	r5, r0, #24
 8018b8a:	2400      	movs	r4, #0
 8018b8c:	e000      	b.n	8018b90 <uxr_output_streams_confirmed+0x14>
 8018b8e:	b140      	cbz	r0, 8018ba2 <uxr_output_streams_confirmed+0x26>
 8018b90:	4628      	mov	r0, r5
 8018b92:	3401      	adds	r4, #1
 8018b94:	f005 f900 	bl	801dd98 <uxr_is_output_up_to_date>
 8018b98:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8018b9c:	3528      	adds	r5, #40	; 0x28
 8018b9e:	42a3      	cmp	r3, r4
 8018ba0:	d8f5      	bhi.n	8018b8e <uxr_output_streams_confirmed+0x12>
 8018ba2:	bd70      	pop	{r4, r5, r6, pc}
 8018ba4:	2001      	movs	r0, #1
 8018ba6:	4770      	bx	lr

08018ba8 <uxr_buffer_submessage_header>:
 8018ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018baa:	460e      	mov	r6, r1
 8018bac:	2104      	movs	r1, #4
 8018bae:	4604      	mov	r4, r0
 8018bb0:	4615      	mov	r5, r2
 8018bb2:	461f      	mov	r7, r3
 8018bb4:	f7f9 faa8 	bl	8012108 <ucdr_align_to>
 8018bb8:	2301      	movs	r3, #1
 8018bba:	4631      	mov	r1, r6
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	ea47 0203 	orr.w	r2, r7, r3
 8018bc2:	7523      	strb	r3, [r4, #20]
 8018bc4:	462b      	mov	r3, r5
 8018bc6:	f000 fa29 	bl	801901c <uxr_serialize_submessage_header>
 8018bca:	4620      	mov	r0, r4
 8018bcc:	f7f9 fab2 	bl	8012134 <ucdr_buffer_remaining>
 8018bd0:	42a8      	cmp	r0, r5
 8018bd2:	bf34      	ite	cc
 8018bd4:	2000      	movcc	r0, #0
 8018bd6:	2001      	movcs	r0, #1
 8018bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bda:	bf00      	nop

08018bdc <uxr_read_submessage_header>:
 8018bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be0:	4604      	mov	r4, r0
 8018be2:	460d      	mov	r5, r1
 8018be4:	2104      	movs	r1, #4
 8018be6:	4616      	mov	r6, r2
 8018be8:	4698      	mov	r8, r3
 8018bea:	f7f9 fa8d 	bl	8012108 <ucdr_align_to>
 8018bee:	4620      	mov	r0, r4
 8018bf0:	f7f9 faa0 	bl	8012134 <ucdr_buffer_remaining>
 8018bf4:	2803      	cmp	r0, #3
 8018bf6:	bf8c      	ite	hi
 8018bf8:	2701      	movhi	r7, #1
 8018bfa:	2700      	movls	r7, #0
 8018bfc:	d802      	bhi.n	8018c04 <uxr_read_submessage_header+0x28>
 8018bfe:	4638      	mov	r0, r7
 8018c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c04:	4633      	mov	r3, r6
 8018c06:	4642      	mov	r2, r8
 8018c08:	4620      	mov	r0, r4
 8018c0a:	4629      	mov	r1, r5
 8018c0c:	f000 fa1a 	bl	8019044 <uxr_deserialize_submessage_header>
 8018c10:	f898 3000 	ldrb.w	r3, [r8]
 8018c14:	4638      	mov	r0, r7
 8018c16:	f003 0201 	and.w	r2, r3, #1
 8018c1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8018c1e:	f888 3000 	strb.w	r3, [r8]
 8018c22:	7522      	strb	r2, [r4, #20]
 8018c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018c28 <uxr_submessage_padding>:
 8018c28:	f010 0003 	ands.w	r0, r0, #3
 8018c2c:	bf18      	it	ne
 8018c2e:	f1c0 0004 	rsbne	r0, r0, #4
 8018c32:	4770      	bx	lr

08018c34 <uxr_millis>:
 8018c34:	b510      	push	{r4, lr}
 8018c36:	b084      	sub	sp, #16
 8018c38:	2001      	movs	r0, #1
 8018c3a:	4669      	mov	r1, sp
 8018c3c:	f7e9 fe34 	bl	80028a8 <clock_gettime>
 8018c40:	4908      	ldr	r1, [pc, #32]	; (8018c64 <uxr_millis+0x30>)
 8018c42:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8018c46:	fba0 0301 	umull	r0, r3, r0, r1
 8018c4a:	1900      	adds	r0, r0, r4
 8018c4c:	fb01 3102 	mla	r1, r1, r2, r3
 8018c50:	4a05      	ldr	r2, [pc, #20]	; (8018c68 <uxr_millis+0x34>)
 8018c52:	f04f 0300 	mov.w	r3, #0
 8018c56:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8018c5a:	f7e7 fe23 	bl	80008a4 <__aeabi_ldivmod>
 8018c5e:	b004      	add	sp, #16
 8018c60:	bd10      	pop	{r4, pc}
 8018c62:	bf00      	nop
 8018c64:	3b9aca00 	.word	0x3b9aca00
 8018c68:	000f4240 	.word	0x000f4240

08018c6c <uxr_nanos>:
 8018c6c:	b510      	push	{r4, lr}
 8018c6e:	b084      	sub	sp, #16
 8018c70:	2001      	movs	r0, #1
 8018c72:	4669      	mov	r1, sp
 8018c74:	f7e9 fe18 	bl	80028a8 <clock_gettime>
 8018c78:	4a06      	ldr	r2, [pc, #24]	; (8018c94 <uxr_nanos+0x28>)
 8018c7a:	9800      	ldr	r0, [sp, #0]
 8018c7c:	9902      	ldr	r1, [sp, #8]
 8018c7e:	fba0 0302 	umull	r0, r3, r0, r2
 8018c82:	9c01      	ldr	r4, [sp, #4]
 8018c84:	1840      	adds	r0, r0, r1
 8018c86:	fb02 3304 	mla	r3, r2, r4, r3
 8018c8a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8018c8e:	b004      	add	sp, #16
 8018c90:	bd10      	pop	{r4, pc}
 8018c92:	bf00      	nop
 8018c94:	3b9aca00 	.word	0x3b9aca00

08018c98 <on_full_output_buffer_fragmented>:
 8018c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c9c:	460c      	mov	r4, r1
 8018c9e:	b08a      	sub	sp, #40	; 0x28
 8018ca0:	4606      	mov	r6, r0
 8018ca2:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8018ca6:	f104 0008 	add.w	r0, r4, #8
 8018caa:	f7ff ff45 	bl	8018b38 <uxr_get_output_reliable_stream>
 8018cae:	4605      	mov	r5, r0
 8018cb0:	f005 f87c 	bl	801ddac <get_available_free_slots>
 8018cb4:	b968      	cbnz	r0, 8018cd2 <on_full_output_buffer_fragmented+0x3a>
 8018cb6:	4620      	mov	r0, r4
 8018cb8:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8018cbc:	4798      	blx	r3
 8018cbe:	b918      	cbnz	r0, 8018cc8 <on_full_output_buffer_fragmented+0x30>
 8018cc0:	2001      	movs	r0, #1
 8018cc2:	b00a      	add	sp, #40	; 0x28
 8018cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cc8:	4628      	mov	r0, r5
 8018cca:	f005 f86f 	bl	801ddac <get_available_free_slots>
 8018cce:	2800      	cmp	r0, #0
 8018cd0:	d0f6      	beq.n	8018cc0 <on_full_output_buffer_fragmented+0x28>
 8018cd2:	8929      	ldrh	r1, [r5, #8]
 8018cd4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8018cd8:	89eb      	ldrh	r3, [r5, #14]
 8018cda:	7b28      	ldrb	r0, [r5, #12]
 8018cdc:	686f      	ldr	r7, [r5, #4]
 8018cde:	1a12      	subs	r2, r2, r0
 8018ce0:	fbb3 f0f1 	udiv	r0, r3, r1
 8018ce4:	fbb7 f7f1 	udiv	r7, r7, r1
 8018ce8:	fb01 3110 	mls	r1, r1, r0, r3
 8018cec:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8018cf0:	b289      	uxth	r1, r1
 8018cf2:	fb07 f101 	mul.w	r1, r7, r1
 8018cf6:	3f04      	subs	r7, #4
 8018cf8:	443a      	add	r2, r7
 8018cfa:	3104      	adds	r1, #4
 8018cfc:	fa1f f882 	uxth.w	r8, r2
 8018d00:	463a      	mov	r2, r7
 8018d02:	eba3 0308 	sub.w	r3, r3, r8
 8018d06:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8018d0a:	682b      	ldr	r3, [r5, #0]
 8018d0c:	4419      	add	r1, r3
 8018d0e:	2300      	movs	r3, #0
 8018d10:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018d14:	9000      	str	r0, [sp, #0]
 8018d16:	a802      	add	r0, sp, #8
 8018d18:	f7f9 f9c8 	bl	80120ac <ucdr_init_buffer_origin_offset>
 8018d1c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8018d20:	f102 0308 	add.w	r3, r2, #8
 8018d24:	42bb      	cmp	r3, r7
 8018d26:	d927      	bls.n	8018d78 <on_full_output_buffer_fragmented+0xe0>
 8018d28:	4642      	mov	r2, r8
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	210d      	movs	r1, #13
 8018d2e:	a802      	add	r0, sp, #8
 8018d30:	f7ff ff3a 	bl	8018ba8 <uxr_buffer_submessage_header>
 8018d34:	8929      	ldrh	r1, [r5, #8]
 8018d36:	89eb      	ldrh	r3, [r5, #14]
 8018d38:	686a      	ldr	r2, [r5, #4]
 8018d3a:	fbb3 f0f1 	udiv	r0, r3, r1
 8018d3e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018d42:	fb01 3310 	mls	r3, r1, r0, r3
 8018d46:	b29b      	uxth	r3, r3
 8018d48:	fb02 f303 	mul.w	r3, r2, r3
 8018d4c:	682a      	ldr	r2, [r5, #0]
 8018d4e:	50d7      	str	r7, [r2, r3]
 8018d50:	2101      	movs	r1, #1
 8018d52:	89e8      	ldrh	r0, [r5, #14]
 8018d54:	f005 f84c 	bl	801ddf0 <uxr_seq_num_add>
 8018d58:	9904      	ldr	r1, [sp, #16]
 8018d5a:	9a03      	ldr	r2, [sp, #12]
 8018d5c:	81e8      	strh	r0, [r5, #14]
 8018d5e:	4630      	mov	r0, r6
 8018d60:	1a52      	subs	r2, r2, r1
 8018d62:	f7f9 f9b5 	bl	80120d0 <ucdr_init_buffer>
 8018d66:	4630      	mov	r0, r6
 8018d68:	4622      	mov	r2, r4
 8018d6a:	490f      	ldr	r1, [pc, #60]	; (8018da8 <on_full_output_buffer_fragmented+0x110>)
 8018d6c:	f7f9 f984 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 8018d70:	2000      	movs	r0, #0
 8018d72:	b00a      	add	sp, #40	; 0x28
 8018d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d78:	b292      	uxth	r2, r2
 8018d7a:	2302      	movs	r3, #2
 8018d7c:	210d      	movs	r1, #13
 8018d7e:	a802      	add	r0, sp, #8
 8018d80:	f7ff ff12 	bl	8018ba8 <uxr_buffer_submessage_header>
 8018d84:	8928      	ldrh	r0, [r5, #8]
 8018d86:	89eb      	ldrh	r3, [r5, #14]
 8018d88:	6869      	ldr	r1, [r5, #4]
 8018d8a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8018d8e:	fbb3 f7f0 	udiv	r7, r3, r0
 8018d92:	fbb1 f1f0 	udiv	r1, r1, r0
 8018d96:	fb00 3317 	mls	r3, r0, r7, r3
 8018d9a:	3208      	adds	r2, #8
 8018d9c:	b29b      	uxth	r3, r3
 8018d9e:	fb01 f303 	mul.w	r3, r1, r3
 8018da2:	6829      	ldr	r1, [r5, #0]
 8018da4:	50ca      	str	r2, [r1, r3]
 8018da6:	e7d3      	b.n	8018d50 <on_full_output_buffer_fragmented+0xb8>
 8018da8:	08018c99 	.word	0x08018c99

08018dac <uxr_prepare_output_stream>:
 8018dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dae:	b087      	sub	sp, #28
 8018db0:	2707      	movs	r7, #7
 8018db2:	2500      	movs	r5, #0
 8018db4:	461c      	mov	r4, r3
 8018db6:	4606      	mov	r6, r0
 8018db8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018dbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018dbe:	e9cd 7500 	strd	r7, r5, [sp]
 8018dc2:	3204      	adds	r2, #4
 8018dc4:	f7fe ffc8 	bl	8017d58 <uxr_prepare_stream_to_write_submessage>
 8018dc8:	f080 0201 	eor.w	r2, r0, #1
 8018dcc:	b2d2      	uxtb	r2, r2
 8018dce:	75a2      	strb	r2, [r4, #22]
 8018dd0:	b112      	cbz	r2, 8018dd8 <uxr_prepare_output_stream+0x2c>
 8018dd2:	4628      	mov	r0, r5
 8018dd4:	b007      	add	sp, #28
 8018dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018dd8:	aa05      	add	r2, sp, #20
 8018dda:	9902      	ldr	r1, [sp, #8]
 8018ddc:	4630      	mov	r0, r6
 8018dde:	f7ff f8f7 	bl	8017fd0 <uxr_init_base_object_request>
 8018de2:	a905      	add	r1, sp, #20
 8018de4:	4605      	mov	r5, r0
 8018de6:	4620      	mov	r0, r4
 8018de8:	f001 f8bc 	bl	8019f64 <uxr_serialize_WRITE_DATA_Payload_Data>
 8018dec:	69a6      	ldr	r6, [r4, #24]
 8018dee:	69e7      	ldr	r7, [r4, #28]
 8018df0:	4620      	mov	r0, r4
 8018df2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8018df6:	1a52      	subs	r2, r2, r1
 8018df8:	f7f9 f96a 	bl	80120d0 <ucdr_init_buffer>
 8018dfc:	4620      	mov	r0, r4
 8018dfe:	463a      	mov	r2, r7
 8018e00:	4631      	mov	r1, r6
 8018e02:	f7f9 f939 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 8018e06:	4628      	mov	r0, r5
 8018e08:	b007      	add	sp, #28
 8018e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018e0c <uxr_prepare_output_stream_fragmented>:
 8018e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e10:	b091      	sub	sp, #68	; 0x44
 8018e12:	4605      	mov	r5, r0
 8018e14:	3008      	adds	r0, #8
 8018e16:	461e      	mov	r6, r3
 8018e18:	9105      	str	r1, [sp, #20]
 8018e1a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018e1e:	9204      	str	r2, [sp, #16]
 8018e20:	f7ff fe8a 	bl	8018b38 <uxr_get_output_reliable_stream>
 8018e24:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8018e28:	2b01      	cmp	r3, #1
 8018e2a:	f000 8093 	beq.w	8018f54 <uxr_prepare_output_stream_fragmented+0x148>
 8018e2e:	4604      	mov	r4, r0
 8018e30:	2800      	cmp	r0, #0
 8018e32:	f000 808f 	beq.w	8018f54 <uxr_prepare_output_stream_fragmented+0x148>
 8018e36:	f004 ffb9 	bl	801ddac <get_available_free_slots>
 8018e3a:	2800      	cmp	r0, #0
 8018e3c:	f000 8085 	beq.w	8018f4a <uxr_prepare_output_stream_fragmented+0x13e>
 8018e40:	8923      	ldrh	r3, [r4, #8]
 8018e42:	89e7      	ldrh	r7, [r4, #14]
 8018e44:	6862      	ldr	r2, [r4, #4]
 8018e46:	fbb7 f9f3 	udiv	r9, r7, r3
 8018e4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8018e4e:	fb03 7919 	mls	r9, r3, r9, r7
 8018e52:	6823      	ldr	r3, [r4, #0]
 8018e54:	f1a2 0b04 	sub.w	fp, r2, #4
 8018e58:	9203      	str	r2, [sp, #12]
 8018e5a:	fa1f f989 	uxth.w	r9, r9
 8018e5e:	fb02 f909 	mul.w	r9, r2, r9
 8018e62:	f109 0904 	add.w	r9, r9, #4
 8018e66:	4499      	add	r9, r3
 8018e68:	7b23      	ldrb	r3, [r4, #12]
 8018e6a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8018e6e:	4543      	cmp	r3, r8
 8018e70:	d37c      	bcc.n	8018f6c <uxr_prepare_output_stream_fragmented+0x160>
 8018e72:	f1ab 0a04 	sub.w	sl, fp, #4
 8018e76:	465a      	mov	r2, fp
 8018e78:	4649      	mov	r1, r9
 8018e7a:	a808      	add	r0, sp, #32
 8018e7c:	ebaa 0a03 	sub.w	sl, sl, r3
 8018e80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018e82:	f8cd 8000 	str.w	r8, [sp]
 8018e86:	3308      	adds	r3, #8
 8018e88:	fa1f fa8a 	uxth.w	sl, sl
 8018e8c:	9302      	str	r3, [sp, #8]
 8018e8e:	2300      	movs	r3, #0
 8018e90:	f7f9 f90c 	bl	80120ac <ucdr_init_buffer_origin_offset>
 8018e94:	9b02      	ldr	r3, [sp, #8]
 8018e96:	4652      	mov	r2, sl
 8018e98:	210d      	movs	r1, #13
 8018e9a:	455b      	cmp	r3, fp
 8018e9c:	bf34      	ite	cc
 8018e9e:	2302      	movcc	r3, #2
 8018ea0:	2300      	movcs	r3, #0
 8018ea2:	a808      	add	r0, sp, #32
 8018ea4:	f7ff fe80 	bl	8018ba8 <uxr_buffer_submessage_header>
 8018ea8:	8921      	ldrh	r1, [r4, #8]
 8018eaa:	6863      	ldr	r3, [r4, #4]
 8018eac:	4638      	mov	r0, r7
 8018eae:	fbb7 f2f1 	udiv	r2, r7, r1
 8018eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8018eb6:	fb01 7212 	mls	r2, r1, r2, r7
 8018eba:	2101      	movs	r1, #1
 8018ebc:	b292      	uxth	r2, r2
 8018ebe:	fb02 f303 	mul.w	r3, r2, r3
 8018ec2:	6822      	ldr	r2, [r4, #0]
 8018ec4:	f842 b003 	str.w	fp, [r2, r3]
 8018ec8:	f004 ff92 	bl	801ddf0 <uxr_seq_num_add>
 8018ecc:	9b03      	ldr	r3, [sp, #12]
 8018ece:	f108 0104 	add.w	r1, r8, #4
 8018ed2:	4607      	mov	r7, r0
 8018ed4:	f1a3 0208 	sub.w	r2, r3, #8
 8018ed8:	4630      	mov	r0, r6
 8018eda:	4449      	add	r1, r9
 8018edc:	eba2 0208 	sub.w	r2, r2, r8
 8018ee0:	f7f9 f8f6 	bl	80120d0 <ucdr_init_buffer>
 8018ee4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018ee6:	2107      	movs	r1, #7
 8018ee8:	81e7      	strh	r7, [r4, #14]
 8018eea:	1d1a      	adds	r2, r3, #4
 8018eec:	2300      	movs	r3, #0
 8018eee:	4630      	mov	r0, r6
 8018ef0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8018ef4:	bf28      	it	cs
 8018ef6:	461a      	movcs	r2, r3
 8018ef8:	b292      	uxth	r2, r2
 8018efa:	f7ff fe55 	bl	8018ba8 <uxr_buffer_submessage_header>
 8018efe:	aa07      	add	r2, sp, #28
 8018f00:	9904      	ldr	r1, [sp, #16]
 8018f02:	4628      	mov	r0, r5
 8018f04:	f7ff f864 	bl	8017fd0 <uxr_init_base_object_request>
 8018f08:	4604      	mov	r4, r0
 8018f0a:	b320      	cbz	r0, 8018f56 <uxr_prepare_output_stream_fragmented+0x14a>
 8018f0c:	a907      	add	r1, sp, #28
 8018f0e:	4630      	mov	r0, r6
 8018f10:	f001 f828 	bl	8019f64 <uxr_serialize_WRITE_DATA_Payload_Data>
 8018f14:	4630      	mov	r0, r6
 8018f16:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8018f1a:	1a52      	subs	r2, r2, r1
 8018f1c:	f7f9 f8d8 	bl	80120d0 <ucdr_init_buffer>
 8018f20:	9b05      	ldr	r3, [sp, #20]
 8018f22:	9a02      	ldr	r2, [sp, #8]
 8018f24:	4630      	mov	r0, r6
 8018f26:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8018f2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018f2c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8018f30:	462a      	mov	r2, r5
 8018f32:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8018f36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018f38:	4918      	ldr	r1, [pc, #96]	; (8018f9c <uxr_prepare_output_stream_fragmented+0x190>)
 8018f3a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8018f3e:	f7f9 f89b 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 8018f42:	4620      	mov	r0, r4
 8018f44:	b011      	add	sp, #68	; 0x44
 8018f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018f4c:	4628      	mov	r0, r5
 8018f4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018f50:	4798      	blx	r3
 8018f52:	b920      	cbnz	r0, 8018f5e <uxr_prepare_output_stream_fragmented+0x152>
 8018f54:	2400      	movs	r4, #0
 8018f56:	4620      	mov	r0, r4
 8018f58:	b011      	add	sp, #68	; 0x44
 8018f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f5e:	4620      	mov	r0, r4
 8018f60:	f004 ff24 	bl	801ddac <get_available_free_slots>
 8018f64:	2800      	cmp	r0, #0
 8018f66:	f47f af6b 	bne.w	8018e40 <uxr_prepare_output_stream_fragmented+0x34>
 8018f6a:	e7f3      	b.n	8018f54 <uxr_prepare_output_stream_fragmented+0x148>
 8018f6c:	4638      	mov	r0, r7
 8018f6e:	2101      	movs	r1, #1
 8018f70:	f004 ff3e 	bl	801ddf0 <uxr_seq_num_add>
 8018f74:	8922      	ldrh	r2, [r4, #8]
 8018f76:	6863      	ldr	r3, [r4, #4]
 8018f78:	4607      	mov	r7, r0
 8018f7a:	fbb3 f9f2 	udiv	r9, r3, r2
 8018f7e:	fbb0 f3f2 	udiv	r3, r0, r2
 8018f82:	fb02 0313 	mls	r3, r2, r3, r0
 8018f86:	b29b      	uxth	r3, r3
 8018f88:	fb03 f909 	mul.w	r9, r3, r9
 8018f8c:	6823      	ldr	r3, [r4, #0]
 8018f8e:	f109 0904 	add.w	r9, r9, #4
 8018f92:	4499      	add	r9, r3
 8018f94:	7b23      	ldrb	r3, [r4, #12]
 8018f96:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8018f9a:	e76a      	b.n	8018e72 <uxr_prepare_output_stream_fragmented+0x66>
 8018f9c:	08018c99 	.word	0x08018c99

08018fa0 <uxr_serialize_message_header>:
 8018fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fa2:	4616      	mov	r6, r2
 8018fa4:	b083      	sub	sp, #12
 8018fa6:	4604      	mov	r4, r0
 8018fa8:	460d      	mov	r5, r1
 8018faa:	9301      	str	r3, [sp, #4]
 8018fac:	9f08      	ldr	r7, [sp, #32]
 8018fae:	f7f7 fdb7 	bl	8010b20 <ucdr_serialize_uint8_t>
 8018fb2:	4631      	mov	r1, r6
 8018fb4:	4620      	mov	r0, r4
 8018fb6:	f7f7 fdb3 	bl	8010b20 <ucdr_serialize_uint8_t>
 8018fba:	9a01      	ldr	r2, [sp, #4]
 8018fbc:	2101      	movs	r1, #1
 8018fbe:	4620      	mov	r0, r4
 8018fc0:	f7f7 fe5a 	bl	8010c78 <ucdr_serialize_endian_uint16_t>
 8018fc4:	062b      	lsls	r3, r5, #24
 8018fc6:	d501      	bpl.n	8018fcc <uxr_serialize_message_header+0x2c>
 8018fc8:	b003      	add	sp, #12
 8018fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fcc:	2204      	movs	r2, #4
 8018fce:	4639      	mov	r1, r7
 8018fd0:	4620      	mov	r0, r4
 8018fd2:	b003      	add	sp, #12
 8018fd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018fd8:	f7fd ba6e 	b.w	80164b8 <ucdr_serialize_array_uint8_t>

08018fdc <uxr_deserialize_message_header>:
 8018fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fde:	4616      	mov	r6, r2
 8018fe0:	b083      	sub	sp, #12
 8018fe2:	4604      	mov	r4, r0
 8018fe4:	460d      	mov	r5, r1
 8018fe6:	9301      	str	r3, [sp, #4]
 8018fe8:	9f08      	ldr	r7, [sp, #32]
 8018fea:	f7f7 fdaf 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8018fee:	4631      	mov	r1, r6
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	f7f7 fdab 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8018ff6:	9a01      	ldr	r2, [sp, #4]
 8018ff8:	2101      	movs	r1, #1
 8018ffa:	4620      	mov	r0, r4
 8018ffc:	f7f7 ff30 	bl	8010e60 <ucdr_deserialize_endian_uint16_t>
 8019000:	f995 3000 	ldrsb.w	r3, [r5]
 8019004:	2b00      	cmp	r3, #0
 8019006:	da01      	bge.n	801900c <uxr_deserialize_message_header+0x30>
 8019008:	b003      	add	sp, #12
 801900a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801900c:	2204      	movs	r2, #4
 801900e:	4639      	mov	r1, r7
 8019010:	4620      	mov	r0, r4
 8019012:	b003      	add	sp, #12
 8019014:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019018:	f7fd bab2 	b.w	8016580 <ucdr_deserialize_array_uint8_t>

0801901c <uxr_serialize_submessage_header>:
 801901c:	b530      	push	{r4, r5, lr}
 801901e:	4615      	mov	r5, r2
 8019020:	b083      	sub	sp, #12
 8019022:	4604      	mov	r4, r0
 8019024:	9301      	str	r3, [sp, #4]
 8019026:	f7f7 fd7b 	bl	8010b20 <ucdr_serialize_uint8_t>
 801902a:	4629      	mov	r1, r5
 801902c:	4620      	mov	r0, r4
 801902e:	f7f7 fd77 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019032:	9a01      	ldr	r2, [sp, #4]
 8019034:	2101      	movs	r1, #1
 8019036:	4620      	mov	r0, r4
 8019038:	b003      	add	sp, #12
 801903a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801903e:	f7f7 be1b 	b.w	8010c78 <ucdr_serialize_endian_uint16_t>
 8019042:	bf00      	nop

08019044 <uxr_deserialize_submessage_header>:
 8019044:	b530      	push	{r4, r5, lr}
 8019046:	4615      	mov	r5, r2
 8019048:	b083      	sub	sp, #12
 801904a:	4604      	mov	r4, r0
 801904c:	9301      	str	r3, [sp, #4]
 801904e:	f7f7 fd7d 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019052:	4629      	mov	r1, r5
 8019054:	4620      	mov	r0, r4
 8019056:	f7f7 fd79 	bl	8010b4c <ucdr_deserialize_uint8_t>
 801905a:	9a01      	ldr	r2, [sp, #4]
 801905c:	2101      	movs	r1, #1
 801905e:	4620      	mov	r0, r4
 8019060:	b003      	add	sp, #12
 8019062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019066:	f7f7 befb 	b.w	8010e60 <ucdr_deserialize_endian_uint16_t>
 801906a:	bf00      	nop

0801906c <uxr_serialize_CLIENT_Representation>:
 801906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019070:	2204      	movs	r2, #4
 8019072:	460e      	mov	r6, r1
 8019074:	4605      	mov	r5, r0
 8019076:	f7fd fa1f 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 801907a:	4607      	mov	r7, r0
 801907c:	2202      	movs	r2, #2
 801907e:	1d31      	adds	r1, r6, #4
 8019080:	4628      	mov	r0, r5
 8019082:	f7fd fa19 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019086:	4038      	ands	r0, r7
 8019088:	2202      	movs	r2, #2
 801908a:	1db1      	adds	r1, r6, #6
 801908c:	b2c7      	uxtb	r7, r0
 801908e:	4628      	mov	r0, r5
 8019090:	f7fd fa12 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019094:	2204      	movs	r2, #4
 8019096:	4007      	ands	r7, r0
 8019098:	f106 0108 	add.w	r1, r6, #8
 801909c:	4628      	mov	r0, r5
 801909e:	f7fd fa0b 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 80190a2:	4007      	ands	r7, r0
 80190a4:	7b31      	ldrb	r1, [r6, #12]
 80190a6:	4628      	mov	r0, r5
 80190a8:	f7f7 fd3a 	bl	8010b20 <ucdr_serialize_uint8_t>
 80190ac:	7b71      	ldrb	r1, [r6, #13]
 80190ae:	4007      	ands	r7, r0
 80190b0:	4628      	mov	r0, r5
 80190b2:	f7f7 fd07 	bl	8010ac4 <ucdr_serialize_bool>
 80190b6:	7b73      	ldrb	r3, [r6, #13]
 80190b8:	ea07 0800 	and.w	r8, r7, r0
 80190bc:	b93b      	cbnz	r3, 80190ce <uxr_serialize_CLIENT_Representation+0x62>
 80190be:	8bb1      	ldrh	r1, [r6, #28]
 80190c0:	4628      	mov	r0, r5
 80190c2:	f7f7 fd59 	bl	8010b78 <ucdr_serialize_uint16_t>
 80190c6:	ea08 0000 	and.w	r0, r8, r0
 80190ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190ce:	6931      	ldr	r1, [r6, #16]
 80190d0:	4628      	mov	r0, r5
 80190d2:	f7f7 ff3b 	bl	8010f4c <ucdr_serialize_uint32_t>
 80190d6:	6933      	ldr	r3, [r6, #16]
 80190d8:	b1e3      	cbz	r3, 8019114 <uxr_serialize_CLIENT_Representation+0xa8>
 80190da:	b1c0      	cbz	r0, 801910e <uxr_serialize_CLIENT_Representation+0xa2>
 80190dc:	4637      	mov	r7, r6
 80190de:	f04f 0900 	mov.w	r9, #0
 80190e2:	e000      	b.n	80190e6 <uxr_serialize_CLIENT_Representation+0x7a>
 80190e4:	b19c      	cbz	r4, 801910e <uxr_serialize_CLIENT_Representation+0xa2>
 80190e6:	6979      	ldr	r1, [r7, #20]
 80190e8:	4628      	mov	r0, r5
 80190ea:	f004 f91d 	bl	801d328 <ucdr_serialize_string>
 80190ee:	69b9      	ldr	r1, [r7, #24]
 80190f0:	4604      	mov	r4, r0
 80190f2:	4628      	mov	r0, r5
 80190f4:	f004 f918 	bl	801d328 <ucdr_serialize_string>
 80190f8:	f109 0901 	add.w	r9, r9, #1
 80190fc:	6933      	ldr	r3, [r6, #16]
 80190fe:	4004      	ands	r4, r0
 8019100:	3708      	adds	r7, #8
 8019102:	4599      	cmp	r9, r3
 8019104:	b2e4      	uxtb	r4, r4
 8019106:	d3ed      	bcc.n	80190e4 <uxr_serialize_CLIENT_Representation+0x78>
 8019108:	ea08 0804 	and.w	r8, r8, r4
 801910c:	e7d7      	b.n	80190be <uxr_serialize_CLIENT_Representation+0x52>
 801910e:	f04f 0800 	mov.w	r8, #0
 8019112:	e7d4      	b.n	80190be <uxr_serialize_CLIENT_Representation+0x52>
 8019114:	ea08 0800 	and.w	r8, r8, r0
 8019118:	e7d1      	b.n	80190be <uxr_serialize_CLIENT_Representation+0x52>
 801911a:	bf00      	nop

0801911c <uxr_deserialize_CLIENT_Representation>:
 801911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019120:	2204      	movs	r2, #4
 8019122:	460c      	mov	r4, r1
 8019124:	4605      	mov	r5, r0
 8019126:	f7fd fa2b 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 801912a:	4607      	mov	r7, r0
 801912c:	2202      	movs	r2, #2
 801912e:	1d21      	adds	r1, r4, #4
 8019130:	4628      	mov	r0, r5
 8019132:	f7fd fa25 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019136:	4038      	ands	r0, r7
 8019138:	2202      	movs	r2, #2
 801913a:	1da1      	adds	r1, r4, #6
 801913c:	b2c6      	uxtb	r6, r0
 801913e:	4628      	mov	r0, r5
 8019140:	f7fd fa1e 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019144:	2204      	movs	r2, #4
 8019146:	4006      	ands	r6, r0
 8019148:	f104 0108 	add.w	r1, r4, #8
 801914c:	4628      	mov	r0, r5
 801914e:	f7fd fa17 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019152:	4006      	ands	r6, r0
 8019154:	f104 010c 	add.w	r1, r4, #12
 8019158:	4628      	mov	r0, r5
 801915a:	f7f7 fcf7 	bl	8010b4c <ucdr_deserialize_uint8_t>
 801915e:	f104 010d 	add.w	r1, r4, #13
 8019162:	ea06 0700 	and.w	r7, r6, r0
 8019166:	4628      	mov	r0, r5
 8019168:	f7f7 fcc2 	bl	8010af0 <ucdr_deserialize_bool>
 801916c:	7b63      	ldrb	r3, [r4, #13]
 801916e:	4007      	ands	r7, r0
 8019170:	b93b      	cbnz	r3, 8019182 <uxr_deserialize_CLIENT_Representation+0x66>
 8019172:	f104 011c 	add.w	r1, r4, #28
 8019176:	4628      	mov	r0, r5
 8019178:	f7f7 fdfe 	bl	8010d78 <ucdr_deserialize_uint16_t>
 801917c:	4038      	ands	r0, r7
 801917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019182:	f104 0110 	add.w	r1, r4, #16
 8019186:	4628      	mov	r0, r5
 8019188:	f7f8 f810 	bl	80111ac <ucdr_deserialize_uint32_t>
 801918c:	6923      	ldr	r3, [r4, #16]
 801918e:	2b01      	cmp	r3, #1
 8019190:	d903      	bls.n	801919a <uxr_deserialize_CLIENT_Representation+0x7e>
 8019192:	2301      	movs	r3, #1
 8019194:	2700      	movs	r7, #0
 8019196:	75ab      	strb	r3, [r5, #22]
 8019198:	e7eb      	b.n	8019172 <uxr_deserialize_CLIENT_Representation+0x56>
 801919a:	b30b      	cbz	r3, 80191e0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801919c:	b1f0      	cbz	r0, 80191dc <uxr_deserialize_CLIENT_Representation+0xc0>
 801919e:	46a0      	mov	r8, r4
 80191a0:	f04f 0900 	mov.w	r9, #0
 80191a4:	e000      	b.n	80191a8 <uxr_deserialize_CLIENT_Representation+0x8c>
 80191a6:	b1ce      	cbz	r6, 80191dc <uxr_deserialize_CLIENT_Representation+0xc0>
 80191a8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80191ac:	f108 0808 	add.w	r8, r8, #8
 80191b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80191b4:	4628      	mov	r0, r5
 80191b6:	f004 f8c7 	bl	801d348 <ucdr_deserialize_string>
 80191ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80191be:	4606      	mov	r6, r0
 80191c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80191c4:	4628      	mov	r0, r5
 80191c6:	f109 0901 	add.w	r9, r9, #1
 80191ca:	f004 f8bd 	bl	801d348 <ucdr_deserialize_string>
 80191ce:	6923      	ldr	r3, [r4, #16]
 80191d0:	4006      	ands	r6, r0
 80191d2:	4599      	cmp	r9, r3
 80191d4:	b2f6      	uxtb	r6, r6
 80191d6:	d3e6      	bcc.n	80191a6 <uxr_deserialize_CLIENT_Representation+0x8a>
 80191d8:	4037      	ands	r7, r6
 80191da:	e7ca      	b.n	8019172 <uxr_deserialize_CLIENT_Representation+0x56>
 80191dc:	2700      	movs	r7, #0
 80191de:	e7c8      	b.n	8019172 <uxr_deserialize_CLIENT_Representation+0x56>
 80191e0:	4007      	ands	r7, r0
 80191e2:	e7c6      	b.n	8019172 <uxr_deserialize_CLIENT_Representation+0x56>

080191e4 <uxr_serialize_AGENT_Representation>:
 80191e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191e8:	2204      	movs	r2, #4
 80191ea:	460f      	mov	r7, r1
 80191ec:	4605      	mov	r5, r0
 80191ee:	f7fd f963 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 80191f2:	4604      	mov	r4, r0
 80191f4:	2202      	movs	r2, #2
 80191f6:	1d39      	adds	r1, r7, #4
 80191f8:	4628      	mov	r0, r5
 80191fa:	f7fd f95d 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 80191fe:	4020      	ands	r0, r4
 8019200:	2202      	movs	r2, #2
 8019202:	1db9      	adds	r1, r7, #6
 8019204:	b2c4      	uxtb	r4, r0
 8019206:	4628      	mov	r0, r5
 8019208:	f7fd f956 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 801920c:	7a39      	ldrb	r1, [r7, #8]
 801920e:	4004      	ands	r4, r0
 8019210:	4628      	mov	r0, r5
 8019212:	f7f7 fc57 	bl	8010ac4 <ucdr_serialize_bool>
 8019216:	7a3b      	ldrb	r3, [r7, #8]
 8019218:	ea00 0804 	and.w	r8, r0, r4
 801921c:	b913      	cbnz	r3, 8019224 <uxr_serialize_AGENT_Representation+0x40>
 801921e:	4640      	mov	r0, r8
 8019220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019224:	68f9      	ldr	r1, [r7, #12]
 8019226:	4628      	mov	r0, r5
 8019228:	f7f7 fe90 	bl	8010f4c <ucdr_serialize_uint32_t>
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	b303      	cbz	r3, 8019272 <uxr_serialize_AGENT_Representation+0x8e>
 8019230:	b1d0      	cbz	r0, 8019268 <uxr_serialize_AGENT_Representation+0x84>
 8019232:	463e      	mov	r6, r7
 8019234:	f04f 0900 	mov.w	r9, #0
 8019238:	e000      	b.n	801923c <uxr_serialize_AGENT_Representation+0x58>
 801923a:	b1ac      	cbz	r4, 8019268 <uxr_serialize_AGENT_Representation+0x84>
 801923c:	6931      	ldr	r1, [r6, #16]
 801923e:	4628      	mov	r0, r5
 8019240:	f004 f872 	bl	801d328 <ucdr_serialize_string>
 8019244:	6971      	ldr	r1, [r6, #20]
 8019246:	4604      	mov	r4, r0
 8019248:	4628      	mov	r0, r5
 801924a:	f004 f86d 	bl	801d328 <ucdr_serialize_string>
 801924e:	f109 0901 	add.w	r9, r9, #1
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	4004      	ands	r4, r0
 8019256:	3608      	adds	r6, #8
 8019258:	4599      	cmp	r9, r3
 801925a:	b2e4      	uxtb	r4, r4
 801925c:	d3ed      	bcc.n	801923a <uxr_serialize_AGENT_Representation+0x56>
 801925e:	ea08 0804 	and.w	r8, r8, r4
 8019262:	4640      	mov	r0, r8
 8019264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019268:	f04f 0800 	mov.w	r8, #0
 801926c:	4640      	mov	r0, r8
 801926e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019272:	ea08 0800 	and.w	r8, r8, r0
 8019276:	e7d2      	b.n	801921e <uxr_serialize_AGENT_Representation+0x3a>

08019278 <uxr_serialize_DATAWRITER_Representation>:
 8019278:	b570      	push	{r4, r5, r6, lr}
 801927a:	460d      	mov	r5, r1
 801927c:	7809      	ldrb	r1, [r1, #0]
 801927e:	4606      	mov	r6, r0
 8019280:	f7f7 fc4e 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019284:	4604      	mov	r4, r0
 8019286:	b130      	cbz	r0, 8019296 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019288:	782b      	ldrb	r3, [r5, #0]
 801928a:	2b02      	cmp	r3, #2
 801928c:	d00c      	beq.n	80192a8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801928e:	2b03      	cmp	r3, #3
 8019290:	d010      	beq.n	80192b4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8019292:	2b01      	cmp	r3, #1
 8019294:	d008      	beq.n	80192a8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019296:	2202      	movs	r2, #2
 8019298:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801929c:	4630      	mov	r0, r6
 801929e:	f7fd f90b 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 80192a2:	4020      	ands	r0, r4
 80192a4:	b2c0      	uxtb	r0, r0
 80192a6:	bd70      	pop	{r4, r5, r6, pc}
 80192a8:	6869      	ldr	r1, [r5, #4]
 80192aa:	4630      	mov	r0, r6
 80192ac:	f004 f83c 	bl	801d328 <ucdr_serialize_string>
 80192b0:	4604      	mov	r4, r0
 80192b2:	e7f0      	b.n	8019296 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80192b4:	4629      	mov	r1, r5
 80192b6:	4630      	mov	r0, r6
 80192b8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80192bc:	3104      	adds	r1, #4
 80192be:	f7f8 ffa7 	bl	8012210 <ucdr_serialize_sequence_uint8_t>
 80192c2:	4604      	mov	r4, r0
 80192c4:	e7e7      	b.n	8019296 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80192c6:	bf00      	nop

080192c8 <uxr_serialize_ObjectVariant.part.0>:
 80192c8:	b570      	push	{r4, r5, r6, lr}
 80192ca:	780b      	ldrb	r3, [r1, #0]
 80192cc:	460c      	mov	r4, r1
 80192ce:	4605      	mov	r5, r0
 80192d0:	3b01      	subs	r3, #1
 80192d2:	2b0d      	cmp	r3, #13
 80192d4:	d854      	bhi.n	8019380 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80192d6:	e8df f003 	tbb	[pc, r3]
 80192da:	0730      	.short	0x0730
 80192dc:	07071b1b 	.word	0x07071b1b
 80192e0:	0c530707 	.word	0x0c530707
 80192e4:	494e0c0c 	.word	0x494e0c0c
 80192e8:	3104      	adds	r1, #4
 80192ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192ee:	f7ff bfc3 	b.w	8019278 <uxr_serialize_DATAWRITER_Representation>
 80192f2:	7909      	ldrb	r1, [r1, #4]
 80192f4:	f7f7 fc14 	bl	8010b20 <ucdr_serialize_uint8_t>
 80192f8:	b1e8      	cbz	r0, 8019336 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80192fa:	7923      	ldrb	r3, [r4, #4]
 80192fc:	2b01      	cmp	r3, #1
 80192fe:	d001      	beq.n	8019304 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8019300:	2b02      	cmp	r3, #2
 8019302:	d13d      	bne.n	8019380 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019304:	68a1      	ldr	r1, [r4, #8]
 8019306:	4628      	mov	r0, r5
 8019308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801930c:	f004 b80c 	b.w	801d328 <ucdr_serialize_string>
 8019310:	7909      	ldrb	r1, [r1, #4]
 8019312:	f7f7 fc05 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019316:	4606      	mov	r6, r0
 8019318:	b120      	cbz	r0, 8019324 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801931a:	7923      	ldrb	r3, [r4, #4]
 801931c:	2b02      	cmp	r3, #2
 801931e:	d039      	beq.n	8019394 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8019320:	2b03      	cmp	r3, #3
 8019322:	d02f      	beq.n	8019384 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8019324:	2202      	movs	r2, #2
 8019326:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801932a:	4628      	mov	r0, r5
 801932c:	f7fd f8c4 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019330:	4030      	ands	r0, r6
 8019332:	b2c0      	uxtb	r0, r0
 8019334:	bd70      	pop	{r4, r5, r6, pc}
 8019336:	2000      	movs	r0, #0
 8019338:	bd70      	pop	{r4, r5, r6, pc}
 801933a:	7909      	ldrb	r1, [r1, #4]
 801933c:	f7f7 fbf0 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019340:	4606      	mov	r6, r0
 8019342:	b158      	cbz	r0, 801935c <uxr_serialize_ObjectVariant.part.0+0x94>
 8019344:	7923      	ldrb	r3, [r4, #4]
 8019346:	2b02      	cmp	r3, #2
 8019348:	d003      	beq.n	8019352 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801934a:	2b03      	cmp	r3, #3
 801934c:	d028      	beq.n	80193a0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801934e:	2b01      	cmp	r3, #1
 8019350:	d104      	bne.n	801935c <uxr_serialize_ObjectVariant.part.0+0x94>
 8019352:	68a1      	ldr	r1, [r4, #8]
 8019354:	4628      	mov	r0, r5
 8019356:	f003 ffe7 	bl	801d328 <ucdr_serialize_string>
 801935a:	4606      	mov	r6, r0
 801935c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8019360:	4628      	mov	r0, r5
 8019362:	f7f8 f919 	bl	8011598 <ucdr_serialize_int16_t>
 8019366:	4030      	ands	r0, r6
 8019368:	b2c0      	uxtb	r0, r0
 801936a:	bd70      	pop	{r4, r5, r6, pc}
 801936c:	3104      	adds	r1, #4
 801936e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019372:	f7ff be7b 	b.w	801906c <uxr_serialize_CLIENT_Representation>
 8019376:	3104      	adds	r1, #4
 8019378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801937c:	f7ff bf32 	b.w	80191e4 <uxr_serialize_AGENT_Representation>
 8019380:	2001      	movs	r0, #1
 8019382:	bd70      	pop	{r4, r5, r6, pc}
 8019384:	68a2      	ldr	r2, [r4, #8]
 8019386:	f104 010c 	add.w	r1, r4, #12
 801938a:	4628      	mov	r0, r5
 801938c:	f7f8 ff40 	bl	8012210 <ucdr_serialize_sequence_uint8_t>
 8019390:	4606      	mov	r6, r0
 8019392:	e7c7      	b.n	8019324 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019394:	68a1      	ldr	r1, [r4, #8]
 8019396:	4628      	mov	r0, r5
 8019398:	f003 ffc6 	bl	801d328 <ucdr_serialize_string>
 801939c:	4606      	mov	r6, r0
 801939e:	e7c1      	b.n	8019324 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80193a0:	68a2      	ldr	r2, [r4, #8]
 80193a2:	f104 010c 	add.w	r1, r4, #12
 80193a6:	4628      	mov	r0, r5
 80193a8:	f7f8 ff32 	bl	8012210 <ucdr_serialize_sequence_uint8_t>
 80193ac:	4606      	mov	r6, r0
 80193ae:	e7d5      	b.n	801935c <uxr_serialize_ObjectVariant.part.0+0x94>

080193b0 <uxr_deserialize_DATAWRITER_Representation>:
 80193b0:	b570      	push	{r4, r5, r6, lr}
 80193b2:	4606      	mov	r6, r0
 80193b4:	460d      	mov	r5, r1
 80193b6:	f7f7 fbc9 	bl	8010b4c <ucdr_deserialize_uint8_t>
 80193ba:	4604      	mov	r4, r0
 80193bc:	b130      	cbz	r0, 80193cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80193be:	782b      	ldrb	r3, [r5, #0]
 80193c0:	2b02      	cmp	r3, #2
 80193c2:	d00c      	beq.n	80193de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80193c4:	2b03      	cmp	r3, #3
 80193c6:	d012      	beq.n	80193ee <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80193c8:	2b01      	cmp	r3, #1
 80193ca:	d008      	beq.n	80193de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80193cc:	2202      	movs	r2, #2
 80193ce:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80193d2:	4630      	mov	r0, r6
 80193d4:	f7fd f8d4 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 80193d8:	4020      	ands	r0, r4
 80193da:	b2c0      	uxtb	r0, r0
 80193dc:	bd70      	pop	{r4, r5, r6, pc}
 80193de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80193e2:	6869      	ldr	r1, [r5, #4]
 80193e4:	4630      	mov	r0, r6
 80193e6:	f003 ffaf 	bl	801d348 <ucdr_deserialize_string>
 80193ea:	4604      	mov	r4, r0
 80193ec:	e7ee      	b.n	80193cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80193ee:	1d2b      	adds	r3, r5, #4
 80193f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80193f4:	f105 0108 	add.w	r1, r5, #8
 80193f8:	4630      	mov	r0, r6
 80193fa:	f7f8 ff1b 	bl	8012234 <ucdr_deserialize_sequence_uint8_t>
 80193fe:	4604      	mov	r4, r0
 8019400:	e7e4      	b.n	80193cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019402:	bf00      	nop

08019404 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8019404:	b570      	push	{r4, r5, r6, lr}
 8019406:	460d      	mov	r5, r1
 8019408:	7809      	ldrb	r1, [r1, #0]
 801940a:	4606      	mov	r6, r0
 801940c:	f7f7 fb5a 	bl	8010ac4 <ucdr_serialize_bool>
 8019410:	782b      	ldrb	r3, [r5, #0]
 8019412:	4604      	mov	r4, r0
 8019414:	b94b      	cbnz	r3, 801942a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8019416:	7a29      	ldrb	r1, [r5, #8]
 8019418:	4630      	mov	r0, r6
 801941a:	f7f7 fb53 	bl	8010ac4 <ucdr_serialize_bool>
 801941e:	7a2b      	ldrb	r3, [r5, #8]
 8019420:	4004      	ands	r4, r0
 8019422:	b2e4      	uxtb	r4, r4
 8019424:	b943      	cbnz	r3, 8019438 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8019426:	4620      	mov	r0, r4
 8019428:	bd70      	pop	{r4, r5, r6, pc}
 801942a:	6869      	ldr	r1, [r5, #4]
 801942c:	4630      	mov	r0, r6
 801942e:	f003 ff7b 	bl	801d328 <ucdr_serialize_string>
 8019432:	4004      	ands	r4, r0
 8019434:	b2e4      	uxtb	r4, r4
 8019436:	e7ee      	b.n	8019416 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8019438:	68e9      	ldr	r1, [r5, #12]
 801943a:	4630      	mov	r0, r6
 801943c:	f003 ff74 	bl	801d328 <ucdr_serialize_string>
 8019440:	4004      	ands	r4, r0
 8019442:	4620      	mov	r0, r4
 8019444:	bd70      	pop	{r4, r5, r6, pc}
 8019446:	bf00      	nop

08019448 <uxr_serialize_OBJK_Topic_Binary>:
 8019448:	b570      	push	{r4, r5, r6, lr}
 801944a:	460d      	mov	r5, r1
 801944c:	4606      	mov	r6, r0
 801944e:	6809      	ldr	r1, [r1, #0]
 8019450:	f003 ff6a 	bl	801d328 <ucdr_serialize_string>
 8019454:	4604      	mov	r4, r0
 8019456:	7929      	ldrb	r1, [r5, #4]
 8019458:	4630      	mov	r0, r6
 801945a:	f7f7 fb33 	bl	8010ac4 <ucdr_serialize_bool>
 801945e:	792b      	ldrb	r3, [r5, #4]
 8019460:	4004      	ands	r4, r0
 8019462:	b2e4      	uxtb	r4, r4
 8019464:	b943      	cbnz	r3, 8019478 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019466:	7b29      	ldrb	r1, [r5, #12]
 8019468:	4630      	mov	r0, r6
 801946a:	f7f7 fb2b 	bl	8010ac4 <ucdr_serialize_bool>
 801946e:	7b2b      	ldrb	r3, [r5, #12]
 8019470:	4004      	ands	r4, r0
 8019472:	b93b      	cbnz	r3, 8019484 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019474:	4620      	mov	r0, r4
 8019476:	bd70      	pop	{r4, r5, r6, pc}
 8019478:	68a9      	ldr	r1, [r5, #8]
 801947a:	4630      	mov	r0, r6
 801947c:	f003 ff54 	bl	801d328 <ucdr_serialize_string>
 8019480:	4004      	ands	r4, r0
 8019482:	e7f0      	b.n	8019466 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019484:	6929      	ldr	r1, [r5, #16]
 8019486:	4630      	mov	r0, r6
 8019488:	f003 ff4e 	bl	801d328 <ucdr_serialize_string>
 801948c:	4004      	ands	r4, r0
 801948e:	b2e4      	uxtb	r4, r4
 8019490:	4620      	mov	r0, r4
 8019492:	bd70      	pop	{r4, r5, r6, pc}

08019494 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019498:	460c      	mov	r4, r1
 801949a:	7809      	ldrb	r1, [r1, #0]
 801949c:	4606      	mov	r6, r0
 801949e:	f7f7 fb11 	bl	8010ac4 <ucdr_serialize_bool>
 80194a2:	7823      	ldrb	r3, [r4, #0]
 80194a4:	4605      	mov	r5, r0
 80194a6:	b96b      	cbnz	r3, 80194c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80194a8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80194ac:	4630      	mov	r0, r6
 80194ae:	f7f7 fb09 	bl	8010ac4 <ucdr_serialize_bool>
 80194b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80194b6:	4005      	ands	r5, r0
 80194b8:	b2ed      	uxtb	r5, r5
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d169      	bne.n	8019592 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80194be:	4628      	mov	r0, r5
 80194c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c4:	6861      	ldr	r1, [r4, #4]
 80194c6:	4630      	mov	r0, r6
 80194c8:	f7f7 fd40 	bl	8010f4c <ucdr_serialize_uint32_t>
 80194cc:	6863      	ldr	r3, [r4, #4]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d06b      	beq.n	80195aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80194d2:	2800      	cmp	r0, #0
 80194d4:	d067      	beq.n	80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80194d6:	68a1      	ldr	r1, [r4, #8]
 80194d8:	4630      	mov	r0, r6
 80194da:	f003 ff25 	bl	801d328 <ucdr_serialize_string>
 80194de:	6863      	ldr	r3, [r4, #4]
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	d953      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80194e4:	2800      	cmp	r0, #0
 80194e6:	d05e      	beq.n	80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80194e8:	68e1      	ldr	r1, [r4, #12]
 80194ea:	4630      	mov	r0, r6
 80194ec:	f003 ff1c 	bl	801d328 <ucdr_serialize_string>
 80194f0:	6863      	ldr	r3, [r4, #4]
 80194f2:	2b02      	cmp	r3, #2
 80194f4:	d94a      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80194f6:	2800      	cmp	r0, #0
 80194f8:	d055      	beq.n	80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80194fa:	6921      	ldr	r1, [r4, #16]
 80194fc:	4630      	mov	r0, r6
 80194fe:	f003 ff13 	bl	801d328 <ucdr_serialize_string>
 8019502:	6863      	ldr	r3, [r4, #4]
 8019504:	2b03      	cmp	r3, #3
 8019506:	d941      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019508:	2800      	cmp	r0, #0
 801950a:	d04c      	beq.n	80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801950c:	6961      	ldr	r1, [r4, #20]
 801950e:	4630      	mov	r0, r6
 8019510:	f003 ff0a 	bl	801d328 <ucdr_serialize_string>
 8019514:	6863      	ldr	r3, [r4, #4]
 8019516:	2b04      	cmp	r3, #4
 8019518:	d938      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801951a:	2800      	cmp	r0, #0
 801951c:	d043      	beq.n	80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801951e:	69a1      	ldr	r1, [r4, #24]
 8019520:	4630      	mov	r0, r6
 8019522:	f003 ff01 	bl	801d328 <ucdr_serialize_string>
 8019526:	6863      	ldr	r3, [r4, #4]
 8019528:	2b05      	cmp	r3, #5
 801952a:	d92f      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801952c:	2800      	cmp	r0, #0
 801952e:	d03a      	beq.n	80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019530:	69e1      	ldr	r1, [r4, #28]
 8019532:	4630      	mov	r0, r6
 8019534:	f003 fef8 	bl	801d328 <ucdr_serialize_string>
 8019538:	6863      	ldr	r3, [r4, #4]
 801953a:	2b06      	cmp	r3, #6
 801953c:	d926      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801953e:	b390      	cbz	r0, 80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019540:	6a21      	ldr	r1, [r4, #32]
 8019542:	4630      	mov	r0, r6
 8019544:	f003 fef0 	bl	801d328 <ucdr_serialize_string>
 8019548:	6863      	ldr	r3, [r4, #4]
 801954a:	2b07      	cmp	r3, #7
 801954c:	d91e      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801954e:	b350      	cbz	r0, 80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019550:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019552:	4630      	mov	r0, r6
 8019554:	f003 fee8 	bl	801d328 <ucdr_serialize_string>
 8019558:	6863      	ldr	r3, [r4, #4]
 801955a:	2b08      	cmp	r3, #8
 801955c:	d916      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801955e:	b310      	cbz	r0, 80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019560:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019562:	4630      	mov	r0, r6
 8019564:	f003 fee0 	bl	801d328 <ucdr_serialize_string>
 8019568:	6863      	ldr	r3, [r4, #4]
 801956a:	2b09      	cmp	r3, #9
 801956c:	d90e      	bls.n	801958c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801956e:	b1d0      	cbz	r0, 80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019570:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8019574:	2709      	movs	r7, #9
 8019576:	e000      	b.n	801957a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8019578:	b1a8      	cbz	r0, 80195a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801957a:	f858 1b04 	ldr.w	r1, [r8], #4
 801957e:	4630      	mov	r0, r6
 8019580:	f003 fed2 	bl	801d328 <ucdr_serialize_string>
 8019584:	3701      	adds	r7, #1
 8019586:	6862      	ldr	r2, [r4, #4]
 8019588:	4297      	cmp	r7, r2
 801958a:	d3f5      	bcc.n	8019578 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801958c:	4005      	ands	r5, r0
 801958e:	b2ed      	uxtb	r5, r5
 8019590:	e78a      	b.n	80194a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019594:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019598:	4630      	mov	r0, r6
 801959a:	f7f8 fe39 	bl	8012210 <ucdr_serialize_sequence_uint8_t>
 801959e:	4005      	ands	r5, r0
 80195a0:	4628      	mov	r0, r5
 80195a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195a6:	2500      	movs	r5, #0
 80195a8:	e77e      	b.n	80194a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80195aa:	4028      	ands	r0, r5
 80195ac:	b2c5      	uxtb	r5, r0
 80195ae:	e77b      	b.n	80194a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080195b0 <uxr_serialize_OBJK_Publisher_Binary>:
 80195b0:	b570      	push	{r4, r5, r6, lr}
 80195b2:	460d      	mov	r5, r1
 80195b4:	7809      	ldrb	r1, [r1, #0]
 80195b6:	4606      	mov	r6, r0
 80195b8:	f7f7 fa84 	bl	8010ac4 <ucdr_serialize_bool>
 80195bc:	782b      	ldrb	r3, [r5, #0]
 80195be:	4604      	mov	r4, r0
 80195c0:	b94b      	cbnz	r3, 80195d6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80195c2:	7a29      	ldrb	r1, [r5, #8]
 80195c4:	4630      	mov	r0, r6
 80195c6:	f7f7 fa7d 	bl	8010ac4 <ucdr_serialize_bool>
 80195ca:	7a2b      	ldrb	r3, [r5, #8]
 80195cc:	4004      	ands	r4, r0
 80195ce:	b2e4      	uxtb	r4, r4
 80195d0:	b943      	cbnz	r3, 80195e4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80195d2:	4620      	mov	r0, r4
 80195d4:	bd70      	pop	{r4, r5, r6, pc}
 80195d6:	6869      	ldr	r1, [r5, #4]
 80195d8:	4630      	mov	r0, r6
 80195da:	f003 fea5 	bl	801d328 <ucdr_serialize_string>
 80195de:	4004      	ands	r4, r0
 80195e0:	b2e4      	uxtb	r4, r4
 80195e2:	e7ee      	b.n	80195c2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80195e4:	f105 010c 	add.w	r1, r5, #12
 80195e8:	4630      	mov	r0, r6
 80195ea:	f7ff ff53 	bl	8019494 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80195ee:	4004      	ands	r4, r0
 80195f0:	4620      	mov	r0, r4
 80195f2:	bd70      	pop	{r4, r5, r6, pc}

080195f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80195f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195f8:	460c      	mov	r4, r1
 80195fa:	7809      	ldrb	r1, [r1, #0]
 80195fc:	4606      	mov	r6, r0
 80195fe:	f7f7 fa61 	bl	8010ac4 <ucdr_serialize_bool>
 8019602:	7823      	ldrb	r3, [r4, #0]
 8019604:	4605      	mov	r5, r0
 8019606:	b96b      	cbnz	r3, 8019624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8019608:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801960c:	4630      	mov	r0, r6
 801960e:	f7f7 fa59 	bl	8010ac4 <ucdr_serialize_bool>
 8019612:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019616:	4005      	ands	r5, r0
 8019618:	b2ed      	uxtb	r5, r5
 801961a:	2b00      	cmp	r3, #0
 801961c:	d169      	bne.n	80196f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801961e:	4628      	mov	r0, r5
 8019620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019624:	6861      	ldr	r1, [r4, #4]
 8019626:	4630      	mov	r0, r6
 8019628:	f7f7 fc90 	bl	8010f4c <ucdr_serialize_uint32_t>
 801962c:	6863      	ldr	r3, [r4, #4]
 801962e:	2b00      	cmp	r3, #0
 8019630:	d06b      	beq.n	801970a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8019632:	2800      	cmp	r0, #0
 8019634:	d067      	beq.n	8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019636:	68a1      	ldr	r1, [r4, #8]
 8019638:	4630      	mov	r0, r6
 801963a:	f003 fe75 	bl	801d328 <ucdr_serialize_string>
 801963e:	6863      	ldr	r3, [r4, #4]
 8019640:	2b01      	cmp	r3, #1
 8019642:	d953      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019644:	2800      	cmp	r0, #0
 8019646:	d05e      	beq.n	8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019648:	68e1      	ldr	r1, [r4, #12]
 801964a:	4630      	mov	r0, r6
 801964c:	f003 fe6c 	bl	801d328 <ucdr_serialize_string>
 8019650:	6863      	ldr	r3, [r4, #4]
 8019652:	2b02      	cmp	r3, #2
 8019654:	d94a      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019656:	2800      	cmp	r0, #0
 8019658:	d055      	beq.n	8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801965a:	6921      	ldr	r1, [r4, #16]
 801965c:	4630      	mov	r0, r6
 801965e:	f003 fe63 	bl	801d328 <ucdr_serialize_string>
 8019662:	6863      	ldr	r3, [r4, #4]
 8019664:	2b03      	cmp	r3, #3
 8019666:	d941      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019668:	2800      	cmp	r0, #0
 801966a:	d04c      	beq.n	8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801966c:	6961      	ldr	r1, [r4, #20]
 801966e:	4630      	mov	r0, r6
 8019670:	f003 fe5a 	bl	801d328 <ucdr_serialize_string>
 8019674:	6863      	ldr	r3, [r4, #4]
 8019676:	2b04      	cmp	r3, #4
 8019678:	d938      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801967a:	2800      	cmp	r0, #0
 801967c:	d043      	beq.n	8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801967e:	69a1      	ldr	r1, [r4, #24]
 8019680:	4630      	mov	r0, r6
 8019682:	f003 fe51 	bl	801d328 <ucdr_serialize_string>
 8019686:	6863      	ldr	r3, [r4, #4]
 8019688:	2b05      	cmp	r3, #5
 801968a:	d92f      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801968c:	2800      	cmp	r0, #0
 801968e:	d03a      	beq.n	8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019690:	69e1      	ldr	r1, [r4, #28]
 8019692:	4630      	mov	r0, r6
 8019694:	f003 fe48 	bl	801d328 <ucdr_serialize_string>
 8019698:	6863      	ldr	r3, [r4, #4]
 801969a:	2b06      	cmp	r3, #6
 801969c:	d926      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801969e:	b390      	cbz	r0, 8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80196a0:	6a21      	ldr	r1, [r4, #32]
 80196a2:	4630      	mov	r0, r6
 80196a4:	f003 fe40 	bl	801d328 <ucdr_serialize_string>
 80196a8:	6863      	ldr	r3, [r4, #4]
 80196aa:	2b07      	cmp	r3, #7
 80196ac:	d91e      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80196ae:	b350      	cbz	r0, 8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80196b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80196b2:	4630      	mov	r0, r6
 80196b4:	f003 fe38 	bl	801d328 <ucdr_serialize_string>
 80196b8:	6863      	ldr	r3, [r4, #4]
 80196ba:	2b08      	cmp	r3, #8
 80196bc:	d916      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80196be:	b310      	cbz	r0, 8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80196c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80196c2:	4630      	mov	r0, r6
 80196c4:	f003 fe30 	bl	801d328 <ucdr_serialize_string>
 80196c8:	6863      	ldr	r3, [r4, #4]
 80196ca:	2b09      	cmp	r3, #9
 80196cc:	d90e      	bls.n	80196ec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80196ce:	b1d0      	cbz	r0, 8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80196d0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80196d4:	2709      	movs	r7, #9
 80196d6:	e000      	b.n	80196da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80196d8:	b1a8      	cbz	r0, 8019706 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80196da:	f858 1b04 	ldr.w	r1, [r8], #4
 80196de:	4630      	mov	r0, r6
 80196e0:	f003 fe22 	bl	801d328 <ucdr_serialize_string>
 80196e4:	3701      	adds	r7, #1
 80196e6:	6862      	ldr	r2, [r4, #4]
 80196e8:	4297      	cmp	r7, r2
 80196ea:	d3f5      	bcc.n	80196d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80196ec:	4005      	ands	r5, r0
 80196ee:	b2ed      	uxtb	r5, r5
 80196f0:	e78a      	b.n	8019608 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80196f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80196f4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80196f8:	4630      	mov	r0, r6
 80196fa:	f7f8 fd89 	bl	8012210 <ucdr_serialize_sequence_uint8_t>
 80196fe:	4005      	ands	r5, r0
 8019700:	4628      	mov	r0, r5
 8019702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019706:	2500      	movs	r5, #0
 8019708:	e77e      	b.n	8019608 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801970a:	4028      	ands	r0, r5
 801970c:	b2c5      	uxtb	r5, r0
 801970e:	e77b      	b.n	8019608 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08019710 <uxr_serialize_OBJK_Subscriber_Binary>:
 8019710:	b570      	push	{r4, r5, r6, lr}
 8019712:	460d      	mov	r5, r1
 8019714:	7809      	ldrb	r1, [r1, #0]
 8019716:	4606      	mov	r6, r0
 8019718:	f7f7 f9d4 	bl	8010ac4 <ucdr_serialize_bool>
 801971c:	782b      	ldrb	r3, [r5, #0]
 801971e:	4604      	mov	r4, r0
 8019720:	b94b      	cbnz	r3, 8019736 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8019722:	7a29      	ldrb	r1, [r5, #8]
 8019724:	4630      	mov	r0, r6
 8019726:	f7f7 f9cd 	bl	8010ac4 <ucdr_serialize_bool>
 801972a:	7a2b      	ldrb	r3, [r5, #8]
 801972c:	4004      	ands	r4, r0
 801972e:	b2e4      	uxtb	r4, r4
 8019730:	b943      	cbnz	r3, 8019744 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8019732:	4620      	mov	r0, r4
 8019734:	bd70      	pop	{r4, r5, r6, pc}
 8019736:	6869      	ldr	r1, [r5, #4]
 8019738:	4630      	mov	r0, r6
 801973a:	f003 fdf5 	bl	801d328 <ucdr_serialize_string>
 801973e:	4004      	ands	r4, r0
 8019740:	b2e4      	uxtb	r4, r4
 8019742:	e7ee      	b.n	8019722 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8019744:	f105 010c 	add.w	r1, r5, #12
 8019748:	4630      	mov	r0, r6
 801974a:	f7ff ff53 	bl	80195f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801974e:	4004      	ands	r4, r0
 8019750:	4620      	mov	r0, r4
 8019752:	bd70      	pop	{r4, r5, r6, pc}

08019754 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8019754:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8019758:	4688      	mov	r8, r1
 801975a:	4681      	mov	r9, r0
 801975c:	8809      	ldrh	r1, [r1, #0]
 801975e:	f7f7 fa0b 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019762:	4606      	mov	r6, r0
 8019764:	f898 1002 	ldrb.w	r1, [r8, #2]
 8019768:	4648      	mov	r0, r9
 801976a:	f7f7 f9ab 	bl	8010ac4 <ucdr_serialize_bool>
 801976e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019772:	4006      	ands	r6, r0
 8019774:	b2f5      	uxtb	r5, r6
 8019776:	b9eb      	cbnz	r3, 80197b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8019778:	f898 1006 	ldrb.w	r1, [r8, #6]
 801977c:	4648      	mov	r0, r9
 801977e:	f7f7 f9a1 	bl	8010ac4 <ucdr_serialize_bool>
 8019782:	f898 3006 	ldrb.w	r3, [r8, #6]
 8019786:	4005      	ands	r5, r0
 8019788:	bb7b      	cbnz	r3, 80197ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801978a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801978e:	4648      	mov	r0, r9
 8019790:	f7f7 f998 	bl	8010ac4 <ucdr_serialize_bool>
 8019794:	f898 300c 	ldrb.w	r3, [r8, #12]
 8019798:	4005      	ands	r5, r0
 801979a:	b9f3      	cbnz	r3, 80197da <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801979c:	f898 1014 	ldrb.w	r1, [r8, #20]
 80197a0:	4648      	mov	r0, r9
 80197a2:	f7f7 f98f 	bl	8010ac4 <ucdr_serialize_bool>
 80197a6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80197aa:	4005      	ands	r5, r0
 80197ac:	b94b      	cbnz	r3, 80197c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80197ae:	4628      	mov	r0, r5
 80197b0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80197b4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80197b8:	4648      	mov	r0, r9
 80197ba:	f7f7 f9dd 	bl	8010b78 <ucdr_serialize_uint16_t>
 80197be:	4005      	ands	r5, r0
 80197c0:	e7da      	b.n	8019778 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80197c2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80197c6:	f108 011c 	add.w	r1, r8, #28
 80197ca:	4648      	mov	r0, r9
 80197cc:	f7f8 fd20 	bl	8012210 <ucdr_serialize_sequence_uint8_t>
 80197d0:	4028      	ands	r0, r5
 80197d2:	b2c5      	uxtb	r5, r0
 80197d4:	4628      	mov	r0, r5
 80197d6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80197da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80197de:	4648      	mov	r0, r9
 80197e0:	f7f7 fbb4 	bl	8010f4c <ucdr_serialize_uint32_t>
 80197e4:	4028      	ands	r0, r5
 80197e6:	b2c5      	uxtb	r5, r0
 80197e8:	e7d8      	b.n	801979c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80197ea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80197ee:	4648      	mov	r0, r9
 80197f0:	f7f7 fbac 	bl	8010f4c <ucdr_serialize_uint32_t>
 80197f4:	4028      	ands	r0, r5
 80197f6:	b2c5      	uxtb	r5, r0
 80197f8:	e7c7      	b.n	801978a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80197fa:	bf00      	nop

080197fc <uxr_serialize_OBJK_DataReader_Binary>:
 80197fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197fe:	2202      	movs	r2, #2
 8019800:	460c      	mov	r4, r1
 8019802:	4606      	mov	r6, r0
 8019804:	f7fc fe58 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019808:	4605      	mov	r5, r0
 801980a:	78a1      	ldrb	r1, [r4, #2]
 801980c:	4630      	mov	r0, r6
 801980e:	f7f7 f959 	bl	8010ac4 <ucdr_serialize_bool>
 8019812:	78a3      	ldrb	r3, [r4, #2]
 8019814:	4005      	ands	r5, r0
 8019816:	b2ed      	uxtb	r5, r5
 8019818:	b90b      	cbnz	r3, 801981e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801981a:	4628      	mov	r0, r5
 801981c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801981e:	f104 0108 	add.w	r1, r4, #8
 8019822:	4630      	mov	r0, r6
 8019824:	f7ff ff96 	bl	8019754 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8019828:	4607      	mov	r7, r0
 801982a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801982e:	4630      	mov	r0, r6
 8019830:	f7f7 f948 	bl	8010ac4 <ucdr_serialize_bool>
 8019834:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019838:	4038      	ands	r0, r7
 801983a:	b2c7      	uxtb	r7, r0
 801983c:	b95b      	cbnz	r3, 8019856 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801983e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8019842:	4630      	mov	r0, r6
 8019844:	f7f7 f93e 	bl	8010ac4 <ucdr_serialize_bool>
 8019848:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801984c:	4007      	ands	r7, r0
 801984e:	b94b      	cbnz	r3, 8019864 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8019850:	403d      	ands	r5, r7
 8019852:	4628      	mov	r0, r5
 8019854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019856:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801985a:	4630      	mov	r0, r6
 801985c:	f7f7 fdcc 	bl	80113f8 <ucdr_serialize_uint64_t>
 8019860:	4007      	ands	r7, r0
 8019862:	e7ec      	b.n	801983e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8019864:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019866:	4630      	mov	r0, r6
 8019868:	f003 fd5e 	bl	801d328 <ucdr_serialize_string>
 801986c:	4007      	ands	r7, r0
 801986e:	b2ff      	uxtb	r7, r7
 8019870:	e7ee      	b.n	8019850 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8019872:	bf00      	nop

08019874 <uxr_serialize_OBJK_DataWriter_Binary>:
 8019874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019876:	2202      	movs	r2, #2
 8019878:	460d      	mov	r5, r1
 801987a:	4606      	mov	r6, r0
 801987c:	f7fc fe1c 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019880:	4604      	mov	r4, r0
 8019882:	78a9      	ldrb	r1, [r5, #2]
 8019884:	4630      	mov	r0, r6
 8019886:	f7f7 f91d 	bl	8010ac4 <ucdr_serialize_bool>
 801988a:	78ab      	ldrb	r3, [r5, #2]
 801988c:	4004      	ands	r4, r0
 801988e:	b2e4      	uxtb	r4, r4
 8019890:	b90b      	cbnz	r3, 8019896 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8019892:	4620      	mov	r0, r4
 8019894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019896:	f105 0108 	add.w	r1, r5, #8
 801989a:	4630      	mov	r0, r6
 801989c:	f7ff ff5a 	bl	8019754 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80198a0:	4607      	mov	r7, r0
 80198a2:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80198a6:	4630      	mov	r0, r6
 80198a8:	f7f7 f90c 	bl	8010ac4 <ucdr_serialize_bool>
 80198ac:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80198b0:	4038      	ands	r0, r7
 80198b2:	b2c7      	uxtb	r7, r0
 80198b4:	b913      	cbnz	r3, 80198bc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80198b6:	403c      	ands	r4, r7
 80198b8:	4620      	mov	r0, r4
 80198ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198bc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80198c0:	4630      	mov	r0, r6
 80198c2:	f7f7 fd99 	bl	80113f8 <ucdr_serialize_uint64_t>
 80198c6:	4007      	ands	r7, r0
 80198c8:	e7f5      	b.n	80198b6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80198ca:	bf00      	nop

080198cc <uxr_serialize_OBJK_Replier_Binary>:
 80198cc:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80198d0:	460f      	mov	r7, r1
 80198d2:	4680      	mov	r8, r0
 80198d4:	6809      	ldr	r1, [r1, #0]
 80198d6:	f003 fd27 	bl	801d328 <ucdr_serialize_string>
 80198da:	4605      	mov	r5, r0
 80198dc:	6879      	ldr	r1, [r7, #4]
 80198de:	4640      	mov	r0, r8
 80198e0:	f003 fd22 	bl	801d328 <ucdr_serialize_string>
 80198e4:	4005      	ands	r5, r0
 80198e6:	68b9      	ldr	r1, [r7, #8]
 80198e8:	4640      	mov	r0, r8
 80198ea:	b2ec      	uxtb	r4, r5
 80198ec:	f003 fd1c 	bl	801d328 <ucdr_serialize_string>
 80198f0:	7b39      	ldrb	r1, [r7, #12]
 80198f2:	4004      	ands	r4, r0
 80198f4:	4640      	mov	r0, r8
 80198f6:	f7f7 f8e5 	bl	8010ac4 <ucdr_serialize_bool>
 80198fa:	7b3b      	ldrb	r3, [r7, #12]
 80198fc:	4004      	ands	r4, r0
 80198fe:	b94b      	cbnz	r3, 8019914 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8019900:	7d39      	ldrb	r1, [r7, #20]
 8019902:	4640      	mov	r0, r8
 8019904:	f7f7 f8de 	bl	8010ac4 <ucdr_serialize_bool>
 8019908:	7d3b      	ldrb	r3, [r7, #20]
 801990a:	4004      	ands	r4, r0
 801990c:	b943      	cbnz	r3, 8019920 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801990e:	4620      	mov	r0, r4
 8019910:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8019914:	6939      	ldr	r1, [r7, #16]
 8019916:	4640      	mov	r0, r8
 8019918:	f003 fd06 	bl	801d328 <ucdr_serialize_string>
 801991c:	4004      	ands	r4, r0
 801991e:	e7ef      	b.n	8019900 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8019920:	69b9      	ldr	r1, [r7, #24]
 8019922:	4640      	mov	r0, r8
 8019924:	f003 fd00 	bl	801d328 <ucdr_serialize_string>
 8019928:	4004      	ands	r4, r0
 801992a:	b2e4      	uxtb	r4, r4
 801992c:	4620      	mov	r0, r4
 801992e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8019932:	bf00      	nop

08019934 <uxr_deserialize_ObjectVariant>:
 8019934:	b570      	push	{r4, r5, r6, lr}
 8019936:	4605      	mov	r5, r0
 8019938:	460e      	mov	r6, r1
 801993a:	f7f7 f907 	bl	8010b4c <ucdr_deserialize_uint8_t>
 801993e:	b168      	cbz	r0, 801995c <uxr_deserialize_ObjectVariant+0x28>
 8019940:	7833      	ldrb	r3, [r6, #0]
 8019942:	4604      	mov	r4, r0
 8019944:	3b01      	subs	r3, #1
 8019946:	2b0d      	cmp	r3, #13
 8019948:	d809      	bhi.n	801995e <uxr_deserialize_ObjectVariant+0x2a>
 801994a:	e8df f003 	tbb	[pc, r3]
 801994e:	0a41      	.short	0x0a41
 8019950:	0a0a2323 	.word	0x0a0a2323
 8019954:	10080a0a 	.word	0x10080a0a
 8019958:	565c1010 	.word	0x565c1010
 801995c:	2400      	movs	r4, #0
 801995e:	4620      	mov	r0, r4
 8019960:	bd70      	pop	{r4, r5, r6, pc}
 8019962:	1d31      	adds	r1, r6, #4
 8019964:	4628      	mov	r0, r5
 8019966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801996a:	f7ff bd21 	b.w	80193b0 <uxr_deserialize_DATAWRITER_Representation>
 801996e:	1d31      	adds	r1, r6, #4
 8019970:	4628      	mov	r0, r5
 8019972:	f7f7 f8eb 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019976:	2800      	cmp	r0, #0
 8019978:	d0f0      	beq.n	801995c <uxr_deserialize_ObjectVariant+0x28>
 801997a:	7933      	ldrb	r3, [r6, #4]
 801997c:	2b01      	cmp	r3, #1
 801997e:	d001      	beq.n	8019984 <uxr_deserialize_ObjectVariant+0x50>
 8019980:	2b02      	cmp	r3, #2
 8019982:	d1ec      	bne.n	801995e <uxr_deserialize_ObjectVariant+0x2a>
 8019984:	68b1      	ldr	r1, [r6, #8]
 8019986:	4628      	mov	r0, r5
 8019988:	f44f 7200 	mov.w	r2, #512	; 0x200
 801998c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019990:	f003 bcda 	b.w	801d348 <ucdr_deserialize_string>
 8019994:	1d31      	adds	r1, r6, #4
 8019996:	4628      	mov	r0, r5
 8019998:	f7f7 f8d8 	bl	8010b4c <ucdr_deserialize_uint8_t>
 801999c:	4604      	mov	r4, r0
 801999e:	b170      	cbz	r0, 80199be <uxr_deserialize_ObjectVariant+0x8a>
 80199a0:	7933      	ldrb	r3, [r6, #4]
 80199a2:	2b02      	cmp	r3, #2
 80199a4:	d04c      	beq.n	8019a40 <uxr_deserialize_ObjectVariant+0x10c>
 80199a6:	2b03      	cmp	r3, #3
 80199a8:	d109      	bne.n	80199be <uxr_deserialize_ObjectVariant+0x8a>
 80199aa:	f106 0308 	add.w	r3, r6, #8
 80199ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80199b2:	f106 010c 	add.w	r1, r6, #12
 80199b6:	4628      	mov	r0, r5
 80199b8:	f7f8 fc3c 	bl	8012234 <ucdr_deserialize_sequence_uint8_t>
 80199bc:	4604      	mov	r4, r0
 80199be:	2202      	movs	r2, #2
 80199c0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80199c4:	4628      	mov	r0, r5
 80199c6:	f7fc fddb 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 80199ca:	4020      	ands	r0, r4
 80199cc:	b2c4      	uxtb	r4, r0
 80199ce:	e7c6      	b.n	801995e <uxr_deserialize_ObjectVariant+0x2a>
 80199d0:	1d31      	adds	r1, r6, #4
 80199d2:	4628      	mov	r0, r5
 80199d4:	f7f7 f8ba 	bl	8010b4c <ucdr_deserialize_uint8_t>
 80199d8:	4604      	mov	r4, r0
 80199da:	b130      	cbz	r0, 80199ea <uxr_deserialize_ObjectVariant+0xb6>
 80199dc:	7933      	ldrb	r3, [r6, #4]
 80199de:	2b02      	cmp	r3, #2
 80199e0:	d036      	beq.n	8019a50 <uxr_deserialize_ObjectVariant+0x11c>
 80199e2:	2b03      	cmp	r3, #3
 80199e4:	d03c      	beq.n	8019a60 <uxr_deserialize_ObjectVariant+0x12c>
 80199e6:	2b01      	cmp	r3, #1
 80199e8:	d032      	beq.n	8019a50 <uxr_deserialize_ObjectVariant+0x11c>
 80199ea:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80199ee:	4628      	mov	r0, r5
 80199f0:	f7f7 fe52 	bl	8011698 <ucdr_deserialize_int16_t>
 80199f4:	4020      	ands	r0, r4
 80199f6:	b2c4      	uxtb	r4, r0
 80199f8:	e7b1      	b.n	801995e <uxr_deserialize_ObjectVariant+0x2a>
 80199fa:	1d31      	adds	r1, r6, #4
 80199fc:	4628      	mov	r0, r5
 80199fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a02:	f7ff bb8b 	b.w	801911c <uxr_deserialize_CLIENT_Representation>
 8019a06:	2204      	movs	r2, #4
 8019a08:	4628      	mov	r0, r5
 8019a0a:	18b1      	adds	r1, r6, r2
 8019a0c:	f7fc fdb8 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019a10:	4604      	mov	r4, r0
 8019a12:	2202      	movs	r2, #2
 8019a14:	f106 0108 	add.w	r1, r6, #8
 8019a18:	4628      	mov	r0, r5
 8019a1a:	f7fc fdb1 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019a1e:	4004      	ands	r4, r0
 8019a20:	2202      	movs	r2, #2
 8019a22:	f106 010a 	add.w	r1, r6, #10
 8019a26:	4628      	mov	r0, r5
 8019a28:	b2e4      	uxtb	r4, r4
 8019a2a:	f7fc fda9 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019a2e:	4603      	mov	r3, r0
 8019a30:	f106 010c 	add.w	r1, r6, #12
 8019a34:	4628      	mov	r0, r5
 8019a36:	401c      	ands	r4, r3
 8019a38:	f7f7 f85a 	bl	8010af0 <ucdr_deserialize_bool>
 8019a3c:	4004      	ands	r4, r0
 8019a3e:	e78e      	b.n	801995e <uxr_deserialize_ObjectVariant+0x2a>
 8019a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019a44:	68b1      	ldr	r1, [r6, #8]
 8019a46:	4628      	mov	r0, r5
 8019a48:	f003 fc7e 	bl	801d348 <ucdr_deserialize_string>
 8019a4c:	4604      	mov	r4, r0
 8019a4e:	e7b6      	b.n	80199be <uxr_deserialize_ObjectVariant+0x8a>
 8019a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019a54:	68b1      	ldr	r1, [r6, #8]
 8019a56:	4628      	mov	r0, r5
 8019a58:	f003 fc76 	bl	801d348 <ucdr_deserialize_string>
 8019a5c:	4604      	mov	r4, r0
 8019a5e:	e7c4      	b.n	80199ea <uxr_deserialize_ObjectVariant+0xb6>
 8019a60:	f106 0308 	add.w	r3, r6, #8
 8019a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019a68:	f106 010c 	add.w	r1, r6, #12
 8019a6c:	4628      	mov	r0, r5
 8019a6e:	f7f8 fbe1 	bl	8012234 <ucdr_deserialize_sequence_uint8_t>
 8019a72:	4604      	mov	r4, r0
 8019a74:	e7b9      	b.n	80199ea <uxr_deserialize_ObjectVariant+0xb6>
 8019a76:	bf00      	nop

08019a78 <uxr_deserialize_BaseObjectRequest>:
 8019a78:	b570      	push	{r4, r5, r6, lr}
 8019a7a:	2202      	movs	r2, #2
 8019a7c:	4605      	mov	r5, r0
 8019a7e:	460e      	mov	r6, r1
 8019a80:	f7fc fd7e 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019a84:	2202      	movs	r2, #2
 8019a86:	4604      	mov	r4, r0
 8019a88:	4628      	mov	r0, r5
 8019a8a:	18b1      	adds	r1, r6, r2
 8019a8c:	f7fc fd78 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019a90:	4020      	ands	r0, r4
 8019a92:	b2c0      	uxtb	r0, r0
 8019a94:	bd70      	pop	{r4, r5, r6, pc}
 8019a96:	bf00      	nop

08019a98 <uxr_serialize_ActivityInfoVariant>:
 8019a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a9c:	460e      	mov	r6, r1
 8019a9e:	7809      	ldrb	r1, [r1, #0]
 8019aa0:	4680      	mov	r8, r0
 8019aa2:	f7f7 f83d 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019aa6:	4607      	mov	r7, r0
 8019aa8:	b138      	cbz	r0, 8019aba <uxr_serialize_ActivityInfoVariant+0x22>
 8019aaa:	7833      	ldrb	r3, [r6, #0]
 8019aac:	2b06      	cmp	r3, #6
 8019aae:	f000 8081 	beq.w	8019bb4 <uxr_serialize_ActivityInfoVariant+0x11c>
 8019ab2:	2b0d      	cmp	r3, #13
 8019ab4:	d014      	beq.n	8019ae0 <uxr_serialize_ActivityInfoVariant+0x48>
 8019ab6:	2b05      	cmp	r3, #5
 8019ab8:	d002      	beq.n	8019ac0 <uxr_serialize_ActivityInfoVariant+0x28>
 8019aba:	4638      	mov	r0, r7
 8019abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ac0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019ac4:	4640      	mov	r0, r8
 8019ac6:	f7f7 fd67 	bl	8011598 <ucdr_serialize_int16_t>
 8019aca:	4607      	mov	r7, r0
 8019acc:	4640      	mov	r0, r8
 8019ace:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8019ad2:	f7f7 fc91 	bl	80113f8 <ucdr_serialize_uint64_t>
 8019ad6:	4038      	ands	r0, r7
 8019ad8:	b2c7      	uxtb	r7, r0
 8019ada:	4638      	mov	r0, r7
 8019adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ae0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019ae4:	4640      	mov	r0, r8
 8019ae6:	f7f7 fd57 	bl	8011598 <ucdr_serialize_int16_t>
 8019aea:	68f1      	ldr	r1, [r6, #12]
 8019aec:	4607      	mov	r7, r0
 8019aee:	4640      	mov	r0, r8
 8019af0:	f7f7 fa2c 	bl	8010f4c <ucdr_serialize_uint32_t>
 8019af4:	68f3      	ldr	r3, [r6, #12]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d0ed      	beq.n	8019ad6 <uxr_serialize_ActivityInfoVariant+0x3e>
 8019afa:	b318      	cbz	r0, 8019b44 <uxr_serialize_ActivityInfoVariant+0xac>
 8019afc:	f106 090c 	add.w	r9, r6, #12
 8019b00:	2400      	movs	r4, #0
 8019b02:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8019b06:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8019b0a:	7c29      	ldrb	r1, [r5, #16]
 8019b0c:	4640      	mov	r0, r8
 8019b0e:	f7f7 f807 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019b12:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8019b16:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8019b1a:	2800      	cmp	r0, #0
 8019b1c:	d051      	beq.n	8019bc2 <uxr_serialize_ActivityInfoVariant+0x12a>
 8019b1e:	7c2b      	ldrb	r3, [r5, #16]
 8019b20:	00c9      	lsls	r1, r1, #3
 8019b22:	2b03      	cmp	r3, #3
 8019b24:	d854      	bhi.n	8019bd0 <uxr_serialize_ActivityInfoVariant+0x138>
 8019b26:	e8df f003 	tbb	[pc, r3]
 8019b2a:	2133      	.short	0x2133
 8019b2c:	020f      	.short	0x020f
 8019b2e:	4449      	add	r1, r9
 8019b30:	4640      	mov	r0, r8
 8019b32:	6889      	ldr	r1, [r1, #8]
 8019b34:	f003 fbf8 	bl	801d328 <ucdr_serialize_string>
 8019b38:	3401      	adds	r4, #1
 8019b3a:	68f2      	ldr	r2, [r6, #12]
 8019b3c:	4294      	cmp	r4, r2
 8019b3e:	d244      	bcs.n	8019bca <uxr_serialize_ActivityInfoVariant+0x132>
 8019b40:	2800      	cmp	r0, #0
 8019b42:	d1de      	bne.n	8019b02 <uxr_serialize_ActivityInfoVariant+0x6a>
 8019b44:	2700      	movs	r7, #0
 8019b46:	e7b8      	b.n	8019aba <uxr_serialize_ActivityInfoVariant+0x22>
 8019b48:	3108      	adds	r1, #8
 8019b4a:	44a2      	add	sl, r4
 8019b4c:	2210      	movs	r2, #16
 8019b4e:	4640      	mov	r0, r8
 8019b50:	4449      	add	r1, r9
 8019b52:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8019b56:	f7fc fcaf 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019b5a:	4605      	mov	r5, r0
 8019b5c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8019b60:	4640      	mov	r0, r8
 8019b62:	f7f7 f9f3 	bl	8010f4c <ucdr_serialize_uint32_t>
 8019b66:	4028      	ands	r0, r5
 8019b68:	b2c0      	uxtb	r0, r0
 8019b6a:	e7e5      	b.n	8019b38 <uxr_serialize_ActivityInfoVariant+0xa0>
 8019b6c:	3108      	adds	r1, #8
 8019b6e:	44a2      	add	sl, r4
 8019b70:	2204      	movs	r2, #4
 8019b72:	4640      	mov	r0, r8
 8019b74:	4449      	add	r1, r9
 8019b76:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8019b7a:	f7fc fc9d 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019b7e:	4605      	mov	r5, r0
 8019b80:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8019b84:	4640      	mov	r0, r8
 8019b86:	f7f6 fff7 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019b8a:	4028      	ands	r0, r5
 8019b8c:	b2c0      	uxtb	r0, r0
 8019b8e:	e7d3      	b.n	8019b38 <uxr_serialize_ActivityInfoVariant+0xa0>
 8019b90:	3108      	adds	r1, #8
 8019b92:	44a2      	add	sl, r4
 8019b94:	2202      	movs	r2, #2
 8019b96:	4640      	mov	r0, r8
 8019b98:	4449      	add	r1, r9
 8019b9a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8019b9e:	f7fc fc8b 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019ba2:	4605      	mov	r5, r0
 8019ba4:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8019ba8:	4640      	mov	r0, r8
 8019baa:	f7f6 ffb9 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019bae:	4028      	ands	r0, r5
 8019bb0:	b2c0      	uxtb	r0, r0
 8019bb2:	e7c1      	b.n	8019b38 <uxr_serialize_ActivityInfoVariant+0xa0>
 8019bb4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019bb8:	4640      	mov	r0, r8
 8019bba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bbe:	f7f7 bceb 	b.w	8011598 <ucdr_serialize_int16_t>
 8019bc2:	3401      	adds	r4, #1
 8019bc4:	68f2      	ldr	r2, [r6, #12]
 8019bc6:	42a2      	cmp	r2, r4
 8019bc8:	d8bc      	bhi.n	8019b44 <uxr_serialize_ActivityInfoVariant+0xac>
 8019bca:	4007      	ands	r7, r0
 8019bcc:	b2ff      	uxtb	r7, r7
 8019bce:	e774      	b.n	8019aba <uxr_serialize_ActivityInfoVariant+0x22>
 8019bd0:	3401      	adds	r4, #1
 8019bd2:	68f3      	ldr	r3, [r6, #12]
 8019bd4:	3518      	adds	r5, #24
 8019bd6:	429c      	cmp	r4, r3
 8019bd8:	d397      	bcc.n	8019b0a <uxr_serialize_ActivityInfoVariant+0x72>
 8019bda:	e76e      	b.n	8019aba <uxr_serialize_ActivityInfoVariant+0x22>

08019bdc <uxr_deserialize_BaseObjectReply>:
 8019bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019be0:	2202      	movs	r2, #2
 8019be2:	4606      	mov	r6, r0
 8019be4:	460f      	mov	r7, r1
 8019be6:	f7fc fccb 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019bea:	2202      	movs	r2, #2
 8019bec:	4605      	mov	r5, r0
 8019bee:	4630      	mov	r0, r6
 8019bf0:	18b9      	adds	r1, r7, r2
 8019bf2:	f7fc fcc5 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019bf6:	4680      	mov	r8, r0
 8019bf8:	1d39      	adds	r1, r7, #4
 8019bfa:	4630      	mov	r0, r6
 8019bfc:	f7f6 ffa6 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019c00:	ea05 0508 	and.w	r5, r5, r8
 8019c04:	4604      	mov	r4, r0
 8019c06:	1d79      	adds	r1, r7, #5
 8019c08:	4630      	mov	r0, r6
 8019c0a:	402c      	ands	r4, r5
 8019c0c:	f7f6 ff9e 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019c10:	4020      	ands	r0, r4
 8019c12:	b2c0      	uxtb	r0, r0
 8019c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019c18 <uxr_serialize_ReadSpecification>:
 8019c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c1a:	460e      	mov	r6, r1
 8019c1c:	4607      	mov	r7, r0
 8019c1e:	7809      	ldrb	r1, [r1, #0]
 8019c20:	f7f6 ff7e 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019c24:	4604      	mov	r4, r0
 8019c26:	7871      	ldrb	r1, [r6, #1]
 8019c28:	4638      	mov	r0, r7
 8019c2a:	f7f6 ff79 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019c2e:	4004      	ands	r4, r0
 8019c30:	78b1      	ldrb	r1, [r6, #2]
 8019c32:	4638      	mov	r0, r7
 8019c34:	f7f6 ff46 	bl	8010ac4 <ucdr_serialize_bool>
 8019c38:	78b3      	ldrb	r3, [r6, #2]
 8019c3a:	b2e4      	uxtb	r4, r4
 8019c3c:	4004      	ands	r4, r0
 8019c3e:	b943      	cbnz	r3, 8019c52 <uxr_serialize_ReadSpecification+0x3a>
 8019c40:	7a31      	ldrb	r1, [r6, #8]
 8019c42:	4638      	mov	r0, r7
 8019c44:	f7f6 ff3e 	bl	8010ac4 <ucdr_serialize_bool>
 8019c48:	7a33      	ldrb	r3, [r6, #8]
 8019c4a:	4004      	ands	r4, r0
 8019c4c:	b93b      	cbnz	r3, 8019c5e <uxr_serialize_ReadSpecification+0x46>
 8019c4e:	4620      	mov	r0, r4
 8019c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c52:	6871      	ldr	r1, [r6, #4]
 8019c54:	4638      	mov	r0, r7
 8019c56:	f003 fb67 	bl	801d328 <ucdr_serialize_string>
 8019c5a:	4004      	ands	r4, r0
 8019c5c:	e7f0      	b.n	8019c40 <uxr_serialize_ReadSpecification+0x28>
 8019c5e:	8971      	ldrh	r1, [r6, #10]
 8019c60:	4638      	mov	r0, r7
 8019c62:	f7f6 ff89 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019c66:	4605      	mov	r5, r0
 8019c68:	89b1      	ldrh	r1, [r6, #12]
 8019c6a:	4638      	mov	r0, r7
 8019c6c:	f7f6 ff84 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019c70:	4005      	ands	r5, r0
 8019c72:	89f1      	ldrh	r1, [r6, #14]
 8019c74:	4638      	mov	r0, r7
 8019c76:	b2ed      	uxtb	r5, r5
 8019c78:	f7f6 ff7e 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019c7c:	8a31      	ldrh	r1, [r6, #16]
 8019c7e:	4025      	ands	r5, r4
 8019c80:	4604      	mov	r4, r0
 8019c82:	4638      	mov	r0, r7
 8019c84:	4025      	ands	r5, r4
 8019c86:	f7f6 ff77 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019c8a:	ea00 0405 	and.w	r4, r0, r5
 8019c8e:	4620      	mov	r0, r4
 8019c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c92:	bf00      	nop

08019c94 <uxr_serialize_CREATE_CLIENT_Payload>:
 8019c94:	f7ff b9ea 	b.w	801906c <uxr_serialize_CLIENT_Representation>

08019c98 <uxr_serialize_CREATE_Payload>:
 8019c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c9a:	2202      	movs	r2, #2
 8019c9c:	4607      	mov	r7, r0
 8019c9e:	460e      	mov	r6, r1
 8019ca0:	f7fc fc0a 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019ca4:	2202      	movs	r2, #2
 8019ca6:	4605      	mov	r5, r0
 8019ca8:	4638      	mov	r0, r7
 8019caa:	18b1      	adds	r1, r6, r2
 8019cac:	f7fc fc04 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019cb0:	7931      	ldrb	r1, [r6, #4]
 8019cb2:	4604      	mov	r4, r0
 8019cb4:	4638      	mov	r0, r7
 8019cb6:	f7f6 ff33 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019cba:	b170      	cbz	r0, 8019cda <uxr_serialize_CREATE_Payload+0x42>
 8019cbc:	7933      	ldrb	r3, [r6, #4]
 8019cbe:	402c      	ands	r4, r5
 8019cc0:	3b01      	subs	r3, #1
 8019cc2:	b2e4      	uxtb	r4, r4
 8019cc4:	2b0d      	cmp	r3, #13
 8019cc6:	d809      	bhi.n	8019cdc <uxr_serialize_CREATE_Payload+0x44>
 8019cc8:	e8df f003 	tbb	[pc, r3]
 8019ccc:	23230a4c 	.word	0x23230a4c
 8019cd0:	0a0a0a0a 	.word	0x0a0a0a0a
 8019cd4:	12121208 	.word	0x12121208
 8019cd8:	3e45      	.short	0x3e45
 8019cda:	2400      	movs	r4, #0
 8019cdc:	4620      	mov	r0, r4
 8019cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ce0:	f106 0108 	add.w	r1, r6, #8
 8019ce4:	4638      	mov	r0, r7
 8019ce6:	f7ff fac7 	bl	8019278 <uxr_serialize_DATAWRITER_Representation>
 8019cea:	4004      	ands	r4, r0
 8019cec:	4620      	mov	r0, r4
 8019cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cf0:	7a31      	ldrb	r1, [r6, #8]
 8019cf2:	4638      	mov	r0, r7
 8019cf4:	f7f6 ff14 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019cf8:	2800      	cmp	r0, #0
 8019cfa:	d0ee      	beq.n	8019cda <uxr_serialize_CREATE_Payload+0x42>
 8019cfc:	7a33      	ldrb	r3, [r6, #8]
 8019cfe:	2b01      	cmp	r3, #1
 8019d00:	d001      	beq.n	8019d06 <uxr_serialize_CREATE_Payload+0x6e>
 8019d02:	2b02      	cmp	r3, #2
 8019d04:	d1ea      	bne.n	8019cdc <uxr_serialize_CREATE_Payload+0x44>
 8019d06:	68f1      	ldr	r1, [r6, #12]
 8019d08:	4638      	mov	r0, r7
 8019d0a:	f003 fb0d 	bl	801d328 <ucdr_serialize_string>
 8019d0e:	4004      	ands	r4, r0
 8019d10:	e7e4      	b.n	8019cdc <uxr_serialize_CREATE_Payload+0x44>
 8019d12:	7a31      	ldrb	r1, [r6, #8]
 8019d14:	4638      	mov	r0, r7
 8019d16:	f7f6 ff03 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019d1a:	4605      	mov	r5, r0
 8019d1c:	b158      	cbz	r0, 8019d36 <uxr_serialize_CREATE_Payload+0x9e>
 8019d1e:	7a33      	ldrb	r3, [r6, #8]
 8019d20:	2b02      	cmp	r3, #2
 8019d22:	d034      	beq.n	8019d8e <uxr_serialize_CREATE_Payload+0xf6>
 8019d24:	2b03      	cmp	r3, #3
 8019d26:	d106      	bne.n	8019d36 <uxr_serialize_CREATE_Payload+0x9e>
 8019d28:	68f2      	ldr	r2, [r6, #12]
 8019d2a:	f106 0110 	add.w	r1, r6, #16
 8019d2e:	4638      	mov	r0, r7
 8019d30:	f7f8 fa6e 	bl	8012210 <ucdr_serialize_sequence_uint8_t>
 8019d34:	4605      	mov	r5, r0
 8019d36:	2202      	movs	r2, #2
 8019d38:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8019d3c:	4638      	mov	r0, r7
 8019d3e:	f7fc fbbb 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019d42:	4028      	ands	r0, r5
 8019d44:	4004      	ands	r4, r0
 8019d46:	e7c9      	b.n	8019cdc <uxr_serialize_CREATE_Payload+0x44>
 8019d48:	f106 0108 	add.w	r1, r6, #8
 8019d4c:	4638      	mov	r0, r7
 8019d4e:	f7ff f98d 	bl	801906c <uxr_serialize_CLIENT_Representation>
 8019d52:	4004      	ands	r4, r0
 8019d54:	e7c2      	b.n	8019cdc <uxr_serialize_CREATE_Payload+0x44>
 8019d56:	f106 0108 	add.w	r1, r6, #8
 8019d5a:	4638      	mov	r0, r7
 8019d5c:	f7ff fa42 	bl	80191e4 <uxr_serialize_AGENT_Representation>
 8019d60:	4004      	ands	r4, r0
 8019d62:	e7bb      	b.n	8019cdc <uxr_serialize_CREATE_Payload+0x44>
 8019d64:	7a31      	ldrb	r1, [r6, #8]
 8019d66:	4638      	mov	r0, r7
 8019d68:	f7f6 feda 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019d6c:	4605      	mov	r5, r0
 8019d6e:	b130      	cbz	r0, 8019d7e <uxr_serialize_CREATE_Payload+0xe6>
 8019d70:	7a33      	ldrb	r3, [r6, #8]
 8019d72:	2b02      	cmp	r3, #2
 8019d74:	d011      	beq.n	8019d9a <uxr_serialize_CREATE_Payload+0x102>
 8019d76:	2b03      	cmp	r3, #3
 8019d78:	d015      	beq.n	8019da6 <uxr_serialize_CREATE_Payload+0x10e>
 8019d7a:	2b01      	cmp	r3, #1
 8019d7c:	d00d      	beq.n	8019d9a <uxr_serialize_CREATE_Payload+0x102>
 8019d7e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8019d82:	4638      	mov	r0, r7
 8019d84:	f7f7 fc08 	bl	8011598 <ucdr_serialize_int16_t>
 8019d88:	4028      	ands	r0, r5
 8019d8a:	4004      	ands	r4, r0
 8019d8c:	e7a6      	b.n	8019cdc <uxr_serialize_CREATE_Payload+0x44>
 8019d8e:	68f1      	ldr	r1, [r6, #12]
 8019d90:	4638      	mov	r0, r7
 8019d92:	f003 fac9 	bl	801d328 <ucdr_serialize_string>
 8019d96:	4605      	mov	r5, r0
 8019d98:	e7cd      	b.n	8019d36 <uxr_serialize_CREATE_Payload+0x9e>
 8019d9a:	68f1      	ldr	r1, [r6, #12]
 8019d9c:	4638      	mov	r0, r7
 8019d9e:	f003 fac3 	bl	801d328 <ucdr_serialize_string>
 8019da2:	4605      	mov	r5, r0
 8019da4:	e7eb      	b.n	8019d7e <uxr_serialize_CREATE_Payload+0xe6>
 8019da6:	68f2      	ldr	r2, [r6, #12]
 8019da8:	f106 0110 	add.w	r1, r6, #16
 8019dac:	4638      	mov	r0, r7
 8019dae:	f7f8 fa2f 	bl	8012210 <ucdr_serialize_sequence_uint8_t>
 8019db2:	4605      	mov	r5, r0
 8019db4:	e7e3      	b.n	8019d7e <uxr_serialize_CREATE_Payload+0xe6>
 8019db6:	bf00      	nop

08019db8 <uxr_deserialize_GET_INFO_Payload>:
 8019db8:	b570      	push	{r4, r5, r6, lr}
 8019dba:	2202      	movs	r2, #2
 8019dbc:	4605      	mov	r5, r0
 8019dbe:	460e      	mov	r6, r1
 8019dc0:	f7fc fbde 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019dc4:	2202      	movs	r2, #2
 8019dc6:	4604      	mov	r4, r0
 8019dc8:	4628      	mov	r0, r5
 8019dca:	18b1      	adds	r1, r6, r2
 8019dcc:	f7fc fbd8 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019dd0:	4603      	mov	r3, r0
 8019dd2:	1d31      	adds	r1, r6, #4
 8019dd4:	4628      	mov	r0, r5
 8019dd6:	401c      	ands	r4, r3
 8019dd8:	f7f7 f9e8 	bl	80111ac <ucdr_deserialize_uint32_t>
 8019ddc:	b2e4      	uxtb	r4, r4
 8019dde:	4020      	ands	r0, r4
 8019de0:	bd70      	pop	{r4, r5, r6, pc}
 8019de2:	bf00      	nop

08019de4 <uxr_serialize_DELETE_Payload>:
 8019de4:	b570      	push	{r4, r5, r6, lr}
 8019de6:	2202      	movs	r2, #2
 8019de8:	4605      	mov	r5, r0
 8019dea:	460e      	mov	r6, r1
 8019dec:	f7fc fb64 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019df0:	2202      	movs	r2, #2
 8019df2:	4604      	mov	r4, r0
 8019df4:	4628      	mov	r0, r5
 8019df6:	18b1      	adds	r1, r6, r2
 8019df8:	f7fc fb5e 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019dfc:	4020      	ands	r0, r4
 8019dfe:	b2c0      	uxtb	r0, r0
 8019e00:	bd70      	pop	{r4, r5, r6, pc}
 8019e02:	bf00      	nop

08019e04 <uxr_deserialize_STATUS_AGENT_Payload>:
 8019e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e08:	460e      	mov	r6, r1
 8019e0a:	4605      	mov	r5, r0
 8019e0c:	f7f6 fe9e 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019e10:	4604      	mov	r4, r0
 8019e12:	1c71      	adds	r1, r6, #1
 8019e14:	4628      	mov	r0, r5
 8019e16:	f7f6 fe99 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019e1a:	2204      	movs	r2, #4
 8019e1c:	4681      	mov	r9, r0
 8019e1e:	4628      	mov	r0, r5
 8019e20:	18b1      	adds	r1, r6, r2
 8019e22:	f7fc fbad 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019e26:	f106 0108 	add.w	r1, r6, #8
 8019e2a:	4680      	mov	r8, r0
 8019e2c:	2202      	movs	r2, #2
 8019e2e:	4628      	mov	r0, r5
 8019e30:	f7fc fba6 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019e34:	ea04 0309 	and.w	r3, r4, r9
 8019e38:	4607      	mov	r7, r0
 8019e3a:	2202      	movs	r2, #2
 8019e3c:	b2db      	uxtb	r3, r3
 8019e3e:	f106 010a 	add.w	r1, r6, #10
 8019e42:	4628      	mov	r0, r5
 8019e44:	ea03 0408 	and.w	r4, r3, r8
 8019e48:	f7fc fb9a 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019e4c:	4603      	mov	r3, r0
 8019e4e:	4628      	mov	r0, r5
 8019e50:	403c      	ands	r4, r7
 8019e52:	f106 010c 	add.w	r1, r6, #12
 8019e56:	461d      	mov	r5, r3
 8019e58:	f7f6 fe4a 	bl	8010af0 <ucdr_deserialize_bool>
 8019e5c:	4025      	ands	r5, r4
 8019e5e:	4028      	ands	r0, r5
 8019e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019e64 <uxr_deserialize_STATUS_Payload>:
 8019e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e68:	2202      	movs	r2, #2
 8019e6a:	4606      	mov	r6, r0
 8019e6c:	460f      	mov	r7, r1
 8019e6e:	f7fc fb87 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019e72:	2202      	movs	r2, #2
 8019e74:	4605      	mov	r5, r0
 8019e76:	4630      	mov	r0, r6
 8019e78:	18b9      	adds	r1, r7, r2
 8019e7a:	f7fc fb81 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019e7e:	4680      	mov	r8, r0
 8019e80:	1d39      	adds	r1, r7, #4
 8019e82:	4630      	mov	r0, r6
 8019e84:	f7f6 fe62 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019e88:	ea05 0508 	and.w	r5, r5, r8
 8019e8c:	4604      	mov	r4, r0
 8019e8e:	1d79      	adds	r1, r7, #5
 8019e90:	4630      	mov	r0, r6
 8019e92:	402c      	ands	r4, r5
 8019e94:	f7f6 fe5a 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019e98:	4020      	ands	r0, r4
 8019e9a:	b2c0      	uxtb	r0, r0
 8019e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019ea0 <uxr_serialize_INFO_Payload>:
 8019ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ea4:	2202      	movs	r2, #2
 8019ea6:	460c      	mov	r4, r1
 8019ea8:	4605      	mov	r5, r0
 8019eaa:	f7fc fb05 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019eae:	2202      	movs	r2, #2
 8019eb0:	4680      	mov	r8, r0
 8019eb2:	4628      	mov	r0, r5
 8019eb4:	18a1      	adds	r1, r4, r2
 8019eb6:	f7fc faff 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019eba:	4607      	mov	r7, r0
 8019ebc:	7921      	ldrb	r1, [r4, #4]
 8019ebe:	4628      	mov	r0, r5
 8019ec0:	f7f6 fe2e 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019ec4:	ea08 0807 	and.w	r8, r8, r7
 8019ec8:	4606      	mov	r6, r0
 8019eca:	7961      	ldrb	r1, [r4, #5]
 8019ecc:	4628      	mov	r0, r5
 8019ece:	ea06 0608 	and.w	r6, r6, r8
 8019ed2:	f7f6 fe25 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019ed6:	7a21      	ldrb	r1, [r4, #8]
 8019ed8:	4030      	ands	r0, r6
 8019eda:	b2c7      	uxtb	r7, r0
 8019edc:	4628      	mov	r0, r5
 8019ede:	f7f6 fdf1 	bl	8010ac4 <ucdr_serialize_bool>
 8019ee2:	7a23      	ldrb	r3, [r4, #8]
 8019ee4:	4606      	mov	r6, r0
 8019ee6:	b96b      	cbnz	r3, 8019f04 <uxr_serialize_INFO_Payload+0x64>
 8019ee8:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8019eec:	4628      	mov	r0, r5
 8019eee:	f7f6 fde9 	bl	8010ac4 <ucdr_serialize_bool>
 8019ef2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8019ef6:	4030      	ands	r0, r6
 8019ef8:	b2c6      	uxtb	r6, r0
 8019efa:	b983      	cbnz	r3, 8019f1e <uxr_serialize_INFO_Payload+0x7e>
 8019efc:	ea06 0007 	and.w	r0, r6, r7
 8019f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f04:	7b21      	ldrb	r1, [r4, #12]
 8019f06:	4628      	mov	r0, r5
 8019f08:	f7f6 fe0a 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019f0c:	b188      	cbz	r0, 8019f32 <uxr_serialize_INFO_Payload+0x92>
 8019f0e:	f104 010c 	add.w	r1, r4, #12
 8019f12:	4628      	mov	r0, r5
 8019f14:	f7ff f9d8 	bl	80192c8 <uxr_serialize_ObjectVariant.part.0>
 8019f18:	4030      	ands	r0, r6
 8019f1a:	b2c6      	uxtb	r6, r0
 8019f1c:	e7e4      	b.n	8019ee8 <uxr_serialize_INFO_Payload+0x48>
 8019f1e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8019f22:	4628      	mov	r0, r5
 8019f24:	f7ff fdb8 	bl	8019a98 <uxr_serialize_ActivityInfoVariant>
 8019f28:	4006      	ands	r6, r0
 8019f2a:	ea06 0007 	and.w	r0, r6, r7
 8019f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f32:	4606      	mov	r6, r0
 8019f34:	e7d8      	b.n	8019ee8 <uxr_serialize_INFO_Payload+0x48>
 8019f36:	bf00      	nop

08019f38 <uxr_serialize_READ_DATA_Payload>:
 8019f38:	b570      	push	{r4, r5, r6, lr}
 8019f3a:	2202      	movs	r2, #2
 8019f3c:	4605      	mov	r5, r0
 8019f3e:	460e      	mov	r6, r1
 8019f40:	f7fc faba 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019f44:	2202      	movs	r2, #2
 8019f46:	4604      	mov	r4, r0
 8019f48:	4628      	mov	r0, r5
 8019f4a:	18b1      	adds	r1, r6, r2
 8019f4c:	f7fc fab4 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019f50:	4603      	mov	r3, r0
 8019f52:	1d31      	adds	r1, r6, #4
 8019f54:	4628      	mov	r0, r5
 8019f56:	401c      	ands	r4, r3
 8019f58:	f7ff fe5e 	bl	8019c18 <uxr_serialize_ReadSpecification>
 8019f5c:	b2e4      	uxtb	r4, r4
 8019f5e:	4020      	ands	r0, r4
 8019f60:	bd70      	pop	{r4, r5, r6, pc}
 8019f62:	bf00      	nop

08019f64 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8019f64:	b570      	push	{r4, r5, r6, lr}
 8019f66:	2202      	movs	r2, #2
 8019f68:	4605      	mov	r5, r0
 8019f6a:	460e      	mov	r6, r1
 8019f6c:	f7fc faa4 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019f70:	2202      	movs	r2, #2
 8019f72:	4604      	mov	r4, r0
 8019f74:	4628      	mov	r0, r5
 8019f76:	18b1      	adds	r1, r6, r2
 8019f78:	f7fc fa9e 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019f7c:	4020      	ands	r0, r4
 8019f7e:	b2c0      	uxtb	r0, r0
 8019f80:	bd70      	pop	{r4, r5, r6, pc}
 8019f82:	bf00      	nop

08019f84 <uxr_serialize_ACKNACK_Payload>:
 8019f84:	b570      	push	{r4, r5, r6, lr}
 8019f86:	460c      	mov	r4, r1
 8019f88:	4605      	mov	r5, r0
 8019f8a:	460e      	mov	r6, r1
 8019f8c:	f834 1b02 	ldrh.w	r1, [r4], #2
 8019f90:	f7f6 fdf2 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019f94:	2202      	movs	r2, #2
 8019f96:	4621      	mov	r1, r4
 8019f98:	4604      	mov	r4, r0
 8019f9a:	4628      	mov	r0, r5
 8019f9c:	f7fc fa8c 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	7931      	ldrb	r1, [r6, #4]
 8019fa4:	4628      	mov	r0, r5
 8019fa6:	401c      	ands	r4, r3
 8019fa8:	f7f6 fdba 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019fac:	b2e4      	uxtb	r4, r4
 8019fae:	4020      	ands	r0, r4
 8019fb0:	bd70      	pop	{r4, r5, r6, pc}
 8019fb2:	bf00      	nop

08019fb4 <uxr_deserialize_ACKNACK_Payload>:
 8019fb4:	b570      	push	{r4, r5, r6, lr}
 8019fb6:	460e      	mov	r6, r1
 8019fb8:	4605      	mov	r5, r0
 8019fba:	f7f6 fedd 	bl	8010d78 <ucdr_deserialize_uint16_t>
 8019fbe:	2202      	movs	r2, #2
 8019fc0:	4604      	mov	r4, r0
 8019fc2:	4628      	mov	r0, r5
 8019fc4:	18b1      	adds	r1, r6, r2
 8019fc6:	f7fc fadb 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	1d31      	adds	r1, r6, #4
 8019fce:	4628      	mov	r0, r5
 8019fd0:	401c      	ands	r4, r3
 8019fd2:	f7f6 fdbb 	bl	8010b4c <ucdr_deserialize_uint8_t>
 8019fd6:	b2e4      	uxtb	r4, r4
 8019fd8:	4020      	ands	r0, r4
 8019fda:	bd70      	pop	{r4, r5, r6, pc}

08019fdc <uxr_serialize_HEARTBEAT_Payload>:
 8019fdc:	b570      	push	{r4, r5, r6, lr}
 8019fde:	460d      	mov	r5, r1
 8019fe0:	4606      	mov	r6, r0
 8019fe2:	8809      	ldrh	r1, [r1, #0]
 8019fe4:	f7f6 fdc8 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019fe8:	8869      	ldrh	r1, [r5, #2]
 8019fea:	4604      	mov	r4, r0
 8019fec:	4630      	mov	r0, r6
 8019fee:	f7f6 fdc3 	bl	8010b78 <ucdr_serialize_uint16_t>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	7929      	ldrb	r1, [r5, #4]
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	401c      	ands	r4, r3
 8019ffa:	f7f6 fd91 	bl	8010b20 <ucdr_serialize_uint8_t>
 8019ffe:	b2e4      	uxtb	r4, r4
 801a000:	4020      	ands	r0, r4
 801a002:	bd70      	pop	{r4, r5, r6, pc}

0801a004 <uxr_deserialize_HEARTBEAT_Payload>:
 801a004:	b570      	push	{r4, r5, r6, lr}
 801a006:	460e      	mov	r6, r1
 801a008:	4605      	mov	r5, r0
 801a00a:	f7f6 feb5 	bl	8010d78 <ucdr_deserialize_uint16_t>
 801a00e:	4604      	mov	r4, r0
 801a010:	1cb1      	adds	r1, r6, #2
 801a012:	4628      	mov	r0, r5
 801a014:	f7f6 feb0 	bl	8010d78 <ucdr_deserialize_uint16_t>
 801a018:	4603      	mov	r3, r0
 801a01a:	1d31      	adds	r1, r6, #4
 801a01c:	4628      	mov	r0, r5
 801a01e:	401c      	ands	r4, r3
 801a020:	f7f6 fd94 	bl	8010b4c <ucdr_deserialize_uint8_t>
 801a024:	b2e4      	uxtb	r4, r4
 801a026:	4020      	ands	r0, r4
 801a028:	bd70      	pop	{r4, r5, r6, pc}
 801a02a:	bf00      	nop

0801a02c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801a02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a030:	460e      	mov	r6, r1
 801a032:	4605      	mov	r5, r0
 801a034:	f7f7 fc3c 	bl	80118b0 <ucdr_deserialize_int32_t>
 801a038:	4607      	mov	r7, r0
 801a03a:	1d31      	adds	r1, r6, #4
 801a03c:	4628      	mov	r0, r5
 801a03e:	f7f7 f8b5 	bl	80111ac <ucdr_deserialize_uint32_t>
 801a042:	4680      	mov	r8, r0
 801a044:	f106 0108 	add.w	r1, r6, #8
 801a048:	4628      	mov	r0, r5
 801a04a:	f7f7 fc31 	bl	80118b0 <ucdr_deserialize_int32_t>
 801a04e:	ea07 0708 	and.w	r7, r7, r8
 801a052:	4604      	mov	r4, r0
 801a054:	f106 010c 	add.w	r1, r6, #12
 801a058:	4628      	mov	r0, r5
 801a05a:	403c      	ands	r4, r7
 801a05c:	f7f7 f8a6 	bl	80111ac <ucdr_deserialize_uint32_t>
 801a060:	f106 0110 	add.w	r1, r6, #16
 801a064:	4004      	ands	r4, r0
 801a066:	4628      	mov	r0, r5
 801a068:	f7f7 fc22 	bl	80118b0 <ucdr_deserialize_int32_t>
 801a06c:	4603      	mov	r3, r0
 801a06e:	b2e4      	uxtb	r4, r4
 801a070:	4628      	mov	r0, r5
 801a072:	461d      	mov	r5, r3
 801a074:	f106 0114 	add.w	r1, r6, #20
 801a078:	f7f7 f898 	bl	80111ac <ucdr_deserialize_uint32_t>
 801a07c:	402c      	ands	r4, r5
 801a07e:	4020      	ands	r0, r4
 801a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a084 <uxr_serialize_SampleIdentity>:
 801a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a088:	4604      	mov	r4, r0
 801a08a:	460d      	mov	r5, r1
 801a08c:	220c      	movs	r2, #12
 801a08e:	f7fc fa13 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 801a092:	2203      	movs	r2, #3
 801a094:	f105 010c 	add.w	r1, r5, #12
 801a098:	4607      	mov	r7, r0
 801a09a:	4620      	mov	r0, r4
 801a09c:	f7fc fa0c 	bl	80164b8 <ucdr_serialize_array_uint8_t>
 801a0a0:	7be9      	ldrb	r1, [r5, #15]
 801a0a2:	4680      	mov	r8, r0
 801a0a4:	4620      	mov	r0, r4
 801a0a6:	f7f6 fd3b 	bl	8010b20 <ucdr_serialize_uint8_t>
 801a0aa:	6929      	ldr	r1, [r5, #16]
 801a0ac:	4606      	mov	r6, r0
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	f7f7 fb66 	bl	8011780 <ucdr_serialize_int32_t>
 801a0b4:	ea07 0708 	and.w	r7, r7, r8
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	4620      	mov	r0, r4
 801a0bc:	403e      	ands	r6, r7
 801a0be:	6969      	ldr	r1, [r5, #20]
 801a0c0:	461c      	mov	r4, r3
 801a0c2:	f7f6 ff43 	bl	8010f4c <ucdr_serialize_uint32_t>
 801a0c6:	4034      	ands	r4, r6
 801a0c8:	4020      	ands	r0, r4
 801a0ca:	b2c0      	uxtb	r0, r0
 801a0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0d0 <uxr_deserialize_SampleIdentity>:
 801a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0d4:	4604      	mov	r4, r0
 801a0d6:	460d      	mov	r5, r1
 801a0d8:	220c      	movs	r2, #12
 801a0da:	f7fc fa51 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 801a0de:	2203      	movs	r2, #3
 801a0e0:	f105 010c 	add.w	r1, r5, #12
 801a0e4:	4607      	mov	r7, r0
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	f7fc fa4a 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 801a0ec:	f105 010f 	add.w	r1, r5, #15
 801a0f0:	4680      	mov	r8, r0
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	f7f6 fd2a 	bl	8010b4c <ucdr_deserialize_uint8_t>
 801a0f8:	f105 0110 	add.w	r1, r5, #16
 801a0fc:	4606      	mov	r6, r0
 801a0fe:	4620      	mov	r0, r4
 801a100:	f7f7 fbd6 	bl	80118b0 <ucdr_deserialize_int32_t>
 801a104:	ea07 0708 	and.w	r7, r7, r8
 801a108:	4603      	mov	r3, r0
 801a10a:	4620      	mov	r0, r4
 801a10c:	403e      	ands	r6, r7
 801a10e:	f105 0114 	add.w	r1, r5, #20
 801a112:	461c      	mov	r4, r3
 801a114:	f7f7 f84a 	bl	80111ac <ucdr_deserialize_uint32_t>
 801a118:	4034      	ands	r4, r6
 801a11a:	4020      	ands	r0, r4
 801a11c:	b2c0      	uxtb	r0, r0
 801a11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a122:	bf00      	nop

0801a124 <rcl_client_get_rmw_handle>:
 801a124:	b118      	cbz	r0, 801a12e <rcl_client_get_rmw_handle+0xa>
 801a126:	6800      	ldr	r0, [r0, #0]
 801a128:	b108      	cbz	r0, 801a12e <rcl_client_get_rmw_handle+0xa>
 801a12a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801a12e:	4770      	bx	lr

0801a130 <rcl_send_request>:
 801a130:	b570      	push	{r4, r5, r6, lr}
 801a132:	b082      	sub	sp, #8
 801a134:	b1f8      	cbz	r0, 801a176 <rcl_send_request+0x46>
 801a136:	4604      	mov	r4, r0
 801a138:	6800      	ldr	r0, [r0, #0]
 801a13a:	b1e0      	cbz	r0, 801a176 <rcl_send_request+0x46>
 801a13c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801a140:	b1cb      	cbz	r3, 801a176 <rcl_send_request+0x46>
 801a142:	460e      	mov	r6, r1
 801a144:	b1e1      	cbz	r1, 801a180 <rcl_send_request+0x50>
 801a146:	4615      	mov	r5, r2
 801a148:	b1d2      	cbz	r2, 801a180 <rcl_send_request+0x50>
 801a14a:	2105      	movs	r1, #5
 801a14c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801a150:	f002 fa2e 	bl	801c5b0 <__atomic_load_8>
 801a154:	4602      	mov	r2, r0
 801a156:	460b      	mov	r3, r1
 801a158:	4631      	mov	r1, r6
 801a15a:	e9c5 2300 	strd	r2, r3, [r5]
 801a15e:	6823      	ldr	r3, [r4, #0]
 801a160:	462a      	mov	r2, r5
 801a162:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801a166:	f7fa fefb 	bl	8014f60 <rmw_send_request>
 801a16a:	4606      	mov	r6, r0
 801a16c:	b160      	cbz	r0, 801a188 <rcl_send_request+0x58>
 801a16e:	2601      	movs	r6, #1
 801a170:	4630      	mov	r0, r6
 801a172:	b002      	add	sp, #8
 801a174:	bd70      	pop	{r4, r5, r6, pc}
 801a176:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801a17a:	4630      	mov	r0, r6
 801a17c:	b002      	add	sp, #8
 801a17e:	bd70      	pop	{r4, r5, r6, pc}
 801a180:	260b      	movs	r6, #11
 801a182:	4630      	mov	r0, r6
 801a184:	b002      	add	sp, #8
 801a186:	bd70      	pop	{r4, r5, r6, pc}
 801a188:	6820      	ldr	r0, [r4, #0]
 801a18a:	2105      	movs	r1, #5
 801a18c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a190:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801a194:	9100      	str	r1, [sp, #0]
 801a196:	f002 fa77 	bl	801c688 <__atomic_exchange_8>
 801a19a:	4630      	mov	r0, r6
 801a19c:	b002      	add	sp, #8
 801a19e:	bd70      	pop	{r4, r5, r6, pc}

0801a1a0 <rcl_take_response>:
 801a1a0:	b570      	push	{r4, r5, r6, lr}
 801a1a2:	468e      	mov	lr, r1
 801a1a4:	b08c      	sub	sp, #48	; 0x30
 801a1a6:	460c      	mov	r4, r1
 801a1a8:	4616      	mov	r6, r2
 801a1aa:	f10d 0c18 	add.w	ip, sp, #24
 801a1ae:	4605      	mov	r5, r0
 801a1b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a1b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a1b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a1bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a1c0:	b35d      	cbz	r5, 801a21a <rcl_take_response+0x7a>
 801a1c2:	682b      	ldr	r3, [r5, #0]
 801a1c4:	b34b      	cbz	r3, 801a21a <rcl_take_response+0x7a>
 801a1c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801a1ca:	b330      	cbz	r0, 801a21a <rcl_take_response+0x7a>
 801a1cc:	b346      	cbz	r6, 801a220 <rcl_take_response+0x80>
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	4632      	mov	r2, r6
 801a1d2:	a902      	add	r1, sp, #8
 801a1d4:	f88d 3007 	strb.w	r3, [sp, #7]
 801a1d8:	f10d 0307 	add.w	r3, sp, #7
 801a1dc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801a228 <rcl_take_response+0x88>
 801a1e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a1e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a1e8:	f7fa ffc2 	bl	8015170 <rmw_take_response>
 801a1ec:	4605      	mov	r5, r0
 801a1ee:	b9c8      	cbnz	r0, 801a224 <rcl_take_response+0x84>
 801a1f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a1f4:	f240 13f5 	movw	r3, #501	; 0x1f5
 801a1f8:	2a00      	cmp	r2, #0
 801a1fa:	bf08      	it	eq
 801a1fc:	461d      	moveq	r5, r3
 801a1fe:	f10d 0e18 	add.w	lr, sp, #24
 801a202:	46a4      	mov	ip, r4
 801a204:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a20c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a210:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a214:	4628      	mov	r0, r5
 801a216:	b00c      	add	sp, #48	; 0x30
 801a218:	bd70      	pop	{r4, r5, r6, pc}
 801a21a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801a21e:	e7ee      	b.n	801a1fe <rcl_take_response+0x5e>
 801a220:	250b      	movs	r5, #11
 801a222:	e7ec      	b.n	801a1fe <rcl_take_response+0x5e>
 801a224:	2501      	movs	r5, #1
 801a226:	e7ea      	b.n	801a1fe <rcl_take_response+0x5e>
	...

0801a230 <rcl_client_is_valid>:
 801a230:	b130      	cbz	r0, 801a240 <rcl_client_is_valid+0x10>
 801a232:	6800      	ldr	r0, [r0, #0]
 801a234:	b120      	cbz	r0, 801a240 <rcl_client_is_valid+0x10>
 801a236:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801a23a:	3800      	subs	r0, #0
 801a23c:	bf18      	it	ne
 801a23e:	2001      	movne	r0, #1
 801a240:	4770      	bx	lr
 801a242:	bf00      	nop

0801a244 <rcl_convert_rmw_ret_to_rcl_ret>:
 801a244:	280b      	cmp	r0, #11
 801a246:	dc0d      	bgt.n	801a264 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801a248:	2800      	cmp	r0, #0
 801a24a:	db09      	blt.n	801a260 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801a24c:	280b      	cmp	r0, #11
 801a24e:	d807      	bhi.n	801a260 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801a250:	e8df f000 	tbb	[pc, r0]
 801a254:	07060607 	.word	0x07060607
 801a258:	06060606 	.word	0x06060606
 801a25c:	07070606 	.word	0x07070606
 801a260:	2001      	movs	r0, #1
 801a262:	4770      	bx	lr
 801a264:	28cb      	cmp	r0, #203	; 0xcb
 801a266:	bf18      	it	ne
 801a268:	2001      	movne	r0, #1
 801a26a:	4770      	bx	lr

0801a26c <rcl_get_zero_initialized_context>:
 801a26c:	4a03      	ldr	r2, [pc, #12]	; (801a27c <rcl_get_zero_initialized_context+0x10>)
 801a26e:	4603      	mov	r3, r0
 801a270:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a274:	e883 0003 	stmia.w	r3, {r0, r1}
 801a278:	4618      	mov	r0, r3
 801a27a:	4770      	bx	lr
 801a27c:	08024674 	.word	0x08024674

0801a280 <rcl_context_is_valid>:
 801a280:	b118      	cbz	r0, 801a28a <rcl_context_is_valid+0xa>
 801a282:	6840      	ldr	r0, [r0, #4]
 801a284:	3800      	subs	r0, #0
 801a286:	bf18      	it	ne
 801a288:	2001      	movne	r0, #1
 801a28a:	4770      	bx	lr

0801a28c <__cleanup_context>:
 801a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a290:	4606      	mov	r6, r0
 801a292:	2300      	movs	r3, #0
 801a294:	6800      	ldr	r0, [r0, #0]
 801a296:	6073      	str	r3, [r6, #4]
 801a298:	2800      	cmp	r0, #0
 801a29a:	d049      	beq.n	801a330 <__cleanup_context+0xa4>
 801a29c:	6947      	ldr	r7, [r0, #20]
 801a29e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a2a2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801a2a6:	b137      	cbz	r7, 801a2b6 <__cleanup_context+0x2a>
 801a2a8:	3014      	adds	r0, #20
 801a2aa:	f7f8 f845 	bl	8012338 <rcl_init_options_fini>
 801a2ae:	4607      	mov	r7, r0
 801a2b0:	2800      	cmp	r0, #0
 801a2b2:	d144      	bne.n	801a33e <__cleanup_context+0xb2>
 801a2b4:	6830      	ldr	r0, [r6, #0]
 801a2b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a2b8:	b143      	cbz	r3, 801a2cc <__cleanup_context+0x40>
 801a2ba:	3028      	adds	r0, #40	; 0x28
 801a2bc:	f7fa fb58 	bl	8014970 <rmw_context_fini>
 801a2c0:	b118      	cbz	r0, 801a2ca <__cleanup_context+0x3e>
 801a2c2:	2f00      	cmp	r7, #0
 801a2c4:	d03e      	beq.n	801a344 <__cleanup_context+0xb8>
 801a2c6:	f7f9 fe17 	bl	8013ef8 <rcutils_reset_error>
 801a2ca:	6830      	ldr	r0, [r6, #0]
 801a2cc:	6a03      	ldr	r3, [r0, #32]
 801a2ce:	b1db      	cbz	r3, 801a308 <__cleanup_context+0x7c>
 801a2d0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801a2d4:	2a01      	cmp	r2, #1
 801a2d6:	f17c 0100 	sbcs.w	r1, ip, #0
 801a2da:	db11      	blt.n	801a300 <__cleanup_context+0x74>
 801a2dc:	2400      	movs	r4, #0
 801a2de:	4625      	mov	r5, r4
 801a2e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a2e4:	4649      	mov	r1, r9
 801a2e6:	b1b8      	cbz	r0, 801a318 <__cleanup_context+0x8c>
 801a2e8:	47c0      	blx	r8
 801a2ea:	6833      	ldr	r3, [r6, #0]
 801a2ec:	3401      	adds	r4, #1
 801a2ee:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801a2f2:	f145 0500 	adc.w	r5, r5, #0
 801a2f6:	6a1b      	ldr	r3, [r3, #32]
 801a2f8:	4294      	cmp	r4, r2
 801a2fa:	eb75 010c 	sbcs.w	r1, r5, ip
 801a2fe:	dbef      	blt.n	801a2e0 <__cleanup_context+0x54>
 801a300:	4618      	mov	r0, r3
 801a302:	4649      	mov	r1, r9
 801a304:	47c0      	blx	r8
 801a306:	6830      	ldr	r0, [r6, #0]
 801a308:	4649      	mov	r1, r9
 801a30a:	47c0      	blx	r8
 801a30c:	2300      	movs	r3, #0
 801a30e:	4638      	mov	r0, r7
 801a310:	e9c6 3300 	strd	r3, r3, [r6]
 801a314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a318:	3401      	adds	r4, #1
 801a31a:	f145 0500 	adc.w	r5, r5, #0
 801a31e:	4294      	cmp	r4, r2
 801a320:	eb75 010c 	sbcs.w	r1, r5, ip
 801a324:	dbdc      	blt.n	801a2e0 <__cleanup_context+0x54>
 801a326:	4618      	mov	r0, r3
 801a328:	4649      	mov	r1, r9
 801a32a:	47c0      	blx	r8
 801a32c:	6830      	ldr	r0, [r6, #0]
 801a32e:	e7eb      	b.n	801a308 <__cleanup_context+0x7c>
 801a330:	4607      	mov	r7, r0
 801a332:	2300      	movs	r3, #0
 801a334:	4638      	mov	r0, r7
 801a336:	e9c6 3300 	strd	r3, r3, [r6]
 801a33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a33e:	f7f9 fddb 	bl	8013ef8 <rcutils_reset_error>
 801a342:	e7b7      	b.n	801a2b4 <__cleanup_context+0x28>
 801a344:	f7ff ff7e 	bl	801a244 <rcl_convert_rmw_ret_to_rcl_ret>
 801a348:	4607      	mov	r7, r0
 801a34a:	e7bc      	b.n	801a2c6 <__cleanup_context+0x3a>

0801a34c <rcl_get_zero_initialized_guard_condition>:
 801a34c:	4a03      	ldr	r2, [pc, #12]	; (801a35c <rcl_get_zero_initialized_guard_condition+0x10>)
 801a34e:	4603      	mov	r3, r0
 801a350:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a354:	e883 0003 	stmia.w	r3, {r0, r1}
 801a358:	4618      	mov	r0, r3
 801a35a:	4770      	bx	lr
 801a35c:	0802467c 	.word	0x0802467c

0801a360 <rcl_guard_condition_init_from_rmw>:
 801a360:	b082      	sub	sp, #8
 801a362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a366:	b086      	sub	sp, #24
 801a368:	4604      	mov	r4, r0
 801a36a:	460e      	mov	r6, r1
 801a36c:	4615      	mov	r5, r2
 801a36e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a372:	f10d 0e04 	add.w	lr, sp, #4
 801a376:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a37a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a37e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a382:	f8dc 3000 	ldr.w	r3, [ip]
 801a386:	a801      	add	r0, sp, #4
 801a388:	f8ce 3000 	str.w	r3, [lr]
 801a38c:	f7f9 fd76 	bl	8013e7c <rcutils_allocator_is_valid>
 801a390:	f080 0301 	eor.w	r3, r0, #1
 801a394:	b2db      	uxtb	r3, r3
 801a396:	bb3b      	cbnz	r3, 801a3e8 <rcl_guard_condition_init_from_rmw+0x88>
 801a398:	b334      	cbz	r4, 801a3e8 <rcl_guard_condition_init_from_rmw+0x88>
 801a39a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a39e:	f1b8 0f00 	cmp.w	r8, #0
 801a3a2:	d11a      	bne.n	801a3da <rcl_guard_condition_init_from_rmw+0x7a>
 801a3a4:	b305      	cbz	r5, 801a3e8 <rcl_guard_condition_init_from_rmw+0x88>
 801a3a6:	4628      	mov	r0, r5
 801a3a8:	f7ff ff6a 	bl	801a280 <rcl_context_is_valid>
 801a3ac:	b1f0      	cbz	r0, 801a3ec <rcl_guard_condition_init_from_rmw+0x8c>
 801a3ae:	9b01      	ldr	r3, [sp, #4]
 801a3b0:	201c      	movs	r0, #28
 801a3b2:	9905      	ldr	r1, [sp, #20]
 801a3b4:	4798      	blx	r3
 801a3b6:	4607      	mov	r7, r0
 801a3b8:	6060      	str	r0, [r4, #4]
 801a3ba:	b320      	cbz	r0, 801a406 <rcl_guard_condition_init_from_rmw+0xa6>
 801a3bc:	b1c6      	cbz	r6, 801a3f0 <rcl_guard_condition_init_from_rmw+0x90>
 801a3be:	6006      	str	r6, [r0, #0]
 801a3c0:	f880 8004 	strb.w	r8, [r0, #4]
 801a3c4:	ac01      	add	r4, sp, #4
 801a3c6:	f107 0c08 	add.w	ip, r7, #8
 801a3ca:	2500      	movs	r5, #0
 801a3cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a3ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3d2:	6823      	ldr	r3, [r4, #0]
 801a3d4:	f8cc 3000 	str.w	r3, [ip]
 801a3d8:	e000      	b.n	801a3dc <rcl_guard_condition_init_from_rmw+0x7c>
 801a3da:	2564      	movs	r5, #100	; 0x64
 801a3dc:	4628      	mov	r0, r5
 801a3de:	b006      	add	sp, #24
 801a3e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3e4:	b002      	add	sp, #8
 801a3e6:	4770      	bx	lr
 801a3e8:	250b      	movs	r5, #11
 801a3ea:	e7f7      	b.n	801a3dc <rcl_guard_condition_init_from_rmw+0x7c>
 801a3ec:	2565      	movs	r5, #101	; 0x65
 801a3ee:	e7f5      	b.n	801a3dc <rcl_guard_condition_init_from_rmw+0x7c>
 801a3f0:	6828      	ldr	r0, [r5, #0]
 801a3f2:	3028      	adds	r0, #40	; 0x28
 801a3f4:	f002 fd56 	bl	801cea4 <rmw_create_guard_condition>
 801a3f8:	6038      	str	r0, [r7, #0]
 801a3fa:	6867      	ldr	r7, [r4, #4]
 801a3fc:	683e      	ldr	r6, [r7, #0]
 801a3fe:	b126      	cbz	r6, 801a40a <rcl_guard_condition_init_from_rmw+0xaa>
 801a400:	2301      	movs	r3, #1
 801a402:	713b      	strb	r3, [r7, #4]
 801a404:	e7de      	b.n	801a3c4 <rcl_guard_condition_init_from_rmw+0x64>
 801a406:	250a      	movs	r5, #10
 801a408:	e7e8      	b.n	801a3dc <rcl_guard_condition_init_from_rmw+0x7c>
 801a40a:	9b02      	ldr	r3, [sp, #8]
 801a40c:	4638      	mov	r0, r7
 801a40e:	9905      	ldr	r1, [sp, #20]
 801a410:	2501      	movs	r5, #1
 801a412:	4798      	blx	r3
 801a414:	6066      	str	r6, [r4, #4]
 801a416:	e7e1      	b.n	801a3dc <rcl_guard_condition_init_from_rmw+0x7c>

0801a418 <rcl_guard_condition_fini>:
 801a418:	b570      	push	{r4, r5, r6, lr}
 801a41a:	b082      	sub	sp, #8
 801a41c:	b1f0      	cbz	r0, 801a45c <rcl_guard_condition_fini+0x44>
 801a41e:	6843      	ldr	r3, [r0, #4]
 801a420:	4604      	mov	r4, r0
 801a422:	b163      	cbz	r3, 801a43e <rcl_guard_condition_fini+0x26>
 801a424:	6818      	ldr	r0, [r3, #0]
 801a426:	68de      	ldr	r6, [r3, #12]
 801a428:	6999      	ldr	r1, [r3, #24]
 801a42a:	b160      	cbz	r0, 801a446 <rcl_guard_condition_fini+0x2e>
 801a42c:	791d      	ldrb	r5, [r3, #4]
 801a42e:	b965      	cbnz	r5, 801a44a <rcl_guard_condition_fini+0x32>
 801a430:	4618      	mov	r0, r3
 801a432:	47b0      	blx	r6
 801a434:	2300      	movs	r3, #0
 801a436:	4628      	mov	r0, r5
 801a438:	6063      	str	r3, [r4, #4]
 801a43a:	b002      	add	sp, #8
 801a43c:	bd70      	pop	{r4, r5, r6, pc}
 801a43e:	461d      	mov	r5, r3
 801a440:	4628      	mov	r0, r5
 801a442:	b002      	add	sp, #8
 801a444:	bd70      	pop	{r4, r5, r6, pc}
 801a446:	4605      	mov	r5, r0
 801a448:	e7f2      	b.n	801a430 <rcl_guard_condition_fini+0x18>
 801a44a:	9101      	str	r1, [sp, #4]
 801a44c:	f002 fd40 	bl	801ced0 <rmw_destroy_guard_condition>
 801a450:	1e05      	subs	r5, r0, #0
 801a452:	6863      	ldr	r3, [r4, #4]
 801a454:	9901      	ldr	r1, [sp, #4]
 801a456:	bf18      	it	ne
 801a458:	2501      	movne	r5, #1
 801a45a:	e7e9      	b.n	801a430 <rcl_guard_condition_fini+0x18>
 801a45c:	250b      	movs	r5, #11
 801a45e:	4628      	mov	r0, r5
 801a460:	b002      	add	sp, #8
 801a462:	bd70      	pop	{r4, r5, r6, pc}

0801a464 <rcl_guard_condition_get_default_options>:
 801a464:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a466:	b087      	sub	sp, #28
 801a468:	4606      	mov	r6, r0
 801a46a:	4c0b      	ldr	r4, [pc, #44]	; (801a498 <rcl_guard_condition_get_default_options+0x34>)
 801a46c:	4668      	mov	r0, sp
 801a46e:	f7f9 fcf7 	bl	8013e60 <rcutils_get_default_allocator>
 801a472:	46ee      	mov	lr, sp
 801a474:	46a4      	mov	ip, r4
 801a476:	4625      	mov	r5, r4
 801a478:	4634      	mov	r4, r6
 801a47a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a47e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a484:	f8de 7000 	ldr.w	r7, [lr]
 801a488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a48a:	4630      	mov	r0, r6
 801a48c:	f8cc 7000 	str.w	r7, [ip]
 801a490:	6027      	str	r7, [r4, #0]
 801a492:	b007      	add	sp, #28
 801a494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a496:	bf00      	nop
 801a498:	20016e00 	.word	0x20016e00

0801a49c <rcl_guard_condition_get_rmw_handle>:
 801a49c:	b110      	cbz	r0, 801a4a4 <rcl_guard_condition_get_rmw_handle+0x8>
 801a49e:	6840      	ldr	r0, [r0, #4]
 801a4a0:	b100      	cbz	r0, 801a4a4 <rcl_guard_condition_get_rmw_handle+0x8>
 801a4a2:	6800      	ldr	r0, [r0, #0]
 801a4a4:	4770      	bx	lr
 801a4a6:	bf00      	nop

0801a4a8 <rcl_init>:
 801a4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4ac:	1e05      	subs	r5, r0, #0
 801a4ae:	b09e      	sub	sp, #120	; 0x78
 801a4b0:	460e      	mov	r6, r1
 801a4b2:	4690      	mov	r8, r2
 801a4b4:	461f      	mov	r7, r3
 801a4b6:	f340 809f 	ble.w	801a5f8 <rcl_init+0x150>
 801a4ba:	2900      	cmp	r1, #0
 801a4bc:	f000 809f 	beq.w	801a5fe <rcl_init+0x156>
 801a4c0:	f1a1 0e04 	sub.w	lr, r1, #4
 801a4c4:	f04f 0c00 	mov.w	ip, #0
 801a4c8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801a4cc:	f10c 0c01 	add.w	ip, ip, #1
 801a4d0:	2c00      	cmp	r4, #0
 801a4d2:	f000 8094 	beq.w	801a5fe <rcl_init+0x156>
 801a4d6:	4565      	cmp	r5, ip
 801a4d8:	d1f6      	bne.n	801a4c8 <rcl_init+0x20>
 801a4da:	f1b8 0f00 	cmp.w	r8, #0
 801a4de:	f000 808e 	beq.w	801a5fe <rcl_init+0x156>
 801a4e2:	f8d8 4000 	ldr.w	r4, [r8]
 801a4e6:	2c00      	cmp	r4, #0
 801a4e8:	f000 8089 	beq.w	801a5fe <rcl_init+0x156>
 801a4ec:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801a4f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a4f6:	6823      	ldr	r3, [r4, #0]
 801a4f8:	a819      	add	r0, sp, #100	; 0x64
 801a4fa:	f8cc 3000 	str.w	r3, [ip]
 801a4fe:	f7f9 fcbd 	bl	8013e7c <rcutils_allocator_is_valid>
 801a502:	f080 0001 	eor.w	r0, r0, #1
 801a506:	b2c0      	uxtb	r0, r0
 801a508:	2800      	cmp	r0, #0
 801a50a:	d178      	bne.n	801a5fe <rcl_init+0x156>
 801a50c:	2f00      	cmp	r7, #0
 801a50e:	d076      	beq.n	801a5fe <rcl_init+0x156>
 801a510:	683b      	ldr	r3, [r7, #0]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d178      	bne.n	801a608 <rcl_init+0x160>
 801a516:	2178      	movs	r1, #120	; 0x78
 801a518:	2001      	movs	r0, #1
 801a51a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801a51e:	4798      	blx	r3
 801a520:	4604      	mov	r4, r0
 801a522:	6038      	str	r0, [r7, #0]
 801a524:	2800      	cmp	r0, #0
 801a526:	f000 80b6 	beq.w	801a696 <rcl_init+0x1ee>
 801a52a:	a802      	add	r0, sp, #8
 801a52c:	f002 fa4c 	bl	801c9c8 <rmw_get_zero_initialized_context>
 801a530:	a902      	add	r1, sp, #8
 801a532:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801a536:	2250      	movs	r2, #80	; 0x50
 801a538:	f005 fc01 	bl	801fd3e <memcpy>
 801a53c:	ac19      	add	r4, sp, #100	; 0x64
 801a53e:	f8d7 e000 	ldr.w	lr, [r7]
 801a542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a544:	46f4      	mov	ip, lr
 801a546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a54a:	6823      	ldr	r3, [r4, #0]
 801a54c:	f10e 0114 	add.w	r1, lr, #20
 801a550:	4640      	mov	r0, r8
 801a552:	f8cc 3000 	str.w	r3, [ip]
 801a556:	f7f7 ff19 	bl	801238c <rcl_init_options_copy>
 801a55a:	4604      	mov	r4, r0
 801a55c:	2800      	cmp	r0, #0
 801a55e:	d144      	bne.n	801a5ea <rcl_init+0x142>
 801a560:	f8d7 9000 	ldr.w	r9, [r7]
 801a564:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801a568:	f8c9 0020 	str.w	r0, [r9, #32]
 801a56c:	f8c9 5018 	str.w	r5, [r9, #24]
 801a570:	f8c9 801c 	str.w	r8, [r9, #28]
 801a574:	2d00      	cmp	r5, #0
 801a576:	d04e      	beq.n	801a616 <rcl_init+0x16e>
 801a578:	2e00      	cmp	r6, #0
 801a57a:	d04c      	beq.n	801a616 <rcl_init+0x16e>
 801a57c:	2104      	movs	r1, #4
 801a57e:	4628      	mov	r0, r5
 801a580:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801a584:	4798      	blx	r3
 801a586:	f8c9 0020 	str.w	r0, [r9, #32]
 801a58a:	f8d7 9000 	ldr.w	r9, [r7]
 801a58e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801a592:	46ca      	mov	sl, r9
 801a594:	b343      	cbz	r3, 801a5e8 <rcl_init+0x140>
 801a596:	2d01      	cmp	r5, #1
 801a598:	f178 0300 	sbcs.w	r3, r8, #0
 801a59c:	db3b      	blt.n	801a616 <rcl_init+0x16e>
 801a59e:	2400      	movs	r4, #0
 801a5a0:	3e04      	subs	r6, #4
 801a5a2:	46a1      	mov	r9, r4
 801a5a4:	e00b      	b.n	801a5be <rcl_init+0x116>
 801a5a6:	6831      	ldr	r1, [r6, #0]
 801a5a8:	f005 fbc9 	bl	801fd3e <memcpy>
 801a5ac:	3401      	adds	r4, #1
 801a5ae:	f149 0900 	adc.w	r9, r9, #0
 801a5b2:	45c8      	cmp	r8, r9
 801a5b4:	bf08      	it	eq
 801a5b6:	42a5      	cmpeq	r5, r4
 801a5b8:	d02b      	beq.n	801a612 <rcl_init+0x16a>
 801a5ba:	f8d7 a000 	ldr.w	sl, [r7]
 801a5be:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801a5c2:	f7e5 fe9d 	bl	8000300 <strlen>
 801a5c6:	1c42      	adds	r2, r0, #1
 801a5c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a5ca:	4610      	mov	r0, r2
 801a5cc:	991d      	ldr	r1, [sp, #116]	; 0x74
 801a5ce:	f8da a020 	ldr.w	sl, [sl, #32]
 801a5d2:	9201      	str	r2, [sp, #4]
 801a5d4:	4798      	blx	r3
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801a5dc:	6a1b      	ldr	r3, [r3, #32]
 801a5de:	9a01      	ldr	r2, [sp, #4]
 801a5e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a5e4:	2800      	cmp	r0, #0
 801a5e6:	d1de      	bne.n	801a5a6 <rcl_init+0xfe>
 801a5e8:	240a      	movs	r4, #10
 801a5ea:	4638      	mov	r0, r7
 801a5ec:	f7ff fe4e 	bl	801a28c <__cleanup_context>
 801a5f0:	4620      	mov	r0, r4
 801a5f2:	b01e      	add	sp, #120	; 0x78
 801a5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5f8:	2900      	cmp	r1, #0
 801a5fa:	f43f af6e 	beq.w	801a4da <rcl_init+0x32>
 801a5fe:	240b      	movs	r4, #11
 801a600:	4620      	mov	r0, r4
 801a602:	b01e      	add	sp, #120	; 0x78
 801a604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a608:	2464      	movs	r4, #100	; 0x64
 801a60a:	4620      	mov	r0, r4
 801a60c:	b01e      	add	sp, #120	; 0x78
 801a60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a612:	f8d7 9000 	ldr.w	r9, [r7]
 801a616:	4926      	ldr	r1, [pc, #152]	; (801a6b0 <rcl_init+0x208>)
 801a618:	680b      	ldr	r3, [r1, #0]
 801a61a:	3301      	adds	r3, #1
 801a61c:	d036      	beq.n	801a68c <rcl_init+0x1e4>
 801a61e:	461a      	mov	r2, r3
 801a620:	2400      	movs	r4, #0
 801a622:	600b      	str	r3, [r1, #0]
 801a624:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801a628:	607b      	str	r3, [r7, #4]
 801a62a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a62c:	3301      	adds	r3, #1
 801a62e:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801a632:	d034      	beq.n	801a69e <rcl_init+0x1f6>
 801a634:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801a638:	b93b      	cbnz	r3, 801a64a <rcl_init+0x1a2>
 801a63a:	3030      	adds	r0, #48	; 0x30
 801a63c:	f000 f83a 	bl	801a6b4 <rcl_get_localhost_only>
 801a640:	4604      	mov	r4, r0
 801a642:	2800      	cmp	r0, #0
 801a644:	d1d1      	bne.n	801a5ea <rcl_init+0x142>
 801a646:	683b      	ldr	r3, [r7, #0]
 801a648:	6958      	ldr	r0, [r3, #20]
 801a64a:	aa18      	add	r2, sp, #96	; 0x60
 801a64c:	a917      	add	r1, sp, #92	; 0x5c
 801a64e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a650:	f000 fc38 	bl	801aec4 <rcl_validate_enclave_name>
 801a654:	4604      	mov	r4, r0
 801a656:	2800      	cmp	r0, #0
 801a658:	d1c7      	bne.n	801a5ea <rcl_init+0x142>
 801a65a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a65c:	b9eb      	cbnz	r3, 801a69a <rcl_init+0x1f2>
 801a65e:	6839      	ldr	r1, [r7, #0]
 801a660:	694b      	ldr	r3, [r1, #20]
 801a662:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801a666:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801a668:	f000 f9c8 	bl	801a9fc <rcl_get_security_options_from_environment>
 801a66c:	4604      	mov	r4, r0
 801a66e:	2800      	cmp	r0, #0
 801a670:	d1bb      	bne.n	801a5ea <rcl_init+0x142>
 801a672:	6839      	ldr	r1, [r7, #0]
 801a674:	6948      	ldr	r0, [r1, #20]
 801a676:	3128      	adds	r1, #40	; 0x28
 801a678:	3018      	adds	r0, #24
 801a67a:	f7fa f843 	bl	8014704 <rmw_init>
 801a67e:	4604      	mov	r4, r0
 801a680:	2800      	cmp	r0, #0
 801a682:	d0bd      	beq.n	801a600 <rcl_init+0x158>
 801a684:	f7ff fdde 	bl	801a244 <rcl_convert_rmw_ret_to_rcl_ret>
 801a688:	4604      	mov	r4, r0
 801a68a:	e7ae      	b.n	801a5ea <rcl_init+0x142>
 801a68c:	2201      	movs	r2, #1
 801a68e:	461c      	mov	r4, r3
 801a690:	600a      	str	r2, [r1, #0]
 801a692:	4613      	mov	r3, r2
 801a694:	e7c6      	b.n	801a624 <rcl_init+0x17c>
 801a696:	240a      	movs	r4, #10
 801a698:	e7b2      	b.n	801a600 <rcl_init+0x158>
 801a69a:	2401      	movs	r4, #1
 801a69c:	e7a5      	b.n	801a5ea <rcl_init+0x142>
 801a69e:	3024      	adds	r0, #36	; 0x24
 801a6a0:	f003 fbc6 	bl	801de30 <rcl_get_default_domain_id>
 801a6a4:	4604      	mov	r4, r0
 801a6a6:	2800      	cmp	r0, #0
 801a6a8:	d19f      	bne.n	801a5ea <rcl_init+0x142>
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	6958      	ldr	r0, [r3, #20]
 801a6ae:	e7c1      	b.n	801a634 <rcl_init+0x18c>
 801a6b0:	20016e14 	.word	0x20016e14

0801a6b4 <rcl_get_localhost_only>:
 801a6b4:	b510      	push	{r4, lr}
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	b082      	sub	sp, #8
 801a6ba:	9301      	str	r3, [sp, #4]
 801a6bc:	b1b8      	cbz	r0, 801a6ee <rcl_get_localhost_only+0x3a>
 801a6be:	4604      	mov	r4, r0
 801a6c0:	a901      	add	r1, sp, #4
 801a6c2:	480c      	ldr	r0, [pc, #48]	; (801a6f4 <rcl_get_localhost_only+0x40>)
 801a6c4:	f7f9 fbe8 	bl	8013e98 <rcutils_get_env>
 801a6c8:	b110      	cbz	r0, 801a6d0 <rcl_get_localhost_only+0x1c>
 801a6ca:	2001      	movs	r0, #1
 801a6cc:	b002      	add	sp, #8
 801a6ce:	bd10      	pop	{r4, pc}
 801a6d0:	9b01      	ldr	r3, [sp, #4]
 801a6d2:	b113      	cbz	r3, 801a6da <rcl_get_localhost_only+0x26>
 801a6d4:	781a      	ldrb	r2, [r3, #0]
 801a6d6:	2a31      	cmp	r2, #49	; 0x31
 801a6d8:	d004      	beq.n	801a6e4 <rcl_get_localhost_only+0x30>
 801a6da:	2302      	movs	r3, #2
 801a6dc:	2000      	movs	r0, #0
 801a6de:	7023      	strb	r3, [r4, #0]
 801a6e0:	b002      	add	sp, #8
 801a6e2:	bd10      	pop	{r4, pc}
 801a6e4:	785b      	ldrb	r3, [r3, #1]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d1f7      	bne.n	801a6da <rcl_get_localhost_only+0x26>
 801a6ea:	2301      	movs	r3, #1
 801a6ec:	e7f6      	b.n	801a6dc <rcl_get_localhost_only+0x28>
 801a6ee:	200b      	movs	r0, #11
 801a6f0:	b002      	add	sp, #8
 801a6f2:	bd10      	pop	{r4, pc}
 801a6f4:	08024684 	.word	0x08024684

0801a6f8 <rcl_node_resolve_name>:
 801a6f8:	b082      	sub	sp, #8
 801a6fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6fe:	b091      	sub	sp, #68	; 0x44
 801a700:	ac1a      	add	r4, sp, #104	; 0x68
 801a702:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801a706:	e884 000c 	stmia.w	r4, {r2, r3}
 801a70a:	2800      	cmp	r0, #0
 801a70c:	d03d      	beq.n	801a78a <rcl_node_resolve_name+0x92>
 801a70e:	460c      	mov	r4, r1
 801a710:	4605      	mov	r5, r0
 801a712:	f7f8 f81d 	bl	8012750 <rcl_node_get_options>
 801a716:	2800      	cmp	r0, #0
 801a718:	d03a      	beq.n	801a790 <rcl_node_resolve_name+0x98>
 801a71a:	4628      	mov	r0, r5
 801a71c:	f7f8 f808 	bl	8012730 <rcl_node_get_name>
 801a720:	4606      	mov	r6, r0
 801a722:	4628      	mov	r0, r5
 801a724:	ad0b      	add	r5, sp, #44	; 0x2c
 801a726:	f7f8 f80b 	bl	8012740 <rcl_node_get_namespace>
 801a72a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801a72e:	4607      	mov	r7, r0
 801a730:	46ac      	mov	ip, r5
 801a732:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a736:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a73a:	f8de 3000 	ldr.w	r3, [lr]
 801a73e:	f8cc 3000 	str.w	r3, [ip]
 801a742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a744:	b30b      	cbz	r3, 801a78a <rcl_node_resolve_name+0x92>
 801a746:	4689      	mov	r9, r1
 801a748:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801a74c:	f002 f80e 	bl	801c76c <rcutils_get_zero_initialized_string_map>
 801a750:	ab10      	add	r3, sp, #64	; 0x40
 801a752:	9008      	str	r0, [sp, #32]
 801a754:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801a758:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a75c:	2100      	movs	r1, #0
 801a75e:	a808      	add	r0, sp, #32
 801a760:	e895 000c 	ldmia.w	r5, {r2, r3}
 801a764:	f002 f878 	bl	801c858 <rcutils_string_map_init>
 801a768:	4683      	mov	fp, r0
 801a76a:	b1a0      	cbz	r0, 801a796 <rcl_node_resolve_name+0x9e>
 801a76c:	f7f9 fbac 	bl	8013ec8 <rcutils_get_error_string>
 801a770:	f7f9 fbc2 	bl	8013ef8 <rcutils_reset_error>
 801a774:	f1bb 0f0a 	cmp.w	fp, #10
 801a778:	bf18      	it	ne
 801a77a:	f04f 0b01 	movne.w	fp, #1
 801a77e:	4658      	mov	r0, fp
 801a780:	b011      	add	sp, #68	; 0x44
 801a782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a786:	b002      	add	sp, #8
 801a788:	4770      	bx	lr
 801a78a:	f04f 0b0b 	mov.w	fp, #11
 801a78e:	e7f6      	b.n	801a77e <rcl_node_resolve_name+0x86>
 801a790:	f04f 0b01 	mov.w	fp, #1
 801a794:	e7f3      	b.n	801a77e <rcl_node_resolve_name+0x86>
 801a796:	9009      	str	r0, [sp, #36]	; 0x24
 801a798:	9007      	str	r0, [sp, #28]
 801a79a:	a808      	add	r0, sp, #32
 801a79c:	f003 fcdc 	bl	801e158 <rcl_get_default_topic_name_substitutions>
 801a7a0:	4683      	mov	fp, r0
 801a7a2:	b180      	cbz	r0, 801a7c6 <rcl_node_resolve_name+0xce>
 801a7a4:	280a      	cmp	r0, #10
 801a7a6:	a808      	add	r0, sp, #32
 801a7a8:	bf18      	it	ne
 801a7aa:	f04f 0b01 	movne.w	fp, #1
 801a7ae:	f002 f893 	bl	801c8d8 <rcutils_string_map_fini>
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	2800      	cmp	r0, #0
 801a7b6:	d15b      	bne.n	801a870 <rcl_node_resolve_name+0x178>
 801a7b8:	4651      	mov	r1, sl
 801a7ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7bc:	47c8      	blx	r9
 801a7be:	4651      	mov	r1, sl
 801a7c0:	4620      	mov	r0, r4
 801a7c2:	47c8      	blx	r9
 801a7c4:	e7db      	b.n	801a77e <rcl_node_resolve_name+0x86>
 801a7c6:	ab09      	add	r3, sp, #36	; 0x24
 801a7c8:	46ec      	mov	ip, sp
 801a7ca:	9305      	str	r3, [sp, #20]
 801a7cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a7ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7d2:	682b      	ldr	r3, [r5, #0]
 801a7d4:	463a      	mov	r2, r7
 801a7d6:	4631      	mov	r1, r6
 801a7d8:	4620      	mov	r0, r4
 801a7da:	f8cc 3000 	str.w	r3, [ip]
 801a7de:	ab08      	add	r3, sp, #32
 801a7e0:	f003 fb5a 	bl	801de98 <rcl_expand_topic_name>
 801a7e4:	4683      	mov	fp, r0
 801a7e6:	b9d8      	cbnz	r0, 801a820 <rcl_node_resolve_name+0x128>
 801a7e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a7ea:	4602      	mov	r2, r0
 801a7ec:	9009      	str	r0, [sp, #36]	; 0x24
 801a7ee:	a90a      	add	r1, sp, #40	; 0x28
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	f002 f985 	bl	801cb00 <rmw_validate_full_topic_name>
 801a7f6:	bb50      	cbnz	r0, 801a84e <rcl_node_resolve_name+0x156>
 801a7f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a7fa:	2d00      	cmp	r5, #0
 801a7fc:	d140      	bne.n	801a880 <rcl_node_resolve_name+0x188>
 801a7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a800:	a808      	add	r0, sp, #32
 801a802:	601c      	str	r4, [r3, #0]
 801a804:	f002 f868 	bl	801c8d8 <rcutils_string_map_fini>
 801a808:	4683      	mov	fp, r0
 801a80a:	2800      	cmp	r0, #0
 801a80c:	d043      	beq.n	801a896 <rcl_node_resolve_name+0x19e>
 801a80e:	f7f9 fb5b 	bl	8013ec8 <rcutils_get_error_string>
 801a812:	46a8      	mov	r8, r5
 801a814:	f04f 0b01 	mov.w	fp, #1
 801a818:	462c      	mov	r4, r5
 801a81a:	f7f9 fb6d 	bl	8013ef8 <rcutils_reset_error>
 801a81e:	e00a      	b.n	801a836 <rcl_node_resolve_name+0x13e>
 801a820:	2867      	cmp	r0, #103	; 0x67
 801a822:	bf14      	ite	ne
 801a824:	f04f 0800 	movne.w	r8, #0
 801a828:	f008 0801 	andeq.w	r8, r8, #1
 801a82c:	9c07      	ldr	r4, [sp, #28]
 801a82e:	a808      	add	r0, sp, #32
 801a830:	f002 f852 	bl	801c8d8 <rcutils_string_map_fini>
 801a834:	bb50      	cbnz	r0, 801a88c <rcl_node_resolve_name+0x194>
 801a836:	4651      	mov	r1, sl
 801a838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a83a:	47c8      	blx	r9
 801a83c:	4651      	mov	r1, sl
 801a83e:	4620      	mov	r0, r4
 801a840:	47c8      	blx	r9
 801a842:	f1b8 0f00 	cmp.w	r8, #0
 801a846:	bf18      	it	ne
 801a848:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801a84c:	e797      	b.n	801a77e <rcl_node_resolve_name+0x86>
 801a84e:	f7f9 fb3b 	bl	8013ec8 <rcutils_get_error_string>
 801a852:	f7f9 fb51 	bl	8013ef8 <rcutils_reset_error>
 801a856:	a808      	add	r0, sp, #32
 801a858:	f002 f83e 	bl	801c8d8 <rcutils_string_map_fini>
 801a85c:	b998      	cbnz	r0, 801a886 <rcl_node_resolve_name+0x18e>
 801a85e:	4651      	mov	r1, sl
 801a860:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a862:	47c8      	blx	r9
 801a864:	4651      	mov	r1, sl
 801a866:	4620      	mov	r0, r4
 801a868:	f04f 0b01 	mov.w	fp, #1
 801a86c:	47c8      	blx	r9
 801a86e:	e786      	b.n	801a77e <rcl_node_resolve_name+0x86>
 801a870:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a874:	f7f9 fb28 	bl	8013ec8 <rcutils_get_error_string>
 801a878:	f7f9 fb3e 	bl	8013ef8 <rcutils_reset_error>
 801a87c:	4644      	mov	r4, r8
 801a87e:	e7da      	b.n	801a836 <rcl_node_resolve_name+0x13e>
 801a880:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a884:	e7d3      	b.n	801a82e <rcl_node_resolve_name+0x136>
 801a886:	46d8      	mov	r8, fp
 801a888:	f04f 0b01 	mov.w	fp, #1
 801a88c:	f7f9 fb1c 	bl	8013ec8 <rcutils_get_error_string>
 801a890:	f7f9 fb32 	bl	8013ef8 <rcutils_reset_error>
 801a894:	e7cf      	b.n	801a836 <rcl_node_resolve_name+0x13e>
 801a896:	4651      	mov	r1, sl
 801a898:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a89a:	47c8      	blx	r9
 801a89c:	4651      	mov	r1, sl
 801a89e:	4658      	mov	r0, fp
 801a8a0:	47c8      	blx	r9
 801a8a2:	e76c      	b.n	801a77e <rcl_node_resolve_name+0x86>

0801a8a4 <exact_match_lookup>:
 801a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8a6:	f102 0708 	add.w	r7, r2, #8
 801a8aa:	460b      	mov	r3, r1
 801a8ac:	b085      	sub	sp, #20
 801a8ae:	4614      	mov	r4, r2
 801a8b0:	4606      	mov	r6, r0
 801a8b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801a8b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a8ba:	4618      	mov	r0, r3
 801a8bc:	4919      	ldr	r1, [pc, #100]	; (801a924 <exact_match_lookup+0x80>)
 801a8be:	e894 000c 	ldmia.w	r4, {r2, r3}
 801a8c2:	f001 ff1b 	bl	801c6fc <rcutils_join_path>
 801a8c6:	7833      	ldrb	r3, [r6, #0]
 801a8c8:	4605      	mov	r5, r0
 801a8ca:	2b2f      	cmp	r3, #47	; 0x2f
 801a8cc:	d023      	beq.n	801a916 <exact_match_lookup+0x72>
 801a8ce:	f104 030c 	add.w	r3, r4, #12
 801a8d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a8d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a8da:	1c70      	adds	r0, r6, #1
 801a8dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801a8e0:	f001 ff12 	bl	801c708 <rcutils_to_native_path>
 801a8e4:	4606      	mov	r6, r0
 801a8e6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801a8ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a8ee:	4631      	mov	r1, r6
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 801a8f6:	f001 ff01 	bl	801c6fc <rcutils_join_path>
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	4630      	mov	r0, r6
 801a8fe:	6862      	ldr	r2, [r4, #4]
 801a900:	461e      	mov	r6, r3
 801a902:	6921      	ldr	r1, [r4, #16]
 801a904:	4790      	blx	r2
 801a906:	4628      	mov	r0, r5
 801a908:	4635      	mov	r5, r6
 801a90a:	6863      	ldr	r3, [r4, #4]
 801a90c:	6921      	ldr	r1, [r4, #16]
 801a90e:	4798      	blx	r3
 801a910:	4628      	mov	r0, r5
 801a912:	b005      	add	sp, #20
 801a914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a916:	7873      	ldrb	r3, [r6, #1]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d1d8      	bne.n	801a8ce <exact_match_lookup+0x2a>
 801a91c:	4628      	mov	r0, r5
 801a91e:	b005      	add	sp, #20
 801a920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a922:	bf00      	nop
 801a924:	080246d4 	.word	0x080246d4

0801a928 <rcl_get_secure_root>:
 801a928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a92c:	b085      	sub	sp, #20
 801a92e:	b168      	cbz	r0, 801a94c <rcl_get_secure_root+0x24>
 801a930:	4607      	mov	r7, r0
 801a932:	4608      	mov	r0, r1
 801a934:	460c      	mov	r4, r1
 801a936:	f7f9 faa1 	bl	8013e7c <rcutils_allocator_is_valid>
 801a93a:	b138      	cbz	r0, 801a94c <rcl_get_secure_root+0x24>
 801a93c:	2300      	movs	r3, #0
 801a93e:	482d      	ldr	r0, [pc, #180]	; (801a9f4 <rcl_get_secure_root+0xcc>)
 801a940:	a903      	add	r1, sp, #12
 801a942:	9303      	str	r3, [sp, #12]
 801a944:	f7f9 faa8 	bl	8013e98 <rcutils_get_env>
 801a948:	4605      	mov	r5, r0
 801a94a:	b120      	cbz	r0, 801a956 <rcl_get_secure_root+0x2e>
 801a94c:	2500      	movs	r5, #0
 801a94e:	4628      	mov	r0, r5
 801a950:	b005      	add	sp, #20
 801a952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a956:	9b03      	ldr	r3, [sp, #12]
 801a958:	781a      	ldrb	r2, [r3, #0]
 801a95a:	2a00      	cmp	r2, #0
 801a95c:	d0f6      	beq.n	801a94c <rcl_get_secure_root+0x24>
 801a95e:	f104 090c 	add.w	r9, r4, #12
 801a962:	e899 0003 	ldmia.w	r9, {r0, r1}
 801a966:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a96a:	4618      	mov	r0, r3
 801a96c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801a970:	f7f9 fc18 	bl	80141a4 <rcutils_strdup>
 801a974:	4680      	mov	r8, r0
 801a976:	2800      	cmp	r0, #0
 801a978:	d0e8      	beq.n	801a94c <rcl_get_secure_root+0x24>
 801a97a:	a903      	add	r1, sp, #12
 801a97c:	481e      	ldr	r0, [pc, #120]	; (801a9f8 <rcl_get_secure_root+0xd0>)
 801a97e:	9503      	str	r5, [sp, #12]
 801a980:	f7f9 fa8a 	bl	8013e98 <rcutils_get_env>
 801a984:	b160      	cbz	r0, 801a9a0 <rcl_get_secure_root+0x78>
 801a986:	2600      	movs	r6, #0
 801a988:	4630      	mov	r0, r6
 801a98a:	6863      	ldr	r3, [r4, #4]
 801a98c:	6921      	ldr	r1, [r4, #16]
 801a98e:	4798      	blx	r3
 801a990:	4640      	mov	r0, r8
 801a992:	6863      	ldr	r3, [r4, #4]
 801a994:	6921      	ldr	r1, [r4, #16]
 801a996:	4798      	blx	r3
 801a998:	4628      	mov	r0, r5
 801a99a:	b005      	add	sp, #20
 801a99c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9a0:	9b03      	ldr	r3, [sp, #12]
 801a9a2:	781e      	ldrb	r6, [r3, #0]
 801a9a4:	b1f6      	cbz	r6, 801a9e4 <rcl_get_secure_root+0xbc>
 801a9a6:	e899 0003 	ldmia.w	r9, {r0, r1}
 801a9aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a9ae:	4618      	mov	r0, r3
 801a9b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801a9b4:	f7f9 fbf6 	bl	80141a4 <rcutils_strdup>
 801a9b8:	4606      	mov	r6, r0
 801a9ba:	2800      	cmp	r0, #0
 801a9bc:	d0e3      	beq.n	801a986 <rcl_get_secure_root+0x5e>
 801a9be:	4622      	mov	r2, r4
 801a9c0:	4641      	mov	r1, r8
 801a9c2:	f7ff ff6f 	bl	801a8a4 <exact_match_lookup>
 801a9c6:	4605      	mov	r5, r0
 801a9c8:	2d00      	cmp	r5, #0
 801a9ca:	d0dd      	beq.n	801a988 <rcl_get_secure_root+0x60>
 801a9cc:	4628      	mov	r0, r5
 801a9ce:	f001 fe93 	bl	801c6f8 <rcutils_is_directory>
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	2800      	cmp	r0, #0
 801a9d6:	d1d7      	bne.n	801a988 <rcl_get_secure_root+0x60>
 801a9d8:	4628      	mov	r0, r5
 801a9da:	6921      	ldr	r1, [r4, #16]
 801a9dc:	461d      	mov	r5, r3
 801a9de:	6863      	ldr	r3, [r4, #4]
 801a9e0:	4798      	blx	r3
 801a9e2:	e7d1      	b.n	801a988 <rcl_get_secure_root+0x60>
 801a9e4:	4622      	mov	r2, r4
 801a9e6:	4638      	mov	r0, r7
 801a9e8:	4641      	mov	r1, r8
 801a9ea:	f7ff ff5b 	bl	801a8a4 <exact_match_lookup>
 801a9ee:	4605      	mov	r5, r0
 801a9f0:	e7ea      	b.n	801a9c8 <rcl_get_secure_root+0xa0>
 801a9f2:	bf00      	nop
 801a9f4:	080246e0 	.word	0x080246e0
 801a9f8:	080246f8 	.word	0x080246f8

0801a9fc <rcl_get_security_options_from_environment>:
 801a9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa00:	b082      	sub	sp, #8
 801aa02:	2300      	movs	r3, #0
 801aa04:	4606      	mov	r6, r0
 801aa06:	460f      	mov	r7, r1
 801aa08:	4821      	ldr	r0, [pc, #132]	; (801aa90 <rcl_get_security_options_from_environment+0x94>)
 801aa0a:	a901      	add	r1, sp, #4
 801aa0c:	4690      	mov	r8, r2
 801aa0e:	9301      	str	r3, [sp, #4]
 801aa10:	f7f9 fa42 	bl	8013e98 <rcutils_get_env>
 801aa14:	b120      	cbz	r0, 801aa20 <rcl_get_security_options_from_environment+0x24>
 801aa16:	2501      	movs	r5, #1
 801aa18:	4628      	mov	r0, r5
 801aa1a:	b002      	add	sp, #8
 801aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa20:	4604      	mov	r4, r0
 801aa22:	491c      	ldr	r1, [pc, #112]	; (801aa94 <rcl_get_security_options_from_environment+0x98>)
 801aa24:	9801      	ldr	r0, [sp, #4]
 801aa26:	f7e5 fc0b 	bl	8000240 <strcmp>
 801aa2a:	4605      	mov	r5, r0
 801aa2c:	b9f0      	cbnz	r0, 801aa6c <rcl_get_security_options_from_environment+0x70>
 801aa2e:	9001      	str	r0, [sp, #4]
 801aa30:	f1b8 0f00 	cmp.w	r8, #0
 801aa34:	d021      	beq.n	801aa7a <rcl_get_security_options_from_environment+0x7e>
 801aa36:	a901      	add	r1, sp, #4
 801aa38:	4817      	ldr	r0, [pc, #92]	; (801aa98 <rcl_get_security_options_from_environment+0x9c>)
 801aa3a:	f7f9 fa2d 	bl	8013e98 <rcutils_get_env>
 801aa3e:	2800      	cmp	r0, #0
 801aa40:	d1e9      	bne.n	801aa16 <rcl_get_security_options_from_environment+0x1a>
 801aa42:	4916      	ldr	r1, [pc, #88]	; (801aa9c <rcl_get_security_options_from_environment+0xa0>)
 801aa44:	9801      	ldr	r0, [sp, #4]
 801aa46:	f7e5 fbfb 	bl	8000240 <strcmp>
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	4639      	mov	r1, r7
 801aa4e:	4630      	mov	r0, r6
 801aa50:	fab3 f383 	clz	r3, r3
 801aa54:	095b      	lsrs	r3, r3, #5
 801aa56:	f888 3000 	strb.w	r3, [r8]
 801aa5a:	f7ff ff65 	bl	801a928 <rcl_get_secure_root>
 801aa5e:	b170      	cbz	r0, 801aa7e <rcl_get_security_options_from_environment+0x82>
 801aa60:	f8c8 0004 	str.w	r0, [r8, #4]
 801aa64:	4628      	mov	r0, r5
 801aa66:	b002      	add	sp, #8
 801aa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa6c:	4625      	mov	r5, r4
 801aa6e:	f888 4000 	strb.w	r4, [r8]
 801aa72:	4628      	mov	r0, r5
 801aa74:	b002      	add	sp, #8
 801aa76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa7a:	250b      	movs	r5, #11
 801aa7c:	e7cc      	b.n	801aa18 <rcl_get_security_options_from_environment+0x1c>
 801aa7e:	f898 5000 	ldrb.w	r5, [r8]
 801aa82:	f1a5 0501 	sub.w	r5, r5, #1
 801aa86:	fab5 f585 	clz	r5, r5
 801aa8a:	096d      	lsrs	r5, r5, #5
 801aa8c:	e7c4      	b.n	801aa18 <rcl_get_security_options_from_environment+0x1c>
 801aa8e:	bf00      	nop
 801aa90:	08024698 	.word	0x08024698
 801aa94:	080246ac 	.word	0x080246ac
 801aa98:	080246b4 	.word	0x080246b4
 801aa9c:	080246cc 	.word	0x080246cc

0801aaa0 <rcl_get_system_time>:
 801aaa0:	4608      	mov	r0, r1
 801aaa2:	f7f9 bbbd 	b.w	8014220 <rcutils_system_time_now>
 801aaa6:	bf00      	nop

0801aaa8 <rcl_get_steady_time>:
 801aaa8:	4608      	mov	r0, r1
 801aaaa:	f7f9 bbdf 	b.w	801426c <rcutils_steady_time_now>
 801aaae:	bf00      	nop

0801aab0 <rcl_get_ros_time>:
 801aab0:	7a03      	ldrb	r3, [r0, #8]
 801aab2:	b510      	push	{r4, lr}
 801aab4:	460c      	mov	r4, r1
 801aab6:	b143      	cbz	r3, 801aaca <rcl_get_ros_time+0x1a>
 801aab8:	2105      	movs	r1, #5
 801aaba:	f001 fd79 	bl	801c5b0 <__atomic_load_8>
 801aabe:	4602      	mov	r2, r0
 801aac0:	460b      	mov	r3, r1
 801aac2:	2000      	movs	r0, #0
 801aac4:	e9c4 2300 	strd	r2, r3, [r4]
 801aac8:	bd10      	pop	{r4, pc}
 801aaca:	4608      	mov	r0, r1
 801aacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aad0:	f7f9 bba6 	b.w	8014220 <rcutils_system_time_now>

0801aad4 <rcl_clock_init>:
 801aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aad6:	4605      	mov	r5, r0
 801aad8:	4610      	mov	r0, r2
 801aada:	4614      	mov	r4, r2
 801aadc:	460e      	mov	r6, r1
 801aade:	f7f9 f9cd 	bl	8013e7c <rcutils_allocator_is_valid>
 801aae2:	b128      	cbz	r0, 801aaf0 <rcl_clock_init+0x1c>
 801aae4:	2d03      	cmp	r5, #3
 801aae6:	d803      	bhi.n	801aaf0 <rcl_clock_init+0x1c>
 801aae8:	e8df f005 	tbb	[pc, r5]
 801aaec:	0659301f 	.word	0x0659301f
 801aaf0:	f04f 0c0b 	mov.w	ip, #11
 801aaf4:	4660      	mov	r0, ip
 801aaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aaf8:	2c00      	cmp	r4, #0
 801aafa:	d0f9      	beq.n	801aaf0 <rcl_clock_init+0x1c>
 801aafc:	fab6 f386 	clz	r3, r6
 801ab00:	095b      	lsrs	r3, r3, #5
 801ab02:	2e00      	cmp	r6, #0
 801ab04:	d0f4      	beq.n	801aaf0 <rcl_clock_init+0x1c>
 801ab06:	6133      	str	r3, [r6, #16]
 801ab08:	469c      	mov	ip, r3
 801ab0a:	f106 0514 	add.w	r5, r6, #20
 801ab0e:	4f32      	ldr	r7, [pc, #200]	; (801abd8 <rcl_clock_init+0x104>)
 801ab10:	f04f 0e03 	mov.w	lr, #3
 801ab14:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801ab18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab1c:	6823      	ldr	r3, [r4, #0]
 801ab1e:	4660      	mov	r0, ip
 801ab20:	602b      	str	r3, [r5, #0]
 801ab22:	60f7      	str	r7, [r6, #12]
 801ab24:	f886 e000 	strb.w	lr, [r6]
 801ab28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab2a:	2e00      	cmp	r6, #0
 801ab2c:	d0e0      	beq.n	801aaf0 <rcl_clock_init+0x1c>
 801ab2e:	2300      	movs	r3, #0
 801ab30:	f106 0514 	add.w	r5, r6, #20
 801ab34:	7033      	strb	r3, [r6, #0]
 801ab36:	469c      	mov	ip, r3
 801ab38:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801ab3c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801ab40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab44:	6823      	ldr	r3, [r4, #0]
 801ab46:	4660      	mov	r0, ip
 801ab48:	602b      	str	r3, [r5, #0]
 801ab4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab4c:	2c00      	cmp	r4, #0
 801ab4e:	d0cf      	beq.n	801aaf0 <rcl_clock_init+0x1c>
 801ab50:	fab6 f586 	clz	r5, r6
 801ab54:	096d      	lsrs	r5, r5, #5
 801ab56:	2e00      	cmp	r6, #0
 801ab58:	d0ca      	beq.n	801aaf0 <rcl_clock_init+0x1c>
 801ab5a:	46a6      	mov	lr, r4
 801ab5c:	7035      	strb	r5, [r6, #0]
 801ab5e:	f106 0c14 	add.w	ip, r6, #20
 801ab62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ab66:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801ab6a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801ab6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab72:	f8de 3000 	ldr.w	r3, [lr]
 801ab76:	2010      	movs	r0, #16
 801ab78:	f8cc 3000 	str.w	r3, [ip]
 801ab7c:	6823      	ldr	r3, [r4, #0]
 801ab7e:	6921      	ldr	r1, [r4, #16]
 801ab80:	4798      	blx	r3
 801ab82:	6130      	str	r0, [r6, #16]
 801ab84:	b320      	cbz	r0, 801abd0 <rcl_clock_init+0xfc>
 801ab86:	2200      	movs	r2, #0
 801ab88:	2300      	movs	r3, #0
 801ab8a:	46ac      	mov	ip, r5
 801ab8c:	7205      	strb	r5, [r0, #8]
 801ab8e:	e9c0 2300 	strd	r2, r3, [r0]
 801ab92:	4a12      	ldr	r2, [pc, #72]	; (801abdc <rcl_clock_init+0x108>)
 801ab94:	2301      	movs	r3, #1
 801ab96:	4660      	mov	r0, ip
 801ab98:	60f2      	str	r2, [r6, #12]
 801ab9a:	7033      	strb	r3, [r6, #0]
 801ab9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab9e:	2c00      	cmp	r4, #0
 801aba0:	d0a6      	beq.n	801aaf0 <rcl_clock_init+0x1c>
 801aba2:	fab6 f386 	clz	r3, r6
 801aba6:	095b      	lsrs	r3, r3, #5
 801aba8:	2e00      	cmp	r6, #0
 801abaa:	d0a1      	beq.n	801aaf0 <rcl_clock_init+0x1c>
 801abac:	6133      	str	r3, [r6, #16]
 801abae:	469c      	mov	ip, r3
 801abb0:	f106 0514 	add.w	r5, r6, #20
 801abb4:	f8df e028 	ldr.w	lr, [pc, #40]	; 801abe0 <rcl_clock_init+0x10c>
 801abb8:	2702      	movs	r7, #2
 801abba:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801abbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801abc2:	6823      	ldr	r3, [r4, #0]
 801abc4:	4660      	mov	r0, ip
 801abc6:	602b      	str	r3, [r5, #0]
 801abc8:	f8c6 e00c 	str.w	lr, [r6, #12]
 801abcc:	7037      	strb	r7, [r6, #0]
 801abce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abd0:	f04f 0c0a 	mov.w	ip, #10
 801abd4:	e78e      	b.n	801aaf4 <rcl_clock_init+0x20>
 801abd6:	bf00      	nop
 801abd8:	0801aaa9 	.word	0x0801aaa9
 801abdc:	0801aab1 	.word	0x0801aab1
 801abe0:	0801aaa1 	.word	0x0801aaa1

0801abe4 <rcl_clock_get_now>:
 801abe4:	b140      	cbz	r0, 801abf8 <rcl_clock_get_now+0x14>
 801abe6:	b139      	cbz	r1, 801abf8 <rcl_clock_get_now+0x14>
 801abe8:	7803      	ldrb	r3, [r0, #0]
 801abea:	b11b      	cbz	r3, 801abf4 <rcl_clock_get_now+0x10>
 801abec:	68c3      	ldr	r3, [r0, #12]
 801abee:	b10b      	cbz	r3, 801abf4 <rcl_clock_get_now+0x10>
 801abf0:	6900      	ldr	r0, [r0, #16]
 801abf2:	4718      	bx	r3
 801abf4:	2001      	movs	r0, #1
 801abf6:	4770      	bx	lr
 801abf8:	200b      	movs	r0, #11
 801abfa:	4770      	bx	lr

0801abfc <rcl_timer_call>:
 801abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac00:	b087      	sub	sp, #28
 801ac02:	2800      	cmp	r0, #0
 801ac04:	d06c      	beq.n	801ace0 <rcl_timer_call+0xe4>
 801ac06:	6803      	ldr	r3, [r0, #0]
 801ac08:	4604      	mov	r4, r0
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d062      	beq.n	801acd4 <rcl_timer_call+0xd8>
 801ac0e:	f3bf 8f5b 	dmb	ish
 801ac12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ac16:	f3bf 8f5b 	dmb	ish
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d14f      	bne.n	801acbe <rcl_timer_call+0xc2>
 801ac1e:	6803      	ldr	r3, [r0, #0]
 801ac20:	a904      	add	r1, sp, #16
 801ac22:	6818      	ldr	r0, [r3, #0]
 801ac24:	f7ff ffde 	bl	801abe4 <rcl_clock_get_now>
 801ac28:	4605      	mov	r5, r0
 801ac2a:	2800      	cmp	r0, #0
 801ac2c:	d149      	bne.n	801acc2 <rcl_timer_call+0xc6>
 801ac2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	db49      	blt.n	801acca <rcl_timer_call+0xce>
 801ac36:	2605      	movs	r6, #5
 801ac38:	6820      	ldr	r0, [r4, #0]
 801ac3a:	9600      	str	r6, [sp, #0]
 801ac3c:	3020      	adds	r0, #32
 801ac3e:	f001 fd23 	bl	801c688 <__atomic_exchange_8>
 801ac42:	6823      	ldr	r3, [r4, #0]
 801ac44:	4680      	mov	r8, r0
 801ac46:	f3bf 8f5b 	dmb	ish
 801ac4a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801ac4e:	f3bf 8f5b 	dmb	ish
 801ac52:	6820      	ldr	r0, [r4, #0]
 801ac54:	4689      	mov	r9, r1
 801ac56:	4631      	mov	r1, r6
 801ac58:	3028      	adds	r0, #40	; 0x28
 801ac5a:	f001 fca9 	bl	801c5b0 <__atomic_load_8>
 801ac5e:	460f      	mov	r7, r1
 801ac60:	4631      	mov	r1, r6
 801ac62:	4606      	mov	r6, r0
 801ac64:	6820      	ldr	r0, [r4, #0]
 801ac66:	3018      	adds	r0, #24
 801ac68:	f001 fca2 	bl	801c5b0 <__atomic_load_8>
 801ac6c:	4602      	mov	r2, r0
 801ac6e:	9804      	ldr	r0, [sp, #16]
 801ac70:	460b      	mov	r3, r1
 801ac72:	18b6      	adds	r6, r6, r2
 801ac74:	f8dd c014 	ldr.w	ip, [sp, #20]
 801ac78:	4692      	mov	sl, r2
 801ac7a:	eb47 0701 	adc.w	r7, r7, r1
 801ac7e:	4286      	cmp	r6, r0
 801ac80:	eb77 010c 	sbcs.w	r1, r7, ip
 801ac84:	da04      	bge.n	801ac90 <rcl_timer_call+0x94>
 801ac86:	ea53 0102 	orrs.w	r1, r3, r2
 801ac8a:	d12e      	bne.n	801acea <rcl_timer_call+0xee>
 801ac8c:	4606      	mov	r6, r0
 801ac8e:	4667      	mov	r7, ip
 801ac90:	6820      	ldr	r0, [r4, #0]
 801ac92:	2105      	movs	r1, #5
 801ac94:	4632      	mov	r2, r6
 801ac96:	463b      	mov	r3, r7
 801ac98:	3028      	adds	r0, #40	; 0x28
 801ac9a:	9100      	str	r1, [sp, #0]
 801ac9c:	f001 fcbe 	bl	801c61c <__atomic_store_8>
 801aca0:	f1bb 0f00 	cmp.w	fp, #0
 801aca4:	d00d      	beq.n	801acc2 <rcl_timer_call+0xc6>
 801aca6:	9a04      	ldr	r2, [sp, #16]
 801aca8:	4620      	mov	r0, r4
 801acaa:	9b05      	ldr	r3, [sp, #20]
 801acac:	ebb2 0208 	subs.w	r2, r2, r8
 801acb0:	eb63 0309 	sbc.w	r3, r3, r9
 801acb4:	47d8      	blx	fp
 801acb6:	4628      	mov	r0, r5
 801acb8:	b007      	add	sp, #28
 801acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acbe:	f240 3521 	movw	r5, #801	; 0x321
 801acc2:	4628      	mov	r0, r5
 801acc4:	b007      	add	sp, #28
 801acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acca:	2501      	movs	r5, #1
 801accc:	4628      	mov	r0, r5
 801acce:	b007      	add	sp, #28
 801acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acd4:	f44f 7548 	mov.w	r5, #800	; 0x320
 801acd8:	4628      	mov	r0, r5
 801acda:	b007      	add	sp, #28
 801acdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ace0:	250b      	movs	r5, #11
 801ace2:	4628      	mov	r0, r5
 801ace4:	b007      	add	sp, #28
 801ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acea:	1b80      	subs	r0, r0, r6
 801acec:	eb6c 0107 	sbc.w	r1, ip, r7
 801acf0:	3801      	subs	r0, #1
 801acf2:	f161 0100 	sbc.w	r1, r1, #0
 801acf6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801acfa:	f7e5 fdd3 	bl	80008a4 <__aeabi_ldivmod>
 801acfe:	9b02      	ldr	r3, [sp, #8]
 801ad00:	3001      	adds	r0, #1
 801ad02:	f141 0100 	adc.w	r1, r1, #0
 801ad06:	fb00 f303 	mul.w	r3, r0, r3
 801ad0a:	fb01 330a 	mla	r3, r1, sl, r3
 801ad0e:	fba0 0a0a 	umull	r0, sl, r0, sl
 801ad12:	1986      	adds	r6, r0, r6
 801ad14:	4453      	add	r3, sl
 801ad16:	eb43 0707 	adc.w	r7, r3, r7
 801ad1a:	e7b9      	b.n	801ac90 <rcl_timer_call+0x94>

0801ad1c <rcl_timer_is_ready>:
 801ad1c:	b570      	push	{r4, r5, r6, lr}
 801ad1e:	b082      	sub	sp, #8
 801ad20:	b380      	cbz	r0, 801ad84 <rcl_timer_is_ready+0x68>
 801ad22:	6803      	ldr	r3, [r0, #0]
 801ad24:	4604      	mov	r4, r0
 801ad26:	b38b      	cbz	r3, 801ad8c <rcl_timer_is_ready+0x70>
 801ad28:	460d      	mov	r5, r1
 801ad2a:	b359      	cbz	r1, 801ad84 <rcl_timer_is_ready+0x68>
 801ad2c:	f3bf 8f5b 	dmb	ish
 801ad30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ad34:	f3bf 8f5b 	dmb	ish
 801ad38:	b953      	cbnz	r3, 801ad50 <rcl_timer_is_ready+0x34>
 801ad3a:	6803      	ldr	r3, [r0, #0]
 801ad3c:	4669      	mov	r1, sp
 801ad3e:	6818      	ldr	r0, [r3, #0]
 801ad40:	f7ff ff50 	bl	801abe4 <rcl_clock_get_now>
 801ad44:	4606      	mov	r6, r0
 801ad46:	b148      	cbz	r0, 801ad5c <rcl_timer_is_ready+0x40>
 801ad48:	f240 3321 	movw	r3, #801	; 0x321
 801ad4c:	4298      	cmp	r0, r3
 801ad4e:	d102      	bne.n	801ad56 <rcl_timer_is_ready+0x3a>
 801ad50:	2300      	movs	r3, #0
 801ad52:	461e      	mov	r6, r3
 801ad54:	702b      	strb	r3, [r5, #0]
 801ad56:	4630      	mov	r0, r6
 801ad58:	b002      	add	sp, #8
 801ad5a:	bd70      	pop	{r4, r5, r6, pc}
 801ad5c:	6820      	ldr	r0, [r4, #0]
 801ad5e:	2105      	movs	r1, #5
 801ad60:	3028      	adds	r0, #40	; 0x28
 801ad62:	f001 fc25 	bl	801c5b0 <__atomic_load_8>
 801ad66:	9b00      	ldr	r3, [sp, #0]
 801ad68:	1ac0      	subs	r0, r0, r3
 801ad6a:	9b01      	ldr	r3, [sp, #4]
 801ad6c:	eb61 0103 	sbc.w	r1, r1, r3
 801ad70:	2801      	cmp	r0, #1
 801ad72:	4630      	mov	r0, r6
 801ad74:	f171 0300 	sbcs.w	r3, r1, #0
 801ad78:	bfb4      	ite	lt
 801ad7a:	2301      	movlt	r3, #1
 801ad7c:	2300      	movge	r3, #0
 801ad7e:	702b      	strb	r3, [r5, #0]
 801ad80:	b002      	add	sp, #8
 801ad82:	bd70      	pop	{r4, r5, r6, pc}
 801ad84:	260b      	movs	r6, #11
 801ad86:	4630      	mov	r0, r6
 801ad88:	b002      	add	sp, #8
 801ad8a:	bd70      	pop	{r4, r5, r6, pc}
 801ad8c:	f44f 7648 	mov.w	r6, #800	; 0x320
 801ad90:	e7e1      	b.n	801ad56 <rcl_timer_is_ready+0x3a>
 801ad92:	bf00      	nop

0801ad94 <rcl_timer_get_time_until_next_call>:
 801ad94:	b570      	push	{r4, r5, r6, lr}
 801ad96:	b082      	sub	sp, #8
 801ad98:	b330      	cbz	r0, 801ade8 <rcl_timer_get_time_until_next_call+0x54>
 801ad9a:	6803      	ldr	r3, [r0, #0]
 801ad9c:	4604      	mov	r4, r0
 801ad9e:	b33b      	cbz	r3, 801adf0 <rcl_timer_get_time_until_next_call+0x5c>
 801ada0:	460d      	mov	r5, r1
 801ada2:	b309      	cbz	r1, 801ade8 <rcl_timer_get_time_until_next_call+0x54>
 801ada4:	f3bf 8f5b 	dmb	ish
 801ada8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801adac:	f3bf 8f5b 	dmb	ish
 801adb0:	b9ab      	cbnz	r3, 801adde <rcl_timer_get_time_until_next_call+0x4a>
 801adb2:	6803      	ldr	r3, [r0, #0]
 801adb4:	4669      	mov	r1, sp
 801adb6:	6818      	ldr	r0, [r3, #0]
 801adb8:	f7ff ff14 	bl	801abe4 <rcl_clock_get_now>
 801adbc:	4606      	mov	r6, r0
 801adbe:	b958      	cbnz	r0, 801add8 <rcl_timer_get_time_until_next_call+0x44>
 801adc0:	6820      	ldr	r0, [r4, #0]
 801adc2:	2105      	movs	r1, #5
 801adc4:	3028      	adds	r0, #40	; 0x28
 801adc6:	f001 fbf3 	bl	801c5b0 <__atomic_load_8>
 801adca:	9b00      	ldr	r3, [sp, #0]
 801adcc:	1ac0      	subs	r0, r0, r3
 801adce:	9b01      	ldr	r3, [sp, #4]
 801add0:	eb61 0103 	sbc.w	r1, r1, r3
 801add4:	6028      	str	r0, [r5, #0]
 801add6:	6069      	str	r1, [r5, #4]
 801add8:	4630      	mov	r0, r6
 801adda:	b002      	add	sp, #8
 801addc:	bd70      	pop	{r4, r5, r6, pc}
 801adde:	f240 3621 	movw	r6, #801	; 0x321
 801ade2:	4630      	mov	r0, r6
 801ade4:	b002      	add	sp, #8
 801ade6:	bd70      	pop	{r4, r5, r6, pc}
 801ade8:	260b      	movs	r6, #11
 801adea:	4630      	mov	r0, r6
 801adec:	b002      	add	sp, #8
 801adee:	bd70      	pop	{r4, r5, r6, pc}
 801adf0:	f44f 7648 	mov.w	r6, #800	; 0x320
 801adf4:	e7f0      	b.n	801add8 <rcl_timer_get_time_until_next_call+0x44>
 801adf6:	bf00      	nop

0801adf8 <rcl_timer_get_guard_condition>:
 801adf8:	b130      	cbz	r0, 801ae08 <rcl_timer_get_guard_condition+0x10>
 801adfa:	6800      	ldr	r0, [r0, #0]
 801adfc:	b120      	cbz	r0, 801ae08 <rcl_timer_get_guard_condition+0x10>
 801adfe:	68c3      	ldr	r3, [r0, #12]
 801ae00:	b10b      	cbz	r3, 801ae06 <rcl_timer_get_guard_condition+0xe>
 801ae02:	3008      	adds	r0, #8
 801ae04:	4770      	bx	lr
 801ae06:	4618      	mov	r0, r3
 801ae08:	4770      	bx	lr
 801ae0a:	bf00      	nop

0801ae0c <rcl_validate_enclave_name_with_size>:
 801ae0c:	2800      	cmp	r0, #0
 801ae0e:	d049      	beq.n	801aea4 <rcl_validate_enclave_name_with_size+0x98>
 801ae10:	b570      	push	{r4, r5, r6, lr}
 801ae12:	4615      	mov	r5, r2
 801ae14:	b0c2      	sub	sp, #264	; 0x108
 801ae16:	b19a      	cbz	r2, 801ae40 <rcl_validate_enclave_name_with_size+0x34>
 801ae18:	461e      	mov	r6, r3
 801ae1a:	466a      	mov	r2, sp
 801ae1c:	ab01      	add	r3, sp, #4
 801ae1e:	460c      	mov	r4, r1
 801ae20:	f7f9 fa8a 	bl	8014338 <rmw_validate_namespace_with_size>
 801ae24:	4684      	mov	ip, r0
 801ae26:	b9b8      	cbnz	r0, 801ae58 <rcl_validate_enclave_name_with_size+0x4c>
 801ae28:	9900      	ldr	r1, [sp, #0]
 801ae2a:	b171      	cbz	r1, 801ae4a <rcl_validate_enclave_name_with_size+0x3e>
 801ae2c:	2907      	cmp	r1, #7
 801ae2e:	d019      	beq.n	801ae64 <rcl_validate_enclave_name_with_size+0x58>
 801ae30:	1e4b      	subs	r3, r1, #1
 801ae32:	2b05      	cmp	r3, #5
 801ae34:	d83a      	bhi.n	801aeac <rcl_validate_enclave_name_with_size+0xa0>
 801ae36:	e8df f003 	tbb	[pc, r3]
 801ae3a:	2926      	.short	0x2926
 801ae3c:	1d322f2c 	.word	0x1d322f2c
 801ae40:	f04f 0c0b 	mov.w	ip, #11
 801ae44:	4660      	mov	r0, ip
 801ae46:	b042      	add	sp, #264	; 0x108
 801ae48:	bd70      	pop	{r4, r5, r6, pc}
 801ae4a:	2907      	cmp	r1, #7
 801ae4c:	d00a      	beq.n	801ae64 <rcl_validate_enclave_name_with_size+0x58>
 801ae4e:	2300      	movs	r3, #0
 801ae50:	4660      	mov	r0, ip
 801ae52:	602b      	str	r3, [r5, #0]
 801ae54:	b042      	add	sp, #264	; 0x108
 801ae56:	bd70      	pop	{r4, r5, r6, pc}
 801ae58:	f7ff f9f4 	bl	801a244 <rcl_convert_rmw_ret_to_rcl_ret>
 801ae5c:	4684      	mov	ip, r0
 801ae5e:	4660      	mov	r0, ip
 801ae60:	b042      	add	sp, #264	; 0x108
 801ae62:	bd70      	pop	{r4, r5, r6, pc}
 801ae64:	2cff      	cmp	r4, #255	; 0xff
 801ae66:	d9f2      	bls.n	801ae4e <rcl_validate_enclave_name_with_size+0x42>
 801ae68:	6029      	str	r1, [r5, #0]
 801ae6a:	2e00      	cmp	r6, #0
 801ae6c:	d0ea      	beq.n	801ae44 <rcl_validate_enclave_name_with_size+0x38>
 801ae6e:	23fe      	movs	r3, #254	; 0xfe
 801ae70:	6033      	str	r3, [r6, #0]
 801ae72:	e7e7      	b.n	801ae44 <rcl_validate_enclave_name_with_size+0x38>
 801ae74:	2306      	movs	r3, #6
 801ae76:	602b      	str	r3, [r5, #0]
 801ae78:	2e00      	cmp	r6, #0
 801ae7a:	d0e3      	beq.n	801ae44 <rcl_validate_enclave_name_with_size+0x38>
 801ae7c:	9b01      	ldr	r3, [sp, #4]
 801ae7e:	4660      	mov	r0, ip
 801ae80:	6033      	str	r3, [r6, #0]
 801ae82:	b042      	add	sp, #264	; 0x108
 801ae84:	bd70      	pop	{r4, r5, r6, pc}
 801ae86:	2301      	movs	r3, #1
 801ae88:	602b      	str	r3, [r5, #0]
 801ae8a:	e7f5      	b.n	801ae78 <rcl_validate_enclave_name_with_size+0x6c>
 801ae8c:	2302      	movs	r3, #2
 801ae8e:	602b      	str	r3, [r5, #0]
 801ae90:	e7f2      	b.n	801ae78 <rcl_validate_enclave_name_with_size+0x6c>
 801ae92:	2303      	movs	r3, #3
 801ae94:	602b      	str	r3, [r5, #0]
 801ae96:	e7ef      	b.n	801ae78 <rcl_validate_enclave_name_with_size+0x6c>
 801ae98:	2304      	movs	r3, #4
 801ae9a:	602b      	str	r3, [r5, #0]
 801ae9c:	e7ec      	b.n	801ae78 <rcl_validate_enclave_name_with_size+0x6c>
 801ae9e:	2305      	movs	r3, #5
 801aea0:	602b      	str	r3, [r5, #0]
 801aea2:	e7e9      	b.n	801ae78 <rcl_validate_enclave_name_with_size+0x6c>
 801aea4:	f04f 0c0b 	mov.w	ip, #11
 801aea8:	4660      	mov	r0, ip
 801aeaa:	4770      	bx	lr
 801aeac:	460b      	mov	r3, r1
 801aeae:	4a04      	ldr	r2, [pc, #16]	; (801aec0 <rcl_validate_enclave_name_with_size+0xb4>)
 801aeb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801aeb4:	a802      	add	r0, sp, #8
 801aeb6:	f7f9 f927 	bl	8014108 <rcutils_snprintf>
 801aeba:	f04f 0c01 	mov.w	ip, #1
 801aebe:	e7c1      	b.n	801ae44 <rcl_validate_enclave_name_with_size+0x38>
 801aec0:	08024718 	.word	0x08024718

0801aec4 <rcl_validate_enclave_name>:
 801aec4:	b168      	cbz	r0, 801aee2 <rcl_validate_enclave_name+0x1e>
 801aec6:	b570      	push	{r4, r5, r6, lr}
 801aec8:	460d      	mov	r5, r1
 801aeca:	4616      	mov	r6, r2
 801aecc:	4604      	mov	r4, r0
 801aece:	f7e5 fa17 	bl	8000300 <strlen>
 801aed2:	4633      	mov	r3, r6
 801aed4:	4601      	mov	r1, r0
 801aed6:	462a      	mov	r2, r5
 801aed8:	4620      	mov	r0, r4
 801aeda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aede:	f7ff bf95 	b.w	801ae0c <rcl_validate_enclave_name_with_size>
 801aee2:	200b      	movs	r0, #11
 801aee4:	4770      	bx	lr
 801aee6:	bf00      	nop

0801aee8 <rcl_get_zero_initialized_wait_set>:
 801aee8:	b510      	push	{r4, lr}
 801aeea:	4c08      	ldr	r4, [pc, #32]	; (801af0c <rcl_get_zero_initialized_wait_set+0x24>)
 801aeec:	4686      	mov	lr, r0
 801aeee:	4684      	mov	ip, r0
 801aef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aef2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aefc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aefe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801af02:	6823      	ldr	r3, [r4, #0]
 801af04:	4670      	mov	r0, lr
 801af06:	f8cc 3000 	str.w	r3, [ip]
 801af0a:	bd10      	pop	{r4, pc}
 801af0c:	08024778 	.word	0x08024778

0801af10 <rcl_wait_set_is_valid>:
 801af10:	b118      	cbz	r0, 801af1a <rcl_wait_set_is_valid+0xa>
 801af12:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801af14:	3800      	subs	r0, #0
 801af16:	bf18      	it	ne
 801af18:	2001      	movne	r0, #1
 801af1a:	4770      	bx	lr

0801af1c <rcl_wait_set_fini>:
 801af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af20:	b082      	sub	sp, #8
 801af22:	2800      	cmp	r0, #0
 801af24:	f000 8095 	beq.w	801b052 <rcl_wait_set_fini+0x136>
 801af28:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801af2a:	4604      	mov	r4, r0
 801af2c:	2e00      	cmp	r6, #0
 801af2e:	f000 808c 	beq.w	801b04a <rcl_wait_set_fini+0x12e>
 801af32:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801af34:	f002 f9c0 	bl	801d2b8 <rmw_destroy_wait_set>
 801af38:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801af3a:	1e06      	subs	r6, r0, #0
 801af3c:	bf18      	it	ne
 801af3e:	f44f 7661 	movne.w	r6, #900	; 0x384
 801af42:	2d00      	cmp	r5, #0
 801af44:	f000 8081 	beq.w	801b04a <rcl_wait_set_fini+0x12e>
 801af48:	2700      	movs	r7, #0
 801af4a:	6820      	ldr	r0, [r4, #0]
 801af4c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801af50:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801af52:	6067      	str	r7, [r4, #4]
 801af54:	602f      	str	r7, [r5, #0]
 801af56:	b120      	cbz	r0, 801af62 <rcl_wait_set_fini+0x46>
 801af58:	9101      	str	r1, [sp, #4]
 801af5a:	47c0      	blx	r8
 801af5c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801af5e:	9901      	ldr	r1, [sp, #4]
 801af60:	6027      	str	r7, [r4, #0]
 801af62:	68a8      	ldr	r0, [r5, #8]
 801af64:	b120      	cbz	r0, 801af70 <rcl_wait_set_fini+0x54>
 801af66:	47c0      	blx	r8
 801af68:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801af6a:	2300      	movs	r3, #0
 801af6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801af70:	f04f 0800 	mov.w	r8, #0
 801af74:	68a0      	ldr	r0, [r4, #8]
 801af76:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801af78:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801af7a:	f8c4 800c 	str.w	r8, [r4, #12]
 801af7e:	f8c5 800c 	str.w	r8, [r5, #12]
 801af82:	b128      	cbz	r0, 801af90 <rcl_wait_set_fini+0x74>
 801af84:	47b8      	blx	r7
 801af86:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801af88:	f8c4 8008 	str.w	r8, [r4, #8]
 801af8c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801af8e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801af90:	f04f 0800 	mov.w	r8, #0
 801af94:	6968      	ldr	r0, [r5, #20]
 801af96:	f8c5 8010 	str.w	r8, [r5, #16]
 801af9a:	b128      	cbz	r0, 801afa8 <rcl_wait_set_fini+0x8c>
 801af9c:	47b8      	blx	r7
 801af9e:	f8c5 8014 	str.w	r8, [r5, #20]
 801afa2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801afa4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801afa6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801afa8:	f04f 0800 	mov.w	r8, #0
 801afac:	6920      	ldr	r0, [r4, #16]
 801afae:	f8c4 8014 	str.w	r8, [r4, #20]
 801afb2:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801afb6:	b128      	cbz	r0, 801afc4 <rcl_wait_set_fini+0xa8>
 801afb8:	47b8      	blx	r7
 801afba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801afbc:	f8c4 8010 	str.w	r8, [r4, #16]
 801afc0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801afc2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801afc4:	f04f 0800 	mov.w	r8, #0
 801afc8:	69a0      	ldr	r0, [r4, #24]
 801afca:	f8c4 801c 	str.w	r8, [r4, #28]
 801afce:	f8c5 8018 	str.w	r8, [r5, #24]
 801afd2:	b128      	cbz	r0, 801afe0 <rcl_wait_set_fini+0xc4>
 801afd4:	9101      	str	r1, [sp, #4]
 801afd6:	47b8      	blx	r7
 801afd8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801afda:	9901      	ldr	r1, [sp, #4]
 801afdc:	f8c4 8018 	str.w	r8, [r4, #24]
 801afe0:	6a28      	ldr	r0, [r5, #32]
 801afe2:	b120      	cbz	r0, 801afee <rcl_wait_set_fini+0xd2>
 801afe4:	47b8      	blx	r7
 801afe6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801afe8:	2300      	movs	r3, #0
 801afea:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801afee:	2700      	movs	r7, #0
 801aff0:	6a20      	ldr	r0, [r4, #32]
 801aff2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801aff6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801aff8:	6267      	str	r7, [r4, #36]	; 0x24
 801affa:	626f      	str	r7, [r5, #36]	; 0x24
 801affc:	b120      	cbz	r0, 801b008 <rcl_wait_set_fini+0xec>
 801affe:	9101      	str	r1, [sp, #4]
 801b000:	47c0      	blx	r8
 801b002:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b004:	9901      	ldr	r1, [sp, #4]
 801b006:	6227      	str	r7, [r4, #32]
 801b008:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801b00a:	b120      	cbz	r0, 801b016 <rcl_wait_set_fini+0xfa>
 801b00c:	47c0      	blx	r8
 801b00e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b010:	2300      	movs	r3, #0
 801b012:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801b016:	2700      	movs	r7, #0
 801b018:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b01a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801b01e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b020:	62e7      	str	r7, [r4, #44]	; 0x2c
 801b022:	632f      	str	r7, [r5, #48]	; 0x30
 801b024:	b120      	cbz	r0, 801b030 <rcl_wait_set_fini+0x114>
 801b026:	9101      	str	r1, [sp, #4]
 801b028:	47c0      	blx	r8
 801b02a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b02c:	9901      	ldr	r1, [sp, #4]
 801b02e:	62a7      	str	r7, [r4, #40]	; 0x28
 801b030:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801b032:	b120      	cbz	r0, 801b03e <rcl_wait_set_fini+0x122>
 801b034:	47c0      	blx	r8
 801b036:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b038:	2300      	movs	r3, #0
 801b03a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801b03e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801b040:	4628      	mov	r0, r5
 801b042:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b044:	4798      	blx	r3
 801b046:	2300      	movs	r3, #0
 801b048:	6323      	str	r3, [r4, #48]	; 0x30
 801b04a:	4630      	mov	r0, r6
 801b04c:	b002      	add	sp, #8
 801b04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b052:	260b      	movs	r6, #11
 801b054:	4630      	mov	r0, r6
 801b056:	b002      	add	sp, #8
 801b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b05c <rcl_wait_set_add_subscription>:
 801b05c:	b318      	cbz	r0, 801b0a6 <rcl_wait_set_add_subscription+0x4a>
 801b05e:	b538      	push	{r3, r4, r5, lr}
 801b060:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b062:	4604      	mov	r4, r0
 801b064:	b30b      	cbz	r3, 801b0aa <rcl_wait_set_add_subscription+0x4e>
 801b066:	b319      	cbz	r1, 801b0b0 <rcl_wait_set_add_subscription+0x54>
 801b068:	681d      	ldr	r5, [r3, #0]
 801b06a:	6840      	ldr	r0, [r0, #4]
 801b06c:	4285      	cmp	r5, r0
 801b06e:	d217      	bcs.n	801b0a0 <rcl_wait_set_add_subscription+0x44>
 801b070:	1c68      	adds	r0, r5, #1
 801b072:	6018      	str	r0, [r3, #0]
 801b074:	6823      	ldr	r3, [r4, #0]
 801b076:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b07a:	b102      	cbz	r2, 801b07e <rcl_wait_set_add_subscription+0x22>
 801b07c:	6015      	str	r5, [r2, #0]
 801b07e:	4608      	mov	r0, r1
 801b080:	f7f7 ff14 	bl	8012eac <rcl_subscription_get_rmw_handle>
 801b084:	b150      	cbz	r0, 801b09c <rcl_wait_set_add_subscription+0x40>
 801b086:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b088:	6842      	ldr	r2, [r0, #4]
 801b08a:	2000      	movs	r0, #0
 801b08c:	689b      	ldr	r3, [r3, #8]
 801b08e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b092:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b094:	6853      	ldr	r3, [r2, #4]
 801b096:	3301      	adds	r3, #1
 801b098:	6053      	str	r3, [r2, #4]
 801b09a:	bd38      	pop	{r3, r4, r5, pc}
 801b09c:	2001      	movs	r0, #1
 801b09e:	bd38      	pop	{r3, r4, r5, pc}
 801b0a0:	f240 3086 	movw	r0, #902	; 0x386
 801b0a4:	bd38      	pop	{r3, r4, r5, pc}
 801b0a6:	200b      	movs	r0, #11
 801b0a8:	4770      	bx	lr
 801b0aa:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b0ae:	bd38      	pop	{r3, r4, r5, pc}
 801b0b0:	200b      	movs	r0, #11
 801b0b2:	bd38      	pop	{r3, r4, r5, pc}

0801b0b4 <rcl_wait_set_clear>:
 801b0b4:	2800      	cmp	r0, #0
 801b0b6:	d074      	beq.n	801b1a2 <rcl_wait_set_clear+0xee>
 801b0b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b0ba:	b510      	push	{r4, lr}
 801b0bc:	4604      	mov	r4, r0
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d071      	beq.n	801b1a6 <rcl_wait_set_clear+0xf2>
 801b0c2:	6800      	ldr	r0, [r0, #0]
 801b0c4:	b138      	cbz	r0, 801b0d6 <rcl_wait_set_clear+0x22>
 801b0c6:	6862      	ldr	r2, [r4, #4]
 801b0c8:	2100      	movs	r1, #0
 801b0ca:	0092      	lsls	r2, r2, #2
 801b0cc:	f004 fd6a 	bl	801fba4 <memset>
 801b0d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	601a      	str	r2, [r3, #0]
 801b0d6:	68a0      	ldr	r0, [r4, #8]
 801b0d8:	b138      	cbz	r0, 801b0ea <rcl_wait_set_clear+0x36>
 801b0da:	68e2      	ldr	r2, [r4, #12]
 801b0dc:	2100      	movs	r1, #0
 801b0de:	0092      	lsls	r2, r2, #2
 801b0e0:	f004 fd60 	bl	801fba4 <memset>
 801b0e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	60da      	str	r2, [r3, #12]
 801b0ea:	69a0      	ldr	r0, [r4, #24]
 801b0ec:	b138      	cbz	r0, 801b0fe <rcl_wait_set_clear+0x4a>
 801b0ee:	69e2      	ldr	r2, [r4, #28]
 801b0f0:	2100      	movs	r1, #0
 801b0f2:	0092      	lsls	r2, r2, #2
 801b0f4:	f004 fd56 	bl	801fba4 <memset>
 801b0f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b0fa:	2200      	movs	r2, #0
 801b0fc:	619a      	str	r2, [r3, #24]
 801b0fe:	6a20      	ldr	r0, [r4, #32]
 801b100:	b138      	cbz	r0, 801b112 <rcl_wait_set_clear+0x5e>
 801b102:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801b104:	2100      	movs	r1, #0
 801b106:	0092      	lsls	r2, r2, #2
 801b108:	f004 fd4c 	bl	801fba4 <memset>
 801b10c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b10e:	2200      	movs	r2, #0
 801b110:	625a      	str	r2, [r3, #36]	; 0x24
 801b112:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b114:	b138      	cbz	r0, 801b126 <rcl_wait_set_clear+0x72>
 801b116:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b118:	2100      	movs	r1, #0
 801b11a:	0092      	lsls	r2, r2, #2
 801b11c:	f004 fd42 	bl	801fba4 <memset>
 801b120:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b122:	2200      	movs	r2, #0
 801b124:	631a      	str	r2, [r3, #48]	; 0x30
 801b126:	6920      	ldr	r0, [r4, #16]
 801b128:	b138      	cbz	r0, 801b13a <rcl_wait_set_clear+0x86>
 801b12a:	6962      	ldr	r2, [r4, #20]
 801b12c:	2100      	movs	r1, #0
 801b12e:	0092      	lsls	r2, r2, #2
 801b130:	f004 fd38 	bl	801fba4 <memset>
 801b134:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b136:	2200      	movs	r2, #0
 801b138:	641a      	str	r2, [r3, #64]	; 0x40
 801b13a:	6898      	ldr	r0, [r3, #8]
 801b13c:	b138      	cbz	r0, 801b14e <rcl_wait_set_clear+0x9a>
 801b13e:	685a      	ldr	r2, [r3, #4]
 801b140:	2100      	movs	r1, #0
 801b142:	0092      	lsls	r2, r2, #2
 801b144:	f004 fd2e 	bl	801fba4 <memset>
 801b148:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b14a:	2200      	movs	r2, #0
 801b14c:	605a      	str	r2, [r3, #4]
 801b14e:	6958      	ldr	r0, [r3, #20]
 801b150:	b138      	cbz	r0, 801b162 <rcl_wait_set_clear+0xae>
 801b152:	691a      	ldr	r2, [r3, #16]
 801b154:	2100      	movs	r1, #0
 801b156:	0092      	lsls	r2, r2, #2
 801b158:	f004 fd24 	bl	801fba4 <memset>
 801b15c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b15e:	2200      	movs	r2, #0
 801b160:	611a      	str	r2, [r3, #16]
 801b162:	6a18      	ldr	r0, [r3, #32]
 801b164:	b138      	cbz	r0, 801b176 <rcl_wait_set_clear+0xc2>
 801b166:	69da      	ldr	r2, [r3, #28]
 801b168:	2100      	movs	r1, #0
 801b16a:	0092      	lsls	r2, r2, #2
 801b16c:	f004 fd1a 	bl	801fba4 <memset>
 801b170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b172:	2200      	movs	r2, #0
 801b174:	61da      	str	r2, [r3, #28]
 801b176:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801b178:	b138      	cbz	r0, 801b18a <rcl_wait_set_clear+0xd6>
 801b17a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b17c:	2100      	movs	r1, #0
 801b17e:	0092      	lsls	r2, r2, #2
 801b180:	f004 fd10 	bl	801fba4 <memset>
 801b184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b186:	2200      	movs	r2, #0
 801b188:	629a      	str	r2, [r3, #40]	; 0x28
 801b18a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801b18c:	b140      	cbz	r0, 801b1a0 <rcl_wait_set_clear+0xec>
 801b18e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b190:	2100      	movs	r1, #0
 801b192:	0092      	lsls	r2, r2, #2
 801b194:	f004 fd06 	bl	801fba4 <memset>
 801b198:	2300      	movs	r3, #0
 801b19a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b19c:	4618      	mov	r0, r3
 801b19e:	6353      	str	r3, [r2, #52]	; 0x34
 801b1a0:	bd10      	pop	{r4, pc}
 801b1a2:	200b      	movs	r0, #11
 801b1a4:	4770      	bx	lr
 801b1a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b1aa:	bd10      	pop	{r4, pc}

0801b1ac <rcl_wait_set_resize>:
 801b1ac:	2800      	cmp	r0, #0
 801b1ae:	f000 8180 	beq.w	801b4b2 <rcl_wait_set_resize+0x306>
 801b1b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1b6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801b1b8:	b083      	sub	sp, #12
 801b1ba:	4605      	mov	r5, r0
 801b1bc:	2c00      	cmp	r4, #0
 801b1be:	f000 817a 	beq.w	801b4b6 <rcl_wait_set_resize+0x30a>
 801b1c2:	f04f 0900 	mov.w	r9, #0
 801b1c6:	461f      	mov	r7, r3
 801b1c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801b1cc:	4688      	mov	r8, r1
 801b1ce:	4616      	mov	r6, r2
 801b1d0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801b1d4:	f8c0 9004 	str.w	r9, [r0, #4]
 801b1d8:	f8c4 9000 	str.w	r9, [r4]
 801b1dc:	2900      	cmp	r1, #0
 801b1de:	f000 80bf 	beq.w	801b360 <rcl_wait_set_resize+0x1b4>
 801b1e2:	008c      	lsls	r4, r1, #2
 801b1e4:	4652      	mov	r2, sl
 801b1e6:	6800      	ldr	r0, [r0, #0]
 801b1e8:	4621      	mov	r1, r4
 801b1ea:	9301      	str	r3, [sp, #4]
 801b1ec:	4798      	blx	r3
 801b1ee:	9b01      	ldr	r3, [sp, #4]
 801b1f0:	6028      	str	r0, [r5, #0]
 801b1f2:	2800      	cmp	r0, #0
 801b1f4:	f000 80f6 	beq.w	801b3e4 <rcl_wait_set_resize+0x238>
 801b1f8:	4622      	mov	r2, r4
 801b1fa:	4649      	mov	r1, r9
 801b1fc:	9301      	str	r3, [sp, #4]
 801b1fe:	f004 fcd1 	bl	801fba4 <memset>
 801b202:	f8c5 8004 	str.w	r8, [r5, #4]
 801b206:	4652      	mov	r2, sl
 801b208:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801b20c:	4621      	mov	r1, r4
 801b20e:	9b01      	ldr	r3, [sp, #4]
 801b210:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801b214:	f8c8 9004 	str.w	r9, [r8, #4]
 801b218:	4798      	blx	r3
 801b21a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b21c:	f8c8 0008 	str.w	r0, [r8, #8]
 801b220:	689b      	ldr	r3, [r3, #8]
 801b222:	2b00      	cmp	r3, #0
 801b224:	f000 814a 	beq.w	801b4bc <rcl_wait_set_resize+0x310>
 801b228:	4622      	mov	r2, r4
 801b22a:	4649      	mov	r1, r9
 801b22c:	4618      	mov	r0, r3
 801b22e:	f004 fcb9 	bl	801fba4 <memset>
 801b232:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b234:	f04f 0800 	mov.w	r8, #0
 801b238:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b23c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801b240:	f8c5 800c 	str.w	r8, [r5, #12]
 801b244:	f8c4 800c 	str.w	r8, [r4, #12]
 801b248:	2e00      	cmp	r6, #0
 801b24a:	f040 809b 	bne.w	801b384 <rcl_wait_set_resize+0x1d8>
 801b24e:	68a8      	ldr	r0, [r5, #8]
 801b250:	b128      	cbz	r0, 801b25e <rcl_wait_set_resize+0xb2>
 801b252:	4649      	mov	r1, r9
 801b254:	4790      	blx	r2
 801b256:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b258:	60ae      	str	r6, [r5, #8]
 801b25a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b25e:	f04f 0800 	mov.w	r8, #0
 801b262:	19f6      	adds	r6, r6, r7
 801b264:	f8c4 8010 	str.w	r8, [r4, #16]
 801b268:	f040 80a2 	bne.w	801b3b0 <rcl_wait_set_resize+0x204>
 801b26c:	6960      	ldr	r0, [r4, #20]
 801b26e:	b130      	cbz	r0, 801b27e <rcl_wait_set_resize+0xd2>
 801b270:	4649      	mov	r1, r9
 801b272:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801b274:	4798      	blx	r3
 801b276:	6166      	str	r6, [r4, #20]
 801b278:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b27a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b27e:	2600      	movs	r6, #0
 801b280:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801b284:	616e      	str	r6, [r5, #20]
 801b286:	6426      	str	r6, [r4, #64]	; 0x40
 801b288:	2f00      	cmp	r7, #0
 801b28a:	f040 80af 	bne.w	801b3ec <rcl_wait_set_resize+0x240>
 801b28e:	6928      	ldr	r0, [r5, #16]
 801b290:	b138      	cbz	r0, 801b2a2 <rcl_wait_set_resize+0xf6>
 801b292:	4649      	mov	r1, r9
 801b294:	47d0      	blx	sl
 801b296:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b298:	612f      	str	r7, [r5, #16]
 801b29a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b29e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801b2a2:	2600      	movs	r6, #0
 801b2a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2a6:	61ee      	str	r6, [r5, #28]
 801b2a8:	61a6      	str	r6, [r4, #24]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	f040 8093 	bne.w	801b3d6 <rcl_wait_set_resize+0x22a>
 801b2b0:	69a8      	ldr	r0, [r5, #24]
 801b2b2:	b120      	cbz	r0, 801b2be <rcl_wait_set_resize+0x112>
 801b2b4:	4649      	mov	r1, r9
 801b2b6:	47d0      	blx	sl
 801b2b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b2bc:	61ab      	str	r3, [r5, #24]
 801b2be:	6a20      	ldr	r0, [r4, #32]
 801b2c0:	b128      	cbz	r0, 801b2ce <rcl_wait_set_resize+0x122>
 801b2c2:	4649      	mov	r1, r9
 801b2c4:	47d0      	blx	sl
 801b2c6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801b2ce:	2600      	movs	r6, #0
 801b2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b2d2:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801b2d4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801b2d8:	626e      	str	r6, [r5, #36]	; 0x24
 801b2da:	6266      	str	r6, [r4, #36]	; 0x24
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	f000 8098 	beq.w	801b412 <rcl_wait_set_resize+0x266>
 801b2e2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801b2e6:	463a      	mov	r2, r7
 801b2e8:	6a28      	ldr	r0, [r5, #32]
 801b2ea:	4651      	mov	r1, sl
 801b2ec:	47c8      	blx	r9
 801b2ee:	6228      	str	r0, [r5, #32]
 801b2f0:	2800      	cmp	r0, #0
 801b2f2:	d077      	beq.n	801b3e4 <rcl_wait_set_resize+0x238>
 801b2f4:	4652      	mov	r2, sl
 801b2f6:	4631      	mov	r1, r6
 801b2f8:	f004 fc54 	bl	801fba4 <memset>
 801b2fc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b2fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b300:	463a      	mov	r2, r7
 801b302:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b304:	4651      	mov	r1, sl
 801b306:	626b      	str	r3, [r5, #36]	; 0x24
 801b308:	62a6      	str	r6, [r4, #40]	; 0x28
 801b30a:	47c8      	blx	r9
 801b30c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b30e:	62e0      	str	r0, [r4, #44]	; 0x2c
 801b310:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801b312:	2c00      	cmp	r4, #0
 801b314:	f000 80f2 	beq.w	801b4fc <rcl_wait_set_resize+0x350>
 801b318:	4620      	mov	r0, r4
 801b31a:	4652      	mov	r2, sl
 801b31c:	4631      	mov	r1, r6
 801b31e:	f004 fc41 	bl	801fba4 <memset>
 801b322:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b324:	2600      	movs	r6, #0
 801b326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b328:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801b32a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801b32e:	62ee      	str	r6, [r5, #44]	; 0x2c
 801b330:	6326      	str	r6, [r4, #48]	; 0x30
 801b332:	2b00      	cmp	r3, #0
 801b334:	f040 8097 	bne.w	801b466 <rcl_wait_set_resize+0x2ba>
 801b338:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801b33a:	b120      	cbz	r0, 801b346 <rcl_wait_set_resize+0x19a>
 801b33c:	4639      	mov	r1, r7
 801b33e:	47c0      	blx	r8
 801b340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b342:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b344:	62ab      	str	r3, [r5, #40]	; 0x28
 801b346:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b348:	2800      	cmp	r0, #0
 801b34a:	d04c      	beq.n	801b3e6 <rcl_wait_set_resize+0x23a>
 801b34c:	4639      	mov	r1, r7
 801b34e:	47c0      	blx	r8
 801b350:	2300      	movs	r3, #0
 801b352:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801b354:	4618      	mov	r0, r3
 801b356:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801b35a:	b003      	add	sp, #12
 801b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b360:	6800      	ldr	r0, [r0, #0]
 801b362:	b120      	cbz	r0, 801b36e <rcl_wait_set_resize+0x1c2>
 801b364:	4651      	mov	r1, sl
 801b366:	47d8      	blx	fp
 801b368:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b36a:	f8c5 8000 	str.w	r8, [r5]
 801b36e:	68a0      	ldr	r0, [r4, #8]
 801b370:	2800      	cmp	r0, #0
 801b372:	f43f af5f 	beq.w	801b234 <rcl_wait_set_resize+0x88>
 801b376:	4651      	mov	r1, sl
 801b378:	47d8      	blx	fp
 801b37a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b37c:	2300      	movs	r3, #0
 801b37e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801b382:	e757      	b.n	801b234 <rcl_wait_set_resize+0x88>
 801b384:	00b4      	lsls	r4, r6, #2
 801b386:	464a      	mov	r2, r9
 801b388:	68a8      	ldr	r0, [r5, #8]
 801b38a:	4621      	mov	r1, r4
 801b38c:	4798      	blx	r3
 801b38e:	60a8      	str	r0, [r5, #8]
 801b390:	b340      	cbz	r0, 801b3e4 <rcl_wait_set_resize+0x238>
 801b392:	4622      	mov	r2, r4
 801b394:	4641      	mov	r1, r8
 801b396:	f004 fc05 	bl	801fba4 <memset>
 801b39a:	f04f 0800 	mov.w	r8, #0
 801b39e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b3a0:	60ee      	str	r6, [r5, #12]
 801b3a2:	19f6      	adds	r6, r6, r7
 801b3a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b3a8:	f8c4 8010 	str.w	r8, [r4, #16]
 801b3ac:	f43f af5e 	beq.w	801b26c <rcl_wait_set_resize+0xc0>
 801b3b0:	00b6      	lsls	r6, r6, #2
 801b3b2:	464a      	mov	r2, r9
 801b3b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801b3b6:	6960      	ldr	r0, [r4, #20]
 801b3b8:	4631      	mov	r1, r6
 801b3ba:	4798      	blx	r3
 801b3bc:	4681      	mov	r9, r0
 801b3be:	6160      	str	r0, [r4, #20]
 801b3c0:	2800      	cmp	r0, #0
 801b3c2:	f000 8084 	beq.w	801b4ce <rcl_wait_set_resize+0x322>
 801b3c6:	4632      	mov	r2, r6
 801b3c8:	4641      	mov	r1, r8
 801b3ca:	f004 fbeb 	bl	801fba4 <memset>
 801b3ce:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b3d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b3d4:	e753      	b.n	801b27e <rcl_wait_set_resize+0xd2>
 801b3d6:	009c      	lsls	r4, r3, #2
 801b3d8:	464a      	mov	r2, r9
 801b3da:	69a8      	ldr	r0, [r5, #24]
 801b3dc:	4621      	mov	r1, r4
 801b3de:	47c0      	blx	r8
 801b3e0:	61a8      	str	r0, [r5, #24]
 801b3e2:	bb40      	cbnz	r0, 801b436 <rcl_wait_set_resize+0x28a>
 801b3e4:	200a      	movs	r0, #10
 801b3e6:	b003      	add	sp, #12
 801b3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3ec:	00bc      	lsls	r4, r7, #2
 801b3ee:	464a      	mov	r2, r9
 801b3f0:	6928      	ldr	r0, [r5, #16]
 801b3f2:	4621      	mov	r1, r4
 801b3f4:	47c0      	blx	r8
 801b3f6:	6128      	str	r0, [r5, #16]
 801b3f8:	2800      	cmp	r0, #0
 801b3fa:	d0f3      	beq.n	801b3e4 <rcl_wait_set_resize+0x238>
 801b3fc:	4622      	mov	r2, r4
 801b3fe:	4631      	mov	r1, r6
 801b400:	f004 fbd0 	bl	801fba4 <memset>
 801b404:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b406:	616f      	str	r7, [r5, #20]
 801b408:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b40c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801b410:	e747      	b.n	801b2a2 <rcl_wait_set_resize+0xf6>
 801b412:	6a28      	ldr	r0, [r5, #32]
 801b414:	b120      	cbz	r0, 801b420 <rcl_wait_set_resize+0x274>
 801b416:	4639      	mov	r1, r7
 801b418:	47c0      	blx	r8
 801b41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b41c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b41e:	622b      	str	r3, [r5, #32]
 801b420:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b422:	2800      	cmp	r0, #0
 801b424:	f43f af7e 	beq.w	801b324 <rcl_wait_set_resize+0x178>
 801b428:	4639      	mov	r1, r7
 801b42a:	47c0      	blx	r8
 801b42c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b42e:	2300      	movs	r3, #0
 801b430:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801b434:	e776      	b.n	801b324 <rcl_wait_set_resize+0x178>
 801b436:	4622      	mov	r2, r4
 801b438:	4631      	mov	r1, r6
 801b43a:	f004 fbb3 	bl	801fba4 <memset>
 801b43e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801b440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b442:	464a      	mov	r2, r9
 801b444:	6a38      	ldr	r0, [r7, #32]
 801b446:	4621      	mov	r1, r4
 801b448:	61eb      	str	r3, [r5, #28]
 801b44a:	61fe      	str	r6, [r7, #28]
 801b44c:	47c0      	blx	r8
 801b44e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b450:	6238      	str	r0, [r7, #32]
 801b452:	6a1f      	ldr	r7, [r3, #32]
 801b454:	2f00      	cmp	r7, #0
 801b456:	d04a      	beq.n	801b4ee <rcl_wait_set_resize+0x342>
 801b458:	4622      	mov	r2, r4
 801b45a:	4631      	mov	r1, r6
 801b45c:	4638      	mov	r0, r7
 801b45e:	f004 fba1 	bl	801fba4 <memset>
 801b462:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b464:	e733      	b.n	801b2ce <rcl_wait_set_resize+0x122>
 801b466:	009c      	lsls	r4, r3, #2
 801b468:	463a      	mov	r2, r7
 801b46a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801b46c:	4621      	mov	r1, r4
 801b46e:	47c8      	blx	r9
 801b470:	62a8      	str	r0, [r5, #40]	; 0x28
 801b472:	2800      	cmp	r0, #0
 801b474:	d0b6      	beq.n	801b3e4 <rcl_wait_set_resize+0x238>
 801b476:	4622      	mov	r2, r4
 801b478:	4631      	mov	r1, r6
 801b47a:	f004 fb93 	bl	801fba4 <memset>
 801b47e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801b482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b484:	463a      	mov	r2, r7
 801b486:	4621      	mov	r1, r4
 801b488:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801b48c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b48e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801b492:	47c8      	blx	r9
 801b494:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b496:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801b49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d034      	beq.n	801b50a <rcl_wait_set_resize+0x35e>
 801b4a0:	4622      	mov	r2, r4
 801b4a2:	4631      	mov	r1, r6
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f004 fb7d 	bl	801fba4 <memset>
 801b4aa:	4630      	mov	r0, r6
 801b4ac:	b003      	add	sp, #12
 801b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4b2:	200b      	movs	r0, #11
 801b4b4:	4770      	bx	lr
 801b4b6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b4ba:	e794      	b.n	801b3e6 <rcl_wait_set_resize+0x23a>
 801b4bc:	6828      	ldr	r0, [r5, #0]
 801b4be:	4651      	mov	r1, sl
 801b4c0:	9301      	str	r3, [sp, #4]
 801b4c2:	47d8      	blx	fp
 801b4c4:	9b01      	ldr	r3, [sp, #4]
 801b4c6:	200a      	movs	r0, #10
 801b4c8:	e9c5 3300 	strd	r3, r3, [r5]
 801b4cc:	e78b      	b.n	801b3e6 <rcl_wait_set_resize+0x23a>
 801b4ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b4d0:	68a8      	ldr	r0, [r5, #8]
 801b4d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801b4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b4d6:	4798      	blx	r3
 801b4d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b4da:	6928      	ldr	r0, [r5, #16]
 801b4dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b4de:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801b4e0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801b4e4:	4790      	blx	r2
 801b4e6:	200a      	movs	r0, #10
 801b4e8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801b4ec:	e77b      	b.n	801b3e6 <rcl_wait_set_resize+0x23a>
 801b4ee:	69a8      	ldr	r0, [r5, #24]
 801b4f0:	4649      	mov	r1, r9
 801b4f2:	47d0      	blx	sl
 801b4f4:	200a      	movs	r0, #10
 801b4f6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801b4fa:	e774      	b.n	801b3e6 <rcl_wait_set_resize+0x23a>
 801b4fc:	6a28      	ldr	r0, [r5, #32]
 801b4fe:	4639      	mov	r1, r7
 801b500:	47c0      	blx	r8
 801b502:	200a      	movs	r0, #10
 801b504:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801b508:	e76d      	b.n	801b3e6 <rcl_wait_set_resize+0x23a>
 801b50a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801b50c:	4639      	mov	r1, r7
 801b50e:	9301      	str	r3, [sp, #4]
 801b510:	47c0      	blx	r8
 801b512:	9b01      	ldr	r3, [sp, #4]
 801b514:	200a      	movs	r0, #10
 801b516:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801b51a:	e764      	b.n	801b3e6 <rcl_wait_set_resize+0x23a>

0801b51c <rcl_wait_set_init>:
 801b51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b520:	b085      	sub	sp, #20
 801b522:	4605      	mov	r5, r0
 801b524:	460e      	mov	r6, r1
 801b526:	4617      	mov	r7, r2
 801b528:	a812      	add	r0, sp, #72	; 0x48
 801b52a:	4698      	mov	r8, r3
 801b52c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801b530:	f7f8 fca4 	bl	8013e7c <rcutils_allocator_is_valid>
 801b534:	2d00      	cmp	r5, #0
 801b536:	d072      	beq.n	801b61e <rcl_wait_set_init+0x102>
 801b538:	f080 0001 	eor.w	r0, r0, #1
 801b53c:	b2c0      	uxtb	r0, r0
 801b53e:	2800      	cmp	r0, #0
 801b540:	d16d      	bne.n	801b61e <rcl_wait_set_init+0x102>
 801b542:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801b546:	f1ba 0f00 	cmp.w	sl, #0
 801b54a:	d004      	beq.n	801b556 <rcl_wait_set_init+0x3a>
 801b54c:	2464      	movs	r4, #100	; 0x64
 801b54e:	4620      	mov	r0, r4
 801b550:	b005      	add	sp, #20
 801b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b556:	f1b9 0f00 	cmp.w	r9, #0
 801b55a:	d060      	beq.n	801b61e <rcl_wait_set_init+0x102>
 801b55c:	4648      	mov	r0, r9
 801b55e:	f7fe fe8f 	bl	801a280 <rcl_context_is_valid>
 801b562:	2800      	cmp	r0, #0
 801b564:	d068      	beq.n	801b638 <rcl_wait_set_init+0x11c>
 801b566:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b568:	205c      	movs	r0, #92	; 0x5c
 801b56a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b56c:	4798      	blx	r3
 801b56e:	6328      	str	r0, [r5, #48]	; 0x30
 801b570:	2800      	cmp	r0, #0
 801b572:	d063      	beq.n	801b63c <rcl_wait_set_init+0x120>
 801b574:	225c      	movs	r2, #92	; 0x5c
 801b576:	4651      	mov	r1, sl
 801b578:	f004 fb14 	bl	801fba4 <memset>
 801b57c:	ac12      	add	r4, sp, #72	; 0x48
 801b57e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801b582:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801b586:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801b58a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801b58e:	eb03 0e02 	add.w	lr, r3, r2
 801b592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b594:	f8d9 9000 	ldr.w	r9, [r9]
 801b598:	449e      	add	lr, r3
 801b59a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b59c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801b5a0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801b5a4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801b5a8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801b5ac:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801b5b0:	44be      	add	lr, r7
 801b5b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b5b6:	6823      	ldr	r3, [r4, #0]
 801b5b8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801b5bc:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801b5c0:	f8cc 3000 	str.w	r3, [ip]
 801b5c4:	f001 fe6e 	bl	801d2a4 <rmw_create_wait_set>
 801b5c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b5ca:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801b5ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801b5d0:	b350      	cbz	r0, 801b628 <rcl_wait_set_init+0x10c>
 801b5d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b5d4:	4643      	mov	r3, r8
 801b5d6:	463a      	mov	r2, r7
 801b5d8:	4631      	mov	r1, r6
 801b5da:	9402      	str	r4, [sp, #8]
 801b5dc:	4628      	mov	r0, r5
 801b5de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b5e0:	9401      	str	r4, [sp, #4]
 801b5e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b5e4:	9400      	str	r4, [sp, #0]
 801b5e6:	f7ff fde1 	bl	801b1ac <rcl_wait_set_resize>
 801b5ea:	4604      	mov	r4, r0
 801b5ec:	2800      	cmp	r0, #0
 801b5ee:	d0ae      	beq.n	801b54e <rcl_wait_set_init+0x32>
 801b5f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b5f2:	bb2b      	cbnz	r3, 801b640 <rcl_wait_set_init+0x124>
 801b5f4:	2600      	movs	r6, #0
 801b5f6:	4628      	mov	r0, r5
 801b5f8:	4633      	mov	r3, r6
 801b5fa:	4632      	mov	r2, r6
 801b5fc:	4631      	mov	r1, r6
 801b5fe:	9600      	str	r6, [sp, #0]
 801b600:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801b604:	f7ff fdd2 	bl	801b1ac <rcl_wait_set_resize>
 801b608:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b60a:	2800      	cmp	r0, #0
 801b60c:	d09f      	beq.n	801b54e <rcl_wait_set_init+0x32>
 801b60e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801b610:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801b612:	4798      	blx	r3
 801b614:	4620      	mov	r0, r4
 801b616:	632e      	str	r6, [r5, #48]	; 0x30
 801b618:	b005      	add	sp, #20
 801b61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b61e:	240b      	movs	r4, #11
 801b620:	4620      	mov	r0, r4
 801b622:	b005      	add	sp, #20
 801b624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b628:	2401      	movs	r4, #1
 801b62a:	f001 fe45 	bl	801d2b8 <rmw_destroy_wait_set>
 801b62e:	2800      	cmp	r0, #0
 801b630:	bf18      	it	ne
 801b632:	f44f 7461 	movne.w	r4, #900	; 0x384
 801b636:	e7dd      	b.n	801b5f4 <rcl_wait_set_init+0xd8>
 801b638:	2465      	movs	r4, #101	; 0x65
 801b63a:	e788      	b.n	801b54e <rcl_wait_set_init+0x32>
 801b63c:	240a      	movs	r4, #10
 801b63e:	e786      	b.n	801b54e <rcl_wait_set_init+0x32>
 801b640:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801b642:	e7f2      	b.n	801b62a <rcl_wait_set_init+0x10e>

0801b644 <rcl_wait_set_add_guard_condition>:
 801b644:	b318      	cbz	r0, 801b68e <rcl_wait_set_add_guard_condition+0x4a>
 801b646:	b538      	push	{r3, r4, r5, lr}
 801b648:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b64a:	4604      	mov	r4, r0
 801b64c:	b30b      	cbz	r3, 801b692 <rcl_wait_set_add_guard_condition+0x4e>
 801b64e:	b319      	cbz	r1, 801b698 <rcl_wait_set_add_guard_condition+0x54>
 801b650:	68dd      	ldr	r5, [r3, #12]
 801b652:	68c0      	ldr	r0, [r0, #12]
 801b654:	4285      	cmp	r5, r0
 801b656:	d217      	bcs.n	801b688 <rcl_wait_set_add_guard_condition+0x44>
 801b658:	1c68      	adds	r0, r5, #1
 801b65a:	60d8      	str	r0, [r3, #12]
 801b65c:	68a3      	ldr	r3, [r4, #8]
 801b65e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b662:	b102      	cbz	r2, 801b666 <rcl_wait_set_add_guard_condition+0x22>
 801b664:	6015      	str	r5, [r2, #0]
 801b666:	4608      	mov	r0, r1
 801b668:	f7fe ff18 	bl	801a49c <rcl_guard_condition_get_rmw_handle>
 801b66c:	b150      	cbz	r0, 801b684 <rcl_wait_set_add_guard_condition+0x40>
 801b66e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b670:	6842      	ldr	r2, [r0, #4]
 801b672:	2000      	movs	r0, #0
 801b674:	695b      	ldr	r3, [r3, #20]
 801b676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b67a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b67c:	6913      	ldr	r3, [r2, #16]
 801b67e:	3301      	adds	r3, #1
 801b680:	6113      	str	r3, [r2, #16]
 801b682:	bd38      	pop	{r3, r4, r5, pc}
 801b684:	2001      	movs	r0, #1
 801b686:	bd38      	pop	{r3, r4, r5, pc}
 801b688:	f240 3086 	movw	r0, #902	; 0x386
 801b68c:	bd38      	pop	{r3, r4, r5, pc}
 801b68e:	200b      	movs	r0, #11
 801b690:	4770      	bx	lr
 801b692:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b696:	bd38      	pop	{r3, r4, r5, pc}
 801b698:	200b      	movs	r0, #11
 801b69a:	bd38      	pop	{r3, r4, r5, pc}

0801b69c <rcl_wait_set_add_timer>:
 801b69c:	b328      	cbz	r0, 801b6ea <rcl_wait_set_add_timer+0x4e>
 801b69e:	b538      	push	{r3, r4, r5, lr}
 801b6a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b6a2:	4604      	mov	r4, r0
 801b6a4:	b31b      	cbz	r3, 801b6ee <rcl_wait_set_add_timer+0x52>
 801b6a6:	b329      	cbz	r1, 801b6f4 <rcl_wait_set_add_timer+0x58>
 801b6a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801b6aa:	6965      	ldr	r5, [r4, #20]
 801b6ac:	42a8      	cmp	r0, r5
 801b6ae:	d219      	bcs.n	801b6e4 <rcl_wait_set_add_timer+0x48>
 801b6b0:	1c45      	adds	r5, r0, #1
 801b6b2:	641d      	str	r5, [r3, #64]	; 0x40
 801b6b4:	6923      	ldr	r3, [r4, #16]
 801b6b6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801b6ba:	b102      	cbz	r2, 801b6be <rcl_wait_set_add_timer+0x22>
 801b6bc:	6010      	str	r0, [r2, #0]
 801b6be:	4608      	mov	r0, r1
 801b6c0:	f7ff fb9a 	bl	801adf8 <rcl_timer_get_guard_condition>
 801b6c4:	b168      	cbz	r0, 801b6e2 <rcl_wait_set_add_timer+0x46>
 801b6c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b6c8:	68e3      	ldr	r3, [r4, #12]
 801b6ca:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801b6cc:	3b01      	subs	r3, #1
 801b6ce:	441d      	add	r5, r3
 801b6d0:	f7fe fee4 	bl	801a49c <rcl_guard_condition_get_rmw_handle>
 801b6d4:	b180      	cbz	r0, 801b6f8 <rcl_wait_set_add_timer+0x5c>
 801b6d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b6d8:	6842      	ldr	r2, [r0, #4]
 801b6da:	2000      	movs	r0, #0
 801b6dc:	695b      	ldr	r3, [r3, #20]
 801b6de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b6e2:	bd38      	pop	{r3, r4, r5, pc}
 801b6e4:	f240 3086 	movw	r0, #902	; 0x386
 801b6e8:	bd38      	pop	{r3, r4, r5, pc}
 801b6ea:	200b      	movs	r0, #11
 801b6ec:	4770      	bx	lr
 801b6ee:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b6f2:	bd38      	pop	{r3, r4, r5, pc}
 801b6f4:	200b      	movs	r0, #11
 801b6f6:	bd38      	pop	{r3, r4, r5, pc}
 801b6f8:	2001      	movs	r0, #1
 801b6fa:	bd38      	pop	{r3, r4, r5, pc}

0801b6fc <rcl_wait_set_add_client>:
 801b6fc:	b318      	cbz	r0, 801b746 <rcl_wait_set_add_client+0x4a>
 801b6fe:	b538      	push	{r3, r4, r5, lr}
 801b700:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b702:	4604      	mov	r4, r0
 801b704:	b30b      	cbz	r3, 801b74a <rcl_wait_set_add_client+0x4e>
 801b706:	b319      	cbz	r1, 801b750 <rcl_wait_set_add_client+0x54>
 801b708:	699d      	ldr	r5, [r3, #24]
 801b70a:	69c0      	ldr	r0, [r0, #28]
 801b70c:	4285      	cmp	r5, r0
 801b70e:	d217      	bcs.n	801b740 <rcl_wait_set_add_client+0x44>
 801b710:	1c68      	adds	r0, r5, #1
 801b712:	6198      	str	r0, [r3, #24]
 801b714:	69a3      	ldr	r3, [r4, #24]
 801b716:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b71a:	b102      	cbz	r2, 801b71e <rcl_wait_set_add_client+0x22>
 801b71c:	6015      	str	r5, [r2, #0]
 801b71e:	4608      	mov	r0, r1
 801b720:	f7fe fd00 	bl	801a124 <rcl_client_get_rmw_handle>
 801b724:	b150      	cbz	r0, 801b73c <rcl_wait_set_add_client+0x40>
 801b726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b728:	6842      	ldr	r2, [r0, #4]
 801b72a:	2000      	movs	r0, #0
 801b72c:	6a1b      	ldr	r3, [r3, #32]
 801b72e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b732:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b734:	69d3      	ldr	r3, [r2, #28]
 801b736:	3301      	adds	r3, #1
 801b738:	61d3      	str	r3, [r2, #28]
 801b73a:	bd38      	pop	{r3, r4, r5, pc}
 801b73c:	2001      	movs	r0, #1
 801b73e:	bd38      	pop	{r3, r4, r5, pc}
 801b740:	f240 3086 	movw	r0, #902	; 0x386
 801b744:	bd38      	pop	{r3, r4, r5, pc}
 801b746:	200b      	movs	r0, #11
 801b748:	4770      	bx	lr
 801b74a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b74e:	bd38      	pop	{r3, r4, r5, pc}
 801b750:	200b      	movs	r0, #11
 801b752:	bd38      	pop	{r3, r4, r5, pc}

0801b754 <rcl_wait_set_add_service>:
 801b754:	b318      	cbz	r0, 801b79e <rcl_wait_set_add_service+0x4a>
 801b756:	b538      	push	{r3, r4, r5, lr}
 801b758:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b75a:	4604      	mov	r4, r0
 801b75c:	b30b      	cbz	r3, 801b7a2 <rcl_wait_set_add_service+0x4e>
 801b75e:	b319      	cbz	r1, 801b7a8 <rcl_wait_set_add_service+0x54>
 801b760:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801b762:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b764:	4285      	cmp	r5, r0
 801b766:	d217      	bcs.n	801b798 <rcl_wait_set_add_service+0x44>
 801b768:	1c68      	adds	r0, r5, #1
 801b76a:	6258      	str	r0, [r3, #36]	; 0x24
 801b76c:	6a23      	ldr	r3, [r4, #32]
 801b76e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b772:	b102      	cbz	r2, 801b776 <rcl_wait_set_add_service+0x22>
 801b774:	6015      	str	r5, [r2, #0]
 801b776:	4608      	mov	r0, r1
 801b778:	f7f7 f9f8 	bl	8012b6c <rcl_service_get_rmw_handle>
 801b77c:	b150      	cbz	r0, 801b794 <rcl_wait_set_add_service+0x40>
 801b77e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b780:	6842      	ldr	r2, [r0, #4]
 801b782:	2000      	movs	r0, #0
 801b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b78a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b78c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801b78e:	3301      	adds	r3, #1
 801b790:	6293      	str	r3, [r2, #40]	; 0x28
 801b792:	bd38      	pop	{r3, r4, r5, pc}
 801b794:	2001      	movs	r0, #1
 801b796:	bd38      	pop	{r3, r4, r5, pc}
 801b798:	f240 3086 	movw	r0, #902	; 0x386
 801b79c:	bd38      	pop	{r3, r4, r5, pc}
 801b79e:	200b      	movs	r0, #11
 801b7a0:	4770      	bx	lr
 801b7a2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b7a6:	bd38      	pop	{r3, r4, r5, pc}
 801b7a8:	200b      	movs	r0, #11
 801b7aa:	bd38      	pop	{r3, r4, r5, pc}
 801b7ac:	0000      	movs	r0, r0
	...

0801b7b0 <rcl_wait>:
 801b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b4:	ed2d 8b02 	vpush	{d8}
 801b7b8:	b08d      	sub	sp, #52	; 0x34
 801b7ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b7be:	2800      	cmp	r0, #0
 801b7c0:	f000 814f 	beq.w	801ba62 <rcl_wait+0x2b2>
 801b7c4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801b7c6:	4605      	mov	r5, r0
 801b7c8:	2e00      	cmp	r6, #0
 801b7ca:	f000 811a 	beq.w	801ba02 <rcl_wait+0x252>
 801b7ce:	6843      	ldr	r3, [r0, #4]
 801b7d0:	b983      	cbnz	r3, 801b7f4 <rcl_wait+0x44>
 801b7d2:	68eb      	ldr	r3, [r5, #12]
 801b7d4:	b973      	cbnz	r3, 801b7f4 <rcl_wait+0x44>
 801b7d6:	696b      	ldr	r3, [r5, #20]
 801b7d8:	b963      	cbnz	r3, 801b7f4 <rcl_wait+0x44>
 801b7da:	69eb      	ldr	r3, [r5, #28]
 801b7dc:	b953      	cbnz	r3, 801b7f4 <rcl_wait+0x44>
 801b7de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b7e0:	b943      	cbnz	r3, 801b7f4 <rcl_wait+0x44>
 801b7e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801b7e4:	b933      	cbnz	r3, 801b7f4 <rcl_wait+0x44>
 801b7e6:	f240 3085 	movw	r0, #901	; 0x385
 801b7ea:	b00d      	add	sp, #52	; 0x34
 801b7ec:	ecbd 8b02 	vpop	{d8}
 801b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7f4:	9b04      	ldr	r3, [sp, #16]
 801b7f6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801b7f8:	2b01      	cmp	r3, #1
 801b7fa:	9b05      	ldr	r3, [sp, #20]
 801b7fc:	f173 0300 	sbcs.w	r3, r3, #0
 801b800:	f2c0 80f8 	blt.w	801b9f4 <rcl_wait+0x244>
 801b804:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801b808:	2a00      	cmp	r2, #0
 801b80a:	f000 810f 	beq.w	801ba2c <rcl_wait+0x27c>
 801b80e:	2400      	movs	r4, #0
 801b810:	4613      	mov	r3, r2
 801b812:	f240 3921 	movw	r9, #801	; 0x321
 801b816:	4632      	mov	r2, r6
 801b818:	46a2      	mov	sl, r4
 801b81a:	46a3      	mov	fp, r4
 801b81c:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801ba80 <rcl_wait+0x2d0>
 801b820:	e014      	b.n	801b84c <rcl_wait+0x9c>
 801b822:	2800      	cmp	r0, #0
 801b824:	d1e1      	bne.n	801b7ea <rcl_wait+0x3a>
 801b826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b82a:	4542      	cmp	r2, r8
 801b82c:	eb73 0107 	sbcs.w	r1, r3, r7
 801b830:	da03      	bge.n	801b83a <rcl_wait+0x8a>
 801b832:	4690      	mov	r8, r2
 801b834:	461f      	mov	r7, r3
 801b836:	f04f 0b01 	mov.w	fp, #1
 801b83a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801b83c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801b83e:	3401      	adds	r4, #1
 801b840:	f14a 0a00 	adc.w	sl, sl, #0
 801b844:	429c      	cmp	r4, r3
 801b846:	f17a 0100 	sbcs.w	r1, sl, #0
 801b84a:	d228      	bcs.n	801b89e <rcl_wait+0xee>
 801b84c:	6928      	ldr	r0, [r5, #16]
 801b84e:	a908      	add	r1, sp, #32
 801b850:	00a6      	lsls	r6, r4, #2
 801b852:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801b856:	2800      	cmp	r0, #0
 801b858:	d0f1      	beq.n	801b83e <rcl_wait+0x8e>
 801b85a:	68eb      	ldr	r3, [r5, #12]
 801b85c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801b860:	4423      	add	r3, r4
 801b862:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801b866:	f1be 0f00 	cmp.w	lr, #0
 801b86a:	d006      	beq.n	801b87a <rcl_wait+0xca>
 801b86c:	6913      	ldr	r3, [r2, #16]
 801b86e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801b872:	3301      	adds	r3, #1
 801b874:	6113      	str	r3, [r2, #16]
 801b876:	692b      	ldr	r3, [r5, #16]
 801b878:	5998      	ldr	r0, [r3, r6]
 801b87a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801b87e:	f7ff fa89 	bl	801ad94 <rcl_timer_get_time_until_next_call>
 801b882:	4548      	cmp	r0, r9
 801b884:	d1cd      	bne.n	801b822 <rcl_wait+0x72>
 801b886:	692b      	ldr	r3, [r5, #16]
 801b888:	2200      	movs	r2, #0
 801b88a:	3401      	adds	r4, #1
 801b88c:	519a      	str	r2, [r3, r6]
 801b88e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801b890:	f14a 0a00 	adc.w	sl, sl, #0
 801b894:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801b896:	429c      	cmp	r4, r3
 801b898:	f17a 0100 	sbcs.w	r1, sl, #0
 801b89c:	d3d6      	bcc.n	801b84c <rcl_wait+0x9c>
 801b89e:	4659      	mov	r1, fp
 801b8a0:	4616      	mov	r6, r2
 801b8a2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801b8a6:	4313      	orrs	r3, r2
 801b8a8:	f040 80b4 	bne.w	801ba14 <rcl_wait+0x264>
 801b8ac:	2300      	movs	r3, #0
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	460c      	mov	r4, r1
 801b8b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b8b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801b8ba:	ab08      	add	r3, sp, #32
 801b8bc:	9302      	str	r3, [sp, #8]
 801b8be:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801b8c2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801b8c4:	f106 0110 	add.w	r1, r6, #16
 801b8c8:	9300      	str	r3, [sp, #0]
 801b8ca:	1d30      	adds	r0, r6, #4
 801b8cc:	f106 031c 	add.w	r3, r6, #28
 801b8d0:	9201      	str	r2, [sp, #4]
 801b8d2:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801b8d6:	f001 fb81 	bl	801cfdc <rmw_wait>
 801b8da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b8dc:	4680      	mov	r8, r0
 801b8de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b8e0:	b1e2      	cbz	r2, 801b91c <rcl_wait+0x16c>
 801b8e2:	f04f 0900 	mov.w	r9, #0
 801b8e6:	464f      	mov	r7, r9
 801b8e8:	692a      	ldr	r2, [r5, #16]
 801b8ea:	f10d 011f 	add.w	r1, sp, #31
 801b8ee:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801b8f2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801b8f6:	b160      	cbz	r0, 801b912 <rcl_wait+0x162>
 801b8f8:	f88d 701f 	strb.w	r7, [sp, #31]
 801b8fc:	f7ff fa0e 	bl	801ad1c <rcl_timer_is_ready>
 801b900:	2800      	cmp	r0, #0
 801b902:	f47f af72 	bne.w	801b7ea <rcl_wait+0x3a>
 801b906:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801b90a:	b90b      	cbnz	r3, 801b910 <rcl_wait+0x160>
 801b90c:	692a      	ldr	r2, [r5, #16]
 801b90e:	5193      	str	r3, [r2, r6]
 801b910:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b912:	f109 0901 	add.w	r9, r9, #1
 801b916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b918:	454a      	cmp	r2, r9
 801b91a:	d8e5      	bhi.n	801b8e8 <rcl_wait+0x138>
 801b91c:	f038 0002 	bics.w	r0, r8, #2
 801b920:	d176      	bne.n	801ba10 <rcl_wait+0x260>
 801b922:	686f      	ldr	r7, [r5, #4]
 801b924:	b17f      	cbz	r7, 801b946 <rcl_wait+0x196>
 801b926:	4602      	mov	r2, r0
 801b928:	e002      	b.n	801b930 <rcl_wait+0x180>
 801b92a:	3201      	adds	r2, #1
 801b92c:	42ba      	cmp	r2, r7
 801b92e:	d00a      	beq.n	801b946 <rcl_wait+0x196>
 801b930:	6899      	ldr	r1, [r3, #8]
 801b932:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b936:	2900      	cmp	r1, #0
 801b938:	d1f7      	bne.n	801b92a <rcl_wait+0x17a>
 801b93a:	682e      	ldr	r6, [r5, #0]
 801b93c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801b940:	3201      	adds	r2, #1
 801b942:	42ba      	cmp	r2, r7
 801b944:	d1f4      	bne.n	801b930 <rcl_wait+0x180>
 801b946:	68ef      	ldr	r7, [r5, #12]
 801b948:	b17f      	cbz	r7, 801b96a <rcl_wait+0x1ba>
 801b94a:	2200      	movs	r2, #0
 801b94c:	e002      	b.n	801b954 <rcl_wait+0x1a4>
 801b94e:	3201      	adds	r2, #1
 801b950:	42ba      	cmp	r2, r7
 801b952:	d00a      	beq.n	801b96a <rcl_wait+0x1ba>
 801b954:	6959      	ldr	r1, [r3, #20]
 801b956:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b95a:	2900      	cmp	r1, #0
 801b95c:	d1f7      	bne.n	801b94e <rcl_wait+0x19e>
 801b95e:	68ae      	ldr	r6, [r5, #8]
 801b960:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801b964:	3201      	adds	r2, #1
 801b966:	42ba      	cmp	r2, r7
 801b968:	d1f4      	bne.n	801b954 <rcl_wait+0x1a4>
 801b96a:	69ef      	ldr	r7, [r5, #28]
 801b96c:	b17f      	cbz	r7, 801b98e <rcl_wait+0x1de>
 801b96e:	2200      	movs	r2, #0
 801b970:	e002      	b.n	801b978 <rcl_wait+0x1c8>
 801b972:	3201      	adds	r2, #1
 801b974:	42ba      	cmp	r2, r7
 801b976:	d00a      	beq.n	801b98e <rcl_wait+0x1de>
 801b978:	6a19      	ldr	r1, [r3, #32]
 801b97a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b97e:	2900      	cmp	r1, #0
 801b980:	d1f7      	bne.n	801b972 <rcl_wait+0x1c2>
 801b982:	69ae      	ldr	r6, [r5, #24]
 801b984:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801b988:	3201      	adds	r2, #1
 801b98a:	42ba      	cmp	r2, r7
 801b98c:	d1f4      	bne.n	801b978 <rcl_wait+0x1c8>
 801b98e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801b990:	b17f      	cbz	r7, 801b9b2 <rcl_wait+0x202>
 801b992:	2200      	movs	r2, #0
 801b994:	e002      	b.n	801b99c <rcl_wait+0x1ec>
 801b996:	3201      	adds	r2, #1
 801b998:	42ba      	cmp	r2, r7
 801b99a:	d00a      	beq.n	801b9b2 <rcl_wait+0x202>
 801b99c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801b99e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b9a2:	2900      	cmp	r1, #0
 801b9a4:	d1f7      	bne.n	801b996 <rcl_wait+0x1e6>
 801b9a6:	6a2e      	ldr	r6, [r5, #32]
 801b9a8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801b9ac:	3201      	adds	r2, #1
 801b9ae:	42ba      	cmp	r2, r7
 801b9b0:	d1f4      	bne.n	801b99c <rcl_wait+0x1ec>
 801b9b2:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801b9b4:	b17f      	cbz	r7, 801b9d6 <rcl_wait+0x226>
 801b9b6:	2200      	movs	r2, #0
 801b9b8:	e002      	b.n	801b9c0 <rcl_wait+0x210>
 801b9ba:	3201      	adds	r2, #1
 801b9bc:	42ba      	cmp	r2, r7
 801b9be:	d00a      	beq.n	801b9d6 <rcl_wait+0x226>
 801b9c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801b9c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b9c6:	2900      	cmp	r1, #0
 801b9c8:	d1f7      	bne.n	801b9ba <rcl_wait+0x20a>
 801b9ca:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801b9cc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801b9d0:	3201      	adds	r2, #1
 801b9d2:	42ba      	cmp	r2, r7
 801b9d4:	d1f4      	bne.n	801b9c0 <rcl_wait+0x210>
 801b9d6:	f1b8 0f02 	cmp.w	r8, #2
 801b9da:	f47f af06 	bne.w	801b7ea <rcl_wait+0x3a>
 801b9de:	f084 0301 	eor.w	r3, r4, #1
 801b9e2:	b2db      	uxtb	r3, r3
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	bf18      	it	ne
 801b9e8:	2002      	movne	r0, #2
 801b9ea:	b00d      	add	sp, #52	; 0x34
 801b9ec:	ecbd 8b02 	vpop	{d8}
 801b9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9f4:	2a00      	cmp	r2, #0
 801b9f6:	d03a      	beq.n	801ba6e <rcl_wait+0x2be>
 801b9f8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801b9fc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801ba00:	e705      	b.n	801b80e <rcl_wait+0x5e>
 801ba02:	f44f 7061 	mov.w	r0, #900	; 0x384
 801ba06:	b00d      	add	sp, #52	; 0x34
 801ba08:	ecbd 8b02 	vpop	{d8}
 801ba0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba10:	2001      	movs	r0, #1
 801ba12:	e6ea      	b.n	801b7ea <rcl_wait+0x3a>
 801ba14:	9b04      	ldr	r3, [sp, #16]
 801ba16:	460c      	mov	r4, r1
 801ba18:	2b01      	cmp	r3, #1
 801ba1a:	9b05      	ldr	r3, [sp, #20]
 801ba1c:	f173 0300 	sbcs.w	r3, r3, #0
 801ba20:	bfa8      	it	ge
 801ba22:	f044 0401 	orrge.w	r4, r4, #1
 801ba26:	b914      	cbnz	r4, 801ba2e <rcl_wait+0x27e>
 801ba28:	4623      	mov	r3, r4
 801ba2a:	e747      	b.n	801b8bc <rcl_wait+0x10c>
 801ba2c:	4611      	mov	r1, r2
 801ba2e:	2f00      	cmp	r7, #0
 801ba30:	da02      	bge.n	801ba38 <rcl_wait+0x288>
 801ba32:	f04f 0800 	mov.w	r8, #0
 801ba36:	4647      	mov	r7, r8
 801ba38:	460c      	mov	r4, r1
 801ba3a:	4640      	mov	r0, r8
 801ba3c:	4639      	mov	r1, r7
 801ba3e:	a312      	add	r3, pc, #72	; (adr r3, 801ba88 <rcl_wait+0x2d8>)
 801ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba44:	f7e4 ff2e 	bl	80008a4 <__aeabi_ldivmod>
 801ba48:	a30f      	add	r3, pc, #60	; (adr r3, 801ba88 <rcl_wait+0x2d8>)
 801ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ba52:	4640      	mov	r0, r8
 801ba54:	4639      	mov	r1, r7
 801ba56:	f7e4 ff25 	bl	80008a4 <__aeabi_ldivmod>
 801ba5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ba5e:	ab08      	add	r3, sp, #32
 801ba60:	e72c      	b.n	801b8bc <rcl_wait+0x10c>
 801ba62:	200b      	movs	r0, #11
 801ba64:	b00d      	add	sp, #52	; 0x34
 801ba66:	ecbd 8b02 	vpop	{d8}
 801ba6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba6e:	4611      	mov	r1, r2
 801ba70:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801ba74:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801ba78:	e713      	b.n	801b8a2 <rcl_wait+0xf2>
 801ba7a:	bf00      	nop
 801ba7c:	f3af 8000 	nop.w
 801ba80:	ffffffff 	.word	0xffffffff
 801ba84:	7fffffff 	.word	0x7fffffff
 801ba88:	3b9aca00 	.word	0x3b9aca00
 801ba8c:	00000000 	.word	0x00000000

0801ba90 <rcl_action_take_goal_response>:
 801ba90:	2800      	cmp	r0, #0
 801ba92:	d039      	beq.n	801bb08 <rcl_action_take_goal_response+0x78>
 801ba94:	b570      	push	{r4, r5, r6, lr}
 801ba96:	4604      	mov	r4, r0
 801ba98:	6800      	ldr	r0, [r0, #0]
 801ba9a:	b380      	cbz	r0, 801bafe <rcl_action_take_goal_response+0x6e>
 801ba9c:	460e      	mov	r6, r1
 801ba9e:	4615      	mov	r5, r2
 801baa0:	f7fe fbc6 	bl	801a230 <rcl_client_is_valid>
 801baa4:	b330      	cbz	r0, 801baf4 <rcl_action_take_goal_response+0x64>
 801baa6:	6820      	ldr	r0, [r4, #0]
 801baa8:	3004      	adds	r0, #4
 801baaa:	f7fe fbc1 	bl	801a230 <rcl_client_is_valid>
 801baae:	b308      	cbz	r0, 801baf4 <rcl_action_take_goal_response+0x64>
 801bab0:	6820      	ldr	r0, [r4, #0]
 801bab2:	3008      	adds	r0, #8
 801bab4:	f7fe fbbc 	bl	801a230 <rcl_client_is_valid>
 801bab8:	b1e0      	cbz	r0, 801baf4 <rcl_action_take_goal_response+0x64>
 801baba:	6820      	ldr	r0, [r4, #0]
 801babc:	300c      	adds	r0, #12
 801babe:	f7f7 f9fb 	bl	8012eb8 <rcl_subscription_is_valid>
 801bac2:	b1b8      	cbz	r0, 801baf4 <rcl_action_take_goal_response+0x64>
 801bac4:	6820      	ldr	r0, [r4, #0]
 801bac6:	3010      	adds	r0, #16
 801bac8:	f7f7 f9f6 	bl	8012eb8 <rcl_subscription_is_valid>
 801bacc:	b190      	cbz	r0, 801baf4 <rcl_action_take_goal_response+0x64>
 801bace:	b1cd      	cbz	r5, 801bb04 <rcl_action_take_goal_response+0x74>
 801bad0:	b1c6      	cbz	r6, 801bb04 <rcl_action_take_goal_response+0x74>
 801bad2:	462a      	mov	r2, r5
 801bad4:	4631      	mov	r1, r6
 801bad6:	6820      	ldr	r0, [r4, #0]
 801bad8:	f7fe fb62 	bl	801a1a0 <rcl_take_response>
 801badc:	b148      	cbz	r0, 801baf2 <rcl_action_take_goal_response+0x62>
 801bade:	280a      	cmp	r0, #10
 801bae0:	d007      	beq.n	801baf2 <rcl_action_take_goal_response+0x62>
 801bae2:	f240 12f5 	movw	r2, #501	; 0x1f5
 801bae6:	f640 0337 	movw	r3, #2103	; 0x837
 801baea:	4290      	cmp	r0, r2
 801baec:	bf0c      	ite	eq
 801baee:	4618      	moveq	r0, r3
 801baf0:	2001      	movne	r0, #1
 801baf2:	bd70      	pop	{r4, r5, r6, pc}
 801baf4:	f7f8 fa00 	bl	8013ef8 <rcutils_reset_error>
 801baf8:	f640 0036 	movw	r0, #2102	; 0x836
 801bafc:	bd70      	pop	{r4, r5, r6, pc}
 801bafe:	f640 0036 	movw	r0, #2102	; 0x836
 801bb02:	bd70      	pop	{r4, r5, r6, pc}
 801bb04:	200b      	movs	r0, #11
 801bb06:	bd70      	pop	{r4, r5, r6, pc}
 801bb08:	f640 0036 	movw	r0, #2102	; 0x836
 801bb0c:	4770      	bx	lr
 801bb0e:	bf00      	nop

0801bb10 <rcl_action_send_result_request>:
 801bb10:	b390      	cbz	r0, 801bb78 <rcl_action_send_result_request+0x68>
 801bb12:	b570      	push	{r4, r5, r6, lr}
 801bb14:	4604      	mov	r4, r0
 801bb16:	6800      	ldr	r0, [r0, #0]
 801bb18:	b348      	cbz	r0, 801bb6e <rcl_action_send_result_request+0x5e>
 801bb1a:	460e      	mov	r6, r1
 801bb1c:	4615      	mov	r5, r2
 801bb1e:	f7fe fb87 	bl	801a230 <rcl_client_is_valid>
 801bb22:	b1f8      	cbz	r0, 801bb64 <rcl_action_send_result_request+0x54>
 801bb24:	6820      	ldr	r0, [r4, #0]
 801bb26:	3004      	adds	r0, #4
 801bb28:	f7fe fb82 	bl	801a230 <rcl_client_is_valid>
 801bb2c:	b1d0      	cbz	r0, 801bb64 <rcl_action_send_result_request+0x54>
 801bb2e:	6820      	ldr	r0, [r4, #0]
 801bb30:	3008      	adds	r0, #8
 801bb32:	f7fe fb7d 	bl	801a230 <rcl_client_is_valid>
 801bb36:	b1a8      	cbz	r0, 801bb64 <rcl_action_send_result_request+0x54>
 801bb38:	6820      	ldr	r0, [r4, #0]
 801bb3a:	300c      	adds	r0, #12
 801bb3c:	f7f7 f9bc 	bl	8012eb8 <rcl_subscription_is_valid>
 801bb40:	b180      	cbz	r0, 801bb64 <rcl_action_send_result_request+0x54>
 801bb42:	6820      	ldr	r0, [r4, #0]
 801bb44:	3010      	adds	r0, #16
 801bb46:	f7f7 f9b7 	bl	8012eb8 <rcl_subscription_is_valid>
 801bb4a:	b158      	cbz	r0, 801bb64 <rcl_action_send_result_request+0x54>
 801bb4c:	b195      	cbz	r5, 801bb74 <rcl_action_send_result_request+0x64>
 801bb4e:	b18e      	cbz	r6, 801bb74 <rcl_action_send_result_request+0x64>
 801bb50:	6820      	ldr	r0, [r4, #0]
 801bb52:	462a      	mov	r2, r5
 801bb54:	4631      	mov	r1, r6
 801bb56:	3008      	adds	r0, #8
 801bb58:	f7fe faea 	bl	801a130 <rcl_send_request>
 801bb5c:	3800      	subs	r0, #0
 801bb5e:	bf18      	it	ne
 801bb60:	2001      	movne	r0, #1
 801bb62:	bd70      	pop	{r4, r5, r6, pc}
 801bb64:	f7f8 f9c8 	bl	8013ef8 <rcutils_reset_error>
 801bb68:	f640 0036 	movw	r0, #2102	; 0x836
 801bb6c:	bd70      	pop	{r4, r5, r6, pc}
 801bb6e:	f640 0036 	movw	r0, #2102	; 0x836
 801bb72:	bd70      	pop	{r4, r5, r6, pc}
 801bb74:	200b      	movs	r0, #11
 801bb76:	bd70      	pop	{r4, r5, r6, pc}
 801bb78:	f640 0036 	movw	r0, #2102	; 0x836
 801bb7c:	4770      	bx	lr
 801bb7e:	bf00      	nop

0801bb80 <rcl_action_take_result_response>:
 801bb80:	2800      	cmp	r0, #0
 801bb82:	d03a      	beq.n	801bbfa <rcl_action_take_result_response+0x7a>
 801bb84:	b570      	push	{r4, r5, r6, lr}
 801bb86:	4604      	mov	r4, r0
 801bb88:	6800      	ldr	r0, [r0, #0]
 801bb8a:	b388      	cbz	r0, 801bbf0 <rcl_action_take_result_response+0x70>
 801bb8c:	460e      	mov	r6, r1
 801bb8e:	4615      	mov	r5, r2
 801bb90:	f7fe fb4e 	bl	801a230 <rcl_client_is_valid>
 801bb94:	b338      	cbz	r0, 801bbe6 <rcl_action_take_result_response+0x66>
 801bb96:	6820      	ldr	r0, [r4, #0]
 801bb98:	3004      	adds	r0, #4
 801bb9a:	f7fe fb49 	bl	801a230 <rcl_client_is_valid>
 801bb9e:	b310      	cbz	r0, 801bbe6 <rcl_action_take_result_response+0x66>
 801bba0:	6820      	ldr	r0, [r4, #0]
 801bba2:	3008      	adds	r0, #8
 801bba4:	f7fe fb44 	bl	801a230 <rcl_client_is_valid>
 801bba8:	b1e8      	cbz	r0, 801bbe6 <rcl_action_take_result_response+0x66>
 801bbaa:	6820      	ldr	r0, [r4, #0]
 801bbac:	300c      	adds	r0, #12
 801bbae:	f7f7 f983 	bl	8012eb8 <rcl_subscription_is_valid>
 801bbb2:	b1c0      	cbz	r0, 801bbe6 <rcl_action_take_result_response+0x66>
 801bbb4:	6820      	ldr	r0, [r4, #0]
 801bbb6:	3010      	adds	r0, #16
 801bbb8:	f7f7 f97e 	bl	8012eb8 <rcl_subscription_is_valid>
 801bbbc:	b198      	cbz	r0, 801bbe6 <rcl_action_take_result_response+0x66>
 801bbbe:	b1d5      	cbz	r5, 801bbf6 <rcl_action_take_result_response+0x76>
 801bbc0:	b1ce      	cbz	r6, 801bbf6 <rcl_action_take_result_response+0x76>
 801bbc2:	6820      	ldr	r0, [r4, #0]
 801bbc4:	462a      	mov	r2, r5
 801bbc6:	4631      	mov	r1, r6
 801bbc8:	3008      	adds	r0, #8
 801bbca:	f7fe fae9 	bl	801a1a0 <rcl_take_response>
 801bbce:	b148      	cbz	r0, 801bbe4 <rcl_action_take_result_response+0x64>
 801bbd0:	280a      	cmp	r0, #10
 801bbd2:	d007      	beq.n	801bbe4 <rcl_action_take_result_response+0x64>
 801bbd4:	f240 12f5 	movw	r2, #501	; 0x1f5
 801bbd8:	f640 0337 	movw	r3, #2103	; 0x837
 801bbdc:	4290      	cmp	r0, r2
 801bbde:	bf0c      	ite	eq
 801bbe0:	4618      	moveq	r0, r3
 801bbe2:	2001      	movne	r0, #1
 801bbe4:	bd70      	pop	{r4, r5, r6, pc}
 801bbe6:	f7f8 f987 	bl	8013ef8 <rcutils_reset_error>
 801bbea:	f640 0036 	movw	r0, #2102	; 0x836
 801bbee:	bd70      	pop	{r4, r5, r6, pc}
 801bbf0:	f640 0036 	movw	r0, #2102	; 0x836
 801bbf4:	bd70      	pop	{r4, r5, r6, pc}
 801bbf6:	200b      	movs	r0, #11
 801bbf8:	bd70      	pop	{r4, r5, r6, pc}
 801bbfa:	f640 0036 	movw	r0, #2102	; 0x836
 801bbfe:	4770      	bx	lr

0801bc00 <rcl_action_take_cancel_response>:
 801bc00:	2800      	cmp	r0, #0
 801bc02:	d03a      	beq.n	801bc7a <rcl_action_take_cancel_response+0x7a>
 801bc04:	b570      	push	{r4, r5, r6, lr}
 801bc06:	4604      	mov	r4, r0
 801bc08:	6800      	ldr	r0, [r0, #0]
 801bc0a:	b388      	cbz	r0, 801bc70 <rcl_action_take_cancel_response+0x70>
 801bc0c:	460e      	mov	r6, r1
 801bc0e:	4615      	mov	r5, r2
 801bc10:	f7fe fb0e 	bl	801a230 <rcl_client_is_valid>
 801bc14:	b338      	cbz	r0, 801bc66 <rcl_action_take_cancel_response+0x66>
 801bc16:	6820      	ldr	r0, [r4, #0]
 801bc18:	3004      	adds	r0, #4
 801bc1a:	f7fe fb09 	bl	801a230 <rcl_client_is_valid>
 801bc1e:	b310      	cbz	r0, 801bc66 <rcl_action_take_cancel_response+0x66>
 801bc20:	6820      	ldr	r0, [r4, #0]
 801bc22:	3008      	adds	r0, #8
 801bc24:	f7fe fb04 	bl	801a230 <rcl_client_is_valid>
 801bc28:	b1e8      	cbz	r0, 801bc66 <rcl_action_take_cancel_response+0x66>
 801bc2a:	6820      	ldr	r0, [r4, #0]
 801bc2c:	300c      	adds	r0, #12
 801bc2e:	f7f7 f943 	bl	8012eb8 <rcl_subscription_is_valid>
 801bc32:	b1c0      	cbz	r0, 801bc66 <rcl_action_take_cancel_response+0x66>
 801bc34:	6820      	ldr	r0, [r4, #0]
 801bc36:	3010      	adds	r0, #16
 801bc38:	f7f7 f93e 	bl	8012eb8 <rcl_subscription_is_valid>
 801bc3c:	b198      	cbz	r0, 801bc66 <rcl_action_take_cancel_response+0x66>
 801bc3e:	b1d5      	cbz	r5, 801bc76 <rcl_action_take_cancel_response+0x76>
 801bc40:	b1ce      	cbz	r6, 801bc76 <rcl_action_take_cancel_response+0x76>
 801bc42:	6820      	ldr	r0, [r4, #0]
 801bc44:	462a      	mov	r2, r5
 801bc46:	4631      	mov	r1, r6
 801bc48:	3004      	adds	r0, #4
 801bc4a:	f7fe faa9 	bl	801a1a0 <rcl_take_response>
 801bc4e:	b148      	cbz	r0, 801bc64 <rcl_action_take_cancel_response+0x64>
 801bc50:	280a      	cmp	r0, #10
 801bc52:	d007      	beq.n	801bc64 <rcl_action_take_cancel_response+0x64>
 801bc54:	f240 12f5 	movw	r2, #501	; 0x1f5
 801bc58:	f640 0337 	movw	r3, #2103	; 0x837
 801bc5c:	4290      	cmp	r0, r2
 801bc5e:	bf0c      	ite	eq
 801bc60:	4618      	moveq	r0, r3
 801bc62:	2001      	movne	r0, #1
 801bc64:	bd70      	pop	{r4, r5, r6, pc}
 801bc66:	f7f8 f947 	bl	8013ef8 <rcutils_reset_error>
 801bc6a:	f640 0036 	movw	r0, #2102	; 0x836
 801bc6e:	bd70      	pop	{r4, r5, r6, pc}
 801bc70:	f640 0036 	movw	r0, #2102	; 0x836
 801bc74:	bd70      	pop	{r4, r5, r6, pc}
 801bc76:	200b      	movs	r0, #11
 801bc78:	bd70      	pop	{r4, r5, r6, pc}
 801bc7a:	f640 0036 	movw	r0, #2102	; 0x836
 801bc7e:	4770      	bx	lr

0801bc80 <rcl_action_take_feedback>:
 801bc80:	2800      	cmp	r0, #0
 801bc82:	d038      	beq.n	801bcf6 <rcl_action_take_feedback+0x76>
 801bc84:	b530      	push	{r4, r5, lr}
 801bc86:	4604      	mov	r4, r0
 801bc88:	6800      	ldr	r0, [r0, #0]
 801bc8a:	b091      	sub	sp, #68	; 0x44
 801bc8c:	b378      	cbz	r0, 801bcee <rcl_action_take_feedback+0x6e>
 801bc8e:	460d      	mov	r5, r1
 801bc90:	f7fe face 	bl	801a230 <rcl_client_is_valid>
 801bc94:	b328      	cbz	r0, 801bce2 <rcl_action_take_feedback+0x62>
 801bc96:	6820      	ldr	r0, [r4, #0]
 801bc98:	3004      	adds	r0, #4
 801bc9a:	f7fe fac9 	bl	801a230 <rcl_client_is_valid>
 801bc9e:	b300      	cbz	r0, 801bce2 <rcl_action_take_feedback+0x62>
 801bca0:	6820      	ldr	r0, [r4, #0]
 801bca2:	3008      	adds	r0, #8
 801bca4:	f7fe fac4 	bl	801a230 <rcl_client_is_valid>
 801bca8:	b1d8      	cbz	r0, 801bce2 <rcl_action_take_feedback+0x62>
 801bcaa:	6820      	ldr	r0, [r4, #0]
 801bcac:	300c      	adds	r0, #12
 801bcae:	f7f7 f903 	bl	8012eb8 <rcl_subscription_is_valid>
 801bcb2:	b1b0      	cbz	r0, 801bce2 <rcl_action_take_feedback+0x62>
 801bcb4:	6820      	ldr	r0, [r4, #0]
 801bcb6:	3010      	adds	r0, #16
 801bcb8:	f7f7 f8fe 	bl	8012eb8 <rcl_subscription_is_valid>
 801bcbc:	b188      	cbz	r0, 801bce2 <rcl_action_take_feedback+0x62>
 801bcbe:	b1ed      	cbz	r5, 801bcfc <rcl_action_take_feedback+0x7c>
 801bcc0:	6820      	ldr	r0, [r4, #0]
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	466a      	mov	r2, sp
 801bcc6:	4629      	mov	r1, r5
 801bcc8:	300c      	adds	r0, #12
 801bcca:	f7f7 f899 	bl	8012e00 <rcl_take>
 801bcce:	b160      	cbz	r0, 801bcea <rcl_action_take_feedback+0x6a>
 801bcd0:	f240 1391 	movw	r3, #401	; 0x191
 801bcd4:	4298      	cmp	r0, r3
 801bcd6:	d014      	beq.n	801bd02 <rcl_action_take_feedback+0x82>
 801bcd8:	280a      	cmp	r0, #10
 801bcda:	bf18      	it	ne
 801bcdc:	2001      	movne	r0, #1
 801bcde:	b011      	add	sp, #68	; 0x44
 801bce0:	bd30      	pop	{r4, r5, pc}
 801bce2:	f7f8 f909 	bl	8013ef8 <rcutils_reset_error>
 801bce6:	f640 0036 	movw	r0, #2102	; 0x836
 801bcea:	b011      	add	sp, #68	; 0x44
 801bcec:	bd30      	pop	{r4, r5, pc}
 801bcee:	f640 0036 	movw	r0, #2102	; 0x836
 801bcf2:	b011      	add	sp, #68	; 0x44
 801bcf4:	bd30      	pop	{r4, r5, pc}
 801bcf6:	f640 0036 	movw	r0, #2102	; 0x836
 801bcfa:	4770      	bx	lr
 801bcfc:	200b      	movs	r0, #11
 801bcfe:	b011      	add	sp, #68	; 0x44
 801bd00:	bd30      	pop	{r4, r5, pc}
 801bd02:	f640 0037 	movw	r0, #2103	; 0x837
 801bd06:	e7f0      	b.n	801bcea <rcl_action_take_feedback+0x6a>

0801bd08 <rcl_action_wait_set_add_action_client>:
 801bd08:	2800      	cmp	r0, #0
 801bd0a:	d048      	beq.n	801bd9e <rcl_action_wait_set_add_action_client+0x96>
 801bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd0e:	460c      	mov	r4, r1
 801bd10:	2900      	cmp	r1, #0
 801bd12:	d03c      	beq.n	801bd8e <rcl_action_wait_set_add_action_client+0x86>
 801bd14:	4605      	mov	r5, r0
 801bd16:	6808      	ldr	r0, [r1, #0]
 801bd18:	2800      	cmp	r0, #0
 801bd1a:	d038      	beq.n	801bd8e <rcl_action_wait_set_add_action_client+0x86>
 801bd1c:	4617      	mov	r7, r2
 801bd1e:	461e      	mov	r6, r3
 801bd20:	f7fe fa86 	bl	801a230 <rcl_client_is_valid>
 801bd24:	b3b0      	cbz	r0, 801bd94 <rcl_action_wait_set_add_action_client+0x8c>
 801bd26:	6820      	ldr	r0, [r4, #0]
 801bd28:	3004      	adds	r0, #4
 801bd2a:	f7fe fa81 	bl	801a230 <rcl_client_is_valid>
 801bd2e:	b388      	cbz	r0, 801bd94 <rcl_action_wait_set_add_action_client+0x8c>
 801bd30:	6820      	ldr	r0, [r4, #0]
 801bd32:	3008      	adds	r0, #8
 801bd34:	f7fe fa7c 	bl	801a230 <rcl_client_is_valid>
 801bd38:	b360      	cbz	r0, 801bd94 <rcl_action_wait_set_add_action_client+0x8c>
 801bd3a:	6820      	ldr	r0, [r4, #0]
 801bd3c:	300c      	adds	r0, #12
 801bd3e:	f7f7 f8bb 	bl	8012eb8 <rcl_subscription_is_valid>
 801bd42:	b338      	cbz	r0, 801bd94 <rcl_action_wait_set_add_action_client+0x8c>
 801bd44:	6820      	ldr	r0, [r4, #0]
 801bd46:	3010      	adds	r0, #16
 801bd48:	f7f7 f8b6 	bl	8012eb8 <rcl_subscription_is_valid>
 801bd4c:	b310      	cbz	r0, 801bd94 <rcl_action_wait_set_add_action_client+0x8c>
 801bd4e:	6821      	ldr	r1, [r4, #0]
 801bd50:	4628      	mov	r0, r5
 801bd52:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801bd56:	f7ff fcd1 	bl	801b6fc <rcl_wait_set_add_client>
 801bd5a:	b9b8      	cbnz	r0, 801bd8c <rcl_action_wait_set_add_action_client+0x84>
 801bd5c:	6821      	ldr	r1, [r4, #0]
 801bd5e:	4628      	mov	r0, r5
 801bd60:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801bd64:	3104      	adds	r1, #4
 801bd66:	f7ff fcc9 	bl	801b6fc <rcl_wait_set_add_client>
 801bd6a:	b978      	cbnz	r0, 801bd8c <rcl_action_wait_set_add_action_client+0x84>
 801bd6c:	6821      	ldr	r1, [r4, #0]
 801bd6e:	4628      	mov	r0, r5
 801bd70:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801bd74:	3108      	adds	r1, #8
 801bd76:	f7ff fcc1 	bl	801b6fc <rcl_wait_set_add_client>
 801bd7a:	b938      	cbnz	r0, 801bd8c <rcl_action_wait_set_add_action_client+0x84>
 801bd7c:	6821      	ldr	r1, [r4, #0]
 801bd7e:	4628      	mov	r0, r5
 801bd80:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801bd84:	310c      	adds	r1, #12
 801bd86:	f7ff f969 	bl	801b05c <rcl_wait_set_add_subscription>
 801bd8a:	b158      	cbz	r0, 801bda4 <rcl_action_wait_set_add_action_client+0x9c>
 801bd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd8e:	f640 0036 	movw	r0, #2102	; 0x836
 801bd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd94:	f7f8 f8b0 	bl	8013ef8 <rcutils_reset_error>
 801bd98:	f640 0036 	movw	r0, #2102	; 0x836
 801bd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd9e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801bda2:	4770      	bx	lr
 801bda4:	6821      	ldr	r1, [r4, #0]
 801bda6:	4628      	mov	r0, r5
 801bda8:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801bdac:	3110      	adds	r1, #16
 801bdae:	f7ff f955 	bl	801b05c <rcl_wait_set_add_subscription>
 801bdb2:	2800      	cmp	r0, #0
 801bdb4:	d1ea      	bne.n	801bd8c <rcl_action_wait_set_add_action_client+0x84>
 801bdb6:	b11f      	cbz	r7, 801bdc0 <rcl_action_wait_set_add_action_client+0xb8>
 801bdb8:	6823      	ldr	r3, [r4, #0]
 801bdba:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801bdbe:	603b      	str	r3, [r7, #0]
 801bdc0:	2e00      	cmp	r6, #0
 801bdc2:	d0e3      	beq.n	801bd8c <rcl_action_wait_set_add_action_client+0x84>
 801bdc4:	6823      	ldr	r3, [r4, #0]
 801bdc6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801bdca:	6033      	str	r3, [r6, #0]
 801bdcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdce:	bf00      	nop

0801bdd0 <rcl_action_client_wait_set_get_entities_ready>:
 801bdd0:	2800      	cmp	r0, #0
 801bdd2:	d050      	beq.n	801be76 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801bdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdd8:	460c      	mov	r4, r1
 801bdda:	2900      	cmp	r1, #0
 801bddc:	d03e      	beq.n	801be5c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801bdde:	4605      	mov	r5, r0
 801bde0:	6808      	ldr	r0, [r1, #0]
 801bde2:	2800      	cmp	r0, #0
 801bde4:	d03a      	beq.n	801be5c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801bde6:	4616      	mov	r6, r2
 801bde8:	461f      	mov	r7, r3
 801bdea:	f7fe fa21 	bl	801a230 <rcl_client_is_valid>
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	d038      	beq.n	801be64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801bdf2:	6820      	ldr	r0, [r4, #0]
 801bdf4:	3004      	adds	r0, #4
 801bdf6:	f7fe fa1b 	bl	801a230 <rcl_client_is_valid>
 801bdfa:	2800      	cmp	r0, #0
 801bdfc:	d032      	beq.n	801be64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801bdfe:	6820      	ldr	r0, [r4, #0]
 801be00:	3008      	adds	r0, #8
 801be02:	f7fe fa15 	bl	801a230 <rcl_client_is_valid>
 801be06:	b368      	cbz	r0, 801be64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801be08:	6820      	ldr	r0, [r4, #0]
 801be0a:	300c      	adds	r0, #12
 801be0c:	f7f7 f854 	bl	8012eb8 <rcl_subscription_is_valid>
 801be10:	b340      	cbz	r0, 801be64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801be12:	6820      	ldr	r0, [r4, #0]
 801be14:	3010      	adds	r0, #16
 801be16:	f7f7 f84f 	bl	8012eb8 <rcl_subscription_is_valid>
 801be1a:	b318      	cbz	r0, 801be64 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801be1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801be20:	2a00      	cmp	r2, #0
 801be22:	bf18      	it	ne
 801be24:	2b00      	cmpne	r3, #0
 801be26:	9b08      	ldr	r3, [sp, #32]
 801be28:	bf0c      	ite	eq
 801be2a:	2101      	moveq	r1, #1
 801be2c:	2100      	movne	r1, #0
 801be2e:	2b00      	cmp	r3, #0
 801be30:	bf08      	it	eq
 801be32:	f041 0101 	orreq.w	r1, r1, #1
 801be36:	2f00      	cmp	r7, #0
 801be38:	bf08      	it	eq
 801be3a:	f041 0101 	orreq.w	r1, r1, #1
 801be3e:	b9b9      	cbnz	r1, 801be70 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801be40:	b1b6      	cbz	r6, 801be70 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801be42:	6823      	ldr	r3, [r4, #0]
 801be44:	686c      	ldr	r4, [r5, #4]
 801be46:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801be4a:	428a      	cmp	r2, r1
 801be4c:	4610      	mov	r0, r2
 801be4e:	bf38      	it	cc
 801be50:	4608      	movcc	r0, r1
 801be52:	4284      	cmp	r4, r0
 801be54:	d812      	bhi.n	801be7c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801be56:	2001      	movs	r0, #1
 801be58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be5c:	f640 0036 	movw	r0, #2102	; 0x836
 801be60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be64:	f7f8 f848 	bl	8013ef8 <rcutils_reset_error>
 801be68:	f640 0036 	movw	r0, #2102	; 0x836
 801be6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be70:	200b      	movs	r0, #11
 801be72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be76:	f44f 7061 	mov.w	r0, #900	; 0x384
 801be7a:	4770      	bx	lr
 801be7c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801be80:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801be84:	45f0      	cmp	r8, lr
 801be86:	4640      	mov	r0, r8
 801be88:	69ec      	ldr	r4, [r5, #28]
 801be8a:	bf38      	it	cc
 801be8c:	4670      	movcc	r0, lr
 801be8e:	4560      	cmp	r0, ip
 801be90:	bf38      	it	cc
 801be92:	4660      	movcc	r0, ip
 801be94:	4284      	cmp	r4, r0
 801be96:	d9de      	bls.n	801be56 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801be98:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801be9c:	682d      	ldr	r5, [r5, #0]
 801be9e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801bea2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801bea6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801beaa:	1a18      	subs	r0, r3, r0
 801beac:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801beb0:	f103 0c0c 	add.w	ip, r3, #12
 801beb4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801beb8:	fab0 f080 	clz	r0, r0
 801bebc:	eba5 050c 	sub.w	r5, r5, ip
 801bec0:	0940      	lsrs	r0, r0, #5
 801bec2:	fab5 f585 	clz	r5, r5
 801bec6:	096d      	lsrs	r5, r5, #5
 801bec8:	7035      	strb	r5, [r6, #0]
 801beca:	f103 0510 	add.w	r5, r3, #16
 801bece:	1b64      	subs	r4, r4, r5
 801bed0:	9d08      	ldr	r5, [sp, #32]
 801bed2:	fab4 f484 	clz	r4, r4
 801bed6:	0964      	lsrs	r4, r4, #5
 801bed8:	703c      	strb	r4, [r7, #0]
 801beda:	1d1c      	adds	r4, r3, #4
 801bedc:	3308      	adds	r3, #8
 801bede:	7028      	strb	r0, [r5, #0]
 801bee0:	1b09      	subs	r1, r1, r4
 801bee2:	2000      	movs	r0, #0
 801bee4:	1ad3      	subs	r3, r2, r3
 801bee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bee8:	fab1 f181 	clz	r1, r1
 801beec:	fab3 f383 	clz	r3, r3
 801bef0:	0949      	lsrs	r1, r1, #5
 801bef2:	095b      	lsrs	r3, r3, #5
 801bef4:	7011      	strb	r1, [r2, #0]
 801bef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bef8:	7013      	strb	r3, [r2, #0]
 801befa:	e7b1      	b.n	801be60 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801befc <rcl_action_take_goal_request>:
 801befc:	2800      	cmp	r0, #0
 801befe:	d039      	beq.n	801bf74 <rcl_action_take_goal_request+0x78>
 801bf00:	b570      	push	{r4, r5, r6, lr}
 801bf02:	4604      	mov	r4, r0
 801bf04:	6800      	ldr	r0, [r0, #0]
 801bf06:	b380      	cbz	r0, 801bf6a <rcl_action_take_goal_request+0x6e>
 801bf08:	460e      	mov	r6, r1
 801bf0a:	4615      	mov	r5, r2
 801bf0c:	f7f6 fe8c 	bl	8012c28 <rcl_service_is_valid>
 801bf10:	b330      	cbz	r0, 801bf60 <rcl_action_take_goal_request+0x64>
 801bf12:	6820      	ldr	r0, [r4, #0]
 801bf14:	3004      	adds	r0, #4
 801bf16:	f7f6 fe87 	bl	8012c28 <rcl_service_is_valid>
 801bf1a:	b308      	cbz	r0, 801bf60 <rcl_action_take_goal_request+0x64>
 801bf1c:	6820      	ldr	r0, [r4, #0]
 801bf1e:	3008      	adds	r0, #8
 801bf20:	f7f6 fe82 	bl	8012c28 <rcl_service_is_valid>
 801bf24:	b1e0      	cbz	r0, 801bf60 <rcl_action_take_goal_request+0x64>
 801bf26:	6820      	ldr	r0, [r4, #0]
 801bf28:	300c      	adds	r0, #12
 801bf2a:	f7f6 fd41 	bl	80129b0 <rcl_publisher_is_valid>
 801bf2e:	b1b8      	cbz	r0, 801bf60 <rcl_action_take_goal_request+0x64>
 801bf30:	6820      	ldr	r0, [r4, #0]
 801bf32:	3010      	adds	r0, #16
 801bf34:	f7f6 fd3c 	bl	80129b0 <rcl_publisher_is_valid>
 801bf38:	b190      	cbz	r0, 801bf60 <rcl_action_take_goal_request+0x64>
 801bf3a:	b1cd      	cbz	r5, 801bf70 <rcl_action_take_goal_request+0x74>
 801bf3c:	b1c6      	cbz	r6, 801bf70 <rcl_action_take_goal_request+0x74>
 801bf3e:	462a      	mov	r2, r5
 801bf40:	4631      	mov	r1, r6
 801bf42:	6820      	ldr	r0, [r4, #0]
 801bf44:	f7f6 fe18 	bl	8012b78 <rcl_take_request>
 801bf48:	b148      	cbz	r0, 801bf5e <rcl_action_take_goal_request+0x62>
 801bf4a:	280a      	cmp	r0, #10
 801bf4c:	d007      	beq.n	801bf5e <rcl_action_take_goal_request+0x62>
 801bf4e:	f240 2259 	movw	r2, #601	; 0x259
 801bf52:	f640 0399 	movw	r3, #2201	; 0x899
 801bf56:	4290      	cmp	r0, r2
 801bf58:	bf0c      	ite	eq
 801bf5a:	4618      	moveq	r0, r3
 801bf5c:	2001      	movne	r0, #1
 801bf5e:	bd70      	pop	{r4, r5, r6, pc}
 801bf60:	f7f7 ffca 	bl	8013ef8 <rcutils_reset_error>
 801bf64:	f640 0098 	movw	r0, #2200	; 0x898
 801bf68:	bd70      	pop	{r4, r5, r6, pc}
 801bf6a:	f640 0098 	movw	r0, #2200	; 0x898
 801bf6e:	bd70      	pop	{r4, r5, r6, pc}
 801bf70:	200b      	movs	r0, #11
 801bf72:	bd70      	pop	{r4, r5, r6, pc}
 801bf74:	f640 0098 	movw	r0, #2200	; 0x898
 801bf78:	4770      	bx	lr
 801bf7a:	bf00      	nop

0801bf7c <rcl_action_send_goal_response>:
 801bf7c:	b388      	cbz	r0, 801bfe2 <rcl_action_send_goal_response+0x66>
 801bf7e:	b570      	push	{r4, r5, r6, lr}
 801bf80:	4604      	mov	r4, r0
 801bf82:	6800      	ldr	r0, [r0, #0]
 801bf84:	b340      	cbz	r0, 801bfd8 <rcl_action_send_goal_response+0x5c>
 801bf86:	460e      	mov	r6, r1
 801bf88:	4615      	mov	r5, r2
 801bf8a:	f7f6 fe4d 	bl	8012c28 <rcl_service_is_valid>
 801bf8e:	b1f0      	cbz	r0, 801bfce <rcl_action_send_goal_response+0x52>
 801bf90:	6820      	ldr	r0, [r4, #0]
 801bf92:	3004      	adds	r0, #4
 801bf94:	f7f6 fe48 	bl	8012c28 <rcl_service_is_valid>
 801bf98:	b1c8      	cbz	r0, 801bfce <rcl_action_send_goal_response+0x52>
 801bf9a:	6820      	ldr	r0, [r4, #0]
 801bf9c:	3008      	adds	r0, #8
 801bf9e:	f7f6 fe43 	bl	8012c28 <rcl_service_is_valid>
 801bfa2:	b1a0      	cbz	r0, 801bfce <rcl_action_send_goal_response+0x52>
 801bfa4:	6820      	ldr	r0, [r4, #0]
 801bfa6:	300c      	adds	r0, #12
 801bfa8:	f7f6 fd02 	bl	80129b0 <rcl_publisher_is_valid>
 801bfac:	b178      	cbz	r0, 801bfce <rcl_action_send_goal_response+0x52>
 801bfae:	6820      	ldr	r0, [r4, #0]
 801bfb0:	3010      	adds	r0, #16
 801bfb2:	f7f6 fcfd 	bl	80129b0 <rcl_publisher_is_valid>
 801bfb6:	b150      	cbz	r0, 801bfce <rcl_action_send_goal_response+0x52>
 801bfb8:	b18d      	cbz	r5, 801bfde <rcl_action_send_goal_response+0x62>
 801bfba:	b186      	cbz	r6, 801bfde <rcl_action_send_goal_response+0x62>
 801bfbc:	462a      	mov	r2, r5
 801bfbe:	4631      	mov	r1, r6
 801bfc0:	6820      	ldr	r0, [r4, #0]
 801bfc2:	f7f6 fe19 	bl	8012bf8 <rcl_send_response>
 801bfc6:	3800      	subs	r0, #0
 801bfc8:	bf18      	it	ne
 801bfca:	2001      	movne	r0, #1
 801bfcc:	bd70      	pop	{r4, r5, r6, pc}
 801bfce:	f7f7 ff93 	bl	8013ef8 <rcutils_reset_error>
 801bfd2:	f640 0098 	movw	r0, #2200	; 0x898
 801bfd6:	bd70      	pop	{r4, r5, r6, pc}
 801bfd8:	f640 0098 	movw	r0, #2200	; 0x898
 801bfdc:	bd70      	pop	{r4, r5, r6, pc}
 801bfde:	200b      	movs	r0, #11
 801bfe0:	bd70      	pop	{r4, r5, r6, pc}
 801bfe2:	f640 0098 	movw	r0, #2200	; 0x898
 801bfe6:	4770      	bx	lr

0801bfe8 <rcl_action_take_result_request>:
 801bfe8:	2800      	cmp	r0, #0
 801bfea:	d03a      	beq.n	801c062 <rcl_action_take_result_request+0x7a>
 801bfec:	b570      	push	{r4, r5, r6, lr}
 801bfee:	4604      	mov	r4, r0
 801bff0:	6800      	ldr	r0, [r0, #0]
 801bff2:	b388      	cbz	r0, 801c058 <rcl_action_take_result_request+0x70>
 801bff4:	460e      	mov	r6, r1
 801bff6:	4615      	mov	r5, r2
 801bff8:	f7f6 fe16 	bl	8012c28 <rcl_service_is_valid>
 801bffc:	b338      	cbz	r0, 801c04e <rcl_action_take_result_request+0x66>
 801bffe:	6820      	ldr	r0, [r4, #0]
 801c000:	3004      	adds	r0, #4
 801c002:	f7f6 fe11 	bl	8012c28 <rcl_service_is_valid>
 801c006:	b310      	cbz	r0, 801c04e <rcl_action_take_result_request+0x66>
 801c008:	6820      	ldr	r0, [r4, #0]
 801c00a:	3008      	adds	r0, #8
 801c00c:	f7f6 fe0c 	bl	8012c28 <rcl_service_is_valid>
 801c010:	b1e8      	cbz	r0, 801c04e <rcl_action_take_result_request+0x66>
 801c012:	6820      	ldr	r0, [r4, #0]
 801c014:	300c      	adds	r0, #12
 801c016:	f7f6 fccb 	bl	80129b0 <rcl_publisher_is_valid>
 801c01a:	b1c0      	cbz	r0, 801c04e <rcl_action_take_result_request+0x66>
 801c01c:	6820      	ldr	r0, [r4, #0]
 801c01e:	3010      	adds	r0, #16
 801c020:	f7f6 fcc6 	bl	80129b0 <rcl_publisher_is_valid>
 801c024:	b198      	cbz	r0, 801c04e <rcl_action_take_result_request+0x66>
 801c026:	b1d5      	cbz	r5, 801c05e <rcl_action_take_result_request+0x76>
 801c028:	b1ce      	cbz	r6, 801c05e <rcl_action_take_result_request+0x76>
 801c02a:	6820      	ldr	r0, [r4, #0]
 801c02c:	462a      	mov	r2, r5
 801c02e:	4631      	mov	r1, r6
 801c030:	3008      	adds	r0, #8
 801c032:	f7f6 fda1 	bl	8012b78 <rcl_take_request>
 801c036:	b148      	cbz	r0, 801c04c <rcl_action_take_result_request+0x64>
 801c038:	280a      	cmp	r0, #10
 801c03a:	d007      	beq.n	801c04c <rcl_action_take_result_request+0x64>
 801c03c:	f240 2259 	movw	r2, #601	; 0x259
 801c040:	f640 0399 	movw	r3, #2201	; 0x899
 801c044:	4290      	cmp	r0, r2
 801c046:	bf0c      	ite	eq
 801c048:	4618      	moveq	r0, r3
 801c04a:	2001      	movne	r0, #1
 801c04c:	bd70      	pop	{r4, r5, r6, pc}
 801c04e:	f7f7 ff53 	bl	8013ef8 <rcutils_reset_error>
 801c052:	f640 0098 	movw	r0, #2200	; 0x898
 801c056:	bd70      	pop	{r4, r5, r6, pc}
 801c058:	f640 0098 	movw	r0, #2200	; 0x898
 801c05c:	bd70      	pop	{r4, r5, r6, pc}
 801c05e:	200b      	movs	r0, #11
 801c060:	bd70      	pop	{r4, r5, r6, pc}
 801c062:	f640 0098 	movw	r0, #2200	; 0x898
 801c066:	4770      	bx	lr

0801c068 <rcl_action_take_cancel_request>:
 801c068:	2800      	cmp	r0, #0
 801c06a:	d03a      	beq.n	801c0e2 <rcl_action_take_cancel_request+0x7a>
 801c06c:	b570      	push	{r4, r5, r6, lr}
 801c06e:	4604      	mov	r4, r0
 801c070:	6800      	ldr	r0, [r0, #0]
 801c072:	b388      	cbz	r0, 801c0d8 <rcl_action_take_cancel_request+0x70>
 801c074:	460e      	mov	r6, r1
 801c076:	4615      	mov	r5, r2
 801c078:	f7f6 fdd6 	bl	8012c28 <rcl_service_is_valid>
 801c07c:	b338      	cbz	r0, 801c0ce <rcl_action_take_cancel_request+0x66>
 801c07e:	6820      	ldr	r0, [r4, #0]
 801c080:	3004      	adds	r0, #4
 801c082:	f7f6 fdd1 	bl	8012c28 <rcl_service_is_valid>
 801c086:	b310      	cbz	r0, 801c0ce <rcl_action_take_cancel_request+0x66>
 801c088:	6820      	ldr	r0, [r4, #0]
 801c08a:	3008      	adds	r0, #8
 801c08c:	f7f6 fdcc 	bl	8012c28 <rcl_service_is_valid>
 801c090:	b1e8      	cbz	r0, 801c0ce <rcl_action_take_cancel_request+0x66>
 801c092:	6820      	ldr	r0, [r4, #0]
 801c094:	300c      	adds	r0, #12
 801c096:	f7f6 fc8b 	bl	80129b0 <rcl_publisher_is_valid>
 801c09a:	b1c0      	cbz	r0, 801c0ce <rcl_action_take_cancel_request+0x66>
 801c09c:	6820      	ldr	r0, [r4, #0]
 801c09e:	3010      	adds	r0, #16
 801c0a0:	f7f6 fc86 	bl	80129b0 <rcl_publisher_is_valid>
 801c0a4:	b198      	cbz	r0, 801c0ce <rcl_action_take_cancel_request+0x66>
 801c0a6:	b1d5      	cbz	r5, 801c0de <rcl_action_take_cancel_request+0x76>
 801c0a8:	b1ce      	cbz	r6, 801c0de <rcl_action_take_cancel_request+0x76>
 801c0aa:	6820      	ldr	r0, [r4, #0]
 801c0ac:	462a      	mov	r2, r5
 801c0ae:	4631      	mov	r1, r6
 801c0b0:	3004      	adds	r0, #4
 801c0b2:	f7f6 fd61 	bl	8012b78 <rcl_take_request>
 801c0b6:	b148      	cbz	r0, 801c0cc <rcl_action_take_cancel_request+0x64>
 801c0b8:	280a      	cmp	r0, #10
 801c0ba:	d007      	beq.n	801c0cc <rcl_action_take_cancel_request+0x64>
 801c0bc:	f240 2259 	movw	r2, #601	; 0x259
 801c0c0:	f640 0399 	movw	r3, #2201	; 0x899
 801c0c4:	4290      	cmp	r0, r2
 801c0c6:	bf0c      	ite	eq
 801c0c8:	4618      	moveq	r0, r3
 801c0ca:	2001      	movne	r0, #1
 801c0cc:	bd70      	pop	{r4, r5, r6, pc}
 801c0ce:	f7f7 ff13 	bl	8013ef8 <rcutils_reset_error>
 801c0d2:	f640 0098 	movw	r0, #2200	; 0x898
 801c0d6:	bd70      	pop	{r4, r5, r6, pc}
 801c0d8:	f640 0098 	movw	r0, #2200	; 0x898
 801c0dc:	bd70      	pop	{r4, r5, r6, pc}
 801c0de:	200b      	movs	r0, #11
 801c0e0:	bd70      	pop	{r4, r5, r6, pc}
 801c0e2:	f640 0098 	movw	r0, #2200	; 0x898
 801c0e6:	4770      	bx	lr

0801c0e8 <rcl_action_send_cancel_response>:
 801c0e8:	b390      	cbz	r0, 801c150 <rcl_action_send_cancel_response+0x68>
 801c0ea:	b570      	push	{r4, r5, r6, lr}
 801c0ec:	4604      	mov	r4, r0
 801c0ee:	6800      	ldr	r0, [r0, #0]
 801c0f0:	b348      	cbz	r0, 801c146 <rcl_action_send_cancel_response+0x5e>
 801c0f2:	460e      	mov	r6, r1
 801c0f4:	4615      	mov	r5, r2
 801c0f6:	f7f6 fd97 	bl	8012c28 <rcl_service_is_valid>
 801c0fa:	b1f8      	cbz	r0, 801c13c <rcl_action_send_cancel_response+0x54>
 801c0fc:	6820      	ldr	r0, [r4, #0]
 801c0fe:	3004      	adds	r0, #4
 801c100:	f7f6 fd92 	bl	8012c28 <rcl_service_is_valid>
 801c104:	b1d0      	cbz	r0, 801c13c <rcl_action_send_cancel_response+0x54>
 801c106:	6820      	ldr	r0, [r4, #0]
 801c108:	3008      	adds	r0, #8
 801c10a:	f7f6 fd8d 	bl	8012c28 <rcl_service_is_valid>
 801c10e:	b1a8      	cbz	r0, 801c13c <rcl_action_send_cancel_response+0x54>
 801c110:	6820      	ldr	r0, [r4, #0]
 801c112:	300c      	adds	r0, #12
 801c114:	f7f6 fc4c 	bl	80129b0 <rcl_publisher_is_valid>
 801c118:	b180      	cbz	r0, 801c13c <rcl_action_send_cancel_response+0x54>
 801c11a:	6820      	ldr	r0, [r4, #0]
 801c11c:	3010      	adds	r0, #16
 801c11e:	f7f6 fc47 	bl	80129b0 <rcl_publisher_is_valid>
 801c122:	b158      	cbz	r0, 801c13c <rcl_action_send_cancel_response+0x54>
 801c124:	b195      	cbz	r5, 801c14c <rcl_action_send_cancel_response+0x64>
 801c126:	b18e      	cbz	r6, 801c14c <rcl_action_send_cancel_response+0x64>
 801c128:	6820      	ldr	r0, [r4, #0]
 801c12a:	462a      	mov	r2, r5
 801c12c:	4631      	mov	r1, r6
 801c12e:	3004      	adds	r0, #4
 801c130:	f7f6 fd62 	bl	8012bf8 <rcl_send_response>
 801c134:	3800      	subs	r0, #0
 801c136:	bf18      	it	ne
 801c138:	2001      	movne	r0, #1
 801c13a:	bd70      	pop	{r4, r5, r6, pc}
 801c13c:	f7f7 fedc 	bl	8013ef8 <rcutils_reset_error>
 801c140:	f640 0098 	movw	r0, #2200	; 0x898
 801c144:	bd70      	pop	{r4, r5, r6, pc}
 801c146:	f640 0098 	movw	r0, #2200	; 0x898
 801c14a:	bd70      	pop	{r4, r5, r6, pc}
 801c14c:	200b      	movs	r0, #11
 801c14e:	bd70      	pop	{r4, r5, r6, pc}
 801c150:	f640 0098 	movw	r0, #2200	; 0x898
 801c154:	4770      	bx	lr
 801c156:	bf00      	nop

0801c158 <rcl_action_wait_set_add_action_server>:
 801c158:	2800      	cmp	r0, #0
 801c15a:	d04d      	beq.n	801c1f8 <rcl_action_wait_set_add_action_server+0xa0>
 801c15c:	b570      	push	{r4, r5, r6, lr}
 801c15e:	460c      	mov	r4, r1
 801c160:	b159      	cbz	r1, 801c17a <rcl_action_wait_set_add_action_server+0x22>
 801c162:	4605      	mov	r5, r0
 801c164:	6808      	ldr	r0, [r1, #0]
 801c166:	b140      	cbz	r0, 801c17a <rcl_action_wait_set_add_action_server+0x22>
 801c168:	4616      	mov	r6, r2
 801c16a:	f7f6 fd5d 	bl	8012c28 <rcl_service_is_valid>
 801c16e:	b120      	cbz	r0, 801c17a <rcl_action_wait_set_add_action_server+0x22>
 801c170:	6820      	ldr	r0, [r4, #0]
 801c172:	3004      	adds	r0, #4
 801c174:	f7f6 fd58 	bl	8012c28 <rcl_service_is_valid>
 801c178:	b910      	cbnz	r0, 801c180 <rcl_action_wait_set_add_action_server+0x28>
 801c17a:	f640 0098 	movw	r0, #2200	; 0x898
 801c17e:	bd70      	pop	{r4, r5, r6, pc}
 801c180:	6820      	ldr	r0, [r4, #0]
 801c182:	3008      	adds	r0, #8
 801c184:	f7f6 fd50 	bl	8012c28 <rcl_service_is_valid>
 801c188:	2800      	cmp	r0, #0
 801c18a:	d0f6      	beq.n	801c17a <rcl_action_wait_set_add_action_server+0x22>
 801c18c:	6820      	ldr	r0, [r4, #0]
 801c18e:	300c      	adds	r0, #12
 801c190:	f7f6 fc26 	bl	80129e0 <rcl_publisher_is_valid_except_context>
 801c194:	2800      	cmp	r0, #0
 801c196:	d0f0      	beq.n	801c17a <rcl_action_wait_set_add_action_server+0x22>
 801c198:	6820      	ldr	r0, [r4, #0]
 801c19a:	3010      	adds	r0, #16
 801c19c:	f7f6 fc20 	bl	80129e0 <rcl_publisher_is_valid_except_context>
 801c1a0:	2800      	cmp	r0, #0
 801c1a2:	d0ea      	beq.n	801c17a <rcl_action_wait_set_add_action_server+0x22>
 801c1a4:	6821      	ldr	r1, [r4, #0]
 801c1a6:	4628      	mov	r0, r5
 801c1a8:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801c1ac:	f7ff fad2 	bl	801b754 <rcl_wait_set_add_service>
 801c1b0:	2800      	cmp	r0, #0
 801c1b2:	d1e4      	bne.n	801c17e <rcl_action_wait_set_add_action_server+0x26>
 801c1b4:	6821      	ldr	r1, [r4, #0]
 801c1b6:	4628      	mov	r0, r5
 801c1b8:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801c1bc:	3104      	adds	r1, #4
 801c1be:	f7ff fac9 	bl	801b754 <rcl_wait_set_add_service>
 801c1c2:	2800      	cmp	r0, #0
 801c1c4:	d1db      	bne.n	801c17e <rcl_action_wait_set_add_action_server+0x26>
 801c1c6:	6821      	ldr	r1, [r4, #0]
 801c1c8:	4628      	mov	r0, r5
 801c1ca:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801c1ce:	3108      	adds	r1, #8
 801c1d0:	f7ff fac0 	bl	801b754 <rcl_wait_set_add_service>
 801c1d4:	2800      	cmp	r0, #0
 801c1d6:	d1d2      	bne.n	801c17e <rcl_action_wait_set_add_action_server+0x26>
 801c1d8:	6821      	ldr	r1, [r4, #0]
 801c1da:	4628      	mov	r0, r5
 801c1dc:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801c1e0:	3114      	adds	r1, #20
 801c1e2:	f7ff fa5b 	bl	801b69c <rcl_wait_set_add_timer>
 801c1e6:	2800      	cmp	r0, #0
 801c1e8:	d1c9      	bne.n	801c17e <rcl_action_wait_set_add_action_server+0x26>
 801c1ea:	2e00      	cmp	r6, #0
 801c1ec:	d0c7      	beq.n	801c17e <rcl_action_wait_set_add_action_server+0x26>
 801c1ee:	6823      	ldr	r3, [r4, #0]
 801c1f0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801c1f4:	6033      	str	r3, [r6, #0]
 801c1f6:	bd70      	pop	{r4, r5, r6, pc}
 801c1f8:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c1fc:	4770      	bx	lr
 801c1fe:	bf00      	nop

0801c200 <rcl_action_server_wait_set_get_entities_ready>:
 801c200:	2800      	cmp	r0, #0
 801c202:	d067      	beq.n	801c2d4 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801c204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c208:	460c      	mov	r4, r1
 801c20a:	b161      	cbz	r1, 801c226 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c20c:	4605      	mov	r5, r0
 801c20e:	6808      	ldr	r0, [r1, #0]
 801c210:	b148      	cbz	r0, 801c226 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c212:	4616      	mov	r6, r2
 801c214:	4698      	mov	r8, r3
 801c216:	f7f6 fd07 	bl	8012c28 <rcl_service_is_valid>
 801c21a:	b120      	cbz	r0, 801c226 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c21c:	6820      	ldr	r0, [r4, #0]
 801c21e:	3004      	adds	r0, #4
 801c220:	f7f6 fd02 	bl	8012c28 <rcl_service_is_valid>
 801c224:	b918      	cbnz	r0, 801c22e <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801c226:	f640 0098 	movw	r0, #2200	; 0x898
 801c22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c22e:	6820      	ldr	r0, [r4, #0]
 801c230:	3008      	adds	r0, #8
 801c232:	f7f6 fcf9 	bl	8012c28 <rcl_service_is_valid>
 801c236:	2800      	cmp	r0, #0
 801c238:	d0f5      	beq.n	801c226 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c23a:	6820      	ldr	r0, [r4, #0]
 801c23c:	300c      	adds	r0, #12
 801c23e:	f7f6 fbcf 	bl	80129e0 <rcl_publisher_is_valid_except_context>
 801c242:	2800      	cmp	r0, #0
 801c244:	d0ef      	beq.n	801c226 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c246:	6820      	ldr	r0, [r4, #0]
 801c248:	3010      	adds	r0, #16
 801c24a:	f7f6 fbc9 	bl	80129e0 <rcl_publisher_is_valid_except_context>
 801c24e:	2800      	cmp	r0, #0
 801c250:	d0e9      	beq.n	801c226 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c256:	2a00      	cmp	r2, #0
 801c258:	bf18      	it	ne
 801c25a:	2b00      	cmpne	r3, #0
 801c25c:	bf0c      	ite	eq
 801c25e:	2101      	moveq	r1, #1
 801c260:	2100      	movne	r1, #0
 801c262:	f1b8 0f00 	cmp.w	r8, #0
 801c266:	bf08      	it	eq
 801c268:	f041 0101 	orreq.w	r1, r1, #1
 801c26c:	bba9      	cbnz	r1, 801c2da <rcl_action_server_wait_set_get_entities_ready+0xda>
 801c26e:	b3a6      	cbz	r6, 801c2da <rcl_action_server_wait_set_get_entities_ready+0xda>
 801c270:	6821      	ldr	r1, [r4, #0]
 801c272:	2000      	movs	r0, #0
 801c274:	692c      	ldr	r4, [r5, #16]
 801c276:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801c27a:	6a2f      	ldr	r7, [r5, #32]
 801c27c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c280:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801c284:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801c288:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801c28c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801c290:	1a64      	subs	r4, r4, r1
 801c292:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801c296:	fab4 f484 	clz	r4, r4
 801c29a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801c29e:	0964      	lsrs	r4, r4, #5
 801c2a0:	7034      	strb	r4, [r6, #0]
 801c2a2:	1d0c      	adds	r4, r1, #4
 801c2a4:	1b2c      	subs	r4, r5, r4
 801c2a6:	fab4 f484 	clz	r4, r4
 801c2aa:	0964      	lsrs	r4, r4, #5
 801c2ac:	f888 4000 	strb.w	r4, [r8]
 801c2b0:	f101 0408 	add.w	r4, r1, #8
 801c2b4:	1b1b      	subs	r3, r3, r4
 801c2b6:	9c06      	ldr	r4, [sp, #24]
 801c2b8:	fab3 f383 	clz	r3, r3
 801c2bc:	095b      	lsrs	r3, r3, #5
 801c2be:	7023      	strb	r3, [r4, #0]
 801c2c0:	f101 0314 	add.w	r3, r1, #20
 801c2c4:	1ad3      	subs	r3, r2, r3
 801c2c6:	9a07      	ldr	r2, [sp, #28]
 801c2c8:	fab3 f383 	clz	r3, r3
 801c2cc:	095b      	lsrs	r3, r3, #5
 801c2ce:	7013      	strb	r3, [r2, #0]
 801c2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2d4:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c2d8:	4770      	bx	lr
 801c2da:	200b      	movs	r0, #11
 801c2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c2e0 <_execute_event_handler>:
 801c2e0:	2002      	movs	r0, #2
 801c2e2:	4770      	bx	lr

0801c2e4 <_cancel_goal_event_handler>:
 801c2e4:	2003      	movs	r0, #3
 801c2e6:	4770      	bx	lr

0801c2e8 <_succeed_event_handler>:
 801c2e8:	2004      	movs	r0, #4
 801c2ea:	4770      	bx	lr

0801c2ec <_abort_event_handler>:
 801c2ec:	2006      	movs	r0, #6
 801c2ee:	4770      	bx	lr

0801c2f0 <_canceled_event_handler>:
 801c2f0:	2005      	movs	r0, #5
 801c2f2:	4770      	bx	lr

0801c2f4 <rcl_action_transition_goal_state>:
 801c2f4:	b2c2      	uxtb	r2, r0
 801c2f6:	2a06      	cmp	r2, #6
 801c2f8:	d810      	bhi.n	801c31c <rcl_action_transition_goal_state+0x28>
 801c2fa:	2904      	cmp	r1, #4
 801c2fc:	d80e      	bhi.n	801c31c <rcl_action_transition_goal_state+0x28>
 801c2fe:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801c302:	b410      	push	{r4}
 801c304:	1853      	adds	r3, r2, r1
 801c306:	4c06      	ldr	r4, [pc, #24]	; (801c320 <rcl_action_transition_goal_state+0x2c>)
 801c308:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c30c:	b113      	cbz	r3, 801c314 <rcl_action_transition_goal_state+0x20>
 801c30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c312:	4718      	bx	r3
 801c314:	2000      	movs	r0, #0
 801c316:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c31a:	4770      	bx	lr
 801c31c:	2000      	movs	r0, #0
 801c31e:	4770      	bx	lr
 801c320:	080247ac 	.word	0x080247ac

0801c324 <rcl_action_get_zero_initialized_cancel_response>:
 801c324:	b510      	push	{r4, lr}
 801c326:	4c07      	ldr	r4, [pc, #28]	; (801c344 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801c328:	4686      	mov	lr, r0
 801c32a:	4684      	mov	ip, r0
 801c32c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c32e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c334:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c338:	6823      	ldr	r3, [r4, #0]
 801c33a:	4670      	mov	r0, lr
 801c33c:	f8cc 3000 	str.w	r3, [ip]
 801c340:	bd10      	pop	{r4, pc}
 801c342:	bf00      	nop
 801c344:	08024838 	.word	0x08024838

0801c348 <rclc_action_send_result_request>:
 801c348:	b1d0      	cbz	r0, 801c380 <rclc_action_send_result_request+0x38>
 801c34a:	4684      	mov	ip, r0
 801c34c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801c350:	b500      	push	{lr}
 801c352:	b087      	sub	sp, #28
 801c354:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801c358:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801c35c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801c360:	f10d 0e08 	add.w	lr, sp, #8
 801c364:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c368:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c36c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801c370:	a902      	add	r1, sp, #8
 801c372:	3010      	adds	r0, #16
 801c374:	f7ff fbcc 	bl	801bb10 <rcl_action_send_result_request>
 801c378:	b920      	cbnz	r0, 801c384 <rclc_action_send_result_request+0x3c>
 801c37a:	b007      	add	sp, #28
 801c37c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c380:	200b      	movs	r0, #11
 801c382:	4770      	bx	lr
 801c384:	9001      	str	r0, [sp, #4]
 801c386:	f7f7 fdb7 	bl	8013ef8 <rcutils_reset_error>
 801c38a:	9801      	ldr	r0, [sp, #4]
 801c38c:	b007      	add	sp, #28
 801c38e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c392:	bf00      	nop

0801c394 <rclc_action_take_goal_handle>:
 801c394:	b160      	cbz	r0, 801c3b0 <rclc_action_take_goal_handle+0x1c>
 801c396:	6883      	ldr	r3, [r0, #8]
 801c398:	b143      	cbz	r3, 801c3ac <rclc_action_take_goal_handle+0x18>
 801c39a:	6819      	ldr	r1, [r3, #0]
 801c39c:	2200      	movs	r2, #0
 801c39e:	6081      	str	r1, [r0, #8]
 801c3a0:	721a      	strb	r2, [r3, #8]
 801c3a2:	68c1      	ldr	r1, [r0, #12]
 801c3a4:	621a      	str	r2, [r3, #32]
 801c3a6:	849a      	strh	r2, [r3, #36]	; 0x24
 801c3a8:	6019      	str	r1, [r3, #0]
 801c3aa:	60c3      	str	r3, [r0, #12]
 801c3ac:	4618      	mov	r0, r3
 801c3ae:	4770      	bx	lr
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	e7fb      	b.n	801c3ac <rclc_action_take_goal_handle+0x18>

0801c3b4 <rclc_action_remove_used_goal_handle>:
 801c3b4:	b180      	cbz	r0, 801c3d8 <rclc_action_remove_used_goal_handle+0x24>
 801c3b6:	b179      	cbz	r1, 801c3d8 <rclc_action_remove_used_goal_handle+0x24>
 801c3b8:	68c3      	ldr	r3, [r0, #12]
 801c3ba:	4299      	cmp	r1, r3
 801c3bc:	d00d      	beq.n	801c3da <rclc_action_remove_used_goal_handle+0x26>
 801c3be:	b12b      	cbz	r3, 801c3cc <rclc_action_remove_used_goal_handle+0x18>
 801c3c0:	681a      	ldr	r2, [r3, #0]
 801c3c2:	4291      	cmp	r1, r2
 801c3c4:	d003      	beq.n	801c3ce <rclc_action_remove_used_goal_handle+0x1a>
 801c3c6:	4613      	mov	r3, r2
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d1f9      	bne.n	801c3c0 <rclc_action_remove_used_goal_handle+0xc>
 801c3cc:	4770      	bx	lr
 801c3ce:	680a      	ldr	r2, [r1, #0]
 801c3d0:	601a      	str	r2, [r3, #0]
 801c3d2:	6883      	ldr	r3, [r0, #8]
 801c3d4:	600b      	str	r3, [r1, #0]
 801c3d6:	6081      	str	r1, [r0, #8]
 801c3d8:	4770      	bx	lr
 801c3da:	680b      	ldr	r3, [r1, #0]
 801c3dc:	60c3      	str	r3, [r0, #12]
 801c3de:	e7f8      	b.n	801c3d2 <rclc_action_remove_used_goal_handle+0x1e>

0801c3e0 <rclc_action_find_goal_handle_by_uuid>:
 801c3e0:	b538      	push	{r3, r4, r5, lr}
 801c3e2:	b181      	cbz	r1, 801c406 <rclc_action_find_goal_handle_by_uuid+0x26>
 801c3e4:	b178      	cbz	r0, 801c406 <rclc_action_find_goal_handle_by_uuid+0x26>
 801c3e6:	68c4      	ldr	r4, [r0, #12]
 801c3e8:	460d      	mov	r5, r1
 801c3ea:	b914      	cbnz	r4, 801c3f2 <rclc_action_find_goal_handle_by_uuid+0x12>
 801c3ec:	e009      	b.n	801c402 <rclc_action_find_goal_handle_by_uuid+0x22>
 801c3ee:	6824      	ldr	r4, [r4, #0]
 801c3f0:	b13c      	cbz	r4, 801c402 <rclc_action_find_goal_handle_by_uuid+0x22>
 801c3f2:	f104 0009 	add.w	r0, r4, #9
 801c3f6:	2210      	movs	r2, #16
 801c3f8:	4629      	mov	r1, r5
 801c3fa:	f003 fba9 	bl	801fb50 <memcmp>
 801c3fe:	2800      	cmp	r0, #0
 801c400:	d1f5      	bne.n	801c3ee <rclc_action_find_goal_handle_by_uuid+0xe>
 801c402:	4620      	mov	r0, r4
 801c404:	bd38      	pop	{r3, r4, r5, pc}
 801c406:	2400      	movs	r4, #0
 801c408:	4620      	mov	r0, r4
 801c40a:	bd38      	pop	{r3, r4, r5, pc}

0801c40c <rclc_action_find_first_handle_by_status>:
 801c40c:	b140      	cbz	r0, 801c420 <rclc_action_find_first_handle_by_status+0x14>
 801c40e:	68c0      	ldr	r0, [r0, #12]
 801c410:	b910      	cbnz	r0, 801c418 <rclc_action_find_first_handle_by_status+0xc>
 801c412:	e005      	b.n	801c420 <rclc_action_find_first_handle_by_status+0x14>
 801c414:	6800      	ldr	r0, [r0, #0]
 801c416:	b118      	cbz	r0, 801c420 <rclc_action_find_first_handle_by_status+0x14>
 801c418:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801c41c:	428b      	cmp	r3, r1
 801c41e:	d1f9      	bne.n	801c414 <rclc_action_find_first_handle_by_status+0x8>
 801c420:	4770      	bx	lr
 801c422:	bf00      	nop

0801c424 <rclc_action_find_first_terminated_handle>:
 801c424:	b140      	cbz	r0, 801c438 <rclc_action_find_first_terminated_handle+0x14>
 801c426:	68c0      	ldr	r0, [r0, #12]
 801c428:	b910      	cbnz	r0, 801c430 <rclc_action_find_first_terminated_handle+0xc>
 801c42a:	e005      	b.n	801c438 <rclc_action_find_first_terminated_handle+0x14>
 801c42c:	6800      	ldr	r0, [r0, #0]
 801c42e:	b118      	cbz	r0, 801c438 <rclc_action_find_first_terminated_handle+0x14>
 801c430:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801c434:	2b03      	cmp	r3, #3
 801c436:	ddf9      	ble.n	801c42c <rclc_action_find_first_terminated_handle+0x8>
 801c438:	4770      	bx	lr
 801c43a:	bf00      	nop

0801c43c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801c43c:	b170      	cbz	r0, 801c45c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801c43e:	68c0      	ldr	r0, [r0, #12]
 801c440:	b160      	cbz	r0, 801c45c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801c442:	b410      	push	{r4}
 801c444:	e001      	b.n	801c44a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801c446:	6800      	ldr	r0, [r0, #0]
 801c448:	b128      	cbz	r0, 801c456 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801c44a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801c44e:	4299      	cmp	r1, r3
 801c450:	bf08      	it	eq
 801c452:	4294      	cmpeq	r4, r2
 801c454:	d1f7      	bne.n	801c446 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801c456:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c45a:	4770      	bx	lr
 801c45c:	4770      	bx	lr
 801c45e:	bf00      	nop

0801c460 <rclc_action_find_handle_by_result_request_sequence_number>:
 801c460:	b170      	cbz	r0, 801c480 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801c462:	68c0      	ldr	r0, [r0, #12]
 801c464:	b160      	cbz	r0, 801c480 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801c466:	b410      	push	{r4}
 801c468:	e001      	b.n	801c46e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801c46a:	6800      	ldr	r0, [r0, #0]
 801c46c:	b128      	cbz	r0, 801c47a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801c46e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801c472:	4299      	cmp	r1, r3
 801c474:	bf08      	it	eq
 801c476:	4294      	cmpeq	r4, r2
 801c478:	d1f7      	bne.n	801c46a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801c47a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c47e:	4770      	bx	lr
 801c480:	4770      	bx	lr
 801c482:	bf00      	nop

0801c484 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801c484:	b170      	cbz	r0, 801c4a4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801c486:	68c0      	ldr	r0, [r0, #12]
 801c488:	b160      	cbz	r0, 801c4a4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801c48a:	b410      	push	{r4}
 801c48c:	e001      	b.n	801c492 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801c48e:	6800      	ldr	r0, [r0, #0]
 801c490:	b128      	cbz	r0, 801c49e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801c492:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801c496:	4299      	cmp	r1, r3
 801c498:	bf08      	it	eq
 801c49a:	4294      	cmpeq	r4, r2
 801c49c:	d1f7      	bne.n	801c48e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801c49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4a2:	4770      	bx	lr
 801c4a4:	4770      	bx	lr
 801c4a6:	bf00      	nop

0801c4a8 <rclc_action_find_first_handle_with_goal_response>:
 801c4a8:	b140      	cbz	r0, 801c4bc <rclc_action_find_first_handle_with_goal_response+0x14>
 801c4aa:	68c0      	ldr	r0, [r0, #12]
 801c4ac:	b910      	cbnz	r0, 801c4b4 <rclc_action_find_first_handle_with_goal_response+0xc>
 801c4ae:	e005      	b.n	801c4bc <rclc_action_find_first_handle_with_goal_response+0x14>
 801c4b0:	6800      	ldr	r0, [r0, #0]
 801c4b2:	b118      	cbz	r0, 801c4bc <rclc_action_find_first_handle_with_goal_response+0x14>
 801c4b4:	f890 3020 	ldrb.w	r3, [r0, #32]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d0f9      	beq.n	801c4b0 <rclc_action_find_first_handle_with_goal_response+0x8>
 801c4bc:	4770      	bx	lr
 801c4be:	bf00      	nop

0801c4c0 <rclc_action_find_first_handle_with_result_response>:
 801c4c0:	b140      	cbz	r0, 801c4d4 <rclc_action_find_first_handle_with_result_response+0x14>
 801c4c2:	68c0      	ldr	r0, [r0, #12]
 801c4c4:	b910      	cbnz	r0, 801c4cc <rclc_action_find_first_handle_with_result_response+0xc>
 801c4c6:	e005      	b.n	801c4d4 <rclc_action_find_first_handle_with_result_response+0x14>
 801c4c8:	6800      	ldr	r0, [r0, #0]
 801c4ca:	b118      	cbz	r0, 801c4d4 <rclc_action_find_first_handle_with_result_response+0x14>
 801c4cc:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d0f9      	beq.n	801c4c8 <rclc_action_find_first_handle_with_result_response+0x8>
 801c4d4:	4770      	bx	lr
 801c4d6:	bf00      	nop

0801c4d8 <rclc_action_server_response_goal_request>:
 801c4d8:	b198      	cbz	r0, 801c502 <rclc_action_server_response_goal_request+0x2a>
 801c4da:	2200      	movs	r2, #0
 801c4dc:	460b      	mov	r3, r1
 801c4de:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801c4e2:	b510      	push	{r4, lr}
 801c4e4:	6844      	ldr	r4, [r0, #4]
 801c4e6:	b086      	sub	sp, #24
 801c4e8:	f104 0010 	add.w	r0, r4, #16
 801c4ec:	9205      	str	r2, [sp, #20]
 801c4ee:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801c4f2:	aa03      	add	r2, sp, #12
 801c4f4:	f88d 300c 	strb.w	r3, [sp, #12]
 801c4f8:	f7ff fd40 	bl	801bf7c <rcl_action_send_goal_response>
 801c4fc:	b918      	cbnz	r0, 801c506 <rclc_action_server_response_goal_request+0x2e>
 801c4fe:	b006      	add	sp, #24
 801c500:	bd10      	pop	{r4, pc}
 801c502:	200b      	movs	r0, #11
 801c504:	4770      	bx	lr
 801c506:	9001      	str	r0, [sp, #4]
 801c508:	f7f7 fcf6 	bl	8013ef8 <rcutils_reset_error>
 801c50c:	9801      	ldr	r0, [sp, #4]
 801c50e:	b006      	add	sp, #24
 801c510:	bd10      	pop	{r4, pc}
 801c512:	bf00      	nop
 801c514:	0000      	movs	r0, r0
	...

0801c518 <rclc_action_server_goal_cancel_accept>:
 801c518:	b310      	cbz	r0, 801c560 <rclc_action_server_goal_cancel_accept+0x48>
 801c51a:	b510      	push	{r4, lr}
 801c51c:	b090      	sub	sp, #64	; 0x40
 801c51e:	4604      	mov	r4, r0
 801c520:	a806      	add	r0, sp, #24
 801c522:	f7ff feff 	bl	801c324 <rcl_action_get_zero_initialized_cancel_response>
 801c526:	2300      	movs	r3, #0
 801c528:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801c52c:	46ec      	mov	ip, sp
 801c52e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801c532:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801c536:	f88d 3018 	strb.w	r3, [sp, #24]
 801c53a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801c53e:	f8cd d01c 	str.w	sp, [sp, #28]
 801c542:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c546:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801c568 <rclc_action_server_goal_cancel_accept+0x50>
 801c54a:	6860      	ldr	r0, [r4, #4]
 801c54c:	aa06      	add	r2, sp, #24
 801c54e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801c552:	3010      	adds	r0, #16
 801c554:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c558:	f7ff fdc6 	bl	801c0e8 <rcl_action_send_cancel_response>
 801c55c:	b010      	add	sp, #64	; 0x40
 801c55e:	bd10      	pop	{r4, pc}
 801c560:	200b      	movs	r0, #11
 801c562:	4770      	bx	lr
 801c564:	f3af 8000 	nop.w
 801c568:	00000001 	.word	0x00000001
 801c56c:	00000001 	.word	0x00000001

0801c570 <rclc_action_server_goal_cancel_reject>:
 801c570:	b082      	sub	sp, #8
 801c572:	b530      	push	{r4, r5, lr}
 801c574:	b08b      	sub	sp, #44	; 0x2c
 801c576:	ac0e      	add	r4, sp, #56	; 0x38
 801c578:	e884 000c 	stmia.w	r4, {r2, r3}
 801c57c:	b188      	cbz	r0, 801c5a2 <rclc_action_server_goal_cancel_reject+0x32>
 801c57e:	4604      	mov	r4, r0
 801c580:	a801      	add	r0, sp, #4
 801c582:	460d      	mov	r5, r1
 801c584:	f7ff fece 	bl	801c324 <rcl_action_get_zero_initialized_cancel_response>
 801c588:	aa01      	add	r2, sp, #4
 801c58a:	a90e      	add	r1, sp, #56	; 0x38
 801c58c:	f104 0010 	add.w	r0, r4, #16
 801c590:	f88d 5004 	strb.w	r5, [sp, #4]
 801c594:	f7ff fda8 	bl	801c0e8 <rcl_action_send_cancel_response>
 801c598:	b00b      	add	sp, #44	; 0x2c
 801c59a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c59e:	b002      	add	sp, #8
 801c5a0:	4770      	bx	lr
 801c5a2:	200b      	movs	r0, #11
 801c5a4:	b00b      	add	sp, #44	; 0x2c
 801c5a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c5aa:	b002      	add	sp, #8
 801c5ac:	4770      	bx	lr
 801c5ae:	bf00      	nop

0801c5b0 <__atomic_load_8>:
 801c5b0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801c5b4:	4a16      	ldr	r2, [pc, #88]	; (801c610 <__atomic_load_8+0x60>)
 801c5b6:	4b17      	ldr	r3, [pc, #92]	; (801c614 <__atomic_load_8+0x64>)
 801c5b8:	f04f 0c01 	mov.w	ip, #1
 801c5bc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801c5c0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801c5c4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801c5c8:	fb02 f101 	mul.w	r1, r2, r1
 801c5cc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801c5d0:	fba3 2301 	umull	r2, r3, r3, r1
 801c5d4:	091b      	lsrs	r3, r3, #4
 801c5d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c5da:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801c5de:	b4d0      	push	{r4, r6, r7}
 801c5e0:	1ac9      	subs	r1, r1, r3
 801c5e2:	4c0d      	ldr	r4, [pc, #52]	; (801c618 <__atomic_load_8+0x68>)
 801c5e4:	1862      	adds	r2, r4, r1
 801c5e6:	e8d2 3f4f 	ldrexb	r3, [r2]
 801c5ea:	e8c2 cf46 	strexb	r6, ip, [r2]
 801c5ee:	2e00      	cmp	r6, #0
 801c5f0:	d1f9      	bne.n	801c5e6 <__atomic_load_8+0x36>
 801c5f2:	b2db      	uxtb	r3, r3
 801c5f4:	f3bf 8f5b 	dmb	ish
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d1f4      	bne.n	801c5e6 <__atomic_load_8+0x36>
 801c5fc:	e9d0 6700 	ldrd	r6, r7, [r0]
 801c600:	f3bf 8f5b 	dmb	ish
 801c604:	5463      	strb	r3, [r4, r1]
 801c606:	4630      	mov	r0, r6
 801c608:	4639      	mov	r1, r7
 801c60a:	bcd0      	pop	{r4, r6, r7}
 801c60c:	4770      	bx	lr
 801c60e:	bf00      	nop
 801c610:	27d4eb2d 	.word	0x27d4eb2d
 801c614:	b21642c9 	.word	0xb21642c9
 801c618:	20016e18 	.word	0x20016e18

0801c61c <__atomic_store_8>:
 801c61c:	b570      	push	{r4, r5, r6, lr}
 801c61e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801c622:	4916      	ldr	r1, [pc, #88]	; (801c67c <__atomic_store_8+0x60>)
 801c624:	4c16      	ldr	r4, [pc, #88]	; (801c680 <__atomic_store_8+0x64>)
 801c626:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801c62a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801c62e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801c632:	fb01 fe0e 	mul.w	lr, r1, lr
 801c636:	4913      	ldr	r1, [pc, #76]	; (801c684 <__atomic_store_8+0x68>)
 801c638:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801c63c:	fba1 510e 	umull	r5, r1, r1, lr
 801c640:	f04f 0501 	mov.w	r5, #1
 801c644:	0909      	lsrs	r1, r1, #4
 801c646:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801c64a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801c64e:	ebae 0e01 	sub.w	lr, lr, r1
 801c652:	eb04 0c0e 	add.w	ip, r4, lr
 801c656:	e8dc 1f4f 	ldrexb	r1, [ip]
 801c65a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801c65e:	2e00      	cmp	r6, #0
 801c660:	d1f9      	bne.n	801c656 <__atomic_store_8+0x3a>
 801c662:	b2c9      	uxtb	r1, r1
 801c664:	f3bf 8f5b 	dmb	ish
 801c668:	2900      	cmp	r1, #0
 801c66a:	d1f4      	bne.n	801c656 <__atomic_store_8+0x3a>
 801c66c:	e9c0 2300 	strd	r2, r3, [r0]
 801c670:	f3bf 8f5b 	dmb	ish
 801c674:	f804 100e 	strb.w	r1, [r4, lr]
 801c678:	bd70      	pop	{r4, r5, r6, pc}
 801c67a:	bf00      	nop
 801c67c:	27d4eb2d 	.word	0x27d4eb2d
 801c680:	20016e18 	.word	0x20016e18
 801c684:	b21642c9 	.word	0xb21642c9

0801c688 <__atomic_exchange_8>:
 801c688:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801c68c:	4917      	ldr	r1, [pc, #92]	; (801c6ec <__atomic_exchange_8+0x64>)
 801c68e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801c692:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801c696:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801c69a:	fb01 fc0c 	mul.w	ip, r1, ip
 801c69e:	4914      	ldr	r1, [pc, #80]	; (801c6f0 <__atomic_exchange_8+0x68>)
 801c6a0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801c6a4:	b570      	push	{r4, r5, r6, lr}
 801c6a6:	4686      	mov	lr, r0
 801c6a8:	fba1 010c 	umull	r0, r1, r1, ip
 801c6ac:	4d11      	ldr	r5, [pc, #68]	; (801c6f4 <__atomic_exchange_8+0x6c>)
 801c6ae:	f04f 0001 	mov.w	r0, #1
 801c6b2:	0909      	lsrs	r1, r1, #4
 801c6b4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801c6b8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801c6bc:	ebac 0c01 	sub.w	ip, ip, r1
 801c6c0:	eb05 010c 	add.w	r1, r5, ip
 801c6c4:	e8d1 4f4f 	ldrexb	r4, [r1]
 801c6c8:	e8c1 0f46 	strexb	r6, r0, [r1]
 801c6cc:	2e00      	cmp	r6, #0
 801c6ce:	d1f9      	bne.n	801c6c4 <__atomic_exchange_8+0x3c>
 801c6d0:	b2e4      	uxtb	r4, r4
 801c6d2:	f3bf 8f5b 	dmb	ish
 801c6d6:	2c00      	cmp	r4, #0
 801c6d8:	d1f4      	bne.n	801c6c4 <__atomic_exchange_8+0x3c>
 801c6da:	e9de 0100 	ldrd	r0, r1, [lr]
 801c6de:	e9ce 2300 	strd	r2, r3, [lr]
 801c6e2:	f3bf 8f5b 	dmb	ish
 801c6e6:	f805 400c 	strb.w	r4, [r5, ip]
 801c6ea:	bd70      	pop	{r4, r5, r6, pc}
 801c6ec:	27d4eb2d 	.word	0x27d4eb2d
 801c6f0:	b21642c9 	.word	0xb21642c9
 801c6f4:	20016e18 	.word	0x20016e18

0801c6f8 <rcutils_is_directory>:
 801c6f8:	2000      	movs	r0, #0
 801c6fa:	4770      	bx	lr

0801c6fc <rcutils_join_path>:
 801c6fc:	b082      	sub	sp, #8
 801c6fe:	2000      	movs	r0, #0
 801c700:	e88d 000c 	stmia.w	sp, {r2, r3}
 801c704:	b002      	add	sp, #8
 801c706:	4770      	bx	lr

0801c708 <rcutils_to_native_path>:
 801c708:	b084      	sub	sp, #16
 801c70a:	2000      	movs	r0, #0
 801c70c:	f10d 0c04 	add.w	ip, sp, #4
 801c710:	b004      	add	sp, #16
 801c712:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801c716:	4770      	bx	lr

0801c718 <rcutils_string_array_fini>:
 801c718:	b328      	cbz	r0, 801c766 <rcutils_string_array_fini+0x4e>
 801c71a:	b570      	push	{r4, r5, r6, lr}
 801c71c:	4604      	mov	r4, r0
 801c71e:	6840      	ldr	r0, [r0, #4]
 801c720:	b1e0      	cbz	r0, 801c75c <rcutils_string_array_fini+0x44>
 801c722:	f104 0008 	add.w	r0, r4, #8
 801c726:	f7f7 fba9 	bl	8013e7c <rcutils_allocator_is_valid>
 801c72a:	b1c0      	cbz	r0, 801c75e <rcutils_string_array_fini+0x46>
 801c72c:	6823      	ldr	r3, [r4, #0]
 801c72e:	b1c3      	cbz	r3, 801c762 <rcutils_string_array_fini+0x4a>
 801c730:	2500      	movs	r5, #0
 801c732:	6860      	ldr	r0, [r4, #4]
 801c734:	462e      	mov	r6, r5
 801c736:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c73a:	68e3      	ldr	r3, [r4, #12]
 801c73c:	69a1      	ldr	r1, [r4, #24]
 801c73e:	4798      	blx	r3
 801c740:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c744:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801c748:	3501      	adds	r5, #1
 801c74a:	429d      	cmp	r5, r3
 801c74c:	d3f3      	bcc.n	801c736 <rcutils_string_array_fini+0x1e>
 801c74e:	68e3      	ldr	r3, [r4, #12]
 801c750:	69a1      	ldr	r1, [r4, #24]
 801c752:	4798      	blx	r3
 801c754:	2300      	movs	r3, #0
 801c756:	4618      	mov	r0, r3
 801c758:	e9c4 3300 	strd	r3, r3, [r4]
 801c75c:	bd70      	pop	{r4, r5, r6, pc}
 801c75e:	200b      	movs	r0, #11
 801c760:	bd70      	pop	{r4, r5, r6, pc}
 801c762:	6860      	ldr	r0, [r4, #4]
 801c764:	e7f3      	b.n	801c74e <rcutils_string_array_fini+0x36>
 801c766:	200b      	movs	r0, #11
 801c768:	4770      	bx	lr
 801c76a:	bf00      	nop

0801c76c <rcutils_get_zero_initialized_string_map>:
 801c76c:	2000      	movs	r0, #0
 801c76e:	4b01      	ldr	r3, [pc, #4]	; (801c774 <rcutils_get_zero_initialized_string_map+0x8>)
 801c770:	6018      	str	r0, [r3, #0]
 801c772:	4770      	bx	lr
 801c774:	20016e30 	.word	0x20016e30

0801c778 <rcutils_string_map_reserve>:
 801c778:	2800      	cmp	r0, #0
 801c77a:	d05e      	beq.n	801c83a <rcutils_string_map_reserve+0xc2>
 801c77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c780:	460c      	mov	r4, r1
 801c782:	6801      	ldr	r1, [r0, #0]
 801c784:	b082      	sub	sp, #8
 801c786:	4605      	mov	r5, r0
 801c788:	b129      	cbz	r1, 801c796 <rcutils_string_map_reserve+0x1e>
 801c78a:	68cb      	ldr	r3, [r1, #12]
 801c78c:	42a3      	cmp	r3, r4
 801c78e:	d906      	bls.n	801c79e <rcutils_string_map_reserve+0x26>
 801c790:	461c      	mov	r4, r3
 801c792:	2900      	cmp	r1, #0
 801c794:	d1f9      	bne.n	801c78a <rcutils_string_map_reserve+0x12>
 801c796:	201f      	movs	r0, #31
 801c798:	b002      	add	sp, #8
 801c79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c79e:	688b      	ldr	r3, [r1, #8]
 801c7a0:	42a3      	cmp	r3, r4
 801c7a2:	d046      	beq.n	801c832 <rcutils_string_map_reserve+0xba>
 801c7a4:	6a0e      	ldr	r6, [r1, #32]
 801c7a6:	2c00      	cmp	r4, #0
 801c7a8:	d033      	beq.n	801c812 <rcutils_string_map_reserve+0x9a>
 801c7aa:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801c7ae:	d242      	bcs.n	801c836 <rcutils_string_map_reserve+0xbe>
 801c7b0:	00a7      	lsls	r7, r4, #2
 801c7b2:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801c7b6:	6808      	ldr	r0, [r1, #0]
 801c7b8:	4632      	mov	r2, r6
 801c7ba:	4639      	mov	r1, r7
 801c7bc:	47c0      	blx	r8
 801c7be:	2800      	cmp	r0, #0
 801c7c0:	d039      	beq.n	801c836 <rcutils_string_map_reserve+0xbe>
 801c7c2:	682b      	ldr	r3, [r5, #0]
 801c7c4:	4632      	mov	r2, r6
 801c7c6:	4639      	mov	r1, r7
 801c7c8:	6018      	str	r0, [r3, #0]
 801c7ca:	6858      	ldr	r0, [r3, #4]
 801c7cc:	47c0      	blx	r8
 801c7ce:	2800      	cmp	r0, #0
 801c7d0:	d031      	beq.n	801c836 <rcutils_string_map_reserve+0xbe>
 801c7d2:	682d      	ldr	r5, [r5, #0]
 801c7d4:	68ab      	ldr	r3, [r5, #8]
 801c7d6:	6068      	str	r0, [r5, #4]
 801c7d8:	42a3      	cmp	r3, r4
 801c7da:	d225      	bcs.n	801c828 <rcutils_string_map_reserve+0xb0>
 801c7dc:	682a      	ldr	r2, [r5, #0]
 801c7de:	eb00 0c07 	add.w	ip, r0, r7
 801c7e2:	0099      	lsls	r1, r3, #2
 801c7e4:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801c7e8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801c7ec:	45e6      	cmp	lr, ip
 801c7ee:	d203      	bcs.n	801c7f8 <rcutils_string_map_reserve+0x80>
 801c7f0:	eb02 0c07 	add.w	ip, r2, r7
 801c7f4:	4566      	cmp	r6, ip
 801c7f6:	d322      	bcc.n	801c83e <rcutils_string_map_reserve+0xc6>
 801c7f8:	1ae3      	subs	r3, r4, r3
 801c7fa:	4670      	mov	r0, lr
 801c7fc:	2100      	movs	r1, #0
 801c7fe:	009a      	lsls	r2, r3, #2
 801c800:	9201      	str	r2, [sp, #4]
 801c802:	f003 f9cf 	bl	801fba4 <memset>
 801c806:	9a01      	ldr	r2, [sp, #4]
 801c808:	2100      	movs	r1, #0
 801c80a:	4630      	mov	r0, r6
 801c80c:	f003 f9ca 	bl	801fba4 <memset>
 801c810:	e00a      	b.n	801c828 <rcutils_string_map_reserve+0xb0>
 801c812:	694f      	ldr	r7, [r1, #20]
 801c814:	6808      	ldr	r0, [r1, #0]
 801c816:	4631      	mov	r1, r6
 801c818:	47b8      	blx	r7
 801c81a:	682b      	ldr	r3, [r5, #0]
 801c81c:	4631      	mov	r1, r6
 801c81e:	6858      	ldr	r0, [r3, #4]
 801c820:	601c      	str	r4, [r3, #0]
 801c822:	47b8      	blx	r7
 801c824:	682d      	ldr	r5, [r5, #0]
 801c826:	606c      	str	r4, [r5, #4]
 801c828:	2000      	movs	r0, #0
 801c82a:	60ac      	str	r4, [r5, #8]
 801c82c:	b002      	add	sp, #8
 801c82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c832:	2000      	movs	r0, #0
 801c834:	e7b0      	b.n	801c798 <rcutils_string_map_reserve+0x20>
 801c836:	200a      	movs	r0, #10
 801c838:	e7ae      	b.n	801c798 <rcutils_string_map_reserve+0x20>
 801c83a:	200b      	movs	r0, #11
 801c83c:	4770      	bx	lr
 801c83e:	1f0b      	subs	r3, r1, #4
 801c840:	4418      	add	r0, r3
 801c842:	4413      	add	r3, r2
 801c844:	3a04      	subs	r2, #4
 801c846:	4417      	add	r7, r2
 801c848:	2200      	movs	r2, #0
 801c84a:	f843 2f04 	str.w	r2, [r3, #4]!
 801c84e:	42bb      	cmp	r3, r7
 801c850:	f840 2f04 	str.w	r2, [r0, #4]!
 801c854:	d1f9      	bne.n	801c84a <rcutils_string_map_reserve+0xd2>
 801c856:	e7e7      	b.n	801c828 <rcutils_string_map_reserve+0xb0>

0801c858 <rcutils_string_map_init>:
 801c858:	b082      	sub	sp, #8
 801c85a:	b570      	push	{r4, r5, r6, lr}
 801c85c:	ac04      	add	r4, sp, #16
 801c85e:	e884 000c 	stmia.w	r4, {r2, r3}
 801c862:	b380      	cbz	r0, 801c8c6 <rcutils_string_map_init+0x6e>
 801c864:	6806      	ldr	r6, [r0, #0]
 801c866:	4604      	mov	r4, r0
 801c868:	b12e      	cbz	r6, 801c876 <rcutils_string_map_init+0x1e>
 801c86a:	251e      	movs	r5, #30
 801c86c:	4628      	mov	r0, r5
 801c86e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c872:	b002      	add	sp, #8
 801c874:	4770      	bx	lr
 801c876:	a804      	add	r0, sp, #16
 801c878:	460d      	mov	r5, r1
 801c87a:	f7f7 faff 	bl	8013e7c <rcutils_allocator_is_valid>
 801c87e:	b310      	cbz	r0, 801c8c6 <rcutils_string_map_init+0x6e>
 801c880:	9b04      	ldr	r3, [sp, #16]
 801c882:	2024      	movs	r0, #36	; 0x24
 801c884:	9908      	ldr	r1, [sp, #32]
 801c886:	4798      	blx	r3
 801c888:	6020      	str	r0, [r4, #0]
 801c88a:	b310      	cbz	r0, 801c8d2 <rcutils_string_map_init+0x7a>
 801c88c:	f10d 0e10 	add.w	lr, sp, #16
 801c890:	f100 0c10 	add.w	ip, r0, #16
 801c894:	e9c0 6600 	strd	r6, r6, [r0]
 801c898:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801c89c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c8a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c8a4:	f8de 3000 	ldr.w	r3, [lr]
 801c8a8:	4629      	mov	r1, r5
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	f8cc 3000 	str.w	r3, [ip]
 801c8b0:	f7ff ff62 	bl	801c778 <rcutils_string_map_reserve>
 801c8b4:	4605      	mov	r5, r0
 801c8b6:	2800      	cmp	r0, #0
 801c8b8:	d0d8      	beq.n	801c86c <rcutils_string_map_init+0x14>
 801c8ba:	9b05      	ldr	r3, [sp, #20]
 801c8bc:	9908      	ldr	r1, [sp, #32]
 801c8be:	6820      	ldr	r0, [r4, #0]
 801c8c0:	4798      	blx	r3
 801c8c2:	6026      	str	r6, [r4, #0]
 801c8c4:	e7d2      	b.n	801c86c <rcutils_string_map_init+0x14>
 801c8c6:	250b      	movs	r5, #11
 801c8c8:	4628      	mov	r0, r5
 801c8ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c8ce:	b002      	add	sp, #8
 801c8d0:	4770      	bx	lr
 801c8d2:	250a      	movs	r5, #10
 801c8d4:	e7ca      	b.n	801c86c <rcutils_string_map_init+0x14>
 801c8d6:	bf00      	nop

0801c8d8 <rcutils_string_map_fini>:
 801c8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8dc:	b082      	sub	sp, #8
 801c8de:	2800      	cmp	r0, #0
 801c8e0:	d03a      	beq.n	801c958 <rcutils_string_map_fini+0x80>
 801c8e2:	6804      	ldr	r4, [r0, #0]
 801c8e4:	4606      	mov	r6, r0
 801c8e6:	2c00      	cmp	r4, #0
 801c8e8:	d032      	beq.n	801c950 <rcutils_string_map_fini+0x78>
 801c8ea:	68a3      	ldr	r3, [r4, #8]
 801c8ec:	b32b      	cbz	r3, 801c93a <rcutils_string_map_fini+0x62>
 801c8ee:	2500      	movs	r5, #0
 801c8f0:	6822      	ldr	r2, [r4, #0]
 801c8f2:	462f      	mov	r7, r5
 801c8f4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801c8f8:	b1e0      	cbz	r0, 801c934 <rcutils_string_map_fini+0x5c>
 801c8fa:	6a21      	ldr	r1, [r4, #32]
 801c8fc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801c900:	9101      	str	r1, [sp, #4]
 801c902:	47c0      	blx	r8
 801c904:	9901      	ldr	r1, [sp, #4]
 801c906:	e9d4 3200 	ldrd	r3, r2, [r4]
 801c90a:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801c90e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801c912:	47c0      	blx	r8
 801c914:	68e3      	ldr	r3, [r4, #12]
 801c916:	6862      	ldr	r2, [r4, #4]
 801c918:	3b01      	subs	r3, #1
 801c91a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801c91e:	3501      	adds	r5, #1
 801c920:	60e3      	str	r3, [r4, #12]
 801c922:	6834      	ldr	r4, [r6, #0]
 801c924:	68a3      	ldr	r3, [r4, #8]
 801c926:	429d      	cmp	r5, r3
 801c928:	d207      	bcs.n	801c93a <rcutils_string_map_fini+0x62>
 801c92a:	6822      	ldr	r2, [r4, #0]
 801c92c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801c930:	2800      	cmp	r0, #0
 801c932:	d1e2      	bne.n	801c8fa <rcutils_string_map_fini+0x22>
 801c934:	3501      	adds	r5, #1
 801c936:	429d      	cmp	r5, r3
 801c938:	d3dc      	bcc.n	801c8f4 <rcutils_string_map_fini+0x1c>
 801c93a:	2100      	movs	r1, #0
 801c93c:	4630      	mov	r0, r6
 801c93e:	f7ff ff1b 	bl	801c778 <rcutils_string_map_reserve>
 801c942:	4604      	mov	r4, r0
 801c944:	b920      	cbnz	r0, 801c950 <rcutils_string_map_fini+0x78>
 801c946:	6830      	ldr	r0, [r6, #0]
 801c948:	6943      	ldr	r3, [r0, #20]
 801c94a:	6a01      	ldr	r1, [r0, #32]
 801c94c:	4798      	blx	r3
 801c94e:	6034      	str	r4, [r6, #0]
 801c950:	4620      	mov	r0, r4
 801c952:	b002      	add	sp, #8
 801c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c958:	240b      	movs	r4, #11
 801c95a:	4620      	mov	r0, r4
 801c95c:	b002      	add	sp, #8
 801c95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c962:	bf00      	nop

0801c964 <rcutils_string_map_getn>:
 801c964:	b378      	cbz	r0, 801c9c6 <rcutils_string_map_getn+0x62>
 801c966:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c96a:	f8d0 b000 	ldr.w	fp, [r0]
 801c96e:	f1bb 0f00 	cmp.w	fp, #0
 801c972:	d01f      	beq.n	801c9b4 <rcutils_string_map_getn+0x50>
 801c974:	fab1 f481 	clz	r4, r1
 801c978:	4688      	mov	r8, r1
 801c97a:	0964      	lsrs	r4, r4, #5
 801c97c:	b1d1      	cbz	r1, 801c9b4 <rcutils_string_map_getn+0x50>
 801c97e:	f8db 7008 	ldr.w	r7, [fp, #8]
 801c982:	f8db 6000 	ldr.w	r6, [fp]
 801c986:	b1af      	cbz	r7, 801c9b4 <rcutils_string_map_getn+0x50>
 801c988:	4691      	mov	r9, r2
 801c98a:	3e04      	subs	r6, #4
 801c98c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801c990:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801c994:	3401      	adds	r4, #1
 801c996:	4628      	mov	r0, r5
 801c998:	b155      	cbz	r5, 801c9b0 <rcutils_string_map_getn+0x4c>
 801c99a:	f7e3 fcb1 	bl	8000300 <strlen>
 801c99e:	4602      	mov	r2, r0
 801c9a0:	4629      	mov	r1, r5
 801c9a2:	4640      	mov	r0, r8
 801c9a4:	454a      	cmp	r2, r9
 801c9a6:	bf38      	it	cc
 801c9a8:	464a      	movcc	r2, r9
 801c9aa:	f003 f910 	bl	801fbce <strncmp>
 801c9ae:	b120      	cbz	r0, 801c9ba <rcutils_string_map_getn+0x56>
 801c9b0:	42a7      	cmp	r7, r4
 801c9b2:	d1eb      	bne.n	801c98c <rcutils_string_map_getn+0x28>
 801c9b4:	2000      	movs	r0, #0
 801c9b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9ba:	f8db 3004 	ldr.w	r3, [fp, #4]
 801c9be:	f853 000a 	ldr.w	r0, [r3, sl]
 801c9c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9c6:	4770      	bx	lr

0801c9c8 <rmw_get_zero_initialized_context>:
 801c9c8:	b510      	push	{r4, lr}
 801c9ca:	4604      	mov	r4, r0
 801c9cc:	3010      	adds	r0, #16
 801c9ce:	f7f7 fc73 	bl	80142b8 <rmw_get_zero_initialized_init_options>
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	4620      	mov	r0, r4
 801c9d6:	60a3      	str	r3, [r4, #8]
 801c9d8:	64a3      	str	r3, [r4, #72]	; 0x48
 801c9da:	64e3      	str	r3, [r4, #76]	; 0x4c
 801c9dc:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801c9e8 <rmw_get_zero_initialized_context+0x20>
 801c9e0:	ed84 7b00 	vstr	d7, [r4]
 801c9e4:	bd10      	pop	{r4, pc}
 801c9e6:	bf00      	nop
	...

0801c9f0 <rmw_time_equal>:
 801c9f0:	b4f0      	push	{r4, r5, r6, r7}
 801c9f2:	b084      	sub	sp, #16
 801c9f4:	ac04      	add	r4, sp, #16
 801c9f6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801c9fa:	4603      	mov	r3, r0
 801c9fc:	4925      	ldr	r1, [pc, #148]	; (801ca94 <rmw_time_equal+0xa4>)
 801c9fe:	9d01      	ldr	r5, [sp, #4]
 801ca00:	4610      	mov	r0, r2
 801ca02:	4299      	cmp	r1, r3
 801ca04:	f04f 0202 	mov.w	r2, #2
 801ca08:	9e03      	ldr	r6, [sp, #12]
 801ca0a:	41aa      	sbcs	r2, r5
 801ca0c:	d330      	bcc.n	801ca70 <rmw_time_equal+0x80>
 801ca0e:	4c22      	ldr	r4, [pc, #136]	; (801ca98 <rmw_time_equal+0xa8>)
 801ca10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ca14:	fba3 3204 	umull	r3, r2, r3, r4
 801ca18:	fb04 2205 	mla	r2, r4, r5, r2
 801ca1c:	43dd      	mvns	r5, r3
 801ca1e:	1a8c      	subs	r4, r1, r2
 801ca20:	4285      	cmp	r5, r0
 801ca22:	41b4      	sbcs	r4, r6
 801ca24:	d332      	bcc.n	801ca8c <rmw_time_equal+0x9c>
 801ca26:	eb10 0c03 	adds.w	ip, r0, r3
 801ca2a:	eb42 0106 	adc.w	r1, r2, r6
 801ca2e:	4819      	ldr	r0, [pc, #100]	; (801ca94 <rmw_time_equal+0xa4>)
 801ca30:	2202      	movs	r2, #2
 801ca32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ca34:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ca36:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801ca3a:	4298      	cmp	r0, r3
 801ca3c:	41b2      	sbcs	r2, r6
 801ca3e:	d31c      	bcc.n	801ca7a <rmw_time_equal+0x8a>
 801ca40:	4c15      	ldr	r4, [pc, #84]	; (801ca98 <rmw_time_equal+0xa8>)
 801ca42:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ca46:	fba3 3204 	umull	r3, r2, r3, r4
 801ca4a:	fb04 2206 	mla	r2, r4, r6, r2
 801ca4e:	43de      	mvns	r6, r3
 801ca50:	1a84      	subs	r4, r0, r2
 801ca52:	42ae      	cmp	r6, r5
 801ca54:	41bc      	sbcs	r4, r7
 801ca56:	d315      	bcc.n	801ca84 <rmw_time_equal+0x94>
 801ca58:	195b      	adds	r3, r3, r5
 801ca5a:	eb42 0207 	adc.w	r2, r2, r7
 801ca5e:	428a      	cmp	r2, r1
 801ca60:	bf08      	it	eq
 801ca62:	4563      	cmpeq	r3, ip
 801ca64:	bf0c      	ite	eq
 801ca66:	2001      	moveq	r0, #1
 801ca68:	2000      	movne	r0, #0
 801ca6a:	b004      	add	sp, #16
 801ca6c:	bcf0      	pop	{r4, r5, r6, r7}
 801ca6e:	4770      	bx	lr
 801ca70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801ca74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ca78:	e7d9      	b.n	801ca2e <rmw_time_equal+0x3e>
 801ca7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ca7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801ca82:	e7ec      	b.n	801ca5e <rmw_time_equal+0x6e>
 801ca84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ca88:	4602      	mov	r2, r0
 801ca8a:	e7e8      	b.n	801ca5e <rmw_time_equal+0x6e>
 801ca8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801ca90:	e7cd      	b.n	801ca2e <rmw_time_equal+0x3e>
 801ca92:	bf00      	nop
 801ca94:	25c17d04 	.word	0x25c17d04
 801ca98:	3b9aca00 	.word	0x3b9aca00

0801ca9c <rmw_time_total_nsec>:
 801ca9c:	b470      	push	{r4, r5, r6}
 801ca9e:	b085      	sub	sp, #20
 801caa0:	ac04      	add	r4, sp, #16
 801caa2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801caa6:	4603      	mov	r3, r0
 801caa8:	4913      	ldr	r1, [pc, #76]	; (801caf8 <rmw_time_total_nsec+0x5c>)
 801caaa:	9d01      	ldr	r5, [sp, #4]
 801caac:	4610      	mov	r0, r2
 801caae:	4299      	cmp	r1, r3
 801cab0:	f04f 0202 	mov.w	r2, #2
 801cab4:	9e03      	ldr	r6, [sp, #12]
 801cab6:	41aa      	sbcs	r2, r5
 801cab8:	d311      	bcc.n	801cade <rmw_time_total_nsec+0x42>
 801caba:	4c10      	ldr	r4, [pc, #64]	; (801cafc <rmw_time_total_nsec+0x60>)
 801cabc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cac0:	fba3 3204 	umull	r3, r2, r3, r4
 801cac4:	fb04 2205 	mla	r2, r4, r5, r2
 801cac8:	43dd      	mvns	r5, r3
 801caca:	1a8c      	subs	r4, r1, r2
 801cacc:	4285      	cmp	r5, r0
 801cace:	41b4      	sbcs	r4, r6
 801cad0:	d30c      	bcc.n	801caec <rmw_time_total_nsec+0x50>
 801cad2:	1818      	adds	r0, r3, r0
 801cad4:	eb42 0106 	adc.w	r1, r2, r6
 801cad8:	b005      	add	sp, #20
 801cada:	bc70      	pop	{r4, r5, r6}
 801cadc:	4770      	bx	lr
 801cade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cae2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cae6:	b005      	add	sp, #20
 801cae8:	bc70      	pop	{r4, r5, r6}
 801caea:	4770      	bx	lr
 801caec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801caf0:	b005      	add	sp, #20
 801caf2:	bc70      	pop	{r4, r5, r6}
 801caf4:	4770      	bx	lr
 801caf6:	bf00      	nop
 801caf8:	25c17d04 	.word	0x25c17d04
 801cafc:	3b9aca00 	.word	0x3b9aca00

0801cb00 <rmw_validate_full_topic_name>:
 801cb00:	2800      	cmp	r0, #0
 801cb02:	d05d      	beq.n	801cbc0 <rmw_validate_full_topic_name+0xc0>
 801cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb08:	460d      	mov	r5, r1
 801cb0a:	2900      	cmp	r1, #0
 801cb0c:	d05a      	beq.n	801cbc4 <rmw_validate_full_topic_name+0xc4>
 801cb0e:	4604      	mov	r4, r0
 801cb10:	4616      	mov	r6, r2
 801cb12:	f7e3 fbf5 	bl	8000300 <strlen>
 801cb16:	b150      	cbz	r0, 801cb2e <rmw_validate_full_topic_name+0x2e>
 801cb18:	7823      	ldrb	r3, [r4, #0]
 801cb1a:	2b2f      	cmp	r3, #47	; 0x2f
 801cb1c:	d00e      	beq.n	801cb3c <rmw_validate_full_topic_name+0x3c>
 801cb1e:	2302      	movs	r3, #2
 801cb20:	602b      	str	r3, [r5, #0]
 801cb22:	b146      	cbz	r6, 801cb36 <rmw_validate_full_topic_name+0x36>
 801cb24:	2300      	movs	r3, #0
 801cb26:	4618      	mov	r0, r3
 801cb28:	6033      	str	r3, [r6, #0]
 801cb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb2e:	2301      	movs	r3, #1
 801cb30:	602b      	str	r3, [r5, #0]
 801cb32:	2e00      	cmp	r6, #0
 801cb34:	d1f6      	bne.n	801cb24 <rmw_validate_full_topic_name+0x24>
 801cb36:	2000      	movs	r0, #0
 801cb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb3c:	1e43      	subs	r3, r0, #1
 801cb3e:	5ce2      	ldrb	r2, [r4, r3]
 801cb40:	2a2f      	cmp	r2, #47	; 0x2f
 801cb42:	d041      	beq.n	801cbc8 <rmw_validate_full_topic_name+0xc8>
 801cb44:	1e62      	subs	r2, r4, #1
 801cb46:	f1c4 0e01 	rsb	lr, r4, #1
 801cb4a:	eb02 0800 	add.w	r8, r2, r0
 801cb4e:	eb0e 0702 	add.w	r7, lr, r2
 801cb52:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801cb56:	f023 0120 	bic.w	r1, r3, #32
 801cb5a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801cb5e:	3941      	subs	r1, #65	; 0x41
 801cb60:	2919      	cmp	r1, #25
 801cb62:	d90f      	bls.n	801cb84 <rmw_validate_full_topic_name+0x84>
 801cb64:	f1bc 0f0a 	cmp.w	ip, #10
 801cb68:	d90c      	bls.n	801cb84 <rmw_validate_full_topic_name+0x84>
 801cb6a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801cb6e:	fab3 f383 	clz	r3, r3
 801cb72:	095b      	lsrs	r3, r3, #5
 801cb74:	b933      	cbnz	r3, 801cb84 <rmw_validate_full_topic_name+0x84>
 801cb76:	2204      	movs	r2, #4
 801cb78:	602a      	str	r2, [r5, #0]
 801cb7a:	2e00      	cmp	r6, #0
 801cb7c:	d0db      	beq.n	801cb36 <rmw_validate_full_topic_name+0x36>
 801cb7e:	4618      	mov	r0, r3
 801cb80:	6037      	str	r7, [r6, #0]
 801cb82:	e7d2      	b.n	801cb2a <rmw_validate_full_topic_name+0x2a>
 801cb84:	4542      	cmp	r2, r8
 801cb86:	d1e2      	bne.n	801cb4e <rmw_validate_full_topic_name+0x4e>
 801cb88:	2301      	movs	r3, #1
 801cb8a:	4f1a      	ldr	r7, [pc, #104]	; (801cbf4 <rmw_validate_full_topic_name+0xf4>)
 801cb8c:	e004      	b.n	801cb98 <rmw_validate_full_topic_name+0x98>
 801cb8e:	4298      	cmp	r0, r3
 801cb90:	f104 0401 	add.w	r4, r4, #1
 801cb94:	4613      	mov	r3, r2
 801cb96:	d91c      	bls.n	801cbd2 <rmw_validate_full_topic_name+0xd2>
 801cb98:	4298      	cmp	r0, r3
 801cb9a:	f103 0201 	add.w	r2, r3, #1
 801cb9e:	d0f6      	beq.n	801cb8e <rmw_validate_full_topic_name+0x8e>
 801cba0:	7821      	ldrb	r1, [r4, #0]
 801cba2:	292f      	cmp	r1, #47	; 0x2f
 801cba4:	d1f3      	bne.n	801cb8e <rmw_validate_full_topic_name+0x8e>
 801cba6:	7861      	ldrb	r1, [r4, #1]
 801cba8:	292f      	cmp	r1, #47	; 0x2f
 801cbaa:	d01e      	beq.n	801cbea <rmw_validate_full_topic_name+0xea>
 801cbac:	5dc9      	ldrb	r1, [r1, r7]
 801cbae:	0749      	lsls	r1, r1, #29
 801cbb0:	d5ed      	bpl.n	801cb8e <rmw_validate_full_topic_name+0x8e>
 801cbb2:	2206      	movs	r2, #6
 801cbb4:	602a      	str	r2, [r5, #0]
 801cbb6:	2e00      	cmp	r6, #0
 801cbb8:	d0bd      	beq.n	801cb36 <rmw_validate_full_topic_name+0x36>
 801cbba:	2000      	movs	r0, #0
 801cbbc:	6033      	str	r3, [r6, #0]
 801cbbe:	e7b4      	b.n	801cb2a <rmw_validate_full_topic_name+0x2a>
 801cbc0:	200b      	movs	r0, #11
 801cbc2:	4770      	bx	lr
 801cbc4:	200b      	movs	r0, #11
 801cbc6:	e7b0      	b.n	801cb2a <rmw_validate_full_topic_name+0x2a>
 801cbc8:	2203      	movs	r2, #3
 801cbca:	602a      	str	r2, [r5, #0]
 801cbcc:	2e00      	cmp	r6, #0
 801cbce:	d1f4      	bne.n	801cbba <rmw_validate_full_topic_name+0xba>
 801cbd0:	e7b1      	b.n	801cb36 <rmw_validate_full_topic_name+0x36>
 801cbd2:	28f7      	cmp	r0, #247	; 0xf7
 801cbd4:	d803      	bhi.n	801cbde <rmw_validate_full_topic_name+0xde>
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	4618      	mov	r0, r3
 801cbda:	602b      	str	r3, [r5, #0]
 801cbdc:	e7a5      	b.n	801cb2a <rmw_validate_full_topic_name+0x2a>
 801cbde:	2307      	movs	r3, #7
 801cbe0:	602b      	str	r3, [r5, #0]
 801cbe2:	2e00      	cmp	r6, #0
 801cbe4:	d0a7      	beq.n	801cb36 <rmw_validate_full_topic_name+0x36>
 801cbe6:	23f6      	movs	r3, #246	; 0xf6
 801cbe8:	e7e7      	b.n	801cbba <rmw_validate_full_topic_name+0xba>
 801cbea:	2205      	movs	r2, #5
 801cbec:	602a      	str	r2, [r5, #0]
 801cbee:	2e00      	cmp	r6, #0
 801cbf0:	d1e3      	bne.n	801cbba <rmw_validate_full_topic_name+0xba>
 801cbf2:	e7a0      	b.n	801cb36 <rmw_validate_full_topic_name+0x36>
 801cbf4:	0802491c 	.word	0x0802491c

0801cbf8 <on_status>:
 801cbf8:	b082      	sub	sp, #8
 801cbfa:	b002      	add	sp, #8
 801cbfc:	4770      	bx	lr
 801cbfe:	bf00      	nop

0801cc00 <on_topic>:
 801cc00:	4a23      	ldr	r2, [pc, #140]	; (801cc90 <on_topic+0x90>)
 801cc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc06:	6812      	ldr	r2, [r2, #0]
 801cc08:	b094      	sub	sp, #80	; 0x50
 801cc0a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801cc0c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801cc10:	9113      	str	r1, [sp, #76]	; 0x4c
 801cc12:	9312      	str	r3, [sp, #72]	; 0x48
 801cc14:	b3c2      	cbz	r2, 801cc88 <on_topic+0x88>
 801cc16:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801cc1a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801cc1e:	e001      	b.n	801cc24 <on_topic+0x24>
 801cc20:	6852      	ldr	r2, [r2, #4]
 801cc22:	b38a      	cbz	r2, 801cc88 <on_topic+0x88>
 801cc24:	6894      	ldr	r4, [r2, #8]
 801cc26:	8aa3      	ldrh	r3, [r4, #20]
 801cc28:	428b      	cmp	r3, r1
 801cc2a:	d1f9      	bne.n	801cc20 <on_topic+0x20>
 801cc2c:	7da3      	ldrb	r3, [r4, #22]
 801cc2e:	4283      	cmp	r3, r0
 801cc30:	d1f6      	bne.n	801cc20 <on_topic+0x20>
 801cc32:	2248      	movs	r2, #72	; 0x48
 801cc34:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801cc38:	4668      	mov	r0, sp
 801cc3a:	f003 f880 	bl	801fd3e <memcpy>
 801cc3e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801cc42:	4620      	mov	r0, r4
 801cc44:	cb0c      	ldmia	r3, {r2, r3}
 801cc46:	f7f8 ffdb 	bl	8015c00 <rmw_uxrce_get_static_input_buffer_for_entity>
 801cc4a:	4607      	mov	r7, r0
 801cc4c:	b1e0      	cbz	r0, 801cc88 <on_topic+0x88>
 801cc4e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801cc52:	462a      	mov	r2, r5
 801cc54:	4630      	mov	r0, r6
 801cc56:	f108 0110 	add.w	r1, r8, #16
 801cc5a:	f7f9 fc91 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 801cc5e:	b930      	cbnz	r0, 801cc6e <on_topic+0x6e>
 801cc60:	4639      	mov	r1, r7
 801cc62:	480c      	ldr	r0, [pc, #48]	; (801cc94 <on_topic+0x94>)
 801cc64:	b014      	add	sp, #80	; 0x50
 801cc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc6a:	f000 b8bd 	b.w	801cde8 <put_memory>
 801cc6e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801cc72:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801cc76:	f000 fb33 	bl	801d2e0 <rmw_uros_epoch_nanos>
 801cc7a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801cc7e:	2305      	movs	r3, #5
 801cc80:	e942 0102 	strd	r0, r1, [r2, #-8]
 801cc84:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801cc88:	b014      	add	sp, #80	; 0x50
 801cc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc8e:	bf00      	nop
 801cc90:	20016dcc 	.word	0x20016dcc
 801cc94:	20016dbc 	.word	0x20016dbc

0801cc98 <on_request>:
 801cc98:	4824      	ldr	r0, [pc, #144]	; (801cd2c <on_request+0x94>)
 801cc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc9e:	6800      	ldr	r0, [r0, #0]
 801cca0:	b094      	sub	sp, #80	; 0x50
 801cca2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801cca4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801cca8:	9113      	str	r1, [sp, #76]	; 0x4c
 801ccaa:	2800      	cmp	r0, #0
 801ccac:	d03b      	beq.n	801cd26 <on_request+0x8e>
 801ccae:	461d      	mov	r5, r3
 801ccb0:	e001      	b.n	801ccb6 <on_request+0x1e>
 801ccb2:	6840      	ldr	r0, [r0, #4]
 801ccb4:	b3b8      	cbz	r0, 801cd26 <on_request+0x8e>
 801ccb6:	6884      	ldr	r4, [r0, #8]
 801ccb8:	8b21      	ldrh	r1, [r4, #24]
 801ccba:	4291      	cmp	r1, r2
 801ccbc:	d1f9      	bne.n	801ccb2 <on_request+0x1a>
 801ccbe:	2248      	movs	r2, #72	; 0x48
 801ccc0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801ccc4:	4668      	mov	r0, sp
 801ccc6:	f003 f83a 	bl	801fd3e <memcpy>
 801ccca:	f104 0320 	add.w	r3, r4, #32
 801ccce:	4620      	mov	r0, r4
 801ccd0:	cb0c      	ldmia	r3, {r2, r3}
 801ccd2:	f7f8 ff95 	bl	8015c00 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ccd6:	4680      	mov	r8, r0
 801ccd8:	b328      	cbz	r0, 801cd26 <on_request+0x8e>
 801ccda:	4630      	mov	r0, r6
 801ccdc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801cce0:	463a      	mov	r2, r7
 801cce2:	f106 0110 	add.w	r1, r6, #16
 801cce6:	f7f9 fc4b 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 801ccea:	b930      	cbnz	r0, 801ccfa <on_request+0x62>
 801ccec:	4641      	mov	r1, r8
 801ccee:	4810      	ldr	r0, [pc, #64]	; (801cd30 <on_request+0x98>)
 801ccf0:	b014      	add	sp, #80	; 0x50
 801ccf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf6:	f000 b877 	b.w	801cde8 <put_memory>
 801ccfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ccfc:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801cd00:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801cd04:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801cd08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cd0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cd10:	e88c 0003 	stmia.w	ip, {r0, r1}
 801cd14:	f000 fae4 	bl	801d2e0 <rmw_uros_epoch_nanos>
 801cd18:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801cd1c:	2303      	movs	r3, #3
 801cd1e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801cd22:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801cd26:	b014      	add	sp, #80	; 0x50
 801cd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd2c:	20016d9c 	.word	0x20016d9c
 801cd30:	20016dbc 	.word	0x20016dbc

0801cd34 <on_reply>:
 801cd34:	4822      	ldr	r0, [pc, #136]	; (801cdc0 <on_reply+0x8c>)
 801cd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd3a:	6800      	ldr	r0, [r0, #0]
 801cd3c:	b094      	sub	sp, #80	; 0x50
 801cd3e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801cd40:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801cd44:	9113      	str	r1, [sp, #76]	; 0x4c
 801cd46:	b3b8      	cbz	r0, 801cdb8 <on_reply+0x84>
 801cd48:	461d      	mov	r5, r3
 801cd4a:	e001      	b.n	801cd50 <on_reply+0x1c>
 801cd4c:	6840      	ldr	r0, [r0, #4]
 801cd4e:	b398      	cbz	r0, 801cdb8 <on_reply+0x84>
 801cd50:	6884      	ldr	r4, [r0, #8]
 801cd52:	8b21      	ldrh	r1, [r4, #24]
 801cd54:	4291      	cmp	r1, r2
 801cd56:	d1f9      	bne.n	801cd4c <on_reply+0x18>
 801cd58:	2248      	movs	r2, #72	; 0x48
 801cd5a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801cd5e:	4668      	mov	r0, sp
 801cd60:	f002 ffed 	bl	801fd3e <memcpy>
 801cd64:	f104 0320 	add.w	r3, r4, #32
 801cd68:	4620      	mov	r0, r4
 801cd6a:	cb0c      	ldmia	r3, {r2, r3}
 801cd6c:	f7f8 ff48 	bl	8015c00 <rmw_uxrce_get_static_input_buffer_for_entity>
 801cd70:	4680      	mov	r8, r0
 801cd72:	b308      	cbz	r0, 801cdb8 <on_reply+0x84>
 801cd74:	4630      	mov	r0, r6
 801cd76:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801cd7a:	463a      	mov	r2, r7
 801cd7c:	f106 0110 	add.w	r1, r6, #16
 801cd80:	f7f9 fbfe 	bl	8016580 <ucdr_deserialize_array_uint8_t>
 801cd84:	b930      	cbnz	r0, 801cd94 <on_reply+0x60>
 801cd86:	4641      	mov	r1, r8
 801cd88:	480e      	ldr	r0, [pc, #56]	; (801cdc4 <on_reply+0x90>)
 801cd8a:	b014      	add	sp, #80	; 0x50
 801cd8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd90:	f000 b82a 	b.w	801cde8 <put_memory>
 801cd94:	2200      	movs	r2, #0
 801cd96:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801cd9a:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801cd9e:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801cda2:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801cda6:	f000 fa9b 	bl	801d2e0 <rmw_uros_epoch_nanos>
 801cdaa:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801cdae:	2304      	movs	r3, #4
 801cdb0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801cdb4:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801cdb8:	b014      	add	sp, #80	; 0x50
 801cdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdbe:	bf00      	nop
 801cdc0:	200124ac 	.word	0x200124ac
 801cdc4:	20016dbc 	.word	0x20016dbc

0801cdc8 <get_memory>:
 801cdc8:	4603      	mov	r3, r0
 801cdca:	6840      	ldr	r0, [r0, #4]
 801cdcc:	b158      	cbz	r0, 801cde6 <get_memory+0x1e>
 801cdce:	6842      	ldr	r2, [r0, #4]
 801cdd0:	605a      	str	r2, [r3, #4]
 801cdd2:	b10a      	cbz	r2, 801cdd8 <get_memory+0x10>
 801cdd4:	2100      	movs	r1, #0
 801cdd6:	6011      	str	r1, [r2, #0]
 801cdd8:	681a      	ldr	r2, [r3, #0]
 801cdda:	6042      	str	r2, [r0, #4]
 801cddc:	b102      	cbz	r2, 801cde0 <get_memory+0x18>
 801cdde:	6010      	str	r0, [r2, #0]
 801cde0:	2200      	movs	r2, #0
 801cde2:	6002      	str	r2, [r0, #0]
 801cde4:	6018      	str	r0, [r3, #0]
 801cde6:	4770      	bx	lr

0801cde8 <put_memory>:
 801cde8:	680b      	ldr	r3, [r1, #0]
 801cdea:	b10b      	cbz	r3, 801cdf0 <put_memory+0x8>
 801cdec:	684a      	ldr	r2, [r1, #4]
 801cdee:	605a      	str	r2, [r3, #4]
 801cdf0:	684a      	ldr	r2, [r1, #4]
 801cdf2:	b102      	cbz	r2, 801cdf6 <put_memory+0xe>
 801cdf4:	6013      	str	r3, [r2, #0]
 801cdf6:	6803      	ldr	r3, [r0, #0]
 801cdf8:	428b      	cmp	r3, r1
 801cdfa:	6843      	ldr	r3, [r0, #4]
 801cdfc:	bf08      	it	eq
 801cdfe:	6002      	streq	r2, [r0, #0]
 801ce00:	604b      	str	r3, [r1, #4]
 801ce02:	b103      	cbz	r3, 801ce06 <put_memory+0x1e>
 801ce04:	6019      	str	r1, [r3, #0]
 801ce06:	2300      	movs	r3, #0
 801ce08:	600b      	str	r3, [r1, #0]
 801ce0a:	6041      	str	r1, [r0, #4]
 801ce0c:	4770      	bx	lr
 801ce0e:	bf00      	nop

0801ce10 <rmw_destroy_client>:
 801ce10:	b570      	push	{r4, r5, r6, lr}
 801ce12:	b128      	cbz	r0, 801ce20 <rmw_destroy_client+0x10>
 801ce14:	4604      	mov	r4, r0
 801ce16:	6800      	ldr	r0, [r0, #0]
 801ce18:	460d      	mov	r5, r1
 801ce1a:	f7f9 f905 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 801ce1e:	b910      	cbnz	r0, 801ce26 <rmw_destroy_client+0x16>
 801ce20:	2401      	movs	r4, #1
 801ce22:	4620      	mov	r0, r4
 801ce24:	bd70      	pop	{r4, r5, r6, pc}
 801ce26:	6863      	ldr	r3, [r4, #4]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d0f9      	beq.n	801ce20 <rmw_destroy_client+0x10>
 801ce2c:	2d00      	cmp	r5, #0
 801ce2e:	d0f7      	beq.n	801ce20 <rmw_destroy_client+0x10>
 801ce30:	6828      	ldr	r0, [r5, #0]
 801ce32:	f7f9 f8f9 	bl	8016028 <is_uxrce_rmw_identifier_valid>
 801ce36:	2800      	cmp	r0, #0
 801ce38:	d0f2      	beq.n	801ce20 <rmw_destroy_client+0x10>
 801ce3a:	686e      	ldr	r6, [r5, #4]
 801ce3c:	2e00      	cmp	r6, #0
 801ce3e:	d0ef      	beq.n	801ce20 <rmw_destroy_client+0x10>
 801ce40:	6864      	ldr	r4, [r4, #4]
 801ce42:	6932      	ldr	r2, [r6, #16]
 801ce44:	6920      	ldr	r0, [r4, #16]
 801ce46:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801ce4a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ce4e:	6819      	ldr	r1, [r3, #0]
 801ce50:	f7f9 ff62 	bl	8016d18 <uxr_buffer_cancel_data>
 801ce54:	4602      	mov	r2, r0
 801ce56:	6920      	ldr	r0, [r4, #16]
 801ce58:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801ce5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801ce60:	f7f8 ffd0 	bl	8015e04 <run_xrce_session>
 801ce64:	6920      	ldr	r0, [r4, #16]
 801ce66:	6932      	ldr	r2, [r6, #16]
 801ce68:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801ce6c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ce70:	6819      	ldr	r1, [r3, #0]
 801ce72:	f7f9 fbed 	bl	8016650 <uxr_buffer_delete_entity>
 801ce76:	4602      	mov	r2, r0
 801ce78:	6920      	ldr	r0, [r4, #16]
 801ce7a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801ce7e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801ce82:	f7f8 ffbf 	bl	8015e04 <run_xrce_session>
 801ce86:	4603      	mov	r3, r0
 801ce88:	4628      	mov	r0, r5
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	bf14      	ite	ne
 801ce8e:	2400      	movne	r4, #0
 801ce90:	2402      	moveq	r4, #2
 801ce92:	f7f8 fe93 	bl	8015bbc <rmw_uxrce_fini_client_memory>
 801ce96:	e7c4      	b.n	801ce22 <rmw_destroy_client+0x12>

0801ce98 <rmw_get_implementation_identifier>:
 801ce98:	4b01      	ldr	r3, [pc, #4]	; (801cea0 <rmw_get_implementation_identifier+0x8>)
 801ce9a:	6818      	ldr	r0, [r3, #0]
 801ce9c:	4770      	bx	lr
 801ce9e:	bf00      	nop
 801cea0:	08024874 	.word	0x08024874

0801cea4 <rmw_create_guard_condition>:
 801cea4:	b538      	push	{r3, r4, r5, lr}
 801cea6:	4605      	mov	r5, r0
 801cea8:	4808      	ldr	r0, [pc, #32]	; (801cecc <rmw_create_guard_condition+0x28>)
 801ceaa:	f7ff ff8d 	bl	801cdc8 <get_memory>
 801ceae:	4603      	mov	r3, r0
 801ceb0:	b148      	cbz	r0, 801cec6 <rmw_create_guard_condition+0x22>
 801ceb2:	6884      	ldr	r4, [r0, #8]
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	61e5      	str	r5, [r4, #28]
 801ceb8:	7423      	strb	r3, [r4, #16]
 801ceba:	f7ff ffed 	bl	801ce98 <rmw_get_implementation_identifier>
 801cebe:	f104 0314 	add.w	r3, r4, #20
 801cec2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801cec6:	4618      	mov	r0, r3
 801cec8:	bd38      	pop	{r3, r4, r5, pc}
 801ceca:	bf00      	nop
 801cecc:	20016d5c 	.word	0x20016d5c

0801ced0 <rmw_destroy_guard_condition>:
 801ced0:	b508      	push	{r3, lr}
 801ced2:	4b08      	ldr	r3, [pc, #32]	; (801cef4 <rmw_destroy_guard_condition+0x24>)
 801ced4:	6819      	ldr	r1, [r3, #0]
 801ced6:	b911      	cbnz	r1, 801cede <rmw_destroy_guard_condition+0xe>
 801ced8:	e00a      	b.n	801cef0 <rmw_destroy_guard_condition+0x20>
 801ceda:	6849      	ldr	r1, [r1, #4]
 801cedc:	b141      	cbz	r1, 801cef0 <rmw_destroy_guard_condition+0x20>
 801cede:	688b      	ldr	r3, [r1, #8]
 801cee0:	3314      	adds	r3, #20
 801cee2:	4298      	cmp	r0, r3
 801cee4:	d1f9      	bne.n	801ceda <rmw_destroy_guard_condition+0xa>
 801cee6:	4803      	ldr	r0, [pc, #12]	; (801cef4 <rmw_destroy_guard_condition+0x24>)
 801cee8:	f7ff ff7e 	bl	801cde8 <put_memory>
 801ceec:	2000      	movs	r0, #0
 801ceee:	bd08      	pop	{r3, pc}
 801cef0:	2001      	movs	r0, #1
 801cef2:	bd08      	pop	{r3, pc}
 801cef4:	20016d5c 	.word	0x20016d5c

0801cef8 <create_topic>:
 801cef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cefc:	4605      	mov	r5, r0
 801cefe:	b084      	sub	sp, #16
 801cf00:	4822      	ldr	r0, [pc, #136]	; (801cf8c <create_topic+0x94>)
 801cf02:	460f      	mov	r7, r1
 801cf04:	4616      	mov	r6, r2
 801cf06:	f7ff ff5f 	bl	801cdc8 <get_memory>
 801cf0a:	4604      	mov	r4, r0
 801cf0c:	2800      	cmp	r0, #0
 801cf0e:	d039      	beq.n	801cf84 <create_topic+0x8c>
 801cf10:	692b      	ldr	r3, [r5, #16]
 801cf12:	2102      	movs	r1, #2
 801cf14:	6884      	ldr	r4, [r0, #8]
 801cf16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cf1a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801cf94 <create_topic+0x9c>
 801cf1e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801cf22:	1c42      	adds	r2, r0, #1
 801cf24:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801cf28:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801cf2c:	f7f9 fe8a 	bl	8016c44 <uxr_object_id>
 801cf30:	223c      	movs	r2, #60	; 0x3c
 801cf32:	6120      	str	r0, [r4, #16]
 801cf34:	4641      	mov	r1, r8
 801cf36:	4638      	mov	r0, r7
 801cf38:	f7f9 f85e 	bl	8015ff8 <generate_topic_name>
 801cf3c:	b1f0      	cbz	r0, 801cf7c <create_topic+0x84>
 801cf3e:	4f14      	ldr	r7, [pc, #80]	; (801cf90 <create_topic+0x98>)
 801cf40:	4630      	mov	r0, r6
 801cf42:	2264      	movs	r2, #100	; 0x64
 801cf44:	4639      	mov	r1, r7
 801cf46:	f7f9 f829 	bl	8015f9c <generate_type_name>
 801cf4a:	b1b8      	cbz	r0, 801cf7c <create_topic+0x84>
 801cf4c:	6928      	ldr	r0, [r5, #16]
 801cf4e:	2106      	movs	r1, #6
 801cf50:	696b      	ldr	r3, [r5, #20]
 801cf52:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801cf56:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801cf5a:	f8cd 8000 	str.w	r8, [sp]
 801cf5e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801cf62:	6811      	ldr	r1, [r2, #0]
 801cf64:	6922      	ldr	r2, [r4, #16]
 801cf66:	f7f9 fbf1 	bl	801674c <uxr_buffer_create_topic_bin>
 801cf6a:	4602      	mov	r2, r0
 801cf6c:	6928      	ldr	r0, [r5, #16]
 801cf6e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801cf72:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801cf76:	f7f8 ff45 	bl	8015e04 <run_xrce_session>
 801cf7a:	b918      	cbnz	r0, 801cf84 <create_topic+0x8c>
 801cf7c:	4620      	mov	r0, r4
 801cf7e:	2400      	movs	r4, #0
 801cf80:	f7f8 fe32 	bl	8015be8 <rmw_uxrce_fini_topic_memory>
 801cf84:	4620      	mov	r0, r4
 801cf86:	b004      	add	sp, #16
 801cf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf8c:	20016ddc 	.word	0x20016ddc
 801cf90:	20016e70 	.word	0x20016e70
 801cf94:	20016e34 	.word	0x20016e34

0801cf98 <destroy_topic>:
 801cf98:	b538      	push	{r3, r4, r5, lr}
 801cf9a:	6985      	ldr	r5, [r0, #24]
 801cf9c:	b1dd      	cbz	r5, 801cfd6 <destroy_topic+0x3e>
 801cf9e:	4604      	mov	r4, r0
 801cfa0:	6928      	ldr	r0, [r5, #16]
 801cfa2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801cfa6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801cfaa:	6922      	ldr	r2, [r4, #16]
 801cfac:	6819      	ldr	r1, [r3, #0]
 801cfae:	f7f9 fb4f 	bl	8016650 <uxr_buffer_delete_entity>
 801cfb2:	4602      	mov	r2, r0
 801cfb4:	6928      	ldr	r0, [r5, #16]
 801cfb6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801cfba:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801cfbe:	f7f8 ff21 	bl	8015e04 <run_xrce_session>
 801cfc2:	4603      	mov	r3, r0
 801cfc4:	4620      	mov	r0, r4
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	bf14      	ite	ne
 801cfca:	2400      	movne	r4, #0
 801cfcc:	2402      	moveq	r4, #2
 801cfce:	f7f8 fe0b 	bl	8015be8 <rmw_uxrce_fini_topic_memory>
 801cfd2:	4620      	mov	r0, r4
 801cfd4:	bd38      	pop	{r3, r4, r5, pc}
 801cfd6:	2401      	movs	r4, #1
 801cfd8:	4620      	mov	r0, r4
 801cfda:	bd38      	pop	{r3, r4, r5, pc}

0801cfdc <rmw_wait>:
 801cfdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cfe0:	4698      	mov	r8, r3
 801cfe2:	ea40 0301 	orr.w	r3, r0, r1
 801cfe6:	b089      	sub	sp, #36	; 0x24
 801cfe8:	ea48 0303 	orr.w	r3, r8, r3
 801cfec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cfee:	4313      	orrs	r3, r2
 801cff0:	f000 8106 	beq.w	801d200 <rmw_wait+0x224>
 801cff4:	4605      	mov	r5, r0
 801cff6:	460e      	mov	r6, r1
 801cff8:	4691      	mov	r9, r2
 801cffa:	b16c      	cbz	r4, 801d018 <rmw_wait+0x3c>
 801cffc:	4ba6      	ldr	r3, [pc, #664]	; (801d298 <rmw_wait+0x2bc>)
 801cffe:	af04      	add	r7, sp, #16
 801d000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d002:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801d006:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801d00a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d00e:	f7ff fcef 	bl	801c9f0 <rmw_time_equal>
 801d012:	2800      	cmp	r0, #0
 801d014:	f000 810b 	beq.w	801d22e <rmw_wait+0x252>
 801d018:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d01c:	f7f8 fe74 	bl	8015d08 <rmw_uxrce_clean_expired_static_input_buffer>
 801d020:	4b9e      	ldr	r3, [pc, #632]	; (801d29c <rmw_wait+0x2c0>)
 801d022:	681c      	ldr	r4, [r3, #0]
 801d024:	b14c      	cbz	r4, 801d03a <rmw_wait+0x5e>
 801d026:	4623      	mov	r3, r4
 801d028:	2100      	movs	r1, #0
 801d02a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801d02e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d032:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801d036:	2b00      	cmp	r3, #0
 801d038:	d1f7      	bne.n	801d02a <rmw_wait+0x4e>
 801d03a:	f1b9 0f00 	cmp.w	r9, #0
 801d03e:	d011      	beq.n	801d064 <rmw_wait+0x88>
 801d040:	f8d9 1000 	ldr.w	r1, [r9]
 801d044:	b171      	cbz	r1, 801d064 <rmw_wait+0x88>
 801d046:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801d04a:	2300      	movs	r3, #0
 801d04c:	2001      	movs	r0, #1
 801d04e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d052:	3301      	adds	r3, #1
 801d054:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801d056:	4299      	cmp	r1, r3
 801d058:	6912      	ldr	r2, [r2, #16]
 801d05a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d05e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801d062:	d1f4      	bne.n	801d04e <rmw_wait+0x72>
 801d064:	f1b8 0f00 	cmp.w	r8, #0
 801d068:	d011      	beq.n	801d08e <rmw_wait+0xb2>
 801d06a:	f8d8 1000 	ldr.w	r1, [r8]
 801d06e:	b171      	cbz	r1, 801d08e <rmw_wait+0xb2>
 801d070:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801d074:	2300      	movs	r3, #0
 801d076:	2001      	movs	r0, #1
 801d078:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d07c:	3301      	adds	r3, #1
 801d07e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801d080:	4299      	cmp	r1, r3
 801d082:	6912      	ldr	r2, [r2, #16]
 801d084:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d088:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801d08c:	d1f4      	bne.n	801d078 <rmw_wait+0x9c>
 801d08e:	b185      	cbz	r5, 801d0b2 <rmw_wait+0xd6>
 801d090:	6829      	ldr	r1, [r5, #0]
 801d092:	b171      	cbz	r1, 801d0b2 <rmw_wait+0xd6>
 801d094:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801d098:	2300      	movs	r3, #0
 801d09a:	2001      	movs	r0, #1
 801d09c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d0a0:	3301      	adds	r3, #1
 801d0a2:	6a12      	ldr	r2, [r2, #32]
 801d0a4:	4299      	cmp	r1, r3
 801d0a6:	6912      	ldr	r2, [r2, #16]
 801d0a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d0ac:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801d0b0:	d1f4      	bne.n	801d09c <rmw_wait+0xc0>
 801d0b2:	b344      	cbz	r4, 801d106 <rmw_wait+0x12a>
 801d0b4:	4622      	mov	r2, r4
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801d0bc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801d0c0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801d0c4:	440b      	add	r3, r1
 801d0c6:	b2db      	uxtb	r3, r3
 801d0c8:	2a00      	cmp	r2, #0
 801d0ca:	d1f5      	bne.n	801d0b8 <rmw_wait+0xdc>
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d05f      	beq.n	801d190 <rmw_wait+0x1b4>
 801d0d0:	1c7a      	adds	r2, r7, #1
 801d0d2:	d00d      	beq.n	801d0f0 <rmw_wait+0x114>
 801d0d4:	ee07 7a90 	vmov	s15, r7
 801d0d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801d0dc:	ee07 3a90 	vmov	s15, r3
 801d0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d0e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d0e8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801d0ec:	ee17 7a90 	vmov	r7, s15
 801d0f0:	68a0      	ldr	r0, [r4, #8]
 801d0f2:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801d0f6:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	f040 808d 	bne.w	801d21a <rmw_wait+0x23e>
 801d100:	6864      	ldr	r4, [r4, #4]
 801d102:	2c00      	cmp	r4, #0
 801d104:	d1f4      	bne.n	801d0f0 <rmw_wait+0x114>
 801d106:	f1b9 0f00 	cmp.w	r9, #0
 801d10a:	f000 80a1 	beq.w	801d250 <rmw_wait+0x274>
 801d10e:	f8d9 7000 	ldr.w	r7, [r9]
 801d112:	2f00      	cmp	r7, #0
 801d114:	f000 80a4 	beq.w	801d260 <rmw_wait+0x284>
 801d118:	2400      	movs	r4, #0
 801d11a:	4627      	mov	r7, r4
 801d11c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d120:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d124:	f7f8 fdc6 	bl	8015cb4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d128:	2800      	cmp	r0, #0
 801d12a:	d03b      	beq.n	801d1a4 <rmw_wait+0x1c8>
 801d12c:	3401      	adds	r4, #1
 801d12e:	f8d9 3000 	ldr.w	r3, [r9]
 801d132:	2701      	movs	r7, #1
 801d134:	42a3      	cmp	r3, r4
 801d136:	d8f1      	bhi.n	801d11c <rmw_wait+0x140>
 801d138:	2701      	movs	r7, #1
 801d13a:	f1b8 0f00 	cmp.w	r8, #0
 801d13e:	d010      	beq.n	801d162 <rmw_wait+0x186>
 801d140:	f8d8 3000 	ldr.w	r3, [r8]
 801d144:	b16b      	cbz	r3, 801d162 <rmw_wait+0x186>
 801d146:	2400      	movs	r4, #0
 801d148:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d14c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d150:	f7f8 fdb0 	bl	8015cb4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d154:	b370      	cbz	r0, 801d1b4 <rmw_wait+0x1d8>
 801d156:	3401      	adds	r4, #1
 801d158:	f8d8 3000 	ldr.w	r3, [r8]
 801d15c:	2701      	movs	r7, #1
 801d15e:	42a3      	cmp	r3, r4
 801d160:	d8f2      	bhi.n	801d148 <rmw_wait+0x16c>
 801d162:	2d00      	cmp	r5, #0
 801d164:	d035      	beq.n	801d1d2 <rmw_wait+0x1f6>
 801d166:	682b      	ldr	r3, [r5, #0]
 801d168:	b39b      	cbz	r3, 801d1d2 <rmw_wait+0x1f6>
 801d16a:	2400      	movs	r4, #0
 801d16c:	686b      	ldr	r3, [r5, #4]
 801d16e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d172:	f7f8 fd9f 	bl	8015cb4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d176:	b328      	cbz	r0, 801d1c4 <rmw_wait+0x1e8>
 801d178:	3401      	adds	r4, #1
 801d17a:	682b      	ldr	r3, [r5, #0]
 801d17c:	2701      	movs	r7, #1
 801d17e:	42a3      	cmp	r3, r4
 801d180:	d8f4      	bhi.n	801d16c <rmw_wait+0x190>
 801d182:	2e00      	cmp	r6, #0
 801d184:	d03c      	beq.n	801d200 <rmw_wait+0x224>
 801d186:	6834      	ldr	r4, [r6, #0]
 801d188:	2c00      	cmp	r4, #0
 801d18a:	d039      	beq.n	801d200 <rmw_wait+0x224>
 801d18c:	2701      	movs	r7, #1
 801d18e:	e023      	b.n	801d1d8 <rmw_wait+0x1fc>
 801d190:	68a0      	ldr	r0, [r4, #8]
 801d192:	2100      	movs	r1, #0
 801d194:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d198:	f7fa fb54 	bl	8017844 <uxr_run_session_timeout>
 801d19c:	6864      	ldr	r4, [r4, #4]
 801d19e:	2c00      	cmp	r4, #0
 801d1a0:	d1f6      	bne.n	801d190 <rmw_wait+0x1b4>
 801d1a2:	e7b0      	b.n	801d106 <rmw_wait+0x12a>
 801d1a4:	e9d9 3200 	ldrd	r3, r2, [r9]
 801d1a8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d1ac:	3401      	adds	r4, #1
 801d1ae:	42a3      	cmp	r3, r4
 801d1b0:	d8b4      	bhi.n	801d11c <rmw_wait+0x140>
 801d1b2:	e7c2      	b.n	801d13a <rmw_wait+0x15e>
 801d1b4:	e9d8 3200 	ldrd	r3, r2, [r8]
 801d1b8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d1bc:	3401      	adds	r4, #1
 801d1be:	429c      	cmp	r4, r3
 801d1c0:	d3c2      	bcc.n	801d148 <rmw_wait+0x16c>
 801d1c2:	e7ce      	b.n	801d162 <rmw_wait+0x186>
 801d1c4:	e9d5 3200 	ldrd	r3, r2, [r5]
 801d1c8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d1cc:	3401      	adds	r4, #1
 801d1ce:	42a3      	cmp	r3, r4
 801d1d0:	d8cc      	bhi.n	801d16c <rmw_wait+0x190>
 801d1d2:	b1a6      	cbz	r6, 801d1fe <rmw_wait+0x222>
 801d1d4:	6834      	ldr	r4, [r6, #0]
 801d1d6:	b194      	cbz	r4, 801d1fe <rmw_wait+0x222>
 801d1d8:	2300      	movs	r3, #0
 801d1da:	461d      	mov	r5, r3
 801d1dc:	e004      	b.n	801d1e8 <rmw_wait+0x20c>
 801d1de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801d1e2:	3301      	adds	r3, #1
 801d1e4:	42a3      	cmp	r3, r4
 801d1e6:	d00a      	beq.n	801d1fe <rmw_wait+0x222>
 801d1e8:	6870      	ldr	r0, [r6, #4]
 801d1ea:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801d1ee:	7c0a      	ldrb	r2, [r1, #16]
 801d1f0:	2a00      	cmp	r2, #0
 801d1f2:	d0f4      	beq.n	801d1de <rmw_wait+0x202>
 801d1f4:	3301      	adds	r3, #1
 801d1f6:	4617      	mov	r7, r2
 801d1f8:	740d      	strb	r5, [r1, #16]
 801d1fa:	42a3      	cmp	r3, r4
 801d1fc:	d1f4      	bne.n	801d1e8 <rmw_wait+0x20c>
 801d1fe:	b147      	cbz	r7, 801d212 <rmw_wait+0x236>
 801d200:	2000      	movs	r0, #0
 801d202:	b009      	add	sp, #36	; 0x24
 801d204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d208:	b11e      	cbz	r6, 801d212 <rmw_wait+0x236>
 801d20a:	6834      	ldr	r4, [r6, #0]
 801d20c:	462f      	mov	r7, r5
 801d20e:	2c00      	cmp	r4, #0
 801d210:	d1e2      	bne.n	801d1d8 <rmw_wait+0x1fc>
 801d212:	2002      	movs	r0, #2
 801d214:	b009      	add	sp, #36	; 0x24
 801d216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d21a:	4639      	mov	r1, r7
 801d21c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d220:	f7fa fb2a 	bl	8017878 <uxr_run_session_until_data>
 801d224:	6864      	ldr	r4, [r4, #4]
 801d226:	2c00      	cmp	r4, #0
 801d228:	f47f af62 	bne.w	801d0f0 <rmw_wait+0x114>
 801d22c:	e76b      	b.n	801d106 <rmw_wait+0x12a>
 801d22e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d232:	f7ff fc33 	bl	801ca9c <rmw_time_total_nsec>
 801d236:	2300      	movs	r3, #0
 801d238:	4a19      	ldr	r2, [pc, #100]	; (801d2a0 <rmw_wait+0x2c4>)
 801d23a:	f7e3 fb83 	bl	8000944 <__aeabi_uldivmod>
 801d23e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801d242:	4607      	mov	r7, r0
 801d244:	f171 0300 	sbcs.w	r3, r1, #0
 801d248:	bfa8      	it	ge
 801d24a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801d24e:	e6e5      	b.n	801d01c <rmw_wait+0x40>
 801d250:	f1b8 0f00 	cmp.w	r8, #0
 801d254:	d00f      	beq.n	801d276 <rmw_wait+0x29a>
 801d256:	f8d8 3000 	ldr.w	r3, [r8]
 801d25a:	b193      	cbz	r3, 801d282 <rmw_wait+0x2a6>
 801d25c:	464f      	mov	r7, r9
 801d25e:	e772      	b.n	801d146 <rmw_wait+0x16a>
 801d260:	f1b8 0f00 	cmp.w	r8, #0
 801d264:	d007      	beq.n	801d276 <rmw_wait+0x29a>
 801d266:	f8d8 3000 	ldr.w	r3, [r8]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	f47f af6b 	bne.w	801d146 <rmw_wait+0x16a>
 801d270:	b155      	cbz	r5, 801d288 <rmw_wait+0x2ac>
 801d272:	461f      	mov	r7, r3
 801d274:	e777      	b.n	801d166 <rmw_wait+0x18a>
 801d276:	2d00      	cmp	r5, #0
 801d278:	d0c6      	beq.n	801d208 <rmw_wait+0x22c>
 801d27a:	682b      	ldr	r3, [r5, #0]
 801d27c:	b143      	cbz	r3, 801d290 <rmw_wait+0x2b4>
 801d27e:	4647      	mov	r7, r8
 801d280:	e773      	b.n	801d16a <rmw_wait+0x18e>
 801d282:	b10d      	cbz	r5, 801d288 <rmw_wait+0x2ac>
 801d284:	464f      	mov	r7, r9
 801d286:	e76e      	b.n	801d166 <rmw_wait+0x18a>
 801d288:	462f      	mov	r7, r5
 801d28a:	2e00      	cmp	r6, #0
 801d28c:	d1a2      	bne.n	801d1d4 <rmw_wait+0x1f8>
 801d28e:	e7c0      	b.n	801d212 <rmw_wait+0x236>
 801d290:	4647      	mov	r7, r8
 801d292:	2e00      	cmp	r6, #0
 801d294:	d19e      	bne.n	801d1d4 <rmw_wait+0x1f8>
 801d296:	e7bc      	b.n	801d212 <rmw_wait+0x236>
 801d298:	08023300 	.word	0x08023300
 801d29c:	20016dac 	.word	0x20016dac
 801d2a0:	000f4240 	.word	0x000f4240

0801d2a4 <rmw_create_wait_set>:
 801d2a4:	b508      	push	{r3, lr}
 801d2a6:	4803      	ldr	r0, [pc, #12]	; (801d2b4 <rmw_create_wait_set+0x10>)
 801d2a8:	f7ff fd8e 	bl	801cdc8 <get_memory>
 801d2ac:	b108      	cbz	r0, 801d2b2 <rmw_create_wait_set+0xe>
 801d2ae:	6880      	ldr	r0, [r0, #8]
 801d2b0:	3010      	adds	r0, #16
 801d2b2:	bd08      	pop	{r3, pc}
 801d2b4:	20016dec 	.word	0x20016dec

0801d2b8 <rmw_destroy_wait_set>:
 801d2b8:	b508      	push	{r3, lr}
 801d2ba:	4b08      	ldr	r3, [pc, #32]	; (801d2dc <rmw_destroy_wait_set+0x24>)
 801d2bc:	6819      	ldr	r1, [r3, #0]
 801d2be:	b911      	cbnz	r1, 801d2c6 <rmw_destroy_wait_set+0xe>
 801d2c0:	e00a      	b.n	801d2d8 <rmw_destroy_wait_set+0x20>
 801d2c2:	6849      	ldr	r1, [r1, #4]
 801d2c4:	b141      	cbz	r1, 801d2d8 <rmw_destroy_wait_set+0x20>
 801d2c6:	688b      	ldr	r3, [r1, #8]
 801d2c8:	3310      	adds	r3, #16
 801d2ca:	4298      	cmp	r0, r3
 801d2cc:	d1f9      	bne.n	801d2c2 <rmw_destroy_wait_set+0xa>
 801d2ce:	4803      	ldr	r0, [pc, #12]	; (801d2dc <rmw_destroy_wait_set+0x24>)
 801d2d0:	f7ff fd8a 	bl	801cde8 <put_memory>
 801d2d4:	2000      	movs	r0, #0
 801d2d6:	bd08      	pop	{r3, pc}
 801d2d8:	2001      	movs	r0, #1
 801d2da:	bd08      	pop	{r3, pc}
 801d2dc:	20016dec 	.word	0x20016dec

0801d2e0 <rmw_uros_epoch_nanos>:
 801d2e0:	4b05      	ldr	r3, [pc, #20]	; (801d2f8 <rmw_uros_epoch_nanos+0x18>)
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	b123      	cbz	r3, 801d2f0 <rmw_uros_epoch_nanos+0x10>
 801d2e6:	6898      	ldr	r0, [r3, #8]
 801d2e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d2ec:	f7f9 bf20 	b.w	8017130 <uxr_epoch_nanos>
 801d2f0:	2000      	movs	r0, #0
 801d2f2:	2100      	movs	r1, #0
 801d2f4:	4770      	bx	lr
 801d2f6:	bf00      	nop
 801d2f8:	20016dac 	.word	0x20016dac

0801d2fc <std_msgs__msg__String__init>:
 801d2fc:	b538      	push	{r3, r4, r5, lr}
 801d2fe:	4604      	mov	r4, r0
 801d300:	b128      	cbz	r0, 801d30e <std_msgs__msg__String__init+0x12>
 801d302:	f7f8 feb7 	bl	8016074 <rosidl_runtime_c__String__init>
 801d306:	4605      	mov	r5, r0
 801d308:	b120      	cbz	r0, 801d314 <std_msgs__msg__String__init+0x18>
 801d30a:	4628      	mov	r0, r5
 801d30c:	bd38      	pop	{r3, r4, r5, pc}
 801d30e:	4605      	mov	r5, r0
 801d310:	4628      	mov	r0, r5
 801d312:	bd38      	pop	{r3, r4, r5, pc}
 801d314:	4620      	mov	r0, r4
 801d316:	f7f8 fec3 	bl	80160a0 <rosidl_runtime_c__String__fini>
 801d31a:	4628      	mov	r0, r5
 801d31c:	bd38      	pop	{r3, r4, r5, pc}
 801d31e:	bf00      	nop

0801d320 <std_msgs__msg__String__fini>:
 801d320:	b108      	cbz	r0, 801d326 <std_msgs__msg__String__fini+0x6>
 801d322:	f7f8 bebd 	b.w	80160a0 <rosidl_runtime_c__String__fini>
 801d326:	4770      	bx	lr

0801d328 <ucdr_serialize_string>:
 801d328:	b510      	push	{r4, lr}
 801d32a:	b082      	sub	sp, #8
 801d32c:	4604      	mov	r4, r0
 801d32e:	4608      	mov	r0, r1
 801d330:	9101      	str	r1, [sp, #4]
 801d332:	f7e2 ffe5 	bl	8000300 <strlen>
 801d336:	4602      	mov	r2, r0
 801d338:	9901      	ldr	r1, [sp, #4]
 801d33a:	4620      	mov	r0, r4
 801d33c:	3201      	adds	r2, #1
 801d33e:	b002      	add	sp, #8
 801d340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d344:	f7f4 bf38 	b.w	80121b8 <ucdr_serialize_sequence_char>

0801d348 <ucdr_deserialize_string>:
 801d348:	b500      	push	{lr}
 801d34a:	b083      	sub	sp, #12
 801d34c:	ab01      	add	r3, sp, #4
 801d34e:	f7f4 ff45 	bl	80121dc <ucdr_deserialize_sequence_char>
 801d352:	b003      	add	sp, #12
 801d354:	f85d fb04 	ldr.w	pc, [sp], #4

0801d358 <uxr_init_input_best_effort_stream>:
 801d358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d35c:	8003      	strh	r3, [r0, #0]
 801d35e:	4770      	bx	lr

0801d360 <uxr_reset_input_best_effort_stream>:
 801d360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d364:	8003      	strh	r3, [r0, #0]
 801d366:	4770      	bx	lr

0801d368 <uxr_receive_best_effort_message>:
 801d368:	b538      	push	{r3, r4, r5, lr}
 801d36a:	4604      	mov	r4, r0
 801d36c:	8800      	ldrh	r0, [r0, #0]
 801d36e:	460d      	mov	r5, r1
 801d370:	f000 fd46 	bl	801de00 <uxr_seq_num_cmp>
 801d374:	4603      	mov	r3, r0
 801d376:	0fc0      	lsrs	r0, r0, #31
 801d378:	2b00      	cmp	r3, #0
 801d37a:	bfb8      	it	lt
 801d37c:	8025      	strhlt	r5, [r4, #0]
 801d37e:	bd38      	pop	{r3, r4, r5, pc}

0801d380 <on_full_input_buffer>:
 801d380:	b570      	push	{r4, r5, r6, lr}
 801d382:	460c      	mov	r4, r1
 801d384:	4605      	mov	r5, r0
 801d386:	8908      	ldrh	r0, [r1, #8]
 801d388:	682b      	ldr	r3, [r5, #0]
 801d38a:	7d26      	ldrb	r6, [r4, #20]
 801d38c:	e9d1 1200 	ldrd	r1, r2, [r1]
 801d390:	fbb2 f2f0 	udiv	r2, r2, r0
 801d394:	eba3 0c01 	sub.w	ip, r3, r1
 801d398:	fbbc fcf2 	udiv	ip, ip, r2
 801d39c:	f10c 0c01 	add.w	ip, ip, #1
 801d3a0:	fa1f f38c 	uxth.w	r3, ip
 801d3a4:	fbb3 fcf0 	udiv	ip, r3, r0
 801d3a8:	fb00 331c 	mls	r3, r0, ip, r3
 801d3ac:	b29b      	uxth	r3, r3
 801d3ae:	fb02 f303 	mul.w	r3, r2, r3
 801d3b2:	1d18      	adds	r0, r3, #4
 801d3b4:	4408      	add	r0, r1
 801d3b6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801d3ba:	b116      	cbz	r6, 801d3c2 <on_full_input_buffer+0x42>
 801d3bc:	2600      	movs	r6, #0
 801d3be:	f840 6c04 	str.w	r6, [r0, #-4]
 801d3c2:	2a03      	cmp	r2, #3
 801d3c4:	d801      	bhi.n	801d3ca <on_full_input_buffer+0x4a>
 801d3c6:	2001      	movs	r0, #1
 801d3c8:	bd70      	pop	{r4, r5, r6, pc}
 801d3ca:	3308      	adds	r3, #8
 801d3cc:	4628      	mov	r0, r5
 801d3ce:	3a04      	subs	r2, #4
 801d3d0:	4419      	add	r1, r3
 801d3d2:	692b      	ldr	r3, [r5, #16]
 801d3d4:	f7f4 fe74 	bl	80120c0 <ucdr_init_buffer_origin>
 801d3d8:	4628      	mov	r0, r5
 801d3da:	4622      	mov	r2, r4
 801d3dc:	4902      	ldr	r1, [pc, #8]	; (801d3e8 <on_full_input_buffer+0x68>)
 801d3de:	f7f4 fe4b 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 801d3e2:	2000      	movs	r0, #0
 801d3e4:	bd70      	pop	{r4, r5, r6, pc}
 801d3e6:	bf00      	nop
 801d3e8:	0801d381 	.word	0x0801d381

0801d3ec <uxr_init_input_reliable_stream>:
 801d3ec:	b510      	push	{r4, lr}
 801d3ee:	e9c0 1200 	strd	r1, r2, [r0]
 801d3f2:	2400      	movs	r4, #0
 801d3f4:	9a02      	ldr	r2, [sp, #8]
 801d3f6:	8103      	strh	r3, [r0, #8]
 801d3f8:	6102      	str	r2, [r0, #16]
 801d3fa:	7504      	strb	r4, [r0, #20]
 801d3fc:	b1c3      	cbz	r3, 801d430 <uxr_init_input_reliable_stream+0x44>
 801d3fe:	600c      	str	r4, [r1, #0]
 801d400:	8901      	ldrh	r1, [r0, #8]
 801d402:	2901      	cmp	r1, #1
 801d404:	d914      	bls.n	801d430 <uxr_init_input_reliable_stream+0x44>
 801d406:	f04f 0c01 	mov.w	ip, #1
 801d40a:	6843      	ldr	r3, [r0, #4]
 801d40c:	f10c 0e01 	add.w	lr, ip, #1
 801d410:	fbbc f2f1 	udiv	r2, ip, r1
 801d414:	fbb3 f3f1 	udiv	r3, r3, r1
 801d418:	fb01 c212 	mls	r2, r1, r2, ip
 801d41c:	fa1f fc8e 	uxth.w	ip, lr
 801d420:	b292      	uxth	r2, r2
 801d422:	fb02 f303 	mul.w	r3, r2, r3
 801d426:	6802      	ldr	r2, [r0, #0]
 801d428:	50d4      	str	r4, [r2, r3]
 801d42a:	8901      	ldrh	r1, [r0, #8]
 801d42c:	4561      	cmp	r1, ip
 801d42e:	d8ec      	bhi.n	801d40a <uxr_init_input_reliable_stream+0x1e>
 801d430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d434:	60c3      	str	r3, [r0, #12]
 801d436:	bd10      	pop	{r4, pc}

0801d438 <uxr_reset_input_reliable_stream>:
 801d438:	8901      	ldrh	r1, [r0, #8]
 801d43a:	b1d9      	cbz	r1, 801d474 <uxr_reset_input_reliable_stream+0x3c>
 801d43c:	b510      	push	{r4, lr}
 801d43e:	f04f 0e00 	mov.w	lr, #0
 801d442:	46f4      	mov	ip, lr
 801d444:	4674      	mov	r4, lr
 801d446:	6843      	ldr	r3, [r0, #4]
 801d448:	f10e 0e01 	add.w	lr, lr, #1
 801d44c:	fbbc f2f1 	udiv	r2, ip, r1
 801d450:	fbb3 f3f1 	udiv	r3, r3, r1
 801d454:	fb01 c212 	mls	r2, r1, r2, ip
 801d458:	fa1f fc8e 	uxth.w	ip, lr
 801d45c:	b292      	uxth	r2, r2
 801d45e:	fb02 f303 	mul.w	r3, r2, r3
 801d462:	6802      	ldr	r2, [r0, #0]
 801d464:	50d4      	str	r4, [r2, r3]
 801d466:	8901      	ldrh	r1, [r0, #8]
 801d468:	4561      	cmp	r1, ip
 801d46a:	d8ec      	bhi.n	801d446 <uxr_reset_input_reliable_stream+0xe>
 801d46c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d470:	60c3      	str	r3, [r0, #12]
 801d472:	bd10      	pop	{r4, pc}
 801d474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d478:	60c3      	str	r3, [r0, #12]
 801d47a:	4770      	bx	lr

0801d47c <uxr_receive_reliable_message>:
 801d47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d480:	4604      	mov	r4, r0
 801d482:	460d      	mov	r5, r1
 801d484:	8901      	ldrh	r1, [r0, #8]
 801d486:	4617      	mov	r7, r2
 801d488:	8980      	ldrh	r0, [r0, #12]
 801d48a:	4698      	mov	r8, r3
 801d48c:	f000 fcb0 	bl	801ddf0 <uxr_seq_num_add>
 801d490:	4629      	mov	r1, r5
 801d492:	4606      	mov	r6, r0
 801d494:	89a0      	ldrh	r0, [r4, #12]
 801d496:	f000 fcb3 	bl	801de00 <uxr_seq_num_cmp>
 801d49a:	2800      	cmp	r0, #0
 801d49c:	db0a      	blt.n	801d4b4 <uxr_receive_reliable_message+0x38>
 801d49e:	2600      	movs	r6, #0
 801d4a0:	4629      	mov	r1, r5
 801d4a2:	89e0      	ldrh	r0, [r4, #14]
 801d4a4:	f000 fcac 	bl	801de00 <uxr_seq_num_cmp>
 801d4a8:	2800      	cmp	r0, #0
 801d4aa:	da00      	bge.n	801d4ae <uxr_receive_reliable_message+0x32>
 801d4ac:	81e5      	strh	r5, [r4, #14]
 801d4ae:	4630      	mov	r0, r6
 801d4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4b4:	4630      	mov	r0, r6
 801d4b6:	4629      	mov	r1, r5
 801d4b8:	f000 fca2 	bl	801de00 <uxr_seq_num_cmp>
 801d4bc:	2800      	cmp	r0, #0
 801d4be:	dbee      	blt.n	801d49e <uxr_receive_reliable_message+0x22>
 801d4c0:	6923      	ldr	r3, [r4, #16]
 801d4c2:	4638      	mov	r0, r7
 801d4c4:	4798      	blx	r3
 801d4c6:	4681      	mov	r9, r0
 801d4c8:	2101      	movs	r1, #1
 801d4ca:	89a0      	ldrh	r0, [r4, #12]
 801d4cc:	f000 fc90 	bl	801ddf0 <uxr_seq_num_add>
 801d4d0:	f1b9 0f00 	cmp.w	r9, #0
 801d4d4:	bf08      	it	eq
 801d4d6:	4285      	cmpeq	r5, r0
 801d4d8:	bf0c      	ite	eq
 801d4da:	2601      	moveq	r6, #1
 801d4dc:	2600      	movne	r6, #0
 801d4de:	d104      	bne.n	801d4ea <uxr_receive_reliable_message+0x6e>
 801d4e0:	2300      	movs	r3, #0
 801d4e2:	9a08      	ldr	r2, [sp, #32]
 801d4e4:	81a0      	strh	r0, [r4, #12]
 801d4e6:	7013      	strb	r3, [r2, #0]
 801d4e8:	e7da      	b.n	801d4a0 <uxr_receive_reliable_message+0x24>
 801d4ea:	8922      	ldrh	r2, [r4, #8]
 801d4ec:	6863      	ldr	r3, [r4, #4]
 801d4ee:	fbb5 f0f2 	udiv	r0, r5, r2
 801d4f2:	fbb3 f3f2 	udiv	r3, r3, r2
 801d4f6:	fb02 5010 	mls	r0, r2, r0, r5
 801d4fa:	b280      	uxth	r0, r0
 801d4fc:	fb03 f000 	mul.w	r0, r3, r0
 801d500:	6823      	ldr	r3, [r4, #0]
 801d502:	3004      	adds	r0, #4
 801d504:	4418      	add	r0, r3
 801d506:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d1c7      	bne.n	801d49e <uxr_receive_reliable_message+0x22>
 801d50e:	4639      	mov	r1, r7
 801d510:	4642      	mov	r2, r8
 801d512:	f002 fc14 	bl	801fd3e <memcpy>
 801d516:	8921      	ldrh	r1, [r4, #8]
 801d518:	6863      	ldr	r3, [r4, #4]
 801d51a:	fbb5 f2f1 	udiv	r2, r5, r1
 801d51e:	fbb3 f3f1 	udiv	r3, r3, r1
 801d522:	fb01 5212 	mls	r2, r1, r2, r5
 801d526:	b292      	uxth	r2, r2
 801d528:	fb02 f303 	mul.w	r3, r2, r3
 801d52c:	6822      	ldr	r2, [r4, #0]
 801d52e:	f842 8003 	str.w	r8, [r2, r3]
 801d532:	2301      	movs	r3, #1
 801d534:	9a08      	ldr	r2, [sp, #32]
 801d536:	7013      	strb	r3, [r2, #0]
 801d538:	f1b9 0f00 	cmp.w	r9, #0
 801d53c:	d0af      	beq.n	801d49e <uxr_receive_reliable_message+0x22>
 801d53e:	89a6      	ldrh	r6, [r4, #12]
 801d540:	2101      	movs	r1, #1
 801d542:	4630      	mov	r0, r6
 801d544:	f000 fc54 	bl	801ddf0 <uxr_seq_num_add>
 801d548:	8921      	ldrh	r1, [r4, #8]
 801d54a:	6863      	ldr	r3, [r4, #4]
 801d54c:	4606      	mov	r6, r0
 801d54e:	fbb0 f2f1 	udiv	r2, r0, r1
 801d552:	fbb3 f3f1 	udiv	r3, r3, r1
 801d556:	fb01 0212 	mls	r2, r1, r2, r0
 801d55a:	6820      	ldr	r0, [r4, #0]
 801d55c:	b292      	uxth	r2, r2
 801d55e:	fb02 f303 	mul.w	r3, r2, r3
 801d562:	3304      	adds	r3, #4
 801d564:	4418      	add	r0, r3
 801d566:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d097      	beq.n	801d49e <uxr_receive_reliable_message+0x22>
 801d56e:	6923      	ldr	r3, [r4, #16]
 801d570:	4798      	blx	r3
 801d572:	2802      	cmp	r0, #2
 801d574:	d002      	beq.n	801d57c <uxr_receive_reliable_message+0x100>
 801d576:	2801      	cmp	r0, #1
 801d578:	d0e2      	beq.n	801d540 <uxr_receive_reliable_message+0xc4>
 801d57a:	e790      	b.n	801d49e <uxr_receive_reliable_message+0x22>
 801d57c:	2601      	movs	r6, #1
 801d57e:	e78f      	b.n	801d4a0 <uxr_receive_reliable_message+0x24>

0801d580 <uxr_next_input_reliable_buffer_available>:
 801d580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d584:	4604      	mov	r4, r0
 801d586:	460f      	mov	r7, r1
 801d588:	8980      	ldrh	r0, [r0, #12]
 801d58a:	2101      	movs	r1, #1
 801d58c:	4690      	mov	r8, r2
 801d58e:	f000 fc2f 	bl	801ddf0 <uxr_seq_num_add>
 801d592:	8922      	ldrh	r2, [r4, #8]
 801d594:	6866      	ldr	r6, [r4, #4]
 801d596:	fbb0 f3f2 	udiv	r3, r0, r2
 801d59a:	fbb6 f6f2 	udiv	r6, r6, r2
 801d59e:	fb02 0313 	mls	r3, r2, r3, r0
 801d5a2:	b29b      	uxth	r3, r3
 801d5a4:	fb03 f606 	mul.w	r6, r3, r6
 801d5a8:	6823      	ldr	r3, [r4, #0]
 801d5aa:	3604      	adds	r6, #4
 801d5ac:	441e      	add	r6, r3
 801d5ae:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801d5b2:	f1b9 0f00 	cmp.w	r9, #0
 801d5b6:	d023      	beq.n	801d600 <uxr_next_input_reliable_buffer_available+0x80>
 801d5b8:	4605      	mov	r5, r0
 801d5ba:	6923      	ldr	r3, [r4, #16]
 801d5bc:	4630      	mov	r0, r6
 801d5be:	4798      	blx	r3
 801d5c0:	4682      	mov	sl, r0
 801d5c2:	b300      	cbz	r0, 801d606 <uxr_next_input_reliable_buffer_available+0x86>
 801d5c4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801d5c8:	2101      	movs	r1, #1
 801d5ca:	4650      	mov	r0, sl
 801d5cc:	f000 fc10 	bl	801ddf0 <uxr_seq_num_add>
 801d5d0:	8921      	ldrh	r1, [r4, #8]
 801d5d2:	4682      	mov	sl, r0
 801d5d4:	6863      	ldr	r3, [r4, #4]
 801d5d6:	6820      	ldr	r0, [r4, #0]
 801d5d8:	fbba f2f1 	udiv	r2, sl, r1
 801d5dc:	fbb3 f3f1 	udiv	r3, r3, r1
 801d5e0:	fb01 a212 	mls	r2, r1, r2, sl
 801d5e4:	b292      	uxth	r2, r2
 801d5e6:	fb02 f303 	mul.w	r3, r2, r3
 801d5ea:	3304      	adds	r3, #4
 801d5ec:	4418      	add	r0, r3
 801d5ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801d5f2:	b12b      	cbz	r3, 801d600 <uxr_next_input_reliable_buffer_available+0x80>
 801d5f4:	6923      	ldr	r3, [r4, #16]
 801d5f6:	4798      	blx	r3
 801d5f8:	2802      	cmp	r0, #2
 801d5fa:	d01b      	beq.n	801d634 <uxr_next_input_reliable_buffer_available+0xb4>
 801d5fc:	2801      	cmp	r0, #1
 801d5fe:	d0e3      	beq.n	801d5c8 <uxr_next_input_reliable_buffer_available+0x48>
 801d600:	2000      	movs	r0, #0
 801d602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d606:	464a      	mov	r2, r9
 801d608:	4631      	mov	r1, r6
 801d60a:	4638      	mov	r0, r7
 801d60c:	f7f4 fd60 	bl	80120d0 <ucdr_init_buffer>
 801d610:	8921      	ldrh	r1, [r4, #8]
 801d612:	6863      	ldr	r3, [r4, #4]
 801d614:	2001      	movs	r0, #1
 801d616:	fbb5 f2f1 	udiv	r2, r5, r1
 801d61a:	fbb3 f3f1 	udiv	r3, r3, r1
 801d61e:	fb01 5212 	mls	r2, r1, r2, r5
 801d622:	b292      	uxth	r2, r2
 801d624:	fb02 f303 	mul.w	r3, r2, r3
 801d628:	6822      	ldr	r2, [r4, #0]
 801d62a:	f842 a003 	str.w	sl, [r2, r3]
 801d62e:	81a5      	strh	r5, [r4, #12]
 801d630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d634:	8920      	ldrh	r0, [r4, #8]
 801d636:	eb06 0108 	add.w	r1, r6, r8
 801d63a:	6863      	ldr	r3, [r4, #4]
 801d63c:	eba9 0208 	sub.w	r2, r9, r8
 801d640:	fbb5 f6f0 	udiv	r6, r5, r0
 801d644:	fbb3 f3f0 	udiv	r3, r3, r0
 801d648:	fb00 5516 	mls	r5, r0, r6, r5
 801d64c:	2000      	movs	r0, #0
 801d64e:	b2ad      	uxth	r5, r5
 801d650:	fb03 f505 	mul.w	r5, r3, r5
 801d654:	6823      	ldr	r3, [r4, #0]
 801d656:	5158      	str	r0, [r3, r5]
 801d658:	4638      	mov	r0, r7
 801d65a:	f7f4 fd39 	bl	80120d0 <ucdr_init_buffer>
 801d65e:	4638      	mov	r0, r7
 801d660:	4622      	mov	r2, r4
 801d662:	4903      	ldr	r1, [pc, #12]	; (801d670 <uxr_next_input_reliable_buffer_available+0xf0>)
 801d664:	f7f4 fd08 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 801d668:	2001      	movs	r0, #1
 801d66a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801d66e:	e7c8      	b.n	801d602 <uxr_next_input_reliable_buffer_available+0x82>
 801d670:	0801d381 	.word	0x0801d381

0801d674 <uxr_process_heartbeat>:
 801d674:	b538      	push	{r3, r4, r5, lr}
 801d676:	4611      	mov	r1, r2
 801d678:	4604      	mov	r4, r0
 801d67a:	89c0      	ldrh	r0, [r0, #14]
 801d67c:	4615      	mov	r5, r2
 801d67e:	f000 fbbf 	bl	801de00 <uxr_seq_num_cmp>
 801d682:	2800      	cmp	r0, #0
 801d684:	bfb8      	it	lt
 801d686:	81e5      	strhlt	r5, [r4, #14]
 801d688:	bd38      	pop	{r3, r4, r5, pc}
 801d68a:	bf00      	nop

0801d68c <uxr_compute_acknack>:
 801d68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d690:	8903      	ldrh	r3, [r0, #8]
 801d692:	4604      	mov	r4, r0
 801d694:	460f      	mov	r7, r1
 801d696:	8985      	ldrh	r5, [r0, #12]
 801d698:	b1db      	cbz	r3, 801d6d2 <uxr_compute_acknack+0x46>
 801d69a:	4628      	mov	r0, r5
 801d69c:	2601      	movs	r6, #1
 801d69e:	e004      	b.n	801d6aa <uxr_compute_acknack+0x1e>
 801d6a0:	4566      	cmp	r6, ip
 801d6a2:	f106 0601 	add.w	r6, r6, #1
 801d6a6:	d214      	bcs.n	801d6d2 <uxr_compute_acknack+0x46>
 801d6a8:	89a0      	ldrh	r0, [r4, #12]
 801d6aa:	b2b1      	uxth	r1, r6
 801d6ac:	f000 fba0 	bl	801ddf0 <uxr_seq_num_add>
 801d6b0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801d6b4:	fbb0 f2fc 	udiv	r2, r0, ip
 801d6b8:	e9d4 1300 	ldrd	r1, r3, [r4]
 801d6bc:	fb0c 0212 	mls	r2, ip, r2, r0
 801d6c0:	fbb3 f3fc 	udiv	r3, r3, ip
 801d6c4:	b292      	uxth	r2, r2
 801d6c6:	fb02 f303 	mul.w	r3, r2, r3
 801d6ca:	58cb      	ldr	r3, [r1, r3]
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d1e7      	bne.n	801d6a0 <uxr_compute_acknack+0x14>
 801d6d0:	4605      	mov	r5, r0
 801d6d2:	803d      	strh	r5, [r7, #0]
 801d6d4:	2101      	movs	r1, #1
 801d6d6:	89e6      	ldrh	r6, [r4, #14]
 801d6d8:	4628      	mov	r0, r5
 801d6da:	f000 fb8d 	bl	801ddf8 <uxr_seq_num_sub>
 801d6de:	4601      	mov	r1, r0
 801d6e0:	4630      	mov	r0, r6
 801d6e2:	f000 fb89 	bl	801ddf8 <uxr_seq_num_sub>
 801d6e6:	4606      	mov	r6, r0
 801d6e8:	b328      	cbz	r0, 801d736 <uxr_compute_acknack+0xaa>
 801d6ea:	f04f 0900 	mov.w	r9, #0
 801d6ee:	f04f 0801 	mov.w	r8, #1
 801d6f2:	464d      	mov	r5, r9
 801d6f4:	fa1f f189 	uxth.w	r1, r9
 801d6f8:	8838      	ldrh	r0, [r7, #0]
 801d6fa:	f000 fb79 	bl	801ddf0 <uxr_seq_num_add>
 801d6fe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801d702:	6861      	ldr	r1, [r4, #4]
 801d704:	fa08 fe09 	lsl.w	lr, r8, r9
 801d708:	6822      	ldr	r2, [r4, #0]
 801d70a:	f109 0901 	add.w	r9, r9, #1
 801d70e:	ea4e 0e05 	orr.w	lr, lr, r5
 801d712:	fbb0 f3fc 	udiv	r3, r0, ip
 801d716:	fbb1 f1fc 	udiv	r1, r1, ip
 801d71a:	fb03 001c 	mls	r0, r3, ip, r0
 801d71e:	b283      	uxth	r3, r0
 801d720:	fb01 f303 	mul.w	r3, r1, r3
 801d724:	58d3      	ldr	r3, [r2, r3]
 801d726:	b90b      	cbnz	r3, 801d72c <uxr_compute_acknack+0xa0>
 801d728:	fa1f f58e 	uxth.w	r5, lr
 801d72c:	454e      	cmp	r6, r9
 801d72e:	d1e1      	bne.n	801d6f4 <uxr_compute_acknack+0x68>
 801d730:	4628      	mov	r0, r5
 801d732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d736:	4605      	mov	r5, r0
 801d738:	4628      	mov	r0, r5
 801d73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d73e:	bf00      	nop

0801d740 <uxr_init_output_best_effort_stream>:
 801d740:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801d744:	6001      	str	r1, [r0, #0]
 801d746:	7303      	strb	r3, [r0, #12]
 801d748:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801d74c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801d750:	4770      	bx	lr
 801d752:	bf00      	nop

0801d754 <uxr_reset_output_best_effort_stream>:
 801d754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d758:	7b03      	ldrb	r3, [r0, #12]
 801d75a:	81c2      	strh	r2, [r0, #14]
 801d75c:	6043      	str	r3, [r0, #4]
 801d75e:	4770      	bx	lr

0801d760 <uxr_prepare_best_effort_buffer_to_write>:
 801d760:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d762:	4604      	mov	r4, r0
 801d764:	b083      	sub	sp, #12
 801d766:	6840      	ldr	r0, [r0, #4]
 801d768:	460d      	mov	r5, r1
 801d76a:	4616      	mov	r6, r2
 801d76c:	f7fb fa5c 	bl	8018c28 <uxr_submessage_padding>
 801d770:	6863      	ldr	r3, [r4, #4]
 801d772:	4418      	add	r0, r3
 801d774:	68a3      	ldr	r3, [r4, #8]
 801d776:	1942      	adds	r2, r0, r5
 801d778:	4293      	cmp	r3, r2
 801d77a:	bf2c      	ite	cs
 801d77c:	2701      	movcs	r7, #1
 801d77e:	2700      	movcc	r7, #0
 801d780:	d202      	bcs.n	801d788 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801d782:	4638      	mov	r0, r7
 801d784:	b003      	add	sp, #12
 801d786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d788:	9000      	str	r0, [sp, #0]
 801d78a:	2300      	movs	r3, #0
 801d78c:	4630      	mov	r0, r6
 801d78e:	6821      	ldr	r1, [r4, #0]
 801d790:	f7f4 fc8c 	bl	80120ac <ucdr_init_buffer_origin_offset>
 801d794:	6861      	ldr	r1, [r4, #4]
 801d796:	4638      	mov	r0, r7
 801d798:	4429      	add	r1, r5
 801d79a:	6061      	str	r1, [r4, #4]
 801d79c:	b003      	add	sp, #12
 801d79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7a0 <uxr_prepare_best_effort_buffer_to_send>:
 801d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7a4:	4604      	mov	r4, r0
 801d7a6:	461d      	mov	r5, r3
 801d7a8:	6840      	ldr	r0, [r0, #4]
 801d7aa:	7b23      	ldrb	r3, [r4, #12]
 801d7ac:	4298      	cmp	r0, r3
 801d7ae:	bf8c      	ite	hi
 801d7b0:	2601      	movhi	r6, #1
 801d7b2:	2600      	movls	r6, #0
 801d7b4:	d802      	bhi.n	801d7bc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801d7b6:	4630      	mov	r0, r6
 801d7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7bc:	4688      	mov	r8, r1
 801d7be:	89e0      	ldrh	r0, [r4, #14]
 801d7c0:	2101      	movs	r1, #1
 801d7c2:	4617      	mov	r7, r2
 801d7c4:	f000 fb14 	bl	801ddf0 <uxr_seq_num_add>
 801d7c8:	6823      	ldr	r3, [r4, #0]
 801d7ca:	81e0      	strh	r0, [r4, #14]
 801d7cc:	8028      	strh	r0, [r5, #0]
 801d7ce:	4630      	mov	r0, r6
 801d7d0:	f8c8 3000 	str.w	r3, [r8]
 801d7d4:	6863      	ldr	r3, [r4, #4]
 801d7d6:	603b      	str	r3, [r7, #0]
 801d7d8:	7b23      	ldrb	r3, [r4, #12]
 801d7da:	6063      	str	r3, [r4, #4]
 801d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d7e0 <on_full_output_buffer>:
 801d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7e2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801d7e6:	460c      	mov	r4, r1
 801d7e8:	6803      	ldr	r3, [r0, #0]
 801d7ea:	4605      	mov	r5, r0
 801d7ec:	7b26      	ldrb	r6, [r4, #12]
 801d7ee:	e9d1 1200 	ldrd	r1, r2, [r1]
 801d7f2:	fbb2 f2fc 	udiv	r2, r2, ip
 801d7f6:	eba3 0e01 	sub.w	lr, r3, r1
 801d7fa:	6903      	ldr	r3, [r0, #16]
 801d7fc:	fbbe fef2 	udiv	lr, lr, r2
 801d800:	f10e 0e01 	add.w	lr, lr, #1
 801d804:	fa1f fe8e 	uxth.w	lr, lr
 801d808:	fbbe f7fc 	udiv	r7, lr, ip
 801d80c:	fb0c ec17 	mls	ip, ip, r7, lr
 801d810:	fa1f fc8c 	uxth.w	ip, ip
 801d814:	fb02 fc0c 	mul.w	ip, r2, ip
 801d818:	f851 200c 	ldr.w	r2, [r1, ip]
 801d81c:	44b4      	add	ip, r6
 801d81e:	1b92      	subs	r2, r2, r6
 801d820:	f10c 0c08 	add.w	ip, ip, #8
 801d824:	3a04      	subs	r2, #4
 801d826:	4461      	add	r1, ip
 801d828:	f7f4 fc4a 	bl	80120c0 <ucdr_init_buffer_origin>
 801d82c:	4628      	mov	r0, r5
 801d82e:	4622      	mov	r2, r4
 801d830:	4902      	ldr	r1, [pc, #8]	; (801d83c <on_full_output_buffer+0x5c>)
 801d832:	f7f4 fc21 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 801d836:	2000      	movs	r0, #0
 801d838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d83a:	bf00      	nop
 801d83c:	0801d7e1 	.word	0x0801d7e1

0801d840 <uxr_init_output_reliable_stream>:
 801d840:	b530      	push	{r4, r5, lr}
 801d842:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801d846:	8103      	strh	r3, [r0, #8]
 801d848:	7304      	strb	r4, [r0, #12]
 801d84a:	e9c0 1200 	strd	r1, r2, [r0]
 801d84e:	b1e3      	cbz	r3, 801d88a <uxr_init_output_reliable_stream+0x4a>
 801d850:	600c      	str	r4, [r1, #0]
 801d852:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801d856:	f1bc 0f01 	cmp.w	ip, #1
 801d85a:	d916      	bls.n	801d88a <uxr_init_output_reliable_stream+0x4a>
 801d85c:	f04f 0e01 	mov.w	lr, #1
 801d860:	6843      	ldr	r3, [r0, #4]
 801d862:	f10e 0501 	add.w	r5, lr, #1
 801d866:	7b04      	ldrb	r4, [r0, #12]
 801d868:	6801      	ldr	r1, [r0, #0]
 801d86a:	fbbe f2fc 	udiv	r2, lr, ip
 801d86e:	fbb3 f3fc 	udiv	r3, r3, ip
 801d872:	fb0c e212 	mls	r2, ip, r2, lr
 801d876:	fa1f fe85 	uxth.w	lr, r5
 801d87a:	b292      	uxth	r2, r2
 801d87c:	fb02 f303 	mul.w	r3, r2, r3
 801d880:	50cc      	str	r4, [r1, r3]
 801d882:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801d886:	45f4      	cmp	ip, lr
 801d888:	d8ea      	bhi.n	801d860 <uxr_init_output_reliable_stream+0x20>
 801d88a:	4b07      	ldr	r3, [pc, #28]	; (801d8a8 <uxr_init_output_reliable_stream+0x68>)
 801d88c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d890:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d894:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801d898:	f8c0 300e 	str.w	r3, [r0, #14]
 801d89c:	2300      	movs	r3, #0
 801d89e:	8242      	strh	r2, [r0, #18]
 801d8a0:	8403      	strh	r3, [r0, #32]
 801d8a2:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801d8a6:	bd30      	pop	{r4, r5, pc}
 801d8a8:	ffff0000 	.word	0xffff0000
 801d8ac:	00000000 	.word	0x00000000

0801d8b0 <uxr_reset_output_reliable_stream>:
 801d8b0:	8901      	ldrh	r1, [r0, #8]
 801d8b2:	b510      	push	{r4, lr}
 801d8b4:	b1b1      	cbz	r1, 801d8e4 <uxr_reset_output_reliable_stream+0x34>
 801d8b6:	f04f 0e00 	mov.w	lr, #0
 801d8ba:	46f4      	mov	ip, lr
 801d8bc:	6843      	ldr	r3, [r0, #4]
 801d8be:	f10e 0e01 	add.w	lr, lr, #1
 801d8c2:	7b04      	ldrb	r4, [r0, #12]
 801d8c4:	fbbc f2f1 	udiv	r2, ip, r1
 801d8c8:	fbb3 f3f1 	udiv	r3, r3, r1
 801d8cc:	fb01 c212 	mls	r2, r1, r2, ip
 801d8d0:	fa1f fc8e 	uxth.w	ip, lr
 801d8d4:	b292      	uxth	r2, r2
 801d8d6:	fb02 f303 	mul.w	r3, r2, r3
 801d8da:	6802      	ldr	r2, [r0, #0]
 801d8dc:	50d4      	str	r4, [r2, r3]
 801d8de:	8901      	ldrh	r1, [r0, #8]
 801d8e0:	4561      	cmp	r1, ip
 801d8e2:	d8eb      	bhi.n	801d8bc <uxr_reset_output_reliable_stream+0xc>
 801d8e4:	4b08      	ldr	r3, [pc, #32]	; (801d908 <uxr_reset_output_reliable_stream+0x58>)
 801d8e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d8ea:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801d900 <uxr_reset_output_reliable_stream+0x50>
 801d8ee:	f8c0 300e 	str.w	r3, [r0, #14]
 801d8f2:	2300      	movs	r3, #0
 801d8f4:	8242      	strh	r2, [r0, #18]
 801d8f6:	8403      	strh	r3, [r0, #32]
 801d8f8:	ed80 7b06 	vstr	d7, [r0, #24]
 801d8fc:	bd10      	pop	{r4, pc}
 801d8fe:	bf00      	nop
 801d900:	ffffffff 	.word	0xffffffff
 801d904:	7fffffff 	.word	0x7fffffff
 801d908:	ffff0000 	.word	0xffff0000

0801d90c <uxr_prepare_reliable_buffer_to_write>:
 801d90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d910:	4604      	mov	r4, r0
 801d912:	b091      	sub	sp, #68	; 0x44
 801d914:	8900      	ldrh	r0, [r0, #8]
 801d916:	468b      	mov	fp, r1
 801d918:	89e6      	ldrh	r6, [r4, #14]
 801d91a:	9204      	str	r2, [sp, #16]
 801d91c:	6865      	ldr	r5, [r4, #4]
 801d91e:	6823      	ldr	r3, [r4, #0]
 801d920:	f894 900c 	ldrb.w	r9, [r4, #12]
 801d924:	fbb6 f2f0 	udiv	r2, r6, r0
 801d928:	fbb5 f5f0 	udiv	r5, r5, r0
 801d92c:	fb00 6212 	mls	r2, r0, r2, r6
 801d930:	1f2f      	subs	r7, r5, #4
 801d932:	b292      	uxth	r2, r2
 801d934:	fb05 3202 	mla	r2, r5, r2, r3
 801d938:	1d11      	adds	r1, r2, #4
 801d93a:	f8d2 8000 	ldr.w	r8, [r2]
 801d93e:	9103      	str	r1, [sp, #12]
 801d940:	2800      	cmp	r0, #0
 801d942:	f000 814a 	beq.w	801dbda <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801d946:	f04f 0c00 	mov.w	ip, #0
 801d94a:	46e2      	mov	sl, ip
 801d94c:	4661      	mov	r1, ip
 801d94e:	f10c 0c01 	add.w	ip, ip, #1
 801d952:	fbb1 f2f0 	udiv	r2, r1, r0
 801d956:	fb00 1212 	mls	r2, r0, r2, r1
 801d95a:	fa1f f18c 	uxth.w	r1, ip
 801d95e:	b292      	uxth	r2, r2
 801d960:	fb05 f202 	mul.w	r2, r5, r2
 801d964:	589a      	ldr	r2, [r3, r2]
 801d966:	454a      	cmp	r2, r9
 801d968:	d103      	bne.n	801d972 <uxr_prepare_reliable_buffer_to_write+0x66>
 801d96a:	f10a 0a01 	add.w	sl, sl, #1
 801d96e:	fa1f fa8a 	uxth.w	sl, sl
 801d972:	4281      	cmp	r1, r0
 801d974:	d3eb      	bcc.n	801d94e <uxr_prepare_reliable_buffer_to_write+0x42>
 801d976:	4640      	mov	r0, r8
 801d978:	2104      	movs	r1, #4
 801d97a:	f8cd a014 	str.w	sl, [sp, #20]
 801d97e:	f7f4 fbab 	bl	80120d8 <ucdr_alignment>
 801d982:	4480      	add	r8, r0
 801d984:	eb08 020b 	add.w	r2, r8, fp
 801d988:	42ba      	cmp	r2, r7
 801d98a:	f240 80ca 	bls.w	801db22 <uxr_prepare_reliable_buffer_to_write+0x216>
 801d98e:	7b22      	ldrb	r2, [r4, #12]
 801d990:	445a      	add	r2, fp
 801d992:	42ba      	cmp	r2, r7
 801d994:	f240 80b2 	bls.w	801dafc <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801d998:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801d99c:	b2bb      	uxth	r3, r7
 801d99e:	eba2 0209 	sub.w	r2, r2, r9
 801d9a2:	441a      	add	r2, r3
 801d9a4:	b292      	uxth	r2, r2
 801d9a6:	fb0a f902 	mul.w	r9, sl, r2
 801d9aa:	9205      	str	r2, [sp, #20]
 801d9ac:	45d9      	cmp	r9, fp
 801d9ae:	9206      	str	r2, [sp, #24]
 801d9b0:	f0c0 80b3 	bcc.w	801db1a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801d9b4:	f108 0204 	add.w	r2, r8, #4
 801d9b8:	42ba      	cmp	r2, r7
 801d9ba:	f080 80da 	bcs.w	801db72 <uxr_prepare_reliable_buffer_to_write+0x266>
 801d9be:	f1a3 0904 	sub.w	r9, r3, #4
 801d9c2:	9b05      	ldr	r3, [sp, #20]
 801d9c4:	eba9 0908 	sub.w	r9, r9, r8
 801d9c8:	fa1f f989 	uxth.w	r9, r9
 801d9cc:	ebab 0b09 	sub.w	fp, fp, r9
 801d9d0:	fbbb f2f3 	udiv	r2, fp, r3
 801d9d4:	fb03 b312 	mls	r3, r3, r2, fp
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	f040 80c4 	bne.w	801db66 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801d9de:	b293      	uxth	r3, r2
 801d9e0:	4553      	cmp	r3, sl
 801d9e2:	f200 809a 	bhi.w	801db1a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	f000 80f9 	beq.w	801dbde <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801d9ec:	f8cd 801c 	str.w	r8, [sp, #28]
 801d9f0:	f04f 0a00 	mov.w	sl, #0
 801d9f4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d9f8:	f10d 0b20 	add.w	fp, sp, #32
 801d9fc:	9505      	str	r5, [sp, #20]
 801d9fe:	461d      	mov	r5, r3
 801da00:	e000      	b.n	801da04 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801da02:	46c1      	mov	r9, r8
 801da04:	8922      	ldrh	r2, [r4, #8]
 801da06:	4658      	mov	r0, fp
 801da08:	6863      	ldr	r3, [r4, #4]
 801da0a:	f10a 0a01 	add.w	sl, sl, #1
 801da0e:	fbb6 f1f2 	udiv	r1, r6, r2
 801da12:	fbb3 f3f2 	udiv	r3, r3, r2
 801da16:	fb02 6111 	mls	r1, r2, r1, r6
 801da1a:	463a      	mov	r2, r7
 801da1c:	b289      	uxth	r1, r1
 801da1e:	fb03 f101 	mul.w	r1, r3, r1
 801da22:	6823      	ldr	r3, [r4, #0]
 801da24:	3104      	adds	r1, #4
 801da26:	4419      	add	r1, r3
 801da28:	2300      	movs	r3, #0
 801da2a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801da2e:	f8cd c000 	str.w	ip, [sp]
 801da32:	f7f4 fb3b 	bl	80120ac <ucdr_init_buffer_origin_offset>
 801da36:	464a      	mov	r2, r9
 801da38:	2300      	movs	r3, #0
 801da3a:	210d      	movs	r1, #13
 801da3c:	4658      	mov	r0, fp
 801da3e:	f7fb f8b3 	bl	8018ba8 <uxr_buffer_submessage_header>
 801da42:	8921      	ldrh	r1, [r4, #8]
 801da44:	6863      	ldr	r3, [r4, #4]
 801da46:	4630      	mov	r0, r6
 801da48:	fbb6 f2f1 	udiv	r2, r6, r1
 801da4c:	fbb3 f3f1 	udiv	r3, r3, r1
 801da50:	fb01 6212 	mls	r2, r1, r2, r6
 801da54:	2101      	movs	r1, #1
 801da56:	b292      	uxth	r2, r2
 801da58:	fb02 f303 	mul.w	r3, r2, r3
 801da5c:	6822      	ldr	r2, [r4, #0]
 801da5e:	50d7      	str	r7, [r2, r3]
 801da60:	f000 f9c6 	bl	801ddf0 <uxr_seq_num_add>
 801da64:	4606      	mov	r6, r0
 801da66:	fa1f f38a 	uxth.w	r3, sl
 801da6a:	429d      	cmp	r5, r3
 801da6c:	d8c9      	bhi.n	801da02 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801da6e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801da72:	9d05      	ldr	r5, [sp, #20]
 801da74:	8920      	ldrh	r0, [r4, #8]
 801da76:	463a      	mov	r2, r7
 801da78:	6863      	ldr	r3, [r4, #4]
 801da7a:	fbb6 f1f0 	udiv	r1, r6, r0
 801da7e:	fbb3 f3f0 	udiv	r3, r3, r0
 801da82:	fb00 6111 	mls	r1, r0, r1, r6
 801da86:	4658      	mov	r0, fp
 801da88:	b289      	uxth	r1, r1
 801da8a:	fb01 f303 	mul.w	r3, r1, r3
 801da8e:	6821      	ldr	r1, [r4, #0]
 801da90:	3304      	adds	r3, #4
 801da92:	4419      	add	r1, r3
 801da94:	2300      	movs	r3, #0
 801da96:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801da9a:	9700      	str	r7, [sp, #0]
 801da9c:	f7f4 fb06 	bl	80120ac <ucdr_init_buffer_origin_offset>
 801daa0:	9f06      	ldr	r7, [sp, #24]
 801daa2:	4658      	mov	r0, fp
 801daa4:	2302      	movs	r3, #2
 801daa6:	b2ba      	uxth	r2, r7
 801daa8:	210d      	movs	r1, #13
 801daaa:	f7fb f87d 	bl	8018ba8 <uxr_buffer_submessage_header>
 801daae:	f108 0104 	add.w	r1, r8, #4
 801dab2:	9b03      	ldr	r3, [sp, #12]
 801dab4:	f1a5 0208 	sub.w	r2, r5, #8
 801dab8:	8925      	ldrh	r5, [r4, #8]
 801daba:	440b      	add	r3, r1
 801dabc:	eba2 0208 	sub.w	r2, r2, r8
 801dac0:	fbb6 f0f5 	udiv	r0, r6, r5
 801dac4:	4619      	mov	r1, r3
 801dac6:	6863      	ldr	r3, [r4, #4]
 801dac8:	fb05 6010 	mls	r0, r5, r0, r6
 801dacc:	fbb3 f3f5 	udiv	r3, r3, r5
 801dad0:	b280      	uxth	r0, r0
 801dad2:	6825      	ldr	r5, [r4, #0]
 801dad4:	fb00 f303 	mul.w	r3, r0, r3
 801dad8:	7b20      	ldrb	r0, [r4, #12]
 801dada:	3004      	adds	r0, #4
 801dadc:	4438      	add	r0, r7
 801dade:	50e8      	str	r0, [r5, r3]
 801dae0:	9d04      	ldr	r5, [sp, #16]
 801dae2:	4628      	mov	r0, r5
 801dae4:	f7f4 faf4 	bl	80120d0 <ucdr_init_buffer>
 801dae8:	4628      	mov	r0, r5
 801daea:	4622      	mov	r2, r4
 801daec:	493d      	ldr	r1, [pc, #244]	; (801dbe4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801daee:	f7f4 fac3 	bl	8012078 <ucdr_set_on_full_buffer_callback>
 801daf2:	2001      	movs	r0, #1
 801daf4:	81e6      	strh	r6, [r4, #14]
 801daf6:	b011      	add	sp, #68	; 0x44
 801daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dafc:	2101      	movs	r1, #1
 801dafe:	89e0      	ldrh	r0, [r4, #14]
 801db00:	f000 f976 	bl	801ddf0 <uxr_seq_num_add>
 801db04:	4605      	mov	r5, r0
 801db06:	8921      	ldrh	r1, [r4, #8]
 801db08:	8a60      	ldrh	r0, [r4, #18]
 801db0a:	f000 f971 	bl	801ddf0 <uxr_seq_num_add>
 801db0e:	4601      	mov	r1, r0
 801db10:	4628      	mov	r0, r5
 801db12:	f000 f975 	bl	801de00 <uxr_seq_num_cmp>
 801db16:	2800      	cmp	r0, #0
 801db18:	dd44      	ble.n	801dba4 <uxr_prepare_reliable_buffer_to_write+0x298>
 801db1a:	2000      	movs	r0, #0
 801db1c:	b011      	add	sp, #68	; 0x44
 801db1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db22:	8921      	ldrh	r1, [r4, #8]
 801db24:	8a60      	ldrh	r0, [r4, #18]
 801db26:	9205      	str	r2, [sp, #20]
 801db28:	f000 f962 	bl	801ddf0 <uxr_seq_num_add>
 801db2c:	4601      	mov	r1, r0
 801db2e:	4630      	mov	r0, r6
 801db30:	f000 f966 	bl	801de00 <uxr_seq_num_cmp>
 801db34:	2800      	cmp	r0, #0
 801db36:	9a05      	ldr	r2, [sp, #20]
 801db38:	dcef      	bgt.n	801db1a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801db3a:	8925      	ldrh	r5, [r4, #8]
 801db3c:	e9d4 7300 	ldrd	r7, r3, [r4]
 801db40:	fbb6 f4f5 	udiv	r4, r6, r5
 801db44:	fbb3 f3f5 	udiv	r3, r3, r5
 801db48:	fb05 6414 	mls	r4, r5, r4, r6
 801db4c:	b2a4      	uxth	r4, r4
 801db4e:	fb04 f303 	mul.w	r3, r4, r3
 801db52:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801db56:	50fa      	str	r2, [r7, r3]
 801db58:	2300      	movs	r3, #0
 801db5a:	f8cd 8000 	str.w	r8, [sp]
 801db5e:	f7f4 faa5 	bl	80120ac <ucdr_init_buffer_origin_offset>
 801db62:	2001      	movs	r0, #1
 801db64:	e7da      	b.n	801db1c <uxr_prepare_reliable_buffer_to_write+0x210>
 801db66:	3201      	adds	r2, #1
 801db68:	9306      	str	r3, [sp, #24]
 801db6a:	b293      	uxth	r3, r2
 801db6c:	4553      	cmp	r3, sl
 801db6e:	d8d4      	bhi.n	801db1a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801db70:	e739      	b.n	801d9e6 <uxr_prepare_reliable_buffer_to_write+0xda>
 801db72:	4630      	mov	r0, r6
 801db74:	2101      	movs	r1, #1
 801db76:	9307      	str	r3, [sp, #28]
 801db78:	f000 f93a 	bl	801ddf0 <uxr_seq_num_add>
 801db7c:	4606      	mov	r6, r0
 801db7e:	8920      	ldrh	r0, [r4, #8]
 801db80:	6862      	ldr	r2, [r4, #4]
 801db82:	fbb6 f1f0 	udiv	r1, r6, r0
 801db86:	fbb2 f2f0 	udiv	r2, r2, r0
 801db8a:	fb00 6111 	mls	r1, r0, r1, r6
 801db8e:	b289      	uxth	r1, r1
 801db90:	fb01 f202 	mul.w	r2, r1, r2
 801db94:	6821      	ldr	r1, [r4, #0]
 801db96:	3204      	adds	r2, #4
 801db98:	188b      	adds	r3, r1, r2
 801db9a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801db9e:	9303      	str	r3, [sp, #12]
 801dba0:	9b07      	ldr	r3, [sp, #28]
 801dba2:	e70c      	b.n	801d9be <uxr_prepare_reliable_buffer_to_write+0xb2>
 801dba4:	8921      	ldrh	r1, [r4, #8]
 801dba6:	6863      	ldr	r3, [r4, #4]
 801dba8:	9804      	ldr	r0, [sp, #16]
 801dbaa:	fbb5 f2f1 	udiv	r2, r5, r1
 801dbae:	fbb3 f3f1 	udiv	r3, r3, r1
 801dbb2:	fb01 5212 	mls	r2, r1, r2, r5
 801dbb6:	6821      	ldr	r1, [r4, #0]
 801dbb8:	b292      	uxth	r2, r2
 801dbba:	fb02 f303 	mul.w	r3, r2, r3
 801dbbe:	7b22      	ldrb	r2, [r4, #12]
 801dbc0:	3304      	adds	r3, #4
 801dbc2:	445a      	add	r2, fp
 801dbc4:	4419      	add	r1, r3
 801dbc6:	f841 2c04 	str.w	r2, [r1, #-4]
 801dbca:	7b23      	ldrb	r3, [r4, #12]
 801dbcc:	9300      	str	r3, [sp, #0]
 801dbce:	2300      	movs	r3, #0
 801dbd0:	f7f4 fa6c 	bl	80120ac <ucdr_init_buffer_origin_offset>
 801dbd4:	2001      	movs	r0, #1
 801dbd6:	81e5      	strh	r5, [r4, #14]
 801dbd8:	e7a0      	b.n	801db1c <uxr_prepare_reliable_buffer_to_write+0x210>
 801dbda:	4682      	mov	sl, r0
 801dbdc:	e6cb      	b.n	801d976 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801dbde:	f10d 0b20 	add.w	fp, sp, #32
 801dbe2:	e747      	b.n	801da74 <uxr_prepare_reliable_buffer_to_write+0x168>
 801dbe4:	0801d7e1 	.word	0x0801d7e1

0801dbe8 <uxr_prepare_next_reliable_buffer_to_send>:
 801dbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbea:	4604      	mov	r4, r0
 801dbec:	461d      	mov	r5, r3
 801dbee:	460f      	mov	r7, r1
 801dbf0:	8a00      	ldrh	r0, [r0, #16]
 801dbf2:	2101      	movs	r1, #1
 801dbf4:	4616      	mov	r6, r2
 801dbf6:	f000 f8fb 	bl	801ddf0 <uxr_seq_num_add>
 801dbfa:	8028      	strh	r0, [r5, #0]
 801dbfc:	8922      	ldrh	r2, [r4, #8]
 801dbfe:	6863      	ldr	r3, [r4, #4]
 801dc00:	fbb0 f1f2 	udiv	r1, r0, r2
 801dc04:	fbb3 f3f2 	udiv	r3, r3, r2
 801dc08:	fb02 0c11 	mls	ip, r2, r1, r0
 801dc0c:	89e1      	ldrh	r1, [r4, #14]
 801dc0e:	fa1f fc8c 	uxth.w	ip, ip
 801dc12:	fb0c fc03 	mul.w	ip, ip, r3
 801dc16:	6823      	ldr	r3, [r4, #0]
 801dc18:	f10c 0c04 	add.w	ip, ip, #4
 801dc1c:	4463      	add	r3, ip
 801dc1e:	603b      	str	r3, [r7, #0]
 801dc20:	6823      	ldr	r3, [r4, #0]
 801dc22:	449c      	add	ip, r3
 801dc24:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801dc28:	6033      	str	r3, [r6, #0]
 801dc2a:	f000 f8e9 	bl	801de00 <uxr_seq_num_cmp>
 801dc2e:	2800      	cmp	r0, #0
 801dc30:	dd01      	ble.n	801dc36 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801dc32:	2000      	movs	r0, #0
 801dc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc36:	7b23      	ldrb	r3, [r4, #12]
 801dc38:	6832      	ldr	r2, [r6, #0]
 801dc3a:	429a      	cmp	r2, r3
 801dc3c:	d9f9      	bls.n	801dc32 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801dc3e:	8a61      	ldrh	r1, [r4, #18]
 801dc40:	8a20      	ldrh	r0, [r4, #16]
 801dc42:	f000 f8d9 	bl	801ddf8 <uxr_seq_num_sub>
 801dc46:	8923      	ldrh	r3, [r4, #8]
 801dc48:	4283      	cmp	r3, r0
 801dc4a:	d0f2      	beq.n	801dc32 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801dc4c:	8828      	ldrh	r0, [r5, #0]
 801dc4e:	89e3      	ldrh	r3, [r4, #14]
 801dc50:	8220      	strh	r0, [r4, #16]
 801dc52:	4298      	cmp	r0, r3
 801dc54:	d001      	beq.n	801dc5a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801dc56:	2001      	movs	r0, #1
 801dc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc5a:	2101      	movs	r1, #1
 801dc5c:	f000 f8c8 	bl	801ddf0 <uxr_seq_num_add>
 801dc60:	4603      	mov	r3, r0
 801dc62:	2001      	movs	r0, #1
 801dc64:	81e3      	strh	r3, [r4, #14]
 801dc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801dc68 <uxr_update_output_stream_heartbeat_timestamp>:
 801dc68:	b570      	push	{r4, r5, r6, lr}
 801dc6a:	8a01      	ldrh	r1, [r0, #16]
 801dc6c:	4604      	mov	r4, r0
 801dc6e:	8a40      	ldrh	r0, [r0, #18]
 801dc70:	4615      	mov	r5, r2
 801dc72:	461e      	mov	r6, r3
 801dc74:	f000 f8c4 	bl	801de00 <uxr_seq_num_cmp>
 801dc78:	2800      	cmp	r0, #0
 801dc7a:	db07      	blt.n	801dc8c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801dc7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dc80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801dc84:	2000      	movs	r0, #0
 801dc86:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801dc8a:	bd70      	pop	{r4, r5, r6, pc}
 801dc8c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801dc90:	b940      	cbnz	r0, 801dca4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801dc92:	2301      	movs	r3, #1
 801dc94:	f884 3020 	strb.w	r3, [r4, #32]
 801dc98:	3564      	adds	r5, #100	; 0x64
 801dc9a:	f146 0600 	adc.w	r6, r6, #0
 801dc9e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801dca2:	bd70      	pop	{r4, r5, r6, pc}
 801dca4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801dca8:	4295      	cmp	r5, r2
 801dcaa:	eb76 0303 	sbcs.w	r3, r6, r3
 801dcae:	db04      	blt.n	801dcba <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801dcb0:	1c43      	adds	r3, r0, #1
 801dcb2:	2001      	movs	r0, #1
 801dcb4:	f884 3020 	strb.w	r3, [r4, #32]
 801dcb8:	e7ee      	b.n	801dc98 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801dcba:	2000      	movs	r0, #0
 801dcbc:	e7ec      	b.n	801dc98 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801dcbe:	bf00      	nop

0801dcc0 <uxr_begin_output_nack_buffer_it>:
 801dcc0:	8a40      	ldrh	r0, [r0, #18]
 801dcc2:	4770      	bx	lr

0801dcc4 <uxr_next_reliable_nack_buffer_to_send>:
 801dcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcc8:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801dccc:	b197      	cbz	r7, 801dcf4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801dcce:	4680      	mov	r8, r0
 801dcd0:	460d      	mov	r5, r1
 801dcd2:	4616      	mov	r6, r2
 801dcd4:	461c      	mov	r4, r3
 801dcd6:	8818      	ldrh	r0, [r3, #0]
 801dcd8:	2101      	movs	r1, #1
 801dcda:	f000 f889 	bl	801ddf0 <uxr_seq_num_add>
 801dcde:	8020      	strh	r0, [r4, #0]
 801dce0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801dce4:	f000 f88c 	bl	801de00 <uxr_seq_num_cmp>
 801dce8:	2800      	cmp	r0, #0
 801dcea:	dd06      	ble.n	801dcfa <uxr_next_reliable_nack_buffer_to_send+0x36>
 801dcec:	2300      	movs	r3, #0
 801dcee:	461f      	mov	r7, r3
 801dcf0:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801dcf4:	4638      	mov	r0, r7
 801dcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcfa:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801dcfe:	8820      	ldrh	r0, [r4, #0]
 801dd00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dd04:	fbb0 f3f2 	udiv	r3, r0, r2
 801dd08:	fbb1 fcf2 	udiv	ip, r1, r2
 801dd0c:	fb02 0313 	mls	r3, r2, r3, r0
 801dd10:	b29b      	uxth	r3, r3
 801dd12:	fb03 fc0c 	mul.w	ip, r3, ip
 801dd16:	f8d8 3000 	ldr.w	r3, [r8]
 801dd1a:	f10c 0c04 	add.w	ip, ip, #4
 801dd1e:	4463      	add	r3, ip
 801dd20:	602b      	str	r3, [r5, #0]
 801dd22:	f8d8 3000 	ldr.w	r3, [r8]
 801dd26:	4463      	add	r3, ip
 801dd28:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801dd2c:	6033      	str	r3, [r6, #0]
 801dd2e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801dd32:	429a      	cmp	r2, r3
 801dd34:	d0d0      	beq.n	801dcd8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801dd36:	e7dd      	b.n	801dcf4 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801dd38 <uxr_process_acknack>:
 801dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd3a:	4604      	mov	r4, r0
 801dd3c:	460e      	mov	r6, r1
 801dd3e:	4610      	mov	r0, r2
 801dd40:	2101      	movs	r1, #1
 801dd42:	f000 f859 	bl	801ddf8 <uxr_seq_num_sub>
 801dd46:	8a61      	ldrh	r1, [r4, #18]
 801dd48:	f000 f856 	bl	801ddf8 <uxr_seq_num_sub>
 801dd4c:	b1c8      	cbz	r0, 801dd82 <uxr_process_acknack+0x4a>
 801dd4e:	4605      	mov	r5, r0
 801dd50:	2700      	movs	r7, #0
 801dd52:	2101      	movs	r1, #1
 801dd54:	8a60      	ldrh	r0, [r4, #18]
 801dd56:	f000 f84b 	bl	801ddf0 <uxr_seq_num_add>
 801dd5a:	8923      	ldrh	r3, [r4, #8]
 801dd5c:	6862      	ldr	r2, [r4, #4]
 801dd5e:	3701      	adds	r7, #1
 801dd60:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801dd64:	6821      	ldr	r1, [r4, #0]
 801dd66:	42bd      	cmp	r5, r7
 801dd68:	8260      	strh	r0, [r4, #18]
 801dd6a:	fbb0 fef3 	udiv	lr, r0, r3
 801dd6e:	fbb2 f2f3 	udiv	r2, r2, r3
 801dd72:	fb03 031e 	mls	r3, r3, lr, r0
 801dd76:	b29b      	uxth	r3, r3
 801dd78:	fb02 f303 	mul.w	r3, r2, r3
 801dd7c:	f841 c003 	str.w	ip, [r1, r3]
 801dd80:	d1e7      	bne.n	801dd52 <uxr_process_acknack+0x1a>
 801dd82:	3e00      	subs	r6, #0
 801dd84:	f04f 0300 	mov.w	r3, #0
 801dd88:	bf18      	it	ne
 801dd8a:	2601      	movne	r6, #1
 801dd8c:	f884 3020 	strb.w	r3, [r4, #32]
 801dd90:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801dd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd96:	bf00      	nop

0801dd98 <uxr_is_output_up_to_date>:
 801dd98:	8a01      	ldrh	r1, [r0, #16]
 801dd9a:	8a40      	ldrh	r0, [r0, #18]
 801dd9c:	b508      	push	{r3, lr}
 801dd9e:	f000 f82f 	bl	801de00 <uxr_seq_num_cmp>
 801dda2:	fab0 f080 	clz	r0, r0
 801dda6:	0940      	lsrs	r0, r0, #5
 801dda8:	bd08      	pop	{r3, pc}
 801ddaa:	bf00      	nop

0801ddac <get_available_free_slots>:
 801ddac:	8901      	ldrh	r1, [r0, #8]
 801ddae:	b1e1      	cbz	r1, 801ddea <get_available_free_slots+0x3e>
 801ddb0:	6843      	ldr	r3, [r0, #4]
 801ddb2:	f04f 0c00 	mov.w	ip, #0
 801ddb6:	b530      	push	{r4, r5, lr}
 801ddb8:	fbb3 fef1 	udiv	lr, r3, r1
 801ddbc:	6805      	ldr	r5, [r0, #0]
 801ddbe:	4662      	mov	r2, ip
 801ddc0:	7b04      	ldrb	r4, [r0, #12]
 801ddc2:	4660      	mov	r0, ip
 801ddc4:	f10c 0c01 	add.w	ip, ip, #1
 801ddc8:	fbb2 f3f1 	udiv	r3, r2, r1
 801ddcc:	fb01 2313 	mls	r3, r1, r3, r2
 801ddd0:	fa1f f28c 	uxth.w	r2, ip
 801ddd4:	b29b      	uxth	r3, r3
 801ddd6:	fb0e f303 	mul.w	r3, lr, r3
 801ddda:	58eb      	ldr	r3, [r5, r3]
 801dddc:	429c      	cmp	r4, r3
 801ddde:	d101      	bne.n	801dde4 <get_available_free_slots+0x38>
 801dde0:	3001      	adds	r0, #1
 801dde2:	b280      	uxth	r0, r0
 801dde4:	428a      	cmp	r2, r1
 801dde6:	d3ed      	bcc.n	801ddc4 <get_available_free_slots+0x18>
 801dde8:	bd30      	pop	{r4, r5, pc}
 801ddea:	4608      	mov	r0, r1
 801ddec:	4770      	bx	lr
 801ddee:	bf00      	nop

0801ddf0 <uxr_seq_num_add>:
 801ddf0:	4408      	add	r0, r1
 801ddf2:	b280      	uxth	r0, r0
 801ddf4:	4770      	bx	lr
 801ddf6:	bf00      	nop

0801ddf8 <uxr_seq_num_sub>:
 801ddf8:	1a40      	subs	r0, r0, r1
 801ddfa:	b280      	uxth	r0, r0
 801ddfc:	4770      	bx	lr
 801ddfe:	bf00      	nop

0801de00 <uxr_seq_num_cmp>:
 801de00:	4288      	cmp	r0, r1
 801de02:	d011      	beq.n	801de28 <uxr_seq_num_cmp+0x28>
 801de04:	d309      	bcc.n	801de1a <uxr_seq_num_cmp+0x1a>
 801de06:	4288      	cmp	r0, r1
 801de08:	d910      	bls.n	801de2c <uxr_seq_num_cmp+0x2c>
 801de0a:	1a40      	subs	r0, r0, r1
 801de0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801de10:	bfd4      	ite	le
 801de12:	2001      	movle	r0, #1
 801de14:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801de18:	4770      	bx	lr
 801de1a:	1a0b      	subs	r3, r1, r0
 801de1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801de20:	daf1      	bge.n	801de06 <uxr_seq_num_cmp+0x6>
 801de22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801de26:	4770      	bx	lr
 801de28:	2000      	movs	r0, #0
 801de2a:	4770      	bx	lr
 801de2c:	2001      	movs	r0, #1
 801de2e:	4770      	bx	lr

0801de30 <rcl_get_default_domain_id>:
 801de30:	b530      	push	{r4, r5, lr}
 801de32:	2300      	movs	r3, #0
 801de34:	b083      	sub	sp, #12
 801de36:	9300      	str	r3, [sp, #0]
 801de38:	b1d0      	cbz	r0, 801de70 <rcl_get_default_domain_id+0x40>
 801de3a:	4604      	mov	r4, r0
 801de3c:	4669      	mov	r1, sp
 801de3e:	4815      	ldr	r0, [pc, #84]	; (801de94 <rcl_get_default_domain_id+0x64>)
 801de40:	f7f6 f82a 	bl	8013e98 <rcutils_get_env>
 801de44:	4602      	mov	r2, r0
 801de46:	b110      	cbz	r0, 801de4e <rcl_get_default_domain_id+0x1e>
 801de48:	2001      	movs	r0, #1
 801de4a:	b003      	add	sp, #12
 801de4c:	bd30      	pop	{r4, r5, pc}
 801de4e:	9b00      	ldr	r3, [sp, #0]
 801de50:	b18b      	cbz	r3, 801de76 <rcl_get_default_domain_id+0x46>
 801de52:	7818      	ldrb	r0, [r3, #0]
 801de54:	2800      	cmp	r0, #0
 801de56:	d0f8      	beq.n	801de4a <rcl_get_default_domain_id+0x1a>
 801de58:	a901      	add	r1, sp, #4
 801de5a:	4618      	mov	r0, r3
 801de5c:	9201      	str	r2, [sp, #4]
 801de5e:	f000 fc8f 	bl	801e780 <strtoul>
 801de62:	4605      	mov	r5, r0
 801de64:	b150      	cbz	r0, 801de7c <rcl_get_default_domain_id+0x4c>
 801de66:	1c43      	adds	r3, r0, #1
 801de68:	d00d      	beq.n	801de86 <rcl_get_default_domain_id+0x56>
 801de6a:	2000      	movs	r0, #0
 801de6c:	6025      	str	r5, [r4, #0]
 801de6e:	e7ec      	b.n	801de4a <rcl_get_default_domain_id+0x1a>
 801de70:	200b      	movs	r0, #11
 801de72:	b003      	add	sp, #12
 801de74:	bd30      	pop	{r4, r5, pc}
 801de76:	4618      	mov	r0, r3
 801de78:	b003      	add	sp, #12
 801de7a:	bd30      	pop	{r4, r5, pc}
 801de7c:	9b01      	ldr	r3, [sp, #4]
 801de7e:	781b      	ldrb	r3, [r3, #0]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d0f2      	beq.n	801de6a <rcl_get_default_domain_id+0x3a>
 801de84:	e7e0      	b.n	801de48 <rcl_get_default_domain_id+0x18>
 801de86:	f001 ff25 	bl	801fcd4 <__errno>
 801de8a:	6803      	ldr	r3, [r0, #0]
 801de8c:	2b22      	cmp	r3, #34	; 0x22
 801de8e:	d1ec      	bne.n	801de6a <rcl_get_default_domain_id+0x3a>
 801de90:	e7da      	b.n	801de48 <rcl_get_default_domain_id+0x18>
 801de92:	bf00      	nop
 801de94:	08024878 	.word	0x08024878

0801de98 <rcl_expand_topic_name>:
 801de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de9c:	b08d      	sub	sp, #52	; 0x34
 801de9e:	4698      	mov	r8, r3
 801dea0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dea2:	9207      	str	r2, [sp, #28]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	bf18      	it	ne
 801dea8:	f1b8 0f00 	cmpne.w	r8, #0
 801deac:	bf0c      	ite	eq
 801deae:	2301      	moveq	r3, #1
 801deb0:	2300      	movne	r3, #0
 801deb2:	2a00      	cmp	r2, #0
 801deb4:	bf08      	it	eq
 801deb6:	f043 0301 	orreq.w	r3, r3, #1
 801deba:	2900      	cmp	r1, #0
 801debc:	bf08      	it	eq
 801debe:	f043 0301 	orreq.w	r3, r3, #1
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d13d      	bne.n	801df42 <rcl_expand_topic_name+0xaa>
 801dec6:	fab0 f280 	clz	r2, r0
 801deca:	4604      	mov	r4, r0
 801decc:	0952      	lsrs	r2, r2, #5
 801dece:	2800      	cmp	r0, #0
 801ded0:	d037      	beq.n	801df42 <rcl_expand_topic_name+0xaa>
 801ded2:	460f      	mov	r7, r1
 801ded4:	a90b      	add	r1, sp, #44	; 0x2c
 801ded6:	f000 f945 	bl	801e164 <rcl_validate_topic_name>
 801deda:	4605      	mov	r5, r0
 801dedc:	bb68      	cbnz	r0, 801df3a <rcl_expand_topic_name+0xa2>
 801dede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d137      	bne.n	801df54 <rcl_expand_topic_name+0xbc>
 801dee4:	4602      	mov	r2, r0
 801dee6:	a90b      	add	r1, sp, #44	; 0x2c
 801dee8:	4638      	mov	r0, r7
 801deea:	f7f6 fa97 	bl	801441c <rmw_validate_node_name>
 801deee:	bb68      	cbnz	r0, 801df4c <rcl_expand_topic_name+0xb4>
 801def0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801def2:	2b00      	cmp	r3, #0
 801def4:	d133      	bne.n	801df5e <rcl_expand_topic_name+0xc6>
 801def6:	462a      	mov	r2, r5
 801def8:	a90b      	add	r1, sp, #44	; 0x2c
 801defa:	9807      	ldr	r0, [sp, #28]
 801defc:	f7f6 fa70 	bl	80143e0 <rmw_validate_namespace>
 801df00:	bb20      	cbnz	r0, 801df4c <rcl_expand_topic_name+0xb4>
 801df02:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801df04:	2d00      	cmp	r5, #0
 801df06:	f040 80a2 	bne.w	801e04e <rcl_expand_topic_name+0x1b6>
 801df0a:	217b      	movs	r1, #123	; 0x7b
 801df0c:	4620      	mov	r0, r4
 801df0e:	f001 fe51 	bl	801fbb4 <strchr>
 801df12:	7823      	ldrb	r3, [r4, #0]
 801df14:	4681      	mov	r9, r0
 801df16:	bb20      	cbnz	r0, 801df62 <rcl_expand_topic_name+0xca>
 801df18:	2b2f      	cmp	r3, #47	; 0x2f
 801df1a:	d122      	bne.n	801df62 <rcl_expand_topic_name+0xca>
 801df1c:	ab19      	add	r3, sp, #100	; 0x64
 801df1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801df22:	ab16      	add	r3, sp, #88	; 0x58
 801df24:	e88d 0003 	stmia.w	sp, {r0, r1}
 801df28:	4620      	mov	r0, r4
 801df2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801df2c:	f7f6 f93a 	bl	80141a4 <rcutils_strdup>
 801df30:	2800      	cmp	r0, #0
 801df32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801df34:	bf08      	it	eq
 801df36:	250a      	moveq	r5, #10
 801df38:	6018      	str	r0, [r3, #0]
 801df3a:	4628      	mov	r0, r5
 801df3c:	b00d      	add	sp, #52	; 0x34
 801df3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df42:	250b      	movs	r5, #11
 801df44:	4628      	mov	r0, r5
 801df46:	b00d      	add	sp, #52	; 0x34
 801df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df4c:	f7fc f97a 	bl	801a244 <rcl_convert_rmw_ret_to_rcl_ret>
 801df50:	4605      	mov	r5, r0
 801df52:	e7f2      	b.n	801df3a <rcl_expand_topic_name+0xa2>
 801df54:	2567      	movs	r5, #103	; 0x67
 801df56:	4628      	mov	r0, r5
 801df58:	b00d      	add	sp, #52	; 0x34
 801df5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df5e:	25c9      	movs	r5, #201	; 0xc9
 801df60:	e7eb      	b.n	801df3a <rcl_expand_topic_name+0xa2>
 801df62:	2b7e      	cmp	r3, #126	; 0x7e
 801df64:	d075      	beq.n	801e052 <rcl_expand_topic_name+0x1ba>
 801df66:	f1b9 0f00 	cmp.w	r9, #0
 801df6a:	f000 80c2 	beq.w	801e0f2 <rcl_expand_topic_name+0x25a>
 801df6e:	2300      	movs	r3, #0
 801df70:	46a2      	mov	sl, r4
 801df72:	461e      	mov	r6, r3
 801df74:	9508      	str	r5, [sp, #32]
 801df76:	4655      	mov	r5, sl
 801df78:	9409      	str	r4, [sp, #36]	; 0x24
 801df7a:	46b2      	mov	sl, r6
 801df7c:	464c      	mov	r4, r9
 801df7e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801df82:	2c00      	cmp	r4, #0
 801df84:	f000 80ae 	beq.w	801e0e4 <rcl_expand_topic_name+0x24c>
 801df88:	217d      	movs	r1, #125	; 0x7d
 801df8a:	4628      	mov	r0, r5
 801df8c:	f001 fe12 	bl	801fbb4 <strchr>
 801df90:	eba0 0904 	sub.w	r9, r0, r4
 801df94:	4621      	mov	r1, r4
 801df96:	4869      	ldr	r0, [pc, #420]	; (801e13c <rcl_expand_topic_name+0x2a4>)
 801df98:	f109 0601 	add.w	r6, r9, #1
 801df9c:	4632      	mov	r2, r6
 801df9e:	f001 fe16 	bl	801fbce <strncmp>
 801dfa2:	2800      	cmp	r0, #0
 801dfa4:	d051      	beq.n	801e04a <rcl_expand_topic_name+0x1b2>
 801dfa6:	4632      	mov	r2, r6
 801dfa8:	4621      	mov	r1, r4
 801dfaa:	4865      	ldr	r0, [pc, #404]	; (801e140 <rcl_expand_topic_name+0x2a8>)
 801dfac:	f001 fe0f 	bl	801fbce <strncmp>
 801dfb0:	b128      	cbz	r0, 801dfbe <rcl_expand_topic_name+0x126>
 801dfb2:	4632      	mov	r2, r6
 801dfb4:	4621      	mov	r1, r4
 801dfb6:	4863      	ldr	r0, [pc, #396]	; (801e144 <rcl_expand_topic_name+0x2ac>)
 801dfb8:	f001 fe09 	bl	801fbce <strncmp>
 801dfbc:	bb38      	cbnz	r0, 801e00e <rcl_expand_topic_name+0x176>
 801dfbe:	46d9      	mov	r9, fp
 801dfc0:	ab18      	add	r3, sp, #96	; 0x60
 801dfc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801dfc6:	ab16      	add	r3, sp, #88	; 0x58
 801dfc8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801dfcc:	4620      	mov	r0, r4
 801dfce:	4631      	mov	r1, r6
 801dfd0:	cb0c      	ldmia	r3, {r2, r3}
 801dfd2:	f7f6 f909 	bl	80141e8 <rcutils_strndup>
 801dfd6:	4604      	mov	r4, r0
 801dfd8:	2800      	cmp	r0, #0
 801dfda:	f000 80a3 	beq.w	801e124 <rcl_expand_topic_name+0x28c>
 801dfde:	464a      	mov	r2, r9
 801dfe0:	4628      	mov	r0, r5
 801dfe2:	ab16      	add	r3, sp, #88	; 0x58
 801dfe4:	4621      	mov	r1, r4
 801dfe6:	f7f5 ffdd 	bl	8013fa4 <rcutils_repl_str>
 801dfea:	991a      	ldr	r1, [sp, #104]	; 0x68
 801dfec:	4605      	mov	r5, r0
 801dfee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dff0:	4620      	mov	r0, r4
 801dff2:	4798      	blx	r3
 801dff4:	4650      	mov	r0, sl
 801dff6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dff8:	991a      	ldr	r1, [sp, #104]	; 0x68
 801dffa:	4798      	blx	r3
 801dffc:	2d00      	cmp	r5, #0
 801dffe:	d06c      	beq.n	801e0da <rcl_expand_topic_name+0x242>
 801e000:	217b      	movs	r1, #123	; 0x7b
 801e002:	4628      	mov	r0, r5
 801e004:	f001 fdd6 	bl	801fbb4 <strchr>
 801e008:	46aa      	mov	sl, r5
 801e00a:	4604      	mov	r4, r0
 801e00c:	e7b9      	b.n	801df82 <rcl_expand_topic_name+0xea>
 801e00e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801e012:	1c61      	adds	r1, r4, #1
 801e014:	4640      	mov	r0, r8
 801e016:	f7fe fca5 	bl	801c964 <rcutils_string_map_getn>
 801e01a:	4681      	mov	r9, r0
 801e01c:	2800      	cmp	r0, #0
 801e01e:	d1cf      	bne.n	801dfc0 <rcl_expand_topic_name+0x128>
 801e020:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e022:	aa18      	add	r2, sp, #96	; 0x60
 801e024:	2569      	movs	r5, #105	; 0x69
 801e026:	6018      	str	r0, [r3, #0]
 801e028:	ab16      	add	r3, sp, #88	; 0x58
 801e02a:	ca07      	ldmia	r2, {r0, r1, r2}
 801e02c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801e030:	4631      	mov	r1, r6
 801e032:	4620      	mov	r0, r4
 801e034:	cb0c      	ldmia	r3, {r2, r3}
 801e036:	f7f6 f8d7 	bl	80141e8 <rcutils_strndup>
 801e03a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e03c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e03e:	4798      	blx	r3
 801e040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e042:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e044:	4650      	mov	r0, sl
 801e046:	4798      	blx	r3
 801e048:	e777      	b.n	801df3a <rcl_expand_topic_name+0xa2>
 801e04a:	46b9      	mov	r9, r7
 801e04c:	e7b8      	b.n	801dfc0 <rcl_expand_topic_name+0x128>
 801e04e:	25ca      	movs	r5, #202	; 0xca
 801e050:	e773      	b.n	801df3a <rcl_expand_topic_name+0xa2>
 801e052:	9e07      	ldr	r6, [sp, #28]
 801e054:	4630      	mov	r0, r6
 801e056:	f7e2 f953 	bl	8000300 <strlen>
 801e05a:	4a3b      	ldr	r2, [pc, #236]	; (801e148 <rcl_expand_topic_name+0x2b0>)
 801e05c:	4b3b      	ldr	r3, [pc, #236]	; (801e14c <rcl_expand_topic_name+0x2b4>)
 801e05e:	9603      	str	r6, [sp, #12]
 801e060:	2801      	cmp	r0, #1
 801e062:	bf18      	it	ne
 801e064:	4613      	movne	r3, r2
 801e066:	9704      	str	r7, [sp, #16]
 801e068:	9302      	str	r3, [sp, #8]
 801e06a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e06c:	9300      	str	r3, [sp, #0]
 801e06e:	1c63      	adds	r3, r4, #1
 801e070:	9305      	str	r3, [sp, #20]
 801e072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e076:	9301      	str	r3, [sp, #4]
 801e078:	ab16      	add	r3, sp, #88	; 0x58
 801e07a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e07c:	f7f5 ff58 	bl	8013f30 <rcutils_format_string_limit>
 801e080:	4606      	mov	r6, r0
 801e082:	b350      	cbz	r0, 801e0da <rcl_expand_topic_name+0x242>
 801e084:	f1b9 0f00 	cmp.w	r9, #0
 801e088:	d005      	beq.n	801e096 <rcl_expand_topic_name+0x1fe>
 801e08a:	217b      	movs	r1, #123	; 0x7b
 801e08c:	46b2      	mov	sl, r6
 801e08e:	f001 fd91 	bl	801fbb4 <strchr>
 801e092:	4681      	mov	r9, r0
 801e094:	e76e      	b.n	801df74 <rcl_expand_topic_name+0xdc>
 801e096:	7833      	ldrb	r3, [r6, #0]
 801e098:	2b2f      	cmp	r3, #47	; 0x2f
 801e09a:	d01b      	beq.n	801e0d4 <rcl_expand_topic_name+0x23c>
 801e09c:	9c07      	ldr	r4, [sp, #28]
 801e09e:	4620      	mov	r0, r4
 801e0a0:	f7e2 f92e 	bl	8000300 <strlen>
 801e0a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e0a8:	4a29      	ldr	r2, [pc, #164]	; (801e150 <rcl_expand_topic_name+0x2b8>)
 801e0aa:	9301      	str	r3, [sp, #4]
 801e0ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e0ae:	9604      	str	r6, [sp, #16]
 801e0b0:	9300      	str	r3, [sp, #0]
 801e0b2:	4b28      	ldr	r3, [pc, #160]	; (801e154 <rcl_expand_topic_name+0x2bc>)
 801e0b4:	9403      	str	r4, [sp, #12]
 801e0b6:	2801      	cmp	r0, #1
 801e0b8:	bf18      	it	ne
 801e0ba:	4613      	movne	r3, r2
 801e0bc:	9302      	str	r3, [sp, #8]
 801e0be:	ab16      	add	r3, sp, #88	; 0x58
 801e0c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e0c2:	f7f5 ff35 	bl	8013f30 <rcutils_format_string_limit>
 801e0c6:	4603      	mov	r3, r0
 801e0c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e0ca:	4630      	mov	r0, r6
 801e0cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e0ce:	461e      	mov	r6, r3
 801e0d0:	4790      	blx	r2
 801e0d2:	b116      	cbz	r6, 801e0da <rcl_expand_topic_name+0x242>
 801e0d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e0d6:	601e      	str	r6, [r3, #0]
 801e0d8:	e72f      	b.n	801df3a <rcl_expand_topic_name+0xa2>
 801e0da:	2300      	movs	r3, #0
 801e0dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e0de:	250a      	movs	r5, #10
 801e0e0:	6013      	str	r3, [r2, #0]
 801e0e2:	e72a      	b.n	801df3a <rcl_expand_topic_name+0xa2>
 801e0e4:	4653      	mov	r3, sl
 801e0e6:	4656      	mov	r6, sl
 801e0e8:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d1d2      	bne.n	801e096 <rcl_expand_topic_name+0x1fe>
 801e0f0:	7823      	ldrb	r3, [r4, #0]
 801e0f2:	2b2f      	cmp	r3, #47	; 0x2f
 801e0f4:	d01e      	beq.n	801e134 <rcl_expand_topic_name+0x29c>
 801e0f6:	9e07      	ldr	r6, [sp, #28]
 801e0f8:	4630      	mov	r0, r6
 801e0fa:	f7e2 f901 	bl	8000300 <strlen>
 801e0fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e104:	9603      	str	r6, [sp, #12]
 801e106:	9404      	str	r4, [sp, #16]
 801e108:	e9cd 2300 	strd	r2, r3, [sp]
 801e10c:	4a10      	ldr	r2, [pc, #64]	; (801e150 <rcl_expand_topic_name+0x2b8>)
 801e10e:	4b11      	ldr	r3, [pc, #68]	; (801e154 <rcl_expand_topic_name+0x2bc>)
 801e110:	2801      	cmp	r0, #1
 801e112:	bf18      	it	ne
 801e114:	4613      	movne	r3, r2
 801e116:	9302      	str	r3, [sp, #8]
 801e118:	ab16      	add	r3, sp, #88	; 0x58
 801e11a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e11c:	f7f5 ff08 	bl	8013f30 <rcutils_format_string_limit>
 801e120:	4606      	mov	r6, r0
 801e122:	e7d6      	b.n	801e0d2 <rcl_expand_topic_name+0x23a>
 801e124:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801e128:	4650      	mov	r0, sl
 801e12a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e12c:	6014      	str	r4, [r2, #0]
 801e12e:	250a      	movs	r5, #10
 801e130:	4798      	blx	r3
 801e132:	e702      	b.n	801df3a <rcl_expand_topic_name+0xa2>
 801e134:	2300      	movs	r3, #0
 801e136:	461e      	mov	r6, r3
 801e138:	e7cc      	b.n	801e0d4 <rcl_expand_topic_name+0x23c>
 801e13a:	bf00      	nop
 801e13c:	08024890 	.word	0x08024890
 801e140:	08024898 	.word	0x08024898
 801e144:	080248a0 	.word	0x080248a0
 801e148:	08024888 	.word	0x08024888
 801e14c:	08024210 	.word	0x08024210
 801e150:	08023c10 	.word	0x08023c10
 801e154:	08023c08 	.word	0x08023c08

0801e158 <rcl_get_default_topic_name_substitutions>:
 801e158:	2800      	cmp	r0, #0
 801e15a:	bf0c      	ite	eq
 801e15c:	200b      	moveq	r0, #11
 801e15e:	2000      	movne	r0, #0
 801e160:	4770      	bx	lr
 801e162:	bf00      	nop

0801e164 <rcl_validate_topic_name>:
 801e164:	2800      	cmp	r0, #0
 801e166:	f000 8089 	beq.w	801e27c <rcl_validate_topic_name+0x118>
 801e16a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e16e:	460e      	mov	r6, r1
 801e170:	2900      	cmp	r1, #0
 801e172:	f000 8085 	beq.w	801e280 <rcl_validate_topic_name+0x11c>
 801e176:	4604      	mov	r4, r0
 801e178:	4617      	mov	r7, r2
 801e17a:	f7e2 f8c1 	bl	8000300 <strlen>
 801e17e:	b1b0      	cbz	r0, 801e1ae <rcl_validate_topic_name+0x4a>
 801e180:	f894 e000 	ldrb.w	lr, [r4]
 801e184:	f8df c160 	ldr.w	ip, [pc, #352]	; 801e2e8 <rcl_validate_topic_name+0x184>
 801e188:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801e18c:	f013 0304 	ands.w	r3, r3, #4
 801e190:	d139      	bne.n	801e206 <rcl_validate_topic_name+0xa2>
 801e192:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801e196:	f814 2008 	ldrb.w	r2, [r4, r8]
 801e19a:	2a2f      	cmp	r2, #47	; 0x2f
 801e19c:	d10f      	bne.n	801e1be <rcl_validate_topic_name+0x5a>
 801e19e:	2202      	movs	r2, #2
 801e1a0:	6032      	str	r2, [r6, #0]
 801e1a2:	b3a7      	cbz	r7, 801e20e <rcl_validate_topic_name+0xaa>
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	f8c7 8000 	str.w	r8, [r7]
 801e1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1ae:	2301      	movs	r3, #1
 801e1b0:	6033      	str	r3, [r6, #0]
 801e1b2:	b367      	cbz	r7, 801e20e <rcl_validate_topic_name+0xaa>
 801e1b4:	2300      	movs	r3, #0
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	603b      	str	r3, [r7, #0]
 801e1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1be:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801e1c2:	461d      	mov	r5, r3
 801e1c4:	4619      	mov	r1, r3
 801e1c6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801e1ca:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801e1ce:	f1b9 0f09 	cmp.w	r9, #9
 801e1d2:	d91f      	bls.n	801e214 <rcl_validate_topic_name+0xb0>
 801e1d4:	f022 0920 	bic.w	r9, r2, #32
 801e1d8:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801e1dc:	f1b9 0f19 	cmp.w	r9, #25
 801e1e0:	d918      	bls.n	801e214 <rcl_validate_topic_name+0xb0>
 801e1e2:	2a5f      	cmp	r2, #95	; 0x5f
 801e1e4:	d024      	beq.n	801e230 <rcl_validate_topic_name+0xcc>
 801e1e6:	2a2f      	cmp	r2, #47	; 0x2f
 801e1e8:	d058      	beq.n	801e29c <rcl_validate_topic_name+0x138>
 801e1ea:	2a7e      	cmp	r2, #126	; 0x7e
 801e1ec:	d04a      	beq.n	801e284 <rcl_validate_topic_name+0x120>
 801e1ee:	2a7b      	cmp	r2, #123	; 0x7b
 801e1f0:	d05b      	beq.n	801e2aa <rcl_validate_topic_name+0x146>
 801e1f2:	2a7d      	cmp	r2, #125	; 0x7d
 801e1f4:	d169      	bne.n	801e2ca <rcl_validate_topic_name+0x166>
 801e1f6:	2d00      	cmp	r5, #0
 801e1f8:	d15c      	bne.n	801e2b4 <rcl_validate_topic_name+0x150>
 801e1fa:	2305      	movs	r3, #5
 801e1fc:	6033      	str	r3, [r6, #0]
 801e1fe:	b137      	cbz	r7, 801e20e <rcl_validate_topic_name+0xaa>
 801e200:	2000      	movs	r0, #0
 801e202:	6039      	str	r1, [r7, #0]
 801e204:	e7d9      	b.n	801e1ba <rcl_validate_topic_name+0x56>
 801e206:	2304      	movs	r3, #4
 801e208:	6033      	str	r3, [r6, #0]
 801e20a:	2f00      	cmp	r7, #0
 801e20c:	d1d2      	bne.n	801e1b4 <rcl_validate_topic_name+0x50>
 801e20e:	2000      	movs	r0, #0
 801e210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e214:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e218:	0752      	lsls	r2, r2, #29
 801e21a:	d509      	bpl.n	801e230 <rcl_validate_topic_name+0xcc>
 801e21c:	2900      	cmp	r1, #0
 801e21e:	bf0c      	ite	eq
 801e220:	2200      	moveq	r2, #0
 801e222:	f005 0201 	andne.w	r2, r5, #1
 801e226:	b11a      	cbz	r2, 801e230 <rcl_validate_topic_name+0xcc>
 801e228:	1e4d      	subs	r5, r1, #1
 801e22a:	429d      	cmp	r5, r3
 801e22c:	d031      	beq.n	801e292 <rcl_validate_topic_name+0x12e>
 801e22e:	4615      	mov	r5, r2
 801e230:	3101      	adds	r1, #1
 801e232:	4288      	cmp	r0, r1
 801e234:	d1c7      	bne.n	801e1c6 <rcl_validate_topic_name+0x62>
 801e236:	2d00      	cmp	r5, #0
 801e238:	d142      	bne.n	801e2c0 <rcl_validate_topic_name+0x15c>
 801e23a:	4628      	mov	r0, r5
 801e23c:	2301      	movs	r3, #1
 801e23e:	e00c      	b.n	801e25a <rcl_validate_topic_name+0xf6>
 801e240:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801e244:	d101      	bne.n	801e24a <rcl_validate_topic_name+0xe6>
 801e246:	2801      	cmp	r0, #1
 801e248:	d047      	beq.n	801e2da <rcl_validate_topic_name+0x176>
 801e24a:	1c5a      	adds	r2, r3, #1
 801e24c:	428b      	cmp	r3, r1
 801e24e:	f100 0001 	add.w	r0, r0, #1
 801e252:	f104 0401 	add.w	r4, r4, #1
 801e256:	4613      	mov	r3, r2
 801e258:	d22e      	bcs.n	801e2b8 <rcl_validate_topic_name+0x154>
 801e25a:	4580      	cmp	r8, r0
 801e25c:	d0f5      	beq.n	801e24a <rcl_validate_topic_name+0xe6>
 801e25e:	7822      	ldrb	r2, [r4, #0]
 801e260:	2a2f      	cmp	r2, #47	; 0x2f
 801e262:	d1ed      	bne.n	801e240 <rcl_validate_topic_name+0xdc>
 801e264:	7862      	ldrb	r2, [r4, #1]
 801e266:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e26a:	0752      	lsls	r2, r2, #29
 801e26c:	d5ed      	bpl.n	801e24a <rcl_validate_topic_name+0xe6>
 801e26e:	2204      	movs	r2, #4
 801e270:	6032      	str	r2, [r6, #0]
 801e272:	2f00      	cmp	r7, #0
 801e274:	d0cb      	beq.n	801e20e <rcl_validate_topic_name+0xaa>
 801e276:	2000      	movs	r0, #0
 801e278:	603b      	str	r3, [r7, #0]
 801e27a:	e79e      	b.n	801e1ba <rcl_validate_topic_name+0x56>
 801e27c:	200b      	movs	r0, #11
 801e27e:	4770      	bx	lr
 801e280:	200b      	movs	r0, #11
 801e282:	e79a      	b.n	801e1ba <rcl_validate_topic_name+0x56>
 801e284:	2900      	cmp	r1, #0
 801e286:	d0d3      	beq.n	801e230 <rcl_validate_topic_name+0xcc>
 801e288:	2306      	movs	r3, #6
 801e28a:	6033      	str	r3, [r6, #0]
 801e28c:	2f00      	cmp	r7, #0
 801e28e:	d1b7      	bne.n	801e200 <rcl_validate_topic_name+0x9c>
 801e290:	e7bd      	b.n	801e20e <rcl_validate_topic_name+0xaa>
 801e292:	2309      	movs	r3, #9
 801e294:	6033      	str	r3, [r6, #0]
 801e296:	2f00      	cmp	r7, #0
 801e298:	d1b2      	bne.n	801e200 <rcl_validate_topic_name+0x9c>
 801e29a:	e7b8      	b.n	801e20e <rcl_validate_topic_name+0xaa>
 801e29c:	2d00      	cmp	r5, #0
 801e29e:	d0c7      	beq.n	801e230 <rcl_validate_topic_name+0xcc>
 801e2a0:	2308      	movs	r3, #8
 801e2a2:	6033      	str	r3, [r6, #0]
 801e2a4:	2f00      	cmp	r7, #0
 801e2a6:	d1ab      	bne.n	801e200 <rcl_validate_topic_name+0x9c>
 801e2a8:	e7b1      	b.n	801e20e <rcl_validate_topic_name+0xaa>
 801e2aa:	2d00      	cmp	r5, #0
 801e2ac:	d1f8      	bne.n	801e2a0 <rcl_validate_topic_name+0x13c>
 801e2ae:	460b      	mov	r3, r1
 801e2b0:	2501      	movs	r5, #1
 801e2b2:	e7bd      	b.n	801e230 <rcl_validate_topic_name+0xcc>
 801e2b4:	2500      	movs	r5, #0
 801e2b6:	e7bb      	b.n	801e230 <rcl_validate_topic_name+0xcc>
 801e2b8:	2300      	movs	r3, #0
 801e2ba:	4618      	mov	r0, r3
 801e2bc:	6033      	str	r3, [r6, #0]
 801e2be:	e77c      	b.n	801e1ba <rcl_validate_topic_name+0x56>
 801e2c0:	2205      	movs	r2, #5
 801e2c2:	6032      	str	r2, [r6, #0]
 801e2c4:	2f00      	cmp	r7, #0
 801e2c6:	d1d6      	bne.n	801e276 <rcl_validate_topic_name+0x112>
 801e2c8:	e7a1      	b.n	801e20e <rcl_validate_topic_name+0xaa>
 801e2ca:	2d00      	cmp	r5, #0
 801e2cc:	bf14      	ite	ne
 801e2ce:	2308      	movne	r3, #8
 801e2d0:	2303      	moveq	r3, #3
 801e2d2:	6033      	str	r3, [r6, #0]
 801e2d4:	2f00      	cmp	r7, #0
 801e2d6:	d193      	bne.n	801e200 <rcl_validate_topic_name+0x9c>
 801e2d8:	e799      	b.n	801e20e <rcl_validate_topic_name+0xaa>
 801e2da:	2307      	movs	r3, #7
 801e2dc:	6033      	str	r3, [r6, #0]
 801e2de:	2f00      	cmp	r7, #0
 801e2e0:	d095      	beq.n	801e20e <rcl_validate_topic_name+0xaa>
 801e2e2:	2301      	movs	r3, #1
 801e2e4:	e7c7      	b.n	801e276 <rcl_validate_topic_name+0x112>
 801e2e6:	bf00      	nop
 801e2e8:	0802491c 	.word	0x0802491c

0801e2ec <calloc>:
 801e2ec:	4b02      	ldr	r3, [pc, #8]	; (801e2f8 <calloc+0xc>)
 801e2ee:	460a      	mov	r2, r1
 801e2f0:	4601      	mov	r1, r0
 801e2f2:	6818      	ldr	r0, [r3, #0]
 801e2f4:	f000 b802 	b.w	801e2fc <_calloc_r>
 801e2f8:	200009a0 	.word	0x200009a0

0801e2fc <_calloc_r>:
 801e2fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e2fe:	fba1 2402 	umull	r2, r4, r1, r2
 801e302:	b94c      	cbnz	r4, 801e318 <_calloc_r+0x1c>
 801e304:	4611      	mov	r1, r2
 801e306:	9201      	str	r2, [sp, #4]
 801e308:	f000 f898 	bl	801e43c <_malloc_r>
 801e30c:	9a01      	ldr	r2, [sp, #4]
 801e30e:	4605      	mov	r5, r0
 801e310:	b930      	cbnz	r0, 801e320 <_calloc_r+0x24>
 801e312:	4628      	mov	r0, r5
 801e314:	b003      	add	sp, #12
 801e316:	bd30      	pop	{r4, r5, pc}
 801e318:	220c      	movs	r2, #12
 801e31a:	6002      	str	r2, [r0, #0]
 801e31c:	2500      	movs	r5, #0
 801e31e:	e7f8      	b.n	801e312 <_calloc_r+0x16>
 801e320:	4621      	mov	r1, r4
 801e322:	f001 fc3f 	bl	801fba4 <memset>
 801e326:	e7f4      	b.n	801e312 <_calloc_r+0x16>

0801e328 <exit>:
 801e328:	b508      	push	{r3, lr}
 801e32a:	4b06      	ldr	r3, [pc, #24]	; (801e344 <exit+0x1c>)
 801e32c:	4604      	mov	r4, r0
 801e32e:	b113      	cbz	r3, 801e336 <exit+0xe>
 801e330:	2100      	movs	r1, #0
 801e332:	f3af 8000 	nop.w
 801e336:	4b04      	ldr	r3, [pc, #16]	; (801e348 <exit+0x20>)
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	b103      	cbz	r3, 801e33e <exit+0x16>
 801e33c:	4798      	blx	r3
 801e33e:	4620      	mov	r0, r4
 801e340:	f7e4 fc4a 	bl	8002bd8 <_exit>
 801e344:	00000000 	.word	0x00000000
 801e348:	20017014 	.word	0x20017014

0801e34c <getenv>:
 801e34c:	b507      	push	{r0, r1, r2, lr}
 801e34e:	4b04      	ldr	r3, [pc, #16]	; (801e360 <getenv+0x14>)
 801e350:	4601      	mov	r1, r0
 801e352:	aa01      	add	r2, sp, #4
 801e354:	6818      	ldr	r0, [r3, #0]
 801e356:	f000 f805 	bl	801e364 <_findenv_r>
 801e35a:	b003      	add	sp, #12
 801e35c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e360:	200009a0 	.word	0x200009a0

0801e364 <_findenv_r>:
 801e364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e368:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801e3d8 <_findenv_r+0x74>
 801e36c:	4607      	mov	r7, r0
 801e36e:	4689      	mov	r9, r1
 801e370:	4616      	mov	r6, r2
 801e372:	f002 fb0d 	bl	8020990 <__env_lock>
 801e376:	f8da 4000 	ldr.w	r4, [sl]
 801e37a:	b134      	cbz	r4, 801e38a <_findenv_r+0x26>
 801e37c:	464b      	mov	r3, r9
 801e37e:	4698      	mov	r8, r3
 801e380:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e384:	b13a      	cbz	r2, 801e396 <_findenv_r+0x32>
 801e386:	2a3d      	cmp	r2, #61	; 0x3d
 801e388:	d1f9      	bne.n	801e37e <_findenv_r+0x1a>
 801e38a:	4638      	mov	r0, r7
 801e38c:	f002 fb06 	bl	802099c <__env_unlock>
 801e390:	2000      	movs	r0, #0
 801e392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e396:	eba8 0809 	sub.w	r8, r8, r9
 801e39a:	46a3      	mov	fp, r4
 801e39c:	f854 0b04 	ldr.w	r0, [r4], #4
 801e3a0:	2800      	cmp	r0, #0
 801e3a2:	d0f2      	beq.n	801e38a <_findenv_r+0x26>
 801e3a4:	4642      	mov	r2, r8
 801e3a6:	4649      	mov	r1, r9
 801e3a8:	f001 fc11 	bl	801fbce <strncmp>
 801e3ac:	2800      	cmp	r0, #0
 801e3ae:	d1f4      	bne.n	801e39a <_findenv_r+0x36>
 801e3b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801e3b4:	eb03 0508 	add.w	r5, r3, r8
 801e3b8:	f813 3008 	ldrb.w	r3, [r3, r8]
 801e3bc:	2b3d      	cmp	r3, #61	; 0x3d
 801e3be:	d1ec      	bne.n	801e39a <_findenv_r+0x36>
 801e3c0:	f8da 3000 	ldr.w	r3, [sl]
 801e3c4:	ebab 0303 	sub.w	r3, fp, r3
 801e3c8:	109b      	asrs	r3, r3, #2
 801e3ca:	4638      	mov	r0, r7
 801e3cc:	6033      	str	r3, [r6, #0]
 801e3ce:	f002 fae5 	bl	802099c <__env_unlock>
 801e3d2:	1c68      	adds	r0, r5, #1
 801e3d4:	e7dd      	b.n	801e392 <_findenv_r+0x2e>
 801e3d6:	bf00      	nop
 801e3d8:	20000004 	.word	0x20000004

0801e3dc <malloc>:
 801e3dc:	4b02      	ldr	r3, [pc, #8]	; (801e3e8 <malloc+0xc>)
 801e3de:	4601      	mov	r1, r0
 801e3e0:	6818      	ldr	r0, [r3, #0]
 801e3e2:	f000 b82b 	b.w	801e43c <_malloc_r>
 801e3e6:	bf00      	nop
 801e3e8:	200009a0 	.word	0x200009a0

0801e3ec <free>:
 801e3ec:	4b02      	ldr	r3, [pc, #8]	; (801e3f8 <free+0xc>)
 801e3ee:	4601      	mov	r1, r0
 801e3f0:	6818      	ldr	r0, [r3, #0]
 801e3f2:	f002 bad9 	b.w	80209a8 <_free_r>
 801e3f6:	bf00      	nop
 801e3f8:	200009a0 	.word	0x200009a0

0801e3fc <sbrk_aligned>:
 801e3fc:	b570      	push	{r4, r5, r6, lr}
 801e3fe:	4e0e      	ldr	r6, [pc, #56]	; (801e438 <sbrk_aligned+0x3c>)
 801e400:	460c      	mov	r4, r1
 801e402:	6831      	ldr	r1, [r6, #0]
 801e404:	4605      	mov	r5, r0
 801e406:	b911      	cbnz	r1, 801e40e <sbrk_aligned+0x12>
 801e408:	f001 fc42 	bl	801fc90 <_sbrk_r>
 801e40c:	6030      	str	r0, [r6, #0]
 801e40e:	4621      	mov	r1, r4
 801e410:	4628      	mov	r0, r5
 801e412:	f001 fc3d 	bl	801fc90 <_sbrk_r>
 801e416:	1c43      	adds	r3, r0, #1
 801e418:	d00a      	beq.n	801e430 <sbrk_aligned+0x34>
 801e41a:	1cc4      	adds	r4, r0, #3
 801e41c:	f024 0403 	bic.w	r4, r4, #3
 801e420:	42a0      	cmp	r0, r4
 801e422:	d007      	beq.n	801e434 <sbrk_aligned+0x38>
 801e424:	1a21      	subs	r1, r4, r0
 801e426:	4628      	mov	r0, r5
 801e428:	f001 fc32 	bl	801fc90 <_sbrk_r>
 801e42c:	3001      	adds	r0, #1
 801e42e:	d101      	bne.n	801e434 <sbrk_aligned+0x38>
 801e430:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e434:	4620      	mov	r0, r4
 801e436:	bd70      	pop	{r4, r5, r6, pc}
 801e438:	20016ed8 	.word	0x20016ed8

0801e43c <_malloc_r>:
 801e43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e440:	1ccd      	adds	r5, r1, #3
 801e442:	f025 0503 	bic.w	r5, r5, #3
 801e446:	3508      	adds	r5, #8
 801e448:	2d0c      	cmp	r5, #12
 801e44a:	bf38      	it	cc
 801e44c:	250c      	movcc	r5, #12
 801e44e:	2d00      	cmp	r5, #0
 801e450:	4607      	mov	r7, r0
 801e452:	db01      	blt.n	801e458 <_malloc_r+0x1c>
 801e454:	42a9      	cmp	r1, r5
 801e456:	d905      	bls.n	801e464 <_malloc_r+0x28>
 801e458:	230c      	movs	r3, #12
 801e45a:	603b      	str	r3, [r7, #0]
 801e45c:	2600      	movs	r6, #0
 801e45e:	4630      	mov	r0, r6
 801e460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e464:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801e538 <_malloc_r+0xfc>
 801e468:	f000 f868 	bl	801e53c <__malloc_lock>
 801e46c:	f8d8 3000 	ldr.w	r3, [r8]
 801e470:	461c      	mov	r4, r3
 801e472:	bb5c      	cbnz	r4, 801e4cc <_malloc_r+0x90>
 801e474:	4629      	mov	r1, r5
 801e476:	4638      	mov	r0, r7
 801e478:	f7ff ffc0 	bl	801e3fc <sbrk_aligned>
 801e47c:	1c43      	adds	r3, r0, #1
 801e47e:	4604      	mov	r4, r0
 801e480:	d155      	bne.n	801e52e <_malloc_r+0xf2>
 801e482:	f8d8 4000 	ldr.w	r4, [r8]
 801e486:	4626      	mov	r6, r4
 801e488:	2e00      	cmp	r6, #0
 801e48a:	d145      	bne.n	801e518 <_malloc_r+0xdc>
 801e48c:	2c00      	cmp	r4, #0
 801e48e:	d048      	beq.n	801e522 <_malloc_r+0xe6>
 801e490:	6823      	ldr	r3, [r4, #0]
 801e492:	4631      	mov	r1, r6
 801e494:	4638      	mov	r0, r7
 801e496:	eb04 0903 	add.w	r9, r4, r3
 801e49a:	f001 fbf9 	bl	801fc90 <_sbrk_r>
 801e49e:	4581      	cmp	r9, r0
 801e4a0:	d13f      	bne.n	801e522 <_malloc_r+0xe6>
 801e4a2:	6821      	ldr	r1, [r4, #0]
 801e4a4:	1a6d      	subs	r5, r5, r1
 801e4a6:	4629      	mov	r1, r5
 801e4a8:	4638      	mov	r0, r7
 801e4aa:	f7ff ffa7 	bl	801e3fc <sbrk_aligned>
 801e4ae:	3001      	adds	r0, #1
 801e4b0:	d037      	beq.n	801e522 <_malloc_r+0xe6>
 801e4b2:	6823      	ldr	r3, [r4, #0]
 801e4b4:	442b      	add	r3, r5
 801e4b6:	6023      	str	r3, [r4, #0]
 801e4b8:	f8d8 3000 	ldr.w	r3, [r8]
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d038      	beq.n	801e532 <_malloc_r+0xf6>
 801e4c0:	685a      	ldr	r2, [r3, #4]
 801e4c2:	42a2      	cmp	r2, r4
 801e4c4:	d12b      	bne.n	801e51e <_malloc_r+0xe2>
 801e4c6:	2200      	movs	r2, #0
 801e4c8:	605a      	str	r2, [r3, #4]
 801e4ca:	e00f      	b.n	801e4ec <_malloc_r+0xb0>
 801e4cc:	6822      	ldr	r2, [r4, #0]
 801e4ce:	1b52      	subs	r2, r2, r5
 801e4d0:	d41f      	bmi.n	801e512 <_malloc_r+0xd6>
 801e4d2:	2a0b      	cmp	r2, #11
 801e4d4:	d917      	bls.n	801e506 <_malloc_r+0xca>
 801e4d6:	1961      	adds	r1, r4, r5
 801e4d8:	42a3      	cmp	r3, r4
 801e4da:	6025      	str	r5, [r4, #0]
 801e4dc:	bf18      	it	ne
 801e4de:	6059      	strne	r1, [r3, #4]
 801e4e0:	6863      	ldr	r3, [r4, #4]
 801e4e2:	bf08      	it	eq
 801e4e4:	f8c8 1000 	streq.w	r1, [r8]
 801e4e8:	5162      	str	r2, [r4, r5]
 801e4ea:	604b      	str	r3, [r1, #4]
 801e4ec:	4638      	mov	r0, r7
 801e4ee:	f104 060b 	add.w	r6, r4, #11
 801e4f2:	f000 f829 	bl	801e548 <__malloc_unlock>
 801e4f6:	f026 0607 	bic.w	r6, r6, #7
 801e4fa:	1d23      	adds	r3, r4, #4
 801e4fc:	1af2      	subs	r2, r6, r3
 801e4fe:	d0ae      	beq.n	801e45e <_malloc_r+0x22>
 801e500:	1b9b      	subs	r3, r3, r6
 801e502:	50a3      	str	r3, [r4, r2]
 801e504:	e7ab      	b.n	801e45e <_malloc_r+0x22>
 801e506:	42a3      	cmp	r3, r4
 801e508:	6862      	ldr	r2, [r4, #4]
 801e50a:	d1dd      	bne.n	801e4c8 <_malloc_r+0x8c>
 801e50c:	f8c8 2000 	str.w	r2, [r8]
 801e510:	e7ec      	b.n	801e4ec <_malloc_r+0xb0>
 801e512:	4623      	mov	r3, r4
 801e514:	6864      	ldr	r4, [r4, #4]
 801e516:	e7ac      	b.n	801e472 <_malloc_r+0x36>
 801e518:	4634      	mov	r4, r6
 801e51a:	6876      	ldr	r6, [r6, #4]
 801e51c:	e7b4      	b.n	801e488 <_malloc_r+0x4c>
 801e51e:	4613      	mov	r3, r2
 801e520:	e7cc      	b.n	801e4bc <_malloc_r+0x80>
 801e522:	230c      	movs	r3, #12
 801e524:	603b      	str	r3, [r7, #0]
 801e526:	4638      	mov	r0, r7
 801e528:	f000 f80e 	bl	801e548 <__malloc_unlock>
 801e52c:	e797      	b.n	801e45e <_malloc_r+0x22>
 801e52e:	6025      	str	r5, [r4, #0]
 801e530:	e7dc      	b.n	801e4ec <_malloc_r+0xb0>
 801e532:	605b      	str	r3, [r3, #4]
 801e534:	deff      	udf	#255	; 0xff
 801e536:	bf00      	nop
 801e538:	20016ed4 	.word	0x20016ed4

0801e53c <__malloc_lock>:
 801e53c:	4801      	ldr	r0, [pc, #4]	; (801e544 <__malloc_lock+0x8>)
 801e53e:	f001 bbf4 	b.w	801fd2a <__retarget_lock_acquire_recursive>
 801e542:	bf00      	nop
 801e544:	2001701d 	.word	0x2001701d

0801e548 <__malloc_unlock>:
 801e548:	4801      	ldr	r0, [pc, #4]	; (801e550 <__malloc_unlock+0x8>)
 801e54a:	f001 bbef 	b.w	801fd2c <__retarget_lock_release_recursive>
 801e54e:	bf00      	nop
 801e550:	2001701d 	.word	0x2001701d

0801e554 <srand>:
 801e554:	b538      	push	{r3, r4, r5, lr}
 801e556:	4b10      	ldr	r3, [pc, #64]	; (801e598 <srand+0x44>)
 801e558:	681d      	ldr	r5, [r3, #0]
 801e55a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801e55c:	4604      	mov	r4, r0
 801e55e:	b9b3      	cbnz	r3, 801e58e <srand+0x3a>
 801e560:	2018      	movs	r0, #24
 801e562:	f7ff ff3b 	bl	801e3dc <malloc>
 801e566:	4602      	mov	r2, r0
 801e568:	6328      	str	r0, [r5, #48]	; 0x30
 801e56a:	b920      	cbnz	r0, 801e576 <srand+0x22>
 801e56c:	4b0b      	ldr	r3, [pc, #44]	; (801e59c <srand+0x48>)
 801e56e:	480c      	ldr	r0, [pc, #48]	; (801e5a0 <srand+0x4c>)
 801e570:	2146      	movs	r1, #70	; 0x46
 801e572:	f001 fbf9 	bl	801fd68 <__assert_func>
 801e576:	490b      	ldr	r1, [pc, #44]	; (801e5a4 <srand+0x50>)
 801e578:	4b0b      	ldr	r3, [pc, #44]	; (801e5a8 <srand+0x54>)
 801e57a:	e9c0 1300 	strd	r1, r3, [r0]
 801e57e:	4b0b      	ldr	r3, [pc, #44]	; (801e5ac <srand+0x58>)
 801e580:	6083      	str	r3, [r0, #8]
 801e582:	230b      	movs	r3, #11
 801e584:	8183      	strh	r3, [r0, #12]
 801e586:	2100      	movs	r1, #0
 801e588:	2001      	movs	r0, #1
 801e58a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e58e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801e590:	2200      	movs	r2, #0
 801e592:	611c      	str	r4, [r3, #16]
 801e594:	615a      	str	r2, [r3, #20]
 801e596:	bd38      	pop	{r3, r4, r5, pc}
 801e598:	200009a0 	.word	0x200009a0
 801e59c:	080248ac 	.word	0x080248ac
 801e5a0:	080248c3 	.word	0x080248c3
 801e5a4:	abcd330e 	.word	0xabcd330e
 801e5a8:	e66d1234 	.word	0xe66d1234
 801e5ac:	0005deec 	.word	0x0005deec

0801e5b0 <rand>:
 801e5b0:	4b16      	ldr	r3, [pc, #88]	; (801e60c <rand+0x5c>)
 801e5b2:	b510      	push	{r4, lr}
 801e5b4:	681c      	ldr	r4, [r3, #0]
 801e5b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e5b8:	b9b3      	cbnz	r3, 801e5e8 <rand+0x38>
 801e5ba:	2018      	movs	r0, #24
 801e5bc:	f7ff ff0e 	bl	801e3dc <malloc>
 801e5c0:	4602      	mov	r2, r0
 801e5c2:	6320      	str	r0, [r4, #48]	; 0x30
 801e5c4:	b920      	cbnz	r0, 801e5d0 <rand+0x20>
 801e5c6:	4b12      	ldr	r3, [pc, #72]	; (801e610 <rand+0x60>)
 801e5c8:	4812      	ldr	r0, [pc, #72]	; (801e614 <rand+0x64>)
 801e5ca:	2152      	movs	r1, #82	; 0x52
 801e5cc:	f001 fbcc 	bl	801fd68 <__assert_func>
 801e5d0:	4911      	ldr	r1, [pc, #68]	; (801e618 <rand+0x68>)
 801e5d2:	4b12      	ldr	r3, [pc, #72]	; (801e61c <rand+0x6c>)
 801e5d4:	e9c0 1300 	strd	r1, r3, [r0]
 801e5d8:	4b11      	ldr	r3, [pc, #68]	; (801e620 <rand+0x70>)
 801e5da:	6083      	str	r3, [r0, #8]
 801e5dc:	230b      	movs	r3, #11
 801e5de:	8183      	strh	r3, [r0, #12]
 801e5e0:	2100      	movs	r1, #0
 801e5e2:	2001      	movs	r0, #1
 801e5e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e5e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e5ea:	480e      	ldr	r0, [pc, #56]	; (801e624 <rand+0x74>)
 801e5ec:	690b      	ldr	r3, [r1, #16]
 801e5ee:	694c      	ldr	r4, [r1, #20]
 801e5f0:	4a0d      	ldr	r2, [pc, #52]	; (801e628 <rand+0x78>)
 801e5f2:	4358      	muls	r0, r3
 801e5f4:	fb02 0004 	mla	r0, r2, r4, r0
 801e5f8:	fba3 3202 	umull	r3, r2, r3, r2
 801e5fc:	3301      	adds	r3, #1
 801e5fe:	eb40 0002 	adc.w	r0, r0, r2
 801e602:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801e606:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e60a:	bd10      	pop	{r4, pc}
 801e60c:	200009a0 	.word	0x200009a0
 801e610:	080248ac 	.word	0x080248ac
 801e614:	080248c3 	.word	0x080248c3
 801e618:	abcd330e 	.word	0xabcd330e
 801e61c:	e66d1234 	.word	0xe66d1234
 801e620:	0005deec 	.word	0x0005deec
 801e624:	5851f42d 	.word	0x5851f42d
 801e628:	4c957f2d 	.word	0x4c957f2d

0801e62c <realloc>:
 801e62c:	4b02      	ldr	r3, [pc, #8]	; (801e638 <realloc+0xc>)
 801e62e:	460a      	mov	r2, r1
 801e630:	4601      	mov	r1, r0
 801e632:	6818      	ldr	r0, [r3, #0]
 801e634:	f000 b802 	b.w	801e63c <_realloc_r>
 801e638:	200009a0 	.word	0x200009a0

0801e63c <_realloc_r>:
 801e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e640:	4680      	mov	r8, r0
 801e642:	4614      	mov	r4, r2
 801e644:	460e      	mov	r6, r1
 801e646:	b921      	cbnz	r1, 801e652 <_realloc_r+0x16>
 801e648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e64c:	4611      	mov	r1, r2
 801e64e:	f7ff bef5 	b.w	801e43c <_malloc_r>
 801e652:	b92a      	cbnz	r2, 801e660 <_realloc_r+0x24>
 801e654:	f002 f9a8 	bl	80209a8 <_free_r>
 801e658:	4625      	mov	r5, r4
 801e65a:	4628      	mov	r0, r5
 801e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e660:	f002 fe98 	bl	8021394 <_malloc_usable_size_r>
 801e664:	4284      	cmp	r4, r0
 801e666:	4607      	mov	r7, r0
 801e668:	d802      	bhi.n	801e670 <_realloc_r+0x34>
 801e66a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e66e:	d812      	bhi.n	801e696 <_realloc_r+0x5a>
 801e670:	4621      	mov	r1, r4
 801e672:	4640      	mov	r0, r8
 801e674:	f7ff fee2 	bl	801e43c <_malloc_r>
 801e678:	4605      	mov	r5, r0
 801e67a:	2800      	cmp	r0, #0
 801e67c:	d0ed      	beq.n	801e65a <_realloc_r+0x1e>
 801e67e:	42bc      	cmp	r4, r7
 801e680:	4622      	mov	r2, r4
 801e682:	4631      	mov	r1, r6
 801e684:	bf28      	it	cs
 801e686:	463a      	movcs	r2, r7
 801e688:	f001 fb59 	bl	801fd3e <memcpy>
 801e68c:	4631      	mov	r1, r6
 801e68e:	4640      	mov	r0, r8
 801e690:	f002 f98a 	bl	80209a8 <_free_r>
 801e694:	e7e1      	b.n	801e65a <_realloc_r+0x1e>
 801e696:	4635      	mov	r5, r6
 801e698:	e7df      	b.n	801e65a <_realloc_r+0x1e>
	...

0801e69c <_strtoul_l.constprop.0>:
 801e69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e6a0:	4f36      	ldr	r7, [pc, #216]	; (801e77c <_strtoul_l.constprop.0+0xe0>)
 801e6a2:	4686      	mov	lr, r0
 801e6a4:	460d      	mov	r5, r1
 801e6a6:	4628      	mov	r0, r5
 801e6a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e6ac:	5d3e      	ldrb	r6, [r7, r4]
 801e6ae:	f016 0608 	ands.w	r6, r6, #8
 801e6b2:	d1f8      	bne.n	801e6a6 <_strtoul_l.constprop.0+0xa>
 801e6b4:	2c2d      	cmp	r4, #45	; 0x2d
 801e6b6:	d130      	bne.n	801e71a <_strtoul_l.constprop.0+0x7e>
 801e6b8:	782c      	ldrb	r4, [r5, #0]
 801e6ba:	2601      	movs	r6, #1
 801e6bc:	1c85      	adds	r5, r0, #2
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d057      	beq.n	801e772 <_strtoul_l.constprop.0+0xd6>
 801e6c2:	2b10      	cmp	r3, #16
 801e6c4:	d109      	bne.n	801e6da <_strtoul_l.constprop.0+0x3e>
 801e6c6:	2c30      	cmp	r4, #48	; 0x30
 801e6c8:	d107      	bne.n	801e6da <_strtoul_l.constprop.0+0x3e>
 801e6ca:	7828      	ldrb	r0, [r5, #0]
 801e6cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e6d0:	2858      	cmp	r0, #88	; 0x58
 801e6d2:	d149      	bne.n	801e768 <_strtoul_l.constprop.0+0xcc>
 801e6d4:	786c      	ldrb	r4, [r5, #1]
 801e6d6:	2310      	movs	r3, #16
 801e6d8:	3502      	adds	r5, #2
 801e6da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801e6de:	2700      	movs	r7, #0
 801e6e0:	fbb8 f8f3 	udiv	r8, r8, r3
 801e6e4:	fb03 f908 	mul.w	r9, r3, r8
 801e6e8:	ea6f 0909 	mvn.w	r9, r9
 801e6ec:	4638      	mov	r0, r7
 801e6ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e6f2:	f1bc 0f09 	cmp.w	ip, #9
 801e6f6:	d815      	bhi.n	801e724 <_strtoul_l.constprop.0+0x88>
 801e6f8:	4664      	mov	r4, ip
 801e6fa:	42a3      	cmp	r3, r4
 801e6fc:	dd23      	ble.n	801e746 <_strtoul_l.constprop.0+0xaa>
 801e6fe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801e702:	d007      	beq.n	801e714 <_strtoul_l.constprop.0+0x78>
 801e704:	4580      	cmp	r8, r0
 801e706:	d31b      	bcc.n	801e740 <_strtoul_l.constprop.0+0xa4>
 801e708:	d101      	bne.n	801e70e <_strtoul_l.constprop.0+0x72>
 801e70a:	45a1      	cmp	r9, r4
 801e70c:	db18      	blt.n	801e740 <_strtoul_l.constprop.0+0xa4>
 801e70e:	fb00 4003 	mla	r0, r0, r3, r4
 801e712:	2701      	movs	r7, #1
 801e714:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e718:	e7e9      	b.n	801e6ee <_strtoul_l.constprop.0+0x52>
 801e71a:	2c2b      	cmp	r4, #43	; 0x2b
 801e71c:	bf04      	itt	eq
 801e71e:	782c      	ldrbeq	r4, [r5, #0]
 801e720:	1c85      	addeq	r5, r0, #2
 801e722:	e7cc      	b.n	801e6be <_strtoul_l.constprop.0+0x22>
 801e724:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e728:	f1bc 0f19 	cmp.w	ip, #25
 801e72c:	d801      	bhi.n	801e732 <_strtoul_l.constprop.0+0x96>
 801e72e:	3c37      	subs	r4, #55	; 0x37
 801e730:	e7e3      	b.n	801e6fa <_strtoul_l.constprop.0+0x5e>
 801e732:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e736:	f1bc 0f19 	cmp.w	ip, #25
 801e73a:	d804      	bhi.n	801e746 <_strtoul_l.constprop.0+0xaa>
 801e73c:	3c57      	subs	r4, #87	; 0x57
 801e73e:	e7dc      	b.n	801e6fa <_strtoul_l.constprop.0+0x5e>
 801e740:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e744:	e7e6      	b.n	801e714 <_strtoul_l.constprop.0+0x78>
 801e746:	1c7b      	adds	r3, r7, #1
 801e748:	d106      	bne.n	801e758 <_strtoul_l.constprop.0+0xbc>
 801e74a:	2322      	movs	r3, #34	; 0x22
 801e74c:	f8ce 3000 	str.w	r3, [lr]
 801e750:	4638      	mov	r0, r7
 801e752:	b932      	cbnz	r2, 801e762 <_strtoul_l.constprop.0+0xc6>
 801e754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e758:	b106      	cbz	r6, 801e75c <_strtoul_l.constprop.0+0xc0>
 801e75a:	4240      	negs	r0, r0
 801e75c:	2a00      	cmp	r2, #0
 801e75e:	d0f9      	beq.n	801e754 <_strtoul_l.constprop.0+0xb8>
 801e760:	b107      	cbz	r7, 801e764 <_strtoul_l.constprop.0+0xc8>
 801e762:	1e69      	subs	r1, r5, #1
 801e764:	6011      	str	r1, [r2, #0]
 801e766:	e7f5      	b.n	801e754 <_strtoul_l.constprop.0+0xb8>
 801e768:	2430      	movs	r4, #48	; 0x30
 801e76a:	2b00      	cmp	r3, #0
 801e76c:	d1b5      	bne.n	801e6da <_strtoul_l.constprop.0+0x3e>
 801e76e:	2308      	movs	r3, #8
 801e770:	e7b3      	b.n	801e6da <_strtoul_l.constprop.0+0x3e>
 801e772:	2c30      	cmp	r4, #48	; 0x30
 801e774:	d0a9      	beq.n	801e6ca <_strtoul_l.constprop.0+0x2e>
 801e776:	230a      	movs	r3, #10
 801e778:	e7af      	b.n	801e6da <_strtoul_l.constprop.0+0x3e>
 801e77a:	bf00      	nop
 801e77c:	0802491c 	.word	0x0802491c

0801e780 <strtoul>:
 801e780:	4613      	mov	r3, r2
 801e782:	460a      	mov	r2, r1
 801e784:	4601      	mov	r1, r0
 801e786:	4802      	ldr	r0, [pc, #8]	; (801e790 <strtoul+0x10>)
 801e788:	6800      	ldr	r0, [r0, #0]
 801e78a:	f7ff bf87 	b.w	801e69c <_strtoul_l.constprop.0>
 801e78e:	bf00      	nop
 801e790:	200009a0 	.word	0x200009a0

0801e794 <__cvt>:
 801e794:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e796:	ed2d 8b02 	vpush	{d8}
 801e79a:	eeb0 8b40 	vmov.f64	d8, d0
 801e79e:	b085      	sub	sp, #20
 801e7a0:	4617      	mov	r7, r2
 801e7a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e7a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e7a6:	ee18 2a90 	vmov	r2, s17
 801e7aa:	f025 0520 	bic.w	r5, r5, #32
 801e7ae:	2a00      	cmp	r2, #0
 801e7b0:	bfb6      	itet	lt
 801e7b2:	222d      	movlt	r2, #45	; 0x2d
 801e7b4:	2200      	movge	r2, #0
 801e7b6:	eeb1 8b40 	vneglt.f64	d8, d0
 801e7ba:	2d46      	cmp	r5, #70	; 0x46
 801e7bc:	460c      	mov	r4, r1
 801e7be:	701a      	strb	r2, [r3, #0]
 801e7c0:	d004      	beq.n	801e7cc <__cvt+0x38>
 801e7c2:	2d45      	cmp	r5, #69	; 0x45
 801e7c4:	d100      	bne.n	801e7c8 <__cvt+0x34>
 801e7c6:	3401      	adds	r4, #1
 801e7c8:	2102      	movs	r1, #2
 801e7ca:	e000      	b.n	801e7ce <__cvt+0x3a>
 801e7cc:	2103      	movs	r1, #3
 801e7ce:	ab03      	add	r3, sp, #12
 801e7d0:	9301      	str	r3, [sp, #4]
 801e7d2:	ab02      	add	r3, sp, #8
 801e7d4:	9300      	str	r3, [sp, #0]
 801e7d6:	4622      	mov	r2, r4
 801e7d8:	4633      	mov	r3, r6
 801e7da:	eeb0 0b48 	vmov.f64	d0, d8
 801e7de:	f001 fb6b 	bl	801feb8 <_dtoa_r>
 801e7e2:	2d47      	cmp	r5, #71	; 0x47
 801e7e4:	d101      	bne.n	801e7ea <__cvt+0x56>
 801e7e6:	07fb      	lsls	r3, r7, #31
 801e7e8:	d51a      	bpl.n	801e820 <__cvt+0x8c>
 801e7ea:	2d46      	cmp	r5, #70	; 0x46
 801e7ec:	eb00 0204 	add.w	r2, r0, r4
 801e7f0:	d10c      	bne.n	801e80c <__cvt+0x78>
 801e7f2:	7803      	ldrb	r3, [r0, #0]
 801e7f4:	2b30      	cmp	r3, #48	; 0x30
 801e7f6:	d107      	bne.n	801e808 <__cvt+0x74>
 801e7f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e800:	bf1c      	itt	ne
 801e802:	f1c4 0401 	rsbne	r4, r4, #1
 801e806:	6034      	strne	r4, [r6, #0]
 801e808:	6833      	ldr	r3, [r6, #0]
 801e80a:	441a      	add	r2, r3
 801e80c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e814:	bf08      	it	eq
 801e816:	9203      	streq	r2, [sp, #12]
 801e818:	2130      	movs	r1, #48	; 0x30
 801e81a:	9b03      	ldr	r3, [sp, #12]
 801e81c:	4293      	cmp	r3, r2
 801e81e:	d307      	bcc.n	801e830 <__cvt+0x9c>
 801e820:	9b03      	ldr	r3, [sp, #12]
 801e822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e824:	1a1b      	subs	r3, r3, r0
 801e826:	6013      	str	r3, [r2, #0]
 801e828:	b005      	add	sp, #20
 801e82a:	ecbd 8b02 	vpop	{d8}
 801e82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e830:	1c5c      	adds	r4, r3, #1
 801e832:	9403      	str	r4, [sp, #12]
 801e834:	7019      	strb	r1, [r3, #0]
 801e836:	e7f0      	b.n	801e81a <__cvt+0x86>

0801e838 <__exponent>:
 801e838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e83a:	4603      	mov	r3, r0
 801e83c:	2900      	cmp	r1, #0
 801e83e:	bfb8      	it	lt
 801e840:	4249      	neglt	r1, r1
 801e842:	f803 2b02 	strb.w	r2, [r3], #2
 801e846:	bfb4      	ite	lt
 801e848:	222d      	movlt	r2, #45	; 0x2d
 801e84a:	222b      	movge	r2, #43	; 0x2b
 801e84c:	2909      	cmp	r1, #9
 801e84e:	7042      	strb	r2, [r0, #1]
 801e850:	dd2a      	ble.n	801e8a8 <__exponent+0x70>
 801e852:	f10d 0207 	add.w	r2, sp, #7
 801e856:	4617      	mov	r7, r2
 801e858:	260a      	movs	r6, #10
 801e85a:	4694      	mov	ip, r2
 801e85c:	fb91 f5f6 	sdiv	r5, r1, r6
 801e860:	fb06 1415 	mls	r4, r6, r5, r1
 801e864:	3430      	adds	r4, #48	; 0x30
 801e866:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801e86a:	460c      	mov	r4, r1
 801e86c:	2c63      	cmp	r4, #99	; 0x63
 801e86e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801e872:	4629      	mov	r1, r5
 801e874:	dcf1      	bgt.n	801e85a <__exponent+0x22>
 801e876:	3130      	adds	r1, #48	; 0x30
 801e878:	f1ac 0402 	sub.w	r4, ip, #2
 801e87c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801e880:	1c41      	adds	r1, r0, #1
 801e882:	4622      	mov	r2, r4
 801e884:	42ba      	cmp	r2, r7
 801e886:	d30a      	bcc.n	801e89e <__exponent+0x66>
 801e888:	f10d 0209 	add.w	r2, sp, #9
 801e88c:	eba2 020c 	sub.w	r2, r2, ip
 801e890:	42bc      	cmp	r4, r7
 801e892:	bf88      	it	hi
 801e894:	2200      	movhi	r2, #0
 801e896:	4413      	add	r3, r2
 801e898:	1a18      	subs	r0, r3, r0
 801e89a:	b003      	add	sp, #12
 801e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e89e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801e8a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 801e8a6:	e7ed      	b.n	801e884 <__exponent+0x4c>
 801e8a8:	2330      	movs	r3, #48	; 0x30
 801e8aa:	3130      	adds	r1, #48	; 0x30
 801e8ac:	7083      	strb	r3, [r0, #2]
 801e8ae:	70c1      	strb	r1, [r0, #3]
 801e8b0:	1d03      	adds	r3, r0, #4
 801e8b2:	e7f1      	b.n	801e898 <__exponent+0x60>
 801e8b4:	0000      	movs	r0, r0
	...

0801e8b8 <_printf_float>:
 801e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8bc:	b08b      	sub	sp, #44	; 0x2c
 801e8be:	460c      	mov	r4, r1
 801e8c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801e8c4:	4616      	mov	r6, r2
 801e8c6:	461f      	mov	r7, r3
 801e8c8:	4605      	mov	r5, r0
 801e8ca:	f001 f9a9 	bl	801fc20 <_localeconv_r>
 801e8ce:	f8d0 b000 	ldr.w	fp, [r0]
 801e8d2:	4658      	mov	r0, fp
 801e8d4:	f7e1 fd14 	bl	8000300 <strlen>
 801e8d8:	2300      	movs	r3, #0
 801e8da:	9308      	str	r3, [sp, #32]
 801e8dc:	f8d8 3000 	ldr.w	r3, [r8]
 801e8e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801e8e4:	6822      	ldr	r2, [r4, #0]
 801e8e6:	3307      	adds	r3, #7
 801e8e8:	f023 0307 	bic.w	r3, r3, #7
 801e8ec:	f103 0108 	add.w	r1, r3, #8
 801e8f0:	f8c8 1000 	str.w	r1, [r8]
 801e8f4:	ed93 0b00 	vldr	d0, [r3]
 801e8f8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801eb58 <_printf_float+0x2a0>
 801e8fc:	eeb0 7bc0 	vabs.f64	d7, d0
 801e900:	eeb4 7b46 	vcmp.f64	d7, d6
 801e904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e908:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801e90c:	4682      	mov	sl, r0
 801e90e:	dd24      	ble.n	801e95a <_printf_float+0xa2>
 801e910:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e918:	d502      	bpl.n	801e920 <_printf_float+0x68>
 801e91a:	232d      	movs	r3, #45	; 0x2d
 801e91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e920:	498f      	ldr	r1, [pc, #572]	; (801eb60 <_printf_float+0x2a8>)
 801e922:	4b90      	ldr	r3, [pc, #576]	; (801eb64 <_printf_float+0x2ac>)
 801e924:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801e928:	bf94      	ite	ls
 801e92a:	4688      	movls	r8, r1
 801e92c:	4698      	movhi	r8, r3
 801e92e:	2303      	movs	r3, #3
 801e930:	6123      	str	r3, [r4, #16]
 801e932:	f022 0204 	bic.w	r2, r2, #4
 801e936:	2300      	movs	r3, #0
 801e938:	6022      	str	r2, [r4, #0]
 801e93a:	9304      	str	r3, [sp, #16]
 801e93c:	9700      	str	r7, [sp, #0]
 801e93e:	4633      	mov	r3, r6
 801e940:	aa09      	add	r2, sp, #36	; 0x24
 801e942:	4621      	mov	r1, r4
 801e944:	4628      	mov	r0, r5
 801e946:	f000 f9d1 	bl	801ecec <_printf_common>
 801e94a:	3001      	adds	r0, #1
 801e94c:	f040 808a 	bne.w	801ea64 <_printf_float+0x1ac>
 801e950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e954:	b00b      	add	sp, #44	; 0x2c
 801e956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e95a:	eeb4 0b40 	vcmp.f64	d0, d0
 801e95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e962:	d709      	bvc.n	801e978 <_printf_float+0xc0>
 801e964:	ee10 3a90 	vmov	r3, s1
 801e968:	2b00      	cmp	r3, #0
 801e96a:	bfbc      	itt	lt
 801e96c:	232d      	movlt	r3, #45	; 0x2d
 801e96e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e972:	497d      	ldr	r1, [pc, #500]	; (801eb68 <_printf_float+0x2b0>)
 801e974:	4b7d      	ldr	r3, [pc, #500]	; (801eb6c <_printf_float+0x2b4>)
 801e976:	e7d5      	b.n	801e924 <_printf_float+0x6c>
 801e978:	6863      	ldr	r3, [r4, #4]
 801e97a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801e97e:	9104      	str	r1, [sp, #16]
 801e980:	1c59      	adds	r1, r3, #1
 801e982:	d13c      	bne.n	801e9fe <_printf_float+0x146>
 801e984:	2306      	movs	r3, #6
 801e986:	6063      	str	r3, [r4, #4]
 801e988:	2300      	movs	r3, #0
 801e98a:	9303      	str	r3, [sp, #12]
 801e98c:	ab08      	add	r3, sp, #32
 801e98e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801e992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e996:	ab07      	add	r3, sp, #28
 801e998:	6861      	ldr	r1, [r4, #4]
 801e99a:	9300      	str	r3, [sp, #0]
 801e99c:	6022      	str	r2, [r4, #0]
 801e99e:	f10d 031b 	add.w	r3, sp, #27
 801e9a2:	4628      	mov	r0, r5
 801e9a4:	f7ff fef6 	bl	801e794 <__cvt>
 801e9a8:	9b04      	ldr	r3, [sp, #16]
 801e9aa:	9907      	ldr	r1, [sp, #28]
 801e9ac:	2b47      	cmp	r3, #71	; 0x47
 801e9ae:	4680      	mov	r8, r0
 801e9b0:	d108      	bne.n	801e9c4 <_printf_float+0x10c>
 801e9b2:	1cc8      	adds	r0, r1, #3
 801e9b4:	db02      	blt.n	801e9bc <_printf_float+0x104>
 801e9b6:	6863      	ldr	r3, [r4, #4]
 801e9b8:	4299      	cmp	r1, r3
 801e9ba:	dd41      	ble.n	801ea40 <_printf_float+0x188>
 801e9bc:	f1a9 0902 	sub.w	r9, r9, #2
 801e9c0:	fa5f f989 	uxtb.w	r9, r9
 801e9c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e9c8:	d820      	bhi.n	801ea0c <_printf_float+0x154>
 801e9ca:	3901      	subs	r1, #1
 801e9cc:	464a      	mov	r2, r9
 801e9ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e9d2:	9107      	str	r1, [sp, #28]
 801e9d4:	f7ff ff30 	bl	801e838 <__exponent>
 801e9d8:	9a08      	ldr	r2, [sp, #32]
 801e9da:	9004      	str	r0, [sp, #16]
 801e9dc:	1813      	adds	r3, r2, r0
 801e9de:	2a01      	cmp	r2, #1
 801e9e0:	6123      	str	r3, [r4, #16]
 801e9e2:	dc02      	bgt.n	801e9ea <_printf_float+0x132>
 801e9e4:	6822      	ldr	r2, [r4, #0]
 801e9e6:	07d2      	lsls	r2, r2, #31
 801e9e8:	d501      	bpl.n	801e9ee <_printf_float+0x136>
 801e9ea:	3301      	adds	r3, #1
 801e9ec:	6123      	str	r3, [r4, #16]
 801e9ee:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d0a2      	beq.n	801e93c <_printf_float+0x84>
 801e9f6:	232d      	movs	r3, #45	; 0x2d
 801e9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e9fc:	e79e      	b.n	801e93c <_printf_float+0x84>
 801e9fe:	9904      	ldr	r1, [sp, #16]
 801ea00:	2947      	cmp	r1, #71	; 0x47
 801ea02:	d1c1      	bne.n	801e988 <_printf_float+0xd0>
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d1bf      	bne.n	801e988 <_printf_float+0xd0>
 801ea08:	2301      	movs	r3, #1
 801ea0a:	e7bc      	b.n	801e986 <_printf_float+0xce>
 801ea0c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ea10:	d118      	bne.n	801ea44 <_printf_float+0x18c>
 801ea12:	2900      	cmp	r1, #0
 801ea14:	6863      	ldr	r3, [r4, #4]
 801ea16:	dd0b      	ble.n	801ea30 <_printf_float+0x178>
 801ea18:	6121      	str	r1, [r4, #16]
 801ea1a:	b913      	cbnz	r3, 801ea22 <_printf_float+0x16a>
 801ea1c:	6822      	ldr	r2, [r4, #0]
 801ea1e:	07d0      	lsls	r0, r2, #31
 801ea20:	d502      	bpl.n	801ea28 <_printf_float+0x170>
 801ea22:	3301      	adds	r3, #1
 801ea24:	440b      	add	r3, r1
 801ea26:	6123      	str	r3, [r4, #16]
 801ea28:	2300      	movs	r3, #0
 801ea2a:	65a1      	str	r1, [r4, #88]	; 0x58
 801ea2c:	9304      	str	r3, [sp, #16]
 801ea2e:	e7de      	b.n	801e9ee <_printf_float+0x136>
 801ea30:	b913      	cbnz	r3, 801ea38 <_printf_float+0x180>
 801ea32:	6822      	ldr	r2, [r4, #0]
 801ea34:	07d2      	lsls	r2, r2, #31
 801ea36:	d501      	bpl.n	801ea3c <_printf_float+0x184>
 801ea38:	3302      	adds	r3, #2
 801ea3a:	e7f4      	b.n	801ea26 <_printf_float+0x16e>
 801ea3c:	2301      	movs	r3, #1
 801ea3e:	e7f2      	b.n	801ea26 <_printf_float+0x16e>
 801ea40:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ea44:	9b08      	ldr	r3, [sp, #32]
 801ea46:	4299      	cmp	r1, r3
 801ea48:	db05      	blt.n	801ea56 <_printf_float+0x19e>
 801ea4a:	6823      	ldr	r3, [r4, #0]
 801ea4c:	6121      	str	r1, [r4, #16]
 801ea4e:	07d8      	lsls	r0, r3, #31
 801ea50:	d5ea      	bpl.n	801ea28 <_printf_float+0x170>
 801ea52:	1c4b      	adds	r3, r1, #1
 801ea54:	e7e7      	b.n	801ea26 <_printf_float+0x16e>
 801ea56:	2900      	cmp	r1, #0
 801ea58:	bfd4      	ite	le
 801ea5a:	f1c1 0202 	rsble	r2, r1, #2
 801ea5e:	2201      	movgt	r2, #1
 801ea60:	4413      	add	r3, r2
 801ea62:	e7e0      	b.n	801ea26 <_printf_float+0x16e>
 801ea64:	6823      	ldr	r3, [r4, #0]
 801ea66:	055a      	lsls	r2, r3, #21
 801ea68:	d407      	bmi.n	801ea7a <_printf_float+0x1c2>
 801ea6a:	6923      	ldr	r3, [r4, #16]
 801ea6c:	4642      	mov	r2, r8
 801ea6e:	4631      	mov	r1, r6
 801ea70:	4628      	mov	r0, r5
 801ea72:	47b8      	blx	r7
 801ea74:	3001      	adds	r0, #1
 801ea76:	d12a      	bne.n	801eace <_printf_float+0x216>
 801ea78:	e76a      	b.n	801e950 <_printf_float+0x98>
 801ea7a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ea7e:	f240 80e0 	bls.w	801ec42 <_printf_float+0x38a>
 801ea82:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ea86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ea8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea8e:	d133      	bne.n	801eaf8 <_printf_float+0x240>
 801ea90:	4a37      	ldr	r2, [pc, #220]	; (801eb70 <_printf_float+0x2b8>)
 801ea92:	2301      	movs	r3, #1
 801ea94:	4631      	mov	r1, r6
 801ea96:	4628      	mov	r0, r5
 801ea98:	47b8      	blx	r7
 801ea9a:	3001      	adds	r0, #1
 801ea9c:	f43f af58 	beq.w	801e950 <_printf_float+0x98>
 801eaa0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801eaa4:	429a      	cmp	r2, r3
 801eaa6:	db02      	blt.n	801eaae <_printf_float+0x1f6>
 801eaa8:	6823      	ldr	r3, [r4, #0]
 801eaaa:	07d8      	lsls	r0, r3, #31
 801eaac:	d50f      	bpl.n	801eace <_printf_float+0x216>
 801eaae:	4653      	mov	r3, sl
 801eab0:	465a      	mov	r2, fp
 801eab2:	4631      	mov	r1, r6
 801eab4:	4628      	mov	r0, r5
 801eab6:	47b8      	blx	r7
 801eab8:	3001      	adds	r0, #1
 801eaba:	f43f af49 	beq.w	801e950 <_printf_float+0x98>
 801eabe:	f04f 0800 	mov.w	r8, #0
 801eac2:	f104 091a 	add.w	r9, r4, #26
 801eac6:	9b08      	ldr	r3, [sp, #32]
 801eac8:	3b01      	subs	r3, #1
 801eaca:	4543      	cmp	r3, r8
 801eacc:	dc09      	bgt.n	801eae2 <_printf_float+0x22a>
 801eace:	6823      	ldr	r3, [r4, #0]
 801ead0:	079b      	lsls	r3, r3, #30
 801ead2:	f100 8106 	bmi.w	801ece2 <_printf_float+0x42a>
 801ead6:	68e0      	ldr	r0, [r4, #12]
 801ead8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eada:	4298      	cmp	r0, r3
 801eadc:	bfb8      	it	lt
 801eade:	4618      	movlt	r0, r3
 801eae0:	e738      	b.n	801e954 <_printf_float+0x9c>
 801eae2:	2301      	movs	r3, #1
 801eae4:	464a      	mov	r2, r9
 801eae6:	4631      	mov	r1, r6
 801eae8:	4628      	mov	r0, r5
 801eaea:	47b8      	blx	r7
 801eaec:	3001      	adds	r0, #1
 801eaee:	f43f af2f 	beq.w	801e950 <_printf_float+0x98>
 801eaf2:	f108 0801 	add.w	r8, r8, #1
 801eaf6:	e7e6      	b.n	801eac6 <_printf_float+0x20e>
 801eaf8:	9b07      	ldr	r3, [sp, #28]
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	dc3a      	bgt.n	801eb74 <_printf_float+0x2bc>
 801eafe:	4a1c      	ldr	r2, [pc, #112]	; (801eb70 <_printf_float+0x2b8>)
 801eb00:	2301      	movs	r3, #1
 801eb02:	4631      	mov	r1, r6
 801eb04:	4628      	mov	r0, r5
 801eb06:	47b8      	blx	r7
 801eb08:	3001      	adds	r0, #1
 801eb0a:	f43f af21 	beq.w	801e950 <_printf_float+0x98>
 801eb0e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801eb12:	4313      	orrs	r3, r2
 801eb14:	d102      	bne.n	801eb1c <_printf_float+0x264>
 801eb16:	6823      	ldr	r3, [r4, #0]
 801eb18:	07d9      	lsls	r1, r3, #31
 801eb1a:	d5d8      	bpl.n	801eace <_printf_float+0x216>
 801eb1c:	4653      	mov	r3, sl
 801eb1e:	465a      	mov	r2, fp
 801eb20:	4631      	mov	r1, r6
 801eb22:	4628      	mov	r0, r5
 801eb24:	47b8      	blx	r7
 801eb26:	3001      	adds	r0, #1
 801eb28:	f43f af12 	beq.w	801e950 <_printf_float+0x98>
 801eb2c:	f04f 0900 	mov.w	r9, #0
 801eb30:	f104 0a1a 	add.w	sl, r4, #26
 801eb34:	9b07      	ldr	r3, [sp, #28]
 801eb36:	425b      	negs	r3, r3
 801eb38:	454b      	cmp	r3, r9
 801eb3a:	dc01      	bgt.n	801eb40 <_printf_float+0x288>
 801eb3c:	9b08      	ldr	r3, [sp, #32]
 801eb3e:	e795      	b.n	801ea6c <_printf_float+0x1b4>
 801eb40:	2301      	movs	r3, #1
 801eb42:	4652      	mov	r2, sl
 801eb44:	4631      	mov	r1, r6
 801eb46:	4628      	mov	r0, r5
 801eb48:	47b8      	blx	r7
 801eb4a:	3001      	adds	r0, #1
 801eb4c:	f43f af00 	beq.w	801e950 <_printf_float+0x98>
 801eb50:	f109 0901 	add.w	r9, r9, #1
 801eb54:	e7ee      	b.n	801eb34 <_printf_float+0x27c>
 801eb56:	bf00      	nop
 801eb58:	ffffffff 	.word	0xffffffff
 801eb5c:	7fefffff 	.word	0x7fefffff
 801eb60:	08024a1c 	.word	0x08024a1c
 801eb64:	08024a20 	.word	0x08024a20
 801eb68:	08024a24 	.word	0x08024a24
 801eb6c:	08024a28 	.word	0x08024a28
 801eb70:	08024a2c 	.word	0x08024a2c
 801eb74:	9a08      	ldr	r2, [sp, #32]
 801eb76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801eb78:	429a      	cmp	r2, r3
 801eb7a:	bfa8      	it	ge
 801eb7c:	461a      	movge	r2, r3
 801eb7e:	2a00      	cmp	r2, #0
 801eb80:	4691      	mov	r9, r2
 801eb82:	dc38      	bgt.n	801ebf6 <_printf_float+0x33e>
 801eb84:	2300      	movs	r3, #0
 801eb86:	9305      	str	r3, [sp, #20]
 801eb88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801eb8c:	f104 021a 	add.w	r2, r4, #26
 801eb90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801eb92:	9905      	ldr	r1, [sp, #20]
 801eb94:	9304      	str	r3, [sp, #16]
 801eb96:	eba3 0309 	sub.w	r3, r3, r9
 801eb9a:	428b      	cmp	r3, r1
 801eb9c:	dc33      	bgt.n	801ec06 <_printf_float+0x34e>
 801eb9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801eba2:	429a      	cmp	r2, r3
 801eba4:	db3c      	blt.n	801ec20 <_printf_float+0x368>
 801eba6:	6823      	ldr	r3, [r4, #0]
 801eba8:	07da      	lsls	r2, r3, #31
 801ebaa:	d439      	bmi.n	801ec20 <_printf_float+0x368>
 801ebac:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ebb0:	eba2 0903 	sub.w	r9, r2, r3
 801ebb4:	9b04      	ldr	r3, [sp, #16]
 801ebb6:	1ad2      	subs	r2, r2, r3
 801ebb8:	4591      	cmp	r9, r2
 801ebba:	bfa8      	it	ge
 801ebbc:	4691      	movge	r9, r2
 801ebbe:	f1b9 0f00 	cmp.w	r9, #0
 801ebc2:	dc35      	bgt.n	801ec30 <_printf_float+0x378>
 801ebc4:	f04f 0800 	mov.w	r8, #0
 801ebc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ebcc:	f104 0a1a 	add.w	sl, r4, #26
 801ebd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ebd4:	1a9b      	subs	r3, r3, r2
 801ebd6:	eba3 0309 	sub.w	r3, r3, r9
 801ebda:	4543      	cmp	r3, r8
 801ebdc:	f77f af77 	ble.w	801eace <_printf_float+0x216>
 801ebe0:	2301      	movs	r3, #1
 801ebe2:	4652      	mov	r2, sl
 801ebe4:	4631      	mov	r1, r6
 801ebe6:	4628      	mov	r0, r5
 801ebe8:	47b8      	blx	r7
 801ebea:	3001      	adds	r0, #1
 801ebec:	f43f aeb0 	beq.w	801e950 <_printf_float+0x98>
 801ebf0:	f108 0801 	add.w	r8, r8, #1
 801ebf4:	e7ec      	b.n	801ebd0 <_printf_float+0x318>
 801ebf6:	4613      	mov	r3, r2
 801ebf8:	4631      	mov	r1, r6
 801ebfa:	4642      	mov	r2, r8
 801ebfc:	4628      	mov	r0, r5
 801ebfe:	47b8      	blx	r7
 801ec00:	3001      	adds	r0, #1
 801ec02:	d1bf      	bne.n	801eb84 <_printf_float+0x2cc>
 801ec04:	e6a4      	b.n	801e950 <_printf_float+0x98>
 801ec06:	2301      	movs	r3, #1
 801ec08:	4631      	mov	r1, r6
 801ec0a:	4628      	mov	r0, r5
 801ec0c:	9204      	str	r2, [sp, #16]
 801ec0e:	47b8      	blx	r7
 801ec10:	3001      	adds	r0, #1
 801ec12:	f43f ae9d 	beq.w	801e950 <_printf_float+0x98>
 801ec16:	9b05      	ldr	r3, [sp, #20]
 801ec18:	9a04      	ldr	r2, [sp, #16]
 801ec1a:	3301      	adds	r3, #1
 801ec1c:	9305      	str	r3, [sp, #20]
 801ec1e:	e7b7      	b.n	801eb90 <_printf_float+0x2d8>
 801ec20:	4653      	mov	r3, sl
 801ec22:	465a      	mov	r2, fp
 801ec24:	4631      	mov	r1, r6
 801ec26:	4628      	mov	r0, r5
 801ec28:	47b8      	blx	r7
 801ec2a:	3001      	adds	r0, #1
 801ec2c:	d1be      	bne.n	801ebac <_printf_float+0x2f4>
 801ec2e:	e68f      	b.n	801e950 <_printf_float+0x98>
 801ec30:	9a04      	ldr	r2, [sp, #16]
 801ec32:	464b      	mov	r3, r9
 801ec34:	4442      	add	r2, r8
 801ec36:	4631      	mov	r1, r6
 801ec38:	4628      	mov	r0, r5
 801ec3a:	47b8      	blx	r7
 801ec3c:	3001      	adds	r0, #1
 801ec3e:	d1c1      	bne.n	801ebc4 <_printf_float+0x30c>
 801ec40:	e686      	b.n	801e950 <_printf_float+0x98>
 801ec42:	9a08      	ldr	r2, [sp, #32]
 801ec44:	2a01      	cmp	r2, #1
 801ec46:	dc01      	bgt.n	801ec4c <_printf_float+0x394>
 801ec48:	07db      	lsls	r3, r3, #31
 801ec4a:	d537      	bpl.n	801ecbc <_printf_float+0x404>
 801ec4c:	2301      	movs	r3, #1
 801ec4e:	4642      	mov	r2, r8
 801ec50:	4631      	mov	r1, r6
 801ec52:	4628      	mov	r0, r5
 801ec54:	47b8      	blx	r7
 801ec56:	3001      	adds	r0, #1
 801ec58:	f43f ae7a 	beq.w	801e950 <_printf_float+0x98>
 801ec5c:	4653      	mov	r3, sl
 801ec5e:	465a      	mov	r2, fp
 801ec60:	4631      	mov	r1, r6
 801ec62:	4628      	mov	r0, r5
 801ec64:	47b8      	blx	r7
 801ec66:	3001      	adds	r0, #1
 801ec68:	f43f ae72 	beq.w	801e950 <_printf_float+0x98>
 801ec6c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ec70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ec74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec78:	9b08      	ldr	r3, [sp, #32]
 801ec7a:	d01a      	beq.n	801ecb2 <_printf_float+0x3fa>
 801ec7c:	3b01      	subs	r3, #1
 801ec7e:	f108 0201 	add.w	r2, r8, #1
 801ec82:	4631      	mov	r1, r6
 801ec84:	4628      	mov	r0, r5
 801ec86:	47b8      	blx	r7
 801ec88:	3001      	adds	r0, #1
 801ec8a:	d10e      	bne.n	801ecaa <_printf_float+0x3f2>
 801ec8c:	e660      	b.n	801e950 <_printf_float+0x98>
 801ec8e:	2301      	movs	r3, #1
 801ec90:	464a      	mov	r2, r9
 801ec92:	4631      	mov	r1, r6
 801ec94:	4628      	mov	r0, r5
 801ec96:	47b8      	blx	r7
 801ec98:	3001      	adds	r0, #1
 801ec9a:	f43f ae59 	beq.w	801e950 <_printf_float+0x98>
 801ec9e:	f108 0801 	add.w	r8, r8, #1
 801eca2:	9b08      	ldr	r3, [sp, #32]
 801eca4:	3b01      	subs	r3, #1
 801eca6:	4543      	cmp	r3, r8
 801eca8:	dcf1      	bgt.n	801ec8e <_printf_float+0x3d6>
 801ecaa:	9b04      	ldr	r3, [sp, #16]
 801ecac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ecb0:	e6dd      	b.n	801ea6e <_printf_float+0x1b6>
 801ecb2:	f04f 0800 	mov.w	r8, #0
 801ecb6:	f104 091a 	add.w	r9, r4, #26
 801ecba:	e7f2      	b.n	801eca2 <_printf_float+0x3ea>
 801ecbc:	2301      	movs	r3, #1
 801ecbe:	4642      	mov	r2, r8
 801ecc0:	e7df      	b.n	801ec82 <_printf_float+0x3ca>
 801ecc2:	2301      	movs	r3, #1
 801ecc4:	464a      	mov	r2, r9
 801ecc6:	4631      	mov	r1, r6
 801ecc8:	4628      	mov	r0, r5
 801ecca:	47b8      	blx	r7
 801eccc:	3001      	adds	r0, #1
 801ecce:	f43f ae3f 	beq.w	801e950 <_printf_float+0x98>
 801ecd2:	f108 0801 	add.w	r8, r8, #1
 801ecd6:	68e3      	ldr	r3, [r4, #12]
 801ecd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ecda:	1a5b      	subs	r3, r3, r1
 801ecdc:	4543      	cmp	r3, r8
 801ecde:	dcf0      	bgt.n	801ecc2 <_printf_float+0x40a>
 801ece0:	e6f9      	b.n	801ead6 <_printf_float+0x21e>
 801ece2:	f04f 0800 	mov.w	r8, #0
 801ece6:	f104 0919 	add.w	r9, r4, #25
 801ecea:	e7f4      	b.n	801ecd6 <_printf_float+0x41e>

0801ecec <_printf_common>:
 801ecec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ecf0:	4616      	mov	r6, r2
 801ecf2:	4699      	mov	r9, r3
 801ecf4:	688a      	ldr	r2, [r1, #8]
 801ecf6:	690b      	ldr	r3, [r1, #16]
 801ecf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ecfc:	4293      	cmp	r3, r2
 801ecfe:	bfb8      	it	lt
 801ed00:	4613      	movlt	r3, r2
 801ed02:	6033      	str	r3, [r6, #0]
 801ed04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ed08:	4607      	mov	r7, r0
 801ed0a:	460c      	mov	r4, r1
 801ed0c:	b10a      	cbz	r2, 801ed12 <_printf_common+0x26>
 801ed0e:	3301      	adds	r3, #1
 801ed10:	6033      	str	r3, [r6, #0]
 801ed12:	6823      	ldr	r3, [r4, #0]
 801ed14:	0699      	lsls	r1, r3, #26
 801ed16:	bf42      	ittt	mi
 801ed18:	6833      	ldrmi	r3, [r6, #0]
 801ed1a:	3302      	addmi	r3, #2
 801ed1c:	6033      	strmi	r3, [r6, #0]
 801ed1e:	6825      	ldr	r5, [r4, #0]
 801ed20:	f015 0506 	ands.w	r5, r5, #6
 801ed24:	d106      	bne.n	801ed34 <_printf_common+0x48>
 801ed26:	f104 0a19 	add.w	sl, r4, #25
 801ed2a:	68e3      	ldr	r3, [r4, #12]
 801ed2c:	6832      	ldr	r2, [r6, #0]
 801ed2e:	1a9b      	subs	r3, r3, r2
 801ed30:	42ab      	cmp	r3, r5
 801ed32:	dc26      	bgt.n	801ed82 <_printf_common+0x96>
 801ed34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ed38:	1e13      	subs	r3, r2, #0
 801ed3a:	6822      	ldr	r2, [r4, #0]
 801ed3c:	bf18      	it	ne
 801ed3e:	2301      	movne	r3, #1
 801ed40:	0692      	lsls	r2, r2, #26
 801ed42:	d42b      	bmi.n	801ed9c <_printf_common+0xb0>
 801ed44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ed48:	4649      	mov	r1, r9
 801ed4a:	4638      	mov	r0, r7
 801ed4c:	47c0      	blx	r8
 801ed4e:	3001      	adds	r0, #1
 801ed50:	d01e      	beq.n	801ed90 <_printf_common+0xa4>
 801ed52:	6823      	ldr	r3, [r4, #0]
 801ed54:	6922      	ldr	r2, [r4, #16]
 801ed56:	f003 0306 	and.w	r3, r3, #6
 801ed5a:	2b04      	cmp	r3, #4
 801ed5c:	bf02      	ittt	eq
 801ed5e:	68e5      	ldreq	r5, [r4, #12]
 801ed60:	6833      	ldreq	r3, [r6, #0]
 801ed62:	1aed      	subeq	r5, r5, r3
 801ed64:	68a3      	ldr	r3, [r4, #8]
 801ed66:	bf0c      	ite	eq
 801ed68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ed6c:	2500      	movne	r5, #0
 801ed6e:	4293      	cmp	r3, r2
 801ed70:	bfc4      	itt	gt
 801ed72:	1a9b      	subgt	r3, r3, r2
 801ed74:	18ed      	addgt	r5, r5, r3
 801ed76:	2600      	movs	r6, #0
 801ed78:	341a      	adds	r4, #26
 801ed7a:	42b5      	cmp	r5, r6
 801ed7c:	d11a      	bne.n	801edb4 <_printf_common+0xc8>
 801ed7e:	2000      	movs	r0, #0
 801ed80:	e008      	b.n	801ed94 <_printf_common+0xa8>
 801ed82:	2301      	movs	r3, #1
 801ed84:	4652      	mov	r2, sl
 801ed86:	4649      	mov	r1, r9
 801ed88:	4638      	mov	r0, r7
 801ed8a:	47c0      	blx	r8
 801ed8c:	3001      	adds	r0, #1
 801ed8e:	d103      	bne.n	801ed98 <_printf_common+0xac>
 801ed90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ed94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed98:	3501      	adds	r5, #1
 801ed9a:	e7c6      	b.n	801ed2a <_printf_common+0x3e>
 801ed9c:	18e1      	adds	r1, r4, r3
 801ed9e:	1c5a      	adds	r2, r3, #1
 801eda0:	2030      	movs	r0, #48	; 0x30
 801eda2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801eda6:	4422      	add	r2, r4
 801eda8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801edac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801edb0:	3302      	adds	r3, #2
 801edb2:	e7c7      	b.n	801ed44 <_printf_common+0x58>
 801edb4:	2301      	movs	r3, #1
 801edb6:	4622      	mov	r2, r4
 801edb8:	4649      	mov	r1, r9
 801edba:	4638      	mov	r0, r7
 801edbc:	47c0      	blx	r8
 801edbe:	3001      	adds	r0, #1
 801edc0:	d0e6      	beq.n	801ed90 <_printf_common+0xa4>
 801edc2:	3601      	adds	r6, #1
 801edc4:	e7d9      	b.n	801ed7a <_printf_common+0x8e>
	...

0801edc8 <_printf_i>:
 801edc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801edcc:	7e0f      	ldrb	r7, [r1, #24]
 801edce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801edd0:	2f78      	cmp	r7, #120	; 0x78
 801edd2:	4691      	mov	r9, r2
 801edd4:	4680      	mov	r8, r0
 801edd6:	460c      	mov	r4, r1
 801edd8:	469a      	mov	sl, r3
 801edda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801edde:	d807      	bhi.n	801edf0 <_printf_i+0x28>
 801ede0:	2f62      	cmp	r7, #98	; 0x62
 801ede2:	d80a      	bhi.n	801edfa <_printf_i+0x32>
 801ede4:	2f00      	cmp	r7, #0
 801ede6:	f000 80d4 	beq.w	801ef92 <_printf_i+0x1ca>
 801edea:	2f58      	cmp	r7, #88	; 0x58
 801edec:	f000 80c0 	beq.w	801ef70 <_printf_i+0x1a8>
 801edf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801edf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801edf8:	e03a      	b.n	801ee70 <_printf_i+0xa8>
 801edfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801edfe:	2b15      	cmp	r3, #21
 801ee00:	d8f6      	bhi.n	801edf0 <_printf_i+0x28>
 801ee02:	a101      	add	r1, pc, #4	; (adr r1, 801ee08 <_printf_i+0x40>)
 801ee04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ee08:	0801ee61 	.word	0x0801ee61
 801ee0c:	0801ee75 	.word	0x0801ee75
 801ee10:	0801edf1 	.word	0x0801edf1
 801ee14:	0801edf1 	.word	0x0801edf1
 801ee18:	0801edf1 	.word	0x0801edf1
 801ee1c:	0801edf1 	.word	0x0801edf1
 801ee20:	0801ee75 	.word	0x0801ee75
 801ee24:	0801edf1 	.word	0x0801edf1
 801ee28:	0801edf1 	.word	0x0801edf1
 801ee2c:	0801edf1 	.word	0x0801edf1
 801ee30:	0801edf1 	.word	0x0801edf1
 801ee34:	0801ef79 	.word	0x0801ef79
 801ee38:	0801eea1 	.word	0x0801eea1
 801ee3c:	0801ef33 	.word	0x0801ef33
 801ee40:	0801edf1 	.word	0x0801edf1
 801ee44:	0801edf1 	.word	0x0801edf1
 801ee48:	0801ef9b 	.word	0x0801ef9b
 801ee4c:	0801edf1 	.word	0x0801edf1
 801ee50:	0801eea1 	.word	0x0801eea1
 801ee54:	0801edf1 	.word	0x0801edf1
 801ee58:	0801edf1 	.word	0x0801edf1
 801ee5c:	0801ef3b 	.word	0x0801ef3b
 801ee60:	682b      	ldr	r3, [r5, #0]
 801ee62:	1d1a      	adds	r2, r3, #4
 801ee64:	681b      	ldr	r3, [r3, #0]
 801ee66:	602a      	str	r2, [r5, #0]
 801ee68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ee6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ee70:	2301      	movs	r3, #1
 801ee72:	e09f      	b.n	801efb4 <_printf_i+0x1ec>
 801ee74:	6820      	ldr	r0, [r4, #0]
 801ee76:	682b      	ldr	r3, [r5, #0]
 801ee78:	0607      	lsls	r7, r0, #24
 801ee7a:	f103 0104 	add.w	r1, r3, #4
 801ee7e:	6029      	str	r1, [r5, #0]
 801ee80:	d501      	bpl.n	801ee86 <_printf_i+0xbe>
 801ee82:	681e      	ldr	r6, [r3, #0]
 801ee84:	e003      	b.n	801ee8e <_printf_i+0xc6>
 801ee86:	0646      	lsls	r6, r0, #25
 801ee88:	d5fb      	bpl.n	801ee82 <_printf_i+0xba>
 801ee8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ee8e:	2e00      	cmp	r6, #0
 801ee90:	da03      	bge.n	801ee9a <_printf_i+0xd2>
 801ee92:	232d      	movs	r3, #45	; 0x2d
 801ee94:	4276      	negs	r6, r6
 801ee96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ee9a:	485a      	ldr	r0, [pc, #360]	; (801f004 <_printf_i+0x23c>)
 801ee9c:	230a      	movs	r3, #10
 801ee9e:	e012      	b.n	801eec6 <_printf_i+0xfe>
 801eea0:	682b      	ldr	r3, [r5, #0]
 801eea2:	6820      	ldr	r0, [r4, #0]
 801eea4:	1d19      	adds	r1, r3, #4
 801eea6:	6029      	str	r1, [r5, #0]
 801eea8:	0605      	lsls	r5, r0, #24
 801eeaa:	d501      	bpl.n	801eeb0 <_printf_i+0xe8>
 801eeac:	681e      	ldr	r6, [r3, #0]
 801eeae:	e002      	b.n	801eeb6 <_printf_i+0xee>
 801eeb0:	0641      	lsls	r1, r0, #25
 801eeb2:	d5fb      	bpl.n	801eeac <_printf_i+0xe4>
 801eeb4:	881e      	ldrh	r6, [r3, #0]
 801eeb6:	4853      	ldr	r0, [pc, #332]	; (801f004 <_printf_i+0x23c>)
 801eeb8:	2f6f      	cmp	r7, #111	; 0x6f
 801eeba:	bf0c      	ite	eq
 801eebc:	2308      	moveq	r3, #8
 801eebe:	230a      	movne	r3, #10
 801eec0:	2100      	movs	r1, #0
 801eec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801eec6:	6865      	ldr	r5, [r4, #4]
 801eec8:	60a5      	str	r5, [r4, #8]
 801eeca:	2d00      	cmp	r5, #0
 801eecc:	bfa2      	ittt	ge
 801eece:	6821      	ldrge	r1, [r4, #0]
 801eed0:	f021 0104 	bicge.w	r1, r1, #4
 801eed4:	6021      	strge	r1, [r4, #0]
 801eed6:	b90e      	cbnz	r6, 801eedc <_printf_i+0x114>
 801eed8:	2d00      	cmp	r5, #0
 801eeda:	d04b      	beq.n	801ef74 <_printf_i+0x1ac>
 801eedc:	4615      	mov	r5, r2
 801eede:	fbb6 f1f3 	udiv	r1, r6, r3
 801eee2:	fb03 6711 	mls	r7, r3, r1, r6
 801eee6:	5dc7      	ldrb	r7, [r0, r7]
 801eee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801eeec:	4637      	mov	r7, r6
 801eeee:	42bb      	cmp	r3, r7
 801eef0:	460e      	mov	r6, r1
 801eef2:	d9f4      	bls.n	801eede <_printf_i+0x116>
 801eef4:	2b08      	cmp	r3, #8
 801eef6:	d10b      	bne.n	801ef10 <_printf_i+0x148>
 801eef8:	6823      	ldr	r3, [r4, #0]
 801eefa:	07de      	lsls	r6, r3, #31
 801eefc:	d508      	bpl.n	801ef10 <_printf_i+0x148>
 801eefe:	6923      	ldr	r3, [r4, #16]
 801ef00:	6861      	ldr	r1, [r4, #4]
 801ef02:	4299      	cmp	r1, r3
 801ef04:	bfde      	ittt	le
 801ef06:	2330      	movle	r3, #48	; 0x30
 801ef08:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ef0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801ef10:	1b52      	subs	r2, r2, r5
 801ef12:	6122      	str	r2, [r4, #16]
 801ef14:	f8cd a000 	str.w	sl, [sp]
 801ef18:	464b      	mov	r3, r9
 801ef1a:	aa03      	add	r2, sp, #12
 801ef1c:	4621      	mov	r1, r4
 801ef1e:	4640      	mov	r0, r8
 801ef20:	f7ff fee4 	bl	801ecec <_printf_common>
 801ef24:	3001      	adds	r0, #1
 801ef26:	d14a      	bne.n	801efbe <_printf_i+0x1f6>
 801ef28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ef2c:	b004      	add	sp, #16
 801ef2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef32:	6823      	ldr	r3, [r4, #0]
 801ef34:	f043 0320 	orr.w	r3, r3, #32
 801ef38:	6023      	str	r3, [r4, #0]
 801ef3a:	4833      	ldr	r0, [pc, #204]	; (801f008 <_printf_i+0x240>)
 801ef3c:	2778      	movs	r7, #120	; 0x78
 801ef3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ef42:	6823      	ldr	r3, [r4, #0]
 801ef44:	6829      	ldr	r1, [r5, #0]
 801ef46:	061f      	lsls	r7, r3, #24
 801ef48:	f851 6b04 	ldr.w	r6, [r1], #4
 801ef4c:	d402      	bmi.n	801ef54 <_printf_i+0x18c>
 801ef4e:	065f      	lsls	r7, r3, #25
 801ef50:	bf48      	it	mi
 801ef52:	b2b6      	uxthmi	r6, r6
 801ef54:	07df      	lsls	r7, r3, #31
 801ef56:	bf48      	it	mi
 801ef58:	f043 0320 	orrmi.w	r3, r3, #32
 801ef5c:	6029      	str	r1, [r5, #0]
 801ef5e:	bf48      	it	mi
 801ef60:	6023      	strmi	r3, [r4, #0]
 801ef62:	b91e      	cbnz	r6, 801ef6c <_printf_i+0x1a4>
 801ef64:	6823      	ldr	r3, [r4, #0]
 801ef66:	f023 0320 	bic.w	r3, r3, #32
 801ef6a:	6023      	str	r3, [r4, #0]
 801ef6c:	2310      	movs	r3, #16
 801ef6e:	e7a7      	b.n	801eec0 <_printf_i+0xf8>
 801ef70:	4824      	ldr	r0, [pc, #144]	; (801f004 <_printf_i+0x23c>)
 801ef72:	e7e4      	b.n	801ef3e <_printf_i+0x176>
 801ef74:	4615      	mov	r5, r2
 801ef76:	e7bd      	b.n	801eef4 <_printf_i+0x12c>
 801ef78:	682b      	ldr	r3, [r5, #0]
 801ef7a:	6826      	ldr	r6, [r4, #0]
 801ef7c:	6961      	ldr	r1, [r4, #20]
 801ef7e:	1d18      	adds	r0, r3, #4
 801ef80:	6028      	str	r0, [r5, #0]
 801ef82:	0635      	lsls	r5, r6, #24
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	d501      	bpl.n	801ef8c <_printf_i+0x1c4>
 801ef88:	6019      	str	r1, [r3, #0]
 801ef8a:	e002      	b.n	801ef92 <_printf_i+0x1ca>
 801ef8c:	0670      	lsls	r0, r6, #25
 801ef8e:	d5fb      	bpl.n	801ef88 <_printf_i+0x1c0>
 801ef90:	8019      	strh	r1, [r3, #0]
 801ef92:	2300      	movs	r3, #0
 801ef94:	6123      	str	r3, [r4, #16]
 801ef96:	4615      	mov	r5, r2
 801ef98:	e7bc      	b.n	801ef14 <_printf_i+0x14c>
 801ef9a:	682b      	ldr	r3, [r5, #0]
 801ef9c:	1d1a      	adds	r2, r3, #4
 801ef9e:	602a      	str	r2, [r5, #0]
 801efa0:	681d      	ldr	r5, [r3, #0]
 801efa2:	6862      	ldr	r2, [r4, #4]
 801efa4:	2100      	movs	r1, #0
 801efa6:	4628      	mov	r0, r5
 801efa8:	f7e1 f95a 	bl	8000260 <memchr>
 801efac:	b108      	cbz	r0, 801efb2 <_printf_i+0x1ea>
 801efae:	1b40      	subs	r0, r0, r5
 801efb0:	6060      	str	r0, [r4, #4]
 801efb2:	6863      	ldr	r3, [r4, #4]
 801efb4:	6123      	str	r3, [r4, #16]
 801efb6:	2300      	movs	r3, #0
 801efb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801efbc:	e7aa      	b.n	801ef14 <_printf_i+0x14c>
 801efbe:	6923      	ldr	r3, [r4, #16]
 801efc0:	462a      	mov	r2, r5
 801efc2:	4649      	mov	r1, r9
 801efc4:	4640      	mov	r0, r8
 801efc6:	47d0      	blx	sl
 801efc8:	3001      	adds	r0, #1
 801efca:	d0ad      	beq.n	801ef28 <_printf_i+0x160>
 801efcc:	6823      	ldr	r3, [r4, #0]
 801efce:	079b      	lsls	r3, r3, #30
 801efd0:	d413      	bmi.n	801effa <_printf_i+0x232>
 801efd2:	68e0      	ldr	r0, [r4, #12]
 801efd4:	9b03      	ldr	r3, [sp, #12]
 801efd6:	4298      	cmp	r0, r3
 801efd8:	bfb8      	it	lt
 801efda:	4618      	movlt	r0, r3
 801efdc:	e7a6      	b.n	801ef2c <_printf_i+0x164>
 801efde:	2301      	movs	r3, #1
 801efe0:	4632      	mov	r2, r6
 801efe2:	4649      	mov	r1, r9
 801efe4:	4640      	mov	r0, r8
 801efe6:	47d0      	blx	sl
 801efe8:	3001      	adds	r0, #1
 801efea:	d09d      	beq.n	801ef28 <_printf_i+0x160>
 801efec:	3501      	adds	r5, #1
 801efee:	68e3      	ldr	r3, [r4, #12]
 801eff0:	9903      	ldr	r1, [sp, #12]
 801eff2:	1a5b      	subs	r3, r3, r1
 801eff4:	42ab      	cmp	r3, r5
 801eff6:	dcf2      	bgt.n	801efde <_printf_i+0x216>
 801eff8:	e7eb      	b.n	801efd2 <_printf_i+0x20a>
 801effa:	2500      	movs	r5, #0
 801effc:	f104 0619 	add.w	r6, r4, #25
 801f000:	e7f5      	b.n	801efee <_printf_i+0x226>
 801f002:	bf00      	nop
 801f004:	08024a2e 	.word	0x08024a2e
 801f008:	08024a3f 	.word	0x08024a3f

0801f00c <_scanf_float>:
 801f00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f010:	b087      	sub	sp, #28
 801f012:	4617      	mov	r7, r2
 801f014:	9303      	str	r3, [sp, #12]
 801f016:	688b      	ldr	r3, [r1, #8]
 801f018:	1e5a      	subs	r2, r3, #1
 801f01a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f01e:	bf83      	ittte	hi
 801f020:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f024:	195b      	addhi	r3, r3, r5
 801f026:	9302      	strhi	r3, [sp, #8]
 801f028:	2300      	movls	r3, #0
 801f02a:	bf86      	itte	hi
 801f02c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f030:	608b      	strhi	r3, [r1, #8]
 801f032:	9302      	strls	r3, [sp, #8]
 801f034:	680b      	ldr	r3, [r1, #0]
 801f036:	468b      	mov	fp, r1
 801f038:	2500      	movs	r5, #0
 801f03a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801f03e:	f84b 3b1c 	str.w	r3, [fp], #28
 801f042:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801f046:	4680      	mov	r8, r0
 801f048:	460c      	mov	r4, r1
 801f04a:	465e      	mov	r6, fp
 801f04c:	46aa      	mov	sl, r5
 801f04e:	46a9      	mov	r9, r5
 801f050:	9501      	str	r5, [sp, #4]
 801f052:	68a2      	ldr	r2, [r4, #8]
 801f054:	b152      	cbz	r2, 801f06c <_scanf_float+0x60>
 801f056:	683b      	ldr	r3, [r7, #0]
 801f058:	781b      	ldrb	r3, [r3, #0]
 801f05a:	2b4e      	cmp	r3, #78	; 0x4e
 801f05c:	d864      	bhi.n	801f128 <_scanf_float+0x11c>
 801f05e:	2b40      	cmp	r3, #64	; 0x40
 801f060:	d83c      	bhi.n	801f0dc <_scanf_float+0xd0>
 801f062:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801f066:	b2c8      	uxtb	r0, r1
 801f068:	280e      	cmp	r0, #14
 801f06a:	d93a      	bls.n	801f0e2 <_scanf_float+0xd6>
 801f06c:	f1b9 0f00 	cmp.w	r9, #0
 801f070:	d003      	beq.n	801f07a <_scanf_float+0x6e>
 801f072:	6823      	ldr	r3, [r4, #0]
 801f074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f078:	6023      	str	r3, [r4, #0]
 801f07a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f07e:	f1ba 0f01 	cmp.w	sl, #1
 801f082:	f200 8113 	bhi.w	801f2ac <_scanf_float+0x2a0>
 801f086:	455e      	cmp	r6, fp
 801f088:	f200 8105 	bhi.w	801f296 <_scanf_float+0x28a>
 801f08c:	2501      	movs	r5, #1
 801f08e:	4628      	mov	r0, r5
 801f090:	b007      	add	sp, #28
 801f092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f096:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801f09a:	2a0d      	cmp	r2, #13
 801f09c:	d8e6      	bhi.n	801f06c <_scanf_float+0x60>
 801f09e:	a101      	add	r1, pc, #4	; (adr r1, 801f0a4 <_scanf_float+0x98>)
 801f0a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f0a4:	0801f1e3 	.word	0x0801f1e3
 801f0a8:	0801f06d 	.word	0x0801f06d
 801f0ac:	0801f06d 	.word	0x0801f06d
 801f0b0:	0801f06d 	.word	0x0801f06d
 801f0b4:	0801f243 	.word	0x0801f243
 801f0b8:	0801f21b 	.word	0x0801f21b
 801f0bc:	0801f06d 	.word	0x0801f06d
 801f0c0:	0801f06d 	.word	0x0801f06d
 801f0c4:	0801f1f1 	.word	0x0801f1f1
 801f0c8:	0801f06d 	.word	0x0801f06d
 801f0cc:	0801f06d 	.word	0x0801f06d
 801f0d0:	0801f06d 	.word	0x0801f06d
 801f0d4:	0801f06d 	.word	0x0801f06d
 801f0d8:	0801f1a9 	.word	0x0801f1a9
 801f0dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801f0e0:	e7db      	b.n	801f09a <_scanf_float+0x8e>
 801f0e2:	290e      	cmp	r1, #14
 801f0e4:	d8c2      	bhi.n	801f06c <_scanf_float+0x60>
 801f0e6:	a001      	add	r0, pc, #4	; (adr r0, 801f0ec <_scanf_float+0xe0>)
 801f0e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801f0ec:	0801f19b 	.word	0x0801f19b
 801f0f0:	0801f06d 	.word	0x0801f06d
 801f0f4:	0801f19b 	.word	0x0801f19b
 801f0f8:	0801f22f 	.word	0x0801f22f
 801f0fc:	0801f06d 	.word	0x0801f06d
 801f100:	0801f149 	.word	0x0801f149
 801f104:	0801f185 	.word	0x0801f185
 801f108:	0801f185 	.word	0x0801f185
 801f10c:	0801f185 	.word	0x0801f185
 801f110:	0801f185 	.word	0x0801f185
 801f114:	0801f185 	.word	0x0801f185
 801f118:	0801f185 	.word	0x0801f185
 801f11c:	0801f185 	.word	0x0801f185
 801f120:	0801f185 	.word	0x0801f185
 801f124:	0801f185 	.word	0x0801f185
 801f128:	2b6e      	cmp	r3, #110	; 0x6e
 801f12a:	d809      	bhi.n	801f140 <_scanf_float+0x134>
 801f12c:	2b60      	cmp	r3, #96	; 0x60
 801f12e:	d8b2      	bhi.n	801f096 <_scanf_float+0x8a>
 801f130:	2b54      	cmp	r3, #84	; 0x54
 801f132:	d077      	beq.n	801f224 <_scanf_float+0x218>
 801f134:	2b59      	cmp	r3, #89	; 0x59
 801f136:	d199      	bne.n	801f06c <_scanf_float+0x60>
 801f138:	2d07      	cmp	r5, #7
 801f13a:	d197      	bne.n	801f06c <_scanf_float+0x60>
 801f13c:	2508      	movs	r5, #8
 801f13e:	e029      	b.n	801f194 <_scanf_float+0x188>
 801f140:	2b74      	cmp	r3, #116	; 0x74
 801f142:	d06f      	beq.n	801f224 <_scanf_float+0x218>
 801f144:	2b79      	cmp	r3, #121	; 0x79
 801f146:	e7f6      	b.n	801f136 <_scanf_float+0x12a>
 801f148:	6821      	ldr	r1, [r4, #0]
 801f14a:	05c8      	lsls	r0, r1, #23
 801f14c:	d51a      	bpl.n	801f184 <_scanf_float+0x178>
 801f14e:	9b02      	ldr	r3, [sp, #8]
 801f150:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801f154:	6021      	str	r1, [r4, #0]
 801f156:	f109 0901 	add.w	r9, r9, #1
 801f15a:	b11b      	cbz	r3, 801f164 <_scanf_float+0x158>
 801f15c:	3b01      	subs	r3, #1
 801f15e:	3201      	adds	r2, #1
 801f160:	9302      	str	r3, [sp, #8]
 801f162:	60a2      	str	r2, [r4, #8]
 801f164:	68a3      	ldr	r3, [r4, #8]
 801f166:	3b01      	subs	r3, #1
 801f168:	60a3      	str	r3, [r4, #8]
 801f16a:	6923      	ldr	r3, [r4, #16]
 801f16c:	3301      	adds	r3, #1
 801f16e:	6123      	str	r3, [r4, #16]
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	3b01      	subs	r3, #1
 801f174:	2b00      	cmp	r3, #0
 801f176:	607b      	str	r3, [r7, #4]
 801f178:	f340 8084 	ble.w	801f284 <_scanf_float+0x278>
 801f17c:	683b      	ldr	r3, [r7, #0]
 801f17e:	3301      	adds	r3, #1
 801f180:	603b      	str	r3, [r7, #0]
 801f182:	e766      	b.n	801f052 <_scanf_float+0x46>
 801f184:	eb1a 0f05 	cmn.w	sl, r5
 801f188:	f47f af70 	bne.w	801f06c <_scanf_float+0x60>
 801f18c:	6822      	ldr	r2, [r4, #0]
 801f18e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801f192:	6022      	str	r2, [r4, #0]
 801f194:	f806 3b01 	strb.w	r3, [r6], #1
 801f198:	e7e4      	b.n	801f164 <_scanf_float+0x158>
 801f19a:	6822      	ldr	r2, [r4, #0]
 801f19c:	0610      	lsls	r0, r2, #24
 801f19e:	f57f af65 	bpl.w	801f06c <_scanf_float+0x60>
 801f1a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801f1a6:	e7f4      	b.n	801f192 <_scanf_float+0x186>
 801f1a8:	f1ba 0f00 	cmp.w	sl, #0
 801f1ac:	d10e      	bne.n	801f1cc <_scanf_float+0x1c0>
 801f1ae:	f1b9 0f00 	cmp.w	r9, #0
 801f1b2:	d10e      	bne.n	801f1d2 <_scanf_float+0x1c6>
 801f1b4:	6822      	ldr	r2, [r4, #0]
 801f1b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f1ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f1be:	d108      	bne.n	801f1d2 <_scanf_float+0x1c6>
 801f1c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f1c4:	6022      	str	r2, [r4, #0]
 801f1c6:	f04f 0a01 	mov.w	sl, #1
 801f1ca:	e7e3      	b.n	801f194 <_scanf_float+0x188>
 801f1cc:	f1ba 0f02 	cmp.w	sl, #2
 801f1d0:	d055      	beq.n	801f27e <_scanf_float+0x272>
 801f1d2:	2d01      	cmp	r5, #1
 801f1d4:	d002      	beq.n	801f1dc <_scanf_float+0x1d0>
 801f1d6:	2d04      	cmp	r5, #4
 801f1d8:	f47f af48 	bne.w	801f06c <_scanf_float+0x60>
 801f1dc:	3501      	adds	r5, #1
 801f1de:	b2ed      	uxtb	r5, r5
 801f1e0:	e7d8      	b.n	801f194 <_scanf_float+0x188>
 801f1e2:	f1ba 0f01 	cmp.w	sl, #1
 801f1e6:	f47f af41 	bne.w	801f06c <_scanf_float+0x60>
 801f1ea:	f04f 0a02 	mov.w	sl, #2
 801f1ee:	e7d1      	b.n	801f194 <_scanf_float+0x188>
 801f1f0:	b97d      	cbnz	r5, 801f212 <_scanf_float+0x206>
 801f1f2:	f1b9 0f00 	cmp.w	r9, #0
 801f1f6:	f47f af3c 	bne.w	801f072 <_scanf_float+0x66>
 801f1fa:	6822      	ldr	r2, [r4, #0]
 801f1fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f200:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f204:	f47f af39 	bne.w	801f07a <_scanf_float+0x6e>
 801f208:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f20c:	6022      	str	r2, [r4, #0]
 801f20e:	2501      	movs	r5, #1
 801f210:	e7c0      	b.n	801f194 <_scanf_float+0x188>
 801f212:	2d03      	cmp	r5, #3
 801f214:	d0e2      	beq.n	801f1dc <_scanf_float+0x1d0>
 801f216:	2d05      	cmp	r5, #5
 801f218:	e7de      	b.n	801f1d8 <_scanf_float+0x1cc>
 801f21a:	2d02      	cmp	r5, #2
 801f21c:	f47f af26 	bne.w	801f06c <_scanf_float+0x60>
 801f220:	2503      	movs	r5, #3
 801f222:	e7b7      	b.n	801f194 <_scanf_float+0x188>
 801f224:	2d06      	cmp	r5, #6
 801f226:	f47f af21 	bne.w	801f06c <_scanf_float+0x60>
 801f22a:	2507      	movs	r5, #7
 801f22c:	e7b2      	b.n	801f194 <_scanf_float+0x188>
 801f22e:	6822      	ldr	r2, [r4, #0]
 801f230:	0591      	lsls	r1, r2, #22
 801f232:	f57f af1b 	bpl.w	801f06c <_scanf_float+0x60>
 801f236:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801f23a:	6022      	str	r2, [r4, #0]
 801f23c:	f8cd 9004 	str.w	r9, [sp, #4]
 801f240:	e7a8      	b.n	801f194 <_scanf_float+0x188>
 801f242:	6822      	ldr	r2, [r4, #0]
 801f244:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801f248:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801f24c:	d006      	beq.n	801f25c <_scanf_float+0x250>
 801f24e:	0550      	lsls	r0, r2, #21
 801f250:	f57f af0c 	bpl.w	801f06c <_scanf_float+0x60>
 801f254:	f1b9 0f00 	cmp.w	r9, #0
 801f258:	f43f af0f 	beq.w	801f07a <_scanf_float+0x6e>
 801f25c:	0591      	lsls	r1, r2, #22
 801f25e:	bf58      	it	pl
 801f260:	9901      	ldrpl	r1, [sp, #4]
 801f262:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f266:	bf58      	it	pl
 801f268:	eba9 0101 	subpl.w	r1, r9, r1
 801f26c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801f270:	bf58      	it	pl
 801f272:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801f276:	6022      	str	r2, [r4, #0]
 801f278:	f04f 0900 	mov.w	r9, #0
 801f27c:	e78a      	b.n	801f194 <_scanf_float+0x188>
 801f27e:	f04f 0a03 	mov.w	sl, #3
 801f282:	e787      	b.n	801f194 <_scanf_float+0x188>
 801f284:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f288:	4639      	mov	r1, r7
 801f28a:	4640      	mov	r0, r8
 801f28c:	4798      	blx	r3
 801f28e:	2800      	cmp	r0, #0
 801f290:	f43f aedf 	beq.w	801f052 <_scanf_float+0x46>
 801f294:	e6ea      	b.n	801f06c <_scanf_float+0x60>
 801f296:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f29a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f29e:	463a      	mov	r2, r7
 801f2a0:	4640      	mov	r0, r8
 801f2a2:	4798      	blx	r3
 801f2a4:	6923      	ldr	r3, [r4, #16]
 801f2a6:	3b01      	subs	r3, #1
 801f2a8:	6123      	str	r3, [r4, #16]
 801f2aa:	e6ec      	b.n	801f086 <_scanf_float+0x7a>
 801f2ac:	1e6b      	subs	r3, r5, #1
 801f2ae:	2b06      	cmp	r3, #6
 801f2b0:	d825      	bhi.n	801f2fe <_scanf_float+0x2f2>
 801f2b2:	2d02      	cmp	r5, #2
 801f2b4:	d836      	bhi.n	801f324 <_scanf_float+0x318>
 801f2b6:	455e      	cmp	r6, fp
 801f2b8:	f67f aee8 	bls.w	801f08c <_scanf_float+0x80>
 801f2bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f2c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f2c4:	463a      	mov	r2, r7
 801f2c6:	4640      	mov	r0, r8
 801f2c8:	4798      	blx	r3
 801f2ca:	6923      	ldr	r3, [r4, #16]
 801f2cc:	3b01      	subs	r3, #1
 801f2ce:	6123      	str	r3, [r4, #16]
 801f2d0:	e7f1      	b.n	801f2b6 <_scanf_float+0x2aa>
 801f2d2:	9802      	ldr	r0, [sp, #8]
 801f2d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f2d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801f2dc:	9002      	str	r0, [sp, #8]
 801f2de:	463a      	mov	r2, r7
 801f2e0:	4640      	mov	r0, r8
 801f2e2:	4798      	blx	r3
 801f2e4:	6923      	ldr	r3, [r4, #16]
 801f2e6:	3b01      	subs	r3, #1
 801f2e8:	6123      	str	r3, [r4, #16]
 801f2ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f2ee:	fa5f fa8a 	uxtb.w	sl, sl
 801f2f2:	f1ba 0f02 	cmp.w	sl, #2
 801f2f6:	d1ec      	bne.n	801f2d2 <_scanf_float+0x2c6>
 801f2f8:	3d03      	subs	r5, #3
 801f2fa:	b2ed      	uxtb	r5, r5
 801f2fc:	1b76      	subs	r6, r6, r5
 801f2fe:	6823      	ldr	r3, [r4, #0]
 801f300:	05da      	lsls	r2, r3, #23
 801f302:	d52f      	bpl.n	801f364 <_scanf_float+0x358>
 801f304:	055b      	lsls	r3, r3, #21
 801f306:	d510      	bpl.n	801f32a <_scanf_float+0x31e>
 801f308:	455e      	cmp	r6, fp
 801f30a:	f67f aebf 	bls.w	801f08c <_scanf_float+0x80>
 801f30e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f312:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f316:	463a      	mov	r2, r7
 801f318:	4640      	mov	r0, r8
 801f31a:	4798      	blx	r3
 801f31c:	6923      	ldr	r3, [r4, #16]
 801f31e:	3b01      	subs	r3, #1
 801f320:	6123      	str	r3, [r4, #16]
 801f322:	e7f1      	b.n	801f308 <_scanf_float+0x2fc>
 801f324:	46aa      	mov	sl, r5
 801f326:	9602      	str	r6, [sp, #8]
 801f328:	e7df      	b.n	801f2ea <_scanf_float+0x2de>
 801f32a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f32e:	6923      	ldr	r3, [r4, #16]
 801f330:	2965      	cmp	r1, #101	; 0x65
 801f332:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801f336:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801f33a:	6123      	str	r3, [r4, #16]
 801f33c:	d00c      	beq.n	801f358 <_scanf_float+0x34c>
 801f33e:	2945      	cmp	r1, #69	; 0x45
 801f340:	d00a      	beq.n	801f358 <_scanf_float+0x34c>
 801f342:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f346:	463a      	mov	r2, r7
 801f348:	4640      	mov	r0, r8
 801f34a:	4798      	blx	r3
 801f34c:	6923      	ldr	r3, [r4, #16]
 801f34e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801f352:	3b01      	subs	r3, #1
 801f354:	1eb5      	subs	r5, r6, #2
 801f356:	6123      	str	r3, [r4, #16]
 801f358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f35c:	463a      	mov	r2, r7
 801f35e:	4640      	mov	r0, r8
 801f360:	4798      	blx	r3
 801f362:	462e      	mov	r6, r5
 801f364:	6825      	ldr	r5, [r4, #0]
 801f366:	f015 0510 	ands.w	r5, r5, #16
 801f36a:	d14d      	bne.n	801f408 <_scanf_float+0x3fc>
 801f36c:	7035      	strb	r5, [r6, #0]
 801f36e:	6823      	ldr	r3, [r4, #0]
 801f370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801f374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f378:	d11a      	bne.n	801f3b0 <_scanf_float+0x3a4>
 801f37a:	9b01      	ldr	r3, [sp, #4]
 801f37c:	454b      	cmp	r3, r9
 801f37e:	eba3 0209 	sub.w	r2, r3, r9
 801f382:	d122      	bne.n	801f3ca <_scanf_float+0x3be>
 801f384:	2200      	movs	r2, #0
 801f386:	4659      	mov	r1, fp
 801f388:	4640      	mov	r0, r8
 801f38a:	f002 fdd7 	bl	8021f3c <_strtod_r>
 801f38e:	9b03      	ldr	r3, [sp, #12]
 801f390:	6821      	ldr	r1, [r4, #0]
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	f011 0f02 	tst.w	r1, #2
 801f398:	f103 0204 	add.w	r2, r3, #4
 801f39c:	d020      	beq.n	801f3e0 <_scanf_float+0x3d4>
 801f39e:	9903      	ldr	r1, [sp, #12]
 801f3a0:	600a      	str	r2, [r1, #0]
 801f3a2:	681b      	ldr	r3, [r3, #0]
 801f3a4:	ed83 0b00 	vstr	d0, [r3]
 801f3a8:	68e3      	ldr	r3, [r4, #12]
 801f3aa:	3301      	adds	r3, #1
 801f3ac:	60e3      	str	r3, [r4, #12]
 801f3ae:	e66e      	b.n	801f08e <_scanf_float+0x82>
 801f3b0:	9b04      	ldr	r3, [sp, #16]
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d0e6      	beq.n	801f384 <_scanf_float+0x378>
 801f3b6:	9905      	ldr	r1, [sp, #20]
 801f3b8:	230a      	movs	r3, #10
 801f3ba:	462a      	mov	r2, r5
 801f3bc:	3101      	adds	r1, #1
 801f3be:	4640      	mov	r0, r8
 801f3c0:	f002 fe44 	bl	802204c <_strtol_r>
 801f3c4:	9b04      	ldr	r3, [sp, #16]
 801f3c6:	9e05      	ldr	r6, [sp, #20]
 801f3c8:	1ac2      	subs	r2, r0, r3
 801f3ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801f3ce:	429e      	cmp	r6, r3
 801f3d0:	bf28      	it	cs
 801f3d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801f3d6:	490d      	ldr	r1, [pc, #52]	; (801f40c <_scanf_float+0x400>)
 801f3d8:	4630      	mov	r0, r6
 801f3da:	f000 fa87 	bl	801f8ec <siprintf>
 801f3de:	e7d1      	b.n	801f384 <_scanf_float+0x378>
 801f3e0:	f011 0f04 	tst.w	r1, #4
 801f3e4:	9903      	ldr	r1, [sp, #12]
 801f3e6:	600a      	str	r2, [r1, #0]
 801f3e8:	d1db      	bne.n	801f3a2 <_scanf_float+0x396>
 801f3ea:	eeb4 0b40 	vcmp.f64	d0, d0
 801f3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3f2:	681e      	ldr	r6, [r3, #0]
 801f3f4:	d705      	bvc.n	801f402 <_scanf_float+0x3f6>
 801f3f6:	4806      	ldr	r0, [pc, #24]	; (801f410 <_scanf_float+0x404>)
 801f3f8:	f000 fcb0 	bl	801fd5c <nanf>
 801f3fc:	ed86 0a00 	vstr	s0, [r6]
 801f400:	e7d2      	b.n	801f3a8 <_scanf_float+0x39c>
 801f402:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801f406:	e7f9      	b.n	801f3fc <_scanf_float+0x3f0>
 801f408:	2500      	movs	r5, #0
 801f40a:	e640      	b.n	801f08e <_scanf_float+0x82>
 801f40c:	08024a50 	.word	0x08024a50
 801f410:	08024a90 	.word	0x08024a90

0801f414 <std>:
 801f414:	2300      	movs	r3, #0
 801f416:	b510      	push	{r4, lr}
 801f418:	4604      	mov	r4, r0
 801f41a:	e9c0 3300 	strd	r3, r3, [r0]
 801f41e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f422:	6083      	str	r3, [r0, #8]
 801f424:	8181      	strh	r1, [r0, #12]
 801f426:	6643      	str	r3, [r0, #100]	; 0x64
 801f428:	81c2      	strh	r2, [r0, #14]
 801f42a:	6183      	str	r3, [r0, #24]
 801f42c:	4619      	mov	r1, r3
 801f42e:	2208      	movs	r2, #8
 801f430:	305c      	adds	r0, #92	; 0x5c
 801f432:	f000 fbb7 	bl	801fba4 <memset>
 801f436:	4b0d      	ldr	r3, [pc, #52]	; (801f46c <std+0x58>)
 801f438:	6263      	str	r3, [r4, #36]	; 0x24
 801f43a:	4b0d      	ldr	r3, [pc, #52]	; (801f470 <std+0x5c>)
 801f43c:	62a3      	str	r3, [r4, #40]	; 0x28
 801f43e:	4b0d      	ldr	r3, [pc, #52]	; (801f474 <std+0x60>)
 801f440:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f442:	4b0d      	ldr	r3, [pc, #52]	; (801f478 <std+0x64>)
 801f444:	6323      	str	r3, [r4, #48]	; 0x30
 801f446:	4b0d      	ldr	r3, [pc, #52]	; (801f47c <std+0x68>)
 801f448:	6224      	str	r4, [r4, #32]
 801f44a:	429c      	cmp	r4, r3
 801f44c:	d006      	beq.n	801f45c <std+0x48>
 801f44e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801f452:	4294      	cmp	r4, r2
 801f454:	d002      	beq.n	801f45c <std+0x48>
 801f456:	33d0      	adds	r3, #208	; 0xd0
 801f458:	429c      	cmp	r4, r3
 801f45a:	d105      	bne.n	801f468 <std+0x54>
 801f45c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f464:	f000 bc60 	b.w	801fd28 <__retarget_lock_init_recursive>
 801f468:	bd10      	pop	{r4, pc}
 801f46a:	bf00      	nop
 801f46c:	0801f92d 	.word	0x0801f92d
 801f470:	0801f94f 	.word	0x0801f94f
 801f474:	0801f987 	.word	0x0801f987
 801f478:	0801f9ab 	.word	0x0801f9ab
 801f47c:	20016edc 	.word	0x20016edc

0801f480 <stdio_exit_handler>:
 801f480:	4a02      	ldr	r2, [pc, #8]	; (801f48c <stdio_exit_handler+0xc>)
 801f482:	4903      	ldr	r1, [pc, #12]	; (801f490 <stdio_exit_handler+0x10>)
 801f484:	4803      	ldr	r0, [pc, #12]	; (801f494 <stdio_exit_handler+0x14>)
 801f486:	f000 b869 	b.w	801f55c <_fwalk_sglue>
 801f48a:	bf00      	nop
 801f48c:	20000948 	.word	0x20000948
 801f490:	08022695 	.word	0x08022695
 801f494:	20000954 	.word	0x20000954

0801f498 <cleanup_stdio>:
 801f498:	6841      	ldr	r1, [r0, #4]
 801f49a:	4b0c      	ldr	r3, [pc, #48]	; (801f4cc <cleanup_stdio+0x34>)
 801f49c:	4299      	cmp	r1, r3
 801f49e:	b510      	push	{r4, lr}
 801f4a0:	4604      	mov	r4, r0
 801f4a2:	d001      	beq.n	801f4a8 <cleanup_stdio+0x10>
 801f4a4:	f003 f8f6 	bl	8022694 <_fflush_r>
 801f4a8:	68a1      	ldr	r1, [r4, #8]
 801f4aa:	4b09      	ldr	r3, [pc, #36]	; (801f4d0 <cleanup_stdio+0x38>)
 801f4ac:	4299      	cmp	r1, r3
 801f4ae:	d002      	beq.n	801f4b6 <cleanup_stdio+0x1e>
 801f4b0:	4620      	mov	r0, r4
 801f4b2:	f003 f8ef 	bl	8022694 <_fflush_r>
 801f4b6:	68e1      	ldr	r1, [r4, #12]
 801f4b8:	4b06      	ldr	r3, [pc, #24]	; (801f4d4 <cleanup_stdio+0x3c>)
 801f4ba:	4299      	cmp	r1, r3
 801f4bc:	d004      	beq.n	801f4c8 <cleanup_stdio+0x30>
 801f4be:	4620      	mov	r0, r4
 801f4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f4c4:	f003 b8e6 	b.w	8022694 <_fflush_r>
 801f4c8:	bd10      	pop	{r4, pc}
 801f4ca:	bf00      	nop
 801f4cc:	20016edc 	.word	0x20016edc
 801f4d0:	20016f44 	.word	0x20016f44
 801f4d4:	20016fac 	.word	0x20016fac

0801f4d8 <global_stdio_init.part.0>:
 801f4d8:	b510      	push	{r4, lr}
 801f4da:	4b0b      	ldr	r3, [pc, #44]	; (801f508 <global_stdio_init.part.0+0x30>)
 801f4dc:	4c0b      	ldr	r4, [pc, #44]	; (801f50c <global_stdio_init.part.0+0x34>)
 801f4de:	4a0c      	ldr	r2, [pc, #48]	; (801f510 <global_stdio_init.part.0+0x38>)
 801f4e0:	601a      	str	r2, [r3, #0]
 801f4e2:	4620      	mov	r0, r4
 801f4e4:	2200      	movs	r2, #0
 801f4e6:	2104      	movs	r1, #4
 801f4e8:	f7ff ff94 	bl	801f414 <std>
 801f4ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801f4f0:	2201      	movs	r2, #1
 801f4f2:	2109      	movs	r1, #9
 801f4f4:	f7ff ff8e 	bl	801f414 <std>
 801f4f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801f4fc:	2202      	movs	r2, #2
 801f4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f502:	2112      	movs	r1, #18
 801f504:	f7ff bf86 	b.w	801f414 <std>
 801f508:	20017014 	.word	0x20017014
 801f50c:	20016edc 	.word	0x20016edc
 801f510:	0801f481 	.word	0x0801f481

0801f514 <__sfp_lock_acquire>:
 801f514:	4801      	ldr	r0, [pc, #4]	; (801f51c <__sfp_lock_acquire+0x8>)
 801f516:	f000 bc08 	b.w	801fd2a <__retarget_lock_acquire_recursive>
 801f51a:	bf00      	nop
 801f51c:	2001701e 	.word	0x2001701e

0801f520 <__sfp_lock_release>:
 801f520:	4801      	ldr	r0, [pc, #4]	; (801f528 <__sfp_lock_release+0x8>)
 801f522:	f000 bc03 	b.w	801fd2c <__retarget_lock_release_recursive>
 801f526:	bf00      	nop
 801f528:	2001701e 	.word	0x2001701e

0801f52c <__sinit>:
 801f52c:	b510      	push	{r4, lr}
 801f52e:	4604      	mov	r4, r0
 801f530:	f7ff fff0 	bl	801f514 <__sfp_lock_acquire>
 801f534:	6a23      	ldr	r3, [r4, #32]
 801f536:	b11b      	cbz	r3, 801f540 <__sinit+0x14>
 801f538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f53c:	f7ff bff0 	b.w	801f520 <__sfp_lock_release>
 801f540:	4b04      	ldr	r3, [pc, #16]	; (801f554 <__sinit+0x28>)
 801f542:	6223      	str	r3, [r4, #32]
 801f544:	4b04      	ldr	r3, [pc, #16]	; (801f558 <__sinit+0x2c>)
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	2b00      	cmp	r3, #0
 801f54a:	d1f5      	bne.n	801f538 <__sinit+0xc>
 801f54c:	f7ff ffc4 	bl	801f4d8 <global_stdio_init.part.0>
 801f550:	e7f2      	b.n	801f538 <__sinit+0xc>
 801f552:	bf00      	nop
 801f554:	0801f499 	.word	0x0801f499
 801f558:	20017014 	.word	0x20017014

0801f55c <_fwalk_sglue>:
 801f55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f560:	4607      	mov	r7, r0
 801f562:	4688      	mov	r8, r1
 801f564:	4614      	mov	r4, r2
 801f566:	2600      	movs	r6, #0
 801f568:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f56c:	f1b9 0901 	subs.w	r9, r9, #1
 801f570:	d505      	bpl.n	801f57e <_fwalk_sglue+0x22>
 801f572:	6824      	ldr	r4, [r4, #0]
 801f574:	2c00      	cmp	r4, #0
 801f576:	d1f7      	bne.n	801f568 <_fwalk_sglue+0xc>
 801f578:	4630      	mov	r0, r6
 801f57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f57e:	89ab      	ldrh	r3, [r5, #12]
 801f580:	2b01      	cmp	r3, #1
 801f582:	d907      	bls.n	801f594 <_fwalk_sglue+0x38>
 801f584:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f588:	3301      	adds	r3, #1
 801f58a:	d003      	beq.n	801f594 <_fwalk_sglue+0x38>
 801f58c:	4629      	mov	r1, r5
 801f58e:	4638      	mov	r0, r7
 801f590:	47c0      	blx	r8
 801f592:	4306      	orrs	r6, r0
 801f594:	3568      	adds	r5, #104	; 0x68
 801f596:	e7e9      	b.n	801f56c <_fwalk_sglue+0x10>

0801f598 <_fwrite_r>:
 801f598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f59c:	9c08      	ldr	r4, [sp, #32]
 801f59e:	468a      	mov	sl, r1
 801f5a0:	4690      	mov	r8, r2
 801f5a2:	fb02 f903 	mul.w	r9, r2, r3
 801f5a6:	4606      	mov	r6, r0
 801f5a8:	b118      	cbz	r0, 801f5b2 <_fwrite_r+0x1a>
 801f5aa:	6a03      	ldr	r3, [r0, #32]
 801f5ac:	b90b      	cbnz	r3, 801f5b2 <_fwrite_r+0x1a>
 801f5ae:	f7ff ffbd 	bl	801f52c <__sinit>
 801f5b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f5b4:	07dd      	lsls	r5, r3, #31
 801f5b6:	d405      	bmi.n	801f5c4 <_fwrite_r+0x2c>
 801f5b8:	89a3      	ldrh	r3, [r4, #12]
 801f5ba:	0598      	lsls	r0, r3, #22
 801f5bc:	d402      	bmi.n	801f5c4 <_fwrite_r+0x2c>
 801f5be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f5c0:	f000 fbb3 	bl	801fd2a <__retarget_lock_acquire_recursive>
 801f5c4:	89a3      	ldrh	r3, [r4, #12]
 801f5c6:	0719      	lsls	r1, r3, #28
 801f5c8:	d516      	bpl.n	801f5f8 <_fwrite_r+0x60>
 801f5ca:	6923      	ldr	r3, [r4, #16]
 801f5cc:	b1a3      	cbz	r3, 801f5f8 <_fwrite_r+0x60>
 801f5ce:	2500      	movs	r5, #0
 801f5d0:	454d      	cmp	r5, r9
 801f5d2:	d01f      	beq.n	801f614 <_fwrite_r+0x7c>
 801f5d4:	68a7      	ldr	r7, [r4, #8]
 801f5d6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801f5da:	3f01      	subs	r7, #1
 801f5dc:	2f00      	cmp	r7, #0
 801f5de:	60a7      	str	r7, [r4, #8]
 801f5e0:	da04      	bge.n	801f5ec <_fwrite_r+0x54>
 801f5e2:	69a3      	ldr	r3, [r4, #24]
 801f5e4:	429f      	cmp	r7, r3
 801f5e6:	db0f      	blt.n	801f608 <_fwrite_r+0x70>
 801f5e8:	290a      	cmp	r1, #10
 801f5ea:	d00d      	beq.n	801f608 <_fwrite_r+0x70>
 801f5ec:	6823      	ldr	r3, [r4, #0]
 801f5ee:	1c5a      	adds	r2, r3, #1
 801f5f0:	6022      	str	r2, [r4, #0]
 801f5f2:	7019      	strb	r1, [r3, #0]
 801f5f4:	3501      	adds	r5, #1
 801f5f6:	e7eb      	b.n	801f5d0 <_fwrite_r+0x38>
 801f5f8:	4621      	mov	r1, r4
 801f5fa:	4630      	mov	r0, r6
 801f5fc:	f000 fa50 	bl	801faa0 <__swsetup_r>
 801f600:	2800      	cmp	r0, #0
 801f602:	d0e4      	beq.n	801f5ce <_fwrite_r+0x36>
 801f604:	2500      	movs	r5, #0
 801f606:	e005      	b.n	801f614 <_fwrite_r+0x7c>
 801f608:	4622      	mov	r2, r4
 801f60a:	4630      	mov	r0, r6
 801f60c:	f000 fa0a 	bl	801fa24 <__swbuf_r>
 801f610:	3001      	adds	r0, #1
 801f612:	d1ef      	bne.n	801f5f4 <_fwrite_r+0x5c>
 801f614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f616:	07da      	lsls	r2, r3, #31
 801f618:	d405      	bmi.n	801f626 <_fwrite_r+0x8e>
 801f61a:	89a3      	ldrh	r3, [r4, #12]
 801f61c:	059b      	lsls	r3, r3, #22
 801f61e:	d402      	bmi.n	801f626 <_fwrite_r+0x8e>
 801f620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f622:	f000 fb83 	bl	801fd2c <__retarget_lock_release_recursive>
 801f626:	fbb5 f0f8 	udiv	r0, r5, r8
 801f62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801f630 <fwrite>:
 801f630:	b507      	push	{r0, r1, r2, lr}
 801f632:	9300      	str	r3, [sp, #0]
 801f634:	4613      	mov	r3, r2
 801f636:	460a      	mov	r2, r1
 801f638:	4601      	mov	r1, r0
 801f63a:	4803      	ldr	r0, [pc, #12]	; (801f648 <fwrite+0x18>)
 801f63c:	6800      	ldr	r0, [r0, #0]
 801f63e:	f7ff ffab 	bl	801f598 <_fwrite_r>
 801f642:	b003      	add	sp, #12
 801f644:	f85d fb04 	ldr.w	pc, [sp], #4
 801f648:	200009a0 	.word	0x200009a0

0801f64c <iprintf>:
 801f64c:	b40f      	push	{r0, r1, r2, r3}
 801f64e:	b507      	push	{r0, r1, r2, lr}
 801f650:	4906      	ldr	r1, [pc, #24]	; (801f66c <iprintf+0x20>)
 801f652:	ab04      	add	r3, sp, #16
 801f654:	6808      	ldr	r0, [r1, #0]
 801f656:	f853 2b04 	ldr.w	r2, [r3], #4
 801f65a:	6881      	ldr	r1, [r0, #8]
 801f65c:	9301      	str	r3, [sp, #4]
 801f65e:	f002 fe79 	bl	8022354 <_vfiprintf_r>
 801f662:	b003      	add	sp, #12
 801f664:	f85d eb04 	ldr.w	lr, [sp], #4
 801f668:	b004      	add	sp, #16
 801f66a:	4770      	bx	lr
 801f66c:	200009a0 	.word	0x200009a0

0801f670 <_puts_r>:
 801f670:	6a03      	ldr	r3, [r0, #32]
 801f672:	b570      	push	{r4, r5, r6, lr}
 801f674:	6884      	ldr	r4, [r0, #8]
 801f676:	4605      	mov	r5, r0
 801f678:	460e      	mov	r6, r1
 801f67a:	b90b      	cbnz	r3, 801f680 <_puts_r+0x10>
 801f67c:	f7ff ff56 	bl	801f52c <__sinit>
 801f680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f682:	07db      	lsls	r3, r3, #31
 801f684:	d405      	bmi.n	801f692 <_puts_r+0x22>
 801f686:	89a3      	ldrh	r3, [r4, #12]
 801f688:	0598      	lsls	r0, r3, #22
 801f68a:	d402      	bmi.n	801f692 <_puts_r+0x22>
 801f68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f68e:	f000 fb4c 	bl	801fd2a <__retarget_lock_acquire_recursive>
 801f692:	89a3      	ldrh	r3, [r4, #12]
 801f694:	0719      	lsls	r1, r3, #28
 801f696:	d513      	bpl.n	801f6c0 <_puts_r+0x50>
 801f698:	6923      	ldr	r3, [r4, #16]
 801f69a:	b18b      	cbz	r3, 801f6c0 <_puts_r+0x50>
 801f69c:	3e01      	subs	r6, #1
 801f69e:	68a3      	ldr	r3, [r4, #8]
 801f6a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f6a4:	3b01      	subs	r3, #1
 801f6a6:	60a3      	str	r3, [r4, #8]
 801f6a8:	b9e9      	cbnz	r1, 801f6e6 <_puts_r+0x76>
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	da2e      	bge.n	801f70c <_puts_r+0x9c>
 801f6ae:	4622      	mov	r2, r4
 801f6b0:	210a      	movs	r1, #10
 801f6b2:	4628      	mov	r0, r5
 801f6b4:	f000 f9b6 	bl	801fa24 <__swbuf_r>
 801f6b8:	3001      	adds	r0, #1
 801f6ba:	d007      	beq.n	801f6cc <_puts_r+0x5c>
 801f6bc:	250a      	movs	r5, #10
 801f6be:	e007      	b.n	801f6d0 <_puts_r+0x60>
 801f6c0:	4621      	mov	r1, r4
 801f6c2:	4628      	mov	r0, r5
 801f6c4:	f000 f9ec 	bl	801faa0 <__swsetup_r>
 801f6c8:	2800      	cmp	r0, #0
 801f6ca:	d0e7      	beq.n	801f69c <_puts_r+0x2c>
 801f6cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f6d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f6d2:	07da      	lsls	r2, r3, #31
 801f6d4:	d405      	bmi.n	801f6e2 <_puts_r+0x72>
 801f6d6:	89a3      	ldrh	r3, [r4, #12]
 801f6d8:	059b      	lsls	r3, r3, #22
 801f6da:	d402      	bmi.n	801f6e2 <_puts_r+0x72>
 801f6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f6de:	f000 fb25 	bl	801fd2c <__retarget_lock_release_recursive>
 801f6e2:	4628      	mov	r0, r5
 801f6e4:	bd70      	pop	{r4, r5, r6, pc}
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	da04      	bge.n	801f6f4 <_puts_r+0x84>
 801f6ea:	69a2      	ldr	r2, [r4, #24]
 801f6ec:	429a      	cmp	r2, r3
 801f6ee:	dc06      	bgt.n	801f6fe <_puts_r+0x8e>
 801f6f0:	290a      	cmp	r1, #10
 801f6f2:	d004      	beq.n	801f6fe <_puts_r+0x8e>
 801f6f4:	6823      	ldr	r3, [r4, #0]
 801f6f6:	1c5a      	adds	r2, r3, #1
 801f6f8:	6022      	str	r2, [r4, #0]
 801f6fa:	7019      	strb	r1, [r3, #0]
 801f6fc:	e7cf      	b.n	801f69e <_puts_r+0x2e>
 801f6fe:	4622      	mov	r2, r4
 801f700:	4628      	mov	r0, r5
 801f702:	f000 f98f 	bl	801fa24 <__swbuf_r>
 801f706:	3001      	adds	r0, #1
 801f708:	d1c9      	bne.n	801f69e <_puts_r+0x2e>
 801f70a:	e7df      	b.n	801f6cc <_puts_r+0x5c>
 801f70c:	6823      	ldr	r3, [r4, #0]
 801f70e:	250a      	movs	r5, #10
 801f710:	1c5a      	adds	r2, r3, #1
 801f712:	6022      	str	r2, [r4, #0]
 801f714:	701d      	strb	r5, [r3, #0]
 801f716:	e7db      	b.n	801f6d0 <_puts_r+0x60>

0801f718 <puts>:
 801f718:	4b02      	ldr	r3, [pc, #8]	; (801f724 <puts+0xc>)
 801f71a:	4601      	mov	r1, r0
 801f71c:	6818      	ldr	r0, [r3, #0]
 801f71e:	f7ff bfa7 	b.w	801f670 <_puts_r>
 801f722:	bf00      	nop
 801f724:	200009a0 	.word	0x200009a0

0801f728 <setvbuf>:
 801f728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f72c:	461d      	mov	r5, r3
 801f72e:	4b54      	ldr	r3, [pc, #336]	; (801f880 <setvbuf+0x158>)
 801f730:	681f      	ldr	r7, [r3, #0]
 801f732:	4604      	mov	r4, r0
 801f734:	460e      	mov	r6, r1
 801f736:	4690      	mov	r8, r2
 801f738:	b127      	cbz	r7, 801f744 <setvbuf+0x1c>
 801f73a:	6a3b      	ldr	r3, [r7, #32]
 801f73c:	b913      	cbnz	r3, 801f744 <setvbuf+0x1c>
 801f73e:	4638      	mov	r0, r7
 801f740:	f7ff fef4 	bl	801f52c <__sinit>
 801f744:	f1b8 0f02 	cmp.w	r8, #2
 801f748:	d006      	beq.n	801f758 <setvbuf+0x30>
 801f74a:	f1b8 0f01 	cmp.w	r8, #1
 801f74e:	f200 8094 	bhi.w	801f87a <setvbuf+0x152>
 801f752:	2d00      	cmp	r5, #0
 801f754:	f2c0 8091 	blt.w	801f87a <setvbuf+0x152>
 801f758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f75a:	07da      	lsls	r2, r3, #31
 801f75c:	d405      	bmi.n	801f76a <setvbuf+0x42>
 801f75e:	89a3      	ldrh	r3, [r4, #12]
 801f760:	059b      	lsls	r3, r3, #22
 801f762:	d402      	bmi.n	801f76a <setvbuf+0x42>
 801f764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f766:	f000 fae0 	bl	801fd2a <__retarget_lock_acquire_recursive>
 801f76a:	4621      	mov	r1, r4
 801f76c:	4638      	mov	r0, r7
 801f76e:	f002 ff91 	bl	8022694 <_fflush_r>
 801f772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f774:	b141      	cbz	r1, 801f788 <setvbuf+0x60>
 801f776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f77a:	4299      	cmp	r1, r3
 801f77c:	d002      	beq.n	801f784 <setvbuf+0x5c>
 801f77e:	4638      	mov	r0, r7
 801f780:	f001 f912 	bl	80209a8 <_free_r>
 801f784:	2300      	movs	r3, #0
 801f786:	6363      	str	r3, [r4, #52]	; 0x34
 801f788:	2300      	movs	r3, #0
 801f78a:	61a3      	str	r3, [r4, #24]
 801f78c:	6063      	str	r3, [r4, #4]
 801f78e:	89a3      	ldrh	r3, [r4, #12]
 801f790:	0618      	lsls	r0, r3, #24
 801f792:	d503      	bpl.n	801f79c <setvbuf+0x74>
 801f794:	6921      	ldr	r1, [r4, #16]
 801f796:	4638      	mov	r0, r7
 801f798:	f001 f906 	bl	80209a8 <_free_r>
 801f79c:	89a3      	ldrh	r3, [r4, #12]
 801f79e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801f7a2:	f023 0303 	bic.w	r3, r3, #3
 801f7a6:	f1b8 0f02 	cmp.w	r8, #2
 801f7aa:	81a3      	strh	r3, [r4, #12]
 801f7ac:	d05f      	beq.n	801f86e <setvbuf+0x146>
 801f7ae:	ab01      	add	r3, sp, #4
 801f7b0:	466a      	mov	r2, sp
 801f7b2:	4621      	mov	r1, r4
 801f7b4:	4638      	mov	r0, r7
 801f7b6:	f002 ffa7 	bl	8022708 <__swhatbuf_r>
 801f7ba:	89a3      	ldrh	r3, [r4, #12]
 801f7bc:	4318      	orrs	r0, r3
 801f7be:	81a0      	strh	r0, [r4, #12]
 801f7c0:	bb2d      	cbnz	r5, 801f80e <setvbuf+0xe6>
 801f7c2:	9d00      	ldr	r5, [sp, #0]
 801f7c4:	4628      	mov	r0, r5
 801f7c6:	f7fe fe09 	bl	801e3dc <malloc>
 801f7ca:	4606      	mov	r6, r0
 801f7cc:	2800      	cmp	r0, #0
 801f7ce:	d150      	bne.n	801f872 <setvbuf+0x14a>
 801f7d0:	f8dd 9000 	ldr.w	r9, [sp]
 801f7d4:	45a9      	cmp	r9, r5
 801f7d6:	d13e      	bne.n	801f856 <setvbuf+0x12e>
 801f7d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f7dc:	2200      	movs	r2, #0
 801f7de:	60a2      	str	r2, [r4, #8]
 801f7e0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801f7e4:	6022      	str	r2, [r4, #0]
 801f7e6:	6122      	str	r2, [r4, #16]
 801f7e8:	2201      	movs	r2, #1
 801f7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f7ee:	6162      	str	r2, [r4, #20]
 801f7f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f7f2:	f043 0302 	orr.w	r3, r3, #2
 801f7f6:	07d1      	lsls	r1, r2, #31
 801f7f8:	81a3      	strh	r3, [r4, #12]
 801f7fa:	d404      	bmi.n	801f806 <setvbuf+0xde>
 801f7fc:	059b      	lsls	r3, r3, #22
 801f7fe:	d402      	bmi.n	801f806 <setvbuf+0xde>
 801f800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f802:	f000 fa93 	bl	801fd2c <__retarget_lock_release_recursive>
 801f806:	4628      	mov	r0, r5
 801f808:	b003      	add	sp, #12
 801f80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f80e:	2e00      	cmp	r6, #0
 801f810:	d0d8      	beq.n	801f7c4 <setvbuf+0x9c>
 801f812:	6a3b      	ldr	r3, [r7, #32]
 801f814:	b913      	cbnz	r3, 801f81c <setvbuf+0xf4>
 801f816:	4638      	mov	r0, r7
 801f818:	f7ff fe88 	bl	801f52c <__sinit>
 801f81c:	f1b8 0f01 	cmp.w	r8, #1
 801f820:	bf08      	it	eq
 801f822:	89a3      	ldrheq	r3, [r4, #12]
 801f824:	6026      	str	r6, [r4, #0]
 801f826:	bf04      	itt	eq
 801f828:	f043 0301 	orreq.w	r3, r3, #1
 801f82c:	81a3      	strheq	r3, [r4, #12]
 801f82e:	89a3      	ldrh	r3, [r4, #12]
 801f830:	f013 0208 	ands.w	r2, r3, #8
 801f834:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801f838:	d01d      	beq.n	801f876 <setvbuf+0x14e>
 801f83a:	07da      	lsls	r2, r3, #31
 801f83c:	bf41      	itttt	mi
 801f83e:	2200      	movmi	r2, #0
 801f840:	426d      	negmi	r5, r5
 801f842:	60a2      	strmi	r2, [r4, #8]
 801f844:	61a5      	strmi	r5, [r4, #24]
 801f846:	bf58      	it	pl
 801f848:	60a5      	strpl	r5, [r4, #8]
 801f84a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801f84c:	f015 0501 	ands.w	r5, r5, #1
 801f850:	d0d4      	beq.n	801f7fc <setvbuf+0xd4>
 801f852:	2500      	movs	r5, #0
 801f854:	e7d7      	b.n	801f806 <setvbuf+0xde>
 801f856:	4648      	mov	r0, r9
 801f858:	f7fe fdc0 	bl	801e3dc <malloc>
 801f85c:	4606      	mov	r6, r0
 801f85e:	2800      	cmp	r0, #0
 801f860:	d0ba      	beq.n	801f7d8 <setvbuf+0xb0>
 801f862:	89a3      	ldrh	r3, [r4, #12]
 801f864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f868:	81a3      	strh	r3, [r4, #12]
 801f86a:	464d      	mov	r5, r9
 801f86c:	e7d1      	b.n	801f812 <setvbuf+0xea>
 801f86e:	2500      	movs	r5, #0
 801f870:	e7b4      	b.n	801f7dc <setvbuf+0xb4>
 801f872:	46a9      	mov	r9, r5
 801f874:	e7f5      	b.n	801f862 <setvbuf+0x13a>
 801f876:	60a2      	str	r2, [r4, #8]
 801f878:	e7e7      	b.n	801f84a <setvbuf+0x122>
 801f87a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f87e:	e7c2      	b.n	801f806 <setvbuf+0xde>
 801f880:	200009a0 	.word	0x200009a0

0801f884 <sniprintf>:
 801f884:	b40c      	push	{r2, r3}
 801f886:	b530      	push	{r4, r5, lr}
 801f888:	4b17      	ldr	r3, [pc, #92]	; (801f8e8 <sniprintf+0x64>)
 801f88a:	1e0c      	subs	r4, r1, #0
 801f88c:	681d      	ldr	r5, [r3, #0]
 801f88e:	b09d      	sub	sp, #116	; 0x74
 801f890:	da08      	bge.n	801f8a4 <sniprintf+0x20>
 801f892:	238b      	movs	r3, #139	; 0x8b
 801f894:	602b      	str	r3, [r5, #0]
 801f896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f89a:	b01d      	add	sp, #116	; 0x74
 801f89c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f8a0:	b002      	add	sp, #8
 801f8a2:	4770      	bx	lr
 801f8a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f8a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f8ac:	bf14      	ite	ne
 801f8ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801f8b2:	4623      	moveq	r3, r4
 801f8b4:	9304      	str	r3, [sp, #16]
 801f8b6:	9307      	str	r3, [sp, #28]
 801f8b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f8bc:	9002      	str	r0, [sp, #8]
 801f8be:	9006      	str	r0, [sp, #24]
 801f8c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f8c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f8c6:	ab21      	add	r3, sp, #132	; 0x84
 801f8c8:	a902      	add	r1, sp, #8
 801f8ca:	4628      	mov	r0, r5
 801f8cc:	9301      	str	r3, [sp, #4]
 801f8ce:	f002 fc19 	bl	8022104 <_svfiprintf_r>
 801f8d2:	1c43      	adds	r3, r0, #1
 801f8d4:	bfbc      	itt	lt
 801f8d6:	238b      	movlt	r3, #139	; 0x8b
 801f8d8:	602b      	strlt	r3, [r5, #0]
 801f8da:	2c00      	cmp	r4, #0
 801f8dc:	d0dd      	beq.n	801f89a <sniprintf+0x16>
 801f8de:	9b02      	ldr	r3, [sp, #8]
 801f8e0:	2200      	movs	r2, #0
 801f8e2:	701a      	strb	r2, [r3, #0]
 801f8e4:	e7d9      	b.n	801f89a <sniprintf+0x16>
 801f8e6:	bf00      	nop
 801f8e8:	200009a0 	.word	0x200009a0

0801f8ec <siprintf>:
 801f8ec:	b40e      	push	{r1, r2, r3}
 801f8ee:	b500      	push	{lr}
 801f8f0:	b09c      	sub	sp, #112	; 0x70
 801f8f2:	ab1d      	add	r3, sp, #116	; 0x74
 801f8f4:	9002      	str	r0, [sp, #8]
 801f8f6:	9006      	str	r0, [sp, #24]
 801f8f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f8fc:	4809      	ldr	r0, [pc, #36]	; (801f924 <siprintf+0x38>)
 801f8fe:	9107      	str	r1, [sp, #28]
 801f900:	9104      	str	r1, [sp, #16]
 801f902:	4909      	ldr	r1, [pc, #36]	; (801f928 <siprintf+0x3c>)
 801f904:	f853 2b04 	ldr.w	r2, [r3], #4
 801f908:	9105      	str	r1, [sp, #20]
 801f90a:	6800      	ldr	r0, [r0, #0]
 801f90c:	9301      	str	r3, [sp, #4]
 801f90e:	a902      	add	r1, sp, #8
 801f910:	f002 fbf8 	bl	8022104 <_svfiprintf_r>
 801f914:	9b02      	ldr	r3, [sp, #8]
 801f916:	2200      	movs	r2, #0
 801f918:	701a      	strb	r2, [r3, #0]
 801f91a:	b01c      	add	sp, #112	; 0x70
 801f91c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f920:	b003      	add	sp, #12
 801f922:	4770      	bx	lr
 801f924:	200009a0 	.word	0x200009a0
 801f928:	ffff0208 	.word	0xffff0208

0801f92c <__sread>:
 801f92c:	b510      	push	{r4, lr}
 801f92e:	460c      	mov	r4, r1
 801f930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f934:	f000 f99a 	bl	801fc6c <_read_r>
 801f938:	2800      	cmp	r0, #0
 801f93a:	bfab      	itete	ge
 801f93c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f93e:	89a3      	ldrhlt	r3, [r4, #12]
 801f940:	181b      	addge	r3, r3, r0
 801f942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f946:	bfac      	ite	ge
 801f948:	6563      	strge	r3, [r4, #84]	; 0x54
 801f94a:	81a3      	strhlt	r3, [r4, #12]
 801f94c:	bd10      	pop	{r4, pc}

0801f94e <__swrite>:
 801f94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f952:	461f      	mov	r7, r3
 801f954:	898b      	ldrh	r3, [r1, #12]
 801f956:	05db      	lsls	r3, r3, #23
 801f958:	4605      	mov	r5, r0
 801f95a:	460c      	mov	r4, r1
 801f95c:	4616      	mov	r6, r2
 801f95e:	d505      	bpl.n	801f96c <__swrite+0x1e>
 801f960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f964:	2302      	movs	r3, #2
 801f966:	2200      	movs	r2, #0
 801f968:	f000 f96e 	bl	801fc48 <_lseek_r>
 801f96c:	89a3      	ldrh	r3, [r4, #12]
 801f96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f976:	81a3      	strh	r3, [r4, #12]
 801f978:	4632      	mov	r2, r6
 801f97a:	463b      	mov	r3, r7
 801f97c:	4628      	mov	r0, r5
 801f97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f982:	f000 b995 	b.w	801fcb0 <_write_r>

0801f986 <__sseek>:
 801f986:	b510      	push	{r4, lr}
 801f988:	460c      	mov	r4, r1
 801f98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f98e:	f000 f95b 	bl	801fc48 <_lseek_r>
 801f992:	1c43      	adds	r3, r0, #1
 801f994:	89a3      	ldrh	r3, [r4, #12]
 801f996:	bf15      	itete	ne
 801f998:	6560      	strne	r0, [r4, #84]	; 0x54
 801f99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f9a2:	81a3      	strheq	r3, [r4, #12]
 801f9a4:	bf18      	it	ne
 801f9a6:	81a3      	strhne	r3, [r4, #12]
 801f9a8:	bd10      	pop	{r4, pc}

0801f9aa <__sclose>:
 801f9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9ae:	f000 b93b 	b.w	801fc28 <_close_r>

0801f9b2 <_vsniprintf_r>:
 801f9b2:	b530      	push	{r4, r5, lr}
 801f9b4:	4614      	mov	r4, r2
 801f9b6:	2c00      	cmp	r4, #0
 801f9b8:	b09b      	sub	sp, #108	; 0x6c
 801f9ba:	4605      	mov	r5, r0
 801f9bc:	461a      	mov	r2, r3
 801f9be:	da05      	bge.n	801f9cc <_vsniprintf_r+0x1a>
 801f9c0:	238b      	movs	r3, #139	; 0x8b
 801f9c2:	6003      	str	r3, [r0, #0]
 801f9c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f9c8:	b01b      	add	sp, #108	; 0x6c
 801f9ca:	bd30      	pop	{r4, r5, pc}
 801f9cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f9d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f9d4:	bf14      	ite	ne
 801f9d6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801f9da:	4623      	moveq	r3, r4
 801f9dc:	9302      	str	r3, [sp, #8]
 801f9de:	9305      	str	r3, [sp, #20]
 801f9e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f9e4:	9100      	str	r1, [sp, #0]
 801f9e6:	9104      	str	r1, [sp, #16]
 801f9e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f9ec:	4669      	mov	r1, sp
 801f9ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f9f0:	f002 fb88 	bl	8022104 <_svfiprintf_r>
 801f9f4:	1c43      	adds	r3, r0, #1
 801f9f6:	bfbc      	itt	lt
 801f9f8:	238b      	movlt	r3, #139	; 0x8b
 801f9fa:	602b      	strlt	r3, [r5, #0]
 801f9fc:	2c00      	cmp	r4, #0
 801f9fe:	d0e3      	beq.n	801f9c8 <_vsniprintf_r+0x16>
 801fa00:	9b00      	ldr	r3, [sp, #0]
 801fa02:	2200      	movs	r2, #0
 801fa04:	701a      	strb	r2, [r3, #0]
 801fa06:	e7df      	b.n	801f9c8 <_vsniprintf_r+0x16>

0801fa08 <vsniprintf>:
 801fa08:	b507      	push	{r0, r1, r2, lr}
 801fa0a:	9300      	str	r3, [sp, #0]
 801fa0c:	4613      	mov	r3, r2
 801fa0e:	460a      	mov	r2, r1
 801fa10:	4601      	mov	r1, r0
 801fa12:	4803      	ldr	r0, [pc, #12]	; (801fa20 <vsniprintf+0x18>)
 801fa14:	6800      	ldr	r0, [r0, #0]
 801fa16:	f7ff ffcc 	bl	801f9b2 <_vsniprintf_r>
 801fa1a:	b003      	add	sp, #12
 801fa1c:	f85d fb04 	ldr.w	pc, [sp], #4
 801fa20:	200009a0 	.word	0x200009a0

0801fa24 <__swbuf_r>:
 801fa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa26:	460e      	mov	r6, r1
 801fa28:	4614      	mov	r4, r2
 801fa2a:	4605      	mov	r5, r0
 801fa2c:	b118      	cbz	r0, 801fa36 <__swbuf_r+0x12>
 801fa2e:	6a03      	ldr	r3, [r0, #32]
 801fa30:	b90b      	cbnz	r3, 801fa36 <__swbuf_r+0x12>
 801fa32:	f7ff fd7b 	bl	801f52c <__sinit>
 801fa36:	69a3      	ldr	r3, [r4, #24]
 801fa38:	60a3      	str	r3, [r4, #8]
 801fa3a:	89a3      	ldrh	r3, [r4, #12]
 801fa3c:	071a      	lsls	r2, r3, #28
 801fa3e:	d525      	bpl.n	801fa8c <__swbuf_r+0x68>
 801fa40:	6923      	ldr	r3, [r4, #16]
 801fa42:	b31b      	cbz	r3, 801fa8c <__swbuf_r+0x68>
 801fa44:	6823      	ldr	r3, [r4, #0]
 801fa46:	6922      	ldr	r2, [r4, #16]
 801fa48:	1a98      	subs	r0, r3, r2
 801fa4a:	6963      	ldr	r3, [r4, #20]
 801fa4c:	b2f6      	uxtb	r6, r6
 801fa4e:	4283      	cmp	r3, r0
 801fa50:	4637      	mov	r7, r6
 801fa52:	dc04      	bgt.n	801fa5e <__swbuf_r+0x3a>
 801fa54:	4621      	mov	r1, r4
 801fa56:	4628      	mov	r0, r5
 801fa58:	f002 fe1c 	bl	8022694 <_fflush_r>
 801fa5c:	b9e0      	cbnz	r0, 801fa98 <__swbuf_r+0x74>
 801fa5e:	68a3      	ldr	r3, [r4, #8]
 801fa60:	3b01      	subs	r3, #1
 801fa62:	60a3      	str	r3, [r4, #8]
 801fa64:	6823      	ldr	r3, [r4, #0]
 801fa66:	1c5a      	adds	r2, r3, #1
 801fa68:	6022      	str	r2, [r4, #0]
 801fa6a:	701e      	strb	r6, [r3, #0]
 801fa6c:	6962      	ldr	r2, [r4, #20]
 801fa6e:	1c43      	adds	r3, r0, #1
 801fa70:	429a      	cmp	r2, r3
 801fa72:	d004      	beq.n	801fa7e <__swbuf_r+0x5a>
 801fa74:	89a3      	ldrh	r3, [r4, #12]
 801fa76:	07db      	lsls	r3, r3, #31
 801fa78:	d506      	bpl.n	801fa88 <__swbuf_r+0x64>
 801fa7a:	2e0a      	cmp	r6, #10
 801fa7c:	d104      	bne.n	801fa88 <__swbuf_r+0x64>
 801fa7e:	4621      	mov	r1, r4
 801fa80:	4628      	mov	r0, r5
 801fa82:	f002 fe07 	bl	8022694 <_fflush_r>
 801fa86:	b938      	cbnz	r0, 801fa98 <__swbuf_r+0x74>
 801fa88:	4638      	mov	r0, r7
 801fa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa8c:	4621      	mov	r1, r4
 801fa8e:	4628      	mov	r0, r5
 801fa90:	f000 f806 	bl	801faa0 <__swsetup_r>
 801fa94:	2800      	cmp	r0, #0
 801fa96:	d0d5      	beq.n	801fa44 <__swbuf_r+0x20>
 801fa98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fa9c:	e7f4      	b.n	801fa88 <__swbuf_r+0x64>
	...

0801faa0 <__swsetup_r>:
 801faa0:	b538      	push	{r3, r4, r5, lr}
 801faa2:	4b2a      	ldr	r3, [pc, #168]	; (801fb4c <__swsetup_r+0xac>)
 801faa4:	4605      	mov	r5, r0
 801faa6:	6818      	ldr	r0, [r3, #0]
 801faa8:	460c      	mov	r4, r1
 801faaa:	b118      	cbz	r0, 801fab4 <__swsetup_r+0x14>
 801faac:	6a03      	ldr	r3, [r0, #32]
 801faae:	b90b      	cbnz	r3, 801fab4 <__swsetup_r+0x14>
 801fab0:	f7ff fd3c 	bl	801f52c <__sinit>
 801fab4:	89a3      	ldrh	r3, [r4, #12]
 801fab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801faba:	0718      	lsls	r0, r3, #28
 801fabc:	d422      	bmi.n	801fb04 <__swsetup_r+0x64>
 801fabe:	06d9      	lsls	r1, r3, #27
 801fac0:	d407      	bmi.n	801fad2 <__swsetup_r+0x32>
 801fac2:	2309      	movs	r3, #9
 801fac4:	602b      	str	r3, [r5, #0]
 801fac6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801faca:	81a3      	strh	r3, [r4, #12]
 801facc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fad0:	e034      	b.n	801fb3c <__swsetup_r+0x9c>
 801fad2:	0758      	lsls	r0, r3, #29
 801fad4:	d512      	bpl.n	801fafc <__swsetup_r+0x5c>
 801fad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fad8:	b141      	cbz	r1, 801faec <__swsetup_r+0x4c>
 801fada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fade:	4299      	cmp	r1, r3
 801fae0:	d002      	beq.n	801fae8 <__swsetup_r+0x48>
 801fae2:	4628      	mov	r0, r5
 801fae4:	f000 ff60 	bl	80209a8 <_free_r>
 801fae8:	2300      	movs	r3, #0
 801faea:	6363      	str	r3, [r4, #52]	; 0x34
 801faec:	89a3      	ldrh	r3, [r4, #12]
 801faee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801faf2:	81a3      	strh	r3, [r4, #12]
 801faf4:	2300      	movs	r3, #0
 801faf6:	6063      	str	r3, [r4, #4]
 801faf8:	6923      	ldr	r3, [r4, #16]
 801fafa:	6023      	str	r3, [r4, #0]
 801fafc:	89a3      	ldrh	r3, [r4, #12]
 801fafe:	f043 0308 	orr.w	r3, r3, #8
 801fb02:	81a3      	strh	r3, [r4, #12]
 801fb04:	6923      	ldr	r3, [r4, #16]
 801fb06:	b94b      	cbnz	r3, 801fb1c <__swsetup_r+0x7c>
 801fb08:	89a3      	ldrh	r3, [r4, #12]
 801fb0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fb0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fb12:	d003      	beq.n	801fb1c <__swsetup_r+0x7c>
 801fb14:	4621      	mov	r1, r4
 801fb16:	4628      	mov	r0, r5
 801fb18:	f002 fe1c 	bl	8022754 <__smakebuf_r>
 801fb1c:	89a0      	ldrh	r0, [r4, #12]
 801fb1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb22:	f010 0301 	ands.w	r3, r0, #1
 801fb26:	d00a      	beq.n	801fb3e <__swsetup_r+0x9e>
 801fb28:	2300      	movs	r3, #0
 801fb2a:	60a3      	str	r3, [r4, #8]
 801fb2c:	6963      	ldr	r3, [r4, #20]
 801fb2e:	425b      	negs	r3, r3
 801fb30:	61a3      	str	r3, [r4, #24]
 801fb32:	6923      	ldr	r3, [r4, #16]
 801fb34:	b943      	cbnz	r3, 801fb48 <__swsetup_r+0xa8>
 801fb36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fb3a:	d1c4      	bne.n	801fac6 <__swsetup_r+0x26>
 801fb3c:	bd38      	pop	{r3, r4, r5, pc}
 801fb3e:	0781      	lsls	r1, r0, #30
 801fb40:	bf58      	it	pl
 801fb42:	6963      	ldrpl	r3, [r4, #20]
 801fb44:	60a3      	str	r3, [r4, #8]
 801fb46:	e7f4      	b.n	801fb32 <__swsetup_r+0x92>
 801fb48:	2000      	movs	r0, #0
 801fb4a:	e7f7      	b.n	801fb3c <__swsetup_r+0x9c>
 801fb4c:	200009a0 	.word	0x200009a0

0801fb50 <memcmp>:
 801fb50:	b510      	push	{r4, lr}
 801fb52:	3901      	subs	r1, #1
 801fb54:	4402      	add	r2, r0
 801fb56:	4290      	cmp	r0, r2
 801fb58:	d101      	bne.n	801fb5e <memcmp+0xe>
 801fb5a:	2000      	movs	r0, #0
 801fb5c:	e005      	b.n	801fb6a <memcmp+0x1a>
 801fb5e:	7803      	ldrb	r3, [r0, #0]
 801fb60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fb64:	42a3      	cmp	r3, r4
 801fb66:	d001      	beq.n	801fb6c <memcmp+0x1c>
 801fb68:	1b18      	subs	r0, r3, r4
 801fb6a:	bd10      	pop	{r4, pc}
 801fb6c:	3001      	adds	r0, #1
 801fb6e:	e7f2      	b.n	801fb56 <memcmp+0x6>

0801fb70 <memmove>:
 801fb70:	4288      	cmp	r0, r1
 801fb72:	b510      	push	{r4, lr}
 801fb74:	eb01 0402 	add.w	r4, r1, r2
 801fb78:	d902      	bls.n	801fb80 <memmove+0x10>
 801fb7a:	4284      	cmp	r4, r0
 801fb7c:	4623      	mov	r3, r4
 801fb7e:	d807      	bhi.n	801fb90 <memmove+0x20>
 801fb80:	1e43      	subs	r3, r0, #1
 801fb82:	42a1      	cmp	r1, r4
 801fb84:	d008      	beq.n	801fb98 <memmove+0x28>
 801fb86:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fb8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fb8e:	e7f8      	b.n	801fb82 <memmove+0x12>
 801fb90:	4402      	add	r2, r0
 801fb92:	4601      	mov	r1, r0
 801fb94:	428a      	cmp	r2, r1
 801fb96:	d100      	bne.n	801fb9a <memmove+0x2a>
 801fb98:	bd10      	pop	{r4, pc}
 801fb9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fb9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fba2:	e7f7      	b.n	801fb94 <memmove+0x24>

0801fba4 <memset>:
 801fba4:	4402      	add	r2, r0
 801fba6:	4603      	mov	r3, r0
 801fba8:	4293      	cmp	r3, r2
 801fbaa:	d100      	bne.n	801fbae <memset+0xa>
 801fbac:	4770      	bx	lr
 801fbae:	f803 1b01 	strb.w	r1, [r3], #1
 801fbb2:	e7f9      	b.n	801fba8 <memset+0x4>

0801fbb4 <strchr>:
 801fbb4:	b2c9      	uxtb	r1, r1
 801fbb6:	4603      	mov	r3, r0
 801fbb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fbbc:	b11a      	cbz	r2, 801fbc6 <strchr+0x12>
 801fbbe:	428a      	cmp	r2, r1
 801fbc0:	d1f9      	bne.n	801fbb6 <strchr+0x2>
 801fbc2:	4618      	mov	r0, r3
 801fbc4:	4770      	bx	lr
 801fbc6:	2900      	cmp	r1, #0
 801fbc8:	bf18      	it	ne
 801fbca:	2300      	movne	r3, #0
 801fbcc:	e7f9      	b.n	801fbc2 <strchr+0xe>

0801fbce <strncmp>:
 801fbce:	b510      	push	{r4, lr}
 801fbd0:	b16a      	cbz	r2, 801fbee <strncmp+0x20>
 801fbd2:	3901      	subs	r1, #1
 801fbd4:	1884      	adds	r4, r0, r2
 801fbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fbda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801fbde:	429a      	cmp	r2, r3
 801fbe0:	d103      	bne.n	801fbea <strncmp+0x1c>
 801fbe2:	42a0      	cmp	r0, r4
 801fbe4:	d001      	beq.n	801fbea <strncmp+0x1c>
 801fbe6:	2a00      	cmp	r2, #0
 801fbe8:	d1f5      	bne.n	801fbd6 <strncmp+0x8>
 801fbea:	1ad0      	subs	r0, r2, r3
 801fbec:	bd10      	pop	{r4, pc}
 801fbee:	4610      	mov	r0, r2
 801fbf0:	e7fc      	b.n	801fbec <strncmp+0x1e>

0801fbf2 <strstr>:
 801fbf2:	780a      	ldrb	r2, [r1, #0]
 801fbf4:	b570      	push	{r4, r5, r6, lr}
 801fbf6:	b96a      	cbnz	r2, 801fc14 <strstr+0x22>
 801fbf8:	bd70      	pop	{r4, r5, r6, pc}
 801fbfa:	429a      	cmp	r2, r3
 801fbfc:	d109      	bne.n	801fc12 <strstr+0x20>
 801fbfe:	460c      	mov	r4, r1
 801fc00:	4605      	mov	r5, r0
 801fc02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d0f6      	beq.n	801fbf8 <strstr+0x6>
 801fc0a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801fc0e:	429e      	cmp	r6, r3
 801fc10:	d0f7      	beq.n	801fc02 <strstr+0x10>
 801fc12:	3001      	adds	r0, #1
 801fc14:	7803      	ldrb	r3, [r0, #0]
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d1ef      	bne.n	801fbfa <strstr+0x8>
 801fc1a:	4618      	mov	r0, r3
 801fc1c:	e7ec      	b.n	801fbf8 <strstr+0x6>
	...

0801fc20 <_localeconv_r>:
 801fc20:	4800      	ldr	r0, [pc, #0]	; (801fc24 <_localeconv_r+0x4>)
 801fc22:	4770      	bx	lr
 801fc24:	20000a94 	.word	0x20000a94

0801fc28 <_close_r>:
 801fc28:	b538      	push	{r3, r4, r5, lr}
 801fc2a:	4d06      	ldr	r5, [pc, #24]	; (801fc44 <_close_r+0x1c>)
 801fc2c:	2300      	movs	r3, #0
 801fc2e:	4604      	mov	r4, r0
 801fc30:	4608      	mov	r0, r1
 801fc32:	602b      	str	r3, [r5, #0]
 801fc34:	f7e3 f813 	bl	8002c5e <_close>
 801fc38:	1c43      	adds	r3, r0, #1
 801fc3a:	d102      	bne.n	801fc42 <_close_r+0x1a>
 801fc3c:	682b      	ldr	r3, [r5, #0]
 801fc3e:	b103      	cbz	r3, 801fc42 <_close_r+0x1a>
 801fc40:	6023      	str	r3, [r4, #0]
 801fc42:	bd38      	pop	{r3, r4, r5, pc}
 801fc44:	20017018 	.word	0x20017018

0801fc48 <_lseek_r>:
 801fc48:	b538      	push	{r3, r4, r5, lr}
 801fc4a:	4d07      	ldr	r5, [pc, #28]	; (801fc68 <_lseek_r+0x20>)
 801fc4c:	4604      	mov	r4, r0
 801fc4e:	4608      	mov	r0, r1
 801fc50:	4611      	mov	r1, r2
 801fc52:	2200      	movs	r2, #0
 801fc54:	602a      	str	r2, [r5, #0]
 801fc56:	461a      	mov	r2, r3
 801fc58:	f7e3 f828 	bl	8002cac <_lseek>
 801fc5c:	1c43      	adds	r3, r0, #1
 801fc5e:	d102      	bne.n	801fc66 <_lseek_r+0x1e>
 801fc60:	682b      	ldr	r3, [r5, #0]
 801fc62:	b103      	cbz	r3, 801fc66 <_lseek_r+0x1e>
 801fc64:	6023      	str	r3, [r4, #0]
 801fc66:	bd38      	pop	{r3, r4, r5, pc}
 801fc68:	20017018 	.word	0x20017018

0801fc6c <_read_r>:
 801fc6c:	b538      	push	{r3, r4, r5, lr}
 801fc6e:	4d07      	ldr	r5, [pc, #28]	; (801fc8c <_read_r+0x20>)
 801fc70:	4604      	mov	r4, r0
 801fc72:	4608      	mov	r0, r1
 801fc74:	4611      	mov	r1, r2
 801fc76:	2200      	movs	r2, #0
 801fc78:	602a      	str	r2, [r5, #0]
 801fc7a:	461a      	mov	r2, r3
 801fc7c:	f7e2 ffb6 	bl	8002bec <_read>
 801fc80:	1c43      	adds	r3, r0, #1
 801fc82:	d102      	bne.n	801fc8a <_read_r+0x1e>
 801fc84:	682b      	ldr	r3, [r5, #0]
 801fc86:	b103      	cbz	r3, 801fc8a <_read_r+0x1e>
 801fc88:	6023      	str	r3, [r4, #0]
 801fc8a:	bd38      	pop	{r3, r4, r5, pc}
 801fc8c:	20017018 	.word	0x20017018

0801fc90 <_sbrk_r>:
 801fc90:	b538      	push	{r3, r4, r5, lr}
 801fc92:	4d06      	ldr	r5, [pc, #24]	; (801fcac <_sbrk_r+0x1c>)
 801fc94:	2300      	movs	r3, #0
 801fc96:	4604      	mov	r4, r0
 801fc98:	4608      	mov	r0, r1
 801fc9a:	602b      	str	r3, [r5, #0]
 801fc9c:	f7e3 f814 	bl	8002cc8 <_sbrk>
 801fca0:	1c43      	adds	r3, r0, #1
 801fca2:	d102      	bne.n	801fcaa <_sbrk_r+0x1a>
 801fca4:	682b      	ldr	r3, [r5, #0]
 801fca6:	b103      	cbz	r3, 801fcaa <_sbrk_r+0x1a>
 801fca8:	6023      	str	r3, [r4, #0]
 801fcaa:	bd38      	pop	{r3, r4, r5, pc}
 801fcac:	20017018 	.word	0x20017018

0801fcb0 <_write_r>:
 801fcb0:	b538      	push	{r3, r4, r5, lr}
 801fcb2:	4d07      	ldr	r5, [pc, #28]	; (801fcd0 <_write_r+0x20>)
 801fcb4:	4604      	mov	r4, r0
 801fcb6:	4608      	mov	r0, r1
 801fcb8:	4611      	mov	r1, r2
 801fcba:	2200      	movs	r2, #0
 801fcbc:	602a      	str	r2, [r5, #0]
 801fcbe:	461a      	mov	r2, r3
 801fcc0:	f7e2 ffb1 	bl	8002c26 <_write>
 801fcc4:	1c43      	adds	r3, r0, #1
 801fcc6:	d102      	bne.n	801fcce <_write_r+0x1e>
 801fcc8:	682b      	ldr	r3, [r5, #0]
 801fcca:	b103      	cbz	r3, 801fcce <_write_r+0x1e>
 801fccc:	6023      	str	r3, [r4, #0]
 801fcce:	bd38      	pop	{r3, r4, r5, pc}
 801fcd0:	20017018 	.word	0x20017018

0801fcd4 <__errno>:
 801fcd4:	4b01      	ldr	r3, [pc, #4]	; (801fcdc <__errno+0x8>)
 801fcd6:	6818      	ldr	r0, [r3, #0]
 801fcd8:	4770      	bx	lr
 801fcda:	bf00      	nop
 801fcdc:	200009a0 	.word	0x200009a0

0801fce0 <__libc_init_array>:
 801fce0:	b570      	push	{r4, r5, r6, lr}
 801fce2:	4d0d      	ldr	r5, [pc, #52]	; (801fd18 <__libc_init_array+0x38>)
 801fce4:	4c0d      	ldr	r4, [pc, #52]	; (801fd1c <__libc_init_array+0x3c>)
 801fce6:	1b64      	subs	r4, r4, r5
 801fce8:	10a4      	asrs	r4, r4, #2
 801fcea:	2600      	movs	r6, #0
 801fcec:	42a6      	cmp	r6, r4
 801fcee:	d109      	bne.n	801fd04 <__libc_init_array+0x24>
 801fcf0:	4d0b      	ldr	r5, [pc, #44]	; (801fd20 <__libc_init_array+0x40>)
 801fcf2:	4c0c      	ldr	r4, [pc, #48]	; (801fd24 <__libc_init_array+0x44>)
 801fcf4:	f003 f954 	bl	8022fa0 <_init>
 801fcf8:	1b64      	subs	r4, r4, r5
 801fcfa:	10a4      	asrs	r4, r4, #2
 801fcfc:	2600      	movs	r6, #0
 801fcfe:	42a6      	cmp	r6, r4
 801fd00:	d105      	bne.n	801fd0e <__libc_init_array+0x2e>
 801fd02:	bd70      	pop	{r4, r5, r6, pc}
 801fd04:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd08:	4798      	blx	r3
 801fd0a:	3601      	adds	r6, #1
 801fd0c:	e7ee      	b.n	801fcec <__libc_init_array+0xc>
 801fd0e:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd12:	4798      	blx	r3
 801fd14:	3601      	adds	r6, #1
 801fd16:	e7f2      	b.n	801fcfe <__libc_init_array+0x1e>
 801fd18:	08024d34 	.word	0x08024d34
 801fd1c:	08024d34 	.word	0x08024d34
 801fd20:	08024d34 	.word	0x08024d34
 801fd24:	08024d4c 	.word	0x08024d4c

0801fd28 <__retarget_lock_init_recursive>:
 801fd28:	4770      	bx	lr

0801fd2a <__retarget_lock_acquire_recursive>:
 801fd2a:	4770      	bx	lr

0801fd2c <__retarget_lock_release_recursive>:
 801fd2c:	4770      	bx	lr

0801fd2e <strcpy>:
 801fd2e:	4603      	mov	r3, r0
 801fd30:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fd34:	f803 2b01 	strb.w	r2, [r3], #1
 801fd38:	2a00      	cmp	r2, #0
 801fd3a:	d1f9      	bne.n	801fd30 <strcpy+0x2>
 801fd3c:	4770      	bx	lr

0801fd3e <memcpy>:
 801fd3e:	440a      	add	r2, r1
 801fd40:	4291      	cmp	r1, r2
 801fd42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801fd46:	d100      	bne.n	801fd4a <memcpy+0xc>
 801fd48:	4770      	bx	lr
 801fd4a:	b510      	push	{r4, lr}
 801fd4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fd50:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fd54:	4291      	cmp	r1, r2
 801fd56:	d1f9      	bne.n	801fd4c <memcpy+0xe>
 801fd58:	bd10      	pop	{r4, pc}
	...

0801fd5c <nanf>:
 801fd5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fd64 <nanf+0x8>
 801fd60:	4770      	bx	lr
 801fd62:	bf00      	nop
 801fd64:	7fc00000 	.word	0x7fc00000

0801fd68 <__assert_func>:
 801fd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fd6a:	4614      	mov	r4, r2
 801fd6c:	461a      	mov	r2, r3
 801fd6e:	4b09      	ldr	r3, [pc, #36]	; (801fd94 <__assert_func+0x2c>)
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	4605      	mov	r5, r0
 801fd74:	68d8      	ldr	r0, [r3, #12]
 801fd76:	b14c      	cbz	r4, 801fd8c <__assert_func+0x24>
 801fd78:	4b07      	ldr	r3, [pc, #28]	; (801fd98 <__assert_func+0x30>)
 801fd7a:	9100      	str	r1, [sp, #0]
 801fd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fd80:	4906      	ldr	r1, [pc, #24]	; (801fd9c <__assert_func+0x34>)
 801fd82:	462b      	mov	r3, r5
 801fd84:	f002 fcae 	bl	80226e4 <fiprintf>
 801fd88:	f002 fd4a 	bl	8022820 <abort>
 801fd8c:	4b04      	ldr	r3, [pc, #16]	; (801fda0 <__assert_func+0x38>)
 801fd8e:	461c      	mov	r4, r3
 801fd90:	e7f3      	b.n	801fd7a <__assert_func+0x12>
 801fd92:	bf00      	nop
 801fd94:	200009a0 	.word	0x200009a0
 801fd98:	08024a55 	.word	0x08024a55
 801fd9c:	08024a62 	.word	0x08024a62
 801fda0:	08024a90 	.word	0x08024a90

0801fda4 <quorem>:
 801fda4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fda8:	6903      	ldr	r3, [r0, #16]
 801fdaa:	690c      	ldr	r4, [r1, #16]
 801fdac:	42a3      	cmp	r3, r4
 801fdae:	4607      	mov	r7, r0
 801fdb0:	db7e      	blt.n	801feb0 <quorem+0x10c>
 801fdb2:	3c01      	subs	r4, #1
 801fdb4:	f101 0814 	add.w	r8, r1, #20
 801fdb8:	f100 0514 	add.w	r5, r0, #20
 801fdbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fdc0:	9301      	str	r3, [sp, #4]
 801fdc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fdc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fdca:	3301      	adds	r3, #1
 801fdcc:	429a      	cmp	r2, r3
 801fdce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fdd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fdd6:	fbb2 f6f3 	udiv	r6, r2, r3
 801fdda:	d331      	bcc.n	801fe40 <quorem+0x9c>
 801fddc:	f04f 0e00 	mov.w	lr, #0
 801fde0:	4640      	mov	r0, r8
 801fde2:	46ac      	mov	ip, r5
 801fde4:	46f2      	mov	sl, lr
 801fde6:	f850 2b04 	ldr.w	r2, [r0], #4
 801fdea:	b293      	uxth	r3, r2
 801fdec:	fb06 e303 	mla	r3, r6, r3, lr
 801fdf0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fdf4:	0c1a      	lsrs	r2, r3, #16
 801fdf6:	b29b      	uxth	r3, r3
 801fdf8:	ebaa 0303 	sub.w	r3, sl, r3
 801fdfc:	f8dc a000 	ldr.w	sl, [ip]
 801fe00:	fa13 f38a 	uxtah	r3, r3, sl
 801fe04:	fb06 220e 	mla	r2, r6, lr, r2
 801fe08:	9300      	str	r3, [sp, #0]
 801fe0a:	9b00      	ldr	r3, [sp, #0]
 801fe0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fe10:	b292      	uxth	r2, r2
 801fe12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fe16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fe1a:	f8bd 3000 	ldrh.w	r3, [sp]
 801fe1e:	4581      	cmp	r9, r0
 801fe20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fe24:	f84c 3b04 	str.w	r3, [ip], #4
 801fe28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fe2c:	d2db      	bcs.n	801fde6 <quorem+0x42>
 801fe2e:	f855 300b 	ldr.w	r3, [r5, fp]
 801fe32:	b92b      	cbnz	r3, 801fe40 <quorem+0x9c>
 801fe34:	9b01      	ldr	r3, [sp, #4]
 801fe36:	3b04      	subs	r3, #4
 801fe38:	429d      	cmp	r5, r3
 801fe3a:	461a      	mov	r2, r3
 801fe3c:	d32c      	bcc.n	801fe98 <quorem+0xf4>
 801fe3e:	613c      	str	r4, [r7, #16]
 801fe40:	4638      	mov	r0, r7
 801fe42:	f001 f8c3 	bl	8020fcc <__mcmp>
 801fe46:	2800      	cmp	r0, #0
 801fe48:	db22      	blt.n	801fe90 <quorem+0xec>
 801fe4a:	3601      	adds	r6, #1
 801fe4c:	4629      	mov	r1, r5
 801fe4e:	2000      	movs	r0, #0
 801fe50:	f858 2b04 	ldr.w	r2, [r8], #4
 801fe54:	f8d1 c000 	ldr.w	ip, [r1]
 801fe58:	b293      	uxth	r3, r2
 801fe5a:	1ac3      	subs	r3, r0, r3
 801fe5c:	0c12      	lsrs	r2, r2, #16
 801fe5e:	fa13 f38c 	uxtah	r3, r3, ip
 801fe62:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801fe66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fe6a:	b29b      	uxth	r3, r3
 801fe6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fe70:	45c1      	cmp	r9, r8
 801fe72:	f841 3b04 	str.w	r3, [r1], #4
 801fe76:	ea4f 4022 	mov.w	r0, r2, asr #16
 801fe7a:	d2e9      	bcs.n	801fe50 <quorem+0xac>
 801fe7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fe80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fe84:	b922      	cbnz	r2, 801fe90 <quorem+0xec>
 801fe86:	3b04      	subs	r3, #4
 801fe88:	429d      	cmp	r5, r3
 801fe8a:	461a      	mov	r2, r3
 801fe8c:	d30a      	bcc.n	801fea4 <quorem+0x100>
 801fe8e:	613c      	str	r4, [r7, #16]
 801fe90:	4630      	mov	r0, r6
 801fe92:	b003      	add	sp, #12
 801fe94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe98:	6812      	ldr	r2, [r2, #0]
 801fe9a:	3b04      	subs	r3, #4
 801fe9c:	2a00      	cmp	r2, #0
 801fe9e:	d1ce      	bne.n	801fe3e <quorem+0x9a>
 801fea0:	3c01      	subs	r4, #1
 801fea2:	e7c9      	b.n	801fe38 <quorem+0x94>
 801fea4:	6812      	ldr	r2, [r2, #0]
 801fea6:	3b04      	subs	r3, #4
 801fea8:	2a00      	cmp	r2, #0
 801feaa:	d1f0      	bne.n	801fe8e <quorem+0xea>
 801feac:	3c01      	subs	r4, #1
 801feae:	e7eb      	b.n	801fe88 <quorem+0xe4>
 801feb0:	2000      	movs	r0, #0
 801feb2:	e7ee      	b.n	801fe92 <quorem+0xee>
 801feb4:	0000      	movs	r0, r0
	...

0801feb8 <_dtoa_r>:
 801feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801febc:	ed2d 8b02 	vpush	{d8}
 801fec0:	69c5      	ldr	r5, [r0, #28]
 801fec2:	b091      	sub	sp, #68	; 0x44
 801fec4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801fec8:	ec59 8b10 	vmov	r8, r9, d0
 801fecc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801fece:	9106      	str	r1, [sp, #24]
 801fed0:	4606      	mov	r6, r0
 801fed2:	9208      	str	r2, [sp, #32]
 801fed4:	930c      	str	r3, [sp, #48]	; 0x30
 801fed6:	b975      	cbnz	r5, 801fef6 <_dtoa_r+0x3e>
 801fed8:	2010      	movs	r0, #16
 801feda:	f7fe fa7f 	bl	801e3dc <malloc>
 801fede:	4602      	mov	r2, r0
 801fee0:	61f0      	str	r0, [r6, #28]
 801fee2:	b920      	cbnz	r0, 801feee <_dtoa_r+0x36>
 801fee4:	4ba6      	ldr	r3, [pc, #664]	; (8020180 <_dtoa_r+0x2c8>)
 801fee6:	21ef      	movs	r1, #239	; 0xef
 801fee8:	48a6      	ldr	r0, [pc, #664]	; (8020184 <_dtoa_r+0x2cc>)
 801feea:	f7ff ff3d 	bl	801fd68 <__assert_func>
 801feee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fef2:	6005      	str	r5, [r0, #0]
 801fef4:	60c5      	str	r5, [r0, #12]
 801fef6:	69f3      	ldr	r3, [r6, #28]
 801fef8:	6819      	ldr	r1, [r3, #0]
 801fefa:	b151      	cbz	r1, 801ff12 <_dtoa_r+0x5a>
 801fefc:	685a      	ldr	r2, [r3, #4]
 801fefe:	604a      	str	r2, [r1, #4]
 801ff00:	2301      	movs	r3, #1
 801ff02:	4093      	lsls	r3, r2
 801ff04:	608b      	str	r3, [r1, #8]
 801ff06:	4630      	mov	r0, r6
 801ff08:	f000 fdda 	bl	8020ac0 <_Bfree>
 801ff0c:	69f3      	ldr	r3, [r6, #28]
 801ff0e:	2200      	movs	r2, #0
 801ff10:	601a      	str	r2, [r3, #0]
 801ff12:	f1b9 0300 	subs.w	r3, r9, #0
 801ff16:	bfbb      	ittet	lt
 801ff18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ff1c:	9303      	strlt	r3, [sp, #12]
 801ff1e:	2300      	movge	r3, #0
 801ff20:	2201      	movlt	r2, #1
 801ff22:	bfac      	ite	ge
 801ff24:	6023      	strge	r3, [r4, #0]
 801ff26:	6022      	strlt	r2, [r4, #0]
 801ff28:	4b97      	ldr	r3, [pc, #604]	; (8020188 <_dtoa_r+0x2d0>)
 801ff2a:	9c03      	ldr	r4, [sp, #12]
 801ff2c:	43a3      	bics	r3, r4
 801ff2e:	d11c      	bne.n	801ff6a <_dtoa_r+0xb2>
 801ff30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ff32:	f242 730f 	movw	r3, #9999	; 0x270f
 801ff36:	6013      	str	r3, [r2, #0]
 801ff38:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801ff3c:	ea53 0308 	orrs.w	r3, r3, r8
 801ff40:	f000 84fb 	beq.w	802093a <_dtoa_r+0xa82>
 801ff44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ff46:	b963      	cbnz	r3, 801ff62 <_dtoa_r+0xaa>
 801ff48:	4b90      	ldr	r3, [pc, #576]	; (802018c <_dtoa_r+0x2d4>)
 801ff4a:	e020      	b.n	801ff8e <_dtoa_r+0xd6>
 801ff4c:	4b90      	ldr	r3, [pc, #576]	; (8020190 <_dtoa_r+0x2d8>)
 801ff4e:	9301      	str	r3, [sp, #4]
 801ff50:	3308      	adds	r3, #8
 801ff52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ff54:	6013      	str	r3, [r2, #0]
 801ff56:	9801      	ldr	r0, [sp, #4]
 801ff58:	b011      	add	sp, #68	; 0x44
 801ff5a:	ecbd 8b02 	vpop	{d8}
 801ff5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff62:	4b8a      	ldr	r3, [pc, #552]	; (802018c <_dtoa_r+0x2d4>)
 801ff64:	9301      	str	r3, [sp, #4]
 801ff66:	3303      	adds	r3, #3
 801ff68:	e7f3      	b.n	801ff52 <_dtoa_r+0x9a>
 801ff6a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ff6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ff72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff76:	d10c      	bne.n	801ff92 <_dtoa_r+0xda>
 801ff78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ff7a:	2301      	movs	r3, #1
 801ff7c:	6013      	str	r3, [r2, #0]
 801ff7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	f000 84d7 	beq.w	8020934 <_dtoa_r+0xa7c>
 801ff86:	4b83      	ldr	r3, [pc, #524]	; (8020194 <_dtoa_r+0x2dc>)
 801ff88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ff8a:	6013      	str	r3, [r2, #0]
 801ff8c:	3b01      	subs	r3, #1
 801ff8e:	9301      	str	r3, [sp, #4]
 801ff90:	e7e1      	b.n	801ff56 <_dtoa_r+0x9e>
 801ff92:	aa0e      	add	r2, sp, #56	; 0x38
 801ff94:	a90f      	add	r1, sp, #60	; 0x3c
 801ff96:	4630      	mov	r0, r6
 801ff98:	eeb0 0b48 	vmov.f64	d0, d8
 801ff9c:	f001 f92c 	bl	80211f8 <__d2b>
 801ffa0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801ffa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ffa6:	4605      	mov	r5, r0
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d046      	beq.n	802003a <_dtoa_r+0x182>
 801ffac:	eeb0 7b48 	vmov.f64	d7, d8
 801ffb0:	ee18 1a90 	vmov	r1, s17
 801ffb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ffb8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801ffbc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801ffc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ffc4:	2000      	movs	r0, #0
 801ffc6:	ee07 1a90 	vmov	s15, r1
 801ffca:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801ffce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8020168 <_dtoa_r+0x2b0>
 801ffd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ffd6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8020170 <_dtoa_r+0x2b8>
 801ffda:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ffde:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8020178 <_dtoa_r+0x2c0>
 801ffe2:	ee07 3a90 	vmov	s15, r3
 801ffe6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801ffea:	eeb0 7b46 	vmov.f64	d7, d6
 801ffee:	eea4 7b05 	vfma.f64	d7, d4, d5
 801fff2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801fff6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801fffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fffe:	ee16 ba90 	vmov	fp, s13
 8020002:	9009      	str	r0, [sp, #36]	; 0x24
 8020004:	d508      	bpl.n	8020018 <_dtoa_r+0x160>
 8020006:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802000a:	eeb4 6b47 	vcmp.f64	d6, d7
 802000e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020012:	bf18      	it	ne
 8020014:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8020018:	f1bb 0f16 	cmp.w	fp, #22
 802001c:	d82b      	bhi.n	8020076 <_dtoa_r+0x1be>
 802001e:	495e      	ldr	r1, [pc, #376]	; (8020198 <_dtoa_r+0x2e0>)
 8020020:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8020024:	ed91 7b00 	vldr	d7, [r1]
 8020028:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802002c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020030:	d501      	bpl.n	8020036 <_dtoa_r+0x17e>
 8020032:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8020036:	2100      	movs	r1, #0
 8020038:	e01e      	b.n	8020078 <_dtoa_r+0x1c0>
 802003a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802003c:	4413      	add	r3, r2
 802003e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8020042:	2920      	cmp	r1, #32
 8020044:	bfc1      	itttt	gt
 8020046:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 802004a:	408c      	lslgt	r4, r1
 802004c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8020050:	fa28 f101 	lsrgt.w	r1, r8, r1
 8020054:	bfd6      	itet	le
 8020056:	f1c1 0120 	rsble	r1, r1, #32
 802005a:	4321      	orrgt	r1, r4
 802005c:	fa08 f101 	lslle.w	r1, r8, r1
 8020060:	ee07 1a90 	vmov	s15, r1
 8020064:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8020068:	3b01      	subs	r3, #1
 802006a:	ee17 1a90 	vmov	r1, s15
 802006e:	2001      	movs	r0, #1
 8020070:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8020074:	e7a7      	b.n	801ffc6 <_dtoa_r+0x10e>
 8020076:	2101      	movs	r1, #1
 8020078:	1ad2      	subs	r2, r2, r3
 802007a:	1e53      	subs	r3, r2, #1
 802007c:	9305      	str	r3, [sp, #20]
 802007e:	bf45      	ittet	mi
 8020080:	f1c2 0301 	rsbmi	r3, r2, #1
 8020084:	9304      	strmi	r3, [sp, #16]
 8020086:	2300      	movpl	r3, #0
 8020088:	2300      	movmi	r3, #0
 802008a:	bf4c      	ite	mi
 802008c:	9305      	strmi	r3, [sp, #20]
 802008e:	9304      	strpl	r3, [sp, #16]
 8020090:	f1bb 0f00 	cmp.w	fp, #0
 8020094:	910b      	str	r1, [sp, #44]	; 0x2c
 8020096:	db18      	blt.n	80200ca <_dtoa_r+0x212>
 8020098:	9b05      	ldr	r3, [sp, #20]
 802009a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802009e:	445b      	add	r3, fp
 80200a0:	9305      	str	r3, [sp, #20]
 80200a2:	2300      	movs	r3, #0
 80200a4:	9a06      	ldr	r2, [sp, #24]
 80200a6:	2a09      	cmp	r2, #9
 80200a8:	d848      	bhi.n	802013c <_dtoa_r+0x284>
 80200aa:	2a05      	cmp	r2, #5
 80200ac:	bfc4      	itt	gt
 80200ae:	3a04      	subgt	r2, #4
 80200b0:	9206      	strgt	r2, [sp, #24]
 80200b2:	9a06      	ldr	r2, [sp, #24]
 80200b4:	f1a2 0202 	sub.w	r2, r2, #2
 80200b8:	bfcc      	ite	gt
 80200ba:	2400      	movgt	r4, #0
 80200bc:	2401      	movle	r4, #1
 80200be:	2a03      	cmp	r2, #3
 80200c0:	d847      	bhi.n	8020152 <_dtoa_r+0x29a>
 80200c2:	e8df f002 	tbb	[pc, r2]
 80200c6:	2d0b      	.short	0x2d0b
 80200c8:	392b      	.short	0x392b
 80200ca:	9b04      	ldr	r3, [sp, #16]
 80200cc:	2200      	movs	r2, #0
 80200ce:	eba3 030b 	sub.w	r3, r3, fp
 80200d2:	9304      	str	r3, [sp, #16]
 80200d4:	920a      	str	r2, [sp, #40]	; 0x28
 80200d6:	f1cb 0300 	rsb	r3, fp, #0
 80200da:	e7e3      	b.n	80200a4 <_dtoa_r+0x1ec>
 80200dc:	2200      	movs	r2, #0
 80200de:	9207      	str	r2, [sp, #28]
 80200e0:	9a08      	ldr	r2, [sp, #32]
 80200e2:	2a00      	cmp	r2, #0
 80200e4:	dc38      	bgt.n	8020158 <_dtoa_r+0x2a0>
 80200e6:	f04f 0a01 	mov.w	sl, #1
 80200ea:	46d1      	mov	r9, sl
 80200ec:	4652      	mov	r2, sl
 80200ee:	f8cd a020 	str.w	sl, [sp, #32]
 80200f2:	69f7      	ldr	r7, [r6, #28]
 80200f4:	2100      	movs	r1, #0
 80200f6:	2004      	movs	r0, #4
 80200f8:	f100 0c14 	add.w	ip, r0, #20
 80200fc:	4594      	cmp	ip, r2
 80200fe:	d930      	bls.n	8020162 <_dtoa_r+0x2aa>
 8020100:	6079      	str	r1, [r7, #4]
 8020102:	4630      	mov	r0, r6
 8020104:	930d      	str	r3, [sp, #52]	; 0x34
 8020106:	f000 fc9b 	bl	8020a40 <_Balloc>
 802010a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802010c:	9001      	str	r0, [sp, #4]
 802010e:	4602      	mov	r2, r0
 8020110:	2800      	cmp	r0, #0
 8020112:	d145      	bne.n	80201a0 <_dtoa_r+0x2e8>
 8020114:	4b21      	ldr	r3, [pc, #132]	; (802019c <_dtoa_r+0x2e4>)
 8020116:	f240 11af 	movw	r1, #431	; 0x1af
 802011a:	e6e5      	b.n	801fee8 <_dtoa_r+0x30>
 802011c:	2201      	movs	r2, #1
 802011e:	e7de      	b.n	80200de <_dtoa_r+0x226>
 8020120:	2200      	movs	r2, #0
 8020122:	9207      	str	r2, [sp, #28]
 8020124:	9a08      	ldr	r2, [sp, #32]
 8020126:	eb0b 0a02 	add.w	sl, fp, r2
 802012a:	f10a 0901 	add.w	r9, sl, #1
 802012e:	464a      	mov	r2, r9
 8020130:	2a01      	cmp	r2, #1
 8020132:	bfb8      	it	lt
 8020134:	2201      	movlt	r2, #1
 8020136:	e7dc      	b.n	80200f2 <_dtoa_r+0x23a>
 8020138:	2201      	movs	r2, #1
 802013a:	e7f2      	b.n	8020122 <_dtoa_r+0x26a>
 802013c:	2401      	movs	r4, #1
 802013e:	2200      	movs	r2, #0
 8020140:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8020144:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020148:	2100      	movs	r1, #0
 802014a:	46d1      	mov	r9, sl
 802014c:	2212      	movs	r2, #18
 802014e:	9108      	str	r1, [sp, #32]
 8020150:	e7cf      	b.n	80200f2 <_dtoa_r+0x23a>
 8020152:	2201      	movs	r2, #1
 8020154:	9207      	str	r2, [sp, #28]
 8020156:	e7f5      	b.n	8020144 <_dtoa_r+0x28c>
 8020158:	f8dd a020 	ldr.w	sl, [sp, #32]
 802015c:	46d1      	mov	r9, sl
 802015e:	4652      	mov	r2, sl
 8020160:	e7c7      	b.n	80200f2 <_dtoa_r+0x23a>
 8020162:	3101      	adds	r1, #1
 8020164:	0040      	lsls	r0, r0, #1
 8020166:	e7c7      	b.n	80200f8 <_dtoa_r+0x240>
 8020168:	636f4361 	.word	0x636f4361
 802016c:	3fd287a7 	.word	0x3fd287a7
 8020170:	8b60c8b3 	.word	0x8b60c8b3
 8020174:	3fc68a28 	.word	0x3fc68a28
 8020178:	509f79fb 	.word	0x509f79fb
 802017c:	3fd34413 	.word	0x3fd34413
 8020180:	080248ac 	.word	0x080248ac
 8020184:	08024a9e 	.word	0x08024a9e
 8020188:	7ff00000 	.word	0x7ff00000
 802018c:	08024a9a 	.word	0x08024a9a
 8020190:	08024a91 	.word	0x08024a91
 8020194:	08024a2d 	.word	0x08024a2d
 8020198:	08024b88 	.word	0x08024b88
 802019c:	08024af6 	.word	0x08024af6
 80201a0:	69f2      	ldr	r2, [r6, #28]
 80201a2:	9901      	ldr	r1, [sp, #4]
 80201a4:	6011      	str	r1, [r2, #0]
 80201a6:	f1b9 0f0e 	cmp.w	r9, #14
 80201aa:	d86c      	bhi.n	8020286 <_dtoa_r+0x3ce>
 80201ac:	2c00      	cmp	r4, #0
 80201ae:	d06a      	beq.n	8020286 <_dtoa_r+0x3ce>
 80201b0:	f1bb 0f00 	cmp.w	fp, #0
 80201b4:	f340 80a0 	ble.w	80202f8 <_dtoa_r+0x440>
 80201b8:	4ac1      	ldr	r2, [pc, #772]	; (80204c0 <_dtoa_r+0x608>)
 80201ba:	f00b 010f 	and.w	r1, fp, #15
 80201be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80201c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80201c6:	ed92 7b00 	vldr	d7, [r2]
 80201ca:	ea4f 122b 	mov.w	r2, fp, asr #4
 80201ce:	f000 8087 	beq.w	80202e0 <_dtoa_r+0x428>
 80201d2:	49bc      	ldr	r1, [pc, #752]	; (80204c4 <_dtoa_r+0x60c>)
 80201d4:	ed91 6b08 	vldr	d6, [r1, #32]
 80201d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80201dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80201e0:	f002 020f 	and.w	r2, r2, #15
 80201e4:	2103      	movs	r1, #3
 80201e6:	48b7      	ldr	r0, [pc, #732]	; (80204c4 <_dtoa_r+0x60c>)
 80201e8:	2a00      	cmp	r2, #0
 80201ea:	d17b      	bne.n	80202e4 <_dtoa_r+0x42c>
 80201ec:	ed9d 6b02 	vldr	d6, [sp, #8]
 80201f0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80201f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80201f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80201fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80201fe:	2a00      	cmp	r2, #0
 8020200:	f000 80a0 	beq.w	8020344 <_dtoa_r+0x48c>
 8020204:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8020208:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802020c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020210:	f140 8098 	bpl.w	8020344 <_dtoa_r+0x48c>
 8020214:	f1b9 0f00 	cmp.w	r9, #0
 8020218:	f000 8094 	beq.w	8020344 <_dtoa_r+0x48c>
 802021c:	f1ba 0f00 	cmp.w	sl, #0
 8020220:	dd2f      	ble.n	8020282 <_dtoa_r+0x3ca>
 8020222:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8020226:	ee27 7b06 	vmul.f64	d7, d7, d6
 802022a:	ed8d 7b02 	vstr	d7, [sp, #8]
 802022e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8020232:	3101      	adds	r1, #1
 8020234:	4654      	mov	r4, sl
 8020236:	ed9d 6b02 	vldr	d6, [sp, #8]
 802023a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802023e:	ee07 1a90 	vmov	s15, r1
 8020242:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8020246:	eea7 5b06 	vfma.f64	d5, d7, d6
 802024a:	ee15 7a90 	vmov	r7, s11
 802024e:	ec51 0b15 	vmov	r0, r1, d5
 8020252:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8020256:	2c00      	cmp	r4, #0
 8020258:	d177      	bne.n	802034a <_dtoa_r+0x492>
 802025a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802025e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8020262:	ec41 0b17 	vmov	d7, r0, r1
 8020266:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802026a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802026e:	f300 826a 	bgt.w	8020746 <_dtoa_r+0x88e>
 8020272:	eeb1 7b47 	vneg.f64	d7, d7
 8020276:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802027a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802027e:	f100 8260 	bmi.w	8020742 <_dtoa_r+0x88a>
 8020282:	ed8d 8b02 	vstr	d8, [sp, #8]
 8020286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020288:	2a00      	cmp	r2, #0
 802028a:	f2c0 811d 	blt.w	80204c8 <_dtoa_r+0x610>
 802028e:	f1bb 0f0e 	cmp.w	fp, #14
 8020292:	f300 8119 	bgt.w	80204c8 <_dtoa_r+0x610>
 8020296:	4b8a      	ldr	r3, [pc, #552]	; (80204c0 <_dtoa_r+0x608>)
 8020298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802029c:	ed93 6b00 	vldr	d6, [r3]
 80202a0:	9b08      	ldr	r3, [sp, #32]
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	f280 80b7 	bge.w	8020416 <_dtoa_r+0x55e>
 80202a8:	f1b9 0f00 	cmp.w	r9, #0
 80202ac:	f300 80b3 	bgt.w	8020416 <_dtoa_r+0x55e>
 80202b0:	f040 8246 	bne.w	8020740 <_dtoa_r+0x888>
 80202b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80202b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80202bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80202c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80202c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202c8:	464c      	mov	r4, r9
 80202ca:	464f      	mov	r7, r9
 80202cc:	f280 821c 	bge.w	8020708 <_dtoa_r+0x850>
 80202d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80202d4:	2331      	movs	r3, #49	; 0x31
 80202d6:	f808 3b01 	strb.w	r3, [r8], #1
 80202da:	f10b 0b01 	add.w	fp, fp, #1
 80202de:	e218      	b.n	8020712 <_dtoa_r+0x85a>
 80202e0:	2102      	movs	r1, #2
 80202e2:	e780      	b.n	80201e6 <_dtoa_r+0x32e>
 80202e4:	07d4      	lsls	r4, r2, #31
 80202e6:	d504      	bpl.n	80202f2 <_dtoa_r+0x43a>
 80202e8:	ed90 6b00 	vldr	d6, [r0]
 80202ec:	3101      	adds	r1, #1
 80202ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80202f2:	1052      	asrs	r2, r2, #1
 80202f4:	3008      	adds	r0, #8
 80202f6:	e777      	b.n	80201e8 <_dtoa_r+0x330>
 80202f8:	d022      	beq.n	8020340 <_dtoa_r+0x488>
 80202fa:	f1cb 0200 	rsb	r2, fp, #0
 80202fe:	4970      	ldr	r1, [pc, #448]	; (80204c0 <_dtoa_r+0x608>)
 8020300:	f002 000f 	and.w	r0, r2, #15
 8020304:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8020308:	ed91 7b00 	vldr	d7, [r1]
 802030c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8020310:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020314:	486b      	ldr	r0, [pc, #428]	; (80204c4 <_dtoa_r+0x60c>)
 8020316:	1112      	asrs	r2, r2, #4
 8020318:	2400      	movs	r4, #0
 802031a:	2102      	movs	r1, #2
 802031c:	b92a      	cbnz	r2, 802032a <_dtoa_r+0x472>
 802031e:	2c00      	cmp	r4, #0
 8020320:	f43f af6a 	beq.w	80201f8 <_dtoa_r+0x340>
 8020324:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020328:	e766      	b.n	80201f8 <_dtoa_r+0x340>
 802032a:	07d7      	lsls	r7, r2, #31
 802032c:	d505      	bpl.n	802033a <_dtoa_r+0x482>
 802032e:	ed90 6b00 	vldr	d6, [r0]
 8020332:	3101      	adds	r1, #1
 8020334:	2401      	movs	r4, #1
 8020336:	ee27 7b06 	vmul.f64	d7, d7, d6
 802033a:	1052      	asrs	r2, r2, #1
 802033c:	3008      	adds	r0, #8
 802033e:	e7ed      	b.n	802031c <_dtoa_r+0x464>
 8020340:	2102      	movs	r1, #2
 8020342:	e759      	b.n	80201f8 <_dtoa_r+0x340>
 8020344:	465a      	mov	r2, fp
 8020346:	464c      	mov	r4, r9
 8020348:	e775      	b.n	8020236 <_dtoa_r+0x37e>
 802034a:	ec41 0b17 	vmov	d7, r0, r1
 802034e:	495c      	ldr	r1, [pc, #368]	; (80204c0 <_dtoa_r+0x608>)
 8020350:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8020354:	ed11 4b02 	vldr	d4, [r1, #-8]
 8020358:	9901      	ldr	r1, [sp, #4]
 802035a:	440c      	add	r4, r1
 802035c:	9907      	ldr	r1, [sp, #28]
 802035e:	b351      	cbz	r1, 80203b6 <_dtoa_r+0x4fe>
 8020360:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8020364:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8020368:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802036c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8020370:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020374:	ee35 7b47 	vsub.f64	d7, d5, d7
 8020378:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802037c:	ee14 1a90 	vmov	r1, s9
 8020380:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020384:	3130      	adds	r1, #48	; 0x30
 8020386:	ee36 6b45 	vsub.f64	d6, d6, d5
 802038a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802038e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020392:	f808 1b01 	strb.w	r1, [r8], #1
 8020396:	d439      	bmi.n	802040c <_dtoa_r+0x554>
 8020398:	ee32 5b46 	vsub.f64	d5, d2, d6
 802039c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80203a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203a4:	d472      	bmi.n	802048c <_dtoa_r+0x5d4>
 80203a6:	45a0      	cmp	r8, r4
 80203a8:	f43f af6b 	beq.w	8020282 <_dtoa_r+0x3ca>
 80203ac:	ee27 7b03 	vmul.f64	d7, d7, d3
 80203b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80203b4:	e7e0      	b.n	8020378 <_dtoa_r+0x4c0>
 80203b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80203ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80203be:	4620      	mov	r0, r4
 80203c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80203c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80203c8:	ee14 1a90 	vmov	r1, s9
 80203cc:	3130      	adds	r1, #48	; 0x30
 80203ce:	f808 1b01 	strb.w	r1, [r8], #1
 80203d2:	45a0      	cmp	r8, r4
 80203d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80203d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80203dc:	d118      	bne.n	8020410 <_dtoa_r+0x558>
 80203de:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80203e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80203e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80203ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203ee:	dc4d      	bgt.n	802048c <_dtoa_r+0x5d4>
 80203f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80203f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80203f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203fc:	f57f af41 	bpl.w	8020282 <_dtoa_r+0x3ca>
 8020400:	4680      	mov	r8, r0
 8020402:	3801      	subs	r0, #1
 8020404:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8020408:	2b30      	cmp	r3, #48	; 0x30
 802040a:	d0f9      	beq.n	8020400 <_dtoa_r+0x548>
 802040c:	4693      	mov	fp, r2
 802040e:	e02a      	b.n	8020466 <_dtoa_r+0x5ae>
 8020410:	ee26 6b03 	vmul.f64	d6, d6, d3
 8020414:	e7d6      	b.n	80203c4 <_dtoa_r+0x50c>
 8020416:	ed9d 7b02 	vldr	d7, [sp, #8]
 802041a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802041e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020422:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8020426:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802042a:	ee15 3a10 	vmov	r3, s10
 802042e:	3330      	adds	r3, #48	; 0x30
 8020430:	f808 3b01 	strb.w	r3, [r8], #1
 8020434:	9b01      	ldr	r3, [sp, #4]
 8020436:	eba8 0303 	sub.w	r3, r8, r3
 802043a:	4599      	cmp	r9, r3
 802043c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8020440:	eea3 7b46 	vfms.f64	d7, d3, d6
 8020444:	d133      	bne.n	80204ae <_dtoa_r+0x5f6>
 8020446:	ee37 7b07 	vadd.f64	d7, d7, d7
 802044a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020452:	dc1a      	bgt.n	802048a <_dtoa_r+0x5d2>
 8020454:	eeb4 7b46 	vcmp.f64	d7, d6
 8020458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802045c:	d103      	bne.n	8020466 <_dtoa_r+0x5ae>
 802045e:	ee15 3a10 	vmov	r3, s10
 8020462:	07d9      	lsls	r1, r3, #31
 8020464:	d411      	bmi.n	802048a <_dtoa_r+0x5d2>
 8020466:	4629      	mov	r1, r5
 8020468:	4630      	mov	r0, r6
 802046a:	f000 fb29 	bl	8020ac0 <_Bfree>
 802046e:	2300      	movs	r3, #0
 8020470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020472:	f888 3000 	strb.w	r3, [r8]
 8020476:	f10b 0301 	add.w	r3, fp, #1
 802047a:	6013      	str	r3, [r2, #0]
 802047c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802047e:	2b00      	cmp	r3, #0
 8020480:	f43f ad69 	beq.w	801ff56 <_dtoa_r+0x9e>
 8020484:	f8c3 8000 	str.w	r8, [r3]
 8020488:	e565      	b.n	801ff56 <_dtoa_r+0x9e>
 802048a:	465a      	mov	r2, fp
 802048c:	4643      	mov	r3, r8
 802048e:	4698      	mov	r8, r3
 8020490:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8020494:	2939      	cmp	r1, #57	; 0x39
 8020496:	d106      	bne.n	80204a6 <_dtoa_r+0x5ee>
 8020498:	9901      	ldr	r1, [sp, #4]
 802049a:	4299      	cmp	r1, r3
 802049c:	d1f7      	bne.n	802048e <_dtoa_r+0x5d6>
 802049e:	9801      	ldr	r0, [sp, #4]
 80204a0:	2130      	movs	r1, #48	; 0x30
 80204a2:	3201      	adds	r2, #1
 80204a4:	7001      	strb	r1, [r0, #0]
 80204a6:	7819      	ldrb	r1, [r3, #0]
 80204a8:	3101      	adds	r1, #1
 80204aa:	7019      	strb	r1, [r3, #0]
 80204ac:	e7ae      	b.n	802040c <_dtoa_r+0x554>
 80204ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80204b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80204b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204ba:	d1b2      	bne.n	8020422 <_dtoa_r+0x56a>
 80204bc:	e7d3      	b.n	8020466 <_dtoa_r+0x5ae>
 80204be:	bf00      	nop
 80204c0:	08024b88 	.word	0x08024b88
 80204c4:	08024b60 	.word	0x08024b60
 80204c8:	9907      	ldr	r1, [sp, #28]
 80204ca:	2900      	cmp	r1, #0
 80204cc:	f000 80d0 	beq.w	8020670 <_dtoa_r+0x7b8>
 80204d0:	9906      	ldr	r1, [sp, #24]
 80204d2:	2901      	cmp	r1, #1
 80204d4:	f300 80b4 	bgt.w	8020640 <_dtoa_r+0x788>
 80204d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80204da:	2900      	cmp	r1, #0
 80204dc:	f000 80ac 	beq.w	8020638 <_dtoa_r+0x780>
 80204e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80204e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80204e8:	461c      	mov	r4, r3
 80204ea:	9309      	str	r3, [sp, #36]	; 0x24
 80204ec:	9b04      	ldr	r3, [sp, #16]
 80204ee:	4413      	add	r3, r2
 80204f0:	9304      	str	r3, [sp, #16]
 80204f2:	9b05      	ldr	r3, [sp, #20]
 80204f4:	2101      	movs	r1, #1
 80204f6:	4413      	add	r3, r2
 80204f8:	4630      	mov	r0, r6
 80204fa:	9305      	str	r3, [sp, #20]
 80204fc:	f000 fbe0 	bl	8020cc0 <__i2b>
 8020500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020502:	4607      	mov	r7, r0
 8020504:	f1b8 0f00 	cmp.w	r8, #0
 8020508:	d00d      	beq.n	8020526 <_dtoa_r+0x66e>
 802050a:	9a05      	ldr	r2, [sp, #20]
 802050c:	2a00      	cmp	r2, #0
 802050e:	dd0a      	ble.n	8020526 <_dtoa_r+0x66e>
 8020510:	4542      	cmp	r2, r8
 8020512:	9904      	ldr	r1, [sp, #16]
 8020514:	bfa8      	it	ge
 8020516:	4642      	movge	r2, r8
 8020518:	1a89      	subs	r1, r1, r2
 802051a:	9104      	str	r1, [sp, #16]
 802051c:	9905      	ldr	r1, [sp, #20]
 802051e:	eba8 0802 	sub.w	r8, r8, r2
 8020522:	1a8a      	subs	r2, r1, r2
 8020524:	9205      	str	r2, [sp, #20]
 8020526:	b303      	cbz	r3, 802056a <_dtoa_r+0x6b2>
 8020528:	9a07      	ldr	r2, [sp, #28]
 802052a:	2a00      	cmp	r2, #0
 802052c:	f000 80a5 	beq.w	802067a <_dtoa_r+0x7c2>
 8020530:	2c00      	cmp	r4, #0
 8020532:	dd13      	ble.n	802055c <_dtoa_r+0x6a4>
 8020534:	4639      	mov	r1, r7
 8020536:	4622      	mov	r2, r4
 8020538:	4630      	mov	r0, r6
 802053a:	930d      	str	r3, [sp, #52]	; 0x34
 802053c:	f000 fc80 	bl	8020e40 <__pow5mult>
 8020540:	462a      	mov	r2, r5
 8020542:	4601      	mov	r1, r0
 8020544:	4607      	mov	r7, r0
 8020546:	4630      	mov	r0, r6
 8020548:	f000 fbd0 	bl	8020cec <__multiply>
 802054c:	4629      	mov	r1, r5
 802054e:	9009      	str	r0, [sp, #36]	; 0x24
 8020550:	4630      	mov	r0, r6
 8020552:	f000 fab5 	bl	8020ac0 <_Bfree>
 8020556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802055a:	4615      	mov	r5, r2
 802055c:	1b1a      	subs	r2, r3, r4
 802055e:	d004      	beq.n	802056a <_dtoa_r+0x6b2>
 8020560:	4629      	mov	r1, r5
 8020562:	4630      	mov	r0, r6
 8020564:	f000 fc6c 	bl	8020e40 <__pow5mult>
 8020568:	4605      	mov	r5, r0
 802056a:	2101      	movs	r1, #1
 802056c:	4630      	mov	r0, r6
 802056e:	f000 fba7 	bl	8020cc0 <__i2b>
 8020572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020574:	2b00      	cmp	r3, #0
 8020576:	4604      	mov	r4, r0
 8020578:	f340 8081 	ble.w	802067e <_dtoa_r+0x7c6>
 802057c:	461a      	mov	r2, r3
 802057e:	4601      	mov	r1, r0
 8020580:	4630      	mov	r0, r6
 8020582:	f000 fc5d 	bl	8020e40 <__pow5mult>
 8020586:	9b06      	ldr	r3, [sp, #24]
 8020588:	2b01      	cmp	r3, #1
 802058a:	4604      	mov	r4, r0
 802058c:	dd7a      	ble.n	8020684 <_dtoa_r+0x7cc>
 802058e:	2300      	movs	r3, #0
 8020590:	9309      	str	r3, [sp, #36]	; 0x24
 8020592:	6922      	ldr	r2, [r4, #16]
 8020594:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020598:	6910      	ldr	r0, [r2, #16]
 802059a:	f000 fb43 	bl	8020c24 <__hi0bits>
 802059e:	f1c0 0020 	rsb	r0, r0, #32
 80205a2:	9b05      	ldr	r3, [sp, #20]
 80205a4:	4418      	add	r0, r3
 80205a6:	f010 001f 	ands.w	r0, r0, #31
 80205aa:	f000 8093 	beq.w	80206d4 <_dtoa_r+0x81c>
 80205ae:	f1c0 0220 	rsb	r2, r0, #32
 80205b2:	2a04      	cmp	r2, #4
 80205b4:	f340 8085 	ble.w	80206c2 <_dtoa_r+0x80a>
 80205b8:	9b04      	ldr	r3, [sp, #16]
 80205ba:	f1c0 001c 	rsb	r0, r0, #28
 80205be:	4403      	add	r3, r0
 80205c0:	9304      	str	r3, [sp, #16]
 80205c2:	9b05      	ldr	r3, [sp, #20]
 80205c4:	4480      	add	r8, r0
 80205c6:	4403      	add	r3, r0
 80205c8:	9305      	str	r3, [sp, #20]
 80205ca:	9b04      	ldr	r3, [sp, #16]
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	dd05      	ble.n	80205dc <_dtoa_r+0x724>
 80205d0:	4629      	mov	r1, r5
 80205d2:	461a      	mov	r2, r3
 80205d4:	4630      	mov	r0, r6
 80205d6:	f000 fc8d 	bl	8020ef4 <__lshift>
 80205da:	4605      	mov	r5, r0
 80205dc:	9b05      	ldr	r3, [sp, #20]
 80205de:	2b00      	cmp	r3, #0
 80205e0:	dd05      	ble.n	80205ee <_dtoa_r+0x736>
 80205e2:	4621      	mov	r1, r4
 80205e4:	461a      	mov	r2, r3
 80205e6:	4630      	mov	r0, r6
 80205e8:	f000 fc84 	bl	8020ef4 <__lshift>
 80205ec:	4604      	mov	r4, r0
 80205ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d071      	beq.n	80206d8 <_dtoa_r+0x820>
 80205f4:	4621      	mov	r1, r4
 80205f6:	4628      	mov	r0, r5
 80205f8:	f000 fce8 	bl	8020fcc <__mcmp>
 80205fc:	2800      	cmp	r0, #0
 80205fe:	da6b      	bge.n	80206d8 <_dtoa_r+0x820>
 8020600:	2300      	movs	r3, #0
 8020602:	4629      	mov	r1, r5
 8020604:	220a      	movs	r2, #10
 8020606:	4630      	mov	r0, r6
 8020608:	f000 fa7c 	bl	8020b04 <__multadd>
 802060c:	9b07      	ldr	r3, [sp, #28]
 802060e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8020612:	4605      	mov	r5, r0
 8020614:	2b00      	cmp	r3, #0
 8020616:	f000 8197 	beq.w	8020948 <_dtoa_r+0xa90>
 802061a:	4639      	mov	r1, r7
 802061c:	2300      	movs	r3, #0
 802061e:	220a      	movs	r2, #10
 8020620:	4630      	mov	r0, r6
 8020622:	f000 fa6f 	bl	8020b04 <__multadd>
 8020626:	f1ba 0f00 	cmp.w	sl, #0
 802062a:	4607      	mov	r7, r0
 802062c:	f300 8093 	bgt.w	8020756 <_dtoa_r+0x89e>
 8020630:	9b06      	ldr	r3, [sp, #24]
 8020632:	2b02      	cmp	r3, #2
 8020634:	dc57      	bgt.n	80206e6 <_dtoa_r+0x82e>
 8020636:	e08e      	b.n	8020756 <_dtoa_r+0x89e>
 8020638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802063a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802063e:	e751      	b.n	80204e4 <_dtoa_r+0x62c>
 8020640:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8020644:	42a3      	cmp	r3, r4
 8020646:	bfbf      	itttt	lt
 8020648:	1ae2      	sublt	r2, r4, r3
 802064a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802064c:	189b      	addlt	r3, r3, r2
 802064e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020650:	bfae      	itee	ge
 8020652:	1b1c      	subge	r4, r3, r4
 8020654:	4623      	movlt	r3, r4
 8020656:	2400      	movlt	r4, #0
 8020658:	f1b9 0f00 	cmp.w	r9, #0
 802065c:	bfb5      	itete	lt
 802065e:	9a04      	ldrlt	r2, [sp, #16]
 8020660:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8020664:	eba2 0809 	sublt.w	r8, r2, r9
 8020668:	464a      	movge	r2, r9
 802066a:	bfb8      	it	lt
 802066c:	2200      	movlt	r2, #0
 802066e:	e73c      	b.n	80204ea <_dtoa_r+0x632>
 8020670:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8020674:	9f07      	ldr	r7, [sp, #28]
 8020676:	461c      	mov	r4, r3
 8020678:	e744      	b.n	8020504 <_dtoa_r+0x64c>
 802067a:	461a      	mov	r2, r3
 802067c:	e770      	b.n	8020560 <_dtoa_r+0x6a8>
 802067e:	9b06      	ldr	r3, [sp, #24]
 8020680:	2b01      	cmp	r3, #1
 8020682:	dc18      	bgt.n	80206b6 <_dtoa_r+0x7fe>
 8020684:	9b02      	ldr	r3, [sp, #8]
 8020686:	b9b3      	cbnz	r3, 80206b6 <_dtoa_r+0x7fe>
 8020688:	9b03      	ldr	r3, [sp, #12]
 802068a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802068e:	b9a2      	cbnz	r2, 80206ba <_dtoa_r+0x802>
 8020690:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020694:	0d12      	lsrs	r2, r2, #20
 8020696:	0512      	lsls	r2, r2, #20
 8020698:	b18a      	cbz	r2, 80206be <_dtoa_r+0x806>
 802069a:	9b04      	ldr	r3, [sp, #16]
 802069c:	3301      	adds	r3, #1
 802069e:	9304      	str	r3, [sp, #16]
 80206a0:	9b05      	ldr	r3, [sp, #20]
 80206a2:	3301      	adds	r3, #1
 80206a4:	9305      	str	r3, [sp, #20]
 80206a6:	2301      	movs	r3, #1
 80206a8:	9309      	str	r3, [sp, #36]	; 0x24
 80206aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	f47f af70 	bne.w	8020592 <_dtoa_r+0x6da>
 80206b2:	2001      	movs	r0, #1
 80206b4:	e775      	b.n	80205a2 <_dtoa_r+0x6ea>
 80206b6:	2300      	movs	r3, #0
 80206b8:	e7f6      	b.n	80206a8 <_dtoa_r+0x7f0>
 80206ba:	9b02      	ldr	r3, [sp, #8]
 80206bc:	e7f4      	b.n	80206a8 <_dtoa_r+0x7f0>
 80206be:	9209      	str	r2, [sp, #36]	; 0x24
 80206c0:	e7f3      	b.n	80206aa <_dtoa_r+0x7f2>
 80206c2:	d082      	beq.n	80205ca <_dtoa_r+0x712>
 80206c4:	9b04      	ldr	r3, [sp, #16]
 80206c6:	321c      	adds	r2, #28
 80206c8:	4413      	add	r3, r2
 80206ca:	9304      	str	r3, [sp, #16]
 80206cc:	9b05      	ldr	r3, [sp, #20]
 80206ce:	4490      	add	r8, r2
 80206d0:	4413      	add	r3, r2
 80206d2:	e779      	b.n	80205c8 <_dtoa_r+0x710>
 80206d4:	4602      	mov	r2, r0
 80206d6:	e7f5      	b.n	80206c4 <_dtoa_r+0x80c>
 80206d8:	f1b9 0f00 	cmp.w	r9, #0
 80206dc:	dc36      	bgt.n	802074c <_dtoa_r+0x894>
 80206de:	9b06      	ldr	r3, [sp, #24]
 80206e0:	2b02      	cmp	r3, #2
 80206e2:	dd33      	ble.n	802074c <_dtoa_r+0x894>
 80206e4:	46ca      	mov	sl, r9
 80206e6:	f1ba 0f00 	cmp.w	sl, #0
 80206ea:	d10d      	bne.n	8020708 <_dtoa_r+0x850>
 80206ec:	4621      	mov	r1, r4
 80206ee:	4653      	mov	r3, sl
 80206f0:	2205      	movs	r2, #5
 80206f2:	4630      	mov	r0, r6
 80206f4:	f000 fa06 	bl	8020b04 <__multadd>
 80206f8:	4601      	mov	r1, r0
 80206fa:	4604      	mov	r4, r0
 80206fc:	4628      	mov	r0, r5
 80206fe:	f000 fc65 	bl	8020fcc <__mcmp>
 8020702:	2800      	cmp	r0, #0
 8020704:	f73f ade4 	bgt.w	80202d0 <_dtoa_r+0x418>
 8020708:	9b08      	ldr	r3, [sp, #32]
 802070a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802070e:	ea6f 0b03 	mvn.w	fp, r3
 8020712:	f04f 0900 	mov.w	r9, #0
 8020716:	4621      	mov	r1, r4
 8020718:	4630      	mov	r0, r6
 802071a:	f000 f9d1 	bl	8020ac0 <_Bfree>
 802071e:	2f00      	cmp	r7, #0
 8020720:	f43f aea1 	beq.w	8020466 <_dtoa_r+0x5ae>
 8020724:	f1b9 0f00 	cmp.w	r9, #0
 8020728:	d005      	beq.n	8020736 <_dtoa_r+0x87e>
 802072a:	45b9      	cmp	r9, r7
 802072c:	d003      	beq.n	8020736 <_dtoa_r+0x87e>
 802072e:	4649      	mov	r1, r9
 8020730:	4630      	mov	r0, r6
 8020732:	f000 f9c5 	bl	8020ac0 <_Bfree>
 8020736:	4639      	mov	r1, r7
 8020738:	4630      	mov	r0, r6
 802073a:	f000 f9c1 	bl	8020ac0 <_Bfree>
 802073e:	e692      	b.n	8020466 <_dtoa_r+0x5ae>
 8020740:	2400      	movs	r4, #0
 8020742:	4627      	mov	r7, r4
 8020744:	e7e0      	b.n	8020708 <_dtoa_r+0x850>
 8020746:	4693      	mov	fp, r2
 8020748:	4627      	mov	r7, r4
 802074a:	e5c1      	b.n	80202d0 <_dtoa_r+0x418>
 802074c:	9b07      	ldr	r3, [sp, #28]
 802074e:	46ca      	mov	sl, r9
 8020750:	2b00      	cmp	r3, #0
 8020752:	f000 8100 	beq.w	8020956 <_dtoa_r+0xa9e>
 8020756:	f1b8 0f00 	cmp.w	r8, #0
 802075a:	dd05      	ble.n	8020768 <_dtoa_r+0x8b0>
 802075c:	4639      	mov	r1, r7
 802075e:	4642      	mov	r2, r8
 8020760:	4630      	mov	r0, r6
 8020762:	f000 fbc7 	bl	8020ef4 <__lshift>
 8020766:	4607      	mov	r7, r0
 8020768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802076a:	2b00      	cmp	r3, #0
 802076c:	d05d      	beq.n	802082a <_dtoa_r+0x972>
 802076e:	6879      	ldr	r1, [r7, #4]
 8020770:	4630      	mov	r0, r6
 8020772:	f000 f965 	bl	8020a40 <_Balloc>
 8020776:	4680      	mov	r8, r0
 8020778:	b928      	cbnz	r0, 8020786 <_dtoa_r+0x8ce>
 802077a:	4b82      	ldr	r3, [pc, #520]	; (8020984 <_dtoa_r+0xacc>)
 802077c:	4602      	mov	r2, r0
 802077e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8020782:	f7ff bbb1 	b.w	801fee8 <_dtoa_r+0x30>
 8020786:	693a      	ldr	r2, [r7, #16]
 8020788:	3202      	adds	r2, #2
 802078a:	0092      	lsls	r2, r2, #2
 802078c:	f107 010c 	add.w	r1, r7, #12
 8020790:	300c      	adds	r0, #12
 8020792:	f7ff fad4 	bl	801fd3e <memcpy>
 8020796:	2201      	movs	r2, #1
 8020798:	4641      	mov	r1, r8
 802079a:	4630      	mov	r0, r6
 802079c:	f000 fbaa 	bl	8020ef4 <__lshift>
 80207a0:	9b01      	ldr	r3, [sp, #4]
 80207a2:	3301      	adds	r3, #1
 80207a4:	9304      	str	r3, [sp, #16]
 80207a6:	9b01      	ldr	r3, [sp, #4]
 80207a8:	4453      	add	r3, sl
 80207aa:	9308      	str	r3, [sp, #32]
 80207ac:	9b02      	ldr	r3, [sp, #8]
 80207ae:	f003 0301 	and.w	r3, r3, #1
 80207b2:	46b9      	mov	r9, r7
 80207b4:	9307      	str	r3, [sp, #28]
 80207b6:	4607      	mov	r7, r0
 80207b8:	9b04      	ldr	r3, [sp, #16]
 80207ba:	4621      	mov	r1, r4
 80207bc:	3b01      	subs	r3, #1
 80207be:	4628      	mov	r0, r5
 80207c0:	9302      	str	r3, [sp, #8]
 80207c2:	f7ff faef 	bl	801fda4 <quorem>
 80207c6:	4603      	mov	r3, r0
 80207c8:	3330      	adds	r3, #48	; 0x30
 80207ca:	9005      	str	r0, [sp, #20]
 80207cc:	4649      	mov	r1, r9
 80207ce:	4628      	mov	r0, r5
 80207d0:	9309      	str	r3, [sp, #36]	; 0x24
 80207d2:	f000 fbfb 	bl	8020fcc <__mcmp>
 80207d6:	463a      	mov	r2, r7
 80207d8:	4682      	mov	sl, r0
 80207da:	4621      	mov	r1, r4
 80207dc:	4630      	mov	r0, r6
 80207de:	f000 fc11 	bl	8021004 <__mdiff>
 80207e2:	68c2      	ldr	r2, [r0, #12]
 80207e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207e6:	4680      	mov	r8, r0
 80207e8:	bb0a      	cbnz	r2, 802082e <_dtoa_r+0x976>
 80207ea:	4601      	mov	r1, r0
 80207ec:	4628      	mov	r0, r5
 80207ee:	f000 fbed 	bl	8020fcc <__mcmp>
 80207f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207f4:	4602      	mov	r2, r0
 80207f6:	4641      	mov	r1, r8
 80207f8:	4630      	mov	r0, r6
 80207fa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80207fe:	f000 f95f 	bl	8020ac0 <_Bfree>
 8020802:	9b06      	ldr	r3, [sp, #24]
 8020804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020806:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802080a:	ea43 0102 	orr.w	r1, r3, r2
 802080e:	9b07      	ldr	r3, [sp, #28]
 8020810:	4319      	orrs	r1, r3
 8020812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020814:	d10d      	bne.n	8020832 <_dtoa_r+0x97a>
 8020816:	2b39      	cmp	r3, #57	; 0x39
 8020818:	d029      	beq.n	802086e <_dtoa_r+0x9b6>
 802081a:	f1ba 0f00 	cmp.w	sl, #0
 802081e:	dd01      	ble.n	8020824 <_dtoa_r+0x96c>
 8020820:	9b05      	ldr	r3, [sp, #20]
 8020822:	3331      	adds	r3, #49	; 0x31
 8020824:	9a02      	ldr	r2, [sp, #8]
 8020826:	7013      	strb	r3, [r2, #0]
 8020828:	e775      	b.n	8020716 <_dtoa_r+0x85e>
 802082a:	4638      	mov	r0, r7
 802082c:	e7b8      	b.n	80207a0 <_dtoa_r+0x8e8>
 802082e:	2201      	movs	r2, #1
 8020830:	e7e1      	b.n	80207f6 <_dtoa_r+0x93e>
 8020832:	f1ba 0f00 	cmp.w	sl, #0
 8020836:	db06      	blt.n	8020846 <_dtoa_r+0x98e>
 8020838:	9906      	ldr	r1, [sp, #24]
 802083a:	ea41 0a0a 	orr.w	sl, r1, sl
 802083e:	9907      	ldr	r1, [sp, #28]
 8020840:	ea5a 0a01 	orrs.w	sl, sl, r1
 8020844:	d120      	bne.n	8020888 <_dtoa_r+0x9d0>
 8020846:	2a00      	cmp	r2, #0
 8020848:	ddec      	ble.n	8020824 <_dtoa_r+0x96c>
 802084a:	4629      	mov	r1, r5
 802084c:	2201      	movs	r2, #1
 802084e:	4630      	mov	r0, r6
 8020850:	9304      	str	r3, [sp, #16]
 8020852:	f000 fb4f 	bl	8020ef4 <__lshift>
 8020856:	4621      	mov	r1, r4
 8020858:	4605      	mov	r5, r0
 802085a:	f000 fbb7 	bl	8020fcc <__mcmp>
 802085e:	2800      	cmp	r0, #0
 8020860:	9b04      	ldr	r3, [sp, #16]
 8020862:	dc02      	bgt.n	802086a <_dtoa_r+0x9b2>
 8020864:	d1de      	bne.n	8020824 <_dtoa_r+0x96c>
 8020866:	07da      	lsls	r2, r3, #31
 8020868:	d5dc      	bpl.n	8020824 <_dtoa_r+0x96c>
 802086a:	2b39      	cmp	r3, #57	; 0x39
 802086c:	d1d8      	bne.n	8020820 <_dtoa_r+0x968>
 802086e:	9a02      	ldr	r2, [sp, #8]
 8020870:	2339      	movs	r3, #57	; 0x39
 8020872:	7013      	strb	r3, [r2, #0]
 8020874:	4643      	mov	r3, r8
 8020876:	4698      	mov	r8, r3
 8020878:	3b01      	subs	r3, #1
 802087a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802087e:	2a39      	cmp	r2, #57	; 0x39
 8020880:	d051      	beq.n	8020926 <_dtoa_r+0xa6e>
 8020882:	3201      	adds	r2, #1
 8020884:	701a      	strb	r2, [r3, #0]
 8020886:	e746      	b.n	8020716 <_dtoa_r+0x85e>
 8020888:	2a00      	cmp	r2, #0
 802088a:	dd03      	ble.n	8020894 <_dtoa_r+0x9dc>
 802088c:	2b39      	cmp	r3, #57	; 0x39
 802088e:	d0ee      	beq.n	802086e <_dtoa_r+0x9b6>
 8020890:	3301      	adds	r3, #1
 8020892:	e7c7      	b.n	8020824 <_dtoa_r+0x96c>
 8020894:	9a04      	ldr	r2, [sp, #16]
 8020896:	9908      	ldr	r1, [sp, #32]
 8020898:	f802 3c01 	strb.w	r3, [r2, #-1]
 802089c:	428a      	cmp	r2, r1
 802089e:	d02b      	beq.n	80208f8 <_dtoa_r+0xa40>
 80208a0:	4629      	mov	r1, r5
 80208a2:	2300      	movs	r3, #0
 80208a4:	220a      	movs	r2, #10
 80208a6:	4630      	mov	r0, r6
 80208a8:	f000 f92c 	bl	8020b04 <__multadd>
 80208ac:	45b9      	cmp	r9, r7
 80208ae:	4605      	mov	r5, r0
 80208b0:	f04f 0300 	mov.w	r3, #0
 80208b4:	f04f 020a 	mov.w	r2, #10
 80208b8:	4649      	mov	r1, r9
 80208ba:	4630      	mov	r0, r6
 80208bc:	d107      	bne.n	80208ce <_dtoa_r+0xa16>
 80208be:	f000 f921 	bl	8020b04 <__multadd>
 80208c2:	4681      	mov	r9, r0
 80208c4:	4607      	mov	r7, r0
 80208c6:	9b04      	ldr	r3, [sp, #16]
 80208c8:	3301      	adds	r3, #1
 80208ca:	9304      	str	r3, [sp, #16]
 80208cc:	e774      	b.n	80207b8 <_dtoa_r+0x900>
 80208ce:	f000 f919 	bl	8020b04 <__multadd>
 80208d2:	4639      	mov	r1, r7
 80208d4:	4681      	mov	r9, r0
 80208d6:	2300      	movs	r3, #0
 80208d8:	220a      	movs	r2, #10
 80208da:	4630      	mov	r0, r6
 80208dc:	f000 f912 	bl	8020b04 <__multadd>
 80208e0:	4607      	mov	r7, r0
 80208e2:	e7f0      	b.n	80208c6 <_dtoa_r+0xa0e>
 80208e4:	f1ba 0f00 	cmp.w	sl, #0
 80208e8:	9a01      	ldr	r2, [sp, #4]
 80208ea:	bfcc      	ite	gt
 80208ec:	46d0      	movgt	r8, sl
 80208ee:	f04f 0801 	movle.w	r8, #1
 80208f2:	4490      	add	r8, r2
 80208f4:	f04f 0900 	mov.w	r9, #0
 80208f8:	4629      	mov	r1, r5
 80208fa:	2201      	movs	r2, #1
 80208fc:	4630      	mov	r0, r6
 80208fe:	9302      	str	r3, [sp, #8]
 8020900:	f000 faf8 	bl	8020ef4 <__lshift>
 8020904:	4621      	mov	r1, r4
 8020906:	4605      	mov	r5, r0
 8020908:	f000 fb60 	bl	8020fcc <__mcmp>
 802090c:	2800      	cmp	r0, #0
 802090e:	dcb1      	bgt.n	8020874 <_dtoa_r+0x9bc>
 8020910:	d102      	bne.n	8020918 <_dtoa_r+0xa60>
 8020912:	9b02      	ldr	r3, [sp, #8]
 8020914:	07db      	lsls	r3, r3, #31
 8020916:	d4ad      	bmi.n	8020874 <_dtoa_r+0x9bc>
 8020918:	4643      	mov	r3, r8
 802091a:	4698      	mov	r8, r3
 802091c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020920:	2a30      	cmp	r2, #48	; 0x30
 8020922:	d0fa      	beq.n	802091a <_dtoa_r+0xa62>
 8020924:	e6f7      	b.n	8020716 <_dtoa_r+0x85e>
 8020926:	9a01      	ldr	r2, [sp, #4]
 8020928:	429a      	cmp	r2, r3
 802092a:	d1a4      	bne.n	8020876 <_dtoa_r+0x9be>
 802092c:	f10b 0b01 	add.w	fp, fp, #1
 8020930:	2331      	movs	r3, #49	; 0x31
 8020932:	e778      	b.n	8020826 <_dtoa_r+0x96e>
 8020934:	4b14      	ldr	r3, [pc, #80]	; (8020988 <_dtoa_r+0xad0>)
 8020936:	f7ff bb2a 	b.w	801ff8e <_dtoa_r+0xd6>
 802093a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802093c:	2b00      	cmp	r3, #0
 802093e:	f47f ab05 	bne.w	801ff4c <_dtoa_r+0x94>
 8020942:	4b12      	ldr	r3, [pc, #72]	; (802098c <_dtoa_r+0xad4>)
 8020944:	f7ff bb23 	b.w	801ff8e <_dtoa_r+0xd6>
 8020948:	f1ba 0f00 	cmp.w	sl, #0
 802094c:	dc03      	bgt.n	8020956 <_dtoa_r+0xa9e>
 802094e:	9b06      	ldr	r3, [sp, #24]
 8020950:	2b02      	cmp	r3, #2
 8020952:	f73f aec8 	bgt.w	80206e6 <_dtoa_r+0x82e>
 8020956:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802095a:	4621      	mov	r1, r4
 802095c:	4628      	mov	r0, r5
 802095e:	f7ff fa21 	bl	801fda4 <quorem>
 8020962:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8020966:	f808 3b01 	strb.w	r3, [r8], #1
 802096a:	9a01      	ldr	r2, [sp, #4]
 802096c:	eba8 0202 	sub.w	r2, r8, r2
 8020970:	4592      	cmp	sl, r2
 8020972:	ddb7      	ble.n	80208e4 <_dtoa_r+0xa2c>
 8020974:	4629      	mov	r1, r5
 8020976:	2300      	movs	r3, #0
 8020978:	220a      	movs	r2, #10
 802097a:	4630      	mov	r0, r6
 802097c:	f000 f8c2 	bl	8020b04 <__multadd>
 8020980:	4605      	mov	r5, r0
 8020982:	e7ea      	b.n	802095a <_dtoa_r+0xaa2>
 8020984:	08024af6 	.word	0x08024af6
 8020988:	08024a2c 	.word	0x08024a2c
 802098c:	08024a91 	.word	0x08024a91

08020990 <__env_lock>:
 8020990:	4801      	ldr	r0, [pc, #4]	; (8020998 <__env_lock+0x8>)
 8020992:	f7ff b9ca 	b.w	801fd2a <__retarget_lock_acquire_recursive>
 8020996:	bf00      	nop
 8020998:	2001701c 	.word	0x2001701c

0802099c <__env_unlock>:
 802099c:	4801      	ldr	r0, [pc, #4]	; (80209a4 <__env_unlock+0x8>)
 802099e:	f7ff b9c5 	b.w	801fd2c <__retarget_lock_release_recursive>
 80209a2:	bf00      	nop
 80209a4:	2001701c 	.word	0x2001701c

080209a8 <_free_r>:
 80209a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80209aa:	2900      	cmp	r1, #0
 80209ac:	d044      	beq.n	8020a38 <_free_r+0x90>
 80209ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80209b2:	9001      	str	r0, [sp, #4]
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	f1a1 0404 	sub.w	r4, r1, #4
 80209ba:	bfb8      	it	lt
 80209bc:	18e4      	addlt	r4, r4, r3
 80209be:	f7fd fdbd 	bl	801e53c <__malloc_lock>
 80209c2:	4a1e      	ldr	r2, [pc, #120]	; (8020a3c <_free_r+0x94>)
 80209c4:	9801      	ldr	r0, [sp, #4]
 80209c6:	6813      	ldr	r3, [r2, #0]
 80209c8:	b933      	cbnz	r3, 80209d8 <_free_r+0x30>
 80209ca:	6063      	str	r3, [r4, #4]
 80209cc:	6014      	str	r4, [r2, #0]
 80209ce:	b003      	add	sp, #12
 80209d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80209d4:	f7fd bdb8 	b.w	801e548 <__malloc_unlock>
 80209d8:	42a3      	cmp	r3, r4
 80209da:	d908      	bls.n	80209ee <_free_r+0x46>
 80209dc:	6825      	ldr	r5, [r4, #0]
 80209de:	1961      	adds	r1, r4, r5
 80209e0:	428b      	cmp	r3, r1
 80209e2:	bf01      	itttt	eq
 80209e4:	6819      	ldreq	r1, [r3, #0]
 80209e6:	685b      	ldreq	r3, [r3, #4]
 80209e8:	1949      	addeq	r1, r1, r5
 80209ea:	6021      	streq	r1, [r4, #0]
 80209ec:	e7ed      	b.n	80209ca <_free_r+0x22>
 80209ee:	461a      	mov	r2, r3
 80209f0:	685b      	ldr	r3, [r3, #4]
 80209f2:	b10b      	cbz	r3, 80209f8 <_free_r+0x50>
 80209f4:	42a3      	cmp	r3, r4
 80209f6:	d9fa      	bls.n	80209ee <_free_r+0x46>
 80209f8:	6811      	ldr	r1, [r2, #0]
 80209fa:	1855      	adds	r5, r2, r1
 80209fc:	42a5      	cmp	r5, r4
 80209fe:	d10b      	bne.n	8020a18 <_free_r+0x70>
 8020a00:	6824      	ldr	r4, [r4, #0]
 8020a02:	4421      	add	r1, r4
 8020a04:	1854      	adds	r4, r2, r1
 8020a06:	42a3      	cmp	r3, r4
 8020a08:	6011      	str	r1, [r2, #0]
 8020a0a:	d1e0      	bne.n	80209ce <_free_r+0x26>
 8020a0c:	681c      	ldr	r4, [r3, #0]
 8020a0e:	685b      	ldr	r3, [r3, #4]
 8020a10:	6053      	str	r3, [r2, #4]
 8020a12:	440c      	add	r4, r1
 8020a14:	6014      	str	r4, [r2, #0]
 8020a16:	e7da      	b.n	80209ce <_free_r+0x26>
 8020a18:	d902      	bls.n	8020a20 <_free_r+0x78>
 8020a1a:	230c      	movs	r3, #12
 8020a1c:	6003      	str	r3, [r0, #0]
 8020a1e:	e7d6      	b.n	80209ce <_free_r+0x26>
 8020a20:	6825      	ldr	r5, [r4, #0]
 8020a22:	1961      	adds	r1, r4, r5
 8020a24:	428b      	cmp	r3, r1
 8020a26:	bf04      	itt	eq
 8020a28:	6819      	ldreq	r1, [r3, #0]
 8020a2a:	685b      	ldreq	r3, [r3, #4]
 8020a2c:	6063      	str	r3, [r4, #4]
 8020a2e:	bf04      	itt	eq
 8020a30:	1949      	addeq	r1, r1, r5
 8020a32:	6021      	streq	r1, [r4, #0]
 8020a34:	6054      	str	r4, [r2, #4]
 8020a36:	e7ca      	b.n	80209ce <_free_r+0x26>
 8020a38:	b003      	add	sp, #12
 8020a3a:	bd30      	pop	{r4, r5, pc}
 8020a3c:	20016ed4 	.word	0x20016ed4

08020a40 <_Balloc>:
 8020a40:	b570      	push	{r4, r5, r6, lr}
 8020a42:	69c6      	ldr	r6, [r0, #28]
 8020a44:	4604      	mov	r4, r0
 8020a46:	460d      	mov	r5, r1
 8020a48:	b976      	cbnz	r6, 8020a68 <_Balloc+0x28>
 8020a4a:	2010      	movs	r0, #16
 8020a4c:	f7fd fcc6 	bl	801e3dc <malloc>
 8020a50:	4602      	mov	r2, r0
 8020a52:	61e0      	str	r0, [r4, #28]
 8020a54:	b920      	cbnz	r0, 8020a60 <_Balloc+0x20>
 8020a56:	4b18      	ldr	r3, [pc, #96]	; (8020ab8 <_Balloc+0x78>)
 8020a58:	4818      	ldr	r0, [pc, #96]	; (8020abc <_Balloc+0x7c>)
 8020a5a:	216b      	movs	r1, #107	; 0x6b
 8020a5c:	f7ff f984 	bl	801fd68 <__assert_func>
 8020a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020a64:	6006      	str	r6, [r0, #0]
 8020a66:	60c6      	str	r6, [r0, #12]
 8020a68:	69e6      	ldr	r6, [r4, #28]
 8020a6a:	68f3      	ldr	r3, [r6, #12]
 8020a6c:	b183      	cbz	r3, 8020a90 <_Balloc+0x50>
 8020a6e:	69e3      	ldr	r3, [r4, #28]
 8020a70:	68db      	ldr	r3, [r3, #12]
 8020a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020a76:	b9b8      	cbnz	r0, 8020aa8 <_Balloc+0x68>
 8020a78:	2101      	movs	r1, #1
 8020a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8020a7e:	1d72      	adds	r2, r6, #5
 8020a80:	0092      	lsls	r2, r2, #2
 8020a82:	4620      	mov	r0, r4
 8020a84:	f7fd fc3a 	bl	801e2fc <_calloc_r>
 8020a88:	b160      	cbz	r0, 8020aa4 <_Balloc+0x64>
 8020a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020a8e:	e00e      	b.n	8020aae <_Balloc+0x6e>
 8020a90:	2221      	movs	r2, #33	; 0x21
 8020a92:	2104      	movs	r1, #4
 8020a94:	4620      	mov	r0, r4
 8020a96:	f7fd fc31 	bl	801e2fc <_calloc_r>
 8020a9a:	69e3      	ldr	r3, [r4, #28]
 8020a9c:	60f0      	str	r0, [r6, #12]
 8020a9e:	68db      	ldr	r3, [r3, #12]
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	d1e4      	bne.n	8020a6e <_Balloc+0x2e>
 8020aa4:	2000      	movs	r0, #0
 8020aa6:	bd70      	pop	{r4, r5, r6, pc}
 8020aa8:	6802      	ldr	r2, [r0, #0]
 8020aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020aae:	2300      	movs	r3, #0
 8020ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020ab4:	e7f7      	b.n	8020aa6 <_Balloc+0x66>
 8020ab6:	bf00      	nop
 8020ab8:	080248ac 	.word	0x080248ac
 8020abc:	08024b07 	.word	0x08024b07

08020ac0 <_Bfree>:
 8020ac0:	b570      	push	{r4, r5, r6, lr}
 8020ac2:	69c6      	ldr	r6, [r0, #28]
 8020ac4:	4605      	mov	r5, r0
 8020ac6:	460c      	mov	r4, r1
 8020ac8:	b976      	cbnz	r6, 8020ae8 <_Bfree+0x28>
 8020aca:	2010      	movs	r0, #16
 8020acc:	f7fd fc86 	bl	801e3dc <malloc>
 8020ad0:	4602      	mov	r2, r0
 8020ad2:	61e8      	str	r0, [r5, #28]
 8020ad4:	b920      	cbnz	r0, 8020ae0 <_Bfree+0x20>
 8020ad6:	4b09      	ldr	r3, [pc, #36]	; (8020afc <_Bfree+0x3c>)
 8020ad8:	4809      	ldr	r0, [pc, #36]	; (8020b00 <_Bfree+0x40>)
 8020ada:	218f      	movs	r1, #143	; 0x8f
 8020adc:	f7ff f944 	bl	801fd68 <__assert_func>
 8020ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020ae4:	6006      	str	r6, [r0, #0]
 8020ae6:	60c6      	str	r6, [r0, #12]
 8020ae8:	b13c      	cbz	r4, 8020afa <_Bfree+0x3a>
 8020aea:	69eb      	ldr	r3, [r5, #28]
 8020aec:	6862      	ldr	r2, [r4, #4]
 8020aee:	68db      	ldr	r3, [r3, #12]
 8020af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020af4:	6021      	str	r1, [r4, #0]
 8020af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020afa:	bd70      	pop	{r4, r5, r6, pc}
 8020afc:	080248ac 	.word	0x080248ac
 8020b00:	08024b07 	.word	0x08024b07

08020b04 <__multadd>:
 8020b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b08:	690d      	ldr	r5, [r1, #16]
 8020b0a:	4607      	mov	r7, r0
 8020b0c:	460c      	mov	r4, r1
 8020b0e:	461e      	mov	r6, r3
 8020b10:	f101 0c14 	add.w	ip, r1, #20
 8020b14:	2000      	movs	r0, #0
 8020b16:	f8dc 3000 	ldr.w	r3, [ip]
 8020b1a:	b299      	uxth	r1, r3
 8020b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8020b20:	0c1e      	lsrs	r6, r3, #16
 8020b22:	0c0b      	lsrs	r3, r1, #16
 8020b24:	fb02 3306 	mla	r3, r2, r6, r3
 8020b28:	b289      	uxth	r1, r1
 8020b2a:	3001      	adds	r0, #1
 8020b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020b30:	4285      	cmp	r5, r0
 8020b32:	f84c 1b04 	str.w	r1, [ip], #4
 8020b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020b3a:	dcec      	bgt.n	8020b16 <__multadd+0x12>
 8020b3c:	b30e      	cbz	r6, 8020b82 <__multadd+0x7e>
 8020b3e:	68a3      	ldr	r3, [r4, #8]
 8020b40:	42ab      	cmp	r3, r5
 8020b42:	dc19      	bgt.n	8020b78 <__multadd+0x74>
 8020b44:	6861      	ldr	r1, [r4, #4]
 8020b46:	4638      	mov	r0, r7
 8020b48:	3101      	adds	r1, #1
 8020b4a:	f7ff ff79 	bl	8020a40 <_Balloc>
 8020b4e:	4680      	mov	r8, r0
 8020b50:	b928      	cbnz	r0, 8020b5e <__multadd+0x5a>
 8020b52:	4602      	mov	r2, r0
 8020b54:	4b0c      	ldr	r3, [pc, #48]	; (8020b88 <__multadd+0x84>)
 8020b56:	480d      	ldr	r0, [pc, #52]	; (8020b8c <__multadd+0x88>)
 8020b58:	21ba      	movs	r1, #186	; 0xba
 8020b5a:	f7ff f905 	bl	801fd68 <__assert_func>
 8020b5e:	6922      	ldr	r2, [r4, #16]
 8020b60:	3202      	adds	r2, #2
 8020b62:	f104 010c 	add.w	r1, r4, #12
 8020b66:	0092      	lsls	r2, r2, #2
 8020b68:	300c      	adds	r0, #12
 8020b6a:	f7ff f8e8 	bl	801fd3e <memcpy>
 8020b6e:	4621      	mov	r1, r4
 8020b70:	4638      	mov	r0, r7
 8020b72:	f7ff ffa5 	bl	8020ac0 <_Bfree>
 8020b76:	4644      	mov	r4, r8
 8020b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020b7c:	3501      	adds	r5, #1
 8020b7e:	615e      	str	r6, [r3, #20]
 8020b80:	6125      	str	r5, [r4, #16]
 8020b82:	4620      	mov	r0, r4
 8020b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b88:	08024af6 	.word	0x08024af6
 8020b8c:	08024b07 	.word	0x08024b07

08020b90 <__s2b>:
 8020b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b94:	460c      	mov	r4, r1
 8020b96:	4615      	mov	r5, r2
 8020b98:	461f      	mov	r7, r3
 8020b9a:	2209      	movs	r2, #9
 8020b9c:	3308      	adds	r3, #8
 8020b9e:	4606      	mov	r6, r0
 8020ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8020ba4:	2100      	movs	r1, #0
 8020ba6:	2201      	movs	r2, #1
 8020ba8:	429a      	cmp	r2, r3
 8020baa:	db09      	blt.n	8020bc0 <__s2b+0x30>
 8020bac:	4630      	mov	r0, r6
 8020bae:	f7ff ff47 	bl	8020a40 <_Balloc>
 8020bb2:	b940      	cbnz	r0, 8020bc6 <__s2b+0x36>
 8020bb4:	4602      	mov	r2, r0
 8020bb6:	4b19      	ldr	r3, [pc, #100]	; (8020c1c <__s2b+0x8c>)
 8020bb8:	4819      	ldr	r0, [pc, #100]	; (8020c20 <__s2b+0x90>)
 8020bba:	21d3      	movs	r1, #211	; 0xd3
 8020bbc:	f7ff f8d4 	bl	801fd68 <__assert_func>
 8020bc0:	0052      	lsls	r2, r2, #1
 8020bc2:	3101      	adds	r1, #1
 8020bc4:	e7f0      	b.n	8020ba8 <__s2b+0x18>
 8020bc6:	9b08      	ldr	r3, [sp, #32]
 8020bc8:	6143      	str	r3, [r0, #20]
 8020bca:	2d09      	cmp	r5, #9
 8020bcc:	f04f 0301 	mov.w	r3, #1
 8020bd0:	6103      	str	r3, [r0, #16]
 8020bd2:	dd16      	ble.n	8020c02 <__s2b+0x72>
 8020bd4:	f104 0909 	add.w	r9, r4, #9
 8020bd8:	46c8      	mov	r8, r9
 8020bda:	442c      	add	r4, r5
 8020bdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020be0:	4601      	mov	r1, r0
 8020be2:	3b30      	subs	r3, #48	; 0x30
 8020be4:	220a      	movs	r2, #10
 8020be6:	4630      	mov	r0, r6
 8020be8:	f7ff ff8c 	bl	8020b04 <__multadd>
 8020bec:	45a0      	cmp	r8, r4
 8020bee:	d1f5      	bne.n	8020bdc <__s2b+0x4c>
 8020bf0:	f1a5 0408 	sub.w	r4, r5, #8
 8020bf4:	444c      	add	r4, r9
 8020bf6:	1b2d      	subs	r5, r5, r4
 8020bf8:	1963      	adds	r3, r4, r5
 8020bfa:	42bb      	cmp	r3, r7
 8020bfc:	db04      	blt.n	8020c08 <__s2b+0x78>
 8020bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020c02:	340a      	adds	r4, #10
 8020c04:	2509      	movs	r5, #9
 8020c06:	e7f6      	b.n	8020bf6 <__s2b+0x66>
 8020c08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020c0c:	4601      	mov	r1, r0
 8020c0e:	3b30      	subs	r3, #48	; 0x30
 8020c10:	220a      	movs	r2, #10
 8020c12:	4630      	mov	r0, r6
 8020c14:	f7ff ff76 	bl	8020b04 <__multadd>
 8020c18:	e7ee      	b.n	8020bf8 <__s2b+0x68>
 8020c1a:	bf00      	nop
 8020c1c:	08024af6 	.word	0x08024af6
 8020c20:	08024b07 	.word	0x08024b07

08020c24 <__hi0bits>:
 8020c24:	0c03      	lsrs	r3, r0, #16
 8020c26:	041b      	lsls	r3, r3, #16
 8020c28:	b9d3      	cbnz	r3, 8020c60 <__hi0bits+0x3c>
 8020c2a:	0400      	lsls	r0, r0, #16
 8020c2c:	2310      	movs	r3, #16
 8020c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020c32:	bf04      	itt	eq
 8020c34:	0200      	lsleq	r0, r0, #8
 8020c36:	3308      	addeq	r3, #8
 8020c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020c3c:	bf04      	itt	eq
 8020c3e:	0100      	lsleq	r0, r0, #4
 8020c40:	3304      	addeq	r3, #4
 8020c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020c46:	bf04      	itt	eq
 8020c48:	0080      	lsleq	r0, r0, #2
 8020c4a:	3302      	addeq	r3, #2
 8020c4c:	2800      	cmp	r0, #0
 8020c4e:	db05      	blt.n	8020c5c <__hi0bits+0x38>
 8020c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020c54:	f103 0301 	add.w	r3, r3, #1
 8020c58:	bf08      	it	eq
 8020c5a:	2320      	moveq	r3, #32
 8020c5c:	4618      	mov	r0, r3
 8020c5e:	4770      	bx	lr
 8020c60:	2300      	movs	r3, #0
 8020c62:	e7e4      	b.n	8020c2e <__hi0bits+0xa>

08020c64 <__lo0bits>:
 8020c64:	6803      	ldr	r3, [r0, #0]
 8020c66:	f013 0207 	ands.w	r2, r3, #7
 8020c6a:	d00c      	beq.n	8020c86 <__lo0bits+0x22>
 8020c6c:	07d9      	lsls	r1, r3, #31
 8020c6e:	d422      	bmi.n	8020cb6 <__lo0bits+0x52>
 8020c70:	079a      	lsls	r2, r3, #30
 8020c72:	bf49      	itett	mi
 8020c74:	085b      	lsrmi	r3, r3, #1
 8020c76:	089b      	lsrpl	r3, r3, #2
 8020c78:	6003      	strmi	r3, [r0, #0]
 8020c7a:	2201      	movmi	r2, #1
 8020c7c:	bf5c      	itt	pl
 8020c7e:	6003      	strpl	r3, [r0, #0]
 8020c80:	2202      	movpl	r2, #2
 8020c82:	4610      	mov	r0, r2
 8020c84:	4770      	bx	lr
 8020c86:	b299      	uxth	r1, r3
 8020c88:	b909      	cbnz	r1, 8020c8e <__lo0bits+0x2a>
 8020c8a:	0c1b      	lsrs	r3, r3, #16
 8020c8c:	2210      	movs	r2, #16
 8020c8e:	b2d9      	uxtb	r1, r3
 8020c90:	b909      	cbnz	r1, 8020c96 <__lo0bits+0x32>
 8020c92:	3208      	adds	r2, #8
 8020c94:	0a1b      	lsrs	r3, r3, #8
 8020c96:	0719      	lsls	r1, r3, #28
 8020c98:	bf04      	itt	eq
 8020c9a:	091b      	lsreq	r3, r3, #4
 8020c9c:	3204      	addeq	r2, #4
 8020c9e:	0799      	lsls	r1, r3, #30
 8020ca0:	bf04      	itt	eq
 8020ca2:	089b      	lsreq	r3, r3, #2
 8020ca4:	3202      	addeq	r2, #2
 8020ca6:	07d9      	lsls	r1, r3, #31
 8020ca8:	d403      	bmi.n	8020cb2 <__lo0bits+0x4e>
 8020caa:	085b      	lsrs	r3, r3, #1
 8020cac:	f102 0201 	add.w	r2, r2, #1
 8020cb0:	d003      	beq.n	8020cba <__lo0bits+0x56>
 8020cb2:	6003      	str	r3, [r0, #0]
 8020cb4:	e7e5      	b.n	8020c82 <__lo0bits+0x1e>
 8020cb6:	2200      	movs	r2, #0
 8020cb8:	e7e3      	b.n	8020c82 <__lo0bits+0x1e>
 8020cba:	2220      	movs	r2, #32
 8020cbc:	e7e1      	b.n	8020c82 <__lo0bits+0x1e>
	...

08020cc0 <__i2b>:
 8020cc0:	b510      	push	{r4, lr}
 8020cc2:	460c      	mov	r4, r1
 8020cc4:	2101      	movs	r1, #1
 8020cc6:	f7ff febb 	bl	8020a40 <_Balloc>
 8020cca:	4602      	mov	r2, r0
 8020ccc:	b928      	cbnz	r0, 8020cda <__i2b+0x1a>
 8020cce:	4b05      	ldr	r3, [pc, #20]	; (8020ce4 <__i2b+0x24>)
 8020cd0:	4805      	ldr	r0, [pc, #20]	; (8020ce8 <__i2b+0x28>)
 8020cd2:	f240 1145 	movw	r1, #325	; 0x145
 8020cd6:	f7ff f847 	bl	801fd68 <__assert_func>
 8020cda:	2301      	movs	r3, #1
 8020cdc:	6144      	str	r4, [r0, #20]
 8020cde:	6103      	str	r3, [r0, #16]
 8020ce0:	bd10      	pop	{r4, pc}
 8020ce2:	bf00      	nop
 8020ce4:	08024af6 	.word	0x08024af6
 8020ce8:	08024b07 	.word	0x08024b07

08020cec <__multiply>:
 8020cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cf0:	4691      	mov	r9, r2
 8020cf2:	690a      	ldr	r2, [r1, #16]
 8020cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020cf8:	429a      	cmp	r2, r3
 8020cfa:	bfb8      	it	lt
 8020cfc:	460b      	movlt	r3, r1
 8020cfe:	460c      	mov	r4, r1
 8020d00:	bfbc      	itt	lt
 8020d02:	464c      	movlt	r4, r9
 8020d04:	4699      	movlt	r9, r3
 8020d06:	6927      	ldr	r7, [r4, #16]
 8020d08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020d0c:	68a3      	ldr	r3, [r4, #8]
 8020d0e:	6861      	ldr	r1, [r4, #4]
 8020d10:	eb07 060a 	add.w	r6, r7, sl
 8020d14:	42b3      	cmp	r3, r6
 8020d16:	b085      	sub	sp, #20
 8020d18:	bfb8      	it	lt
 8020d1a:	3101      	addlt	r1, #1
 8020d1c:	f7ff fe90 	bl	8020a40 <_Balloc>
 8020d20:	b930      	cbnz	r0, 8020d30 <__multiply+0x44>
 8020d22:	4602      	mov	r2, r0
 8020d24:	4b44      	ldr	r3, [pc, #272]	; (8020e38 <__multiply+0x14c>)
 8020d26:	4845      	ldr	r0, [pc, #276]	; (8020e3c <__multiply+0x150>)
 8020d28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8020d2c:	f7ff f81c 	bl	801fd68 <__assert_func>
 8020d30:	f100 0514 	add.w	r5, r0, #20
 8020d34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020d38:	462b      	mov	r3, r5
 8020d3a:	2200      	movs	r2, #0
 8020d3c:	4543      	cmp	r3, r8
 8020d3e:	d321      	bcc.n	8020d84 <__multiply+0x98>
 8020d40:	f104 0314 	add.w	r3, r4, #20
 8020d44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020d48:	f109 0314 	add.w	r3, r9, #20
 8020d4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8020d50:	9202      	str	r2, [sp, #8]
 8020d52:	1b3a      	subs	r2, r7, r4
 8020d54:	3a15      	subs	r2, #21
 8020d56:	f022 0203 	bic.w	r2, r2, #3
 8020d5a:	3204      	adds	r2, #4
 8020d5c:	f104 0115 	add.w	r1, r4, #21
 8020d60:	428f      	cmp	r7, r1
 8020d62:	bf38      	it	cc
 8020d64:	2204      	movcc	r2, #4
 8020d66:	9201      	str	r2, [sp, #4]
 8020d68:	9a02      	ldr	r2, [sp, #8]
 8020d6a:	9303      	str	r3, [sp, #12]
 8020d6c:	429a      	cmp	r2, r3
 8020d6e:	d80c      	bhi.n	8020d8a <__multiply+0x9e>
 8020d70:	2e00      	cmp	r6, #0
 8020d72:	dd03      	ble.n	8020d7c <__multiply+0x90>
 8020d74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	d05b      	beq.n	8020e34 <__multiply+0x148>
 8020d7c:	6106      	str	r6, [r0, #16]
 8020d7e:	b005      	add	sp, #20
 8020d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d84:	f843 2b04 	str.w	r2, [r3], #4
 8020d88:	e7d8      	b.n	8020d3c <__multiply+0x50>
 8020d8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8020d8e:	f1ba 0f00 	cmp.w	sl, #0
 8020d92:	d024      	beq.n	8020dde <__multiply+0xf2>
 8020d94:	f104 0e14 	add.w	lr, r4, #20
 8020d98:	46a9      	mov	r9, r5
 8020d9a:	f04f 0c00 	mov.w	ip, #0
 8020d9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8020da2:	f8d9 1000 	ldr.w	r1, [r9]
 8020da6:	fa1f fb82 	uxth.w	fp, r2
 8020daa:	b289      	uxth	r1, r1
 8020dac:	fb0a 110b 	mla	r1, sl, fp, r1
 8020db0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8020db4:	f8d9 2000 	ldr.w	r2, [r9]
 8020db8:	4461      	add	r1, ip
 8020dba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020dbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8020dc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8020dc6:	b289      	uxth	r1, r1
 8020dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020dcc:	4577      	cmp	r7, lr
 8020dce:	f849 1b04 	str.w	r1, [r9], #4
 8020dd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020dd6:	d8e2      	bhi.n	8020d9e <__multiply+0xb2>
 8020dd8:	9a01      	ldr	r2, [sp, #4]
 8020dda:	f845 c002 	str.w	ip, [r5, r2]
 8020dde:	9a03      	ldr	r2, [sp, #12]
 8020de0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020de4:	3304      	adds	r3, #4
 8020de6:	f1b9 0f00 	cmp.w	r9, #0
 8020dea:	d021      	beq.n	8020e30 <__multiply+0x144>
 8020dec:	6829      	ldr	r1, [r5, #0]
 8020dee:	f104 0c14 	add.w	ip, r4, #20
 8020df2:	46ae      	mov	lr, r5
 8020df4:	f04f 0a00 	mov.w	sl, #0
 8020df8:	f8bc b000 	ldrh.w	fp, [ip]
 8020dfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8020e00:	fb09 220b 	mla	r2, r9, fp, r2
 8020e04:	4452      	add	r2, sl
 8020e06:	b289      	uxth	r1, r1
 8020e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020e0c:	f84e 1b04 	str.w	r1, [lr], #4
 8020e10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8020e14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8020e18:	f8be 1000 	ldrh.w	r1, [lr]
 8020e1c:	fb09 110a 	mla	r1, r9, sl, r1
 8020e20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8020e24:	4567      	cmp	r7, ip
 8020e26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8020e2a:	d8e5      	bhi.n	8020df8 <__multiply+0x10c>
 8020e2c:	9a01      	ldr	r2, [sp, #4]
 8020e2e:	50a9      	str	r1, [r5, r2]
 8020e30:	3504      	adds	r5, #4
 8020e32:	e799      	b.n	8020d68 <__multiply+0x7c>
 8020e34:	3e01      	subs	r6, #1
 8020e36:	e79b      	b.n	8020d70 <__multiply+0x84>
 8020e38:	08024af6 	.word	0x08024af6
 8020e3c:	08024b07 	.word	0x08024b07

08020e40 <__pow5mult>:
 8020e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020e44:	4615      	mov	r5, r2
 8020e46:	f012 0203 	ands.w	r2, r2, #3
 8020e4a:	4606      	mov	r6, r0
 8020e4c:	460f      	mov	r7, r1
 8020e4e:	d007      	beq.n	8020e60 <__pow5mult+0x20>
 8020e50:	4c25      	ldr	r4, [pc, #148]	; (8020ee8 <__pow5mult+0xa8>)
 8020e52:	3a01      	subs	r2, #1
 8020e54:	2300      	movs	r3, #0
 8020e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020e5a:	f7ff fe53 	bl	8020b04 <__multadd>
 8020e5e:	4607      	mov	r7, r0
 8020e60:	10ad      	asrs	r5, r5, #2
 8020e62:	d03d      	beq.n	8020ee0 <__pow5mult+0xa0>
 8020e64:	69f4      	ldr	r4, [r6, #28]
 8020e66:	b97c      	cbnz	r4, 8020e88 <__pow5mult+0x48>
 8020e68:	2010      	movs	r0, #16
 8020e6a:	f7fd fab7 	bl	801e3dc <malloc>
 8020e6e:	4602      	mov	r2, r0
 8020e70:	61f0      	str	r0, [r6, #28]
 8020e72:	b928      	cbnz	r0, 8020e80 <__pow5mult+0x40>
 8020e74:	4b1d      	ldr	r3, [pc, #116]	; (8020eec <__pow5mult+0xac>)
 8020e76:	481e      	ldr	r0, [pc, #120]	; (8020ef0 <__pow5mult+0xb0>)
 8020e78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8020e7c:	f7fe ff74 	bl	801fd68 <__assert_func>
 8020e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020e84:	6004      	str	r4, [r0, #0]
 8020e86:	60c4      	str	r4, [r0, #12]
 8020e88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8020e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020e90:	b94c      	cbnz	r4, 8020ea6 <__pow5mult+0x66>
 8020e92:	f240 2171 	movw	r1, #625	; 0x271
 8020e96:	4630      	mov	r0, r6
 8020e98:	f7ff ff12 	bl	8020cc0 <__i2b>
 8020e9c:	2300      	movs	r3, #0
 8020e9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8020ea2:	4604      	mov	r4, r0
 8020ea4:	6003      	str	r3, [r0, #0]
 8020ea6:	f04f 0900 	mov.w	r9, #0
 8020eaa:	07eb      	lsls	r3, r5, #31
 8020eac:	d50a      	bpl.n	8020ec4 <__pow5mult+0x84>
 8020eae:	4639      	mov	r1, r7
 8020eb0:	4622      	mov	r2, r4
 8020eb2:	4630      	mov	r0, r6
 8020eb4:	f7ff ff1a 	bl	8020cec <__multiply>
 8020eb8:	4639      	mov	r1, r7
 8020eba:	4680      	mov	r8, r0
 8020ebc:	4630      	mov	r0, r6
 8020ebe:	f7ff fdff 	bl	8020ac0 <_Bfree>
 8020ec2:	4647      	mov	r7, r8
 8020ec4:	106d      	asrs	r5, r5, #1
 8020ec6:	d00b      	beq.n	8020ee0 <__pow5mult+0xa0>
 8020ec8:	6820      	ldr	r0, [r4, #0]
 8020eca:	b938      	cbnz	r0, 8020edc <__pow5mult+0x9c>
 8020ecc:	4622      	mov	r2, r4
 8020ece:	4621      	mov	r1, r4
 8020ed0:	4630      	mov	r0, r6
 8020ed2:	f7ff ff0b 	bl	8020cec <__multiply>
 8020ed6:	6020      	str	r0, [r4, #0]
 8020ed8:	f8c0 9000 	str.w	r9, [r0]
 8020edc:	4604      	mov	r4, r0
 8020ede:	e7e4      	b.n	8020eaa <__pow5mult+0x6a>
 8020ee0:	4638      	mov	r0, r7
 8020ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ee6:	bf00      	nop
 8020ee8:	08024c50 	.word	0x08024c50
 8020eec:	080248ac 	.word	0x080248ac
 8020ef0:	08024b07 	.word	0x08024b07

08020ef4 <__lshift>:
 8020ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ef8:	460c      	mov	r4, r1
 8020efa:	6849      	ldr	r1, [r1, #4]
 8020efc:	6923      	ldr	r3, [r4, #16]
 8020efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020f02:	68a3      	ldr	r3, [r4, #8]
 8020f04:	4607      	mov	r7, r0
 8020f06:	4691      	mov	r9, r2
 8020f08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020f0c:	f108 0601 	add.w	r6, r8, #1
 8020f10:	42b3      	cmp	r3, r6
 8020f12:	db0b      	blt.n	8020f2c <__lshift+0x38>
 8020f14:	4638      	mov	r0, r7
 8020f16:	f7ff fd93 	bl	8020a40 <_Balloc>
 8020f1a:	4605      	mov	r5, r0
 8020f1c:	b948      	cbnz	r0, 8020f32 <__lshift+0x3e>
 8020f1e:	4602      	mov	r2, r0
 8020f20:	4b28      	ldr	r3, [pc, #160]	; (8020fc4 <__lshift+0xd0>)
 8020f22:	4829      	ldr	r0, [pc, #164]	; (8020fc8 <__lshift+0xd4>)
 8020f24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8020f28:	f7fe ff1e 	bl	801fd68 <__assert_func>
 8020f2c:	3101      	adds	r1, #1
 8020f2e:	005b      	lsls	r3, r3, #1
 8020f30:	e7ee      	b.n	8020f10 <__lshift+0x1c>
 8020f32:	2300      	movs	r3, #0
 8020f34:	f100 0114 	add.w	r1, r0, #20
 8020f38:	f100 0210 	add.w	r2, r0, #16
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	4553      	cmp	r3, sl
 8020f40:	db33      	blt.n	8020faa <__lshift+0xb6>
 8020f42:	6920      	ldr	r0, [r4, #16]
 8020f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020f48:	f104 0314 	add.w	r3, r4, #20
 8020f4c:	f019 091f 	ands.w	r9, r9, #31
 8020f50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020f54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020f58:	d02b      	beq.n	8020fb2 <__lshift+0xbe>
 8020f5a:	f1c9 0e20 	rsb	lr, r9, #32
 8020f5e:	468a      	mov	sl, r1
 8020f60:	2200      	movs	r2, #0
 8020f62:	6818      	ldr	r0, [r3, #0]
 8020f64:	fa00 f009 	lsl.w	r0, r0, r9
 8020f68:	4310      	orrs	r0, r2
 8020f6a:	f84a 0b04 	str.w	r0, [sl], #4
 8020f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020f72:	459c      	cmp	ip, r3
 8020f74:	fa22 f20e 	lsr.w	r2, r2, lr
 8020f78:	d8f3      	bhi.n	8020f62 <__lshift+0x6e>
 8020f7a:	ebac 0304 	sub.w	r3, ip, r4
 8020f7e:	3b15      	subs	r3, #21
 8020f80:	f023 0303 	bic.w	r3, r3, #3
 8020f84:	3304      	adds	r3, #4
 8020f86:	f104 0015 	add.w	r0, r4, #21
 8020f8a:	4584      	cmp	ip, r0
 8020f8c:	bf38      	it	cc
 8020f8e:	2304      	movcc	r3, #4
 8020f90:	50ca      	str	r2, [r1, r3]
 8020f92:	b10a      	cbz	r2, 8020f98 <__lshift+0xa4>
 8020f94:	f108 0602 	add.w	r6, r8, #2
 8020f98:	3e01      	subs	r6, #1
 8020f9a:	4638      	mov	r0, r7
 8020f9c:	612e      	str	r6, [r5, #16]
 8020f9e:	4621      	mov	r1, r4
 8020fa0:	f7ff fd8e 	bl	8020ac0 <_Bfree>
 8020fa4:	4628      	mov	r0, r5
 8020fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020faa:	f842 0f04 	str.w	r0, [r2, #4]!
 8020fae:	3301      	adds	r3, #1
 8020fb0:	e7c5      	b.n	8020f3e <__lshift+0x4a>
 8020fb2:	3904      	subs	r1, #4
 8020fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8020fb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8020fbc:	459c      	cmp	ip, r3
 8020fbe:	d8f9      	bhi.n	8020fb4 <__lshift+0xc0>
 8020fc0:	e7ea      	b.n	8020f98 <__lshift+0xa4>
 8020fc2:	bf00      	nop
 8020fc4:	08024af6 	.word	0x08024af6
 8020fc8:	08024b07 	.word	0x08024b07

08020fcc <__mcmp>:
 8020fcc:	b530      	push	{r4, r5, lr}
 8020fce:	6902      	ldr	r2, [r0, #16]
 8020fd0:	690c      	ldr	r4, [r1, #16]
 8020fd2:	1b12      	subs	r2, r2, r4
 8020fd4:	d10e      	bne.n	8020ff4 <__mcmp+0x28>
 8020fd6:	f100 0314 	add.w	r3, r0, #20
 8020fda:	3114      	adds	r1, #20
 8020fdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020fe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020fe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020fe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020fec:	42a5      	cmp	r5, r4
 8020fee:	d003      	beq.n	8020ff8 <__mcmp+0x2c>
 8020ff0:	d305      	bcc.n	8020ffe <__mcmp+0x32>
 8020ff2:	2201      	movs	r2, #1
 8020ff4:	4610      	mov	r0, r2
 8020ff6:	bd30      	pop	{r4, r5, pc}
 8020ff8:	4283      	cmp	r3, r0
 8020ffa:	d3f3      	bcc.n	8020fe4 <__mcmp+0x18>
 8020ffc:	e7fa      	b.n	8020ff4 <__mcmp+0x28>
 8020ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021002:	e7f7      	b.n	8020ff4 <__mcmp+0x28>

08021004 <__mdiff>:
 8021004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021008:	460c      	mov	r4, r1
 802100a:	4606      	mov	r6, r0
 802100c:	4611      	mov	r1, r2
 802100e:	4620      	mov	r0, r4
 8021010:	4690      	mov	r8, r2
 8021012:	f7ff ffdb 	bl	8020fcc <__mcmp>
 8021016:	1e05      	subs	r5, r0, #0
 8021018:	d110      	bne.n	802103c <__mdiff+0x38>
 802101a:	4629      	mov	r1, r5
 802101c:	4630      	mov	r0, r6
 802101e:	f7ff fd0f 	bl	8020a40 <_Balloc>
 8021022:	b930      	cbnz	r0, 8021032 <__mdiff+0x2e>
 8021024:	4b3a      	ldr	r3, [pc, #232]	; (8021110 <__mdiff+0x10c>)
 8021026:	4602      	mov	r2, r0
 8021028:	f240 2137 	movw	r1, #567	; 0x237
 802102c:	4839      	ldr	r0, [pc, #228]	; (8021114 <__mdiff+0x110>)
 802102e:	f7fe fe9b 	bl	801fd68 <__assert_func>
 8021032:	2301      	movs	r3, #1
 8021034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802103c:	bfa4      	itt	ge
 802103e:	4643      	movge	r3, r8
 8021040:	46a0      	movge	r8, r4
 8021042:	4630      	mov	r0, r6
 8021044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021048:	bfa6      	itte	ge
 802104a:	461c      	movge	r4, r3
 802104c:	2500      	movge	r5, #0
 802104e:	2501      	movlt	r5, #1
 8021050:	f7ff fcf6 	bl	8020a40 <_Balloc>
 8021054:	b920      	cbnz	r0, 8021060 <__mdiff+0x5c>
 8021056:	4b2e      	ldr	r3, [pc, #184]	; (8021110 <__mdiff+0x10c>)
 8021058:	4602      	mov	r2, r0
 802105a:	f240 2145 	movw	r1, #581	; 0x245
 802105e:	e7e5      	b.n	802102c <__mdiff+0x28>
 8021060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021064:	6926      	ldr	r6, [r4, #16]
 8021066:	60c5      	str	r5, [r0, #12]
 8021068:	f104 0914 	add.w	r9, r4, #20
 802106c:	f108 0514 	add.w	r5, r8, #20
 8021070:	f100 0e14 	add.w	lr, r0, #20
 8021074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802107c:	f108 0210 	add.w	r2, r8, #16
 8021080:	46f2      	mov	sl, lr
 8021082:	2100      	movs	r1, #0
 8021084:	f859 3b04 	ldr.w	r3, [r9], #4
 8021088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802108c:	fa11 f88b 	uxtah	r8, r1, fp
 8021090:	b299      	uxth	r1, r3
 8021092:	0c1b      	lsrs	r3, r3, #16
 8021094:	eba8 0801 	sub.w	r8, r8, r1
 8021098:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802109c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80210a0:	fa1f f888 	uxth.w	r8, r8
 80210a4:	1419      	asrs	r1, r3, #16
 80210a6:	454e      	cmp	r6, r9
 80210a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80210ac:	f84a 3b04 	str.w	r3, [sl], #4
 80210b0:	d8e8      	bhi.n	8021084 <__mdiff+0x80>
 80210b2:	1b33      	subs	r3, r6, r4
 80210b4:	3b15      	subs	r3, #21
 80210b6:	f023 0303 	bic.w	r3, r3, #3
 80210ba:	3304      	adds	r3, #4
 80210bc:	3415      	adds	r4, #21
 80210be:	42a6      	cmp	r6, r4
 80210c0:	bf38      	it	cc
 80210c2:	2304      	movcc	r3, #4
 80210c4:	441d      	add	r5, r3
 80210c6:	4473      	add	r3, lr
 80210c8:	469e      	mov	lr, r3
 80210ca:	462e      	mov	r6, r5
 80210cc:	4566      	cmp	r6, ip
 80210ce:	d30e      	bcc.n	80210ee <__mdiff+0xea>
 80210d0:	f10c 0203 	add.w	r2, ip, #3
 80210d4:	1b52      	subs	r2, r2, r5
 80210d6:	f022 0203 	bic.w	r2, r2, #3
 80210da:	3d03      	subs	r5, #3
 80210dc:	45ac      	cmp	ip, r5
 80210de:	bf38      	it	cc
 80210e0:	2200      	movcc	r2, #0
 80210e2:	4413      	add	r3, r2
 80210e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80210e8:	b17a      	cbz	r2, 802110a <__mdiff+0x106>
 80210ea:	6107      	str	r7, [r0, #16]
 80210ec:	e7a4      	b.n	8021038 <__mdiff+0x34>
 80210ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80210f2:	fa11 f288 	uxtah	r2, r1, r8
 80210f6:	1414      	asrs	r4, r2, #16
 80210f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80210fc:	b292      	uxth	r2, r2
 80210fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021102:	f84e 2b04 	str.w	r2, [lr], #4
 8021106:	1421      	asrs	r1, r4, #16
 8021108:	e7e0      	b.n	80210cc <__mdiff+0xc8>
 802110a:	3f01      	subs	r7, #1
 802110c:	e7ea      	b.n	80210e4 <__mdiff+0xe0>
 802110e:	bf00      	nop
 8021110:	08024af6 	.word	0x08024af6
 8021114:	08024b07 	.word	0x08024b07

08021118 <__ulp>:
 8021118:	b082      	sub	sp, #8
 802111a:	ed8d 0b00 	vstr	d0, [sp]
 802111e:	9a01      	ldr	r2, [sp, #4]
 8021120:	4b0f      	ldr	r3, [pc, #60]	; (8021160 <__ulp+0x48>)
 8021122:	4013      	ands	r3, r2
 8021124:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8021128:	2b00      	cmp	r3, #0
 802112a:	dc08      	bgt.n	802113e <__ulp+0x26>
 802112c:	425b      	negs	r3, r3
 802112e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8021132:	ea4f 5223 	mov.w	r2, r3, asr #20
 8021136:	da04      	bge.n	8021142 <__ulp+0x2a>
 8021138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802113c:	4113      	asrs	r3, r2
 802113e:	2200      	movs	r2, #0
 8021140:	e008      	b.n	8021154 <__ulp+0x3c>
 8021142:	f1a2 0314 	sub.w	r3, r2, #20
 8021146:	2b1e      	cmp	r3, #30
 8021148:	bfda      	itte	le
 802114a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802114e:	40da      	lsrle	r2, r3
 8021150:	2201      	movgt	r2, #1
 8021152:	2300      	movs	r3, #0
 8021154:	4619      	mov	r1, r3
 8021156:	4610      	mov	r0, r2
 8021158:	ec41 0b10 	vmov	d0, r0, r1
 802115c:	b002      	add	sp, #8
 802115e:	4770      	bx	lr
 8021160:	7ff00000 	.word	0x7ff00000

08021164 <__b2d>:
 8021164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021168:	6906      	ldr	r6, [r0, #16]
 802116a:	f100 0814 	add.w	r8, r0, #20
 802116e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8021172:	1f37      	subs	r7, r6, #4
 8021174:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8021178:	4610      	mov	r0, r2
 802117a:	f7ff fd53 	bl	8020c24 <__hi0bits>
 802117e:	f1c0 0320 	rsb	r3, r0, #32
 8021182:	280a      	cmp	r0, #10
 8021184:	600b      	str	r3, [r1, #0]
 8021186:	491b      	ldr	r1, [pc, #108]	; (80211f4 <__b2d+0x90>)
 8021188:	dc15      	bgt.n	80211b6 <__b2d+0x52>
 802118a:	f1c0 0c0b 	rsb	ip, r0, #11
 802118e:	fa22 f30c 	lsr.w	r3, r2, ip
 8021192:	45b8      	cmp	r8, r7
 8021194:	ea43 0501 	orr.w	r5, r3, r1
 8021198:	bf34      	ite	cc
 802119a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802119e:	2300      	movcs	r3, #0
 80211a0:	3015      	adds	r0, #21
 80211a2:	fa02 f000 	lsl.w	r0, r2, r0
 80211a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80211aa:	4303      	orrs	r3, r0
 80211ac:	461c      	mov	r4, r3
 80211ae:	ec45 4b10 	vmov	d0, r4, r5
 80211b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80211b6:	45b8      	cmp	r8, r7
 80211b8:	bf3a      	itte	cc
 80211ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80211be:	f1a6 0708 	subcc.w	r7, r6, #8
 80211c2:	2300      	movcs	r3, #0
 80211c4:	380b      	subs	r0, #11
 80211c6:	d012      	beq.n	80211ee <__b2d+0x8a>
 80211c8:	f1c0 0120 	rsb	r1, r0, #32
 80211cc:	fa23 f401 	lsr.w	r4, r3, r1
 80211d0:	4082      	lsls	r2, r0
 80211d2:	4322      	orrs	r2, r4
 80211d4:	4547      	cmp	r7, r8
 80211d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80211da:	bf8c      	ite	hi
 80211dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80211e0:	2200      	movls	r2, #0
 80211e2:	4083      	lsls	r3, r0
 80211e4:	40ca      	lsrs	r2, r1
 80211e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80211ea:	4313      	orrs	r3, r2
 80211ec:	e7de      	b.n	80211ac <__b2d+0x48>
 80211ee:	ea42 0501 	orr.w	r5, r2, r1
 80211f2:	e7db      	b.n	80211ac <__b2d+0x48>
 80211f4:	3ff00000 	.word	0x3ff00000

080211f8 <__d2b>:
 80211f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80211fc:	460f      	mov	r7, r1
 80211fe:	2101      	movs	r1, #1
 8021200:	ec59 8b10 	vmov	r8, r9, d0
 8021204:	4616      	mov	r6, r2
 8021206:	f7ff fc1b 	bl	8020a40 <_Balloc>
 802120a:	4604      	mov	r4, r0
 802120c:	b930      	cbnz	r0, 802121c <__d2b+0x24>
 802120e:	4602      	mov	r2, r0
 8021210:	4b24      	ldr	r3, [pc, #144]	; (80212a4 <__d2b+0xac>)
 8021212:	4825      	ldr	r0, [pc, #148]	; (80212a8 <__d2b+0xb0>)
 8021214:	f240 310f 	movw	r1, #783	; 0x30f
 8021218:	f7fe fda6 	bl	801fd68 <__assert_func>
 802121c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021224:	bb2d      	cbnz	r5, 8021272 <__d2b+0x7a>
 8021226:	9301      	str	r3, [sp, #4]
 8021228:	f1b8 0300 	subs.w	r3, r8, #0
 802122c:	d026      	beq.n	802127c <__d2b+0x84>
 802122e:	4668      	mov	r0, sp
 8021230:	9300      	str	r3, [sp, #0]
 8021232:	f7ff fd17 	bl	8020c64 <__lo0bits>
 8021236:	e9dd 1200 	ldrd	r1, r2, [sp]
 802123a:	b1e8      	cbz	r0, 8021278 <__d2b+0x80>
 802123c:	f1c0 0320 	rsb	r3, r0, #32
 8021240:	fa02 f303 	lsl.w	r3, r2, r3
 8021244:	430b      	orrs	r3, r1
 8021246:	40c2      	lsrs	r2, r0
 8021248:	6163      	str	r3, [r4, #20]
 802124a:	9201      	str	r2, [sp, #4]
 802124c:	9b01      	ldr	r3, [sp, #4]
 802124e:	61a3      	str	r3, [r4, #24]
 8021250:	2b00      	cmp	r3, #0
 8021252:	bf14      	ite	ne
 8021254:	2202      	movne	r2, #2
 8021256:	2201      	moveq	r2, #1
 8021258:	6122      	str	r2, [r4, #16]
 802125a:	b1bd      	cbz	r5, 802128c <__d2b+0x94>
 802125c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021260:	4405      	add	r5, r0
 8021262:	603d      	str	r5, [r7, #0]
 8021264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021268:	6030      	str	r0, [r6, #0]
 802126a:	4620      	mov	r0, r4
 802126c:	b003      	add	sp, #12
 802126e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021276:	e7d6      	b.n	8021226 <__d2b+0x2e>
 8021278:	6161      	str	r1, [r4, #20]
 802127a:	e7e7      	b.n	802124c <__d2b+0x54>
 802127c:	a801      	add	r0, sp, #4
 802127e:	f7ff fcf1 	bl	8020c64 <__lo0bits>
 8021282:	9b01      	ldr	r3, [sp, #4]
 8021284:	6163      	str	r3, [r4, #20]
 8021286:	3020      	adds	r0, #32
 8021288:	2201      	movs	r2, #1
 802128a:	e7e5      	b.n	8021258 <__d2b+0x60>
 802128c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021294:	6038      	str	r0, [r7, #0]
 8021296:	6918      	ldr	r0, [r3, #16]
 8021298:	f7ff fcc4 	bl	8020c24 <__hi0bits>
 802129c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80212a0:	e7e2      	b.n	8021268 <__d2b+0x70>
 80212a2:	bf00      	nop
 80212a4:	08024af6 	.word	0x08024af6
 80212a8:	08024b07 	.word	0x08024b07

080212ac <__ratio>:
 80212ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212b0:	4688      	mov	r8, r1
 80212b2:	4669      	mov	r1, sp
 80212b4:	4681      	mov	r9, r0
 80212b6:	f7ff ff55 	bl	8021164 <__b2d>
 80212ba:	a901      	add	r1, sp, #4
 80212bc:	4640      	mov	r0, r8
 80212be:	ec55 4b10 	vmov	r4, r5, d0
 80212c2:	ee10 aa10 	vmov	sl, s0
 80212c6:	f7ff ff4d 	bl	8021164 <__b2d>
 80212ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80212ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80212d2:	1ad2      	subs	r2, r2, r3
 80212d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80212d8:	1a5b      	subs	r3, r3, r1
 80212da:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80212de:	ec57 6b10 	vmov	r6, r7, d0
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	bfd6      	itet	le
 80212e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80212ea:	462a      	movgt	r2, r5
 80212ec:	463a      	movle	r2, r7
 80212ee:	46ab      	mov	fp, r5
 80212f0:	bfd6      	itet	le
 80212f2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80212f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80212fa:	ee00 3a90 	vmovle	s1, r3
 80212fe:	ec4b ab17 	vmov	d7, sl, fp
 8021302:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8021306:	b003      	add	sp, #12
 8021308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802130c <__copybits>:
 802130c:	3901      	subs	r1, #1
 802130e:	b570      	push	{r4, r5, r6, lr}
 8021310:	1149      	asrs	r1, r1, #5
 8021312:	6914      	ldr	r4, [r2, #16]
 8021314:	3101      	adds	r1, #1
 8021316:	f102 0314 	add.w	r3, r2, #20
 802131a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802131e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021322:	1f05      	subs	r5, r0, #4
 8021324:	42a3      	cmp	r3, r4
 8021326:	d30c      	bcc.n	8021342 <__copybits+0x36>
 8021328:	1aa3      	subs	r3, r4, r2
 802132a:	3b11      	subs	r3, #17
 802132c:	f023 0303 	bic.w	r3, r3, #3
 8021330:	3211      	adds	r2, #17
 8021332:	42a2      	cmp	r2, r4
 8021334:	bf88      	it	hi
 8021336:	2300      	movhi	r3, #0
 8021338:	4418      	add	r0, r3
 802133a:	2300      	movs	r3, #0
 802133c:	4288      	cmp	r0, r1
 802133e:	d305      	bcc.n	802134c <__copybits+0x40>
 8021340:	bd70      	pop	{r4, r5, r6, pc}
 8021342:	f853 6b04 	ldr.w	r6, [r3], #4
 8021346:	f845 6f04 	str.w	r6, [r5, #4]!
 802134a:	e7eb      	b.n	8021324 <__copybits+0x18>
 802134c:	f840 3b04 	str.w	r3, [r0], #4
 8021350:	e7f4      	b.n	802133c <__copybits+0x30>

08021352 <__any_on>:
 8021352:	f100 0214 	add.w	r2, r0, #20
 8021356:	6900      	ldr	r0, [r0, #16]
 8021358:	114b      	asrs	r3, r1, #5
 802135a:	4298      	cmp	r0, r3
 802135c:	b510      	push	{r4, lr}
 802135e:	db11      	blt.n	8021384 <__any_on+0x32>
 8021360:	dd0a      	ble.n	8021378 <__any_on+0x26>
 8021362:	f011 011f 	ands.w	r1, r1, #31
 8021366:	d007      	beq.n	8021378 <__any_on+0x26>
 8021368:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802136c:	fa24 f001 	lsr.w	r0, r4, r1
 8021370:	fa00 f101 	lsl.w	r1, r0, r1
 8021374:	428c      	cmp	r4, r1
 8021376:	d10b      	bne.n	8021390 <__any_on+0x3e>
 8021378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802137c:	4293      	cmp	r3, r2
 802137e:	d803      	bhi.n	8021388 <__any_on+0x36>
 8021380:	2000      	movs	r0, #0
 8021382:	bd10      	pop	{r4, pc}
 8021384:	4603      	mov	r3, r0
 8021386:	e7f7      	b.n	8021378 <__any_on+0x26>
 8021388:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802138c:	2900      	cmp	r1, #0
 802138e:	d0f5      	beq.n	802137c <__any_on+0x2a>
 8021390:	2001      	movs	r0, #1
 8021392:	e7f6      	b.n	8021382 <__any_on+0x30>

08021394 <_malloc_usable_size_r>:
 8021394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021398:	1f18      	subs	r0, r3, #4
 802139a:	2b00      	cmp	r3, #0
 802139c:	bfbc      	itt	lt
 802139e:	580b      	ldrlt	r3, [r1, r0]
 80213a0:	18c0      	addlt	r0, r0, r3
 80213a2:	4770      	bx	lr

080213a4 <sulp>:
 80213a4:	b570      	push	{r4, r5, r6, lr}
 80213a6:	4604      	mov	r4, r0
 80213a8:	460d      	mov	r5, r1
 80213aa:	4616      	mov	r6, r2
 80213ac:	ec45 4b10 	vmov	d0, r4, r5
 80213b0:	f7ff feb2 	bl	8021118 <__ulp>
 80213b4:	b17e      	cbz	r6, 80213d6 <sulp+0x32>
 80213b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80213ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80213be:	2b00      	cmp	r3, #0
 80213c0:	dd09      	ble.n	80213d6 <sulp+0x32>
 80213c2:	051b      	lsls	r3, r3, #20
 80213c4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80213c8:	2000      	movs	r0, #0
 80213ca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80213ce:	ec41 0b17 	vmov	d7, r0, r1
 80213d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80213d6:	bd70      	pop	{r4, r5, r6, pc}

080213d8 <_strtod_l>:
 80213d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213dc:	ed2d 8b0e 	vpush	{d8-d14}
 80213e0:	b097      	sub	sp, #92	; 0x5c
 80213e2:	4604      	mov	r4, r0
 80213e4:	920d      	str	r2, [sp, #52]	; 0x34
 80213e6:	2200      	movs	r2, #0
 80213e8:	9212      	str	r2, [sp, #72]	; 0x48
 80213ea:	468a      	mov	sl, r1
 80213ec:	f04f 0800 	mov.w	r8, #0
 80213f0:	f04f 0900 	mov.w	r9, #0
 80213f4:	460a      	mov	r2, r1
 80213f6:	9211      	str	r2, [sp, #68]	; 0x44
 80213f8:	7811      	ldrb	r1, [r2, #0]
 80213fa:	292b      	cmp	r1, #43	; 0x2b
 80213fc:	d04c      	beq.n	8021498 <_strtod_l+0xc0>
 80213fe:	d839      	bhi.n	8021474 <_strtod_l+0x9c>
 8021400:	290d      	cmp	r1, #13
 8021402:	d833      	bhi.n	802146c <_strtod_l+0x94>
 8021404:	2908      	cmp	r1, #8
 8021406:	d833      	bhi.n	8021470 <_strtod_l+0x98>
 8021408:	2900      	cmp	r1, #0
 802140a:	d03c      	beq.n	8021486 <_strtod_l+0xae>
 802140c:	2200      	movs	r2, #0
 802140e:	9208      	str	r2, [sp, #32]
 8021410:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021412:	7832      	ldrb	r2, [r6, #0]
 8021414:	2a30      	cmp	r2, #48	; 0x30
 8021416:	f040 80b8 	bne.w	802158a <_strtod_l+0x1b2>
 802141a:	7872      	ldrb	r2, [r6, #1]
 802141c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8021420:	2a58      	cmp	r2, #88	; 0x58
 8021422:	d170      	bne.n	8021506 <_strtod_l+0x12e>
 8021424:	9302      	str	r3, [sp, #8]
 8021426:	9b08      	ldr	r3, [sp, #32]
 8021428:	9301      	str	r3, [sp, #4]
 802142a:	ab12      	add	r3, sp, #72	; 0x48
 802142c:	9300      	str	r3, [sp, #0]
 802142e:	4a91      	ldr	r2, [pc, #580]	; (8021674 <_strtod_l+0x29c>)
 8021430:	ab13      	add	r3, sp, #76	; 0x4c
 8021432:	a911      	add	r1, sp, #68	; 0x44
 8021434:	4620      	mov	r0, r4
 8021436:	f001 fa61 	bl	80228fc <__gethex>
 802143a:	f010 070f 	ands.w	r7, r0, #15
 802143e:	4605      	mov	r5, r0
 8021440:	d005      	beq.n	802144e <_strtod_l+0x76>
 8021442:	2f06      	cmp	r7, #6
 8021444:	d12a      	bne.n	802149c <_strtod_l+0xc4>
 8021446:	3601      	adds	r6, #1
 8021448:	2300      	movs	r3, #0
 802144a:	9611      	str	r6, [sp, #68]	; 0x44
 802144c:	9308      	str	r3, [sp, #32]
 802144e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021450:	2b00      	cmp	r3, #0
 8021452:	f040 8555 	bne.w	8021f00 <_strtod_l+0xb28>
 8021456:	9b08      	ldr	r3, [sp, #32]
 8021458:	ec49 8b10 	vmov	d0, r8, r9
 802145c:	b1cb      	cbz	r3, 8021492 <_strtod_l+0xba>
 802145e:	eeb1 0b40 	vneg.f64	d0, d0
 8021462:	b017      	add	sp, #92	; 0x5c
 8021464:	ecbd 8b0e 	vpop	{d8-d14}
 8021468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802146c:	2920      	cmp	r1, #32
 802146e:	d1cd      	bne.n	802140c <_strtod_l+0x34>
 8021470:	3201      	adds	r2, #1
 8021472:	e7c0      	b.n	80213f6 <_strtod_l+0x1e>
 8021474:	292d      	cmp	r1, #45	; 0x2d
 8021476:	d1c9      	bne.n	802140c <_strtod_l+0x34>
 8021478:	2101      	movs	r1, #1
 802147a:	9108      	str	r1, [sp, #32]
 802147c:	1c51      	adds	r1, r2, #1
 802147e:	9111      	str	r1, [sp, #68]	; 0x44
 8021480:	7852      	ldrb	r2, [r2, #1]
 8021482:	2a00      	cmp	r2, #0
 8021484:	d1c4      	bne.n	8021410 <_strtod_l+0x38>
 8021486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021488:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 802148c:	2b00      	cmp	r3, #0
 802148e:	f040 8535 	bne.w	8021efc <_strtod_l+0xb24>
 8021492:	ec49 8b10 	vmov	d0, r8, r9
 8021496:	e7e4      	b.n	8021462 <_strtod_l+0x8a>
 8021498:	2100      	movs	r1, #0
 802149a:	e7ee      	b.n	802147a <_strtod_l+0xa2>
 802149c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802149e:	b13a      	cbz	r2, 80214b0 <_strtod_l+0xd8>
 80214a0:	2135      	movs	r1, #53	; 0x35
 80214a2:	a814      	add	r0, sp, #80	; 0x50
 80214a4:	f7ff ff32 	bl	802130c <__copybits>
 80214a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80214aa:	4620      	mov	r0, r4
 80214ac:	f7ff fb08 	bl	8020ac0 <_Bfree>
 80214b0:	1e7b      	subs	r3, r7, #1
 80214b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80214b4:	2b04      	cmp	r3, #4
 80214b6:	d806      	bhi.n	80214c6 <_strtod_l+0xee>
 80214b8:	e8df f003 	tbb	[pc, r3]
 80214bc:	201d0314 	.word	0x201d0314
 80214c0:	14          	.byte	0x14
 80214c1:	00          	.byte	0x00
 80214c2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80214c6:	05eb      	lsls	r3, r5, #23
 80214c8:	bf48      	it	mi
 80214ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80214ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80214d2:	0d1b      	lsrs	r3, r3, #20
 80214d4:	051b      	lsls	r3, r3, #20
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	d1b9      	bne.n	802144e <_strtod_l+0x76>
 80214da:	f7fe fbfb 	bl	801fcd4 <__errno>
 80214de:	2322      	movs	r3, #34	; 0x22
 80214e0:	6003      	str	r3, [r0, #0]
 80214e2:	e7b4      	b.n	802144e <_strtod_l+0x76>
 80214e4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80214e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80214ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80214f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80214f4:	e7e7      	b.n	80214c6 <_strtod_l+0xee>
 80214f6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 802167c <_strtod_l+0x2a4>
 80214fa:	e7e4      	b.n	80214c6 <_strtod_l+0xee>
 80214fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8021500:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8021504:	e7df      	b.n	80214c6 <_strtod_l+0xee>
 8021506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021508:	1c5a      	adds	r2, r3, #1
 802150a:	9211      	str	r2, [sp, #68]	; 0x44
 802150c:	785b      	ldrb	r3, [r3, #1]
 802150e:	2b30      	cmp	r3, #48	; 0x30
 8021510:	d0f9      	beq.n	8021506 <_strtod_l+0x12e>
 8021512:	2b00      	cmp	r3, #0
 8021514:	d09b      	beq.n	802144e <_strtod_l+0x76>
 8021516:	2301      	movs	r3, #1
 8021518:	9306      	str	r3, [sp, #24]
 802151a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802151c:	9309      	str	r3, [sp, #36]	; 0x24
 802151e:	2300      	movs	r3, #0
 8021520:	9305      	str	r3, [sp, #20]
 8021522:	9307      	str	r3, [sp, #28]
 8021524:	461e      	mov	r6, r3
 8021526:	220a      	movs	r2, #10
 8021528:	9811      	ldr	r0, [sp, #68]	; 0x44
 802152a:	7805      	ldrb	r5, [r0, #0]
 802152c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8021530:	b2d9      	uxtb	r1, r3
 8021532:	2909      	cmp	r1, #9
 8021534:	d92b      	bls.n	802158e <_strtod_l+0x1b6>
 8021536:	4950      	ldr	r1, [pc, #320]	; (8021678 <_strtod_l+0x2a0>)
 8021538:	2201      	movs	r2, #1
 802153a:	f7fe fb48 	bl	801fbce <strncmp>
 802153e:	2800      	cmp	r0, #0
 8021540:	d035      	beq.n	80215ae <_strtod_l+0x1d6>
 8021542:	2000      	movs	r0, #0
 8021544:	462a      	mov	r2, r5
 8021546:	4633      	mov	r3, r6
 8021548:	4683      	mov	fp, r0
 802154a:	4601      	mov	r1, r0
 802154c:	2a65      	cmp	r2, #101	; 0x65
 802154e:	d001      	beq.n	8021554 <_strtod_l+0x17c>
 8021550:	2a45      	cmp	r2, #69	; 0x45
 8021552:	d118      	bne.n	8021586 <_strtod_l+0x1ae>
 8021554:	b91b      	cbnz	r3, 802155e <_strtod_l+0x186>
 8021556:	9b06      	ldr	r3, [sp, #24]
 8021558:	4303      	orrs	r3, r0
 802155a:	d094      	beq.n	8021486 <_strtod_l+0xae>
 802155c:	2300      	movs	r3, #0
 802155e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8021562:	f10a 0201 	add.w	r2, sl, #1
 8021566:	9211      	str	r2, [sp, #68]	; 0x44
 8021568:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802156c:	2a2b      	cmp	r2, #43	; 0x2b
 802156e:	d075      	beq.n	802165c <_strtod_l+0x284>
 8021570:	2a2d      	cmp	r2, #45	; 0x2d
 8021572:	d07b      	beq.n	802166c <_strtod_l+0x294>
 8021574:	f04f 0e00 	mov.w	lr, #0
 8021578:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 802157c:	2d09      	cmp	r5, #9
 802157e:	f240 8083 	bls.w	8021688 <_strtod_l+0x2b0>
 8021582:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8021586:	2500      	movs	r5, #0
 8021588:	e09e      	b.n	80216c8 <_strtod_l+0x2f0>
 802158a:	2300      	movs	r3, #0
 802158c:	e7c4      	b.n	8021518 <_strtod_l+0x140>
 802158e:	2e08      	cmp	r6, #8
 8021590:	bfd5      	itete	le
 8021592:	9907      	ldrle	r1, [sp, #28]
 8021594:	9905      	ldrgt	r1, [sp, #20]
 8021596:	fb02 3301 	mlale	r3, r2, r1, r3
 802159a:	fb02 3301 	mlagt	r3, r2, r1, r3
 802159e:	f100 0001 	add.w	r0, r0, #1
 80215a2:	bfd4      	ite	le
 80215a4:	9307      	strle	r3, [sp, #28]
 80215a6:	9305      	strgt	r3, [sp, #20]
 80215a8:	3601      	adds	r6, #1
 80215aa:	9011      	str	r0, [sp, #68]	; 0x44
 80215ac:	e7bc      	b.n	8021528 <_strtod_l+0x150>
 80215ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80215b0:	1c5a      	adds	r2, r3, #1
 80215b2:	9211      	str	r2, [sp, #68]	; 0x44
 80215b4:	785a      	ldrb	r2, [r3, #1]
 80215b6:	b3ae      	cbz	r6, 8021624 <_strtod_l+0x24c>
 80215b8:	4683      	mov	fp, r0
 80215ba:	4633      	mov	r3, r6
 80215bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80215c0:	2909      	cmp	r1, #9
 80215c2:	d912      	bls.n	80215ea <_strtod_l+0x212>
 80215c4:	2101      	movs	r1, #1
 80215c6:	e7c1      	b.n	802154c <_strtod_l+0x174>
 80215c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80215ca:	1c5a      	adds	r2, r3, #1
 80215cc:	9211      	str	r2, [sp, #68]	; 0x44
 80215ce:	785a      	ldrb	r2, [r3, #1]
 80215d0:	3001      	adds	r0, #1
 80215d2:	2a30      	cmp	r2, #48	; 0x30
 80215d4:	d0f8      	beq.n	80215c8 <_strtod_l+0x1f0>
 80215d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80215da:	2b08      	cmp	r3, #8
 80215dc:	f200 8495 	bhi.w	8021f0a <_strtod_l+0xb32>
 80215e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80215e2:	9309      	str	r3, [sp, #36]	; 0x24
 80215e4:	4683      	mov	fp, r0
 80215e6:	2000      	movs	r0, #0
 80215e8:	4603      	mov	r3, r0
 80215ea:	3a30      	subs	r2, #48	; 0x30
 80215ec:	f100 0101 	add.w	r1, r0, #1
 80215f0:	d012      	beq.n	8021618 <_strtod_l+0x240>
 80215f2:	448b      	add	fp, r1
 80215f4:	eb00 0c03 	add.w	ip, r0, r3
 80215f8:	4619      	mov	r1, r3
 80215fa:	250a      	movs	r5, #10
 80215fc:	4561      	cmp	r1, ip
 80215fe:	d113      	bne.n	8021628 <_strtod_l+0x250>
 8021600:	1819      	adds	r1, r3, r0
 8021602:	2908      	cmp	r1, #8
 8021604:	f103 0301 	add.w	r3, r3, #1
 8021608:	4403      	add	r3, r0
 802160a:	dc1b      	bgt.n	8021644 <_strtod_l+0x26c>
 802160c:	9807      	ldr	r0, [sp, #28]
 802160e:	210a      	movs	r1, #10
 8021610:	fb01 2200 	mla	r2, r1, r0, r2
 8021614:	9207      	str	r2, [sp, #28]
 8021616:	2100      	movs	r1, #0
 8021618:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802161a:	1c50      	adds	r0, r2, #1
 802161c:	9011      	str	r0, [sp, #68]	; 0x44
 802161e:	7852      	ldrb	r2, [r2, #1]
 8021620:	4608      	mov	r0, r1
 8021622:	e7cb      	b.n	80215bc <_strtod_l+0x1e4>
 8021624:	4630      	mov	r0, r6
 8021626:	e7d4      	b.n	80215d2 <_strtod_l+0x1fa>
 8021628:	2908      	cmp	r1, #8
 802162a:	f101 0101 	add.w	r1, r1, #1
 802162e:	dc03      	bgt.n	8021638 <_strtod_l+0x260>
 8021630:	9f07      	ldr	r7, [sp, #28]
 8021632:	436f      	muls	r7, r5
 8021634:	9707      	str	r7, [sp, #28]
 8021636:	e7e1      	b.n	80215fc <_strtod_l+0x224>
 8021638:	2910      	cmp	r1, #16
 802163a:	bfde      	ittt	le
 802163c:	9f05      	ldrle	r7, [sp, #20]
 802163e:	436f      	mulle	r7, r5
 8021640:	9705      	strle	r7, [sp, #20]
 8021642:	e7db      	b.n	80215fc <_strtod_l+0x224>
 8021644:	2b10      	cmp	r3, #16
 8021646:	bfdf      	itttt	le
 8021648:	9805      	ldrle	r0, [sp, #20]
 802164a:	210a      	movle	r1, #10
 802164c:	fb01 2200 	mlale	r2, r1, r0, r2
 8021650:	9205      	strle	r2, [sp, #20]
 8021652:	e7e0      	b.n	8021616 <_strtod_l+0x23e>
 8021654:	f04f 0b00 	mov.w	fp, #0
 8021658:	2101      	movs	r1, #1
 802165a:	e77c      	b.n	8021556 <_strtod_l+0x17e>
 802165c:	f04f 0e00 	mov.w	lr, #0
 8021660:	f10a 0202 	add.w	r2, sl, #2
 8021664:	9211      	str	r2, [sp, #68]	; 0x44
 8021666:	f89a 2002 	ldrb.w	r2, [sl, #2]
 802166a:	e785      	b.n	8021578 <_strtod_l+0x1a0>
 802166c:	f04f 0e01 	mov.w	lr, #1
 8021670:	e7f6      	b.n	8021660 <_strtod_l+0x288>
 8021672:	bf00      	nop
 8021674:	08024c60 	.word	0x08024c60
 8021678:	08024c5c 	.word	0x08024c5c
 802167c:	7ff00000 	.word	0x7ff00000
 8021680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021682:	1c55      	adds	r5, r2, #1
 8021684:	9511      	str	r5, [sp, #68]	; 0x44
 8021686:	7852      	ldrb	r2, [r2, #1]
 8021688:	2a30      	cmp	r2, #48	; 0x30
 802168a:	d0f9      	beq.n	8021680 <_strtod_l+0x2a8>
 802168c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8021690:	2d08      	cmp	r5, #8
 8021692:	f63f af78 	bhi.w	8021586 <_strtod_l+0x1ae>
 8021696:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 802169a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802169c:	920a      	str	r2, [sp, #40]	; 0x28
 802169e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80216a0:	1c55      	adds	r5, r2, #1
 80216a2:	9511      	str	r5, [sp, #68]	; 0x44
 80216a4:	7852      	ldrb	r2, [r2, #1]
 80216a6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80216aa:	2f09      	cmp	r7, #9
 80216ac:	d937      	bls.n	802171e <_strtod_l+0x346>
 80216ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80216b0:	1bed      	subs	r5, r5, r7
 80216b2:	2d08      	cmp	r5, #8
 80216b4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80216b8:	dc02      	bgt.n	80216c0 <_strtod_l+0x2e8>
 80216ba:	4565      	cmp	r5, ip
 80216bc:	bfa8      	it	ge
 80216be:	4665      	movge	r5, ip
 80216c0:	f1be 0f00 	cmp.w	lr, #0
 80216c4:	d000      	beq.n	80216c8 <_strtod_l+0x2f0>
 80216c6:	426d      	negs	r5, r5
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d14d      	bne.n	8021768 <_strtod_l+0x390>
 80216cc:	9b06      	ldr	r3, [sp, #24]
 80216ce:	4303      	orrs	r3, r0
 80216d0:	f47f aebd 	bne.w	802144e <_strtod_l+0x76>
 80216d4:	2900      	cmp	r1, #0
 80216d6:	f47f aed6 	bne.w	8021486 <_strtod_l+0xae>
 80216da:	2a69      	cmp	r2, #105	; 0x69
 80216dc:	d027      	beq.n	802172e <_strtod_l+0x356>
 80216de:	dc24      	bgt.n	802172a <_strtod_l+0x352>
 80216e0:	2a49      	cmp	r2, #73	; 0x49
 80216e2:	d024      	beq.n	802172e <_strtod_l+0x356>
 80216e4:	2a4e      	cmp	r2, #78	; 0x4e
 80216e6:	f47f aece 	bne.w	8021486 <_strtod_l+0xae>
 80216ea:	4995      	ldr	r1, [pc, #596]	; (8021940 <_strtod_l+0x568>)
 80216ec:	a811      	add	r0, sp, #68	; 0x44
 80216ee:	f001 fb45 	bl	8022d7c <__match>
 80216f2:	2800      	cmp	r0, #0
 80216f4:	f43f aec7 	beq.w	8021486 <_strtod_l+0xae>
 80216f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80216fa:	781b      	ldrb	r3, [r3, #0]
 80216fc:	2b28      	cmp	r3, #40	; 0x28
 80216fe:	d12d      	bne.n	802175c <_strtod_l+0x384>
 8021700:	4990      	ldr	r1, [pc, #576]	; (8021944 <_strtod_l+0x56c>)
 8021702:	aa14      	add	r2, sp, #80	; 0x50
 8021704:	a811      	add	r0, sp, #68	; 0x44
 8021706:	f001 fb4d 	bl	8022da4 <__hexnan>
 802170a:	2805      	cmp	r0, #5
 802170c:	d126      	bne.n	802175c <_strtod_l+0x384>
 802170e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021710:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8021714:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8021718:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802171c:	e697      	b.n	802144e <_strtod_l+0x76>
 802171e:	250a      	movs	r5, #10
 8021720:	fb05 2c0c 	mla	ip, r5, ip, r2
 8021724:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8021728:	e7b9      	b.n	802169e <_strtod_l+0x2c6>
 802172a:	2a6e      	cmp	r2, #110	; 0x6e
 802172c:	e7db      	b.n	80216e6 <_strtod_l+0x30e>
 802172e:	4986      	ldr	r1, [pc, #536]	; (8021948 <_strtod_l+0x570>)
 8021730:	a811      	add	r0, sp, #68	; 0x44
 8021732:	f001 fb23 	bl	8022d7c <__match>
 8021736:	2800      	cmp	r0, #0
 8021738:	f43f aea5 	beq.w	8021486 <_strtod_l+0xae>
 802173c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802173e:	4983      	ldr	r1, [pc, #524]	; (802194c <_strtod_l+0x574>)
 8021740:	3b01      	subs	r3, #1
 8021742:	a811      	add	r0, sp, #68	; 0x44
 8021744:	9311      	str	r3, [sp, #68]	; 0x44
 8021746:	f001 fb19 	bl	8022d7c <__match>
 802174a:	b910      	cbnz	r0, 8021752 <_strtod_l+0x37a>
 802174c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802174e:	3301      	adds	r3, #1
 8021750:	9311      	str	r3, [sp, #68]	; 0x44
 8021752:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8021960 <_strtod_l+0x588>
 8021756:	f04f 0800 	mov.w	r8, #0
 802175a:	e678      	b.n	802144e <_strtod_l+0x76>
 802175c:	487c      	ldr	r0, [pc, #496]	; (8021950 <_strtod_l+0x578>)
 802175e:	f001 f857 	bl	8022810 <nan>
 8021762:	ec59 8b10 	vmov	r8, r9, d0
 8021766:	e672      	b.n	802144e <_strtod_l+0x76>
 8021768:	eddd 7a07 	vldr	s15, [sp, #28]
 802176c:	eba5 020b 	sub.w	r2, r5, fp
 8021770:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8021774:	2e00      	cmp	r6, #0
 8021776:	bf08      	it	eq
 8021778:	461e      	moveq	r6, r3
 802177a:	2b10      	cmp	r3, #16
 802177c:	9206      	str	r2, [sp, #24]
 802177e:	461a      	mov	r2, r3
 8021780:	bfa8      	it	ge
 8021782:	2210      	movge	r2, #16
 8021784:	2b09      	cmp	r3, #9
 8021786:	ec59 8b17 	vmov	r8, r9, d7
 802178a:	dd0c      	ble.n	80217a6 <_strtod_l+0x3ce>
 802178c:	4971      	ldr	r1, [pc, #452]	; (8021954 <_strtod_l+0x57c>)
 802178e:	eddd 6a05 	vldr	s13, [sp, #20]
 8021792:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8021796:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 802179a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 802179e:	eea7 6b05 	vfma.f64	d6, d7, d5
 80217a2:	ec59 8b16 	vmov	r8, r9, d6
 80217a6:	2b0f      	cmp	r3, #15
 80217a8:	dc37      	bgt.n	802181a <_strtod_l+0x442>
 80217aa:	9906      	ldr	r1, [sp, #24]
 80217ac:	2900      	cmp	r1, #0
 80217ae:	f43f ae4e 	beq.w	802144e <_strtod_l+0x76>
 80217b2:	dd23      	ble.n	80217fc <_strtod_l+0x424>
 80217b4:	2916      	cmp	r1, #22
 80217b6:	dc0b      	bgt.n	80217d0 <_strtod_l+0x3f8>
 80217b8:	4b66      	ldr	r3, [pc, #408]	; (8021954 <_strtod_l+0x57c>)
 80217ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80217be:	ed93 7b00 	vldr	d7, [r3]
 80217c2:	ec49 8b16 	vmov	d6, r8, r9
 80217c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80217ca:	ec59 8b17 	vmov	r8, r9, d7
 80217ce:	e63e      	b.n	802144e <_strtod_l+0x76>
 80217d0:	9806      	ldr	r0, [sp, #24]
 80217d2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80217d6:	4281      	cmp	r1, r0
 80217d8:	db1f      	blt.n	802181a <_strtod_l+0x442>
 80217da:	4a5e      	ldr	r2, [pc, #376]	; (8021954 <_strtod_l+0x57c>)
 80217dc:	f1c3 030f 	rsb	r3, r3, #15
 80217e0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80217e4:	ed91 7b00 	vldr	d7, [r1]
 80217e8:	ec49 8b16 	vmov	d6, r8, r9
 80217ec:	1ac3      	subs	r3, r0, r3
 80217ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80217f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80217f6:	ed92 6b00 	vldr	d6, [r2]
 80217fa:	e7e4      	b.n	80217c6 <_strtod_l+0x3ee>
 80217fc:	9906      	ldr	r1, [sp, #24]
 80217fe:	3116      	adds	r1, #22
 8021800:	db0b      	blt.n	802181a <_strtod_l+0x442>
 8021802:	4b54      	ldr	r3, [pc, #336]	; (8021954 <_strtod_l+0x57c>)
 8021804:	ebab 0505 	sub.w	r5, fp, r5
 8021808:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802180c:	ed95 7b00 	vldr	d7, [r5]
 8021810:	ec49 8b16 	vmov	d6, r8, r9
 8021814:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021818:	e7d7      	b.n	80217ca <_strtod_l+0x3f2>
 802181a:	9906      	ldr	r1, [sp, #24]
 802181c:	1a9a      	subs	r2, r3, r2
 802181e:	440a      	add	r2, r1
 8021820:	2a00      	cmp	r2, #0
 8021822:	dd6e      	ble.n	8021902 <_strtod_l+0x52a>
 8021824:	f012 000f 	ands.w	r0, r2, #15
 8021828:	d00a      	beq.n	8021840 <_strtod_l+0x468>
 802182a:	494a      	ldr	r1, [pc, #296]	; (8021954 <_strtod_l+0x57c>)
 802182c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021830:	ed91 7b00 	vldr	d7, [r1]
 8021834:	ec49 8b16 	vmov	d6, r8, r9
 8021838:	ee27 7b06 	vmul.f64	d7, d7, d6
 802183c:	ec59 8b17 	vmov	r8, r9, d7
 8021840:	f032 020f 	bics.w	r2, r2, #15
 8021844:	d04e      	beq.n	80218e4 <_strtod_l+0x50c>
 8021846:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 802184a:	dd22      	ble.n	8021892 <_strtod_l+0x4ba>
 802184c:	2500      	movs	r5, #0
 802184e:	462e      	mov	r6, r5
 8021850:	9507      	str	r5, [sp, #28]
 8021852:	462f      	mov	r7, r5
 8021854:	2322      	movs	r3, #34	; 0x22
 8021856:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8021960 <_strtod_l+0x588>
 802185a:	6023      	str	r3, [r4, #0]
 802185c:	f04f 0800 	mov.w	r8, #0
 8021860:	9b07      	ldr	r3, [sp, #28]
 8021862:	2b00      	cmp	r3, #0
 8021864:	f43f adf3 	beq.w	802144e <_strtod_l+0x76>
 8021868:	9912      	ldr	r1, [sp, #72]	; 0x48
 802186a:	4620      	mov	r0, r4
 802186c:	f7ff f928 	bl	8020ac0 <_Bfree>
 8021870:	4639      	mov	r1, r7
 8021872:	4620      	mov	r0, r4
 8021874:	f7ff f924 	bl	8020ac0 <_Bfree>
 8021878:	4631      	mov	r1, r6
 802187a:	4620      	mov	r0, r4
 802187c:	f7ff f920 	bl	8020ac0 <_Bfree>
 8021880:	9907      	ldr	r1, [sp, #28]
 8021882:	4620      	mov	r0, r4
 8021884:	f7ff f91c 	bl	8020ac0 <_Bfree>
 8021888:	4629      	mov	r1, r5
 802188a:	4620      	mov	r0, r4
 802188c:	f7ff f918 	bl	8020ac0 <_Bfree>
 8021890:	e5dd      	b.n	802144e <_strtod_l+0x76>
 8021892:	2000      	movs	r0, #0
 8021894:	ec49 8b17 	vmov	d7, r8, r9
 8021898:	4f2f      	ldr	r7, [pc, #188]	; (8021958 <_strtod_l+0x580>)
 802189a:	1112      	asrs	r2, r2, #4
 802189c:	4601      	mov	r1, r0
 802189e:	2a01      	cmp	r2, #1
 80218a0:	dc23      	bgt.n	80218ea <_strtod_l+0x512>
 80218a2:	b108      	cbz	r0, 80218a8 <_strtod_l+0x4d0>
 80218a4:	ec59 8b17 	vmov	r8, r9, d7
 80218a8:	4a2b      	ldr	r2, [pc, #172]	; (8021958 <_strtod_l+0x580>)
 80218aa:	482c      	ldr	r0, [pc, #176]	; (802195c <_strtod_l+0x584>)
 80218ac:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80218b0:	ed92 7b00 	vldr	d7, [r2]
 80218b4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80218b8:	ec49 8b16 	vmov	d6, r8, r9
 80218bc:	4a28      	ldr	r2, [pc, #160]	; (8021960 <_strtod_l+0x588>)
 80218be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80218c2:	ee17 1a90 	vmov	r1, s15
 80218c6:	400a      	ands	r2, r1
 80218c8:	4282      	cmp	r2, r0
 80218ca:	ec59 8b17 	vmov	r8, r9, d7
 80218ce:	d8bd      	bhi.n	802184c <_strtod_l+0x474>
 80218d0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80218d4:	4282      	cmp	r2, r0
 80218d6:	bf86      	itte	hi
 80218d8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8021964 <_strtod_l+0x58c>
 80218dc:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80218e0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80218e4:	2200      	movs	r2, #0
 80218e6:	9205      	str	r2, [sp, #20]
 80218e8:	e076      	b.n	80219d8 <_strtod_l+0x600>
 80218ea:	f012 0f01 	tst.w	r2, #1
 80218ee:	d004      	beq.n	80218fa <_strtod_l+0x522>
 80218f0:	ed97 6b00 	vldr	d6, [r7]
 80218f4:	2001      	movs	r0, #1
 80218f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80218fa:	3101      	adds	r1, #1
 80218fc:	1052      	asrs	r2, r2, #1
 80218fe:	3708      	adds	r7, #8
 8021900:	e7cd      	b.n	802189e <_strtod_l+0x4c6>
 8021902:	d0ef      	beq.n	80218e4 <_strtod_l+0x50c>
 8021904:	4252      	negs	r2, r2
 8021906:	f012 000f 	ands.w	r0, r2, #15
 802190a:	d00a      	beq.n	8021922 <_strtod_l+0x54a>
 802190c:	4911      	ldr	r1, [pc, #68]	; (8021954 <_strtod_l+0x57c>)
 802190e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021912:	ed91 7b00 	vldr	d7, [r1]
 8021916:	ec49 8b16 	vmov	d6, r8, r9
 802191a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802191e:	ec59 8b17 	vmov	r8, r9, d7
 8021922:	1112      	asrs	r2, r2, #4
 8021924:	d0de      	beq.n	80218e4 <_strtod_l+0x50c>
 8021926:	2a1f      	cmp	r2, #31
 8021928:	dd1e      	ble.n	8021968 <_strtod_l+0x590>
 802192a:	2500      	movs	r5, #0
 802192c:	462e      	mov	r6, r5
 802192e:	9507      	str	r5, [sp, #28]
 8021930:	462f      	mov	r7, r5
 8021932:	2322      	movs	r3, #34	; 0x22
 8021934:	f04f 0800 	mov.w	r8, #0
 8021938:	f04f 0900 	mov.w	r9, #0
 802193c:	6023      	str	r3, [r4, #0]
 802193e:	e78f      	b.n	8021860 <_strtod_l+0x488>
 8021940:	08024a29 	.word	0x08024a29
 8021944:	08024c74 	.word	0x08024c74
 8021948:	08024a21 	.word	0x08024a21
 802194c:	08024a94 	.word	0x08024a94
 8021950:	08024a90 	.word	0x08024a90
 8021954:	08024b88 	.word	0x08024b88
 8021958:	08024b60 	.word	0x08024b60
 802195c:	7ca00000 	.word	0x7ca00000
 8021960:	7ff00000 	.word	0x7ff00000
 8021964:	7fefffff 	.word	0x7fefffff
 8021968:	f012 0110 	ands.w	r1, r2, #16
 802196c:	bf18      	it	ne
 802196e:	216a      	movne	r1, #106	; 0x6a
 8021970:	9105      	str	r1, [sp, #20]
 8021972:	ec49 8b17 	vmov	d7, r8, r9
 8021976:	49be      	ldr	r1, [pc, #760]	; (8021c70 <_strtod_l+0x898>)
 8021978:	2000      	movs	r0, #0
 802197a:	07d7      	lsls	r7, r2, #31
 802197c:	d504      	bpl.n	8021988 <_strtod_l+0x5b0>
 802197e:	ed91 6b00 	vldr	d6, [r1]
 8021982:	2001      	movs	r0, #1
 8021984:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021988:	1052      	asrs	r2, r2, #1
 802198a:	f101 0108 	add.w	r1, r1, #8
 802198e:	d1f4      	bne.n	802197a <_strtod_l+0x5a2>
 8021990:	b108      	cbz	r0, 8021996 <_strtod_l+0x5be>
 8021992:	ec59 8b17 	vmov	r8, r9, d7
 8021996:	9a05      	ldr	r2, [sp, #20]
 8021998:	b1ba      	cbz	r2, 80219ca <_strtod_l+0x5f2>
 802199a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 802199e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80219a2:	2a00      	cmp	r2, #0
 80219a4:	4648      	mov	r0, r9
 80219a6:	dd10      	ble.n	80219ca <_strtod_l+0x5f2>
 80219a8:	2a1f      	cmp	r2, #31
 80219aa:	f340 812c 	ble.w	8021c06 <_strtod_l+0x82e>
 80219ae:	2a34      	cmp	r2, #52	; 0x34
 80219b0:	bfde      	ittt	le
 80219b2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80219b6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80219ba:	408a      	lslle	r2, r1
 80219bc:	f04f 0800 	mov.w	r8, #0
 80219c0:	bfcc      	ite	gt
 80219c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80219c6:	ea02 0900 	andle.w	r9, r2, r0
 80219ca:	ec49 8b17 	vmov	d7, r8, r9
 80219ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80219d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219d6:	d0a8      	beq.n	802192a <_strtod_l+0x552>
 80219d8:	9a07      	ldr	r2, [sp, #28]
 80219da:	9200      	str	r2, [sp, #0]
 80219dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80219de:	4632      	mov	r2, r6
 80219e0:	4620      	mov	r0, r4
 80219e2:	f7ff f8d5 	bl	8020b90 <__s2b>
 80219e6:	9007      	str	r0, [sp, #28]
 80219e8:	2800      	cmp	r0, #0
 80219ea:	f43f af2f 	beq.w	802184c <_strtod_l+0x474>
 80219ee:	9a06      	ldr	r2, [sp, #24]
 80219f0:	2a00      	cmp	r2, #0
 80219f2:	ebab 0305 	sub.w	r3, fp, r5
 80219f6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8021c50 <_strtod_l+0x878>
 80219fa:	bfa8      	it	ge
 80219fc:	2300      	movge	r3, #0
 80219fe:	ed9f ab96 	vldr	d10, [pc, #600]	; 8021c58 <_strtod_l+0x880>
 8021a02:	ed9f bb97 	vldr	d11, [pc, #604]	; 8021c60 <_strtod_l+0x888>
 8021a06:	9309      	str	r3, [sp, #36]	; 0x24
 8021a08:	2500      	movs	r5, #0
 8021a0a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8021a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8021a10:	462e      	mov	r6, r5
 8021a12:	9b07      	ldr	r3, [sp, #28]
 8021a14:	4620      	mov	r0, r4
 8021a16:	6859      	ldr	r1, [r3, #4]
 8021a18:	f7ff f812 	bl	8020a40 <_Balloc>
 8021a1c:	4607      	mov	r7, r0
 8021a1e:	2800      	cmp	r0, #0
 8021a20:	f43f af18 	beq.w	8021854 <_strtod_l+0x47c>
 8021a24:	9b07      	ldr	r3, [sp, #28]
 8021a26:	691a      	ldr	r2, [r3, #16]
 8021a28:	3202      	adds	r2, #2
 8021a2a:	f103 010c 	add.w	r1, r3, #12
 8021a2e:	0092      	lsls	r2, r2, #2
 8021a30:	300c      	adds	r0, #12
 8021a32:	f7fe f984 	bl	801fd3e <memcpy>
 8021a36:	ec49 8b10 	vmov	d0, r8, r9
 8021a3a:	aa14      	add	r2, sp, #80	; 0x50
 8021a3c:	a913      	add	r1, sp, #76	; 0x4c
 8021a3e:	4620      	mov	r0, r4
 8021a40:	f7ff fbda 	bl	80211f8 <__d2b>
 8021a44:	ec49 8b18 	vmov	d8, r8, r9
 8021a48:	9012      	str	r0, [sp, #72]	; 0x48
 8021a4a:	2800      	cmp	r0, #0
 8021a4c:	f43f af02 	beq.w	8021854 <_strtod_l+0x47c>
 8021a50:	2101      	movs	r1, #1
 8021a52:	4620      	mov	r0, r4
 8021a54:	f7ff f934 	bl	8020cc0 <__i2b>
 8021a58:	4606      	mov	r6, r0
 8021a5a:	2800      	cmp	r0, #0
 8021a5c:	f43f aefa 	beq.w	8021854 <_strtod_l+0x47c>
 8021a60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021a62:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	bfab      	itete	ge
 8021a68:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8021a6a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8021a6c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8021a70:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8021a74:	bfac      	ite	ge
 8021a76:	eb03 0b02 	addge.w	fp, r3, r2
 8021a7a:	eba2 0a03 	sublt.w	sl, r2, r3
 8021a7e:	9a05      	ldr	r2, [sp, #20]
 8021a80:	1a9b      	subs	r3, r3, r2
 8021a82:	440b      	add	r3, r1
 8021a84:	4a7b      	ldr	r2, [pc, #492]	; (8021c74 <_strtod_l+0x89c>)
 8021a86:	3b01      	subs	r3, #1
 8021a88:	4293      	cmp	r3, r2
 8021a8a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8021a8e:	f280 80cd 	bge.w	8021c2c <_strtod_l+0x854>
 8021a92:	1ad2      	subs	r2, r2, r3
 8021a94:	2a1f      	cmp	r2, #31
 8021a96:	eba1 0102 	sub.w	r1, r1, r2
 8021a9a:	f04f 0001 	mov.w	r0, #1
 8021a9e:	f300 80b9 	bgt.w	8021c14 <_strtod_l+0x83c>
 8021aa2:	fa00 f302 	lsl.w	r3, r0, r2
 8021aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8021aa8:	2300      	movs	r3, #0
 8021aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8021aac:	eb0b 0301 	add.w	r3, fp, r1
 8021ab0:	9a05      	ldr	r2, [sp, #20]
 8021ab2:	459b      	cmp	fp, r3
 8021ab4:	448a      	add	sl, r1
 8021ab6:	4492      	add	sl, r2
 8021ab8:	465a      	mov	r2, fp
 8021aba:	bfa8      	it	ge
 8021abc:	461a      	movge	r2, r3
 8021abe:	4552      	cmp	r2, sl
 8021ac0:	bfa8      	it	ge
 8021ac2:	4652      	movge	r2, sl
 8021ac4:	2a00      	cmp	r2, #0
 8021ac6:	bfc2      	ittt	gt
 8021ac8:	1a9b      	subgt	r3, r3, r2
 8021aca:	ebaa 0a02 	subgt.w	sl, sl, r2
 8021ace:	ebab 0b02 	subgt.w	fp, fp, r2
 8021ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ad4:	2a00      	cmp	r2, #0
 8021ad6:	dd18      	ble.n	8021b0a <_strtod_l+0x732>
 8021ad8:	4631      	mov	r1, r6
 8021ada:	4620      	mov	r0, r4
 8021adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8021ade:	f7ff f9af 	bl	8020e40 <__pow5mult>
 8021ae2:	4606      	mov	r6, r0
 8021ae4:	2800      	cmp	r0, #0
 8021ae6:	f43f aeb5 	beq.w	8021854 <_strtod_l+0x47c>
 8021aea:	4601      	mov	r1, r0
 8021aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021aee:	4620      	mov	r0, r4
 8021af0:	f7ff f8fc 	bl	8020cec <__multiply>
 8021af4:	900e      	str	r0, [sp, #56]	; 0x38
 8021af6:	2800      	cmp	r0, #0
 8021af8:	f43f aeac 	beq.w	8021854 <_strtod_l+0x47c>
 8021afc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021afe:	4620      	mov	r0, r4
 8021b00:	f7fe ffde 	bl	8020ac0 <_Bfree>
 8021b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021b08:	9212      	str	r2, [sp, #72]	; 0x48
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	f300 8093 	bgt.w	8021c36 <_strtod_l+0x85e>
 8021b10:	9b06      	ldr	r3, [sp, #24]
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	dd08      	ble.n	8021b28 <_strtod_l+0x750>
 8021b16:	4639      	mov	r1, r7
 8021b18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021b1a:	4620      	mov	r0, r4
 8021b1c:	f7ff f990 	bl	8020e40 <__pow5mult>
 8021b20:	4607      	mov	r7, r0
 8021b22:	2800      	cmp	r0, #0
 8021b24:	f43f ae96 	beq.w	8021854 <_strtod_l+0x47c>
 8021b28:	f1ba 0f00 	cmp.w	sl, #0
 8021b2c:	dd08      	ble.n	8021b40 <_strtod_l+0x768>
 8021b2e:	4639      	mov	r1, r7
 8021b30:	4652      	mov	r2, sl
 8021b32:	4620      	mov	r0, r4
 8021b34:	f7ff f9de 	bl	8020ef4 <__lshift>
 8021b38:	4607      	mov	r7, r0
 8021b3a:	2800      	cmp	r0, #0
 8021b3c:	f43f ae8a 	beq.w	8021854 <_strtod_l+0x47c>
 8021b40:	f1bb 0f00 	cmp.w	fp, #0
 8021b44:	dd08      	ble.n	8021b58 <_strtod_l+0x780>
 8021b46:	4631      	mov	r1, r6
 8021b48:	465a      	mov	r2, fp
 8021b4a:	4620      	mov	r0, r4
 8021b4c:	f7ff f9d2 	bl	8020ef4 <__lshift>
 8021b50:	4606      	mov	r6, r0
 8021b52:	2800      	cmp	r0, #0
 8021b54:	f43f ae7e 	beq.w	8021854 <_strtod_l+0x47c>
 8021b58:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021b5a:	463a      	mov	r2, r7
 8021b5c:	4620      	mov	r0, r4
 8021b5e:	f7ff fa51 	bl	8021004 <__mdiff>
 8021b62:	4605      	mov	r5, r0
 8021b64:	2800      	cmp	r0, #0
 8021b66:	f43f ae75 	beq.w	8021854 <_strtod_l+0x47c>
 8021b6a:	2300      	movs	r3, #0
 8021b6c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8021b70:	60c3      	str	r3, [r0, #12]
 8021b72:	4631      	mov	r1, r6
 8021b74:	f7ff fa2a 	bl	8020fcc <__mcmp>
 8021b78:	2800      	cmp	r0, #0
 8021b7a:	da7f      	bge.n	8021c7c <_strtod_l+0x8a4>
 8021b7c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8021b80:	f040 80a5 	bne.w	8021cce <_strtod_l+0x8f6>
 8021b84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	f040 80a0 	bne.w	8021cce <_strtod_l+0x8f6>
 8021b8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021b92:	0d1b      	lsrs	r3, r3, #20
 8021b94:	051b      	lsls	r3, r3, #20
 8021b96:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8021b9a:	f240 8098 	bls.w	8021cce <_strtod_l+0x8f6>
 8021b9e:	696b      	ldr	r3, [r5, #20]
 8021ba0:	b91b      	cbnz	r3, 8021baa <_strtod_l+0x7d2>
 8021ba2:	692b      	ldr	r3, [r5, #16]
 8021ba4:	2b01      	cmp	r3, #1
 8021ba6:	f340 8092 	ble.w	8021cce <_strtod_l+0x8f6>
 8021baa:	4629      	mov	r1, r5
 8021bac:	2201      	movs	r2, #1
 8021bae:	4620      	mov	r0, r4
 8021bb0:	f7ff f9a0 	bl	8020ef4 <__lshift>
 8021bb4:	4631      	mov	r1, r6
 8021bb6:	4605      	mov	r5, r0
 8021bb8:	f7ff fa08 	bl	8020fcc <__mcmp>
 8021bbc:	2800      	cmp	r0, #0
 8021bbe:	f340 8086 	ble.w	8021cce <_strtod_l+0x8f6>
 8021bc2:	9905      	ldr	r1, [sp, #20]
 8021bc4:	4a2c      	ldr	r2, [pc, #176]	; (8021c78 <_strtod_l+0x8a0>)
 8021bc6:	464b      	mov	r3, r9
 8021bc8:	2900      	cmp	r1, #0
 8021bca:	f000 809f 	beq.w	8021d0c <_strtod_l+0x934>
 8021bce:	ea02 0109 	and.w	r1, r2, r9
 8021bd2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8021bd6:	f300 8099 	bgt.w	8021d0c <_strtod_l+0x934>
 8021bda:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8021bde:	f77f aea8 	ble.w	8021932 <_strtod_l+0x55a>
 8021be2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8021c68 <_strtod_l+0x890>
 8021be6:	ec49 8b16 	vmov	d6, r8, r9
 8021bea:	4b23      	ldr	r3, [pc, #140]	; (8021c78 <_strtod_l+0x8a0>)
 8021bec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021bf0:	ee17 2a90 	vmov	r2, s15
 8021bf4:	4013      	ands	r3, r2
 8021bf6:	ec59 8b17 	vmov	r8, r9, d7
 8021bfa:	2b00      	cmp	r3, #0
 8021bfc:	f47f ae34 	bne.w	8021868 <_strtod_l+0x490>
 8021c00:	2322      	movs	r3, #34	; 0x22
 8021c02:	6023      	str	r3, [r4, #0]
 8021c04:	e630      	b.n	8021868 <_strtod_l+0x490>
 8021c06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8021c0e:	ea02 0808 	and.w	r8, r2, r8
 8021c12:	e6da      	b.n	80219ca <_strtod_l+0x5f2>
 8021c14:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8021c18:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8021c1c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8021c20:	33e2      	adds	r3, #226	; 0xe2
 8021c22:	fa00 f303 	lsl.w	r3, r0, r3
 8021c26:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8021c2a:	e73f      	b.n	8021aac <_strtod_l+0x6d4>
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	2301      	movs	r3, #1
 8021c30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8021c34:	e73a      	b.n	8021aac <_strtod_l+0x6d4>
 8021c36:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021c38:	461a      	mov	r2, r3
 8021c3a:	4620      	mov	r0, r4
 8021c3c:	f7ff f95a 	bl	8020ef4 <__lshift>
 8021c40:	9012      	str	r0, [sp, #72]	; 0x48
 8021c42:	2800      	cmp	r0, #0
 8021c44:	f47f af64 	bne.w	8021b10 <_strtod_l+0x738>
 8021c48:	e604      	b.n	8021854 <_strtod_l+0x47c>
 8021c4a:	bf00      	nop
 8021c4c:	f3af 8000 	nop.w
 8021c50:	94a03595 	.word	0x94a03595
 8021c54:	3fcfffff 	.word	0x3fcfffff
 8021c58:	94a03595 	.word	0x94a03595
 8021c5c:	3fdfffff 	.word	0x3fdfffff
 8021c60:	35afe535 	.word	0x35afe535
 8021c64:	3fe00000 	.word	0x3fe00000
 8021c68:	00000000 	.word	0x00000000
 8021c6c:	39500000 	.word	0x39500000
 8021c70:	08024c88 	.word	0x08024c88
 8021c74:	fffffc02 	.word	0xfffffc02
 8021c78:	7ff00000 	.word	0x7ff00000
 8021c7c:	46cb      	mov	fp, r9
 8021c7e:	d15f      	bne.n	8021d40 <_strtod_l+0x968>
 8021c80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021c84:	f1ba 0f00 	cmp.w	sl, #0
 8021c88:	d02a      	beq.n	8021ce0 <_strtod_l+0x908>
 8021c8a:	4aa7      	ldr	r2, [pc, #668]	; (8021f28 <_strtod_l+0xb50>)
 8021c8c:	4293      	cmp	r3, r2
 8021c8e:	d12b      	bne.n	8021ce8 <_strtod_l+0x910>
 8021c90:	9b05      	ldr	r3, [sp, #20]
 8021c92:	4642      	mov	r2, r8
 8021c94:	b1fb      	cbz	r3, 8021cd6 <_strtod_l+0x8fe>
 8021c96:	4ba5      	ldr	r3, [pc, #660]	; (8021f2c <_strtod_l+0xb54>)
 8021c98:	ea09 0303 	and.w	r3, r9, r3
 8021c9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8021ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021ca4:	d81a      	bhi.n	8021cdc <_strtod_l+0x904>
 8021ca6:	0d1b      	lsrs	r3, r3, #20
 8021ca8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8021cac:	fa01 f303 	lsl.w	r3, r1, r3
 8021cb0:	429a      	cmp	r2, r3
 8021cb2:	d119      	bne.n	8021ce8 <_strtod_l+0x910>
 8021cb4:	4b9e      	ldr	r3, [pc, #632]	; (8021f30 <_strtod_l+0xb58>)
 8021cb6:	459b      	cmp	fp, r3
 8021cb8:	d102      	bne.n	8021cc0 <_strtod_l+0x8e8>
 8021cba:	3201      	adds	r2, #1
 8021cbc:	f43f adca 	beq.w	8021854 <_strtod_l+0x47c>
 8021cc0:	4b9a      	ldr	r3, [pc, #616]	; (8021f2c <_strtod_l+0xb54>)
 8021cc2:	ea0b 0303 	and.w	r3, fp, r3
 8021cc6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8021cca:	f04f 0800 	mov.w	r8, #0
 8021cce:	9b05      	ldr	r3, [sp, #20]
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d186      	bne.n	8021be2 <_strtod_l+0x80a>
 8021cd4:	e5c8      	b.n	8021868 <_strtod_l+0x490>
 8021cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021cda:	e7e9      	b.n	8021cb0 <_strtod_l+0x8d8>
 8021cdc:	460b      	mov	r3, r1
 8021cde:	e7e7      	b.n	8021cb0 <_strtod_l+0x8d8>
 8021ce0:	ea53 0308 	orrs.w	r3, r3, r8
 8021ce4:	f43f af6d 	beq.w	8021bc2 <_strtod_l+0x7ea>
 8021ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cea:	b1cb      	cbz	r3, 8021d20 <_strtod_l+0x948>
 8021cec:	ea13 0f0b 	tst.w	r3, fp
 8021cf0:	d0ed      	beq.n	8021cce <_strtod_l+0x8f6>
 8021cf2:	9a05      	ldr	r2, [sp, #20]
 8021cf4:	4640      	mov	r0, r8
 8021cf6:	4649      	mov	r1, r9
 8021cf8:	f1ba 0f00 	cmp.w	sl, #0
 8021cfc:	d014      	beq.n	8021d28 <_strtod_l+0x950>
 8021cfe:	f7ff fb51 	bl	80213a4 <sulp>
 8021d02:	ee38 7b00 	vadd.f64	d7, d8, d0
 8021d06:	ec59 8b17 	vmov	r8, r9, d7
 8021d0a:	e7e0      	b.n	8021cce <_strtod_l+0x8f6>
 8021d0c:	4013      	ands	r3, r2
 8021d0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8021d12:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8021d16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8021d1a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8021d1e:	e7d6      	b.n	8021cce <_strtod_l+0x8f6>
 8021d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d22:	ea13 0f08 	tst.w	r3, r8
 8021d26:	e7e3      	b.n	8021cf0 <_strtod_l+0x918>
 8021d28:	f7ff fb3c 	bl	80213a4 <sulp>
 8021d2c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8021d30:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8021d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d38:	ec59 8b10 	vmov	r8, r9, d0
 8021d3c:	d1c7      	bne.n	8021cce <_strtod_l+0x8f6>
 8021d3e:	e5f8      	b.n	8021932 <_strtod_l+0x55a>
 8021d40:	4631      	mov	r1, r6
 8021d42:	4628      	mov	r0, r5
 8021d44:	f7ff fab2 	bl	80212ac <__ratio>
 8021d48:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8021d4c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8021d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d54:	d85f      	bhi.n	8021e16 <_strtod_l+0xa3e>
 8021d56:	f1ba 0f00 	cmp.w	sl, #0
 8021d5a:	d166      	bne.n	8021e2a <_strtod_l+0xa52>
 8021d5c:	f1b8 0f00 	cmp.w	r8, #0
 8021d60:	d14d      	bne.n	8021dfe <_strtod_l+0xa26>
 8021d62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021d66:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8021d6a:	2b00      	cmp	r3, #0
 8021d6c:	d162      	bne.n	8021e34 <_strtod_l+0xa5c>
 8021d6e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8021d72:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8021d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d7a:	d401      	bmi.n	8021d80 <_strtod_l+0x9a8>
 8021d7c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8021d80:	eeb1 cb4d 	vneg.f64	d12, d13
 8021d84:	4869      	ldr	r0, [pc, #420]	; (8021f2c <_strtod_l+0xb54>)
 8021d86:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8021f38 <_strtod_l+0xb60>
 8021d8a:	ea0b 0100 	and.w	r1, fp, r0
 8021d8e:	4561      	cmp	r1, ip
 8021d90:	ec53 2b1c 	vmov	r2, r3, d12
 8021d94:	d17a      	bne.n	8021e8c <_strtod_l+0xab4>
 8021d96:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8021d9a:	ec49 8b10 	vmov	d0, r8, r9
 8021d9e:	910a      	str	r1, [sp, #40]	; 0x28
 8021da0:	f7ff f9ba 	bl	8021118 <__ulp>
 8021da4:	ec49 8b1e 	vmov	d14, r8, r9
 8021da8:	4860      	ldr	r0, [pc, #384]	; (8021f2c <_strtod_l+0xb54>)
 8021daa:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8021dae:	ee1e 3a90 	vmov	r3, s29
 8021db2:	4a60      	ldr	r2, [pc, #384]	; (8021f34 <_strtod_l+0xb5c>)
 8021db4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021db6:	4018      	ands	r0, r3
 8021db8:	4290      	cmp	r0, r2
 8021dba:	ec59 8b1e 	vmov	r8, r9, d14
 8021dbe:	d93c      	bls.n	8021e3a <_strtod_l+0xa62>
 8021dc0:	ee18 2a90 	vmov	r2, s17
 8021dc4:	4b5a      	ldr	r3, [pc, #360]	; (8021f30 <_strtod_l+0xb58>)
 8021dc6:	429a      	cmp	r2, r3
 8021dc8:	d104      	bne.n	8021dd4 <_strtod_l+0x9fc>
 8021dca:	ee18 3a10 	vmov	r3, s16
 8021dce:	3301      	adds	r3, #1
 8021dd0:	f43f ad40 	beq.w	8021854 <_strtod_l+0x47c>
 8021dd4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8021f30 <_strtod_l+0xb58>
 8021dd8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8021ddc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021dde:	4620      	mov	r0, r4
 8021de0:	f7fe fe6e 	bl	8020ac0 <_Bfree>
 8021de4:	4639      	mov	r1, r7
 8021de6:	4620      	mov	r0, r4
 8021de8:	f7fe fe6a 	bl	8020ac0 <_Bfree>
 8021dec:	4631      	mov	r1, r6
 8021dee:	4620      	mov	r0, r4
 8021df0:	f7fe fe66 	bl	8020ac0 <_Bfree>
 8021df4:	4629      	mov	r1, r5
 8021df6:	4620      	mov	r0, r4
 8021df8:	f7fe fe62 	bl	8020ac0 <_Bfree>
 8021dfc:	e609      	b.n	8021a12 <_strtod_l+0x63a>
 8021dfe:	f1b8 0f01 	cmp.w	r8, #1
 8021e02:	d103      	bne.n	8021e0c <_strtod_l+0xa34>
 8021e04:	f1b9 0f00 	cmp.w	r9, #0
 8021e08:	f43f ad93 	beq.w	8021932 <_strtod_l+0x55a>
 8021e0c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8021e10:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8021e14:	e7b6      	b.n	8021d84 <_strtod_l+0x9ac>
 8021e16:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8021e1a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8021e1e:	f1ba 0f00 	cmp.w	sl, #0
 8021e22:	d0ad      	beq.n	8021d80 <_strtod_l+0x9a8>
 8021e24:	eeb0 cb4d 	vmov.f64	d12, d13
 8021e28:	e7ac      	b.n	8021d84 <_strtod_l+0x9ac>
 8021e2a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8021e2e:	eeb0 db4c 	vmov.f64	d13, d12
 8021e32:	e7a7      	b.n	8021d84 <_strtod_l+0x9ac>
 8021e34:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8021e38:	e7a4      	b.n	8021d84 <_strtod_l+0x9ac>
 8021e3a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8021e3e:	9b05      	ldr	r3, [sp, #20]
 8021e40:	46cb      	mov	fp, r9
 8021e42:	2b00      	cmp	r3, #0
 8021e44:	d1ca      	bne.n	8021ddc <_strtod_l+0xa04>
 8021e46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021e4a:	0d1b      	lsrs	r3, r3, #20
 8021e4c:	051b      	lsls	r3, r3, #20
 8021e4e:	4299      	cmp	r1, r3
 8021e50:	d1c4      	bne.n	8021ddc <_strtod_l+0xa04>
 8021e52:	ec51 0b1d 	vmov	r0, r1, d13
 8021e56:	f7de fd8d 	bl	8000974 <__aeabi_d2lz>
 8021e5a:	f7de fbe7 	bl	800062c <__aeabi_l2d>
 8021e5e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8021e62:	ec41 0b17 	vmov	d7, r0, r1
 8021e66:	ea4b 0b08 	orr.w	fp, fp, r8
 8021e6a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8021e6e:	ee3d db47 	vsub.f64	d13, d13, d7
 8021e72:	d03c      	beq.n	8021eee <_strtod_l+0xb16>
 8021e74:	eeb4 dbca 	vcmpe.f64	d13, d10
 8021e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e7c:	f53f acf4 	bmi.w	8021868 <_strtod_l+0x490>
 8021e80:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8021e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e88:	dda8      	ble.n	8021ddc <_strtod_l+0xa04>
 8021e8a:	e4ed      	b.n	8021868 <_strtod_l+0x490>
 8021e8c:	9805      	ldr	r0, [sp, #20]
 8021e8e:	b1f0      	cbz	r0, 8021ece <_strtod_l+0xaf6>
 8021e90:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8021e94:	d81b      	bhi.n	8021ece <_strtod_l+0xaf6>
 8021e96:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8021f20 <_strtod_l+0xb48>
 8021e9a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8021e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ea2:	d811      	bhi.n	8021ec8 <_strtod_l+0xaf0>
 8021ea4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8021ea8:	ee1d 3a10 	vmov	r3, s26
 8021eac:	2b01      	cmp	r3, #1
 8021eae:	bf38      	it	cc
 8021eb0:	2301      	movcc	r3, #1
 8021eb2:	ee0d 3a10 	vmov	s26, r3
 8021eb6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8021eba:	f1ba 0f00 	cmp.w	sl, #0
 8021ebe:	d113      	bne.n	8021ee8 <_strtod_l+0xb10>
 8021ec0:	eeb1 7b4d 	vneg.f64	d7, d13
 8021ec4:	ec53 2b17 	vmov	r2, r3, d7
 8021ec8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8021ecc:	1a43      	subs	r3, r0, r1
 8021ece:	eeb0 0b48 	vmov.f64	d0, d8
 8021ed2:	ec43 2b1c 	vmov	d12, r2, r3
 8021ed6:	910a      	str	r1, [sp, #40]	; 0x28
 8021ed8:	f7ff f91e 	bl	8021118 <__ulp>
 8021edc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021ede:	eeac 8b00 	vfma.f64	d8, d12, d0
 8021ee2:	ec59 8b18 	vmov	r8, r9, d8
 8021ee6:	e7aa      	b.n	8021e3e <_strtod_l+0xa66>
 8021ee8:	eeb0 7b4d 	vmov.f64	d7, d13
 8021eec:	e7ea      	b.n	8021ec4 <_strtod_l+0xaec>
 8021eee:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8021ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ef6:	f57f af71 	bpl.w	8021ddc <_strtod_l+0xa04>
 8021efa:	e4b5      	b.n	8021868 <_strtod_l+0x490>
 8021efc:	2300      	movs	r3, #0
 8021efe:	9308      	str	r3, [sp, #32]
 8021f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f04:	6013      	str	r3, [r2, #0]
 8021f06:	f7ff baa6 	b.w	8021456 <_strtod_l+0x7e>
 8021f0a:	2a65      	cmp	r2, #101	; 0x65
 8021f0c:	f43f aba2 	beq.w	8021654 <_strtod_l+0x27c>
 8021f10:	2a45      	cmp	r2, #69	; 0x45
 8021f12:	f43f ab9f 	beq.w	8021654 <_strtod_l+0x27c>
 8021f16:	2101      	movs	r1, #1
 8021f18:	f7ff bbd8 	b.w	80216cc <_strtod_l+0x2f4>
 8021f1c:	f3af 8000 	nop.w
 8021f20:	ffc00000 	.word	0xffc00000
 8021f24:	41dfffff 	.word	0x41dfffff
 8021f28:	000fffff 	.word	0x000fffff
 8021f2c:	7ff00000 	.word	0x7ff00000
 8021f30:	7fefffff 	.word	0x7fefffff
 8021f34:	7c9fffff 	.word	0x7c9fffff
 8021f38:	7fe00000 	.word	0x7fe00000

08021f3c <_strtod_r>:
 8021f3c:	4b01      	ldr	r3, [pc, #4]	; (8021f44 <_strtod_r+0x8>)
 8021f3e:	f7ff ba4b 	b.w	80213d8 <_strtod_l>
 8021f42:	bf00      	nop
 8021f44:	200009a4 	.word	0x200009a4

08021f48 <_strtol_l.constprop.0>:
 8021f48:	2b01      	cmp	r3, #1
 8021f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f4e:	d001      	beq.n	8021f54 <_strtol_l.constprop.0+0xc>
 8021f50:	2b24      	cmp	r3, #36	; 0x24
 8021f52:	d906      	bls.n	8021f62 <_strtol_l.constprop.0+0x1a>
 8021f54:	f7fd febe 	bl	801fcd4 <__errno>
 8021f58:	2316      	movs	r3, #22
 8021f5a:	6003      	str	r3, [r0, #0]
 8021f5c:	2000      	movs	r0, #0
 8021f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022048 <_strtol_l.constprop.0+0x100>
 8021f66:	460d      	mov	r5, r1
 8021f68:	462e      	mov	r6, r5
 8021f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021f6e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8021f72:	f017 0708 	ands.w	r7, r7, #8
 8021f76:	d1f7      	bne.n	8021f68 <_strtol_l.constprop.0+0x20>
 8021f78:	2c2d      	cmp	r4, #45	; 0x2d
 8021f7a:	d132      	bne.n	8021fe2 <_strtol_l.constprop.0+0x9a>
 8021f7c:	782c      	ldrb	r4, [r5, #0]
 8021f7e:	2701      	movs	r7, #1
 8021f80:	1cb5      	adds	r5, r6, #2
 8021f82:	2b00      	cmp	r3, #0
 8021f84:	d05b      	beq.n	802203e <_strtol_l.constprop.0+0xf6>
 8021f86:	2b10      	cmp	r3, #16
 8021f88:	d109      	bne.n	8021f9e <_strtol_l.constprop.0+0x56>
 8021f8a:	2c30      	cmp	r4, #48	; 0x30
 8021f8c:	d107      	bne.n	8021f9e <_strtol_l.constprop.0+0x56>
 8021f8e:	782c      	ldrb	r4, [r5, #0]
 8021f90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021f94:	2c58      	cmp	r4, #88	; 0x58
 8021f96:	d14d      	bne.n	8022034 <_strtol_l.constprop.0+0xec>
 8021f98:	786c      	ldrb	r4, [r5, #1]
 8021f9a:	2310      	movs	r3, #16
 8021f9c:	3502      	adds	r5, #2
 8021f9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8021fa2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8021fa6:	f04f 0e00 	mov.w	lr, #0
 8021faa:	fbb8 f9f3 	udiv	r9, r8, r3
 8021fae:	4676      	mov	r6, lr
 8021fb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8021fb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8021fb8:	f1bc 0f09 	cmp.w	ip, #9
 8021fbc:	d816      	bhi.n	8021fec <_strtol_l.constprop.0+0xa4>
 8021fbe:	4664      	mov	r4, ip
 8021fc0:	42a3      	cmp	r3, r4
 8021fc2:	dd24      	ble.n	802200e <_strtol_l.constprop.0+0xc6>
 8021fc4:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8021fc8:	d008      	beq.n	8021fdc <_strtol_l.constprop.0+0x94>
 8021fca:	45b1      	cmp	r9, r6
 8021fcc:	d31c      	bcc.n	8022008 <_strtol_l.constprop.0+0xc0>
 8021fce:	d101      	bne.n	8021fd4 <_strtol_l.constprop.0+0x8c>
 8021fd0:	45a2      	cmp	sl, r4
 8021fd2:	db19      	blt.n	8022008 <_strtol_l.constprop.0+0xc0>
 8021fd4:	fb06 4603 	mla	r6, r6, r3, r4
 8021fd8:	f04f 0e01 	mov.w	lr, #1
 8021fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021fe0:	e7e8      	b.n	8021fb4 <_strtol_l.constprop.0+0x6c>
 8021fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8021fe4:	bf04      	itt	eq
 8021fe6:	782c      	ldrbeq	r4, [r5, #0]
 8021fe8:	1cb5      	addeq	r5, r6, #2
 8021fea:	e7ca      	b.n	8021f82 <_strtol_l.constprop.0+0x3a>
 8021fec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8021ff0:	f1bc 0f19 	cmp.w	ip, #25
 8021ff4:	d801      	bhi.n	8021ffa <_strtol_l.constprop.0+0xb2>
 8021ff6:	3c37      	subs	r4, #55	; 0x37
 8021ff8:	e7e2      	b.n	8021fc0 <_strtol_l.constprop.0+0x78>
 8021ffa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8021ffe:	f1bc 0f19 	cmp.w	ip, #25
 8022002:	d804      	bhi.n	802200e <_strtol_l.constprop.0+0xc6>
 8022004:	3c57      	subs	r4, #87	; 0x57
 8022006:	e7db      	b.n	8021fc0 <_strtol_l.constprop.0+0x78>
 8022008:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 802200c:	e7e6      	b.n	8021fdc <_strtol_l.constprop.0+0x94>
 802200e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8022012:	d105      	bne.n	8022020 <_strtol_l.constprop.0+0xd8>
 8022014:	2322      	movs	r3, #34	; 0x22
 8022016:	6003      	str	r3, [r0, #0]
 8022018:	4646      	mov	r6, r8
 802201a:	b942      	cbnz	r2, 802202e <_strtol_l.constprop.0+0xe6>
 802201c:	4630      	mov	r0, r6
 802201e:	e79e      	b.n	8021f5e <_strtol_l.constprop.0+0x16>
 8022020:	b107      	cbz	r7, 8022024 <_strtol_l.constprop.0+0xdc>
 8022022:	4276      	negs	r6, r6
 8022024:	2a00      	cmp	r2, #0
 8022026:	d0f9      	beq.n	802201c <_strtol_l.constprop.0+0xd4>
 8022028:	f1be 0f00 	cmp.w	lr, #0
 802202c:	d000      	beq.n	8022030 <_strtol_l.constprop.0+0xe8>
 802202e:	1e69      	subs	r1, r5, #1
 8022030:	6011      	str	r1, [r2, #0]
 8022032:	e7f3      	b.n	802201c <_strtol_l.constprop.0+0xd4>
 8022034:	2430      	movs	r4, #48	; 0x30
 8022036:	2b00      	cmp	r3, #0
 8022038:	d1b1      	bne.n	8021f9e <_strtol_l.constprop.0+0x56>
 802203a:	2308      	movs	r3, #8
 802203c:	e7af      	b.n	8021f9e <_strtol_l.constprop.0+0x56>
 802203e:	2c30      	cmp	r4, #48	; 0x30
 8022040:	d0a5      	beq.n	8021f8e <_strtol_l.constprop.0+0x46>
 8022042:	230a      	movs	r3, #10
 8022044:	e7ab      	b.n	8021f9e <_strtol_l.constprop.0+0x56>
 8022046:	bf00      	nop
 8022048:	0802491c 	.word	0x0802491c

0802204c <_strtol_r>:
 802204c:	f7ff bf7c 	b.w	8021f48 <_strtol_l.constprop.0>

08022050 <__ssputs_r>:
 8022050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022054:	688e      	ldr	r6, [r1, #8]
 8022056:	461f      	mov	r7, r3
 8022058:	42be      	cmp	r6, r7
 802205a:	680b      	ldr	r3, [r1, #0]
 802205c:	4682      	mov	sl, r0
 802205e:	460c      	mov	r4, r1
 8022060:	4690      	mov	r8, r2
 8022062:	d82c      	bhi.n	80220be <__ssputs_r+0x6e>
 8022064:	898a      	ldrh	r2, [r1, #12]
 8022066:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802206a:	d026      	beq.n	80220ba <__ssputs_r+0x6a>
 802206c:	6965      	ldr	r5, [r4, #20]
 802206e:	6909      	ldr	r1, [r1, #16]
 8022070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022074:	eba3 0901 	sub.w	r9, r3, r1
 8022078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802207c:	1c7b      	adds	r3, r7, #1
 802207e:	444b      	add	r3, r9
 8022080:	106d      	asrs	r5, r5, #1
 8022082:	429d      	cmp	r5, r3
 8022084:	bf38      	it	cc
 8022086:	461d      	movcc	r5, r3
 8022088:	0553      	lsls	r3, r2, #21
 802208a:	d527      	bpl.n	80220dc <__ssputs_r+0x8c>
 802208c:	4629      	mov	r1, r5
 802208e:	f7fc f9d5 	bl	801e43c <_malloc_r>
 8022092:	4606      	mov	r6, r0
 8022094:	b360      	cbz	r0, 80220f0 <__ssputs_r+0xa0>
 8022096:	6921      	ldr	r1, [r4, #16]
 8022098:	464a      	mov	r2, r9
 802209a:	f7fd fe50 	bl	801fd3e <memcpy>
 802209e:	89a3      	ldrh	r3, [r4, #12]
 80220a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80220a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80220a8:	81a3      	strh	r3, [r4, #12]
 80220aa:	6126      	str	r6, [r4, #16]
 80220ac:	6165      	str	r5, [r4, #20]
 80220ae:	444e      	add	r6, r9
 80220b0:	eba5 0509 	sub.w	r5, r5, r9
 80220b4:	6026      	str	r6, [r4, #0]
 80220b6:	60a5      	str	r5, [r4, #8]
 80220b8:	463e      	mov	r6, r7
 80220ba:	42be      	cmp	r6, r7
 80220bc:	d900      	bls.n	80220c0 <__ssputs_r+0x70>
 80220be:	463e      	mov	r6, r7
 80220c0:	6820      	ldr	r0, [r4, #0]
 80220c2:	4632      	mov	r2, r6
 80220c4:	4641      	mov	r1, r8
 80220c6:	f7fd fd53 	bl	801fb70 <memmove>
 80220ca:	68a3      	ldr	r3, [r4, #8]
 80220cc:	1b9b      	subs	r3, r3, r6
 80220ce:	60a3      	str	r3, [r4, #8]
 80220d0:	6823      	ldr	r3, [r4, #0]
 80220d2:	4433      	add	r3, r6
 80220d4:	6023      	str	r3, [r4, #0]
 80220d6:	2000      	movs	r0, #0
 80220d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220dc:	462a      	mov	r2, r5
 80220de:	f7fc faad 	bl	801e63c <_realloc_r>
 80220e2:	4606      	mov	r6, r0
 80220e4:	2800      	cmp	r0, #0
 80220e6:	d1e0      	bne.n	80220aa <__ssputs_r+0x5a>
 80220e8:	6921      	ldr	r1, [r4, #16]
 80220ea:	4650      	mov	r0, sl
 80220ec:	f7fe fc5c 	bl	80209a8 <_free_r>
 80220f0:	230c      	movs	r3, #12
 80220f2:	f8ca 3000 	str.w	r3, [sl]
 80220f6:	89a3      	ldrh	r3, [r4, #12]
 80220f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80220fc:	81a3      	strh	r3, [r4, #12]
 80220fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022102:	e7e9      	b.n	80220d8 <__ssputs_r+0x88>

08022104 <_svfiprintf_r>:
 8022104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022108:	4698      	mov	r8, r3
 802210a:	898b      	ldrh	r3, [r1, #12]
 802210c:	061b      	lsls	r3, r3, #24
 802210e:	b09d      	sub	sp, #116	; 0x74
 8022110:	4607      	mov	r7, r0
 8022112:	460d      	mov	r5, r1
 8022114:	4614      	mov	r4, r2
 8022116:	d50e      	bpl.n	8022136 <_svfiprintf_r+0x32>
 8022118:	690b      	ldr	r3, [r1, #16]
 802211a:	b963      	cbnz	r3, 8022136 <_svfiprintf_r+0x32>
 802211c:	2140      	movs	r1, #64	; 0x40
 802211e:	f7fc f98d 	bl	801e43c <_malloc_r>
 8022122:	6028      	str	r0, [r5, #0]
 8022124:	6128      	str	r0, [r5, #16]
 8022126:	b920      	cbnz	r0, 8022132 <_svfiprintf_r+0x2e>
 8022128:	230c      	movs	r3, #12
 802212a:	603b      	str	r3, [r7, #0]
 802212c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022130:	e0d0      	b.n	80222d4 <_svfiprintf_r+0x1d0>
 8022132:	2340      	movs	r3, #64	; 0x40
 8022134:	616b      	str	r3, [r5, #20]
 8022136:	2300      	movs	r3, #0
 8022138:	9309      	str	r3, [sp, #36]	; 0x24
 802213a:	2320      	movs	r3, #32
 802213c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022140:	f8cd 800c 	str.w	r8, [sp, #12]
 8022144:	2330      	movs	r3, #48	; 0x30
 8022146:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80222ec <_svfiprintf_r+0x1e8>
 802214a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802214e:	f04f 0901 	mov.w	r9, #1
 8022152:	4623      	mov	r3, r4
 8022154:	469a      	mov	sl, r3
 8022156:	f813 2b01 	ldrb.w	r2, [r3], #1
 802215a:	b10a      	cbz	r2, 8022160 <_svfiprintf_r+0x5c>
 802215c:	2a25      	cmp	r2, #37	; 0x25
 802215e:	d1f9      	bne.n	8022154 <_svfiprintf_r+0x50>
 8022160:	ebba 0b04 	subs.w	fp, sl, r4
 8022164:	d00b      	beq.n	802217e <_svfiprintf_r+0x7a>
 8022166:	465b      	mov	r3, fp
 8022168:	4622      	mov	r2, r4
 802216a:	4629      	mov	r1, r5
 802216c:	4638      	mov	r0, r7
 802216e:	f7ff ff6f 	bl	8022050 <__ssputs_r>
 8022172:	3001      	adds	r0, #1
 8022174:	f000 80a9 	beq.w	80222ca <_svfiprintf_r+0x1c6>
 8022178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802217a:	445a      	add	r2, fp
 802217c:	9209      	str	r2, [sp, #36]	; 0x24
 802217e:	f89a 3000 	ldrb.w	r3, [sl]
 8022182:	2b00      	cmp	r3, #0
 8022184:	f000 80a1 	beq.w	80222ca <_svfiprintf_r+0x1c6>
 8022188:	2300      	movs	r3, #0
 802218a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802218e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022192:	f10a 0a01 	add.w	sl, sl, #1
 8022196:	9304      	str	r3, [sp, #16]
 8022198:	9307      	str	r3, [sp, #28]
 802219a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802219e:	931a      	str	r3, [sp, #104]	; 0x68
 80221a0:	4654      	mov	r4, sl
 80221a2:	2205      	movs	r2, #5
 80221a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221a8:	4850      	ldr	r0, [pc, #320]	; (80222ec <_svfiprintf_r+0x1e8>)
 80221aa:	f7de f859 	bl	8000260 <memchr>
 80221ae:	9a04      	ldr	r2, [sp, #16]
 80221b0:	b9d8      	cbnz	r0, 80221ea <_svfiprintf_r+0xe6>
 80221b2:	06d0      	lsls	r0, r2, #27
 80221b4:	bf44      	itt	mi
 80221b6:	2320      	movmi	r3, #32
 80221b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80221bc:	0711      	lsls	r1, r2, #28
 80221be:	bf44      	itt	mi
 80221c0:	232b      	movmi	r3, #43	; 0x2b
 80221c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80221c6:	f89a 3000 	ldrb.w	r3, [sl]
 80221ca:	2b2a      	cmp	r3, #42	; 0x2a
 80221cc:	d015      	beq.n	80221fa <_svfiprintf_r+0xf6>
 80221ce:	9a07      	ldr	r2, [sp, #28]
 80221d0:	4654      	mov	r4, sl
 80221d2:	2000      	movs	r0, #0
 80221d4:	f04f 0c0a 	mov.w	ip, #10
 80221d8:	4621      	mov	r1, r4
 80221da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80221de:	3b30      	subs	r3, #48	; 0x30
 80221e0:	2b09      	cmp	r3, #9
 80221e2:	d94d      	bls.n	8022280 <_svfiprintf_r+0x17c>
 80221e4:	b1b0      	cbz	r0, 8022214 <_svfiprintf_r+0x110>
 80221e6:	9207      	str	r2, [sp, #28]
 80221e8:	e014      	b.n	8022214 <_svfiprintf_r+0x110>
 80221ea:	eba0 0308 	sub.w	r3, r0, r8
 80221ee:	fa09 f303 	lsl.w	r3, r9, r3
 80221f2:	4313      	orrs	r3, r2
 80221f4:	9304      	str	r3, [sp, #16]
 80221f6:	46a2      	mov	sl, r4
 80221f8:	e7d2      	b.n	80221a0 <_svfiprintf_r+0x9c>
 80221fa:	9b03      	ldr	r3, [sp, #12]
 80221fc:	1d19      	adds	r1, r3, #4
 80221fe:	681b      	ldr	r3, [r3, #0]
 8022200:	9103      	str	r1, [sp, #12]
 8022202:	2b00      	cmp	r3, #0
 8022204:	bfbb      	ittet	lt
 8022206:	425b      	neglt	r3, r3
 8022208:	f042 0202 	orrlt.w	r2, r2, #2
 802220c:	9307      	strge	r3, [sp, #28]
 802220e:	9307      	strlt	r3, [sp, #28]
 8022210:	bfb8      	it	lt
 8022212:	9204      	strlt	r2, [sp, #16]
 8022214:	7823      	ldrb	r3, [r4, #0]
 8022216:	2b2e      	cmp	r3, #46	; 0x2e
 8022218:	d10c      	bne.n	8022234 <_svfiprintf_r+0x130>
 802221a:	7863      	ldrb	r3, [r4, #1]
 802221c:	2b2a      	cmp	r3, #42	; 0x2a
 802221e:	d134      	bne.n	802228a <_svfiprintf_r+0x186>
 8022220:	9b03      	ldr	r3, [sp, #12]
 8022222:	1d1a      	adds	r2, r3, #4
 8022224:	681b      	ldr	r3, [r3, #0]
 8022226:	9203      	str	r2, [sp, #12]
 8022228:	2b00      	cmp	r3, #0
 802222a:	bfb8      	it	lt
 802222c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022230:	3402      	adds	r4, #2
 8022232:	9305      	str	r3, [sp, #20]
 8022234:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80222fc <_svfiprintf_r+0x1f8>
 8022238:	7821      	ldrb	r1, [r4, #0]
 802223a:	2203      	movs	r2, #3
 802223c:	4650      	mov	r0, sl
 802223e:	f7de f80f 	bl	8000260 <memchr>
 8022242:	b138      	cbz	r0, 8022254 <_svfiprintf_r+0x150>
 8022244:	9b04      	ldr	r3, [sp, #16]
 8022246:	eba0 000a 	sub.w	r0, r0, sl
 802224a:	2240      	movs	r2, #64	; 0x40
 802224c:	4082      	lsls	r2, r0
 802224e:	4313      	orrs	r3, r2
 8022250:	3401      	adds	r4, #1
 8022252:	9304      	str	r3, [sp, #16]
 8022254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022258:	4825      	ldr	r0, [pc, #148]	; (80222f0 <_svfiprintf_r+0x1ec>)
 802225a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802225e:	2206      	movs	r2, #6
 8022260:	f7dd fffe 	bl	8000260 <memchr>
 8022264:	2800      	cmp	r0, #0
 8022266:	d038      	beq.n	80222da <_svfiprintf_r+0x1d6>
 8022268:	4b22      	ldr	r3, [pc, #136]	; (80222f4 <_svfiprintf_r+0x1f0>)
 802226a:	bb1b      	cbnz	r3, 80222b4 <_svfiprintf_r+0x1b0>
 802226c:	9b03      	ldr	r3, [sp, #12]
 802226e:	3307      	adds	r3, #7
 8022270:	f023 0307 	bic.w	r3, r3, #7
 8022274:	3308      	adds	r3, #8
 8022276:	9303      	str	r3, [sp, #12]
 8022278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802227a:	4433      	add	r3, r6
 802227c:	9309      	str	r3, [sp, #36]	; 0x24
 802227e:	e768      	b.n	8022152 <_svfiprintf_r+0x4e>
 8022280:	fb0c 3202 	mla	r2, ip, r2, r3
 8022284:	460c      	mov	r4, r1
 8022286:	2001      	movs	r0, #1
 8022288:	e7a6      	b.n	80221d8 <_svfiprintf_r+0xd4>
 802228a:	2300      	movs	r3, #0
 802228c:	3401      	adds	r4, #1
 802228e:	9305      	str	r3, [sp, #20]
 8022290:	4619      	mov	r1, r3
 8022292:	f04f 0c0a 	mov.w	ip, #10
 8022296:	4620      	mov	r0, r4
 8022298:	f810 2b01 	ldrb.w	r2, [r0], #1
 802229c:	3a30      	subs	r2, #48	; 0x30
 802229e:	2a09      	cmp	r2, #9
 80222a0:	d903      	bls.n	80222aa <_svfiprintf_r+0x1a6>
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d0c6      	beq.n	8022234 <_svfiprintf_r+0x130>
 80222a6:	9105      	str	r1, [sp, #20]
 80222a8:	e7c4      	b.n	8022234 <_svfiprintf_r+0x130>
 80222aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80222ae:	4604      	mov	r4, r0
 80222b0:	2301      	movs	r3, #1
 80222b2:	e7f0      	b.n	8022296 <_svfiprintf_r+0x192>
 80222b4:	ab03      	add	r3, sp, #12
 80222b6:	9300      	str	r3, [sp, #0]
 80222b8:	462a      	mov	r2, r5
 80222ba:	4b0f      	ldr	r3, [pc, #60]	; (80222f8 <_svfiprintf_r+0x1f4>)
 80222bc:	a904      	add	r1, sp, #16
 80222be:	4638      	mov	r0, r7
 80222c0:	f7fc fafa 	bl	801e8b8 <_printf_float>
 80222c4:	1c42      	adds	r2, r0, #1
 80222c6:	4606      	mov	r6, r0
 80222c8:	d1d6      	bne.n	8022278 <_svfiprintf_r+0x174>
 80222ca:	89ab      	ldrh	r3, [r5, #12]
 80222cc:	065b      	lsls	r3, r3, #25
 80222ce:	f53f af2d 	bmi.w	802212c <_svfiprintf_r+0x28>
 80222d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80222d4:	b01d      	add	sp, #116	; 0x74
 80222d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222da:	ab03      	add	r3, sp, #12
 80222dc:	9300      	str	r3, [sp, #0]
 80222de:	462a      	mov	r2, r5
 80222e0:	4b05      	ldr	r3, [pc, #20]	; (80222f8 <_svfiprintf_r+0x1f4>)
 80222e2:	a904      	add	r1, sp, #16
 80222e4:	4638      	mov	r0, r7
 80222e6:	f7fc fd6f 	bl	801edc8 <_printf_i>
 80222ea:	e7eb      	b.n	80222c4 <_svfiprintf_r+0x1c0>
 80222ec:	08024cb0 	.word	0x08024cb0
 80222f0:	08024cba 	.word	0x08024cba
 80222f4:	0801e8b9 	.word	0x0801e8b9
 80222f8:	08022051 	.word	0x08022051
 80222fc:	08024cb6 	.word	0x08024cb6

08022300 <__sfputc_r>:
 8022300:	6893      	ldr	r3, [r2, #8]
 8022302:	3b01      	subs	r3, #1
 8022304:	2b00      	cmp	r3, #0
 8022306:	b410      	push	{r4}
 8022308:	6093      	str	r3, [r2, #8]
 802230a:	da08      	bge.n	802231e <__sfputc_r+0x1e>
 802230c:	6994      	ldr	r4, [r2, #24]
 802230e:	42a3      	cmp	r3, r4
 8022310:	db01      	blt.n	8022316 <__sfputc_r+0x16>
 8022312:	290a      	cmp	r1, #10
 8022314:	d103      	bne.n	802231e <__sfputc_r+0x1e>
 8022316:	f85d 4b04 	ldr.w	r4, [sp], #4
 802231a:	f7fd bb83 	b.w	801fa24 <__swbuf_r>
 802231e:	6813      	ldr	r3, [r2, #0]
 8022320:	1c58      	adds	r0, r3, #1
 8022322:	6010      	str	r0, [r2, #0]
 8022324:	7019      	strb	r1, [r3, #0]
 8022326:	4608      	mov	r0, r1
 8022328:	f85d 4b04 	ldr.w	r4, [sp], #4
 802232c:	4770      	bx	lr

0802232e <__sfputs_r>:
 802232e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022330:	4606      	mov	r6, r0
 8022332:	460f      	mov	r7, r1
 8022334:	4614      	mov	r4, r2
 8022336:	18d5      	adds	r5, r2, r3
 8022338:	42ac      	cmp	r4, r5
 802233a:	d101      	bne.n	8022340 <__sfputs_r+0x12>
 802233c:	2000      	movs	r0, #0
 802233e:	e007      	b.n	8022350 <__sfputs_r+0x22>
 8022340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022344:	463a      	mov	r2, r7
 8022346:	4630      	mov	r0, r6
 8022348:	f7ff ffda 	bl	8022300 <__sfputc_r>
 802234c:	1c43      	adds	r3, r0, #1
 802234e:	d1f3      	bne.n	8022338 <__sfputs_r+0xa>
 8022350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022354 <_vfiprintf_r>:
 8022354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022358:	460d      	mov	r5, r1
 802235a:	b09d      	sub	sp, #116	; 0x74
 802235c:	4614      	mov	r4, r2
 802235e:	4698      	mov	r8, r3
 8022360:	4606      	mov	r6, r0
 8022362:	b118      	cbz	r0, 802236c <_vfiprintf_r+0x18>
 8022364:	6a03      	ldr	r3, [r0, #32]
 8022366:	b90b      	cbnz	r3, 802236c <_vfiprintf_r+0x18>
 8022368:	f7fd f8e0 	bl	801f52c <__sinit>
 802236c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802236e:	07d9      	lsls	r1, r3, #31
 8022370:	d405      	bmi.n	802237e <_vfiprintf_r+0x2a>
 8022372:	89ab      	ldrh	r3, [r5, #12]
 8022374:	059a      	lsls	r2, r3, #22
 8022376:	d402      	bmi.n	802237e <_vfiprintf_r+0x2a>
 8022378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802237a:	f7fd fcd6 	bl	801fd2a <__retarget_lock_acquire_recursive>
 802237e:	89ab      	ldrh	r3, [r5, #12]
 8022380:	071b      	lsls	r3, r3, #28
 8022382:	d501      	bpl.n	8022388 <_vfiprintf_r+0x34>
 8022384:	692b      	ldr	r3, [r5, #16]
 8022386:	b99b      	cbnz	r3, 80223b0 <_vfiprintf_r+0x5c>
 8022388:	4629      	mov	r1, r5
 802238a:	4630      	mov	r0, r6
 802238c:	f7fd fb88 	bl	801faa0 <__swsetup_r>
 8022390:	b170      	cbz	r0, 80223b0 <_vfiprintf_r+0x5c>
 8022392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022394:	07dc      	lsls	r4, r3, #31
 8022396:	d504      	bpl.n	80223a2 <_vfiprintf_r+0x4e>
 8022398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802239c:	b01d      	add	sp, #116	; 0x74
 802239e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223a2:	89ab      	ldrh	r3, [r5, #12]
 80223a4:	0598      	lsls	r0, r3, #22
 80223a6:	d4f7      	bmi.n	8022398 <_vfiprintf_r+0x44>
 80223a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80223aa:	f7fd fcbf 	bl	801fd2c <__retarget_lock_release_recursive>
 80223ae:	e7f3      	b.n	8022398 <_vfiprintf_r+0x44>
 80223b0:	2300      	movs	r3, #0
 80223b2:	9309      	str	r3, [sp, #36]	; 0x24
 80223b4:	2320      	movs	r3, #32
 80223b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80223ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80223be:	2330      	movs	r3, #48	; 0x30
 80223c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8022574 <_vfiprintf_r+0x220>
 80223c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80223c8:	f04f 0901 	mov.w	r9, #1
 80223cc:	4623      	mov	r3, r4
 80223ce:	469a      	mov	sl, r3
 80223d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80223d4:	b10a      	cbz	r2, 80223da <_vfiprintf_r+0x86>
 80223d6:	2a25      	cmp	r2, #37	; 0x25
 80223d8:	d1f9      	bne.n	80223ce <_vfiprintf_r+0x7a>
 80223da:	ebba 0b04 	subs.w	fp, sl, r4
 80223de:	d00b      	beq.n	80223f8 <_vfiprintf_r+0xa4>
 80223e0:	465b      	mov	r3, fp
 80223e2:	4622      	mov	r2, r4
 80223e4:	4629      	mov	r1, r5
 80223e6:	4630      	mov	r0, r6
 80223e8:	f7ff ffa1 	bl	802232e <__sfputs_r>
 80223ec:	3001      	adds	r0, #1
 80223ee:	f000 80a9 	beq.w	8022544 <_vfiprintf_r+0x1f0>
 80223f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80223f4:	445a      	add	r2, fp
 80223f6:	9209      	str	r2, [sp, #36]	; 0x24
 80223f8:	f89a 3000 	ldrb.w	r3, [sl]
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	f000 80a1 	beq.w	8022544 <_vfiprintf_r+0x1f0>
 8022402:	2300      	movs	r3, #0
 8022404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802240c:	f10a 0a01 	add.w	sl, sl, #1
 8022410:	9304      	str	r3, [sp, #16]
 8022412:	9307      	str	r3, [sp, #28]
 8022414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022418:	931a      	str	r3, [sp, #104]	; 0x68
 802241a:	4654      	mov	r4, sl
 802241c:	2205      	movs	r2, #5
 802241e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022422:	4854      	ldr	r0, [pc, #336]	; (8022574 <_vfiprintf_r+0x220>)
 8022424:	f7dd ff1c 	bl	8000260 <memchr>
 8022428:	9a04      	ldr	r2, [sp, #16]
 802242a:	b9d8      	cbnz	r0, 8022464 <_vfiprintf_r+0x110>
 802242c:	06d1      	lsls	r1, r2, #27
 802242e:	bf44      	itt	mi
 8022430:	2320      	movmi	r3, #32
 8022432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022436:	0713      	lsls	r3, r2, #28
 8022438:	bf44      	itt	mi
 802243a:	232b      	movmi	r3, #43	; 0x2b
 802243c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022440:	f89a 3000 	ldrb.w	r3, [sl]
 8022444:	2b2a      	cmp	r3, #42	; 0x2a
 8022446:	d015      	beq.n	8022474 <_vfiprintf_r+0x120>
 8022448:	9a07      	ldr	r2, [sp, #28]
 802244a:	4654      	mov	r4, sl
 802244c:	2000      	movs	r0, #0
 802244e:	f04f 0c0a 	mov.w	ip, #10
 8022452:	4621      	mov	r1, r4
 8022454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022458:	3b30      	subs	r3, #48	; 0x30
 802245a:	2b09      	cmp	r3, #9
 802245c:	d94d      	bls.n	80224fa <_vfiprintf_r+0x1a6>
 802245e:	b1b0      	cbz	r0, 802248e <_vfiprintf_r+0x13a>
 8022460:	9207      	str	r2, [sp, #28]
 8022462:	e014      	b.n	802248e <_vfiprintf_r+0x13a>
 8022464:	eba0 0308 	sub.w	r3, r0, r8
 8022468:	fa09 f303 	lsl.w	r3, r9, r3
 802246c:	4313      	orrs	r3, r2
 802246e:	9304      	str	r3, [sp, #16]
 8022470:	46a2      	mov	sl, r4
 8022472:	e7d2      	b.n	802241a <_vfiprintf_r+0xc6>
 8022474:	9b03      	ldr	r3, [sp, #12]
 8022476:	1d19      	adds	r1, r3, #4
 8022478:	681b      	ldr	r3, [r3, #0]
 802247a:	9103      	str	r1, [sp, #12]
 802247c:	2b00      	cmp	r3, #0
 802247e:	bfbb      	ittet	lt
 8022480:	425b      	neglt	r3, r3
 8022482:	f042 0202 	orrlt.w	r2, r2, #2
 8022486:	9307      	strge	r3, [sp, #28]
 8022488:	9307      	strlt	r3, [sp, #28]
 802248a:	bfb8      	it	lt
 802248c:	9204      	strlt	r2, [sp, #16]
 802248e:	7823      	ldrb	r3, [r4, #0]
 8022490:	2b2e      	cmp	r3, #46	; 0x2e
 8022492:	d10c      	bne.n	80224ae <_vfiprintf_r+0x15a>
 8022494:	7863      	ldrb	r3, [r4, #1]
 8022496:	2b2a      	cmp	r3, #42	; 0x2a
 8022498:	d134      	bne.n	8022504 <_vfiprintf_r+0x1b0>
 802249a:	9b03      	ldr	r3, [sp, #12]
 802249c:	1d1a      	adds	r2, r3, #4
 802249e:	681b      	ldr	r3, [r3, #0]
 80224a0:	9203      	str	r2, [sp, #12]
 80224a2:	2b00      	cmp	r3, #0
 80224a4:	bfb8      	it	lt
 80224a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80224aa:	3402      	adds	r4, #2
 80224ac:	9305      	str	r3, [sp, #20]
 80224ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8022584 <_vfiprintf_r+0x230>
 80224b2:	7821      	ldrb	r1, [r4, #0]
 80224b4:	2203      	movs	r2, #3
 80224b6:	4650      	mov	r0, sl
 80224b8:	f7dd fed2 	bl	8000260 <memchr>
 80224bc:	b138      	cbz	r0, 80224ce <_vfiprintf_r+0x17a>
 80224be:	9b04      	ldr	r3, [sp, #16]
 80224c0:	eba0 000a 	sub.w	r0, r0, sl
 80224c4:	2240      	movs	r2, #64	; 0x40
 80224c6:	4082      	lsls	r2, r0
 80224c8:	4313      	orrs	r3, r2
 80224ca:	3401      	adds	r4, #1
 80224cc:	9304      	str	r3, [sp, #16]
 80224ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80224d2:	4829      	ldr	r0, [pc, #164]	; (8022578 <_vfiprintf_r+0x224>)
 80224d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80224d8:	2206      	movs	r2, #6
 80224da:	f7dd fec1 	bl	8000260 <memchr>
 80224de:	2800      	cmp	r0, #0
 80224e0:	d03f      	beq.n	8022562 <_vfiprintf_r+0x20e>
 80224e2:	4b26      	ldr	r3, [pc, #152]	; (802257c <_vfiprintf_r+0x228>)
 80224e4:	bb1b      	cbnz	r3, 802252e <_vfiprintf_r+0x1da>
 80224e6:	9b03      	ldr	r3, [sp, #12]
 80224e8:	3307      	adds	r3, #7
 80224ea:	f023 0307 	bic.w	r3, r3, #7
 80224ee:	3308      	adds	r3, #8
 80224f0:	9303      	str	r3, [sp, #12]
 80224f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224f4:	443b      	add	r3, r7
 80224f6:	9309      	str	r3, [sp, #36]	; 0x24
 80224f8:	e768      	b.n	80223cc <_vfiprintf_r+0x78>
 80224fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80224fe:	460c      	mov	r4, r1
 8022500:	2001      	movs	r0, #1
 8022502:	e7a6      	b.n	8022452 <_vfiprintf_r+0xfe>
 8022504:	2300      	movs	r3, #0
 8022506:	3401      	adds	r4, #1
 8022508:	9305      	str	r3, [sp, #20]
 802250a:	4619      	mov	r1, r3
 802250c:	f04f 0c0a 	mov.w	ip, #10
 8022510:	4620      	mov	r0, r4
 8022512:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022516:	3a30      	subs	r2, #48	; 0x30
 8022518:	2a09      	cmp	r2, #9
 802251a:	d903      	bls.n	8022524 <_vfiprintf_r+0x1d0>
 802251c:	2b00      	cmp	r3, #0
 802251e:	d0c6      	beq.n	80224ae <_vfiprintf_r+0x15a>
 8022520:	9105      	str	r1, [sp, #20]
 8022522:	e7c4      	b.n	80224ae <_vfiprintf_r+0x15a>
 8022524:	fb0c 2101 	mla	r1, ip, r1, r2
 8022528:	4604      	mov	r4, r0
 802252a:	2301      	movs	r3, #1
 802252c:	e7f0      	b.n	8022510 <_vfiprintf_r+0x1bc>
 802252e:	ab03      	add	r3, sp, #12
 8022530:	9300      	str	r3, [sp, #0]
 8022532:	462a      	mov	r2, r5
 8022534:	4b12      	ldr	r3, [pc, #72]	; (8022580 <_vfiprintf_r+0x22c>)
 8022536:	a904      	add	r1, sp, #16
 8022538:	4630      	mov	r0, r6
 802253a:	f7fc f9bd 	bl	801e8b8 <_printf_float>
 802253e:	4607      	mov	r7, r0
 8022540:	1c78      	adds	r0, r7, #1
 8022542:	d1d6      	bne.n	80224f2 <_vfiprintf_r+0x19e>
 8022544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022546:	07d9      	lsls	r1, r3, #31
 8022548:	d405      	bmi.n	8022556 <_vfiprintf_r+0x202>
 802254a:	89ab      	ldrh	r3, [r5, #12]
 802254c:	059a      	lsls	r2, r3, #22
 802254e:	d402      	bmi.n	8022556 <_vfiprintf_r+0x202>
 8022550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022552:	f7fd fbeb 	bl	801fd2c <__retarget_lock_release_recursive>
 8022556:	89ab      	ldrh	r3, [r5, #12]
 8022558:	065b      	lsls	r3, r3, #25
 802255a:	f53f af1d 	bmi.w	8022398 <_vfiprintf_r+0x44>
 802255e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022560:	e71c      	b.n	802239c <_vfiprintf_r+0x48>
 8022562:	ab03      	add	r3, sp, #12
 8022564:	9300      	str	r3, [sp, #0]
 8022566:	462a      	mov	r2, r5
 8022568:	4b05      	ldr	r3, [pc, #20]	; (8022580 <_vfiprintf_r+0x22c>)
 802256a:	a904      	add	r1, sp, #16
 802256c:	4630      	mov	r0, r6
 802256e:	f7fc fc2b 	bl	801edc8 <_printf_i>
 8022572:	e7e4      	b.n	802253e <_vfiprintf_r+0x1ea>
 8022574:	08024cb0 	.word	0x08024cb0
 8022578:	08024cba 	.word	0x08024cba
 802257c:	0801e8b9 	.word	0x0801e8b9
 8022580:	0802232f 	.word	0x0802232f
 8022584:	08024cb6 	.word	0x08024cb6

08022588 <__sflush_r>:
 8022588:	898a      	ldrh	r2, [r1, #12]
 802258a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802258e:	4605      	mov	r5, r0
 8022590:	0710      	lsls	r0, r2, #28
 8022592:	460c      	mov	r4, r1
 8022594:	d458      	bmi.n	8022648 <__sflush_r+0xc0>
 8022596:	684b      	ldr	r3, [r1, #4]
 8022598:	2b00      	cmp	r3, #0
 802259a:	dc05      	bgt.n	80225a8 <__sflush_r+0x20>
 802259c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802259e:	2b00      	cmp	r3, #0
 80225a0:	dc02      	bgt.n	80225a8 <__sflush_r+0x20>
 80225a2:	2000      	movs	r0, #0
 80225a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80225a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80225aa:	2e00      	cmp	r6, #0
 80225ac:	d0f9      	beq.n	80225a2 <__sflush_r+0x1a>
 80225ae:	2300      	movs	r3, #0
 80225b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80225b4:	682f      	ldr	r7, [r5, #0]
 80225b6:	6a21      	ldr	r1, [r4, #32]
 80225b8:	602b      	str	r3, [r5, #0]
 80225ba:	d032      	beq.n	8022622 <__sflush_r+0x9a>
 80225bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80225be:	89a3      	ldrh	r3, [r4, #12]
 80225c0:	075a      	lsls	r2, r3, #29
 80225c2:	d505      	bpl.n	80225d0 <__sflush_r+0x48>
 80225c4:	6863      	ldr	r3, [r4, #4]
 80225c6:	1ac0      	subs	r0, r0, r3
 80225c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80225ca:	b10b      	cbz	r3, 80225d0 <__sflush_r+0x48>
 80225cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80225ce:	1ac0      	subs	r0, r0, r3
 80225d0:	2300      	movs	r3, #0
 80225d2:	4602      	mov	r2, r0
 80225d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80225d6:	6a21      	ldr	r1, [r4, #32]
 80225d8:	4628      	mov	r0, r5
 80225da:	47b0      	blx	r6
 80225dc:	1c43      	adds	r3, r0, #1
 80225de:	89a3      	ldrh	r3, [r4, #12]
 80225e0:	d106      	bne.n	80225f0 <__sflush_r+0x68>
 80225e2:	6829      	ldr	r1, [r5, #0]
 80225e4:	291d      	cmp	r1, #29
 80225e6:	d82b      	bhi.n	8022640 <__sflush_r+0xb8>
 80225e8:	4a29      	ldr	r2, [pc, #164]	; (8022690 <__sflush_r+0x108>)
 80225ea:	410a      	asrs	r2, r1
 80225ec:	07d6      	lsls	r6, r2, #31
 80225ee:	d427      	bmi.n	8022640 <__sflush_r+0xb8>
 80225f0:	2200      	movs	r2, #0
 80225f2:	6062      	str	r2, [r4, #4]
 80225f4:	04d9      	lsls	r1, r3, #19
 80225f6:	6922      	ldr	r2, [r4, #16]
 80225f8:	6022      	str	r2, [r4, #0]
 80225fa:	d504      	bpl.n	8022606 <__sflush_r+0x7e>
 80225fc:	1c42      	adds	r2, r0, #1
 80225fe:	d101      	bne.n	8022604 <__sflush_r+0x7c>
 8022600:	682b      	ldr	r3, [r5, #0]
 8022602:	b903      	cbnz	r3, 8022606 <__sflush_r+0x7e>
 8022604:	6560      	str	r0, [r4, #84]	; 0x54
 8022606:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022608:	602f      	str	r7, [r5, #0]
 802260a:	2900      	cmp	r1, #0
 802260c:	d0c9      	beq.n	80225a2 <__sflush_r+0x1a>
 802260e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022612:	4299      	cmp	r1, r3
 8022614:	d002      	beq.n	802261c <__sflush_r+0x94>
 8022616:	4628      	mov	r0, r5
 8022618:	f7fe f9c6 	bl	80209a8 <_free_r>
 802261c:	2000      	movs	r0, #0
 802261e:	6360      	str	r0, [r4, #52]	; 0x34
 8022620:	e7c0      	b.n	80225a4 <__sflush_r+0x1c>
 8022622:	2301      	movs	r3, #1
 8022624:	4628      	mov	r0, r5
 8022626:	47b0      	blx	r6
 8022628:	1c41      	adds	r1, r0, #1
 802262a:	d1c8      	bne.n	80225be <__sflush_r+0x36>
 802262c:	682b      	ldr	r3, [r5, #0]
 802262e:	2b00      	cmp	r3, #0
 8022630:	d0c5      	beq.n	80225be <__sflush_r+0x36>
 8022632:	2b1d      	cmp	r3, #29
 8022634:	d001      	beq.n	802263a <__sflush_r+0xb2>
 8022636:	2b16      	cmp	r3, #22
 8022638:	d101      	bne.n	802263e <__sflush_r+0xb6>
 802263a:	602f      	str	r7, [r5, #0]
 802263c:	e7b1      	b.n	80225a2 <__sflush_r+0x1a>
 802263e:	89a3      	ldrh	r3, [r4, #12]
 8022640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022644:	81a3      	strh	r3, [r4, #12]
 8022646:	e7ad      	b.n	80225a4 <__sflush_r+0x1c>
 8022648:	690f      	ldr	r7, [r1, #16]
 802264a:	2f00      	cmp	r7, #0
 802264c:	d0a9      	beq.n	80225a2 <__sflush_r+0x1a>
 802264e:	0793      	lsls	r3, r2, #30
 8022650:	680e      	ldr	r6, [r1, #0]
 8022652:	bf08      	it	eq
 8022654:	694b      	ldreq	r3, [r1, #20]
 8022656:	600f      	str	r7, [r1, #0]
 8022658:	bf18      	it	ne
 802265a:	2300      	movne	r3, #0
 802265c:	eba6 0807 	sub.w	r8, r6, r7
 8022660:	608b      	str	r3, [r1, #8]
 8022662:	f1b8 0f00 	cmp.w	r8, #0
 8022666:	dd9c      	ble.n	80225a2 <__sflush_r+0x1a>
 8022668:	6a21      	ldr	r1, [r4, #32]
 802266a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802266c:	4643      	mov	r3, r8
 802266e:	463a      	mov	r2, r7
 8022670:	4628      	mov	r0, r5
 8022672:	47b0      	blx	r6
 8022674:	2800      	cmp	r0, #0
 8022676:	dc06      	bgt.n	8022686 <__sflush_r+0xfe>
 8022678:	89a3      	ldrh	r3, [r4, #12]
 802267a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802267e:	81a3      	strh	r3, [r4, #12]
 8022680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022684:	e78e      	b.n	80225a4 <__sflush_r+0x1c>
 8022686:	4407      	add	r7, r0
 8022688:	eba8 0800 	sub.w	r8, r8, r0
 802268c:	e7e9      	b.n	8022662 <__sflush_r+0xda>
 802268e:	bf00      	nop
 8022690:	dfbffffe 	.word	0xdfbffffe

08022694 <_fflush_r>:
 8022694:	b538      	push	{r3, r4, r5, lr}
 8022696:	690b      	ldr	r3, [r1, #16]
 8022698:	4605      	mov	r5, r0
 802269a:	460c      	mov	r4, r1
 802269c:	b913      	cbnz	r3, 80226a4 <_fflush_r+0x10>
 802269e:	2500      	movs	r5, #0
 80226a0:	4628      	mov	r0, r5
 80226a2:	bd38      	pop	{r3, r4, r5, pc}
 80226a4:	b118      	cbz	r0, 80226ae <_fflush_r+0x1a>
 80226a6:	6a03      	ldr	r3, [r0, #32]
 80226a8:	b90b      	cbnz	r3, 80226ae <_fflush_r+0x1a>
 80226aa:	f7fc ff3f 	bl	801f52c <__sinit>
 80226ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d0f3      	beq.n	802269e <_fflush_r+0xa>
 80226b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80226b8:	07d0      	lsls	r0, r2, #31
 80226ba:	d404      	bmi.n	80226c6 <_fflush_r+0x32>
 80226bc:	0599      	lsls	r1, r3, #22
 80226be:	d402      	bmi.n	80226c6 <_fflush_r+0x32>
 80226c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226c2:	f7fd fb32 	bl	801fd2a <__retarget_lock_acquire_recursive>
 80226c6:	4628      	mov	r0, r5
 80226c8:	4621      	mov	r1, r4
 80226ca:	f7ff ff5d 	bl	8022588 <__sflush_r>
 80226ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80226d0:	07da      	lsls	r2, r3, #31
 80226d2:	4605      	mov	r5, r0
 80226d4:	d4e4      	bmi.n	80226a0 <_fflush_r+0xc>
 80226d6:	89a3      	ldrh	r3, [r4, #12]
 80226d8:	059b      	lsls	r3, r3, #22
 80226da:	d4e1      	bmi.n	80226a0 <_fflush_r+0xc>
 80226dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226de:	f7fd fb25 	bl	801fd2c <__retarget_lock_release_recursive>
 80226e2:	e7dd      	b.n	80226a0 <_fflush_r+0xc>

080226e4 <fiprintf>:
 80226e4:	b40e      	push	{r1, r2, r3}
 80226e6:	b503      	push	{r0, r1, lr}
 80226e8:	4601      	mov	r1, r0
 80226ea:	ab03      	add	r3, sp, #12
 80226ec:	4805      	ldr	r0, [pc, #20]	; (8022704 <fiprintf+0x20>)
 80226ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80226f2:	6800      	ldr	r0, [r0, #0]
 80226f4:	9301      	str	r3, [sp, #4]
 80226f6:	f7ff fe2d 	bl	8022354 <_vfiprintf_r>
 80226fa:	b002      	add	sp, #8
 80226fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8022700:	b003      	add	sp, #12
 8022702:	4770      	bx	lr
 8022704:	200009a0 	.word	0x200009a0

08022708 <__swhatbuf_r>:
 8022708:	b570      	push	{r4, r5, r6, lr}
 802270a:	460c      	mov	r4, r1
 802270c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022710:	2900      	cmp	r1, #0
 8022712:	b096      	sub	sp, #88	; 0x58
 8022714:	4615      	mov	r5, r2
 8022716:	461e      	mov	r6, r3
 8022718:	da0d      	bge.n	8022736 <__swhatbuf_r+0x2e>
 802271a:	89a3      	ldrh	r3, [r4, #12]
 802271c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8022720:	f04f 0100 	mov.w	r1, #0
 8022724:	bf0c      	ite	eq
 8022726:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802272a:	2340      	movne	r3, #64	; 0x40
 802272c:	2000      	movs	r0, #0
 802272e:	6031      	str	r1, [r6, #0]
 8022730:	602b      	str	r3, [r5, #0]
 8022732:	b016      	add	sp, #88	; 0x58
 8022734:	bd70      	pop	{r4, r5, r6, pc}
 8022736:	466a      	mov	r2, sp
 8022738:	f000 f848 	bl	80227cc <_fstat_r>
 802273c:	2800      	cmp	r0, #0
 802273e:	dbec      	blt.n	802271a <__swhatbuf_r+0x12>
 8022740:	9901      	ldr	r1, [sp, #4]
 8022742:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8022746:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802274a:	4259      	negs	r1, r3
 802274c:	4159      	adcs	r1, r3
 802274e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022752:	e7eb      	b.n	802272c <__swhatbuf_r+0x24>

08022754 <__smakebuf_r>:
 8022754:	898b      	ldrh	r3, [r1, #12]
 8022756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022758:	079d      	lsls	r5, r3, #30
 802275a:	4606      	mov	r6, r0
 802275c:	460c      	mov	r4, r1
 802275e:	d507      	bpl.n	8022770 <__smakebuf_r+0x1c>
 8022760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022764:	6023      	str	r3, [r4, #0]
 8022766:	6123      	str	r3, [r4, #16]
 8022768:	2301      	movs	r3, #1
 802276a:	6163      	str	r3, [r4, #20]
 802276c:	b002      	add	sp, #8
 802276e:	bd70      	pop	{r4, r5, r6, pc}
 8022770:	ab01      	add	r3, sp, #4
 8022772:	466a      	mov	r2, sp
 8022774:	f7ff ffc8 	bl	8022708 <__swhatbuf_r>
 8022778:	9900      	ldr	r1, [sp, #0]
 802277a:	4605      	mov	r5, r0
 802277c:	4630      	mov	r0, r6
 802277e:	f7fb fe5d 	bl	801e43c <_malloc_r>
 8022782:	b948      	cbnz	r0, 8022798 <__smakebuf_r+0x44>
 8022784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022788:	059a      	lsls	r2, r3, #22
 802278a:	d4ef      	bmi.n	802276c <__smakebuf_r+0x18>
 802278c:	f023 0303 	bic.w	r3, r3, #3
 8022790:	f043 0302 	orr.w	r3, r3, #2
 8022794:	81a3      	strh	r3, [r4, #12]
 8022796:	e7e3      	b.n	8022760 <__smakebuf_r+0xc>
 8022798:	89a3      	ldrh	r3, [r4, #12]
 802279a:	6020      	str	r0, [r4, #0]
 802279c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80227a0:	81a3      	strh	r3, [r4, #12]
 80227a2:	9b00      	ldr	r3, [sp, #0]
 80227a4:	6163      	str	r3, [r4, #20]
 80227a6:	9b01      	ldr	r3, [sp, #4]
 80227a8:	6120      	str	r0, [r4, #16]
 80227aa:	b15b      	cbz	r3, 80227c4 <__smakebuf_r+0x70>
 80227ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80227b0:	4630      	mov	r0, r6
 80227b2:	f000 f81d 	bl	80227f0 <_isatty_r>
 80227b6:	b128      	cbz	r0, 80227c4 <__smakebuf_r+0x70>
 80227b8:	89a3      	ldrh	r3, [r4, #12]
 80227ba:	f023 0303 	bic.w	r3, r3, #3
 80227be:	f043 0301 	orr.w	r3, r3, #1
 80227c2:	81a3      	strh	r3, [r4, #12]
 80227c4:	89a3      	ldrh	r3, [r4, #12]
 80227c6:	431d      	orrs	r5, r3
 80227c8:	81a5      	strh	r5, [r4, #12]
 80227ca:	e7cf      	b.n	802276c <__smakebuf_r+0x18>

080227cc <_fstat_r>:
 80227cc:	b538      	push	{r3, r4, r5, lr}
 80227ce:	4d07      	ldr	r5, [pc, #28]	; (80227ec <_fstat_r+0x20>)
 80227d0:	2300      	movs	r3, #0
 80227d2:	4604      	mov	r4, r0
 80227d4:	4608      	mov	r0, r1
 80227d6:	4611      	mov	r1, r2
 80227d8:	602b      	str	r3, [r5, #0]
 80227da:	f7e0 fa4c 	bl	8002c76 <_fstat>
 80227de:	1c43      	adds	r3, r0, #1
 80227e0:	d102      	bne.n	80227e8 <_fstat_r+0x1c>
 80227e2:	682b      	ldr	r3, [r5, #0]
 80227e4:	b103      	cbz	r3, 80227e8 <_fstat_r+0x1c>
 80227e6:	6023      	str	r3, [r4, #0]
 80227e8:	bd38      	pop	{r3, r4, r5, pc}
 80227ea:	bf00      	nop
 80227ec:	20017018 	.word	0x20017018

080227f0 <_isatty_r>:
 80227f0:	b538      	push	{r3, r4, r5, lr}
 80227f2:	4d06      	ldr	r5, [pc, #24]	; (802280c <_isatty_r+0x1c>)
 80227f4:	2300      	movs	r3, #0
 80227f6:	4604      	mov	r4, r0
 80227f8:	4608      	mov	r0, r1
 80227fa:	602b      	str	r3, [r5, #0]
 80227fc:	f7e0 fa4b 	bl	8002c96 <_isatty>
 8022800:	1c43      	adds	r3, r0, #1
 8022802:	d102      	bne.n	802280a <_isatty_r+0x1a>
 8022804:	682b      	ldr	r3, [r5, #0]
 8022806:	b103      	cbz	r3, 802280a <_isatty_r+0x1a>
 8022808:	6023      	str	r3, [r4, #0]
 802280a:	bd38      	pop	{r3, r4, r5, pc}
 802280c:	20017018 	.word	0x20017018

08022810 <nan>:
 8022810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022818 <nan+0x8>
 8022814:	4770      	bx	lr
 8022816:	bf00      	nop
 8022818:	00000000 	.word	0x00000000
 802281c:	7ff80000 	.word	0x7ff80000

08022820 <abort>:
 8022820:	b508      	push	{r3, lr}
 8022822:	2006      	movs	r0, #6
 8022824:	f000 fba0 	bl	8022f68 <raise>
 8022828:	2001      	movs	r0, #1
 802282a:	f7e0 f9d5 	bl	8002bd8 <_exit>

0802282e <rshift>:
 802282e:	6903      	ldr	r3, [r0, #16]
 8022830:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8022834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022838:	ea4f 1261 	mov.w	r2, r1, asr #5
 802283c:	f100 0414 	add.w	r4, r0, #20
 8022840:	dd45      	ble.n	80228ce <rshift+0xa0>
 8022842:	f011 011f 	ands.w	r1, r1, #31
 8022846:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802284a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802284e:	d10c      	bne.n	802286a <rshift+0x3c>
 8022850:	f100 0710 	add.w	r7, r0, #16
 8022854:	4629      	mov	r1, r5
 8022856:	42b1      	cmp	r1, r6
 8022858:	d334      	bcc.n	80228c4 <rshift+0x96>
 802285a:	1a9b      	subs	r3, r3, r2
 802285c:	009b      	lsls	r3, r3, #2
 802285e:	1eea      	subs	r2, r5, #3
 8022860:	4296      	cmp	r6, r2
 8022862:	bf38      	it	cc
 8022864:	2300      	movcc	r3, #0
 8022866:	4423      	add	r3, r4
 8022868:	e015      	b.n	8022896 <rshift+0x68>
 802286a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802286e:	f1c1 0820 	rsb	r8, r1, #32
 8022872:	40cf      	lsrs	r7, r1
 8022874:	f105 0e04 	add.w	lr, r5, #4
 8022878:	46a1      	mov	r9, r4
 802287a:	4576      	cmp	r6, lr
 802287c:	46f4      	mov	ip, lr
 802287e:	d815      	bhi.n	80228ac <rshift+0x7e>
 8022880:	1a9a      	subs	r2, r3, r2
 8022882:	0092      	lsls	r2, r2, #2
 8022884:	3a04      	subs	r2, #4
 8022886:	3501      	adds	r5, #1
 8022888:	42ae      	cmp	r6, r5
 802288a:	bf38      	it	cc
 802288c:	2200      	movcc	r2, #0
 802288e:	18a3      	adds	r3, r4, r2
 8022890:	50a7      	str	r7, [r4, r2]
 8022892:	b107      	cbz	r7, 8022896 <rshift+0x68>
 8022894:	3304      	adds	r3, #4
 8022896:	1b1a      	subs	r2, r3, r4
 8022898:	42a3      	cmp	r3, r4
 802289a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802289e:	bf08      	it	eq
 80228a0:	2300      	moveq	r3, #0
 80228a2:	6102      	str	r2, [r0, #16]
 80228a4:	bf08      	it	eq
 80228a6:	6143      	streq	r3, [r0, #20]
 80228a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80228ac:	f8dc c000 	ldr.w	ip, [ip]
 80228b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80228b4:	ea4c 0707 	orr.w	r7, ip, r7
 80228b8:	f849 7b04 	str.w	r7, [r9], #4
 80228bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80228c0:	40cf      	lsrs	r7, r1
 80228c2:	e7da      	b.n	802287a <rshift+0x4c>
 80228c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80228c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80228cc:	e7c3      	b.n	8022856 <rshift+0x28>
 80228ce:	4623      	mov	r3, r4
 80228d0:	e7e1      	b.n	8022896 <rshift+0x68>

080228d2 <__hexdig_fun>:
 80228d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80228d6:	2b09      	cmp	r3, #9
 80228d8:	d802      	bhi.n	80228e0 <__hexdig_fun+0xe>
 80228da:	3820      	subs	r0, #32
 80228dc:	b2c0      	uxtb	r0, r0
 80228de:	4770      	bx	lr
 80228e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80228e4:	2b05      	cmp	r3, #5
 80228e6:	d801      	bhi.n	80228ec <__hexdig_fun+0x1a>
 80228e8:	3847      	subs	r0, #71	; 0x47
 80228ea:	e7f7      	b.n	80228dc <__hexdig_fun+0xa>
 80228ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80228f0:	2b05      	cmp	r3, #5
 80228f2:	d801      	bhi.n	80228f8 <__hexdig_fun+0x26>
 80228f4:	3827      	subs	r0, #39	; 0x27
 80228f6:	e7f1      	b.n	80228dc <__hexdig_fun+0xa>
 80228f8:	2000      	movs	r0, #0
 80228fa:	4770      	bx	lr

080228fc <__gethex>:
 80228fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022900:	4617      	mov	r7, r2
 8022902:	680a      	ldr	r2, [r1, #0]
 8022904:	b085      	sub	sp, #20
 8022906:	f102 0b02 	add.w	fp, r2, #2
 802290a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802290e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8022912:	4681      	mov	r9, r0
 8022914:	468a      	mov	sl, r1
 8022916:	9302      	str	r3, [sp, #8]
 8022918:	32fe      	adds	r2, #254	; 0xfe
 802291a:	eb02 030b 	add.w	r3, r2, fp
 802291e:	46d8      	mov	r8, fp
 8022920:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8022924:	9301      	str	r3, [sp, #4]
 8022926:	2830      	cmp	r0, #48	; 0x30
 8022928:	d0f7      	beq.n	802291a <__gethex+0x1e>
 802292a:	f7ff ffd2 	bl	80228d2 <__hexdig_fun>
 802292e:	4604      	mov	r4, r0
 8022930:	2800      	cmp	r0, #0
 8022932:	d138      	bne.n	80229a6 <__gethex+0xaa>
 8022934:	49a7      	ldr	r1, [pc, #668]	; (8022bd4 <__gethex+0x2d8>)
 8022936:	2201      	movs	r2, #1
 8022938:	4640      	mov	r0, r8
 802293a:	f7fd f948 	bl	801fbce <strncmp>
 802293e:	4606      	mov	r6, r0
 8022940:	2800      	cmp	r0, #0
 8022942:	d169      	bne.n	8022a18 <__gethex+0x11c>
 8022944:	f898 0001 	ldrb.w	r0, [r8, #1]
 8022948:	465d      	mov	r5, fp
 802294a:	f7ff ffc2 	bl	80228d2 <__hexdig_fun>
 802294e:	2800      	cmp	r0, #0
 8022950:	d064      	beq.n	8022a1c <__gethex+0x120>
 8022952:	465a      	mov	r2, fp
 8022954:	7810      	ldrb	r0, [r2, #0]
 8022956:	2830      	cmp	r0, #48	; 0x30
 8022958:	4690      	mov	r8, r2
 802295a:	f102 0201 	add.w	r2, r2, #1
 802295e:	d0f9      	beq.n	8022954 <__gethex+0x58>
 8022960:	f7ff ffb7 	bl	80228d2 <__hexdig_fun>
 8022964:	2301      	movs	r3, #1
 8022966:	fab0 f480 	clz	r4, r0
 802296a:	0964      	lsrs	r4, r4, #5
 802296c:	465e      	mov	r6, fp
 802296e:	9301      	str	r3, [sp, #4]
 8022970:	4642      	mov	r2, r8
 8022972:	4615      	mov	r5, r2
 8022974:	3201      	adds	r2, #1
 8022976:	7828      	ldrb	r0, [r5, #0]
 8022978:	f7ff ffab 	bl	80228d2 <__hexdig_fun>
 802297c:	2800      	cmp	r0, #0
 802297e:	d1f8      	bne.n	8022972 <__gethex+0x76>
 8022980:	4994      	ldr	r1, [pc, #592]	; (8022bd4 <__gethex+0x2d8>)
 8022982:	2201      	movs	r2, #1
 8022984:	4628      	mov	r0, r5
 8022986:	f7fd f922 	bl	801fbce <strncmp>
 802298a:	b978      	cbnz	r0, 80229ac <__gethex+0xb0>
 802298c:	b946      	cbnz	r6, 80229a0 <__gethex+0xa4>
 802298e:	1c6e      	adds	r6, r5, #1
 8022990:	4632      	mov	r2, r6
 8022992:	4615      	mov	r5, r2
 8022994:	3201      	adds	r2, #1
 8022996:	7828      	ldrb	r0, [r5, #0]
 8022998:	f7ff ff9b 	bl	80228d2 <__hexdig_fun>
 802299c:	2800      	cmp	r0, #0
 802299e:	d1f8      	bne.n	8022992 <__gethex+0x96>
 80229a0:	1b73      	subs	r3, r6, r5
 80229a2:	009e      	lsls	r6, r3, #2
 80229a4:	e004      	b.n	80229b0 <__gethex+0xb4>
 80229a6:	2400      	movs	r4, #0
 80229a8:	4626      	mov	r6, r4
 80229aa:	e7e1      	b.n	8022970 <__gethex+0x74>
 80229ac:	2e00      	cmp	r6, #0
 80229ae:	d1f7      	bne.n	80229a0 <__gethex+0xa4>
 80229b0:	782b      	ldrb	r3, [r5, #0]
 80229b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80229b6:	2b50      	cmp	r3, #80	; 0x50
 80229b8:	d13d      	bne.n	8022a36 <__gethex+0x13a>
 80229ba:	786b      	ldrb	r3, [r5, #1]
 80229bc:	2b2b      	cmp	r3, #43	; 0x2b
 80229be:	d02f      	beq.n	8022a20 <__gethex+0x124>
 80229c0:	2b2d      	cmp	r3, #45	; 0x2d
 80229c2:	d031      	beq.n	8022a28 <__gethex+0x12c>
 80229c4:	1c69      	adds	r1, r5, #1
 80229c6:	f04f 0b00 	mov.w	fp, #0
 80229ca:	7808      	ldrb	r0, [r1, #0]
 80229cc:	f7ff ff81 	bl	80228d2 <__hexdig_fun>
 80229d0:	1e42      	subs	r2, r0, #1
 80229d2:	b2d2      	uxtb	r2, r2
 80229d4:	2a18      	cmp	r2, #24
 80229d6:	d82e      	bhi.n	8022a36 <__gethex+0x13a>
 80229d8:	f1a0 0210 	sub.w	r2, r0, #16
 80229dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80229e0:	f7ff ff77 	bl	80228d2 <__hexdig_fun>
 80229e4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80229e8:	fa5f fc8c 	uxtb.w	ip, ip
 80229ec:	f1bc 0f18 	cmp.w	ip, #24
 80229f0:	d91d      	bls.n	8022a2e <__gethex+0x132>
 80229f2:	f1bb 0f00 	cmp.w	fp, #0
 80229f6:	d000      	beq.n	80229fa <__gethex+0xfe>
 80229f8:	4252      	negs	r2, r2
 80229fa:	4416      	add	r6, r2
 80229fc:	f8ca 1000 	str.w	r1, [sl]
 8022a00:	b1dc      	cbz	r4, 8022a3a <__gethex+0x13e>
 8022a02:	9b01      	ldr	r3, [sp, #4]
 8022a04:	2b00      	cmp	r3, #0
 8022a06:	bf14      	ite	ne
 8022a08:	f04f 0800 	movne.w	r8, #0
 8022a0c:	f04f 0806 	moveq.w	r8, #6
 8022a10:	4640      	mov	r0, r8
 8022a12:	b005      	add	sp, #20
 8022a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a18:	4645      	mov	r5, r8
 8022a1a:	4626      	mov	r6, r4
 8022a1c:	2401      	movs	r4, #1
 8022a1e:	e7c7      	b.n	80229b0 <__gethex+0xb4>
 8022a20:	f04f 0b00 	mov.w	fp, #0
 8022a24:	1ca9      	adds	r1, r5, #2
 8022a26:	e7d0      	b.n	80229ca <__gethex+0xce>
 8022a28:	f04f 0b01 	mov.w	fp, #1
 8022a2c:	e7fa      	b.n	8022a24 <__gethex+0x128>
 8022a2e:	230a      	movs	r3, #10
 8022a30:	fb03 0002 	mla	r0, r3, r2, r0
 8022a34:	e7d0      	b.n	80229d8 <__gethex+0xdc>
 8022a36:	4629      	mov	r1, r5
 8022a38:	e7e0      	b.n	80229fc <__gethex+0x100>
 8022a3a:	eba5 0308 	sub.w	r3, r5, r8
 8022a3e:	3b01      	subs	r3, #1
 8022a40:	4621      	mov	r1, r4
 8022a42:	2b07      	cmp	r3, #7
 8022a44:	dc0a      	bgt.n	8022a5c <__gethex+0x160>
 8022a46:	4648      	mov	r0, r9
 8022a48:	f7fd fffa 	bl	8020a40 <_Balloc>
 8022a4c:	4604      	mov	r4, r0
 8022a4e:	b940      	cbnz	r0, 8022a62 <__gethex+0x166>
 8022a50:	4b61      	ldr	r3, [pc, #388]	; (8022bd8 <__gethex+0x2dc>)
 8022a52:	4602      	mov	r2, r0
 8022a54:	21e4      	movs	r1, #228	; 0xe4
 8022a56:	4861      	ldr	r0, [pc, #388]	; (8022bdc <__gethex+0x2e0>)
 8022a58:	f7fd f986 	bl	801fd68 <__assert_func>
 8022a5c:	3101      	adds	r1, #1
 8022a5e:	105b      	asrs	r3, r3, #1
 8022a60:	e7ef      	b.n	8022a42 <__gethex+0x146>
 8022a62:	f100 0a14 	add.w	sl, r0, #20
 8022a66:	2300      	movs	r3, #0
 8022a68:	495a      	ldr	r1, [pc, #360]	; (8022bd4 <__gethex+0x2d8>)
 8022a6a:	f8cd a004 	str.w	sl, [sp, #4]
 8022a6e:	469b      	mov	fp, r3
 8022a70:	45a8      	cmp	r8, r5
 8022a72:	d342      	bcc.n	8022afa <__gethex+0x1fe>
 8022a74:	9801      	ldr	r0, [sp, #4]
 8022a76:	f840 bb04 	str.w	fp, [r0], #4
 8022a7a:	eba0 000a 	sub.w	r0, r0, sl
 8022a7e:	1080      	asrs	r0, r0, #2
 8022a80:	6120      	str	r0, [r4, #16]
 8022a82:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8022a86:	4658      	mov	r0, fp
 8022a88:	f7fe f8cc 	bl	8020c24 <__hi0bits>
 8022a8c:	683d      	ldr	r5, [r7, #0]
 8022a8e:	eba8 0000 	sub.w	r0, r8, r0
 8022a92:	42a8      	cmp	r0, r5
 8022a94:	dd59      	ble.n	8022b4a <__gethex+0x24e>
 8022a96:	eba0 0805 	sub.w	r8, r0, r5
 8022a9a:	4641      	mov	r1, r8
 8022a9c:	4620      	mov	r0, r4
 8022a9e:	f7fe fc58 	bl	8021352 <__any_on>
 8022aa2:	4683      	mov	fp, r0
 8022aa4:	b1b8      	cbz	r0, 8022ad6 <__gethex+0x1da>
 8022aa6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8022aaa:	1159      	asrs	r1, r3, #5
 8022aac:	f003 021f 	and.w	r2, r3, #31
 8022ab0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8022ab4:	f04f 0b01 	mov.w	fp, #1
 8022ab8:	fa0b f202 	lsl.w	r2, fp, r2
 8022abc:	420a      	tst	r2, r1
 8022abe:	d00a      	beq.n	8022ad6 <__gethex+0x1da>
 8022ac0:	455b      	cmp	r3, fp
 8022ac2:	dd06      	ble.n	8022ad2 <__gethex+0x1d6>
 8022ac4:	f1a8 0102 	sub.w	r1, r8, #2
 8022ac8:	4620      	mov	r0, r4
 8022aca:	f7fe fc42 	bl	8021352 <__any_on>
 8022ace:	2800      	cmp	r0, #0
 8022ad0:	d138      	bne.n	8022b44 <__gethex+0x248>
 8022ad2:	f04f 0b02 	mov.w	fp, #2
 8022ad6:	4641      	mov	r1, r8
 8022ad8:	4620      	mov	r0, r4
 8022ada:	f7ff fea8 	bl	802282e <rshift>
 8022ade:	4446      	add	r6, r8
 8022ae0:	68bb      	ldr	r3, [r7, #8]
 8022ae2:	42b3      	cmp	r3, r6
 8022ae4:	da41      	bge.n	8022b6a <__gethex+0x26e>
 8022ae6:	4621      	mov	r1, r4
 8022ae8:	4648      	mov	r0, r9
 8022aea:	f7fd ffe9 	bl	8020ac0 <_Bfree>
 8022aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022af0:	2300      	movs	r3, #0
 8022af2:	6013      	str	r3, [r2, #0]
 8022af4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8022af8:	e78a      	b.n	8022a10 <__gethex+0x114>
 8022afa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8022afe:	2a2e      	cmp	r2, #46	; 0x2e
 8022b00:	d014      	beq.n	8022b2c <__gethex+0x230>
 8022b02:	2b20      	cmp	r3, #32
 8022b04:	d106      	bne.n	8022b14 <__gethex+0x218>
 8022b06:	9b01      	ldr	r3, [sp, #4]
 8022b08:	f843 bb04 	str.w	fp, [r3], #4
 8022b0c:	f04f 0b00 	mov.w	fp, #0
 8022b10:	9301      	str	r3, [sp, #4]
 8022b12:	465b      	mov	r3, fp
 8022b14:	7828      	ldrb	r0, [r5, #0]
 8022b16:	9303      	str	r3, [sp, #12]
 8022b18:	f7ff fedb 	bl	80228d2 <__hexdig_fun>
 8022b1c:	9b03      	ldr	r3, [sp, #12]
 8022b1e:	f000 000f 	and.w	r0, r0, #15
 8022b22:	4098      	lsls	r0, r3
 8022b24:	ea4b 0b00 	orr.w	fp, fp, r0
 8022b28:	3304      	adds	r3, #4
 8022b2a:	e7a1      	b.n	8022a70 <__gethex+0x174>
 8022b2c:	45a8      	cmp	r8, r5
 8022b2e:	d8e8      	bhi.n	8022b02 <__gethex+0x206>
 8022b30:	2201      	movs	r2, #1
 8022b32:	4628      	mov	r0, r5
 8022b34:	9303      	str	r3, [sp, #12]
 8022b36:	f7fd f84a 	bl	801fbce <strncmp>
 8022b3a:	4926      	ldr	r1, [pc, #152]	; (8022bd4 <__gethex+0x2d8>)
 8022b3c:	9b03      	ldr	r3, [sp, #12]
 8022b3e:	2800      	cmp	r0, #0
 8022b40:	d1df      	bne.n	8022b02 <__gethex+0x206>
 8022b42:	e795      	b.n	8022a70 <__gethex+0x174>
 8022b44:	f04f 0b03 	mov.w	fp, #3
 8022b48:	e7c5      	b.n	8022ad6 <__gethex+0x1da>
 8022b4a:	da0b      	bge.n	8022b64 <__gethex+0x268>
 8022b4c:	eba5 0800 	sub.w	r8, r5, r0
 8022b50:	4621      	mov	r1, r4
 8022b52:	4642      	mov	r2, r8
 8022b54:	4648      	mov	r0, r9
 8022b56:	f7fe f9cd 	bl	8020ef4 <__lshift>
 8022b5a:	eba6 0608 	sub.w	r6, r6, r8
 8022b5e:	4604      	mov	r4, r0
 8022b60:	f100 0a14 	add.w	sl, r0, #20
 8022b64:	f04f 0b00 	mov.w	fp, #0
 8022b68:	e7ba      	b.n	8022ae0 <__gethex+0x1e4>
 8022b6a:	687b      	ldr	r3, [r7, #4]
 8022b6c:	42b3      	cmp	r3, r6
 8022b6e:	dd73      	ble.n	8022c58 <__gethex+0x35c>
 8022b70:	1b9e      	subs	r6, r3, r6
 8022b72:	42b5      	cmp	r5, r6
 8022b74:	dc34      	bgt.n	8022be0 <__gethex+0x2e4>
 8022b76:	68fb      	ldr	r3, [r7, #12]
 8022b78:	2b02      	cmp	r3, #2
 8022b7a:	d023      	beq.n	8022bc4 <__gethex+0x2c8>
 8022b7c:	2b03      	cmp	r3, #3
 8022b7e:	d025      	beq.n	8022bcc <__gethex+0x2d0>
 8022b80:	2b01      	cmp	r3, #1
 8022b82:	d115      	bne.n	8022bb0 <__gethex+0x2b4>
 8022b84:	42b5      	cmp	r5, r6
 8022b86:	d113      	bne.n	8022bb0 <__gethex+0x2b4>
 8022b88:	2d01      	cmp	r5, #1
 8022b8a:	d10b      	bne.n	8022ba4 <__gethex+0x2a8>
 8022b8c:	9a02      	ldr	r2, [sp, #8]
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	6013      	str	r3, [r2, #0]
 8022b92:	2301      	movs	r3, #1
 8022b94:	6123      	str	r3, [r4, #16]
 8022b96:	f8ca 3000 	str.w	r3, [sl]
 8022b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022b9c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8022ba0:	601c      	str	r4, [r3, #0]
 8022ba2:	e735      	b.n	8022a10 <__gethex+0x114>
 8022ba4:	1e69      	subs	r1, r5, #1
 8022ba6:	4620      	mov	r0, r4
 8022ba8:	f7fe fbd3 	bl	8021352 <__any_on>
 8022bac:	2800      	cmp	r0, #0
 8022bae:	d1ed      	bne.n	8022b8c <__gethex+0x290>
 8022bb0:	4621      	mov	r1, r4
 8022bb2:	4648      	mov	r0, r9
 8022bb4:	f7fd ff84 	bl	8020ac0 <_Bfree>
 8022bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022bba:	2300      	movs	r3, #0
 8022bbc:	6013      	str	r3, [r2, #0]
 8022bbe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8022bc2:	e725      	b.n	8022a10 <__gethex+0x114>
 8022bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d1f2      	bne.n	8022bb0 <__gethex+0x2b4>
 8022bca:	e7df      	b.n	8022b8c <__gethex+0x290>
 8022bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	d1dc      	bne.n	8022b8c <__gethex+0x290>
 8022bd2:	e7ed      	b.n	8022bb0 <__gethex+0x2b4>
 8022bd4:	08024c5c 	.word	0x08024c5c
 8022bd8:	08024af6 	.word	0x08024af6
 8022bdc:	08024cc9 	.word	0x08024cc9
 8022be0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8022be4:	f1bb 0f00 	cmp.w	fp, #0
 8022be8:	d133      	bne.n	8022c52 <__gethex+0x356>
 8022bea:	f1b8 0f00 	cmp.w	r8, #0
 8022bee:	d004      	beq.n	8022bfa <__gethex+0x2fe>
 8022bf0:	4641      	mov	r1, r8
 8022bf2:	4620      	mov	r0, r4
 8022bf4:	f7fe fbad 	bl	8021352 <__any_on>
 8022bf8:	4683      	mov	fp, r0
 8022bfa:	ea4f 1268 	mov.w	r2, r8, asr #5
 8022bfe:	2301      	movs	r3, #1
 8022c00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8022c04:	f008 081f 	and.w	r8, r8, #31
 8022c08:	fa03 f308 	lsl.w	r3, r3, r8
 8022c0c:	4213      	tst	r3, r2
 8022c0e:	4631      	mov	r1, r6
 8022c10:	4620      	mov	r0, r4
 8022c12:	bf18      	it	ne
 8022c14:	f04b 0b02 	orrne.w	fp, fp, #2
 8022c18:	1bad      	subs	r5, r5, r6
 8022c1a:	f7ff fe08 	bl	802282e <rshift>
 8022c1e:	687e      	ldr	r6, [r7, #4]
 8022c20:	f04f 0802 	mov.w	r8, #2
 8022c24:	f1bb 0f00 	cmp.w	fp, #0
 8022c28:	d04a      	beq.n	8022cc0 <__gethex+0x3c4>
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	2b02      	cmp	r3, #2
 8022c2e:	d016      	beq.n	8022c5e <__gethex+0x362>
 8022c30:	2b03      	cmp	r3, #3
 8022c32:	d018      	beq.n	8022c66 <__gethex+0x36a>
 8022c34:	2b01      	cmp	r3, #1
 8022c36:	d109      	bne.n	8022c4c <__gethex+0x350>
 8022c38:	f01b 0f02 	tst.w	fp, #2
 8022c3c:	d006      	beq.n	8022c4c <__gethex+0x350>
 8022c3e:	f8da 3000 	ldr.w	r3, [sl]
 8022c42:	ea4b 0b03 	orr.w	fp, fp, r3
 8022c46:	f01b 0f01 	tst.w	fp, #1
 8022c4a:	d10f      	bne.n	8022c6c <__gethex+0x370>
 8022c4c:	f048 0810 	orr.w	r8, r8, #16
 8022c50:	e036      	b.n	8022cc0 <__gethex+0x3c4>
 8022c52:	f04f 0b01 	mov.w	fp, #1
 8022c56:	e7d0      	b.n	8022bfa <__gethex+0x2fe>
 8022c58:	f04f 0801 	mov.w	r8, #1
 8022c5c:	e7e2      	b.n	8022c24 <__gethex+0x328>
 8022c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c60:	f1c3 0301 	rsb	r3, r3, #1
 8022c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d0ef      	beq.n	8022c4c <__gethex+0x350>
 8022c6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8022c70:	f104 0214 	add.w	r2, r4, #20
 8022c74:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8022c78:	9301      	str	r3, [sp, #4]
 8022c7a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8022c7e:	2300      	movs	r3, #0
 8022c80:	4694      	mov	ip, r2
 8022c82:	f852 1b04 	ldr.w	r1, [r2], #4
 8022c86:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8022c8a:	d01e      	beq.n	8022cca <__gethex+0x3ce>
 8022c8c:	3101      	adds	r1, #1
 8022c8e:	f8cc 1000 	str.w	r1, [ip]
 8022c92:	f1b8 0f02 	cmp.w	r8, #2
 8022c96:	f104 0214 	add.w	r2, r4, #20
 8022c9a:	d13d      	bne.n	8022d18 <__gethex+0x41c>
 8022c9c:	683b      	ldr	r3, [r7, #0]
 8022c9e:	3b01      	subs	r3, #1
 8022ca0:	42ab      	cmp	r3, r5
 8022ca2:	d10b      	bne.n	8022cbc <__gethex+0x3c0>
 8022ca4:	1169      	asrs	r1, r5, #5
 8022ca6:	2301      	movs	r3, #1
 8022ca8:	f005 051f 	and.w	r5, r5, #31
 8022cac:	fa03 f505 	lsl.w	r5, r3, r5
 8022cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022cb4:	421d      	tst	r5, r3
 8022cb6:	bf18      	it	ne
 8022cb8:	f04f 0801 	movne.w	r8, #1
 8022cbc:	f048 0820 	orr.w	r8, r8, #32
 8022cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022cc2:	601c      	str	r4, [r3, #0]
 8022cc4:	9b02      	ldr	r3, [sp, #8]
 8022cc6:	601e      	str	r6, [r3, #0]
 8022cc8:	e6a2      	b.n	8022a10 <__gethex+0x114>
 8022cca:	4290      	cmp	r0, r2
 8022ccc:	f842 3c04 	str.w	r3, [r2, #-4]
 8022cd0:	d8d6      	bhi.n	8022c80 <__gethex+0x384>
 8022cd2:	68a2      	ldr	r2, [r4, #8]
 8022cd4:	4593      	cmp	fp, r2
 8022cd6:	db17      	blt.n	8022d08 <__gethex+0x40c>
 8022cd8:	6861      	ldr	r1, [r4, #4]
 8022cda:	4648      	mov	r0, r9
 8022cdc:	3101      	adds	r1, #1
 8022cde:	f7fd feaf 	bl	8020a40 <_Balloc>
 8022ce2:	4682      	mov	sl, r0
 8022ce4:	b918      	cbnz	r0, 8022cee <__gethex+0x3f2>
 8022ce6:	4b1b      	ldr	r3, [pc, #108]	; (8022d54 <__gethex+0x458>)
 8022ce8:	4602      	mov	r2, r0
 8022cea:	2184      	movs	r1, #132	; 0x84
 8022cec:	e6b3      	b.n	8022a56 <__gethex+0x15a>
 8022cee:	6922      	ldr	r2, [r4, #16]
 8022cf0:	3202      	adds	r2, #2
 8022cf2:	f104 010c 	add.w	r1, r4, #12
 8022cf6:	0092      	lsls	r2, r2, #2
 8022cf8:	300c      	adds	r0, #12
 8022cfa:	f7fd f820 	bl	801fd3e <memcpy>
 8022cfe:	4621      	mov	r1, r4
 8022d00:	4648      	mov	r0, r9
 8022d02:	f7fd fedd 	bl	8020ac0 <_Bfree>
 8022d06:	4654      	mov	r4, sl
 8022d08:	6922      	ldr	r2, [r4, #16]
 8022d0a:	1c51      	adds	r1, r2, #1
 8022d0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8022d10:	6121      	str	r1, [r4, #16]
 8022d12:	2101      	movs	r1, #1
 8022d14:	6151      	str	r1, [r2, #20]
 8022d16:	e7bc      	b.n	8022c92 <__gethex+0x396>
 8022d18:	6921      	ldr	r1, [r4, #16]
 8022d1a:	4559      	cmp	r1, fp
 8022d1c:	dd0b      	ble.n	8022d36 <__gethex+0x43a>
 8022d1e:	2101      	movs	r1, #1
 8022d20:	4620      	mov	r0, r4
 8022d22:	f7ff fd84 	bl	802282e <rshift>
 8022d26:	68bb      	ldr	r3, [r7, #8]
 8022d28:	3601      	adds	r6, #1
 8022d2a:	42b3      	cmp	r3, r6
 8022d2c:	f6ff aedb 	blt.w	8022ae6 <__gethex+0x1ea>
 8022d30:	f04f 0801 	mov.w	r8, #1
 8022d34:	e7c2      	b.n	8022cbc <__gethex+0x3c0>
 8022d36:	f015 051f 	ands.w	r5, r5, #31
 8022d3a:	d0f9      	beq.n	8022d30 <__gethex+0x434>
 8022d3c:	9b01      	ldr	r3, [sp, #4]
 8022d3e:	441a      	add	r2, r3
 8022d40:	f1c5 0520 	rsb	r5, r5, #32
 8022d44:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8022d48:	f7fd ff6c 	bl	8020c24 <__hi0bits>
 8022d4c:	42a8      	cmp	r0, r5
 8022d4e:	dbe6      	blt.n	8022d1e <__gethex+0x422>
 8022d50:	e7ee      	b.n	8022d30 <__gethex+0x434>
 8022d52:	bf00      	nop
 8022d54:	08024af6 	.word	0x08024af6

08022d58 <L_shift>:
 8022d58:	f1c2 0208 	rsb	r2, r2, #8
 8022d5c:	0092      	lsls	r2, r2, #2
 8022d5e:	b570      	push	{r4, r5, r6, lr}
 8022d60:	f1c2 0620 	rsb	r6, r2, #32
 8022d64:	6843      	ldr	r3, [r0, #4]
 8022d66:	6804      	ldr	r4, [r0, #0]
 8022d68:	fa03 f506 	lsl.w	r5, r3, r6
 8022d6c:	432c      	orrs	r4, r5
 8022d6e:	40d3      	lsrs	r3, r2
 8022d70:	6004      	str	r4, [r0, #0]
 8022d72:	f840 3f04 	str.w	r3, [r0, #4]!
 8022d76:	4288      	cmp	r0, r1
 8022d78:	d3f4      	bcc.n	8022d64 <L_shift+0xc>
 8022d7a:	bd70      	pop	{r4, r5, r6, pc}

08022d7c <__match>:
 8022d7c:	b530      	push	{r4, r5, lr}
 8022d7e:	6803      	ldr	r3, [r0, #0]
 8022d80:	3301      	adds	r3, #1
 8022d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022d86:	b914      	cbnz	r4, 8022d8e <__match+0x12>
 8022d88:	6003      	str	r3, [r0, #0]
 8022d8a:	2001      	movs	r0, #1
 8022d8c:	bd30      	pop	{r4, r5, pc}
 8022d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8022d96:	2d19      	cmp	r5, #25
 8022d98:	bf98      	it	ls
 8022d9a:	3220      	addls	r2, #32
 8022d9c:	42a2      	cmp	r2, r4
 8022d9e:	d0f0      	beq.n	8022d82 <__match+0x6>
 8022da0:	2000      	movs	r0, #0
 8022da2:	e7f3      	b.n	8022d8c <__match+0x10>

08022da4 <__hexnan>:
 8022da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022da8:	680b      	ldr	r3, [r1, #0]
 8022daa:	6801      	ldr	r1, [r0, #0]
 8022dac:	115e      	asrs	r6, r3, #5
 8022dae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8022db2:	f013 031f 	ands.w	r3, r3, #31
 8022db6:	b087      	sub	sp, #28
 8022db8:	bf18      	it	ne
 8022dba:	3604      	addne	r6, #4
 8022dbc:	2500      	movs	r5, #0
 8022dbe:	1f37      	subs	r7, r6, #4
 8022dc0:	4682      	mov	sl, r0
 8022dc2:	4690      	mov	r8, r2
 8022dc4:	9301      	str	r3, [sp, #4]
 8022dc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8022dca:	46b9      	mov	r9, r7
 8022dcc:	463c      	mov	r4, r7
 8022dce:	9502      	str	r5, [sp, #8]
 8022dd0:	46ab      	mov	fp, r5
 8022dd2:	784a      	ldrb	r2, [r1, #1]
 8022dd4:	1c4b      	adds	r3, r1, #1
 8022dd6:	9303      	str	r3, [sp, #12]
 8022dd8:	b342      	cbz	r2, 8022e2c <__hexnan+0x88>
 8022dda:	4610      	mov	r0, r2
 8022ddc:	9105      	str	r1, [sp, #20]
 8022dde:	9204      	str	r2, [sp, #16]
 8022de0:	f7ff fd77 	bl	80228d2 <__hexdig_fun>
 8022de4:	2800      	cmp	r0, #0
 8022de6:	d14f      	bne.n	8022e88 <__hexnan+0xe4>
 8022de8:	9a04      	ldr	r2, [sp, #16]
 8022dea:	9905      	ldr	r1, [sp, #20]
 8022dec:	2a20      	cmp	r2, #32
 8022dee:	d818      	bhi.n	8022e22 <__hexnan+0x7e>
 8022df0:	9b02      	ldr	r3, [sp, #8]
 8022df2:	459b      	cmp	fp, r3
 8022df4:	dd13      	ble.n	8022e1e <__hexnan+0x7a>
 8022df6:	454c      	cmp	r4, r9
 8022df8:	d206      	bcs.n	8022e08 <__hexnan+0x64>
 8022dfa:	2d07      	cmp	r5, #7
 8022dfc:	dc04      	bgt.n	8022e08 <__hexnan+0x64>
 8022dfe:	462a      	mov	r2, r5
 8022e00:	4649      	mov	r1, r9
 8022e02:	4620      	mov	r0, r4
 8022e04:	f7ff ffa8 	bl	8022d58 <L_shift>
 8022e08:	4544      	cmp	r4, r8
 8022e0a:	d950      	bls.n	8022eae <__hexnan+0x10a>
 8022e0c:	2300      	movs	r3, #0
 8022e0e:	f1a4 0904 	sub.w	r9, r4, #4
 8022e12:	f844 3c04 	str.w	r3, [r4, #-4]
 8022e16:	f8cd b008 	str.w	fp, [sp, #8]
 8022e1a:	464c      	mov	r4, r9
 8022e1c:	461d      	mov	r5, r3
 8022e1e:	9903      	ldr	r1, [sp, #12]
 8022e20:	e7d7      	b.n	8022dd2 <__hexnan+0x2e>
 8022e22:	2a29      	cmp	r2, #41	; 0x29
 8022e24:	d155      	bne.n	8022ed2 <__hexnan+0x12e>
 8022e26:	3102      	adds	r1, #2
 8022e28:	f8ca 1000 	str.w	r1, [sl]
 8022e2c:	f1bb 0f00 	cmp.w	fp, #0
 8022e30:	d04f      	beq.n	8022ed2 <__hexnan+0x12e>
 8022e32:	454c      	cmp	r4, r9
 8022e34:	d206      	bcs.n	8022e44 <__hexnan+0xa0>
 8022e36:	2d07      	cmp	r5, #7
 8022e38:	dc04      	bgt.n	8022e44 <__hexnan+0xa0>
 8022e3a:	462a      	mov	r2, r5
 8022e3c:	4649      	mov	r1, r9
 8022e3e:	4620      	mov	r0, r4
 8022e40:	f7ff ff8a 	bl	8022d58 <L_shift>
 8022e44:	4544      	cmp	r4, r8
 8022e46:	d934      	bls.n	8022eb2 <__hexnan+0x10e>
 8022e48:	f1a8 0204 	sub.w	r2, r8, #4
 8022e4c:	4623      	mov	r3, r4
 8022e4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8022e52:	f842 1f04 	str.w	r1, [r2, #4]!
 8022e56:	429f      	cmp	r7, r3
 8022e58:	d2f9      	bcs.n	8022e4e <__hexnan+0xaa>
 8022e5a:	1b3b      	subs	r3, r7, r4
 8022e5c:	f023 0303 	bic.w	r3, r3, #3
 8022e60:	3304      	adds	r3, #4
 8022e62:	3e03      	subs	r6, #3
 8022e64:	3401      	adds	r4, #1
 8022e66:	42a6      	cmp	r6, r4
 8022e68:	bf38      	it	cc
 8022e6a:	2304      	movcc	r3, #4
 8022e6c:	4443      	add	r3, r8
 8022e6e:	2200      	movs	r2, #0
 8022e70:	f843 2b04 	str.w	r2, [r3], #4
 8022e74:	429f      	cmp	r7, r3
 8022e76:	d2fb      	bcs.n	8022e70 <__hexnan+0xcc>
 8022e78:	683b      	ldr	r3, [r7, #0]
 8022e7a:	b91b      	cbnz	r3, 8022e84 <__hexnan+0xe0>
 8022e7c:	4547      	cmp	r7, r8
 8022e7e:	d126      	bne.n	8022ece <__hexnan+0x12a>
 8022e80:	2301      	movs	r3, #1
 8022e82:	603b      	str	r3, [r7, #0]
 8022e84:	2005      	movs	r0, #5
 8022e86:	e025      	b.n	8022ed4 <__hexnan+0x130>
 8022e88:	3501      	adds	r5, #1
 8022e8a:	2d08      	cmp	r5, #8
 8022e8c:	f10b 0b01 	add.w	fp, fp, #1
 8022e90:	dd06      	ble.n	8022ea0 <__hexnan+0xfc>
 8022e92:	4544      	cmp	r4, r8
 8022e94:	d9c3      	bls.n	8022e1e <__hexnan+0x7a>
 8022e96:	2300      	movs	r3, #0
 8022e98:	f844 3c04 	str.w	r3, [r4, #-4]
 8022e9c:	2501      	movs	r5, #1
 8022e9e:	3c04      	subs	r4, #4
 8022ea0:	6822      	ldr	r2, [r4, #0]
 8022ea2:	f000 000f 	and.w	r0, r0, #15
 8022ea6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8022eaa:	6020      	str	r0, [r4, #0]
 8022eac:	e7b7      	b.n	8022e1e <__hexnan+0x7a>
 8022eae:	2508      	movs	r5, #8
 8022eb0:	e7b5      	b.n	8022e1e <__hexnan+0x7a>
 8022eb2:	9b01      	ldr	r3, [sp, #4]
 8022eb4:	2b00      	cmp	r3, #0
 8022eb6:	d0df      	beq.n	8022e78 <__hexnan+0xd4>
 8022eb8:	f1c3 0320 	rsb	r3, r3, #32
 8022ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022ec0:	40da      	lsrs	r2, r3
 8022ec2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8022ec6:	4013      	ands	r3, r2
 8022ec8:	f846 3c04 	str.w	r3, [r6, #-4]
 8022ecc:	e7d4      	b.n	8022e78 <__hexnan+0xd4>
 8022ece:	3f04      	subs	r7, #4
 8022ed0:	e7d2      	b.n	8022e78 <__hexnan+0xd4>
 8022ed2:	2004      	movs	r0, #4
 8022ed4:	b007      	add	sp, #28
 8022ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022eda <__ascii_mbtowc>:
 8022eda:	b082      	sub	sp, #8
 8022edc:	b901      	cbnz	r1, 8022ee0 <__ascii_mbtowc+0x6>
 8022ede:	a901      	add	r1, sp, #4
 8022ee0:	b142      	cbz	r2, 8022ef4 <__ascii_mbtowc+0x1a>
 8022ee2:	b14b      	cbz	r3, 8022ef8 <__ascii_mbtowc+0x1e>
 8022ee4:	7813      	ldrb	r3, [r2, #0]
 8022ee6:	600b      	str	r3, [r1, #0]
 8022ee8:	7812      	ldrb	r2, [r2, #0]
 8022eea:	1e10      	subs	r0, r2, #0
 8022eec:	bf18      	it	ne
 8022eee:	2001      	movne	r0, #1
 8022ef0:	b002      	add	sp, #8
 8022ef2:	4770      	bx	lr
 8022ef4:	4610      	mov	r0, r2
 8022ef6:	e7fb      	b.n	8022ef0 <__ascii_mbtowc+0x16>
 8022ef8:	f06f 0001 	mvn.w	r0, #1
 8022efc:	e7f8      	b.n	8022ef0 <__ascii_mbtowc+0x16>

08022efe <__ascii_wctomb>:
 8022efe:	b149      	cbz	r1, 8022f14 <__ascii_wctomb+0x16>
 8022f00:	2aff      	cmp	r2, #255	; 0xff
 8022f02:	bf85      	ittet	hi
 8022f04:	238a      	movhi	r3, #138	; 0x8a
 8022f06:	6003      	strhi	r3, [r0, #0]
 8022f08:	700a      	strbls	r2, [r1, #0]
 8022f0a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8022f0e:	bf98      	it	ls
 8022f10:	2001      	movls	r0, #1
 8022f12:	4770      	bx	lr
 8022f14:	4608      	mov	r0, r1
 8022f16:	4770      	bx	lr

08022f18 <_raise_r>:
 8022f18:	291f      	cmp	r1, #31
 8022f1a:	b538      	push	{r3, r4, r5, lr}
 8022f1c:	4604      	mov	r4, r0
 8022f1e:	460d      	mov	r5, r1
 8022f20:	d904      	bls.n	8022f2c <_raise_r+0x14>
 8022f22:	2316      	movs	r3, #22
 8022f24:	6003      	str	r3, [r0, #0]
 8022f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022f2a:	bd38      	pop	{r3, r4, r5, pc}
 8022f2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8022f2e:	b112      	cbz	r2, 8022f36 <_raise_r+0x1e>
 8022f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022f34:	b94b      	cbnz	r3, 8022f4a <_raise_r+0x32>
 8022f36:	4620      	mov	r0, r4
 8022f38:	f000 f830 	bl	8022f9c <_getpid_r>
 8022f3c:	462a      	mov	r2, r5
 8022f3e:	4601      	mov	r1, r0
 8022f40:	4620      	mov	r0, r4
 8022f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f46:	f000 b817 	b.w	8022f78 <_kill_r>
 8022f4a:	2b01      	cmp	r3, #1
 8022f4c:	d00a      	beq.n	8022f64 <_raise_r+0x4c>
 8022f4e:	1c59      	adds	r1, r3, #1
 8022f50:	d103      	bne.n	8022f5a <_raise_r+0x42>
 8022f52:	2316      	movs	r3, #22
 8022f54:	6003      	str	r3, [r0, #0]
 8022f56:	2001      	movs	r0, #1
 8022f58:	e7e7      	b.n	8022f2a <_raise_r+0x12>
 8022f5a:	2400      	movs	r4, #0
 8022f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022f60:	4628      	mov	r0, r5
 8022f62:	4798      	blx	r3
 8022f64:	2000      	movs	r0, #0
 8022f66:	e7e0      	b.n	8022f2a <_raise_r+0x12>

08022f68 <raise>:
 8022f68:	4b02      	ldr	r3, [pc, #8]	; (8022f74 <raise+0xc>)
 8022f6a:	4601      	mov	r1, r0
 8022f6c:	6818      	ldr	r0, [r3, #0]
 8022f6e:	f7ff bfd3 	b.w	8022f18 <_raise_r>
 8022f72:	bf00      	nop
 8022f74:	200009a0 	.word	0x200009a0

08022f78 <_kill_r>:
 8022f78:	b538      	push	{r3, r4, r5, lr}
 8022f7a:	4d07      	ldr	r5, [pc, #28]	; (8022f98 <_kill_r+0x20>)
 8022f7c:	2300      	movs	r3, #0
 8022f7e:	4604      	mov	r4, r0
 8022f80:	4608      	mov	r0, r1
 8022f82:	4611      	mov	r1, r2
 8022f84:	602b      	str	r3, [r5, #0]
 8022f86:	f7df fe17 	bl	8002bb8 <_kill>
 8022f8a:	1c43      	adds	r3, r0, #1
 8022f8c:	d102      	bne.n	8022f94 <_kill_r+0x1c>
 8022f8e:	682b      	ldr	r3, [r5, #0]
 8022f90:	b103      	cbz	r3, 8022f94 <_kill_r+0x1c>
 8022f92:	6023      	str	r3, [r4, #0]
 8022f94:	bd38      	pop	{r3, r4, r5, pc}
 8022f96:	bf00      	nop
 8022f98:	20017018 	.word	0x20017018

08022f9c <_getpid_r>:
 8022f9c:	f7df be04 	b.w	8002ba8 <_getpid>

08022fa0 <_init>:
 8022fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fa2:	bf00      	nop
 8022fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022fa6:	bc08      	pop	{r3}
 8022fa8:	469e      	mov	lr, r3
 8022faa:	4770      	bx	lr

08022fac <_fini>:
 8022fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fae:	bf00      	nop
 8022fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022fb2:	bc08      	pop	{r3}
 8022fb4:	469e      	mov	lr, r3
 8022fb6:	4770      	bx	lr
