
harurobo2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022f78  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d74  08023178  08023178  00033178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024eec  08024eec  00040b10  2**0
                  CONTENTS
  4 .ARM          00000008  08024eec  08024eec  00034eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024ef4  08024ef4  00040b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08024ef4  08024ef4  00034ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024f0c  08024f0c  00034f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b10  20000000  08024f10  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016560  20000b10  08025a20  00040b10  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20017070  08025a20  00047070  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040b10  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040b3e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f46b  00000000  00000000  00040bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c25  00000000  00000000  0007001f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002270  00000000  00000000  00076c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a68  00000000  00000000  00078eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322fa  00000000  00000000  0007a920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002da1e  00000000  00000000  000acc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119cd4  00000000  00000000  000da638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a574  00000000  00000000  001f430c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001fe880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b10 	.word	0x20000b10
 800021c:	00000000 	.word	0x00000000
 8000220:	08023160 	.word	0x08023160

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b14 	.word	0x20000b14
 800023c:	08023160 	.word	0x08023160

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_frsub>:
 8000688:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800068c:	e002      	b.n	8000694 <__addsf3>
 800068e:	bf00      	nop

08000690 <__aeabi_fsub>:
 8000690:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000694 <__addsf3>:
 8000694:	0042      	lsls	r2, r0, #1
 8000696:	bf1f      	itttt	ne
 8000698:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800069c:	ea92 0f03 	teqne	r2, r3
 80006a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006a8:	d06a      	beq.n	8000780 <__addsf3+0xec>
 80006aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006b2:	bfc1      	itttt	gt
 80006b4:	18d2      	addgt	r2, r2, r3
 80006b6:	4041      	eorgt	r1, r0
 80006b8:	4048      	eorgt	r0, r1
 80006ba:	4041      	eorgt	r1, r0
 80006bc:	bfb8      	it	lt
 80006be:	425b      	neglt	r3, r3
 80006c0:	2b19      	cmp	r3, #25
 80006c2:	bf88      	it	hi
 80006c4:	4770      	bxhi	lr
 80006c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4240      	negne	r0, r0
 80006d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006e2:	bf18      	it	ne
 80006e4:	4249      	negne	r1, r1
 80006e6:	ea92 0f03 	teq	r2, r3
 80006ea:	d03f      	beq.n	800076c <__addsf3+0xd8>
 80006ec:	f1a2 0201 	sub.w	r2, r2, #1
 80006f0:	fa41 fc03 	asr.w	ip, r1, r3
 80006f4:	eb10 000c 	adds.w	r0, r0, ip
 80006f8:	f1c3 0320 	rsb	r3, r3, #32
 80006fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000700:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000704:	d502      	bpl.n	800070c <__addsf3+0x78>
 8000706:	4249      	negs	r1, r1
 8000708:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800070c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000710:	d313      	bcc.n	800073a <__addsf3+0xa6>
 8000712:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000716:	d306      	bcc.n	8000726 <__addsf3+0x92>
 8000718:	0840      	lsrs	r0, r0, #1
 800071a:	ea4f 0131 	mov.w	r1, r1, rrx
 800071e:	f102 0201 	add.w	r2, r2, #1
 8000722:	2afe      	cmp	r2, #254	; 0xfe
 8000724:	d251      	bcs.n	80007ca <__addsf3+0x136>
 8000726:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800072a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800072e:	bf08      	it	eq
 8000730:	f020 0001 	biceq.w	r0, r0, #1
 8000734:	ea40 0003 	orr.w	r0, r0, r3
 8000738:	4770      	bx	lr
 800073a:	0049      	lsls	r1, r1, #1
 800073c:	eb40 0000 	adc.w	r0, r0, r0
 8000740:	3a01      	subs	r2, #1
 8000742:	bf28      	it	cs
 8000744:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000748:	d2ed      	bcs.n	8000726 <__addsf3+0x92>
 800074a:	fab0 fc80 	clz	ip, r0
 800074e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000752:	ebb2 020c 	subs.w	r2, r2, ip
 8000756:	fa00 f00c 	lsl.w	r0, r0, ip
 800075a:	bfaa      	itet	ge
 800075c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000760:	4252      	neglt	r2, r2
 8000762:	4318      	orrge	r0, r3
 8000764:	bfbc      	itt	lt
 8000766:	40d0      	lsrlt	r0, r2
 8000768:	4318      	orrlt	r0, r3
 800076a:	4770      	bx	lr
 800076c:	f092 0f00 	teq	r2, #0
 8000770:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000774:	bf06      	itte	eq
 8000776:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800077a:	3201      	addeq	r2, #1
 800077c:	3b01      	subne	r3, #1
 800077e:	e7b5      	b.n	80006ec <__addsf3+0x58>
 8000780:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000784:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000788:	bf18      	it	ne
 800078a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078e:	d021      	beq.n	80007d4 <__addsf3+0x140>
 8000790:	ea92 0f03 	teq	r2, r3
 8000794:	d004      	beq.n	80007a0 <__addsf3+0x10c>
 8000796:	f092 0f00 	teq	r2, #0
 800079a:	bf08      	it	eq
 800079c:	4608      	moveq	r0, r1
 800079e:	4770      	bx	lr
 80007a0:	ea90 0f01 	teq	r0, r1
 80007a4:	bf1c      	itt	ne
 80007a6:	2000      	movne	r0, #0
 80007a8:	4770      	bxne	lr
 80007aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007ae:	d104      	bne.n	80007ba <__addsf3+0x126>
 80007b0:	0040      	lsls	r0, r0, #1
 80007b2:	bf28      	it	cs
 80007b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007b8:	4770      	bx	lr
 80007ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007be:	bf3c      	itt	cc
 80007c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007c4:	4770      	bxcc	lr
 80007c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d2:	4770      	bx	lr
 80007d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007d8:	bf16      	itet	ne
 80007da:	4608      	movne	r0, r1
 80007dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007e0:	4601      	movne	r1, r0
 80007e2:	0242      	lsls	r2, r0, #9
 80007e4:	bf06      	itte	eq
 80007e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ea:	ea90 0f01 	teqeq	r0, r1
 80007ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_ui2f>:
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	e004      	b.n	8000804 <__aeabi_i2f+0x8>
 80007fa:	bf00      	nop

080007fc <__aeabi_i2f>:
 80007fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000800:	bf48      	it	mi
 8000802:	4240      	negmi	r0, r0
 8000804:	ea5f 0c00 	movs.w	ip, r0
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000810:	4601      	mov	r1, r0
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	e01c      	b.n	8000852 <__aeabi_l2f+0x2a>

08000818 <__aeabi_ul2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	e00a      	b.n	800083c <__aeabi_l2f+0x14>
 8000826:	bf00      	nop

08000828 <__aeabi_l2f>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000834:	d502      	bpl.n	800083c <__aeabi_l2f+0x14>
 8000836:	4240      	negs	r0, r0
 8000838:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083c:	ea5f 0c01 	movs.w	ip, r1
 8000840:	bf02      	ittt	eq
 8000842:	4684      	moveq	ip, r0
 8000844:	4601      	moveq	r1, r0
 8000846:	2000      	moveq	r0, #0
 8000848:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800084c:	bf08      	it	eq
 800084e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000852:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000856:	fabc f28c 	clz	r2, ip
 800085a:	3a08      	subs	r2, #8
 800085c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000860:	db10      	blt.n	8000884 <__aeabi_l2f+0x5c>
 8000862:	fa01 fc02 	lsl.w	ip, r1, r2
 8000866:	4463      	add	r3, ip
 8000868:	fa00 fc02 	lsl.w	ip, r0, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000874:	fa20 f202 	lsr.w	r2, r0, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	f020 0001 	biceq.w	r0, r0, #1
 8000882:	4770      	bx	lr
 8000884:	f102 0220 	add.w	r2, r2, #32
 8000888:	fa01 fc02 	lsl.w	ip, r1, r2
 800088c:	f1c2 0220 	rsb	r2, r2, #32
 8000890:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000894:	fa21 f202 	lsr.w	r2, r1, r2
 8000898:	eb43 0002 	adc.w	r0, r3, r2
 800089c:	bf08      	it	eq
 800089e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008a2:	4770      	bx	lr

080008a4 <__aeabi_ldivmod>:
 80008a4:	b97b      	cbnz	r3, 80008c6 <__aeabi_ldivmod+0x22>
 80008a6:	b972      	cbnz	r2, 80008c6 <__aeabi_ldivmod+0x22>
 80008a8:	2900      	cmp	r1, #0
 80008aa:	bfbe      	ittt	lt
 80008ac:	2000      	movlt	r0, #0
 80008ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80008b2:	e006      	blt.n	80008c2 <__aeabi_ldivmod+0x1e>
 80008b4:	bf08      	it	eq
 80008b6:	2800      	cmpeq	r0, #0
 80008b8:	bf1c      	itt	ne
 80008ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008be:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008c2:	f000 b9f5 	b.w	8000cb0 <__aeabi_idiv0>
 80008c6:	f1ad 0c08 	sub.w	ip, sp, #8
 80008ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ce:	2900      	cmp	r1, #0
 80008d0:	db09      	blt.n	80008e6 <__aeabi_ldivmod+0x42>
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db1a      	blt.n	800090c <__aeabi_ldivmod+0x68>
 80008d6:	f000 f887 	bl	80009e8 <__udivmoddi4>
 80008da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e2:	b004      	add	sp, #16
 80008e4:	4770      	bx	lr
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db1b      	blt.n	8000928 <__aeabi_ldivmod+0x84>
 80008f0:	f000 f87a 	bl	80009e8 <__udivmoddi4>
 80008f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008fc:	b004      	add	sp, #16
 80008fe:	4240      	negs	r0, r0
 8000900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000904:	4252      	negs	r2, r2
 8000906:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800090a:	4770      	bx	lr
 800090c:	4252      	negs	r2, r2
 800090e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000912:	f000 f869 	bl	80009e8 <__udivmoddi4>
 8000916:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800091e:	b004      	add	sp, #16
 8000920:	4240      	negs	r0, r0
 8000922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000926:	4770      	bx	lr
 8000928:	4252      	negs	r2, r2
 800092a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092e:	f000 f85b 	bl	80009e8 <__udivmoddi4>
 8000932:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800093a:	b004      	add	sp, #16
 800093c:	4252      	negs	r2, r2
 800093e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000954:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000958:	f000 b9aa 	b.w	8000cb0 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f840 	bl	80009e8 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__aeabi_d2lz>:
 8000974:	b508      	push	{r3, lr}
 8000976:	4602      	mov	r2, r0
 8000978:	460b      	mov	r3, r1
 800097a:	ec43 2b17 	vmov	d7, r2, r3
 800097e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	d403      	bmi.n	8000990 <__aeabi_d2lz+0x1c>
 8000988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800098c:	f000 b80c 	b.w	80009a8 <__aeabi_d2ulz>
 8000990:	eeb1 7b47 	vneg.f64	d7, d7
 8000994:	ec51 0b17 	vmov	r0, r1, d7
 8000998:	f000 f806 	bl	80009a8 <__aeabi_d2ulz>
 800099c:	4240      	negs	r0, r0
 800099e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009a2:	bd08      	pop	{r3, pc}
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <__aeabi_d2ulz>:
 80009a8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80009d8 <__aeabi_d2ulz+0x30>
 80009ac:	ec41 0b17 	vmov	d7, r0, r1
 80009b0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80009e0 <__aeabi_d2ulz+0x38>
 80009b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009b8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80009bc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009c0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009c8:	ee16 1a10 	vmov	r1, s12
 80009cc:	ee17 0a90 	vmov	r0, s15
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	f3af 8000 	nop.w
 80009d8:	00000000 	.word	0x00000000
 80009dc:	3df00000 	.word	0x3df00000
 80009e0:	00000000 	.word	0x00000000
 80009e4:	41f00000 	.word	0x41f00000

080009e8 <__udivmoddi4>:
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ec:	9e08      	ldr	r6, [sp, #32]
 80009ee:	460d      	mov	r5, r1
 80009f0:	4604      	mov	r4, r0
 80009f2:	460f      	mov	r7, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14a      	bne.n	8000a8e <__udivmoddi4+0xa6>
 80009f8:	428a      	cmp	r2, r1
 80009fa:	4694      	mov	ip, r2
 80009fc:	d965      	bls.n	8000aca <__udivmoddi4+0xe2>
 80009fe:	fab2 f382 	clz	r3, r2
 8000a02:	b143      	cbz	r3, 8000a16 <__udivmoddi4+0x2e>
 8000a04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a08:	f1c3 0220 	rsb	r2, r3, #32
 8000a0c:	409f      	lsls	r7, r3
 8000a0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000a12:	4317      	orrs	r7, r2
 8000a14:	409c      	lsls	r4, r3
 8000a16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1a:	fa1f f58c 	uxth.w	r5, ip
 8000a1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a22:	0c22      	lsrs	r2, r4, #16
 8000a24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a2c:	fb01 f005 	mul.w	r0, r1, r5
 8000a30:	4290      	cmp	r0, r2
 8000a32:	d90a      	bls.n	8000a4a <__udivmoddi4+0x62>
 8000a34:	eb1c 0202 	adds.w	r2, ip, r2
 8000a38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a3c:	f080 811c 	bcs.w	8000c78 <__udivmoddi4+0x290>
 8000a40:	4290      	cmp	r0, r2
 8000a42:	f240 8119 	bls.w	8000c78 <__udivmoddi4+0x290>
 8000a46:	3902      	subs	r1, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a12      	subs	r2, r2, r0
 8000a4c:	b2a4      	uxth	r4, r4
 8000a4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5a:	fb00 f505 	mul.w	r5, r0, r5
 8000a5e:	42a5      	cmp	r5, r4
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x90>
 8000a62:	eb1c 0404 	adds.w	r4, ip, r4
 8000a66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a6a:	f080 8107 	bcs.w	8000c7c <__udivmoddi4+0x294>
 8000a6e:	42a5      	cmp	r5, r4
 8000a70:	f240 8104 	bls.w	8000c7c <__udivmoddi4+0x294>
 8000a74:	4464      	add	r4, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11e      	cbz	r6, 8000a8a <__udivmoddi4+0xa2>
 8000a82:	40dc      	lsrs	r4, r3
 8000a84:	2300      	movs	r3, #0
 8000a86:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0xbc>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	f000 80ed 	beq.w	8000c72 <__udivmoddi4+0x28a>
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	fab3 f183 	clz	r1, r3
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d149      	bne.n	8000b40 <__udivmoddi4+0x158>
 8000aac:	42ab      	cmp	r3, r5
 8000aae:	d302      	bcc.n	8000ab6 <__udivmoddi4+0xce>
 8000ab0:	4282      	cmp	r2, r0
 8000ab2:	f200 80f8 	bhi.w	8000ca6 <__udivmoddi4+0x2be>
 8000ab6:	1a84      	subs	r4, r0, r2
 8000ab8:	eb65 0203 	sbc.w	r2, r5, r3
 8000abc:	2001      	movs	r0, #1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d0e2      	beq.n	8000a8a <__udivmoddi4+0xa2>
 8000ac4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac8:	e7df      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xe6>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f382 	clz	r3, r2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x210>
 8000ad8:	1a8a      	subs	r2, r1, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f fe8c 	uxth.w	lr, ip
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae8:	fb07 2015 	mls	r0, r7, r5, r2
 8000aec:	0c22      	lsrs	r2, r4, #16
 8000aee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af2:	fb0e f005 	mul.w	r0, lr, r5
 8000af6:	4290      	cmp	r0, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x124>
 8000afa:	eb1c 0202 	adds.w	r2, ip, r2
 8000afe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x122>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f200 80cb 	bhi.w	8000ca0 <__udivmoddi4+0x2b8>
 8000b0a:	4645      	mov	r5, r8
 8000b0c:	1a12      	subs	r2, r2, r0
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b14:	fb07 2210 	mls	r2, r7, r0, r2
 8000b18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x14e>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b2c:	d202      	bcs.n	8000b34 <__udivmoddi4+0x14c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f200 80bb 	bhi.w	8000caa <__udivmoddi4+0x2c2>
 8000b34:	4610      	mov	r0, r2
 8000b36:	eba4 040e 	sub.w	r4, r4, lr
 8000b3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3e:	e79f      	b.n	8000a80 <__udivmoddi4+0x98>
 8000b40:	f1c1 0720 	rsb	r7, r1, #32
 8000b44:	408b      	lsls	r3, r1
 8000b46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000b52:	fa20 f307 	lsr.w	r3, r0, r7
 8000b56:	40fd      	lsrs	r5, r7
 8000b58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b5c:	4323      	orrs	r3, r4
 8000b5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b62:	fa1f fe8c 	uxth.w	lr, ip
 8000b66:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6a:	0c1c      	lsrs	r4, r3, #16
 8000b6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b70:	fb08 f50e 	mul.w	r5, r8, lr
 8000b74:	42a5      	cmp	r5, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7e:	d90b      	bls.n	8000b98 <__udivmoddi4+0x1b0>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b88:	f080 8088 	bcs.w	8000c9c <__udivmoddi4+0x2b4>
 8000b8c:	42a5      	cmp	r5, r4
 8000b8e:	f240 8085 	bls.w	8000c9c <__udivmoddi4+0x2b4>
 8000b92:	f1a8 0802 	sub.w	r8, r8, #2
 8000b96:	4464      	add	r4, ip
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	b29d      	uxth	r5, r3
 8000b9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x1da>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000bb8:	d26c      	bcs.n	8000c94 <__udivmoddi4+0x2ac>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	d96a      	bls.n	8000c94 <__udivmoddi4+0x2ac>
 8000bbe:	3b02      	subs	r3, #2
 8000bc0:	4464      	add	r4, ip
 8000bc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	42ac      	cmp	r4, r5
 8000bd0:	46c8      	mov	r8, r9
 8000bd2:	46ae      	mov	lr, r5
 8000bd4:	d356      	bcc.n	8000c84 <__udivmoddi4+0x29c>
 8000bd6:	d053      	beq.n	8000c80 <__udivmoddi4+0x298>
 8000bd8:	b156      	cbz	r6, 8000bf0 <__udivmoddi4+0x208>
 8000bda:	ebb0 0208 	subs.w	r2, r0, r8
 8000bde:	eb64 040e 	sbc.w	r4, r4, lr
 8000be2:	fa04 f707 	lsl.w	r7, r4, r7
 8000be6:	40ca      	lsrs	r2, r1
 8000be8:	40cc      	lsrs	r4, r1
 8000bea:	4317      	orrs	r7, r2
 8000bec:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	f1c3 0120 	rsb	r1, r3, #32
 8000bfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c00:	fa20 f201 	lsr.w	r2, r0, r1
 8000c04:	fa25 f101 	lsr.w	r1, r5, r1
 8000c08:	409d      	lsls	r5, r3
 8000c0a:	432a      	orrs	r2, r5
 8000c0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c10:	fa1f fe8c 	uxth.w	lr, ip
 8000c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c18:	fb07 1510 	mls	r5, r7, r0, r1
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c22:	fb00 f50e 	mul.w	r5, r0, lr
 8000c26:	428d      	cmp	r5, r1
 8000c28:	fa04 f403 	lsl.w	r4, r4, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x258>
 8000c2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c36:	d22f      	bcs.n	8000c98 <__udivmoddi4+0x2b0>
 8000c38:	428d      	cmp	r5, r1
 8000c3a:	d92d      	bls.n	8000c98 <__udivmoddi4+0x2b0>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4461      	add	r1, ip
 8000c40:	1b49      	subs	r1, r1, r5
 8000c42:	b292      	uxth	r2, r2
 8000c44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c48:	fb07 1115 	mls	r1, r7, r5, r1
 8000c4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c50:	fb05 f10e 	mul.w	r1, r5, lr
 8000c54:	4291      	cmp	r1, r2
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x282>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c60:	d216      	bcs.n	8000c90 <__udivmoddi4+0x2a8>
 8000c62:	4291      	cmp	r1, r2
 8000c64:	d914      	bls.n	8000c90 <__udivmoddi4+0x2a8>
 8000c66:	3d02      	subs	r5, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a52      	subs	r2, r2, r1
 8000c6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c70:	e738      	b.n	8000ae4 <__udivmoddi4+0xfc>
 8000c72:	4631      	mov	r1, r6
 8000c74:	4630      	mov	r0, r6
 8000c76:	e708      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e6e6      	b.n	8000a4a <__udivmoddi4+0x62>
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	e6fb      	b.n	8000a78 <__udivmoddi4+0x90>
 8000c80:	4548      	cmp	r0, r9
 8000c82:	d2a9      	bcs.n	8000bd8 <__udivmoddi4+0x1f0>
 8000c84:	ebb9 0802 	subs.w	r8, r9, r2
 8000c88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	e7a3      	b.n	8000bd8 <__udivmoddi4+0x1f0>
 8000c90:	4645      	mov	r5, r8
 8000c92:	e7ea      	b.n	8000c6a <__udivmoddi4+0x282>
 8000c94:	462b      	mov	r3, r5
 8000c96:	e794      	b.n	8000bc2 <__udivmoddi4+0x1da>
 8000c98:	4640      	mov	r0, r8
 8000c9a:	e7d1      	b.n	8000c40 <__udivmoddi4+0x258>
 8000c9c:	46d0      	mov	r8, sl
 8000c9e:	e77b      	b.n	8000b98 <__udivmoddi4+0x1b0>
 8000ca0:	3d02      	subs	r5, #2
 8000ca2:	4462      	add	r2, ip
 8000ca4:	e732      	b.n	8000b0c <__udivmoddi4+0x124>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e70a      	b.n	8000ac0 <__udivmoddi4+0xd8>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	e742      	b.n	8000b36 <__udivmoddi4+0x14e>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <PushTx8Bytes+0xa4>)
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	3304      	adds	r3, #4
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <PushTx8Bytes+0xa4>)
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000cde:	2300      	movs	r3, #0
 8000ce0:	75fb      	strb	r3, [r7, #23]
 8000ce2:	e010      	b.n	8000d06 <PushTx8Bytes+0x52>
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	18d1      	adds	r1, r2, r3
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	7808      	ldrb	r0, [r1, #0]
 8000cf2:	4919      	ldr	r1, [pc, #100]	; (8000d58 <PushTx8Bytes+0xa4>)
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	440a      	add	r2, r1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	3301      	adds	r3, #1
 8000d04:	75fb      	strb	r3, [r7, #23]
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d8ea      	bhi.n	8000ce4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <PushTx8Bytes+0xa8>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d106      	bne.n	8000d24 <PushTx8Bytes+0x70>
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <PushTx8Bytes+0xac>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d20:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <PushTx8Bytes+0xac>)
 8000d22:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000d30:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <PushTx8Bytes+0xa0>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <PushTx8Bytes+0xac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d102      	bne.n	8000d44 <PushTx8Bytes+0x90>
		isfull = 1;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <PushTx8Bytes+0xa8>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	371c      	adds	r7, #28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20002e04 	.word	0x20002e04
 8000d58:	20000e00 	.word	0x20000e00
 8000d5c:	20002e08 	.word	0x20002e08
 8000d60:	20002e00 	.word	0x20002e00

08000d64 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000d6e:	2304      	movs	r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000d76:	e035      	b.n	8000de4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <PopSendTx8Bytes+0xa0>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <PopSendTx8Bytes+0x28>
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <PopSendTx8Bytes+0xa8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d034      	beq.n	8000df6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <PopSendTx8Bytes+0xac>)
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4413      	add	r3, r2
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <PopSendTx8Bytes+0xac>)
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <PopSendTx8Bytes+0xb0>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	3308      	adds	r3, #8
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <PopSendTx8Bytes+0xac>)
 8000db8:	441a      	add	r2, r3
 8000dba:	463b      	mov	r3, r7
 8000dbc:	1d39      	adds	r1, r7, #4
 8000dbe:	f002 fbbe 	bl	800353e <HAL_CAN_AddTxMessage>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000dc6:	7ffb      	ldrb	r3, [r7, #31]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <PopSendTx8Bytes+0x6c>
 8000dcc:	7ffb      	ldrb	r3, [r7, #31]
 8000dce:	e014      	b.n	8000dfa <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <PopSendTx8Bytes+0xa4>)
 8000ddc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <PopSendTx8Bytes+0xa0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <PopSendTx8Bytes+0xb0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fc78 	bl	80036de <HAL_CAN_GetTxMailboxesFreeLevel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1c1      	bne.n	8000d78 <PopSendTx8Bytes+0x14>
 8000df4:	e000      	b.n	8000df8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000df6:	bf00      	nop
	}

	return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3720      	adds	r7, #32
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20002e08 	.word	0x20002e08
 8000e08:	20002e00 	.word	0x20002e00
 8000e0c:	20002e04 	.word	0x20002e04
 8000e10:	20000e00 	.word	0x20000e00
 8000e14:	20000b2c 	.word	0x20000b2c

08000e18 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000e1c:	f7ff ffa2 	bl	8000d64 <PopSendTx8Bytes>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000e28:	f7ff ff9c 	bl	8000d64 <PopSendTx8Bytes>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e34:	b08e      	sub	sp, #56	; 0x38
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	f107 0218 	add.w	r2, r7, #24
 8000e44:	2100      	movs	r1, #0
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f002 fc7e 	bl	8003748 <HAL_CAN_GetRxMessage>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000e52:	486e      	ldr	r0, [pc, #440]	; (800100c <WhenCANRxFifo0MsgPending+0x1dc>)
 8000e54:	f01e fcda 	bl	801f80c <iprintf>
		Error_Handler();
 8000e58:	f001 fc87 	bl	800276a <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4698      	mov	r8, r3
 8000e62:	4691      	mov	r9, r2
 8000e64:	4640      	mov	r0, r8
 8000e66:	4649      	mov	r1, r9
 8000e68:	f000 f9ea 	bl	8001240 <Extract_CAN_Device>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	733a      	strb	r2, [r7, #12]
 8000e72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000e76:	737a      	strb	r2, [r7, #13]
 8000e78:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000e7c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	2200      	movs	r2, #0
 8000e82:	461c      	mov	r4, r3
 8000e84:	4615      	mov	r5, r2
 8000e86:	4620      	mov	r0, r4
 8000e88:	4629      	mov	r1, r5
 8000e8a:	f000 fa25 	bl	80012d8 <Extract_CAN_CMD>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000e94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d139      	bne.n	8000f10 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ea2:	e013      	b.n	8000ecc <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000ea4:	7b3b      	ldrb	r3, [r7, #12]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000eac:	4958      	ldr	r1, [pc, #352]	; (8001010 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000eae:	4603      	mov	r3, r0
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	1a1b      	subs	r3, r3, r0
 8000eb4:	440b      	add	r3, r1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	7c3b      	ldrb	r3, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f000 80a0 	beq.w	8001002 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b50      	ldr	r3, [pc, #320]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ed2:	5c9b      	ldrb	r3, [r3, r2]
 8000ed4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d3e3      	bcc.n	8000ea4 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000edc:	7b3b      	ldrb	r3, [r7, #12]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	7b3b      	ldrb	r3, [r7, #12]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	461c      	mov	r4, r3
 8000eea:	7c38      	ldrb	r0, [r7, #16]
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000eee:	460b      	mov	r3, r1
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	1a5b      	subs	r3, r3, r1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4423      	add	r3, r4
 8000ef8:	4602      	mov	r2, r0
 8000efa:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000efc:	7b3b      	ldrb	r3, [r7, #12]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000f02:	5c9b      	ldrb	r3, [r3, r2]
 8000f04:	7b3a      	ldrb	r2, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2d9      	uxtb	r1, r3
 8000f0a:	4b42      	ldr	r3, [pc, #264]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000f0c:	5499      	strb	r1, [r3, r2]
 8000f0e:	e04a      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000f10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d146      	bne.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d10d      	bne.n	8000f3a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	7bba      	ldrb	r2, [r7, #14]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	cb03      	ldmia	r3!, {r0, r1}
 8000f34:	6010      	str	r0, [r2, #0]
 8000f36:	6051      	str	r1, [r2, #4]
 8000f38:	e035      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000f3a:	7b3b      	ldrb	r3, [r7, #12]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d10d      	bne.n	8000f5c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000f40:	7b7b      	ldrb	r3, [r7, #13]
 8000f42:	7bba      	ldrb	r2, [r7, #14]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4a34      	ldr	r2, [pc, #208]	; (800101c <WhenCANRxFifo0MsgPending+0x1ec>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	cb03      	ldmia	r3!, {r0, r1}
 8000f56:	6010      	str	r0, [r2, #0]
 8000f58:	6051      	str	r1, [r2, #4]
 8000f5a:	e024      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000f5c:	7b3b      	ldrb	r3, [r7, #12]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d10d      	bne.n	8000f7e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	7bba      	ldrb	r2, [r7, #14]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	cb03      	ldmia	r3!, {r0, r1}
 8000f78:	6010      	str	r0, [r2, #0]
 8000f7a:	6051      	str	r1, [r2, #4]
 8000f7c:	e013      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000f7e:	7b3b      	ldrb	r3, [r7, #12]
 8000f80:	2b06      	cmp	r3, #6
 8000f82:	d10d      	bne.n	8000fa0 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	7bba      	ldrb	r2, [r7, #14]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000f90:	4413      	add	r3, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	cb03      	ldmia	r3!, {r0, r1}
 8000f9a:	6010      	str	r0, [r2, #0]
 8000f9c:	6051      	str	r1, [r2, #4]
 8000f9e:	e002      	b.n	8000fa6 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000fa2:	f01e fc33 	bl	801f80c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fa8:	785a      	ldrb	r2, [r3, #1]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d128      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fb4:	789a      	ldrb	r2, [r3, #2]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d122      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fc0:	78da      	ldrb	r2, [r3, #3]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d11c      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fcc:	791a      	ldrb	r2, [r3, #4]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	78db      	ldrb	r3, [r3, #3]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d116      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fd8:	795a      	ldrb	r2, [r3, #5]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d110      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000fe4:	799a      	ldrb	r2, [r3, #6]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	795b      	ldrb	r3, [r3, #5]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d10a      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ff0:	7a1a      	ldrb	r2, [r3, #8]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	799b      	ldrb	r3, [r3, #6]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d104      	bne.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e000      	b.n	8001004 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8001002:	bf00      	nop
	}
}
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800100c:	08023178 	.word	0x08023178
 8001010:	20000b40 	.word	0x20000b40
 8001014:	20000b34 	.word	0x20000b34
 8001018:	20000b80 	.word	0x20000b80
 800101c:	20000c20 	.word	0x20000c20
 8001020:	20000cc0 	.word	0x20000cc0
 8001024:	20000d60 	.word	0x20000d60
 8001028:	08023190 	.word	0x08023190
 800102c:	20000b30 	.word	0x20000b30

08001030 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 800104c:	2300      	movs	r3, #0
 800104e:	77fb      	strb	r3, [r7, #31]
 8001050:	e015      	b.n	800107e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	461a      	mov	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4413      	add	r3, r2
 800105c:	2208      	movs	r2, #8
 800105e:	4619      	mov	r1, r3
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff fe27 	bl	8000cb4 <PushTx8Bytes>
 8001066:	4603      	mov	r3, r0
 8001068:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 800106a:	7cfb      	ldrb	r3, [r7, #19]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <SendBytes+0x48>
			Error_Handler();
 8001070:	f001 fb7b 	bl	800276a <Error_Handler>
			return ret;
 8001074:	7cfb      	ldrb	r3, [r7, #19]
 8001076:	e027      	b.n	80010c8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8001078:	7ffb      	ldrb	r3, [r7, #31]
 800107a:	3301      	adds	r3, #1
 800107c:	77fb      	strb	r3, [r7, #31]
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8e5      	bhi.n	8001052 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d011      	beq.n	80010b0 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	4619      	mov	r1, r3
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff fe0b 	bl	8000cb4 <PushTx8Bytes>
 800109e:	4603      	mov	r3, r0
 80010a0:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80010a2:	7cfb      	ldrb	r3, [r7, #19]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <SendBytes+0x80>
			Error_Handler();
 80010a8:	f001 fb5f 	bl	800276a <Error_Handler>
			return ret;
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	e00b      	b.n	80010c8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80010b0:	f7ff fe58 	bl	8000d64 <PopSendTx8Bytes>
 80010b4:	4603      	mov	r3, r0
 80010b6:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <SendBytes+0x96>
		Error_Handler();
 80010be:	f001 fb54 	bl	800276a <Error_Handler>
		return ret;
 80010c2:	7cfb      	ldrb	r3, [r7, #19]
 80010c4:	e000      	b.n	80010c8 <SendBytes+0x98>
	}

	return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	210c      	movs	r1, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f884 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	463b      	mov	r3, r7
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff ff9d 	bl	8001030 <SendBytes>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <ServoDriver_Init>:
		return ans;
	}
}

////servo
void ServoDriver_Init(CAN_Device *can_device, CANServo_Param_Typedef *param){
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	float fdata[2];
	fdata[0] = param->pulse_width_min;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->pulse_width_max;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT1), (uint8_t *)fdata, sizeof(fdata));
 8001114:	2101      	movs	r1, #1
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f869 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2208      	movs	r2, #8
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff ff81 	bl	8001030 <SendBytes>
	fdata[0] = param->pwm_frequency;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->angle_range;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT2), (uint8_t *)fdata, sizeof(fdata));
 800113a:	2102      	movs	r1, #2
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f856 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	2208      	movs	r2, #8
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff ff6e 	bl	8001030 <SendBytes>
	fdata[0] = param->angle_offset;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0.0f;
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT3), (uint8_t *)fdata, sizeof(fdata));
 8001160:	2103      	movs	r1, #3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f843 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2208      	movs	r2, #8
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff ff5b 	bl	8001030 <SendBytes>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <ServoDriver_SendValue>:

void ServoDriver_SendValue(CAN_Device *can_device, float angle){
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	ed87 0a00 	vstr	s0, [r7]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_SET_TARGET), (uint8_t *)(&angle), sizeof(float)) != HAL_OK){
 800118e:	2104      	movs	r1, #4
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f82c 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	463b      	mov	r3, r7
 800119e:	2204      	movs	r2, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff ff45 	bl	8001030 <SendBytes>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <ServoDriver_SendValue+0x2e>
		Error_Handler();
 80011ac:	f001 fadd 	bl	800276a <Error_Handler>
	}
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <AirCylinder_SendOutput>:
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
		Error_Handler();
	}
}

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 80011c4:	2102      	movs	r1, #2
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f811 	bl	80011ee <Make_CAN_ID_from_CAN_Device>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	1cfb      	adds	r3, r7, #3
 80011d4:	2201      	movs	r2, #1
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff ff2a 	bl	8001030 <SendBytes>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 80011e2:	f001 fac2 	bl	800276a <Error_Handler>
	}
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 80011ee:	b4b0      	push	{r4, r5, r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	02db      	lsls	r3, r3, #11
 8001208:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	015b      	lsls	r3, r3, #5
 800121e:	b2db      	uxtb	r3, r3
 8001220:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	4313      	orrs	r3, r2
 800122a:	17da      	asrs	r2, r3, #31
 800122c:	461c      	mov	r4, r3
 800122e:	4615      	mov	r5, r2
 8001230:	4622      	mov	r2, r4
 8001232:	462b      	mov	r3, r5
}
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bcb0      	pop	{r4, r5, r7}
 800123e:	4770      	bx	lr

08001240 <Extract_CAN_Device>:
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
             | (cmd&0b11111) );
}

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 800124a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	0942      	lsrs	r2, r0, #5
 8001258:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 800125c:	094b      	lsrs	r3, r1, #5
 800125e:	b2d3      	uxtb	r3, r2
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	b2db      	uxtb	r3, r3
 8001266:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0a02      	lsrs	r2, r0, #8
 8001276:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800127a:	0a0b      	lsrs	r3, r1, #8
 800127c:	b2d3      	uxtb	r3, r2
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	b2db      	uxtb	r3, r3
 8001284:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	0ac2      	lsrs	r2, r0, #11
 8001294:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001298:	0acb      	lsrs	r3, r1, #11
 800129a:	b2d3      	uxtb	r3, r2
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	723b      	strb	r3, [r7, #8]
    return ans;
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	4611      	mov	r1, r2
 80012b0:	8019      	strh	r1, [r3, #0]
 80012b2:	3302      	adds	r3, #2
 80012b4:	0c12      	lsrs	r2, r2, #16
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	7b3a      	ldrb	r2, [r7, #12]
 80012bc:	f362 0307 	bfi	r3, r2, #0, #8
 80012c0:	7b7a      	ldrb	r2, [r7, #13]
 80012c2:	f362 230f 	bfi	r3, r2, #8, #8
 80012c6:	7bba      	ldrb	r2, [r7, #14]
 80012c8:	f362 4317 	bfi	r3, r2, #16, #8
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	e9c7 0100 	strd	r0, r1, [r7]
 80012e2:	783b      	ldrb	r3, [r7, #0]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_CAN1_Init+0x64>)
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <MX_CAN1_Init+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_CAN1_Init+0x64>)
 8001304:	2206      	movs	r2, #6
 8001306:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_CAN1_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_CAN1_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_CAN1_Init+0x64>)
 8001316:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800131a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_CAN1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_CAN1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_CAN1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_CAN1_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_CAN1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_CAN1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_CAN1_Init+0x64>)
 8001342:	2201      	movs	r2, #1
 8001344:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_CAN1_Init+0x64>)
 8001348:	f001 fffe 	bl	8003348 <HAL_CAN_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001352:	f001 fa0a 	bl	800276a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20002e0c 	.word	0x20002e0c
 8001360:	40006400 	.word	0x40006400

08001364 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_CAN_MspInit+0xac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d13f      	bne.n	8001406 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a22      	ldr	r2, [pc, #136]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 800138c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_CAN_MspInit+0xb0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013b6:	2303      	movs	r3, #3
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013c6:	2309      	movs	r3, #9
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <HAL_CAN_MspInit+0xb4>)
 80013d2:	f003 f9b7 	bl	8004744 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2105      	movs	r1, #5
 80013da:	2013      	movs	r0, #19
 80013dc:	f002 fd72 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80013e0:	2013      	movs	r0, #19
 80013e2:	f002 fd8b 	bl	8003efc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2105      	movs	r1, #5
 80013ea:	2014      	movs	r0, #20
 80013ec:	f002 fd6a 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80013f0:	2014      	movs	r0, #20
 80013f2:	f002 fd83 	bl	8003efc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2105      	movs	r1, #5
 80013fa:	2015      	movs	r0, #21
 80013fc:	f002 fd62 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001400:	2015      	movs	r0, #21
 8001402:	f002 fd7b 	bl	8003efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40006400 	.word	0x40006400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020c00 	.word	0x40020c00

0800141c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001428:	f00c fe08 	bl	800e03c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <pvPortMallocMicroROS+0x180>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001434:	f000 f98a 	bl	800174c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001438:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <pvPortMallocMicroROS+0x184>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 8092 	bne.w	800156a <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01f      	beq.n	800148c <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 800144c:	2208      	movs	r2, #8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	2b00      	cmp	r3, #0
 800145c:	d016      	beq.n	800148c <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f023 0307 	bic.w	r3, r3, #7
 8001464:	3308      	adds	r3, #8
 8001466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00c      	beq.n	800148c <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001476:	b672      	cpsid	i
 8001478:	f383 8811 	msr	BASEPRI, r3
 800147c:	f3bf 8f6f 	isb	sy
 8001480:	f3bf 8f4f 	dsb	sy
 8001484:	b662      	cpsie	i
 8001486:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001488:	bf00      	nop
 800148a:	e7fe      	b.n	800148a <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d06b      	beq.n	800156a <pvPortMallocMicroROS+0x14e>
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	d866      	bhi.n	800156a <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800149c:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <pvPortMallocMicroROS+0x18c>)
 800149e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <pvPortMallocMicroROS+0x18c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014a6:	e004      	b.n	80014b2 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d903      	bls.n	80014c4 <pvPortMallocMicroROS+0xa8>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f1      	bne.n	80014a8 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <pvPortMallocMicroROS+0x180>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d04d      	beq.n	800156a <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2208      	movs	r2, #8
 80014d4:	4413      	add	r3, r2
 80014d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	2308      	movs	r3, #8
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d921      	bls.n	8001534 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00c      	beq.n	800151c <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001506:	b672      	cpsid	i
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	b662      	cpsie	i
 8001516:	613b      	str	r3, [r7, #16]
}
 8001518:	bf00      	nop
 800151a:	e7fe      	b.n	800151a <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1ad2      	subs	r2, r2, r3
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800152e:	69b8      	ldr	r0, [r7, #24]
 8001530:	f000 f96e 	bl	8001810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001540:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <pvPortMallocMicroROS+0x190>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d203      	bcs.n	8001556 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <pvPortMallocMicroROS+0x188>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <pvPortMallocMicroROS+0x190>)
 8001554:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <pvPortMallocMicroROS+0x184>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	431a      	orrs	r2, r3
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800156a:	f00c fd75 	bl	800e058 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00c      	beq.n	8001592 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157c:	b672      	cpsid	i
 800157e:	f383 8811 	msr	BASEPRI, r3
 8001582:	f3bf 8f6f 	isb	sy
 8001586:	f3bf 8f4f 	dsb	sy
 800158a:	b662      	cpsie	i
 800158c:	60fb      	str	r3, [r7, #12]
}
 800158e:	bf00      	nop
 8001590:	e7fe      	b.n	8001590 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001592:	69fb      	ldr	r3, [r7, #28]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20006a3c 	.word	0x20006a3c
 80015a0:	20006a48 	.word	0x20006a48
 80015a4:	20006a40 	.word	0x20006a40
 80015a8:	20006a34 	.word	0x20006a34
 80015ac:	20006a44 	.word	0x20006a44

080015b0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d04c      	beq.n	800165c <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80015c2:	2308      	movs	r3, #8
 80015c4:	425b      	negs	r3, r3
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <vPortFreeMicroROS+0xb4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <vPortFreeMicroROS+0x48>
	__asm volatile
 80015de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e2:	b672      	cpsid	i
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	b662      	cpsie	i
 80015f2:	60fb      	str	r3, [r7, #12]
}
 80015f4:	bf00      	nop
 80015f6:	e7fe      	b.n	80015f6 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00c      	beq.n	800161a <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001604:	b672      	cpsid	i
 8001606:	f383 8811 	msr	BASEPRI, r3
 800160a:	f3bf 8f6f 	isb	sy
 800160e:	f3bf 8f4f 	dsb	sy
 8001612:	b662      	cpsie	i
 8001614:	60bb      	str	r3, [r7, #8]
}
 8001616:	bf00      	nop
 8001618:	e7fe      	b.n	8001618 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <vPortFreeMicroROS+0xb4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d019      	beq.n	800165c <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d115      	bne.n	800165c <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <vPortFreeMicroROS+0xb4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001640:	f00c fcfc 	bl	800e03c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <vPortFreeMicroROS+0xb8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <vPortFreeMicroROS+0xb8>)
 8001650:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001652:	6938      	ldr	r0, [r7, #16]
 8001654:	f000 f8dc 	bl	8001810 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001658:	f00c fcfe 	bl	800e058 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20006a48 	.word	0x20006a48
 8001668:	20006a40 	.word	0x20006a40

0800166c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001678:	2308      	movs	r3, #8
 800167a:	425b      	negs	r3, r3
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <getBlockSize+0x38>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	43db      	mvns	r3, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

	return count;
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	4618      	mov	r0, r3
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20006a48 	.word	0x20006a48

080016a8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80016b2:	f00c fcc3 	bl	800e03c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80016b6:	6838      	ldr	r0, [r7, #0]
 80016b8:	f7ff feb0 	bl	800141c <pvPortMallocMicroROS>
 80016bc:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d017      	beq.n	80016f4 <pvPortReallocMicroROS+0x4c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d014      	beq.n	80016f4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffce 	bl	800166c <getBlockSize>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2208      	movs	r2, #8
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d201      	bcs.n	80016e4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	68b8      	ldr	r0, [r7, #8]
 80016ea:	f01e fc08 	bl	801fefe <memcpy>

		vPortFreeMicroROS(pv);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ff5e 	bl	80015b0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80016f4:	f00c fcb0 	bl	800e058 <xTaskResumeAll>

	return newmem;
 80016f8:	68bb      	ldr	r3, [r7, #8]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800170c:	f00c fc96 	bl	800e03c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff fe7e 	bl	800141c <pvPortMallocMicroROS>
 8001720:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001726:	e004      	b.n	8001732 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	613a      	str	r2, [r7, #16]
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	617a      	str	r2, [r7, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f5      	bne.n	8001728 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800173c:	f00c fc8c 	bl	800e058 <xTaskResumeAll>
  	return mem;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001752:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <prvHeapInit+0xac>)
 800175a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00c      	beq.n	8001780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3307      	adds	r3, #7
 800176a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f023 0307 	bic.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <prvHeapInit+0xac>)
 800177c:	4413      	add	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <prvHeapInit+0xb0>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <prvHeapInit+0xb0>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001798:	2208      	movs	r2, #8
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 0307 	bic.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <prvHeapInit+0xb4>)
 80017ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <prvHeapInit+0xb4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <prvHeapInit+0xb4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	1ad2      	subs	r2, r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <prvHeapInit+0xb4>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <prvHeapInit+0xb8>)
 80017da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <prvHeapInit+0xbc>)
 80017e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <prvHeapInit+0xc0>)
 80017e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20002e34 	.word	0x20002e34
 80017fc:	20006a34 	.word	0x20006a34
 8001800:	20006a3c 	.word	0x20006a3c
 8001804:	20006a44 	.word	0x20006a44
 8001808:	20006a40 	.word	0x20006a40
 800180c:	20006a48 	.word	0x20006a48

08001810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <prvInsertBlockIntoFreeList+0xac>)
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e002      	b.n	8001824 <prvInsertBlockIntoFreeList+0x14>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	d8f7      	bhi.n	800181e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	4413      	add	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d108      	bne.n	8001852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	441a      	add	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	441a      	add	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d118      	bne.n	8001898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <prvInsertBlockIntoFreeList+0xb0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d00d      	beq.n	800188e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	441a      	add	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e008      	b.n	80018a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <prvInsertBlockIntoFreeList+0xb0>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e003      	b.n	80018a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d002      	beq.n	80018ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20006a34 	.word	0x20006a34
 80018c0:	20006a3c 	.word	0x20006a3c

080018c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_DMA_Init+0x48>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <MX_DMA_Init+0x48>)
 80018d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_DMA_Init+0x48>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2105      	movs	r1, #5
 80018e6:	200c      	movs	r0, #12
 80018e8:	f002 faec 	bl	8003ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018ec:	200c      	movs	r0, #12
 80018ee:	f002 fb05 	bl	8003efc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2105      	movs	r1, #5
 80018f6:	200e      	movs	r0, #14
 80018f8:	f002 fae4 	bl	8003ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018fc:	200e      	movs	r0, #14
 80018fe:	f002 fafd 	bl	8003efc <HAL_NVIC_EnableIRQ>

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800191e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001924:	4904      	ldr	r1, [pc, #16]	; (8001938 <cubemx_transport_open+0x28>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f006 fb38 	bl	8007f9c <HAL_UART_Receive_DMA>
    return true;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20006a4c 	.word	0x20006a4c

0800193c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800194a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f006 fb69 	bl	8008024 <HAL_UART_DMAStop>
    return true;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001970:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001976:	2b20      	cmp	r3, #32
 8001978:	d11a      	bne.n	80019b0 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	b29b      	uxth	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f006 fa8e 	bl	8007ea4 <HAL_UART_Transmit_DMA>
 8001988:	4603      	mov	r3, r0
 800198a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800198c:	e002      	b.n	8001994 <cubemx_transport_write+0x38>
            osDelay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f00b faea 	bl	800cf68 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001994:	7cfb      	ldrb	r3, [r7, #19]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <cubemx_transport_write+0x46>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d1f5      	bne.n	800198e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 80019a2:	7cfb      	ldrb	r3, [r7, #19]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <cubemx_transport_write+0x50>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	e002      	b.n	80019b2 <cubemx_transport_write+0x56>
 80019ac:	2300      	movs	r3, #0
 80019ae:	e000      	b.n	80019b2 <cubemx_transport_write+0x56>
    }else{
        return 0;
 80019b0:	2300      	movs	r3, #0
    }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019d0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d6:	b672      	cpsid	i
}
 80019d8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <cubemx_transport_read+0x9c>)
 80019e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019ea:	b662      	cpsie	i
}
 80019ec:	bf00      	nop
        __enable_irq();
        ms_used++;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f00b fab7 	bl	800cf68 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <cubemx_transport_read+0xa0>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <cubemx_transport_read+0x9c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d103      	bne.n	8001a0e <cubemx_transport_read+0x52>
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbe3      	blt.n	80019d6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a12:	e011      	b.n	8001a38 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <cubemx_transport_read+0xa0>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	440b      	add	r3, r1
 8001a1e:	4910      	ldr	r1, [pc, #64]	; (8001a60 <cubemx_transport_read+0xa4>)
 8001a20:	5c8a      	ldrb	r2, [r1, r2]
 8001a22:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <cubemx_transport_read+0xa0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <cubemx_transport_read+0xa0>)
 8001a30:	6013      	str	r3, [r2, #0]
        wrote++;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <cubemx_transport_read+0xa0>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <cubemx_transport_read+0x9c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d003      	beq.n	8001a4c <cubemx_transport_read+0x90>
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d3e3      	bcc.n	8001a14 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20007250 	.word	0x20007250
 8001a5c:	2000724c 	.word	0x2000724c
 8001a60:	20006a4c 	.word	0x20006a4c

08001a64 <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001a6c:	f7ff f9d4 	bl	8000e18 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001a80:	f7ff f9d0 	bl	8000e24 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001a94:	f7ff f9c0 	bl	8000e18 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001aa8:	f7ff f9bc 	bl	8000e24 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001abc:	f7ff f9ac 	bl	8000e18 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8001ad0:	f7ff f9a8 	bl	8000e24 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff f9a2 	bl	8000e30 <WhenCANRxFifo0MsgPending>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20007340 	.word	0x20007340

08001af8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001afc:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <MX_FREERTOS_Init+0x48>)
 8001afe:	2100      	movs	r1, #0
 8001b00:	4810      	ldr	r0, [pc, #64]	; (8001b44 <MX_FREERTOS_Init+0x4c>)
 8001b02:	f00b f98b 	bl	800ce1c <osThreadNew>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <MX_FREERTOS_Init+0x50>)
 8001b0a:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <MX_FREERTOS_Init+0x54>)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	480f      	ldr	r0, [pc, #60]	; (8001b50 <MX_FREERTOS_Init+0x58>)
 8001b12:	f00b f983 	bl	800ce1c <osThreadNew>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <MX_FREERTOS_Init+0x5c>)
 8001b1a:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <MX_FREERTOS_Init+0x60>)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	480e      	ldr	r0, [pc, #56]	; (8001b5c <MX_FREERTOS_Init+0x64>)
 8001b22:	f00b f97b 	bl	800ce1c <osThreadNew>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <MX_FREERTOS_Init+0x68>)
 8001b2a:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <MX_FREERTOS_Init+0x6c>)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_FREERTOS_Init+0x70>)
 8001b32:	f00b f973 	bl	800ce1c <osThreadNew>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <MX_FREERTOS_Init+0x74>)
 8001b3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	080234d0 	.word	0x080234d0
 8001b44:	08001f39 	.word	0x08001f39
 8001b48:	20007404 	.word	0x20007404
 8001b4c:	080234f4 	.word	0x080234f4
 8001b50:	080023b9 	.word	0x080023b9
 8001b54:	2000a344 	.word	0x2000a344
 8001b58:	08023518 	.word	0x08023518
 8001b5c:	080023f5 	.word	0x080023f5
 8001b60:	2000aba4 	.word	0x2000aba4
 8001b64:	0802353c 	.word	0x0802353c
 8001b68:	08002455 	.word	0x08002455
 8001b6c:	2000b404 	.word	0x2000b404

08001b70 <service_callback>:
  * @retval None
  */

//過去の遺物
void service_callback(const void *request, void *response)
{
 8001b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	60bb      	str	r3, [r7, #8]

	osDelay(1000);
 8001b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b88:	f00b f9ee 	bl	800cf68 <osDelay>

	_res->sum = _req->a + _req->b + _req->c;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b98:	1884      	adds	r4, r0, r2
 8001b9a:	eb41 0503 	adc.w	r5, r1, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ba4:	eb14 0802 	adds.w	r8, r4, r2
 8001ba8:	eb45 0903 	adc.w	r9, r5, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	e9c3 8900 	strd	r8, r9, [r3]
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001bbc <subscription_callback>:

//速度司令を格納
void subscription_callback(const void * msgin)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	ed93 7b04 	vldr	d7, [r3, #16]
 8001bce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <subscription_callback+0x58>)
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	ed93 7b06 	vldr	d7, [r3, #24]
 8001bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <subscription_callback+0x58>)
 8001be4:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	ed93 7b08 	vldr	d7, [r3, #32]
 8001bee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <subscription_callback+0x58>)
 8001bf4:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001bfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <subscription_callback+0x58>)
 8001c04:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	2000bc68 	.word	0x2000bc68

08001c18 <print_int>:

//micro-rosでのデバッグ用
void print_int(int num){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	rosidl_runtime_c__String__init(&pub);
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <print_int+0x50>)
 8001c22:	f014 fb07 	bl	8016234 <rosidl_runtime_c__String__init>
	char val[12];
	snprintf(val, 12, "%d", num);
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <print_int+0x54>)
 8001c2e:	210c      	movs	r1, #12
 8001c30:	f01d ff08 	bl	801fa44 <sniprintf>
	rosidl_runtime_c__String__assignn(&pub.data, val, sizeof(val));
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	220c      	movs	r2, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480a      	ldr	r0, [pc, #40]	; (8001c68 <print_int+0x50>)
 8001c3e:	f014 fb57 	bl	80162f0 <rosidl_runtime_c__String__assignn>
	RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8001c42:	2200      	movs	r2, #0
 8001c44:	4908      	ldr	r1, [pc, #32]	; (8001c68 <print_int+0x50>)
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <print_int+0x58>)
 8001c48:	f010 ff6e 	bl	8012b28 <rcl_publish>
 8001c4c:	6178      	str	r0, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <print_int+0x48>
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <print_int+0x5c>)
 8001c5c:	f01d fdd6 	bl	801f80c <iprintf>
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200072e8 	.word	0x200072e8
 8001c6c:	080232f4 	.word	0x080232f4
 8001c70:	200073fc 	.word	0x200073fc
 8001c74:	080232f8 	.word	0x080232f8

08001c78 <manipsub_callback>:

//マニピュレーションのためのコールバック関数群
void manipsub_callback(const void * msgin)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const manip_msgs__msg__Cmd * msub = (const manip_msgs__msg__Cmd *)msgin;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60fb      	str	r3, [r7, #12]

	  print_int(msub->num);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ffc3 	bl	8001c18 <print_int>
	  print_int(msub->top_base_arm);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ffbc 	bl	8001c18 <print_int>
	  print_int(msub->top_base_hand);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ffb5 	bl	8001c18 <print_int>

	  work_arm_deployer(msub->work_arm_deploy);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f000 f834 	bl	8001d24 <work_arm_deployer>
	  work_arm_setter(msub->work_arm);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f000 f899 	bl	8001dfc <work_arm_setter>
	  work_hand_setter(msub->work_hand);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f000 f872 	bl	8001dbc <work_hand_setter>
	  base1_arm_setter(msub->top_base_arm);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f000 f8ab 	bl	8001e3c <base1_arm_setter>
	  base1_hand_setter(msub->top_base_hand);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f000 f8c2 	bl	8001e78 <base1_hand_setter>
	  base2_arm_setter(msub->bottom_base_arm);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f000 f8db 	bl	8001eb8 <base2_arm_setter>
	  base2_hand_setter(msub->bottom_base_hand);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f000 f8f2 	bl	8001ef4 <base2_hand_setter>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <manipsub_callback+0xa8>)
 8001d14:	f002 fedb 	bl	8004ace <HAL_GPIO_TogglePin>
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020400 	.word	0x40020400

08001d24 <work_arm_deployer>:

void work_arm_deployer(int state){//state:{0:close,1:open}
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <work_arm_deployer+0x40>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8001d32:	491c      	ldr	r1, [pc, #112]	; (8001da4 <work_arm_deployer+0x80>)
 8001d34:	481c      	ldr	r0, [pc, #112]	; (8001da8 <work_arm_deployer+0x84>)
 8001d36:	f7ff f9e2 	bl	80010fe <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 8001d3a:	2064      	movs	r0, #100	; 0x64
 8001d3c:	f00b f914 	bl	800cf68 <osDelay>
		ServoDriver_SendValue(&servo_device1, 45.0f);
 8001d40:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001dac <work_arm_deployer+0x88>
 8001d44:	4818      	ldr	r0, [pc, #96]	; (8001da8 <work_arm_deployer+0x84>)
 8001d46:	f7ff fa1c 	bl	8001182 <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8001d4a:	4919      	ldr	r1, [pc, #100]	; (8001db0 <work_arm_deployer+0x8c>)
 8001d4c:	4819      	ldr	r0, [pc, #100]	; (8001db4 <work_arm_deployer+0x90>)
 8001d4e:	f7ff f9d6 	bl	80010fe <ServoDriver_Init>
		osDelay(100);
 8001d52:	2064      	movs	r0, #100	; 0x64
 8001d54:	f00b f908 	bl	800cf68 <osDelay>
		ServoDriver_SendValue(&servo_device2, 135.0f);
 8001d58:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001db8 <work_arm_deployer+0x94>
 8001d5c:	4815      	ldr	r0, [pc, #84]	; (8001db4 <work_arm_deployer+0x90>)
 8001d5e:	f7ff fa10 	bl	8001182 <ServoDriver_SendValue>
		ServoDriver_SendValue(&servo_device2, 45.0f);
		ServoDriver_Init(&servo_device1, &servo_param1);
		osDelay(100);
		ServoDriver_SendValue(&servo_device1, 135.0f);
	}
}
 8001d62:	e01a      	b.n	8001d9a <work_arm_deployer+0x76>
	}else if(state == 1){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d117      	bne.n	8001d9a <work_arm_deployer+0x76>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8001d6a:	4911      	ldr	r1, [pc, #68]	; (8001db0 <work_arm_deployer+0x8c>)
 8001d6c:	4811      	ldr	r0, [pc, #68]	; (8001db4 <work_arm_deployer+0x90>)
 8001d6e:	f7ff f9c6 	bl	80010fe <ServoDriver_Init>
		osDelay(100);
 8001d72:	2064      	movs	r0, #100	; 0x64
 8001d74:	f00b f8f8 	bl	800cf68 <osDelay>
		ServoDriver_SendValue(&servo_device2, 45.0f);
 8001d78:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001dac <work_arm_deployer+0x88>
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <work_arm_deployer+0x90>)
 8001d7e:	f7ff fa00 	bl	8001182 <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <work_arm_deployer+0x80>)
 8001d84:	4808      	ldr	r0, [pc, #32]	; (8001da8 <work_arm_deployer+0x84>)
 8001d86:	f7ff f9ba 	bl	80010fe <ServoDriver_Init>
		osDelay(100);
 8001d8a:	2064      	movs	r0, #100	; 0x64
 8001d8c:	f00b f8ec 	bl	800cf68 <osDelay>
		ServoDriver_SendValue(&servo_device1, 135.0f);
 8001d90:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001db8 <work_arm_deployer+0x94>
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <work_arm_deployer+0x84>)
 8001d96:	f7ff f9f4 	bl	8001182 <ServoDriver_SendValue>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200073c8 	.word	0x200073c8
 8001da8:	200073dc 	.word	0x200073dc
 8001dac:	42340000 	.word	0x42340000
 8001db0:	200073e0 	.word	0x200073e0
 8001db4:	200073f4 	.word	0x200073f4
 8001db8:	43070000 	.word	0x43070000

08001dbc <work_hand_setter>:

void work_hand_setter(int state){//state:{0:open,1:close}
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d107      	bne.n	8001dda <work_hand_setter+0x1e>
		  air_device.device_num=1;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <work_hand_setter+0x3c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4809      	ldr	r0, [pc, #36]	; (8001df8 <work_hand_setter+0x3c>)
 8001dd4:	f7ff f9f0 	bl	80011b8 <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=1;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8001dd8:	e009      	b.n	8001dee <work_hand_setter+0x32>
	  }else if(state == 1){
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <work_hand_setter+0x32>
		  air_device.device_num=1;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <work_hand_setter+0x3c>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8001de6:	2101      	movs	r1, #1
 8001de8:	4803      	ldr	r0, [pc, #12]	; (8001df8 <work_hand_setter+0x3c>)
 8001dea:	f7ff f9e5 	bl	80011b8 <AirCylinder_SendOutput>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200073f8 	.word	0x200073f8

08001dfc <work_arm_setter>:

void work_arm_setter(int state){//state:{0:up,1:down}
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d107      	bne.n	8001e1a <work_arm_setter+0x1e>
		  air_device.device_num=0;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <work_arm_setter+0x3c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8001e10:	2100      	movs	r1, #0
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <work_arm_setter+0x3c>)
 8001e14:	f7ff f9d0 	bl	80011b8 <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=0;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8001e18:	e009      	b.n	8001e2e <work_arm_setter+0x32>
	  }else if(state == 1){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <work_arm_setter+0x32>
		  air_device.device_num=0;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <work_arm_setter+0x3c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8001e26:	2101      	movs	r1, #1
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <work_arm_setter+0x3c>)
 8001e2a:	f7ff f9c5 	bl	80011b8 <AirCylinder_SendOutput>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200073f8 	.word	0x200073f8

08001e3c <base1_arm_setter>:

void base1_arm_setter(int state){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <base1_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M5_struct,0.0f);
 8001e4a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001e70 <base1_arm_setter+0x34>
 8001e4e:	4809      	ldr	r0, [pc, #36]	; (8001e74 <base1_arm_setter+0x38>)
 8001e50:	f7ff f93e 	bl	80010d0 <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
	}
}
 8001e54:	e007      	b.n	8001e66 <base1_arm_setter+0x2a>
	}else if(state == 1){
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d104      	bne.n	8001e66 <base1_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
 8001e5c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <base1_arm_setter+0x38>)
 8001e62:	f7ff f935 	bl	80010d0 <MCMD_SetTarget>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	00000000 	.word	0x00000000
 8001e74:	20007348 	.word	0x20007348

08001e78 <base1_hand_setter>:

void base1_hand_setter(int state){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <base1_hand_setter+0x1e>
		air_device.device_num=3;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <base1_hand_setter+0x3c>)
 8001e88:	2203      	movs	r2, #3
 8001e8a:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <base1_hand_setter+0x3c>)
 8001e90:	f7ff f992 	bl	80011b8 <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=3;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8001e94:	e009      	b.n	8001eaa <base1_hand_setter+0x32>
		}else if(state == 1){
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <base1_hand_setter+0x32>
			air_device.device_num=3;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <base1_hand_setter+0x3c>)
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <base1_hand_setter+0x3c>)
 8001ea6:	f7ff f987 	bl	80011b8 <AirCylinder_SendOutput>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200073f8 	.word	0x200073f8

08001eb8 <base2_arm_setter>:

void base2_arm_setter(int state){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <base2_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M6_struct,0.0f);
 8001ec6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001eec <base2_arm_setter+0x34>
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <base2_arm_setter+0x38>)
 8001ecc:	f7ff f900 	bl	80010d0 <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
	}
}
 8001ed0:	e007      	b.n	8001ee2 <base2_arm_setter+0x2a>
	}else if(state == 1){
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d104      	bne.n	8001ee2 <base2_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
 8001ed8:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <base2_arm_setter+0x38>)
 8001ede:	f7ff f8f7 	bl	80010d0 <MCMD_SetTarget>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	00000000 	.word	0x00000000
 8001ef0:	20007388 	.word	0x20007388

08001ef4 <base2_hand_setter>:

void base2_hand_setter(int state){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <base2_hand_setter+0x1e>
		air_device.device_num=2;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <base2_hand_setter+0x3c>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4809      	ldr	r0, [pc, #36]	; (8001f30 <base2_hand_setter+0x3c>)
 8001f0c:	f7ff f954 	bl	80011b8 <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=2;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8001f10:	e009      	b.n	8001f26 <base2_hand_setter+0x32>
		}else if(state == 1){
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <base2_hand_setter+0x32>
			air_device.device_num=2;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <base2_hand_setter+0x3c>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <base2_hand_setter+0x3c>)
 8001f22:	f7ff f949 	bl	80011b8 <AirCylinder_SendOutput>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200073f8 	.word	0x200073f8
 8001f34:	00000000 	.word	0x00000000

08001f38 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b0f2      	sub	sp, #456	; 0x1c8
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001f42:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001f46:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001f48:	f00d fcf0 	bl	800f92c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの設定
  	rmw_uros_set_custom_transport(
 8001f4c:	4bd2      	ldr	r3, [pc, #840]	; (8002298 <StartDefaultTask+0x360>)
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	4bd2      	ldr	r3, [pc, #840]	; (800229c <StartDefaultTask+0x364>)
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	4bd2      	ldr	r3, [pc, #840]	; (80022a0 <StartDefaultTask+0x368>)
 8001f56:	4ad3      	ldr	r2, [pc, #844]	; (80022a4 <StartDefaultTask+0x36c>)
 8001f58:	49d3      	ldr	r1, [pc, #844]	; (80022a8 <StartDefaultTask+0x370>)
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f012 fb9e 	bl	801469c <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001f60:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001f64:	4618      	mov	r0, r3
 8001f66:	f012 f82f 	bl	8013fc8 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8001f6a:	4bd0      	ldr	r3, [pc, #832]	; (80022ac <StartDefaultTask+0x374>)
 8001f6c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8001f70:	4bcf      	ldr	r3, [pc, #828]	; (80022b0 <StartDefaultTask+0x378>)
 8001f72:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	freeRTOS_allocator.reallocate = microros_reallocate;
 8001f76:	4bcf      	ldr	r3, [pc, #828]	; (80022b4 <StartDefaultTask+0x37c>)
 8001f78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001f7c:	4bce      	ldr	r3, [pc, #824]	; (80022b8 <StartDefaultTask+0x380>)
 8001f7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001f82:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001f86:	4618      	mov	r0, r3
 8001f88:	f012 f82c 	bl	8013fe4 <rcutils_set_default_allocator>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8001f98:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8001f9c:	48c7      	ldr	r0, [pc, #796]	; (80022bc <StartDefaultTask+0x384>)
 8001f9e:	f01d fc35 	bl	801f80c <iprintf>
  	}

  	osDelay(100);
 8001fa2:	2064      	movs	r0, #100	; 0x64
 8001fa4:	f00a ffe0 	bl	800cf68 <osDelay>

  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8001fa8:	4bc5      	ldr	r3, [pc, #788]	; (80022c0 <StartDefaultTask+0x388>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6898      	ldr	r0, [r3, #8]
 8001fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f01d fc97 	bl	801f8e8 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8001fba:	f010 fa35 	bl	8012428 <rcl_get_zero_initialized_init_options>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8001fc4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f012 f829 	bl	8014020 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8001fce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f010 fb30 	bl	8012638 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8001fd8:	f010 fdec 	bl	8012bb4 <rcl_get_zero_initialized_service>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  	publisher = rcl_get_zero_initialized_publisher();
 8001fe2:	f010 fcd3 	bl	801298c <rcl_get_zero_initialized_publisher>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4ab6      	ldr	r2, [pc, #728]	; (80022c4 <StartDefaultTask+0x38c>)
 8001fea:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 8001fec:	f010 ff06 	bl	8012dfc <rcl_get_zero_initialized_subscription>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  	rcl_subscription_t manipsub = rcl_get_zero_initialized_subscription();
 8001ff6:	f010 ff01 	bl	8012dfc <rcl_get_zero_initialized_subscription>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8002000:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002004:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002008:	4618      	mov	r0, r3
 800200a:	f011 fb87 	bl	801371c <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 800200e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002012:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002016:	4618      	mov	r0, r3
 8002018:	f010 fc88 	bl	801292c <rcl_node_get_default_options>

  	osDelay(100);
 800201c:	2064      	movs	r0, #100	; 0x64
 800201e:	f00a ffa3 	bl	800cf68 <osDelay>

  	//ノードの設定
  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002022:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 8002026:	466a      	mov	r2, sp
 8002028:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800202c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002030:	e882 0003 	stmia.w	r2, {r0, r1}
 8002034:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8002038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203a:	4620      	mov	r0, r4
 800203c:	f010 f9f6 	bl	801242c <rcl_init_options_init>
 8002040:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
 8002044:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <StartDefaultTask+0x122>
 800204c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002050:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8002054:	489c      	ldr	r0, [pc, #624]	; (80022c8 <StartDefaultTask+0x390>)
 8002056:	f01d fbd9 	bl	801f80c <iprintf>
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 800205a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f010 fae1 	bl	8012628 <rcl_init_options_set_domain_id>
 8002066:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
 800206a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <StartDefaultTask+0x148>
 8002072:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002076:	f240 21f1 	movw	r1, #753	; 0x2f1
 800207a:	4893      	ldr	r0, [pc, #588]	; (80022c8 <StartDefaultTask+0x390>)
 800207c:	f01d fbc6 	bl	801f80c <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002080:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002084:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8002088:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	f011 fe70 	bl	8013d78 <rclc_support_init_with_options>
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8002098:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800209c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80020a0:	f107 0320 	add.w	r3, r7, #32
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	4a88      	ldr	r2, [pc, #544]	; (80022cc <StartDefaultTask+0x394>)
 80020aa:	4989      	ldr	r1, [pc, #548]	; (80022d0 <StartDefaultTask+0x398>)
 80020ac:	f011 fe9a 	bl	8013de4 <rclc_node_init_with_options>
 80020b0:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 80020b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <StartDefaultTask+0x192>
 80020bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020c0:	f240 21f3 	movw	r1, #755	; 0x2f3
 80020c4:	4880      	ldr	r0, [pc, #512]	; (80022c8 <StartDefaultTask+0x390>)
 80020c6:	f01d fba1 	bl	801f80c <iprintf>
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 80020ca:	f00e f98f 	bl	80103ec <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80020d4:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 80020d8:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <StartDefaultTask+0x39c>)
 80020da:	f011 fef9 	bl	8013ed0 <rclc_service_init_default>
 80020de:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 80020e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <StartDefaultTask+0x1c0>
 80020ea:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80020ee:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80020f2:	4875      	ldr	r0, [pc, #468]	; (80022c8 <StartDefaultTask+0x390>)
 80020f4:	f01d fb8a 	bl	801f80c <iprintf>

	RCCHECK(rclc_publisher_init_default(
 80020f8:	f014 f98a 	bl	8016410 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002102:	4b75      	ldr	r3, [pc, #468]	; (80022d8 <StartDefaultTask+0x3a0>)
 8002104:	486f      	ldr	r0, [pc, #444]	; (80022c4 <StartDefaultTask+0x38c>)
 8002106:	f011 fea9 	bl	8013e5c <rclc_publisher_init_default>
 800210a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 800210e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <StartDefaultTask+0x1ec>
 8002116:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800211a:	f240 21f6 	movw	r1, #758	; 0x2f6
 800211e:	486a      	ldr	r0, [pc, #424]	; (80022c8 <StartDefaultTask+0x390>)
 8002120:	f01d fb74 	bl	801f80c <iprintf>
	  &publisher,
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

		RCCHECK(rclc_publisher_init_default(
 8002124:	f00e fa92 	bl	801064c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 8002128:	4602      	mov	r2, r0
 800212a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800212e:	4b6b      	ldr	r3, [pc, #428]	; (80022dc <StartDefaultTask+0x3a4>)
 8002130:	486b      	ldr	r0, [pc, #428]	; (80022e0 <StartDefaultTask+0x3a8>)
 8002132:	f011 fe93 	bl	8013e5c <rclc_publisher_init_default>
 8002136:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 800213a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <StartDefaultTask+0x218>
 8002142:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002146:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 800214a:	485f      	ldr	r0, [pc, #380]	; (80022c8 <StartDefaultTask+0x390>)
 800214c:	f01d fb5e 	bl	801f80c <iprintf>
		  &encpublisher,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002150:	f00e fa64 	bl	801061c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 8002154:	4602      	mov	r2, r0
 8002156:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800215a:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800215e:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <StartDefaultTask+0x3ac>)
 8002160:	f011 fef0 	bl	8013f44 <rclc_subscription_init_default>
 8002164:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8002168:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <StartDefaultTask+0x246>
 8002170:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002174:	f240 3102 	movw	r1, #770	; 0x302
 8002178:	4853      	ldr	r0, [pc, #332]	; (80022c8 <StartDefaultTask+0x390>)
 800217a:	f01d fb47 	bl	801f80c <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));

		RCCHECK(rclc_subscription_init_default(
 800217e:	f00e fc73 	bl	8010a68 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>
 8002182:	4602      	mov	r2, r0
 8002184:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002188:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800218c:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <StartDefaultTask+0x3b0>)
 800218e:	f011 fed9 	bl	8013f44 <rclc_subscription_init_default>
 8002192:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8002196:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <StartDefaultTask+0x274>
 800219e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80021a2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80021a6:	4848      	ldr	r0, [pc, #288]	; (80022c8 <StartDefaultTask+0x390>)
 80021a8:	f01d fb30 	bl	801f80c <iprintf>
		  &manipsub,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(manip_msgs, msg, Cmd),
		  "/manip_cmd_f7"));

		RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 80021ac:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80021b0:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80021b4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80021b8:	2203      	movs	r2, #3
 80021ba:	f011 fab9 	bl	8013730 <rclc_executor_init>
 80021be:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 80021c2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <StartDefaultTask+0x2a0>
 80021ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80021ce:	f240 310e 	movw	r1, #782	; 0x30e
 80021d2:	483d      	ldr	r0, [pc, #244]	; (80022c8 <StartDefaultTask+0x390>)
 80021d4:	f01d fb1a 	bl	801f80c <iprintf>

  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 80021d8:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80021dc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <StartDefaultTask+0x3b4>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <StartDefaultTask+0x3b8>)
 80021e6:	4a43      	ldr	r2, [pc, #268]	; (80022f4 <StartDefaultTask+0x3bc>)
 80021e8:	f011 fb5c 	bl	80138a4 <rclc_executor_add_service>
 80021ec:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 80021f0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <StartDefaultTask+0x2ce>
 80021f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021fc:	f44f 7144 	mov.w	r1, #784	; 0x310
 8002200:	4831      	ldr	r0, [pc, #196]	; (80022c8 <StartDefaultTask+0x390>)
 8002202:	f01d fb03 	bl	801f80c <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8002206:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800220a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <StartDefaultTask+0x3c0>)
 8002214:	4a39      	ldr	r2, [pc, #228]	; (80022fc <StartDefaultTask+0x3c4>)
 8002216:	f011 fb07 	bl	8013828 <rclc_executor_add_subscription>
 800221a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 800221e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <StartDefaultTask+0x2fc>
 8002226:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800222a:	f240 3111 	movw	r1, #785	; 0x311
 800222e:	4826      	ldr	r0, [pc, #152]	; (80022c8 <StartDefaultTask+0x390>)
 8002230:	f01d faec 	bl	801f80c <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));
  	RCCHECK(rclc_executor_add_subscription(
 8002234:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002238:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800223c:	2300      	movs	r3, #0
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <StartDefaultTask+0x3c8>)
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <StartDefaultTask+0x3cc>)
 8002244:	f011 faf0 	bl	8013828 <rclc_executor_add_subscription>
 8002248:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 800224c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <StartDefaultTask+0x32a>
 8002254:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002258:	f44f 7145 	mov.w	r1, #788	; 0x314
 800225c:	481a      	ldr	r0, [pc, #104]	; (80022c8 <StartDefaultTask+0x390>)
 800225e:	f01d fad5 	bl	801f80c <iprintf>
  	  		  &executor, &manipsub, &msub,
  	  		  &manipsub_callback, ON_NEW_DATA));

  	osDelay(100);
 8002262:	2064      	movs	r0, #100	; 0x64
 8002264:	f00a fe80 	bl	800cf68 <osDelay>

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 8002268:	4827      	ldr	r0, [pc, #156]	; (8002308 <StartDefaultTask+0x3d0>)
 800226a:	f013 ffe3 	bl	8016234 <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 800226e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002272:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002276:	4a25      	ldr	r2, [pc, #148]	; (800230c <StartDefaultTask+0x3d4>)
 8002278:	461c      	mov	r4, r3
 800227a:	4615      	mov	r5, r2
 800227c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800227e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2214      	movs	r2, #20
 800228a:	4619      	mov	r1, r3
 800228c:	481e      	ldr	r0, [pc, #120]	; (8002308 <StartDefaultTask+0x3d0>)
 800228e:	f014 f82f 	bl	80162f0 <rosidl_runtime_c__String__assignn>
    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8002292:	2200      	movs	r2, #0
 8002294:	e03c      	b.n	8002310 <StartDefaultTask+0x3d8>
 8002296:	bf00      	nop
 8002298:	080019bd 	.word	0x080019bd
 800229c:	0800195d 	.word	0x0800195d
 80022a0:	0800193d 	.word	0x0800193d
 80022a4:	08001911 	.word	0x08001911
 80022a8:	2000bd84 	.word	0x2000bd84
 80022ac:	08002775 	.word	0x08002775
 80022b0:	080027b9 	.word	0x080027b9
 80022b4:	080027f1 	.word	0x080027f1
 80022b8:	0800285d 	.word	0x0800285d
 80022bc:	08023324 	.word	0x08023324
 80022c0:	200009a0 	.word	0x200009a0
 80022c4:	200073fc 	.word	0x200073fc
 80022c8:	0802334c 	.word	0x0802334c
 80022cc:	08023378 	.word	0x08023378
 80022d0:	0802337c 	.word	0x0802337c
 80022d4:	08023384 	.word	0x08023384
 80022d8:	08023394 	.word	0x08023394
 80022dc:	080233a4 	.word	0x080233a4
 80022e0:	20007400 	.word	0x20007400
 80022e4:	080233b0 	.word	0x080233b0
 80022e8:	080233c0 	.word	0x080233c0
 80022ec:	08001b71 	.word	0x08001b71
 80022f0:	20007270 	.word	0x20007270
 80022f4:	20007258 	.word	0x20007258
 80022f8:	08001bbd 	.word	0x08001bbd
 80022fc:	20007278 	.word	0x20007278
 8002300:	08001c79 	.word	0x08001c79
 8002304:	200072a8 	.word	0x200072a8
 8002308:	200072e8 	.word	0x200072e8
 800230c:	080233e8 	.word	0x080233e8
 8002310:	4921      	ldr	r1, [pc, #132]	; (8002398 <StartDefaultTask+0x460>)
 8002312:	4822      	ldr	r0, [pc, #136]	; (800239c <StartDefaultTask+0x464>)
 8002314:	f010 fc08 	bl	8012b28 <rcl_publish>
 8002318:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 800231c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <StartDefaultTask+0x3fa>
 8002324:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002328:	f240 311e 	movw	r1, #798	; 0x31e
 800232c:	481c      	ldr	r0, [pc, #112]	; (80023a0 <StartDefaultTask+0x468>)
 800232e:	f01d fa6d 	bl	801f80c <iprintf>

    //ピンの初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	481b      	ldr	r0, [pc, #108]	; (80023a4 <StartDefaultTask+0x46c>)
 8002338:	f002 fbb0 	bl	8004a9c <HAL_GPIO_WritePin>
//	mcmdMoter8Setting();
//	servo1Setting();
//	servo2Setting();
//	airSetting();

	printf("All Setting Finished\r\n");
 800233c:	481a      	ldr	r0, [pc, #104]	; (80023a8 <StartDefaultTask+0x470>)
 800233e:	f01d facb 	bl	801f8d8 <puts>
	finishCANsetting = true;
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <StartDefaultTask+0x474>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	f00a fe0d 	bl	800cf68 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800234e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002352:	a30f      	add	r3, pc, #60	; (adr r3, 8002390 <StartDefaultTask+0x458>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	4608      	mov	r0, r1
 800235a:	f011 fcd3 	bl	8013d04 <rclc_executor_spin_some>
	  RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));//printfを見たいときはコメントアウト
 800235e:	2200      	movs	r2, #0
 8002360:	4913      	ldr	r1, [pc, #76]	; (80023b0 <StartDefaultTask+0x478>)
 8002362:	4814      	ldr	r0, [pc, #80]	; (80023b4 <StartDefaultTask+0x47c>)
 8002364:	f010 fbe0 	bl	8012b28 <rcl_publish>
 8002368:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 800236c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <StartDefaultTask+0x44a>
 8002374:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002378:	f240 313a 	movw	r1, #826	; 0x33a
 800237c:	4808      	ldr	r0, [pc, #32]	; (80023a0 <StartDefaultTask+0x468>)
 800237e:	f01d fa45 	bl	801f80c <iprintf>

	  osDelay(10);
 8002382:	200a      	movs	r0, #10
 8002384:	f00a fdf0 	bl	800cf68 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8002388:	e7e1      	b.n	800234e <StartDefaultTask+0x416>
 800238a:	bf00      	nop
 800238c:	f3af 8000 	nop.w
 8002390:	05f5e100 	.word	0x05f5e100
 8002394:	00000000 	.word	0x00000000
 8002398:	200072e8 	.word	0x200072e8
 800239c:	200073fc 	.word	0x200073fc
 80023a0:	080232f8 	.word	0x080232f8
 80023a4:	40020400 	.word	0x40020400
 80023a8:	080233d0 	.word	0x080233d0
 80023ac:	2000bc64 	.word	0x2000bc64
 80023b0:	200072f8 	.word	0x200072f8
 80023b4:	20007400 	.word	0x20007400

080023b8 <StartSysCheckTask>:
	  air_device.device_num=1;
	  AirCylinder_SendOutput(&air_device, AIR_OFF);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <StartSysCheckTask+0x34>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <StartSysCheckTask+0x2c>
		  if(!finishCheck){
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <StartSysCheckTask+0x38>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f083 0301 	eor.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <StartSysCheckTask+0x2c>
			  osDelay(1000);//このdelayは必要？
 80023d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023da:	f00a fdc5 	bl	800cf68 <osDelay>
			  //mcmdMotorCecker(&mcmd4M1_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
			  //mcmdMotorCecker(&mcmd4M2_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
			  //mcmdMotorCecker(&mcmd4M3_struct,MCMD_CTRL_VEL,-2.0f,10000,0.0f);
			  //mcmdMotorCecker(&mcmd4M4_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);

			  finishCheck = true;
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <StartSysCheckTask+0x38>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
//	  mcmdEncChecker(&mcmdM2_fb,&mcmd4M2_struct,100);
//	  mcmdEncChecker(&mcmdM3_fb,&mcmd4M3_struct,100);
//	  mcmdEncChecker(&mcmdM4_fb,&mcmd4M4_struct,100);
//	  mcmdEncChecker(&mcmdM5_fb,&mcmd4M5_struct,100);
//	  mcmdEncChecker(&mcmdM6_fb,&mcmd4M6_struct,100);
	  osDelay(10);
 80023e4:	200a      	movs	r0, #10
 80023e6:	f00a fdbf 	bl	800cf68 <osDelay>
	  if(finishCANsetting){
 80023ea:	e7e9      	b.n	80023c0 <StartSysCheckTask+0x8>
 80023ec:	2000bc64 	.word	0x2000bc64
 80023f0:	2000bc78 	.word	0x2000bc78

080023f4 <StartMotorRunTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorRunTask */
void StartMotorRunTask(void *argument)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //motorRun();

    osDelay(10);
 80023fc:	200a      	movs	r0, #10
 80023fe:	f00a fdb3 	bl	800cf68 <osDelay>
 8002402:	e7fb      	b.n	80023fc <StartMotorRunTask+0x8>

08002404 <read_encoder1_value>:
* @param argument: Not used
* @retval None
*/

int16_t read_encoder1_value(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
  uint16_t enc_buff = TIM1->CNT;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <read_encoder1_value+0x24>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	80fb      	strh	r3, [r7, #6]
  TIM1->CNT = 0;//初期化
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <read_encoder1_value+0x24>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
  return (int16_t)enc_buff;
 8002416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40010000 	.word	0x40010000

0800242c <read_encoder2_value>:

int16_t read_encoder2_value(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
  uint16_t enc_buff = TIM8->CNT;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <read_encoder2_value+0x24>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	80fb      	strh	r3, [r7, #6]
  TIM8->CNT = 0;//初期化
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <read_encoder2_value+0x24>)
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
  return (int16_t)enc_buff;
 800243e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40010400 	.word	0x40010400

08002454 <StartEncorderTask>:
int64_t count1;
int64_t count2;
float quant_per_unit = 1.0/4096.0f;
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 8002454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartEncorderTask */
	//エンコーダーの読み取りをスタート
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800245e:	213c      	movs	r1, #60	; 0x3c
 8002460:	482d      	ldr	r0, [pc, #180]	; (8002518 <StartEncorderTask+0xc4>)
 8002462:	f005 f905 	bl	8007670 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8002466:	213c      	movs	r1, #60	; 0x3c
 8002468:	482c      	ldr	r0, [pc, #176]	; (800251c <StartEncorderTask+0xc8>)
 800246a:	f005 f901 	bl	8007670 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  for(;;)
  {
	  count1 += read_encoder1_value();
 800246e:	f7ff ffc9 	bl	8002404 <read_encoder1_value>
 8002472:	4603      	mov	r3, r0
 8002474:	b21b      	sxth	r3, r3
 8002476:	17da      	asrs	r2, r3, #31
 8002478:	4698      	mov	r8, r3
 800247a:	4691      	mov	r9, r2
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <StartEncorderTask+0xcc>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	eb18 0102 	adds.w	r1, r8, r2
 8002486:	6039      	str	r1, [r7, #0]
 8002488:	eb49 0303 	adc.w	r3, r9, r3
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <StartEncorderTask+0xcc>)
 8002490:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002494:	e9c3 1200 	strd	r1, r2, [r3]
	  count2 += read_encoder2_value();
 8002498:	f7ff ffc8 	bl	800242c <read_encoder2_value>
 800249c:	4603      	mov	r3, r0
 800249e:	b21b      	sxth	r3, r3
 80024a0:	17da      	asrs	r2, r3, #31
 80024a2:	461c      	mov	r4, r3
 80024a4:	4615      	mov	r5, r2
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <StartEncorderTask+0xd0>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	eb14 0a02 	adds.w	sl, r4, r2
 80024b0:	eb45 0b03 	adc.w	fp, r5, r3
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <StartEncorderTask+0xd0>)
 80024b6:	e9c3 ab00 	strd	sl, fp, [r3]

//	  enc.encfontright = Get_MCMD_Feedback(&(mcmd4M1_struct.device)).value;
//	  enc.encfrontleft = Get_MCMD_Feedback(&(mcmd4M2_struct.device)).value;
//	  enc.encbackright = Get_MCMD_Feedback(&(mcmd4M3_struct.device)).value;
//	  enc.encbackleft = Get_MCMD_Feedback(&(mcmd4M4_struct.device)).value;
	  enc.enclx = (int)(count1*quant_per_unit);
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <StartEncorderTask+0xcc>)
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe f9b0 	bl	8000828 <__aeabi_l2f>
 80024c8:	ee07 0a10 	vmov	s14, r0
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <StartEncorderTask+0xd4>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <StartEncorderTask+0xd8>)
 80024e0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	  enc.encly = (int)(count2*quant_per_unit);
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <StartEncorderTask+0xd0>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f7fe f99b 	bl	8000828 <__aeabi_l2f>
 80024f2:	ee07 0a10 	vmov	s14, r0
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <StartEncorderTask+0xd4>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002504:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <StartEncorderTask+0xd8>)
 800250a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
//	  enc.encadditional = Get_MCMD_Feedback(&(mcmd4M6_struct.device)).value;

    osDelay(100);
 800250e:	2064      	movs	r0, #100	; 0x64
 8002510:	f00a fd2a 	bl	800cf68 <osDelay>
	  count1 += read_encoder1_value();
 8002514:	e7ab      	b.n	800246e <StartEncorderTask+0x1a>
 8002516:	bf00      	nop
 8002518:	2000bcec 	.word	0x2000bcec
 800251c:	2000bd38 	.word	0x2000bd38
 8002520:	2000bc80 	.word	0x2000bc80
 8002524:	2000bc88 	.word	0x2000bc88
 8002528:	20000000 	.word	0x20000000
 800252c:	200072f8 	.word	0x200072f8

08002530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
 8002544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <MX_GPIO_Init+0xd8>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <MX_GPIO_Init+0xd8>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <MX_GPIO_Init+0xd8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800255e:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <MX_GPIO_Init+0xd8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a29      	ldr	r2, [pc, #164]	; (8002608 <MX_GPIO_Init+0xd8>)
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <MX_GPIO_Init+0xd8>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <MX_GPIO_Init+0xd8>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a23      	ldr	r2, [pc, #140]	; (8002608 <MX_GPIO_Init+0xd8>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <MX_GPIO_Init+0xd8>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <MX_GPIO_Init+0xd8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <MX_GPIO_Init+0xd8>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <MX_GPIO_Init+0xd8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <MX_GPIO_Init+0xd8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <MX_GPIO_Init+0xd8>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <MX_GPIO_Init+0xd8>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <MX_GPIO_Init+0xd8>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <MX_GPIO_Init+0xd8>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_GPIO_Init+0xd8>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 80025d6:	2200      	movs	r2, #0
 80025d8:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <MX_GPIO_Init+0xdc>)
 80025de:	f002 fa5d 	bl	8004a9c <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 80025e2:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80025e6:	61fb      	str	r3, [r7, #28]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e8:	2301      	movs	r3, #1
 80025ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	4804      	ldr	r0, [pc, #16]	; (800260c <MX_GPIO_Init+0xdc>)
 80025fc:	f002 f8a2 	bl	8004744 <HAL_GPIO_Init>

}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	40020400 	.word	0x40020400

08002610 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 800261a:	1df9      	adds	r1, r7, #7
 800261c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002620:	2201      	movs	r2, #1
 8002622:	4804      	ldr	r0, [pc, #16]	; (8002634 <__io_putchar+0x24>)
 8002624:	f005 fbba 	bl	8007d9c <HAL_UART_Transmit>
    return ch;
 8002628:	79fb      	ldrb	r3, [r7, #7]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2000bd84 	.word	0x2000bd84

08002638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f000 fe33 	bl	80032a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f814 	bl	800266c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002644:	f7ff ff74 	bl	8002530 <MX_GPIO_Init>
  MX_DMA_Init();
 8002648:	f7ff f93c 	bl	80018c4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800264c:	f000 fd02 	bl	8003054 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002650:	f000 fbd6 	bl	8002e00 <MX_TIM1_Init>
  MX_CAN1_Init();
 8002654:	f7fe fe50 	bl	80012f8 <MX_CAN1_Init>
  MX_TIM8_Init();
 8002658:	f000 fc2c 	bl	8002eb4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800265c:	f00a fb74 	bl	800cd48 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002660:	f7ff fa4a 	bl	8001af8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002664:	f00a fba4 	bl	800cdb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002668:	e7fe      	b.n	8002668 <main+0x30>
	...

0800266c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b094      	sub	sp, #80	; 0x50
 8002670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	2234      	movs	r2, #52	; 0x34
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f01d fb72 	bl	801fd64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <SystemClock_Config+0xd8>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <SystemClock_Config+0xd8>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6413      	str	r3, [r2, #64]	; 0x40
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <SystemClock_Config+0xd8>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <SystemClock_Config+0xdc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026b0:	4a25      	ldr	r2, [pc, #148]	; (8002748 <SystemClock_Config+0xdc>)
 80026b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <SystemClock_Config+0xdc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026c4:	2301      	movs	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ce:	2302      	movs	r3, #2
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026d8:	2304      	movs	r3, #4
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80026dc:	2360      	movs	r3, #96	; 0x60
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e0:	2302      	movs	r3, #2
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026e4:	2304      	movs	r3, #4
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026e8:	2302      	movs	r3, #2
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 fd0f 	bl	8006114 <HAL_RCC_OscConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026fc:	f000 f835 	bl	800276a <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002700:	f003 fcb8 	bl	8006074 <HAL_PWREx_EnableOverDrive>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800270a:	f000 f82e 	bl	800276a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800270e:	230f      	movs	r3, #15
 8002710:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002712:	2302      	movs	r3, #2
 8002714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800271a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002724:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	2103      	movs	r1, #3
 800272c:	4618      	mov	r0, r3
 800272e:	f003 ff9f 	bl	8006670 <HAL_RCC_ClockConfig>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002738:	f000 f817 	bl	800276a <Error_Handler>
  }
}
 800273c:	bf00      	nop
 800273e:	3750      	adds	r7, #80	; 0x50
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000

0800274c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d101      	bne.n	8002762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800275e:	f000 fdaf 	bl	80032c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800276e:	b672      	cpsid	i
}
 8002770:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002772:	e7fe      	b.n	8002772 <Error_Handler+0x8>

08002774 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <microros_allocate+0x3c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	461a      	mov	r2, r3
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <microros_allocate+0x3c>)
 800278c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <microros_allocate+0x40>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <microros_allocate+0x40>)
 800279c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fe3c 	bl	800141c <pvPortMallocMicroROS>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000bc90 	.word	0x2000bc90
 80027b4:	2000bc94 	.word	0x2000bc94

080027b8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00c      	beq.n	80027e2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7fe ff4f 	bl	800166c <getBlockSize>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a06      	ldr	r2, [pc, #24]	; (80027ec <microros_deallocate+0x34>)
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <microros_deallocate+0x34>)
 80027da:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe fee7 	bl	80015b0 <vPortFreeMicroROS>
  }
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000bc94 	.word	0x2000bc94

080027f0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80027fc:	4b15      	ldr	r3, [pc, #84]	; (8002854 <microros_reallocate+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4413      	add	r3, r2
 8002806:	461a      	mov	r2, r3
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <microros_reallocate+0x64>)
 800280a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <microros_reallocate+0x68>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4413      	add	r3, r2
 8002816:	461a      	mov	r2, r3
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <microros_reallocate+0x68>)
 800281a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002822:	68b8      	ldr	r0, [r7, #8]
 8002824:	f7fe fdfa 	bl	800141c <pvPortMallocMicroROS>
 8002828:	4603      	mov	r3, r0
 800282a:	e00e      	b.n	800284a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7fe ff1d 	bl	800166c <getBlockSize>
 8002832:	4603      	mov	r3, r0
 8002834:	4a08      	ldr	r2, [pc, #32]	; (8002858 <microros_reallocate+0x68>)
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	461a      	mov	r2, r3
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <microros_reallocate+0x68>)
 800283e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7fe ff30 	bl	80016a8 <pvPortReallocMicroROS>
 8002848:	4603      	mov	r3, r0
  }
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000bc90 	.word	0x2000bc90
 8002858:	2000bc94 	.word	0x2000bc94

0800285c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <microros_zero_allocate+0x48>)
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	4413      	add	r3, r2
 8002876:	461a      	mov	r2, r3
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <microros_zero_allocate+0x48>)
 800287a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <microros_zero_allocate+0x4c>)
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	4413      	add	r3, r2
 800288a:	461a      	mov	r2, r3
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <microros_zero_allocate+0x4c>)
 800288e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7fe ff35 	bl	8001702 <pvPortCallocMicroROS>
 8002898:	4603      	mov	r3, r0
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2000bc90 	.word	0x2000bc90
 80028a8:	2000bc94 	.word	0x2000bc94
 80028ac:	00000000 	.word	0x00000000

080028b0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80028b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80028c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028c6:	a320      	add	r3, pc, #128	; (adr r3, 8002948 <UTILS_NanosecondsToTimespec+0x98>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f7fd ffea 	bl	80008a4 <__aeabi_ldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80028da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028de:	a31a      	add	r3, pc, #104	; (adr r3, 8002948 <UTILS_NanosecondsToTimespec+0x98>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd ffde 	bl	80008a4 <__aeabi_ldivmod>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	da20      	bge.n	8002936 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a11      	ldr	r2, [pc, #68]	; (8002940 <UTILS_NanosecondsToTimespec+0x90>)
 80028fa:	fb82 1203 	smull	r1, r2, r2, r3
 80028fe:	1712      	asrs	r2, r2, #28
 8002900:	17db      	asrs	r3, r3, #31
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	6979      	ldr	r1, [r7, #20]
 8002910:	17c8      	asrs	r0, r1, #31
 8002912:	460c      	mov	r4, r1
 8002914:	4605      	mov	r5, r0
 8002916:	ebb2 0804 	subs.w	r8, r2, r4
 800291a:	eb63 0905 	sbc.w	r9, r3, r5
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	4906      	ldr	r1, [pc, #24]	; (8002944 <UTILS_NanosecondsToTimespec+0x94>)
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	441a      	add	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	609a      	str	r2, [r3, #8]
    }
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002940:	44b82fa1 	.word	0x44b82fa1
 8002944:	3b9aca00 	.word	0x3b9aca00
 8002948:	3b9aca00 	.word	0x3b9aca00
 800294c:	00000000 	.word	0x00000000

08002950 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002954:	b08e      	sub	sp, #56	; 0x38
 8002956:	af00      	add	r7, sp, #0
 8002958:	6278      	str	r0, [r7, #36]	; 0x24
 800295a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800295c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002960:	2300      	movs	r3, #0
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002976:	4618      	mov	r0, r3
 8002978:	f00b fdf4 	bl	800e564 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	17da      	asrs	r2, r3, #31
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	61fa      	str	r2, [r7, #28]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	000b      	movs	r3, r1
 8002990:	2200      	movs	r2, #0
 8002992:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	2200      	movs	r2, #0
 800299a:	461c      	mov	r4, r3
 800299c:	4615      	mov	r5, r2
 800299e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029a2:	1911      	adds	r1, r2, r4
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	416b      	adcs	r3, r5
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80029ae:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80029b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	f04f 0400 	mov.w	r4, #0
 80029be:	f04f 0500 	mov.w	r5, #0
 80029c2:	015d      	lsls	r5, r3, #5
 80029c4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80029c8:	0154      	lsls	r4, r2, #5
 80029ca:	4622      	mov	r2, r4
 80029cc:	462b      	mov	r3, r5
 80029ce:	ebb2 0800 	subs.w	r8, r2, r0
 80029d2:	eb63 0901 	sbc.w	r9, r3, r1
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80029e2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80029e6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80029ea:	4690      	mov	r8, r2
 80029ec:	4699      	mov	r9, r3
 80029ee:	eb18 0a00 	adds.w	sl, r8, r0
 80029f2:	eb49 0b01 	adc.w	fp, r9, r1
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a02:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a06:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a0a:	ebb2 040a 	subs.w	r4, r2, sl
 8002a0e:	603c      	str	r4, [r7, #0]
 8002a10:	eb63 030b 	sbc.w	r3, r3, fp
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	181b      	adds	r3, r3, r0
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	462b      	mov	r3, r5
 8002a22:	eb41 0303 	adc.w	r3, r1, r3
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a2e:	f7ff ff3f 	bl	80028b0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	3738      	adds	r7, #56	; 0x38
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	210f      	movs	r1, #15
 8002a7a:	f06f 0001 	mvn.w	r0, #1
 8002a7e:	f001 fa21 	bl	8003ec4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08e      	sub	sp, #56	; 0x38
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002aa0:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <HAL_InitTick+0xe4>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <HAL_InitTick+0xe4>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002aac:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_InitTick+0xe4>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ab8:	f107 0210 	add.w	r2, r7, #16
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 fffa 	bl	8006abc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ad2:	f003 ffcb 	bl	8006a6c <HAL_RCC_GetPCLK1Freq>
 8002ad6:	6378      	str	r0, [r7, #52]	; 0x34
 8002ad8:	e004      	b.n	8002ae4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ada:	f003 ffc7 	bl	8006a6c <HAL_RCC_GetPCLK1Freq>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <HAL_InitTick+0xe8>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	3b01      	subs	r3, #1
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_InitTick+0xec>)
 8002af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002af8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_InitTick+0xec>)
 8002afc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b00:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002b02:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_InitTick+0xec>)
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <HAL_InitTick+0xec>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_InitTick+0xec>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_InitTick+0xec>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002b1a:	4818      	ldr	r0, [pc, #96]	; (8002b7c <HAL_InitTick+0xec>)
 8002b1c:	f004 fc28 	bl	8007370 <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002b26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11b      	bne.n	8002b66 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002b2e:	4813      	ldr	r0, [pc, #76]	; (8002b7c <HAL_InitTick+0xec>)
 8002b30:	f004 fc80 	bl	8007434 <HAL_TIM_Base_Start_IT>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d111      	bne.n	8002b66 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b42:	201c      	movs	r0, #28
 8002b44:	f001 f9da 	bl	8003efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b0f      	cmp	r3, #15
 8002b4c:	d808      	bhi.n	8002b60 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	201c      	movs	r0, #28
 8002b54:	f001 f9b6 	bl	8003ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b58:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_InitTick+0xf0>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e002      	b.n	8002b66 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3738      	adds	r7, #56	; 0x38
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	431bde83 	.word	0x431bde83
 8002b7c:	2000bc98 	.word	0x2000bc98
 8002b80:	2000000c 	.word	0x2000000c

08002b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <NMI_Handler+0x4>

08002b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8e:	e7fe      	b.n	8002b8e <HardFault_Handler+0x4>

08002b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <MemManage_Handler+0x4>

08002b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9a:	e7fe      	b.n	8002b9a <BusFault_Handler+0x4>

08002b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <UsageFault_Handler+0x4>

08002ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA1_Stream1_IRQHandler+0x10>)
 8002bb6:	f001 fb4f 	bl	8004258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000be0c 	.word	0x2000be0c

08002bc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <DMA1_Stream3_IRQHandler+0x10>)
 8002bca:	f001 fb45 	bl	8004258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000be6c 	.word	0x2000be6c

08002bd8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <CAN1_TX_IRQHandler+0x10>)
 8002bde:	f000 fec5 	bl	800396c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20002e0c 	.word	0x20002e0c

08002bec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <CAN1_RX0_IRQHandler+0x10>)
 8002bf2:	f000 febb 	bl	800396c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20002e0c 	.word	0x20002e0c

08002c00 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <CAN1_RX1_IRQHandler+0x10>)
 8002c06:	f000 feb1 	bl	800396c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20002e0c 	.word	0x20002e0c

08002c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <TIM2_IRQHandler+0x10>)
 8002c1a:	f004 fdb7 	bl	800778c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000bc98 	.word	0x2000bc98

08002c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <USART3_IRQHandler+0x10>)
 8002c2e:	f005 fa8b 	bl	8008148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000bd84 	.word	0x2000bd84

08002c3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <OTG_FS_IRQHandler+0x10>)
 8002c42:	f002 f8a4 	bl	8004d8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20011cf8 	.word	0x20011cf8

08002c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return 1;
 8002c54:	2301      	movs	r3, #1
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_kill>:

int _kill(int pid, int sig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c6a:	f01d f913 	bl	801fe94 <__errno>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2216      	movs	r2, #22
 8002c72:	601a      	str	r2, [r3, #0]
  return -1;
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_exit>:

void _exit (int status)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ffe7 	bl	8002c60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c92:	e7fe      	b.n	8002c92 <_exit+0x12>

08002c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e00a      	b.n	8002cbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ca6:	f3af 8000 	nop.w
 8002caa:	4601      	mov	r1, r0
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	60ba      	str	r2, [r7, #8]
 8002cb2:	b2ca      	uxtb	r2, r1
 8002cb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	dbf0      	blt.n	8002ca6 <_read+0x12>
  }

  return len;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e009      	b.n	8002cf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	60ba      	str	r2, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fc91 	bl	8002610 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf1      	blt.n	8002ce0 <_write+0x12>
  }
  return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_close>:

int _close(int file)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <_isatty>:

int _isatty(int file)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f01d f878 	bl	801fe94 <__errno>
 8002da4:	4603      	mov	r3, r0
 8002da6:	220c      	movs	r2, #12
 8002da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20080000 	.word	0x20080000
 8002dd0:	00000400 	.word	0x00000400
 8002dd4:	2000bce8 	.word	0x2000bce8
 8002dd8:	20017070 	.word	0x20017070

08002ddc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <SystemInit+0x20>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <SystemInit+0x20>)
 8002de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f01c ffa8 	bl	801fd64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	463b      	mov	r3, r7
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e20:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <MX_TIM1_Init+0xb0>)
 8002e22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e38:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e52:	2301      	movs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e62:	2301      	movs	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	4619      	mov	r1, r3
 8002e74:	480d      	ldr	r0, [pc, #52]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e76:	f004 fb55 	bl	8007524 <HAL_TIM_Encoder_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002e80:	f7ff fc73 	bl	800276a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e90:	463b      	mov	r3, r7
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	; (8002eac <MX_TIM1_Init+0xac>)
 8002e96:	f004 fe87 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002ea0:	f7ff fc63 	bl	800276a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	3730      	adds	r7, #48	; 0x30
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000bcec 	.word	0x2000bcec
 8002eb0:	40010000 	.word	0x40010000

08002eb4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f01c ff4e 	bl	801fd64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	463b      	mov	r3, r7
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ed2:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <MX_TIM8_Init+0xb0>)
 8002ed6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002efe:	2303      	movs	r3, #3
 8002f00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f06:	2301      	movs	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f16:	2301      	movs	r3, #1
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	4619      	mov	r1, r3
 8002f28:	480d      	ldr	r0, [pc, #52]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002f2a:	f004 fafb 	bl	8007524 <HAL_TIM_Encoder_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002f34:	f7ff fc19 	bl	800276a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f44:	463b      	mov	r3, r7
 8002f46:	4619      	mov	r1, r3
 8002f48:	4805      	ldr	r0, [pc, #20]	; (8002f60 <MX_TIM8_Init+0xac>)
 8002f4a:	f004 fe2d 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002f54:	f7ff fc09 	bl	800276a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f58:	bf00      	nop
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	2000bd38 	.word	0x2000bd38
 8002f64:	40010400 	.word	0x40010400

08002f68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 031c 	add.w	r3, r7, #28
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2e      	ldr	r2, [pc, #184]	; (8003040 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d129      	bne.n	8002fde <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a2d      	ldr	r2, [pc, #180]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fa2:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a27      	ldr	r2, [pc, #156]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002fa8:	f043 0310 	orr.w	r3, r3, #16
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002fba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fd0:	f107 031c 	add.w	r3, r7, #28
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	481c      	ldr	r0, [pc, #112]	; (8003048 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002fd8:	f001 fbb4 	bl	8004744 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002fdc:	e02c      	b.n	8003038 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(tim_encoderHandle->Instance==TIM8)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d127      	bne.n	8003038 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	6313      	str	r3, [r2, #48]	; 0x30
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_TIM_Encoder_MspInit+0xdc>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003018:	23c0      	movs	r3, #192	; 0xc0
 800301a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003028:	2303      	movs	r3, #3
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	4619      	mov	r1, r3
 8003032:	4807      	ldr	r0, [pc, #28]	; (8003050 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003034:	f001 fb86 	bl	8004744 <HAL_GPIO_Init>
}
 8003038:	bf00      	nop
 800303a:	3730      	adds	r7, #48	; 0x30
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40010000 	.word	0x40010000
 8003044:	40023800 	.word	0x40023800
 8003048:	40021000 	.word	0x40021000
 800304c:	40010400 	.word	0x40010400
 8003050:	40020800 	.word	0x40020800

08003054 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <MX_USART3_UART_Init+0x58>)
 800305a:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <MX_USART3_UART_Init+0x5c>)
 800305c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <MX_USART3_UART_Init+0x58>)
 8003060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003064:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <MX_USART3_UART_Init+0x58>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <MX_USART3_UART_Init+0x58>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <MX_USART3_UART_Init+0x58>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <MX_USART3_UART_Init+0x58>)
 800307a:	220c      	movs	r2, #12
 800307c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <MX_USART3_UART_Init+0x58>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <MX_USART3_UART_Init+0x58>)
 8003086:	2200      	movs	r2, #0
 8003088:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <MX_USART3_UART_Init+0x58>)
 800308c:	2200      	movs	r2, #0
 800308e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <MX_USART3_UART_Init+0x58>)
 8003092:	2200      	movs	r2, #0
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003096:	4805      	ldr	r0, [pc, #20]	; (80030ac <MX_USART3_UART_Init+0x58>)
 8003098:	f004 fe32 	bl	8007d00 <HAL_UART_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80030a2:	f7ff fb62 	bl	800276a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000bd84 	.word	0x2000bd84
 80030b0:	40004800 	.word	0x40004800

080030b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0ae      	sub	sp, #184	; 0xb8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2290      	movs	r2, #144	; 0x90
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f01c fe45 	bl	801fd64 <memset>
  if(uartHandle->Instance==USART3)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a56      	ldr	r2, [pc, #344]	; (8003238 <HAL_UART_MspInit+0x184>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	f040 80a4 	bne.w	800322e <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80030e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80030ec:	2300      	movs	r3, #0
 80030ee:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fd13 	bl	8006b20 <HAL_RCCEx_PeriphCLKConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003100:	f7ff fb33 	bl	800276a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003104:	4b4d      	ldr	r3, [pc, #308]	; (800323c <HAL_UART_MspInit+0x188>)
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	4a4c      	ldr	r2, [pc, #304]	; (800323c <HAL_UART_MspInit+0x188>)
 800310a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310e:	6413      	str	r3, [r2, #64]	; 0x40
 8003110:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_UART_MspInit+0x188>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800311c:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_UART_MspInit+0x188>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	4a46      	ldr	r2, [pc, #280]	; (800323c <HAL_UART_MspInit+0x188>)
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	6313      	str	r3, [r2, #48]	; 0x30
 8003128:	4b44      	ldr	r3, [pc, #272]	; (800323c <HAL_UART_MspInit+0x188>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003134:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313c:	2302      	movs	r3, #2
 800313e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003148:	2303      	movs	r3, #3
 800314a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800314e:	2307      	movs	r3, #7
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003154:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003158:	4619      	mov	r1, r3
 800315a:	4839      	ldr	r0, [pc, #228]	; (8003240 <HAL_UART_MspInit+0x18c>)
 800315c:	f001 faf2 	bl	8004744 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003160:	4b38      	ldr	r3, [pc, #224]	; (8003244 <HAL_UART_MspInit+0x190>)
 8003162:	4a39      	ldr	r2, [pc, #228]	; (8003248 <HAL_UART_MspInit+0x194>)
 8003164:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003166:	4b37      	ldr	r3, [pc, #220]	; (8003244 <HAL_UART_MspInit+0x190>)
 8003168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800316c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800316e:	4b35      	ldr	r3, [pc, #212]	; (8003244 <HAL_UART_MspInit+0x190>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003174:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_UART_MspInit+0x190>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800317a:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_UART_MspInit+0x190>)
 800317c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003180:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_UART_MspInit+0x190>)
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003188:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_UART_MspInit+0x190>)
 800318a:	2200      	movs	r2, #0
 800318c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_UART_MspInit+0x190>)
 8003190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003194:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003196:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <HAL_UART_MspInit+0x190>)
 8003198:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800319c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_UART_MspInit+0x190>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80031a4:	4827      	ldr	r0, [pc, #156]	; (8003244 <HAL_UART_MspInit+0x190>)
 80031a6:	f000 feb7 	bl	8003f18 <HAL_DMA_Init>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80031b0:	f7ff fadb 	bl	800276a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a23      	ldr	r2, [pc, #140]	; (8003244 <HAL_UART_MspInit+0x190>)
 80031b8:	675a      	str	r2, [r3, #116]	; 0x74
 80031ba:	4a22      	ldr	r2, [pc, #136]	; (8003244 <HAL_UART_MspInit+0x190>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80031c0:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_UART_MspInit+0x198>)
 80031c2:	4a23      	ldr	r2, [pc, #140]	; (8003250 <HAL_UART_MspInit+0x19c>)
 80031c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_UART_MspInit+0x198>)
 80031c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_UART_MspInit+0x198>)
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_UART_MspInit+0x198>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_UART_MspInit+0x198>)
 80031dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_UART_MspInit+0x198>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_UART_MspInit+0x198>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_UART_MspInit+0x198>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_UART_MspInit+0x198>)
 80031f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <HAL_UART_MspInit+0x198>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003202:	4812      	ldr	r0, [pc, #72]	; (800324c <HAL_UART_MspInit+0x198>)
 8003204:	f000 fe88 	bl	8003f18 <HAL_DMA_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 800320e:	f7ff faac 	bl	800276a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <HAL_UART_MspInit+0x198>)
 8003216:	671a      	str	r2, [r3, #112]	; 0x70
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <HAL_UART_MspInit+0x198>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2105      	movs	r1, #5
 8003222:	2027      	movs	r0, #39	; 0x27
 8003224:	f000 fe4e 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003228:	2027      	movs	r0, #39	; 0x27
 800322a:	f000 fe67 	bl	8003efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800322e:	bf00      	nop
 8003230:	37b8      	adds	r7, #184	; 0xb8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40004800 	.word	0x40004800
 800323c:	40023800 	.word	0x40023800
 8003240:	40020c00 	.word	0x40020c00
 8003244:	2000be0c 	.word	0x2000be0c
 8003248:	40026028 	.word	0x40026028
 800324c:	2000be6c 	.word	0x2000be6c
 8003250:	40026058 	.word	0x40026058

08003254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800328c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800325a:	490e      	ldr	r1, [pc, #56]	; (8003294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003260:	e002      	b.n	8003268 <LoopCopyDataInit>

08003262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003266:	3304      	adds	r3, #4

08003268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800326c:	d3f9      	bcc.n	8003262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003270:	4c0b      	ldr	r4, [pc, #44]	; (80032a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003274:	e001      	b.n	800327a <LoopFillZerobss>

08003276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003278:	3204      	adds	r2, #4

0800327a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800327c:	d3fb      	bcc.n	8003276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800327e:	f7ff fdad 	bl	8002ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003282:	f01c fe0d 	bl	801fea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003286:	f7ff f9d7 	bl	8002638 <main>
  bx  lr    
 800328a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800328c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003294:	20000b10 	.word	0x20000b10
  ldr r2, =_sidata
 8003298:	08024f10 	.word	0x08024f10
  ldr r2, =_sbss
 800329c:	20000b10 	.word	0x20000b10
  ldr r4, =_ebss
 80032a0:	20017070 	.word	0x20017070

080032a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a4:	e7fe      	b.n	80032a4 <ADC_IRQHandler>

080032a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032aa:	2003      	movs	r0, #3
 80032ac:	f000 fdff 	bl	8003eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032b0:	200f      	movs	r0, #15
 80032b2:	f7ff fbed 	bl	8002a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b6:	f7ff fbc3 	bl	8002a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_IncTick+0x20>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x24>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <HAL_IncTick+0x24>)
 80032d2:	6013      	str	r3, [r2, #0]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000010 	.word	0x20000010
 80032e4:	2000becc 	.word	0x2000becc

080032e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return uwTick;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HAL_GetTick+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	2000becc 	.word	0x2000becc

08003300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff ffee 	bl	80032e8 <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003318:	d005      	beq.n	8003326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_Delay+0x44>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003326:	bf00      	nop
 8003328:	f7ff ffde 	bl	80032e8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d8f7      	bhi.n	8003328 <HAL_Delay+0x28>
  {
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000010 	.word	0x20000010

08003348 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0ed      	b.n	8003536 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fffc 	bl	8001364 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800337c:	f7ff ffb4 	bl	80032e8 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003382:	e012      	b.n	80033aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003384:	f7ff ffb0 	bl	80032e8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b0a      	cmp	r3, #10
 8003390:	d90b      	bls.n	80033aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2205      	movs	r2, #5
 80033a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0c5      	b.n	8003536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0e5      	beq.n	8003384 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0202 	bic.w	r2, r2, #2
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c8:	f7ff ff8e 	bl	80032e8 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033ce:	e012      	b.n	80033f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033d0:	f7ff ff8a 	bl	80032e8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b0a      	cmp	r3, #10
 80033dc:	d90b      	bls.n	80033f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2205      	movs	r2, #5
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e09f      	b.n	8003536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7e1b      	ldrb	r3, [r3, #24]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d108      	bne.n	800341e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e007      	b.n	800342e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7e5b      	ldrb	r3, [r3, #25]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d108      	bne.n	8003448 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e007      	b.n	8003458 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003456:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7e9b      	ldrb	r3, [r3, #26]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d108      	bne.n	8003472 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0220 	orr.w	r2, r2, #32
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e007      	b.n	8003482 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0220 	bic.w	r2, r2, #32
 8003480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7edb      	ldrb	r3, [r3, #27]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0210 	bic.w	r2, r2, #16
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e007      	b.n	80034ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0210 	orr.w	r2, r2, #16
 80034aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7f1b      	ldrb	r3, [r3, #28]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d108      	bne.n	80034c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e007      	b.n	80034d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0208 	bic.w	r2, r2, #8
 80034d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7f5b      	ldrb	r3, [r3, #29]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d108      	bne.n	80034f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0204 	orr.w	r2, r2, #4
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e007      	b.n	8003500 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	1e5a      	subs	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800353e:	b480      	push	{r7}
 8003540:	b089      	sub	sp, #36	; 0x24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003552:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800355c:	7ffb      	ldrb	r3, [r7, #31]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d003      	beq.n	800356a <HAL_CAN_AddTxMessage+0x2c>
 8003562:	7ffb      	ldrb	r3, [r7, #31]
 8003564:	2b02      	cmp	r3, #2
 8003566:	f040 80ad 	bne.w	80036c4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800357a:	2b00      	cmp	r3, #0
 800357c:	d105      	bne.n	800358a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8095 	beq.w	80036b4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	0e1b      	lsrs	r3, r3, #24
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003594:	2201      	movs	r2, #1
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	409a      	lsls	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	6809      	ldr	r1, [r1, #0]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3318      	adds	r3, #24
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	440b      	add	r3, r1
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e00f      	b.n	80035e2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	3318      	adds	r3, #24
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	440b      	add	r3, r1
 80035e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	3318      	adds	r3, #24
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	440b      	add	r3, r1
 80035f2:	3304      	adds	r3, #4
 80035f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	7d1b      	ldrb	r3, [r3, #20]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d111      	bne.n	8003622 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	3318      	adds	r3, #24
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	6811      	ldr	r1, [r2, #0]
 8003612:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3318      	adds	r3, #24
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	440b      	add	r3, r1
 800361e:	3304      	adds	r3, #4
 8003620:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3307      	adds	r3, #7
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	061a      	lsls	r2, r3, #24
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3306      	adds	r3, #6
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3305      	adds	r3, #5
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4313      	orrs	r3, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	3204      	adds	r2, #4
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	4610      	mov	r0, r2
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	6811      	ldr	r1, [r2, #0]
 800364a:	ea43 0200 	orr.w	r2, r3, r0
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	440b      	add	r3, r1
 8003654:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003658:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3303      	adds	r3, #3
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	061a      	lsls	r2, r3, #24
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3302      	adds	r3, #2
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3301      	adds	r3, #1
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	4313      	orrs	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	7812      	ldrb	r2, [r2, #0]
 800367a:	4610      	mov	r0, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	6811      	ldr	r1, [r2, #0]
 8003680:	ea43 0200 	orr.w	r2, r3, r0
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	440b      	add	r3, r1
 800368a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800368e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3318      	adds	r3, #24
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6811      	ldr	r1, [r2, #0]
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3318      	adds	r3, #24
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	440b      	add	r3, r1
 80036ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e00e      	b.n	80036d2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e006      	b.n	80036d2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d002      	beq.n	80036fe <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80036f8:	7afb      	ldrb	r3, [r7, #11]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d11d      	bne.n	800373a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800375c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d003      	beq.n	800376c <HAL_CAN_GetRxMessage+0x24>
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b02      	cmp	r3, #2
 8003768:	f040 80f3 	bne.w	8003952 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10e      	bne.n	8003790 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d116      	bne.n	80037ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0e7      	b.n	8003960 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0d8      	b.n	8003960 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	331b      	adds	r3, #27
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	4413      	add	r3, r2
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0204 	and.w	r2, r3, #4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10c      	bne.n	80037e6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	331b      	adds	r3, #27
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	4413      	add	r3, r2
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0d5b      	lsrs	r3, r3, #21
 80037dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e00b      	b.n	80037fe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	331b      	adds	r3, #27
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	4413      	add	r3, r2
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	08db      	lsrs	r3, r3, #3
 80037f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	331b      	adds	r3, #27
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	4413      	add	r3, r2
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0202 	and.w	r2, r3, #2
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	331b      	adds	r3, #27
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	4413      	add	r3, r2
 8003820:	3304      	adds	r3, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 020f 	and.w	r2, r3, #15
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	331b      	adds	r3, #27
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	b2da      	uxtb	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	331b      	adds	r3, #27
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	4413      	add	r3, r2
 8003850:	3304      	adds	r3, #4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4413      	add	r3, r2
 8003866:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	4413      	add	r3, r2
 800387c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0a1a      	lsrs	r2, r3, #8
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	4413      	add	r3, r2
 8003896:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0c1a      	lsrs	r2, r3, #16
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	3302      	adds	r3, #2
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0e1a      	lsrs	r2, r3, #24
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	3303      	adds	r3, #3
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	3304      	adds	r3, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0a1a      	lsrs	r2, r3, #8
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	3305      	adds	r3, #5
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0c1a      	lsrs	r2, r3, #16
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	3306      	adds	r3, #6
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	4413      	add	r3, r2
 8003916:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e1a      	lsrs	r2, r3, #24
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	3307      	adds	r3, #7
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d108      	bne.n	800393e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	e007      	b.n	800394e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0220 	orr.w	r2, r2, #32
 800394c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e006      	b.n	8003960 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d07c      	beq.n	8003aac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d023      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2201      	movs	r2, #1
 80039c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fe f848 	bl	8001a64 <HAL_CAN_TxMailbox0CompleteCallback>
 80039d4:	e016      	b.n	8003a04 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e00c      	b.n	8003a04 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	e002      	b.n	8003a04 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fe f83a 	bl	8001a78 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d024      	beq.n	8003a58 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe f832 	bl	8001a8c <HAL_CAN_TxMailbox1CompleteCallback>
 8003a28:	e016      	b.n	8003a58 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e00c      	b.n	8003a58 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	e002      	b.n	8003a58 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe f824 	bl	8001aa0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d024      	beq.n	8003aac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe f81c 	bl	8001ab4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a7c:	e016      	b.n	8003aac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a90:	e00c      	b.n	8003aac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	e002      	b.n	8003aac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe f80e 	bl	8001ac8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2210      	movs	r2, #16
 8003ace:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f8f4 	bl	8003cda <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd ffe6 	bl	8001adc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2210      	movs	r2, #16
 8003b32:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8d6 	bl	8003d02 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8bd 	bl	8003cee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f8c0 	bl	8003d16 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d006      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2208      	movs	r2, #8
 8003bb0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8b9 	bl	8003d2a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d07b      	beq.n	8003cba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d072      	beq.n	8003cb2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	f043 0302 	orr.w	r3, r3, #2
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d043      	beq.n	8003cb2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d03e      	beq.n	8003cb2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c3a:	2b60      	cmp	r3, #96	; 0x60
 8003c3c:	d02b      	beq.n	8003c96 <HAL_CAN_IRQHandler+0x32a>
 8003c3e:	2b60      	cmp	r3, #96	; 0x60
 8003c40:	d82e      	bhi.n	8003ca0 <HAL_CAN_IRQHandler+0x334>
 8003c42:	2b50      	cmp	r3, #80	; 0x50
 8003c44:	d022      	beq.n	8003c8c <HAL_CAN_IRQHandler+0x320>
 8003c46:	2b50      	cmp	r3, #80	; 0x50
 8003c48:	d82a      	bhi.n	8003ca0 <HAL_CAN_IRQHandler+0x334>
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d019      	beq.n	8003c82 <HAL_CAN_IRQHandler+0x316>
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d826      	bhi.n	8003ca0 <HAL_CAN_IRQHandler+0x334>
 8003c52:	2b30      	cmp	r3, #48	; 0x30
 8003c54:	d010      	beq.n	8003c78 <HAL_CAN_IRQHandler+0x30c>
 8003c56:	2b30      	cmp	r3, #48	; 0x30
 8003c58:	d822      	bhi.n	8003ca0 <HAL_CAN_IRQHandler+0x334>
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d002      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x2f8>
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d005      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c62:	e01d      	b.n	8003ca0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f043 0308 	orr.w	r3, r3, #8
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c6c:	e019      	b.n	8003ca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f043 0310 	orr.w	r3, r3, #16
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c76:	e014      	b.n	8003ca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	f043 0320 	orr.w	r3, r3, #32
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c80:	e00f      	b.n	8003ca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c8a:	e00a      	b.n	8003ca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c94:	e005      	b.n	8003ca2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c9e:	e000      	b.n	8003ca2 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ca0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cb0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f836 	bl	8003d3e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	3728      	adds	r7, #40	; 0x28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <__NVIC_SetPriorityGrouping+0x40>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d70:	4013      	ands	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d82:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <__NVIC_SetPriorityGrouping+0x40>)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	60d3      	str	r3, [r2, #12]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000ed00 	.word	0xe000ed00
 8003d98:	05fa0000 	.word	0x05fa0000

08003d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <__NVIC_GetPriorityGrouping+0x18>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	f003 0307 	and.w	r3, r3, #7
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	db0b      	blt.n	8003de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	4907      	ldr	r1, [pc, #28]	; (8003df0 <__NVIC_EnableIRQ+0x38>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2001      	movs	r0, #1
 8003dda:	fa00 f202 	lsl.w	r2, r0, r2
 8003dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000e100 	.word	0xe000e100

08003df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	db0a      	blt.n	8003e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	490c      	ldr	r1, [pc, #48]	; (8003e40 <__NVIC_SetPriority+0x4c>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	0112      	lsls	r2, r2, #4
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	440b      	add	r3, r1
 8003e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e1c:	e00a      	b.n	8003e34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4908      	ldr	r1, [pc, #32]	; (8003e44 <__NVIC_SetPriority+0x50>)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	440b      	add	r3, r1
 8003e32:	761a      	strb	r2, [r3, #24]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000e100 	.word	0xe000e100
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f1c3 0307 	rsb	r3, r3, #7
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	bf28      	it	cs
 8003e66:	2304      	movcs	r3, #4
 8003e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d902      	bls.n	8003e78 <NVIC_EncodePriority+0x30>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3b03      	subs	r3, #3
 8003e76:	e000      	b.n	8003e7a <NVIC_EncodePriority+0x32>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43da      	mvns	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9a:	43d9      	mvns	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea0:	4313      	orrs	r3, r2
         );
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ff4c 	bl	8003d54 <__NVIC_SetPriorityGrouping>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed6:	f7ff ff61 	bl	8003d9c <__NVIC_GetPriorityGrouping>
 8003eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	6978      	ldr	r0, [r7, #20]
 8003ee2:	f7ff ffb1 	bl	8003e48 <NVIC_EncodePriority>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff80 	bl	8003df4 <__NVIC_SetPriority>
}
 8003ef4:	bf00      	nop
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ff54 	bl	8003db8 <__NVIC_EnableIRQ>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff f9e0 	bl	80032e8 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e099      	b.n	8004068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f54:	e00f      	b.n	8003f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f56:	f7ff f9c7 	bl	80032e8 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d908      	bls.n	8003f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e078      	b.n	8004068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e8      	bne.n	8003f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4b38      	ldr	r3, [pc, #224]	; (8004070 <HAL_DMA_Init+0x158>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b04      	cmp	r3, #4
 8004008:	d117      	bne.n	800403a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb15 	bl	800464c <DMA_CheckFifoParam>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004036:	2301      	movs	r3, #1
 8004038:	e016      	b.n	8004068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 facc 	bl	80045e0 <DMA_CalcBaseAndBitshift>
 8004048:	4603      	mov	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	223f      	movs	r2, #63	; 0x3f
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	e010803f 	.word	0xe010803f

08004074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_DMA_Start_IT+0x26>
 8004096:	2302      	movs	r3, #2
 8004098:	e048      	b.n	800412c <HAL_DMA_Start_IT+0xb8>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d137      	bne.n	800411e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa5e 	bl	8004584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	223f      	movs	r2, #63	; 0x3f
 80040ce:	409a      	lsls	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0216 	orr.w	r2, r2, #22
 80040e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0208 	orr.w	r2, r2, #8
 800410a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e005      	b.n	800412a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004142:	f7ff f8d1 	bl	80032e8 <HAL_GetTick>
 8004146:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d008      	beq.n	8004166 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e052      	b.n	800420c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0216 	bic.w	r2, r2, #22
 8004174:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004184:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_DMA_Abort+0x62>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041b6:	e013      	b.n	80041e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041b8:	f7ff f896 	bl	80032e8 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d90c      	bls.n	80041e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2203      	movs	r2, #3
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e015      	b.n	800420c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e4      	bne.n	80041b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	223f      	movs	r2, #63	; 0x3f
 80041f4:	409a      	lsls	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d004      	beq.n	8004232 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2280      	movs	r2, #128	; 0x80
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00c      	b.n	800424c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2205      	movs	r2, #5
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004264:	4b8e      	ldr	r3, [pc, #568]	; (80044a0 <HAL_DMA_IRQHandler+0x248>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a8e      	ldr	r2, [pc, #568]	; (80044a4 <HAL_DMA_IRQHandler+0x24c>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0a9b      	lsrs	r3, r3, #10
 8004270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	2208      	movs	r2, #8
 8004284:	409a      	lsls	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01a      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0204 	bic.w	r2, r2, #4
 80042aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2208      	movs	r2, #8
 80042b2:	409a      	lsls	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e6:	2201      	movs	r2, #1
 80042e8:	409a      	lsls	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f043 0202 	orr.w	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	2204      	movs	r2, #4
 8004300:	409a      	lsls	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d012      	beq.n	8004330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	2204      	movs	r2, #4
 800431e:	409a      	lsls	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	f043 0204 	orr.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	2210      	movs	r2, #16
 8004336:	409a      	lsls	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d043      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03c      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	2210      	movs	r2, #16
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d018      	beq.n	800439a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d024      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
 8004386:	e01f      	b.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
 8004398:	e016      	b.n	80043c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0208 	bic.w	r2, r2, #8
 80043b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	2220      	movs	r2, #32
 80043ce:	409a      	lsls	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 808f 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8087 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	2220      	movs	r2, #32
 80043f0:	409a      	lsls	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d136      	bne.n	8004470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0216 	bic.w	r2, r2, #22
 8004410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_DMA_IRQHandler+0x1da>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0208 	bic.w	r2, r2, #8
 8004440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004446:	223f      	movs	r2, #63	; 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004462:	2b00      	cmp	r3, #0
 8004464:	d07e      	beq.n	8004564 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
        }
        return;
 800446e:	e079      	b.n	8004564 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01d      	beq.n	80044ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004490:	2b00      	cmp	r3, #0
 8004492:	d031      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
 800449c:	e02c      	b.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
 800449e:	bf00      	nop
 80044a0:	20000008 	.word	0x20000008
 80044a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d023      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
 80044b8:	e01e      	b.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10f      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0210 	bic.w	r2, r2, #16
 80044d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d032      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2205      	movs	r2, #5
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3301      	adds	r3, #1
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	d307      	bcc.n	8004540 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f2      	bne.n	8004524 <HAL_DMA_IRQHandler+0x2cc>
 800453e:	e000      	b.n	8004542 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004540:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
 8004562:	e000      	b.n	8004566 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004564:	bf00      	nop
    }
  }
}
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d108      	bne.n	80045c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045c2:	e007      	b.n	80045d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	3b10      	subs	r3, #16
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <DMA_CalcBaseAndBitshift+0x60>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <DMA_CalcBaseAndBitshift+0x64>)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d908      	bls.n	8004620 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <DMA_CalcBaseAndBitshift+0x68>)
 8004616:	4013      	ands	r3, r2
 8004618:	1d1a      	adds	r2, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	659a      	str	r2, [r3, #88]	; 0x58
 800461e:	e006      	b.n	800462e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <DMA_CalcBaseAndBitshift+0x68>)
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	aaaaaaab 	.word	0xaaaaaaab
 8004644:	08023578 	.word	0x08023578
 8004648:	fffffc00 	.word	0xfffffc00

0800464c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11f      	bne.n	80046a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d856      	bhi.n	800471a <DMA_CheckFifoParam+0xce>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <DMA_CheckFifoParam+0x28>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004685 	.word	0x08004685
 8004678:	08004697 	.word	0x08004697
 800467c:	08004685 	.word	0x08004685
 8004680:	0800471b 	.word	0x0800471b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d046      	beq.n	800471e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004694:	e043      	b.n	800471e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800469e:	d140      	bne.n	8004722 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a4:	e03d      	b.n	8004722 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	d121      	bne.n	80046f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d837      	bhi.n	8004726 <DMA_CheckFifoParam+0xda>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <DMA_CheckFifoParam+0x70>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046cd 	.word	0x080046cd
 80046c0:	080046d3 	.word	0x080046d3
 80046c4:	080046cd 	.word	0x080046cd
 80046c8:	080046e5 	.word	0x080046e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      break;
 80046d0:	e030      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d025      	beq.n	800472a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e2:	e022      	b.n	800472a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046ec:	d11f      	bne.n	800472e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046f2:	e01c      	b.n	800472e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d903      	bls.n	8004702 <DMA_CheckFifoParam+0xb6>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d003      	beq.n	8004708 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004700:	e018      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
      break;
 8004706:	e015      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      break;
 8004718:	e00b      	b.n	8004732 <DMA_CheckFifoParam+0xe6>
      break;
 800471a:	bf00      	nop
 800471c:	e00a      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 800471e:	bf00      	nop
 8004720:	e008      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 8004722:	bf00      	nop
 8004724:	e006      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;   
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 8004732:	bf00      	nop
    }
  } 
  
  return status; 
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop

08004744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	; 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e175      	b.n	8004a50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004764:	2201      	movs	r2, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	f040 8164 	bne.w	8004a4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d005      	beq.n	800479a <HAL_GPIO_Init+0x56>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d130      	bne.n	80047fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	2203      	movs	r2, #3
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 0201 	and.w	r2, r3, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b03      	cmp	r3, #3
 8004806:	d017      	beq.n	8004838 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	2203      	movs	r2, #3
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d123      	bne.n	800488c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	08da      	lsrs	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3208      	adds	r2, #8
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	220f      	movs	r2, #15
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	08da      	lsrs	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3208      	adds	r2, #8
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2203      	movs	r2, #3
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0203 	and.w	r2, r3, #3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80be 	beq.w	8004a4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ce:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <HAL_GPIO_Init+0x324>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	4a65      	ldr	r2, [pc, #404]	; (8004a68 <HAL_GPIO_Init+0x324>)
 80048d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d8:	6453      	str	r3, [r2, #68]	; 0x44
 80048da:	4b63      	ldr	r3, [pc, #396]	; (8004a68 <HAL_GPIO_Init+0x324>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80048e6:	4a61      	ldr	r2, [pc, #388]	; (8004a6c <HAL_GPIO_Init+0x328>)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	3302      	adds	r3, #2
 80048ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	220f      	movs	r2, #15
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a58      	ldr	r2, [pc, #352]	; (8004a70 <HAL_GPIO_Init+0x32c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d037      	beq.n	8004982 <HAL_GPIO_Init+0x23e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a57      	ldr	r2, [pc, #348]	; (8004a74 <HAL_GPIO_Init+0x330>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d031      	beq.n	800497e <HAL_GPIO_Init+0x23a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a56      	ldr	r2, [pc, #344]	; (8004a78 <HAL_GPIO_Init+0x334>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02b      	beq.n	800497a <HAL_GPIO_Init+0x236>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a55      	ldr	r2, [pc, #340]	; (8004a7c <HAL_GPIO_Init+0x338>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d025      	beq.n	8004976 <HAL_GPIO_Init+0x232>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a54      	ldr	r2, [pc, #336]	; (8004a80 <HAL_GPIO_Init+0x33c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01f      	beq.n	8004972 <HAL_GPIO_Init+0x22e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a53      	ldr	r2, [pc, #332]	; (8004a84 <HAL_GPIO_Init+0x340>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d019      	beq.n	800496e <HAL_GPIO_Init+0x22a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a52      	ldr	r2, [pc, #328]	; (8004a88 <HAL_GPIO_Init+0x344>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_GPIO_Init+0x226>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a51      	ldr	r2, [pc, #324]	; (8004a8c <HAL_GPIO_Init+0x348>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00d      	beq.n	8004966 <HAL_GPIO_Init+0x222>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a50      	ldr	r2, [pc, #320]	; (8004a90 <HAL_GPIO_Init+0x34c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <HAL_GPIO_Init+0x21e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4f      	ldr	r2, [pc, #316]	; (8004a94 <HAL_GPIO_Init+0x350>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d101      	bne.n	800495e <HAL_GPIO_Init+0x21a>
 800495a:	2309      	movs	r3, #9
 800495c:	e012      	b.n	8004984 <HAL_GPIO_Init+0x240>
 800495e:	230a      	movs	r3, #10
 8004960:	e010      	b.n	8004984 <HAL_GPIO_Init+0x240>
 8004962:	2308      	movs	r3, #8
 8004964:	e00e      	b.n	8004984 <HAL_GPIO_Init+0x240>
 8004966:	2307      	movs	r3, #7
 8004968:	e00c      	b.n	8004984 <HAL_GPIO_Init+0x240>
 800496a:	2306      	movs	r3, #6
 800496c:	e00a      	b.n	8004984 <HAL_GPIO_Init+0x240>
 800496e:	2305      	movs	r3, #5
 8004970:	e008      	b.n	8004984 <HAL_GPIO_Init+0x240>
 8004972:	2304      	movs	r3, #4
 8004974:	e006      	b.n	8004984 <HAL_GPIO_Init+0x240>
 8004976:	2303      	movs	r3, #3
 8004978:	e004      	b.n	8004984 <HAL_GPIO_Init+0x240>
 800497a:	2302      	movs	r3, #2
 800497c:	e002      	b.n	8004984 <HAL_GPIO_Init+0x240>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_GPIO_Init+0x240>
 8004982:	2300      	movs	r3, #0
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	f002 0203 	and.w	r2, r2, #3
 800498a:	0092      	lsls	r2, r2, #2
 800498c:	4093      	lsls	r3, r2
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004994:	4935      	ldr	r1, [pc, #212]	; (8004a6c <HAL_GPIO_Init+0x328>)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3302      	adds	r3, #2
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049a2:	4b3d      	ldr	r3, [pc, #244]	; (8004a98 <HAL_GPIO_Init+0x354>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049c6:	4a34      	ldr	r2, [pc, #208]	; (8004a98 <HAL_GPIO_Init+0x354>)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049cc:	4b32      	ldr	r3, [pc, #200]	; (8004a98 <HAL_GPIO_Init+0x354>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049f0:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <HAL_GPIO_Init+0x354>)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <HAL_GPIO_Init+0x354>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <HAL_GPIO_Init+0x354>)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_GPIO_Init+0x354>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a44:	4a14      	ldr	r2, [pc, #80]	; (8004a98 <HAL_GPIO_Init+0x354>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b0f      	cmp	r3, #15
 8004a54:	f67f ae86 	bls.w	8004764 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3724      	adds	r7, #36	; 0x24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40013800 	.word	0x40013800
 8004a70:	40020000 	.word	0x40020000
 8004a74:	40020400 	.word	0x40020400
 8004a78:	40020800 	.word	0x40020800
 8004a7c:	40020c00 	.word	0x40020c00
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40021400 	.word	0x40021400
 8004a88:	40021800 	.word	0x40021800
 8004a8c:	40021c00 	.word	0x40021c00
 8004a90:	40022000 	.word	0x40022000
 8004a94:	40022400 	.word	0x40022400
 8004a98:	40013c00 	.word	0x40013c00

08004a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	807b      	strh	r3, [r7, #2]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aac:	787b      	ldrb	r3, [r7, #1]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ab8:	e003      	b.n	8004ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004aba:	887b      	ldrh	r3, [r7, #2]
 8004abc:	041a      	lsls	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	619a      	str	r2, [r3, #24]
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ae0:	887a      	ldrh	r2, [r7, #2]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	041a      	lsls	r2, r3, #16
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	43d9      	mvns	r1, r3
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	400b      	ands	r3, r1
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	619a      	str	r2, [r3, #24]
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b04:	b08f      	sub	sp, #60	; 0x3c
 8004b06:	af0a      	add	r7, sp, #40	; 0x28
 8004b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e116      	b.n	8004d42 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f00b f8ee 	bl	800fd10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2203      	movs	r2, #3
 8004b38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f004 fe03 	bl	800975e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	687e      	ldr	r6, [r7, #4]
 8004b60:	466d      	mov	r5, sp
 8004b62:	f106 0410 	add.w	r4, r6, #16
 8004b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b72:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b76:	1d33      	adds	r3, r6, #4
 8004b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b7a:	6838      	ldr	r0, [r7, #0]
 8004b7c:	f004 fce4 	bl	8009548 <USB_CoreInit>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0d7      	b.n	8004d42 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2100      	movs	r1, #0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f004 fdf1 	bl	8009780 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
 8004ba2:	e04a      	b.n	8004c3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ba4:	7bfa      	ldrb	r2, [r7, #15]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	333d      	adds	r3, #61	; 0x3d
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bb8:	7bfa      	ldrb	r2, [r7, #15]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	333c      	adds	r3, #60	; 0x3c
 8004bc8:	7bfa      	ldrb	r2, [r7, #15]
 8004bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	b298      	uxth	r0, r3
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	3344      	adds	r3, #68	; 0x44
 8004be0:	4602      	mov	r2, r0
 8004be2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3340      	adds	r3, #64	; 0x40
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bf8:	7bfa      	ldrb	r2, [r7, #15]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	3348      	adds	r3, #72	; 0x48
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c0c:	7bfa      	ldrb	r2, [r7, #15]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	334c      	adds	r3, #76	; 0x4c
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c20:	7bfa      	ldrb	r2, [r7, #15]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3354      	adds	r3, #84	; 0x54
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	3301      	adds	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d3af      	bcc.n	8004ba4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	73fb      	strb	r3, [r7, #15]
 8004c48:	e044      	b.n	8004cd4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c4a:	7bfa      	ldrb	r2, [r7, #15]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c8c:	7bfa      	ldrb	r2, [r7, #15]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ca2:	7bfa      	ldrb	r2, [r7, #15]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cb8:	7bfa      	ldrb	r2, [r7, #15]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d3b5      	bcc.n	8004c4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	687e      	ldr	r6, [r7, #4]
 8004ce6:	466d      	mov	r5, sp
 8004ce8:	f106 0410 	add.w	r4, r6, #16
 8004cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cfc:	1d33      	adds	r3, r6, #4
 8004cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d00:	6838      	ldr	r0, [r7, #0]
 8004d02:	f004 fd89 	bl	8009818 <USB_DevInit>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e014      	b.n	8004d42 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d102      	bne.n	8004d36 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 f97b 	bl	800602c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f005 fed7 	bl	800aaee <USB_DevDisconnect>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_PCD_Start+0x16>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e012      	b.n	8004d86 <HAL_PCD_Start+0x3c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f004 fce5 	bl	800973c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f005 fe98 	bl	800aaac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d8e:	b590      	push	{r4, r7, lr}
 8004d90:	b08d      	sub	sp, #52	; 0x34
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f005 ff56 	bl	800ac56 <USB_GetMode>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f040 84b7 	bne.w	8005720 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f005 feba 	bl	800ab30 <USB_ReadInterrupts>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 84ad 	beq.w	800571e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f005 fea7 	bl	800ab30 <USB_ReadInterrupts>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d107      	bne.n	8004dfc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f002 0202 	and.w	r2, r2, #2
 8004dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f005 fe95 	bl	800ab30 <USB_ReadInterrupts>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d161      	bne.n	8004ed4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0210 	bic.w	r2, r2, #16
 8004e1e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	0c5b      	lsrs	r3, r3, #17
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d124      	bne.n	8004e96 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d035      	beq.n	8004ec4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6a38      	ldr	r0, [r7, #32]
 8004e6c:	f005 fccc 	bl	800a808 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	091b      	lsrs	r3, r3, #4
 8004e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e7c:	441a      	add	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e8e:	441a      	add	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	621a      	str	r2, [r3, #32]
 8004e94:	e016      	b.n	8004ec4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	0c5b      	lsrs	r3, r3, #17
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d110      	bne.n	8004ec4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6a38      	ldr	r0, [r7, #32]
 8004eae:	f005 fcab 	bl	800a808 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ebe:	441a      	add	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0210 	orr.w	r2, r2, #16
 8004ed2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f005 fe29 	bl	800ab30 <USB_ReadInterrupts>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ee8:	f040 80a7 	bne.w	800503a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f005 fe2e 	bl	800ab56 <USB_ReadDevAllOutEpInterrupt>
 8004efa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004efc:	e099      	b.n	8005032 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 808e 	beq.w	8005026 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f005 fe52 	bl	800abbe <USB_ReadDevOutEPInterrupt>
 8004f1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	461a      	mov	r2, r3
 8004f34:	2301      	movs	r3, #1
 8004f36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fef0 	bl	8005d20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	2308      	movs	r3, #8
 8004f5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 ffc6 	bl	8005ef0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d030      	beq.n	8004fec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d109      	bne.n	8004faa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fa8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	78db      	ldrb	r3, [r3, #3]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d108      	bne.n	8004fda <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f00a ffbf 	bl	800ff58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2302      	movs	r3, #2
 8004fea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	461a      	mov	r2, r3
 8005004:	2320      	movs	r3, #32
 8005006:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501e:	461a      	mov	r2, r3
 8005020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005024:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	3301      	adds	r3, #1
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	f47f af62 	bne.w	8004efe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f005 fd76 	bl	800ab30 <USB_ReadInterrupts>
 8005044:	4603      	mov	r3, r0
 8005046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800504e:	f040 80db 	bne.w	8005208 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f005 fd97 	bl	800ab8a <USB_ReadDevAllInEpInterrupt>
 800505c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005062:	e0cd      	b.n	8005200 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80c2 	beq.w	80051f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f005 fdbd 	bl	800abfa <USB_ReadDevInEPInterrupt>
 8005080:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d057      	beq.n	800513c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	2201      	movs	r2, #1
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69f9      	ldr	r1, [r7, #28]
 80050a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ac:	4013      	ands	r3, r2
 80050ae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	461a      	mov	r2, r3
 80050be:	2301      	movs	r3, #1
 80050c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d132      	bne.n	8005130 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	334c      	adds	r3, #76	; 0x4c
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4403      	add	r3, r0
 80050ea:	3348      	adds	r3, #72	; 0x48
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4419      	add	r1, r3
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4403      	add	r3, r0
 80050fe:	334c      	adds	r3, #76	; 0x4c
 8005100:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d113      	bne.n	8005130 <HAL_PCD_IRQHandler+0x3a2>
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	3354      	adds	r3, #84	; 0x54
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d108      	bne.n	8005130 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005128:	461a      	mov	r2, r3
 800512a:	2101      	movs	r1, #1
 800512c:	f005 fdc6 	bl	800acbc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	b2db      	uxtb	r3, r3
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f00a fe89 	bl	800fe4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005152:	461a      	mov	r2, r3
 8005154:	2308      	movs	r3, #8
 8005156:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	461a      	mov	r2, r3
 8005170:	2310      	movs	r3, #16
 8005172:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	461a      	mov	r2, r3
 800518c:	2340      	movs	r3, #64	; 0x40
 800518e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d023      	beq.n	80051e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800519a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800519c:	6a38      	ldr	r0, [r7, #32]
 800519e:	f004 fc99 	bl	8009ad4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	3338      	adds	r3, #56	; 0x38
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	78db      	ldrb	r3, [r3, #3]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d108      	bne.n	80051d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f00a fed6 	bl	800ff7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	461a      	mov	r2, r3
 80051de:	2302      	movs	r3, #2
 80051e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fd08 	bl	8005c04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	3301      	adds	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	f47f af2e 	bne.w	8005064 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f005 fc8f 	bl	800ab30 <USB_ReadInterrupts>
 8005212:	4603      	mov	r3, r0
 8005214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521c:	d122      	bne.n	8005264 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005238:	2b01      	cmp	r3, #1
 800523a:	d108      	bne.n	800524e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005244:	2100      	movs	r1, #0
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f00b f850 	bl	80102ec <HAL_PCDEx_LPM_Callback>
 800524c:	e002      	b.n	8005254 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f00a fe74 	bl	800ff3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005262:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f005 fc61 	bl	800ab30 <USB_ReadInterrupts>
 800526e:	4603      	mov	r3, r0
 8005270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005278:	d112      	bne.n	80052a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b01      	cmp	r3, #1
 8005288:	d102      	bne.n	8005290 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f00a fe30 	bl	800fef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800529e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f005 fc43 	bl	800ab30 <USB_ReadInterrupts>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b4:	d121      	bne.n	80052fa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80052c4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d111      	bne.n	80052f4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	089b      	lsrs	r3, r3, #2
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80052ea:	2101      	movs	r1, #1
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f00a fffd 	bl	80102ec <HAL_PCDEx_LPM_Callback>
 80052f2:	e002      	b.n	80052fa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f00a fdfb 	bl	800fef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f005 fc16 	bl	800ab30 <USB_ReadInterrupts>
 8005304:	4603      	mov	r3, r0
 8005306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530e:	f040 80b7 	bne.w	8005480 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2110      	movs	r1, #16
 800532c:	4618      	mov	r0, r3
 800532e:	f004 fbd1 	bl	8009ad4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005332:	2300      	movs	r3, #0
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005336:	e046      	b.n	80053c6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005344:	461a      	mov	r2, r3
 8005346:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800534a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	461a      	mov	r2, r3
 800537a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800537e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800539e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	3301      	adds	r3, #1
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d3b3      	bcc.n	8005338 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80053e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d016      	beq.n	800541a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fc:	f043 030b 	orr.w	r3, r3, #11
 8005400:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005412:	f043 030b 	orr.w	r3, r3, #11
 8005416:	6453      	str	r3, [r2, #68]	; 0x44
 8005418:	e015      	b.n	8005446 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	4619      	mov	r1, r3
 800542a:	f242 032b 	movw	r3, #8235	; 0x202b
 800542e:	4313      	orrs	r3, r2
 8005430:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005440:	f043 030b 	orr.w	r3, r3, #11
 8005444:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005454:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005458:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800546a:	461a      	mov	r2, r3
 800546c:	f005 fc26 	bl	800acbc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800547e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f005 fb53 	bl	800ab30 <USB_ReadInterrupts>
 800548a:	4603      	mov	r3, r0
 800548c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005494:	d124      	bne.n	80054e0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f005 fbea 	bl	800ac74 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f004 fb92 	bl	8009bce <USB_GetDevSpeed>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461a      	mov	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681c      	ldr	r4, [r3, #0]
 80054b6:	f001 facd 	bl	8006a54 <HAL_RCC_GetHCLKFreq>
 80054ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	4620      	mov	r0, r4
 80054c6:	f004 f897 	bl	80095f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f00a fce7 	bl	800fe9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80054de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f005 fb23 	bl	800ab30 <USB_ReadInterrupts>
 80054ea:	4603      	mov	r3, r0
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d10a      	bne.n	800550a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f00a fcc4 	bl	800fe82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f002 0208 	and.w	r2, r2, #8
 8005508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f005 fb0e 	bl	800ab30 <USB_ReadInterrupts>
 8005514:	4603      	mov	r3, r0
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d122      	bne.n	8005564 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800552a:	2301      	movs	r3, #1
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	e014      	b.n	800555a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d105      	bne.n	8005554 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	b2db      	uxtb	r3, r3
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fb27 	bl	8005ba2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	3301      	adds	r3, #1
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005560:	429a      	cmp	r2, r3
 8005562:	d3e5      	bcc.n	8005530 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f005 fae1 	bl	800ab30 <USB_ReadInterrupts>
 800556e:	4603      	mov	r3, r0
 8005570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005578:	d13b      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800557a:	2301      	movs	r3, #1
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
 800557e:	e02b      	b.n	80055d8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005594:	4613      	mov	r3, r2
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	3340      	adds	r3, #64	; 0x40
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d115      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da12      	bge.n	80055d2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	333f      	adds	r3, #63	; 0x3f
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fae8 	bl	8005ba2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	3301      	adds	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	429a      	cmp	r2, r3
 80055e0:	d3ce      	bcc.n	8005580 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f005 fa9a 	bl	800ab30 <USB_ReadInterrupts>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005606:	d155      	bne.n	80056b4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005608:	2301      	movs	r3, #1
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
 800560c:	e045      	b.n	800569a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d12e      	bne.n	8005694 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005636:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005638:	2b00      	cmp	r3, #0
 800563a:	da2b      	bge.n	8005694 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005648:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800564c:	429a      	cmp	r2, r3
 800564e:	d121      	bne.n	8005694 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005690:	6053      	str	r3, [r2, #4]
            break;
 8005692:	e007      	b.n	80056a4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	3301      	adds	r3, #1
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d3b4      	bcc.n	800560e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80056b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f005 fa39 	bl	800ab30 <USB_ReadInterrupts>
 80056be:	4603      	mov	r3, r0
 80056c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c8:	d10a      	bne.n	80056e0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f00a fc68 	bl	800ffa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f005 fa23 	bl	800ab30 <USB_ReadInterrupts>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d115      	bne.n	8005720 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f00a fc58 	bl	800ffbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6859      	ldr	r1, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	e000      	b.n	8005720 <HAL_PCD_IRQHandler+0x992>
      return;
 800571e:	bf00      	nop
    }
  }
}
 8005720:	3734      	adds	r7, #52	; 0x34
 8005722:	46bd      	mov	sp, r7
 8005724:	bd90      	pop	{r4, r7, pc}

08005726 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_PCD_SetAddress+0x1a>
 800573c:	2302      	movs	r3, #2
 800573e:	e013      	b.n	8005768 <HAL_PCD_SetAddress+0x42>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	78fa      	ldrb	r2, [r7, #3]
 800574c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f005 f981 	bl	800aa60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	70fb      	strb	r3, [r7, #3]
 8005782:	460b      	mov	r3, r1
 8005784:	803b      	strh	r3, [r7, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800578e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005792:	2b00      	cmp	r3, #0
 8005794:	da0f      	bge.n	80057b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	f003 020f 	and.w	r2, r3, #15
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	3338      	adds	r3, #56	; 0x38
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	3304      	adds	r3, #4
 80057ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	705a      	strb	r2, [r3, #1]
 80057b4:	e00f      	b.n	80057d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4413      	add	r3, r2
 80057cc:	3304      	adds	r3, #4
 80057ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057e2:	883a      	ldrh	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	78ba      	ldrb	r2, [r7, #2]
 80057ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005800:	78bb      	ldrb	r3, [r7, #2]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d102      	bne.n	800580c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_PCD_EP_Open+0xaa>
 8005816:	2302      	movs	r3, #2
 8005818:	e00e      	b.n	8005838 <HAL_PCD_EP_Open+0xc8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68f9      	ldr	r1, [r7, #12]
 8005828:	4618      	mov	r0, r3
 800582a:	f004 f9f5 	bl	8009c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005836:	7afb      	ldrb	r3, [r7, #11]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800584c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005850:	2b00      	cmp	r3, #0
 8005852:	da0f      	bge.n	8005874 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	3338      	adds	r3, #56	; 0x38
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4413      	add	r3, r2
 8005868:	3304      	adds	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	705a      	strb	r2, [r3, #1]
 8005872:	e00f      	b.n	8005894 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	f003 020f 	and.w	r2, r3, #15
 800587a:	4613      	mov	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4413      	add	r3, r2
 800588a:	3304      	adds	r3, #4
 800588c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	b2da      	uxtb	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_PCD_EP_Close+0x6e>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e00e      	b.n	80058cc <HAL_PCD_EP_Close+0x8c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	4618      	mov	r0, r3
 80058be:	f004 fa33 	bl	8009d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	460b      	mov	r3, r1
 80058e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	f003 020f 	and.w	r2, r3, #15
 80058ea:	4613      	mov	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	3304      	adds	r3, #4
 80058fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2200      	movs	r2, #0
 8005914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005916:	7afb      	ldrb	r3, [r7, #11]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	b2da      	uxtb	r2, r3
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005930:	7afb      	ldrb	r3, [r7, #11]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	f004 fd1a 	bl	800a380 <USB_EP0StartXfer>
 800594c:	e008      	b.n	8005960 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	f004 fac0 	bl	8009ee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	f003 020f 	and.w	r2, r3, #15
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800598c:	681b      	ldr	r3, [r3, #0]
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	460b      	mov	r3, r1
 80059a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059aa:	7afb      	ldrb	r3, [r7, #11]
 80059ac:	f003 020f 	and.w	r2, r3, #15
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	3338      	adds	r3, #56	; 0x38
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	3304      	adds	r3, #4
 80059c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2200      	movs	r2, #0
 80059d2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2201      	movs	r2, #1
 80059d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d102      	bne.n	80059f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059f4:	7afb      	ldrb	r3, [r7, #11]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6979      	ldr	r1, [r7, #20]
 8005a0c:	f004 fcb8 	bl	800a380 <USB_EP0StartXfer>
 8005a10:	e008      	b.n	8005a24 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6979      	ldr	r1, [r7, #20]
 8005a20:	f004 fa5e 	bl	8009ee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d901      	bls.n	8005a4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e050      	b.n	8005aee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	da0f      	bge.n	8005a74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	f003 020f 	and.w	r2, r3, #15
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	3338      	adds	r3, #56	; 0x38
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	3304      	adds	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	705a      	strb	r2, [r3, #1]
 8005a72:	e00d      	b.n	8005a90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	4613      	mov	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	3304      	adds	r3, #4
 8005a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_PCD_EP_SetStall+0x82>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e01e      	b.n	8005aee <HAL_PCD_EP_SetStall+0xc0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f004 fefa 	bl	800a8b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	b2d9      	uxtb	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f005 f8ec 	bl	800acbc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	f003 020f 	and.w	r2, r3, #15
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d901      	bls.n	8005b14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e042      	b.n	8005b9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da0f      	bge.n	8005b3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 020f 	and.w	r2, r3, #15
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	3338      	adds	r3, #56	; 0x38
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	705a      	strb	r2, [r3, #1]
 8005b3a:	e00f      	b.n	8005b5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 020f 	and.w	r2, r3, #15
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	4413      	add	r3, r2
 8005b52:	3304      	adds	r3, #4
 8005b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_PCD_EP_ClrStall+0x86>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e00e      	b.n	8005b9a <HAL_PCD_EP_ClrStall+0xa4>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68f9      	ldr	r1, [r7, #12]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f004 ff02 	bl	800a994 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da0c      	bge.n	8005bd0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3338      	adds	r3, #56	; 0x38
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	3304      	adds	r3, #4
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e00c      	b.n	8005bea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	3304      	adds	r3, #4
 8005be8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68f9      	ldr	r1, [r7, #12]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f004 fd21 	bl	800a638 <USB_EPStopXfer>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	3338      	adds	r3, #56	; 0x38
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	4413      	add	r3, r2
 8005c28:	3304      	adds	r3, #4
 8005c2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d901      	bls.n	8005c3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e06c      	b.n	8005d16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d902      	bls.n	8005c58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3303      	adds	r3, #3
 8005c5c:	089b      	lsrs	r3, r3, #2
 8005c5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c60:	e02b      	b.n	8005cba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d902      	bls.n	8005c7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3303      	adds	r3, #3
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6919      	ldr	r1, [r3, #16]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	6978      	ldr	r0, [r7, #20]
 8005c9e:	f004 fd75 	bl	800a78c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	441a      	add	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1a      	ldr	r2, [r3, #32]
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d809      	bhi.n	8005ce4 <PCD_WriteEmptyTxFifo+0xe0>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d203      	bcs.n	8005ce4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1be      	bne.n	8005c62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d811      	bhi.n	8005d14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	6939      	ldr	r1, [r7, #16]
 8005d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d10:	4013      	ands	r3, r2
 8005d12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	333c      	adds	r3, #60	; 0x3c
 8005d38:	3304      	adds	r3, #4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d17b      	bne.n	8005e4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d015      	beq.n	8005d8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4a61      	ldr	r2, [pc, #388]	; (8005ee8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	f240 80b9 	bls.w	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80b3 	beq.w	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	461a      	mov	r2, r3
 8005d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d88:	6093      	str	r3, [r2, #8]
 8005d8a:	e0a7      	b.n	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	461a      	mov	r2, r3
 8005da4:	2320      	movs	r3, #32
 8005da6:	6093      	str	r3, [r2, #8]
 8005da8:	e098      	b.n	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f040 8093 	bne.w	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4a4b      	ldr	r2, [pc, #300]	; (8005ee8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d90f      	bls.n	8005dde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dda:	6093      	str	r3, [r2, #8]
 8005ddc:	e07e      	b.n	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4413      	add	r3, r2
 8005df0:	3304      	adds	r3, #4
 8005df2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	0159      	lsls	r1, r3, #5
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	440b      	add	r3, r1
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d114      	bne.n	8005e40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	f004 ff46 	bl	800acbc <USB_EP0_OutStart>
 8005e30:	e006      	b.n	8005e40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	441a      	add	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f009 ffe6 	bl	800fe18 <HAL_PCD_DataOutStageCallback>
 8005e4c:	e046      	b.n	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4a26      	ldr	r2, [pc, #152]	; (8005eec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d124      	bne.n	8005ea0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e72:	6093      	str	r3, [r2, #8]
 8005e74:	e032      	b.n	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2320      	movs	r3, #32
 8005e90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f009 ffbd 	bl	800fe18 <HAL_PCD_DataOutStageCallback>
 8005e9e:	e01d      	b.n	8005edc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d114      	bne.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d108      	bne.n	8005ed0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2100      	movs	r1, #0
 8005ecc:	f004 fef6 	bl	800acbc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f009 ff9e 	bl	800fe18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	4f54300a 	.word	0x4f54300a
 8005eec:	4f54310a 	.word	0x4f54310a

08005ef0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	333c      	adds	r3, #60	; 0x3c
 8005f08:	3304      	adds	r3, #4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d90e      	bls.n	8005f44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f009 ff55 	bl	800fdf4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d90c      	bls.n	8005f6c <PCD_EP_OutSetupPacket_int+0x7c>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d108      	bne.n	8005f6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f64:	461a      	mov	r2, r3
 8005f66:	2101      	movs	r1, #1
 8005f68:	f004 fea8 	bl	800acbc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	4f54300a 	.word	0x4f54300a

08005f7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f9a:	883b      	ldrh	r3, [r7, #0]
 8005f9c:	0419      	lsls	r1, r3, #16
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8005fa8:	e028      	b.n	8005ffc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e00d      	b.n	8005fda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	3340      	adds	r3, #64	; 0x40
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
 8005fda:	7bfa      	ldrb	r2, [r7, #15]
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d3ec      	bcc.n	8005fbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fe4:	883b      	ldrh	r3, [r7, #0]
 8005fe6:	0418      	lsls	r0, r3, #16
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6819      	ldr	r1, [r3, #0]
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4302      	orrs	r2, r0
 8005ff4:	3340      	adds	r3, #64	; 0x40
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	887a      	ldrh	r2, [r7, #2]
 800601c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <HAL_PCDEx_ActivateLPM+0x44>)
 800605c:	4313      	orrs	r3, r2
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	10000003 	.word	0x10000003

08006074 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800607e:	4b23      	ldr	r3, [pc, #140]	; (800610c <HAL_PWREx_EnableOverDrive+0x98>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	4a22      	ldr	r2, [pc, #136]	; (800610c <HAL_PWREx_EnableOverDrive+0x98>)
 8006084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006088:	6413      	str	r3, [r2, #64]	; 0x40
 800608a:	4b20      	ldr	r3, [pc, #128]	; (800610c <HAL_PWREx_EnableOverDrive+0x98>)
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006096:	4b1e      	ldr	r3, [pc, #120]	; (8006110 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <HAL_PWREx_EnableOverDrive+0x9c>)
 800609c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060a2:	f7fd f921 	bl	80032e8 <HAL_GetTick>
 80060a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060a8:	e009      	b.n	80060be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060aa:	f7fd f91d 	bl	80032e8 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060b8:	d901      	bls.n	80060be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e022      	b.n	8006104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060be:	4b14      	ldr	r3, [pc, #80]	; (8006110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ca:	d1ee      	bne.n	80060aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80060cc:	4b10      	ldr	r3, [pc, #64]	; (8006110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060d8:	f7fd f906 	bl	80032e8 <HAL_GetTick>
 80060dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060de:	e009      	b.n	80060f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060e0:	f7fd f902 	bl	80032e8 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ee:	d901      	bls.n	80060f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e007      	b.n	8006104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006100:	d1ee      	bne.n	80060e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40023800 	.word	0x40023800
 8006110:	40007000 	.word	0x40007000

08006114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800611c:	2300      	movs	r3, #0
 800611e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e29b      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8087 	beq.w	8006246 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006138:	4b96      	ldr	r3, [pc, #600]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 030c 	and.w	r3, r3, #12
 8006140:	2b04      	cmp	r3, #4
 8006142:	d00c      	beq.n	800615e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006144:	4b93      	ldr	r3, [pc, #588]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
 800614c:	2b08      	cmp	r3, #8
 800614e:	d112      	bne.n	8006176 <HAL_RCC_OscConfig+0x62>
 8006150:	4b90      	ldr	r3, [pc, #576]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615c:	d10b      	bne.n	8006176 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800615e:	4b8d      	ldr	r3, [pc, #564]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d06c      	beq.n	8006244 <HAL_RCC_OscConfig+0x130>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d168      	bne.n	8006244 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e275      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617e:	d106      	bne.n	800618e <HAL_RCC_OscConfig+0x7a>
 8006180:	4b84      	ldr	r3, [pc, #528]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a83      	ldr	r2, [pc, #524]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e02e      	b.n	80061ec <HAL_RCC_OscConfig+0xd8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10c      	bne.n	80061b0 <HAL_RCC_OscConfig+0x9c>
 8006196:	4b7f      	ldr	r3, [pc, #508]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a7e      	ldr	r2, [pc, #504]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 800619c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	4b7c      	ldr	r3, [pc, #496]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a7b      	ldr	r2, [pc, #492]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	e01d      	b.n	80061ec <HAL_RCC_OscConfig+0xd8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061b8:	d10c      	bne.n	80061d4 <HAL_RCC_OscConfig+0xc0>
 80061ba:	4b76      	ldr	r3, [pc, #472]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a75      	ldr	r2, [pc, #468]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4b73      	ldr	r3, [pc, #460]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a72      	ldr	r2, [pc, #456]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	e00b      	b.n	80061ec <HAL_RCC_OscConfig+0xd8>
 80061d4:	4b6f      	ldr	r3, [pc, #444]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a6e      	ldr	r2, [pc, #440]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	4b6c      	ldr	r3, [pc, #432]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a6b      	ldr	r2, [pc, #428]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80061e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fd f878 	bl	80032e8 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061fc:	f7fd f874 	bl	80032e8 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	; 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e229      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620e:	4b61      	ldr	r3, [pc, #388]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0xe8>
 800621a:	e014      	b.n	8006246 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fd f864 	bl	80032e8 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006224:	f7fd f860 	bl	80032e8 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	; 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e215      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006236:	4b57      	ldr	r3, [pc, #348]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x110>
 8006242:	e000      	b.n	8006246 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d069      	beq.n	8006326 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006252:	4b50      	ldr	r3, [pc, #320]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 030c 	and.w	r3, r3, #12
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00b      	beq.n	8006276 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800625e:	4b4d      	ldr	r3, [pc, #308]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	2b08      	cmp	r3, #8
 8006268:	d11c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x190>
 800626a:	4b4a      	ldr	r3, [pc, #296]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d116      	bne.n	80062a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006276:	4b47      	ldr	r3, [pc, #284]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <HAL_RCC_OscConfig+0x17a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d001      	beq.n	800628e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e1e9      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800628e:	4b41      	ldr	r3, [pc, #260]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	493d      	ldr	r1, [pc, #244]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062a2:	e040      	b.n	8006326 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d023      	beq.n	80062f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062ac:	4b39      	ldr	r3, [pc, #228]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a38      	ldr	r2, [pc, #224]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fd f816 	bl	80032e8 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c0:	f7fd f812 	bl	80032e8 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e1c7      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d2:	4b30      	ldr	r3, [pc, #192]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062de:	4b2d      	ldr	r3, [pc, #180]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4929      	ldr	r1, [pc, #164]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	600b      	str	r3, [r1, #0]
 80062f2:	e018      	b.n	8006326 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062f4:	4b27      	ldr	r3, [pc, #156]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a26      	ldr	r2, [pc, #152]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 80062fa:	f023 0301 	bic.w	r3, r3, #1
 80062fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fc fff2 	bl	80032e8 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006308:	f7fc ffee 	bl	80032e8 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e1a3      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800631a:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d038      	beq.n	80063a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d019      	beq.n	800636e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800633a:	4b16      	ldr	r3, [pc, #88]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 800633c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633e:	4a15      	ldr	r2, [pc, #84]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006346:	f7fc ffcf 	bl	80032e8 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800634e:	f7fc ffcb 	bl	80032e8 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e180      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <HAL_RCC_OscConfig+0x23a>
 800636c:	e01a      	b.n	80063a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800636e:	4b09      	ldr	r3, [pc, #36]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006372:	4a08      	ldr	r2, [pc, #32]	; (8006394 <HAL_RCC_OscConfig+0x280>)
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637a:	f7fc ffb5 	bl	80032e8 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006380:	e00a      	b.n	8006398 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006382:	f7fc ffb1 	bl	80032e8 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d903      	bls.n	8006398 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e166      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
 8006394:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006398:	4b92      	ldr	r3, [pc, #584]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 800639a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1ee      	bne.n	8006382 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80a4 	beq.w	80064fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063b2:	4b8c      	ldr	r3, [pc, #560]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10d      	bne.n	80063da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80063be:	4b89      	ldr	r3, [pc, #548]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	4a88      	ldr	r2, [pc, #544]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ca:	4b86      	ldr	r3, [pc, #536]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063d6:	2301      	movs	r3, #1
 80063d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063da:	4b83      	ldr	r3, [pc, #524]	; (80065e8 <HAL_RCC_OscConfig+0x4d4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d118      	bne.n	8006418 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80063e6:	4b80      	ldr	r3, [pc, #512]	; (80065e8 <HAL_RCC_OscConfig+0x4d4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a7f      	ldr	r2, [pc, #508]	; (80065e8 <HAL_RCC_OscConfig+0x4d4>)
 80063ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063f2:	f7fc ff79 	bl	80032e8 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063fa:	f7fc ff75 	bl	80032e8 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b64      	cmp	r3, #100	; 0x64
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e12a      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800640c:	4b76      	ldr	r3, [pc, #472]	; (80065e8 <HAL_RCC_OscConfig+0x4d4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d106      	bne.n	800642e <HAL_RCC_OscConfig+0x31a>
 8006420:	4b70      	ldr	r3, [pc, #448]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	4a6f      	ldr	r2, [pc, #444]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	6713      	str	r3, [r2, #112]	; 0x70
 800642c:	e02d      	b.n	800648a <HAL_RCC_OscConfig+0x376>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10c      	bne.n	8006450 <HAL_RCC_OscConfig+0x33c>
 8006436:	4b6b      	ldr	r3, [pc, #428]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	4a6a      	ldr	r2, [pc, #424]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	6713      	str	r3, [r2, #112]	; 0x70
 8006442:	4b68      	ldr	r3, [pc, #416]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	4a67      	ldr	r2, [pc, #412]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006448:	f023 0304 	bic.w	r3, r3, #4
 800644c:	6713      	str	r3, [r2, #112]	; 0x70
 800644e:	e01c      	b.n	800648a <HAL_RCC_OscConfig+0x376>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b05      	cmp	r3, #5
 8006456:	d10c      	bne.n	8006472 <HAL_RCC_OscConfig+0x35e>
 8006458:	4b62      	ldr	r3, [pc, #392]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 800645a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645c:	4a61      	ldr	r2, [pc, #388]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 800645e:	f043 0304 	orr.w	r3, r3, #4
 8006462:	6713      	str	r3, [r2, #112]	; 0x70
 8006464:	4b5f      	ldr	r3, [pc, #380]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	4a5e      	ldr	r2, [pc, #376]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6713      	str	r3, [r2, #112]	; 0x70
 8006470:	e00b      	b.n	800648a <HAL_RCC_OscConfig+0x376>
 8006472:	4b5c      	ldr	r3, [pc, #368]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	4a5b      	ldr	r2, [pc, #364]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	6713      	str	r3, [r2, #112]	; 0x70
 800647e:	4b59      	ldr	r3, [pc, #356]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	4a58      	ldr	r2, [pc, #352]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006484:	f023 0304 	bic.w	r3, r3, #4
 8006488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d015      	beq.n	80064be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006492:	f7fc ff29 	bl	80032e8 <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006498:	e00a      	b.n	80064b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800649a:	f7fc ff25 	bl	80032e8 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e0d8      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b0:	4b4c      	ldr	r3, [pc, #304]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0ee      	beq.n	800649a <HAL_RCC_OscConfig+0x386>
 80064bc:	e014      	b.n	80064e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064be:	f7fc ff13 	bl	80032e8 <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064c4:	e00a      	b.n	80064dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c6:	f7fc ff0f 	bl	80032e8 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e0c2      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064dc:	4b41      	ldr	r3, [pc, #260]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ee      	bne.n	80064c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d105      	bne.n	80064fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ee:	4b3d      	ldr	r3, [pc, #244]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	4a3c      	ldr	r2, [pc, #240]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80064f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80ae 	beq.w	8006660 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006504:	4b37      	ldr	r3, [pc, #220]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b08      	cmp	r3, #8
 800650e:	d06d      	beq.n	80065ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d14b      	bne.n	80065b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006518:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a31      	ldr	r2, [pc, #196]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 800651e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006524:	f7fc fee0 	bl	80032e8 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800652c:	f7fc fedc 	bl	80032e8 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e091      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653e:	4b29      	ldr	r3, [pc, #164]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	019b      	lsls	r3, r3, #6
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	085b      	lsrs	r3, r3, #1
 8006562:	3b01      	subs	r3, #1
 8006564:	041b      	lsls	r3, r3, #16
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	061b      	lsls	r3, r3, #24
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	071b      	lsls	r3, r3, #28
 8006576:	491b      	ldr	r1, [pc, #108]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800657c:	4b19      	ldr	r3, [pc, #100]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a18      	ldr	r2, [pc, #96]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 8006582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7fc feae 	bl	80032e8 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006590:	f7fc feaa 	bl	80032e8 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e05f      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0x47c>
 80065ae:	e057      	b.n	8006660 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a0b      	ldr	r2, [pc, #44]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80065b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fc fe94 	bl	80032e8 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fc fe90 	bl	80032e8 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e045      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d6:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <HAL_RCC_OscConfig+0x4d0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x4b0>
 80065e2:	e03d      	b.n	8006660 <HAL_RCC_OscConfig+0x54c>
 80065e4:	40023800 	.word	0x40023800
 80065e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80065ec:	4b1f      	ldr	r3, [pc, #124]	; (800666c <HAL_RCC_OscConfig+0x558>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d030      	beq.n	800665c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006604:	429a      	cmp	r2, r3
 8006606:	d129      	bne.n	800665c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006612:	429a      	cmp	r2, r3
 8006614:	d122      	bne.n	800665c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800661c:	4013      	ands	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006622:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006624:	4293      	cmp	r3, r2
 8006626:	d119      	bne.n	800665c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	3b01      	subs	r3, #1
 8006636:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006638:	429a      	cmp	r2, r3
 800663a:	d10f      	bne.n	800665c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006648:	429a      	cmp	r2, r3
 800664a:	d107      	bne.n	800665c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d001      	beq.n	8006660 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40023800 	.word	0x40023800

08006670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0d0      	b.n	800682a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006688:	4b6a      	ldr	r3, [pc, #424]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d910      	bls.n	80066b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006696:	4b67      	ldr	r3, [pc, #412]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f023 020f 	bic.w	r2, r3, #15
 800669e:	4965      	ldr	r1, [pc, #404]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066a6:	4b63      	ldr	r3, [pc, #396]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d001      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0b8      	b.n	800682a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d020      	beq.n	8006706 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066d0:	4b59      	ldr	r3, [pc, #356]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4a58      	ldr	r2, [pc, #352]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80066d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066e8:	4b53      	ldr	r3, [pc, #332]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	4a52      	ldr	r2, [pc, #328]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80066ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f4:	4b50      	ldr	r3, [pc, #320]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	494d      	ldr	r1, [pc, #308]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006702:	4313      	orrs	r3, r2
 8006704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d040      	beq.n	8006794 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d107      	bne.n	800672a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671a:	4b47      	ldr	r3, [pc, #284]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d115      	bne.n	8006752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e07f      	b.n	800682a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d107      	bne.n	8006742 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006732:	4b41      	ldr	r3, [pc, #260]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e073      	b.n	800682a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006742:	4b3d      	ldr	r3, [pc, #244]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e06b      	b.n	800682a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006752:	4b39      	ldr	r3, [pc, #228]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f023 0203 	bic.w	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4936      	ldr	r1, [pc, #216]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006760:	4313      	orrs	r3, r2
 8006762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006764:	f7fc fdc0 	bl	80032e8 <HAL_GetTick>
 8006768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800676a:	e00a      	b.n	8006782 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800676c:	f7fc fdbc 	bl	80032e8 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f241 3288 	movw	r2, #5000	; 0x1388
 800677a:	4293      	cmp	r3, r2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e053      	b.n	800682a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006782:	4b2d      	ldr	r3, [pc, #180]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 020c 	and.w	r2, r3, #12
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	429a      	cmp	r2, r3
 8006792:	d1eb      	bne.n	800676c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006794:	4b27      	ldr	r3, [pc, #156]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d210      	bcs.n	80067c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067a2:	4b24      	ldr	r3, [pc, #144]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f023 020f 	bic.w	r2, r3, #15
 80067aa:	4922      	ldr	r1, [pc, #136]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	4b20      	ldr	r3, [pc, #128]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e032      	b.n	800682a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d008      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067d0:	4b19      	ldr	r3, [pc, #100]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4916      	ldr	r1, [pc, #88]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067ee:	4b12      	ldr	r3, [pc, #72]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	490e      	ldr	r1, [pc, #56]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006802:	f000 f821 	bl	8006848 <HAL_RCC_GetSysClockFreq>
 8006806:	4602      	mov	r2, r0
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	490a      	ldr	r1, [pc, #40]	; (800683c <HAL_RCC_ClockConfig+0x1cc>)
 8006814:	5ccb      	ldrb	r3, [r1, r3]
 8006816:	fa22 f303 	lsr.w	r3, r2, r3
 800681a:	4a09      	ldr	r2, [pc, #36]	; (8006840 <HAL_RCC_ClockConfig+0x1d0>)
 800681c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800681e:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_RCC_ClockConfig+0x1d4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f7fc f934 	bl	8002a90 <HAL_InitTick>

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40023c00 	.word	0x40023c00
 8006838:	40023800 	.word	0x40023800
 800683c:	08023560 	.word	0x08023560
 8006840:	20000008 	.word	0x20000008
 8006844:	2000000c 	.word	0x2000000c

08006848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800684c:	b094      	sub	sp, #80	; 0x50
 800684e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	647b      	str	r3, [r7, #68]	; 0x44
 8006854:	2300      	movs	r3, #0
 8006856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006858:	2300      	movs	r3, #0
 800685a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006860:	4b79      	ldr	r3, [pc, #484]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 030c 	and.w	r3, r3, #12
 8006868:	2b08      	cmp	r3, #8
 800686a:	d00d      	beq.n	8006888 <HAL_RCC_GetSysClockFreq+0x40>
 800686c:	2b08      	cmp	r3, #8
 800686e:	f200 80e1 	bhi.w	8006a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_RCC_GetSysClockFreq+0x34>
 8006876:	2b04      	cmp	r3, #4
 8006878:	d003      	beq.n	8006882 <HAL_RCC_GetSysClockFreq+0x3a>
 800687a:	e0db      	b.n	8006a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800687c:	4b73      	ldr	r3, [pc, #460]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800687e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006880:	e0db      	b.n	8006a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006882:	4b73      	ldr	r3, [pc, #460]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8006884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006886:	e0d8      	b.n	8006a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006888:	4b6f      	ldr	r3, [pc, #444]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006890:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006892:	4b6d      	ldr	r3, [pc, #436]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d063      	beq.n	8006966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800689e:	4b6a      	ldr	r3, [pc, #424]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	099b      	lsrs	r3, r3, #6
 80068a4:	2200      	movs	r2, #0
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b0:	633b      	str	r3, [r7, #48]	; 0x30
 80068b2:	2300      	movs	r3, #0
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34
 80068b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80068ba:	4622      	mov	r2, r4
 80068bc:	462b      	mov	r3, r5
 80068be:	f04f 0000 	mov.w	r0, #0
 80068c2:	f04f 0100 	mov.w	r1, #0
 80068c6:	0159      	lsls	r1, r3, #5
 80068c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068cc:	0150      	lsls	r0, r2, #5
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4621      	mov	r1, r4
 80068d4:	1a51      	subs	r1, r2, r1
 80068d6:	6139      	str	r1, [r7, #16]
 80068d8:	4629      	mov	r1, r5
 80068da:	eb63 0301 	sbc.w	r3, r3, r1
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068ec:	4659      	mov	r1, fp
 80068ee:	018b      	lsls	r3, r1, #6
 80068f0:	4651      	mov	r1, sl
 80068f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068f6:	4651      	mov	r1, sl
 80068f8:	018a      	lsls	r2, r1, #6
 80068fa:	4651      	mov	r1, sl
 80068fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006900:	4659      	mov	r1, fp
 8006902:	eb63 0901 	sbc.w	r9, r3, r1
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800691a:	4690      	mov	r8, r2
 800691c:	4699      	mov	r9, r3
 800691e:	4623      	mov	r3, r4
 8006920:	eb18 0303 	adds.w	r3, r8, r3
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	462b      	mov	r3, r5
 8006928:	eb49 0303 	adc.w	r3, r9, r3
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800693a:	4629      	mov	r1, r5
 800693c:	024b      	lsls	r3, r1, #9
 800693e:	4621      	mov	r1, r4
 8006940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006944:	4621      	mov	r1, r4
 8006946:	024a      	lsls	r2, r1, #9
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694e:	2200      	movs	r2, #0
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
 8006952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006958:	f7f9 fff4 	bl	8000944 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4613      	mov	r3, r2
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006964:	e058      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006966:	4b38      	ldr	r3, [pc, #224]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	099b      	lsrs	r3, r3, #6
 800696c:	2200      	movs	r2, #0
 800696e:	4618      	mov	r0, r3
 8006970:	4611      	mov	r1, r2
 8006972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	2300      	movs	r3, #0
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
 800697c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	f04f 0000 	mov.w	r0, #0
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	0159      	lsls	r1, r3, #5
 800698e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006992:	0150      	lsls	r0, r2, #5
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4641      	mov	r1, r8
 800699a:	ebb2 0a01 	subs.w	sl, r2, r1
 800699e:	4649      	mov	r1, r9
 80069a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069b8:	ebb2 040a 	subs.w	r4, r2, sl
 80069bc:	eb63 050b 	sbc.w	r5, r3, fp
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	00eb      	lsls	r3, r5, #3
 80069ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069ce:	00e2      	lsls	r2, r4, #3
 80069d0:	4614      	mov	r4, r2
 80069d2:	461d      	mov	r5, r3
 80069d4:	4643      	mov	r3, r8
 80069d6:	18e3      	adds	r3, r4, r3
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	464b      	mov	r3, r9
 80069dc:	eb45 0303 	adc.w	r3, r5, r3
 80069e0:	607b      	str	r3, [r7, #4]
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069ee:	4629      	mov	r1, r5
 80069f0:	028b      	lsls	r3, r1, #10
 80069f2:	4621      	mov	r1, r4
 80069f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069f8:	4621      	mov	r1, r4
 80069fa:	028a      	lsls	r2, r1, #10
 80069fc:	4610      	mov	r0, r2
 80069fe:	4619      	mov	r1, r3
 8006a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a02:	2200      	movs	r2, #0
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	61fa      	str	r2, [r7, #28]
 8006a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a0c:	f7f9 ff9a 	bl	8000944 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4613      	mov	r3, r2
 8006a16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	0c1b      	lsrs	r3, r3, #16
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	3301      	adds	r3, #1
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a32:	e002      	b.n	8006a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a34:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3750      	adds	r7, #80	; 0x50
 8006a40:	46bd      	mov	sp, r7
 8006a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a46:	bf00      	nop
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	00f42400 	.word	0x00f42400
 8006a50:	007a1200 	.word	0x007a1200

08006a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a58:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000008 	.word	0x20000008

08006a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a70:	f7ff fff0 	bl	8006a54 <HAL_RCC_GetHCLKFreq>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	0a9b      	lsrs	r3, r3, #10
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	4903      	ldr	r1, [pc, #12]	; (8006a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a82:	5ccb      	ldrb	r3, [r1, r3]
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	08023570 	.word	0x08023570

08006a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a98:	f7ff ffdc 	bl	8006a54 <HAL_RCC_GetHCLKFreq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	0b5b      	lsrs	r3, r3, #13
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	4903      	ldr	r1, [pc, #12]	; (8006ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aaa:	5ccb      	ldrb	r3, [r1, r3]
 8006aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	08023570 	.word	0x08023570

08006abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	220f      	movs	r2, #15
 8006aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006acc:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0203 	and.w	r2, r3, #3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006af0:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <HAL_RCC_GetClockConfig+0x5c>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	08db      	lsrs	r3, r3, #3
 8006af6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006afe:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <HAL_RCC_GetClockConfig+0x60>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	601a      	str	r2, [r3, #0]
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	40023c00 	.word	0x40023c00

08006b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d012      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b48:	4b69      	ldr	r3, [pc, #420]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	4a68      	ldr	r2, [pc, #416]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b52:	6093      	str	r3, [r2, #8]
 8006b54:	4b66      	ldr	r3, [pc, #408]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5c:	4964      	ldr	r1, [pc, #400]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d017      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b7a:	4b5d      	ldr	r3, [pc, #372]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	4959      	ldr	r1, [pc, #356]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b98:	d101      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d017      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006bb6:	4b4e      	ldr	r3, [pc, #312]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	494a      	ldr	r1, [pc, #296]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd4:	d101      	bne.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006be2:	2301      	movs	r3, #1
 8006be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 808b 	beq.w	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c04:	4b3a      	ldr	r3, [pc, #232]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	4a39      	ldr	r2, [pc, #228]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8006c10:	4b37      	ldr	r3, [pc, #220]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c18:	60bb      	str	r3, [r7, #8]
 8006c1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c1c:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a34      	ldr	r2, [pc, #208]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c28:	f7fc fb5e 	bl	80032e8 <HAL_GetTick>
 8006c2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c30:	f7fc fb5a 	bl	80032e8 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b64      	cmp	r3, #100	; 0x64
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e38f      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c42:	4b2c      	ldr	r3, [pc, #176]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f0      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c4e:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d035      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d02e      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c6c:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c76:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	4a1d      	ldr	r2, [pc, #116]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c82:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c8e:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c94:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d114      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca0:	f7fc fb22 	bl	80032e8 <HAL_GetTick>
 8006ca4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca6:	e00a      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca8:	f7fc fb1e 	bl	80032e8 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e351      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbe:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0ee      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd6:	d111      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ce4:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ce6:	400b      	ands	r3, r1
 8006ce8:	4901      	ldr	r1, [pc, #4]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
 8006cee:	e00b      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	40007000 	.word	0x40007000
 8006cf8:	0ffffcff 	.word	0x0ffffcff
 8006cfc:	4bac      	ldr	r3, [pc, #688]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4aab      	ldr	r2, [pc, #684]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d06:	6093      	str	r3, [r2, #8]
 8006d08:	4ba9      	ldr	r3, [pc, #676]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d14:	49a6      	ldr	r1, [pc, #664]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d010      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d26:	4ba2      	ldr	r3, [pc, #648]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d2c:	4aa0      	ldr	r2, [pc, #640]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d36:	4b9e      	ldr	r3, [pc, #632]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	499b      	ldr	r1, [pc, #620]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d54:	4b96      	ldr	r3, [pc, #600]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d62:	4993      	ldr	r1, [pc, #588]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d76:	4b8e      	ldr	r3, [pc, #568]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d84:	498a      	ldr	r1, [pc, #552]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d98:	4b85      	ldr	r3, [pc, #532]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da6:	4982      	ldr	r1, [pc, #520]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dba:	4b7d      	ldr	r3, [pc, #500]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	4979      	ldr	r1, [pc, #484]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ddc:	4b74      	ldr	r3, [pc, #464]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de2:	f023 0203 	bic.w	r2, r3, #3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dea:	4971      	ldr	r1, [pc, #452]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dfe:	4b6c      	ldr	r3, [pc, #432]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e04:	f023 020c 	bic.w	r2, r3, #12
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0c:	4968      	ldr	r1, [pc, #416]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e20:	4b63      	ldr	r3, [pc, #396]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2e:	4960      	ldr	r1, [pc, #384]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e42:	4b5b      	ldr	r3, [pc, #364]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e50:	4957      	ldr	r1, [pc, #348]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e64:	4b52      	ldr	r3, [pc, #328]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e72:	494f      	ldr	r1, [pc, #316]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e86:	4b4a      	ldr	r3, [pc, #296]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e94:	4946      	ldr	r1, [pc, #280]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ea8:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb6:	493e      	ldr	r1, [pc, #248]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006eca:	4b39      	ldr	r3, [pc, #228]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed8:	4935      	ldr	r1, [pc, #212]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006eec:	4b30      	ldr	r3, [pc, #192]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006efa:	492d      	ldr	r1, [pc, #180]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d011      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f0e:	4b28      	ldr	r3, [pc, #160]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f1c:	4924      	ldr	r1, [pc, #144]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f4e:	4b18      	ldr	r3, [pc, #96]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5c:	4914      	ldr	r1, [pc, #80]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f80:	490b      	ldr	r1, [pc, #44]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00f      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa4:	4902      	ldr	r1, [pc, #8]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fac:	e002      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fc0:	4b8a      	ldr	r3, [pc, #552]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	4986      	ldr	r1, [pc, #536]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006fe4:	4b81      	ldr	r3, [pc, #516]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff4:	497d      	ldr	r1, [pc, #500]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d006      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80d6 	beq.w	80071bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007010:	4b76      	ldr	r3, [pc, #472]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a75      	ldr	r2, [pc, #468]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800701a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701c:	f7fc f964 	bl	80032e8 <HAL_GetTick>
 8007020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007024:	f7fc f960 	bl	80032e8 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	; 0x64
 8007030:	d901      	bls.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e195      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007036:	4b6d      	ldr	r3, [pc, #436]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d021      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	2b00      	cmp	r3, #0
 8007054:	d11d      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007056:	4b65      	ldr	r3, [pc, #404]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007064:	4b61      	ldr	r3, [pc, #388]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706a:	0e1b      	lsrs	r3, r3, #24
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	019a      	lsls	r2, r3, #6
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	431a      	orrs	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	061b      	lsls	r3, r3, #24
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	071b      	lsls	r3, r3, #28
 800708a:	4958      	ldr	r1, [pc, #352]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a6:	d00a      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02e      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070bc:	d129      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80070be:	4b4b      	ldr	r3, [pc, #300]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070cc:	4b47      	ldr	r3, [pc, #284]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d2:	0f1b      	lsrs	r3, r3, #28
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	019a      	lsls	r2, r3, #6
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	061b      	lsls	r3, r3, #24
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	071b      	lsls	r3, r3, #28
 80070f2:	493e      	ldr	r1, [pc, #248]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070fa:	4b3c      	ldr	r3, [pc, #240]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007100:	f023 021f 	bic.w	r2, r3, #31
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	3b01      	subs	r3, #1
 800710a:	4938      	ldr	r1, [pc, #224]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01d      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800711e:	4b33      	ldr	r3, [pc, #204]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007124:	0e1b      	lsrs	r3, r3, #24
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800712c:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800712e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007132:	0f1b      	lsrs	r3, r3, #28
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	019a      	lsls	r2, r3, #6
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	431a      	orrs	r2, r3
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	431a      	orrs	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	071b      	lsls	r3, r3, #28
 8007152:	4926      	ldr	r1, [pc, #152]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d011      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	019a      	lsls	r2, r3, #6
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	061b      	lsls	r3, r3, #24
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	071b      	lsls	r3, r3, #28
 8007182:	491a      	ldr	r1, [pc, #104]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007184:	4313      	orrs	r3, r2
 8007186:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800718a:	4b18      	ldr	r3, [pc, #96]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a17      	ldr	r2, [pc, #92]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007196:	f7fc f8a7 	bl	80032e8 <HAL_GetTick>
 800719a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800719c:	e008      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800719e:	f7fc f8a3 	bl	80032e8 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b64      	cmp	r3, #100	; 0x64
 80071aa:	d901      	bls.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e0d8      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071b0:	4b0e      	ldr	r3, [pc, #56]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	f040 80ce 	bne.w	8007360 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071c4:	4b09      	ldr	r3, [pc, #36]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a08      	ldr	r2, [pc, #32]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071d0:	f7fc f88a 	bl	80032e8 <HAL_GetTick>
 80071d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071d6:	e00b      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071d8:	f7fc f886 	bl	80032e8 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b64      	cmp	r3, #100	; 0x64
 80071e4:	d904      	bls.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e0bb      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80071ea:	bf00      	nop
 80071ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071f0:	4b5e      	ldr	r3, [pc, #376]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fc:	d0ec      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800721a:	2b00      	cmp	r3, #0
 800721c:	d02e      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d12a      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007226:	4b51      	ldr	r3, [pc, #324]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722c:	0c1b      	lsrs	r3, r3, #16
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007234:	4b4d      	ldr	r3, [pc, #308]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723a:	0f1b      	lsrs	r3, r3, #28
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	019a      	lsls	r2, r3, #6
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	041b      	lsls	r3, r3, #16
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	061b      	lsls	r3, r3, #24
 8007254:	431a      	orrs	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	071b      	lsls	r3, r3, #28
 800725a:	4944      	ldr	r1, [pc, #272]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007262:	4b42      	ldr	r3, [pc, #264]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007268:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	3b01      	subs	r3, #1
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	493d      	ldr	r1, [pc, #244]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d022      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800728c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007290:	d11d      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007292:	4b36      	ldr	r3, [pc, #216]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007298:	0e1b      	lsrs	r3, r3, #24
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072a0:	4b32      	ldr	r3, [pc, #200]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	0f1b      	lsrs	r3, r3, #28
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	019a      	lsls	r2, r3, #6
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	431a      	orrs	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	061b      	lsls	r3, r3, #24
 80072c0:	431a      	orrs	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	071b      	lsls	r3, r3, #28
 80072c6:	4929      	ldr	r1, [pc, #164]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0308 	and.w	r3, r3, #8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d028      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072da:	4b24      	ldr	r3, [pc, #144]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e0:	0e1b      	lsrs	r3, r3, #24
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072e8:	4b20      	ldr	r3, [pc, #128]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	019a      	lsls	r2, r3, #6
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	431a      	orrs	r2, r3
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	061b      	lsls	r3, r3, #24
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	071b      	lsls	r3, r3, #28
 800730e:	4917      	ldr	r1, [pc, #92]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007316:	4b15      	ldr	r3, [pc, #84]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	4911      	ldr	r1, [pc, #68]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800732c:	4b0f      	ldr	r3, [pc, #60]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a0e      	ldr	r2, [pc, #56]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007338:	f7fb ffd6 	bl	80032e8 <HAL_GetTick>
 800733c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800733e:	e008      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007340:	f7fb ffd2 	bl	80032e8 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b64      	cmp	r3, #100	; 0x64
 800734c:	d901      	bls.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e007      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007352:	4b06      	ldr	r3, [pc, #24]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800735a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800735e:	d1ef      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3720      	adds	r7, #32
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	40023800 	.word	0x40023800

08007370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e049      	b.n	8007416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d106      	bne.n	800739c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f841 	bl	800741e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	f000 fb34 	bl	8007a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	d001      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e054      	b.n	80074f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a26      	ldr	r2, [pc, #152]	; (8007504 <HAL_TIM_Base_Start_IT+0xd0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d022      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007476:	d01d      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a22      	ldr	r2, [pc, #136]	; (8007508 <HAL_TIM_Base_Start_IT+0xd4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d018      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a21      	ldr	r2, [pc, #132]	; (800750c <HAL_TIM_Base_Start_IT+0xd8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <HAL_TIM_Base_Start_IT+0xdc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00e      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1e      	ldr	r2, [pc, #120]	; (8007514 <HAL_TIM_Base_Start_IT+0xe0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d009      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <HAL_TIM_Base_Start_IT+0xe4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d004      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1b      	ldr	r2, [pc, #108]	; (800751c <HAL_TIM_Base_Start_IT+0xe8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d115      	bne.n	80074e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	4b19      	ldr	r3, [pc, #100]	; (8007520 <HAL_TIM_Base_Start_IT+0xec>)
 80074bc:	4013      	ands	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b06      	cmp	r3, #6
 80074c4:	d015      	beq.n	80074f2 <HAL_TIM_Base_Start_IT+0xbe>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074cc:	d011      	beq.n	80074f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0201 	orr.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074de:	e008      	b.n	80074f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e000      	b.n	80074f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40010000 	.word	0x40010000
 8007508:	40000400 	.word	0x40000400
 800750c:	40000800 	.word	0x40000800
 8007510:	40000c00 	.word	0x40000c00
 8007514:	40010400 	.word	0x40010400
 8007518:	40014000 	.word	0x40014000
 800751c:	40001800 	.word	0x40001800
 8007520:	00010007 	.word	0x00010007

08007524 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e08f      	b.n	8007658 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fb fd0b 	bl	8002f68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2202      	movs	r2, #2
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6899      	ldr	r1, [r3, #8]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	4b3e      	ldr	r3, [pc, #248]	; (8007660 <HAL_TIM_Encoder_Init+0x13c>)
 8007566:	400b      	ands	r3, r1
 8007568:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f000 fa51 	bl	8007a1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	4b31      	ldr	r3, [pc, #196]	; (8007664 <HAL_TIM_Encoder_Init+0x140>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	4313      	orrs	r3, r2
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <HAL_TIM_Encoder_Init+0x144>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4b2a      	ldr	r3, [pc, #168]	; (800766c <HAL_TIM_Encoder_Init+0x148>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	4313      	orrs	r3, r2
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	011a      	lsls	r2, r3, #4
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	031b      	lsls	r3, r3, #12
 80075e4:	4313      	orrs	r3, r2
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80075f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	4313      	orrs	r3, r2
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	fffebff8 	.word	0xfffebff8
 8007664:	fffffcfc 	.word	0xfffffcfc
 8007668:	fffff3f3 	.word	0xfffff3f3
 800766c:	ffff0f0f 	.word	0xffff0f0f

08007670 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007680:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007688:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007690:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007698:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d110      	bne.n	80076c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d102      	bne.n	80076ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076a6:	7b7b      	ldrb	r3, [r7, #13]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d001      	beq.n	80076b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e069      	b.n	8007784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c0:	e031      	b.n	8007726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d110      	bne.n	80076ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d102      	bne.n	80076d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076ce:	7b3b      	ldrb	r3, [r7, #12]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d001      	beq.n	80076d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e055      	b.n	8007784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076e8:	e01d      	b.n	8007726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d108      	bne.n	8007702 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d105      	bne.n	8007702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076f6:	7b7b      	ldrb	r3, [r7, #13]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d102      	bne.n	8007702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076fc:	7b3b      	ldrb	r3, [r7, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d001      	beq.n	8007706 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e03e      	b.n	8007784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_TIM_Encoder_Start+0xc4>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b04      	cmp	r3, #4
 8007730:	d008      	beq.n	8007744 <HAL_TIM_Encoder_Start+0xd4>
 8007732:	e00f      	b.n	8007754 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2201      	movs	r2, #1
 800773a:	2100      	movs	r1, #0
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fa0d 	bl	8007b5c <TIM_CCxChannelCmd>
      break;
 8007742:	e016      	b.n	8007772 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2201      	movs	r2, #1
 800774a:	2104      	movs	r1, #4
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fa05 	bl	8007b5c <TIM_CCxChannelCmd>
      break;
 8007752:	e00e      	b.n	8007772 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2201      	movs	r2, #1
 800775a:	2100      	movs	r1, #0
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f9fd 	bl	8007b5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2201      	movs	r2, #1
 8007768:	2104      	movs	r1, #4
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f9f6 	bl	8007b5c <TIM_CCxChannelCmd>
      break;
 8007770:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d122      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d11b      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0202 	mvn.w	r2, #2
 80077b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f905 	bl	80079de <HAL_TIM_IC_CaptureCallback>
 80077d4:	e005      	b.n	80077e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8f7 	bl	80079ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f908 	bl	80079f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d122      	bne.n	800783c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b04      	cmp	r3, #4
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0204 	mvn.w	r2, #4
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f8db 	bl	80079de <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f8cd 	bl	80079ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f8de 	bl	80079f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b08      	cmp	r3, #8
 8007848:	d122      	bne.n	8007890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b08      	cmp	r3, #8
 8007856:	d11b      	bne.n	8007890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0208 	mvn.w	r2, #8
 8007860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2204      	movs	r2, #4
 8007866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f8b1 	bl	80079de <HAL_TIM_IC_CaptureCallback>
 800787c:	e005      	b.n	800788a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8a3 	bl	80079ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f8b4 	bl	80079f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	2b10      	cmp	r3, #16
 800789c:	d122      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d11b      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0210 	mvn.w	r2, #16
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2208      	movs	r2, #8
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f887 	bl	80079de <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f879 	bl	80079ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f88a 	bl	80079f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d10e      	bne.n	8007910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d107      	bne.n	8007910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0201 	mvn.w	r2, #1
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fa ff1e 	bl	800274c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791a:	2b80      	cmp	r3, #128	; 0x80
 800791c:	d10e      	bne.n	800793c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d107      	bne.n	800793c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f9ce 	bl	8007cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800794a:	d10e      	bne.n	800796a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b80      	cmp	r3, #128	; 0x80
 8007958:	d107      	bne.n	800796a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9c1 	bl	8007cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	d10e      	bne.n	8007996 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d107      	bne.n	8007996 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800798e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f838 	bl	8007a06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d10e      	bne.n	80079c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d107      	bne.n	80079c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f06f 0220 	mvn.w	r2, #32
 80079ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f981 	bl	8007cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
	...

08007a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a40      	ldr	r2, [pc, #256]	; (8007b30 <TIM_Base_SetConfig+0x114>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d013      	beq.n	8007a5c <TIM_Base_SetConfig+0x40>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a3a:	d00f      	beq.n	8007a5c <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a3d      	ldr	r2, [pc, #244]	; (8007b34 <TIM_Base_SetConfig+0x118>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00b      	beq.n	8007a5c <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a3c      	ldr	r2, [pc, #240]	; (8007b38 <TIM_Base_SetConfig+0x11c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d007      	beq.n	8007a5c <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a3b      	ldr	r2, [pc, #236]	; (8007b3c <TIM_Base_SetConfig+0x120>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d003      	beq.n	8007a5c <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a3a      	ldr	r2, [pc, #232]	; (8007b40 <TIM_Base_SetConfig+0x124>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d108      	bne.n	8007a6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a2f      	ldr	r2, [pc, #188]	; (8007b30 <TIM_Base_SetConfig+0x114>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d02b      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7c:	d027      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2c      	ldr	r2, [pc, #176]	; (8007b34 <TIM_Base_SetConfig+0x118>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d023      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2b      	ldr	r2, [pc, #172]	; (8007b38 <TIM_Base_SetConfig+0x11c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d01f      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2a      	ldr	r2, [pc, #168]	; (8007b3c <TIM_Base_SetConfig+0x120>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d01b      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a29      	ldr	r2, [pc, #164]	; (8007b40 <TIM_Base_SetConfig+0x124>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d017      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a28      	ldr	r2, [pc, #160]	; (8007b44 <TIM_Base_SetConfig+0x128>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a27      	ldr	r2, [pc, #156]	; (8007b48 <TIM_Base_SetConfig+0x12c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00f      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a26      	ldr	r2, [pc, #152]	; (8007b4c <TIM_Base_SetConfig+0x130>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00b      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a25      	ldr	r2, [pc, #148]	; (8007b50 <TIM_Base_SetConfig+0x134>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d007      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a24      	ldr	r2, [pc, #144]	; (8007b54 <TIM_Base_SetConfig+0x138>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d003      	beq.n	8007ace <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a23      	ldr	r2, [pc, #140]	; (8007b58 <TIM_Base_SetConfig+0x13c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d108      	bne.n	8007ae0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <TIM_Base_SetConfig+0x114>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_Base_SetConfig+0xf8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a0c      	ldr	r2, [pc, #48]	; (8007b40 <TIM_Base_SetConfig+0x124>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d103      	bne.n	8007b1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	615a      	str	r2, [r3, #20]
}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40010000 	.word	0x40010000
 8007b34:	40000400 	.word	0x40000400
 8007b38:	40000800 	.word	0x40000800
 8007b3c:	40000c00 	.word	0x40000c00
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800
 8007b50:	40001800 	.word	0x40001800
 8007b54:	40001c00 	.word	0x40001c00
 8007b58:	40002000 	.word	0x40002000

08007b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f003 031f 	and.w	r3, r3, #31
 8007b6e:	2201      	movs	r2, #1
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1a      	ldr	r2, [r3, #32]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	401a      	ands	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a1a      	ldr	r2, [r3, #32]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 031f 	and.w	r3, r3, #31
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	fa01 f303 	lsl.w	r3, r1, r3
 8007b94:	431a      	orrs	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e06d      	b.n	8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a30      	ldr	r2, [pc, #192]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a2f      	ldr	r2, [pc, #188]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d108      	bne.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a20      	ldr	r2, [pc, #128]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d022      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c32:	d01d      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1d      	ldr	r2, [pc, #116]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d018      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1a      	ldr	r2, [pc, #104]	; (8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00e      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a15      	ldr	r2, [pc, #84]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d009      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d004      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a15      	ldr	r2, [pc, #84]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10c      	bne.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40010400 	.word	0x40010400
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40001800 	.word	0x40001800

08007cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e040      	b.n	8007d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fb f9c6 	bl	80030b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	; 0x24
 8007d2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fd32 	bl	80087a8 <UART_SetConfig>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e022      	b.n	8007d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 ff8a 	bl	8008c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f811 	bl	8008db4 <UART_CheckIdleState>
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	; 0x28
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d171      	bne.n	8007e98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_UART_Transmit+0x24>
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e06a      	b.n	8007e9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2221      	movs	r2, #33	; 0x21
 8007dd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dd2:	f7fb fa89 	bl	80032e8 <HAL_GetTick>
 8007dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	88fa      	ldrh	r2, [r7, #6]
 8007ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	88fa      	ldrh	r2, [r7, #6]
 8007de4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df0:	d108      	bne.n	8007e04 <HAL_UART_Transmit+0x68>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d104      	bne.n	8007e04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	e003      	b.n	8007e0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e0c:	e02c      	b.n	8007e68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2200      	movs	r2, #0
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f001 f818 	bl	8008e4e <UART_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e038      	b.n	8007e9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10b      	bne.n	8007e46 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	3302      	adds	r3, #2
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	e007      	b.n	8007e56 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	3301      	adds	r3, #1
 8007e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1cc      	bne.n	8007e0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 ffe5 	bl	8008e4e <UART_WaitOnFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e005      	b.n	8007e9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e000      	b.n	8007e9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007e98:	2302      	movs	r3, #2
  }
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08a      	sub	sp, #40	; 0x28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb6:	2b20      	cmp	r3, #32
 8007eb8:	d165      	bne.n	8007f86 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_UART_Transmit_DMA+0x22>
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e05e      	b.n	8007f88 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	88fa      	ldrh	r2, [r7, #6]
 8007ed4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2221      	movs	r2, #33	; 0x21
 8007eec:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d027      	beq.n	8007f46 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efa:	4a25      	ldr	r2, [pc, #148]	; (8007f90 <HAL_UART_Transmit_DMA+0xec>)
 8007efc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f02:	4a24      	ldr	r2, [pc, #144]	; (8007f94 <HAL_UART_Transmit_DMA+0xf0>)
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0a:	4a23      	ldr	r2, [pc, #140]	; (8007f98 <HAL_UART_Transmit_DMA+0xf4>)
 8007f0c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	2200      	movs	r2, #0
 8007f14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3328      	adds	r3, #40	; 0x28
 8007f26:	461a      	mov	r2, r3
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	f7fc f8a3 	bl	8004074 <HAL_DMA_Start_IT>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d008      	beq.n	8007f46 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2210      	movs	r2, #16
 8007f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e020      	b.n	8007f88 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2240      	movs	r2, #64	; 0x40
 8007f4c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3308      	adds	r3, #8
 8007f54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6e:	623a      	str	r2, [r7, #32]
 8007f70:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	69f9      	ldr	r1, [r7, #28]
 8007f74:	6a3a      	ldr	r2, [r7, #32]
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e5      	bne.n	8007f4e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e000      	b.n	8007f88 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007f86:	2302      	movs	r3, #2
  }
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3728      	adds	r7, #40	; 0x28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	08009231 	.word	0x08009231
 8007f94:	080092c7 	.word	0x080092c7
 8007f98:	08009449 	.word	0x08009449

08007f9c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08a      	sub	sp, #40	; 0x28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fb0:	2b20      	cmp	r3, #32
 8007fb2:	d132      	bne.n	800801a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <HAL_UART_Receive_DMA+0x24>
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e02b      	b.n	800801c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d018      	beq.n	800800a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	623b      	str	r3, [r7, #32]
 8007ff8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	69f9      	ldr	r1, [r7, #28]
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	61bb      	str	r3, [r7, #24]
   return(result);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e6      	bne.n	8007fd8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	461a      	mov	r2, r3
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 ffe3 	bl	8008fdc <UART_Start_Receive_DMA>
 8008016:	4603      	mov	r3, r0
 8008018:	e000      	b.n	800801c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800801a:	2302      	movs	r3, #2
  }
}
 800801c:	4618      	mov	r0, r3
 800801e:	3728      	adds	r7, #40	; 0x28
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b090      	sub	sp, #64	; 0x40
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008044:	2b80      	cmp	r3, #128	; 0x80
 8008046:	d139      	bne.n	80080bc <HAL_UART_DMAStop+0x98>
 8008048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804a:	2b21      	cmp	r3, #33	; 0x21
 800804c:	d136      	bne.n	80080bc <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	61fb      	str	r3, [r7, #28]
   return(result);
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800806e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e5      	bne.n	800804e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	2b00      	cmp	r3, #0
 8008088:	d015      	beq.n	80080b6 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808e:	4618      	mov	r0, r3
 8008090:	f7fc f850 	bl	8004134 <HAL_DMA_Abort>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00d      	beq.n	80080b6 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fc fa64 	bl	800456c <HAL_DMA_GetError>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d105      	bne.n	80080b6 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2210      	movs	r2, #16
 80080ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e044      	b.n	8008140 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 f830 	bl	800911c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c6:	2b40      	cmp	r3, #64	; 0x40
 80080c8:	d139      	bne.n	800813e <HAL_UART_DMAStop+0x11a>
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	2b22      	cmp	r3, #34	; 0x22
 80080ce:	d136      	bne.n	800813e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3308      	adds	r3, #8
 80080d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	60bb      	str	r3, [r7, #8]
   return(result);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e6:	633b      	str	r3, [r7, #48]	; 0x30
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3308      	adds	r3, #8
 80080ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080f0:	61ba      	str	r2, [r7, #24]
 80080f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	6979      	ldr	r1, [r7, #20]
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	613b      	str	r3, [r7, #16]
   return(result);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e5      	bne.n	80080d0 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008108:	2b00      	cmp	r3, #0
 800810a:	d015      	beq.n	8008138 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008110:	4618      	mov	r0, r3
 8008112:	f7fc f80f 	bl	8004134 <HAL_DMA_Abort>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00d      	beq.n	8008138 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008120:	4618      	mov	r0, r3
 8008122:	f7fc fa23 	bl	800456c <HAL_DMA_GetError>
 8008126:	4603      	mov	r3, r0
 8008128:	2b20      	cmp	r3, #32
 800812a:	d105      	bne.n	8008138 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2210      	movs	r2, #16
 8008130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e003      	b.n	8008140 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f815 	bl	8009168 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3740      	adds	r7, #64	; 0x40
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b0ba      	sub	sp, #232	; 0xe8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800816e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008172:	f640 030f 	movw	r3, #2063	; 0x80f
 8008176:	4013      	ands	r3, r2
 8008178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800817c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008180:	2b00      	cmp	r3, #0
 8008182:	d115      	bne.n	80081b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00f      	beq.n	80081b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d009      	beq.n	80081b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 82ac 	beq.w	80086fe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
      }
      return;
 80081ae:	e2a6      	b.n	80086fe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8117 	beq.w	80083e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80081ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d106      	bne.n	80081d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80081c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80081ca:	4b85      	ldr	r3, [pc, #532]	; (80083e0 <HAL_UART_IRQHandler+0x298>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 810a 	beq.w	80083e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d011      	beq.n	8008204 <HAL_UART_IRQHandler+0xbc>
 80081e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2201      	movs	r2, #1
 80081f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081fa:	f043 0201 	orr.w	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d011      	beq.n	8008234 <HAL_UART_IRQHandler+0xec>
 8008210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2202      	movs	r2, #2
 8008222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800822a:	f043 0204 	orr.w	r2, r3, #4
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d011      	beq.n	8008264 <HAL_UART_IRQHandler+0x11c>
 8008240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2204      	movs	r2, #4
 8008252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800825a:	f043 0202 	orr.w	r2, r3, #2
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d017      	beq.n	80082a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800827c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008280:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2208      	movs	r2, #8
 800828e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008296:	f043 0208 	orr.w	r2, r3, #8
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d012      	beq.n	80082d2 <HAL_UART_IRQHandler+0x18a>
 80082ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00c      	beq.n	80082d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082c8:	f043 0220 	orr.w	r2, r3, #32
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8212 	beq.w	8008702 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80082de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00d      	beq.n	8008306 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b40      	cmp	r3, #64	; 0x40
 800831c:	d005      	beq.n	800832a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800831e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008322:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008326:	2b00      	cmp	r3, #0
 8008328:	d04f      	beq.n	80083ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 ff1c 	bl	8009168 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d141      	bne.n	80083c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3308      	adds	r3, #8
 8008344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800835c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3308      	adds	r3, #8
 8008366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800836a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800836e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1d9      	bne.n	800833e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800838e:	2b00      	cmp	r3, #0
 8008390:	d013      	beq.n	80083ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008396:	4a13      	ldr	r2, [pc, #76]	; (80083e4 <HAL_UART_IRQHandler+0x29c>)
 8008398:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fb ff38 	bl	8004214 <HAL_DMA_Abort_IT>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d017      	beq.n	80083da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b8:	e00f      	b.n	80083da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f9d4 	bl	8008768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c0:	e00b      	b.n	80083da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f9d0 	bl	8008768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c8:	e007      	b.n	80083da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f9cc 	bl	8008768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80083d8:	e193      	b.n	8008702 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083da:	bf00      	nop
    return;
 80083dc:	e191      	b.n	8008702 <HAL_UART_IRQHandler+0x5ba>
 80083de:	bf00      	nop
 80083e0:	04000120 	.word	0x04000120
 80083e4:	080094c7 	.word	0x080094c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	f040 814c 	bne.w	800868a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f6:	f003 0310 	and.w	r3, r3, #16
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 8145 	beq.w	800868a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008404:	f003 0310 	and.w	r3, r3, #16
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 813e 	beq.w	800868a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2210      	movs	r2, #16
 8008414:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b40      	cmp	r3, #64	; 0x40
 8008422:	f040 80b6 	bne.w	8008592 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008432:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 8165 	beq.w	8008706 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008446:	429a      	cmp	r2, r3
 8008448:	f080 815d 	bcs.w	8008706 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008460:	f000 8086 	beq.w	8008570 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800847c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800848e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008492:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800849a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1da      	bne.n	8008464 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3308      	adds	r3, #8
 80084ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e1      	bne.n	80084ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3308      	adds	r3, #8
 800850a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800850e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800851c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e3      	bne.n	80084ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800853e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008540:	f023 0310 	bic.w	r3, r3, #16
 8008544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008552:	65bb      	str	r3, [r7, #88]	; 0x58
 8008554:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e4      	bne.n	8008530 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856a:	4618      	mov	r0, r3
 800856c:	f7fb fde2 	bl	8004134 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008582:	b29b      	uxth	r3, r3
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	b29b      	uxth	r3, r3
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f8f6 	bl	800877c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008590:	e0b9      	b.n	8008706 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800859e:	b29b      	uxth	r3, r3
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 80ab 	beq.w	800870a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80085b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 80a6 	beq.w	800870a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085e0:	647b      	str	r3, [r7, #68]	; 0x44
 80085e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e4      	bne.n	80085be <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3308      	adds	r3, #8
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	623b      	str	r3, [r7, #32]
   return(result);
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	f023 0301 	bic.w	r3, r3, #1
 800860a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3308      	adds	r3, #8
 8008614:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008618:	633a      	str	r2, [r7, #48]	; 0x30
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800861e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e3      	bne.n	80085f4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	60fb      	str	r3, [r7, #12]
   return(result);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f023 0310 	bic.w	r3, r3, #16
 8008654:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	69b9      	ldr	r1, [r7, #24]
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	617b      	str	r3, [r7, #20]
   return(result);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e4      	bne.n	8008640 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2202      	movs	r2, #2
 800867a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800867c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f87a 	bl	800877c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008688:	e03f      	b.n	800870a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800868a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00e      	beq.n	80086b4 <HAL_UART_IRQHandler+0x56c>
 8008696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800869a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d008      	beq.n	80086b4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f871 	bl	8008794 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086b2:	e02d      	b.n	8008710 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80086b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00e      	beq.n	80086de <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80086c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01c      	beq.n	800870e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	4798      	blx	r3
    }
    return;
 80086dc:	e017      	b.n	800870e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d012      	beq.n	8008710 <HAL_UART_IRQHandler+0x5c8>
 80086ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00c      	beq.n	8008710 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fefb 	bl	80094f2 <UART_EndTransmit_IT>
    return;
 80086fc:	e008      	b.n	8008710 <HAL_UART_IRQHandler+0x5c8>
      return;
 80086fe:	bf00      	nop
 8008700:	e006      	b.n	8008710 <HAL_UART_IRQHandler+0x5c8>
    return;
 8008702:	bf00      	nop
 8008704:	e004      	b.n	8008710 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008706:	bf00      	nop
 8008708:	e002      	b.n	8008710 <HAL_UART_IRQHandler+0x5c8>
      return;
 800870a:	bf00      	nop
 800870c:	e000      	b.n	8008710 <HAL_UART_IRQHandler+0x5c8>
    return;
 800870e:	bf00      	nop
  }

}
 8008710:	37e8      	adds	r7, #232	; 0xe8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop

08008718 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	431a      	orrs	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	4ba6      	ldr	r3, [pc, #664]	; (8008a6c <UART_SetConfig+0x2c4>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	6979      	ldr	r1, [r7, #20]
 80087dc:	430b      	orrs	r3, r1
 80087de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	430a      	orrs	r2, r1
 8008818:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a94      	ldr	r2, [pc, #592]	; (8008a70 <UART_SetConfig+0x2c8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d120      	bne.n	8008866 <UART_SetConfig+0xbe>
 8008824:	4b93      	ldr	r3, [pc, #588]	; (8008a74 <UART_SetConfig+0x2cc>)
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	2b03      	cmp	r3, #3
 8008830:	d816      	bhi.n	8008860 <UART_SetConfig+0xb8>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <UART_SetConfig+0x90>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008849 	.word	0x08008849
 800883c:	08008855 	.word	0x08008855
 8008840:	0800884f 	.word	0x0800884f
 8008844:	0800885b 	.word	0x0800885b
 8008848:	2301      	movs	r3, #1
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	e150      	b.n	8008af0 <UART_SetConfig+0x348>
 800884e:	2302      	movs	r3, #2
 8008850:	77fb      	strb	r3, [r7, #31]
 8008852:	e14d      	b.n	8008af0 <UART_SetConfig+0x348>
 8008854:	2304      	movs	r3, #4
 8008856:	77fb      	strb	r3, [r7, #31]
 8008858:	e14a      	b.n	8008af0 <UART_SetConfig+0x348>
 800885a:	2308      	movs	r3, #8
 800885c:	77fb      	strb	r3, [r7, #31]
 800885e:	e147      	b.n	8008af0 <UART_SetConfig+0x348>
 8008860:	2310      	movs	r3, #16
 8008862:	77fb      	strb	r3, [r7, #31]
 8008864:	e144      	b.n	8008af0 <UART_SetConfig+0x348>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a83      	ldr	r2, [pc, #524]	; (8008a78 <UART_SetConfig+0x2d0>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d132      	bne.n	80088d6 <UART_SetConfig+0x12e>
 8008870:	4b80      	ldr	r3, [pc, #512]	; (8008a74 <UART_SetConfig+0x2cc>)
 8008872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008876:	f003 030c 	and.w	r3, r3, #12
 800887a:	2b0c      	cmp	r3, #12
 800887c:	d828      	bhi.n	80088d0 <UART_SetConfig+0x128>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <UART_SetConfig+0xdc>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088b9 	.word	0x080088b9
 8008888:	080088d1 	.word	0x080088d1
 800888c:	080088d1 	.word	0x080088d1
 8008890:	080088d1 	.word	0x080088d1
 8008894:	080088c5 	.word	0x080088c5
 8008898:	080088d1 	.word	0x080088d1
 800889c:	080088d1 	.word	0x080088d1
 80088a0:	080088d1 	.word	0x080088d1
 80088a4:	080088bf 	.word	0x080088bf
 80088a8:	080088d1 	.word	0x080088d1
 80088ac:	080088d1 	.word	0x080088d1
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	080088cb 	.word	0x080088cb
 80088b8:	2300      	movs	r3, #0
 80088ba:	77fb      	strb	r3, [r7, #31]
 80088bc:	e118      	b.n	8008af0 <UART_SetConfig+0x348>
 80088be:	2302      	movs	r3, #2
 80088c0:	77fb      	strb	r3, [r7, #31]
 80088c2:	e115      	b.n	8008af0 <UART_SetConfig+0x348>
 80088c4:	2304      	movs	r3, #4
 80088c6:	77fb      	strb	r3, [r7, #31]
 80088c8:	e112      	b.n	8008af0 <UART_SetConfig+0x348>
 80088ca:	2308      	movs	r3, #8
 80088cc:	77fb      	strb	r3, [r7, #31]
 80088ce:	e10f      	b.n	8008af0 <UART_SetConfig+0x348>
 80088d0:	2310      	movs	r3, #16
 80088d2:	77fb      	strb	r3, [r7, #31]
 80088d4:	e10c      	b.n	8008af0 <UART_SetConfig+0x348>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a68      	ldr	r2, [pc, #416]	; (8008a7c <UART_SetConfig+0x2d4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d120      	bne.n	8008922 <UART_SetConfig+0x17a>
 80088e0:	4b64      	ldr	r3, [pc, #400]	; (8008a74 <UART_SetConfig+0x2cc>)
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088ea:	2b30      	cmp	r3, #48	; 0x30
 80088ec:	d013      	beq.n	8008916 <UART_SetConfig+0x16e>
 80088ee:	2b30      	cmp	r3, #48	; 0x30
 80088f0:	d814      	bhi.n	800891c <UART_SetConfig+0x174>
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	d009      	beq.n	800890a <UART_SetConfig+0x162>
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d810      	bhi.n	800891c <UART_SetConfig+0x174>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <UART_SetConfig+0x15c>
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d006      	beq.n	8008910 <UART_SetConfig+0x168>
 8008902:	e00b      	b.n	800891c <UART_SetConfig+0x174>
 8008904:	2300      	movs	r3, #0
 8008906:	77fb      	strb	r3, [r7, #31]
 8008908:	e0f2      	b.n	8008af0 <UART_SetConfig+0x348>
 800890a:	2302      	movs	r3, #2
 800890c:	77fb      	strb	r3, [r7, #31]
 800890e:	e0ef      	b.n	8008af0 <UART_SetConfig+0x348>
 8008910:	2304      	movs	r3, #4
 8008912:	77fb      	strb	r3, [r7, #31]
 8008914:	e0ec      	b.n	8008af0 <UART_SetConfig+0x348>
 8008916:	2308      	movs	r3, #8
 8008918:	77fb      	strb	r3, [r7, #31]
 800891a:	e0e9      	b.n	8008af0 <UART_SetConfig+0x348>
 800891c:	2310      	movs	r3, #16
 800891e:	77fb      	strb	r3, [r7, #31]
 8008920:	e0e6      	b.n	8008af0 <UART_SetConfig+0x348>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a56      	ldr	r2, [pc, #344]	; (8008a80 <UART_SetConfig+0x2d8>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d120      	bne.n	800896e <UART_SetConfig+0x1c6>
 800892c:	4b51      	ldr	r3, [pc, #324]	; (8008a74 <UART_SetConfig+0x2cc>)
 800892e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008936:	2bc0      	cmp	r3, #192	; 0xc0
 8008938:	d013      	beq.n	8008962 <UART_SetConfig+0x1ba>
 800893a:	2bc0      	cmp	r3, #192	; 0xc0
 800893c:	d814      	bhi.n	8008968 <UART_SetConfig+0x1c0>
 800893e:	2b80      	cmp	r3, #128	; 0x80
 8008940:	d009      	beq.n	8008956 <UART_SetConfig+0x1ae>
 8008942:	2b80      	cmp	r3, #128	; 0x80
 8008944:	d810      	bhi.n	8008968 <UART_SetConfig+0x1c0>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d002      	beq.n	8008950 <UART_SetConfig+0x1a8>
 800894a:	2b40      	cmp	r3, #64	; 0x40
 800894c:	d006      	beq.n	800895c <UART_SetConfig+0x1b4>
 800894e:	e00b      	b.n	8008968 <UART_SetConfig+0x1c0>
 8008950:	2300      	movs	r3, #0
 8008952:	77fb      	strb	r3, [r7, #31]
 8008954:	e0cc      	b.n	8008af0 <UART_SetConfig+0x348>
 8008956:	2302      	movs	r3, #2
 8008958:	77fb      	strb	r3, [r7, #31]
 800895a:	e0c9      	b.n	8008af0 <UART_SetConfig+0x348>
 800895c:	2304      	movs	r3, #4
 800895e:	77fb      	strb	r3, [r7, #31]
 8008960:	e0c6      	b.n	8008af0 <UART_SetConfig+0x348>
 8008962:	2308      	movs	r3, #8
 8008964:	77fb      	strb	r3, [r7, #31]
 8008966:	e0c3      	b.n	8008af0 <UART_SetConfig+0x348>
 8008968:	2310      	movs	r3, #16
 800896a:	77fb      	strb	r3, [r7, #31]
 800896c:	e0c0      	b.n	8008af0 <UART_SetConfig+0x348>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a44      	ldr	r2, [pc, #272]	; (8008a84 <UART_SetConfig+0x2dc>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d125      	bne.n	80089c4 <UART_SetConfig+0x21c>
 8008978:	4b3e      	ldr	r3, [pc, #248]	; (8008a74 <UART_SetConfig+0x2cc>)
 800897a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008986:	d017      	beq.n	80089b8 <UART_SetConfig+0x210>
 8008988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800898c:	d817      	bhi.n	80089be <UART_SetConfig+0x216>
 800898e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008992:	d00b      	beq.n	80089ac <UART_SetConfig+0x204>
 8008994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008998:	d811      	bhi.n	80089be <UART_SetConfig+0x216>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <UART_SetConfig+0x1fe>
 800899e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a2:	d006      	beq.n	80089b2 <UART_SetConfig+0x20a>
 80089a4:	e00b      	b.n	80089be <UART_SetConfig+0x216>
 80089a6:	2300      	movs	r3, #0
 80089a8:	77fb      	strb	r3, [r7, #31]
 80089aa:	e0a1      	b.n	8008af0 <UART_SetConfig+0x348>
 80089ac:	2302      	movs	r3, #2
 80089ae:	77fb      	strb	r3, [r7, #31]
 80089b0:	e09e      	b.n	8008af0 <UART_SetConfig+0x348>
 80089b2:	2304      	movs	r3, #4
 80089b4:	77fb      	strb	r3, [r7, #31]
 80089b6:	e09b      	b.n	8008af0 <UART_SetConfig+0x348>
 80089b8:	2308      	movs	r3, #8
 80089ba:	77fb      	strb	r3, [r7, #31]
 80089bc:	e098      	b.n	8008af0 <UART_SetConfig+0x348>
 80089be:	2310      	movs	r3, #16
 80089c0:	77fb      	strb	r3, [r7, #31]
 80089c2:	e095      	b.n	8008af0 <UART_SetConfig+0x348>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a2f      	ldr	r2, [pc, #188]	; (8008a88 <UART_SetConfig+0x2e0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d125      	bne.n	8008a1a <UART_SetConfig+0x272>
 80089ce:	4b29      	ldr	r3, [pc, #164]	; (8008a74 <UART_SetConfig+0x2cc>)
 80089d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089dc:	d017      	beq.n	8008a0e <UART_SetConfig+0x266>
 80089de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089e2:	d817      	bhi.n	8008a14 <UART_SetConfig+0x26c>
 80089e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e8:	d00b      	beq.n	8008a02 <UART_SetConfig+0x25a>
 80089ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ee:	d811      	bhi.n	8008a14 <UART_SetConfig+0x26c>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <UART_SetConfig+0x254>
 80089f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089f8:	d006      	beq.n	8008a08 <UART_SetConfig+0x260>
 80089fa:	e00b      	b.n	8008a14 <UART_SetConfig+0x26c>
 80089fc:	2301      	movs	r3, #1
 80089fe:	77fb      	strb	r3, [r7, #31]
 8008a00:	e076      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a02:	2302      	movs	r3, #2
 8008a04:	77fb      	strb	r3, [r7, #31]
 8008a06:	e073      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a08:	2304      	movs	r3, #4
 8008a0a:	77fb      	strb	r3, [r7, #31]
 8008a0c:	e070      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a0e:	2308      	movs	r3, #8
 8008a10:	77fb      	strb	r3, [r7, #31]
 8008a12:	e06d      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a14:	2310      	movs	r3, #16
 8008a16:	77fb      	strb	r3, [r7, #31]
 8008a18:	e06a      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <UART_SetConfig+0x2e4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d138      	bne.n	8008a96 <UART_SetConfig+0x2ee>
 8008a24:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <UART_SetConfig+0x2cc>)
 8008a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a32:	d017      	beq.n	8008a64 <UART_SetConfig+0x2bc>
 8008a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a38:	d82a      	bhi.n	8008a90 <UART_SetConfig+0x2e8>
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3e:	d00b      	beq.n	8008a58 <UART_SetConfig+0x2b0>
 8008a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a44:	d824      	bhi.n	8008a90 <UART_SetConfig+0x2e8>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <UART_SetConfig+0x2aa>
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4e:	d006      	beq.n	8008a5e <UART_SetConfig+0x2b6>
 8008a50:	e01e      	b.n	8008a90 <UART_SetConfig+0x2e8>
 8008a52:	2300      	movs	r3, #0
 8008a54:	77fb      	strb	r3, [r7, #31]
 8008a56:	e04b      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	77fb      	strb	r3, [r7, #31]
 8008a5c:	e048      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a5e:	2304      	movs	r3, #4
 8008a60:	77fb      	strb	r3, [r7, #31]
 8008a62:	e045      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a64:	2308      	movs	r3, #8
 8008a66:	77fb      	strb	r3, [r7, #31]
 8008a68:	e042      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a6a:	bf00      	nop
 8008a6c:	efff69f3 	.word	0xefff69f3
 8008a70:	40011000 	.word	0x40011000
 8008a74:	40023800 	.word	0x40023800
 8008a78:	40004400 	.word	0x40004400
 8008a7c:	40004800 	.word	0x40004800
 8008a80:	40004c00 	.word	0x40004c00
 8008a84:	40005000 	.word	0x40005000
 8008a88:	40011400 	.word	0x40011400
 8008a8c:	40007800 	.word	0x40007800
 8008a90:	2310      	movs	r3, #16
 8008a92:	77fb      	strb	r3, [r7, #31]
 8008a94:	e02c      	b.n	8008af0 <UART_SetConfig+0x348>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a72      	ldr	r2, [pc, #456]	; (8008c64 <UART_SetConfig+0x4bc>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d125      	bne.n	8008aec <UART_SetConfig+0x344>
 8008aa0:	4b71      	ldr	r3, [pc, #452]	; (8008c68 <UART_SetConfig+0x4c0>)
 8008aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008aaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008aae:	d017      	beq.n	8008ae0 <UART_SetConfig+0x338>
 8008ab0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ab4:	d817      	bhi.n	8008ae6 <UART_SetConfig+0x33e>
 8008ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aba:	d00b      	beq.n	8008ad4 <UART_SetConfig+0x32c>
 8008abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ac0:	d811      	bhi.n	8008ae6 <UART_SetConfig+0x33e>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <UART_SetConfig+0x326>
 8008ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aca:	d006      	beq.n	8008ada <UART_SetConfig+0x332>
 8008acc:	e00b      	b.n	8008ae6 <UART_SetConfig+0x33e>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	77fb      	strb	r3, [r7, #31]
 8008ad2:	e00d      	b.n	8008af0 <UART_SetConfig+0x348>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e00a      	b.n	8008af0 <UART_SetConfig+0x348>
 8008ada:	2304      	movs	r3, #4
 8008adc:	77fb      	strb	r3, [r7, #31]
 8008ade:	e007      	b.n	8008af0 <UART_SetConfig+0x348>
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	77fb      	strb	r3, [r7, #31]
 8008ae4:	e004      	b.n	8008af0 <UART_SetConfig+0x348>
 8008ae6:	2310      	movs	r3, #16
 8008ae8:	77fb      	strb	r3, [r7, #31]
 8008aea:	e001      	b.n	8008af0 <UART_SetConfig+0x348>
 8008aec:	2310      	movs	r3, #16
 8008aee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af8:	d15b      	bne.n	8008bb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008afa:	7ffb      	ldrb	r3, [r7, #31]
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d828      	bhi.n	8008b52 <UART_SetConfig+0x3aa>
 8008b00:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0x360>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b3d 	.word	0x08008b3d
 8008b14:	08008b53 	.word	0x08008b53
 8008b18:	08008b43 	.word	0x08008b43
 8008b1c:	08008b53 	.word	0x08008b53
 8008b20:	08008b53 	.word	0x08008b53
 8008b24:	08008b53 	.word	0x08008b53
 8008b28:	08008b4b 	.word	0x08008b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b2c:	f7fd ff9e 	bl	8006a6c <HAL_RCC_GetPCLK1Freq>
 8008b30:	61b8      	str	r0, [r7, #24]
        break;
 8008b32:	e013      	b.n	8008b5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b34:	f7fd ffae 	bl	8006a94 <HAL_RCC_GetPCLK2Freq>
 8008b38:	61b8      	str	r0, [r7, #24]
        break;
 8008b3a:	e00f      	b.n	8008b5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b3c:	4b4b      	ldr	r3, [pc, #300]	; (8008c6c <UART_SetConfig+0x4c4>)
 8008b3e:	61bb      	str	r3, [r7, #24]
        break;
 8008b40:	e00c      	b.n	8008b5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b42:	f7fd fe81 	bl	8006848 <HAL_RCC_GetSysClockFreq>
 8008b46:	61b8      	str	r0, [r7, #24]
        break;
 8008b48:	e008      	b.n	8008b5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4e:	61bb      	str	r3, [r7, #24]
        break;
 8008b50:	e004      	b.n	8008b5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	77bb      	strb	r3, [r7, #30]
        break;
 8008b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d074      	beq.n	8008c4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	005a      	lsls	r2, r3, #1
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	085b      	lsrs	r3, r3, #1
 8008b6c:	441a      	add	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2b0f      	cmp	r3, #15
 8008b7c:	d916      	bls.n	8008bac <UART_SetConfig+0x404>
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b84:	d212      	bcs.n	8008bac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f023 030f 	bic.w	r3, r3, #15
 8008b8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	085b      	lsrs	r3, r3, #1
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	89fb      	ldrh	r3, [r7, #14]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	89fa      	ldrh	r2, [r7, #14]
 8008ba8:	60da      	str	r2, [r3, #12]
 8008baa:	e04f      	b.n	8008c4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	77bb      	strb	r3, [r7, #30]
 8008bb0:	e04c      	b.n	8008c4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bb2:	7ffb      	ldrb	r3, [r7, #31]
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d828      	bhi.n	8008c0a <UART_SetConfig+0x462>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <UART_SetConfig+0x418>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008be5 	.word	0x08008be5
 8008bc4:	08008bed 	.word	0x08008bed
 8008bc8:	08008bf5 	.word	0x08008bf5
 8008bcc:	08008c0b 	.word	0x08008c0b
 8008bd0:	08008bfb 	.word	0x08008bfb
 8008bd4:	08008c0b 	.word	0x08008c0b
 8008bd8:	08008c0b 	.word	0x08008c0b
 8008bdc:	08008c0b 	.word	0x08008c0b
 8008be0:	08008c03 	.word	0x08008c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be4:	f7fd ff42 	bl	8006a6c <HAL_RCC_GetPCLK1Freq>
 8008be8:	61b8      	str	r0, [r7, #24]
        break;
 8008bea:	e013      	b.n	8008c14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bec:	f7fd ff52 	bl	8006a94 <HAL_RCC_GetPCLK2Freq>
 8008bf0:	61b8      	str	r0, [r7, #24]
        break;
 8008bf2:	e00f      	b.n	8008c14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf4:	4b1d      	ldr	r3, [pc, #116]	; (8008c6c <UART_SetConfig+0x4c4>)
 8008bf6:	61bb      	str	r3, [r7, #24]
        break;
 8008bf8:	e00c      	b.n	8008c14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfa:	f7fd fe25 	bl	8006848 <HAL_RCC_GetSysClockFreq>
 8008bfe:	61b8      	str	r0, [r7, #24]
        break;
 8008c00:	e008      	b.n	8008c14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c06:	61bb      	str	r3, [r7, #24]
        break;
 8008c08:	e004      	b.n	8008c14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	77bb      	strb	r3, [r7, #30]
        break;
 8008c12:	bf00      	nop
    }

    if (pclk != 0U)
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d018      	beq.n	8008c4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	085a      	lsrs	r2, r3, #1
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	441a      	add	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b0f      	cmp	r3, #15
 8008c32:	d909      	bls.n	8008c48 <UART_SetConfig+0x4a0>
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3a:	d205      	bcs.n	8008c48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60da      	str	r2, [r3, #12]
 8008c46:	e001      	b.n	8008c4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008c58:	7fbb      	ldrb	r3, [r7, #30]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3720      	adds	r7, #32
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	40007c00 	.word	0x40007c00
 8008c68:	40023800 	.word	0x40023800
 8008c6c:	00f42400 	.word	0x00f42400

08008c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00a      	beq.n	8008c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	f003 0310 	and.w	r3, r3, #16
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	f003 0320 	and.w	r3, r3, #32
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01a      	beq.n	8008d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d6e:	d10a      	bne.n	8008d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	605a      	str	r2, [r3, #4]
  }
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dc4:	f7fa fa90 	bl	80032e8 <HAL_GetTick>
 8008dc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d10e      	bne.n	8008df6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f831 	bl	8008e4e <UART_WaitOnFlagUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e027      	b.n	8008e46 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d10e      	bne.n	8008e22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f81b 	bl	8008e4e <UART_WaitOnFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e011      	b.n	8008e46 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2220      	movs	r2, #32
 8008e26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b09c      	sub	sp, #112	; 0x70
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	603b      	str	r3, [r7, #0]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e5e:	e0a7      	b.n	8008fb0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e66:	f000 80a3 	beq.w	8008fb0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6a:	f7fa fa3d 	bl	80032e8 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d302      	bcc.n	8008e80 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d13f      	bne.n	8008f00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e94:	667b      	str	r3, [r7, #100]	; 0x64
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ea0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e6      	bne.n	8008e80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	f023 0301 	bic.w	r3, r3, #1
 8008ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ed2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ed4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e5      	bne.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e068      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d050      	beq.n	8008fb0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f1c:	d148      	bne.n	8008fb0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34
 8008f48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e6      	bne.n	8008f28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f023 0301 	bic.w	r3, r3, #1
 8008f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f7a:	623a      	str	r2, [r7, #32]
 8008f7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	69f9      	ldr	r1, [r7, #28]
 8008f80:	6a3a      	ldr	r2, [r7, #32]
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e5      	bne.n	8008f5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2220      	movs	r2, #32
 8008f92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e010      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69da      	ldr	r2, [r3, #28]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	4013      	ands	r3, r2
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	bf0c      	ite	eq
 8008fc0:	2301      	moveq	r3, #1
 8008fc2:	2300      	movne	r3, #0
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	f43f af48 	beq.w	8008e60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3770      	adds	r7, #112	; 0x70
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b096      	sub	sp, #88	; 0x58
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	88fa      	ldrh	r2, [r7, #6]
 8008ff4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2222      	movs	r2, #34	; 0x22
 8009004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800900c:	2b00      	cmp	r3, #0
 800900e:	d028      	beq.n	8009062 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009014:	4a3e      	ldr	r2, [pc, #248]	; (8009110 <UART_Start_Receive_DMA+0x134>)
 8009016:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800901c:	4a3d      	ldr	r2, [pc, #244]	; (8009114 <UART_Start_Receive_DMA+0x138>)
 800901e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009024:	4a3c      	ldr	r2, [pc, #240]	; (8009118 <UART_Start_Receive_DMA+0x13c>)
 8009026:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800902c:	2200      	movs	r2, #0
 800902e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3324      	adds	r3, #36	; 0x24
 800903a:	4619      	mov	r1, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009040:	461a      	mov	r2, r3
 8009042:	88fb      	ldrh	r3, [r7, #6]
 8009044:	f7fb f816 	bl	8004074 <HAL_DMA_Start_IT>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d009      	beq.n	8009062 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2210      	movs	r2, #16
 8009052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e051      	b.n	8009106 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d018      	beq.n	800909c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800907e:	657b      	str	r3, [r7, #84]	; 0x54
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009088:	64bb      	str	r3, [r7, #72]	; 0x48
 800908a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800908e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e6      	bne.n	800906a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3308      	adds	r3, #8
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	653b      	str	r3, [r7, #80]	; 0x50
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3308      	adds	r3, #8
 80090ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090bc:	637a      	str	r2, [r7, #52]	; 0x34
 80090be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e5      	bne.n	800909c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3308      	adds	r3, #8
 80090d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	613b      	str	r3, [r7, #16]
   return(result);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3308      	adds	r3, #8
 80090ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090f0:	623a      	str	r2, [r7, #32]
 80090f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	69f9      	ldr	r1, [r7, #28]
 80090f6:	6a3a      	ldr	r2, [r7, #32]
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e5      	bne.n	80090d0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3758      	adds	r7, #88	; 0x58
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	080092e3 	.word	0x080092e3
 8009114:	0800940b 	.word	0x0800940b
 8009118:	08009449 	.word	0x08009449

0800911c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800911c:	b480      	push	{r7}
 800911e:	b089      	sub	sp, #36	; 0x24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	60bb      	str	r3, [r7, #8]
   return(result);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	61bb      	str	r3, [r7, #24]
 8009144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6979      	ldr	r1, [r7, #20]
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	613b      	str	r3, [r7, #16]
   return(result);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e6      	bne.n	8009124 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800915c:	bf00      	nop
 800915e:	3724      	adds	r7, #36	; 0x24
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b095      	sub	sp, #84	; 0x54
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918e:	643b      	str	r3, [r7, #64]	; 0x40
 8009190:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e6      	bne.n	8009170 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	f023 0301 	bic.w	r3, r3, #1
 80091b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3308      	adds	r3, #8
 80091c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e5      	bne.n	80091a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d118      	bne.n	8009210 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f023 0310 	bic.w	r3, r3, #16
 80091f2:	647b      	str	r3, [r7, #68]	; 0x44
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6979      	ldr	r1, [r7, #20]
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	613b      	str	r3, [r7, #16]
   return(result);
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e6      	bne.n	80091de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2220      	movs	r2, #32
 8009214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009224:	bf00      	nop
 8009226:	3754      	adds	r7, #84	; 0x54
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b090      	sub	sp, #64	; 0x40
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009246:	d037      	beq.n	80092b8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924a:	2200      	movs	r2, #0
 800924c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3308      	adds	r3, #8
 8009256:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	623b      	str	r3, [r7, #32]
   return(result);
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009266:	63bb      	str	r3, [r7, #56]	; 0x38
 8009268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3308      	adds	r3, #8
 800926e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009270:	633a      	str	r2, [r7, #48]	; 0x30
 8009272:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009278:	e841 2300 	strex	r3, r2, [r1]
 800927c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e5      	bne.n	8009250 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	60fb      	str	r3, [r7, #12]
   return(result);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009298:	637b      	str	r3, [r7, #52]	; 0x34
 800929a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a2:	61fb      	str	r3, [r7, #28]
 80092a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	69b9      	ldr	r1, [r7, #24]
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	617b      	str	r3, [r7, #20]
   return(result);
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e6      	bne.n	8009284 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092b6:	e002      	b.n	80092be <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80092b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092ba:	f7ff fa2d 	bl	8008718 <HAL_UART_TxCpltCallback>
}
 80092be:	bf00      	nop
 80092c0:	3740      	adds	r7, #64	; 0x40
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff fa29 	bl	800872c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b09c      	sub	sp, #112	; 0x70
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f8:	d071      	beq.n	80093de <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80092fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009316:	66bb      	str	r3, [r7, #104]	; 0x68
 8009318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009320:	65bb      	str	r3, [r7, #88]	; 0x58
 8009322:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800932e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e6      	bne.n	8009302 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3308      	adds	r3, #8
 800933a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009346:	f023 0301 	bic.w	r3, r3, #1
 800934a:	667b      	str	r3, [r7, #100]	; 0x64
 800934c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009354:	647a      	str	r2, [r7, #68]	; 0x44
 8009356:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800935a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e5      	bne.n	8009334 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	e853 3f00 	ldrex	r3, [r3]
 8009376:	623b      	str	r3, [r7, #32]
   return(result);
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937e:	663b      	str	r3, [r7, #96]	; 0x60
 8009380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009388:	633a      	str	r2, [r7, #48]	; 0x30
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800938e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009390:	e841 2300 	strex	r3, r2, [r1]
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1e5      	bne.n	8009368 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800939c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939e:	2220      	movs	r2, #32
 80093a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d118      	bne.n	80093de <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f023 0310 	bic.w	r3, r3, #16
 80093c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093ca:	61fb      	str	r3, [r7, #28]
 80093cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	69b9      	ldr	r1, [r7, #24]
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	617b      	str	r3, [r7, #20]
   return(result);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e6      	bne.n	80093ac <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e0:	2200      	movs	r2, #0
 80093e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d107      	bne.n	80093fc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80093f2:	4619      	mov	r1, r3
 80093f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093f6:	f7ff f9c1 	bl	800877c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093fa:	e002      	b.n	8009402 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80093fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80093fe:	f7ff f99f 	bl	8008740 <HAL_UART_RxCpltCallback>
}
 8009402:	bf00      	nop
 8009404:	3770      	adds	r7, #112	; 0x70
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2201      	movs	r2, #1
 800941c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009422:	2b01      	cmp	r3, #1
 8009424:	d109      	bne.n	800943a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800942c:	085b      	lsrs	r3, r3, #1
 800942e:	b29b      	uxth	r3, r3
 8009430:	4619      	mov	r1, r3
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff f9a2 	bl	800877c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009438:	e002      	b.n	8009440 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff f98a 	bl	8008754 <HAL_UART_RxHalfCpltCallback>
}
 8009440:	bf00      	nop
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009462:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946e:	2b80      	cmp	r3, #128	; 0x80
 8009470:	d109      	bne.n	8009486 <UART_DMAError+0x3e>
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b21      	cmp	r3, #33	; 0x21
 8009476:	d106      	bne.n	8009486 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	2200      	movs	r2, #0
 800947c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009480:	6978      	ldr	r0, [r7, #20]
 8009482:	f7ff fe4b 	bl	800911c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b40      	cmp	r3, #64	; 0x40
 8009492:	d109      	bne.n	80094a8 <UART_DMAError+0x60>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b22      	cmp	r3, #34	; 0x22
 8009498:	d106      	bne.n	80094a8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2200      	movs	r2, #0
 800949e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80094a2:	6978      	ldr	r0, [r7, #20]
 80094a4:	f7ff fe60 	bl	8009168 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ae:	f043 0210 	orr.w	r2, r3, #16
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094b8:	6978      	ldr	r0, [r7, #20]
 80094ba:	f7ff f955 	bl	8008768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094be:	bf00      	nop
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7ff f93f 	bl	8008768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b088      	sub	sp, #32
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	60bb      	str	r3, [r7, #8]
   return(result);
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	61bb      	str	r3, [r7, #24]
 800951a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	6979      	ldr	r1, [r7, #20]
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	613b      	str	r3, [r7, #16]
   return(result);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e6      	bne.n	80094fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2220      	movs	r2, #32
 8009530:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff f8ed 	bl	8008718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800953e:	bf00      	nop
 8009540:	3720      	adds	r7, #32
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009548:	b084      	sub	sp, #16
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	f107 001c 	add.w	r0, r7, #28
 8009556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	2b01      	cmp	r3, #1
 800955e:	d120      	bne.n	80095a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	4b20      	ldr	r3, [pc, #128]	; (80095f4 <USB_CoreInit+0xac>)
 8009572:	4013      	ands	r3, r2
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009586:	2b01      	cmp	r3, #1
 8009588:	d105      	bne.n	8009596 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 fbee 	bl	800ad78 <USB_CoreReset>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e010      	b.n	80095c4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f001 fbe2 	bl	800ad78 <USB_CoreReset>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d10b      	bne.n	80095e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f043 0206 	orr.w	r2, r3, #6
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f043 0220 	orr.w	r2, r3, #32
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095ee:	b004      	add	sp, #16
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	ffbdffbf 	.word	0xffbdffbf

080095f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d165      	bne.n	80096d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	4a41      	ldr	r2, [pc, #260]	; (8009714 <USB_SetTurnaroundTime+0x11c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d906      	bls.n	8009622 <USB_SetTurnaroundTime+0x2a>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4a40      	ldr	r2, [pc, #256]	; (8009718 <USB_SetTurnaroundTime+0x120>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d202      	bcs.n	8009622 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800961c:	230f      	movs	r3, #15
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e062      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	4a3c      	ldr	r2, [pc, #240]	; (8009718 <USB_SetTurnaroundTime+0x120>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d306      	bcc.n	8009638 <USB_SetTurnaroundTime+0x40>
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4a3b      	ldr	r2, [pc, #236]	; (800971c <USB_SetTurnaroundTime+0x124>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d202      	bcs.n	8009638 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009632:	230e      	movs	r3, #14
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	e057      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4a38      	ldr	r2, [pc, #224]	; (800971c <USB_SetTurnaroundTime+0x124>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d306      	bcc.n	800964e <USB_SetTurnaroundTime+0x56>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4a37      	ldr	r2, [pc, #220]	; (8009720 <USB_SetTurnaroundTime+0x128>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d202      	bcs.n	800964e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009648:	230d      	movs	r3, #13
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	e04c      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	4a33      	ldr	r2, [pc, #204]	; (8009720 <USB_SetTurnaroundTime+0x128>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d306      	bcc.n	8009664 <USB_SetTurnaroundTime+0x6c>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4a32      	ldr	r2, [pc, #200]	; (8009724 <USB_SetTurnaroundTime+0x12c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d802      	bhi.n	8009664 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800965e:	230c      	movs	r3, #12
 8009660:	617b      	str	r3, [r7, #20]
 8009662:	e041      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	4a2f      	ldr	r2, [pc, #188]	; (8009724 <USB_SetTurnaroundTime+0x12c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d906      	bls.n	800967a <USB_SetTurnaroundTime+0x82>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4a2e      	ldr	r2, [pc, #184]	; (8009728 <USB_SetTurnaroundTime+0x130>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d802      	bhi.n	800967a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009674:	230b      	movs	r3, #11
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e036      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	4a2a      	ldr	r2, [pc, #168]	; (8009728 <USB_SetTurnaroundTime+0x130>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d906      	bls.n	8009690 <USB_SetTurnaroundTime+0x98>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4a29      	ldr	r2, [pc, #164]	; (800972c <USB_SetTurnaroundTime+0x134>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d802      	bhi.n	8009690 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800968a:	230a      	movs	r3, #10
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e02b      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	4a26      	ldr	r2, [pc, #152]	; (800972c <USB_SetTurnaroundTime+0x134>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d906      	bls.n	80096a6 <USB_SetTurnaroundTime+0xae>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4a25      	ldr	r2, [pc, #148]	; (8009730 <USB_SetTurnaroundTime+0x138>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d202      	bcs.n	80096a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096a0:	2309      	movs	r3, #9
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	e020      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	4a21      	ldr	r2, [pc, #132]	; (8009730 <USB_SetTurnaroundTime+0x138>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d306      	bcc.n	80096bc <USB_SetTurnaroundTime+0xc4>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	4a20      	ldr	r2, [pc, #128]	; (8009734 <USB_SetTurnaroundTime+0x13c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d802      	bhi.n	80096bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096b6:	2308      	movs	r3, #8
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	e015      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4a1d      	ldr	r2, [pc, #116]	; (8009734 <USB_SetTurnaroundTime+0x13c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d906      	bls.n	80096d2 <USB_SetTurnaroundTime+0xda>
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	4a1c      	ldr	r2, [pc, #112]	; (8009738 <USB_SetTurnaroundTime+0x140>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d202      	bcs.n	80096d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096cc:	2307      	movs	r3, #7
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	e00a      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096d2:	2306      	movs	r3, #6
 80096d4:	617b      	str	r3, [r7, #20]
 80096d6:	e007      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80096de:	2309      	movs	r3, #9
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e001      	b.n	80096e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80096e4:	2309      	movs	r3, #9
 80096e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	029b      	lsls	r3, r3, #10
 80096fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009700:	431a      	orrs	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	371c      	adds	r7, #28
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	00d8acbf 	.word	0x00d8acbf
 8009718:	00e4e1c0 	.word	0x00e4e1c0
 800971c:	00f42400 	.word	0x00f42400
 8009720:	01067380 	.word	0x01067380
 8009724:	011a499f 	.word	0x011a499f
 8009728:	01312cff 	.word	0x01312cff
 800972c:	014ca43f 	.word	0x014ca43f
 8009730:	016e3600 	.word	0x016e3600
 8009734:	01a6ab1f 	.word	0x01a6ab1f
 8009738:	01e84800 	.word	0x01e84800

0800973c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f043 0201 	orr.w	r2, r3, #1
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800975e:	b480      	push	{r7}
 8009760:	b083      	sub	sp, #12
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f023 0201 	bic.w	r2, r3, #1
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d115      	bne.n	80097ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097ae:	2001      	movs	r0, #1
 80097b0:	f7f9 fda6 	bl	8003300 <HAL_Delay>
      ms++;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 fa4b 	bl	800ac56 <USB_GetMode>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d01e      	beq.n	8009804 <USB_SetCurrentMode+0x84>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b31      	cmp	r3, #49	; 0x31
 80097ca:	d9f0      	bls.n	80097ae <USB_SetCurrentMode+0x2e>
 80097cc:	e01a      	b.n	8009804 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097ce:	78fb      	ldrb	r3, [r7, #3]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d115      	bne.n	8009800 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097e0:	2001      	movs	r0, #1
 80097e2:	f7f9 fd8d 	bl	8003300 <HAL_Delay>
      ms++;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3301      	adds	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 fa32 	bl	800ac56 <USB_GetMode>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <USB_SetCurrentMode+0x84>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b31      	cmp	r3, #49	; 0x31
 80097fc:	d9f0      	bls.n	80097e0 <USB_SetCurrentMode+0x60>
 80097fe:	e001      	b.n	8009804 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e005      	b.n	8009810 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b32      	cmp	r3, #50	; 0x32
 8009808:	d101      	bne.n	800980e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e000      	b.n	8009810 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009818:	b084      	sub	sp, #16
 800981a:	b580      	push	{r7, lr}
 800981c:	b086      	sub	sp, #24
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009832:	2300      	movs	r3, #0
 8009834:	613b      	str	r3, [r7, #16]
 8009836:	e009      	b.n	800984c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3340      	adds	r3, #64	; 0x40
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	2200      	movs	r2, #0
 8009844:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	3301      	adds	r3, #1
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2b0e      	cmp	r3, #14
 8009850:	d9f2      	bls.n	8009838 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d11c      	bne.n	8009892 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009866:	f043 0302 	orr.w	r3, r3, #2
 800986a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	601a      	str	r2, [r3, #0]
 8009890:	e005      	b.n	800989e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009896:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098a4:	461a      	mov	r2, r3
 80098a6:	2300      	movs	r3, #0
 80098a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b0:	4619      	mov	r1, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b8:	461a      	mov	r2, r3
 80098ba:	680b      	ldr	r3, [r1, #0]
 80098bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d10c      	bne.n	80098de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d104      	bne.n	80098d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098ca:	2100      	movs	r1, #0
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f965 	bl	8009b9c <USB_SetDevSpeed>
 80098d2:	e008      	b.n	80098e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098d4:	2101      	movs	r1, #1
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f960 	bl	8009b9c <USB_SetDevSpeed>
 80098dc:	e003      	b.n	80098e6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098de:	2103      	movs	r1, #3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f95b 	bl	8009b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098e6:	2110      	movs	r1, #16
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f8f3 	bl	8009ad4 <USB_FlushTxFifo>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f91f 	bl	8009b3c <USB_FlushRxFifo>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990e:	461a      	mov	r2, r3
 8009910:	2300      	movs	r3, #0
 8009912:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991a:	461a      	mov	r2, r3
 800991c:	2300      	movs	r3, #0
 800991e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009926:	461a      	mov	r2, r3
 8009928:	2300      	movs	r3, #0
 800992a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800992c:	2300      	movs	r3, #0
 800992e:	613b      	str	r3, [r7, #16]
 8009930:	e043      	b.n	80099ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009948:	d118      	bne.n	800997c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995c:	461a      	mov	r2, r3
 800995e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	e013      	b.n	800998e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009972:	461a      	mov	r2, r3
 8009974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e008      	b.n	800998e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	461a      	mov	r2, r3
 800998a:	2300      	movs	r3, #0
 800998c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4413      	add	r3, r2
 8009996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999a:	461a      	mov	r2, r3
 800999c:	2300      	movs	r3, #0
 800999e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ac:	461a      	mov	r2, r3
 80099ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	3301      	adds	r3, #1
 80099b8:	613b      	str	r3, [r7, #16]
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d3b7      	bcc.n	8009932 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099c2:	2300      	movs	r3, #0
 80099c4:	613b      	str	r3, [r7, #16]
 80099c6:	e043      	b.n	8009a50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099de:	d118      	bne.n	8009a12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10a      	bne.n	80099fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f2:	461a      	mov	r2, r3
 80099f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099f8:	6013      	str	r3, [r2, #0]
 80099fa:	e013      	b.n	8009a24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a08:	461a      	mov	r2, r3
 8009a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	e008      	b.n	8009a24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1e:	461a      	mov	r2, r3
 8009a20:	2300      	movs	r3, #0
 8009a22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a30:	461a      	mov	r2, r3
 8009a32:	2300      	movs	r3, #0
 8009a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	015a      	lsls	r2, r3, #5
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a42:	461a      	mov	r2, r3
 8009a44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	613b      	str	r3, [r7, #16]
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d3b7      	bcc.n	80099c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	f043 0210 	orr.w	r2, r3, #16
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <USB_DevInit+0x2b4>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	f043 0208 	orr.w	r2, r3, #8
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d105      	bne.n	8009abc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	699a      	ldr	r2, [r3, #24]
 8009ab4:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <USB_DevInit+0x2b8>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ac8:	b004      	add	sp, #16
 8009aca:	4770      	bx	lr
 8009acc:	803c3800 	.word	0x803c3800
 8009ad0:	40000004 	.word	0x40000004

08009ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4a13      	ldr	r2, [pc, #76]	; (8009b38 <USB_FlushTxFifo+0x64>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d901      	bls.n	8009af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e01b      	b.n	8009b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	daf2      	bge.n	8009ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	019b      	lsls	r3, r3, #6
 8009b04:	f043 0220 	orr.w	r2, r3, #32
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <USB_FlushTxFifo+0x64>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d901      	bls.n	8009b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e006      	b.n	8009b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	d0f0      	beq.n	8009b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	00030d40 	.word	0x00030d40

08009b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4a11      	ldr	r2, [pc, #68]	; (8009b98 <USB_FlushRxFifo+0x5c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d901      	bls.n	8009b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e018      	b.n	8009b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	daf2      	bge.n	8009b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2210      	movs	r2, #16
 8009b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4a08      	ldr	r2, [pc, #32]	; (8009b98 <USB_FlushRxFifo+0x5c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d901      	bls.n	8009b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e006      	b.n	8009b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b10      	cmp	r3, #16
 8009b88:	d0f0      	beq.n	8009b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	00030d40 	.word	0x00030d40

08009b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	68f9      	ldr	r1, [r7, #12]
 8009bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b087      	sub	sp, #28
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f003 0306 	and.w	r3, r3, #6
 8009be6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	75fb      	strb	r3, [r7, #23]
 8009bf2:	e00a      	b.n	8009c0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d002      	beq.n	8009c00 <USB_GetDevSpeed+0x32>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b06      	cmp	r3, #6
 8009bfe:	d102      	bne.n	8009c06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c00:	2302      	movs	r3, #2
 8009c02:	75fb      	strb	r3, [r7, #23]
 8009c04:	e001      	b.n	8009c0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c06:	230f      	movs	r3, #15
 8009c08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	371c      	adds	r7, #28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	785b      	ldrb	r3, [r3, #1]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d139      	bne.n	8009ca8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c3a:	69da      	ldr	r2, [r3, #28]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 030f 	and.w	r3, r3, #15
 8009c44:	2101      	movs	r1, #1
 8009c46:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	68f9      	ldr	r1, [r7, #12]
 8009c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c52:	4313      	orrs	r3, r2
 8009c54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d153      	bne.n	8009d14 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	791b      	ldrb	r3, [r3, #4]
 8009c86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	059b      	lsls	r3, r3, #22
 8009c8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c90:	431a      	orrs	r2, r3
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	0159      	lsls	r1, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	440b      	add	r3, r1
 8009c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4b20      	ldr	r3, [pc, #128]	; (8009d24 <USB_ActivateEndpoint+0x10c>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	600b      	str	r3, [r1, #0]
 8009ca6:	e035      	b.n	8009d14 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cae:	69da      	ldr	r2, [r3, #28]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	2101      	movs	r1, #1
 8009cba:	fa01 f303 	lsl.w	r3, r1, r3
 8009cbe:	041b      	lsls	r3, r3, #16
 8009cc0:	68f9      	ldr	r1, [r7, #12]
 8009cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d119      	bne.n	8009d14 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	791b      	ldrb	r3, [r3, #4]
 8009cfa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cfc:	430b      	orrs	r3, r1
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	0159      	lsls	r1, r3, #5
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	440b      	add	r3, r1
 8009d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <USB_ActivateEndpoint+0x10c>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	10008000 	.word	0x10008000

08009d28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d161      	bne.n	8009e08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d5a:	d11f      	bne.n	8009d9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	0151      	lsls	r1, r2, #5
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	440a      	add	r2, r1
 8009d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	0151      	lsls	r1, r2, #5
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	440a      	add	r2, r1
 8009d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	f003 030f 	and.w	r3, r3, #15
 8009dac:	2101      	movs	r1, #1
 8009dae:	fa01 f303 	lsl.w	r3, r1, r3
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	43db      	mvns	r3, r3
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc6:	69da      	ldr	r2, [r3, #28]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	43db      	mvns	r3, r3
 8009dda:	68f9      	ldr	r1, [r7, #12]
 8009ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009de0:	4013      	ands	r3, r2
 8009de2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	015a      	lsls	r2, r3, #5
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	0159      	lsls	r1, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	440b      	add	r3, r1
 8009dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4b35      	ldr	r3, [pc, #212]	; (8009ed8 <USB_DeactivateEndpoint+0x1b0>)
 8009e02:	4013      	ands	r3, r2
 8009e04:	600b      	str	r3, [r1, #0]
 8009e06:	e060      	b.n	8009eca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e1e:	d11f      	bne.n	8009e60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	0151      	lsls	r1, r2, #5
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	440a      	add	r2, r1
 8009e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	0151      	lsls	r1, r2, #5
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	440a      	add	r2, r1
 8009e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	f003 030f 	and.w	r3, r3, #15
 8009e70:	2101      	movs	r1, #1
 8009e72:	fa01 f303 	lsl.w	r3, r1, r3
 8009e76:	041b      	lsls	r3, r3, #16
 8009e78:	43db      	mvns	r3, r3
 8009e7a:	68f9      	ldr	r1, [r7, #12]
 8009e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e80:	4013      	ands	r3, r2
 8009e82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	f003 030f 	and.w	r3, r3, #15
 8009e94:	2101      	movs	r1, #1
 8009e96:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	43db      	mvns	r3, r3
 8009e9e:	68f9      	ldr	r1, [r7, #12]
 8009ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	0159      	lsls	r1, r3, #5
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	440b      	add	r3, r1
 8009ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <USB_DeactivateEndpoint+0x1b4>)
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	ec337800 	.word	0xec337800
 8009edc:	eff37800 	.word	0xeff37800

08009ee0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	4613      	mov	r3, r2
 8009eec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	785b      	ldrb	r3, [r3, #1]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	f040 8163 	bne.w	800a1c8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d132      	bne.n	8009f70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f16:	691a      	ldr	r2, [r3, #16]
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	0159      	lsls	r1, r3, #5
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	440b      	add	r3, r1
 8009f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f24:	4619      	mov	r1, r3
 8009f26:	4ba5      	ldr	r3, [pc, #660]	; (800a1bc <USB_EPStartXfer+0x2dc>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f58:	691a      	ldr	r2, [r3, #16]
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	0159      	lsls	r1, r3, #5
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	440b      	add	r3, r1
 8009f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f66:	4619      	mov	r1, r3
 8009f68:	4b95      	ldr	r3, [pc, #596]	; (800a1c0 <USB_EPStartXfer+0x2e0>)
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	610b      	str	r3, [r1, #16]
 8009f6e:	e074      	b.n	800a05a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7c:	691a      	ldr	r2, [r3, #16]
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	0159      	lsls	r1, r3, #5
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	440b      	add	r3, r1
 8009f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4b8c      	ldr	r3, [pc, #560]	; (800a1c0 <USB_EPStartXfer+0x2e0>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9e:	691a      	ldr	r2, [r3, #16]
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	0159      	lsls	r1, r3, #5
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	440b      	add	r3, r1
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fac:	4619      	mov	r1, r3
 8009fae:	4b83      	ldr	r3, [pc, #524]	; (800a1bc <USB_EPStartXfer+0x2dc>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6999      	ldr	r1, [r3, #24]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	440b      	add	r3, r1
 8009fcc:	1e59      	subs	r1, r3, #1
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fd6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009fd8:	4b7a      	ldr	r3, [pc, #488]	; (800a1c4 <USB_EPStartXfer+0x2e4>)
 8009fda:	400b      	ands	r3, r1
 8009fdc:	69b9      	ldr	r1, [r7, #24]
 8009fde:	0148      	lsls	r0, r1, #5
 8009fe0:	69f9      	ldr	r1, [r7, #28]
 8009fe2:	4401      	add	r1, r0
 8009fe4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a002:	69b9      	ldr	r1, [r7, #24]
 800a004:	0148      	lsls	r0, r1, #5
 800a006:	69f9      	ldr	r1, [r7, #28]
 800a008:	4401      	add	r1, r0
 800a00a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a00e:	4313      	orrs	r3, r2
 800a010:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	791b      	ldrb	r3, [r3, #4]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d11f      	bne.n	800a05a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	69ba      	ldr	r2, [r7, #24]
 800a02a:	0151      	lsls	r1, r2, #5
 800a02c:	69fa      	ldr	r2, [r7, #28]
 800a02e:	440a      	add	r2, r1
 800a030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a034:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a038:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a058:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d14b      	bne.n	800a0f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d009      	beq.n	800a07c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a074:	461a      	mov	r2, r3
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	791b      	ldrb	r3, [r3, #4]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d128      	bne.n	800a0d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a090:	2b00      	cmp	r3, #0
 800a092:	d110      	bne.n	800a0b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69ba      	ldr	r2, [r7, #24]
 800a0a4:	0151      	lsls	r1, r2, #5
 800a0a6:	69fa      	ldr	r2, [r7, #28]
 800a0a8:	440a      	add	r2, r1
 800a0aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	e00f      	b.n	800a0d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	69ba      	ldr	r2, [r7, #24]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	69fa      	ldr	r2, [r7, #28]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	015a      	lsls	r2, r3, #5
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	4413      	add	r3, r2
 800a0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	0151      	lsls	r1, r2, #5
 800a0e8:	69fa      	ldr	r2, [r7, #28]
 800a0ea:	440a      	add	r2, r1
 800a0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	e137      	b.n	800a368 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	0151      	lsls	r1, r2, #5
 800a10a:	69fa      	ldr	r2, [r7, #28]
 800a10c:	440a      	add	r2, r1
 800a10e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a112:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a116:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	791b      	ldrb	r3, [r3, #4]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d015      	beq.n	800a14c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 811f 	beq.w	800a368 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	f003 030f 	and.w	r3, r3, #15
 800a13a:	2101      	movs	r1, #1
 800a13c:	fa01 f303 	lsl.w	r3, r1, r3
 800a140:	69f9      	ldr	r1, [r7, #28]
 800a142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a146:	4313      	orrs	r3, r2
 800a148:	634b      	str	r3, [r1, #52]	; 0x34
 800a14a:	e10d      	b.n	800a368 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d110      	bne.n	800a17e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	0151      	lsls	r1, r2, #5
 800a16e:	69fa      	ldr	r2, [r7, #28]
 800a170:	440a      	add	r2, r1
 800a172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	e00f      	b.n	800a19e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	440a      	add	r2, r1
 800a194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a19c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6919      	ldr	r1, [r3, #16]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	781a      	ldrb	r2, [r3, #0]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	b298      	uxth	r0, r3
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 faea 	bl	800a78c <USB_WritePacket>
 800a1b8:	e0d6      	b.n	800a368 <USB_EPStartXfer+0x488>
 800a1ba:	bf00      	nop
 800a1bc:	e007ffff 	.word	0xe007ffff
 800a1c0:	fff80000 	.word	0xfff80000
 800a1c4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d4:	691a      	ldr	r2, [r3, #16]
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	0159      	lsls	r1, r3, #5
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	440b      	add	r3, r1
 800a1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4b63      	ldr	r3, [pc, #396]	; (800a374 <USB_EPStartXfer+0x494>)
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f6:	691a      	ldr	r2, [r3, #16]
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	0159      	lsls	r1, r3, #5
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	440b      	add	r3, r1
 800a200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a204:	4619      	mov	r1, r3
 800a206:	4b5c      	ldr	r3, [pc, #368]	; (800a378 <USB_EPStartXfer+0x498>)
 800a208:	4013      	ands	r3, r2
 800a20a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d123      	bne.n	800a25c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a22a:	69b9      	ldr	r1, [r7, #24]
 800a22c:	0148      	lsls	r0, r1, #5
 800a22e:	69f9      	ldr	r1, [r7, #28]
 800a230:	4401      	add	r1, r0
 800a232:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a236:	4313      	orrs	r3, r2
 800a238:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	69fa      	ldr	r2, [r7, #28]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a258:	6113      	str	r3, [r2, #16]
 800a25a:	e037      	b.n	800a2cc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	699a      	ldr	r2, [r3, #24]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	4413      	add	r3, r2
 800a266:	1e5a      	subs	r2, r3, #1
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a270:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	8afa      	ldrh	r2, [r7, #22]
 800a278:	fb03 f202 	mul.w	r2, r3, r2
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28c:	691a      	ldr	r2, [r3, #16]
 800a28e:	8afb      	ldrh	r3, [r7, #22]
 800a290:	04d9      	lsls	r1, r3, #19
 800a292:	4b3a      	ldr	r3, [pc, #232]	; (800a37c <USB_EPStartXfer+0x49c>)
 800a294:	400b      	ands	r3, r1
 800a296:	69b9      	ldr	r1, [r7, #24]
 800a298:	0148      	lsls	r0, r1, #5
 800a29a:	69f9      	ldr	r1, [r7, #28]
 800a29c:	4401      	add	r1, r0
 800a29e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b2:	691a      	ldr	r2, [r3, #16]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2bc:	69b9      	ldr	r1, [r7, #24]
 800a2be:	0148      	lsls	r0, r1, #5
 800a2c0:	69f9      	ldr	r1, [r7, #28]
 800a2c2:	4401      	add	r1, r0
 800a2c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d10d      	bne.n	800a2ee <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d009      	beq.n	800a2ee <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	6919      	ldr	r1, [r3, #16]
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	460a      	mov	r2, r1
 800a2ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	791b      	ldrb	r3, [r3, #4]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d128      	bne.n	800a348 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a302:	2b00      	cmp	r3, #0
 800a304:	d110      	bne.n	800a328 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	69ba      	ldr	r2, [r7, #24]
 800a316:	0151      	lsls	r1, r2, #5
 800a318:	69fa      	ldr	r2, [r7, #28]
 800a31a:	440a      	add	r2, r1
 800a31c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a320:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	e00f      	b.n	800a348 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a346:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	0151      	lsls	r1, r2, #5
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	440a      	add	r2, r1
 800a35e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a362:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a366:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	fff80000 	.word	0xfff80000
 800a378:	e007ffff 	.word	0xe007ffff
 800a37c:	1ff80000 	.word	0x1ff80000

0800a380 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	4613      	mov	r3, r2
 800a38c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	785b      	ldrb	r3, [r3, #1]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	f040 80ce 	bne.w	800a53e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d132      	bne.n	800a410 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	0159      	lsls	r1, r3, #5
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	440b      	add	r3, r1
 800a3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4b9a      	ldr	r3, [pc, #616]	; (800a630 <USB_EP0StartXfer+0x2b0>)
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	0151      	lsls	r1, r2, #5
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	440a      	add	r2, r1
 800a3e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f8:	691a      	ldr	r2, [r3, #16]
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	0159      	lsls	r1, r3, #5
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	440b      	add	r3, r1
 800a402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a406:	4619      	mov	r1, r3
 800a408:	4b8a      	ldr	r3, [pc, #552]	; (800a634 <USB_EP0StartXfer+0x2b4>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	610b      	str	r3, [r1, #16]
 800a40e:	e04e      	b.n	800a4ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41c:	691a      	ldr	r2, [r3, #16]
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	0159      	lsls	r1, r3, #5
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	440b      	add	r3, r1
 800a426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42a:	4619      	mov	r1, r3
 800a42c:	4b81      	ldr	r3, [pc, #516]	; (800a634 <USB_EP0StartXfer+0x2b4>)
 800a42e:	4013      	ands	r3, r2
 800a430:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43e:	691a      	ldr	r2, [r3, #16]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	0159      	lsls	r1, r3, #5
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	440b      	add	r3, r1
 800a448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44c:	4619      	mov	r1, r3
 800a44e:	4b78      	ldr	r3, [pc, #480]	; (800a630 <USB_EP0StartXfer+0x2b0>)
 800a450:	4013      	ands	r3, r2
 800a452:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	699a      	ldr	r2, [r3, #24]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d903      	bls.n	800a468 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	68da      	ldr	r2, [r3, #12]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	0151      	lsls	r1, r2, #5
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	440a      	add	r2, r1
 800a47e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a486:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a494:	691a      	ldr	r2, [r3, #16]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a49e:	6939      	ldr	r1, [r7, #16]
 800a4a0:	0148      	lsls	r0, r1, #5
 800a4a2:	6979      	ldr	r1, [r7, #20]
 800a4a4:	4401      	add	r1, r0
 800a4a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d11e      	bne.n	800a4f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d009      	beq.n	800a4d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	0151      	lsls	r1, r2, #5
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	440a      	add	r2, r1
 800a4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	e097      	b.n	800a622 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	0151      	lsls	r1, r2, #5
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	440a      	add	r2, r1
 800a508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a50c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a510:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 8083 	beq.w	800a622 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	f003 030f 	and.w	r3, r3, #15
 800a52c:	2101      	movs	r1, #1
 800a52e:	fa01 f303 	lsl.w	r3, r1, r3
 800a532:	6979      	ldr	r1, [r7, #20]
 800a534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a538:	4313      	orrs	r3, r2
 800a53a:	634b      	str	r3, [r1, #52]	; 0x34
 800a53c:	e071      	b.n	800a622 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54a:	691a      	ldr	r2, [r3, #16]
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	0159      	lsls	r1, r3, #5
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	440b      	add	r3, r1
 800a554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a558:	4619      	mov	r1, r3
 800a55a:	4b36      	ldr	r3, [pc, #216]	; (800a634 <USB_EP0StartXfer+0x2b4>)
 800a55c:	4013      	ands	r3, r2
 800a55e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	4413      	add	r3, r2
 800a568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a56c:	691a      	ldr	r2, [r3, #16]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	0159      	lsls	r1, r3, #5
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	440b      	add	r3, r1
 800a576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57a:	4619      	mov	r1, r3
 800a57c:	4b2c      	ldr	r3, [pc, #176]	; (800a630 <USB_EP0StartXfer+0x2b0>)
 800a57e:	4013      	ands	r3, r2
 800a580:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	0151      	lsls	r1, r2, #5
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	440a      	add	r2, r1
 800a5b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5d0:	6939      	ldr	r1, [r7, #16]
 800a5d2:	0148      	lsls	r0, r1, #5
 800a5d4:	6979      	ldr	r1, [r7, #20]
 800a5d6:	4401      	add	r1, r0
 800a5d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d10d      	bne.n	800a602 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d009      	beq.n	800a602 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	6919      	ldr	r1, [r3, #16]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5fe:	460a      	mov	r2, r1
 800a600:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	440a      	add	r2, r1
 800a618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a61c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a620:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	e007ffff 	.word	0xe007ffff
 800a634:	fff80000 	.word	0xfff80000

0800a638 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a638:	b480      	push	{r7}
 800a63a:	b087      	sub	sp, #28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a642:	2300      	movs	r3, #0
 800a644:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	785b      	ldrb	r3, [r3, #1]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d14a      	bne.n	800a6ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a66a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a66e:	f040 8086 	bne.w	800a77e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	7812      	ldrb	r2, [r2, #0]
 800a686:	0151      	lsls	r1, r2, #5
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	440a      	add	r2, r1
 800a68c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a690:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a694:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	7812      	ldrb	r2, [r2, #0]
 800a6aa:	0151      	lsls	r1, r2, #5
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	440a      	add	r2, r1
 800a6b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d902      	bls.n	800a6d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a6ce:	e056      	b.n	800a77e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6e8:	d0e7      	beq.n	800a6ba <USB_EPStopXfer+0x82>
 800a6ea:	e048      	b.n	800a77e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a704:	d13b      	bne.n	800a77e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	7812      	ldrb	r2, [r2, #0]
 800a71a:	0151      	lsls	r1, r2, #5
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	440a      	add	r2, r1
 800a720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a728:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	4413      	add	r3, r2
 800a734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	7812      	ldrb	r2, [r2, #0]
 800a73e:	0151      	lsls	r1, r2, #5
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	440a      	add	r2, r1
 800a744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a74c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	3301      	adds	r3, #1
 800a752:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f242 7210 	movw	r2, #10000	; 0x2710
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d902      	bls.n	800a764 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	75fb      	strb	r3, [r7, #23]
          break;
 800a762:	e00c      	b.n	800a77e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a77c:	d0e7      	beq.n	800a74e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a780:	4618      	mov	r0, r3
 800a782:	371c      	adds	r7, #28
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b089      	sub	sp, #36	; 0x24
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	4611      	mov	r1, r2
 800a798:	461a      	mov	r2, r3
 800a79a:	460b      	mov	r3, r1
 800a79c:	71fb      	strb	r3, [r7, #7]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a7aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d123      	bne.n	800a7fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a7b2:	88bb      	ldrh	r3, [r7, #4]
 800a7b4:	3303      	adds	r3, #3
 800a7b6:	089b      	lsrs	r3, r3, #2
 800a7b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	61bb      	str	r3, [r7, #24]
 800a7be:	e018      	b.n	800a7f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	031a      	lsls	r2, r3, #12
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	61bb      	str	r3, [r7, #24]
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d3e2      	bcc.n	800a7c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3724      	adds	r7, #36	; 0x24
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a808:	b480      	push	{r7}
 800a80a:	b08b      	sub	sp, #44	; 0x2c
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4613      	mov	r3, r2
 800a814:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a81e:	88fb      	ldrh	r3, [r7, #6]
 800a820:	089b      	lsrs	r3, r3, #2
 800a822:	b29b      	uxth	r3, r3
 800a824:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	f003 0303 	and.w	r3, r3, #3
 800a82c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a82e:	2300      	movs	r3, #0
 800a830:	623b      	str	r3, [r7, #32]
 800a832:	e014      	b.n	800a85e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a842:	3301      	adds	r3, #1
 800a844:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	3301      	adds	r3, #1
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	3301      	adds	r3, #1
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	3301      	adds	r3, #1
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	3301      	adds	r3, #1
 800a85c:	623b      	str	r3, [r7, #32]
 800a85e:	6a3a      	ldr	r2, [r7, #32]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	429a      	cmp	r2, r3
 800a864:	d3e6      	bcc.n	800a834 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a866:	8bfb      	ldrh	r3, [r7, #30]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01e      	beq.n	800a8aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a86c:	2300      	movs	r3, #0
 800a86e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a876:	461a      	mov	r2, r3
 800a878:	f107 0310 	add.w	r3, r7, #16
 800a87c:	6812      	ldr	r2, [r2, #0]
 800a87e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	b2db      	uxtb	r3, r3
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	fa22 f303 	lsr.w	r3, r2, r3
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	701a      	strb	r2, [r3, #0]
      i++;
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	3301      	adds	r3, #1
 800a896:	623b      	str	r3, [r7, #32]
      pDest++;
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	3301      	adds	r3, #1
 800a89c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a89e:	8bfb      	ldrh	r3, [r7, #30]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8a4:	8bfb      	ldrh	r3, [r7, #30]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1ea      	bne.n	800a880 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	372c      	adds	r7, #44	; 0x2c
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	785b      	ldrb	r3, [r3, #1]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d12c      	bne.n	800a92e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	db12      	blt.n	800a90c <USB_EPSetStall+0x54>
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00f      	beq.n	800a90c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	0151      	lsls	r1, r2, #5
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	440a      	add	r2, r1
 800a902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a906:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a90a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	0151      	lsls	r1, r2, #5
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	440a      	add	r2, r1
 800a922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	e02b      	b.n	800a986 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	4413      	add	r3, r2
 800a936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	db12      	blt.n	800a966 <USB_EPSetStall+0xae>
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00f      	beq.n	800a966 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	0151      	lsls	r1, r2, #5
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	440a      	add	r2, r1
 800a95c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a960:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a964:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	0151      	lsls	r1, r2, #5
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	440a      	add	r2, r1
 800a97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a984:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	785b      	ldrb	r3, [r3, #1]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d128      	bne.n	800aa02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	0151      	lsls	r1, r2, #5
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	440a      	add	r2, r1
 800a9c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a9ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	791b      	ldrb	r3, [r3, #4]
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d003      	beq.n	800a9e0 <USB_EPClearStall+0x4c>
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	791b      	ldrb	r3, [r3, #4]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d138      	bne.n	800aa52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	0151      	lsls	r1, r2, #5
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	440a      	add	r2, r1
 800a9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	e027      	b.n	800aa52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	0151      	lsls	r1, r2, #5
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	440a      	add	r2, r1
 800aa18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	791b      	ldrb	r3, [r3, #4]
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d003      	beq.n	800aa32 <USB_EPClearStall+0x9e>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	791b      	ldrb	r3, [r3, #4]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d10f      	bne.n	800aa52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	0151      	lsls	r1, r2, #5
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	440a      	add	r2, r1
 800aa48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aa82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	78fb      	ldrb	r3, [r7, #3]
 800aa8e:	011b      	lsls	r3, r3, #4
 800aa90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aa94:	68f9      	ldr	r1, [r7, #12]
 800aa96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aac6:	f023 0303 	bic.w	r3, r3, #3
 800aaca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aada:	f023 0302 	bic.w	r3, r3, #2
 800aade:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b085      	sub	sp, #20
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab08:	f023 0303 	bic.w	r3, r3, #3
 800ab0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab1c:	f043 0302 	orr.w	r3, r3, #2
 800ab20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	4013      	ands	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab48:	68fb      	ldr	r3, [r7, #12]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b085      	sub	sp, #20
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	4013      	ands	r3, r2
 800ab78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	0c1b      	lsrs	r3, r3, #16
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba6:	69db      	ldr	r3, [r3, #28]
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	4013      	ands	r3, r2
 800abac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	b29b      	uxth	r3, r3
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b085      	sub	sp, #20
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800abce:	78fb      	ldrb	r3, [r7, #3]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4013      	ands	r3, r2
 800abea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abec:	68bb      	ldr	r3, [r7, #8]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b087      	sub	sp, #28
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	460b      	mov	r3, r1
 800ac04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac1e:	78fb      	ldrb	r3, [r7, #3]
 800ac20:	f003 030f 	and.w	r3, r3, #15
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2a:	01db      	lsls	r3, r3, #7
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac34:	78fb      	ldrb	r3, [r7, #3]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	4013      	ands	r3, r2
 800ac46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac48:	68bb      	ldr	r3, [r7, #8]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	f003 0301 	and.w	r3, r3, #1
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
	...

0800ac74 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8e:	4619      	mov	r1, r3
 800ac90:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <USB_ActivateSetup+0x44>)
 800ac92:	4013      	ands	r3, r2
 800ac94:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	fffff800 	.word	0xfffff800

0800acbc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	460b      	mov	r3, r1
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	333c      	adds	r3, #60	; 0x3c
 800acd2:	3304      	adds	r3, #4
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	4a26      	ldr	r2, [pc, #152]	; (800ad74 <USB_EP0_OutStart+0xb8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d90a      	bls.n	800acf6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acf0:	d101      	bne.n	800acf6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	e037      	b.n	800ad66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfc:	461a      	mov	r2, r3
 800acfe:	2300      	movs	r3, #0
 800ad00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad24:	f043 0318 	orr.w	r3, r3, #24
 800ad28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad38:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad3e:	7afb      	ldrb	r3, [r7, #11]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d10f      	bne.n	800ad64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad5e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ad62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	371c      	adds	r7, #28
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	4f54300a 	.word	0x4f54300a

0800ad78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad80:	2300      	movs	r3, #0
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3301      	adds	r3, #1
 800ad88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	4a13      	ldr	r2, [pc, #76]	; (800addc <USB_CoreReset+0x64>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d901      	bls.n	800ad96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e01b      	b.n	800adce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	daf2      	bge.n	800ad84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	f043 0201 	orr.w	r2, r3, #1
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3301      	adds	r3, #1
 800adb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4a09      	ldr	r2, [pc, #36]	; (800addc <USB_CoreReset+0x64>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d901      	bls.n	800adc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e006      	b.n	800adce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d0f0      	beq.n	800adae <USB_CoreReset+0x36>

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3714      	adds	r7, #20
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	00030d40 	.word	0x00030d40

0800ade0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800adec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800adf0:	f013 fbd4 	bl	801e59c <malloc>
 800adf4:	4603      	mov	r3, r0
 800adf6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d109      	bne.n	800ae12 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	32b0      	adds	r2, #176	; 0xb0
 800ae08:	2100      	movs	r1, #0
 800ae0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae0e:	2302      	movs	r3, #2
 800ae10:	e0d4      	b.n	800afbc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae12:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ae16:	2100      	movs	r1, #0
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f014 ffa3 	bl	801fd64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	32b0      	adds	r2, #176	; 0xb0
 800ae28:	68f9      	ldr	r1, [r7, #12]
 800ae2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	32b0      	adds	r2, #176	; 0xb0
 800ae38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7c1b      	ldrb	r3, [r3, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d138      	bne.n	800aebc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae4a:	4b5e      	ldr	r3, [pc, #376]	; (800afc4 <USBD_CDC_Init+0x1e4>)
 800ae4c:	7819      	ldrb	r1, [r3, #0]
 800ae4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae52:	2202      	movs	r2, #2
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f005 f926 	bl	80100a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae5a:	4b5a      	ldr	r3, [pc, #360]	; (800afc4 <USBD_CDC_Init+0x1e4>)
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	f003 020f 	and.w	r2, r3, #15
 800ae62:	6879      	ldr	r1, [r7, #4]
 800ae64:	4613      	mov	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	440b      	add	r3, r1
 800ae6e:	3324      	adds	r3, #36	; 0x24
 800ae70:	2201      	movs	r2, #1
 800ae72:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae74:	4b54      	ldr	r3, [pc, #336]	; (800afc8 <USBD_CDC_Init+0x1e8>)
 800ae76:	7819      	ldrb	r1, [r3, #0]
 800ae78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f005 f911 	bl	80100a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae84:	4b50      	ldr	r3, [pc, #320]	; (800afc8 <USBD_CDC_Init+0x1e8>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	f003 020f 	and.w	r2, r3, #15
 800ae8c:	6879      	ldr	r1, [r7, #4]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	440b      	add	r3, r1
 800ae98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aea0:	4b4a      	ldr	r3, [pc, #296]	; (800afcc <USBD_CDC_Init+0x1ec>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	f003 020f 	and.w	r2, r3, #15
 800aea8:	6879      	ldr	r1, [r7, #4]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	440b      	add	r3, r1
 800aeb4:	3326      	adds	r3, #38	; 0x26
 800aeb6:	2210      	movs	r2, #16
 800aeb8:	801a      	strh	r2, [r3, #0]
 800aeba:	e035      	b.n	800af28 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aebc:	4b41      	ldr	r3, [pc, #260]	; (800afc4 <USBD_CDC_Init+0x1e4>)
 800aebe:	7819      	ldrb	r1, [r3, #0]
 800aec0:	2340      	movs	r3, #64	; 0x40
 800aec2:	2202      	movs	r2, #2
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f005 f8ee 	bl	80100a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aeca:	4b3e      	ldr	r3, [pc, #248]	; (800afc4 <USBD_CDC_Init+0x1e4>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	f003 020f 	and.w	r2, r3, #15
 800aed2:	6879      	ldr	r1, [r7, #4]
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	440b      	add	r3, r1
 800aede:	3324      	adds	r3, #36	; 0x24
 800aee0:	2201      	movs	r2, #1
 800aee2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aee4:	4b38      	ldr	r3, [pc, #224]	; (800afc8 <USBD_CDC_Init+0x1e8>)
 800aee6:	7819      	ldrb	r1, [r3, #0]
 800aee8:	2340      	movs	r3, #64	; 0x40
 800aeea:	2202      	movs	r2, #2
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f005 f8da 	bl	80100a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aef2:	4b35      	ldr	r3, [pc, #212]	; (800afc8 <USBD_CDC_Init+0x1e8>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	f003 020f 	and.w	r2, r3, #15
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af0a:	2201      	movs	r2, #1
 800af0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af0e:	4b2f      	ldr	r3, [pc, #188]	; (800afcc <USBD_CDC_Init+0x1ec>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	f003 020f 	and.w	r2, r3, #15
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	4613      	mov	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	440b      	add	r3, r1
 800af22:	3326      	adds	r3, #38	; 0x26
 800af24:	2210      	movs	r2, #16
 800af26:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af28:	4b28      	ldr	r3, [pc, #160]	; (800afcc <USBD_CDC_Init+0x1ec>)
 800af2a:	7819      	ldrb	r1, [r3, #0]
 800af2c:	2308      	movs	r3, #8
 800af2e:	2203      	movs	r2, #3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f005 f8b8 	bl	80100a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af36:	4b25      	ldr	r3, [pc, #148]	; (800afcc <USBD_CDC_Init+0x1ec>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f003 020f 	and.w	r2, r3, #15
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	440b      	add	r3, r1
 800af4a:	3324      	adds	r3, #36	; 0x24
 800af4c:	2201      	movs	r2, #1
 800af4e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2200      	movs	r2, #0
 800af54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	33b0      	adds	r3, #176	; 0xb0
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800af86:	2302      	movs	r3, #2
 800af88:	e018      	b.n	800afbc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	7c1b      	ldrb	r3, [r3, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10a      	bne.n	800afa8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af92:	4b0d      	ldr	r3, [pc, #52]	; (800afc8 <USBD_CDC_Init+0x1e8>)
 800af94:	7819      	ldrb	r1, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f005 f96f 	bl	8010284 <USBD_LL_PrepareReceive>
 800afa6:	e008      	b.n	800afba <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afa8:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <USBD_CDC_Init+0x1e8>)
 800afaa:	7819      	ldrb	r1, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afb2:	2340      	movs	r3, #64	; 0x40
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f005 f965 	bl	8010284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	2000009b 	.word	0x2000009b
 800afc8:	2000009c 	.word	0x2000009c
 800afcc:	2000009d 	.word	0x2000009d

0800afd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800afdc:	4b3a      	ldr	r3, [pc, #232]	; (800b0c8 <USBD_CDC_DeInit+0xf8>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f005 f885 	bl	80100f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800afe8:	4b37      	ldr	r3, [pc, #220]	; (800b0c8 <USBD_CDC_DeInit+0xf8>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	f003 020f 	and.w	r2, r3, #15
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	3324      	adds	r3, #36	; 0x24
 800affe:	2200      	movs	r2, #0
 800b000:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b002:	4b32      	ldr	r3, [pc, #200]	; (800b0cc <USBD_CDC_DeInit+0xfc>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f005 f872 	bl	80100f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b00e:	4b2f      	ldr	r3, [pc, #188]	; (800b0cc <USBD_CDC_DeInit+0xfc>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	f003 020f 	and.w	r2, r3, #15
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	440b      	add	r3, r1
 800b022:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b026:	2200      	movs	r2, #0
 800b028:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b02a:	4b29      	ldr	r3, [pc, #164]	; (800b0d0 <USBD_CDC_DeInit+0x100>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f005 f85e 	bl	80100f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b036:	4b26      	ldr	r3, [pc, #152]	; (800b0d0 <USBD_CDC_DeInit+0x100>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	f003 020f 	and.w	r2, r3, #15
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	440b      	add	r3, r1
 800b04a:	3324      	adds	r3, #36	; 0x24
 800b04c:	2200      	movs	r2, #0
 800b04e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b050:	4b1f      	ldr	r3, [pc, #124]	; (800b0d0 <USBD_CDC_DeInit+0x100>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	f003 020f 	and.w	r2, r3, #15
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	4613      	mov	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	440b      	add	r3, r1
 800b064:	3326      	adds	r3, #38	; 0x26
 800b066:	2200      	movs	r2, #0
 800b068:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	32b0      	adds	r2, #176	; 0xb0
 800b074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d01f      	beq.n	800b0bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	33b0      	adds	r3, #176	; 0xb0
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	32b0      	adds	r2, #176	; 0xb0
 800b09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f013 fa84 	bl	801e5ac <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	32b0      	adds	r2, #176	; 0xb0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	2000009b 	.word	0x2000009b
 800b0cc:	2000009c 	.word	0x2000009c
 800b0d0:	2000009d 	.word	0x2000009d

0800b0d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	32b0      	adds	r2, #176	; 0xb0
 800b0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b100:	2303      	movs	r3, #3
 800b102:	e0bf      	b.n	800b284 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d050      	beq.n	800b1b2 <USBD_CDC_Setup+0xde>
 800b110:	2b20      	cmp	r3, #32
 800b112:	f040 80af 	bne.w	800b274 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	88db      	ldrh	r3, [r3, #6]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d03a      	beq.n	800b194 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	b25b      	sxtb	r3, r3
 800b124:	2b00      	cmp	r3, #0
 800b126:	da1b      	bge.n	800b160 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	33b0      	adds	r3, #176	; 0xb0
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b13e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	88d2      	ldrh	r2, [r2, #6]
 800b144:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	88db      	ldrh	r3, [r3, #6]
 800b14a:	2b07      	cmp	r3, #7
 800b14c:	bf28      	it	cs
 800b14e:	2307      	movcs	r3, #7
 800b150:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	89fa      	ldrh	r2, [r7, #14]
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f001 fd6d 	bl	800cc38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b15e:	e090      	b.n	800b282 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	785a      	ldrb	r2, [r3, #1]
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	88db      	ldrh	r3, [r3, #6]
 800b16e:	2b3f      	cmp	r3, #63	; 0x3f
 800b170:	d803      	bhi.n	800b17a <USBD_CDC_Setup+0xa6>
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	88db      	ldrh	r3, [r3, #6]
 800b176:	b2da      	uxtb	r2, r3
 800b178:	e000      	b.n	800b17c <USBD_CDC_Setup+0xa8>
 800b17a:	2240      	movs	r2, #64	; 0x40
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b182:	6939      	ldr	r1, [r7, #16]
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b18a:	461a      	mov	r2, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 fd7f 	bl	800cc90 <USBD_CtlPrepareRx>
      break;
 800b192:	e076      	b.n	800b282 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	33b0      	adds	r3, #176	; 0xb0
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	7850      	ldrb	r0, [r2, #1]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	4798      	blx	r3
      break;
 800b1b0:	e067      	b.n	800b282 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	785b      	ldrb	r3, [r3, #1]
 800b1b6:	2b0b      	cmp	r3, #11
 800b1b8:	d851      	bhi.n	800b25e <USBD_CDC_Setup+0x18a>
 800b1ba:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <USBD_CDC_Setup+0xec>)
 800b1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c0:	0800b1f1 	.word	0x0800b1f1
 800b1c4:	0800b26d 	.word	0x0800b26d
 800b1c8:	0800b25f 	.word	0x0800b25f
 800b1cc:	0800b25f 	.word	0x0800b25f
 800b1d0:	0800b25f 	.word	0x0800b25f
 800b1d4:	0800b25f 	.word	0x0800b25f
 800b1d8:	0800b25f 	.word	0x0800b25f
 800b1dc:	0800b25f 	.word	0x0800b25f
 800b1e0:	0800b25f 	.word	0x0800b25f
 800b1e4:	0800b25f 	.word	0x0800b25f
 800b1e8:	0800b21b 	.word	0x0800b21b
 800b1ec:	0800b245 	.word	0x0800b245
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d107      	bne.n	800b20c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b1fc:	f107 030a 	add.w	r3, r7, #10
 800b200:	2202      	movs	r2, #2
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 fd17 	bl	800cc38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b20a:	e032      	b.n	800b272 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f001 fca1 	bl	800cb56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b214:	2303      	movs	r3, #3
 800b216:	75fb      	strb	r3, [r7, #23]
          break;
 800b218:	e02b      	b.n	800b272 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b03      	cmp	r3, #3
 800b224:	d107      	bne.n	800b236 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b226:	f107 030d 	add.w	r3, r7, #13
 800b22a:	2201      	movs	r2, #1
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f001 fd02 	bl	800cc38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b234:	e01d      	b.n	800b272 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 fc8c 	bl	800cb56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b23e:	2303      	movs	r3, #3
 800b240:	75fb      	strb	r3, [r7, #23]
          break;
 800b242:	e016      	b.n	800b272 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d00f      	beq.n	800b270 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f001 fc7f 	bl	800cb56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b258:	2303      	movs	r3, #3
 800b25a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b25c:	e008      	b.n	800b270 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f001 fc78 	bl	800cb56 <USBD_CtlError>
          ret = USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	75fb      	strb	r3, [r7, #23]
          break;
 800b26a:	e002      	b.n	800b272 <USBD_CDC_Setup+0x19e>
          break;
 800b26c:	bf00      	nop
 800b26e:	e008      	b.n	800b282 <USBD_CDC_Setup+0x1ae>
          break;
 800b270:	bf00      	nop
      }
      break;
 800b272:	e006      	b.n	800b282 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f001 fc6d 	bl	800cb56 <USBD_CtlError>
      ret = USBD_FAIL;
 800b27c:	2303      	movs	r3, #3
 800b27e:	75fb      	strb	r3, [r7, #23]
      break;
 800b280:	bf00      	nop
  }

  return (uint8_t)ret;
 800b282:	7dfb      	ldrb	r3, [r7, #23]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3718      	adds	r7, #24
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b29e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	32b0      	adds	r2, #176	; 0xb0
 800b2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e065      	b.n	800b382 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	32b0      	adds	r2, #176	; 0xb0
 800b2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b2c6:	78fb      	ldrb	r3, [r7, #3]
 800b2c8:	f003 020f 	and.w	r2, r3, #15
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	440b      	add	r3, r1
 800b2d8:	3318      	adds	r3, #24
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d02f      	beq.n	800b340 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b2e0:	78fb      	ldrb	r3, [r7, #3]
 800b2e2:	f003 020f 	and.w	r2, r3, #15
 800b2e6:	6879      	ldr	r1, [r7, #4]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	440b      	add	r3, r1
 800b2f2:	3318      	adds	r3, #24
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	f003 010f 	and.w	r1, r3, #15
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	460b      	mov	r3, r1
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	440b      	add	r3, r1
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4403      	add	r3, r0
 800b308:	3348      	adds	r3, #72	; 0x48
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b310:	fb01 f303 	mul.w	r3, r1, r3
 800b314:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b316:	2b00      	cmp	r3, #0
 800b318:	d112      	bne.n	800b340 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b31a:	78fb      	ldrb	r3, [r7, #3]
 800b31c:	f003 020f 	and.w	r2, r3, #15
 800b320:	6879      	ldr	r1, [r7, #4]
 800b322:	4613      	mov	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	440b      	add	r3, r1
 800b32c:	3318      	adds	r3, #24
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b332:	78f9      	ldrb	r1, [r7, #3]
 800b334:	2300      	movs	r3, #0
 800b336:	2200      	movs	r2, #0
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f004 ff82 	bl	8010242 <USBD_LL_Transmit>
 800b33e:	e01f      	b.n	800b380 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	33b0      	adds	r3, #176	; 0xb0
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d010      	beq.n	800b380 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	33b0      	adds	r3, #176	; 0xb0
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b37c:	78fa      	ldrb	r2, [r7, #3]
 800b37e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b084      	sub	sp, #16
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	460b      	mov	r3, r1
 800b394:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	32b0      	adds	r2, #176	; 0xb0
 800b3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	32b0      	adds	r2, #176	; 0xb0
 800b3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	e01a      	b.n	800b3f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3bc:	78fb      	ldrb	r3, [r7, #3]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f004 ff80 	bl	80102c6 <USBD_LL_GetRxDataSize>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	33b0      	adds	r3, #176	; 0xb0
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	32b0      	adds	r2, #176	; 0xb0
 800b40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b410:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b418:	2303      	movs	r3, #3
 800b41a:	e025      	b.n	800b468 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	33b0      	adds	r3, #176	; 0xb0
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01a      	beq.n	800b466 <USBD_CDC_EP0_RxReady+0x6c>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b436:	2bff      	cmp	r3, #255	; 0xff
 800b438:	d015      	beq.n	800b466 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	33b0      	adds	r3, #176	; 0xb0
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b452:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b45a:	b292      	uxth	r2, r2
 800b45c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	22ff      	movs	r2, #255	; 0xff
 800b462:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b478:	2182      	movs	r1, #130	; 0x82
 800b47a:	4818      	ldr	r0, [pc, #96]	; (800b4dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b47c:	f000 fd09 	bl	800be92 <USBD_GetEpDesc>
 800b480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b482:	2101      	movs	r1, #1
 800b484:	4815      	ldr	r0, [pc, #84]	; (800b4dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b486:	f000 fd04 	bl	800be92 <USBD_GetEpDesc>
 800b48a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b48c:	2181      	movs	r1, #129	; 0x81
 800b48e:	4813      	ldr	r0, [pc, #76]	; (800b4dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b490:	f000 fcff 	bl	800be92 <USBD_GetEpDesc>
 800b494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2210      	movs	r2, #16
 800b4a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d006      	beq.n	800b4b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4b0:	711a      	strb	r2, [r3, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d006      	beq.n	800b4ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4c4:	711a      	strb	r2, [r3, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2243      	movs	r2, #67	; 0x43
 800b4ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4d0:	4b02      	ldr	r3, [pc, #8]	; (800b4dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3718      	adds	r7, #24
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20000058 	.word	0x20000058

0800b4e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4e8:	2182      	movs	r1, #130	; 0x82
 800b4ea:	4818      	ldr	r0, [pc, #96]	; (800b54c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b4ec:	f000 fcd1 	bl	800be92 <USBD_GetEpDesc>
 800b4f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	4815      	ldr	r0, [pc, #84]	; (800b54c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b4f6:	f000 fccc 	bl	800be92 <USBD_GetEpDesc>
 800b4fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4fc:	2181      	movs	r1, #129	; 0x81
 800b4fe:	4813      	ldr	r0, [pc, #76]	; (800b54c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b500:	f000 fcc7 	bl	800be92 <USBD_GetEpDesc>
 800b504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2210      	movs	r2, #16
 800b510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d006      	beq.n	800b526 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2200      	movs	r2, #0
 800b51c:	711a      	strb	r2, [r3, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f042 0202 	orr.w	r2, r2, #2
 800b524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d006      	beq.n	800b53a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	711a      	strb	r2, [r3, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f042 0202 	orr.w	r2, r2, #2
 800b538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2243      	movs	r2, #67	; 0x43
 800b53e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b540:	4b02      	ldr	r3, [pc, #8]	; (800b54c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b542:	4618      	mov	r0, r3
 800b544:	3718      	adds	r7, #24
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20000058 	.word	0x20000058

0800b550 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b558:	2182      	movs	r1, #130	; 0x82
 800b55a:	4818      	ldr	r0, [pc, #96]	; (800b5bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b55c:	f000 fc99 	bl	800be92 <USBD_GetEpDesc>
 800b560:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b562:	2101      	movs	r1, #1
 800b564:	4815      	ldr	r0, [pc, #84]	; (800b5bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b566:	f000 fc94 	bl	800be92 <USBD_GetEpDesc>
 800b56a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b56c:	2181      	movs	r1, #129	; 0x81
 800b56e:	4813      	ldr	r0, [pc, #76]	; (800b5bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b570:	f000 fc8f 	bl	800be92 <USBD_GetEpDesc>
 800b574:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d002      	beq.n	800b582 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2210      	movs	r2, #16
 800b580:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d006      	beq.n	800b596 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b590:	711a      	strb	r2, [r3, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d006      	beq.n	800b5aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5a4:	711a      	strb	r2, [r3, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2243      	movs	r2, #67	; 0x43
 800b5ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5b0:	4b02      	ldr	r3, [pc, #8]	; (800b5bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3718      	adds	r7, #24
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20000058 	.word	0x20000058

0800b5c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	220a      	movs	r2, #10
 800b5cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b5ce:	4b03      	ldr	r3, [pc, #12]	; (800b5dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	20000014 	.word	0x20000014

0800b5e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e009      	b.n	800b608 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	33b0      	adds	r3, #176	; 0xb0
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b614:	b480      	push	{r7}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	32b0      	adds	r2, #176	; 0xb0
 800b62a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b636:	2303      	movs	r3, #3
 800b638:	e008      	b.n	800b64c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	371c      	adds	r7, #28
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	32b0      	adds	r2, #176	; 0xb0
 800b66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b670:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b678:	2303      	movs	r3, #3
 800b67a:	e004      	b.n	800b686 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
	...

0800b694 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	32b0      	adds	r2, #176	; 0xb0
 800b6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	32b0      	adds	r2, #176	; 0xb0
 800b6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b6be:	2303      	movs	r3, #3
 800b6c0:	e018      	b.n	800b6f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	7c1b      	ldrb	r3, [r3, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10a      	bne.n	800b6e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6ca:	4b0c      	ldr	r3, [pc, #48]	; (800b6fc <USBD_CDC_ReceivePacket+0x68>)
 800b6cc:	7819      	ldrb	r1, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f004 fdd3 	bl	8010284 <USBD_LL_PrepareReceive>
 800b6de:	e008      	b.n	800b6f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6e0:	4b06      	ldr	r3, [pc, #24]	; (800b6fc <USBD_CDC_ReceivePacket+0x68>)
 800b6e2:	7819      	ldrb	r1, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6ea:	2340      	movs	r3, #64	; 0x40
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f004 fdc9 	bl	8010284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	2000009c 	.word	0x2000009c

0800b700 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	4613      	mov	r3, r2
 800b70c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d101      	bne.n	800b718 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b714:	2303      	movs	r3, #3
 800b716:	e01f      	b.n	800b758 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d003      	beq.n	800b73e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	79fa      	ldrb	r2, [r7, #7]
 800b74a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f004 fc43 	bl	800ffd8 <USBD_LL_Init>
 800b752:	4603      	mov	r3, r0
 800b754:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b756:	7dfb      	ldrb	r3, [r7, #23]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b76a:	2300      	movs	r3, #0
 800b76c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b774:	2303      	movs	r3, #3
 800b776:	e025      	b.n	800b7c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	32ae      	adds	r2, #174	; 0xae
 800b78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00f      	beq.n	800b7b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	32ae      	adds	r2, #174	; 0xae
 800b79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a4:	f107 020e 	add.w	r2, r7, #14
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4798      	blx	r3
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f004 fc4b 	bl	8010070 <USBD_LL_Start>
 800b7da:	4603      	mov	r3, r0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b810:	2b00      	cmp	r3, #0
 800b812:	d009      	beq.n	800b828 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	78fa      	ldrb	r2, [r7, #3]
 800b81e:	4611      	mov	r1, r2
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	4798      	blx	r3
 800b824:	4603      	mov	r3, r0
 800b826:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b828:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b084      	sub	sp, #16
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	460b      	mov	r3, r1
 800b83c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	78fa      	ldrb	r2, [r7, #3]
 800b84c:	4611      	mov	r1, r2
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	4798      	blx	r3
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b858:	2303      	movs	r3, #3
 800b85a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	4618      	mov	r0, r3
 800b87a:	f001 f932 	bl	800cae2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2201      	movs	r2, #1
 800b882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b88c:	461a      	mov	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b89a:	f003 031f 	and.w	r3, r3, #31
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d01a      	beq.n	800b8d8 <USBD_LL_SetupStage+0x72>
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d822      	bhi.n	800b8ec <USBD_LL_SetupStage+0x86>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <USBD_LL_SetupStage+0x4a>
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d00a      	beq.n	800b8c4 <USBD_LL_SetupStage+0x5e>
 800b8ae:	e01d      	b.n	800b8ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fb5f 	bl	800bf7c <USBD_StdDevReq>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c2:	e020      	b.n	800b906 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fbc7 	bl	800c060 <USBD_StdItfReq>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8d6:	e016      	b.n	800b906 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fc29 	bl	800c138 <USBD_StdEPReq>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ea:	e00c      	b.n	800b906 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f004 fc18 	bl	8010130 <USBD_LL_StallEP>
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]
      break;
 800b904:	bf00      	nop
  }

  return ret;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	460b      	mov	r3, r1
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b922:	7afb      	ldrb	r3, [r7, #11]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d16e      	bne.n	800ba06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b92e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b936:	2b03      	cmp	r3, #3
 800b938:	f040 8098 	bne.w	800ba6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	689a      	ldr	r2, [r3, #8]
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	429a      	cmp	r2, r3
 800b946:	d913      	bls.n	800b970 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	689a      	ldr	r2, [r3, #8]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	1ad2      	subs	r2, r2, r3
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	68da      	ldr	r2, [r3, #12]
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	4293      	cmp	r3, r2
 800b960:	bf28      	it	cs
 800b962:	4613      	movcs	r3, r2
 800b964:	461a      	mov	r2, r3
 800b966:	6879      	ldr	r1, [r7, #4]
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f001 f9ae 	bl	800ccca <USBD_CtlContinueRx>
 800b96e:	e07d      	b.n	800ba6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b976:	f003 031f 	and.w	r3, r3, #31
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d014      	beq.n	800b9a8 <USBD_LL_DataOutStage+0x98>
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d81d      	bhi.n	800b9be <USBD_LL_DataOutStage+0xae>
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <USBD_LL_DataOutStage+0x7c>
 800b986:	2b01      	cmp	r3, #1
 800b988:	d003      	beq.n	800b992 <USBD_LL_DataOutStage+0x82>
 800b98a:	e018      	b.n	800b9be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b98c:	2300      	movs	r3, #0
 800b98e:	75bb      	strb	r3, [r7, #22]
            break;
 800b990:	e018      	b.n	800b9c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	4619      	mov	r1, r3
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 fa5e 	bl	800be5e <USBD_CoreFindIF>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	75bb      	strb	r3, [r7, #22]
            break;
 800b9a6:	e00d      	b.n	800b9c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f000 fa60 	bl	800be78 <USBD_CoreFindEP>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	75bb      	strb	r3, [r7, #22]
            break;
 800b9bc:	e002      	b.n	800b9c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	75bb      	strb	r3, [r7, #22]
            break;
 800b9c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b9c4:	7dbb      	ldrb	r3, [r7, #22]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d119      	bne.n	800b9fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d113      	bne.n	800b9fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b9d6:	7dba      	ldrb	r2, [r7, #22]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	32ae      	adds	r2, #174	; 0xae
 800b9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00b      	beq.n	800b9fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b9e6:	7dba      	ldrb	r2, [r7, #22]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b9ee:	7dba      	ldrb	r2, [r7, #22]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	32ae      	adds	r2, #174	; 0xae
 800b9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f001 f974 	bl	800ccec <USBD_CtlSendStatus>
 800ba04:	e032      	b.n	800ba6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ba06:	7afb      	ldrb	r3, [r7, #11]
 800ba08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	4619      	mov	r1, r3
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 fa31 	bl	800be78 <USBD_CoreFindEP>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba1a:	7dbb      	ldrb	r3, [r7, #22]
 800ba1c:	2bff      	cmp	r3, #255	; 0xff
 800ba1e:	d025      	beq.n	800ba6c <USBD_LL_DataOutStage+0x15c>
 800ba20:	7dbb      	ldrb	r3, [r7, #22]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d122      	bne.n	800ba6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d117      	bne.n	800ba62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ba32:	7dba      	ldrb	r2, [r7, #22]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	32ae      	adds	r2, #174	; 0xae
 800ba38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00f      	beq.n	800ba62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ba42:	7dba      	ldrb	r2, [r7, #22]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ba4a:	7dba      	ldrb	r2, [r7, #22]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	32ae      	adds	r2, #174	; 0xae
 800ba50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba54:	699b      	ldr	r3, [r3, #24]
 800ba56:	7afa      	ldrb	r2, [r7, #11]
 800ba58:	4611      	mov	r1, r2
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	4798      	blx	r3
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
 800ba6a:	e000      	b.n	800ba6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	607a      	str	r2, [r7, #4]
 800ba82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ba84:	7afb      	ldrb	r3, [r7, #11]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d16f      	bne.n	800bb6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3314      	adds	r3, #20
 800ba8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d15a      	bne.n	800bb50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	689a      	ldr	r2, [r3, #8]
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d914      	bls.n	800bad0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	689a      	ldr	r2, [r3, #8]
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	1ad2      	subs	r2, r2, r3
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	461a      	mov	r2, r3
 800baba:	6879      	ldr	r1, [r7, #4]
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f001 f8d6 	bl	800cc6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bac2:	2300      	movs	r3, #0
 800bac4:	2200      	movs	r2, #0
 800bac6:	2100      	movs	r1, #0
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f004 fbdb 	bl	8010284 <USBD_LL_PrepareReceive>
 800bace:	e03f      	b.n	800bb50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	68da      	ldr	r2, [r3, #12]
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d11c      	bne.n	800bb16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	685a      	ldr	r2, [r3, #4]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d316      	bcc.n	800bb16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d20f      	bcs.n	800bb16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800baf6:	2200      	movs	r2, #0
 800baf8:	2100      	movs	r1, #0
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f001 f8b7 	bl	800cc6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f004 fbb8 	bl	8010284 <USBD_LL_PrepareReceive>
 800bb14:	e01c      	b.n	800bb50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d10f      	bne.n	800bb42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d009      	beq.n	800bb42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb42:	2180      	movs	r1, #128	; 0x80
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f004 faf3 	bl	8010130 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f001 f8e1 	bl	800cd12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d03a      	beq.n	800bbd0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f7ff fe42 	bl	800b7e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bb68:	e032      	b.n	800bbd0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bb6a:	7afb      	ldrb	r3, [r7, #11]
 800bb6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	4619      	mov	r1, r3
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 f97f 	bl	800be78 <USBD_CoreFindEP>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
 800bb80:	2bff      	cmp	r3, #255	; 0xff
 800bb82:	d025      	beq.n	800bbd0 <USBD_LL_DataInStage+0x15a>
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d122      	bne.n	800bbd0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d11c      	bne.n	800bbd0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bb96:	7dfa      	ldrb	r2, [r7, #23]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	32ae      	adds	r2, #174	; 0xae
 800bb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d014      	beq.n	800bbd0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bba6:	7dfa      	ldrb	r2, [r7, #23]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bbae:	7dfa      	ldrb	r2, [r7, #23]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	32ae      	adds	r2, #174	; 0xae
 800bbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	7afa      	ldrb	r2, [r7, #11]
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	4798      	blx	r3
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bbc6:	7dbb      	ldrb	r3, [r7, #22]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bbcc:	7dbb      	ldrb	r3, [r7, #22]
 800bbce:	e000      	b.n	800bbd2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d014      	beq.n	800bc40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00e      	beq.n	800bc40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	6852      	ldr	r2, [r2, #4]
 800bc2e:	b2d2      	uxtb	r2, r2
 800bc30:	4611      	mov	r1, r2
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	4798      	blx	r3
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc40:	2340      	movs	r3, #64	; 0x40
 800bc42:	2200      	movs	r2, #0
 800bc44:	2100      	movs	r1, #0
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f004 fa2d 	bl	80100a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2240      	movs	r2, #64	; 0x40
 800bc58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc5c:	2340      	movs	r3, #64	; 0x40
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2180      	movs	r1, #128	; 0x80
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f004 fa1f 	bl	80100a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2240      	movs	r2, #64	; 0x40
 800bc72:	621a      	str	r2, [r3, #32]

  return ret;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	460b      	mov	r3, r1
 800bc88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	78fa      	ldrb	r2, [r7, #3]
 800bc8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2204      	movs	r2, #4
 800bcb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b04      	cmp	r3, #4
 800bcdc:	d106      	bne.n	800bcec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bce4:	b2da      	uxtb	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d110      	bne.n	800bd30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00b      	beq.n	800bd30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d005      	beq.n	800bd30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b082      	sub	sp, #8
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	460b      	mov	r3, r1
 800bd44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	32ae      	adds	r2, #174	; 0xae
 800bd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e01c      	b.n	800bd96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d115      	bne.n	800bd94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	32ae      	adds	r2, #174	; 0xae
 800bd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00b      	beq.n	800bd94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	32ae      	adds	r2, #174	; 0xae
 800bd86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd8a:	6a1b      	ldr	r3, [r3, #32]
 800bd8c:	78fa      	ldrb	r2, [r7, #3]
 800bd8e:	4611      	mov	r1, r2
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	460b      	mov	r3, r1
 800bda8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	32ae      	adds	r2, #174	; 0xae
 800bdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e01c      	b.n	800bdfa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	d115      	bne.n	800bdf8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	32ae      	adds	r2, #174	; 0xae
 800bdd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00b      	beq.n	800bdf8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	32ae      	adds	r2, #174	; 0xae
 800bdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	78fa      	ldrb	r2, [r7, #3]
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800be02:	b480      	push	{r7}
 800be04:	b083      	sub	sp, #12
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00e      	beq.n	800be54 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	6852      	ldr	r2, [r2, #4]
 800be42:	b2d2      	uxtb	r2, r2
 800be44:	4611      	mov	r1, r2
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	4798      	blx	r3
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d001      	beq.n	800be54 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800be50:	2303      	movs	r3, #3
 800be52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be5e:	b480      	push	{r7}
 800be60:	b083      	sub	sp, #12
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	460b      	mov	r3, r1
 800be68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be86:	4618      	mov	r0, r3
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b086      	sub	sp, #24
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	460b      	mov	r3, r1
 800be9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bea6:	2300      	movs	r3, #0
 800bea8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	885b      	ldrh	r3, [r3, #2]
 800beae:	b29a      	uxth	r2, r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d920      	bls.n	800befc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bec2:	e013      	b.n	800beec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bec4:	f107 030a 	add.w	r3, r7, #10
 800bec8:	4619      	mov	r1, r3
 800beca:	6978      	ldr	r0, [r7, #20]
 800becc:	f000 f81b 	bl	800bf06 <USBD_GetNextDesc>
 800bed0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	785b      	ldrb	r3, [r3, #1]
 800bed6:	2b05      	cmp	r3, #5
 800bed8:	d108      	bne.n	800beec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	789b      	ldrb	r3, [r3, #2]
 800bee2:	78fa      	ldrb	r2, [r7, #3]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d008      	beq.n	800befa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bee8:	2300      	movs	r3, #0
 800beea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	885b      	ldrh	r3, [r3, #2]
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	897b      	ldrh	r3, [r7, #10]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d8e5      	bhi.n	800bec4 <USBD_GetEpDesc+0x32>
 800bef8:	e000      	b.n	800befc <USBD_GetEpDesc+0x6a>
          break;
 800befa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800befc:	693b      	ldr	r3, [r7, #16]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b085      	sub	sp, #20
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	881a      	ldrh	r2, [r3, #0]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	4413      	add	r3, r2
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4413      	add	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf32:	68fb      	ldr	r3, [r7, #12]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	3301      	adds	r3, #1
 800bf56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf5e:	8a3b      	ldrh	r3, [r7, #16]
 800bf60:	021b      	lsls	r3, r3, #8
 800bf62:	b21a      	sxth	r2, r3
 800bf64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	b21b      	sxth	r3, r3
 800bf6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf6e:	89fb      	ldrh	r3, [r7, #14]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	371c      	adds	r7, #28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf92:	2b40      	cmp	r3, #64	; 0x40
 800bf94:	d005      	beq.n	800bfa2 <USBD_StdDevReq+0x26>
 800bf96:	2b40      	cmp	r3, #64	; 0x40
 800bf98:	d857      	bhi.n	800c04a <USBD_StdDevReq+0xce>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00f      	beq.n	800bfbe <USBD_StdDevReq+0x42>
 800bf9e:	2b20      	cmp	r3, #32
 800bfa0:	d153      	bne.n	800c04a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	32ae      	adds	r2, #174	; 0xae
 800bfac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	4798      	blx	r3
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73fb      	strb	r3, [r7, #15]
      break;
 800bfbc:	e04a      	b.n	800c054 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	785b      	ldrb	r3, [r3, #1]
 800bfc2:	2b09      	cmp	r3, #9
 800bfc4:	d83b      	bhi.n	800c03e <USBD_StdDevReq+0xc2>
 800bfc6:	a201      	add	r2, pc, #4	; (adr r2, 800bfcc <USBD_StdDevReq+0x50>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800c021 	.word	0x0800c021
 800bfd0:	0800c035 	.word	0x0800c035
 800bfd4:	0800c03f 	.word	0x0800c03f
 800bfd8:	0800c02b 	.word	0x0800c02b
 800bfdc:	0800c03f 	.word	0x0800c03f
 800bfe0:	0800bfff 	.word	0x0800bfff
 800bfe4:	0800bff5 	.word	0x0800bff5
 800bfe8:	0800c03f 	.word	0x0800c03f
 800bfec:	0800c017 	.word	0x0800c017
 800bff0:	0800c009 	.word	0x0800c009
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fa3c 	bl	800c474 <USBD_GetDescriptor>
          break;
 800bffc:	e024      	b.n	800c048 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fbcb 	bl	800c79c <USBD_SetAddress>
          break;
 800c006:	e01f      	b.n	800c048 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fc0a 	bl	800c824 <USBD_SetConfig>
 800c010:	4603      	mov	r3, r0
 800c012:	73fb      	strb	r3, [r7, #15]
          break;
 800c014:	e018      	b.n	800c048 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fcad 	bl	800c978 <USBD_GetConfig>
          break;
 800c01e:	e013      	b.n	800c048 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fcde 	bl	800c9e4 <USBD_GetStatus>
          break;
 800c028:	e00e      	b.n	800c048 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fd0d 	bl	800ca4c <USBD_SetFeature>
          break;
 800c032:	e009      	b.n	800c048 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fd31 	bl	800ca9e <USBD_ClrFeature>
          break;
 800c03c:	e004      	b.n	800c048 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fd88 	bl	800cb56 <USBD_CtlError>
          break;
 800c046:	bf00      	nop
      }
      break;
 800c048:	e004      	b.n	800c054 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fd82 	bl	800cb56 <USBD_CtlError>
      break;
 800c052:	bf00      	nop
  }

  return ret;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop

0800c060 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c076:	2b40      	cmp	r3, #64	; 0x40
 800c078:	d005      	beq.n	800c086 <USBD_StdItfReq+0x26>
 800c07a:	2b40      	cmp	r3, #64	; 0x40
 800c07c:	d852      	bhi.n	800c124 <USBD_StdItfReq+0xc4>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <USBD_StdItfReq+0x26>
 800c082:	2b20      	cmp	r3, #32
 800c084:	d14e      	bne.n	800c124 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	3b01      	subs	r3, #1
 800c090:	2b02      	cmp	r3, #2
 800c092:	d840      	bhi.n	800c116 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	889b      	ldrh	r3, [r3, #4]
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d836      	bhi.n	800c10c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	889b      	ldrh	r3, [r3, #4]
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff fed9 	bl	800be5e <USBD_CoreFindIF>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	2bff      	cmp	r3, #255	; 0xff
 800c0b4:	d01d      	beq.n	800c0f2 <USBD_StdItfReq+0x92>
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d11a      	bne.n	800c0f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c0bc:	7bba      	ldrb	r2, [r7, #14]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	32ae      	adds	r2, #174	; 0xae
 800c0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00f      	beq.n	800c0ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c0cc:	7bba      	ldrb	r2, [r7, #14]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0d4:	7bba      	ldrb	r2, [r7, #14]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	32ae      	adds	r2, #174	; 0xae
 800c0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	4798      	blx	r3
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c0ea:	e004      	b.n	800c0f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c0f0:	e001      	b.n	800c0f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	88db      	ldrh	r3, [r3, #6]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d110      	bne.n	800c120 <USBD_StdItfReq+0xc0>
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10d      	bne.n	800c120 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fdf1 	bl	800ccec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c10a:	e009      	b.n	800c120 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fd21 	bl	800cb56 <USBD_CtlError>
          break;
 800c114:	e004      	b.n	800c120 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fd1c 	bl	800cb56 <USBD_CtlError>
          break;
 800c11e:	e000      	b.n	800c122 <USBD_StdItfReq+0xc2>
          break;
 800c120:	bf00      	nop
      }
      break;
 800c122:	e004      	b.n	800c12e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fd15 	bl	800cb56 <USBD_CtlError>
      break;
 800c12c:	bf00      	nop
  }

  return ret;
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	889b      	ldrh	r3, [r3, #4]
 800c14a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c154:	2b40      	cmp	r3, #64	; 0x40
 800c156:	d007      	beq.n	800c168 <USBD_StdEPReq+0x30>
 800c158:	2b40      	cmp	r3, #64	; 0x40
 800c15a:	f200 817f 	bhi.w	800c45c <USBD_StdEPReq+0x324>
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d02a      	beq.n	800c1b8 <USBD_StdEPReq+0x80>
 800c162:	2b20      	cmp	r3, #32
 800c164:	f040 817a 	bne.w	800c45c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff fe83 	bl	800be78 <USBD_CoreFindEP>
 800c172:	4603      	mov	r3, r0
 800c174:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c176:	7b7b      	ldrb	r3, [r7, #13]
 800c178:	2bff      	cmp	r3, #255	; 0xff
 800c17a:	f000 8174 	beq.w	800c466 <USBD_StdEPReq+0x32e>
 800c17e:	7b7b      	ldrb	r3, [r7, #13]
 800c180:	2b00      	cmp	r3, #0
 800c182:	f040 8170 	bne.w	800c466 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c186:	7b7a      	ldrb	r2, [r7, #13]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c18e:	7b7a      	ldrb	r2, [r7, #13]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	32ae      	adds	r2, #174	; 0xae
 800c194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 8163 	beq.w	800c466 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c1a0:	7b7a      	ldrb	r2, [r7, #13]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	32ae      	adds	r2, #174	; 0xae
 800c1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	4798      	blx	r3
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c1b6:	e156      	b.n	800c466 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d008      	beq.n	800c1d2 <USBD_StdEPReq+0x9a>
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	f300 8145 	bgt.w	800c450 <USBD_StdEPReq+0x318>
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 809b 	beq.w	800c302 <USBD_StdEPReq+0x1ca>
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d03c      	beq.n	800c24a <USBD_StdEPReq+0x112>
 800c1d0:	e13e      	b.n	800c450 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d002      	beq.n	800c1e4 <USBD_StdEPReq+0xac>
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d016      	beq.n	800c210 <USBD_StdEPReq+0xd8>
 800c1e2:	e02c      	b.n	800c23e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00d      	beq.n	800c206 <USBD_StdEPReq+0xce>
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	2b80      	cmp	r3, #128	; 0x80
 800c1ee:	d00a      	beq.n	800c206 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f003 ff9b 	bl	8010130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1fa:	2180      	movs	r1, #128	; 0x80
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f003 ff97 	bl	8010130 <USBD_LL_StallEP>
 800c202:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c204:	e020      	b.n	800c248 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fca4 	bl	800cb56 <USBD_CtlError>
              break;
 800c20e:	e01b      	b.n	800c248 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	885b      	ldrh	r3, [r3, #2]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10e      	bne.n	800c236 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00b      	beq.n	800c236 <USBD_StdEPReq+0xfe>
 800c21e:	7bbb      	ldrb	r3, [r7, #14]
 800c220:	2b80      	cmp	r3, #128	; 0x80
 800c222:	d008      	beq.n	800c236 <USBD_StdEPReq+0xfe>
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	88db      	ldrh	r3, [r3, #6]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d104      	bne.n	800c236 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c22c:	7bbb      	ldrb	r3, [r7, #14]
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f003 ff7d 	bl	8010130 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fd58 	bl	800ccec <USBD_CtlSendStatus>

              break;
 800c23c:	e004      	b.n	800c248 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fc88 	bl	800cb56 <USBD_CtlError>
              break;
 800c246:	bf00      	nop
          }
          break;
 800c248:	e107      	b.n	800c45a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b02      	cmp	r3, #2
 800c254:	d002      	beq.n	800c25c <USBD_StdEPReq+0x124>
 800c256:	2b03      	cmp	r3, #3
 800c258:	d016      	beq.n	800c288 <USBD_StdEPReq+0x150>
 800c25a:	e04b      	b.n	800c2f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00d      	beq.n	800c27e <USBD_StdEPReq+0x146>
 800c262:	7bbb      	ldrb	r3, [r7, #14]
 800c264:	2b80      	cmp	r3, #128	; 0x80
 800c266:	d00a      	beq.n	800c27e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f003 ff5f 	bl	8010130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c272:	2180      	movs	r1, #128	; 0x80
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f003 ff5b 	bl	8010130 <USBD_LL_StallEP>
 800c27a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c27c:	e040      	b.n	800c300 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fc68 	bl	800cb56 <USBD_CtlError>
              break;
 800c286:	e03b      	b.n	800c300 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	885b      	ldrh	r3, [r3, #2]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d136      	bne.n	800c2fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c296:	2b00      	cmp	r3, #0
 800c298:	d004      	beq.n	800c2a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f003 ff65 	bl	801016e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 fd21 	bl	800ccec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff fde2 	bl	800be78 <USBD_CoreFindEP>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2b8:	7b7b      	ldrb	r3, [r7, #13]
 800c2ba:	2bff      	cmp	r3, #255	; 0xff
 800c2bc:	d01f      	beq.n	800c2fe <USBD_StdEPReq+0x1c6>
 800c2be:	7b7b      	ldrb	r3, [r7, #13]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d11c      	bne.n	800c2fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c2c4:	7b7a      	ldrb	r2, [r7, #13]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c2cc:	7b7a      	ldrb	r2, [r7, #13]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	32ae      	adds	r2, #174	; 0xae
 800c2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d010      	beq.n	800c2fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2dc:	7b7a      	ldrb	r2, [r7, #13]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	32ae      	adds	r2, #174	; 0xae
 800c2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	4798      	blx	r3
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c2f2:	e004      	b.n	800c2fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fc2d 	bl	800cb56 <USBD_CtlError>
              break;
 800c2fc:	e000      	b.n	800c300 <USBD_StdEPReq+0x1c8>
              break;
 800c2fe:	bf00      	nop
          }
          break;
 800c300:	e0ab      	b.n	800c45a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d002      	beq.n	800c314 <USBD_StdEPReq+0x1dc>
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d032      	beq.n	800c378 <USBD_StdEPReq+0x240>
 800c312:	e097      	b.n	800c444 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d007      	beq.n	800c32a <USBD_StdEPReq+0x1f2>
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
 800c31c:	2b80      	cmp	r3, #128	; 0x80
 800c31e:	d004      	beq.n	800c32a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fc17 	bl	800cb56 <USBD_CtlError>
                break;
 800c328:	e091      	b.n	800c44e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c32a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	da0b      	bge.n	800c34a <USBD_StdEPReq+0x212>
 800c332:	7bbb      	ldrb	r3, [r7, #14]
 800c334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c338:	4613      	mov	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	3310      	adds	r3, #16
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	4413      	add	r3, r2
 800c346:	3304      	adds	r3, #4
 800c348:	e00b      	b.n	800c362 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
 800c34c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c350:	4613      	mov	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	4413      	add	r3, r2
 800c360:	3304      	adds	r3, #4
 800c362:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	2200      	movs	r2, #0
 800c368:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2202      	movs	r2, #2
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fc61 	bl	800cc38 <USBD_CtlSendData>
              break;
 800c376:	e06a      	b.n	800c44e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	da11      	bge.n	800c3a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	f003 020f 	and.w	r2, r3, #15
 800c386:	6879      	ldr	r1, [r7, #4]
 800c388:	4613      	mov	r3, r2
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4413      	add	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	440b      	add	r3, r1
 800c392:	3324      	adds	r3, #36	; 0x24
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d117      	bne.n	800c3ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fbda 	bl	800cb56 <USBD_CtlError>
                  break;
 800c3a2:	e054      	b.n	800c44e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c3a4:	7bbb      	ldrb	r3, [r7, #14]
 800c3a6:	f003 020f 	and.w	r2, r3, #15
 800c3aa:	6879      	ldr	r1, [r7, #4]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4413      	add	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	440b      	add	r3, r1
 800c3b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d104      	bne.n	800c3ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fbc7 	bl	800cb56 <USBD_CtlError>
                  break;
 800c3c8:	e041      	b.n	800c44e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	da0b      	bge.n	800c3ea <USBD_StdEPReq+0x2b2>
 800c3d2:	7bbb      	ldrb	r3, [r7, #14]
 800c3d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3d8:	4613      	mov	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	3310      	adds	r3, #16
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	e00b      	b.n	800c402 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3ea:	7bbb      	ldrb	r3, [r7, #14]
 800c3ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	4413      	add	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	4413      	add	r3, r2
 800c400:	3304      	adds	r3, #4
 800c402:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c404:	7bbb      	ldrb	r3, [r7, #14]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d002      	beq.n	800c410 <USBD_StdEPReq+0x2d8>
 800c40a:	7bbb      	ldrb	r3, [r7, #14]
 800c40c:	2b80      	cmp	r3, #128	; 0x80
 800c40e:	d103      	bne.n	800c418 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]
 800c416:	e00e      	b.n	800c436 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f003 fec5 	bl	80101ac <USBD_LL_IsStallEP>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d003      	beq.n	800c430 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2201      	movs	r2, #1
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	e002      	b.n	800c436 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2202      	movs	r2, #2
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fbfb 	bl	800cc38 <USBD_CtlSendData>
              break;
 800c442:	e004      	b.n	800c44e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fb85 	bl	800cb56 <USBD_CtlError>
              break;
 800c44c:	bf00      	nop
          }
          break;
 800c44e:	e004      	b.n	800c45a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c450:	6839      	ldr	r1, [r7, #0]
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 fb7f 	bl	800cb56 <USBD_CtlError>
          break;
 800c458:	bf00      	nop
      }
      break;
 800c45a:	e005      	b.n	800c468 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 fb79 	bl	800cb56 <USBD_CtlError>
      break;
 800c464:	e000      	b.n	800c468 <USBD_StdEPReq+0x330>
      break;
 800c466:	bf00      	nop
  }

  return ret;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
	...

0800c474 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c47e:	2300      	movs	r3, #0
 800c480:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c482:	2300      	movs	r3, #0
 800c484:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c486:	2300      	movs	r3, #0
 800c488:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	885b      	ldrh	r3, [r3, #2]
 800c48e:	0a1b      	lsrs	r3, r3, #8
 800c490:	b29b      	uxth	r3, r3
 800c492:	3b01      	subs	r3, #1
 800c494:	2b0e      	cmp	r3, #14
 800c496:	f200 8152 	bhi.w	800c73e <USBD_GetDescriptor+0x2ca>
 800c49a:	a201      	add	r2, pc, #4	; (adr r2, 800c4a0 <USBD_GetDescriptor+0x2c>)
 800c49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a0:	0800c511 	.word	0x0800c511
 800c4a4:	0800c529 	.word	0x0800c529
 800c4a8:	0800c569 	.word	0x0800c569
 800c4ac:	0800c73f 	.word	0x0800c73f
 800c4b0:	0800c73f 	.word	0x0800c73f
 800c4b4:	0800c6df 	.word	0x0800c6df
 800c4b8:	0800c70b 	.word	0x0800c70b
 800c4bc:	0800c73f 	.word	0x0800c73f
 800c4c0:	0800c73f 	.word	0x0800c73f
 800c4c4:	0800c73f 	.word	0x0800c73f
 800c4c8:	0800c73f 	.word	0x0800c73f
 800c4cc:	0800c73f 	.word	0x0800c73f
 800c4d0:	0800c73f 	.word	0x0800c73f
 800c4d4:	0800c73f 	.word	0x0800c73f
 800c4d8:	0800c4dd 	.word	0x0800c4dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e2:	69db      	ldr	r3, [r3, #28]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00b      	beq.n	800c500 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ee:	69db      	ldr	r3, [r3, #28]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7c12      	ldrb	r2, [r2, #16]
 800c4f4:	f107 0108 	add.w	r1, r7, #8
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4fe:	e126      	b.n	800c74e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fb27 	bl	800cb56 <USBD_CtlError>
        err++;
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	3301      	adds	r3, #1
 800c50c:	72fb      	strb	r3, [r7, #11]
      break;
 800c50e:	e11e      	b.n	800c74e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	7c12      	ldrb	r2, [r2, #16]
 800c51c:	f107 0108 	add.w	r1, r7, #8
 800c520:	4610      	mov	r0, r2
 800c522:	4798      	blx	r3
 800c524:	60f8      	str	r0, [r7, #12]
      break;
 800c526:	e112      	b.n	800c74e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7c1b      	ldrb	r3, [r3, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10d      	bne.n	800c54c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c538:	f107 0208 	add.w	r2, r7, #8
 800c53c:	4610      	mov	r0, r2
 800c53e:	4798      	blx	r3
 800c540:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3301      	adds	r3, #1
 800c546:	2202      	movs	r2, #2
 800c548:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c54a:	e100      	b.n	800c74e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c554:	f107 0208 	add.w	r2, r7, #8
 800c558:	4610      	mov	r0, r2
 800c55a:	4798      	blx	r3
 800c55c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	3301      	adds	r3, #1
 800c562:	2202      	movs	r2, #2
 800c564:	701a      	strb	r2, [r3, #0]
      break;
 800c566:	e0f2      	b.n	800c74e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	885b      	ldrh	r3, [r3, #2]
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	2b05      	cmp	r3, #5
 800c570:	f200 80ac 	bhi.w	800c6cc <USBD_GetDescriptor+0x258>
 800c574:	a201      	add	r2, pc, #4	; (adr r2, 800c57c <USBD_GetDescriptor+0x108>)
 800c576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57a:	bf00      	nop
 800c57c:	0800c595 	.word	0x0800c595
 800c580:	0800c5c9 	.word	0x0800c5c9
 800c584:	0800c5fd 	.word	0x0800c5fd
 800c588:	0800c631 	.word	0x0800c631
 800c58c:	0800c665 	.word	0x0800c665
 800c590:	0800c699 	.word	0x0800c699
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00b      	beq.n	800c5b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	7c12      	ldrb	r2, [r2, #16]
 800c5ac:	f107 0108 	add.w	r1, r7, #8
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	4798      	blx	r3
 800c5b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5b6:	e091      	b.n	800c6dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 facb 	bl	800cb56 <USBD_CtlError>
            err++;
 800c5c0:	7afb      	ldrb	r3, [r7, #11]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c5c6:	e089      	b.n	800c6dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00b      	beq.n	800c5ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	7c12      	ldrb	r2, [r2, #16]
 800c5e0:	f107 0108 	add.w	r1, r7, #8
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	4798      	blx	r3
 800c5e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ea:	e077      	b.n	800c6dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fab1 	bl	800cb56 <USBD_CtlError>
            err++;
 800c5f4:	7afb      	ldrb	r3, [r7, #11]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5fa:	e06f      	b.n	800c6dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00b      	beq.n	800c620 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	7c12      	ldrb	r2, [r2, #16]
 800c614:	f107 0108 	add.w	r1, r7, #8
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
 800c61c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c61e:	e05d      	b.n	800c6dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fa97 	bl	800cb56 <USBD_CtlError>
            err++;
 800c628:	7afb      	ldrb	r3, [r7, #11]
 800c62a:	3301      	adds	r3, #1
 800c62c:	72fb      	strb	r3, [r7, #11]
          break;
 800c62e:	e055      	b.n	800c6dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00b      	beq.n	800c654 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	7c12      	ldrb	r2, [r2, #16]
 800c648:	f107 0108 	add.w	r1, r7, #8
 800c64c:	4610      	mov	r0, r2
 800c64e:	4798      	blx	r3
 800c650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c652:	e043      	b.n	800c6dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fa7d 	bl	800cb56 <USBD_CtlError>
            err++;
 800c65c:	7afb      	ldrb	r3, [r7, #11]
 800c65e:	3301      	adds	r3, #1
 800c660:	72fb      	strb	r3, [r7, #11]
          break;
 800c662:	e03b      	b.n	800c6dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c66a:	695b      	ldr	r3, [r3, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00b      	beq.n	800c688 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	7c12      	ldrb	r2, [r2, #16]
 800c67c:	f107 0108 	add.w	r1, r7, #8
 800c680:	4610      	mov	r0, r2
 800c682:	4798      	blx	r3
 800c684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c686:	e029      	b.n	800c6dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fa63 	bl	800cb56 <USBD_CtlError>
            err++;
 800c690:	7afb      	ldrb	r3, [r7, #11]
 800c692:	3301      	adds	r3, #1
 800c694:	72fb      	strb	r3, [r7, #11]
          break;
 800c696:	e021      	b.n	800c6dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00b      	beq.n	800c6bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	7c12      	ldrb	r2, [r2, #16]
 800c6b0:	f107 0108 	add.w	r1, r7, #8
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4798      	blx	r3
 800c6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ba:	e00f      	b.n	800c6dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 fa49 	bl	800cb56 <USBD_CtlError>
            err++;
 800c6c4:	7afb      	ldrb	r3, [r7, #11]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ca:	e007      	b.n	800c6dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fa41 	bl	800cb56 <USBD_CtlError>
          err++;
 800c6d4:	7afb      	ldrb	r3, [r7, #11]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c6da:	bf00      	nop
      }
      break;
 800c6dc:	e037      	b.n	800c74e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	7c1b      	ldrb	r3, [r3, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d109      	bne.n	800c6fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ee:	f107 0208 	add.w	r2, r7, #8
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	4798      	blx	r3
 800c6f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6f8:	e029      	b.n	800c74e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fa2a 	bl	800cb56 <USBD_CtlError>
        err++;
 800c702:	7afb      	ldrb	r3, [r7, #11]
 800c704:	3301      	adds	r3, #1
 800c706:	72fb      	strb	r3, [r7, #11]
      break;
 800c708:	e021      	b.n	800c74e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	7c1b      	ldrb	r3, [r3, #16]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10d      	bne.n	800c72e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71a:	f107 0208 	add.w	r2, r7, #8
 800c71e:	4610      	mov	r0, r2
 800c720:	4798      	blx	r3
 800c722:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	3301      	adds	r3, #1
 800c728:	2207      	movs	r2, #7
 800c72a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c72c:	e00f      	b.n	800c74e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c72e:	6839      	ldr	r1, [r7, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fa10 	bl	800cb56 <USBD_CtlError>
        err++;
 800c736:	7afb      	ldrb	r3, [r7, #11]
 800c738:	3301      	adds	r3, #1
 800c73a:	72fb      	strb	r3, [r7, #11]
      break;
 800c73c:	e007      	b.n	800c74e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fa08 	bl	800cb56 <USBD_CtlError>
      err++;
 800c746:	7afb      	ldrb	r3, [r7, #11]
 800c748:	3301      	adds	r3, #1
 800c74a:	72fb      	strb	r3, [r7, #11]
      break;
 800c74c:	bf00      	nop
  }

  if (err != 0U)
 800c74e:	7afb      	ldrb	r3, [r7, #11]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d11e      	bne.n	800c792 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	88db      	ldrh	r3, [r3, #6]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d016      	beq.n	800c78a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c75c:	893b      	ldrh	r3, [r7, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00e      	beq.n	800c780 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	88da      	ldrh	r2, [r3, #6]
 800c766:	893b      	ldrh	r3, [r7, #8]
 800c768:	4293      	cmp	r3, r2
 800c76a:	bf28      	it	cs
 800c76c:	4613      	movcs	r3, r2
 800c76e:	b29b      	uxth	r3, r3
 800c770:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c772:	893b      	ldrh	r3, [r7, #8]
 800c774:	461a      	mov	r2, r3
 800c776:	68f9      	ldr	r1, [r7, #12]
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fa5d 	bl	800cc38 <USBD_CtlSendData>
 800c77e:	e009      	b.n	800c794 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f9e7 	bl	800cb56 <USBD_CtlError>
 800c788:	e004      	b.n	800c794 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 faae 	bl	800ccec <USBD_CtlSendStatus>
 800c790:	e000      	b.n	800c794 <USBD_GetDescriptor+0x320>
    return;
 800c792:	bf00      	nop
  }
}
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop

0800c79c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	889b      	ldrh	r3, [r3, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d131      	bne.n	800c812 <USBD_SetAddress+0x76>
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	88db      	ldrh	r3, [r3, #6]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d12d      	bne.n	800c812 <USBD_SetAddress+0x76>
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	885b      	ldrh	r3, [r3, #2]
 800c7ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c7bc:	d829      	bhi.n	800c812 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	885b      	ldrh	r3, [r3, #2]
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d104      	bne.n	800c7e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f9bc 	bl	800cb56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7de:	e01d      	b.n	800c81c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	7bfa      	ldrb	r2, [r7, #15]
 800c7e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f003 fd09 	bl	8010204 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fa7a 	bl	800ccec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d004      	beq.n	800c808 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2202      	movs	r2, #2
 800c802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c806:	e009      	b.n	800c81c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c810:	e004      	b.n	800c81c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f99e 	bl	800cb56 <USBD_CtlError>
  }
}
 800c81a:	bf00      	nop
 800c81c:	bf00      	nop
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	885b      	ldrh	r3, [r3, #2]
 800c836:	b2da      	uxtb	r2, r3
 800c838:	4b4e      	ldr	r3, [pc, #312]	; (800c974 <USBD_SetConfig+0x150>)
 800c83a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c83c:	4b4d      	ldr	r3, [pc, #308]	; (800c974 <USBD_SetConfig+0x150>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d905      	bls.n	800c850 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f985 	bl	800cb56 <USBD_CtlError>
    return USBD_FAIL;
 800c84c:	2303      	movs	r3, #3
 800c84e:	e08c      	b.n	800c96a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d002      	beq.n	800c862 <USBD_SetConfig+0x3e>
 800c85c:	2b03      	cmp	r3, #3
 800c85e:	d029      	beq.n	800c8b4 <USBD_SetConfig+0x90>
 800c860:	e075      	b.n	800c94e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c862:	4b44      	ldr	r3, [pc, #272]	; (800c974 <USBD_SetConfig+0x150>)
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d020      	beq.n	800c8ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c86a:	4b42      	ldr	r3, [pc, #264]	; (800c974 <USBD_SetConfig+0x150>)
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	461a      	mov	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c874:	4b3f      	ldr	r3, [pc, #252]	; (800c974 <USBD_SetConfig+0x150>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	4619      	mov	r1, r3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7fe ffbd 	bl	800b7fa <USBD_SetClassConfig>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d008      	beq.n	800c89c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 f962 	bl	800cb56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2202      	movs	r2, #2
 800c896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c89a:	e065      	b.n	800c968 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fa25 	bl	800ccec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2203      	movs	r2, #3
 800c8a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c8aa:	e05d      	b.n	800c968 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fa1d 	bl	800ccec <USBD_CtlSendStatus>
      break;
 800c8b2:	e059      	b.n	800c968 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c8b4:	4b2f      	ldr	r3, [pc, #188]	; (800c974 <USBD_SetConfig+0x150>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d112      	bne.n	800c8e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2202      	movs	r2, #2
 800c8c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c8c4:	4b2b      	ldr	r3, [pc, #172]	; (800c974 <USBD_SetConfig+0x150>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8ce:	4b29      	ldr	r3, [pc, #164]	; (800c974 <USBD_SetConfig+0x150>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7fe ffac 	bl	800b832 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fa06 	bl	800ccec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8e0:	e042      	b.n	800c968 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c8e2:	4b24      	ldr	r3, [pc, #144]	; (800c974 <USBD_SetConfig+0x150>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d02a      	beq.n	800c946 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7fe ff9a 	bl	800b832 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c8fe:	4b1d      	ldr	r3, [pc, #116]	; (800c974 <USBD_SetConfig+0x150>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c908:	4b1a      	ldr	r3, [pc, #104]	; (800c974 <USBD_SetConfig+0x150>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	4619      	mov	r1, r3
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f7fe ff73 	bl	800b7fa <USBD_SetClassConfig>
 800c914:	4603      	mov	r3, r0
 800c916:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00f      	beq.n	800c93e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f918 	bl	800cb56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	4619      	mov	r1, r3
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f7fe ff7f 	bl	800b832 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2202      	movs	r2, #2
 800c938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c93c:	e014      	b.n	800c968 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f9d4 	bl	800ccec <USBD_CtlSendStatus>
      break;
 800c944:	e010      	b.n	800c968 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f9d0 	bl	800ccec <USBD_CtlSendStatus>
      break;
 800c94c:	e00c      	b.n	800c968 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f900 	bl	800cb56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c956:	4b07      	ldr	r3, [pc, #28]	; (800c974 <USBD_SetConfig+0x150>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	4619      	mov	r1, r3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7fe ff68 	bl	800b832 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c962:	2303      	movs	r3, #3
 800c964:	73fb      	strb	r3, [r7, #15]
      break;
 800c966:	bf00      	nop
  }

  return ret;
 800c968:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	2000bed0 	.word	0x2000bed0

0800c978 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	88db      	ldrh	r3, [r3, #6]
 800c986:	2b01      	cmp	r3, #1
 800c988:	d004      	beq.n	800c994 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f8e2 	bl	800cb56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c992:	e023      	b.n	800c9dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	dc02      	bgt.n	800c9a6 <USBD_GetConfig+0x2e>
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	dc03      	bgt.n	800c9ac <USBD_GetConfig+0x34>
 800c9a4:	e015      	b.n	800c9d2 <USBD_GetConfig+0x5a>
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	d00b      	beq.n	800c9c2 <USBD_GetConfig+0x4a>
 800c9aa:	e012      	b.n	800c9d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f93c 	bl	800cc38 <USBD_CtlSendData>
        break;
 800c9c0:	e00c      	b.n	800c9dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f934 	bl	800cc38 <USBD_CtlSendData>
        break;
 800c9d0:	e004      	b.n	800c9dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f8be 	bl	800cb56 <USBD_CtlError>
        break;
 800c9da:	bf00      	nop
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d81e      	bhi.n	800ca3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	88db      	ldrh	r3, [r3, #6]
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d004      	beq.n	800ca0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f8a5 	bl	800cb56 <USBD_CtlError>
        break;
 800ca0c:	e01a      	b.n	800ca44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d005      	beq.n	800ca2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	f043 0202 	orr.w	r2, r3, #2
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	330c      	adds	r3, #12
 800ca2e:	2202      	movs	r2, #2
 800ca30:	4619      	mov	r1, r3
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f900 	bl	800cc38 <USBD_CtlSendData>
      break;
 800ca38:	e004      	b.n	800ca44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f88a 	bl	800cb56 <USBD_CtlError>
      break;
 800ca42:	bf00      	nop
  }
}
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	885b      	ldrh	r3, [r3, #2]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d107      	bne.n	800ca6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f940 	bl	800ccec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ca6c:	e013      	b.n	800ca96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	885b      	ldrh	r3, [r3, #2]
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d10b      	bne.n	800ca8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	889b      	ldrh	r3, [r3, #4]
 800ca7a:	0a1b      	lsrs	r3, r3, #8
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f930 	bl	800ccec <USBD_CtlSendStatus>
}
 800ca8c:	e003      	b.n	800ca96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f860 	bl	800cb56 <USBD_CtlError>
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b082      	sub	sp, #8
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	3b01      	subs	r3, #1
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	d80b      	bhi.n	800cace <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	885b      	ldrh	r3, [r3, #2]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d10c      	bne.n	800cad8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 f910 	bl	800ccec <USBD_CtlSendStatus>
      }
      break;
 800cacc:	e004      	b.n	800cad8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 f840 	bl	800cb56 <USBD_CtlError>
      break;
 800cad6:	e000      	b.n	800cada <USBD_ClrFeature+0x3c>
      break;
 800cad8:	bf00      	nop
  }
}
 800cada:	bf00      	nop
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	781a      	ldrb	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3301      	adds	r3, #1
 800cafc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	781a      	ldrb	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f7ff fa17 	bl	800bf40 <SWAPBYTE>
 800cb12:	4603      	mov	r3, r0
 800cb14:	461a      	mov	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	3301      	adds	r3, #1
 800cb24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7ff fa0a 	bl	800bf40 <SWAPBYTE>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	461a      	mov	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	3301      	adds	r3, #1
 800cb38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f7ff f9fd 	bl	800bf40 <SWAPBYTE>
 800cb46:	4603      	mov	r3, r0
 800cb48:	461a      	mov	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	80da      	strh	r2, [r3, #6]
}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b082      	sub	sp, #8
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb60:	2180      	movs	r1, #128	; 0x80
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f003 fae4 	bl	8010130 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb68:	2100      	movs	r1, #0
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f003 fae0 	bl	8010130 <USBD_LL_StallEP>
}
 800cb70:	bf00      	nop
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d036      	beq.n	800cbfc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cb92:	6938      	ldr	r0, [r7, #16]
 800cb94:	f000 f836 	bl	800cc04 <USBD_GetLen>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	4413      	add	r3, r2
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	7812      	ldrb	r2, [r2, #0]
 800cbb0:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	2203      	movs	r2, #3
 800cbc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbc2:	7dfb      	ldrb	r3, [r7, #23]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cbc8:	e013      	b.n	800cbf2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cbca:	7dfb      	ldrb	r3, [r7, #23]
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	4413      	add	r3, r2
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	7812      	ldrb	r2, [r2, #0]
 800cbd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	613b      	str	r3, [r7, #16]
    idx++;
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cbe2:	7dfb      	ldrb	r3, [r7, #23]
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	2200      	movs	r2, #0
 800cbea:	701a      	strb	r2, [r3, #0]
    idx++;
 800cbec:	7dfb      	ldrb	r3, [r7, #23]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1e7      	bne.n	800cbca <USBD_GetString+0x52>
 800cbfa:	e000      	b.n	800cbfe <USBD_GetString+0x86>
    return;
 800cbfc:	bf00      	nop
  }
}
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc14:	e005      	b.n	800cc22 <USBD_GetLen+0x1e>
  {
    len++;
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1f5      	bne.n	800cc16 <USBD_GetLen+0x12>
  }

  return len;
 800cc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2202      	movs	r2, #2
 800cc48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f003 faef 	bl	8010242 <USBD_LL_Transmit>

  return USBD_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	60f8      	str	r0, [r7, #12]
 800cc76:	60b9      	str	r1, [r7, #8]
 800cc78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	2100      	movs	r1, #0
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f003 fade 	bl	8010242 <USBD_LL_Transmit>

  return USBD_OK;
 800cc86:	2300      	movs	r3, #0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2203      	movs	r2, #3
 800cca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	2100      	movs	r1, #0
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f003 fae2 	bl	8010284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b084      	sub	sp, #16
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	2100      	movs	r1, #0
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f003 fad1 	bl	8010284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2204      	movs	r2, #4
 800ccf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2100      	movs	r1, #0
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f003 fa9d 	bl	8010242 <USBD_LL_Transmit>

  return USBD_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b082      	sub	sp, #8
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2205      	movs	r2, #5
 800cd1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd22:	2300      	movs	r3, #0
 800cd24:	2200      	movs	r2, #0
 800cd26:	2100      	movs	r1, #0
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f003 faab 	bl	8010284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cd38:	b480      	push	{r7}
 800cd3a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cd3c:	bf00      	nop
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr
	...

0800cd48 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd4e:	f3ef 8305 	mrs	r3, IPSR
 800cd52:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10f      	bne.n	800cd7a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd5a:	f3ef 8310 	mrs	r3, PRIMASK
 800cd5e:	607b      	str	r3, [r7, #4]
  return(result);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d105      	bne.n	800cd72 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd66:	f3ef 8311 	mrs	r3, BASEPRI
 800cd6a:	603b      	str	r3, [r7, #0]
  return(result);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d007      	beq.n	800cd82 <osKernelInitialize+0x3a>
 800cd72:	4b0e      	ldr	r3, [pc, #56]	; (800cdac <osKernelInitialize+0x64>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d103      	bne.n	800cd82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cd7a:	f06f 0305 	mvn.w	r3, #5
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	e00c      	b.n	800cd9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cd82:	4b0a      	ldr	r3, [pc, #40]	; (800cdac <osKernelInitialize+0x64>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd8a:	4b08      	ldr	r3, [pc, #32]	; (800cdac <osKernelInitialize+0x64>)
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	e002      	b.n	800cd9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cd96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	2000bed4 	.word	0x2000bed4

0800cdb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdb6:	f3ef 8305 	mrs	r3, IPSR
 800cdba:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10f      	bne.n	800cde2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdc2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdc6:	607b      	str	r3, [r7, #4]
  return(result);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d105      	bne.n	800cdda <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdce:	f3ef 8311 	mrs	r3, BASEPRI
 800cdd2:	603b      	str	r3, [r7, #0]
  return(result);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d007      	beq.n	800cdea <osKernelStart+0x3a>
 800cdda:	4b0f      	ldr	r3, [pc, #60]	; (800ce18 <osKernelStart+0x68>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d103      	bne.n	800cdea <osKernelStart+0x3a>
    stat = osErrorISR;
 800cde2:	f06f 0305 	mvn.w	r3, #5
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	e010      	b.n	800ce0c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cdea:	4b0b      	ldr	r3, [pc, #44]	; (800ce18 <osKernelStart+0x68>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d109      	bne.n	800ce06 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cdf2:	f7ff ffa1 	bl	800cd38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cdf6:	4b08      	ldr	r3, [pc, #32]	; (800ce18 <osKernelStart+0x68>)
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cdfc:	f001 f8b4 	bl	800df68 <vTaskStartScheduler>
      stat = osOK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	e002      	b.n	800ce0c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ce06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	2000bed4 	.word	0x2000bed4

0800ce1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b090      	sub	sp, #64	; 0x40
 800ce20:	af04      	add	r7, sp, #16
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce2c:	f3ef 8305 	mrs	r3, IPSR
 800ce30:	61fb      	str	r3, [r7, #28]
  return(result);
 800ce32:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f040 808f 	bne.w	800cf58 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce3e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d105      	bne.n	800ce52 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce46:	f3ef 8311 	mrs	r3, BASEPRI
 800ce4a:	617b      	str	r3, [r7, #20]
  return(result);
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d003      	beq.n	800ce5a <osThreadNew+0x3e>
 800ce52:	4b44      	ldr	r3, [pc, #272]	; (800cf64 <osThreadNew+0x148>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d07e      	beq.n	800cf58 <osThreadNew+0x13c>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d07b      	beq.n	800cf58 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ce60:	2380      	movs	r3, #128	; 0x80
 800ce62:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ce64:	2318      	movs	r3, #24
 800ce66:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ce6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d045      	beq.n	800cf04 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <osThreadNew+0x6a>
        name = attr->name;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d002      	beq.n	800ce94 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d008      	beq.n	800ceac <osThreadNew+0x90>
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	2b38      	cmp	r3, #56	; 0x38
 800ce9e:	d805      	bhi.n	800ceac <osThreadNew+0x90>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d001      	beq.n	800ceb0 <osThreadNew+0x94>
        return (NULL);
 800ceac:	2300      	movs	r3, #0
 800ceae:	e054      	b.n	800cf5a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d003      	beq.n	800cec0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	089b      	lsrs	r3, r3, #2
 800cebe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00e      	beq.n	800cee6 <osThreadNew+0xca>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	2b5b      	cmp	r3, #91	; 0x5b
 800cece:	d90a      	bls.n	800cee6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d006      	beq.n	800cee6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	695b      	ldr	r3, [r3, #20]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <osThreadNew+0xca>
        mem = 1;
 800cee0:	2301      	movs	r3, #1
 800cee2:	623b      	str	r3, [r7, #32]
 800cee4:	e010      	b.n	800cf08 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d10c      	bne.n	800cf08 <osThreadNew+0xec>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d108      	bne.n	800cf08 <osThreadNew+0xec>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d104      	bne.n	800cf08 <osThreadNew+0xec>
          mem = 0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	623b      	str	r3, [r7, #32]
 800cf02:	e001      	b.n	800cf08 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cf04:	2300      	movs	r3, #0
 800cf06:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d110      	bne.n	800cf30 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cf16:	9202      	str	r2, [sp, #8]
 800cf18:	9301      	str	r3, [sp, #4]
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f000 fe3f 	bl	800dba8 <xTaskCreateStatic>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	613b      	str	r3, [r7, #16]
 800cf2e:	e013      	b.n	800cf58 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d110      	bne.n	800cf58 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	f107 0310 	add.w	r3, r7, #16
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 fe90 	bl	800dc6e <xTaskCreate>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d001      	beq.n	800cf58 <osThreadNew+0x13c>
          hTask = NULL;
 800cf54:	2300      	movs	r3, #0
 800cf56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cf58:	693b      	ldr	r3, [r7, #16]
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3730      	adds	r7, #48	; 0x30
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	2000bed4 	.word	0x2000bed4

0800cf68 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf70:	f3ef 8305 	mrs	r3, IPSR
 800cf74:	613b      	str	r3, [r7, #16]
  return(result);
 800cf76:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10f      	bne.n	800cf9c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf7c:	f3ef 8310 	mrs	r3, PRIMASK
 800cf80:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d105      	bne.n	800cf94 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf88:	f3ef 8311 	mrs	r3, BASEPRI
 800cf8c:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d007      	beq.n	800cfa4 <osDelay+0x3c>
 800cf94:	4b0a      	ldr	r3, [pc, #40]	; (800cfc0 <osDelay+0x58>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d103      	bne.n	800cfa4 <osDelay+0x3c>
    stat = osErrorISR;
 800cf9c:	f06f 0305 	mvn.w	r3, #5
 800cfa0:	617b      	str	r3, [r7, #20]
 800cfa2:	e007      	b.n	800cfb4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d002      	beq.n	800cfb4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 ffa4 	bl	800defc <vTaskDelay>
    }
  }

  return (stat);
 800cfb4:	697b      	ldr	r3, [r7, #20]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3718      	adds	r7, #24
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	2000bed4 	.word	0x2000bed4

0800cfc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	4a07      	ldr	r2, [pc, #28]	; (800cff0 <vApplicationGetIdleTaskMemory+0x2c>)
 800cfd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	4a06      	ldr	r2, [pc, #24]	; (800cff4 <vApplicationGetIdleTaskMemory+0x30>)
 800cfda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2280      	movs	r2, #128	; 0x80
 800cfe0:	601a      	str	r2, [r3, #0]
}
 800cfe2:	bf00      	nop
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	2000bed8 	.word	0x2000bed8
 800cff4:	2000bf34 	.word	0x2000bf34

0800cff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4a07      	ldr	r2, [pc, #28]	; (800d024 <vApplicationGetTimerTaskMemory+0x2c>)
 800d008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	4a06      	ldr	r2, [pc, #24]	; (800d028 <vApplicationGetTimerTaskMemory+0x30>)
 800d00e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d016:	601a      	str	r2, [r3, #0]
}
 800d018:	bf00      	nop
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	2000c134 	.word	0x2000c134
 800d028:	2000c190 	.word	0x2000c190

0800d02c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f103 0208 	add.w	r2, r3, #8
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f103 0208 	add.w	r2, r3, #8
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f103 0208 	add.w	r2, r3, #8
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d07a:	bf00      	nop
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	689a      	ldr	r2, [r3, #8]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	1c5a      	adds	r2, r3, #1
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	601a      	str	r2, [r3, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b085      	sub	sp, #20
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0e4:	d103      	bne.n	800d0ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	e00c      	b.n	800d108 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	60fb      	str	r3, [r7, #12]
 800d0f4:	e002      	b.n	800d0fc <vListInsert+0x2e>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	429a      	cmp	r2, r3
 800d106:	d2f6      	bcs.n	800d0f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
}
 800d134:	bf00      	nop
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	6892      	ldr	r2, [r2, #8]
 800d156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	6852      	ldr	r2, [r2, #4]
 800d160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d103      	bne.n	800d174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	1e5a      	subs	r2, r3, #1
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10c      	bne.n	800d1c2 <xQueueGenericReset+0x2e>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	b672      	cpsid	i
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	b662      	cpsie	i
 800d1bc:	60bb      	str	r3, [r7, #8]
}
 800d1be:	bf00      	nop
 800d1c0:	e7fe      	b.n	800d1c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d1c2:	f002 f8a3 	bl	800f30c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ce:	68f9      	ldr	r1, [r7, #12]
 800d1d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1d2:	fb01 f303 	mul.w	r3, r1, r3
 800d1d6:	441a      	add	r2, r3
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	68f9      	ldr	r1, [r7, #12]
 800d1f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1f8:	fb01 f303 	mul.w	r3, r1, r3
 800d1fc:	441a      	add	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	22ff      	movs	r2, #255	; 0xff
 800d206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	22ff      	movs	r2, #255	; 0xff
 800d20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d114      	bne.n	800d242 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d01a      	beq.n	800d256 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3310      	adds	r3, #16
 800d224:	4618      	mov	r0, r3
 800d226:	f001 f937 	bl	800e498 <xTaskRemoveFromEventList>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d012      	beq.n	800d256 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d230:	4b0c      	ldr	r3, [pc, #48]	; (800d264 <xQueueGenericReset+0xd0>)
 800d232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	e009      	b.n	800d256 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3310      	adds	r3, #16
 800d246:	4618      	mov	r0, r3
 800d248:	f7ff fef0 	bl	800d02c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	3324      	adds	r3, #36	; 0x24
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff feeb 	bl	800d02c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d256:	f002 f88d 	bl	800f374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d25a:	2301      	movs	r3, #1
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	e000ed04 	.word	0xe000ed04

0800d268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08e      	sub	sp, #56	; 0x38
 800d26c:	af02      	add	r7, sp, #8
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10c      	bne.n	800d296 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	b672      	cpsid	i
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	b662      	cpsie	i
 800d290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d292:	bf00      	nop
 800d294:	e7fe      	b.n	800d294 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10c      	bne.n	800d2b6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a0:	b672      	cpsid	i
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	b662      	cpsie	i
 800d2b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2b2:	bf00      	nop
 800d2b4:	e7fe      	b.n	800d2b4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <xQueueGenericCreateStatic+0x5a>
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <xQueueGenericCreateStatic+0x5e>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e000      	b.n	800d2c8 <xQueueGenericCreateStatic+0x60>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10c      	bne.n	800d2e6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	b672      	cpsid	i
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	b662      	cpsie	i
 800d2e0:	623b      	str	r3, [r7, #32]
}
 800d2e2:	bf00      	nop
 800d2e4:	e7fe      	b.n	800d2e4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d102      	bne.n	800d2f2 <xQueueGenericCreateStatic+0x8a>
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d101      	bne.n	800d2f6 <xQueueGenericCreateStatic+0x8e>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e000      	b.n	800d2f8 <xQueueGenericCreateStatic+0x90>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d10c      	bne.n	800d316 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d300:	b672      	cpsid	i
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	b662      	cpsie	i
 800d310:	61fb      	str	r3, [r7, #28]
}
 800d312:	bf00      	nop
 800d314:	e7fe      	b.n	800d314 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d316:	2350      	movs	r3, #80	; 0x50
 800d318:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	2b50      	cmp	r3, #80	; 0x50
 800d31e:	d00c      	beq.n	800d33a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d324:	b672      	cpsid	i
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	b662      	cpsie	i
 800d334:	61bb      	str	r3, [r7, #24]
}
 800d336:	bf00      	nop
 800d338:	e7fe      	b.n	800d338 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d33a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00d      	beq.n	800d362 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d34e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	9300      	str	r3, [sp, #0]
 800d356:	4613      	mov	r3, r2
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	68b9      	ldr	r1, [r7, #8]
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f000 f805 	bl	800d36c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d364:	4618      	mov	r0, r3
 800d366:	3730      	adds	r7, #48	; 0x30
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d103      	bne.n	800d388 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	69ba      	ldr	r2, [r7, #24]
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	e002      	b.n	800d38e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	68ba      	ldr	r2, [r7, #8]
 800d398:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d39a:	2101      	movs	r1, #1
 800d39c:	69b8      	ldr	r0, [r7, #24]
 800d39e:	f7ff fef9 	bl	800d194 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	78fa      	ldrb	r2, [r7, #3]
 800d3a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d3aa:	bf00      	nop
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
	...

0800d3b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08e      	sub	sp, #56	; 0x38
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10c      	bne.n	800d3ea <xQueueGenericSend+0x36>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	b672      	cpsid	i
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	b662      	cpsie	i
 800d3e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d3e6:	bf00      	nop
 800d3e8:	e7fe      	b.n	800d3e8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d103      	bne.n	800d3f8 <xQueueGenericSend+0x44>
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <xQueueGenericSend+0x48>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e000      	b.n	800d3fe <xQueueGenericSend+0x4a>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10c      	bne.n	800d41c <xQueueGenericSend+0x68>
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d406:	b672      	cpsid	i
 800d408:	f383 8811 	msr	BASEPRI, r3
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	b662      	cpsie	i
 800d416:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d418:	bf00      	nop
 800d41a:	e7fe      	b.n	800d41a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d103      	bne.n	800d42a <xQueueGenericSend+0x76>
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d426:	2b01      	cmp	r3, #1
 800d428:	d101      	bne.n	800d42e <xQueueGenericSend+0x7a>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e000      	b.n	800d430 <xQueueGenericSend+0x7c>
 800d42e:	2300      	movs	r3, #0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10c      	bne.n	800d44e <xQueueGenericSend+0x9a>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d438:	b672      	cpsid	i
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	b662      	cpsie	i
 800d448:	623b      	str	r3, [r7, #32]
}
 800d44a:	bf00      	nop
 800d44c:	e7fe      	b.n	800d44c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d44e:	f001 fa11 	bl	800e874 <xTaskGetSchedulerState>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d102      	bne.n	800d45e <xQueueGenericSend+0xaa>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <xQueueGenericSend+0xae>
 800d45e:	2301      	movs	r3, #1
 800d460:	e000      	b.n	800d464 <xQueueGenericSend+0xb0>
 800d462:	2300      	movs	r3, #0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10c      	bne.n	800d482 <xQueueGenericSend+0xce>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	b672      	cpsid	i
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	b662      	cpsie	i
 800d47c:	61fb      	str	r3, [r7, #28]
}
 800d47e:	bf00      	nop
 800d480:	e7fe      	b.n	800d480 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d482:	f001 ff43 	bl	800f30c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48e:	429a      	cmp	r2, r3
 800d490:	d302      	bcc.n	800d498 <xQueueGenericSend+0xe4>
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b02      	cmp	r3, #2
 800d496:	d129      	bne.n	800d4ec <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d498:	683a      	ldr	r2, [r7, #0]
 800d49a:	68b9      	ldr	r1, [r7, #8]
 800d49c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d49e:	f000 fa15 	bl	800d8cc <prvCopyDataToQueue>
 800d4a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d010      	beq.n	800d4ce <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ae:	3324      	adds	r3, #36	; 0x24
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 fff1 	bl	800e498 <xTaskRemoveFromEventList>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d013      	beq.n	800d4e4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d4bc:	4b3f      	ldr	r3, [pc, #252]	; (800d5bc <xQueueGenericSend+0x208>)
 800d4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4c2:	601a      	str	r2, [r3, #0]
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	e00a      	b.n	800d4e4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d007      	beq.n	800d4e4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d4d4:	4b39      	ldr	r3, [pc, #228]	; (800d5bc <xQueueGenericSend+0x208>)
 800d4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d4e4:	f001 ff46 	bl	800f374 <vPortExitCritical>
				return pdPASS;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e063      	b.n	800d5b4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d103      	bne.n	800d4fa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4f2:	f001 ff3f 	bl	800f374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	e05c      	b.n	800d5b4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d106      	bne.n	800d50e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d500:	f107 0314 	add.w	r3, r7, #20
 800d504:	4618      	mov	r0, r3
 800d506:	f001 f855 	bl	800e5b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d50a:	2301      	movs	r3, #1
 800d50c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d50e:	f001 ff31 	bl	800f374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d512:	f000 fd93 	bl	800e03c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d516:	f001 fef9 	bl	800f30c <vPortEnterCritical>
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d520:	b25b      	sxtb	r3, r3
 800d522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d526:	d103      	bne.n	800d530 <xQueueGenericSend+0x17c>
 800d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d536:	b25b      	sxtb	r3, r3
 800d538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d53c:	d103      	bne.n	800d546 <xQueueGenericSend+0x192>
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d546:	f001 ff15 	bl	800f374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d54a:	1d3a      	adds	r2, r7, #4
 800d54c:	f107 0314 	add.w	r3, r7, #20
 800d550:	4611      	mov	r1, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f001 f844 	bl	800e5e0 <xTaskCheckForTimeOut>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d124      	bne.n	800d5a8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d55e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d560:	f000 faac 	bl	800dabc <prvIsQueueFull>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d018      	beq.n	800d59c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	3310      	adds	r3, #16
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	4611      	mov	r1, r2
 800d572:	4618      	mov	r0, r3
 800d574:	f000 ff3c 	bl	800e3f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d57a:	f000 fa37 	bl	800d9ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d57e:	f000 fd6b 	bl	800e058 <xTaskResumeAll>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	f47f af7c 	bne.w	800d482 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d58a:	4b0c      	ldr	r3, [pc, #48]	; (800d5bc <xQueueGenericSend+0x208>)
 800d58c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d590:	601a      	str	r2, [r3, #0]
 800d592:	f3bf 8f4f 	dsb	sy
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	e772      	b.n	800d482 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d59c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d59e:	f000 fa25 	bl	800d9ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5a2:	f000 fd59 	bl	800e058 <xTaskResumeAll>
 800d5a6:	e76c      	b.n	800d482 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5aa:	f000 fa1f 	bl	800d9ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5ae:	f000 fd53 	bl	800e058 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d5b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3738      	adds	r7, #56	; 0x38
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	e000ed04 	.word	0xe000ed04

0800d5c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08e      	sub	sp, #56	; 0x38
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
 800d5cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10c      	bne.n	800d5f2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5dc:	b672      	cpsid	i
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	b662      	cpsie	i
 800d5ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d5ee:	bf00      	nop
 800d5f0:	e7fe      	b.n	800d5f0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d103      	bne.n	800d600 <xQueueGenericSendFromISR+0x40>
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <xQueueGenericSendFromISR+0x44>
 800d600:	2301      	movs	r3, #1
 800d602:	e000      	b.n	800d606 <xQueueGenericSendFromISR+0x46>
 800d604:	2300      	movs	r3, #0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10c      	bne.n	800d624 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60e:	b672      	cpsid	i
 800d610:	f383 8811 	msr	BASEPRI, r3
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	b662      	cpsie	i
 800d61e:	623b      	str	r3, [r7, #32]
}
 800d620:	bf00      	nop
 800d622:	e7fe      	b.n	800d622 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b02      	cmp	r3, #2
 800d628:	d103      	bne.n	800d632 <xQueueGenericSendFromISR+0x72>
 800d62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d101      	bne.n	800d636 <xQueueGenericSendFromISR+0x76>
 800d632:	2301      	movs	r3, #1
 800d634:	e000      	b.n	800d638 <xQueueGenericSendFromISR+0x78>
 800d636:	2300      	movs	r3, #0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10c      	bne.n	800d656 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d640:	b672      	cpsid	i
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	b662      	cpsie	i
 800d650:	61fb      	str	r3, [r7, #28]
}
 800d652:	bf00      	nop
 800d654:	e7fe      	b.n	800d654 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d656:	f001 ff41 	bl	800f4dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d65a:	f3ef 8211 	mrs	r2, BASEPRI
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	b672      	cpsid	i
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	b662      	cpsie	i
 800d672:	61ba      	str	r2, [r7, #24]
 800d674:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d676:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d678:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d682:	429a      	cmp	r2, r3
 800d684:	d302      	bcc.n	800d68c <xQueueGenericSendFromISR+0xcc>
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d12c      	bne.n	800d6e6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	68b9      	ldr	r1, [r7, #8]
 800d69a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d69c:	f000 f916 	bl	800d8cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d6a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d6a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6a8:	d112      	bne.n	800d6d0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d016      	beq.n	800d6e0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b4:	3324      	adds	r3, #36	; 0x24
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 feee 	bl	800e498 <xTaskRemoveFromEventList>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00e      	beq.n	800d6e0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00b      	beq.n	800d6e0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	e007      	b.n	800d6e0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d6d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	b25a      	sxtb	r2, r3
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d6e4:	e001      	b.n	800d6ea <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d6f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3738      	adds	r7, #56	; 0x38
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b08c      	sub	sp, #48	; 0x30
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d70c:	2300      	movs	r3, #0
 800d70e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10c      	bne.n	800d734 <xQueueReceive+0x34>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	b672      	cpsid	i
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	b662      	cpsie	i
 800d72e:	623b      	str	r3, [r7, #32]
}
 800d730:	bf00      	nop
 800d732:	e7fe      	b.n	800d732 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d103      	bne.n	800d742 <xQueueReceive+0x42>
 800d73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <xQueueReceive+0x46>
 800d742:	2301      	movs	r3, #1
 800d744:	e000      	b.n	800d748 <xQueueReceive+0x48>
 800d746:	2300      	movs	r3, #0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10c      	bne.n	800d766 <xQueueReceive+0x66>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	b672      	cpsid	i
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	b662      	cpsie	i
 800d760:	61fb      	str	r3, [r7, #28]
}
 800d762:	bf00      	nop
 800d764:	e7fe      	b.n	800d764 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d766:	f001 f885 	bl	800e874 <xTaskGetSchedulerState>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d102      	bne.n	800d776 <xQueueReceive+0x76>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d101      	bne.n	800d77a <xQueueReceive+0x7a>
 800d776:	2301      	movs	r3, #1
 800d778:	e000      	b.n	800d77c <xQueueReceive+0x7c>
 800d77a:	2300      	movs	r3, #0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10c      	bne.n	800d79a <xQueueReceive+0x9a>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	b672      	cpsid	i
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	b662      	cpsie	i
 800d794:	61bb      	str	r3, [r7, #24]
}
 800d796:	bf00      	nop
 800d798:	e7fe      	b.n	800d798 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d79a:	f001 fdb7 	bl	800f30c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d01f      	beq.n	800d7ea <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d7aa:	68b9      	ldr	r1, [r7, #8]
 800d7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ae:	f000 f8f7 	bl	800d9a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	1e5a      	subs	r2, r3, #1
 800d7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00f      	beq.n	800d7e2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c4:	3310      	adds	r3, #16
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f000 fe66 	bl	800e498 <xTaskRemoveFromEventList>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d007      	beq.n	800d7e2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7d2:	4b3d      	ldr	r3, [pc, #244]	; (800d8c8 <xQueueReceive+0x1c8>)
 800d7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7e2:	f001 fdc7 	bl	800f374 <vPortExitCritical>
				return pdPASS;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e069      	b.n	800d8be <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d103      	bne.n	800d7f8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7f0:	f001 fdc0 	bl	800f374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	e062      	b.n	800d8be <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d106      	bne.n	800d80c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7fe:	f107 0310 	add.w	r3, r7, #16
 800d802:	4618      	mov	r0, r3
 800d804:	f000 fed6 	bl	800e5b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d808:	2301      	movs	r3, #1
 800d80a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d80c:	f001 fdb2 	bl	800f374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d810:	f000 fc14 	bl	800e03c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d814:	f001 fd7a 	bl	800f30c <vPortEnterCritical>
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d81e:	b25b      	sxtb	r3, r3
 800d820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d824:	d103      	bne.n	800d82e <xQueueReceive+0x12e>
 800d826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d834:	b25b      	sxtb	r3, r3
 800d836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d83a:	d103      	bne.n	800d844 <xQueueReceive+0x144>
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d844:	f001 fd96 	bl	800f374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d848:	1d3a      	adds	r2, r7, #4
 800d84a:	f107 0310 	add.w	r3, r7, #16
 800d84e:	4611      	mov	r1, r2
 800d850:	4618      	mov	r0, r3
 800d852:	f000 fec5 	bl	800e5e0 <xTaskCheckForTimeOut>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d123      	bne.n	800d8a4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d85e:	f000 f917 	bl	800da90 <prvIsQueueEmpty>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d017      	beq.n	800d898 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86a:	3324      	adds	r3, #36	; 0x24
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	4611      	mov	r1, r2
 800d870:	4618      	mov	r0, r3
 800d872:	f000 fdbd 	bl	800e3f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d878:	f000 f8b8 	bl	800d9ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d87c:	f000 fbec 	bl	800e058 <xTaskResumeAll>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d189      	bne.n	800d79a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d886:	4b10      	ldr	r3, [pc, #64]	; (800d8c8 <xQueueReceive+0x1c8>)
 800d888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	e780      	b.n	800d79a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d89a:	f000 f8a7 	bl	800d9ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d89e:	f000 fbdb 	bl	800e058 <xTaskResumeAll>
 800d8a2:	e77a      	b.n	800d79a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8a6:	f000 f8a1 	bl	800d9ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8aa:	f000 fbd5 	bl	800e058 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8b0:	f000 f8ee 	bl	800da90 <prvIsQueueEmpty>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f43f af6f 	beq.w	800d79a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d8bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3730      	adds	r7, #48	; 0x30
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	e000ed04 	.word	0xe000ed04

0800d8cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d10d      	bne.n	800d906 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d14d      	bne.n	800d98e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f000 ffda 	bl	800e8b0 <xTaskPriorityDisinherit>
 800d8fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	609a      	str	r2, [r3, #8]
 800d904:	e043      	b.n	800d98e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d119      	bne.n	800d940 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6858      	ldr	r0, [r3, #4]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d914:	461a      	mov	r2, r3
 800d916:	68b9      	ldr	r1, [r7, #8]
 800d918:	f012 faf1 	bl	801fefe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d924:	441a      	add	r2, r3
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	429a      	cmp	r2, r3
 800d934:	d32b      	bcc.n	800d98e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	605a      	str	r2, [r3, #4]
 800d93e:	e026      	b.n	800d98e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	68d8      	ldr	r0, [r3, #12]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d948:	461a      	mov	r2, r3
 800d94a:	68b9      	ldr	r1, [r7, #8]
 800d94c:	f012 fad7 	bl	801fefe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d958:	425b      	negs	r3, r3
 800d95a:	441a      	add	r2, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	68da      	ldr	r2, [r3, #12]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d207      	bcs.n	800d97c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	689a      	ldr	r2, [r3, #8]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d974:	425b      	negs	r3, r3
 800d976:	441a      	add	r2, r3
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d105      	bne.n	800d98e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	3b01      	subs	r3, #1
 800d98c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	1c5a      	adds	r2, r3, #1
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d996:	697b      	ldr	r3, [r7, #20]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d018      	beq.n	800d9e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ba:	441a      	add	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68da      	ldr	r2, [r3, #12]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d303      	bcc.n	800d9d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68d9      	ldr	r1, [r3, #12]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9dc:	461a      	mov	r2, r3
 800d9de:	6838      	ldr	r0, [r7, #0]
 800d9e0:	f012 fa8d 	bl	801fefe <memcpy>
	}
}
 800d9e4:	bf00      	nop
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d9f4:	f001 fc8a 	bl	800f30c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da00:	e011      	b.n	800da26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da06:	2b00      	cmp	r3, #0
 800da08:	d012      	beq.n	800da30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	3324      	adds	r3, #36	; 0x24
 800da0e:	4618      	mov	r0, r3
 800da10:	f000 fd42 	bl	800e498 <xTaskRemoveFromEventList>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800da1a:	f000 fe47 	bl	800e6ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800da1e:	7bfb      	ldrb	r3, [r7, #15]
 800da20:	3b01      	subs	r3, #1
 800da22:	b2db      	uxtb	r3, r3
 800da24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	dce9      	bgt.n	800da02 <prvUnlockQueue+0x16>
 800da2e:	e000      	b.n	800da32 <prvUnlockQueue+0x46>
					break;
 800da30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	22ff      	movs	r2, #255	; 0xff
 800da36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800da3a:	f001 fc9b 	bl	800f374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da3e:	f001 fc65 	bl	800f30c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da4a:	e011      	b.n	800da70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d012      	beq.n	800da7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3310      	adds	r3, #16
 800da58:	4618      	mov	r0, r3
 800da5a:	f000 fd1d 	bl	800e498 <xTaskRemoveFromEventList>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800da64:	f000 fe22 	bl	800e6ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800da68:	7bbb      	ldrb	r3, [r7, #14]
 800da6a:	3b01      	subs	r3, #1
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da74:	2b00      	cmp	r3, #0
 800da76:	dce9      	bgt.n	800da4c <prvUnlockQueue+0x60>
 800da78:	e000      	b.n	800da7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	22ff      	movs	r2, #255	; 0xff
 800da80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da84:	f001 fc76 	bl	800f374 <vPortExitCritical>
}
 800da88:	bf00      	nop
 800da8a:	3710      	adds	r7, #16
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da98:	f001 fc38 	bl	800f30c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d102      	bne.n	800daaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800daa4:	2301      	movs	r3, #1
 800daa6:	60fb      	str	r3, [r7, #12]
 800daa8:	e001      	b.n	800daae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800daaa:	2300      	movs	r3, #0
 800daac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800daae:	f001 fc61 	bl	800f374 <vPortExitCritical>

	return xReturn;
 800dab2:	68fb      	ldr	r3, [r7, #12]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dac4:	f001 fc22 	bl	800f30c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d102      	bne.n	800dada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dad4:	2301      	movs	r3, #1
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	e001      	b.n	800dade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dada:	2300      	movs	r3, #0
 800dadc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dade:	f001 fc49 	bl	800f374 <vPortExitCritical>

	return xReturn;
 800dae2:	68fb      	ldr	r3, [r7, #12]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800daf6:	2300      	movs	r3, #0
 800daf8:	60fb      	str	r3, [r7, #12]
 800dafa:	e014      	b.n	800db26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dafc:	4a0f      	ldr	r2, [pc, #60]	; (800db3c <vQueueAddToRegistry+0x50>)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d10b      	bne.n	800db20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800db08:	490c      	ldr	r1, [pc, #48]	; (800db3c <vQueueAddToRegistry+0x50>)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800db12:	4a0a      	ldr	r2, [pc, #40]	; (800db3c <vQueueAddToRegistry+0x50>)
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	00db      	lsls	r3, r3, #3
 800db18:	4413      	add	r3, r2
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800db1e:	e006      	b.n	800db2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	3301      	adds	r3, #1
 800db24:	60fb      	str	r3, [r7, #12]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2b07      	cmp	r3, #7
 800db2a:	d9e7      	bls.n	800dafc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db2c:	bf00      	nop
 800db2e:	bf00      	nop
 800db30:	3714      	adds	r7, #20
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	2000c590 	.word	0x2000c590

0800db40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800db50:	f001 fbdc 	bl	800f30c <vPortEnterCritical>
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db5a:	b25b      	sxtb	r3, r3
 800db5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db60:	d103      	bne.n	800db6a <vQueueWaitForMessageRestricted+0x2a>
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db70:	b25b      	sxtb	r3, r3
 800db72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db76:	d103      	bne.n	800db80 <vQueueWaitForMessageRestricted+0x40>
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db80:	f001 fbf8 	bl	800f374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d106      	bne.n	800db9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	3324      	adds	r3, #36	; 0x24
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	68b9      	ldr	r1, [r7, #8]
 800db94:	4618      	mov	r0, r3
 800db96:	f000 fc51 	bl	800e43c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800db9a:	6978      	ldr	r0, [r7, #20]
 800db9c:	f7ff ff26 	bl	800d9ec <prvUnlockQueue>
	}
 800dba0:	bf00      	nop
 800dba2:	3718      	adds	r7, #24
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b08e      	sub	sp, #56	; 0x38
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10c      	bne.n	800dbd6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800dbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc0:	b672      	cpsid	i
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	b662      	cpsie	i
 800dbd0:	623b      	str	r3, [r7, #32]
}
 800dbd2:	bf00      	nop
 800dbd4:	e7fe      	b.n	800dbd4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10c      	bne.n	800dbf6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800dbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe0:	b672      	cpsid	i
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	b662      	cpsie	i
 800dbf0:	61fb      	str	r3, [r7, #28]
}
 800dbf2:	bf00      	nop
 800dbf4:	e7fe      	b.n	800dbf4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dbf6:	235c      	movs	r3, #92	; 0x5c
 800dbf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	2b5c      	cmp	r3, #92	; 0x5c
 800dbfe:	d00c      	beq.n	800dc1a <xTaskCreateStatic+0x72>
	__asm volatile
 800dc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc04:	b672      	cpsid	i
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	b662      	cpsie	i
 800dc14:	61bb      	str	r3, [r7, #24]
}
 800dc16:	bf00      	nop
 800dc18:	e7fe      	b.n	800dc18 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d01e      	beq.n	800dc60 <xTaskCreateStatic+0xb8>
 800dc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01b      	beq.n	800dc60 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	2202      	movs	r2, #2
 800dc36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	9303      	str	r3, [sp, #12]
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc40:	9302      	str	r3, [sp, #8]
 800dc42:	f107 0314 	add.w	r3, r7, #20
 800dc46:	9301      	str	r3, [sp, #4]
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	68b9      	ldr	r1, [r7, #8]
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	f000 f850 	bl	800dcf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc5a:	f000 f8df 	bl	800de1c <prvAddNewTaskToReadyList>
 800dc5e:	e001      	b.n	800dc64 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800dc60:	2300      	movs	r3, #0
 800dc62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc64:	697b      	ldr	r3, [r7, #20]
	}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3728      	adds	r7, #40	; 0x28
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b08c      	sub	sp, #48	; 0x30
 800dc72:	af04      	add	r7, sp, #16
 800dc74:	60f8      	str	r0, [r7, #12]
 800dc76:	60b9      	str	r1, [r7, #8]
 800dc78:	603b      	str	r3, [r7, #0]
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc7e:	88fb      	ldrh	r3, [r7, #6]
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4618      	mov	r0, r3
 800dc84:	f001 fc6e 	bl	800f564 <pvPortMalloc>
 800dc88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00e      	beq.n	800dcae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc90:	205c      	movs	r0, #92	; 0x5c
 800dc92:	f001 fc67 	bl	800f564 <pvPortMalloc>
 800dc96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d003      	beq.n	800dca6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	631a      	str	r2, [r3, #48]	; 0x30
 800dca4:	e005      	b.n	800dcb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dca6:	6978      	ldr	r0, [r7, #20]
 800dca8:	f001 fd26 	bl	800f6f8 <vPortFree>
 800dcac:	e001      	b.n	800dcb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d017      	beq.n	800dce8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dcc0:	88fa      	ldrh	r2, [r7, #6]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9303      	str	r3, [sp, #12]
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	9302      	str	r3, [sp, #8]
 800dcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	68b9      	ldr	r1, [r7, #8]
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f000 f80e 	bl	800dcf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcdc:	69f8      	ldr	r0, [r7, #28]
 800dcde:	f000 f89d 	bl	800de1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dce2:	2301      	movs	r3, #1
 800dce4:	61bb      	str	r3, [r7, #24]
 800dce6:	e002      	b.n	800dcee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dcee:	69bb      	ldr	r3, [r7, #24]
	}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3720      	adds	r7, #32
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b088      	sub	sp, #32
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
 800dd04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	461a      	mov	r2, r3
 800dd10:	21a5      	movs	r1, #165	; 0xa5
 800dd12:	f012 f827 	bl	801fd64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd1a:	6879      	ldr	r1, [r7, #4]
 800dd1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dd20:	440b      	add	r3, r1
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	f023 0307 	bic.w	r3, r3, #7
 800dd2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	f003 0307 	and.w	r3, r3, #7
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00c      	beq.n	800dd54 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3e:	b672      	cpsid	i
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	b662      	cpsie	i
 800dd4e:	617b      	str	r3, [r7, #20]
}
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d01f      	beq.n	800dd9a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	61fb      	str	r3, [r7, #28]
 800dd5e:	e012      	b.n	800dd86 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	4413      	add	r3, r2
 800dd66:	7819      	ldrb	r1, [r3, #0]
 800dd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	3334      	adds	r3, #52	; 0x34
 800dd70:	460a      	mov	r2, r1
 800dd72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	4413      	add	r3, r2
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d006      	beq.n	800dd8e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	3301      	adds	r3, #1
 800dd84:	61fb      	str	r3, [r7, #28]
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	2b0f      	cmp	r3, #15
 800dd8a:	d9e9      	bls.n	800dd60 <prvInitialiseNewTask+0x68>
 800dd8c:	e000      	b.n	800dd90 <prvInitialiseNewTask+0x98>
			{
				break;
 800dd8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd98:	e003      	b.n	800dda2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	2b37      	cmp	r3, #55	; 0x37
 800dda6:	d901      	bls.n	800ddac <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dda8:	2337      	movs	r3, #55	; 0x37
 800ddaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ddac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddba:	2200      	movs	r2, #0
 800ddbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7ff f952 	bl	800d06c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddca:	3318      	adds	r3, #24
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7ff f94d 	bl	800d06c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ddde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dde6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	2200      	movs	r2, #0
 800ddec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ddee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	68f9      	ldr	r1, [r7, #12]
 800ddfa:	69b8      	ldr	r0, [r7, #24]
 800ddfc:	f001 f97a 	bl	800f0f4 <pxPortInitialiseStack>
 800de00:	4602      	mov	r2, r0
 800de02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de12:	bf00      	nop
 800de14:	3720      	adds	r7, #32
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
	...

0800de1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de24:	f001 fa72 	bl	800f30c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de28:	4b2d      	ldr	r3, [pc, #180]	; (800dee0 <prvAddNewTaskToReadyList+0xc4>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3301      	adds	r3, #1
 800de2e:	4a2c      	ldr	r2, [pc, #176]	; (800dee0 <prvAddNewTaskToReadyList+0xc4>)
 800de30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de32:	4b2c      	ldr	r3, [pc, #176]	; (800dee4 <prvAddNewTaskToReadyList+0xc8>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d109      	bne.n	800de4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de3a:	4a2a      	ldr	r2, [pc, #168]	; (800dee4 <prvAddNewTaskToReadyList+0xc8>)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de40:	4b27      	ldr	r3, [pc, #156]	; (800dee0 <prvAddNewTaskToReadyList+0xc4>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d110      	bne.n	800de6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de48:	f000 fc54 	bl	800e6f4 <prvInitialiseTaskLists>
 800de4c:	e00d      	b.n	800de6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de4e:	4b26      	ldr	r3, [pc, #152]	; (800dee8 <prvAddNewTaskToReadyList+0xcc>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d109      	bne.n	800de6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de56:	4b23      	ldr	r3, [pc, #140]	; (800dee4 <prvAddNewTaskToReadyList+0xc8>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de60:	429a      	cmp	r2, r3
 800de62:	d802      	bhi.n	800de6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800de64:	4a1f      	ldr	r2, [pc, #124]	; (800dee4 <prvAddNewTaskToReadyList+0xc8>)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de6a:	4b20      	ldr	r3, [pc, #128]	; (800deec <prvAddNewTaskToReadyList+0xd0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	3301      	adds	r3, #1
 800de70:	4a1e      	ldr	r2, [pc, #120]	; (800deec <prvAddNewTaskToReadyList+0xd0>)
 800de72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800de74:	4b1d      	ldr	r3, [pc, #116]	; (800deec <prvAddNewTaskToReadyList+0xd0>)
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de80:	4b1b      	ldr	r3, [pc, #108]	; (800def0 <prvAddNewTaskToReadyList+0xd4>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	429a      	cmp	r2, r3
 800de86:	d903      	bls.n	800de90 <prvAddNewTaskToReadyList+0x74>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8c:	4a18      	ldr	r2, [pc, #96]	; (800def0 <prvAddNewTaskToReadyList+0xd4>)
 800de8e:	6013      	str	r3, [r2, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de94:	4613      	mov	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4a15      	ldr	r2, [pc, #84]	; (800def4 <prvAddNewTaskToReadyList+0xd8>)
 800de9e:	441a      	add	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	3304      	adds	r3, #4
 800dea4:	4619      	mov	r1, r3
 800dea6:	4610      	mov	r0, r2
 800dea8:	f7ff f8ed 	bl	800d086 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800deac:	f001 fa62 	bl	800f374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800deb0:	4b0d      	ldr	r3, [pc, #52]	; (800dee8 <prvAddNewTaskToReadyList+0xcc>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00e      	beq.n	800ded6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800deb8:	4b0a      	ldr	r3, [pc, #40]	; (800dee4 <prvAddNewTaskToReadyList+0xc8>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d207      	bcs.n	800ded6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dec6:	4b0c      	ldr	r3, [pc, #48]	; (800def8 <prvAddNewTaskToReadyList+0xdc>)
 800dec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800decc:	601a      	str	r2, [r3, #0]
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ded6:	bf00      	nop
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	2000caa4 	.word	0x2000caa4
 800dee4:	2000c5d0 	.word	0x2000c5d0
 800dee8:	2000cab0 	.word	0x2000cab0
 800deec:	2000cac0 	.word	0x2000cac0
 800def0:	2000caac 	.word	0x2000caac
 800def4:	2000c5d4 	.word	0x2000c5d4
 800def8:	e000ed04 	.word	0xe000ed04

0800defc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df04:	2300      	movs	r3, #0
 800df06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d019      	beq.n	800df42 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df0e:	4b14      	ldr	r3, [pc, #80]	; (800df60 <vTaskDelay+0x64>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00c      	beq.n	800df30 <vTaskDelay+0x34>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	b672      	cpsid	i
 800df1c:	f383 8811 	msr	BASEPRI, r3
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	b662      	cpsie	i
 800df2a:	60bb      	str	r3, [r7, #8]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800df30:	f000 f884 	bl	800e03c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df34:	2100      	movs	r1, #0
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fd2c 	bl	800e994 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df3c:	f000 f88c 	bl	800e058 <xTaskResumeAll>
 800df40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d107      	bne.n	800df58 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800df48:	4b06      	ldr	r3, [pc, #24]	; (800df64 <vTaskDelay+0x68>)
 800df4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df4e:	601a      	str	r2, [r3, #0]
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df58:	bf00      	nop
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	2000cacc 	.word	0x2000cacc
 800df64:	e000ed04 	.word	0xe000ed04

0800df68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b08a      	sub	sp, #40	; 0x28
 800df6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df6e:	2300      	movs	r3, #0
 800df70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df76:	463a      	mov	r2, r7
 800df78:	1d39      	adds	r1, r7, #4
 800df7a:	f107 0308 	add.w	r3, r7, #8
 800df7e:	4618      	mov	r0, r3
 800df80:	f7ff f820 	bl	800cfc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df84:	6839      	ldr	r1, [r7, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	9202      	str	r2, [sp, #8]
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	2300      	movs	r3, #0
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	2300      	movs	r3, #0
 800df94:	460a      	mov	r2, r1
 800df96:	4923      	ldr	r1, [pc, #140]	; (800e024 <vTaskStartScheduler+0xbc>)
 800df98:	4823      	ldr	r0, [pc, #140]	; (800e028 <vTaskStartScheduler+0xc0>)
 800df9a:	f7ff fe05 	bl	800dba8 <xTaskCreateStatic>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	4a22      	ldr	r2, [pc, #136]	; (800e02c <vTaskStartScheduler+0xc4>)
 800dfa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dfa4:	4b21      	ldr	r3, [pc, #132]	; (800e02c <vTaskStartScheduler+0xc4>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d002      	beq.n	800dfb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dfac:	2301      	movs	r3, #1
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	e001      	b.n	800dfb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d102      	bne.n	800dfc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dfbc:	f000 fd3e 	bl	800ea3c <xTimerCreateTimerTask>
 800dfc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d118      	bne.n	800dffa <vTaskStartScheduler+0x92>
	__asm volatile
 800dfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfcc:	b672      	cpsid	i
 800dfce:	f383 8811 	msr	BASEPRI, r3
 800dfd2:	f3bf 8f6f 	isb	sy
 800dfd6:	f3bf 8f4f 	dsb	sy
 800dfda:	b662      	cpsie	i
 800dfdc:	613b      	str	r3, [r7, #16]
}
 800dfde:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfe0:	4b13      	ldr	r3, [pc, #76]	; (800e030 <vTaskStartScheduler+0xc8>)
 800dfe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfe6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfe8:	4b12      	ldr	r3, [pc, #72]	; (800e034 <vTaskStartScheduler+0xcc>)
 800dfea:	2201      	movs	r2, #1
 800dfec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfee:	4b12      	ldr	r3, [pc, #72]	; (800e038 <vTaskStartScheduler+0xd0>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dff4:	f001 f90c 	bl	800f210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dff8:	e010      	b.n	800e01c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e000:	d10c      	bne.n	800e01c <vTaskStartScheduler+0xb4>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e006:	b672      	cpsid	i
 800e008:	f383 8811 	msr	BASEPRI, r3
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	b662      	cpsie	i
 800e016:	60fb      	str	r3, [r7, #12]
}
 800e018:	bf00      	nop
 800e01a:	e7fe      	b.n	800e01a <vTaskStartScheduler+0xb2>
}
 800e01c:	bf00      	nop
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	08023454 	.word	0x08023454
 800e028:	0800e6c5 	.word	0x0800e6c5
 800e02c:	2000cac8 	.word	0x2000cac8
 800e030:	2000cac4 	.word	0x2000cac4
 800e034:	2000cab0 	.word	0x2000cab0
 800e038:	2000caa8 	.word	0x2000caa8

0800e03c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e03c:	b480      	push	{r7}
 800e03e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e040:	4b04      	ldr	r3, [pc, #16]	; (800e054 <vTaskSuspendAll+0x18>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3301      	adds	r3, #1
 800e046:	4a03      	ldr	r2, [pc, #12]	; (800e054 <vTaskSuspendAll+0x18>)
 800e048:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e04a:	bf00      	nop
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	2000cacc 	.word	0x2000cacc

0800e058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e062:	2300      	movs	r3, #0
 800e064:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e066:	4b43      	ldr	r3, [pc, #268]	; (800e174 <xTaskResumeAll+0x11c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d10c      	bne.n	800e088 <xTaskResumeAll+0x30>
	__asm volatile
 800e06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e072:	b672      	cpsid	i
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	b662      	cpsie	i
 800e082:	603b      	str	r3, [r7, #0]
}
 800e084:	bf00      	nop
 800e086:	e7fe      	b.n	800e086 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e088:	f001 f940 	bl	800f30c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e08c:	4b39      	ldr	r3, [pc, #228]	; (800e174 <xTaskResumeAll+0x11c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3b01      	subs	r3, #1
 800e092:	4a38      	ldr	r2, [pc, #224]	; (800e174 <xTaskResumeAll+0x11c>)
 800e094:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e096:	4b37      	ldr	r3, [pc, #220]	; (800e174 <xTaskResumeAll+0x11c>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d162      	bne.n	800e164 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e09e:	4b36      	ldr	r3, [pc, #216]	; (800e178 <xTaskResumeAll+0x120>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d05e      	beq.n	800e164 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0a6:	e02f      	b.n	800e108 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a8:	4b34      	ldr	r3, [pc, #208]	; (800e17c <xTaskResumeAll+0x124>)
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	3318      	adds	r3, #24
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7ff f843 	bl	800d140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	3304      	adds	r3, #4
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7ff f83e 	bl	800d140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c8:	4b2d      	ldr	r3, [pc, #180]	; (800e180 <xTaskResumeAll+0x128>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d903      	bls.n	800e0d8 <xTaskResumeAll+0x80>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d4:	4a2a      	ldr	r2, [pc, #168]	; (800e180 <xTaskResumeAll+0x128>)
 800e0d6:	6013      	str	r3, [r2, #0]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0dc:	4613      	mov	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4a27      	ldr	r2, [pc, #156]	; (800e184 <xTaskResumeAll+0x12c>)
 800e0e6:	441a      	add	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	f7fe ffc9 	bl	800d086 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f8:	4b23      	ldr	r3, [pc, #140]	; (800e188 <xTaskResumeAll+0x130>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d302      	bcc.n	800e108 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800e102:	4b22      	ldr	r3, [pc, #136]	; (800e18c <xTaskResumeAll+0x134>)
 800e104:	2201      	movs	r2, #1
 800e106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e108:	4b1c      	ldr	r3, [pc, #112]	; (800e17c <xTaskResumeAll+0x124>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1cb      	bne.n	800e0a8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e116:	f000 fb8d 	bl	800e834 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e11a:	4b1d      	ldr	r3, [pc, #116]	; (800e190 <xTaskResumeAll+0x138>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d010      	beq.n	800e148 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e126:	f000 f847 	bl	800e1b8 <xTaskIncrementTick>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800e130:	4b16      	ldr	r3, [pc, #88]	; (800e18c <xTaskResumeAll+0x134>)
 800e132:	2201      	movs	r2, #1
 800e134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	3b01      	subs	r3, #1
 800e13a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1f1      	bne.n	800e126 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800e142:	4b13      	ldr	r3, [pc, #76]	; (800e190 <xTaskResumeAll+0x138>)
 800e144:	2200      	movs	r2, #0
 800e146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e148:	4b10      	ldr	r3, [pc, #64]	; (800e18c <xTaskResumeAll+0x134>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d009      	beq.n	800e164 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e150:	2301      	movs	r3, #1
 800e152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e154:	4b0f      	ldr	r3, [pc, #60]	; (800e194 <xTaskResumeAll+0x13c>)
 800e156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e164:	f001 f906 	bl	800f374 <vPortExitCritical>

	return xAlreadyYielded;
 800e168:	68bb      	ldr	r3, [r7, #8]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	2000cacc 	.word	0x2000cacc
 800e178:	2000caa4 	.word	0x2000caa4
 800e17c:	2000ca64 	.word	0x2000ca64
 800e180:	2000caac 	.word	0x2000caac
 800e184:	2000c5d4 	.word	0x2000c5d4
 800e188:	2000c5d0 	.word	0x2000c5d0
 800e18c:	2000cab8 	.word	0x2000cab8
 800e190:	2000cab4 	.word	0x2000cab4
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e19e:	4b05      	ldr	r3, [pc, #20]	; (800e1b4 <xTaskGetTickCount+0x1c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e1a4:	687b      	ldr	r3, [r7, #4]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	370c      	adds	r7, #12
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	2000caa8 	.word	0x2000caa8

0800e1b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b086      	sub	sp, #24
 800e1bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1c2:	4b50      	ldr	r3, [pc, #320]	; (800e304 <xTaskIncrementTick+0x14c>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f040 808b 	bne.w	800e2e2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e1cc:	4b4e      	ldr	r3, [pc, #312]	; (800e308 <xTaskIncrementTick+0x150>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e1d4:	4a4c      	ldr	r2, [pc, #304]	; (800e308 <xTaskIncrementTick+0x150>)
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d122      	bne.n	800e226 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e1e0:	4b4a      	ldr	r3, [pc, #296]	; (800e30c <xTaskIncrementTick+0x154>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00c      	beq.n	800e204 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ee:	b672      	cpsid	i
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	b662      	cpsie	i
 800e1fe:	603b      	str	r3, [r7, #0]
}
 800e200:	bf00      	nop
 800e202:	e7fe      	b.n	800e202 <xTaskIncrementTick+0x4a>
 800e204:	4b41      	ldr	r3, [pc, #260]	; (800e30c <xTaskIncrementTick+0x154>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	60fb      	str	r3, [r7, #12]
 800e20a:	4b41      	ldr	r3, [pc, #260]	; (800e310 <xTaskIncrementTick+0x158>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a3f      	ldr	r2, [pc, #252]	; (800e30c <xTaskIncrementTick+0x154>)
 800e210:	6013      	str	r3, [r2, #0]
 800e212:	4a3f      	ldr	r2, [pc, #252]	; (800e310 <xTaskIncrementTick+0x158>)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	4b3e      	ldr	r3, [pc, #248]	; (800e314 <xTaskIncrementTick+0x15c>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	3301      	adds	r3, #1
 800e21e:	4a3d      	ldr	r2, [pc, #244]	; (800e314 <xTaskIncrementTick+0x15c>)
 800e220:	6013      	str	r3, [r2, #0]
 800e222:	f000 fb07 	bl	800e834 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e226:	4b3c      	ldr	r3, [pc, #240]	; (800e318 <xTaskIncrementTick+0x160>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	693a      	ldr	r2, [r7, #16]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d349      	bcc.n	800e2c4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e230:	4b36      	ldr	r3, [pc, #216]	; (800e30c <xTaskIncrementTick+0x154>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d104      	bne.n	800e244 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e23a:	4b37      	ldr	r3, [pc, #220]	; (800e318 <xTaskIncrementTick+0x160>)
 800e23c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e240:	601a      	str	r2, [r3, #0]
					break;
 800e242:	e03f      	b.n	800e2c4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e244:	4b31      	ldr	r3, [pc, #196]	; (800e30c <xTaskIncrementTick+0x154>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d203      	bcs.n	800e264 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e25c:	4a2e      	ldr	r2, [pc, #184]	; (800e318 <xTaskIncrementTick+0x160>)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e262:	e02f      	b.n	800e2c4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	3304      	adds	r3, #4
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fe ff69 	bl	800d140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e272:	2b00      	cmp	r3, #0
 800e274:	d004      	beq.n	800e280 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	3318      	adds	r3, #24
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe ff60 	bl	800d140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e284:	4b25      	ldr	r3, [pc, #148]	; (800e31c <xTaskIncrementTick+0x164>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d903      	bls.n	800e294 <xTaskIncrementTick+0xdc>
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e290:	4a22      	ldr	r2, [pc, #136]	; (800e31c <xTaskIncrementTick+0x164>)
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e298:	4613      	mov	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4413      	add	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4a1f      	ldr	r2, [pc, #124]	; (800e320 <xTaskIncrementTick+0x168>)
 800e2a2:	441a      	add	r2, r3
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	f7fe feeb 	bl	800d086 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2b4:	4b1b      	ldr	r3, [pc, #108]	; (800e324 <xTaskIncrementTick+0x16c>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d3b8      	bcc.n	800e230 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2c2:	e7b5      	b.n	800e230 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e2c4:	4b17      	ldr	r3, [pc, #92]	; (800e324 <xTaskIncrementTick+0x16c>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ca:	4915      	ldr	r1, [pc, #84]	; (800e320 <xTaskIncrementTick+0x168>)
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4413      	add	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	440b      	add	r3, r1
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d907      	bls.n	800e2ec <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	617b      	str	r3, [r7, #20]
 800e2e0:	e004      	b.n	800e2ec <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e2e2:	4b11      	ldr	r3, [pc, #68]	; (800e328 <xTaskIncrementTick+0x170>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	4a0f      	ldr	r2, [pc, #60]	; (800e328 <xTaskIncrementTick+0x170>)
 800e2ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e2ec:	4b0f      	ldr	r3, [pc, #60]	; (800e32c <xTaskIncrementTick+0x174>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e2f8:	697b      	ldr	r3, [r7, #20]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3718      	adds	r7, #24
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	2000cacc 	.word	0x2000cacc
 800e308:	2000caa8 	.word	0x2000caa8
 800e30c:	2000ca5c 	.word	0x2000ca5c
 800e310:	2000ca60 	.word	0x2000ca60
 800e314:	2000cabc 	.word	0x2000cabc
 800e318:	2000cac4 	.word	0x2000cac4
 800e31c:	2000caac 	.word	0x2000caac
 800e320:	2000c5d4 	.word	0x2000c5d4
 800e324:	2000c5d0 	.word	0x2000c5d0
 800e328:	2000cab4 	.word	0x2000cab4
 800e32c:	2000cab8 	.word	0x2000cab8

0800e330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e330:	b480      	push	{r7}
 800e332:	b085      	sub	sp, #20
 800e334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e336:	4b29      	ldr	r3, [pc, #164]	; (800e3dc <vTaskSwitchContext+0xac>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d003      	beq.n	800e346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e33e:	4b28      	ldr	r3, [pc, #160]	; (800e3e0 <vTaskSwitchContext+0xb0>)
 800e340:	2201      	movs	r2, #1
 800e342:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e344:	e043      	b.n	800e3ce <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800e346:	4b26      	ldr	r3, [pc, #152]	; (800e3e0 <vTaskSwitchContext+0xb0>)
 800e348:	2200      	movs	r2, #0
 800e34a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e34c:	4b25      	ldr	r3, [pc, #148]	; (800e3e4 <vTaskSwitchContext+0xb4>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	60fb      	str	r3, [r7, #12]
 800e352:	e012      	b.n	800e37a <vTaskSwitchContext+0x4a>
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10c      	bne.n	800e374 <vTaskSwitchContext+0x44>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	b672      	cpsid	i
 800e360:	f383 8811 	msr	BASEPRI, r3
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	b662      	cpsie	i
 800e36e:	607b      	str	r3, [r7, #4]
}
 800e370:	bf00      	nop
 800e372:	e7fe      	b.n	800e372 <vTaskSwitchContext+0x42>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	3b01      	subs	r3, #1
 800e378:	60fb      	str	r3, [r7, #12]
 800e37a:	491b      	ldr	r1, [pc, #108]	; (800e3e8 <vTaskSwitchContext+0xb8>)
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	4613      	mov	r3, r2
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	4413      	add	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	440b      	add	r3, r1
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d0e2      	beq.n	800e354 <vTaskSwitchContext+0x24>
 800e38e:	68fa      	ldr	r2, [r7, #12]
 800e390:	4613      	mov	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4a13      	ldr	r2, [pc, #76]	; (800e3e8 <vTaskSwitchContext+0xb8>)
 800e39a:	4413      	add	r3, r2
 800e39c:	60bb      	str	r3, [r7, #8]
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	685a      	ldr	r2, [r3, #4]
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	605a      	str	r2, [r3, #4]
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	685a      	ldr	r2, [r3, #4]
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	3308      	adds	r3, #8
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d104      	bne.n	800e3be <vTaskSwitchContext+0x8e>
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	605a      	str	r2, [r3, #4]
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	4a09      	ldr	r2, [pc, #36]	; (800e3ec <vTaskSwitchContext+0xbc>)
 800e3c6:	6013      	str	r3, [r2, #0]
 800e3c8:	4a06      	ldr	r2, [pc, #24]	; (800e3e4 <vTaskSwitchContext+0xb4>)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6013      	str	r3, [r2, #0]
}
 800e3ce:	bf00      	nop
 800e3d0:	3714      	adds	r7, #20
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	2000cacc 	.word	0x2000cacc
 800e3e0:	2000cab8 	.word	0x2000cab8
 800e3e4:	2000caac 	.word	0x2000caac
 800e3e8:	2000c5d4 	.word	0x2000c5d4
 800e3ec:	2000c5d0 	.word	0x2000c5d0

0800e3f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10c      	bne.n	800e41a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e404:	b672      	cpsid	i
 800e406:	f383 8811 	msr	BASEPRI, r3
 800e40a:	f3bf 8f6f 	isb	sy
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	b662      	cpsie	i
 800e414:	60fb      	str	r3, [r7, #12]
}
 800e416:	bf00      	nop
 800e418:	e7fe      	b.n	800e418 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <vTaskPlaceOnEventList+0x48>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3318      	adds	r3, #24
 800e420:	4619      	mov	r1, r3
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7fe fe53 	bl	800d0ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e428:	2101      	movs	r1, #1
 800e42a:	6838      	ldr	r0, [r7, #0]
 800e42c:	f000 fab2 	bl	800e994 <prvAddCurrentTaskToDelayedList>
}
 800e430:	bf00      	nop
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	2000c5d0 	.word	0x2000c5d0

0800e43c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10c      	bne.n	800e468 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	b672      	cpsid	i
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	b662      	cpsie	i
 800e462:	617b      	str	r3, [r7, #20]
}
 800e464:	bf00      	nop
 800e466:	e7fe      	b.n	800e466 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e468:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <vTaskPlaceOnEventListRestricted+0x58>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	3318      	adds	r3, #24
 800e46e:	4619      	mov	r1, r3
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f7fe fe08 	bl	800d086 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d002      	beq.n	800e482 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800e47c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e480:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e482:	6879      	ldr	r1, [r7, #4]
 800e484:	68b8      	ldr	r0, [r7, #8]
 800e486:	f000 fa85 	bl	800e994 <prvAddCurrentTaskToDelayedList>
	}
 800e48a:	bf00      	nop
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	2000c5d0 	.word	0x2000c5d0

0800e498 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b086      	sub	sp, #24
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d10c      	bne.n	800e4c8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b2:	b672      	cpsid	i
 800e4b4:	f383 8811 	msr	BASEPRI, r3
 800e4b8:	f3bf 8f6f 	isb	sy
 800e4bc:	f3bf 8f4f 	dsb	sy
 800e4c0:	b662      	cpsie	i
 800e4c2:	60fb      	str	r3, [r7, #12]
}
 800e4c4:	bf00      	nop
 800e4c6:	e7fe      	b.n	800e4c6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	3318      	adds	r3, #24
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe fe37 	bl	800d140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4d2:	4b1e      	ldr	r3, [pc, #120]	; (800e54c <xTaskRemoveFromEventList+0xb4>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d11d      	bne.n	800e516 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe fe2e 	bl	800d140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e8:	4b19      	ldr	r3, [pc, #100]	; (800e550 <xTaskRemoveFromEventList+0xb8>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d903      	bls.n	800e4f8 <xTaskRemoveFromEventList+0x60>
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f4:	4a16      	ldr	r2, [pc, #88]	; (800e550 <xTaskRemoveFromEventList+0xb8>)
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4a13      	ldr	r2, [pc, #76]	; (800e554 <xTaskRemoveFromEventList+0xbc>)
 800e506:	441a      	add	r2, r3
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	3304      	adds	r3, #4
 800e50c:	4619      	mov	r1, r3
 800e50e:	4610      	mov	r0, r2
 800e510:	f7fe fdb9 	bl	800d086 <vListInsertEnd>
 800e514:	e005      	b.n	800e522 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	3318      	adds	r3, #24
 800e51a:	4619      	mov	r1, r3
 800e51c:	480e      	ldr	r0, [pc, #56]	; (800e558 <xTaskRemoveFromEventList+0xc0>)
 800e51e:	f7fe fdb2 	bl	800d086 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e526:	4b0d      	ldr	r3, [pc, #52]	; (800e55c <xTaskRemoveFromEventList+0xc4>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d905      	bls.n	800e53c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e530:	2301      	movs	r3, #1
 800e532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e534:	4b0a      	ldr	r3, [pc, #40]	; (800e560 <xTaskRemoveFromEventList+0xc8>)
 800e536:	2201      	movs	r2, #1
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	e001      	b.n	800e540 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e53c:	2300      	movs	r3, #0
 800e53e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e540:	697b      	ldr	r3, [r7, #20]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3718      	adds	r7, #24
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	2000cacc 	.word	0x2000cacc
 800e550:	2000caac 	.word	0x2000caac
 800e554:	2000c5d4 	.word	0x2000c5d4
 800e558:	2000ca64 	.word	0x2000ca64
 800e55c:	2000c5d0 	.word	0x2000c5d0
 800e560:	2000cab8 	.word	0x2000cab8

0800e564 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d10c      	bne.n	800e58c <vTaskSetTimeOutState+0x28>
	__asm volatile
 800e572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e576:	b672      	cpsid	i
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	b662      	cpsie	i
 800e586:	60fb      	str	r3, [r7, #12]
}
 800e588:	bf00      	nop
 800e58a:	e7fe      	b.n	800e58a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800e58c:	f000 febe 	bl	800f30c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e590:	4b06      	ldr	r3, [pc, #24]	; (800e5ac <vTaskSetTimeOutState+0x48>)
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800e598:	4b05      	ldr	r3, [pc, #20]	; (800e5b0 <vTaskSetTimeOutState+0x4c>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800e5a0:	f000 fee8 	bl	800f374 <vPortExitCritical>
}
 800e5a4:	bf00      	nop
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	2000cabc 	.word	0x2000cabc
 800e5b0:	2000caa8 	.word	0x2000caa8

0800e5b4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5bc:	4b06      	ldr	r3, [pc, #24]	; (800e5d8 <vTaskInternalSetTimeOutState+0x24>)
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5c4:	4b05      	ldr	r3, [pc, #20]	; (800e5dc <vTaskInternalSetTimeOutState+0x28>)
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	605a      	str	r2, [r3, #4]
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	2000cabc 	.word	0x2000cabc
 800e5dc:	2000caa8 	.word	0x2000caa8

0800e5e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b088      	sub	sp, #32
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d10c      	bne.n	800e60a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f4:	b672      	cpsid	i
 800e5f6:	f383 8811 	msr	BASEPRI, r3
 800e5fa:	f3bf 8f6f 	isb	sy
 800e5fe:	f3bf 8f4f 	dsb	sy
 800e602:	b662      	cpsie	i
 800e604:	613b      	str	r3, [r7, #16]
}
 800e606:	bf00      	nop
 800e608:	e7fe      	b.n	800e608 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10c      	bne.n	800e62a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e614:	b672      	cpsid	i
 800e616:	f383 8811 	msr	BASEPRI, r3
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	b662      	cpsie	i
 800e624:	60fb      	str	r3, [r7, #12]
}
 800e626:	bf00      	nop
 800e628:	e7fe      	b.n	800e628 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e62a:	f000 fe6f 	bl	800f30c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e62e:	4b1d      	ldr	r3, [pc, #116]	; (800e6a4 <xTaskCheckForTimeOut+0xc4>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	69ba      	ldr	r2, [r7, #24]
 800e63a:	1ad3      	subs	r3, r2, r3
 800e63c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e646:	d102      	bne.n	800e64e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e648:	2300      	movs	r3, #0
 800e64a:	61fb      	str	r3, [r7, #28]
 800e64c:	e023      	b.n	800e696 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	4b15      	ldr	r3, [pc, #84]	; (800e6a8 <xTaskCheckForTimeOut+0xc8>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	429a      	cmp	r2, r3
 800e658:	d007      	beq.n	800e66a <xTaskCheckForTimeOut+0x8a>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	69ba      	ldr	r2, [r7, #24]
 800e660:	429a      	cmp	r2, r3
 800e662:	d302      	bcc.n	800e66a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e664:	2301      	movs	r3, #1
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	e015      	b.n	800e696 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	697a      	ldr	r2, [r7, #20]
 800e670:	429a      	cmp	r2, r3
 800e672:	d20b      	bcs.n	800e68c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	1ad2      	subs	r2, r2, r3
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f7ff ff97 	bl	800e5b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e686:	2300      	movs	r3, #0
 800e688:	61fb      	str	r3, [r7, #28]
 800e68a:	e004      	b.n	800e696 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2200      	movs	r2, #0
 800e690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e692:	2301      	movs	r3, #1
 800e694:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e696:	f000 fe6d 	bl	800f374 <vPortExitCritical>

	return xReturn;
 800e69a:	69fb      	ldr	r3, [r7, #28]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3720      	adds	r7, #32
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	2000caa8 	.word	0x2000caa8
 800e6a8:	2000cabc 	.word	0x2000cabc

0800e6ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6b0:	4b03      	ldr	r3, [pc, #12]	; (800e6c0 <vTaskMissedYield+0x14>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	601a      	str	r2, [r3, #0]
}
 800e6b6:	bf00      	nop
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	2000cab8 	.word	0x2000cab8

0800e6c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6cc:	f000 f852 	bl	800e774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6d0:	4b06      	ldr	r3, [pc, #24]	; (800e6ec <prvIdleTask+0x28>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d9f9      	bls.n	800e6cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e6d8:	4b05      	ldr	r3, [pc, #20]	; (800e6f0 <prvIdleTask+0x2c>)
 800e6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e6e8:	e7f0      	b.n	800e6cc <prvIdleTask+0x8>
 800e6ea:	bf00      	nop
 800e6ec:	2000c5d4 	.word	0x2000c5d4
 800e6f0:	e000ed04 	.word	0xe000ed04

0800e6f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	607b      	str	r3, [r7, #4]
 800e6fe:	e00c      	b.n	800e71a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	4613      	mov	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4413      	add	r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	4a12      	ldr	r2, [pc, #72]	; (800e754 <prvInitialiseTaskLists+0x60>)
 800e70c:	4413      	add	r3, r2
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fe fc8c 	bl	800d02c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	3301      	adds	r3, #1
 800e718:	607b      	str	r3, [r7, #4]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b37      	cmp	r3, #55	; 0x37
 800e71e:	d9ef      	bls.n	800e700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e720:	480d      	ldr	r0, [pc, #52]	; (800e758 <prvInitialiseTaskLists+0x64>)
 800e722:	f7fe fc83 	bl	800d02c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e726:	480d      	ldr	r0, [pc, #52]	; (800e75c <prvInitialiseTaskLists+0x68>)
 800e728:	f7fe fc80 	bl	800d02c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e72c:	480c      	ldr	r0, [pc, #48]	; (800e760 <prvInitialiseTaskLists+0x6c>)
 800e72e:	f7fe fc7d 	bl	800d02c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e732:	480c      	ldr	r0, [pc, #48]	; (800e764 <prvInitialiseTaskLists+0x70>)
 800e734:	f7fe fc7a 	bl	800d02c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e738:	480b      	ldr	r0, [pc, #44]	; (800e768 <prvInitialiseTaskLists+0x74>)
 800e73a:	f7fe fc77 	bl	800d02c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e73e:	4b0b      	ldr	r3, [pc, #44]	; (800e76c <prvInitialiseTaskLists+0x78>)
 800e740:	4a05      	ldr	r2, [pc, #20]	; (800e758 <prvInitialiseTaskLists+0x64>)
 800e742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e744:	4b0a      	ldr	r3, [pc, #40]	; (800e770 <prvInitialiseTaskLists+0x7c>)
 800e746:	4a05      	ldr	r2, [pc, #20]	; (800e75c <prvInitialiseTaskLists+0x68>)
 800e748:	601a      	str	r2, [r3, #0]
}
 800e74a:	bf00      	nop
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	2000c5d4 	.word	0x2000c5d4
 800e758:	2000ca34 	.word	0x2000ca34
 800e75c:	2000ca48 	.word	0x2000ca48
 800e760:	2000ca64 	.word	0x2000ca64
 800e764:	2000ca78 	.word	0x2000ca78
 800e768:	2000ca90 	.word	0x2000ca90
 800e76c:	2000ca5c 	.word	0x2000ca5c
 800e770:	2000ca60 	.word	0x2000ca60

0800e774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e77a:	e019      	b.n	800e7b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e77c:	f000 fdc6 	bl	800f30c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e780:	4b10      	ldr	r3, [pc, #64]	; (800e7c4 <prvCheckTasksWaitingTermination+0x50>)
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3304      	adds	r3, #4
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fe fcd7 	bl	800d140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e792:	4b0d      	ldr	r3, [pc, #52]	; (800e7c8 <prvCheckTasksWaitingTermination+0x54>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3b01      	subs	r3, #1
 800e798:	4a0b      	ldr	r2, [pc, #44]	; (800e7c8 <prvCheckTasksWaitingTermination+0x54>)
 800e79a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e79c:	4b0b      	ldr	r3, [pc, #44]	; (800e7cc <prvCheckTasksWaitingTermination+0x58>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	4a0a      	ldr	r2, [pc, #40]	; (800e7cc <prvCheckTasksWaitingTermination+0x58>)
 800e7a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e7a6:	f000 fde5 	bl	800f374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f810 	bl	800e7d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7b0:	4b06      	ldr	r3, [pc, #24]	; (800e7cc <prvCheckTasksWaitingTermination+0x58>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1e1      	bne.n	800e77c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7b8:	bf00      	nop
 800e7ba:	bf00      	nop
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	2000ca78 	.word	0x2000ca78
 800e7c8:	2000caa4 	.word	0x2000caa4
 800e7cc:	2000ca8c 	.word	0x2000ca8c

0800e7d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d108      	bne.n	800e7f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f000 ff86 	bl	800f6f8 <vPortFree>
				vPortFree( pxTCB );
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 ff83 	bl	800f6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7f2:	e01a      	b.n	800e82a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d103      	bne.n	800e806 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 ff7a 	bl	800f6f8 <vPortFree>
	}
 800e804:	e011      	b.n	800e82a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e80c:	2b02      	cmp	r3, #2
 800e80e:	d00c      	beq.n	800e82a <prvDeleteTCB+0x5a>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	b672      	cpsid	i
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	b662      	cpsie	i
 800e824:	60fb      	str	r3, [r7, #12]
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <prvDeleteTCB+0x58>
	}
 800e82a:	bf00      	nop
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
	...

0800e834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e83a:	4b0c      	ldr	r3, [pc, #48]	; (800e86c <prvResetNextTaskUnblockTime+0x38>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d104      	bne.n	800e84e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e844:	4b0a      	ldr	r3, [pc, #40]	; (800e870 <prvResetNextTaskUnblockTime+0x3c>)
 800e846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e84a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e84c:	e008      	b.n	800e860 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e84e:	4b07      	ldr	r3, [pc, #28]	; (800e86c <prvResetNextTaskUnblockTime+0x38>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	4a04      	ldr	r2, [pc, #16]	; (800e870 <prvResetNextTaskUnblockTime+0x3c>)
 800e85e:	6013      	str	r3, [r2, #0]
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr
 800e86c:	2000ca5c 	.word	0x2000ca5c
 800e870:	2000cac4 	.word	0x2000cac4

0800e874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e87a:	4b0b      	ldr	r3, [pc, #44]	; (800e8a8 <xTaskGetSchedulerState+0x34>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d102      	bne.n	800e888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e882:	2301      	movs	r3, #1
 800e884:	607b      	str	r3, [r7, #4]
 800e886:	e008      	b.n	800e89a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e888:	4b08      	ldr	r3, [pc, #32]	; (800e8ac <xTaskGetSchedulerState+0x38>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d102      	bne.n	800e896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e890:	2302      	movs	r3, #2
 800e892:	607b      	str	r3, [r7, #4]
 800e894:	e001      	b.n	800e89a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e896:	2300      	movs	r3, #0
 800e898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e89a:	687b      	ldr	r3, [r7, #4]
	}
 800e89c:	4618      	mov	r0, r3
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	2000cab0 	.word	0x2000cab0
 800e8ac:	2000cacc 	.word	0x2000cacc

0800e8b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d05a      	beq.n	800e97c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e8c6:	4b30      	ldr	r3, [pc, #192]	; (800e988 <xTaskPriorityDisinherit+0xd8>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	693a      	ldr	r2, [r7, #16]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d00c      	beq.n	800e8ea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d4:	b672      	cpsid	i
 800e8d6:	f383 8811 	msr	BASEPRI, r3
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	b662      	cpsie	i
 800e8e4:	60fb      	str	r3, [r7, #12]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10c      	bne.n	800e90c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	b672      	cpsid	i
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	b662      	cpsie	i
 800e906:	60bb      	str	r3, [r7, #8]
}
 800e908:	bf00      	nop
 800e90a:	e7fe      	b.n	800e90a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e910:	1e5a      	subs	r2, r3, #1
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e91e:	429a      	cmp	r2, r3
 800e920:	d02c      	beq.n	800e97c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e926:	2b00      	cmp	r3, #0
 800e928:	d128      	bne.n	800e97c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	3304      	adds	r3, #4
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fe fc06 	bl	800d140 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e940:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e94c:	4b0f      	ldr	r3, [pc, #60]	; (800e98c <xTaskPriorityDisinherit+0xdc>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	429a      	cmp	r2, r3
 800e952:	d903      	bls.n	800e95c <xTaskPriorityDisinherit+0xac>
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e958:	4a0c      	ldr	r2, [pc, #48]	; (800e98c <xTaskPriorityDisinherit+0xdc>)
 800e95a:	6013      	str	r3, [r2, #0]
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e960:	4613      	mov	r3, r2
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	4413      	add	r3, r2
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	4a09      	ldr	r2, [pc, #36]	; (800e990 <xTaskPriorityDisinherit+0xe0>)
 800e96a:	441a      	add	r2, r3
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	3304      	adds	r3, #4
 800e970:	4619      	mov	r1, r3
 800e972:	4610      	mov	r0, r2
 800e974:	f7fe fb87 	bl	800d086 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e978:	2301      	movs	r3, #1
 800e97a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e97c:	697b      	ldr	r3, [r7, #20]
	}
 800e97e:	4618      	mov	r0, r3
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	2000c5d0 	.word	0x2000c5d0
 800e98c:	2000caac 	.word	0x2000caac
 800e990:	2000c5d4 	.word	0x2000c5d4

0800e994 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e99e:	4b21      	ldr	r3, [pc, #132]	; (800ea24 <prvAddCurrentTaskToDelayedList+0x90>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9a4:	4b20      	ldr	r3, [pc, #128]	; (800ea28 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fe fbc8 	bl	800d140 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9b6:	d10a      	bne.n	800e9ce <prvAddCurrentTaskToDelayedList+0x3a>
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d007      	beq.n	800e9ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9be:	4b1a      	ldr	r3, [pc, #104]	; (800ea28 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	3304      	adds	r3, #4
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4819      	ldr	r0, [pc, #100]	; (800ea2c <prvAddCurrentTaskToDelayedList+0x98>)
 800e9c8:	f7fe fb5d 	bl	800d086 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9cc:	e026      	b.n	800ea1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9d6:	4b14      	ldr	r3, [pc, #80]	; (800ea28 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	68ba      	ldr	r2, [r7, #8]
 800e9dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d209      	bcs.n	800e9fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9e6:	4b12      	ldr	r3, [pc, #72]	; (800ea30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ea28 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	3304      	adds	r3, #4
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	4610      	mov	r0, r2
 800e9f4:	f7fe fb6b 	bl	800d0ce <vListInsert>
}
 800e9f8:	e010      	b.n	800ea1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9fa:	4b0e      	ldr	r3, [pc, #56]	; (800ea34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	4b0a      	ldr	r3, [pc, #40]	; (800ea28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	3304      	adds	r3, #4
 800ea04:	4619      	mov	r1, r3
 800ea06:	4610      	mov	r0, r2
 800ea08:	f7fe fb61 	bl	800d0ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	; (800ea38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d202      	bcs.n	800ea1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ea16:	4a08      	ldr	r2, [pc, #32]	; (800ea38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	6013      	str	r3, [r2, #0]
}
 800ea1c:	bf00      	nop
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	2000caa8 	.word	0x2000caa8
 800ea28:	2000c5d0 	.word	0x2000c5d0
 800ea2c:	2000ca90 	.word	0x2000ca90
 800ea30:	2000ca60 	.word	0x2000ca60
 800ea34:	2000ca5c 	.word	0x2000ca5c
 800ea38:	2000cac4 	.word	0x2000cac4

0800ea3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b08a      	sub	sp, #40	; 0x28
 800ea40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea46:	f000 fb15 	bl	800f074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea4a:	4b1d      	ldr	r3, [pc, #116]	; (800eac0 <xTimerCreateTimerTask+0x84>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d021      	beq.n	800ea96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea52:	2300      	movs	r3, #0
 800ea54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea56:	2300      	movs	r3, #0
 800ea58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea5a:	1d3a      	adds	r2, r7, #4
 800ea5c:	f107 0108 	add.w	r1, r7, #8
 800ea60:	f107 030c 	add.w	r3, r7, #12
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe fac7 	bl	800cff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea6a:	6879      	ldr	r1, [r7, #4]
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	9202      	str	r2, [sp, #8]
 800ea72:	9301      	str	r3, [sp, #4]
 800ea74:	2302      	movs	r3, #2
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	2300      	movs	r3, #0
 800ea7a:	460a      	mov	r2, r1
 800ea7c:	4911      	ldr	r1, [pc, #68]	; (800eac4 <xTimerCreateTimerTask+0x88>)
 800ea7e:	4812      	ldr	r0, [pc, #72]	; (800eac8 <xTimerCreateTimerTask+0x8c>)
 800ea80:	f7ff f892 	bl	800dba8 <xTaskCreateStatic>
 800ea84:	4603      	mov	r3, r0
 800ea86:	4a11      	ldr	r2, [pc, #68]	; (800eacc <xTimerCreateTimerTask+0x90>)
 800ea88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea8a:	4b10      	ldr	r3, [pc, #64]	; (800eacc <xTimerCreateTimerTask+0x90>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d001      	beq.n	800ea96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea92:	2301      	movs	r3, #1
 800ea94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d10c      	bne.n	800eab6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ea9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa0:	b672      	cpsid	i
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	b662      	cpsie	i
 800eab0:	613b      	str	r3, [r7, #16]
}
 800eab2:	bf00      	nop
 800eab4:	e7fe      	b.n	800eab4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800eab6:	697b      	ldr	r3, [r7, #20]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	2000cb00 	.word	0x2000cb00
 800eac4:	0802345c 	.word	0x0802345c
 800eac8:	0800ec0d 	.word	0x0800ec0d
 800eacc:	2000cb04 	.word	0x2000cb04

0800ead0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b08a      	sub	sp, #40	; 0x28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eade:	2300      	movs	r3, #0
 800eae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10c      	bne.n	800eb02 <xTimerGenericCommand+0x32>
	__asm volatile
 800eae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaec:	b672      	cpsid	i
 800eaee:	f383 8811 	msr	BASEPRI, r3
 800eaf2:	f3bf 8f6f 	isb	sy
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	b662      	cpsie	i
 800eafc:	623b      	str	r3, [r7, #32]
}
 800eafe:	bf00      	nop
 800eb00:	e7fe      	b.n	800eb00 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb02:	4b1a      	ldr	r3, [pc, #104]	; (800eb6c <xTimerGenericCommand+0x9c>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d02a      	beq.n	800eb60 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	2b05      	cmp	r3, #5
 800eb1a:	dc18      	bgt.n	800eb4e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb1c:	f7ff feaa 	bl	800e874 <xTaskGetSchedulerState>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b02      	cmp	r3, #2
 800eb24:	d109      	bne.n	800eb3a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb26:	4b11      	ldr	r3, [pc, #68]	; (800eb6c <xTimerGenericCommand+0x9c>)
 800eb28:	6818      	ldr	r0, [r3, #0]
 800eb2a:	f107 0110 	add.w	r1, r7, #16
 800eb2e:	2300      	movs	r3, #0
 800eb30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb32:	f7fe fc3f 	bl	800d3b4 <xQueueGenericSend>
 800eb36:	6278      	str	r0, [r7, #36]	; 0x24
 800eb38:	e012      	b.n	800eb60 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb3a:	4b0c      	ldr	r3, [pc, #48]	; (800eb6c <xTimerGenericCommand+0x9c>)
 800eb3c:	6818      	ldr	r0, [r3, #0]
 800eb3e:	f107 0110 	add.w	r1, r7, #16
 800eb42:	2300      	movs	r3, #0
 800eb44:	2200      	movs	r2, #0
 800eb46:	f7fe fc35 	bl	800d3b4 <xQueueGenericSend>
 800eb4a:	6278      	str	r0, [r7, #36]	; 0x24
 800eb4c:	e008      	b.n	800eb60 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb4e:	4b07      	ldr	r3, [pc, #28]	; (800eb6c <xTimerGenericCommand+0x9c>)
 800eb50:	6818      	ldr	r0, [r3, #0]
 800eb52:	f107 0110 	add.w	r1, r7, #16
 800eb56:	2300      	movs	r3, #0
 800eb58:	683a      	ldr	r2, [r7, #0]
 800eb5a:	f7fe fd31 	bl	800d5c0 <xQueueGenericSendFromISR>
 800eb5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3728      	adds	r7, #40	; 0x28
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	2000cb00 	.word	0x2000cb00

0800eb70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b088      	sub	sp, #32
 800eb74:	af02      	add	r7, sp, #8
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb7a:	4b23      	ldr	r3, [pc, #140]	; (800ec08 <prvProcessExpiredTimer+0x98>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	3304      	adds	r3, #4
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fe fad9 	bl	800d140 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb94:	f003 0304 	and.w	r3, r3, #4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d024      	beq.n	800ebe6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	699a      	ldr	r2, [r3, #24]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	18d1      	adds	r1, r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	6978      	ldr	r0, [r7, #20]
 800ebaa:	f000 f8d3 	bl	800ed54 <prvInsertTimerInActiveList>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d021      	beq.n	800ebf8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	2300      	movs	r3, #0
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	6978      	ldr	r0, [r7, #20]
 800ebc0:	f7ff ff86 	bl	800ead0 <xTimerGenericCommand>
 800ebc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d115      	bne.n	800ebf8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ebcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd0:	b672      	cpsid	i
 800ebd2:	f383 8811 	msr	BASEPRI, r3
 800ebd6:	f3bf 8f6f 	isb	sy
 800ebda:	f3bf 8f4f 	dsb	sy
 800ebde:	b662      	cpsie	i
 800ebe0:	60fb      	str	r3, [r7, #12]
}
 800ebe2:	bf00      	nop
 800ebe4:	e7fe      	b.n	800ebe4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebec:	f023 0301 	bic.w	r3, r3, #1
 800ebf0:	b2da      	uxtb	r2, r3
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	6a1b      	ldr	r3, [r3, #32]
 800ebfc:	6978      	ldr	r0, [r7, #20]
 800ebfe:	4798      	blx	r3
}
 800ec00:	bf00      	nop
 800ec02:	3718      	adds	r7, #24
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	2000caf8 	.word	0x2000caf8

0800ec0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec14:	f107 0308 	add.w	r3, r7, #8
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f857 	bl	800eccc <prvGetNextExpireTime>
 800ec1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	4619      	mov	r1, r3
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f000 f803 	bl	800ec30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec2a:	f000 f8d5 	bl	800edd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec2e:	e7f1      	b.n	800ec14 <prvTimerTask+0x8>

0800ec30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec3a:	f7ff f9ff 	bl	800e03c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec3e:	f107 0308 	add.w	r3, r7, #8
 800ec42:	4618      	mov	r0, r3
 800ec44:	f000 f866 	bl	800ed14 <prvSampleTimeNow>
 800ec48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d130      	bne.n	800ecb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10a      	bne.n	800ec6c <prvProcessTimerOrBlockTask+0x3c>
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d806      	bhi.n	800ec6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec5e:	f7ff f9fb 	bl	800e058 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec62:	68f9      	ldr	r1, [r7, #12]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7ff ff83 	bl	800eb70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec6a:	e024      	b.n	800ecb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d008      	beq.n	800ec84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec72:	4b13      	ldr	r3, [pc, #76]	; (800ecc0 <prvProcessTimerOrBlockTask+0x90>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d101      	bne.n	800ec80 <prvProcessTimerOrBlockTask+0x50>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e000      	b.n	800ec82 <prvProcessTimerOrBlockTask+0x52>
 800ec80:	2300      	movs	r3, #0
 800ec82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec84:	4b0f      	ldr	r3, [pc, #60]	; (800ecc4 <prvProcessTimerOrBlockTask+0x94>)
 800ec86:	6818      	ldr	r0, [r3, #0]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	4619      	mov	r1, r3
 800ec92:	f7fe ff55 	bl	800db40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec96:	f7ff f9df 	bl	800e058 <xTaskResumeAll>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d10a      	bne.n	800ecb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eca0:	4b09      	ldr	r3, [pc, #36]	; (800ecc8 <prvProcessTimerOrBlockTask+0x98>)
 800eca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eca6:	601a      	str	r2, [r3, #0]
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	f3bf 8f6f 	isb	sy
}
 800ecb0:	e001      	b.n	800ecb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecb2:	f7ff f9d1 	bl	800e058 <xTaskResumeAll>
}
 800ecb6:	bf00      	nop
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	2000cafc 	.word	0x2000cafc
 800ecc4:	2000cb00 	.word	0x2000cb00
 800ecc8:	e000ed04 	.word	0xe000ed04

0800eccc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eccc:	b480      	push	{r7}
 800ecce:	b085      	sub	sp, #20
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ecd4:	4b0e      	ldr	r3, [pc, #56]	; (800ed10 <prvGetNextExpireTime+0x44>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d101      	bne.n	800ece2 <prvGetNextExpireTime+0x16>
 800ecde:	2201      	movs	r2, #1
 800ece0:	e000      	b.n	800ece4 <prvGetNextExpireTime+0x18>
 800ece2:	2200      	movs	r2, #0
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d105      	bne.n	800ecfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecf0:	4b07      	ldr	r3, [pc, #28]	; (800ed10 <prvGetNextExpireTime+0x44>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	60fb      	str	r3, [r7, #12]
 800ecfa:	e001      	b.n	800ed00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed00:	68fb      	ldr	r3, [r7, #12]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3714      	adds	r7, #20
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	2000caf8 	.word	0x2000caf8

0800ed14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed1c:	f7ff fa3c 	bl	800e198 <xTaskGetTickCount>
 800ed20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed22:	4b0b      	ldr	r3, [pc, #44]	; (800ed50 <prvSampleTimeNow+0x3c>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d205      	bcs.n	800ed38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed2c:	f000 f93c 	bl	800efa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2201      	movs	r2, #1
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	e002      	b.n	800ed3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed3e:	4a04      	ldr	r2, [pc, #16]	; (800ed50 <prvSampleTimeNow+0x3c>)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed44:	68fb      	ldr	r3, [r7, #12]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	2000cb08 	.word	0x2000cb08

0800ed54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
 800ed60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed62:	2300      	movs	r3, #0
 800ed64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed72:	68ba      	ldr	r2, [r7, #8]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d812      	bhi.n	800eda0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	1ad2      	subs	r2, r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d302      	bcc.n	800ed8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	617b      	str	r3, [r7, #20]
 800ed8c:	e01b      	b.n	800edc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed8e:	4b10      	ldr	r3, [pc, #64]	; (800edd0 <prvInsertTimerInActiveList+0x7c>)
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	3304      	adds	r3, #4
 800ed96:	4619      	mov	r1, r3
 800ed98:	4610      	mov	r0, r2
 800ed9a:	f7fe f998 	bl	800d0ce <vListInsert>
 800ed9e:	e012      	b.n	800edc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d206      	bcs.n	800edb6 <prvInsertTimerInActiveList+0x62>
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	429a      	cmp	r2, r3
 800edae:	d302      	bcc.n	800edb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800edb0:	2301      	movs	r3, #1
 800edb2:	617b      	str	r3, [r7, #20]
 800edb4:	e007      	b.n	800edc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edb6:	4b07      	ldr	r3, [pc, #28]	; (800edd4 <prvInsertTimerInActiveList+0x80>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4619      	mov	r1, r3
 800edc0:	4610      	mov	r0, r2
 800edc2:	f7fe f984 	bl	800d0ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edc6:	697b      	ldr	r3, [r7, #20]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3718      	adds	r7, #24
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	2000cafc 	.word	0x2000cafc
 800edd4:	2000caf8 	.word	0x2000caf8

0800edd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b08e      	sub	sp, #56	; 0x38
 800eddc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edde:	e0d0      	b.n	800ef82 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	da1a      	bge.n	800ee1c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ede6:	1d3b      	adds	r3, r7, #4
 800ede8:	3304      	adds	r3, #4
 800edea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800edec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d10c      	bne.n	800ee0c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800edf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf6:	b672      	cpsid	i
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	b662      	cpsie	i
 800ee06:	61fb      	str	r3, [r7, #28]
}
 800ee08:	bf00      	nop
 800ee0a:	e7fe      	b.n	800ee0a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee12:	6850      	ldr	r0, [r2, #4]
 800ee14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee16:	6892      	ldr	r2, [r2, #8]
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f2c0 80af 	blt.w	800ef82 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	695b      	ldr	r3, [r3, #20]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d004      	beq.n	800ee3a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	3304      	adds	r3, #4
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fe f983 	bl	800d140 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee3a:	463b      	mov	r3, r7
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7ff ff69 	bl	800ed14 <prvSampleTimeNow>
 800ee42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b09      	cmp	r3, #9
 800ee48:	f200 809a 	bhi.w	800ef80 <prvProcessReceivedCommands+0x1a8>
 800ee4c:	a201      	add	r2, pc, #4	; (adr r2, 800ee54 <prvProcessReceivedCommands+0x7c>)
 800ee4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee52:	bf00      	nop
 800ee54:	0800ee7d 	.word	0x0800ee7d
 800ee58:	0800ee7d 	.word	0x0800ee7d
 800ee5c:	0800ee7d 	.word	0x0800ee7d
 800ee60:	0800eef5 	.word	0x0800eef5
 800ee64:	0800ef09 	.word	0x0800ef09
 800ee68:	0800ef57 	.word	0x0800ef57
 800ee6c:	0800ee7d 	.word	0x0800ee7d
 800ee70:	0800ee7d 	.word	0x0800ee7d
 800ee74:	0800eef5 	.word	0x0800eef5
 800ee78:	0800ef09 	.word	0x0800ef09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee82:	f043 0301 	orr.w	r3, r3, #1
 800ee86:	b2da      	uxtb	r2, r3
 800ee88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee8e:	68ba      	ldr	r2, [r7, #8]
 800ee90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	18d1      	adds	r1, r2, r3
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee9c:	f7ff ff5a 	bl	800ed54 <prvInsertTimerInActiveList>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d06d      	beq.n	800ef82 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeb4:	f003 0304 	and.w	r3, r3, #4
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d062      	beq.n	800ef82 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec0:	699b      	ldr	r3, [r3, #24]
 800eec2:	441a      	add	r2, r3
 800eec4:	2300      	movs	r3, #0
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	2300      	movs	r3, #0
 800eeca:	2100      	movs	r1, #0
 800eecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eece:	f7ff fdff 	bl	800ead0 <xTimerGenericCommand>
 800eed2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d153      	bne.n	800ef82 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eede:	b672      	cpsid	i
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	b662      	cpsie	i
 800eeee:	61bb      	str	r3, [r7, #24]
}
 800eef0:	bf00      	nop
 800eef2:	e7fe      	b.n	800eef2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eefa:	f023 0301 	bic.w	r3, r3, #1
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ef06:	e03c      	b.n	800ef82 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef0e:	f043 0301 	orr.w	r3, r3, #1
 800ef12:	b2da      	uxtb	r2, r3
 800ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10c      	bne.n	800ef42 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	b672      	cpsid	i
 800ef2e:	f383 8811 	msr	BASEPRI, r3
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	b662      	cpsie	i
 800ef3c:	617b      	str	r3, [r7, #20]
}
 800ef3e:	bf00      	nop
 800ef40:	e7fe      	b.n	800ef40 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef44:	699a      	ldr	r2, [r3, #24]
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	18d1      	adds	r1, r2, r3
 800ef4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef50:	f7ff ff00 	bl	800ed54 <prvInsertTimerInActiveList>
					break;
 800ef54:	e015      	b.n	800ef82 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef5c:	f003 0302 	and.w	r3, r3, #2
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d103      	bne.n	800ef6c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ef64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef66:	f000 fbc7 	bl	800f6f8 <vPortFree>
 800ef6a:	e00a      	b.n	800ef82 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef72:	f023 0301 	bic.w	r3, r3, #1
 800ef76:	b2da      	uxtb	r2, r3
 800ef78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef7e:	e000      	b.n	800ef82 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800ef80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef82:	4b08      	ldr	r3, [pc, #32]	; (800efa4 <prvProcessReceivedCommands+0x1cc>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	1d39      	adds	r1, r7, #4
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fbb8 	bl	800d700 <xQueueReceive>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f47f af24 	bne.w	800ede0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ef98:	bf00      	nop
 800ef9a:	bf00      	nop
 800ef9c:	3730      	adds	r7, #48	; 0x30
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	2000cb00 	.word	0x2000cb00

0800efa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b088      	sub	sp, #32
 800efac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efae:	e04a      	b.n	800f046 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efb0:	4b2e      	ldr	r3, [pc, #184]	; (800f06c <prvSwitchTimerLists+0xc4>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efba:	4b2c      	ldr	r3, [pc, #176]	; (800f06c <prvSwitchTimerLists+0xc4>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3304      	adds	r3, #4
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fe f8b9 	bl	800d140 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efdc:	f003 0304 	and.w	r3, r3, #4
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d030      	beq.n	800f046 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	4413      	add	r3, r2
 800efec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d90e      	bls.n	800f014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f002:	4b1a      	ldr	r3, [pc, #104]	; (800f06c <prvSwitchTimerLists+0xc4>)
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3304      	adds	r3, #4
 800f00a:	4619      	mov	r1, r3
 800f00c:	4610      	mov	r0, r2
 800f00e:	f7fe f85e 	bl	800d0ce <vListInsert>
 800f012:	e018      	b.n	800f046 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f014:	2300      	movs	r3, #0
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	2300      	movs	r3, #0
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	2100      	movs	r1, #0
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7ff fd56 	bl	800ead0 <xTimerGenericCommand>
 800f024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10c      	bne.n	800f046 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f030:	b672      	cpsid	i
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	b662      	cpsie	i
 800f040:	603b      	str	r3, [r7, #0]
}
 800f042:	bf00      	nop
 800f044:	e7fe      	b.n	800f044 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f046:	4b09      	ldr	r3, [pc, #36]	; (800f06c <prvSwitchTimerLists+0xc4>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1af      	bne.n	800efb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f050:	4b06      	ldr	r3, [pc, #24]	; (800f06c <prvSwitchTimerLists+0xc4>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f056:	4b06      	ldr	r3, [pc, #24]	; (800f070 <prvSwitchTimerLists+0xc8>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a04      	ldr	r2, [pc, #16]	; (800f06c <prvSwitchTimerLists+0xc4>)
 800f05c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f05e:	4a04      	ldr	r2, [pc, #16]	; (800f070 <prvSwitchTimerLists+0xc8>)
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	6013      	str	r3, [r2, #0]
}
 800f064:	bf00      	nop
 800f066:	3718      	adds	r7, #24
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	2000caf8 	.word	0x2000caf8
 800f070:	2000cafc 	.word	0x2000cafc

0800f074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f07a:	f000 f947 	bl	800f30c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f07e:	4b15      	ldr	r3, [pc, #84]	; (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d120      	bne.n	800f0c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f086:	4814      	ldr	r0, [pc, #80]	; (800f0d8 <prvCheckForValidListAndQueue+0x64>)
 800f088:	f7fd ffd0 	bl	800d02c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f08c:	4813      	ldr	r0, [pc, #76]	; (800f0dc <prvCheckForValidListAndQueue+0x68>)
 800f08e:	f7fd ffcd 	bl	800d02c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f092:	4b13      	ldr	r3, [pc, #76]	; (800f0e0 <prvCheckForValidListAndQueue+0x6c>)
 800f094:	4a10      	ldr	r2, [pc, #64]	; (800f0d8 <prvCheckForValidListAndQueue+0x64>)
 800f096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f098:	4b12      	ldr	r3, [pc, #72]	; (800f0e4 <prvCheckForValidListAndQueue+0x70>)
 800f09a:	4a10      	ldr	r2, [pc, #64]	; (800f0dc <prvCheckForValidListAndQueue+0x68>)
 800f09c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f09e:	2300      	movs	r3, #0
 800f0a0:	9300      	str	r3, [sp, #0]
 800f0a2:	4b11      	ldr	r3, [pc, #68]	; (800f0e8 <prvCheckForValidListAndQueue+0x74>)
 800f0a4:	4a11      	ldr	r2, [pc, #68]	; (800f0ec <prvCheckForValidListAndQueue+0x78>)
 800f0a6:	2110      	movs	r1, #16
 800f0a8:	200a      	movs	r0, #10
 800f0aa:	f7fe f8dd 	bl	800d268 <xQueueGenericCreateStatic>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	4a08      	ldr	r2, [pc, #32]	; (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0b4:	4b07      	ldr	r3, [pc, #28]	; (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d005      	beq.n	800f0c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0bc:	4b05      	ldr	r3, [pc, #20]	; (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	490b      	ldr	r1, [pc, #44]	; (800f0f0 <prvCheckForValidListAndQueue+0x7c>)
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe fd12 	bl	800daec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0c8:	f000 f954 	bl	800f374 <vPortExitCritical>
}
 800f0cc:	bf00      	nop
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	2000cb00 	.word	0x2000cb00
 800f0d8:	2000cad0 	.word	0x2000cad0
 800f0dc:	2000cae4 	.word	0x2000cae4
 800f0e0:	2000caf8 	.word	0x2000caf8
 800f0e4:	2000cafc 	.word	0x2000cafc
 800f0e8:	2000cbac 	.word	0x2000cbac
 800f0ec:	2000cb0c 	.word	0x2000cb0c
 800f0f0:	08023464 	.word	0x08023464

0800f0f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	3b04      	subs	r3, #4
 800f104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f10c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3b04      	subs	r3, #4
 800f112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	f023 0201 	bic.w	r2, r3, #1
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	3b04      	subs	r3, #4
 800f122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f124:	4a0c      	ldr	r2, [pc, #48]	; (800f158 <pxPortInitialiseStack+0x64>)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	3b14      	subs	r3, #20
 800f12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	3b04      	subs	r3, #4
 800f13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f06f 0202 	mvn.w	r2, #2
 800f142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	3b20      	subs	r3, #32
 800f148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f14a:	68fb      	ldr	r3, [r7, #12]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr
 800f158:	0800f15d 	.word	0x0800f15d

0800f15c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f15c:	b480      	push	{r7}
 800f15e:	b085      	sub	sp, #20
 800f160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f166:	4b14      	ldr	r3, [pc, #80]	; (800f1b8 <prvTaskExitError+0x5c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f16e:	d00c      	beq.n	800f18a <prvTaskExitError+0x2e>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	b672      	cpsid	i
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	b662      	cpsie	i
 800f184:	60fb      	str	r3, [r7, #12]
}
 800f186:	bf00      	nop
 800f188:	e7fe      	b.n	800f188 <prvTaskExitError+0x2c>
	__asm volatile
 800f18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18e:	b672      	cpsid	i
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	b662      	cpsie	i
 800f19e:	60bb      	str	r3, [r7, #8]
}
 800f1a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f1a2:	bf00      	nop
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d0fc      	beq.n	800f1a4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f1aa:	bf00      	nop
 800f1ac:	bf00      	nop
 800f1ae:	3714      	adds	r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	200000a0 	.word	0x200000a0
 800f1bc:	00000000 	.word	0x00000000

0800f1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f1c0:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <pxCurrentTCBConst2>)
 800f1c2:	6819      	ldr	r1, [r3, #0]
 800f1c4:	6808      	ldr	r0, [r1, #0]
 800f1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ca:	f380 8809 	msr	PSP, r0
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f04f 0000 	mov.w	r0, #0
 800f1d6:	f380 8811 	msr	BASEPRI, r0
 800f1da:	4770      	bx	lr
 800f1dc:	f3af 8000 	nop.w

0800f1e0 <pxCurrentTCBConst2>:
 800f1e0:	2000c5d0 	.word	0x2000c5d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f1e4:	bf00      	nop
 800f1e6:	bf00      	nop

0800f1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f1e8:	4808      	ldr	r0, [pc, #32]	; (800f20c <prvPortStartFirstTask+0x24>)
 800f1ea:	6800      	ldr	r0, [r0, #0]
 800f1ec:	6800      	ldr	r0, [r0, #0]
 800f1ee:	f380 8808 	msr	MSP, r0
 800f1f2:	f04f 0000 	mov.w	r0, #0
 800f1f6:	f380 8814 	msr	CONTROL, r0
 800f1fa:	b662      	cpsie	i
 800f1fc:	b661      	cpsie	f
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	df00      	svc	0
 800f208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f20a:	bf00      	nop
 800f20c:	e000ed08 	.word	0xe000ed08

0800f210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f216:	4b37      	ldr	r3, [pc, #220]	; (800f2f4 <xPortStartScheduler+0xe4>)
 800f218:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	22ff      	movs	r2, #255	; 0xff
 800f226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f230:	78fb      	ldrb	r3, [r7, #3]
 800f232:	b2db      	uxtb	r3, r3
 800f234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	4b2f      	ldr	r3, [pc, #188]	; (800f2f8 <xPortStartScheduler+0xe8>)
 800f23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f23e:	4b2f      	ldr	r3, [pc, #188]	; (800f2fc <xPortStartScheduler+0xec>)
 800f240:	2207      	movs	r2, #7
 800f242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f244:	e009      	b.n	800f25a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f246:	4b2d      	ldr	r3, [pc, #180]	; (800f2fc <xPortStartScheduler+0xec>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	4a2b      	ldr	r2, [pc, #172]	; (800f2fc <xPortStartScheduler+0xec>)
 800f24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f250:	78fb      	ldrb	r3, [r7, #3]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	b2db      	uxtb	r3, r3
 800f258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f25a:	78fb      	ldrb	r3, [r7, #3]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f262:	2b80      	cmp	r3, #128	; 0x80
 800f264:	d0ef      	beq.n	800f246 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f266:	4b25      	ldr	r3, [pc, #148]	; (800f2fc <xPortStartScheduler+0xec>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f1c3 0307 	rsb	r3, r3, #7
 800f26e:	2b04      	cmp	r3, #4
 800f270:	d00c      	beq.n	800f28c <xPortStartScheduler+0x7c>
	__asm volatile
 800f272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f276:	b672      	cpsid	i
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	b662      	cpsie	i
 800f286:	60bb      	str	r3, [r7, #8]
}
 800f288:	bf00      	nop
 800f28a:	e7fe      	b.n	800f28a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f28c:	4b1b      	ldr	r3, [pc, #108]	; (800f2fc <xPortStartScheduler+0xec>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	021b      	lsls	r3, r3, #8
 800f292:	4a1a      	ldr	r2, [pc, #104]	; (800f2fc <xPortStartScheduler+0xec>)
 800f294:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f296:	4b19      	ldr	r3, [pc, #100]	; (800f2fc <xPortStartScheduler+0xec>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f29e:	4a17      	ldr	r2, [pc, #92]	; (800f2fc <xPortStartScheduler+0xec>)
 800f2a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f2aa:	4b15      	ldr	r3, [pc, #84]	; (800f300 <xPortStartScheduler+0xf0>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4a14      	ldr	r2, [pc, #80]	; (800f300 <xPortStartScheduler+0xf0>)
 800f2b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f2b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f2b6:	4b12      	ldr	r3, [pc, #72]	; (800f300 <xPortStartScheduler+0xf0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4a11      	ldr	r2, [pc, #68]	; (800f300 <xPortStartScheduler+0xf0>)
 800f2bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f2c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f2c2:	f000 f8dd 	bl	800f480 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f2c6:	4b0f      	ldr	r3, [pc, #60]	; (800f304 <xPortStartScheduler+0xf4>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f2cc:	f000 f8fc 	bl	800f4c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f2d0:	4b0d      	ldr	r3, [pc, #52]	; (800f308 <xPortStartScheduler+0xf8>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a0c      	ldr	r2, [pc, #48]	; (800f308 <xPortStartScheduler+0xf8>)
 800f2d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f2da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f2dc:	f7ff ff84 	bl	800f1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f2e0:	f7ff f826 	bl	800e330 <vTaskSwitchContext>
	prvTaskExitError();
 800f2e4:	f7ff ff3a 	bl	800f15c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	e000e400 	.word	0xe000e400
 800f2f8:	2000cbfc 	.word	0x2000cbfc
 800f2fc:	2000cc00 	.word	0x2000cc00
 800f300:	e000ed20 	.word	0xe000ed20
 800f304:	200000a0 	.word	0x200000a0
 800f308:	e000ef34 	.word	0xe000ef34

0800f30c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
	__asm volatile
 800f312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f316:	b672      	cpsid	i
 800f318:	f383 8811 	msr	BASEPRI, r3
 800f31c:	f3bf 8f6f 	isb	sy
 800f320:	f3bf 8f4f 	dsb	sy
 800f324:	b662      	cpsie	i
 800f326:	607b      	str	r3, [r7, #4]
}
 800f328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f32a:	4b10      	ldr	r3, [pc, #64]	; (800f36c <vPortEnterCritical+0x60>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	3301      	adds	r3, #1
 800f330:	4a0e      	ldr	r2, [pc, #56]	; (800f36c <vPortEnterCritical+0x60>)
 800f332:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f334:	4b0d      	ldr	r3, [pc, #52]	; (800f36c <vPortEnterCritical+0x60>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d111      	bne.n	800f360 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f33c:	4b0c      	ldr	r3, [pc, #48]	; (800f370 <vPortEnterCritical+0x64>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	b2db      	uxtb	r3, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00c      	beq.n	800f360 <vPortEnterCritical+0x54>
	__asm volatile
 800f346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34a:	b672      	cpsid	i
 800f34c:	f383 8811 	msr	BASEPRI, r3
 800f350:	f3bf 8f6f 	isb	sy
 800f354:	f3bf 8f4f 	dsb	sy
 800f358:	b662      	cpsie	i
 800f35a:	603b      	str	r3, [r7, #0]
}
 800f35c:	bf00      	nop
 800f35e:	e7fe      	b.n	800f35e <vPortEnterCritical+0x52>
	}
}
 800f360:	bf00      	nop
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	200000a0 	.word	0x200000a0
 800f370:	e000ed04 	.word	0xe000ed04

0800f374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f37a:	4b13      	ldr	r3, [pc, #76]	; (800f3c8 <vPortExitCritical+0x54>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d10c      	bne.n	800f39c <vPortExitCritical+0x28>
	__asm volatile
 800f382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f386:	b672      	cpsid	i
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	b662      	cpsie	i
 800f396:	607b      	str	r3, [r7, #4]
}
 800f398:	bf00      	nop
 800f39a:	e7fe      	b.n	800f39a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f39c:	4b0a      	ldr	r3, [pc, #40]	; (800f3c8 <vPortExitCritical+0x54>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	4a09      	ldr	r2, [pc, #36]	; (800f3c8 <vPortExitCritical+0x54>)
 800f3a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f3a6:	4b08      	ldr	r3, [pc, #32]	; (800f3c8 <vPortExitCritical+0x54>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d105      	bne.n	800f3ba <vPortExitCritical+0x46>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	f383 8811 	msr	BASEPRI, r3
}
 800f3b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f3ba:	bf00      	nop
 800f3bc:	370c      	adds	r7, #12
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	200000a0 	.word	0x200000a0
 800f3cc:	00000000 	.word	0x00000000

0800f3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f3d0:	f3ef 8009 	mrs	r0, PSP
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	4b15      	ldr	r3, [pc, #84]	; (800f430 <pxCurrentTCBConst>)
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	f01e 0f10 	tst.w	lr, #16
 800f3e0:	bf08      	it	eq
 800f3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ea:	6010      	str	r0, [r2, #0]
 800f3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3f4:	b672      	cpsid	i
 800f3f6:	f380 8811 	msr	BASEPRI, r0
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	f3bf 8f6f 	isb	sy
 800f402:	b662      	cpsie	i
 800f404:	f7fe ff94 	bl	800e330 <vTaskSwitchContext>
 800f408:	f04f 0000 	mov.w	r0, #0
 800f40c:	f380 8811 	msr	BASEPRI, r0
 800f410:	bc09      	pop	{r0, r3}
 800f412:	6819      	ldr	r1, [r3, #0]
 800f414:	6808      	ldr	r0, [r1, #0]
 800f416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41a:	f01e 0f10 	tst.w	lr, #16
 800f41e:	bf08      	it	eq
 800f420:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f424:	f380 8809 	msr	PSP, r0
 800f428:	f3bf 8f6f 	isb	sy
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop

0800f430 <pxCurrentTCBConst>:
 800f430:	2000c5d0 	.word	0x2000c5d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f434:	bf00      	nop
 800f436:	bf00      	nop

0800f438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
	__asm volatile
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	b672      	cpsid	i
 800f444:	f383 8811 	msr	BASEPRI, r3
 800f448:	f3bf 8f6f 	isb	sy
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	b662      	cpsie	i
 800f452:	607b      	str	r3, [r7, #4]
}
 800f454:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f456:	f7fe feaf 	bl	800e1b8 <xTaskIncrementTick>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d003      	beq.n	800f468 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f460:	4b06      	ldr	r3, [pc, #24]	; (800f47c <SysTick_Handler+0x44>)
 800f462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f466:	601a      	str	r2, [r3, #0]
 800f468:	2300      	movs	r3, #0
 800f46a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	f383 8811 	msr	BASEPRI, r3
}
 800f472:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f474:	bf00      	nop
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	e000ed04 	.word	0xe000ed04

0800f480 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f480:	b480      	push	{r7}
 800f482:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f484:	4b0b      	ldr	r3, [pc, #44]	; (800f4b4 <vPortSetupTimerInterrupt+0x34>)
 800f486:	2200      	movs	r2, #0
 800f488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f48a:	4b0b      	ldr	r3, [pc, #44]	; (800f4b8 <vPortSetupTimerInterrupt+0x38>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f490:	4b0a      	ldr	r3, [pc, #40]	; (800f4bc <vPortSetupTimerInterrupt+0x3c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a0a      	ldr	r2, [pc, #40]	; (800f4c0 <vPortSetupTimerInterrupt+0x40>)
 800f496:	fba2 2303 	umull	r2, r3, r2, r3
 800f49a:	099b      	lsrs	r3, r3, #6
 800f49c:	4a09      	ldr	r2, [pc, #36]	; (800f4c4 <vPortSetupTimerInterrupt+0x44>)
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f4a2:	4b04      	ldr	r3, [pc, #16]	; (800f4b4 <vPortSetupTimerInterrupt+0x34>)
 800f4a4:	2207      	movs	r2, #7
 800f4a6:	601a      	str	r2, [r3, #0]
}
 800f4a8:	bf00      	nop
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	e000e010 	.word	0xe000e010
 800f4b8:	e000e018 	.word	0xe000e018
 800f4bc:	20000008 	.word	0x20000008
 800f4c0:	10624dd3 	.word	0x10624dd3
 800f4c4:	e000e014 	.word	0xe000e014

0800f4c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f4c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f4d8 <vPortEnableVFP+0x10>
 800f4cc:	6801      	ldr	r1, [r0, #0]
 800f4ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f4d2:	6001      	str	r1, [r0, #0]
 800f4d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f4d6:	bf00      	nop
 800f4d8:	e000ed88 	.word	0xe000ed88

0800f4dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f4e2:	f3ef 8305 	mrs	r3, IPSR
 800f4e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2b0f      	cmp	r3, #15
 800f4ec:	d916      	bls.n	800f51c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f4ee:	4a19      	ldr	r2, [pc, #100]	; (800f554 <vPortValidateInterruptPriority+0x78>)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4f8:	4b17      	ldr	r3, [pc, #92]	; (800f558 <vPortValidateInterruptPriority+0x7c>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	7afa      	ldrb	r2, [r7, #11]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d20c      	bcs.n	800f51c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f506:	b672      	cpsid	i
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	b662      	cpsie	i
 800f516:	607b      	str	r3, [r7, #4]
}
 800f518:	bf00      	nop
 800f51a:	e7fe      	b.n	800f51a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f51c:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <vPortValidateInterruptPriority+0x80>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f524:	4b0e      	ldr	r3, [pc, #56]	; (800f560 <vPortValidateInterruptPriority+0x84>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d90c      	bls.n	800f546 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f530:	b672      	cpsid	i
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	b662      	cpsie	i
 800f540:	603b      	str	r3, [r7, #0]
}
 800f542:	bf00      	nop
 800f544:	e7fe      	b.n	800f544 <vPortValidateInterruptPriority+0x68>
	}
 800f546:	bf00      	nop
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	e000e3f0 	.word	0xe000e3f0
 800f558:	2000cbfc 	.word	0x2000cbfc
 800f55c:	e000ed0c 	.word	0xe000ed0c
 800f560:	2000cc00 	.word	0x2000cc00

0800f564 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f56c:	2300      	movs	r3, #0
 800f56e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f570:	f7fe fd64 	bl	800e03c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f574:	4b5b      	ldr	r3, [pc, #364]	; (800f6e4 <pvPortMalloc+0x180>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d101      	bne.n	800f580 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f57c:	f000 f91a 	bl	800f7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f580:	4b59      	ldr	r3, [pc, #356]	; (800f6e8 <pvPortMalloc+0x184>)
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4013      	ands	r3, r2
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f040 8092 	bne.w	800f6b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d01f      	beq.n	800f5d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f594:	2208      	movs	r2, #8
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4413      	add	r3, r2
 800f59a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f003 0307 	and.w	r3, r3, #7
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d016      	beq.n	800f5d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f023 0307 	bic.w	r3, r3, #7
 800f5ac:	3308      	adds	r3, #8
 800f5ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f003 0307 	and.w	r3, r3, #7
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00c      	beq.n	800f5d4 <pvPortMalloc+0x70>
	__asm volatile
 800f5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5be:	b672      	cpsid	i
 800f5c0:	f383 8811 	msr	BASEPRI, r3
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	f3bf 8f4f 	dsb	sy
 800f5cc:	b662      	cpsie	i
 800f5ce:	617b      	str	r3, [r7, #20]
}
 800f5d0:	bf00      	nop
 800f5d2:	e7fe      	b.n	800f5d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d06b      	beq.n	800f6b2 <pvPortMalloc+0x14e>
 800f5da:	4b44      	ldr	r3, [pc, #272]	; (800f6ec <pvPortMalloc+0x188>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d866      	bhi.n	800f6b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f5e4:	4b42      	ldr	r3, [pc, #264]	; (800f6f0 <pvPortMalloc+0x18c>)
 800f5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f5e8:	4b41      	ldr	r3, [pc, #260]	; (800f6f0 <pvPortMalloc+0x18c>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5ee:	e004      	b.n	800f5fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	429a      	cmp	r2, r3
 800f602:	d903      	bls.n	800f60c <pvPortMalloc+0xa8>
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1f1      	bne.n	800f5f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f60c:	4b35      	ldr	r3, [pc, #212]	; (800f6e4 <pvPortMalloc+0x180>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f612:	429a      	cmp	r2, r3
 800f614:	d04d      	beq.n	800f6b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f616:	6a3b      	ldr	r3, [r7, #32]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2208      	movs	r2, #8
 800f61c:	4413      	add	r3, r2
 800f61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	6a3b      	ldr	r3, [r7, #32]
 800f626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	685a      	ldr	r2, [r3, #4]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	1ad2      	subs	r2, r2, r3
 800f630:	2308      	movs	r3, #8
 800f632:	005b      	lsls	r3, r3, #1
 800f634:	429a      	cmp	r2, r3
 800f636:	d921      	bls.n	800f67c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4413      	add	r3, r2
 800f63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	f003 0307 	and.w	r3, r3, #7
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00c      	beq.n	800f664 <pvPortMalloc+0x100>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64e:	b672      	cpsid	i
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	b662      	cpsie	i
 800f65e:	613b      	str	r3, [r7, #16]
}
 800f660:	bf00      	nop
 800f662:	e7fe      	b.n	800f662 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f666:	685a      	ldr	r2, [r3, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	1ad2      	subs	r2, r2, r3
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f676:	69b8      	ldr	r0, [r7, #24]
 800f678:	f000 f8fe 	bl	800f878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f67c:	4b1b      	ldr	r3, [pc, #108]	; (800f6ec <pvPortMalloc+0x188>)
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	4a19      	ldr	r2, [pc, #100]	; (800f6ec <pvPortMalloc+0x188>)
 800f688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f68a:	4b18      	ldr	r3, [pc, #96]	; (800f6ec <pvPortMalloc+0x188>)
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	4b19      	ldr	r3, [pc, #100]	; (800f6f4 <pvPortMalloc+0x190>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d203      	bcs.n	800f69e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f696:	4b15      	ldr	r3, [pc, #84]	; (800f6ec <pvPortMalloc+0x188>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a16      	ldr	r2, [pc, #88]	; (800f6f4 <pvPortMalloc+0x190>)
 800f69c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	4b11      	ldr	r3, [pc, #68]	; (800f6e8 <pvPortMalloc+0x184>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	431a      	orrs	r2, r3
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f6b2:	f7fe fcd1 	bl	800e058 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	f003 0307 	and.w	r3, r3, #7
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00c      	beq.n	800f6da <pvPortMalloc+0x176>
	__asm volatile
 800f6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c4:	b672      	cpsid	i
 800f6c6:	f383 8811 	msr	BASEPRI, r3
 800f6ca:	f3bf 8f6f 	isb	sy
 800f6ce:	f3bf 8f4f 	dsb	sy
 800f6d2:	b662      	cpsie	i
 800f6d4:	60fb      	str	r3, [r7, #12]
}
 800f6d6:	bf00      	nop
 800f6d8:	e7fe      	b.n	800f6d8 <pvPortMalloc+0x174>
	return pvReturn;
 800f6da:	69fb      	ldr	r3, [r7, #28]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3728      	adds	r7, #40	; 0x28
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	2001080c 	.word	0x2001080c
 800f6e8:	20010818 	.word	0x20010818
 800f6ec:	20010810 	.word	0x20010810
 800f6f0:	20010804 	.word	0x20010804
 800f6f4:	20010814 	.word	0x20010814

0800f6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d04c      	beq.n	800f7a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f70a:	2308      	movs	r3, #8
 800f70c:	425b      	negs	r3, r3
 800f70e:	697a      	ldr	r2, [r7, #20]
 800f710:	4413      	add	r3, r2
 800f712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	4b23      	ldr	r3, [pc, #140]	; (800f7ac <vPortFree+0xb4>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4013      	ands	r3, r2
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10c      	bne.n	800f740 <vPortFree+0x48>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72a:	b672      	cpsid	i
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	b662      	cpsie	i
 800f73a:	60fb      	str	r3, [r7, #12]
}
 800f73c:	bf00      	nop
 800f73e:	e7fe      	b.n	800f73e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00c      	beq.n	800f762 <vPortFree+0x6a>
	__asm volatile
 800f748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74c:	b672      	cpsid	i
 800f74e:	f383 8811 	msr	BASEPRI, r3
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	f3bf 8f4f 	dsb	sy
 800f75a:	b662      	cpsie	i
 800f75c:	60bb      	str	r3, [r7, #8]
}
 800f75e:	bf00      	nop
 800f760:	e7fe      	b.n	800f760 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	685a      	ldr	r2, [r3, #4]
 800f766:	4b11      	ldr	r3, [pc, #68]	; (800f7ac <vPortFree+0xb4>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4013      	ands	r3, r2
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d019      	beq.n	800f7a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d115      	bne.n	800f7a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	685a      	ldr	r2, [r3, #4]
 800f77c:	4b0b      	ldr	r3, [pc, #44]	; (800f7ac <vPortFree+0xb4>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	43db      	mvns	r3, r3
 800f782:	401a      	ands	r2, r3
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f788:	f7fe fc58 	bl	800e03c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	685a      	ldr	r2, [r3, #4]
 800f790:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <vPortFree+0xb8>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4413      	add	r3, r2
 800f796:	4a06      	ldr	r2, [pc, #24]	; (800f7b0 <vPortFree+0xb8>)
 800f798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f79a:	6938      	ldr	r0, [r7, #16]
 800f79c:	f000 f86c 	bl	800f878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f7a0:	f7fe fc5a 	bl	800e058 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f7a4:	bf00      	nop
 800f7a6:	3718      	adds	r7, #24
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	20010818 	.word	0x20010818
 800f7b0:	20010810 	.word	0x20010810

0800f7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f7ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f7c0:	4b27      	ldr	r3, [pc, #156]	; (800f860 <prvHeapInit+0xac>)
 800f7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f003 0307 	and.w	r3, r3, #7
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00c      	beq.n	800f7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	3307      	adds	r3, #7
 800f7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f023 0307 	bic.w	r3, r3, #7
 800f7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f7dc:	68ba      	ldr	r2, [r7, #8]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	4a1f      	ldr	r2, [pc, #124]	; (800f860 <prvHeapInit+0xac>)
 800f7e4:	4413      	add	r3, r2
 800f7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f7ec:	4a1d      	ldr	r2, [pc, #116]	; (800f864 <prvHeapInit+0xb0>)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7f2:	4b1c      	ldr	r3, [pc, #112]	; (800f864 <prvHeapInit+0xb0>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f800:	2208      	movs	r2, #8
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	1a9b      	subs	r3, r3, r2
 800f806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f023 0307 	bic.w	r3, r3, #7
 800f80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	4a15      	ldr	r2, [pc, #84]	; (800f868 <prvHeapInit+0xb4>)
 800f814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f816:	4b14      	ldr	r3, [pc, #80]	; (800f868 <prvHeapInit+0xb4>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2200      	movs	r2, #0
 800f81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f81e:	4b12      	ldr	r3, [pc, #72]	; (800f868 <prvHeapInit+0xb4>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2200      	movs	r2, #0
 800f824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	1ad2      	subs	r2, r2, r3
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f834:	4b0c      	ldr	r3, [pc, #48]	; (800f868 <prvHeapInit+0xb4>)
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	4a0a      	ldr	r2, [pc, #40]	; (800f86c <prvHeapInit+0xb8>)
 800f842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	4a09      	ldr	r2, [pc, #36]	; (800f870 <prvHeapInit+0xbc>)
 800f84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f84c:	4b09      	ldr	r3, [pc, #36]	; (800f874 <prvHeapInit+0xc0>)
 800f84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f852:	601a      	str	r2, [r3, #0]
}
 800f854:	bf00      	nop
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	2000cc04 	.word	0x2000cc04
 800f864:	20010804 	.word	0x20010804
 800f868:	2001080c 	.word	0x2001080c
 800f86c:	20010814 	.word	0x20010814
 800f870:	20010810 	.word	0x20010810
 800f874:	20010818 	.word	0x20010818

0800f878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f880:	4b28      	ldr	r3, [pc, #160]	; (800f924 <prvInsertBlockIntoFreeList+0xac>)
 800f882:	60fb      	str	r3, [r7, #12]
 800f884:	e002      	b.n	800f88c <prvInsertBlockIntoFreeList+0x14>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	60fb      	str	r3, [r7, #12]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	429a      	cmp	r2, r3
 800f894:	d8f7      	bhi.n	800f886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d108      	bne.n	800f8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	441a      	add	r2, r3
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	441a      	add	r2, r3
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d118      	bne.n	800f900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	4b15      	ldr	r3, [pc, #84]	; (800f928 <prvInsertBlockIntoFreeList+0xb0>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d00d      	beq.n	800f8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	685a      	ldr	r2, [r3, #4]
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	441a      	add	r2, r3
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	601a      	str	r2, [r3, #0]
 800f8f4:	e008      	b.n	800f908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8f6:	4b0c      	ldr	r3, [pc, #48]	; (800f928 <prvInsertBlockIntoFreeList+0xb0>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	601a      	str	r2, [r3, #0]
 800f8fe:	e003      	b.n	800f908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f908:	68fa      	ldr	r2, [r7, #12]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d002      	beq.n	800f916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f916:	bf00      	nop
 800f918:	3714      	adds	r7, #20
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	20010804 	.word	0x20010804
 800f928:	2001080c 	.word	0x2001080c

0800f92c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f930:	2200      	movs	r2, #0
 800f932:	4912      	ldr	r1, [pc, #72]	; (800f97c <MX_USB_DEVICE_Init+0x50>)
 800f934:	4812      	ldr	r0, [pc, #72]	; (800f980 <MX_USB_DEVICE_Init+0x54>)
 800f936:	f7fb fee3 	bl	800b700 <USBD_Init>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d001      	beq.n	800f944 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f940:	f7f2 ff13 	bl	800276a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f944:	490f      	ldr	r1, [pc, #60]	; (800f984 <MX_USB_DEVICE_Init+0x58>)
 800f946:	480e      	ldr	r0, [pc, #56]	; (800f980 <MX_USB_DEVICE_Init+0x54>)
 800f948:	f7fb ff0a 	bl	800b760 <USBD_RegisterClass>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d001      	beq.n	800f956 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f952:	f7f2 ff0a 	bl	800276a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f956:	490c      	ldr	r1, [pc, #48]	; (800f988 <MX_USB_DEVICE_Init+0x5c>)
 800f958:	4809      	ldr	r0, [pc, #36]	; (800f980 <MX_USB_DEVICE_Init+0x54>)
 800f95a:	f7fb fe41 	bl	800b5e0 <USBD_CDC_RegisterInterface>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f964:	f7f2 ff01 	bl	800276a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f968:	4805      	ldr	r0, [pc, #20]	; (800f980 <MX_USB_DEVICE_Init+0x54>)
 800f96a:	f7fb ff2f 	bl	800b7cc <USBD_Start>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d001      	beq.n	800f978 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f974:	f7f2 fef9 	bl	800276a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f978:	bf00      	nop
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	200000b8 	.word	0x200000b8
 800f980:	2001081c 	.word	0x2001081c
 800f984:	20000020 	.word	0x20000020
 800f988:	200000a4 	.word	0x200000a4

0800f98c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f990:	2200      	movs	r2, #0
 800f992:	4905      	ldr	r1, [pc, #20]	; (800f9a8 <CDC_Init_FS+0x1c>)
 800f994:	4805      	ldr	r0, [pc, #20]	; (800f9ac <CDC_Init_FS+0x20>)
 800f996:	f7fb fe3d 	bl	800b614 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f99a:	4905      	ldr	r1, [pc, #20]	; (800f9b0 <CDC_Init_FS+0x24>)
 800f99c:	4803      	ldr	r0, [pc, #12]	; (800f9ac <CDC_Init_FS+0x20>)
 800f99e:	f7fb fe5b 	bl	800b658 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f9a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	200112f8 	.word	0x200112f8
 800f9ac:	2001081c 	.word	0x2001081c
 800f9b0:	20010af8 	.word	0x20010af8

0800f9b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f9b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	6039      	str	r1, [r7, #0]
 800f9ce:	71fb      	strb	r3, [r7, #7]
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f9d4:	79fb      	ldrb	r3, [r7, #7]
 800f9d6:	2b23      	cmp	r3, #35	; 0x23
 800f9d8:	d84a      	bhi.n	800fa70 <CDC_Control_FS+0xac>
 800f9da:	a201      	add	r2, pc, #4	; (adr r2, 800f9e0 <CDC_Control_FS+0x1c>)
 800f9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e0:	0800fa71 	.word	0x0800fa71
 800f9e4:	0800fa71 	.word	0x0800fa71
 800f9e8:	0800fa71 	.word	0x0800fa71
 800f9ec:	0800fa71 	.word	0x0800fa71
 800f9f0:	0800fa71 	.word	0x0800fa71
 800f9f4:	0800fa71 	.word	0x0800fa71
 800f9f8:	0800fa71 	.word	0x0800fa71
 800f9fc:	0800fa71 	.word	0x0800fa71
 800fa00:	0800fa71 	.word	0x0800fa71
 800fa04:	0800fa71 	.word	0x0800fa71
 800fa08:	0800fa71 	.word	0x0800fa71
 800fa0c:	0800fa71 	.word	0x0800fa71
 800fa10:	0800fa71 	.word	0x0800fa71
 800fa14:	0800fa71 	.word	0x0800fa71
 800fa18:	0800fa71 	.word	0x0800fa71
 800fa1c:	0800fa71 	.word	0x0800fa71
 800fa20:	0800fa71 	.word	0x0800fa71
 800fa24:	0800fa71 	.word	0x0800fa71
 800fa28:	0800fa71 	.word	0x0800fa71
 800fa2c:	0800fa71 	.word	0x0800fa71
 800fa30:	0800fa71 	.word	0x0800fa71
 800fa34:	0800fa71 	.word	0x0800fa71
 800fa38:	0800fa71 	.word	0x0800fa71
 800fa3c:	0800fa71 	.word	0x0800fa71
 800fa40:	0800fa71 	.word	0x0800fa71
 800fa44:	0800fa71 	.word	0x0800fa71
 800fa48:	0800fa71 	.word	0x0800fa71
 800fa4c:	0800fa71 	.word	0x0800fa71
 800fa50:	0800fa71 	.word	0x0800fa71
 800fa54:	0800fa71 	.word	0x0800fa71
 800fa58:	0800fa71 	.word	0x0800fa71
 800fa5c:	0800fa71 	.word	0x0800fa71
 800fa60:	0800fa71 	.word	0x0800fa71
 800fa64:	0800fa71 	.word	0x0800fa71
 800fa68:	0800fa71 	.word	0x0800fa71
 800fa6c:	0800fa71 	.word	0x0800fa71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fa70:	bf00      	nop
  }

  return (USBD_OK);
 800fa72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	4805      	ldr	r0, [pc, #20]	; (800faa4 <CDC_Receive_FS+0x24>)
 800fa8e:	f7fb fde3 	bl	800b658 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fa92:	4804      	ldr	r0, [pc, #16]	; (800faa4 <CDC_Receive_FS+0x24>)
 800fa94:	f7fb fdfe 	bl	800b694 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fa98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	2001081c 	.word	0x2001081c

0800faa8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b087      	sub	sp, #28
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	4613      	mov	r3, r2
 800fab4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fab6:	2300      	movs	r3, #0
 800fab8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800faba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	371c      	adds	r7, #28
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr
	...

0800facc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	6039      	str	r1, [r7, #0]
 800fad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	2212      	movs	r2, #18
 800fadc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fade:	4b03      	ldr	r3, [pc, #12]	; (800faec <USBD_FS_DeviceDescriptor+0x20>)
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr
 800faec:	200000d8 	.word	0x200000d8

0800faf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	4603      	mov	r3, r0
 800faf8:	6039      	str	r1, [r7, #0]
 800fafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	2204      	movs	r2, #4
 800fb00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fb02:	4b03      	ldr	r3, [pc, #12]	; (800fb10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	370c      	adds	r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr
 800fb10:	200000f8 	.word	0x200000f8

0800fb14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	6039      	str	r1, [r7, #0]
 800fb1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb20:	79fb      	ldrb	r3, [r7, #7]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d105      	bne.n	800fb32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb26:	683a      	ldr	r2, [r7, #0]
 800fb28:	4907      	ldr	r1, [pc, #28]	; (800fb48 <USBD_FS_ProductStrDescriptor+0x34>)
 800fb2a:	4808      	ldr	r0, [pc, #32]	; (800fb4c <USBD_FS_ProductStrDescriptor+0x38>)
 800fb2c:	f7fd f824 	bl	800cb78 <USBD_GetString>
 800fb30:	e004      	b.n	800fb3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	4904      	ldr	r1, [pc, #16]	; (800fb48 <USBD_FS_ProductStrDescriptor+0x34>)
 800fb36:	4805      	ldr	r0, [pc, #20]	; (800fb4c <USBD_FS_ProductStrDescriptor+0x38>)
 800fb38:	f7fd f81e 	bl	800cb78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb3c:	4b02      	ldr	r3, [pc, #8]	; (800fb48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	20011af8 	.word	0x20011af8
 800fb4c:	0802346c 	.word	0x0802346c

0800fb50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	4603      	mov	r3, r0
 800fb58:	6039      	str	r1, [r7, #0]
 800fb5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fb5c:	683a      	ldr	r2, [r7, #0]
 800fb5e:	4904      	ldr	r1, [pc, #16]	; (800fb70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fb60:	4804      	ldr	r0, [pc, #16]	; (800fb74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fb62:	f7fd f809 	bl	800cb78 <USBD_GetString>
  return USBD_StrDesc;
 800fb66:	4b02      	ldr	r3, [pc, #8]	; (800fb70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	20011af8 	.word	0x20011af8
 800fb74:	08023484 	.word	0x08023484

0800fb78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	4603      	mov	r3, r0
 800fb80:	6039      	str	r1, [r7, #0]
 800fb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	221a      	movs	r2, #26
 800fb88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb8a:	f000 f855 	bl	800fc38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb8e:	4b02      	ldr	r3, [pc, #8]	; (800fb98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	200000fc 	.word	0x200000fc

0800fb9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	4603      	mov	r3, r0
 800fba4:	6039      	str	r1, [r7, #0]
 800fba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fba8:	79fb      	ldrb	r3, [r7, #7]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d105      	bne.n	800fbba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	4907      	ldr	r1, [pc, #28]	; (800fbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fbb2:	4808      	ldr	r0, [pc, #32]	; (800fbd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fbb4:	f7fc ffe0 	bl	800cb78 <USBD_GetString>
 800fbb8:	e004      	b.n	800fbc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fbba:	683a      	ldr	r2, [r7, #0]
 800fbbc:	4904      	ldr	r1, [pc, #16]	; (800fbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fbbe:	4805      	ldr	r0, [pc, #20]	; (800fbd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fbc0:	f7fc ffda 	bl	800cb78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbc4:	4b02      	ldr	r3, [pc, #8]	; (800fbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	20011af8 	.word	0x20011af8
 800fbd4:	08023498 	.word	0x08023498

0800fbd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	4603      	mov	r3, r0
 800fbe0:	6039      	str	r1, [r7, #0]
 800fbe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fbe4:	79fb      	ldrb	r3, [r7, #7]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d105      	bne.n	800fbf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbea:	683a      	ldr	r2, [r7, #0]
 800fbec:	4907      	ldr	r1, [pc, #28]	; (800fc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbee:	4808      	ldr	r0, [pc, #32]	; (800fc10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbf0:	f7fc ffc2 	bl	800cb78 <USBD_GetString>
 800fbf4:	e004      	b.n	800fc00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbf6:	683a      	ldr	r2, [r7, #0]
 800fbf8:	4904      	ldr	r1, [pc, #16]	; (800fc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbfa:	4805      	ldr	r0, [pc, #20]	; (800fc10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbfc:	f7fc ffbc 	bl	800cb78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc00:	4b02      	ldr	r3, [pc, #8]	; (800fc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3708      	adds	r7, #8
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	20011af8 	.word	0x20011af8
 800fc10:	080234a4 	.word	0x080234a4

0800fc14 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	6039      	str	r1, [r7, #0]
 800fc1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	220c      	movs	r2, #12
 800fc24:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fc26:	4b03      	ldr	r3, [pc, #12]	; (800fc34 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	200000ec 	.word	0x200000ec

0800fc38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fc3e:	4b0f      	ldr	r3, [pc, #60]	; (800fc7c <Get_SerialNum+0x44>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fc44:	4b0e      	ldr	r3, [pc, #56]	; (800fc80 <Get_SerialNum+0x48>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fc4a:	4b0e      	ldr	r3, [pc, #56]	; (800fc84 <Get_SerialNum+0x4c>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4413      	add	r3, r2
 800fc56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d009      	beq.n	800fc72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fc5e:	2208      	movs	r2, #8
 800fc60:	4909      	ldr	r1, [pc, #36]	; (800fc88 <Get_SerialNum+0x50>)
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f000 f814 	bl	800fc90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fc68:	2204      	movs	r2, #4
 800fc6a:	4908      	ldr	r1, [pc, #32]	; (800fc8c <Get_SerialNum+0x54>)
 800fc6c:	68b8      	ldr	r0, [r7, #8]
 800fc6e:	f000 f80f 	bl	800fc90 <IntToUnicode>
  }
}
 800fc72:	bf00      	nop
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	1ff0f420 	.word	0x1ff0f420
 800fc80:	1ff0f424 	.word	0x1ff0f424
 800fc84:	1ff0f428 	.word	0x1ff0f428
 800fc88:	200000fe 	.word	0x200000fe
 800fc8c:	2000010e 	.word	0x2000010e

0800fc90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b087      	sub	sp, #28
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	4613      	mov	r3, r2
 800fc9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fca2:	2300      	movs	r3, #0
 800fca4:	75fb      	strb	r3, [r7, #23]
 800fca6:	e027      	b.n	800fcf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	0f1b      	lsrs	r3, r3, #28
 800fcac:	2b09      	cmp	r3, #9
 800fcae:	d80b      	bhi.n	800fcc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	0f1b      	lsrs	r3, r3, #28
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	7dfb      	ldrb	r3, [r7, #23]
 800fcb8:	005b      	lsls	r3, r3, #1
 800fcba:	4619      	mov	r1, r3
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	440b      	add	r3, r1
 800fcc0:	3230      	adds	r2, #48	; 0x30
 800fcc2:	b2d2      	uxtb	r2, r2
 800fcc4:	701a      	strb	r2, [r3, #0]
 800fcc6:	e00a      	b.n	800fcde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	0f1b      	lsrs	r3, r3, #28
 800fccc:	b2da      	uxtb	r2, r3
 800fcce:	7dfb      	ldrb	r3, [r7, #23]
 800fcd0:	005b      	lsls	r3, r3, #1
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	440b      	add	r3, r1
 800fcd8:	3237      	adds	r2, #55	; 0x37
 800fcda:	b2d2      	uxtb	r2, r2
 800fcdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	011b      	lsls	r3, r3, #4
 800fce2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fce4:	7dfb      	ldrb	r3, [r7, #23]
 800fce6:	005b      	lsls	r3, r3, #1
 800fce8:	3301      	adds	r3, #1
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	4413      	add	r3, r2
 800fcee:	2200      	movs	r2, #0
 800fcf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	75fb      	strb	r3, [r7, #23]
 800fcf8:	7dfa      	ldrb	r2, [r7, #23]
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d3d3      	bcc.n	800fca8 <IntToUnicode+0x18>
  }
}
 800fd00:	bf00      	nop
 800fd02:	bf00      	nop
 800fd04:	371c      	adds	r7, #28
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
	...

0800fd10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b0ae      	sub	sp, #184	; 0xb8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	601a      	str	r2, [r3, #0]
 800fd20:	605a      	str	r2, [r3, #4]
 800fd22:	609a      	str	r2, [r3, #8]
 800fd24:	60da      	str	r2, [r3, #12]
 800fd26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fd28:	f107 0314 	add.w	r3, r7, #20
 800fd2c:	2290      	movs	r2, #144	; 0x90
 800fd2e:	2100      	movs	r1, #0
 800fd30:	4618      	mov	r0, r3
 800fd32:	f010 f817 	bl	801fd64 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fd3e:	d151      	bne.n	800fde4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800fd40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fd44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800fd46:	2300      	movs	r3, #0
 800fd48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fd4c:	f107 0314 	add.w	r3, r7, #20
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7f6 fee5 	bl	8006b20 <HAL_RCCEx_PeriphCLKConfig>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fd5c:	f7f2 fd05 	bl	800276a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd60:	4b22      	ldr	r3, [pc, #136]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd64:	4a21      	ldr	r2, [pc, #132]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fd66:	f043 0301 	orr.w	r3, r3, #1
 800fd6a:	6313      	str	r3, [r2, #48]	; 0x30
 800fd6c:	4b1f      	ldr	r3, [pc, #124]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd70:	f003 0301 	and.w	r3, r3, #1
 800fd74:	613b      	str	r3, [r7, #16]
 800fd76:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fd78:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fd7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd80:	2302      	movs	r3, #2
 800fd82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd86:	2300      	movs	r3, #0
 800fd88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd8c:	2303      	movs	r3, #3
 800fd8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd92:	230a      	movs	r3, #10
 800fd94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	4814      	ldr	r0, [pc, #80]	; (800fdf0 <HAL_PCD_MspInit+0xe0>)
 800fda0:	f7f4 fcd0 	bl	8004744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fda4:	4b11      	ldr	r3, [pc, #68]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fda8:	4a10      	ldr	r2, [pc, #64]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fdaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdae:	6353      	str	r3, [r2, #52]	; 0x34
 800fdb0:	4b0e      	ldr	r3, [pc, #56]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdb8:	60fb      	str	r3, [r7, #12]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fdbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdc0:	4a0a      	ldr	r2, [pc, #40]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fdc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fdc6:	6453      	str	r3, [r2, #68]	; 0x44
 800fdc8:	4b08      	ldr	r3, [pc, #32]	; (800fdec <HAL_PCD_MspInit+0xdc>)
 800fdca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdd0:	60bb      	str	r3, [r7, #8]
 800fdd2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	2105      	movs	r1, #5
 800fdd8:	2043      	movs	r0, #67	; 0x43
 800fdda:	f7f4 f873 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fdde:	2043      	movs	r0, #67	; 0x43
 800fde0:	f7f4 f88c 	bl	8003efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fde4:	bf00      	nop
 800fde6:	37b8      	adds	r7, #184	; 0xb8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	40023800 	.word	0x40023800
 800fdf0:	40020000 	.word	0x40020000

0800fdf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fe08:	4619      	mov	r1, r3
 800fe0a:	4610      	mov	r0, r2
 800fe0c:	f7fb fd2b 	bl	800b866 <USBD_LL_SetupStage>
}
 800fe10:	bf00      	nop
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	460b      	mov	r3, r1
 800fe22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fe2a:	78fa      	ldrb	r2, [r7, #3]
 800fe2c:	6879      	ldr	r1, [r7, #4]
 800fe2e:	4613      	mov	r3, r2
 800fe30:	00db      	lsls	r3, r3, #3
 800fe32:	4413      	add	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	440b      	add	r3, r1
 800fe38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	78fb      	ldrb	r3, [r7, #3]
 800fe40:	4619      	mov	r1, r3
 800fe42:	f7fb fd65 	bl	800b910 <USBD_LL_DataOutStage>
}
 800fe46:	bf00      	nop
 800fe48:	3708      	adds	r7, #8
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b082      	sub	sp, #8
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
 800fe56:	460b      	mov	r3, r1
 800fe58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800fe60:	78fa      	ldrb	r2, [r7, #3]
 800fe62:	6879      	ldr	r1, [r7, #4]
 800fe64:	4613      	mov	r3, r2
 800fe66:	00db      	lsls	r3, r3, #3
 800fe68:	4413      	add	r3, r2
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	440b      	add	r3, r1
 800fe6e:	334c      	adds	r3, #76	; 0x4c
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	78fb      	ldrb	r3, [r7, #3]
 800fe74:	4619      	mov	r1, r3
 800fe76:	f7fb fdfe 	bl	800ba76 <USBD_LL_DataInStage>
}
 800fe7a:	bf00      	nop
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b082      	sub	sp, #8
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fb ff32 	bl	800bcfa <USBD_LL_SOF>
}
 800fe96:	bf00      	nop
 800fe98:	3708      	adds	r7, #8
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b084      	sub	sp, #16
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fea6:	2301      	movs	r3, #1
 800fea8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d102      	bne.n	800feb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800feb2:	2300      	movs	r3, #0
 800feb4:	73fb      	strb	r3, [r7, #15]
 800feb6:	e008      	b.n	800feca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	2b02      	cmp	r3, #2
 800febe:	d102      	bne.n	800fec6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fec0:	2301      	movs	r3, #1
 800fec2:	73fb      	strb	r3, [r7, #15]
 800fec4:	e001      	b.n	800feca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fec6:	f7f2 fc50 	bl	800276a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fed0:	7bfa      	ldrb	r2, [r7, #15]
 800fed2:	4611      	mov	r1, r2
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fb fed2 	bl	800bc7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fb fe7a 	bl	800bbda <USBD_LL_Reset>
}
 800fee6:	bf00      	nop
 800fee8:	3710      	adds	r7, #16
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
	...

0800fef0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fb fecd 	bl	800bc9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	6812      	ldr	r2, [r2, #0]
 800ff12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff16:	f043 0301 	orr.w	r3, r3, #1
 800ff1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a1b      	ldr	r3, [r3, #32]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d005      	beq.n	800ff30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ff24:	4b04      	ldr	r3, [pc, #16]	; (800ff38 <HAL_PCD_SuspendCallback+0x48>)
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	4a03      	ldr	r2, [pc, #12]	; (800ff38 <HAL_PCD_SuspendCallback+0x48>)
 800ff2a:	f043 0306 	orr.w	r3, r3, #6
 800ff2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ff30:	bf00      	nop
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	e000ed00 	.word	0xe000ed00

0800ff3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fb febd 	bl	800bcca <USBD_LL_Resume>
}
 800ff50:	bf00      	nop
 800ff52:	3708      	adds	r7, #8
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ff6a:	78fa      	ldrb	r2, [r7, #3]
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fb ff15 	bl	800bd9e <USBD_LL_IsoOUTIncomplete>
}
 800ff74:	bf00      	nop
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	460b      	mov	r3, r1
 800ff86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ff8e:	78fa      	ldrb	r2, [r7, #3]
 800ff90:	4611      	mov	r1, r2
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fb fed1 	bl	800bd3a <USBD_LL_IsoINIncomplete>
}
 800ff98:	bf00      	nop
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fb ff27 	bl	800be02 <USBD_LL_DevConnected>
}
 800ffb4:	bf00      	nop
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fb ff24 	bl	800be18 <USBD_LL_DevDisconnected>
}
 800ffd0:	bf00      	nop
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d13c      	bne.n	8010062 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ffe8:	4a20      	ldr	r2, [pc, #128]	; (801006c <USBD_LL_Init+0x94>)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a1e      	ldr	r2, [pc, #120]	; (801006c <USBD_LL_Init+0x94>)
 800fff4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fff8:	4b1c      	ldr	r3, [pc, #112]	; (801006c <USBD_LL_Init+0x94>)
 800fffa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fffe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010000:	4b1a      	ldr	r3, [pc, #104]	; (801006c <USBD_LL_Init+0x94>)
 8010002:	2206      	movs	r2, #6
 8010004:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010006:	4b19      	ldr	r3, [pc, #100]	; (801006c <USBD_LL_Init+0x94>)
 8010008:	2202      	movs	r2, #2
 801000a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801000c:	4b17      	ldr	r3, [pc, #92]	; (801006c <USBD_LL_Init+0x94>)
 801000e:	2200      	movs	r2, #0
 8010010:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010012:	4b16      	ldr	r3, [pc, #88]	; (801006c <USBD_LL_Init+0x94>)
 8010014:	2202      	movs	r2, #2
 8010016:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010018:	4b14      	ldr	r3, [pc, #80]	; (801006c <USBD_LL_Init+0x94>)
 801001a:	2200      	movs	r2, #0
 801001c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801001e:	4b13      	ldr	r3, [pc, #76]	; (801006c <USBD_LL_Init+0x94>)
 8010020:	2200      	movs	r2, #0
 8010022:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010024:	4b11      	ldr	r3, [pc, #68]	; (801006c <USBD_LL_Init+0x94>)
 8010026:	2200      	movs	r2, #0
 8010028:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801002a:	4b10      	ldr	r3, [pc, #64]	; (801006c <USBD_LL_Init+0x94>)
 801002c:	2200      	movs	r2, #0
 801002e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010030:	4b0e      	ldr	r3, [pc, #56]	; (801006c <USBD_LL_Init+0x94>)
 8010032:	2200      	movs	r2, #0
 8010034:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010036:	480d      	ldr	r0, [pc, #52]	; (801006c <USBD_LL_Init+0x94>)
 8010038:	f7f4 fd63 	bl	8004b02 <HAL_PCD_Init>
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	d001      	beq.n	8010046 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010042:	f7f2 fb92 	bl	800276a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010046:	2180      	movs	r1, #128	; 0x80
 8010048:	4808      	ldr	r0, [pc, #32]	; (801006c <USBD_LL_Init+0x94>)
 801004a:	f7f5 ffde 	bl	800600a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801004e:	2240      	movs	r2, #64	; 0x40
 8010050:	2100      	movs	r1, #0
 8010052:	4806      	ldr	r0, [pc, #24]	; (801006c <USBD_LL_Init+0x94>)
 8010054:	f7f5 ff92 	bl	8005f7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010058:	2280      	movs	r2, #128	; 0x80
 801005a:	2101      	movs	r1, #1
 801005c:	4803      	ldr	r0, [pc, #12]	; (801006c <USBD_LL_Init+0x94>)
 801005e:	f7f5 ff8d 	bl	8005f7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010062:	2300      	movs	r3, #0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	20011cf8 	.word	0x20011cf8

08010070 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801007c:	2300      	movs	r3, #0
 801007e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010086:	4618      	mov	r0, r3
 8010088:	f7f4 fe5f 	bl	8004d4a <HAL_PCD_Start>
 801008c:	4603      	mov	r3, r0
 801008e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	4618      	mov	r0, r3
 8010094:	f000 f97e 	bl	8010394 <USBD_Get_USB_Status>
 8010098:	4603      	mov	r3, r0
 801009a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801009c:	7bbb      	ldrb	r3, [r7, #14]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b084      	sub	sp, #16
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	4608      	mov	r0, r1
 80100b0:	4611      	mov	r1, r2
 80100b2:	461a      	mov	r2, r3
 80100b4:	4603      	mov	r3, r0
 80100b6:	70fb      	strb	r3, [r7, #3]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70bb      	strb	r3, [r7, #2]
 80100bc:	4613      	mov	r3, r2
 80100be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100c0:	2300      	movs	r3, #0
 80100c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80100ce:	78bb      	ldrb	r3, [r7, #2]
 80100d0:	883a      	ldrh	r2, [r7, #0]
 80100d2:	78f9      	ldrb	r1, [r7, #3]
 80100d4:	f7f5 fb4c 	bl	8005770 <HAL_PCD_EP_Open>
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	4618      	mov	r0, r3
 80100e0:	f000 f958 	bl	8010394 <USBD_Get_USB_Status>
 80100e4:	4603      	mov	r3, r0
 80100e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3710      	adds	r7, #16
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b084      	sub	sp, #16
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
 80100fa:	460b      	mov	r3, r1
 80100fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100fe:	2300      	movs	r3, #0
 8010100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010102:	2300      	movs	r3, #0
 8010104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801010c:	78fa      	ldrb	r2, [r7, #3]
 801010e:	4611      	mov	r1, r2
 8010110:	4618      	mov	r0, r3
 8010112:	f7f5 fb95 	bl	8005840 <HAL_PCD_EP_Close>
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801011a:	7bfb      	ldrb	r3, [r7, #15]
 801011c:	4618      	mov	r0, r3
 801011e:	f000 f939 	bl	8010394 <USBD_Get_USB_Status>
 8010122:	4603      	mov	r3, r0
 8010124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010126:	7bbb      	ldrb	r3, [r7, #14]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010140:	2300      	movs	r3, #0
 8010142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801014a:	78fa      	ldrb	r2, [r7, #3]
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7f5 fc6d 	bl	8005a2e <HAL_PCD_EP_SetStall>
 8010154:	4603      	mov	r3, r0
 8010156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010158:	7bfb      	ldrb	r3, [r7, #15]
 801015a:	4618      	mov	r0, r3
 801015c:	f000 f91a 	bl	8010394 <USBD_Get_USB_Status>
 8010160:	4603      	mov	r3, r0
 8010162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010164:	7bbb      	ldrb	r3, [r7, #14]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801016e:	b580      	push	{r7, lr}
 8010170:	b084      	sub	sp, #16
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
 8010176:	460b      	mov	r3, r1
 8010178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801017a:	2300      	movs	r3, #0
 801017c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801017e:	2300      	movs	r3, #0
 8010180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010188:	78fa      	ldrb	r2, [r7, #3]
 801018a:	4611      	mov	r1, r2
 801018c:	4618      	mov	r0, r3
 801018e:	f7f5 fcb2 	bl	8005af6 <HAL_PCD_EP_ClrStall>
 8010192:	4603      	mov	r3, r0
 8010194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010196:	7bfb      	ldrb	r3, [r7, #15]
 8010198:	4618      	mov	r0, r3
 801019a:	f000 f8fb 	bl	8010394 <USBD_Get_USB_Status>
 801019e:	4603      	mov	r3, r0
 80101a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	460b      	mov	r3, r1
 80101b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80101be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80101c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	da0b      	bge.n	80101e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80101c8:	78fb      	ldrb	r3, [r7, #3]
 80101ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80101ce:	68f9      	ldr	r1, [r7, #12]
 80101d0:	4613      	mov	r3, r2
 80101d2:	00db      	lsls	r3, r3, #3
 80101d4:	4413      	add	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	440b      	add	r3, r1
 80101da:	333e      	adds	r3, #62	; 0x3e
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	e00b      	b.n	80101f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80101e0:	78fb      	ldrb	r3, [r7, #3]
 80101e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80101e6:	68f9      	ldr	r1, [r7, #12]
 80101e8:	4613      	mov	r3, r2
 80101ea:	00db      	lsls	r3, r3, #3
 80101ec:	4413      	add	r3, r2
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	440b      	add	r3, r1
 80101f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80101f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3714      	adds	r7, #20
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr

08010204 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	460b      	mov	r3, r1
 801020e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010210:	2300      	movs	r3, #0
 8010212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010214:	2300      	movs	r3, #0
 8010216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801021e:	78fa      	ldrb	r2, [r7, #3]
 8010220:	4611      	mov	r1, r2
 8010222:	4618      	mov	r0, r3
 8010224:	f7f5 fa7f 	bl	8005726 <HAL_PCD_SetAddress>
 8010228:	4603      	mov	r3, r0
 801022a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801022c:	7bfb      	ldrb	r3, [r7, #15]
 801022e:	4618      	mov	r0, r3
 8010230:	f000 f8b0 	bl	8010394 <USBD_Get_USB_Status>
 8010234:	4603      	mov	r3, r0
 8010236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010238:	7bbb      	ldrb	r3, [r7, #14]
}
 801023a:	4618      	mov	r0, r3
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b086      	sub	sp, #24
 8010246:	af00      	add	r7, sp, #0
 8010248:	60f8      	str	r0, [r7, #12]
 801024a:	607a      	str	r2, [r7, #4]
 801024c:	603b      	str	r3, [r7, #0]
 801024e:	460b      	mov	r3, r1
 8010250:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010252:	2300      	movs	r3, #0
 8010254:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010256:	2300      	movs	r3, #0
 8010258:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010260:	7af9      	ldrb	r1, [r7, #11]
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	f7f5 fb98 	bl	800599a <HAL_PCD_EP_Transmit>
 801026a:	4603      	mov	r3, r0
 801026c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	4618      	mov	r0, r3
 8010272:	f000 f88f 	bl	8010394 <USBD_Get_USB_Status>
 8010276:	4603      	mov	r3, r0
 8010278:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801027a:	7dbb      	ldrb	r3, [r7, #22]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3718      	adds	r7, #24
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b086      	sub	sp, #24
 8010288:	af00      	add	r7, sp, #0
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	607a      	str	r2, [r7, #4]
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	460b      	mov	r3, r1
 8010292:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010294:	2300      	movs	r3, #0
 8010296:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010298:	2300      	movs	r3, #0
 801029a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80102a2:	7af9      	ldrb	r1, [r7, #11]
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	f7f5 fb14 	bl	80058d4 <HAL_PCD_EP_Receive>
 80102ac:	4603      	mov	r3, r0
 80102ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102b0:	7dfb      	ldrb	r3, [r7, #23]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f000 f86e 	bl	8010394 <USBD_Get_USB_Status>
 80102b8:	4603      	mov	r3, r0
 80102ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80102bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3718      	adds	r7, #24
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b082      	sub	sp, #8
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
 80102ce:	460b      	mov	r3, r1
 80102d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80102d8:	78fa      	ldrb	r2, [r7, #3]
 80102da:	4611      	mov	r1, r2
 80102dc:	4618      	mov	r0, r3
 80102de:	f7f5 fb44 	bl	800596a <HAL_PCD_EP_GetRxCount>
 80102e2:	4603      	mov	r3, r0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	460b      	mov	r3, r1
 80102f6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80102f8:	78fb      	ldrb	r3, [r7, #3]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d002      	beq.n	8010304 <HAL_PCDEx_LPM_Callback+0x18>
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d01f      	beq.n	8010342 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010302:	e03b      	b.n	801037c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6a1b      	ldr	r3, [r3, #32]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d007      	beq.n	801031c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801030c:	f000 f83c 	bl	8010388 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010310:	4b1c      	ldr	r3, [pc, #112]	; (8010384 <HAL_PCDEx_LPM_Callback+0x98>)
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	4a1b      	ldr	r2, [pc, #108]	; (8010384 <HAL_PCDEx_LPM_Callback+0x98>)
 8010316:	f023 0306 	bic.w	r3, r3, #6
 801031a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	6812      	ldr	r2, [r2, #0]
 801032a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801032e:	f023 0301 	bic.w	r3, r3, #1
 8010332:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801033a:	4618      	mov	r0, r3
 801033c:	f7fb fcc5 	bl	800bcca <USBD_LL_Resume>
    break;
 8010340:	e01c      	b.n	801037c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	6812      	ldr	r2, [r2, #0]
 8010350:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010354:	f043 0301 	orr.w	r3, r3, #1
 8010358:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010360:	4618      	mov	r0, r3
 8010362:	f7fb fc9c 	bl	800bc9e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6a1b      	ldr	r3, [r3, #32]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d005      	beq.n	801037a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801036e:	4b05      	ldr	r3, [pc, #20]	; (8010384 <HAL_PCDEx_LPM_Callback+0x98>)
 8010370:	691b      	ldr	r3, [r3, #16]
 8010372:	4a04      	ldr	r2, [pc, #16]	; (8010384 <HAL_PCDEx_LPM_Callback+0x98>)
 8010374:	f043 0306 	orr.w	r3, r3, #6
 8010378:	6113      	str	r3, [r2, #16]
    break;
 801037a:	bf00      	nop
}
 801037c:	bf00      	nop
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	e000ed00 	.word	0xe000ed00

08010388 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801038c:	f7f2 f96e 	bl	800266c <SystemClock_Config>
}
 8010390:	bf00      	nop
 8010392:	bd80      	pop	{r7, pc}

08010394 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	4603      	mov	r3, r0
 801039c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801039e:	2300      	movs	r3, #0
 80103a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80103a2:	79fb      	ldrb	r3, [r7, #7]
 80103a4:	2b03      	cmp	r3, #3
 80103a6:	d817      	bhi.n	80103d8 <USBD_Get_USB_Status+0x44>
 80103a8:	a201      	add	r2, pc, #4	; (adr r2, 80103b0 <USBD_Get_USB_Status+0x1c>)
 80103aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ae:	bf00      	nop
 80103b0:	080103c1 	.word	0x080103c1
 80103b4:	080103c7 	.word	0x080103c7
 80103b8:	080103cd 	.word	0x080103cd
 80103bc:	080103d3 	.word	0x080103d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80103c0:	2300      	movs	r3, #0
 80103c2:	73fb      	strb	r3, [r7, #15]
    break;
 80103c4:	e00b      	b.n	80103de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80103c6:	2303      	movs	r3, #3
 80103c8:	73fb      	strb	r3, [r7, #15]
    break;
 80103ca:	e008      	b.n	80103de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80103cc:	2301      	movs	r3, #1
 80103ce:	73fb      	strb	r3, [r7, #15]
    break;
 80103d0:	e005      	b.n	80103de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80103d2:	2303      	movs	r3, #3
 80103d4:	73fb      	strb	r3, [r7, #15]
    break;
 80103d6:	e002      	b.n	80103de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80103d8:	2303      	movs	r3, #3
 80103da:	73fb      	strb	r3, [r7, #15]
    break;
 80103dc:	bf00      	nop
  }
  return usb_status;
 80103de:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80103ec:	4b04      	ldr	r3, [pc, #16]	; (8010400 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	b10a      	cbz	r2, 80103f6 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 80103f2:	4803      	ldr	r0, [pc, #12]	; (8010400 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80103f4:	4770      	bx	lr
 80103f6:	4a03      	ldr	r2, [pc, #12]	; (8010404 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 80103f8:	4801      	ldr	r0, [pc, #4]	; (8010400 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80103fa:	6812      	ldr	r2, [r2, #0]
 80103fc:	601a      	str	r2, [r3, #0]
 80103fe:	4770      	bx	lr
 8010400:	20000120 	.word	0x20000120
 8010404:	200008bc 	.word	0x200008bc

08010408 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8010408:	4b04      	ldr	r3, [pc, #16]	; (801041c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801040a:	4805      	ldr	r0, [pc, #20]	; (8010420 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4905      	ldr	r1, [pc, #20]	; (8010424 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 8010410:	4a05      	ldr	r2, [pc, #20]	; (8010428 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 8010412:	6003      	str	r3, [r0, #0]
 8010414:	600b      	str	r3, [r1, #0]
 8010416:	6013      	str	r3, [r2, #0]
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop
 801041c:	200008bc 	.word	0x200008bc
 8010420:	2000013c 	.word	0x2000013c
 8010424:	20000148 	.word	0x20000148
 8010428:	20000120 	.word	0x20000120

0801042c <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 801042c:	f006 b880 	b.w	8016530 <custom_test_msgs__srv__AddThreeInts_Request__init>

08010430 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 8010430:	f006 b882 	b.w	8016538 <custom_test_msgs__srv__AddThreeInts_Request__fini>

08010434 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 8010434:	f006 b882 	b.w	801653c <custom_test_msgs__srv__AddThreeInts_Response__init>

08010438 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 8010438:	f006 b884 	b.w	8016544 <custom_test_msgs__srv__AddThreeInts_Response__fini>

0801043c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 801043c:	4b04      	ldr	r3, [pc, #16]	; (8010450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	b10a      	cbz	r2, 8010446 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 8010442:	4803      	ldr	r0, [pc, #12]	; (8010450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8010444:	4770      	bx	lr
 8010446:	4a03      	ldr	r2, [pc, #12]	; (8010454 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8010448:	4801      	ldr	r0, [pc, #4]	; (8010450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801044a:	6812      	ldr	r2, [r2, #0]
 801044c:	601a      	str	r2, [r3, #0]
 801044e:	4770      	bx	lr
 8010450:	20000208 	.word	0x20000208
 8010454:	200008c0 	.word	0x200008c0

08010458 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8010458:	4b04      	ldr	r3, [pc, #16]	; (801046c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	b10a      	cbz	r2, 8010462 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 801045e:	4803      	ldr	r0, [pc, #12]	; (801046c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8010460:	4770      	bx	lr
 8010462:	4a03      	ldr	r2, [pc, #12]	; (8010470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 8010464:	4801      	ldr	r0, [pc, #4]	; (801046c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8010466:	6812      	ldr	r2, [r2, #0]
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	4770      	bx	lr
 801046c:	20000250 	.word	0x20000250
 8010470:	200008c0 	.word	0x200008c0

08010474 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8010474:	4b13      	ldr	r3, [pc, #76]	; (80104c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	b132      	cbz	r2, 8010488 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	689a      	ldr	r2, [r3, #8]
 801047e:	b152      	cbz	r2, 8010496 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8010480:	68da      	ldr	r2, [r3, #12]
 8010482:	b182      	cbz	r2, 80104a6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8010484:	480f      	ldr	r0, [pc, #60]	; (80104c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8010486:	4770      	bx	lr
 8010488:	4a0f      	ldr	r2, [pc, #60]	; (80104c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801048a:	6812      	ldr	r2, [r2, #0]
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	689a      	ldr	r2, [r3, #8]
 8010492:	2a00      	cmp	r2, #0
 8010494:	d1f4      	bne.n	8010480 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8010496:	4a0d      	ldr	r2, [pc, #52]	; (80104cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8010498:	6811      	ldr	r1, [r2, #0]
 801049a:	b179      	cbz	r1, 80104bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 801049c:	6852      	ldr	r2, [r2, #4]
 801049e:	609a      	str	r2, [r3, #8]
 80104a0:	68da      	ldr	r2, [r3, #12]
 80104a2:	2a00      	cmp	r2, #0
 80104a4:	d1ee      	bne.n	8010484 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 80104a6:	4a0a      	ldr	r2, [pc, #40]	; (80104d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 80104a8:	6811      	ldr	r1, [r2, #0]
 80104aa:	b119      	cbz	r1, 80104b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 80104ac:	6852      	ldr	r2, [r2, #4]
 80104ae:	4805      	ldr	r0, [pc, #20]	; (80104c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80104b0:	60da      	str	r2, [r3, #12]
 80104b2:	4770      	bx	lr
 80104b4:	4904      	ldr	r1, [pc, #16]	; (80104c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80104b6:	6809      	ldr	r1, [r1, #0]
 80104b8:	6011      	str	r1, [r2, #0]
 80104ba:	e7f7      	b.n	80104ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 80104bc:	4902      	ldr	r1, [pc, #8]	; (80104c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80104be:	6809      	ldr	r1, [r1, #0]
 80104c0:	6011      	str	r1, [r2, #0]
 80104c2:	e7eb      	b.n	801049c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 80104c4:	2000026c 	.word	0x2000026c
 80104c8:	200008c0 	.word	0x200008c0
 80104cc:	20000208 	.word	0x20000208
 80104d0:	20000250 	.word	0x20000250

080104d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80104d4:	4800      	ldr	r0, [pc, #0]	; (80104d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 80104d6:	4770      	bx	lr
 80104d8:	20000294 	.word	0x20000294

080104dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 80104dc:	4800      	ldr	r0, [pc, #0]	; (80104e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 80104de:	4770      	bx	lr
 80104e0:	200002a0 	.word	0x200002a0

080104e4 <_AddThreeInts_Response__max_serialized_size>:
 80104e4:	2108      	movs	r1, #8
 80104e6:	2000      	movs	r0, #0
 80104e8:	b508      	push	{r3, lr}
 80104ea:	f001 fed5 	bl	8012298 <ucdr_alignment>
 80104ee:	3008      	adds	r0, #8
 80104f0:	bd08      	pop	{r3, pc}
 80104f2:	bf00      	nop

080104f4 <_AddThreeInts_Response__cdr_deserialize>:
 80104f4:	b109      	cbz	r1, 80104fa <_AddThreeInts_Response__cdr_deserialize+0x6>
 80104f6:	f001 bc1b 	b.w	8011d30 <ucdr_deserialize_int64_t>
 80104fa:	4608      	mov	r0, r1
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop

08010500 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8010500:	b1b8      	cbz	r0, 8010532 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8010502:	b538      	push	{r3, r4, r5, lr}
 8010504:	460d      	mov	r5, r1
 8010506:	2108      	movs	r1, #8
 8010508:	4628      	mov	r0, r5
 801050a:	f001 fec5 	bl	8012298 <ucdr_alignment>
 801050e:	f105 0308 	add.w	r3, r5, #8
 8010512:	2108      	movs	r1, #8
 8010514:	f1c5 0508 	rsb	r5, r5, #8
 8010518:	181c      	adds	r4, r3, r0
 801051a:	4620      	mov	r0, r4
 801051c:	f001 febc 	bl	8012298 <ucdr_alignment>
 8010520:	2108      	movs	r1, #8
 8010522:	4408      	add	r0, r1
 8010524:	4404      	add	r4, r0
 8010526:	4620      	mov	r0, r4
 8010528:	f001 feb6 	bl	8012298 <ucdr_alignment>
 801052c:	4428      	add	r0, r5
 801052e:	4420      	add	r0, r4
 8010530:	bd38      	pop	{r3, r4, r5, pc}
 8010532:	4770      	bx	lr

08010534 <_AddThreeInts_Response__get_serialized_size>:
 8010534:	b130      	cbz	r0, 8010544 <_AddThreeInts_Response__get_serialized_size+0x10>
 8010536:	2108      	movs	r1, #8
 8010538:	2000      	movs	r0, #0
 801053a:	b508      	push	{r3, lr}
 801053c:	f001 feac 	bl	8012298 <ucdr_alignment>
 8010540:	3008      	adds	r0, #8
 8010542:	bd08      	pop	{r3, pc}
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop

08010548 <_AddThreeInts_Request__cdr_deserialize>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	460c      	mov	r4, r1
 801054c:	b171      	cbz	r1, 801056c <_AddThreeInts_Request__cdr_deserialize+0x24>
 801054e:	4605      	mov	r5, r0
 8010550:	f001 fbee 	bl	8011d30 <ucdr_deserialize_int64_t>
 8010554:	f104 0108 	add.w	r1, r4, #8
 8010558:	4628      	mov	r0, r5
 801055a:	f001 fbe9 	bl	8011d30 <ucdr_deserialize_int64_t>
 801055e:	f104 0110 	add.w	r1, r4, #16
 8010562:	4628      	mov	r0, r5
 8010564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010568:	f001 bbe2 	b.w	8011d30 <ucdr_deserialize_int64_t>
 801056c:	4608      	mov	r0, r1
 801056e:	bd38      	pop	{r3, r4, r5, pc}

08010570 <_AddThreeInts_Request__cdr_serialize>:
 8010570:	b198      	cbz	r0, 801059a <_AddThreeInts_Request__cdr_serialize+0x2a>
 8010572:	b570      	push	{r4, r5, r6, lr}
 8010574:	460d      	mov	r5, r1
 8010576:	4604      	mov	r4, r0
 8010578:	e9d0 2300 	ldrd	r2, r3, [r0]
 801057c:	4608      	mov	r0, r1
 801057e:	f001 fb07 	bl	8011b90 <ucdr_serialize_int64_t>
 8010582:	4628      	mov	r0, r5
 8010584:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8010588:	f001 fb02 	bl	8011b90 <ucdr_serialize_int64_t>
 801058c:	4628      	mov	r0, r5
 801058e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8010592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010596:	f001 bafb 	b.w	8011b90 <ucdr_serialize_int64_t>
 801059a:	4770      	bx	lr

0801059c <_AddThreeInts_Response__cdr_serialize>:
 801059c:	b120      	cbz	r0, 80105a8 <_AddThreeInts_Response__cdr_serialize+0xc>
 801059e:	e9d0 2300 	ldrd	r2, r3, [r0]
 80105a2:	4608      	mov	r0, r1
 80105a4:	f001 baf4 	b.w	8011b90 <ucdr_serialize_int64_t>
 80105a8:	4770      	bx	lr
 80105aa:	bf00      	nop

080105ac <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 80105ac:	b138      	cbz	r0, 80105be <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 80105ae:	b508      	push	{r3, lr}
 80105b0:	460b      	mov	r3, r1
 80105b2:	2108      	movs	r1, #8
 80105b4:	4618      	mov	r0, r3
 80105b6:	f001 fe6f 	bl	8012298 <ucdr_alignment>
 80105ba:	3008      	adds	r0, #8
 80105bc:	bd08      	pop	{r3, pc}
 80105be:	4770      	bx	lr

080105c0 <_AddThreeInts_Request__get_serialized_size>:
 80105c0:	b190      	cbz	r0, 80105e8 <_AddThreeInts_Request__get_serialized_size+0x28>
 80105c2:	2108      	movs	r1, #8
 80105c4:	2000      	movs	r0, #0
 80105c6:	b510      	push	{r4, lr}
 80105c8:	f001 fe66 	bl	8012298 <ucdr_alignment>
 80105cc:	2108      	movs	r1, #8
 80105ce:	1844      	adds	r4, r0, r1
 80105d0:	4620      	mov	r0, r4
 80105d2:	f001 fe61 	bl	8012298 <ucdr_alignment>
 80105d6:	2108      	movs	r1, #8
 80105d8:	4408      	add	r0, r1
 80105da:	4404      	add	r4, r0
 80105dc:	4620      	mov	r0, r4
 80105de:	f001 fe5b 	bl	8012298 <ucdr_alignment>
 80105e2:	3008      	adds	r0, #8
 80105e4:	4420      	add	r0, r4
 80105e6:	bd10      	pop	{r4, pc}
 80105e8:	4770      	bx	lr
 80105ea:	bf00      	nop

080105ec <_AddThreeInts_Request__max_serialized_size>:
 80105ec:	b538      	push	{r3, r4, r5, lr}
 80105ee:	2108      	movs	r1, #8
 80105f0:	2000      	movs	r0, #0
 80105f2:	f001 fe51 	bl	8012298 <ucdr_alignment>
 80105f6:	2108      	movs	r1, #8
 80105f8:	1845      	adds	r5, r0, r1
 80105fa:	4628      	mov	r0, r5
 80105fc:	f001 fe4c 	bl	8012298 <ucdr_alignment>
 8010600:	2108      	movs	r1, #8
 8010602:	1844      	adds	r4, r0, r1
 8010604:	442c      	add	r4, r5
 8010606:	4620      	mov	r0, r4
 8010608:	f001 fe46 	bl	8012298 <ucdr_alignment>
 801060c:	3008      	adds	r0, #8
 801060e:	4420      	add	r0, r4
 8010610:	bd38      	pop	{r3, r4, r5, pc}
 8010612:	bf00      	nop

08010614 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8010614:	4800      	ldr	r0, [pc, #0]	; (8010618 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 8010616:	4770      	bx	lr
 8010618:	20000288 	.word	0x20000288

0801061c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 801061c:	4b04      	ldr	r3, [pc, #16]	; (8010630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	b10a      	cbz	r2, 8010626 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 8010622:	4803      	ldr	r0, [pc, #12]	; (8010630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8010624:	4770      	bx	lr
 8010626:	4a03      	ldr	r2, [pc, #12]	; (8010634 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8010628:	4801      	ldr	r0, [pc, #4]	; (8010630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801062a:	6812      	ldr	r2, [r2, #0]
 801062c:	601a      	str	r2, [r3, #0]
 801062e:	4770      	bx	lr
 8010630:	200002ec 	.word	0x200002ec
 8010634:	200008bc 	.word	0x200008bc

08010638 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8010638:	4a02      	ldr	r2, [pc, #8]	; (8010644 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 801063a:	4b03      	ldr	r3, [pc, #12]	; (8010648 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 801063c:	6812      	ldr	r2, [r2, #0]
 801063e:	601a      	str	r2, [r3, #0]
 8010640:	4770      	bx	lr
 8010642:	bf00      	nop
 8010644:	200008bc 	.word	0x200008bc
 8010648:	200002ec 	.word	0x200002ec

0801064c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 801064c:	4b04      	ldr	r3, [pc, #16]	; (8010660 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	b10a      	cbz	r2, 8010656 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 8010652:	4803      	ldr	r0, [pc, #12]	; (8010660 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8010654:	4770      	bx	lr
 8010656:	4a03      	ldr	r2, [pc, #12]	; (8010664 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8010658:	4801      	ldr	r0, [pc, #4]	; (8010660 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801065a:	6812      	ldr	r2, [r2, #0]
 801065c:	601a      	str	r2, [r3, #0]
 801065e:	4770      	bx	lr
 8010660:	20000300 	.word	0x20000300
 8010664:	200008bc 	.word	0x200008bc

08010668 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8010668:	4a02      	ldr	r2, [pc, #8]	; (8010674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 801066a:	4b03      	ldr	r3, [pc, #12]	; (8010678 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 801066c:	6812      	ldr	r2, [r2, #0]
 801066e:	601a      	str	r2, [r3, #0]
 8010670:	4770      	bx	lr
 8010672:	bf00      	nop
 8010674:	200008bc 	.word	0x200008bc
 8010678:	20000300 	.word	0x20000300

0801067c <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 801067c:	f005 bf64 	b.w	8016548 <drive_msgs__msg__Omni__init>

08010680 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 8010680:	f005 bf74 	b.w	801656c <drive_msgs__msg__Omni__fini>

08010684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8010684:	4b04      	ldr	r3, [pc, #16]	; (8010698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	b10a      	cbz	r2, 801068e <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 801068a:	4803      	ldr	r0, [pc, #12]	; (8010698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801068c:	4770      	bx	lr
 801068e:	4a03      	ldr	r2, [pc, #12]	; (801069c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8010690:	4801      	ldr	r0, [pc, #4]	; (8010698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8010692:	6812      	ldr	r2, [r2, #0]
 8010694:	601a      	str	r2, [r3, #0]
 8010696:	4770      	bx	lr
 8010698:	20000438 	.word	0x20000438
 801069c:	200008c0 	.word	0x200008c0

080106a0 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 80106a0:	f005 bf68 	b.w	8016574 <drive_msgs__msg__OmniEnc__init>

080106a4 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 80106a4:	f005 bf78 	b.w	8016598 <drive_msgs__msg__OmniEnc__fini>

080106a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80106a8:	4b04      	ldr	r3, [pc, #16]	; (80106bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	b10a      	cbz	r2, 80106b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 80106ae:	4803      	ldr	r0, [pc, #12]	; (80106bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80106b0:	4770      	bx	lr
 80106b2:	4a03      	ldr	r2, [pc, #12]	; (80106c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 80106b4:	4801      	ldr	r0, [pc, #4]	; (80106bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80106b6:	6812      	ldr	r2, [r2, #0]
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	4770      	bx	lr
 80106bc:	20000624 	.word	0x20000624
 80106c0:	200008c0 	.word	0x200008c0

080106c4 <_Omni__cdr_serialize>:
 80106c4:	b330      	cbz	r0, 8010714 <_Omni__cdr_serialize+0x50>
 80106c6:	b570      	push	{r4, r5, r6, lr}
 80106c8:	6806      	ldr	r6, [r0, #0]
 80106ca:	4604      	mov	r4, r0
 80106cc:	460d      	mov	r5, r1
 80106ce:	b1f6      	cbz	r6, 801070e <_Omni__cdr_serialize+0x4a>
 80106d0:	4630      	mov	r0, r6
 80106d2:	f7ef fe15 	bl	8000300 <strlen>
 80106d6:	1c42      	adds	r2, r0, #1
 80106d8:	4631      	mov	r1, r6
 80106da:	6060      	str	r0, [r4, #4]
 80106dc:	4628      	mov	r0, r5
 80106de:	f001 fe4b 	bl	8012378 <ucdr_serialize_sequence_char>
 80106e2:	4628      	mov	r0, r5
 80106e4:	ed94 0b04 	vldr	d0, [r4, #16]
 80106e8:	f001 fbe8 	bl	8011ebc <ucdr_serialize_double>
 80106ec:	4628      	mov	r0, r5
 80106ee:	ed94 0b06 	vldr	d0, [r4, #24]
 80106f2:	f001 fbe3 	bl	8011ebc <ucdr_serialize_double>
 80106f6:	4628      	mov	r0, r5
 80106f8:	ed94 0b08 	vldr	d0, [r4, #32]
 80106fc:	f001 fbde 	bl	8011ebc <ucdr_serialize_double>
 8010700:	4628      	mov	r0, r5
 8010702:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8010706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801070a:	f001 bbd7 	b.w	8011ebc <ucdr_serialize_double>
 801070e:	4632      	mov	r2, r6
 8010710:	4630      	mov	r0, r6
 8010712:	e7e1      	b.n	80106d8 <_Omni__cdr_serialize+0x14>
 8010714:	4770      	bx	lr
 8010716:	bf00      	nop

08010718 <get_serialized_size_drive_msgs__msg__Omni>:
 8010718:	b570      	push	{r4, r5, r6, lr}
 801071a:	4604      	mov	r4, r0
 801071c:	b310      	cbz	r0, 8010764 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 801071e:	460d      	mov	r5, r1
 8010720:	2104      	movs	r1, #4
 8010722:	4628      	mov	r0, r5
 8010724:	f001 fdb8 	bl	8012298 <ucdr_alignment>
 8010728:	6866      	ldr	r6, [r4, #4]
 801072a:	1d6b      	adds	r3, r5, #5
 801072c:	2108      	movs	r1, #8
 801072e:	f1c5 0508 	rsb	r5, r5, #8
 8010732:	4433      	add	r3, r6
 8010734:	181e      	adds	r6, r3, r0
 8010736:	4630      	mov	r0, r6
 8010738:	f001 fdae 	bl	8012298 <ucdr_alignment>
 801073c:	2108      	movs	r1, #8
 801073e:	1844      	adds	r4, r0, r1
 8010740:	4426      	add	r6, r4
 8010742:	4630      	mov	r0, r6
 8010744:	f001 fda8 	bl	8012298 <ucdr_alignment>
 8010748:	2108      	movs	r1, #8
 801074a:	1844      	adds	r4, r0, r1
 801074c:	4434      	add	r4, r6
 801074e:	4620      	mov	r0, r4
 8010750:	f001 fda2 	bl	8012298 <ucdr_alignment>
 8010754:	2108      	movs	r1, #8
 8010756:	4408      	add	r0, r1
 8010758:	4404      	add	r4, r0
 801075a:	4620      	mov	r0, r4
 801075c:	f001 fd9c 	bl	8012298 <ucdr_alignment>
 8010760:	4428      	add	r0, r5
 8010762:	4420      	add	r0, r4
 8010764:	bd70      	pop	{r4, r5, r6, pc}
 8010766:	bf00      	nop

08010768 <_Omni__cdr_deserialize>:
 8010768:	b570      	push	{r4, r5, r6, lr}
 801076a:	460c      	mov	r4, r1
 801076c:	b082      	sub	sp, #8
 801076e:	b329      	cbz	r1, 80107bc <_Omni__cdr_deserialize+0x54>
 8010770:	688e      	ldr	r6, [r1, #8]
 8010772:	ab01      	add	r3, sp, #4
 8010774:	6809      	ldr	r1, [r1, #0]
 8010776:	4605      	mov	r5, r0
 8010778:	4632      	mov	r2, r6
 801077a:	f001 fe0f 	bl	801239c <ucdr_deserialize_sequence_char>
 801077e:	9b01      	ldr	r3, [sp, #4]
 8010780:	b9c0      	cbnz	r0, 80107b4 <_Omni__cdr_deserialize+0x4c>
 8010782:	429e      	cmp	r6, r3
 8010784:	d31d      	bcc.n	80107c2 <_Omni__cdr_deserialize+0x5a>
 8010786:	f104 0110 	add.w	r1, r4, #16
 801078a:	4628      	mov	r0, r5
 801078c:	f001 fc66 	bl	801205c <ucdr_deserialize_double>
 8010790:	f104 0118 	add.w	r1, r4, #24
 8010794:	4628      	mov	r0, r5
 8010796:	f001 fc61 	bl	801205c <ucdr_deserialize_double>
 801079a:	f104 0120 	add.w	r1, r4, #32
 801079e:	4628      	mov	r0, r5
 80107a0:	f001 fc5c 	bl	801205c <ucdr_deserialize_double>
 80107a4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80107a8:	4628      	mov	r0, r5
 80107aa:	b002      	add	sp, #8
 80107ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107b0:	f001 bc54 	b.w	801205c <ucdr_deserialize_double>
 80107b4:	b103      	cbz	r3, 80107b8 <_Omni__cdr_deserialize+0x50>
 80107b6:	3b01      	subs	r3, #1
 80107b8:	6063      	str	r3, [r4, #4]
 80107ba:	e7e4      	b.n	8010786 <_Omni__cdr_deserialize+0x1e>
 80107bc:	4608      	mov	r0, r1
 80107be:	b002      	add	sp, #8
 80107c0:	bd70      	pop	{r4, r5, r6, pc}
 80107c2:	2101      	movs	r1, #1
 80107c4:	75a8      	strb	r0, [r5, #22]
 80107c6:	7569      	strb	r1, [r5, #21]
 80107c8:	6060      	str	r0, [r4, #4]
 80107ca:	4628      	mov	r0, r5
 80107cc:	f001 fd7c 	bl	80122c8 <ucdr_align_to>
 80107d0:	9901      	ldr	r1, [sp, #4]
 80107d2:	4628      	mov	r0, r5
 80107d4:	f001 fdb0 	bl	8012338 <ucdr_advance_buffer>
 80107d8:	e7d5      	b.n	8010786 <_Omni__cdr_deserialize+0x1e>
 80107da:	bf00      	nop

080107dc <_Omni__max_serialized_size>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	2108      	movs	r1, #8
 80107e0:	2000      	movs	r0, #0
 80107e2:	f001 fd59 	bl	8012298 <ucdr_alignment>
 80107e6:	2108      	movs	r1, #8
 80107e8:	1845      	adds	r5, r0, r1
 80107ea:	4628      	mov	r0, r5
 80107ec:	f001 fd54 	bl	8012298 <ucdr_alignment>
 80107f0:	2108      	movs	r1, #8
 80107f2:	1844      	adds	r4, r0, r1
 80107f4:	442c      	add	r4, r5
 80107f6:	4620      	mov	r0, r4
 80107f8:	f001 fd4e 	bl	8012298 <ucdr_alignment>
 80107fc:	2108      	movs	r1, #8
 80107fe:	4408      	add	r0, r1
 8010800:	4404      	add	r4, r0
 8010802:	4620      	mov	r0, r4
 8010804:	f001 fd48 	bl	8012298 <ucdr_alignment>
 8010808:	3008      	adds	r0, #8
 801080a:	4420      	add	r0, r4
 801080c:	bd38      	pop	{r3, r4, r5, pc}
 801080e:	bf00      	nop

08010810 <_Omni__get_serialized_size>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	4604      	mov	r4, r0
 8010814:	b1f0      	cbz	r0, 8010854 <_Omni__get_serialized_size+0x44>
 8010816:	2104      	movs	r1, #4
 8010818:	2000      	movs	r0, #0
 801081a:	f001 fd3d 	bl	8012298 <ucdr_alignment>
 801081e:	6863      	ldr	r3, [r4, #4]
 8010820:	2108      	movs	r1, #8
 8010822:	3305      	adds	r3, #5
 8010824:	181d      	adds	r5, r3, r0
 8010826:	4628      	mov	r0, r5
 8010828:	f001 fd36 	bl	8012298 <ucdr_alignment>
 801082c:	2108      	movs	r1, #8
 801082e:	1844      	adds	r4, r0, r1
 8010830:	4425      	add	r5, r4
 8010832:	4628      	mov	r0, r5
 8010834:	f001 fd30 	bl	8012298 <ucdr_alignment>
 8010838:	2108      	movs	r1, #8
 801083a:	1844      	adds	r4, r0, r1
 801083c:	442c      	add	r4, r5
 801083e:	4620      	mov	r0, r4
 8010840:	f001 fd2a 	bl	8012298 <ucdr_alignment>
 8010844:	2108      	movs	r1, #8
 8010846:	4408      	add	r0, r1
 8010848:	4404      	add	r4, r0
 801084a:	4620      	mov	r0, r4
 801084c:	f001 fd24 	bl	8012298 <ucdr_alignment>
 8010850:	3008      	adds	r0, #8
 8010852:	4420      	add	r0, r4
 8010854:	bd38      	pop	{r3, r4, r5, pc}
 8010856:	bf00      	nop

08010858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8010858:	4800      	ldr	r0, [pc, #0]	; (801085c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 801085a:	4770      	bx	lr
 801085c:	20000630 	.word	0x20000630

08010860 <_OmniEnc__cdr_serialize>:
 8010860:	b3a8      	cbz	r0, 80108ce <_OmniEnc__cdr_serialize+0x6e>
 8010862:	b570      	push	{r4, r5, r6, lr}
 8010864:	6806      	ldr	r6, [r0, #0]
 8010866:	4604      	mov	r4, r0
 8010868:	460d      	mov	r5, r1
 801086a:	b36e      	cbz	r6, 80108c8 <_OmniEnc__cdr_serialize+0x68>
 801086c:	4630      	mov	r0, r6
 801086e:	f7ef fd47 	bl	8000300 <strlen>
 8010872:	1c42      	adds	r2, r0, #1
 8010874:	4631      	mov	r1, r6
 8010876:	6060      	str	r0, [r4, #4]
 8010878:	4628      	mov	r0, r5
 801087a:	f001 fd7d 	bl	8012378 <ucdr_serialize_sequence_char>
 801087e:	4628      	mov	r0, r5
 8010880:	ed94 0b04 	vldr	d0, [r4, #16]
 8010884:	f001 fb1a 	bl	8011ebc <ucdr_serialize_double>
 8010888:	4628      	mov	r0, r5
 801088a:	ed94 0b06 	vldr	d0, [r4, #24]
 801088e:	f001 fb15 	bl	8011ebc <ucdr_serialize_double>
 8010892:	4628      	mov	r0, r5
 8010894:	ed94 0b08 	vldr	d0, [r4, #32]
 8010898:	f001 fb10 	bl	8011ebc <ucdr_serialize_double>
 801089c:	4628      	mov	r0, r5
 801089e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 80108a2:	f001 fb0b 	bl	8011ebc <ucdr_serialize_double>
 80108a6:	4628      	mov	r0, r5
 80108a8:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 80108ac:	f001 fb06 	bl	8011ebc <ucdr_serialize_double>
 80108b0:	4628      	mov	r0, r5
 80108b2:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 80108b6:	f001 fb01 	bl	8011ebc <ucdr_serialize_double>
 80108ba:	4628      	mov	r0, r5
 80108bc:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 80108c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80108c4:	f001 bafa 	b.w	8011ebc <ucdr_serialize_double>
 80108c8:	4632      	mov	r2, r6
 80108ca:	4630      	mov	r0, r6
 80108cc:	e7d2      	b.n	8010874 <_OmniEnc__cdr_serialize+0x14>
 80108ce:	4770      	bx	lr

080108d0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 80108d0:	b570      	push	{r4, r5, r6, lr}
 80108d2:	460c      	mov	r4, r1
 80108d4:	4605      	mov	r5, r0
 80108d6:	2104      	movs	r1, #4
 80108d8:	4620      	mov	r0, r4
 80108da:	f001 fcdd 	bl	8012298 <ucdr_alignment>
 80108de:	686b      	ldr	r3, [r5, #4]
 80108e0:	2108      	movs	r1, #8
 80108e2:	4423      	add	r3, r4
 80108e4:	f1c4 0408 	rsb	r4, r4, #8
 80108e8:	3305      	adds	r3, #5
 80108ea:	18c6      	adds	r6, r0, r3
 80108ec:	4630      	mov	r0, r6
 80108ee:	f001 fcd3 	bl	8012298 <ucdr_alignment>
 80108f2:	2108      	movs	r1, #8
 80108f4:	1845      	adds	r5, r0, r1
 80108f6:	442e      	add	r6, r5
 80108f8:	4630      	mov	r0, r6
 80108fa:	f001 fccd 	bl	8012298 <ucdr_alignment>
 80108fe:	2108      	movs	r1, #8
 8010900:	1845      	adds	r5, r0, r1
 8010902:	4435      	add	r5, r6
 8010904:	4628      	mov	r0, r5
 8010906:	f001 fcc7 	bl	8012298 <ucdr_alignment>
 801090a:	2108      	movs	r1, #8
 801090c:	4408      	add	r0, r1
 801090e:	4405      	add	r5, r0
 8010910:	4628      	mov	r0, r5
 8010912:	f001 fcc1 	bl	8012298 <ucdr_alignment>
 8010916:	2108      	movs	r1, #8
 8010918:	4408      	add	r0, r1
 801091a:	1946      	adds	r6, r0, r5
 801091c:	4630      	mov	r0, r6
 801091e:	f001 fcbb 	bl	8012298 <ucdr_alignment>
 8010922:	2108      	movs	r1, #8
 8010924:	1845      	adds	r5, r0, r1
 8010926:	4435      	add	r5, r6
 8010928:	4628      	mov	r0, r5
 801092a:	f001 fcb5 	bl	8012298 <ucdr_alignment>
 801092e:	2108      	movs	r1, #8
 8010930:	4408      	add	r0, r1
 8010932:	4405      	add	r5, r0
 8010934:	4628      	mov	r0, r5
 8010936:	f001 fcaf 	bl	8012298 <ucdr_alignment>
 801093a:	4420      	add	r0, r4
 801093c:	4428      	add	r0, r5
 801093e:	bd70      	pop	{r4, r5, r6, pc}

08010940 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 8010940:	b108      	cbz	r0, 8010946 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 8010942:	f7ff bfc5 	b.w	80108d0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8010946:	4770      	bx	lr

08010948 <_OmniEnc__get_serialized_size>:
 8010948:	b110      	cbz	r0, 8010950 <_OmniEnc__get_serialized_size+0x8>
 801094a:	2100      	movs	r1, #0
 801094c:	f7ff bfc0 	b.w	80108d0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop

08010954 <_OmniEnc__cdr_deserialize>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	460c      	mov	r4, r1
 8010958:	b082      	sub	sp, #8
 801095a:	b3a1      	cbz	r1, 80109c6 <_OmniEnc__cdr_deserialize+0x72>
 801095c:	688e      	ldr	r6, [r1, #8]
 801095e:	ab01      	add	r3, sp, #4
 8010960:	6809      	ldr	r1, [r1, #0]
 8010962:	4605      	mov	r5, r0
 8010964:	4632      	mov	r2, r6
 8010966:	f001 fd19 	bl	801239c <ucdr_deserialize_sequence_char>
 801096a:	9b01      	ldr	r3, [sp, #4]
 801096c:	bb38      	cbnz	r0, 80109be <_OmniEnc__cdr_deserialize+0x6a>
 801096e:	429e      	cmp	r6, r3
 8010970:	d32c      	bcc.n	80109cc <_OmniEnc__cdr_deserialize+0x78>
 8010972:	f104 0110 	add.w	r1, r4, #16
 8010976:	4628      	mov	r0, r5
 8010978:	f001 fb70 	bl	801205c <ucdr_deserialize_double>
 801097c:	f104 0118 	add.w	r1, r4, #24
 8010980:	4628      	mov	r0, r5
 8010982:	f001 fb6b 	bl	801205c <ucdr_deserialize_double>
 8010986:	f104 0120 	add.w	r1, r4, #32
 801098a:	4628      	mov	r0, r5
 801098c:	f001 fb66 	bl	801205c <ucdr_deserialize_double>
 8010990:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010994:	4628      	mov	r0, r5
 8010996:	f001 fb61 	bl	801205c <ucdr_deserialize_double>
 801099a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801099e:	4628      	mov	r0, r5
 80109a0:	f001 fb5c 	bl	801205c <ucdr_deserialize_double>
 80109a4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80109a8:	4628      	mov	r0, r5
 80109aa:	f001 fb57 	bl	801205c <ucdr_deserialize_double>
 80109ae:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80109b2:	4628      	mov	r0, r5
 80109b4:	b002      	add	sp, #8
 80109b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109ba:	f001 bb4f 	b.w	801205c <ucdr_deserialize_double>
 80109be:	b103      	cbz	r3, 80109c2 <_OmniEnc__cdr_deserialize+0x6e>
 80109c0:	3b01      	subs	r3, #1
 80109c2:	6063      	str	r3, [r4, #4]
 80109c4:	e7d5      	b.n	8010972 <_OmniEnc__cdr_deserialize+0x1e>
 80109c6:	4608      	mov	r0, r1
 80109c8:	b002      	add	sp, #8
 80109ca:	bd70      	pop	{r4, r5, r6, pc}
 80109cc:	2101      	movs	r1, #1
 80109ce:	75a8      	strb	r0, [r5, #22]
 80109d0:	7569      	strb	r1, [r5, #21]
 80109d2:	6060      	str	r0, [r4, #4]
 80109d4:	4628      	mov	r0, r5
 80109d6:	f001 fc77 	bl	80122c8 <ucdr_align_to>
 80109da:	9901      	ldr	r1, [sp, #4]
 80109dc:	4628      	mov	r0, r5
 80109de:	f001 fcab 	bl	8012338 <ucdr_advance_buffer>
 80109e2:	e7c6      	b.n	8010972 <_OmniEnc__cdr_deserialize+0x1e>

080109e4 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 80109e4:	b570      	push	{r4, r5, r6, lr}
 80109e6:	460c      	mov	r4, r1
 80109e8:	4603      	mov	r3, r0
 80109ea:	2200      	movs	r2, #0
 80109ec:	2108      	movs	r1, #8
 80109ee:	f104 0508 	add.w	r5, r4, #8
 80109f2:	4620      	mov	r0, r4
 80109f4:	701a      	strb	r2, [r3, #0]
 80109f6:	f1c4 0408 	rsb	r4, r4, #8
 80109fa:	f001 fc4d 	bl	8012298 <ucdr_alignment>
 80109fe:	4405      	add	r5, r0
 8010a00:	2108      	movs	r1, #8
 8010a02:	4628      	mov	r0, r5
 8010a04:	f001 fc48 	bl	8012298 <ucdr_alignment>
 8010a08:	2108      	movs	r1, #8
 8010a0a:	1846      	adds	r6, r0, r1
 8010a0c:	442e      	add	r6, r5
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f001 fc42 	bl	8012298 <ucdr_alignment>
 8010a14:	2108      	movs	r1, #8
 8010a16:	1845      	adds	r5, r0, r1
 8010a18:	442e      	add	r6, r5
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f001 fc3c 	bl	8012298 <ucdr_alignment>
 8010a20:	2108      	movs	r1, #8
 8010a22:	4408      	add	r0, r1
 8010a24:	4406      	add	r6, r0
 8010a26:	4630      	mov	r0, r6
 8010a28:	f001 fc36 	bl	8012298 <ucdr_alignment>
 8010a2c:	2108      	movs	r1, #8
 8010a2e:	1845      	adds	r5, r0, r1
 8010a30:	4435      	add	r5, r6
 8010a32:	4628      	mov	r0, r5
 8010a34:	f001 fc30 	bl	8012298 <ucdr_alignment>
 8010a38:	2108      	movs	r1, #8
 8010a3a:	4408      	add	r0, r1
 8010a3c:	4405      	add	r5, r0
 8010a3e:	4628      	mov	r0, r5
 8010a40:	f001 fc2a 	bl	8012298 <ucdr_alignment>
 8010a44:	4420      	add	r0, r4
 8010a46:	4428      	add	r0, r5
 8010a48:	bd70      	pop	{r4, r5, r6, pc}
 8010a4a:	bf00      	nop

08010a4c <_OmniEnc__max_serialized_size>:
 8010a4c:	b500      	push	{lr}
 8010a4e:	b083      	sub	sp, #12
 8010a50:	2100      	movs	r1, #0
 8010a52:	f10d 0007 	add.w	r0, sp, #7
 8010a56:	f7ff ffc5 	bl	80109e4 <max_serialized_size_drive_msgs__msg__OmniEnc>
 8010a5a:	b003      	add	sp, #12
 8010a5c:	f85d fb04 	ldr.w	pc, [sp], #4

08010a60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8010a60:	4800      	ldr	r0, [pc, #0]	; (8010a64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 8010a62:	4770      	bx	lr
 8010a64:	20000658 	.word	0x20000658

08010a68 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8010a68:	4b04      	ldr	r3, [pc, #16]	; (8010a7c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	b10a      	cbz	r2, 8010a72 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8010a6e:	4803      	ldr	r0, [pc, #12]	; (8010a7c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8010a70:	4770      	bx	lr
 8010a72:	4a03      	ldr	r2, [pc, #12]	; (8010a80 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8010a74:	4801      	ldr	r0, [pc, #4]	; (8010a7c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8010a76:	6812      	ldr	r2, [r2, #0]
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	4770      	bx	lr
 8010a7c:	20000688 	.word	0x20000688
 8010a80:	200008bc 	.word	0x200008bc

08010a84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8010a84:	4a02      	ldr	r2, [pc, #8]	; (8010a90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xc>)
 8010a86:	4b03      	ldr	r3, [pc, #12]	; (8010a94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x10>)
 8010a88:	6812      	ldr	r2, [r2, #0]
 8010a8a:	601a      	str	r2, [r3, #0]
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	200008bc 	.word	0x200008bc
 8010a94:	20000688 	.word	0x20000688

08010a98 <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_init_function>:
 8010a98:	f005 bd82 	b.w	80165a0 <manip_msgs__msg__Cmd__init>

08010a9c <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_fini_function>:
 8010a9c:	f005 bd84 	b.w	80165a8 <manip_msgs__msg__Cmd__fini>

08010aa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8010aa0:	4b04      	ldr	r3, [pc, #16]	; (8010ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	b10a      	cbz	r2, 8010aaa <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8010aa6:	4803      	ldr	r0, [pc, #12]	; (8010ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8010aa8:	4770      	bx	lr
 8010aaa:	4a03      	ldr	r2, [pc, #12]	; (8010ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8010aac:	4801      	ldr	r0, [pc, #4]	; (8010ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8010aae:	6812      	ldr	r2, [r2, #0]
 8010ab0:	601a      	str	r2, [r3, #0]
 8010ab2:	4770      	bx	lr
 8010ab4:	20000874 	.word	0x20000874
 8010ab8:	200008c0 	.word	0x200008c0

08010abc <get_serialized_size_manip_msgs__msg__Cmd.part.0>:
 8010abc:	b570      	push	{r4, r5, r6, lr}
 8010abe:	2108      	movs	r1, #8
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	f001 fbe9 	bl	8012298 <ucdr_alignment>
 8010ac6:	2108      	movs	r1, #8
 8010ac8:	1866      	adds	r6, r4, r1
 8010aca:	f1c4 0408 	rsb	r4, r4, #8
 8010ace:	4406      	add	r6, r0
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	f001 fbe1 	bl	8012298 <ucdr_alignment>
 8010ad6:	2108      	movs	r1, #8
 8010ad8:	1845      	adds	r5, r0, r1
 8010ada:	442e      	add	r6, r5
 8010adc:	4630      	mov	r0, r6
 8010ade:	f001 fbdb 	bl	8012298 <ucdr_alignment>
 8010ae2:	2108      	movs	r1, #8
 8010ae4:	1845      	adds	r5, r0, r1
 8010ae6:	4435      	add	r5, r6
 8010ae8:	4628      	mov	r0, r5
 8010aea:	f001 fbd5 	bl	8012298 <ucdr_alignment>
 8010aee:	2108      	movs	r1, #8
 8010af0:	4408      	add	r0, r1
 8010af2:	4405      	add	r5, r0
 8010af4:	4628      	mov	r0, r5
 8010af6:	f001 fbcf 	bl	8012298 <ucdr_alignment>
 8010afa:	2108      	movs	r1, #8
 8010afc:	4408      	add	r0, r1
 8010afe:	1946      	adds	r6, r0, r5
 8010b00:	4630      	mov	r0, r6
 8010b02:	f001 fbc9 	bl	8012298 <ucdr_alignment>
 8010b06:	2108      	movs	r1, #8
 8010b08:	1845      	adds	r5, r0, r1
 8010b0a:	4435      	add	r5, r6
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	f001 fbc3 	bl	8012298 <ucdr_alignment>
 8010b12:	2108      	movs	r1, #8
 8010b14:	4408      	add	r0, r1
 8010b16:	4405      	add	r5, r0
 8010b18:	4628      	mov	r0, r5
 8010b1a:	f001 fbbd 	bl	8012298 <ucdr_alignment>
 8010b1e:	4420      	add	r0, r4
 8010b20:	4428      	add	r0, r5
 8010b22:	bd70      	pop	{r4, r5, r6, pc}

08010b24 <get_serialized_size_manip_msgs__msg__Cmd>:
 8010b24:	b110      	cbz	r0, 8010b2c <get_serialized_size_manip_msgs__msg__Cmd+0x8>
 8010b26:	4608      	mov	r0, r1
 8010b28:	f7ff bfc8 	b.w	8010abc <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop

08010b30 <_Cmd__get_serialized_size>:
 8010b30:	b110      	cbz	r0, 8010b38 <_Cmd__get_serialized_size+0x8>
 8010b32:	2000      	movs	r0, #0
 8010b34:	f7ff bfc2 	b.w	8010abc <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8010b38:	4770      	bx	lr
 8010b3a:	bf00      	nop

08010b3c <_Cmd__cdr_deserialize>:
 8010b3c:	b538      	push	{r3, r4, r5, lr}
 8010b3e:	460c      	mov	r4, r1
 8010b40:	b339      	cbz	r1, 8010b92 <_Cmd__cdr_deserialize+0x56>
 8010b42:	4605      	mov	r5, r0
 8010b44:	f001 f8f4 	bl	8011d30 <ucdr_deserialize_int64_t>
 8010b48:	f104 0108 	add.w	r1, r4, #8
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f001 f8ef 	bl	8011d30 <ucdr_deserialize_int64_t>
 8010b52:	f104 0110 	add.w	r1, r4, #16
 8010b56:	4628      	mov	r0, r5
 8010b58:	f001 f8ea 	bl	8011d30 <ucdr_deserialize_int64_t>
 8010b5c:	f104 0118 	add.w	r1, r4, #24
 8010b60:	4628      	mov	r0, r5
 8010b62:	f001 f8e5 	bl	8011d30 <ucdr_deserialize_int64_t>
 8010b66:	f104 0120 	add.w	r1, r4, #32
 8010b6a:	4628      	mov	r0, r5
 8010b6c:	f001 f8e0 	bl	8011d30 <ucdr_deserialize_int64_t>
 8010b70:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010b74:	4628      	mov	r0, r5
 8010b76:	f001 f8db 	bl	8011d30 <ucdr_deserialize_int64_t>
 8010b7a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010b7e:	4628      	mov	r0, r5
 8010b80:	f001 f8d6 	bl	8011d30 <ucdr_deserialize_int64_t>
 8010b84:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8010b88:	4628      	mov	r0, r5
 8010b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b8e:	f001 b8cf 	b.w	8011d30 <ucdr_deserialize_int64_t>
 8010b92:	4608      	mov	r0, r1
 8010b94:	bd38      	pop	{r3, r4, r5, pc}
 8010b96:	bf00      	nop

08010b98 <_Cmd__cdr_serialize>:
 8010b98:	b360      	cbz	r0, 8010bf4 <_Cmd__cdr_serialize+0x5c>
 8010b9a:	b570      	push	{r4, r5, r6, lr}
 8010b9c:	460d      	mov	r5, r1
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	e9d0 2300 	ldrd	r2, r3, [r0]
 8010ba4:	4608      	mov	r0, r1
 8010ba6:	f000 fff3 	bl	8011b90 <ucdr_serialize_int64_t>
 8010baa:	4628      	mov	r0, r5
 8010bac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8010bb0:	f000 ffee 	bl	8011b90 <ucdr_serialize_int64_t>
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8010bba:	f000 ffe9 	bl	8011b90 <ucdr_serialize_int64_t>
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8010bc4:	f000 ffe4 	bl	8011b90 <ucdr_serialize_int64_t>
 8010bc8:	4628      	mov	r0, r5
 8010bca:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8010bce:	f000 ffdf 	bl	8011b90 <ucdr_serialize_int64_t>
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8010bd8:	f000 ffda 	bl	8011b90 <ucdr_serialize_int64_t>
 8010bdc:	4628      	mov	r0, r5
 8010bde:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8010be2:	f000 ffd5 	bl	8011b90 <ucdr_serialize_int64_t>
 8010be6:	4628      	mov	r0, r5
 8010be8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bf0:	f000 bfce 	b.w	8011b90 <ucdr_serialize_int64_t>
 8010bf4:	4770      	bx	lr
 8010bf6:	bf00      	nop

08010bf8 <max_serialized_size_manip_msgs__msg__Cmd>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	460c      	mov	r4, r1
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	2108      	movs	r1, #8
 8010c00:	f104 0608 	add.w	r6, r4, #8
 8010c04:	7003      	strb	r3, [r0, #0]
 8010c06:	4620      	mov	r0, r4
 8010c08:	f1c4 0408 	rsb	r4, r4, #8
 8010c0c:	f001 fb44 	bl	8012298 <ucdr_alignment>
 8010c10:	4406      	add	r6, r0
 8010c12:	2108      	movs	r1, #8
 8010c14:	4630      	mov	r0, r6
 8010c16:	f001 fb3f 	bl	8012298 <ucdr_alignment>
 8010c1a:	2108      	movs	r1, #8
 8010c1c:	1845      	adds	r5, r0, r1
 8010c1e:	442e      	add	r6, r5
 8010c20:	4630      	mov	r0, r6
 8010c22:	f001 fb39 	bl	8012298 <ucdr_alignment>
 8010c26:	2108      	movs	r1, #8
 8010c28:	1845      	adds	r5, r0, r1
 8010c2a:	4435      	add	r5, r6
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	f001 fb33 	bl	8012298 <ucdr_alignment>
 8010c32:	2108      	movs	r1, #8
 8010c34:	4408      	add	r0, r1
 8010c36:	4405      	add	r5, r0
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f001 fb2d 	bl	8012298 <ucdr_alignment>
 8010c3e:	2108      	movs	r1, #8
 8010c40:	4408      	add	r0, r1
 8010c42:	1946      	adds	r6, r0, r5
 8010c44:	4630      	mov	r0, r6
 8010c46:	f001 fb27 	bl	8012298 <ucdr_alignment>
 8010c4a:	2108      	movs	r1, #8
 8010c4c:	1845      	adds	r5, r0, r1
 8010c4e:	4435      	add	r5, r6
 8010c50:	4628      	mov	r0, r5
 8010c52:	f001 fb21 	bl	8012298 <ucdr_alignment>
 8010c56:	2108      	movs	r1, #8
 8010c58:	4408      	add	r0, r1
 8010c5a:	4405      	add	r5, r0
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	f001 fb1b 	bl	8012298 <ucdr_alignment>
 8010c62:	4420      	add	r0, r4
 8010c64:	4428      	add	r0, r5
 8010c66:	bd70      	pop	{r4, r5, r6, pc}

08010c68 <_Cmd__max_serialized_size>:
 8010c68:	b500      	push	{lr}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	f10d 0007 	add.w	r0, sp, #7
 8010c72:	f7ff ffc1 	bl	8010bf8 <max_serialized_size_manip_msgs__msg__Cmd>
 8010c76:	b003      	add	sp, #12
 8010c78:	f85d fb04 	ldr.w	pc, [sp], #4

08010c7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8010c7c:	4800      	ldr	r0, [pc, #0]	; (8010c80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x4>)
 8010c7e:	4770      	bx	lr
 8010c80:	20000880 	.word	0x20000880

08010c84 <ucdr_serialize_bool>:
 8010c84:	b538      	push	{r3, r4, r5, lr}
 8010c86:	460d      	mov	r5, r1
 8010c88:	2101      	movs	r1, #1
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	f001 fab8 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010c90:	b148      	cbz	r0, 8010ca6 <ucdr_serialize_bool+0x22>
 8010c92:	68a3      	ldr	r3, [r4, #8]
 8010c94:	2101      	movs	r1, #1
 8010c96:	701d      	strb	r5, [r3, #0]
 8010c98:	68a2      	ldr	r2, [r4, #8]
 8010c9a:	6923      	ldr	r3, [r4, #16]
 8010c9c:	440a      	add	r2, r1
 8010c9e:	7561      	strb	r1, [r4, #21]
 8010ca0:	440b      	add	r3, r1
 8010ca2:	60a2      	str	r2, [r4, #8]
 8010ca4:	6123      	str	r3, [r4, #16]
 8010ca6:	7da0      	ldrb	r0, [r4, #22]
 8010ca8:	f080 0001 	eor.w	r0, r0, #1
 8010cac:	bd38      	pop	{r3, r4, r5, pc}
 8010cae:	bf00      	nop

08010cb0 <ucdr_deserialize_bool>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	460d      	mov	r5, r1
 8010cb4:	2101      	movs	r1, #1
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	f001 faa2 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010cbc:	b160      	cbz	r0, 8010cd8 <ucdr_deserialize_bool+0x28>
 8010cbe:	68a2      	ldr	r2, [r4, #8]
 8010cc0:	2101      	movs	r1, #1
 8010cc2:	6923      	ldr	r3, [r4, #16]
 8010cc4:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010cc8:	440b      	add	r3, r1
 8010cca:	3800      	subs	r0, #0
 8010ccc:	bf18      	it	ne
 8010cce:	2001      	movne	r0, #1
 8010cd0:	7028      	strb	r0, [r5, #0]
 8010cd2:	60a2      	str	r2, [r4, #8]
 8010cd4:	6123      	str	r3, [r4, #16]
 8010cd6:	7561      	strb	r1, [r4, #21]
 8010cd8:	7da0      	ldrb	r0, [r4, #22]
 8010cda:	f080 0001 	eor.w	r0, r0, #1
 8010cde:	bd38      	pop	{r3, r4, r5, pc}

08010ce0 <ucdr_serialize_uint8_t>:
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	460d      	mov	r5, r1
 8010ce4:	2101      	movs	r1, #1
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	f001 fa8a 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010cec:	b148      	cbz	r0, 8010d02 <ucdr_serialize_uint8_t+0x22>
 8010cee:	68a3      	ldr	r3, [r4, #8]
 8010cf0:	2101      	movs	r1, #1
 8010cf2:	701d      	strb	r5, [r3, #0]
 8010cf4:	68a2      	ldr	r2, [r4, #8]
 8010cf6:	6923      	ldr	r3, [r4, #16]
 8010cf8:	440a      	add	r2, r1
 8010cfa:	7561      	strb	r1, [r4, #21]
 8010cfc:	440b      	add	r3, r1
 8010cfe:	60a2      	str	r2, [r4, #8]
 8010d00:	6123      	str	r3, [r4, #16]
 8010d02:	7da0      	ldrb	r0, [r4, #22]
 8010d04:	f080 0001 	eor.w	r0, r0, #1
 8010d08:	bd38      	pop	{r3, r4, r5, pc}
 8010d0a:	bf00      	nop

08010d0c <ucdr_deserialize_uint8_t>:
 8010d0c:	b538      	push	{r3, r4, r5, lr}
 8010d0e:	460d      	mov	r5, r1
 8010d10:	2101      	movs	r1, #1
 8010d12:	4604      	mov	r4, r0
 8010d14:	f001 fa74 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010d18:	b150      	cbz	r0, 8010d30 <ucdr_deserialize_uint8_t+0x24>
 8010d1a:	68a3      	ldr	r3, [r4, #8]
 8010d1c:	2101      	movs	r1, #1
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	702b      	strb	r3, [r5, #0]
 8010d22:	68a2      	ldr	r2, [r4, #8]
 8010d24:	6923      	ldr	r3, [r4, #16]
 8010d26:	440a      	add	r2, r1
 8010d28:	7561      	strb	r1, [r4, #21]
 8010d2a:	440b      	add	r3, r1
 8010d2c:	60a2      	str	r2, [r4, #8]
 8010d2e:	6123      	str	r3, [r4, #16]
 8010d30:	7da0      	ldrb	r0, [r4, #22]
 8010d32:	f080 0001 	eor.w	r0, r0, #1
 8010d36:	bd38      	pop	{r3, r4, r5, pc}

08010d38 <ucdr_serialize_uint16_t>:
 8010d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	b082      	sub	sp, #8
 8010d40:	4604      	mov	r4, r0
 8010d42:	2102      	movs	r1, #2
 8010d44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010d48:	f001 faae 	bl	80122a8 <ucdr_buffer_alignment>
 8010d4c:	4601      	mov	r1, r0
 8010d4e:	4620      	mov	r0, r4
 8010d50:	7d67      	ldrb	r7, [r4, #21]
 8010d52:	f001 faf1 	bl	8012338 <ucdr_advance_buffer>
 8010d56:	2102      	movs	r1, #2
 8010d58:	4620      	mov	r0, r4
 8010d5a:	f001 fa45 	bl	80121e8 <ucdr_check_buffer_available_for>
 8010d5e:	bb78      	cbnz	r0, 8010dc0 <ucdr_serialize_uint16_t+0x88>
 8010d60:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010d64:	42ab      	cmp	r3, r5
 8010d66:	d926      	bls.n	8010db6 <ucdr_serialize_uint16_t+0x7e>
 8010d68:	1b5e      	subs	r6, r3, r5
 8010d6a:	60a3      	str	r3, [r4, #8]
 8010d6c:	6923      	ldr	r3, [r4, #16]
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f1c6 0802 	rsb	r8, r6, #2
 8010d74:	4433      	add	r3, r6
 8010d76:	4641      	mov	r1, r8
 8010d78:	6123      	str	r3, [r4, #16]
 8010d7a:	f001 fa41 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d03b      	beq.n	8010dfa <ucdr_serialize_uint16_t+0xc2>
 8010d82:	7d23      	ldrb	r3, [r4, #20]
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	d04a      	beq.n	8010e1e <ucdr_serialize_uint16_t+0xe6>
 8010d88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010d8c:	702b      	strb	r3, [r5, #0]
 8010d8e:	2e00      	cmp	r6, #0
 8010d90:	d040      	beq.n	8010e14 <ucdr_serialize_uint16_t+0xdc>
 8010d92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010d96:	706b      	strb	r3, [r5, #1]
 8010d98:	6923      	ldr	r3, [r4, #16]
 8010d9a:	2102      	movs	r1, #2
 8010d9c:	68a2      	ldr	r2, [r4, #8]
 8010d9e:	3302      	adds	r3, #2
 8010da0:	7da0      	ldrb	r0, [r4, #22]
 8010da2:	4442      	add	r2, r8
 8010da4:	7561      	strb	r1, [r4, #21]
 8010da6:	1b9e      	subs	r6, r3, r6
 8010da8:	f080 0001 	eor.w	r0, r0, #1
 8010dac:	60a2      	str	r2, [r4, #8]
 8010dae:	6126      	str	r6, [r4, #16]
 8010db0:	b002      	add	sp, #8
 8010db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db6:	2102      	movs	r1, #2
 8010db8:	4620      	mov	r0, r4
 8010dba:	f001 fa21 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010dbe:	b190      	cbz	r0, 8010de6 <ucdr_serialize_uint16_t+0xae>
 8010dc0:	7d23      	ldrb	r3, [r4, #20]
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	68a3      	ldr	r3, [r4, #8]
 8010dc6:	d014      	beq.n	8010df2 <ucdr_serialize_uint16_t+0xba>
 8010dc8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010dcc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010dd0:	7019      	strb	r1, [r3, #0]
 8010dd2:	68a3      	ldr	r3, [r4, #8]
 8010dd4:	705a      	strb	r2, [r3, #1]
 8010dd6:	2102      	movs	r1, #2
 8010dd8:	68a2      	ldr	r2, [r4, #8]
 8010dda:	6923      	ldr	r3, [r4, #16]
 8010ddc:	440a      	add	r2, r1
 8010dde:	7561      	strb	r1, [r4, #21]
 8010de0:	440b      	add	r3, r1
 8010de2:	60a2      	str	r2, [r4, #8]
 8010de4:	6123      	str	r3, [r4, #16]
 8010de6:	7da0      	ldrb	r0, [r4, #22]
 8010de8:	f080 0001 	eor.w	r0, r0, #1
 8010dec:	b002      	add	sp, #8
 8010dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010df6:	801a      	strh	r2, [r3, #0]
 8010df8:	e7ed      	b.n	8010dd6 <ucdr_serialize_uint16_t+0x9e>
 8010dfa:	68a2      	ldr	r2, [r4, #8]
 8010dfc:	6923      	ldr	r3, [r4, #16]
 8010dfe:	7da0      	ldrb	r0, [r4, #22]
 8010e00:	1b92      	subs	r2, r2, r6
 8010e02:	1b9b      	subs	r3, r3, r6
 8010e04:	7567      	strb	r7, [r4, #21]
 8010e06:	f080 0001 	eor.w	r0, r0, #1
 8010e0a:	60a2      	str	r2, [r4, #8]
 8010e0c:	6123      	str	r3, [r4, #16]
 8010e0e:	b002      	add	sp, #8
 8010e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e14:	68a3      	ldr	r3, [r4, #8]
 8010e16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e1a:	701a      	strb	r2, [r3, #0]
 8010e1c:	e7bc      	b.n	8010d98 <ucdr_serialize_uint16_t+0x60>
 8010e1e:	4628      	mov	r0, r5
 8010e20:	f10d 0506 	add.w	r5, sp, #6
 8010e24:	4632      	mov	r2, r6
 8010e26:	4629      	mov	r1, r5
 8010e28:	f00f f869 	bl	801fefe <memcpy>
 8010e2c:	4642      	mov	r2, r8
 8010e2e:	19a9      	adds	r1, r5, r6
 8010e30:	68a0      	ldr	r0, [r4, #8]
 8010e32:	f00f f864 	bl	801fefe <memcpy>
 8010e36:	e7af      	b.n	8010d98 <ucdr_serialize_uint16_t+0x60>

08010e38 <ucdr_serialize_endian_uint16_t>:
 8010e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	b083      	sub	sp, #12
 8010e40:	460d      	mov	r5, r1
 8010e42:	2102      	movs	r1, #2
 8010e44:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010e48:	f001 fa2e 	bl	80122a8 <ucdr_buffer_alignment>
 8010e4c:	4601      	mov	r1, r0
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e54:	f001 fa70 	bl	8012338 <ucdr_advance_buffer>
 8010e58:	2102      	movs	r1, #2
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f001 f9c4 	bl	80121e8 <ucdr_check_buffer_available_for>
 8010e60:	bb70      	cbnz	r0, 8010ec0 <ucdr_serialize_endian_uint16_t+0x88>
 8010e62:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010e66:	42be      	cmp	r6, r7
 8010e68:	d925      	bls.n	8010eb6 <ucdr_serialize_endian_uint16_t+0x7e>
 8010e6a:	6923      	ldr	r3, [r4, #16]
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	60a6      	str	r6, [r4, #8]
 8010e70:	1bf6      	subs	r6, r6, r7
 8010e72:	4433      	add	r3, r6
 8010e74:	f1c6 0902 	rsb	r9, r6, #2
 8010e78:	6123      	str	r3, [r4, #16]
 8010e7a:	4649      	mov	r1, r9
 8010e7c:	f001 f9c0 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010e80:	2800      	cmp	r0, #0
 8010e82:	d039      	beq.n	8010ef8 <ucdr_serialize_endian_uint16_t+0xc0>
 8010e84:	2d01      	cmp	r5, #1
 8010e86:	d04a      	beq.n	8010f1e <ucdr_serialize_endian_uint16_t+0xe6>
 8010e88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010e8c:	703b      	strb	r3, [r7, #0]
 8010e8e:	2e00      	cmp	r6, #0
 8010e90:	d040      	beq.n	8010f14 <ucdr_serialize_endian_uint16_t+0xdc>
 8010e92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010e96:	707b      	strb	r3, [r7, #1]
 8010e98:	6923      	ldr	r3, [r4, #16]
 8010e9a:	2102      	movs	r1, #2
 8010e9c:	68a2      	ldr	r2, [r4, #8]
 8010e9e:	7da0      	ldrb	r0, [r4, #22]
 8010ea0:	3302      	adds	r3, #2
 8010ea2:	444a      	add	r2, r9
 8010ea4:	7561      	strb	r1, [r4, #21]
 8010ea6:	1b9b      	subs	r3, r3, r6
 8010ea8:	f080 0001 	eor.w	r0, r0, #1
 8010eac:	60a2      	str	r2, [r4, #8]
 8010eae:	6123      	str	r3, [r4, #16]
 8010eb0:	b003      	add	sp, #12
 8010eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eb6:	2102      	movs	r1, #2
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f001 f9a1 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010ebe:	b188      	cbz	r0, 8010ee4 <ucdr_serialize_endian_uint16_t+0xac>
 8010ec0:	2d01      	cmp	r5, #1
 8010ec2:	68a3      	ldr	r3, [r4, #8]
 8010ec4:	d014      	beq.n	8010ef0 <ucdr_serialize_endian_uint16_t+0xb8>
 8010ec6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010eca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ece:	7019      	strb	r1, [r3, #0]
 8010ed0:	68a3      	ldr	r3, [r4, #8]
 8010ed2:	705a      	strb	r2, [r3, #1]
 8010ed4:	2102      	movs	r1, #2
 8010ed6:	68a2      	ldr	r2, [r4, #8]
 8010ed8:	6923      	ldr	r3, [r4, #16]
 8010eda:	440a      	add	r2, r1
 8010edc:	7561      	strb	r1, [r4, #21]
 8010ede:	440b      	add	r3, r1
 8010ee0:	60a2      	str	r2, [r4, #8]
 8010ee2:	6123      	str	r3, [r4, #16]
 8010ee4:	7da0      	ldrb	r0, [r4, #22]
 8010ee6:	f080 0001 	eor.w	r0, r0, #1
 8010eea:	b003      	add	sp, #12
 8010eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ef0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010ef4:	801a      	strh	r2, [r3, #0]
 8010ef6:	e7ed      	b.n	8010ed4 <ucdr_serialize_endian_uint16_t+0x9c>
 8010ef8:	68a2      	ldr	r2, [r4, #8]
 8010efa:	6923      	ldr	r3, [r4, #16]
 8010efc:	7da0      	ldrb	r0, [r4, #22]
 8010efe:	1b92      	subs	r2, r2, r6
 8010f00:	1b9b      	subs	r3, r3, r6
 8010f02:	f884 8015 	strb.w	r8, [r4, #21]
 8010f06:	f080 0001 	eor.w	r0, r0, #1
 8010f0a:	60a2      	str	r2, [r4, #8]
 8010f0c:	6123      	str	r3, [r4, #16]
 8010f0e:	b003      	add	sp, #12
 8010f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f14:	68a3      	ldr	r3, [r4, #8]
 8010f16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f1a:	701a      	strb	r2, [r3, #0]
 8010f1c:	e7bc      	b.n	8010e98 <ucdr_serialize_endian_uint16_t+0x60>
 8010f1e:	f10d 0506 	add.w	r5, sp, #6
 8010f22:	4632      	mov	r2, r6
 8010f24:	4638      	mov	r0, r7
 8010f26:	4629      	mov	r1, r5
 8010f28:	f00e ffe9 	bl	801fefe <memcpy>
 8010f2c:	464a      	mov	r2, r9
 8010f2e:	19a9      	adds	r1, r5, r6
 8010f30:	68a0      	ldr	r0, [r4, #8]
 8010f32:	f00e ffe4 	bl	801fefe <memcpy>
 8010f36:	e7af      	b.n	8010e98 <ucdr_serialize_endian_uint16_t+0x60>

08010f38 <ucdr_deserialize_uint16_t>:
 8010f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	460d      	mov	r5, r1
 8010f40:	2102      	movs	r1, #2
 8010f42:	f001 f9b1 	bl	80122a8 <ucdr_buffer_alignment>
 8010f46:	4601      	mov	r1, r0
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010f4e:	f001 f9f3 	bl	8012338 <ucdr_advance_buffer>
 8010f52:	2102      	movs	r1, #2
 8010f54:	4620      	mov	r0, r4
 8010f56:	f001 f947 	bl	80121e8 <ucdr_check_buffer_available_for>
 8010f5a:	bb60      	cbnz	r0, 8010fb6 <ucdr_deserialize_uint16_t+0x7e>
 8010f5c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010f60:	42be      	cmp	r6, r7
 8010f62:	d923      	bls.n	8010fac <ucdr_deserialize_uint16_t+0x74>
 8010f64:	6923      	ldr	r3, [r4, #16]
 8010f66:	4620      	mov	r0, r4
 8010f68:	60a6      	str	r6, [r4, #8]
 8010f6a:	1bf6      	subs	r6, r6, r7
 8010f6c:	4433      	add	r3, r6
 8010f6e:	f1c6 0902 	rsb	r9, r6, #2
 8010f72:	6123      	str	r3, [r4, #16]
 8010f74:	4649      	mov	r1, r9
 8010f76:	f001 f943 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d034      	beq.n	8010fe8 <ucdr_deserialize_uint16_t+0xb0>
 8010f7e:	7d23      	ldrb	r3, [r4, #20]
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d042      	beq.n	801100a <ucdr_deserialize_uint16_t+0xd2>
 8010f84:	787b      	ldrb	r3, [r7, #1]
 8010f86:	702b      	strb	r3, [r5, #0]
 8010f88:	2e00      	cmp	r6, #0
 8010f8a:	d03a      	beq.n	8011002 <ucdr_deserialize_uint16_t+0xca>
 8010f8c:	783b      	ldrb	r3, [r7, #0]
 8010f8e:	706b      	strb	r3, [r5, #1]
 8010f90:	6923      	ldr	r3, [r4, #16]
 8010f92:	2102      	movs	r1, #2
 8010f94:	68a2      	ldr	r2, [r4, #8]
 8010f96:	3302      	adds	r3, #2
 8010f98:	7da0      	ldrb	r0, [r4, #22]
 8010f9a:	444a      	add	r2, r9
 8010f9c:	7561      	strb	r1, [r4, #21]
 8010f9e:	1b9b      	subs	r3, r3, r6
 8010fa0:	f080 0001 	eor.w	r0, r0, #1
 8010fa4:	60a2      	str	r2, [r4, #8]
 8010fa6:	6123      	str	r3, [r4, #16]
 8010fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fac:	2102      	movs	r1, #2
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f001 f926 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8010fb4:	b180      	cbz	r0, 8010fd8 <ucdr_deserialize_uint16_t+0xa0>
 8010fb6:	7d23      	ldrb	r3, [r4, #20]
 8010fb8:	2b01      	cmp	r3, #1
 8010fba:	68a3      	ldr	r3, [r4, #8]
 8010fbc:	d011      	beq.n	8010fe2 <ucdr_deserialize_uint16_t+0xaa>
 8010fbe:	785b      	ldrb	r3, [r3, #1]
 8010fc0:	702b      	strb	r3, [r5, #0]
 8010fc2:	68a3      	ldr	r3, [r4, #8]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	706b      	strb	r3, [r5, #1]
 8010fc8:	2102      	movs	r1, #2
 8010fca:	68a2      	ldr	r2, [r4, #8]
 8010fcc:	6923      	ldr	r3, [r4, #16]
 8010fce:	440a      	add	r2, r1
 8010fd0:	7561      	strb	r1, [r4, #21]
 8010fd2:	440b      	add	r3, r1
 8010fd4:	60a2      	str	r2, [r4, #8]
 8010fd6:	6123      	str	r3, [r4, #16]
 8010fd8:	7da0      	ldrb	r0, [r4, #22]
 8010fda:	f080 0001 	eor.w	r0, r0, #1
 8010fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fe2:	881b      	ldrh	r3, [r3, #0]
 8010fe4:	802b      	strh	r3, [r5, #0]
 8010fe6:	e7ef      	b.n	8010fc8 <ucdr_deserialize_uint16_t+0x90>
 8010fe8:	68a2      	ldr	r2, [r4, #8]
 8010fea:	6923      	ldr	r3, [r4, #16]
 8010fec:	1b92      	subs	r2, r2, r6
 8010fee:	7da0      	ldrb	r0, [r4, #22]
 8010ff0:	1b9b      	subs	r3, r3, r6
 8010ff2:	f884 8015 	strb.w	r8, [r4, #21]
 8010ff6:	f080 0001 	eor.w	r0, r0, #1
 8010ffa:	60a2      	str	r2, [r4, #8]
 8010ffc:	6123      	str	r3, [r4, #16]
 8010ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011002:	68a3      	ldr	r3, [r4, #8]
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	706b      	strb	r3, [r5, #1]
 8011008:	e7c2      	b.n	8010f90 <ucdr_deserialize_uint16_t+0x58>
 801100a:	4639      	mov	r1, r7
 801100c:	4632      	mov	r2, r6
 801100e:	4628      	mov	r0, r5
 8011010:	f00e ff75 	bl	801fefe <memcpy>
 8011014:	464a      	mov	r2, r9
 8011016:	19a8      	adds	r0, r5, r6
 8011018:	68a1      	ldr	r1, [r4, #8]
 801101a:	f00e ff70 	bl	801fefe <memcpy>
 801101e:	e7b7      	b.n	8010f90 <ucdr_deserialize_uint16_t+0x58>

08011020 <ucdr_deserialize_endian_uint16_t>:
 8011020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011024:	4604      	mov	r4, r0
 8011026:	460e      	mov	r6, r1
 8011028:	2102      	movs	r1, #2
 801102a:	4615      	mov	r5, r2
 801102c:	f001 f93c 	bl	80122a8 <ucdr_buffer_alignment>
 8011030:	4601      	mov	r1, r0
 8011032:	4620      	mov	r0, r4
 8011034:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011038:	f001 f97e 	bl	8012338 <ucdr_advance_buffer>
 801103c:	2102      	movs	r1, #2
 801103e:	4620      	mov	r0, r4
 8011040:	f001 f8d2 	bl	80121e8 <ucdr_check_buffer_available_for>
 8011044:	bb70      	cbnz	r0, 80110a4 <ucdr_deserialize_endian_uint16_t+0x84>
 8011046:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801104a:	454f      	cmp	r7, r9
 801104c:	d925      	bls.n	801109a <ucdr_deserialize_endian_uint16_t+0x7a>
 801104e:	6923      	ldr	r3, [r4, #16]
 8011050:	4620      	mov	r0, r4
 8011052:	60a7      	str	r7, [r4, #8]
 8011054:	eba7 0709 	sub.w	r7, r7, r9
 8011058:	443b      	add	r3, r7
 801105a:	f1c7 0a02 	rsb	sl, r7, #2
 801105e:	6123      	str	r3, [r4, #16]
 8011060:	4651      	mov	r1, sl
 8011062:	f001 f8cd 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011066:	2800      	cmp	r0, #0
 8011068:	d034      	beq.n	80110d4 <ucdr_deserialize_endian_uint16_t+0xb4>
 801106a:	2e01      	cmp	r6, #1
 801106c:	d043      	beq.n	80110f6 <ucdr_deserialize_endian_uint16_t+0xd6>
 801106e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011072:	702b      	strb	r3, [r5, #0]
 8011074:	2f00      	cmp	r7, #0
 8011076:	d03a      	beq.n	80110ee <ucdr_deserialize_endian_uint16_t+0xce>
 8011078:	f899 3000 	ldrb.w	r3, [r9]
 801107c:	706b      	strb	r3, [r5, #1]
 801107e:	6923      	ldr	r3, [r4, #16]
 8011080:	2102      	movs	r1, #2
 8011082:	68a2      	ldr	r2, [r4, #8]
 8011084:	3302      	adds	r3, #2
 8011086:	7da0      	ldrb	r0, [r4, #22]
 8011088:	4452      	add	r2, sl
 801108a:	7561      	strb	r1, [r4, #21]
 801108c:	1bdb      	subs	r3, r3, r7
 801108e:	f080 0001 	eor.w	r0, r0, #1
 8011092:	60a2      	str	r2, [r4, #8]
 8011094:	6123      	str	r3, [r4, #16]
 8011096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801109a:	2102      	movs	r1, #2
 801109c:	4620      	mov	r0, r4
 801109e:	f001 f8af 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80110a2:	b178      	cbz	r0, 80110c4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80110a4:	2e01      	cmp	r6, #1
 80110a6:	68a3      	ldr	r3, [r4, #8]
 80110a8:	d011      	beq.n	80110ce <ucdr_deserialize_endian_uint16_t+0xae>
 80110aa:	785b      	ldrb	r3, [r3, #1]
 80110ac:	702b      	strb	r3, [r5, #0]
 80110ae:	68a3      	ldr	r3, [r4, #8]
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	706b      	strb	r3, [r5, #1]
 80110b4:	2102      	movs	r1, #2
 80110b6:	68a2      	ldr	r2, [r4, #8]
 80110b8:	6923      	ldr	r3, [r4, #16]
 80110ba:	440a      	add	r2, r1
 80110bc:	7561      	strb	r1, [r4, #21]
 80110be:	440b      	add	r3, r1
 80110c0:	60a2      	str	r2, [r4, #8]
 80110c2:	6123      	str	r3, [r4, #16]
 80110c4:	7da0      	ldrb	r0, [r4, #22]
 80110c6:	f080 0001 	eor.w	r0, r0, #1
 80110ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	802b      	strh	r3, [r5, #0]
 80110d2:	e7ef      	b.n	80110b4 <ucdr_deserialize_endian_uint16_t+0x94>
 80110d4:	68a2      	ldr	r2, [r4, #8]
 80110d6:	6923      	ldr	r3, [r4, #16]
 80110d8:	1bd2      	subs	r2, r2, r7
 80110da:	7da0      	ldrb	r0, [r4, #22]
 80110dc:	1bdb      	subs	r3, r3, r7
 80110de:	f884 8015 	strb.w	r8, [r4, #21]
 80110e2:	f080 0001 	eor.w	r0, r0, #1
 80110e6:	60a2      	str	r2, [r4, #8]
 80110e8:	6123      	str	r3, [r4, #16]
 80110ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ee:	68a3      	ldr	r3, [r4, #8]
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	706b      	strb	r3, [r5, #1]
 80110f4:	e7c3      	b.n	801107e <ucdr_deserialize_endian_uint16_t+0x5e>
 80110f6:	4649      	mov	r1, r9
 80110f8:	463a      	mov	r2, r7
 80110fa:	4628      	mov	r0, r5
 80110fc:	f00e feff 	bl	801fefe <memcpy>
 8011100:	4652      	mov	r2, sl
 8011102:	19e8      	adds	r0, r5, r7
 8011104:	68a1      	ldr	r1, [r4, #8]
 8011106:	f00e fefa 	bl	801fefe <memcpy>
 801110a:	e7b8      	b.n	801107e <ucdr_deserialize_endian_uint16_t+0x5e>

0801110c <ucdr_serialize_uint32_t>:
 801110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011110:	b082      	sub	sp, #8
 8011112:	4604      	mov	r4, r0
 8011114:	9101      	str	r1, [sp, #4]
 8011116:	2104      	movs	r1, #4
 8011118:	f001 f8c6 	bl	80122a8 <ucdr_buffer_alignment>
 801111c:	4601      	mov	r1, r0
 801111e:	4620      	mov	r0, r4
 8011120:	7d67      	ldrb	r7, [r4, #21]
 8011122:	f001 f909 	bl	8012338 <ucdr_advance_buffer>
 8011126:	2104      	movs	r1, #4
 8011128:	4620      	mov	r0, r4
 801112a:	f001 f85d 	bl	80121e8 <ucdr_check_buffer_available_for>
 801112e:	2800      	cmp	r0, #0
 8011130:	d139      	bne.n	80111a6 <ucdr_serialize_uint32_t+0x9a>
 8011132:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011136:	42ab      	cmp	r3, r5
 8011138:	d930      	bls.n	801119c <ucdr_serialize_uint32_t+0x90>
 801113a:	1b5e      	subs	r6, r3, r5
 801113c:	60a3      	str	r3, [r4, #8]
 801113e:	6923      	ldr	r3, [r4, #16]
 8011140:	4620      	mov	r0, r4
 8011142:	f1c6 0804 	rsb	r8, r6, #4
 8011146:	4433      	add	r3, r6
 8011148:	4641      	mov	r1, r8
 801114a:	6123      	str	r3, [r4, #16]
 801114c:	f001 f858 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011150:	2800      	cmp	r0, #0
 8011152:	d04c      	beq.n	80111ee <ucdr_serialize_uint32_t+0xe2>
 8011154:	7d23      	ldrb	r3, [r4, #20]
 8011156:	2b01      	cmp	r3, #1
 8011158:	d063      	beq.n	8011222 <ucdr_serialize_uint32_t+0x116>
 801115a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801115e:	702b      	strb	r3, [r5, #0]
 8011160:	2e00      	cmp	r6, #0
 8011162:	d051      	beq.n	8011208 <ucdr_serialize_uint32_t+0xfc>
 8011164:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011168:	2e01      	cmp	r6, #1
 801116a:	706b      	strb	r3, [r5, #1]
 801116c:	d050      	beq.n	8011210 <ucdr_serialize_uint32_t+0x104>
 801116e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011172:	2e02      	cmp	r6, #2
 8011174:	70ab      	strb	r3, [r5, #2]
 8011176:	d04f      	beq.n	8011218 <ucdr_serialize_uint32_t+0x10c>
 8011178:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801117c:	70eb      	strb	r3, [r5, #3]
 801117e:	6923      	ldr	r3, [r4, #16]
 8011180:	2104      	movs	r1, #4
 8011182:	68a2      	ldr	r2, [r4, #8]
 8011184:	3304      	adds	r3, #4
 8011186:	7da0      	ldrb	r0, [r4, #22]
 8011188:	4442      	add	r2, r8
 801118a:	7561      	strb	r1, [r4, #21]
 801118c:	1b9e      	subs	r6, r3, r6
 801118e:	f080 0001 	eor.w	r0, r0, #1
 8011192:	60a2      	str	r2, [r4, #8]
 8011194:	6126      	str	r6, [r4, #16]
 8011196:	b002      	add	sp, #8
 8011198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801119c:	2104      	movs	r1, #4
 801119e:	4620      	mov	r0, r4
 80111a0:	f001 f82e 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80111a4:	b1d0      	cbz	r0, 80111dc <ucdr_serialize_uint32_t+0xd0>
 80111a6:	7d23      	ldrb	r3, [r4, #20]
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	68a3      	ldr	r3, [r4, #8]
 80111ac:	d01c      	beq.n	80111e8 <ucdr_serialize_uint32_t+0xdc>
 80111ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80111b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80111b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80111ba:	7018      	strb	r0, [r3, #0]
 80111bc:	68a3      	ldr	r3, [r4, #8]
 80111be:	705a      	strb	r2, [r3, #1]
 80111c0:	68a3      	ldr	r3, [r4, #8]
 80111c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80111c6:	7099      	strb	r1, [r3, #2]
 80111c8:	68a3      	ldr	r3, [r4, #8]
 80111ca:	70da      	strb	r2, [r3, #3]
 80111cc:	2104      	movs	r1, #4
 80111ce:	68a2      	ldr	r2, [r4, #8]
 80111d0:	6923      	ldr	r3, [r4, #16]
 80111d2:	440a      	add	r2, r1
 80111d4:	7561      	strb	r1, [r4, #21]
 80111d6:	440b      	add	r3, r1
 80111d8:	60a2      	str	r2, [r4, #8]
 80111da:	6123      	str	r3, [r4, #16]
 80111dc:	7da0      	ldrb	r0, [r4, #22]
 80111de:	f080 0001 	eor.w	r0, r0, #1
 80111e2:	b002      	add	sp, #8
 80111e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111e8:	9a01      	ldr	r2, [sp, #4]
 80111ea:	601a      	str	r2, [r3, #0]
 80111ec:	e7ee      	b.n	80111cc <ucdr_serialize_uint32_t+0xc0>
 80111ee:	68a2      	ldr	r2, [r4, #8]
 80111f0:	6923      	ldr	r3, [r4, #16]
 80111f2:	7da0      	ldrb	r0, [r4, #22]
 80111f4:	1b92      	subs	r2, r2, r6
 80111f6:	1b9b      	subs	r3, r3, r6
 80111f8:	7567      	strb	r7, [r4, #21]
 80111fa:	f080 0001 	eor.w	r0, r0, #1
 80111fe:	60a2      	str	r2, [r4, #8]
 8011200:	6123      	str	r3, [r4, #16]
 8011202:	b002      	add	sp, #8
 8011204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011208:	68a3      	ldr	r3, [r4, #8]
 801120a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801120e:	701a      	strb	r2, [r3, #0]
 8011210:	68a3      	ldr	r3, [r4, #8]
 8011212:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011216:	701a      	strb	r2, [r3, #0]
 8011218:	68a3      	ldr	r3, [r4, #8]
 801121a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801121e:	701a      	strb	r2, [r3, #0]
 8011220:	e7ad      	b.n	801117e <ucdr_serialize_uint32_t+0x72>
 8011222:	4628      	mov	r0, r5
 8011224:	ad01      	add	r5, sp, #4
 8011226:	4632      	mov	r2, r6
 8011228:	4629      	mov	r1, r5
 801122a:	f00e fe68 	bl	801fefe <memcpy>
 801122e:	4642      	mov	r2, r8
 8011230:	19a9      	adds	r1, r5, r6
 8011232:	68a0      	ldr	r0, [r4, #8]
 8011234:	f00e fe63 	bl	801fefe <memcpy>
 8011238:	e7a1      	b.n	801117e <ucdr_serialize_uint32_t+0x72>
 801123a:	bf00      	nop

0801123c <ucdr_serialize_endian_uint32_t>:
 801123c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011240:	4604      	mov	r4, r0
 8011242:	b083      	sub	sp, #12
 8011244:	460d      	mov	r5, r1
 8011246:	2104      	movs	r1, #4
 8011248:	9201      	str	r2, [sp, #4]
 801124a:	f001 f82d 	bl	80122a8 <ucdr_buffer_alignment>
 801124e:	4601      	mov	r1, r0
 8011250:	4620      	mov	r0, r4
 8011252:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011256:	f001 f86f 	bl	8012338 <ucdr_advance_buffer>
 801125a:	2104      	movs	r1, #4
 801125c:	4620      	mov	r0, r4
 801125e:	f000 ffc3 	bl	80121e8 <ucdr_check_buffer_available_for>
 8011262:	2800      	cmp	r0, #0
 8011264:	d138      	bne.n	80112d8 <ucdr_serialize_endian_uint32_t+0x9c>
 8011266:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801126a:	42b7      	cmp	r7, r6
 801126c:	d92f      	bls.n	80112ce <ucdr_serialize_endian_uint32_t+0x92>
 801126e:	6923      	ldr	r3, [r4, #16]
 8011270:	4620      	mov	r0, r4
 8011272:	60a7      	str	r7, [r4, #8]
 8011274:	1bbf      	subs	r7, r7, r6
 8011276:	443b      	add	r3, r7
 8011278:	f1c7 0904 	rsb	r9, r7, #4
 801127c:	6123      	str	r3, [r4, #16]
 801127e:	4649      	mov	r1, r9
 8011280:	f000 ffbe 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011284:	2800      	cmp	r0, #0
 8011286:	d04a      	beq.n	801131e <ucdr_serialize_endian_uint32_t+0xe2>
 8011288:	2d01      	cmp	r5, #1
 801128a:	d063      	beq.n	8011354 <ucdr_serialize_endian_uint32_t+0x118>
 801128c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011290:	7033      	strb	r3, [r6, #0]
 8011292:	2f00      	cmp	r7, #0
 8011294:	d051      	beq.n	801133a <ucdr_serialize_endian_uint32_t+0xfe>
 8011296:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801129a:	2f01      	cmp	r7, #1
 801129c:	7073      	strb	r3, [r6, #1]
 801129e:	d050      	beq.n	8011342 <ucdr_serialize_endian_uint32_t+0x106>
 80112a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80112a4:	2f02      	cmp	r7, #2
 80112a6:	70b3      	strb	r3, [r6, #2]
 80112a8:	d04f      	beq.n	801134a <ucdr_serialize_endian_uint32_t+0x10e>
 80112aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80112ae:	70f3      	strb	r3, [r6, #3]
 80112b0:	6923      	ldr	r3, [r4, #16]
 80112b2:	2104      	movs	r1, #4
 80112b4:	68a2      	ldr	r2, [r4, #8]
 80112b6:	7da0      	ldrb	r0, [r4, #22]
 80112b8:	3304      	adds	r3, #4
 80112ba:	444a      	add	r2, r9
 80112bc:	7561      	strb	r1, [r4, #21]
 80112be:	1bdb      	subs	r3, r3, r7
 80112c0:	f080 0001 	eor.w	r0, r0, #1
 80112c4:	60a2      	str	r2, [r4, #8]
 80112c6:	6123      	str	r3, [r4, #16]
 80112c8:	b003      	add	sp, #12
 80112ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112ce:	2104      	movs	r1, #4
 80112d0:	4620      	mov	r0, r4
 80112d2:	f000 ff95 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80112d6:	b1c8      	cbz	r0, 801130c <ucdr_serialize_endian_uint32_t+0xd0>
 80112d8:	2d01      	cmp	r5, #1
 80112da:	68a3      	ldr	r3, [r4, #8]
 80112dc:	d01c      	beq.n	8011318 <ucdr_serialize_endian_uint32_t+0xdc>
 80112de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80112e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80112ea:	7018      	strb	r0, [r3, #0]
 80112ec:	68a3      	ldr	r3, [r4, #8]
 80112ee:	705a      	strb	r2, [r3, #1]
 80112f0:	68a3      	ldr	r3, [r4, #8]
 80112f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80112f6:	7099      	strb	r1, [r3, #2]
 80112f8:	68a3      	ldr	r3, [r4, #8]
 80112fa:	70da      	strb	r2, [r3, #3]
 80112fc:	2104      	movs	r1, #4
 80112fe:	68a2      	ldr	r2, [r4, #8]
 8011300:	6923      	ldr	r3, [r4, #16]
 8011302:	440a      	add	r2, r1
 8011304:	7561      	strb	r1, [r4, #21]
 8011306:	440b      	add	r3, r1
 8011308:	60a2      	str	r2, [r4, #8]
 801130a:	6123      	str	r3, [r4, #16]
 801130c:	7da0      	ldrb	r0, [r4, #22]
 801130e:	f080 0001 	eor.w	r0, r0, #1
 8011312:	b003      	add	sp, #12
 8011314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011318:	9a01      	ldr	r2, [sp, #4]
 801131a:	601a      	str	r2, [r3, #0]
 801131c:	e7ee      	b.n	80112fc <ucdr_serialize_endian_uint32_t+0xc0>
 801131e:	68a2      	ldr	r2, [r4, #8]
 8011320:	6923      	ldr	r3, [r4, #16]
 8011322:	7da0      	ldrb	r0, [r4, #22]
 8011324:	1bd2      	subs	r2, r2, r7
 8011326:	1bdb      	subs	r3, r3, r7
 8011328:	f884 8015 	strb.w	r8, [r4, #21]
 801132c:	f080 0001 	eor.w	r0, r0, #1
 8011330:	60a2      	str	r2, [r4, #8]
 8011332:	6123      	str	r3, [r4, #16]
 8011334:	b003      	add	sp, #12
 8011336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801133a:	68a3      	ldr	r3, [r4, #8]
 801133c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011340:	701a      	strb	r2, [r3, #0]
 8011342:	68a3      	ldr	r3, [r4, #8]
 8011344:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011348:	701a      	strb	r2, [r3, #0]
 801134a:	68a3      	ldr	r3, [r4, #8]
 801134c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011350:	701a      	strb	r2, [r3, #0]
 8011352:	e7ad      	b.n	80112b0 <ucdr_serialize_endian_uint32_t+0x74>
 8011354:	ad01      	add	r5, sp, #4
 8011356:	463a      	mov	r2, r7
 8011358:	4630      	mov	r0, r6
 801135a:	4629      	mov	r1, r5
 801135c:	f00e fdcf 	bl	801fefe <memcpy>
 8011360:	464a      	mov	r2, r9
 8011362:	19e9      	adds	r1, r5, r7
 8011364:	68a0      	ldr	r0, [r4, #8]
 8011366:	f00e fdca 	bl	801fefe <memcpy>
 801136a:	e7a1      	b.n	80112b0 <ucdr_serialize_endian_uint32_t+0x74>

0801136c <ucdr_deserialize_uint32_t>:
 801136c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011370:	4604      	mov	r4, r0
 8011372:	460d      	mov	r5, r1
 8011374:	2104      	movs	r1, #4
 8011376:	f000 ff97 	bl	80122a8 <ucdr_buffer_alignment>
 801137a:	4601      	mov	r1, r0
 801137c:	4620      	mov	r0, r4
 801137e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011382:	f000 ffd9 	bl	8012338 <ucdr_advance_buffer>
 8011386:	2104      	movs	r1, #4
 8011388:	4620      	mov	r0, r4
 801138a:	f000 ff2d 	bl	80121e8 <ucdr_check_buffer_available_for>
 801138e:	2800      	cmp	r0, #0
 8011390:	d138      	bne.n	8011404 <ucdr_deserialize_uint32_t+0x98>
 8011392:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011396:	42b7      	cmp	r7, r6
 8011398:	d92f      	bls.n	80113fa <ucdr_deserialize_uint32_t+0x8e>
 801139a:	6923      	ldr	r3, [r4, #16]
 801139c:	4620      	mov	r0, r4
 801139e:	60a7      	str	r7, [r4, #8]
 80113a0:	1bbf      	subs	r7, r7, r6
 80113a2:	443b      	add	r3, r7
 80113a4:	f1c7 0904 	rsb	r9, r7, #4
 80113a8:	6123      	str	r3, [r4, #16]
 80113aa:	4649      	mov	r1, r9
 80113ac:	f000 ff28 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d046      	beq.n	8011442 <ucdr_deserialize_uint32_t+0xd6>
 80113b4:	7d23      	ldrb	r3, [r4, #20]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d05c      	beq.n	8011474 <ucdr_deserialize_uint32_t+0x108>
 80113ba:	78f3      	ldrb	r3, [r6, #3]
 80113bc:	702b      	strb	r3, [r5, #0]
 80113be:	2f00      	cmp	r7, #0
 80113c0:	d04c      	beq.n	801145c <ucdr_deserialize_uint32_t+0xf0>
 80113c2:	78b3      	ldrb	r3, [r6, #2]
 80113c4:	2f01      	cmp	r7, #1
 80113c6:	706b      	strb	r3, [r5, #1]
 80113c8:	f105 0302 	add.w	r3, r5, #2
 80113cc:	d04a      	beq.n	8011464 <ucdr_deserialize_uint32_t+0xf8>
 80113ce:	7873      	ldrb	r3, [r6, #1]
 80113d0:	2f02      	cmp	r7, #2
 80113d2:	70ab      	strb	r3, [r5, #2]
 80113d4:	f105 0303 	add.w	r3, r5, #3
 80113d8:	d048      	beq.n	801146c <ucdr_deserialize_uint32_t+0x100>
 80113da:	7833      	ldrb	r3, [r6, #0]
 80113dc:	70eb      	strb	r3, [r5, #3]
 80113de:	6923      	ldr	r3, [r4, #16]
 80113e0:	2104      	movs	r1, #4
 80113e2:	68a2      	ldr	r2, [r4, #8]
 80113e4:	3304      	adds	r3, #4
 80113e6:	7da0      	ldrb	r0, [r4, #22]
 80113e8:	444a      	add	r2, r9
 80113ea:	7561      	strb	r1, [r4, #21]
 80113ec:	1bdb      	subs	r3, r3, r7
 80113ee:	f080 0001 	eor.w	r0, r0, #1
 80113f2:	60a2      	str	r2, [r4, #8]
 80113f4:	6123      	str	r3, [r4, #16]
 80113f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113fa:	2104      	movs	r1, #4
 80113fc:	4620      	mov	r0, r4
 80113fe:	f000 feff 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011402:	b1b0      	cbz	r0, 8011432 <ucdr_deserialize_uint32_t+0xc6>
 8011404:	7d23      	ldrb	r3, [r4, #20]
 8011406:	2b01      	cmp	r3, #1
 8011408:	68a3      	ldr	r3, [r4, #8]
 801140a:	d017      	beq.n	801143c <ucdr_deserialize_uint32_t+0xd0>
 801140c:	78db      	ldrb	r3, [r3, #3]
 801140e:	702b      	strb	r3, [r5, #0]
 8011410:	68a3      	ldr	r3, [r4, #8]
 8011412:	789b      	ldrb	r3, [r3, #2]
 8011414:	706b      	strb	r3, [r5, #1]
 8011416:	68a3      	ldr	r3, [r4, #8]
 8011418:	785b      	ldrb	r3, [r3, #1]
 801141a:	70ab      	strb	r3, [r5, #2]
 801141c:	68a3      	ldr	r3, [r4, #8]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	70eb      	strb	r3, [r5, #3]
 8011422:	2104      	movs	r1, #4
 8011424:	68a2      	ldr	r2, [r4, #8]
 8011426:	6923      	ldr	r3, [r4, #16]
 8011428:	440a      	add	r2, r1
 801142a:	7561      	strb	r1, [r4, #21]
 801142c:	440b      	add	r3, r1
 801142e:	60a2      	str	r2, [r4, #8]
 8011430:	6123      	str	r3, [r4, #16]
 8011432:	7da0      	ldrb	r0, [r4, #22]
 8011434:	f080 0001 	eor.w	r0, r0, #1
 8011438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	602b      	str	r3, [r5, #0]
 8011440:	e7ef      	b.n	8011422 <ucdr_deserialize_uint32_t+0xb6>
 8011442:	68a2      	ldr	r2, [r4, #8]
 8011444:	6923      	ldr	r3, [r4, #16]
 8011446:	1bd2      	subs	r2, r2, r7
 8011448:	7da0      	ldrb	r0, [r4, #22]
 801144a:	1bdb      	subs	r3, r3, r7
 801144c:	f884 8015 	strb.w	r8, [r4, #21]
 8011450:	f080 0001 	eor.w	r0, r0, #1
 8011454:	60a2      	str	r2, [r4, #8]
 8011456:	6123      	str	r3, [r4, #16]
 8011458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801145c:	68a3      	ldr	r3, [r4, #8]
 801145e:	789b      	ldrb	r3, [r3, #2]
 8011460:	706b      	strb	r3, [r5, #1]
 8011462:	1cab      	adds	r3, r5, #2
 8011464:	68a2      	ldr	r2, [r4, #8]
 8011466:	7852      	ldrb	r2, [r2, #1]
 8011468:	f803 2b01 	strb.w	r2, [r3], #1
 801146c:	68a2      	ldr	r2, [r4, #8]
 801146e:	7812      	ldrb	r2, [r2, #0]
 8011470:	701a      	strb	r2, [r3, #0]
 8011472:	e7b4      	b.n	80113de <ucdr_deserialize_uint32_t+0x72>
 8011474:	4631      	mov	r1, r6
 8011476:	463a      	mov	r2, r7
 8011478:	4628      	mov	r0, r5
 801147a:	f00e fd40 	bl	801fefe <memcpy>
 801147e:	464a      	mov	r2, r9
 8011480:	19e8      	adds	r0, r5, r7
 8011482:	68a1      	ldr	r1, [r4, #8]
 8011484:	f00e fd3b 	bl	801fefe <memcpy>
 8011488:	e7a9      	b.n	80113de <ucdr_deserialize_uint32_t+0x72>
 801148a:	bf00      	nop

0801148c <ucdr_deserialize_endian_uint32_t>:
 801148c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011490:	4604      	mov	r4, r0
 8011492:	460e      	mov	r6, r1
 8011494:	2104      	movs	r1, #4
 8011496:	4615      	mov	r5, r2
 8011498:	f000 ff06 	bl	80122a8 <ucdr_buffer_alignment>
 801149c:	4601      	mov	r1, r0
 801149e:	4620      	mov	r0, r4
 80114a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80114a4:	f000 ff48 	bl	8012338 <ucdr_advance_buffer>
 80114a8:	2104      	movs	r1, #4
 80114aa:	4620      	mov	r0, r4
 80114ac:	f000 fe9c 	bl	80121e8 <ucdr_check_buffer_available_for>
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d13c      	bne.n	801152e <ucdr_deserialize_endian_uint32_t+0xa2>
 80114b4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80114b8:	42bb      	cmp	r3, r7
 80114ba:	d933      	bls.n	8011524 <ucdr_deserialize_endian_uint32_t+0x98>
 80114bc:	eba3 0907 	sub.w	r9, r3, r7
 80114c0:	60a3      	str	r3, [r4, #8]
 80114c2:	6923      	ldr	r3, [r4, #16]
 80114c4:	4620      	mov	r0, r4
 80114c6:	f1c9 0a04 	rsb	sl, r9, #4
 80114ca:	444b      	add	r3, r9
 80114cc:	4651      	mov	r1, sl
 80114ce:	6123      	str	r3, [r4, #16]
 80114d0:	f000 fe96 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d048      	beq.n	801156a <ucdr_deserialize_endian_uint32_t+0xde>
 80114d8:	2e01      	cmp	r6, #1
 80114da:	d061      	beq.n	80115a0 <ucdr_deserialize_endian_uint32_t+0x114>
 80114dc:	78fb      	ldrb	r3, [r7, #3]
 80114de:	702b      	strb	r3, [r5, #0]
 80114e0:	f1b9 0f00 	cmp.w	r9, #0
 80114e4:	d050      	beq.n	8011588 <ucdr_deserialize_endian_uint32_t+0xfc>
 80114e6:	78bb      	ldrb	r3, [r7, #2]
 80114e8:	f1b9 0f01 	cmp.w	r9, #1
 80114ec:	706b      	strb	r3, [r5, #1]
 80114ee:	f105 0302 	add.w	r3, r5, #2
 80114f2:	d04d      	beq.n	8011590 <ucdr_deserialize_endian_uint32_t+0x104>
 80114f4:	787b      	ldrb	r3, [r7, #1]
 80114f6:	f1b9 0f02 	cmp.w	r9, #2
 80114fa:	70ab      	strb	r3, [r5, #2]
 80114fc:	f105 0303 	add.w	r3, r5, #3
 8011500:	d04a      	beq.n	8011598 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011502:	783b      	ldrb	r3, [r7, #0]
 8011504:	70eb      	strb	r3, [r5, #3]
 8011506:	6923      	ldr	r3, [r4, #16]
 8011508:	2104      	movs	r1, #4
 801150a:	68a2      	ldr	r2, [r4, #8]
 801150c:	3304      	adds	r3, #4
 801150e:	7da0      	ldrb	r0, [r4, #22]
 8011510:	4452      	add	r2, sl
 8011512:	7561      	strb	r1, [r4, #21]
 8011514:	eba3 0309 	sub.w	r3, r3, r9
 8011518:	f080 0001 	eor.w	r0, r0, #1
 801151c:	60a2      	str	r2, [r4, #8]
 801151e:	6123      	str	r3, [r4, #16]
 8011520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011524:	2104      	movs	r1, #4
 8011526:	4620      	mov	r0, r4
 8011528:	f000 fe6a 	bl	8012200 <ucdr_check_final_buffer_behavior>
 801152c:	b1a8      	cbz	r0, 801155a <ucdr_deserialize_endian_uint32_t+0xce>
 801152e:	2e01      	cmp	r6, #1
 8011530:	68a3      	ldr	r3, [r4, #8]
 8011532:	d017      	beq.n	8011564 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011534:	78db      	ldrb	r3, [r3, #3]
 8011536:	702b      	strb	r3, [r5, #0]
 8011538:	68a3      	ldr	r3, [r4, #8]
 801153a:	789b      	ldrb	r3, [r3, #2]
 801153c:	706b      	strb	r3, [r5, #1]
 801153e:	68a3      	ldr	r3, [r4, #8]
 8011540:	785b      	ldrb	r3, [r3, #1]
 8011542:	70ab      	strb	r3, [r5, #2]
 8011544:	68a3      	ldr	r3, [r4, #8]
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	70eb      	strb	r3, [r5, #3]
 801154a:	2104      	movs	r1, #4
 801154c:	68a2      	ldr	r2, [r4, #8]
 801154e:	6923      	ldr	r3, [r4, #16]
 8011550:	440a      	add	r2, r1
 8011552:	7561      	strb	r1, [r4, #21]
 8011554:	440b      	add	r3, r1
 8011556:	60a2      	str	r2, [r4, #8]
 8011558:	6123      	str	r3, [r4, #16]
 801155a:	7da0      	ldrb	r0, [r4, #22]
 801155c:	f080 0001 	eor.w	r0, r0, #1
 8011560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	602b      	str	r3, [r5, #0]
 8011568:	e7ef      	b.n	801154a <ucdr_deserialize_endian_uint32_t+0xbe>
 801156a:	68a2      	ldr	r2, [r4, #8]
 801156c:	6923      	ldr	r3, [r4, #16]
 801156e:	eba2 0209 	sub.w	r2, r2, r9
 8011572:	7da0      	ldrb	r0, [r4, #22]
 8011574:	eba3 0309 	sub.w	r3, r3, r9
 8011578:	f884 8015 	strb.w	r8, [r4, #21]
 801157c:	f080 0001 	eor.w	r0, r0, #1
 8011580:	60a2      	str	r2, [r4, #8]
 8011582:	6123      	str	r3, [r4, #16]
 8011584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011588:	68a3      	ldr	r3, [r4, #8]
 801158a:	789b      	ldrb	r3, [r3, #2]
 801158c:	706b      	strb	r3, [r5, #1]
 801158e:	1cab      	adds	r3, r5, #2
 8011590:	68a2      	ldr	r2, [r4, #8]
 8011592:	7852      	ldrb	r2, [r2, #1]
 8011594:	f803 2b01 	strb.w	r2, [r3], #1
 8011598:	68a2      	ldr	r2, [r4, #8]
 801159a:	7812      	ldrb	r2, [r2, #0]
 801159c:	701a      	strb	r2, [r3, #0]
 801159e:	e7b2      	b.n	8011506 <ucdr_deserialize_endian_uint32_t+0x7a>
 80115a0:	4639      	mov	r1, r7
 80115a2:	464a      	mov	r2, r9
 80115a4:	4628      	mov	r0, r5
 80115a6:	f00e fcaa 	bl	801fefe <memcpy>
 80115aa:	4652      	mov	r2, sl
 80115ac:	eb05 0009 	add.w	r0, r5, r9
 80115b0:	68a1      	ldr	r1, [r4, #8]
 80115b2:	f00e fca4 	bl	801fefe <memcpy>
 80115b6:	e7a6      	b.n	8011506 <ucdr_deserialize_endian_uint32_t+0x7a>

080115b8 <ucdr_serialize_uint64_t>:
 80115b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115bc:	4604      	mov	r4, r0
 80115be:	b082      	sub	sp, #8
 80115c0:	2108      	movs	r1, #8
 80115c2:	e9cd 2300 	strd	r2, r3, [sp]
 80115c6:	f000 fe6f 	bl	80122a8 <ucdr_buffer_alignment>
 80115ca:	4601      	mov	r1, r0
 80115cc:	4620      	mov	r0, r4
 80115ce:	7d67      	ldrb	r7, [r4, #21]
 80115d0:	f000 feb2 	bl	8012338 <ucdr_advance_buffer>
 80115d4:	2108      	movs	r1, #8
 80115d6:	4620      	mov	r0, r4
 80115d8:	f000 fe06 	bl	80121e8 <ucdr_check_buffer_available_for>
 80115dc:	2800      	cmp	r0, #0
 80115de:	d14e      	bne.n	801167e <ucdr_serialize_uint64_t+0xc6>
 80115e0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80115e4:	42ab      	cmp	r3, r5
 80115e6:	d945      	bls.n	8011674 <ucdr_serialize_uint64_t+0xbc>
 80115e8:	1b5e      	subs	r6, r3, r5
 80115ea:	60a3      	str	r3, [r4, #8]
 80115ec:	6923      	ldr	r3, [r4, #16]
 80115ee:	4620      	mov	r0, r4
 80115f0:	f1c6 0808 	rsb	r8, r6, #8
 80115f4:	4433      	add	r3, r6
 80115f6:	4641      	mov	r1, r8
 80115f8:	6123      	str	r3, [r4, #16]
 80115fa:	f000 fe01 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80115fe:	2800      	cmp	r0, #0
 8011600:	d074      	beq.n	80116ec <ucdr_serialize_uint64_t+0x134>
 8011602:	7d23      	ldrb	r3, [r4, #20]
 8011604:	2b01      	cmp	r3, #1
 8011606:	f000 809b 	beq.w	8011740 <ucdr_serialize_uint64_t+0x188>
 801160a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801160e:	702b      	strb	r3, [r5, #0]
 8011610:	2e00      	cmp	r6, #0
 8011612:	d078      	beq.n	8011706 <ucdr_serialize_uint64_t+0x14e>
 8011614:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011618:	2e01      	cmp	r6, #1
 801161a:	706b      	strb	r3, [r5, #1]
 801161c:	d077      	beq.n	801170e <ucdr_serialize_uint64_t+0x156>
 801161e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011622:	2e02      	cmp	r6, #2
 8011624:	70ab      	strb	r3, [r5, #2]
 8011626:	d076      	beq.n	8011716 <ucdr_serialize_uint64_t+0x15e>
 8011628:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801162c:	2e03      	cmp	r6, #3
 801162e:	70eb      	strb	r3, [r5, #3]
 8011630:	d075      	beq.n	801171e <ucdr_serialize_uint64_t+0x166>
 8011632:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011636:	2e04      	cmp	r6, #4
 8011638:	712b      	strb	r3, [r5, #4]
 801163a:	d074      	beq.n	8011726 <ucdr_serialize_uint64_t+0x16e>
 801163c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011640:	2e05      	cmp	r6, #5
 8011642:	716b      	strb	r3, [r5, #5]
 8011644:	d073      	beq.n	801172e <ucdr_serialize_uint64_t+0x176>
 8011646:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801164a:	2e06      	cmp	r6, #6
 801164c:	71ab      	strb	r3, [r5, #6]
 801164e:	d072      	beq.n	8011736 <ucdr_serialize_uint64_t+0x17e>
 8011650:	f89d 3000 	ldrb.w	r3, [sp]
 8011654:	71eb      	strb	r3, [r5, #7]
 8011656:	6923      	ldr	r3, [r4, #16]
 8011658:	2108      	movs	r1, #8
 801165a:	68a2      	ldr	r2, [r4, #8]
 801165c:	3308      	adds	r3, #8
 801165e:	7da0      	ldrb	r0, [r4, #22]
 8011660:	4442      	add	r2, r8
 8011662:	7561      	strb	r1, [r4, #21]
 8011664:	1b9e      	subs	r6, r3, r6
 8011666:	f080 0001 	eor.w	r0, r0, #1
 801166a:	60a2      	str	r2, [r4, #8]
 801166c:	6126      	str	r6, [r4, #16]
 801166e:	b002      	add	sp, #8
 8011670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011674:	2108      	movs	r1, #8
 8011676:	4620      	mov	r0, r4
 8011678:	f000 fdc2 	bl	8012200 <ucdr_check_final_buffer_behavior>
 801167c:	b350      	cbz	r0, 80116d4 <ucdr_serialize_uint64_t+0x11c>
 801167e:	7d23      	ldrb	r3, [r4, #20]
 8011680:	2b01      	cmp	r3, #1
 8011682:	d02d      	beq.n	80116e0 <ucdr_serialize_uint64_t+0x128>
 8011684:	68a3      	ldr	r3, [r4, #8]
 8011686:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801168a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801168e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011692:	7018      	strb	r0, [r3, #0]
 8011694:	68a3      	ldr	r3, [r4, #8]
 8011696:	705a      	strb	r2, [r3, #1]
 8011698:	68a3      	ldr	r3, [r4, #8]
 801169a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801169e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80116a2:	7099      	strb	r1, [r3, #2]
 80116a4:	68a3      	ldr	r3, [r4, #8]
 80116a6:	70da      	strb	r2, [r3, #3]
 80116a8:	68a3      	ldr	r3, [r4, #8]
 80116aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80116ae:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80116b2:	7118      	strb	r0, [r3, #4]
 80116b4:	68a3      	ldr	r3, [r4, #8]
 80116b6:	715a      	strb	r2, [r3, #5]
 80116b8:	68a3      	ldr	r3, [r4, #8]
 80116ba:	f89d 2000 	ldrb.w	r2, [sp]
 80116be:	7199      	strb	r1, [r3, #6]
 80116c0:	68a3      	ldr	r3, [r4, #8]
 80116c2:	71da      	strb	r2, [r3, #7]
 80116c4:	2108      	movs	r1, #8
 80116c6:	68a2      	ldr	r2, [r4, #8]
 80116c8:	6923      	ldr	r3, [r4, #16]
 80116ca:	440a      	add	r2, r1
 80116cc:	7561      	strb	r1, [r4, #21]
 80116ce:	440b      	add	r3, r1
 80116d0:	60a2      	str	r2, [r4, #8]
 80116d2:	6123      	str	r3, [r4, #16]
 80116d4:	7da0      	ldrb	r0, [r4, #22]
 80116d6:	f080 0001 	eor.w	r0, r0, #1
 80116da:	b002      	add	sp, #8
 80116dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e0:	466b      	mov	r3, sp
 80116e2:	68a2      	ldr	r2, [r4, #8]
 80116e4:	cb03      	ldmia	r3!, {r0, r1}
 80116e6:	6010      	str	r0, [r2, #0]
 80116e8:	6051      	str	r1, [r2, #4]
 80116ea:	e7eb      	b.n	80116c4 <ucdr_serialize_uint64_t+0x10c>
 80116ec:	68a2      	ldr	r2, [r4, #8]
 80116ee:	6923      	ldr	r3, [r4, #16]
 80116f0:	7da0      	ldrb	r0, [r4, #22]
 80116f2:	1b92      	subs	r2, r2, r6
 80116f4:	1b9b      	subs	r3, r3, r6
 80116f6:	7567      	strb	r7, [r4, #21]
 80116f8:	f080 0001 	eor.w	r0, r0, #1
 80116fc:	60a2      	str	r2, [r4, #8]
 80116fe:	6123      	str	r3, [r4, #16]
 8011700:	b002      	add	sp, #8
 8011702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011706:	68a3      	ldr	r3, [r4, #8]
 8011708:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801170c:	701a      	strb	r2, [r3, #0]
 801170e:	68a3      	ldr	r3, [r4, #8]
 8011710:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011714:	701a      	strb	r2, [r3, #0]
 8011716:	68a3      	ldr	r3, [r4, #8]
 8011718:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801171c:	701a      	strb	r2, [r3, #0]
 801171e:	68a3      	ldr	r3, [r4, #8]
 8011720:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011724:	701a      	strb	r2, [r3, #0]
 8011726:	68a3      	ldr	r3, [r4, #8]
 8011728:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801172c:	701a      	strb	r2, [r3, #0]
 801172e:	68a3      	ldr	r3, [r4, #8]
 8011730:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011734:	701a      	strb	r2, [r3, #0]
 8011736:	68a3      	ldr	r3, [r4, #8]
 8011738:	f89d 2000 	ldrb.w	r2, [sp]
 801173c:	701a      	strb	r2, [r3, #0]
 801173e:	e78a      	b.n	8011656 <ucdr_serialize_uint64_t+0x9e>
 8011740:	4628      	mov	r0, r5
 8011742:	466d      	mov	r5, sp
 8011744:	4632      	mov	r2, r6
 8011746:	4629      	mov	r1, r5
 8011748:	f00e fbd9 	bl	801fefe <memcpy>
 801174c:	4642      	mov	r2, r8
 801174e:	19a9      	adds	r1, r5, r6
 8011750:	68a0      	ldr	r0, [r4, #8]
 8011752:	f00e fbd4 	bl	801fefe <memcpy>
 8011756:	e77e      	b.n	8011656 <ucdr_serialize_uint64_t+0x9e>

08011758 <ucdr_serialize_int16_t>:
 8011758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175c:	460b      	mov	r3, r1
 801175e:	b082      	sub	sp, #8
 8011760:	4604      	mov	r4, r0
 8011762:	2102      	movs	r1, #2
 8011764:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011768:	f000 fd9e 	bl	80122a8 <ucdr_buffer_alignment>
 801176c:	4601      	mov	r1, r0
 801176e:	4620      	mov	r0, r4
 8011770:	7d67      	ldrb	r7, [r4, #21]
 8011772:	f000 fde1 	bl	8012338 <ucdr_advance_buffer>
 8011776:	2102      	movs	r1, #2
 8011778:	4620      	mov	r0, r4
 801177a:	f000 fd35 	bl	80121e8 <ucdr_check_buffer_available_for>
 801177e:	bb78      	cbnz	r0, 80117e0 <ucdr_serialize_int16_t+0x88>
 8011780:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011784:	42ab      	cmp	r3, r5
 8011786:	d926      	bls.n	80117d6 <ucdr_serialize_int16_t+0x7e>
 8011788:	1b5e      	subs	r6, r3, r5
 801178a:	60a3      	str	r3, [r4, #8]
 801178c:	6923      	ldr	r3, [r4, #16]
 801178e:	4620      	mov	r0, r4
 8011790:	f1c6 0802 	rsb	r8, r6, #2
 8011794:	4433      	add	r3, r6
 8011796:	4641      	mov	r1, r8
 8011798:	6123      	str	r3, [r4, #16]
 801179a:	f000 fd31 	bl	8012200 <ucdr_check_final_buffer_behavior>
 801179e:	2800      	cmp	r0, #0
 80117a0:	d03b      	beq.n	801181a <ucdr_serialize_int16_t+0xc2>
 80117a2:	7d23      	ldrb	r3, [r4, #20]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d04a      	beq.n	801183e <ucdr_serialize_int16_t+0xe6>
 80117a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117ac:	702b      	strb	r3, [r5, #0]
 80117ae:	2e00      	cmp	r6, #0
 80117b0:	d040      	beq.n	8011834 <ucdr_serialize_int16_t+0xdc>
 80117b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117b6:	706b      	strb	r3, [r5, #1]
 80117b8:	6923      	ldr	r3, [r4, #16]
 80117ba:	2102      	movs	r1, #2
 80117bc:	68a2      	ldr	r2, [r4, #8]
 80117be:	3302      	adds	r3, #2
 80117c0:	7da0      	ldrb	r0, [r4, #22]
 80117c2:	4442      	add	r2, r8
 80117c4:	7561      	strb	r1, [r4, #21]
 80117c6:	1b9e      	subs	r6, r3, r6
 80117c8:	f080 0001 	eor.w	r0, r0, #1
 80117cc:	60a2      	str	r2, [r4, #8]
 80117ce:	6126      	str	r6, [r4, #16]
 80117d0:	b002      	add	sp, #8
 80117d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117d6:	2102      	movs	r1, #2
 80117d8:	4620      	mov	r0, r4
 80117da:	f000 fd11 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80117de:	b190      	cbz	r0, 8011806 <ucdr_serialize_int16_t+0xae>
 80117e0:	7d23      	ldrb	r3, [r4, #20]
 80117e2:	2b01      	cmp	r3, #1
 80117e4:	68a3      	ldr	r3, [r4, #8]
 80117e6:	d014      	beq.n	8011812 <ucdr_serialize_int16_t+0xba>
 80117e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80117ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80117f0:	7019      	strb	r1, [r3, #0]
 80117f2:	68a3      	ldr	r3, [r4, #8]
 80117f4:	705a      	strb	r2, [r3, #1]
 80117f6:	2102      	movs	r1, #2
 80117f8:	68a2      	ldr	r2, [r4, #8]
 80117fa:	6923      	ldr	r3, [r4, #16]
 80117fc:	440a      	add	r2, r1
 80117fe:	7561      	strb	r1, [r4, #21]
 8011800:	440b      	add	r3, r1
 8011802:	60a2      	str	r2, [r4, #8]
 8011804:	6123      	str	r3, [r4, #16]
 8011806:	7da0      	ldrb	r0, [r4, #22]
 8011808:	f080 0001 	eor.w	r0, r0, #1
 801180c:	b002      	add	sp, #8
 801180e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011812:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011816:	801a      	strh	r2, [r3, #0]
 8011818:	e7ed      	b.n	80117f6 <ucdr_serialize_int16_t+0x9e>
 801181a:	68a2      	ldr	r2, [r4, #8]
 801181c:	6923      	ldr	r3, [r4, #16]
 801181e:	7da0      	ldrb	r0, [r4, #22]
 8011820:	1b92      	subs	r2, r2, r6
 8011822:	1b9b      	subs	r3, r3, r6
 8011824:	7567      	strb	r7, [r4, #21]
 8011826:	f080 0001 	eor.w	r0, r0, #1
 801182a:	60a2      	str	r2, [r4, #8]
 801182c:	6123      	str	r3, [r4, #16]
 801182e:	b002      	add	sp, #8
 8011830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011834:	68a3      	ldr	r3, [r4, #8]
 8011836:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801183a:	701a      	strb	r2, [r3, #0]
 801183c:	e7bc      	b.n	80117b8 <ucdr_serialize_int16_t+0x60>
 801183e:	4628      	mov	r0, r5
 8011840:	f10d 0506 	add.w	r5, sp, #6
 8011844:	4632      	mov	r2, r6
 8011846:	4629      	mov	r1, r5
 8011848:	f00e fb59 	bl	801fefe <memcpy>
 801184c:	4642      	mov	r2, r8
 801184e:	19a9      	adds	r1, r5, r6
 8011850:	68a0      	ldr	r0, [r4, #8]
 8011852:	f00e fb54 	bl	801fefe <memcpy>
 8011856:	e7af      	b.n	80117b8 <ucdr_serialize_int16_t+0x60>

08011858 <ucdr_deserialize_int16_t>:
 8011858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801185c:	4604      	mov	r4, r0
 801185e:	460d      	mov	r5, r1
 8011860:	2102      	movs	r1, #2
 8011862:	f000 fd21 	bl	80122a8 <ucdr_buffer_alignment>
 8011866:	4601      	mov	r1, r0
 8011868:	4620      	mov	r0, r4
 801186a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801186e:	f000 fd63 	bl	8012338 <ucdr_advance_buffer>
 8011872:	2102      	movs	r1, #2
 8011874:	4620      	mov	r0, r4
 8011876:	f000 fcb7 	bl	80121e8 <ucdr_check_buffer_available_for>
 801187a:	bb60      	cbnz	r0, 80118d6 <ucdr_deserialize_int16_t+0x7e>
 801187c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011880:	42be      	cmp	r6, r7
 8011882:	d923      	bls.n	80118cc <ucdr_deserialize_int16_t+0x74>
 8011884:	6923      	ldr	r3, [r4, #16]
 8011886:	4620      	mov	r0, r4
 8011888:	60a6      	str	r6, [r4, #8]
 801188a:	1bf6      	subs	r6, r6, r7
 801188c:	4433      	add	r3, r6
 801188e:	f1c6 0902 	rsb	r9, r6, #2
 8011892:	6123      	str	r3, [r4, #16]
 8011894:	4649      	mov	r1, r9
 8011896:	f000 fcb3 	bl	8012200 <ucdr_check_final_buffer_behavior>
 801189a:	2800      	cmp	r0, #0
 801189c:	d034      	beq.n	8011908 <ucdr_deserialize_int16_t+0xb0>
 801189e:	7d23      	ldrb	r3, [r4, #20]
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d042      	beq.n	801192a <ucdr_deserialize_int16_t+0xd2>
 80118a4:	787b      	ldrb	r3, [r7, #1]
 80118a6:	702b      	strb	r3, [r5, #0]
 80118a8:	2e00      	cmp	r6, #0
 80118aa:	d03a      	beq.n	8011922 <ucdr_deserialize_int16_t+0xca>
 80118ac:	783b      	ldrb	r3, [r7, #0]
 80118ae:	706b      	strb	r3, [r5, #1]
 80118b0:	6923      	ldr	r3, [r4, #16]
 80118b2:	2102      	movs	r1, #2
 80118b4:	68a2      	ldr	r2, [r4, #8]
 80118b6:	3302      	adds	r3, #2
 80118b8:	7da0      	ldrb	r0, [r4, #22]
 80118ba:	444a      	add	r2, r9
 80118bc:	7561      	strb	r1, [r4, #21]
 80118be:	1b9b      	subs	r3, r3, r6
 80118c0:	f080 0001 	eor.w	r0, r0, #1
 80118c4:	60a2      	str	r2, [r4, #8]
 80118c6:	6123      	str	r3, [r4, #16]
 80118c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118cc:	2102      	movs	r1, #2
 80118ce:	4620      	mov	r0, r4
 80118d0:	f000 fc96 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80118d4:	b180      	cbz	r0, 80118f8 <ucdr_deserialize_int16_t+0xa0>
 80118d6:	7d23      	ldrb	r3, [r4, #20]
 80118d8:	2b01      	cmp	r3, #1
 80118da:	68a3      	ldr	r3, [r4, #8]
 80118dc:	d011      	beq.n	8011902 <ucdr_deserialize_int16_t+0xaa>
 80118de:	785b      	ldrb	r3, [r3, #1]
 80118e0:	702b      	strb	r3, [r5, #0]
 80118e2:	68a3      	ldr	r3, [r4, #8]
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	706b      	strb	r3, [r5, #1]
 80118e8:	2102      	movs	r1, #2
 80118ea:	68a2      	ldr	r2, [r4, #8]
 80118ec:	6923      	ldr	r3, [r4, #16]
 80118ee:	440a      	add	r2, r1
 80118f0:	7561      	strb	r1, [r4, #21]
 80118f2:	440b      	add	r3, r1
 80118f4:	60a2      	str	r2, [r4, #8]
 80118f6:	6123      	str	r3, [r4, #16]
 80118f8:	7da0      	ldrb	r0, [r4, #22]
 80118fa:	f080 0001 	eor.w	r0, r0, #1
 80118fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	802b      	strh	r3, [r5, #0]
 8011906:	e7ef      	b.n	80118e8 <ucdr_deserialize_int16_t+0x90>
 8011908:	68a2      	ldr	r2, [r4, #8]
 801190a:	6923      	ldr	r3, [r4, #16]
 801190c:	1b92      	subs	r2, r2, r6
 801190e:	7da0      	ldrb	r0, [r4, #22]
 8011910:	1b9b      	subs	r3, r3, r6
 8011912:	f884 8015 	strb.w	r8, [r4, #21]
 8011916:	f080 0001 	eor.w	r0, r0, #1
 801191a:	60a2      	str	r2, [r4, #8]
 801191c:	6123      	str	r3, [r4, #16]
 801191e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011922:	68a3      	ldr	r3, [r4, #8]
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	706b      	strb	r3, [r5, #1]
 8011928:	e7c2      	b.n	80118b0 <ucdr_deserialize_int16_t+0x58>
 801192a:	4639      	mov	r1, r7
 801192c:	4632      	mov	r2, r6
 801192e:	4628      	mov	r0, r5
 8011930:	f00e fae5 	bl	801fefe <memcpy>
 8011934:	464a      	mov	r2, r9
 8011936:	19a8      	adds	r0, r5, r6
 8011938:	68a1      	ldr	r1, [r4, #8]
 801193a:	f00e fae0 	bl	801fefe <memcpy>
 801193e:	e7b7      	b.n	80118b0 <ucdr_deserialize_int16_t+0x58>

08011940 <ucdr_serialize_int32_t>:
 8011940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011944:	b082      	sub	sp, #8
 8011946:	4604      	mov	r4, r0
 8011948:	9101      	str	r1, [sp, #4]
 801194a:	2104      	movs	r1, #4
 801194c:	f000 fcac 	bl	80122a8 <ucdr_buffer_alignment>
 8011950:	4601      	mov	r1, r0
 8011952:	4620      	mov	r0, r4
 8011954:	7d67      	ldrb	r7, [r4, #21]
 8011956:	f000 fcef 	bl	8012338 <ucdr_advance_buffer>
 801195a:	2104      	movs	r1, #4
 801195c:	4620      	mov	r0, r4
 801195e:	f000 fc43 	bl	80121e8 <ucdr_check_buffer_available_for>
 8011962:	2800      	cmp	r0, #0
 8011964:	d139      	bne.n	80119da <ucdr_serialize_int32_t+0x9a>
 8011966:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801196a:	42ab      	cmp	r3, r5
 801196c:	d930      	bls.n	80119d0 <ucdr_serialize_int32_t+0x90>
 801196e:	1b5e      	subs	r6, r3, r5
 8011970:	60a3      	str	r3, [r4, #8]
 8011972:	6923      	ldr	r3, [r4, #16]
 8011974:	4620      	mov	r0, r4
 8011976:	f1c6 0804 	rsb	r8, r6, #4
 801197a:	4433      	add	r3, r6
 801197c:	4641      	mov	r1, r8
 801197e:	6123      	str	r3, [r4, #16]
 8011980:	f000 fc3e 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011984:	2800      	cmp	r0, #0
 8011986:	d04c      	beq.n	8011a22 <ucdr_serialize_int32_t+0xe2>
 8011988:	7d23      	ldrb	r3, [r4, #20]
 801198a:	2b01      	cmp	r3, #1
 801198c:	d063      	beq.n	8011a56 <ucdr_serialize_int32_t+0x116>
 801198e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011992:	702b      	strb	r3, [r5, #0]
 8011994:	2e00      	cmp	r6, #0
 8011996:	d051      	beq.n	8011a3c <ucdr_serialize_int32_t+0xfc>
 8011998:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801199c:	2e01      	cmp	r6, #1
 801199e:	706b      	strb	r3, [r5, #1]
 80119a0:	d050      	beq.n	8011a44 <ucdr_serialize_int32_t+0x104>
 80119a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80119a6:	2e02      	cmp	r6, #2
 80119a8:	70ab      	strb	r3, [r5, #2]
 80119aa:	d04f      	beq.n	8011a4c <ucdr_serialize_int32_t+0x10c>
 80119ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80119b0:	70eb      	strb	r3, [r5, #3]
 80119b2:	6923      	ldr	r3, [r4, #16]
 80119b4:	2104      	movs	r1, #4
 80119b6:	68a2      	ldr	r2, [r4, #8]
 80119b8:	3304      	adds	r3, #4
 80119ba:	7da0      	ldrb	r0, [r4, #22]
 80119bc:	4442      	add	r2, r8
 80119be:	7561      	strb	r1, [r4, #21]
 80119c0:	1b9e      	subs	r6, r3, r6
 80119c2:	f080 0001 	eor.w	r0, r0, #1
 80119c6:	60a2      	str	r2, [r4, #8]
 80119c8:	6126      	str	r6, [r4, #16]
 80119ca:	b002      	add	sp, #8
 80119cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d0:	2104      	movs	r1, #4
 80119d2:	4620      	mov	r0, r4
 80119d4:	f000 fc14 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80119d8:	b1d0      	cbz	r0, 8011a10 <ucdr_serialize_int32_t+0xd0>
 80119da:	7d23      	ldrb	r3, [r4, #20]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	68a3      	ldr	r3, [r4, #8]
 80119e0:	d01c      	beq.n	8011a1c <ucdr_serialize_int32_t+0xdc>
 80119e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80119e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80119ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80119ee:	7018      	strb	r0, [r3, #0]
 80119f0:	68a3      	ldr	r3, [r4, #8]
 80119f2:	705a      	strb	r2, [r3, #1]
 80119f4:	68a3      	ldr	r3, [r4, #8]
 80119f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80119fa:	7099      	strb	r1, [r3, #2]
 80119fc:	68a3      	ldr	r3, [r4, #8]
 80119fe:	70da      	strb	r2, [r3, #3]
 8011a00:	2104      	movs	r1, #4
 8011a02:	68a2      	ldr	r2, [r4, #8]
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	440a      	add	r2, r1
 8011a08:	7561      	strb	r1, [r4, #21]
 8011a0a:	440b      	add	r3, r1
 8011a0c:	60a2      	str	r2, [r4, #8]
 8011a0e:	6123      	str	r3, [r4, #16]
 8011a10:	7da0      	ldrb	r0, [r4, #22]
 8011a12:	f080 0001 	eor.w	r0, r0, #1
 8011a16:	b002      	add	sp, #8
 8011a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a1c:	9a01      	ldr	r2, [sp, #4]
 8011a1e:	601a      	str	r2, [r3, #0]
 8011a20:	e7ee      	b.n	8011a00 <ucdr_serialize_int32_t+0xc0>
 8011a22:	68a2      	ldr	r2, [r4, #8]
 8011a24:	6923      	ldr	r3, [r4, #16]
 8011a26:	7da0      	ldrb	r0, [r4, #22]
 8011a28:	1b92      	subs	r2, r2, r6
 8011a2a:	1b9b      	subs	r3, r3, r6
 8011a2c:	7567      	strb	r7, [r4, #21]
 8011a2e:	f080 0001 	eor.w	r0, r0, #1
 8011a32:	60a2      	str	r2, [r4, #8]
 8011a34:	6123      	str	r3, [r4, #16]
 8011a36:	b002      	add	sp, #8
 8011a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a3c:	68a3      	ldr	r3, [r4, #8]
 8011a3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011a42:	701a      	strb	r2, [r3, #0]
 8011a44:	68a3      	ldr	r3, [r4, #8]
 8011a46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011a4a:	701a      	strb	r2, [r3, #0]
 8011a4c:	68a3      	ldr	r3, [r4, #8]
 8011a4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011a52:	701a      	strb	r2, [r3, #0]
 8011a54:	e7ad      	b.n	80119b2 <ucdr_serialize_int32_t+0x72>
 8011a56:	4628      	mov	r0, r5
 8011a58:	ad01      	add	r5, sp, #4
 8011a5a:	4632      	mov	r2, r6
 8011a5c:	4629      	mov	r1, r5
 8011a5e:	f00e fa4e 	bl	801fefe <memcpy>
 8011a62:	4642      	mov	r2, r8
 8011a64:	19a9      	adds	r1, r5, r6
 8011a66:	68a0      	ldr	r0, [r4, #8]
 8011a68:	f00e fa49 	bl	801fefe <memcpy>
 8011a6c:	e7a1      	b.n	80119b2 <ucdr_serialize_int32_t+0x72>
 8011a6e:	bf00      	nop

08011a70 <ucdr_deserialize_int32_t>:
 8011a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a74:	4604      	mov	r4, r0
 8011a76:	460d      	mov	r5, r1
 8011a78:	2104      	movs	r1, #4
 8011a7a:	f000 fc15 	bl	80122a8 <ucdr_buffer_alignment>
 8011a7e:	4601      	mov	r1, r0
 8011a80:	4620      	mov	r0, r4
 8011a82:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011a86:	f000 fc57 	bl	8012338 <ucdr_advance_buffer>
 8011a8a:	2104      	movs	r1, #4
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	f000 fbab 	bl	80121e8 <ucdr_check_buffer_available_for>
 8011a92:	2800      	cmp	r0, #0
 8011a94:	d138      	bne.n	8011b08 <ucdr_deserialize_int32_t+0x98>
 8011a96:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011a9a:	42b7      	cmp	r7, r6
 8011a9c:	d92f      	bls.n	8011afe <ucdr_deserialize_int32_t+0x8e>
 8011a9e:	6923      	ldr	r3, [r4, #16]
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	60a7      	str	r7, [r4, #8]
 8011aa4:	1bbf      	subs	r7, r7, r6
 8011aa6:	443b      	add	r3, r7
 8011aa8:	f1c7 0904 	rsb	r9, r7, #4
 8011aac:	6123      	str	r3, [r4, #16]
 8011aae:	4649      	mov	r1, r9
 8011ab0:	f000 fba6 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d046      	beq.n	8011b46 <ucdr_deserialize_int32_t+0xd6>
 8011ab8:	7d23      	ldrb	r3, [r4, #20]
 8011aba:	2b01      	cmp	r3, #1
 8011abc:	d05c      	beq.n	8011b78 <ucdr_deserialize_int32_t+0x108>
 8011abe:	78f3      	ldrb	r3, [r6, #3]
 8011ac0:	702b      	strb	r3, [r5, #0]
 8011ac2:	2f00      	cmp	r7, #0
 8011ac4:	d04c      	beq.n	8011b60 <ucdr_deserialize_int32_t+0xf0>
 8011ac6:	78b3      	ldrb	r3, [r6, #2]
 8011ac8:	2f01      	cmp	r7, #1
 8011aca:	706b      	strb	r3, [r5, #1]
 8011acc:	f105 0302 	add.w	r3, r5, #2
 8011ad0:	d04a      	beq.n	8011b68 <ucdr_deserialize_int32_t+0xf8>
 8011ad2:	7873      	ldrb	r3, [r6, #1]
 8011ad4:	2f02      	cmp	r7, #2
 8011ad6:	70ab      	strb	r3, [r5, #2]
 8011ad8:	f105 0303 	add.w	r3, r5, #3
 8011adc:	d048      	beq.n	8011b70 <ucdr_deserialize_int32_t+0x100>
 8011ade:	7833      	ldrb	r3, [r6, #0]
 8011ae0:	70eb      	strb	r3, [r5, #3]
 8011ae2:	6923      	ldr	r3, [r4, #16]
 8011ae4:	2104      	movs	r1, #4
 8011ae6:	68a2      	ldr	r2, [r4, #8]
 8011ae8:	3304      	adds	r3, #4
 8011aea:	7da0      	ldrb	r0, [r4, #22]
 8011aec:	444a      	add	r2, r9
 8011aee:	7561      	strb	r1, [r4, #21]
 8011af0:	1bdb      	subs	r3, r3, r7
 8011af2:	f080 0001 	eor.w	r0, r0, #1
 8011af6:	60a2      	str	r2, [r4, #8]
 8011af8:	6123      	str	r3, [r4, #16]
 8011afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011afe:	2104      	movs	r1, #4
 8011b00:	4620      	mov	r0, r4
 8011b02:	f000 fb7d 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011b06:	b1b0      	cbz	r0, 8011b36 <ucdr_deserialize_int32_t+0xc6>
 8011b08:	7d23      	ldrb	r3, [r4, #20]
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	68a3      	ldr	r3, [r4, #8]
 8011b0e:	d017      	beq.n	8011b40 <ucdr_deserialize_int32_t+0xd0>
 8011b10:	78db      	ldrb	r3, [r3, #3]
 8011b12:	702b      	strb	r3, [r5, #0]
 8011b14:	68a3      	ldr	r3, [r4, #8]
 8011b16:	789b      	ldrb	r3, [r3, #2]
 8011b18:	706b      	strb	r3, [r5, #1]
 8011b1a:	68a3      	ldr	r3, [r4, #8]
 8011b1c:	785b      	ldrb	r3, [r3, #1]
 8011b1e:	70ab      	strb	r3, [r5, #2]
 8011b20:	68a3      	ldr	r3, [r4, #8]
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	70eb      	strb	r3, [r5, #3]
 8011b26:	2104      	movs	r1, #4
 8011b28:	68a2      	ldr	r2, [r4, #8]
 8011b2a:	6923      	ldr	r3, [r4, #16]
 8011b2c:	440a      	add	r2, r1
 8011b2e:	7561      	strb	r1, [r4, #21]
 8011b30:	440b      	add	r3, r1
 8011b32:	60a2      	str	r2, [r4, #8]
 8011b34:	6123      	str	r3, [r4, #16]
 8011b36:	7da0      	ldrb	r0, [r4, #22]
 8011b38:	f080 0001 	eor.w	r0, r0, #1
 8011b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	602b      	str	r3, [r5, #0]
 8011b44:	e7ef      	b.n	8011b26 <ucdr_deserialize_int32_t+0xb6>
 8011b46:	68a2      	ldr	r2, [r4, #8]
 8011b48:	6923      	ldr	r3, [r4, #16]
 8011b4a:	1bd2      	subs	r2, r2, r7
 8011b4c:	7da0      	ldrb	r0, [r4, #22]
 8011b4e:	1bdb      	subs	r3, r3, r7
 8011b50:	f884 8015 	strb.w	r8, [r4, #21]
 8011b54:	f080 0001 	eor.w	r0, r0, #1
 8011b58:	60a2      	str	r2, [r4, #8]
 8011b5a:	6123      	str	r3, [r4, #16]
 8011b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b60:	68a3      	ldr	r3, [r4, #8]
 8011b62:	789b      	ldrb	r3, [r3, #2]
 8011b64:	706b      	strb	r3, [r5, #1]
 8011b66:	1cab      	adds	r3, r5, #2
 8011b68:	68a2      	ldr	r2, [r4, #8]
 8011b6a:	7852      	ldrb	r2, [r2, #1]
 8011b6c:	f803 2b01 	strb.w	r2, [r3], #1
 8011b70:	68a2      	ldr	r2, [r4, #8]
 8011b72:	7812      	ldrb	r2, [r2, #0]
 8011b74:	701a      	strb	r2, [r3, #0]
 8011b76:	e7b4      	b.n	8011ae2 <ucdr_deserialize_int32_t+0x72>
 8011b78:	4631      	mov	r1, r6
 8011b7a:	463a      	mov	r2, r7
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	f00e f9be 	bl	801fefe <memcpy>
 8011b82:	464a      	mov	r2, r9
 8011b84:	19e8      	adds	r0, r5, r7
 8011b86:	68a1      	ldr	r1, [r4, #8]
 8011b88:	f00e f9b9 	bl	801fefe <memcpy>
 8011b8c:	e7a9      	b.n	8011ae2 <ucdr_deserialize_int32_t+0x72>
 8011b8e:	bf00      	nop

08011b90 <ucdr_serialize_int64_t>:
 8011b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b94:	4604      	mov	r4, r0
 8011b96:	b082      	sub	sp, #8
 8011b98:	2108      	movs	r1, #8
 8011b9a:	e9cd 2300 	strd	r2, r3, [sp]
 8011b9e:	f000 fb83 	bl	80122a8 <ucdr_buffer_alignment>
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	7d67      	ldrb	r7, [r4, #21]
 8011ba8:	f000 fbc6 	bl	8012338 <ucdr_advance_buffer>
 8011bac:	2108      	movs	r1, #8
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f000 fb1a 	bl	80121e8 <ucdr_check_buffer_available_for>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	d14e      	bne.n	8011c56 <ucdr_serialize_int64_t+0xc6>
 8011bb8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011bbc:	42ab      	cmp	r3, r5
 8011bbe:	d945      	bls.n	8011c4c <ucdr_serialize_int64_t+0xbc>
 8011bc0:	1b5e      	subs	r6, r3, r5
 8011bc2:	60a3      	str	r3, [r4, #8]
 8011bc4:	6923      	ldr	r3, [r4, #16]
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f1c6 0808 	rsb	r8, r6, #8
 8011bcc:	4433      	add	r3, r6
 8011bce:	4641      	mov	r1, r8
 8011bd0:	6123      	str	r3, [r4, #16]
 8011bd2:	f000 fb15 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	d074      	beq.n	8011cc4 <ucdr_serialize_int64_t+0x134>
 8011bda:	7d23      	ldrb	r3, [r4, #20]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	f000 809b 	beq.w	8011d18 <ucdr_serialize_int64_t+0x188>
 8011be2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011be6:	702b      	strb	r3, [r5, #0]
 8011be8:	2e00      	cmp	r6, #0
 8011bea:	d078      	beq.n	8011cde <ucdr_serialize_int64_t+0x14e>
 8011bec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011bf0:	2e01      	cmp	r6, #1
 8011bf2:	706b      	strb	r3, [r5, #1]
 8011bf4:	d077      	beq.n	8011ce6 <ucdr_serialize_int64_t+0x156>
 8011bf6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011bfa:	2e02      	cmp	r6, #2
 8011bfc:	70ab      	strb	r3, [r5, #2]
 8011bfe:	d076      	beq.n	8011cee <ucdr_serialize_int64_t+0x15e>
 8011c00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c04:	2e03      	cmp	r6, #3
 8011c06:	70eb      	strb	r3, [r5, #3]
 8011c08:	d075      	beq.n	8011cf6 <ucdr_serialize_int64_t+0x166>
 8011c0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011c0e:	2e04      	cmp	r6, #4
 8011c10:	712b      	strb	r3, [r5, #4]
 8011c12:	d074      	beq.n	8011cfe <ucdr_serialize_int64_t+0x16e>
 8011c14:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011c18:	2e05      	cmp	r6, #5
 8011c1a:	716b      	strb	r3, [r5, #5]
 8011c1c:	d073      	beq.n	8011d06 <ucdr_serialize_int64_t+0x176>
 8011c1e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011c22:	2e06      	cmp	r6, #6
 8011c24:	71ab      	strb	r3, [r5, #6]
 8011c26:	d072      	beq.n	8011d0e <ucdr_serialize_int64_t+0x17e>
 8011c28:	f89d 3000 	ldrb.w	r3, [sp]
 8011c2c:	71eb      	strb	r3, [r5, #7]
 8011c2e:	6923      	ldr	r3, [r4, #16]
 8011c30:	2108      	movs	r1, #8
 8011c32:	68a2      	ldr	r2, [r4, #8]
 8011c34:	3308      	adds	r3, #8
 8011c36:	7da0      	ldrb	r0, [r4, #22]
 8011c38:	4442      	add	r2, r8
 8011c3a:	7561      	strb	r1, [r4, #21]
 8011c3c:	1b9e      	subs	r6, r3, r6
 8011c3e:	f080 0001 	eor.w	r0, r0, #1
 8011c42:	60a2      	str	r2, [r4, #8]
 8011c44:	6126      	str	r6, [r4, #16]
 8011c46:	b002      	add	sp, #8
 8011c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c4c:	2108      	movs	r1, #8
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f000 fad6 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011c54:	b350      	cbz	r0, 8011cac <ucdr_serialize_int64_t+0x11c>
 8011c56:	7d23      	ldrb	r3, [r4, #20]
 8011c58:	2b01      	cmp	r3, #1
 8011c5a:	d02d      	beq.n	8011cb8 <ucdr_serialize_int64_t+0x128>
 8011c5c:	68a3      	ldr	r3, [r4, #8]
 8011c5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011c62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c66:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011c6a:	7018      	strb	r0, [r3, #0]
 8011c6c:	68a3      	ldr	r3, [r4, #8]
 8011c6e:	705a      	strb	r2, [r3, #1]
 8011c70:	68a3      	ldr	r3, [r4, #8]
 8011c72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011c76:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011c7a:	7099      	strb	r1, [r3, #2]
 8011c7c:	68a3      	ldr	r3, [r4, #8]
 8011c7e:	70da      	strb	r2, [r3, #3]
 8011c80:	68a3      	ldr	r3, [r4, #8]
 8011c82:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011c86:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8011c8a:	7118      	strb	r0, [r3, #4]
 8011c8c:	68a3      	ldr	r3, [r4, #8]
 8011c8e:	715a      	strb	r2, [r3, #5]
 8011c90:	68a3      	ldr	r3, [r4, #8]
 8011c92:	f89d 2000 	ldrb.w	r2, [sp]
 8011c96:	7199      	strb	r1, [r3, #6]
 8011c98:	68a3      	ldr	r3, [r4, #8]
 8011c9a:	71da      	strb	r2, [r3, #7]
 8011c9c:	2108      	movs	r1, #8
 8011c9e:	68a2      	ldr	r2, [r4, #8]
 8011ca0:	6923      	ldr	r3, [r4, #16]
 8011ca2:	440a      	add	r2, r1
 8011ca4:	7561      	strb	r1, [r4, #21]
 8011ca6:	440b      	add	r3, r1
 8011ca8:	60a2      	str	r2, [r4, #8]
 8011caa:	6123      	str	r3, [r4, #16]
 8011cac:	7da0      	ldrb	r0, [r4, #22]
 8011cae:	f080 0001 	eor.w	r0, r0, #1
 8011cb2:	b002      	add	sp, #8
 8011cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb8:	466b      	mov	r3, sp
 8011cba:	68a2      	ldr	r2, [r4, #8]
 8011cbc:	cb03      	ldmia	r3!, {r0, r1}
 8011cbe:	6010      	str	r0, [r2, #0]
 8011cc0:	6051      	str	r1, [r2, #4]
 8011cc2:	e7eb      	b.n	8011c9c <ucdr_serialize_int64_t+0x10c>
 8011cc4:	68a2      	ldr	r2, [r4, #8]
 8011cc6:	6923      	ldr	r3, [r4, #16]
 8011cc8:	7da0      	ldrb	r0, [r4, #22]
 8011cca:	1b92      	subs	r2, r2, r6
 8011ccc:	1b9b      	subs	r3, r3, r6
 8011cce:	7567      	strb	r7, [r4, #21]
 8011cd0:	f080 0001 	eor.w	r0, r0, #1
 8011cd4:	60a2      	str	r2, [r4, #8]
 8011cd6:	6123      	str	r3, [r4, #16]
 8011cd8:	b002      	add	sp, #8
 8011cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cde:	68a3      	ldr	r3, [r4, #8]
 8011ce0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011ce4:	701a      	strb	r2, [r3, #0]
 8011ce6:	68a3      	ldr	r3, [r4, #8]
 8011ce8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011cec:	701a      	strb	r2, [r3, #0]
 8011cee:	68a3      	ldr	r3, [r4, #8]
 8011cf0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011cf4:	701a      	strb	r2, [r3, #0]
 8011cf6:	68a3      	ldr	r3, [r4, #8]
 8011cf8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011cfc:	701a      	strb	r2, [r3, #0]
 8011cfe:	68a3      	ldr	r3, [r4, #8]
 8011d00:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011d04:	701a      	strb	r2, [r3, #0]
 8011d06:	68a3      	ldr	r3, [r4, #8]
 8011d08:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011d0c:	701a      	strb	r2, [r3, #0]
 8011d0e:	68a3      	ldr	r3, [r4, #8]
 8011d10:	f89d 2000 	ldrb.w	r2, [sp]
 8011d14:	701a      	strb	r2, [r3, #0]
 8011d16:	e78a      	b.n	8011c2e <ucdr_serialize_int64_t+0x9e>
 8011d18:	4628      	mov	r0, r5
 8011d1a:	466d      	mov	r5, sp
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	4629      	mov	r1, r5
 8011d20:	f00e f8ed 	bl	801fefe <memcpy>
 8011d24:	4642      	mov	r2, r8
 8011d26:	19a9      	adds	r1, r5, r6
 8011d28:	68a0      	ldr	r0, [r4, #8]
 8011d2a:	f00e f8e8 	bl	801fefe <memcpy>
 8011d2e:	e77e      	b.n	8011c2e <ucdr_serialize_int64_t+0x9e>

08011d30 <ucdr_deserialize_int64_t>:
 8011d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d34:	4604      	mov	r4, r0
 8011d36:	460d      	mov	r5, r1
 8011d38:	2108      	movs	r1, #8
 8011d3a:	f000 fab5 	bl	80122a8 <ucdr_buffer_alignment>
 8011d3e:	4601      	mov	r1, r0
 8011d40:	4620      	mov	r0, r4
 8011d42:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011d46:	f000 faf7 	bl	8012338 <ucdr_advance_buffer>
 8011d4a:	2108      	movs	r1, #8
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 fa4b 	bl	80121e8 <ucdr_check_buffer_available_for>
 8011d52:	2800      	cmp	r0, #0
 8011d54:	d151      	bne.n	8011dfa <ucdr_deserialize_int64_t+0xca>
 8011d56:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011d5a:	42be      	cmp	r6, r7
 8011d5c:	d948      	bls.n	8011df0 <ucdr_deserialize_int64_t+0xc0>
 8011d5e:	6923      	ldr	r3, [r4, #16]
 8011d60:	4620      	mov	r0, r4
 8011d62:	60a6      	str	r6, [r4, #8]
 8011d64:	1bf6      	subs	r6, r6, r7
 8011d66:	4433      	add	r3, r6
 8011d68:	f1c6 0908 	rsb	r9, r6, #8
 8011d6c:	6123      	str	r3, [r4, #16]
 8011d6e:	4649      	mov	r1, r9
 8011d70:	f000 fa46 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d06d      	beq.n	8011e54 <ucdr_deserialize_int64_t+0x124>
 8011d78:	7d23      	ldrb	r3, [r4, #20]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	f000 8093 	beq.w	8011ea6 <ucdr_deserialize_int64_t+0x176>
 8011d80:	79fb      	ldrb	r3, [r7, #7]
 8011d82:	702b      	strb	r3, [r5, #0]
 8011d84:	2e00      	cmp	r6, #0
 8011d86:	d072      	beq.n	8011e6e <ucdr_deserialize_int64_t+0x13e>
 8011d88:	79bb      	ldrb	r3, [r7, #6]
 8011d8a:	2e01      	cmp	r6, #1
 8011d8c:	706b      	strb	r3, [r5, #1]
 8011d8e:	f105 0302 	add.w	r3, r5, #2
 8011d92:	d070      	beq.n	8011e76 <ucdr_deserialize_int64_t+0x146>
 8011d94:	797b      	ldrb	r3, [r7, #5]
 8011d96:	2e02      	cmp	r6, #2
 8011d98:	70ab      	strb	r3, [r5, #2]
 8011d9a:	f105 0303 	add.w	r3, r5, #3
 8011d9e:	d06e      	beq.n	8011e7e <ucdr_deserialize_int64_t+0x14e>
 8011da0:	793b      	ldrb	r3, [r7, #4]
 8011da2:	2e03      	cmp	r6, #3
 8011da4:	70eb      	strb	r3, [r5, #3]
 8011da6:	f105 0304 	add.w	r3, r5, #4
 8011daa:	d06c      	beq.n	8011e86 <ucdr_deserialize_int64_t+0x156>
 8011dac:	78fb      	ldrb	r3, [r7, #3]
 8011dae:	2e04      	cmp	r6, #4
 8011db0:	712b      	strb	r3, [r5, #4]
 8011db2:	f105 0305 	add.w	r3, r5, #5
 8011db6:	d06a      	beq.n	8011e8e <ucdr_deserialize_int64_t+0x15e>
 8011db8:	78bb      	ldrb	r3, [r7, #2]
 8011dba:	2e05      	cmp	r6, #5
 8011dbc:	716b      	strb	r3, [r5, #5]
 8011dbe:	f105 0306 	add.w	r3, r5, #6
 8011dc2:	d068      	beq.n	8011e96 <ucdr_deserialize_int64_t+0x166>
 8011dc4:	787b      	ldrb	r3, [r7, #1]
 8011dc6:	2e06      	cmp	r6, #6
 8011dc8:	71ab      	strb	r3, [r5, #6]
 8011dca:	f105 0307 	add.w	r3, r5, #7
 8011dce:	d066      	beq.n	8011e9e <ucdr_deserialize_int64_t+0x16e>
 8011dd0:	783b      	ldrb	r3, [r7, #0]
 8011dd2:	71eb      	strb	r3, [r5, #7]
 8011dd4:	6923      	ldr	r3, [r4, #16]
 8011dd6:	2108      	movs	r1, #8
 8011dd8:	68a2      	ldr	r2, [r4, #8]
 8011dda:	3308      	adds	r3, #8
 8011ddc:	7da0      	ldrb	r0, [r4, #22]
 8011dde:	444a      	add	r2, r9
 8011de0:	7561      	strb	r1, [r4, #21]
 8011de2:	1b9e      	subs	r6, r3, r6
 8011de4:	f080 0001 	eor.w	r0, r0, #1
 8011de8:	60a2      	str	r2, [r4, #8]
 8011dea:	6126      	str	r6, [r4, #16]
 8011dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011df0:	2108      	movs	r1, #8
 8011df2:	4620      	mov	r0, r4
 8011df4:	f000 fa04 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011df8:	b310      	cbz	r0, 8011e40 <ucdr_deserialize_int64_t+0x110>
 8011dfa:	7d23      	ldrb	r3, [r4, #20]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	68a3      	ldr	r3, [r4, #8]
 8011e00:	d023      	beq.n	8011e4a <ucdr_deserialize_int64_t+0x11a>
 8011e02:	79db      	ldrb	r3, [r3, #7]
 8011e04:	702b      	strb	r3, [r5, #0]
 8011e06:	68a3      	ldr	r3, [r4, #8]
 8011e08:	799b      	ldrb	r3, [r3, #6]
 8011e0a:	706b      	strb	r3, [r5, #1]
 8011e0c:	68a3      	ldr	r3, [r4, #8]
 8011e0e:	795b      	ldrb	r3, [r3, #5]
 8011e10:	70ab      	strb	r3, [r5, #2]
 8011e12:	68a3      	ldr	r3, [r4, #8]
 8011e14:	791b      	ldrb	r3, [r3, #4]
 8011e16:	70eb      	strb	r3, [r5, #3]
 8011e18:	68a3      	ldr	r3, [r4, #8]
 8011e1a:	78db      	ldrb	r3, [r3, #3]
 8011e1c:	712b      	strb	r3, [r5, #4]
 8011e1e:	68a3      	ldr	r3, [r4, #8]
 8011e20:	789b      	ldrb	r3, [r3, #2]
 8011e22:	716b      	strb	r3, [r5, #5]
 8011e24:	68a3      	ldr	r3, [r4, #8]
 8011e26:	785b      	ldrb	r3, [r3, #1]
 8011e28:	71ab      	strb	r3, [r5, #6]
 8011e2a:	68a3      	ldr	r3, [r4, #8]
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	71eb      	strb	r3, [r5, #7]
 8011e30:	2108      	movs	r1, #8
 8011e32:	68a2      	ldr	r2, [r4, #8]
 8011e34:	6923      	ldr	r3, [r4, #16]
 8011e36:	440a      	add	r2, r1
 8011e38:	7561      	strb	r1, [r4, #21]
 8011e3a:	440b      	add	r3, r1
 8011e3c:	60a2      	str	r2, [r4, #8]
 8011e3e:	6123      	str	r3, [r4, #16]
 8011e40:	7da0      	ldrb	r0, [r4, #22]
 8011e42:	f080 0001 	eor.w	r0, r0, #1
 8011e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	685b      	ldr	r3, [r3, #4]
 8011e4e:	602a      	str	r2, [r5, #0]
 8011e50:	606b      	str	r3, [r5, #4]
 8011e52:	e7ed      	b.n	8011e30 <ucdr_deserialize_int64_t+0x100>
 8011e54:	68a2      	ldr	r2, [r4, #8]
 8011e56:	6923      	ldr	r3, [r4, #16]
 8011e58:	1b92      	subs	r2, r2, r6
 8011e5a:	7da0      	ldrb	r0, [r4, #22]
 8011e5c:	1b9b      	subs	r3, r3, r6
 8011e5e:	f884 8015 	strb.w	r8, [r4, #21]
 8011e62:	f080 0001 	eor.w	r0, r0, #1
 8011e66:	60a2      	str	r2, [r4, #8]
 8011e68:	6123      	str	r3, [r4, #16]
 8011e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e6e:	68a3      	ldr	r3, [r4, #8]
 8011e70:	799b      	ldrb	r3, [r3, #6]
 8011e72:	706b      	strb	r3, [r5, #1]
 8011e74:	1cab      	adds	r3, r5, #2
 8011e76:	68a2      	ldr	r2, [r4, #8]
 8011e78:	7952      	ldrb	r2, [r2, #5]
 8011e7a:	f803 2b01 	strb.w	r2, [r3], #1
 8011e7e:	68a2      	ldr	r2, [r4, #8]
 8011e80:	7912      	ldrb	r2, [r2, #4]
 8011e82:	f803 2b01 	strb.w	r2, [r3], #1
 8011e86:	68a2      	ldr	r2, [r4, #8]
 8011e88:	78d2      	ldrb	r2, [r2, #3]
 8011e8a:	f803 2b01 	strb.w	r2, [r3], #1
 8011e8e:	68a2      	ldr	r2, [r4, #8]
 8011e90:	7892      	ldrb	r2, [r2, #2]
 8011e92:	f803 2b01 	strb.w	r2, [r3], #1
 8011e96:	68a2      	ldr	r2, [r4, #8]
 8011e98:	7852      	ldrb	r2, [r2, #1]
 8011e9a:	f803 2b01 	strb.w	r2, [r3], #1
 8011e9e:	68a2      	ldr	r2, [r4, #8]
 8011ea0:	7812      	ldrb	r2, [r2, #0]
 8011ea2:	701a      	strb	r2, [r3, #0]
 8011ea4:	e796      	b.n	8011dd4 <ucdr_deserialize_int64_t+0xa4>
 8011ea6:	4639      	mov	r1, r7
 8011ea8:	4632      	mov	r2, r6
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f00e f827 	bl	801fefe <memcpy>
 8011eb0:	464a      	mov	r2, r9
 8011eb2:	19a8      	adds	r0, r5, r6
 8011eb4:	68a1      	ldr	r1, [r4, #8]
 8011eb6:	f00e f822 	bl	801fefe <memcpy>
 8011eba:	e78b      	b.n	8011dd4 <ucdr_deserialize_int64_t+0xa4>

08011ebc <ucdr_serialize_double>:
 8011ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec0:	4604      	mov	r4, r0
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	2108      	movs	r1, #8
 8011ec6:	ed8d 0b00 	vstr	d0, [sp]
 8011eca:	f000 f9ed 	bl	80122a8 <ucdr_buffer_alignment>
 8011ece:	4601      	mov	r1, r0
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	7d67      	ldrb	r7, [r4, #21]
 8011ed4:	f000 fa30 	bl	8012338 <ucdr_advance_buffer>
 8011ed8:	2108      	movs	r1, #8
 8011eda:	4620      	mov	r0, r4
 8011edc:	f000 f984 	bl	80121e8 <ucdr_check_buffer_available_for>
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	d14e      	bne.n	8011f82 <ucdr_serialize_double+0xc6>
 8011ee4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011ee8:	42ab      	cmp	r3, r5
 8011eea:	d945      	bls.n	8011f78 <ucdr_serialize_double+0xbc>
 8011eec:	1b5e      	subs	r6, r3, r5
 8011eee:	60a3      	str	r3, [r4, #8]
 8011ef0:	6923      	ldr	r3, [r4, #16]
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f1c6 0808 	rsb	r8, r6, #8
 8011ef8:	4433      	add	r3, r6
 8011efa:	4641      	mov	r1, r8
 8011efc:	6123      	str	r3, [r4, #16]
 8011efe:	f000 f97f 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011f02:	2800      	cmp	r0, #0
 8011f04:	d074      	beq.n	8011ff0 <ucdr_serialize_double+0x134>
 8011f06:	7d23      	ldrb	r3, [r4, #20]
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	f000 809b 	beq.w	8012044 <ucdr_serialize_double+0x188>
 8011f0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f12:	702b      	strb	r3, [r5, #0]
 8011f14:	2e00      	cmp	r6, #0
 8011f16:	d078      	beq.n	801200a <ucdr_serialize_double+0x14e>
 8011f18:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f1c:	2e01      	cmp	r6, #1
 8011f1e:	706b      	strb	r3, [r5, #1]
 8011f20:	d077      	beq.n	8012012 <ucdr_serialize_double+0x156>
 8011f22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f26:	2e02      	cmp	r6, #2
 8011f28:	70ab      	strb	r3, [r5, #2]
 8011f2a:	d076      	beq.n	801201a <ucdr_serialize_double+0x15e>
 8011f2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f30:	2e03      	cmp	r6, #3
 8011f32:	70eb      	strb	r3, [r5, #3]
 8011f34:	d075      	beq.n	8012022 <ucdr_serialize_double+0x166>
 8011f36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011f3a:	2e04      	cmp	r6, #4
 8011f3c:	712b      	strb	r3, [r5, #4]
 8011f3e:	d074      	beq.n	801202a <ucdr_serialize_double+0x16e>
 8011f40:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011f44:	2e05      	cmp	r6, #5
 8011f46:	716b      	strb	r3, [r5, #5]
 8011f48:	d073      	beq.n	8012032 <ucdr_serialize_double+0x176>
 8011f4a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011f4e:	2e06      	cmp	r6, #6
 8011f50:	71ab      	strb	r3, [r5, #6]
 8011f52:	d072      	beq.n	801203a <ucdr_serialize_double+0x17e>
 8011f54:	f89d 3000 	ldrb.w	r3, [sp]
 8011f58:	71eb      	strb	r3, [r5, #7]
 8011f5a:	6923      	ldr	r3, [r4, #16]
 8011f5c:	2108      	movs	r1, #8
 8011f5e:	68a2      	ldr	r2, [r4, #8]
 8011f60:	3308      	adds	r3, #8
 8011f62:	7da0      	ldrb	r0, [r4, #22]
 8011f64:	4442      	add	r2, r8
 8011f66:	7561      	strb	r1, [r4, #21]
 8011f68:	1b9e      	subs	r6, r3, r6
 8011f6a:	f080 0001 	eor.w	r0, r0, #1
 8011f6e:	60a2      	str	r2, [r4, #8]
 8011f70:	6126      	str	r6, [r4, #16]
 8011f72:	b002      	add	sp, #8
 8011f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f78:	2108      	movs	r1, #8
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f000 f940 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8011f80:	b350      	cbz	r0, 8011fd8 <ucdr_serialize_double+0x11c>
 8011f82:	7d23      	ldrb	r3, [r4, #20]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d02d      	beq.n	8011fe4 <ucdr_serialize_double+0x128>
 8011f88:	68a3      	ldr	r3, [r4, #8]
 8011f8a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011f8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f92:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011f96:	7018      	strb	r0, [r3, #0]
 8011f98:	68a3      	ldr	r3, [r4, #8]
 8011f9a:	705a      	strb	r2, [r3, #1]
 8011f9c:	68a3      	ldr	r3, [r4, #8]
 8011f9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011fa2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011fa6:	7099      	strb	r1, [r3, #2]
 8011fa8:	68a3      	ldr	r3, [r4, #8]
 8011faa:	70da      	strb	r2, [r3, #3]
 8011fac:	68a3      	ldr	r3, [r4, #8]
 8011fae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011fb2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8011fb6:	7118      	strb	r0, [r3, #4]
 8011fb8:	68a3      	ldr	r3, [r4, #8]
 8011fba:	715a      	strb	r2, [r3, #5]
 8011fbc:	68a3      	ldr	r3, [r4, #8]
 8011fbe:	f89d 2000 	ldrb.w	r2, [sp]
 8011fc2:	7199      	strb	r1, [r3, #6]
 8011fc4:	68a3      	ldr	r3, [r4, #8]
 8011fc6:	71da      	strb	r2, [r3, #7]
 8011fc8:	2108      	movs	r1, #8
 8011fca:	68a2      	ldr	r2, [r4, #8]
 8011fcc:	6923      	ldr	r3, [r4, #16]
 8011fce:	440a      	add	r2, r1
 8011fd0:	7561      	strb	r1, [r4, #21]
 8011fd2:	440b      	add	r3, r1
 8011fd4:	60a2      	str	r2, [r4, #8]
 8011fd6:	6123      	str	r3, [r4, #16]
 8011fd8:	7da0      	ldrb	r0, [r4, #22]
 8011fda:	f080 0001 	eor.w	r0, r0, #1
 8011fde:	b002      	add	sp, #8
 8011fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe4:	466b      	mov	r3, sp
 8011fe6:	68a2      	ldr	r2, [r4, #8]
 8011fe8:	cb03      	ldmia	r3!, {r0, r1}
 8011fea:	6010      	str	r0, [r2, #0]
 8011fec:	6051      	str	r1, [r2, #4]
 8011fee:	e7eb      	b.n	8011fc8 <ucdr_serialize_double+0x10c>
 8011ff0:	68a2      	ldr	r2, [r4, #8]
 8011ff2:	6923      	ldr	r3, [r4, #16]
 8011ff4:	7da0      	ldrb	r0, [r4, #22]
 8011ff6:	1b92      	subs	r2, r2, r6
 8011ff8:	1b9b      	subs	r3, r3, r6
 8011ffa:	7567      	strb	r7, [r4, #21]
 8011ffc:	f080 0001 	eor.w	r0, r0, #1
 8012000:	60a2      	str	r2, [r4, #8]
 8012002:	6123      	str	r3, [r4, #16]
 8012004:	b002      	add	sp, #8
 8012006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801200a:	68a3      	ldr	r3, [r4, #8]
 801200c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012010:	701a      	strb	r2, [r3, #0]
 8012012:	68a3      	ldr	r3, [r4, #8]
 8012014:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012018:	701a      	strb	r2, [r3, #0]
 801201a:	68a3      	ldr	r3, [r4, #8]
 801201c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012020:	701a      	strb	r2, [r3, #0]
 8012022:	68a3      	ldr	r3, [r4, #8]
 8012024:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012028:	701a      	strb	r2, [r3, #0]
 801202a:	68a3      	ldr	r3, [r4, #8]
 801202c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012030:	701a      	strb	r2, [r3, #0]
 8012032:	68a3      	ldr	r3, [r4, #8]
 8012034:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012038:	701a      	strb	r2, [r3, #0]
 801203a:	68a3      	ldr	r3, [r4, #8]
 801203c:	f89d 2000 	ldrb.w	r2, [sp]
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	e78a      	b.n	8011f5a <ucdr_serialize_double+0x9e>
 8012044:	4628      	mov	r0, r5
 8012046:	466d      	mov	r5, sp
 8012048:	4632      	mov	r2, r6
 801204a:	4629      	mov	r1, r5
 801204c:	f00d ff57 	bl	801fefe <memcpy>
 8012050:	4642      	mov	r2, r8
 8012052:	19a9      	adds	r1, r5, r6
 8012054:	68a0      	ldr	r0, [r4, #8]
 8012056:	f00d ff52 	bl	801fefe <memcpy>
 801205a:	e77e      	b.n	8011f5a <ucdr_serialize_double+0x9e>

0801205c <ucdr_deserialize_double>:
 801205c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012060:	4604      	mov	r4, r0
 8012062:	460d      	mov	r5, r1
 8012064:	2108      	movs	r1, #8
 8012066:	f000 f91f 	bl	80122a8 <ucdr_buffer_alignment>
 801206a:	4601      	mov	r1, r0
 801206c:	4620      	mov	r0, r4
 801206e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012072:	f000 f961 	bl	8012338 <ucdr_advance_buffer>
 8012076:	2108      	movs	r1, #8
 8012078:	4620      	mov	r0, r4
 801207a:	f000 f8b5 	bl	80121e8 <ucdr_check_buffer_available_for>
 801207e:	2800      	cmp	r0, #0
 8012080:	d151      	bne.n	8012126 <ucdr_deserialize_double+0xca>
 8012082:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012086:	42be      	cmp	r6, r7
 8012088:	d948      	bls.n	801211c <ucdr_deserialize_double+0xc0>
 801208a:	6923      	ldr	r3, [r4, #16]
 801208c:	4620      	mov	r0, r4
 801208e:	60a6      	str	r6, [r4, #8]
 8012090:	1bf6      	subs	r6, r6, r7
 8012092:	4433      	add	r3, r6
 8012094:	f1c6 0908 	rsb	r9, r6, #8
 8012098:	6123      	str	r3, [r4, #16]
 801209a:	4649      	mov	r1, r9
 801209c:	f000 f8b0 	bl	8012200 <ucdr_check_final_buffer_behavior>
 80120a0:	2800      	cmp	r0, #0
 80120a2:	d06d      	beq.n	8012180 <ucdr_deserialize_double+0x124>
 80120a4:	7d23      	ldrb	r3, [r4, #20]
 80120a6:	2b01      	cmp	r3, #1
 80120a8:	f000 8093 	beq.w	80121d2 <ucdr_deserialize_double+0x176>
 80120ac:	79fb      	ldrb	r3, [r7, #7]
 80120ae:	702b      	strb	r3, [r5, #0]
 80120b0:	2e00      	cmp	r6, #0
 80120b2:	d072      	beq.n	801219a <ucdr_deserialize_double+0x13e>
 80120b4:	79bb      	ldrb	r3, [r7, #6]
 80120b6:	2e01      	cmp	r6, #1
 80120b8:	706b      	strb	r3, [r5, #1]
 80120ba:	f105 0302 	add.w	r3, r5, #2
 80120be:	d070      	beq.n	80121a2 <ucdr_deserialize_double+0x146>
 80120c0:	797b      	ldrb	r3, [r7, #5]
 80120c2:	2e02      	cmp	r6, #2
 80120c4:	70ab      	strb	r3, [r5, #2]
 80120c6:	f105 0303 	add.w	r3, r5, #3
 80120ca:	d06e      	beq.n	80121aa <ucdr_deserialize_double+0x14e>
 80120cc:	793b      	ldrb	r3, [r7, #4]
 80120ce:	2e03      	cmp	r6, #3
 80120d0:	70eb      	strb	r3, [r5, #3]
 80120d2:	f105 0304 	add.w	r3, r5, #4
 80120d6:	d06c      	beq.n	80121b2 <ucdr_deserialize_double+0x156>
 80120d8:	78fb      	ldrb	r3, [r7, #3]
 80120da:	2e04      	cmp	r6, #4
 80120dc:	712b      	strb	r3, [r5, #4]
 80120de:	f105 0305 	add.w	r3, r5, #5
 80120e2:	d06a      	beq.n	80121ba <ucdr_deserialize_double+0x15e>
 80120e4:	78bb      	ldrb	r3, [r7, #2]
 80120e6:	2e05      	cmp	r6, #5
 80120e8:	716b      	strb	r3, [r5, #5]
 80120ea:	f105 0306 	add.w	r3, r5, #6
 80120ee:	d068      	beq.n	80121c2 <ucdr_deserialize_double+0x166>
 80120f0:	787b      	ldrb	r3, [r7, #1]
 80120f2:	2e06      	cmp	r6, #6
 80120f4:	71ab      	strb	r3, [r5, #6]
 80120f6:	f105 0307 	add.w	r3, r5, #7
 80120fa:	d066      	beq.n	80121ca <ucdr_deserialize_double+0x16e>
 80120fc:	783b      	ldrb	r3, [r7, #0]
 80120fe:	71eb      	strb	r3, [r5, #7]
 8012100:	6923      	ldr	r3, [r4, #16]
 8012102:	2108      	movs	r1, #8
 8012104:	68a2      	ldr	r2, [r4, #8]
 8012106:	3308      	adds	r3, #8
 8012108:	7da0      	ldrb	r0, [r4, #22]
 801210a:	444a      	add	r2, r9
 801210c:	7561      	strb	r1, [r4, #21]
 801210e:	1b9e      	subs	r6, r3, r6
 8012110:	f080 0001 	eor.w	r0, r0, #1
 8012114:	60a2      	str	r2, [r4, #8]
 8012116:	6126      	str	r6, [r4, #16]
 8012118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801211c:	2108      	movs	r1, #8
 801211e:	4620      	mov	r0, r4
 8012120:	f000 f86e 	bl	8012200 <ucdr_check_final_buffer_behavior>
 8012124:	b310      	cbz	r0, 801216c <ucdr_deserialize_double+0x110>
 8012126:	7d23      	ldrb	r3, [r4, #20]
 8012128:	2b01      	cmp	r3, #1
 801212a:	68a3      	ldr	r3, [r4, #8]
 801212c:	d023      	beq.n	8012176 <ucdr_deserialize_double+0x11a>
 801212e:	79db      	ldrb	r3, [r3, #7]
 8012130:	702b      	strb	r3, [r5, #0]
 8012132:	68a3      	ldr	r3, [r4, #8]
 8012134:	799b      	ldrb	r3, [r3, #6]
 8012136:	706b      	strb	r3, [r5, #1]
 8012138:	68a3      	ldr	r3, [r4, #8]
 801213a:	795b      	ldrb	r3, [r3, #5]
 801213c:	70ab      	strb	r3, [r5, #2]
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	791b      	ldrb	r3, [r3, #4]
 8012142:	70eb      	strb	r3, [r5, #3]
 8012144:	68a3      	ldr	r3, [r4, #8]
 8012146:	78db      	ldrb	r3, [r3, #3]
 8012148:	712b      	strb	r3, [r5, #4]
 801214a:	68a3      	ldr	r3, [r4, #8]
 801214c:	789b      	ldrb	r3, [r3, #2]
 801214e:	716b      	strb	r3, [r5, #5]
 8012150:	68a3      	ldr	r3, [r4, #8]
 8012152:	785b      	ldrb	r3, [r3, #1]
 8012154:	71ab      	strb	r3, [r5, #6]
 8012156:	68a3      	ldr	r3, [r4, #8]
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	71eb      	strb	r3, [r5, #7]
 801215c:	2108      	movs	r1, #8
 801215e:	68a2      	ldr	r2, [r4, #8]
 8012160:	6923      	ldr	r3, [r4, #16]
 8012162:	440a      	add	r2, r1
 8012164:	7561      	strb	r1, [r4, #21]
 8012166:	440b      	add	r3, r1
 8012168:	60a2      	str	r2, [r4, #8]
 801216a:	6123      	str	r3, [r4, #16]
 801216c:	7da0      	ldrb	r0, [r4, #22]
 801216e:	f080 0001 	eor.w	r0, r0, #1
 8012172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	602a      	str	r2, [r5, #0]
 801217c:	606b      	str	r3, [r5, #4]
 801217e:	e7ed      	b.n	801215c <ucdr_deserialize_double+0x100>
 8012180:	68a2      	ldr	r2, [r4, #8]
 8012182:	6923      	ldr	r3, [r4, #16]
 8012184:	1b92      	subs	r2, r2, r6
 8012186:	7da0      	ldrb	r0, [r4, #22]
 8012188:	1b9b      	subs	r3, r3, r6
 801218a:	f884 8015 	strb.w	r8, [r4, #21]
 801218e:	f080 0001 	eor.w	r0, r0, #1
 8012192:	60a2      	str	r2, [r4, #8]
 8012194:	6123      	str	r3, [r4, #16]
 8012196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219a:	68a3      	ldr	r3, [r4, #8]
 801219c:	799b      	ldrb	r3, [r3, #6]
 801219e:	706b      	strb	r3, [r5, #1]
 80121a0:	1cab      	adds	r3, r5, #2
 80121a2:	68a2      	ldr	r2, [r4, #8]
 80121a4:	7952      	ldrb	r2, [r2, #5]
 80121a6:	f803 2b01 	strb.w	r2, [r3], #1
 80121aa:	68a2      	ldr	r2, [r4, #8]
 80121ac:	7912      	ldrb	r2, [r2, #4]
 80121ae:	f803 2b01 	strb.w	r2, [r3], #1
 80121b2:	68a2      	ldr	r2, [r4, #8]
 80121b4:	78d2      	ldrb	r2, [r2, #3]
 80121b6:	f803 2b01 	strb.w	r2, [r3], #1
 80121ba:	68a2      	ldr	r2, [r4, #8]
 80121bc:	7892      	ldrb	r2, [r2, #2]
 80121be:	f803 2b01 	strb.w	r2, [r3], #1
 80121c2:	68a2      	ldr	r2, [r4, #8]
 80121c4:	7852      	ldrb	r2, [r2, #1]
 80121c6:	f803 2b01 	strb.w	r2, [r3], #1
 80121ca:	68a2      	ldr	r2, [r4, #8]
 80121cc:	7812      	ldrb	r2, [r2, #0]
 80121ce:	701a      	strb	r2, [r3, #0]
 80121d0:	e796      	b.n	8012100 <ucdr_deserialize_double+0xa4>
 80121d2:	4639      	mov	r1, r7
 80121d4:	4632      	mov	r2, r6
 80121d6:	4628      	mov	r0, r5
 80121d8:	f00d fe91 	bl	801fefe <memcpy>
 80121dc:	464a      	mov	r2, r9
 80121de:	19a8      	adds	r0, r5, r6
 80121e0:	68a1      	ldr	r1, [r4, #8]
 80121e2:	f00d fe8c 	bl	801fefe <memcpy>
 80121e6:	e78b      	b.n	8012100 <ucdr_deserialize_double+0xa4>

080121e8 <ucdr_check_buffer_available_for>:
 80121e8:	7d83      	ldrb	r3, [r0, #22]
 80121ea:	b93b      	cbnz	r3, 80121fc <ucdr_check_buffer_available_for+0x14>
 80121ec:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80121f0:	4419      	add	r1, r3
 80121f2:	4288      	cmp	r0, r1
 80121f4:	bf34      	ite	cc
 80121f6:	2000      	movcc	r0, #0
 80121f8:	2001      	movcs	r0, #1
 80121fa:	4770      	bx	lr
 80121fc:	2000      	movs	r0, #0
 80121fe:	4770      	bx	lr

08012200 <ucdr_check_final_buffer_behavior>:
 8012200:	7d83      	ldrb	r3, [r0, #22]
 8012202:	b943      	cbnz	r3, 8012216 <ucdr_check_final_buffer_behavior+0x16>
 8012204:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8012208:	b510      	push	{r4, lr}
 801220a:	4291      	cmp	r1, r2
 801220c:	4604      	mov	r4, r0
 801220e:	d205      	bcs.n	801221c <ucdr_check_final_buffer_behavior+0x1c>
 8012210:	2301      	movs	r3, #1
 8012212:	4618      	mov	r0, r3
 8012214:	bd10      	pop	{r4, pc}
 8012216:	2300      	movs	r3, #0
 8012218:	4618      	mov	r0, r3
 801221a:	4770      	bx	lr
 801221c:	6982      	ldr	r2, [r0, #24]
 801221e:	b13a      	cbz	r2, 8012230 <ucdr_check_final_buffer_behavior+0x30>
 8012220:	69c1      	ldr	r1, [r0, #28]
 8012222:	4790      	blx	r2
 8012224:	f080 0301 	eor.w	r3, r0, #1
 8012228:	75a0      	strb	r0, [r4, #22]
 801222a:	b2db      	uxtb	r3, r3
 801222c:	4618      	mov	r0, r3
 801222e:	bd10      	pop	{r4, pc}
 8012230:	2001      	movs	r0, #1
 8012232:	75a0      	strb	r0, [r4, #22]
 8012234:	e7fa      	b.n	801222c <ucdr_check_final_buffer_behavior+0x2c>
 8012236:	bf00      	nop

08012238 <ucdr_set_on_full_buffer_callback>:
 8012238:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop

08012240 <ucdr_init_buffer_origin_offset_endian>:
 8012240:	b410      	push	{r4}
 8012242:	9c01      	ldr	r4, [sp, #4]
 8012244:	440a      	add	r2, r1
 8012246:	6001      	str	r1, [r0, #0]
 8012248:	6042      	str	r2, [r0, #4]
 801224a:	190a      	adds	r2, r1, r4
 801224c:	441c      	add	r4, r3
 801224e:	6082      	str	r2, [r0, #8]
 8012250:	2200      	movs	r2, #0
 8012252:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8012256:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801225a:	7542      	strb	r2, [r0, #21]
 801225c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012260:	7582      	strb	r2, [r0, #22]
 8012262:	7503      	strb	r3, [r0, #20]
 8012264:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012268:	4770      	bx	lr
 801226a:	bf00      	nop

0801226c <ucdr_init_buffer_origin_offset>:
 801226c:	b510      	push	{r4, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	9c04      	ldr	r4, [sp, #16]
 8012272:	9400      	str	r4, [sp, #0]
 8012274:	2401      	movs	r4, #1
 8012276:	9401      	str	r4, [sp, #4]
 8012278:	f7ff ffe2 	bl	8012240 <ucdr_init_buffer_origin_offset_endian>
 801227c:	b002      	add	sp, #8
 801227e:	bd10      	pop	{r4, pc}

08012280 <ucdr_init_buffer_origin>:
 8012280:	b510      	push	{r4, lr}
 8012282:	2400      	movs	r4, #0
 8012284:	b082      	sub	sp, #8
 8012286:	9400      	str	r4, [sp, #0]
 8012288:	f7ff fff0 	bl	801226c <ucdr_init_buffer_origin_offset>
 801228c:	b002      	add	sp, #8
 801228e:	bd10      	pop	{r4, pc}

08012290 <ucdr_init_buffer>:
 8012290:	2300      	movs	r3, #0
 8012292:	f7ff bff5 	b.w	8012280 <ucdr_init_buffer_origin>
 8012296:	bf00      	nop

08012298 <ucdr_alignment>:
 8012298:	fbb0 f2f1 	udiv	r2, r0, r1
 801229c:	fb02 0011 	mls	r0, r2, r1, r0
 80122a0:	1e4b      	subs	r3, r1, #1
 80122a2:	1a08      	subs	r0, r1, r0
 80122a4:	4018      	ands	r0, r3
 80122a6:	4770      	bx	lr

080122a8 <ucdr_buffer_alignment>:
 80122a8:	7d43      	ldrb	r3, [r0, #21]
 80122aa:	428b      	cmp	r3, r1
 80122ac:	d209      	bcs.n	80122c2 <ucdr_buffer_alignment+0x1a>
 80122ae:	6903      	ldr	r3, [r0, #16]
 80122b0:	1e4a      	subs	r2, r1, #1
 80122b2:	fbb3 f0f1 	udiv	r0, r3, r1
 80122b6:	fb01 3010 	mls	r0, r1, r0, r3
 80122ba:	1a09      	subs	r1, r1, r0
 80122bc:	ea01 0002 	and.w	r0, r1, r2
 80122c0:	4770      	bx	lr
 80122c2:	2000      	movs	r0, #0
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop

080122c8 <ucdr_align_to>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	4604      	mov	r4, r0
 80122cc:	460d      	mov	r5, r1
 80122ce:	f7ff ffeb 	bl	80122a8 <ucdr_buffer_alignment>
 80122d2:	68a3      	ldr	r3, [r4, #8]
 80122d4:	7565      	strb	r5, [r4, #21]
 80122d6:	181a      	adds	r2, r3, r0
 80122d8:	6923      	ldr	r3, [r4, #16]
 80122da:	4418      	add	r0, r3
 80122dc:	6863      	ldr	r3, [r4, #4]
 80122de:	4293      	cmp	r3, r2
 80122e0:	6120      	str	r0, [r4, #16]
 80122e2:	bf28      	it	cs
 80122e4:	4613      	movcs	r3, r2
 80122e6:	60a3      	str	r3, [r4, #8]
 80122e8:	bd38      	pop	{r3, r4, r5, pc}
 80122ea:	bf00      	nop

080122ec <ucdr_buffer_length>:
 80122ec:	6882      	ldr	r2, [r0, #8]
 80122ee:	6800      	ldr	r0, [r0, #0]
 80122f0:	1a10      	subs	r0, r2, r0
 80122f2:	4770      	bx	lr

080122f4 <ucdr_buffer_remaining>:
 80122f4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80122f8:	1a10      	subs	r0, r2, r0
 80122fa:	4770      	bx	lr

080122fc <ucdr_check_final_buffer_behavior_array>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	7d83      	ldrb	r3, [r0, #22]
 8012300:	b9a3      	cbnz	r3, 801232c <ucdr_check_final_buffer_behavior_array+0x30>
 8012302:	4604      	mov	r4, r0
 8012304:	460d      	mov	r5, r1
 8012306:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801230a:	429a      	cmp	r2, r3
 801230c:	d300      	bcc.n	8012310 <ucdr_check_final_buffer_behavior_array+0x14>
 801230e:	b931      	cbnz	r1, 801231e <ucdr_check_final_buffer_behavior_array+0x22>
 8012310:	4620      	mov	r0, r4
 8012312:	f7ff ffef 	bl	80122f4 <ucdr_buffer_remaining>
 8012316:	42a8      	cmp	r0, r5
 8012318:	bf28      	it	cs
 801231a:	4628      	movcs	r0, r5
 801231c:	bd38      	pop	{r3, r4, r5, pc}
 801231e:	6983      	ldr	r3, [r0, #24]
 8012320:	b133      	cbz	r3, 8012330 <ucdr_check_final_buffer_behavior_array+0x34>
 8012322:	69c1      	ldr	r1, [r0, #28]
 8012324:	4798      	blx	r3
 8012326:	75a0      	strb	r0, [r4, #22]
 8012328:	2800      	cmp	r0, #0
 801232a:	d0f1      	beq.n	8012310 <ucdr_check_final_buffer_behavior_array+0x14>
 801232c:	2000      	movs	r0, #0
 801232e:	bd38      	pop	{r3, r4, r5, pc}
 8012330:	2301      	movs	r3, #1
 8012332:	7583      	strb	r3, [r0, #22]
 8012334:	e7fa      	b.n	801232c <ucdr_check_final_buffer_behavior_array+0x30>
 8012336:	bf00      	nop

08012338 <ucdr_advance_buffer>:
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	4604      	mov	r4, r0
 801233c:	460d      	mov	r5, r1
 801233e:	f7ff ff53 	bl	80121e8 <ucdr_check_buffer_available_for>
 8012342:	b178      	cbz	r0, 8012364 <ucdr_advance_buffer+0x2c>
 8012344:	6923      	ldr	r3, [r4, #16]
 8012346:	68a2      	ldr	r2, [r4, #8]
 8012348:	442b      	add	r3, r5
 801234a:	442a      	add	r2, r5
 801234c:	6123      	str	r3, [r4, #16]
 801234e:	2301      	movs	r3, #1
 8012350:	60a2      	str	r2, [r4, #8]
 8012352:	7563      	strb	r3, [r4, #21]
 8012354:	bd38      	pop	{r3, r4, r5, pc}
 8012356:	68a2      	ldr	r2, [r4, #8]
 8012358:	1a2d      	subs	r5, r5, r0
 801235a:	6923      	ldr	r3, [r4, #16]
 801235c:	4402      	add	r2, r0
 801235e:	4418      	add	r0, r3
 8012360:	60a2      	str	r2, [r4, #8]
 8012362:	6120      	str	r0, [r4, #16]
 8012364:	4629      	mov	r1, r5
 8012366:	2201      	movs	r2, #1
 8012368:	4620      	mov	r0, r4
 801236a:	f7ff ffc7 	bl	80122fc <ucdr_check_final_buffer_behavior_array>
 801236e:	2800      	cmp	r0, #0
 8012370:	d1f1      	bne.n	8012356 <ucdr_advance_buffer+0x1e>
 8012372:	2301      	movs	r3, #1
 8012374:	7563      	strb	r3, [r4, #21]
 8012376:	bd38      	pop	{r3, r4, r5, pc}

08012378 <ucdr_serialize_sequence_char>:
 8012378:	b570      	push	{r4, r5, r6, lr}
 801237a:	4615      	mov	r5, r2
 801237c:	460e      	mov	r6, r1
 801237e:	7d01      	ldrb	r1, [r0, #20]
 8012380:	4604      	mov	r4, r0
 8012382:	f7fe ff5b 	bl	801123c <ucdr_serialize_endian_uint32_t>
 8012386:	b90d      	cbnz	r5, 801238c <ucdr_serialize_sequence_char+0x14>
 8012388:	2001      	movs	r0, #1
 801238a:	bd70      	pop	{r4, r5, r6, pc}
 801238c:	462b      	mov	r3, r5
 801238e:	4632      	mov	r2, r6
 8012390:	7d21      	ldrb	r1, [r4, #20]
 8012392:	4620      	mov	r0, r4
 8012394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012398:	f004 b908 	b.w	80165ac <ucdr_serialize_endian_array_char>

0801239c <ucdr_deserialize_sequence_char>:
 801239c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a0:	461d      	mov	r5, r3
 80123a2:	4616      	mov	r6, r2
 80123a4:	460f      	mov	r7, r1
 80123a6:	461a      	mov	r2, r3
 80123a8:	7d01      	ldrb	r1, [r0, #20]
 80123aa:	4604      	mov	r4, r0
 80123ac:	f7ff f86e 	bl	801148c <ucdr_deserialize_endian_uint32_t>
 80123b0:	682b      	ldr	r3, [r5, #0]
 80123b2:	429e      	cmp	r6, r3
 80123b4:	d201      	bcs.n	80123ba <ucdr_deserialize_sequence_char+0x1e>
 80123b6:	2201      	movs	r2, #1
 80123b8:	75a2      	strb	r2, [r4, #22]
 80123ba:	b913      	cbnz	r3, 80123c2 <ucdr_deserialize_sequence_char+0x26>
 80123bc:	2001      	movs	r0, #1
 80123be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c2:	463a      	mov	r2, r7
 80123c4:	7d21      	ldrb	r1, [r4, #20]
 80123c6:	4620      	mov	r0, r4
 80123c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123cc:	f004 b920 	b.w	8016610 <ucdr_deserialize_endian_array_char>

080123d0 <ucdr_serialize_sequence_uint8_t>:
 80123d0:	b570      	push	{r4, r5, r6, lr}
 80123d2:	4615      	mov	r5, r2
 80123d4:	460e      	mov	r6, r1
 80123d6:	7d01      	ldrb	r1, [r0, #20]
 80123d8:	4604      	mov	r4, r0
 80123da:	f7fe ff2f 	bl	801123c <ucdr_serialize_endian_uint32_t>
 80123de:	b90d      	cbnz	r5, 80123e4 <ucdr_serialize_sequence_uint8_t+0x14>
 80123e0:	2001      	movs	r0, #1
 80123e2:	bd70      	pop	{r4, r5, r6, pc}
 80123e4:	462b      	mov	r3, r5
 80123e6:	4632      	mov	r2, r6
 80123e8:	7d21      	ldrb	r1, [r4, #20]
 80123ea:	4620      	mov	r0, r4
 80123ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123f0:	f004 b974 	b.w	80166dc <ucdr_serialize_endian_array_uint8_t>

080123f4 <ucdr_deserialize_sequence_uint8_t>:
 80123f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f8:	461d      	mov	r5, r3
 80123fa:	4616      	mov	r6, r2
 80123fc:	460f      	mov	r7, r1
 80123fe:	461a      	mov	r2, r3
 8012400:	7d01      	ldrb	r1, [r0, #20]
 8012402:	4604      	mov	r4, r0
 8012404:	f7ff f842 	bl	801148c <ucdr_deserialize_endian_uint32_t>
 8012408:	682b      	ldr	r3, [r5, #0]
 801240a:	429e      	cmp	r6, r3
 801240c:	d201      	bcs.n	8012412 <ucdr_deserialize_sequence_uint8_t+0x1e>
 801240e:	2201      	movs	r2, #1
 8012410:	75a2      	strb	r2, [r4, #22]
 8012412:	b913      	cbnz	r3, 801241a <ucdr_deserialize_sequence_uint8_t+0x26>
 8012414:	2001      	movs	r0, #1
 8012416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801241a:	463a      	mov	r2, r7
 801241c:	7d21      	ldrb	r1, [r4, #20]
 801241e:	4620      	mov	r0, r4
 8012420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012424:	f004 b9c0 	b.w	80167a8 <ucdr_deserialize_endian_array_uint8_t>

08012428 <rcl_get_zero_initialized_init_options>:
 8012428:	2000      	movs	r0, #0
 801242a:	4770      	bx	lr

0801242c <rcl_init_options_init>:
 801242c:	b084      	sub	sp, #16
 801242e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012430:	b097      	sub	sp, #92	; 0x5c
 8012432:	ae1d      	add	r6, sp, #116	; 0x74
 8012434:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012438:	2800      	cmp	r0, #0
 801243a:	d058      	beq.n	80124ee <rcl_init_options_init+0xc2>
 801243c:	6803      	ldr	r3, [r0, #0]
 801243e:	4605      	mov	r5, r0
 8012440:	b133      	cbz	r3, 8012450 <rcl_init_options_init+0x24>
 8012442:	2464      	movs	r4, #100	; 0x64
 8012444:	4620      	mov	r0, r4
 8012446:	b017      	add	sp, #92	; 0x5c
 8012448:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801244c:	b004      	add	sp, #16
 801244e:	4770      	bx	lr
 8012450:	4630      	mov	r0, r6
 8012452:	f001 fdf3 	bl	801403c <rcutils_allocator_is_valid>
 8012456:	2800      	cmp	r0, #0
 8012458:	d049      	beq.n	80124ee <rcl_init_options_init+0xc2>
 801245a:	46b4      	mov	ip, r6
 801245c:	ac11      	add	r4, sp, #68	; 0x44
 801245e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012464:	f8dc 3000 	ldr.w	r3, [ip]
 8012468:	2050      	movs	r0, #80	; 0x50
 801246a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801246c:	6023      	str	r3, [r4, #0]
 801246e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012470:	4798      	blx	r3
 8012472:	4604      	mov	r4, r0
 8012474:	6028      	str	r0, [r5, #0]
 8012476:	2800      	cmp	r0, #0
 8012478:	d03b      	beq.n	80124f2 <rcl_init_options_init+0xc6>
 801247a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801247e:	4686      	mov	lr, r0
 8012480:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012484:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012488:	f8dc 3000 	ldr.w	r3, [ip]
 801248c:	a802      	add	r0, sp, #8
 801248e:	f8ce 3000 	str.w	r3, [lr]
 8012492:	f001 fff1 	bl	8014478 <rmw_get_zero_initialized_init_options>
 8012496:	f10d 0e08 	add.w	lr, sp, #8
 801249a:	f104 0c18 	add.w	ip, r4, #24
 801249e:	682f      	ldr	r7, [r5, #0]
 80124a0:	ac20      	add	r4, sp, #128	; 0x80
 80124a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124ba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80124be:	e88c 0003 	stmia.w	ip, {r0, r1}
 80124c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80124c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80124ca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80124ce:	f107 0018 	add.w	r0, r7, #24
 80124d2:	f002 f8f9 	bl	80146c8 <rmw_init_options_init>
 80124d6:	4604      	mov	r4, r0
 80124d8:	2800      	cmp	r0, #0
 80124da:	d0b3      	beq.n	8012444 <rcl_init_options_init+0x18>
 80124dc:	9921      	ldr	r1, [sp, #132]	; 0x84
 80124de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80124e0:	6828      	ldr	r0, [r5, #0]
 80124e2:	4798      	blx	r3
 80124e4:	4620      	mov	r0, r4
 80124e6:	f007 ff8d 	bl	801a404 <rcl_convert_rmw_ret_to_rcl_ret>
 80124ea:	4604      	mov	r4, r0
 80124ec:	e7aa      	b.n	8012444 <rcl_init_options_init+0x18>
 80124ee:	240b      	movs	r4, #11
 80124f0:	e7a8      	b.n	8012444 <rcl_init_options_init+0x18>
 80124f2:	240a      	movs	r4, #10
 80124f4:	e7a6      	b.n	8012444 <rcl_init_options_init+0x18>
 80124f6:	bf00      	nop

080124f8 <rcl_init_options_fini>:
 80124f8:	b530      	push	{r4, r5, lr}
 80124fa:	b087      	sub	sp, #28
 80124fc:	b1f0      	cbz	r0, 801253c <rcl_init_options_fini+0x44>
 80124fe:	6803      	ldr	r3, [r0, #0]
 8012500:	4604      	mov	r4, r0
 8012502:	b1db      	cbz	r3, 801253c <rcl_init_options_fini+0x44>
 8012504:	469c      	mov	ip, r3
 8012506:	f10d 0e04 	add.w	lr, sp, #4
 801250a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801250e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012512:	f8dc 3000 	ldr.w	r3, [ip]
 8012516:	a801      	add	r0, sp, #4
 8012518:	f8ce 3000 	str.w	r3, [lr]
 801251c:	f001 fd8e 	bl	801403c <rcutils_allocator_is_valid>
 8012520:	b160      	cbz	r0, 801253c <rcl_init_options_fini+0x44>
 8012522:	6820      	ldr	r0, [r4, #0]
 8012524:	3018      	adds	r0, #24
 8012526:	f002 f989 	bl	801483c <rmw_init_options_fini>
 801252a:	4605      	mov	r5, r0
 801252c:	b950      	cbnz	r0, 8012544 <rcl_init_options_fini+0x4c>
 801252e:	6820      	ldr	r0, [r4, #0]
 8012530:	9b02      	ldr	r3, [sp, #8]
 8012532:	9905      	ldr	r1, [sp, #20]
 8012534:	4798      	blx	r3
 8012536:	4628      	mov	r0, r5
 8012538:	b007      	add	sp, #28
 801253a:	bd30      	pop	{r4, r5, pc}
 801253c:	250b      	movs	r5, #11
 801253e:	4628      	mov	r0, r5
 8012540:	b007      	add	sp, #28
 8012542:	bd30      	pop	{r4, r5, pc}
 8012544:	f007 ff5e 	bl	801a404 <rcl_convert_rmw_ret_to_rcl_ret>
 8012548:	4605      	mov	r5, r0
 801254a:	e7f8      	b.n	801253e <rcl_init_options_fini+0x46>

0801254c <rcl_init_options_copy>:
 801254c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012550:	b094      	sub	sp, #80	; 0x50
 8012552:	2800      	cmp	r0, #0
 8012554:	d05b      	beq.n	801260e <rcl_init_options_copy+0xc2>
 8012556:	4604      	mov	r4, r0
 8012558:	6800      	ldr	r0, [r0, #0]
 801255a:	2800      	cmp	r0, #0
 801255c:	d057      	beq.n	801260e <rcl_init_options_copy+0xc2>
 801255e:	460e      	mov	r6, r1
 8012560:	f001 fd6c 	bl	801403c <rcutils_allocator_is_valid>
 8012564:	2e00      	cmp	r6, #0
 8012566:	d052      	beq.n	801260e <rcl_init_options_copy+0xc2>
 8012568:	f080 0001 	eor.w	r0, r0, #1
 801256c:	b2c0      	uxtb	r0, r0
 801256e:	2800      	cmp	r0, #0
 8012570:	d14d      	bne.n	801260e <rcl_init_options_copy+0xc2>
 8012572:	6833      	ldr	r3, [r6, #0]
 8012574:	b123      	cbz	r3, 8012580 <rcl_init_options_copy+0x34>
 8012576:	2464      	movs	r4, #100	; 0x64
 8012578:	4620      	mov	r0, r4
 801257a:	b014      	add	sp, #80	; 0x50
 801257c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012580:	6827      	ldr	r7, [r4, #0]
 8012582:	ad0f      	add	r5, sp, #60	; 0x3c
 8012584:	46bc      	mov	ip, r7
 8012586:	f8d7 8000 	ldr.w	r8, [r7]
 801258a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801258e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012590:	f8dc 3000 	ldr.w	r3, [ip]
 8012594:	2050      	movs	r0, #80	; 0x50
 8012596:	4619      	mov	r1, r3
 8012598:	602b      	str	r3, [r5, #0]
 801259a:	47c0      	blx	r8
 801259c:	4605      	mov	r5, r0
 801259e:	6030      	str	r0, [r6, #0]
 80125a0:	b3d0      	cbz	r0, 8012618 <rcl_init_options_copy+0xcc>
 80125a2:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 80125a6:	4686      	mov	lr, r0
 80125a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80125ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80125b0:	f8dc 3000 	ldr.w	r3, [ip]
 80125b4:	4668      	mov	r0, sp
 80125b6:	f8ce 3000 	str.w	r3, [lr]
 80125ba:	f001 ff5d 	bl	8014478 <rmw_get_zero_initialized_init_options>
 80125be:	46ee      	mov	lr, sp
 80125c0:	f105 0c18 	add.w	ip, r5, #24
 80125c4:	6824      	ldr	r4, [r4, #0]
 80125c6:	6835      	ldr	r5, [r6, #0]
 80125c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80125cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80125d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80125dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80125e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80125e8:	f104 0018 	add.w	r0, r4, #24
 80125ec:	f105 0118 	add.w	r1, r5, #24
 80125f0:	f002 f8d2 	bl	8014798 <rmw_init_options_copy>
 80125f4:	4604      	mov	r4, r0
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d0be      	beq.n	8012578 <rcl_init_options_copy+0x2c>
 80125fa:	f001 fd45 	bl	8014088 <rcutils_get_error_string>
 80125fe:	f001 fd5b 	bl	80140b8 <rcutils_reset_error>
 8012602:	4630      	mov	r0, r6
 8012604:	f7ff ff78 	bl	80124f8 <rcl_init_options_fini>
 8012608:	b140      	cbz	r0, 801261c <rcl_init_options_copy+0xd0>
 801260a:	4604      	mov	r4, r0
 801260c:	e7b4      	b.n	8012578 <rcl_init_options_copy+0x2c>
 801260e:	240b      	movs	r4, #11
 8012610:	4620      	mov	r0, r4
 8012612:	b014      	add	sp, #80	; 0x50
 8012614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012618:	240a      	movs	r4, #10
 801261a:	e7ad      	b.n	8012578 <rcl_init_options_copy+0x2c>
 801261c:	4620      	mov	r0, r4
 801261e:	b014      	add	sp, #80	; 0x50
 8012620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012624:	f007 beee 	b.w	801a404 <rcl_convert_rmw_ret_to_rcl_ret>

08012628 <rcl_init_options_set_domain_id>:
 8012628:	b120      	cbz	r0, 8012634 <rcl_init_options_set_domain_id+0xc>
 801262a:	6803      	ldr	r3, [r0, #0]
 801262c:	b113      	cbz	r3, 8012634 <rcl_init_options_set_domain_id+0xc>
 801262e:	2000      	movs	r0, #0
 8012630:	6259      	str	r1, [r3, #36]	; 0x24
 8012632:	4770      	bx	lr
 8012634:	200b      	movs	r0, #11
 8012636:	4770      	bx	lr

08012638 <rcl_get_zero_initialized_node>:
 8012638:	4a03      	ldr	r2, [pc, #12]	; (8012648 <rcl_get_zero_initialized_node+0x10>)
 801263a:	4603      	mov	r3, r0
 801263c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012640:	e883 0003 	stmia.w	r3, {r0, r1}
 8012644:	4618      	mov	r0, r3
 8012646:	4770      	bx	lr
 8012648:	08023dd8 	.word	0x08023dd8

0801264c <rcl_node_init>:
 801264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012650:	b0a9      	sub	sp, #164	; 0xa4
 8012652:	4604      	mov	r4, r0
 8012654:	460e      	mov	r6, r1
 8012656:	4615      	mov	r5, r2
 8012658:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 801265c:	a823      	add	r0, sp, #140	; 0x8c
 801265e:	461f      	mov	r7, r3
 8012660:	f007 ffe0 	bl	801a624 <rcl_guard_condition_get_default_options>
 8012664:	f1b8 0f00 	cmp.w	r8, #0
 8012668:	f000 80f3 	beq.w	8012852 <rcl_node_init+0x206>
 801266c:	4640      	mov	r0, r8
 801266e:	f001 fce5 	bl	801403c <rcutils_allocator_is_valid>
 8012672:	2d00      	cmp	r5, #0
 8012674:	bf18      	it	ne
 8012676:	2c00      	cmpne	r4, #0
 8012678:	f080 0001 	eor.w	r0, r0, #1
 801267c:	bf0c      	ite	eq
 801267e:	f04f 0c01 	moveq.w	ip, #1
 8012682:	f04f 0c00 	movne.w	ip, #0
 8012686:	2e00      	cmp	r6, #0
 8012688:	bf08      	it	eq
 801268a:	f04c 0c01 	orreq.w	ip, ip, #1
 801268e:	ea4c 0c00 	orr.w	ip, ip, r0
 8012692:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8012696:	f040 80dc 	bne.w	8012852 <rcl_node_init+0x206>
 801269a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801269e:	f1ba 0f00 	cmp.w	sl, #0
 80126a2:	f040 80fc 	bne.w	801289e <rcl_node_init+0x252>
 80126a6:	2f00      	cmp	r7, #0
 80126a8:	f000 80d3 	beq.w	8012852 <rcl_node_init+0x206>
 80126ac:	4638      	mov	r0, r7
 80126ae:	f007 fec7 	bl	801a440 <rcl_context_is_valid>
 80126b2:	4683      	mov	fp, r0
 80126b4:	2800      	cmp	r0, #0
 80126b6:	f000 80d2 	beq.w	801285e <rcl_node_init+0x212>
 80126ba:	4652      	mov	r2, sl
 80126bc:	4630      	mov	r0, r6
 80126be:	a922      	add	r1, sp, #136	; 0x88
 80126c0:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 80126c4:	f001 ff8a 	bl	80145dc <rmw_validate_node_name>
 80126c8:	4682      	mov	sl, r0
 80126ca:	2800      	cmp	r0, #0
 80126cc:	f040 80c3 	bne.w	8012856 <rcl_node_init+0x20a>
 80126d0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80126d2:	2800      	cmp	r0, #0
 80126d4:	f040 80f1 	bne.w	80128ba <rcl_node_init+0x26e>
 80126d8:	4628      	mov	r0, r5
 80126da:	f7ed fe11 	bl	8000300 <strlen>
 80126de:	2800      	cmp	r0, #0
 80126e0:	f040 80c0 	bne.w	8012864 <rcl_node_init+0x218>
 80126e4:	4d79      	ldr	r5, [pc, #484]	; (80128cc <rcl_node_init+0x280>)
 80126e6:	a922      	add	r1, sp, #136	; 0x88
 80126e8:	2200      	movs	r2, #0
 80126ea:	4628      	mov	r0, r5
 80126ec:	f001 ff58 	bl	80145a0 <rmw_validate_namespace>
 80126f0:	4682      	mov	sl, r0
 80126f2:	2800      	cmp	r0, #0
 80126f4:	f040 80af 	bne.w	8012856 <rcl_node_init+0x20a>
 80126f8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80126fa:	2800      	cmp	r0, #0
 80126fc:	f040 80d5 	bne.w	80128aa <rcl_node_init+0x25e>
 8012700:	f8d8 3000 	ldr.w	r3, [r8]
 8012704:	2078      	movs	r0, #120	; 0x78
 8012706:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801270a:	4798      	blx	r3
 801270c:	4682      	mov	sl, r0
 801270e:	6060      	str	r0, [r4, #4]
 8012710:	2800      	cmp	r0, #0
 8012712:	f000 80cf 	beq.w	80128b4 <rcl_node_init+0x268>
 8012716:	2200      	movs	r2, #0
 8012718:	2300      	movs	r3, #0
 801271a:	a808      	add	r0, sp, #32
 801271c:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8012720:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8012724:	f000 f902 	bl	801292c <rcl_node_get_default_options>
 8012728:	a908      	add	r1, sp, #32
 801272a:	4650      	mov	r0, sl
 801272c:	2268      	movs	r2, #104	; 0x68
 801272e:	f00d fbe6 	bl	801fefe <memcpy>
 8012732:	6861      	ldr	r1, [r4, #4]
 8012734:	4640      	mov	r0, r8
 8012736:	6027      	str	r7, [r4, #0]
 8012738:	f000 f906 	bl	8012948 <rcl_node_options_copy>
 801273c:	2800      	cmp	r0, #0
 801273e:	d158      	bne.n	80127f2 <rcl_node_init+0x1a6>
 8012740:	4628      	mov	r0, r5
 8012742:	f7ed fddd 	bl	8000300 <strlen>
 8012746:	4428      	add	r0, r5
 8012748:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801274c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012750:	2b2f      	cmp	r3, #47	; 0x2f
 8012752:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012756:	9300      	str	r3, [sp, #0]
 8012758:	bf0c      	ite	eq
 801275a:	4b5d      	ldreq	r3, [pc, #372]	; (80128d0 <rcl_node_init+0x284>)
 801275c:	4b5d      	ldrne	r3, [pc, #372]	; (80128d4 <rcl_node_init+0x288>)
 801275e:	9302      	str	r3, [sp, #8]
 8012760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012764:	9301      	str	r3, [sp, #4]
 8012766:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801276a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801276e:	f001 fcbf 	bl	80140f0 <rcutils_format_string_limit>
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 8012778:	4631      	mov	r1, r6
 801277a:	6818      	ldr	r0, [r3, #0]
 801277c:	462a      	mov	r2, r5
 801277e:	6866      	ldr	r6, [r4, #4]
 8012780:	3028      	adds	r0, #40	; 0x28
 8012782:	f002 fa87 	bl	8014c94 <rmw_create_node>
 8012786:	6863      	ldr	r3, [r4, #4]
 8012788:	66b0      	str	r0, [r6, #104]	; 0x68
 801278a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801278c:	2800      	cmp	r0, #0
 801278e:	d032      	beq.n	80127f6 <rcl_node_init+0x1aa>
 8012790:	f002 fb10 	bl	8014db4 <rmw_node_get_graph_guard_condition>
 8012794:	4682      	mov	sl, r0
 8012796:	b360      	cbz	r0, 80127f2 <rcl_node_init+0x1a6>
 8012798:	f8d8 3000 	ldr.w	r3, [r8]
 801279c:	2008      	movs	r0, #8
 801279e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80127a2:	6866      	ldr	r6, [r4, #4]
 80127a4:	4798      	blx	r3
 80127a6:	6863      	ldr	r3, [r4, #4]
 80127a8:	66f0      	str	r0, [r6, #108]	; 0x6c
 80127aa:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 80127ae:	f1bb 0f00 	cmp.w	fp, #0
 80127b2:	d020      	beq.n	80127f6 <rcl_node_init+0x1aa>
 80127b4:	a806      	add	r0, sp, #24
 80127b6:	ae23      	add	r6, sp, #140	; 0x8c
 80127b8:	f007 fea8 	bl	801a50c <rcl_get_zero_initialized_guard_condition>
 80127bc:	a806      	add	r0, sp, #24
 80127be:	6863      	ldr	r3, [r4, #4]
 80127c0:	46c4      	mov	ip, r8
 80127c2:	c803      	ldmia	r0, {r0, r1}
 80127c4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 80127c8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80127cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80127d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80127d2:	f8dc 3000 	ldr.w	r3, [ip]
 80127d6:	6033      	str	r3, [r6, #0]
 80127d8:	ab28      	add	r3, sp, #160	; 0xa0
 80127da:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80127de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80127e2:	4651      	mov	r1, sl
 80127e4:	463a      	mov	r2, r7
 80127e6:	4670      	mov	r0, lr
 80127e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80127ea:	f007 fe99 	bl	801a520 <rcl_guard_condition_init_from_rmw>
 80127ee:	4682      	mov	sl, r0
 80127f0:	b328      	cbz	r0, 801283e <rcl_node_init+0x1f2>
 80127f2:	6863      	ldr	r3, [r4, #4]
 80127f4:	b1f3      	cbz	r3, 8012834 <rcl_node_init+0x1e8>
 80127f6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80127f8:	b128      	cbz	r0, 8012806 <rcl_node_init+0x1ba>
 80127fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80127fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012802:	4798      	blx	r3
 8012804:	6863      	ldr	r3, [r4, #4]
 8012806:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012808:	b110      	cbz	r0, 8012810 <rcl_node_init+0x1c4>
 801280a:	f002 fa55 	bl	8014cb8 <rmw_destroy_node>
 801280e:	6863      	ldr	r3, [r4, #4]
 8012810:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8012812:	b148      	cbz	r0, 8012828 <rcl_node_init+0x1dc>
 8012814:	f007 fee0 	bl	801a5d8 <rcl_guard_condition_fini>
 8012818:	6863      	ldr	r3, [r4, #4]
 801281a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801281e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8012820:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012824:	4798      	blx	r3
 8012826:	6863      	ldr	r3, [r4, #4]
 8012828:	4618      	mov	r0, r3
 801282a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801282e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012832:	4798      	blx	r3
 8012834:	2300      	movs	r3, #0
 8012836:	f04f 0a01 	mov.w	sl, #1
 801283a:	e9c4 3300 	strd	r3, r3, [r4]
 801283e:	f1b9 0f00 	cmp.w	r9, #0
 8012842:	d008      	beq.n	8012856 <rcl_node_init+0x20a>
 8012844:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012848:	4628      	mov	r0, r5
 801284a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801284e:	4798      	blx	r3
 8012850:	e001      	b.n	8012856 <rcl_node_init+0x20a>
 8012852:	f04f 0a0b 	mov.w	sl, #11
 8012856:	4650      	mov	r0, sl
 8012858:	b029      	add	sp, #164	; 0xa4
 801285a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801285e:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8012862:	e7f8      	b.n	8012856 <rcl_node_init+0x20a>
 8012864:	782b      	ldrb	r3, [r5, #0]
 8012866:	2b2f      	cmp	r3, #47	; 0x2f
 8012868:	f43f af3d 	beq.w	80126e6 <rcl_node_init+0x9a>
 801286c:	9503      	str	r5, [sp, #12]
 801286e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	4b18      	ldr	r3, [pc, #96]	; (80128d8 <rcl_node_init+0x28c>)
 8012876:	9302      	str	r3, [sp, #8]
 8012878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801287c:	9301      	str	r3, [sp, #4]
 801287e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012882:	f001 fc35 	bl	80140f0 <rcutils_format_string_limit>
 8012886:	4605      	mov	r5, r0
 8012888:	b1e0      	cbz	r0, 80128c4 <rcl_node_init+0x278>
 801288a:	2200      	movs	r2, #0
 801288c:	a922      	add	r1, sp, #136	; 0x88
 801288e:	9222      	str	r2, [sp, #136]	; 0x88
 8012890:	f001 fe86 	bl	80145a0 <rmw_validate_namespace>
 8012894:	4682      	mov	sl, r0
 8012896:	2800      	cmp	r0, #0
 8012898:	d1d4      	bne.n	8012844 <rcl_node_init+0x1f8>
 801289a:	46d9      	mov	r9, fp
 801289c:	e72c      	b.n	80126f8 <rcl_node_init+0xac>
 801289e:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80128a2:	4650      	mov	r0, sl
 80128a4:	b029      	add	sp, #164	; 0xa4
 80128a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128aa:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80128ae:	f001 fe89 	bl	80145c4 <rmw_namespace_validation_result_string>
 80128b2:	e7c4      	b.n	801283e <rcl_node_init+0x1f2>
 80128b4:	f04f 0a0a 	mov.w	sl, #10
 80128b8:	e7c1      	b.n	801283e <rcl_node_init+0x1f2>
 80128ba:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 80128be:	f001 fee1 	bl	8014684 <rmw_node_name_validation_result_string>
 80128c2:	e7c8      	b.n	8012856 <rcl_node_init+0x20a>
 80128c4:	f04f 0a0a 	mov.w	sl, #10
 80128c8:	e7c5      	b.n	8012856 <rcl_node_init+0x20a>
 80128ca:	bf00      	nop
 80128cc:	08023dc0 	.word	0x08023dc0
 80128d0:	08023dc8 	.word	0x08023dc8
 80128d4:	08023dd0 	.word	0x08023dd0
 80128d8:	08023dc4 	.word	0x08023dc4

080128dc <rcl_node_is_valid>:
 80128dc:	b130      	cbz	r0, 80128ec <rcl_node_is_valid+0x10>
 80128de:	6843      	ldr	r3, [r0, #4]
 80128e0:	b123      	cbz	r3, 80128ec <rcl_node_is_valid+0x10>
 80128e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128e4:	b113      	cbz	r3, 80128ec <rcl_node_is_valid+0x10>
 80128e6:	6800      	ldr	r0, [r0, #0]
 80128e8:	f007 bdaa 	b.w	801a440 <rcl_context_is_valid>
 80128ec:	2000      	movs	r0, #0
 80128ee:	4770      	bx	lr

080128f0 <rcl_node_get_name>:
 80128f0:	b120      	cbz	r0, 80128fc <rcl_node_get_name+0xc>
 80128f2:	6840      	ldr	r0, [r0, #4]
 80128f4:	b110      	cbz	r0, 80128fc <rcl_node_get_name+0xc>
 80128f6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80128f8:	b100      	cbz	r0, 80128fc <rcl_node_get_name+0xc>
 80128fa:	6880      	ldr	r0, [r0, #8]
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop

08012900 <rcl_node_get_namespace>:
 8012900:	b120      	cbz	r0, 801290c <rcl_node_get_namespace+0xc>
 8012902:	6840      	ldr	r0, [r0, #4]
 8012904:	b110      	cbz	r0, 801290c <rcl_node_get_namespace+0xc>
 8012906:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012908:	b100      	cbz	r0, 801290c <rcl_node_get_namespace+0xc>
 801290a:	68c0      	ldr	r0, [r0, #12]
 801290c:	4770      	bx	lr
 801290e:	bf00      	nop

08012910 <rcl_node_get_options>:
 8012910:	b128      	cbz	r0, 801291e <rcl_node_get_options+0xe>
 8012912:	6840      	ldr	r0, [r0, #4]
 8012914:	b118      	cbz	r0, 801291e <rcl_node_get_options+0xe>
 8012916:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8012918:	2b00      	cmp	r3, #0
 801291a:	bf08      	it	eq
 801291c:	2000      	moveq	r0, #0
 801291e:	4770      	bx	lr

08012920 <rcl_node_get_rmw_handle>:
 8012920:	b110      	cbz	r0, 8012928 <rcl_node_get_rmw_handle+0x8>
 8012922:	6840      	ldr	r0, [r0, #4]
 8012924:	b100      	cbz	r0, 8012928 <rcl_node_get_rmw_handle+0x8>
 8012926:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012928:	4770      	bx	lr
 801292a:	bf00      	nop

0801292c <rcl_node_get_default_options>:
 801292c:	b510      	push	{r4, lr}
 801292e:	4604      	mov	r4, r0
 8012930:	2268      	movs	r2, #104	; 0x68
 8012932:	2100      	movs	r1, #0
 8012934:	f00d fa16 	bl	801fd64 <memset>
 8012938:	4620      	mov	r0, r4
 801293a:	f001 fb71 	bl	8014020 <rcutils_get_default_allocator>
 801293e:	2301      	movs	r3, #1
 8012940:	4620      	mov	r0, r4
 8012942:	7523      	strb	r3, [r4, #20]
 8012944:	bd10      	pop	{r4, pc}
 8012946:	bf00      	nop

08012948 <rcl_node_options_copy>:
 8012948:	2800      	cmp	r0, #0
 801294a:	bf18      	it	ne
 801294c:	4288      	cmpne	r0, r1
 801294e:	d01b      	beq.n	8012988 <rcl_node_options_copy+0x40>
 8012950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012952:	fab1 f681 	clz	r6, r1
 8012956:	460c      	mov	r4, r1
 8012958:	0976      	lsrs	r6, r6, #5
 801295a:	b199      	cbz	r1, 8012984 <rcl_node_options_copy+0x3c>
 801295c:	4605      	mov	r5, r0
 801295e:	8a87      	ldrh	r7, [r0, #20]
 8012960:	4684      	mov	ip, r0
 8012962:	468e      	mov	lr, r1
 8012964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012966:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801296a:	682b      	ldr	r3, [r5, #0]
 801296c:	2250      	movs	r2, #80	; 0x50
 801296e:	f10c 0118 	add.w	r1, ip, #24
 8012972:	f104 0018 	add.w	r0, r4, #24
 8012976:	f8ce 3000 	str.w	r3, [lr]
 801297a:	82a7      	strh	r7, [r4, #20]
 801297c:	f00d fabf 	bl	801fefe <memcpy>
 8012980:	4630      	mov	r0, r6
 8012982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012984:	200b      	movs	r0, #11
 8012986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012988:	200b      	movs	r0, #11
 801298a:	4770      	bx	lr

0801298c <rcl_get_zero_initialized_publisher>:
 801298c:	4b01      	ldr	r3, [pc, #4]	; (8012994 <rcl_get_zero_initialized_publisher+0x8>)
 801298e:	6818      	ldr	r0, [r3, #0]
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	08023de0 	.word	0x08023de0

08012998 <rcl_publisher_init>:
 8012998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801299c:	b088      	sub	sp, #32
 801299e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80129a0:	2e00      	cmp	r6, #0
 80129a2:	d06b      	beq.n	8012a7c <rcl_publisher_init+0xe4>
 80129a4:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 80129a8:	4605      	mov	r5, r0
 80129aa:	460f      	mov	r7, r1
 80129ac:	4690      	mov	r8, r2
 80129ae:	4650      	mov	r0, sl
 80129b0:	4699      	mov	r9, r3
 80129b2:	f001 fb43 	bl	801403c <rcutils_allocator_is_valid>
 80129b6:	f080 0401 	eor.w	r4, r0, #1
 80129ba:	b2e4      	uxtb	r4, r4
 80129bc:	2c00      	cmp	r4, #0
 80129be:	d15d      	bne.n	8012a7c <rcl_publisher_init+0xe4>
 80129c0:	2d00      	cmp	r5, #0
 80129c2:	d05b      	beq.n	8012a7c <rcl_publisher_init+0xe4>
 80129c4:	682b      	ldr	r3, [r5, #0]
 80129c6:	b123      	cbz	r3, 80129d2 <rcl_publisher_init+0x3a>
 80129c8:	2464      	movs	r4, #100	; 0x64
 80129ca:	4620      	mov	r0, r4
 80129cc:	b008      	add	sp, #32
 80129ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129d2:	4638      	mov	r0, r7
 80129d4:	f7ff ff82 	bl	80128dc <rcl_node_is_valid>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d054      	beq.n	8012a86 <rcl_publisher_init+0xee>
 80129dc:	f1b8 0f00 	cmp.w	r8, #0
 80129e0:	d04c      	beq.n	8012a7c <rcl_publisher_init+0xe4>
 80129e2:	fab9 f389 	clz	r3, r9
 80129e6:	095b      	lsrs	r3, r3, #5
 80129e8:	f1b9 0f00 	cmp.w	r9, #0
 80129ec:	d046      	beq.n	8012a7c <rcl_publisher_init+0xe4>
 80129ee:	aa07      	add	r2, sp, #28
 80129f0:	9307      	str	r3, [sp, #28]
 80129f2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80129f6:	f106 0358 	add.w	r3, r6, #88	; 0x58
 80129fa:	9205      	str	r2, [sp, #20]
 80129fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012a00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a04:	4649      	mov	r1, r9
 8012a06:	4638      	mov	r0, r7
 8012a08:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012a0c:	f007 ff54 	bl	801a8b8 <rcl_node_resolve_name>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d14f      	bne.n	8012ab4 <rcl_publisher_init+0x11c>
 8012a14:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8012a16:	20c8      	movs	r0, #200	; 0xc8
 8012a18:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8012a1a:	4798      	blx	r3
 8012a1c:	6028      	str	r0, [r5, #0]
 8012a1e:	2800      	cmp	r0, #0
 8012a20:	d050      	beq.n	8012ac4 <rcl_publisher_init+0x12c>
 8012a22:	4638      	mov	r0, r7
 8012a24:	f7ff ff7c 	bl	8012920 <rcl_node_get_rmw_handle>
 8012a28:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8012a2c:	4641      	mov	r1, r8
 8012a2e:	9a07      	ldr	r2, [sp, #28]
 8012a30:	9300      	str	r3, [sp, #0]
 8012a32:	4633      	mov	r3, r6
 8012a34:	682c      	ldr	r4, [r5, #0]
 8012a36:	f002 fa27 	bl	8014e88 <rmw_create_publisher>
 8012a3a:	682b      	ldr	r3, [r5, #0]
 8012a3c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8012a40:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8012a44:	b370      	cbz	r0, 8012aa4 <rcl_publisher_init+0x10c>
 8012a46:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8012a4a:	f002 fb01 	bl	8015050 <rmw_publisher_get_actual_qos>
 8012a4e:	682b      	ldr	r3, [r5, #0]
 8012a50:	4604      	mov	r4, r0
 8012a52:	b9d0      	cbnz	r0, 8012a8a <rcl_publisher_init+0xf2>
 8012a54:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8012a58:	4631      	mov	r1, r6
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8012a60:	2270      	movs	r2, #112	; 0x70
 8012a62:	f00d fa4c 	bl	801fefe <memcpy>
 8012a66:	683a      	ldr	r2, [r7, #0]
 8012a68:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8012a6c:	9807      	ldr	r0, [sp, #28]
 8012a6e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8012a70:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8012a72:	4798      	blx	r3
 8012a74:	4620      	mov	r0, r4
 8012a76:	b008      	add	sp, #32
 8012a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a7c:	240b      	movs	r4, #11
 8012a7e:	4620      	mov	r0, r4
 8012a80:	b008      	add	sp, #32
 8012a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a86:	24c8      	movs	r4, #200	; 0xc8
 8012a88:	e79f      	b.n	80129ca <rcl_publisher_init+0x32>
 8012a8a:	b1cb      	cbz	r3, 8012ac0 <rcl_publisher_init+0x128>
 8012a8c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8012a90:	b142      	cbz	r2, 8012aa4 <rcl_publisher_init+0x10c>
 8012a92:	4638      	mov	r0, r7
 8012a94:	f7ff ff44 	bl	8012920 <rcl_node_get_rmw_handle>
 8012a98:	682b      	ldr	r3, [r5, #0]
 8012a9a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8012a9e:	f002 faeb 	bl	8015078 <rmw_destroy_publisher>
 8012aa2:	682b      	ldr	r3, [r5, #0]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8012aa8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8012aaa:	2401      	movs	r4, #1
 8012aac:	4790      	blx	r2
 8012aae:	2300      	movs	r3, #0
 8012ab0:	602b      	str	r3, [r5, #0]
 8012ab2:	e7db      	b.n	8012a6c <rcl_publisher_init+0xd4>
 8012ab4:	2867      	cmp	r0, #103	; 0x67
 8012ab6:	d007      	beq.n	8012ac8 <rcl_publisher_init+0x130>
 8012ab8:	2869      	cmp	r0, #105	; 0x69
 8012aba:	d005      	beq.n	8012ac8 <rcl_publisher_init+0x130>
 8012abc:	280a      	cmp	r0, #10
 8012abe:	d001      	beq.n	8012ac4 <rcl_publisher_init+0x12c>
 8012ac0:	2401      	movs	r4, #1
 8012ac2:	e7d3      	b.n	8012a6c <rcl_publisher_init+0xd4>
 8012ac4:	240a      	movs	r4, #10
 8012ac6:	e7d1      	b.n	8012a6c <rcl_publisher_init+0xd4>
 8012ac8:	2467      	movs	r4, #103	; 0x67
 8012aca:	e7cf      	b.n	8012a6c <rcl_publisher_init+0xd4>

08012acc <rcl_publisher_get_default_options>:
 8012acc:	b570      	push	{r4, r5, r6, lr}
 8012ace:	4d14      	ldr	r5, [pc, #80]	; (8012b20 <rcl_publisher_get_default_options+0x54>)
 8012ad0:	b088      	sub	sp, #32
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	2250      	movs	r2, #80	; 0x50
 8012ad6:	4913      	ldr	r1, [pc, #76]	; (8012b24 <rcl_publisher_get_default_options+0x58>)
 8012ad8:	4628      	mov	r0, r5
 8012ada:	f00d fa10 	bl	801fefe <memcpy>
 8012ade:	a802      	add	r0, sp, #8
 8012ae0:	f001 fa9e 	bl	8014020 <rcutils_get_default_allocator>
 8012ae4:	f10d 0c08 	add.w	ip, sp, #8
 8012ae8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8012aec:	466e      	mov	r6, sp
 8012aee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012af2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012af6:	f8dc 3000 	ldr.w	r3, [ip]
 8012afa:	4630      	mov	r0, r6
 8012afc:	f8ce 3000 	str.w	r3, [lr]
 8012b00:	f001 fcca 	bl	8014498 <rmw_get_default_publisher_options>
 8012b04:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8012b08:	2270      	movs	r2, #112	; 0x70
 8012b0a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012b0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012b12:	4629      	mov	r1, r5
 8012b14:	4620      	mov	r0, r4
 8012b16:	f00d f9f2 	bl	801fefe <memcpy>
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	b008      	add	sp, #32
 8012b1e:	bd70      	pop	{r4, r5, r6, pc}
 8012b20:	20012200 	.word	0x20012200
 8012b24:	08023de8 	.word	0x08023de8

08012b28 <rcl_publish>:
 8012b28:	b1f8      	cbz	r0, 8012b6a <rcl_publish+0x42>
 8012b2a:	6803      	ldr	r3, [r0, #0]
 8012b2c:	b570      	push	{r4, r5, r6, lr}
 8012b2e:	4604      	mov	r4, r0
 8012b30:	b1b3      	cbz	r3, 8012b60 <rcl_publish+0x38>
 8012b32:	4616      	mov	r6, r2
 8012b34:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8012b38:	b192      	cbz	r2, 8012b60 <rcl_publish+0x38>
 8012b3a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8012b3e:	460d      	mov	r5, r1
 8012b40:	f007 fc7e 	bl	801a440 <rcl_context_is_valid>
 8012b44:	b160      	cbz	r0, 8012b60 <rcl_publish+0x38>
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8012b4c:	b140      	cbz	r0, 8012b60 <rcl_publish+0x38>
 8012b4e:	b155      	cbz	r5, 8012b66 <rcl_publish+0x3e>
 8012b50:	4632      	mov	r2, r6
 8012b52:	4629      	mov	r1, r5
 8012b54:	f002 f938 	bl	8014dc8 <rmw_publish>
 8012b58:	3800      	subs	r0, #0
 8012b5a:	bf18      	it	ne
 8012b5c:	2001      	movne	r0, #1
 8012b5e:	bd70      	pop	{r4, r5, r6, pc}
 8012b60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012b64:	bd70      	pop	{r4, r5, r6, pc}
 8012b66:	200b      	movs	r0, #11
 8012b68:	bd70      	pop	{r4, r5, r6, pc}
 8012b6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012b6e:	4770      	bx	lr

08012b70 <rcl_publisher_is_valid>:
 8012b70:	b1a0      	cbz	r0, 8012b9c <rcl_publisher_is_valid+0x2c>
 8012b72:	6803      	ldr	r3, [r0, #0]
 8012b74:	b510      	push	{r4, lr}
 8012b76:	4604      	mov	r4, r0
 8012b78:	b173      	cbz	r3, 8012b98 <rcl_publisher_is_valid+0x28>
 8012b7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8012b7e:	b15a      	cbz	r2, 8012b98 <rcl_publisher_is_valid+0x28>
 8012b80:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8012b84:	f007 fc5c 	bl	801a440 <rcl_context_is_valid>
 8012b88:	b130      	cbz	r0, 8012b98 <rcl_publisher_is_valid+0x28>
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8012b90:	3800      	subs	r0, #0
 8012b92:	bf18      	it	ne
 8012b94:	2001      	movne	r0, #1
 8012b96:	bd10      	pop	{r4, pc}
 8012b98:	2000      	movs	r0, #0
 8012b9a:	bd10      	pop	{r4, pc}
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	4770      	bx	lr

08012ba0 <rcl_publisher_is_valid_except_context>:
 8012ba0:	b130      	cbz	r0, 8012bb0 <rcl_publisher_is_valid_except_context+0x10>
 8012ba2:	6800      	ldr	r0, [r0, #0]
 8012ba4:	b120      	cbz	r0, 8012bb0 <rcl_publisher_is_valid_except_context+0x10>
 8012ba6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8012baa:	3800      	subs	r0, #0
 8012bac:	bf18      	it	ne
 8012bae:	2001      	movne	r0, #1
 8012bb0:	4770      	bx	lr
 8012bb2:	bf00      	nop

08012bb4 <rcl_get_zero_initialized_service>:
 8012bb4:	4b01      	ldr	r3, [pc, #4]	; (8012bbc <rcl_get_zero_initialized_service+0x8>)
 8012bb6:	6818      	ldr	r0, [r3, #0]
 8012bb8:	4770      	bx	lr
 8012bba:	bf00      	nop
 8012bbc:	08023e38 	.word	0x08023e38

08012bc0 <rcl_service_init>:
 8012bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bc4:	b088      	sub	sp, #32
 8012bc6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012bc8:	b1ff      	cbz	r7, 8012c0a <rcl_service_init+0x4a>
 8012bca:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8012bce:	4605      	mov	r5, r0
 8012bd0:	460e      	mov	r6, r1
 8012bd2:	4691      	mov	r9, r2
 8012bd4:	4650      	mov	r0, sl
 8012bd6:	4698      	mov	r8, r3
 8012bd8:	f001 fa30 	bl	801403c <rcutils_allocator_is_valid>
 8012bdc:	f080 0401 	eor.w	r4, r0, #1
 8012be0:	b2e4      	uxtb	r4, r4
 8012be2:	b994      	cbnz	r4, 8012c0a <rcl_service_init+0x4a>
 8012be4:	b18d      	cbz	r5, 8012c0a <rcl_service_init+0x4a>
 8012be6:	4630      	mov	r0, r6
 8012be8:	f7ff fe78 	bl	80128dc <rcl_node_is_valid>
 8012bec:	2800      	cmp	r0, #0
 8012bee:	d05d      	beq.n	8012cac <rcl_service_init+0xec>
 8012bf0:	f1b8 0f00 	cmp.w	r8, #0
 8012bf4:	d009      	beq.n	8012c0a <rcl_service_init+0x4a>
 8012bf6:	f1b9 0f00 	cmp.w	r9, #0
 8012bfa:	d006      	beq.n	8012c0a <rcl_service_init+0x4a>
 8012bfc:	682b      	ldr	r3, [r5, #0]
 8012bfe:	b14b      	cbz	r3, 8012c14 <rcl_service_init+0x54>
 8012c00:	2464      	movs	r4, #100	; 0x64
 8012c02:	4620      	mov	r0, r4
 8012c04:	b008      	add	sp, #32
 8012c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0a:	240b      	movs	r4, #11
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	b008      	add	sp, #32
 8012c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c14:	aa07      	add	r2, sp, #28
 8012c16:	9304      	str	r3, [sp, #16]
 8012c18:	9307      	str	r3, [sp, #28]
 8012c1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012c1e:	9205      	str	r2, [sp, #20]
 8012c20:	2201      	movs	r2, #1
 8012c22:	9203      	str	r2, [sp, #12]
 8012c24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c28:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012c2c:	4641      	mov	r1, r8
 8012c2e:	4630      	mov	r0, r6
 8012c30:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012c34:	f007 fe40 	bl	801a8b8 <rcl_node_resolve_name>
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	d146      	bne.n	8012cca <rcl_service_init+0x10a>
 8012c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c3e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8012c42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012c44:	4798      	blx	r3
 8012c46:	6028      	str	r0, [r5, #0]
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d046      	beq.n	8012cda <rcl_service_init+0x11a>
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	f7ff fe67 	bl	8012920 <rcl_node_get_rmw_handle>
 8012c52:	463b      	mov	r3, r7
 8012c54:	4649      	mov	r1, r9
 8012c56:	9a07      	ldr	r2, [sp, #28]
 8012c58:	682c      	ldr	r4, [r5, #0]
 8012c5a:	f002 fbb1 	bl	80153c0 <rmw_create_service>
 8012c5e:	682b      	ldr	r3, [r5, #0]
 8012c60:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8012c64:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8012c68:	b338      	cbz	r0, 8012cba <rcl_service_init+0xfa>
 8012c6a:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8012c6e:	f002 fcd9 	bl	8015624 <rmw_service_request_subscription_get_actual_qos>
 8012c72:	bb00      	cbnz	r0, 8012cb6 <rcl_service_init+0xf6>
 8012c74:	682b      	ldr	r3, [r5, #0]
 8012c76:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8012c7a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8012c7e:	f002 fcbd 	bl	80155fc <rmw_service_response_publisher_get_actual_qos>
 8012c82:	4604      	mov	r4, r0
 8012c84:	b9b8      	cbnz	r0, 8012cb6 <rcl_service_init+0xf6>
 8012c86:	6828      	ldr	r0, [r5, #0]
 8012c88:	2268      	movs	r2, #104	; 0x68
 8012c8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012c8e:	4639      	mov	r1, r7
 8012c90:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8012c94:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8012c98:	f00d f931 	bl	801fefe <memcpy>
 8012c9c:	9807      	ldr	r0, [sp, #28]
 8012c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ca0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012ca2:	4798      	blx	r3
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	b008      	add	sp, #32
 8012ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cac:	24c8      	movs	r4, #200	; 0xc8
 8012cae:	4620      	mov	r0, r4
 8012cb0:	b008      	add	sp, #32
 8012cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cb6:	682b      	ldr	r3, [r5, #0]
 8012cb8:	b16b      	cbz	r3, 8012cd6 <rcl_service_init+0x116>
 8012cba:	4618      	mov	r0, r3
 8012cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012cbe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012cc0:	2401      	movs	r4, #1
 8012cc2:	4790      	blx	r2
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	602b      	str	r3, [r5, #0]
 8012cc8:	e7e8      	b.n	8012c9c <rcl_service_init+0xdc>
 8012cca:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	d905      	bls.n	8012cde <rcl_service_init+0x11e>
 8012cd2:	280a      	cmp	r0, #10
 8012cd4:	d001      	beq.n	8012cda <rcl_service_init+0x11a>
 8012cd6:	2401      	movs	r4, #1
 8012cd8:	e7e0      	b.n	8012c9c <rcl_service_init+0xdc>
 8012cda:	240a      	movs	r4, #10
 8012cdc:	e7de      	b.n	8012c9c <rcl_service_init+0xdc>
 8012cde:	2468      	movs	r4, #104	; 0x68
 8012ce0:	e7dc      	b.n	8012c9c <rcl_service_init+0xdc>
 8012ce2:	bf00      	nop

08012ce4 <rcl_service_get_default_options>:
 8012ce4:	b530      	push	{r4, r5, lr}
 8012ce6:	4d0f      	ldr	r5, [pc, #60]	; (8012d24 <rcl_service_get_default_options+0x40>)
 8012ce8:	b087      	sub	sp, #28
 8012cea:	4604      	mov	r4, r0
 8012cec:	2250      	movs	r2, #80	; 0x50
 8012cee:	490e      	ldr	r1, [pc, #56]	; (8012d28 <rcl_service_get_default_options+0x44>)
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	f00d f904 	bl	801fefe <memcpy>
 8012cf6:	4668      	mov	r0, sp
 8012cf8:	f001 f992 	bl	8014020 <rcutils_get_default_allocator>
 8012cfc:	46ec      	mov	ip, sp
 8012cfe:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8012d02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d0a:	f8dc 3000 	ldr.w	r3, [ip]
 8012d0e:	2268      	movs	r2, #104	; 0x68
 8012d10:	4629      	mov	r1, r5
 8012d12:	4620      	mov	r0, r4
 8012d14:	f8ce 3000 	str.w	r3, [lr]
 8012d18:	f00d f8f1 	bl	801fefe <memcpy>
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	b007      	add	sp, #28
 8012d20:	bd30      	pop	{r4, r5, pc}
 8012d22:	bf00      	nop
 8012d24:	20012270 	.word	0x20012270
 8012d28:	08023e40 	.word	0x08023e40

08012d2c <rcl_service_get_rmw_handle>:
 8012d2c:	b118      	cbz	r0, 8012d36 <rcl_service_get_rmw_handle+0xa>
 8012d2e:	6800      	ldr	r0, [r0, #0]
 8012d30:	b108      	cbz	r0, 8012d36 <rcl_service_get_rmw_handle+0xa>
 8012d32:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012d36:	4770      	bx	lr

08012d38 <rcl_take_request>:
 8012d38:	b570      	push	{r4, r5, r6, lr}
 8012d3a:	468e      	mov	lr, r1
 8012d3c:	b08c      	sub	sp, #48	; 0x30
 8012d3e:	460c      	mov	r4, r1
 8012d40:	4616      	mov	r6, r2
 8012d42:	f10d 0c18 	add.w	ip, sp, #24
 8012d46:	4605      	mov	r5, r0
 8012d48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d50:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012d54:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012d58:	b30d      	cbz	r5, 8012d9e <rcl_take_request+0x66>
 8012d5a:	682b      	ldr	r3, [r5, #0]
 8012d5c:	b1fb      	cbz	r3, 8012d9e <rcl_take_request+0x66>
 8012d5e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8012d62:	b1e0      	cbz	r0, 8012d9e <rcl_take_request+0x66>
 8012d64:	b336      	cbz	r6, 8012db4 <rcl_take_request+0x7c>
 8012d66:	2300      	movs	r3, #0
 8012d68:	4632      	mov	r2, r6
 8012d6a:	a902      	add	r1, sp, #8
 8012d6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012d70:	f10d 0307 	add.w	r3, sp, #7
 8012d74:	f002 fa22 	bl	80151bc <rmw_take_request>
 8012d78:	4605      	mov	r5, r0
 8012d7a:	b198      	cbz	r0, 8012da4 <rcl_take_request+0x6c>
 8012d7c:	280a      	cmp	r0, #10
 8012d7e:	bf18      	it	ne
 8012d80:	2501      	movne	r5, #1
 8012d82:	f10d 0e18 	add.w	lr, sp, #24
 8012d86:	46a4      	mov	ip, r4
 8012d88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d90:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012d94:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012d98:	4628      	mov	r0, r5
 8012d9a:	b00c      	add	sp, #48	; 0x30
 8012d9c:	bd70      	pop	{r4, r5, r6, pc}
 8012d9e:	f44f 7516 	mov.w	r5, #600	; 0x258
 8012da2:	e7ee      	b.n	8012d82 <rcl_take_request+0x4a>
 8012da4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012da8:	f240 2359 	movw	r3, #601	; 0x259
 8012dac:	2a00      	cmp	r2, #0
 8012dae:	bf08      	it	eq
 8012db0:	461d      	moveq	r5, r3
 8012db2:	e7e6      	b.n	8012d82 <rcl_take_request+0x4a>
 8012db4:	250b      	movs	r5, #11
 8012db6:	e7e4      	b.n	8012d82 <rcl_take_request+0x4a>

08012db8 <rcl_send_response>:
 8012db8:	b170      	cbz	r0, 8012dd8 <rcl_send_response+0x20>
 8012dba:	6800      	ldr	r0, [r0, #0]
 8012dbc:	b160      	cbz	r0, 8012dd8 <rcl_send_response+0x20>
 8012dbe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012dc2:	b148      	cbz	r0, 8012dd8 <rcl_send_response+0x20>
 8012dc4:	b169      	cbz	r1, 8012de2 <rcl_send_response+0x2a>
 8012dc6:	b510      	push	{r4, lr}
 8012dc8:	b14a      	cbz	r2, 8012dde <rcl_send_response+0x26>
 8012dca:	f002 fa55 	bl	8015278 <rmw_send_response>
 8012dce:	b110      	cbz	r0, 8012dd6 <rcl_send_response+0x1e>
 8012dd0:	2802      	cmp	r0, #2
 8012dd2:	bf18      	it	ne
 8012dd4:	2001      	movne	r0, #1
 8012dd6:	bd10      	pop	{r4, pc}
 8012dd8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8012ddc:	4770      	bx	lr
 8012dde:	200b      	movs	r0, #11
 8012de0:	bd10      	pop	{r4, pc}
 8012de2:	200b      	movs	r0, #11
 8012de4:	4770      	bx	lr
 8012de6:	bf00      	nop

08012de8 <rcl_service_is_valid>:
 8012de8:	b130      	cbz	r0, 8012df8 <rcl_service_is_valid+0x10>
 8012dea:	6800      	ldr	r0, [r0, #0]
 8012dec:	b120      	cbz	r0, 8012df8 <rcl_service_is_valid+0x10>
 8012dee:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8012df2:	3800      	subs	r0, #0
 8012df4:	bf18      	it	ne
 8012df6:	2001      	movne	r0, #1
 8012df8:	4770      	bx	lr
 8012dfa:	bf00      	nop

08012dfc <rcl_get_zero_initialized_subscription>:
 8012dfc:	4b01      	ldr	r3, [pc, #4]	; (8012e04 <rcl_get_zero_initialized_subscription+0x8>)
 8012dfe:	6818      	ldr	r0, [r3, #0]
 8012e00:	4770      	bx	lr
 8012e02:	bf00      	nop
 8012e04:	08023e90 	.word	0x08023e90

08012e08 <rcl_subscription_init>:
 8012e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e0c:	b088      	sub	sp, #32
 8012e0e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012e10:	b1ff      	cbz	r7, 8012e52 <rcl_subscription_init+0x4a>
 8012e12:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8012e16:	4605      	mov	r5, r0
 8012e18:	460e      	mov	r6, r1
 8012e1a:	4691      	mov	r9, r2
 8012e1c:	4650      	mov	r0, sl
 8012e1e:	4698      	mov	r8, r3
 8012e20:	f001 f90c 	bl	801403c <rcutils_allocator_is_valid>
 8012e24:	f080 0401 	eor.w	r4, r0, #1
 8012e28:	b2e4      	uxtb	r4, r4
 8012e2a:	b994      	cbnz	r4, 8012e52 <rcl_subscription_init+0x4a>
 8012e2c:	b18d      	cbz	r5, 8012e52 <rcl_subscription_init+0x4a>
 8012e2e:	4630      	mov	r0, r6
 8012e30:	f7ff fd54 	bl	80128dc <rcl_node_is_valid>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d055      	beq.n	8012ee4 <rcl_subscription_init+0xdc>
 8012e38:	f1b9 0f00 	cmp.w	r9, #0
 8012e3c:	d009      	beq.n	8012e52 <rcl_subscription_init+0x4a>
 8012e3e:	f1b8 0f00 	cmp.w	r8, #0
 8012e42:	d006      	beq.n	8012e52 <rcl_subscription_init+0x4a>
 8012e44:	682b      	ldr	r3, [r5, #0]
 8012e46:	b14b      	cbz	r3, 8012e5c <rcl_subscription_init+0x54>
 8012e48:	2464      	movs	r4, #100	; 0x64
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	b008      	add	sp, #32
 8012e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e52:	240b      	movs	r4, #11
 8012e54:	4620      	mov	r0, r4
 8012e56:	b008      	add	sp, #32
 8012e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e5c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012e60:	aa07      	add	r2, sp, #28
 8012e62:	9307      	str	r3, [sp, #28]
 8012e64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012e68:	9205      	str	r2, [sp, #20]
 8012e6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012e72:	4641      	mov	r1, r8
 8012e74:	4630      	mov	r0, r6
 8012e76:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012e7a:	f007 fd1d 	bl	801a8b8 <rcl_node_resolve_name>
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d15f      	bne.n	8012f42 <rcl_subscription_init+0x13a>
 8012e82:	21c8      	movs	r1, #200	; 0xc8
 8012e84:	2001      	movs	r0, #1
 8012e86:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8012e8a:	4798      	blx	r3
 8012e8c:	6028      	str	r0, [r5, #0]
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	d05f      	beq.n	8012f52 <rcl_subscription_init+0x14a>
 8012e92:	4630      	mov	r0, r6
 8012e94:	f7ff fd44 	bl	8012920 <rcl_node_get_rmw_handle>
 8012e98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e9c:	4649      	mov	r1, r9
 8012e9e:	9a07      	ldr	r2, [sp, #28]
 8012ea0:	9300      	str	r3, [sp, #0]
 8012ea2:	463b      	mov	r3, r7
 8012ea4:	682c      	ldr	r4, [r5, #0]
 8012ea6:	f002 fbd1 	bl	801564c <rmw_create_subscription>
 8012eaa:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8012eae:	682c      	ldr	r4, [r5, #0]
 8012eb0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8012eb4:	b348      	cbz	r0, 8012f0a <rcl_subscription_init+0x102>
 8012eb6:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8012eba:	f002 fcbd 	bl	8015838 <rmw_subscription_get_actual_qos>
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	b9a8      	cbnz	r0, 8012eee <rcl_subscription_init+0xe6>
 8012ec2:	6828      	ldr	r0, [r5, #0]
 8012ec4:	2270      	movs	r2, #112	; 0x70
 8012ec6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012eca:	4639      	mov	r1, r7
 8012ecc:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8012ed0:	f00d f815 	bl	801fefe <memcpy>
 8012ed4:	9807      	ldr	r0, [sp, #28]
 8012ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ed8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012eda:	4798      	blx	r3
 8012edc:	4620      	mov	r0, r4
 8012ede:	b008      	add	sp, #32
 8012ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ee4:	24c8      	movs	r4, #200	; 0xc8
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	b008      	add	sp, #32
 8012eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eee:	682c      	ldr	r4, [r5, #0]
 8012ef0:	b36c      	cbz	r4, 8012f4e <rcl_subscription_init+0x146>
 8012ef2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8012ef6:	b14b      	cbz	r3, 8012f0c <rcl_subscription_init+0x104>
 8012ef8:	4630      	mov	r0, r6
 8012efa:	f7ff fd11 	bl	8012920 <rcl_node_get_rmw_handle>
 8012efe:	682b      	ldr	r3, [r5, #0]
 8012f00:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8012f04:	f002 fcac 	bl	8015860 <rmw_destroy_subscription>
 8012f08:	682c      	ldr	r4, [r5, #0]
 8012f0a:	b194      	cbz	r4, 8012f32 <rcl_subscription_init+0x12a>
 8012f0c:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8012f10:	4630      	mov	r0, r6
 8012f12:	f001 f893 	bl	801403c <rcutils_allocator_is_valid>
 8012f16:	b158      	cbz	r0, 8012f30 <rcl_subscription_init+0x128>
 8012f18:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012f1a:	b148      	cbz	r0, 8012f30 <rcl_subscription_init+0x128>
 8012f1c:	4631      	mov	r1, r6
 8012f1e:	f001 fac3 	bl	80144a8 <rmw_subscription_content_filter_options_fini>
 8012f22:	4606      	mov	r6, r0
 8012f24:	b9c8      	cbnz	r0, 8012f5a <rcl_subscription_init+0x152>
 8012f26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012f28:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8012f2a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012f2c:	4798      	blx	r3
 8012f2e:	66e6      	str	r6, [r4, #108]	; 0x6c
 8012f30:	682c      	ldr	r4, [r5, #0]
 8012f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f34:	4620      	mov	r0, r4
 8012f36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012f38:	2401      	movs	r4, #1
 8012f3a:	4798      	blx	r3
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	602b      	str	r3, [r5, #0]
 8012f40:	e7c8      	b.n	8012ed4 <rcl_subscription_init+0xcc>
 8012f42:	2867      	cmp	r0, #103	; 0x67
 8012f44:	d007      	beq.n	8012f56 <rcl_subscription_init+0x14e>
 8012f46:	2869      	cmp	r0, #105	; 0x69
 8012f48:	d005      	beq.n	8012f56 <rcl_subscription_init+0x14e>
 8012f4a:	280a      	cmp	r0, #10
 8012f4c:	d001      	beq.n	8012f52 <rcl_subscription_init+0x14a>
 8012f4e:	2401      	movs	r4, #1
 8012f50:	e7c0      	b.n	8012ed4 <rcl_subscription_init+0xcc>
 8012f52:	240a      	movs	r4, #10
 8012f54:	e7be      	b.n	8012ed4 <rcl_subscription_init+0xcc>
 8012f56:	2467      	movs	r4, #103	; 0x67
 8012f58:	e7bc      	b.n	8012ed4 <rcl_subscription_init+0xcc>
 8012f5a:	f007 fa53 	bl	801a404 <rcl_convert_rmw_ret_to_rcl_ret>
 8012f5e:	682c      	ldr	r4, [r5, #0]
 8012f60:	e7e7      	b.n	8012f32 <rcl_subscription_init+0x12a>
 8012f62:	bf00      	nop

08012f64 <rcl_subscription_get_default_options>:
 8012f64:	b570      	push	{r4, r5, r6, lr}
 8012f66:	4d14      	ldr	r5, [pc, #80]	; (8012fb8 <rcl_subscription_get_default_options+0x54>)
 8012f68:	b08a      	sub	sp, #40	; 0x28
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	2250      	movs	r2, #80	; 0x50
 8012f6e:	4913      	ldr	r1, [pc, #76]	; (8012fbc <rcl_subscription_get_default_options+0x58>)
 8012f70:	4628      	mov	r0, r5
 8012f72:	f00c ffc4 	bl	801fefe <memcpy>
 8012f76:	a804      	add	r0, sp, #16
 8012f78:	f001 f852 	bl	8014020 <rcutils_get_default_allocator>
 8012f7c:	f10d 0c10 	add.w	ip, sp, #16
 8012f80:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8012f84:	466e      	mov	r6, sp
 8012f86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012f8e:	f8dc 3000 	ldr.w	r3, [ip]
 8012f92:	4630      	mov	r0, r6
 8012f94:	f8ce 3000 	str.w	r3, [lr]
 8012f98:	f001 faa0 	bl	80144dc <rmw_get_default_subscription_options>
 8012f9c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8012fa0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012fa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012fa8:	2270      	movs	r2, #112	; 0x70
 8012faa:	4629      	mov	r1, r5
 8012fac:	4620      	mov	r0, r4
 8012fae:	f00c ffa6 	bl	801fefe <memcpy>
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	b00a      	add	sp, #40	; 0x28
 8012fb6:	bd70      	pop	{r4, r5, r6, pc}
 8012fb8:	200122d8 	.word	0x200122d8
 8012fbc:	08023e98 	.word	0x08023e98

08012fc0 <rcl_take>:
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d049      	beq.n	8013058 <rcl_take+0x98>
 8012fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc8:	4615      	mov	r5, r2
 8012fca:	6802      	ldr	r2, [r0, #0]
 8012fcc:	b0a4      	sub	sp, #144	; 0x90
 8012fce:	4604      	mov	r4, r0
 8012fd0:	2a00      	cmp	r2, #0
 8012fd2:	d039      	beq.n	8013048 <rcl_take+0x88>
 8012fd4:	461f      	mov	r7, r3
 8012fd6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8012fda:	b3ab      	cbz	r3, 8013048 <rcl_take+0x88>
 8012fdc:	460e      	mov	r6, r1
 8012fde:	2900      	cmp	r1, #0
 8012fe0:	d038      	beq.n	8013054 <rcl_take+0x94>
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	d03c      	beq.n	8013060 <rcl_take+0xa0>
 8012fe6:	a802      	add	r0, sp, #8
 8012fe8:	f04f 0800 	mov.w	r8, #0
 8012fec:	f001 fa7c 	bl	80144e8 <rmw_get_zero_initialized_message_info>
 8012ff0:	f10d 0c08 	add.w	ip, sp, #8
 8012ff4:	46ae      	mov	lr, r5
 8012ff6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ffa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ffe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013002:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013006:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801300a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801300e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013012:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013016:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 801301a:	462b      	mov	r3, r5
 801301c:	6820      	ldr	r0, [r4, #0]
 801301e:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8013022:	4631      	mov	r1, r6
 8013024:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013028:	9700      	str	r7, [sp, #0]
 801302a:	f002 fc7b 	bl	8015924 <rmw_take_with_info>
 801302e:	4603      	mov	r3, r0
 8013030:	b9c0      	cbnz	r0, 8013064 <rcl_take+0xa4>
 8013032:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8013036:	f240 1291 	movw	r2, #401	; 0x191
 801303a:	2900      	cmp	r1, #0
 801303c:	bf08      	it	eq
 801303e:	4613      	moveq	r3, r2
 8013040:	4618      	mov	r0, r3
 8013042:	b024      	add	sp, #144	; 0x90
 8013044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013048:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801304c:	4618      	mov	r0, r3
 801304e:	b024      	add	sp, #144	; 0x90
 8013050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013054:	230b      	movs	r3, #11
 8013056:	e7f3      	b.n	8013040 <rcl_take+0x80>
 8013058:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801305c:	4618      	mov	r0, r3
 801305e:	4770      	bx	lr
 8013060:	ad14      	add	r5, sp, #80	; 0x50
 8013062:	e7c0      	b.n	8012fe6 <rcl_take+0x26>
 8013064:	f007 f9ce 	bl	801a404 <rcl_convert_rmw_ret_to_rcl_ret>
 8013068:	4603      	mov	r3, r0
 801306a:	e7e9      	b.n	8013040 <rcl_take+0x80>

0801306c <rcl_subscription_get_rmw_handle>:
 801306c:	b118      	cbz	r0, 8013076 <rcl_subscription_get_rmw_handle+0xa>
 801306e:	6800      	ldr	r0, [r0, #0]
 8013070:	b108      	cbz	r0, 8013076 <rcl_subscription_get_rmw_handle+0xa>
 8013072:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013076:	4770      	bx	lr

08013078 <rcl_subscription_is_valid>:
 8013078:	b130      	cbz	r0, 8013088 <rcl_subscription_is_valid+0x10>
 801307a:	6800      	ldr	r0, [r0, #0]
 801307c:	b120      	cbz	r0, 8013088 <rcl_subscription_is_valid+0x10>
 801307e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013082:	3800      	subs	r0, #0
 8013084:	bf18      	it	ne
 8013086:	2001      	movne	r0, #1
 8013088:	4770      	bx	lr
 801308a:	bf00      	nop

0801308c <_rclc_check_for_new_data>:
 801308c:	2800      	cmp	r0, #0
 801308e:	d046      	beq.n	801311e <_rclc_check_for_new_data+0x92>
 8013090:	4603      	mov	r3, r0
 8013092:	b530      	push	{r4, r5, lr}
 8013094:	7802      	ldrb	r2, [r0, #0]
 8013096:	b085      	sub	sp, #20
 8013098:	2a0a      	cmp	r2, #10
 801309a:	d842      	bhi.n	8013122 <_rclc_check_for_new_data+0x96>
 801309c:	e8df f002 	tbb	[pc, r2]
 80130a0:	14181212 	.word	0x14181212
 80130a4:	06060614 	.word	0x06060614
 80130a8:	2e1a      	.short	0x2e1a
 80130aa:	16          	.byte	0x16
 80130ab:	00          	.byte	0x00
 80130ac:	6a0a      	ldr	r2, [r1, #32]
 80130ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80130b0:	2000      	movs	r0, #0
 80130b2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80130b6:	1a12      	subs	r2, r2, r0
 80130b8:	bf18      	it	ne
 80130ba:	2201      	movne	r2, #1
 80130bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80130c0:	b005      	add	sp, #20
 80130c2:	bd30      	pop	{r4, r5, pc}
 80130c4:	680a      	ldr	r2, [r1, #0]
 80130c6:	e7f2      	b.n	80130ae <_rclc_check_for_new_data+0x22>
 80130c8:	698a      	ldr	r2, [r1, #24]
 80130ca:	e7f0      	b.n	80130ae <_rclc_check_for_new_data+0x22>
 80130cc:	688a      	ldr	r2, [r1, #8]
 80130ce:	e7ee      	b.n	80130ae <_rclc_check_for_new_data+0x22>
 80130d0:	690a      	ldr	r2, [r1, #16]
 80130d2:	e7ec      	b.n	80130ae <_rclc_check_for_new_data+0x22>
 80130d4:	685c      	ldr	r4, [r3, #4]
 80130d6:	4608      	mov	r0, r1
 80130d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80130dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130e4:	f104 0110 	add.w	r1, r4, #16
 80130e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80130ec:	9500      	str	r5, [sp, #0]
 80130ee:	f104 0341 	add.w	r3, r4, #65	; 0x41
 80130f2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80130f6:	f008 ff4b 	bl	801bf90 <rcl_action_client_wait_set_get_entities_ready>
 80130fa:	e7e1      	b.n	80130c0 <_rclc_check_for_new_data+0x34>
 80130fc:	685c      	ldr	r4, [r3, #4]
 80130fe:	4608      	mov	r0, r1
 8013100:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8013104:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8013108:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801310c:	e9cd 2100 	strd	r2, r1, [sp]
 8013110:	f104 0220 	add.w	r2, r4, #32
 8013114:	f104 0110 	add.w	r1, r4, #16
 8013118:	f009 f952 	bl	801c3c0 <rcl_action_server_wait_set_get_entities_ready>
 801311c:	e7d0      	b.n	80130c0 <_rclc_check_for_new_data+0x34>
 801311e:	200b      	movs	r0, #11
 8013120:	4770      	bx	lr
 8013122:	2001      	movs	r0, #1
 8013124:	e7cc      	b.n	80130c0 <_rclc_check_for_new_data+0x34>
 8013126:	bf00      	nop

08013128 <_rclc_take_new_data>:
 8013128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801312a:	b09b      	sub	sp, #108	; 0x6c
 801312c:	2800      	cmp	r0, #0
 801312e:	f000 8088 	beq.w	8013242 <_rclc_take_new_data+0x11a>
 8013132:	7803      	ldrb	r3, [r0, #0]
 8013134:	4604      	mov	r4, r0
 8013136:	2b0a      	cmp	r3, #10
 8013138:	f200 8167 	bhi.w	801340a <_rclc_take_new_data+0x2e2>
 801313c:	e8df f003 	tbb	[pc, r3]
 8013140:	44152d2d 	.word	0x44152d2d
 8013144:	19191944 	.word	0x19191944
 8013148:	065a      	.short	0x065a
 801314a:	15          	.byte	0x15
 801314b:	00          	.byte	0x00
 801314c:	6840      	ldr	r0, [r0, #4]
 801314e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013152:	2b00      	cmp	r3, #0
 8013154:	f040 80b2 	bne.w	80132bc <_rclc_take_new_data+0x194>
 8013158:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 801315c:	2b00      	cmp	r3, #0
 801315e:	f040 80e4 	bne.w	801332a <_rclc_take_new_data+0x202>
 8013162:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8013166:	2b00      	cmp	r3, #0
 8013168:	d16f      	bne.n	801324a <_rclc_take_new_data+0x122>
 801316a:	2500      	movs	r5, #0
 801316c:	4628      	mov	r0, r5
 801316e:	b01b      	add	sp, #108	; 0x6c
 8013170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013172:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8013174:	6a0b      	ldr	r3, [r1, #32]
 8013176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d0f5      	beq.n	801316a <_rclc_take_new_data+0x42>
 801317e:	6882      	ldr	r2, [r0, #8]
 8013180:	f100 0110 	add.w	r1, r0, #16
 8013184:	6840      	ldr	r0, [r0, #4]
 8013186:	f7ff fdd7 	bl	8012d38 <rcl_take_request>
 801318a:	4605      	mov	r5, r0
 801318c:	2800      	cmp	r0, #0
 801318e:	d0ec      	beq.n	801316a <_rclc_take_new_data+0x42>
 8013190:	f240 2359 	movw	r3, #601	; 0x259
 8013194:	4298      	cmp	r0, r3
 8013196:	d013      	beq.n	80131c0 <_rclc_take_new_data+0x98>
 8013198:	e029      	b.n	80131ee <_rclc_take_new_data+0xc6>
 801319a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801319c:	680b      	ldr	r3, [r1, #0]
 801319e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d0e1      	beq.n	801316a <_rclc_take_new_data+0x42>
 80131a6:	2300      	movs	r3, #0
 80131a8:	aa0a      	add	r2, sp, #40	; 0x28
 80131aa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80131ae:	f7ff ff07 	bl	8012fc0 <rcl_take>
 80131b2:	4605      	mov	r5, r0
 80131b4:	2800      	cmp	r0, #0
 80131b6:	d0d9      	beq.n	801316c <_rclc_take_new_data+0x44>
 80131b8:	f240 1391 	movw	r3, #401	; 0x191
 80131bc:	4298      	cmp	r0, r3
 80131be:	d116      	bne.n	80131ee <_rclc_take_new_data+0xc6>
 80131c0:	2300      	movs	r3, #0
 80131c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80131c6:	e7d1      	b.n	801316c <_rclc_take_new_data+0x44>
 80131c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80131ca:	698b      	ldr	r3, [r1, #24]
 80131cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d0ca      	beq.n	801316a <_rclc_take_new_data+0x42>
 80131d4:	6882      	ldr	r2, [r0, #8]
 80131d6:	f100 0110 	add.w	r1, r0, #16
 80131da:	6840      	ldr	r0, [r0, #4]
 80131dc:	f007 f8c0 	bl	801a360 <rcl_take_response>
 80131e0:	4605      	mov	r5, r0
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d0c1      	beq.n	801316a <_rclc_take_new_data+0x42>
 80131e6:	f240 13f5 	movw	r3, #501	; 0x1f5
 80131ea:	4298      	cmp	r0, r3
 80131ec:	d0be      	beq.n	801316c <_rclc_take_new_data+0x44>
 80131ee:	f000 ff63 	bl	80140b8 <rcutils_reset_error>
 80131f2:	e7bb      	b.n	801316c <_rclc_take_new_data+0x44>
 80131f4:	6840      	ldr	r0, [r0, #4]
 80131f6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d17d      	bne.n	80132fa <_rclc_take_new_data+0x1d2>
 80131fe:	69c3      	ldr	r3, [r0, #28]
 8013200:	b11b      	cbz	r3, 801320a <_rclc_take_new_data+0xe2>
 8013202:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013206:	2b00      	cmp	r3, #0
 8013208:	d144      	bne.n	8013294 <_rclc_take_new_data+0x16c>
 801320a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801320e:	2b00      	cmp	r3, #0
 8013210:	f040 80ac 	bne.w	801336c <_rclc_take_new_data+0x244>
 8013214:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8013218:	2b00      	cmp	r3, #0
 801321a:	d0a6      	beq.n	801316a <_rclc_take_new_data+0x42>
 801321c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801321e:	a90a      	add	r1, sp, #40	; 0x28
 8013220:	3010      	adds	r0, #16
 8013222:	f008 fd8d 	bl	801bd40 <rcl_action_take_result_response>
 8013226:	4605      	mov	r5, r0
 8013228:	2800      	cmp	r0, #0
 801322a:	d1e0      	bne.n	80131ee <_rclc_take_new_data+0xc6>
 801322c:	6860      	ldr	r0, [r4, #4]
 801322e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013232:	f009 f9f5 	bl	801c620 <rclc_action_find_handle_by_result_request_sequence_number>
 8013236:	2800      	cmp	r0, #0
 8013238:	d098      	beq.n	801316c <_rclc_take_new_data+0x44>
 801323a:	2301      	movs	r3, #1
 801323c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8013240:	e794      	b.n	801316c <_rclc_take_new_data+0x44>
 8013242:	250b      	movs	r5, #11
 8013244:	4628      	mov	r0, r5
 8013246:	b01b      	add	sp, #108	; 0x6c
 8013248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801324a:	ae04      	add	r6, sp, #16
 801324c:	3010      	adds	r0, #16
 801324e:	aa0a      	add	r2, sp, #40	; 0x28
 8013250:	4631      	mov	r1, r6
 8013252:	f008 ffe9 	bl	801c228 <rcl_action_take_cancel_request>
 8013256:	4605      	mov	r5, r0
 8013258:	2800      	cmp	r0, #0
 801325a:	d1c8      	bne.n	80131ee <_rclc_take_new_data+0xc6>
 801325c:	a90a      	add	r1, sp, #40	; 0x28
 801325e:	6860      	ldr	r0, [r4, #4]
 8013260:	f009 f99e 	bl	801c5a0 <rclc_action_find_goal_handle_by_uuid>
 8013264:	4607      	mov	r7, r0
 8013266:	2800      	cmp	r0, #0
 8013268:	f000 80bb 	beq.w	80133e2 <_rclc_take_new_data+0x2ba>
 801326c:	2101      	movs	r1, #1
 801326e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8013272:	f009 f91f 	bl	801c4b4 <rcl_action_transition_goal_state>
 8013276:	2803      	cmp	r0, #3
 8013278:	4684      	mov	ip, r0
 801327a:	f040 80a7 	bne.w	80133cc <_rclc_take_new_data+0x2a4>
 801327e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8013282:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013286:	e896 0003 	ldmia.w	r6, {r0, r1}
 801328a:	e884 0003 	stmia.w	r4, {r0, r1}
 801328e:	f887 c008 	strb.w	ip, [r7, #8]
 8013292:	e76b      	b.n	801316c <_rclc_take_new_data+0x44>
 8013294:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013296:	3010      	adds	r0, #16
 8013298:	f008 fdd2 	bl	801be40 <rcl_action_take_feedback>
 801329c:	4605      	mov	r5, r0
 801329e:	2800      	cmp	r0, #0
 80132a0:	d1a5      	bne.n	80131ee <_rclc_take_new_data+0xc6>
 80132a2:	6860      	ldr	r0, [r4, #4]
 80132a4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80132a6:	f009 f97b 	bl	801c5a0 <rclc_action_find_goal_handle_by_uuid>
 80132aa:	4603      	mov	r3, r0
 80132ac:	2800      	cmp	r0, #0
 80132ae:	f000 80a3 	beq.w	80133f8 <_rclc_take_new_data+0x2d0>
 80132b2:	2201      	movs	r2, #1
 80132b4:	6860      	ldr	r0, [r4, #4]
 80132b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80132ba:	e7a6      	b.n	801320a <_rclc_take_new_data+0xe2>
 80132bc:	f009 f94a 	bl	801c554 <rclc_action_take_goal_handle>
 80132c0:	4606      	mov	r6, r0
 80132c2:	6860      	ldr	r0, [r4, #4]
 80132c4:	2e00      	cmp	r6, #0
 80132c6:	f43f af47 	beq.w	8013158 <_rclc_take_new_data+0x30>
 80132ca:	6070      	str	r0, [r6, #4]
 80132cc:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80132d0:	69f2      	ldr	r2, [r6, #28]
 80132d2:	3010      	adds	r0, #16
 80132d4:	f008 fef2 	bl	801c0bc <rcl_action_take_goal_request>
 80132d8:	4605      	mov	r5, r0
 80132da:	2800      	cmp	r0, #0
 80132dc:	f040 808e 	bne.w	80133fc <_rclc_take_new_data+0x2d4>
 80132e0:	69f7      	ldr	r7, [r6, #28]
 80132e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80132e4:	7235      	strb	r5, [r6, #8]
 80132e6:	f8c6 0009 	str.w	r0, [r6, #9]
 80132ea:	f8c6 100d 	str.w	r1, [r6, #13]
 80132ee:	6860      	ldr	r0, [r4, #4]
 80132f0:	f8c6 2011 	str.w	r2, [r6, #17]
 80132f4:	f8c6 3015 	str.w	r3, [r6, #21]
 80132f8:	e72e      	b.n	8013158 <_rclc_take_new_data+0x30>
 80132fa:	aa04      	add	r2, sp, #16
 80132fc:	a90a      	add	r1, sp, #40	; 0x28
 80132fe:	3010      	adds	r0, #16
 8013300:	f008 fca6 	bl	801bc50 <rcl_action_take_goal_response>
 8013304:	4605      	mov	r5, r0
 8013306:	2800      	cmp	r0, #0
 8013308:	f47f af71 	bne.w	80131ee <_rclc_take_new_data+0xc6>
 801330c:	6860      	ldr	r0, [r4, #4]
 801330e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013312:	f009 f973 	bl	801c5fc <rclc_action_find_handle_by_goal_request_sequence_number>
 8013316:	b130      	cbz	r0, 8013326 <_rclc_take_new_data+0x1fe>
 8013318:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801331c:	2201      	movs	r2, #1
 801331e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8013322:	f880 2020 	strb.w	r2, [r0, #32]
 8013326:	6860      	ldr	r0, [r4, #4]
 8013328:	e769      	b.n	80131fe <_rclc_take_new_data+0xd6>
 801332a:	3010      	adds	r0, #16
 801332c:	aa04      	add	r2, sp, #16
 801332e:	a90a      	add	r1, sp, #40	; 0x28
 8013330:	f008 ff3a 	bl	801c1a8 <rcl_action_take_result_request>
 8013334:	4605      	mov	r5, r0
 8013336:	2800      	cmp	r0, #0
 8013338:	f47f af59 	bne.w	80131ee <_rclc_take_new_data+0xc6>
 801333c:	a904      	add	r1, sp, #16
 801333e:	6860      	ldr	r0, [r4, #4]
 8013340:	f009 f92e 	bl	801c5a0 <rclc_action_find_goal_handle_by_uuid>
 8013344:	4607      	mov	r7, r0
 8013346:	b160      	cbz	r0, 8013362 <_rclc_take_new_data+0x23a>
 8013348:	ad0a      	add	r5, sp, #40	; 0x28
 801334a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801334e:	f04f 0c02 	mov.w	ip, #2
 8013352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013354:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013356:	e895 0003 	ldmia.w	r5, {r0, r1}
 801335a:	e886 0003 	stmia.w	r6, {r0, r1}
 801335e:	f887 c008 	strb.w	ip, [r7, #8]
 8013362:	6860      	ldr	r0, [r4, #4]
 8013364:	2300      	movs	r3, #0
 8013366:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 801336a:	e6fa      	b.n	8013162 <_rclc_take_new_data+0x3a>
 801336c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8013370:	a90a      	add	r1, sp, #40	; 0x28
 8013372:	3010      	adds	r0, #16
 8013374:	f008 fd24 	bl	801bdc0 <rcl_action_take_cancel_response>
 8013378:	4605      	mov	r5, r0
 801337a:	2800      	cmp	r0, #0
 801337c:	f47f af37 	bne.w	80131ee <_rclc_take_new_data+0xc6>
 8013380:	6860      	ldr	r0, [r4, #4]
 8013382:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013386:	f009 f95d 	bl	801c644 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801338a:	4606      	mov	r6, r0
 801338c:	6860      	ldr	r0, [r4, #4]
 801338e:	2e00      	cmp	r6, #0
 8013390:	f43f af40 	beq.w	8013214 <_rclc_take_new_data+0xec>
 8013394:	2701      	movs	r7, #1
 8013396:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013398:	84b7      	strh	r7, [r6, #36]	; 0x24
 801339a:	2b00      	cmp	r3, #0
 801339c:	f43f af3a 	beq.w	8013214 <_rclc_take_new_data+0xec>
 80133a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80133a2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80133a6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80133aa:	f009 f8f9 	bl	801c5a0 <rclc_action_find_goal_handle_by_uuid>
 80133ae:	b138      	cbz	r0, 80133c0 <_rclc_take_new_data+0x298>
 80133b0:	6860      	ldr	r0, [r4, #4]
 80133b2:	3501      	adds	r5, #1
 80133b4:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 80133b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80133ba:	42ab      	cmp	r3, r5
 80133bc:	d8f0      	bhi.n	80133a0 <_rclc_take_new_data+0x278>
 80133be:	e729      	b.n	8013214 <_rclc_take_new_data+0xec>
 80133c0:	6860      	ldr	r0, [r4, #4]
 80133c2:	3501      	adds	r5, #1
 80133c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80133c6:	42ab      	cmp	r3, r5
 80133c8:	d8ea      	bhi.n	80133a0 <_rclc_take_new_data+0x278>
 80133ca:	e723      	b.n	8013214 <_rclc_take_new_data+0xec>
 80133cc:	ab06      	add	r3, sp, #24
 80133ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80133d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80133d4:	2103      	movs	r1, #3
 80133d6:	6860      	ldr	r0, [r4, #4]
 80133d8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80133dc:	f009 f9a8 	bl	801c730 <rclc_action_server_goal_cancel_reject>
 80133e0:	e6c4      	b.n	801316c <_rclc_take_new_data+0x44>
 80133e2:	ab06      	add	r3, sp, #24
 80133e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80133e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80133ea:	2102      	movs	r1, #2
 80133ec:	6860      	ldr	r0, [r4, #4]
 80133ee:	e896 000c 	ldmia.w	r6, {r2, r3}
 80133f2:	f009 f99d 	bl	801c730 <rclc_action_server_goal_cancel_reject>
 80133f6:	e6b9      	b.n	801316c <_rclc_take_new_data+0x44>
 80133f8:	6860      	ldr	r0, [r4, #4]
 80133fa:	e706      	b.n	801320a <_rclc_take_new_data+0xe2>
 80133fc:	4631      	mov	r1, r6
 80133fe:	6860      	ldr	r0, [r4, #4]
 8013400:	f009 f8b8 	bl	801c574 <rclc_action_remove_used_goal_handle>
 8013404:	f000 fe58 	bl	80140b8 <rcutils_reset_error>
 8013408:	e6b0      	b.n	801316c <_rclc_take_new_data+0x44>
 801340a:	2501      	movs	r5, #1
 801340c:	e6ae      	b.n	801316c <_rclc_take_new_data+0x44>
 801340e:	bf00      	nop

08013410 <_rclc_execute.part.0>:
 8013410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013412:	7803      	ldrb	r3, [r0, #0]
 8013414:	b085      	sub	sp, #20
 8013416:	4604      	mov	r4, r0
 8013418:	2b0a      	cmp	r3, #10
 801341a:	f200 8139 	bhi.w	8013690 <_rclc_execute.part.0+0x280>
 801341e:	e8df f003 	tbb	[pc, r3]
 8013422:	4268      	.short	0x4268
 8013424:	06a75b4d 	.word	0x06a75b4d
 8013428:	721d0606 	.word	0x721d0606
 801342c:	62          	.byte	0x62
 801342d:	00          	.byte	0x00
 801342e:	2b06      	cmp	r3, #6
 8013430:	f000 8126 	beq.w	8013680 <_rclc_execute.part.0+0x270>
 8013434:	2b07      	cmp	r3, #7
 8013436:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013438:	f040 811c 	bne.w	8013674 <_rclc_execute.part.0+0x264>
 801343c:	f104 0510 	add.w	r5, r4, #16
 8013440:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8013444:	6880      	ldr	r0, [r0, #8]
 8013446:	4798      	blx	r3
 8013448:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801344a:	4629      	mov	r1, r5
 801344c:	6860      	ldr	r0, [r4, #4]
 801344e:	f7ff fcb3 	bl	8012db8 <rcl_send_response>
 8013452:	4604      	mov	r4, r0
 8013454:	b378      	cbz	r0, 80134b6 <_rclc_execute.part.0+0xa6>
 8013456:	f000 fe2f 	bl	80140b8 <rcutils_reset_error>
 801345a:	e02c      	b.n	80134b6 <_rclc_execute.part.0+0xa6>
 801345c:	6840      	ldr	r0, [r0, #4]
 801345e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8013462:	2b00      	cmp	r3, #0
 8013464:	f000 808e 	beq.w	8013584 <_rclc_execute.part.0+0x174>
 8013468:	2600      	movs	r6, #0
 801346a:	2701      	movs	r7, #1
 801346c:	e004      	b.n	8013478 <_rclc_execute.part.0+0x68>
 801346e:	f009 f84b 	bl	801c508 <rclc_action_send_result_request>
 8013472:	b998      	cbnz	r0, 801349c <_rclc_execute.part.0+0x8c>
 8013474:	722f      	strb	r7, [r5, #8]
 8013476:	6860      	ldr	r0, [r4, #4]
 8013478:	f009 f8f6 	bl	801c668 <rclc_action_find_first_handle_with_goal_response>
 801347c:	4605      	mov	r5, r0
 801347e:	2800      	cmp	r0, #0
 8013480:	d07f      	beq.n	8013582 <_rclc_execute.part.0+0x172>
 8013482:	6863      	ldr	r3, [r4, #4]
 8013484:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013486:	699b      	ldr	r3, [r3, #24]
 8013488:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 801348c:	f885 6020 	strb.w	r6, [r5, #32]
 8013490:	4798      	blx	r3
 8013492:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8013496:	4628      	mov	r0, r5
 8013498:	2b00      	cmp	r3, #0
 801349a:	d1e8      	bne.n	801346e <_rclc_execute.part.0+0x5e>
 801349c:	6860      	ldr	r0, [r4, #4]
 801349e:	4629      	mov	r1, r5
 80134a0:	f009 f868 	bl	801c574 <rclc_action_remove_used_goal_handle>
 80134a4:	e7e7      	b.n	8013476 <_rclc_execute.part.0+0x66>
 80134a6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80134aa:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 80134ae:	b100      	cbz	r0, 80134b2 <_rclc_execute.part.0+0xa2>
 80134b0:	68a0      	ldr	r0, [r4, #8]
 80134b2:	2400      	movs	r4, #0
 80134b4:	4798      	blx	r3
 80134b6:	4620      	mov	r0, r4
 80134b8:	b005      	add	sp, #20
 80134ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134bc:	6840      	ldr	r0, [r0, #4]
 80134be:	f007 fc7d 	bl	801adbc <rcl_timer_call>
 80134c2:	f240 3321 	movw	r3, #801	; 0x321
 80134c6:	4604      	mov	r4, r0
 80134c8:	4298      	cmp	r0, r3
 80134ca:	d001      	beq.n	80134d0 <_rclc_execute.part.0+0xc0>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	d1c2      	bne.n	8013456 <_rclc_execute.part.0+0x46>
 80134d0:	2400      	movs	r4, #0
 80134d2:	4620      	mov	r0, r4
 80134d4:	b005      	add	sp, #20
 80134d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134d8:	2400      	movs	r4, #0
 80134da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80134dc:	6880      	ldr	r0, [r0, #8]
 80134de:	4798      	blx	r3
 80134e0:	4620      	mov	r0, r4
 80134e2:	b005      	add	sp, #20
 80134e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134e6:	2400      	movs	r4, #0
 80134e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80134ea:	4798      	blx	r3
 80134ec:	4620      	mov	r0, r4
 80134ee:	b005      	add	sp, #20
 80134f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134f2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80134f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80134f8:	b100      	cbz	r0, 80134fc <_rclc_execute.part.0+0xec>
 80134fa:	68a0      	ldr	r0, [r4, #8]
 80134fc:	2400      	movs	r4, #0
 80134fe:	4798      	blx	r3
 8013500:	4620      	mov	r0, r4
 8013502:	b005      	add	sp, #20
 8013504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013506:	6840      	ldr	r0, [r0, #4]
 8013508:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801350c:	bb3b      	cbnz	r3, 801355e <_rclc_execute.part.0+0x14e>
 801350e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d07d      	beq.n	8013612 <_rclc_execute.part.0+0x202>
 8013516:	f640 0634 	movw	r6, #2100	; 0x834
 801351a:	2701      	movs	r7, #1
 801351c:	e007      	b.n	801352e <_rclc_execute.part.0+0x11e>
 801351e:	4628      	mov	r0, r5
 8013520:	f009 f8ba 	bl	801c698 <rclc_action_server_response_goal_request>
 8013524:	4629      	mov	r1, r5
 8013526:	6860      	ldr	r0, [r4, #4]
 8013528:	f009 f824 	bl	801c574 <rclc_action_remove_used_goal_handle>
 801352c:	6860      	ldr	r0, [r4, #4]
 801352e:	2100      	movs	r1, #0
 8013530:	f009 f84c 	bl	801c5cc <rclc_action_find_first_handle_by_status>
 8013534:	4605      	mov	r5, r0
 8013536:	2800      	cmp	r0, #0
 8013538:	d068      	beq.n	801360c <_rclc_execute.part.0+0x1fc>
 801353a:	6863      	ldr	r3, [r4, #4]
 801353c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801353e:	699b      	ldr	r3, [r3, #24]
 8013540:	4798      	blx	r3
 8013542:	42b0      	cmp	r0, r6
 8013544:	f04f 0100 	mov.w	r1, #0
 8013548:	d1e9      	bne.n	801351e <_rclc_execute.part.0+0x10e>
 801354a:	2101      	movs	r1, #1
 801354c:	4628      	mov	r0, r5
 801354e:	f009 f8a3 	bl	801c698 <rclc_action_server_response_goal_request>
 8013552:	722f      	strb	r7, [r5, #8]
 8013554:	e7ea      	b.n	801352c <_rclc_execute.part.0+0x11c>
 8013556:	6848      	ldr	r0, [r1, #4]
 8013558:	f009 f80c 	bl	801c574 <rclc_action_remove_used_goal_handle>
 801355c:	6860      	ldr	r0, [r4, #4]
 801355e:	f009 f841 	bl	801c5e4 <rclc_action_find_first_terminated_handle>
 8013562:	4601      	mov	r1, r0
 8013564:	2800      	cmp	r0, #0
 8013566:	d1f6      	bne.n	8013556 <_rclc_execute.part.0+0x146>
 8013568:	6860      	ldr	r0, [r4, #4]
 801356a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801356e:	e7ce      	b.n	801350e <_rclc_execute.part.0+0xfe>
 8013570:	2400      	movs	r4, #0
 8013572:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013574:	f100 0110 	add.w	r1, r0, #16
 8013578:	6880      	ldr	r0, [r0, #8]
 801357a:	4798      	blx	r3
 801357c:	4620      	mov	r0, r4
 801357e:	b005      	add	sp, #20
 8013580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013582:	6860      	ldr	r0, [r4, #4]
 8013584:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013588:	b18b      	cbz	r3, 80135ae <_rclc_execute.part.0+0x19e>
 801358a:	68c5      	ldr	r5, [r0, #12]
 801358c:	b32d      	cbz	r5, 80135da <_rclc_execute.part.0+0x1ca>
 801358e:	2600      	movs	r6, #0
 8013590:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8013594:	b143      	cbz	r3, 80135a8 <_rclc_execute.part.0+0x198>
 8013596:	69c3      	ldr	r3, [r0, #28]
 8013598:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 801359c:	b123      	cbz	r3, 80135a8 <_rclc_execute.part.0+0x198>
 801359e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80135a0:	4628      	mov	r0, r5
 80135a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80135a4:	4798      	blx	r3
 80135a6:	6860      	ldr	r0, [r4, #4]
 80135a8:	682d      	ldr	r5, [r5, #0]
 80135aa:	2d00      	cmp	r5, #0
 80135ac:	d1f0      	bne.n	8013590 <_rclc_execute.part.0+0x180>
 80135ae:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80135b2:	b193      	cbz	r3, 80135da <_rclc_execute.part.0+0x1ca>
 80135b4:	68c5      	ldr	r5, [r0, #12]
 80135b6:	b185      	cbz	r5, 80135da <_rclc_execute.part.0+0x1ca>
 80135b8:	2600      	movs	r6, #0
 80135ba:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80135be:	b14b      	cbz	r3, 80135d4 <_rclc_execute.part.0+0x1c4>
 80135c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80135c2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 80135c6:	b12b      	cbz	r3, 80135d4 <_rclc_execute.part.0+0x1c4>
 80135c8:	4628      	mov	r0, r5
 80135ca:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 80135ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80135d0:	4798      	blx	r3
 80135d2:	6860      	ldr	r0, [r4, #4]
 80135d4:	682d      	ldr	r5, [r5, #0]
 80135d6:	2d00      	cmp	r5, #0
 80135d8:	d1ef      	bne.n	80135ba <_rclc_execute.part.0+0x1aa>
 80135da:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80135de:	2b00      	cmp	r3, #0
 80135e0:	f43f af76 	beq.w	80134d0 <_rclc_execute.part.0+0xc0>
 80135e4:	2700      	movs	r7, #0
 80135e6:	e00b      	b.n	8013600 <_rclc_execute.part.0+0x1f0>
 80135e8:	6863      	ldr	r3, [r4, #4]
 80135ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80135ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80135ee:	6a1e      	ldr	r6, [r3, #32]
 80135f0:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 80135f4:	47b0      	blx	r6
 80135f6:	6860      	ldr	r0, [r4, #4]
 80135f8:	4629      	mov	r1, r5
 80135fa:	f008 ffbb 	bl	801c574 <rclc_action_remove_used_goal_handle>
 80135fe:	6860      	ldr	r0, [r4, #4]
 8013600:	f009 f83e 	bl	801c680 <rclc_action_find_first_handle_with_result_response>
 8013604:	4605      	mov	r5, r0
 8013606:	2800      	cmp	r0, #0
 8013608:	d1ee      	bne.n	80135e8 <_rclc_execute.part.0+0x1d8>
 801360a:	e761      	b.n	80134d0 <_rclc_execute.part.0+0xc0>
 801360c:	6860      	ldr	r0, [r4, #4]
 801360e:	f880 5020 	strb.w	r5, [r0, #32]
 8013612:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8013616:	2b00      	cmp	r3, #0
 8013618:	f43f af5a 	beq.w	80134d0 <_rclc_execute.part.0+0xc0>
 801361c:	68c5      	ldr	r5, [r0, #12]
 801361e:	b1b5      	cbz	r5, 801364e <_rclc_execute.part.0+0x23e>
 8013620:	2602      	movs	r6, #2
 8013622:	e001      	b.n	8013628 <_rclc_execute.part.0+0x218>
 8013624:	682d      	ldr	r5, [r5, #0]
 8013626:	b195      	cbz	r5, 801364e <_rclc_execute.part.0+0x23e>
 8013628:	f995 3008 	ldrsb.w	r3, [r5, #8]
 801362c:	2b03      	cmp	r3, #3
 801362e:	d1f9      	bne.n	8013624 <_rclc_execute.part.0+0x214>
 8013630:	69c3      	ldr	r3, [r0, #28]
 8013632:	4628      	mov	r0, r5
 8013634:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013636:	4798      	blx	r3
 8013638:	4603      	mov	r3, r0
 801363a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 801363e:	4628      	mov	r0, r5
 8013640:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8013644:	b143      	cbz	r3, 8013658 <_rclc_execute.part.0+0x248>
 8013646:	f009 f847 	bl	801c6d8 <rclc_action_server_goal_cancel_accept>
 801364a:	6860      	ldr	r0, [r4, #4]
 801364c:	e7ea      	b.n	8013624 <_rclc_execute.part.0+0x214>
 801364e:	2300      	movs	r3, #0
 8013650:	461c      	mov	r4, r3
 8013652:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8013656:	e72e      	b.n	80134b6 <_rclc_execute.part.0+0xa6>
 8013658:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801365a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 801365e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013662:	2101      	movs	r1, #1
 8013664:	6860      	ldr	r0, [r4, #4]
 8013666:	e9d7 2300 	ldrd	r2, r3, [r7]
 801366a:	f009 f861 	bl	801c730 <rclc_action_server_goal_cancel_reject>
 801366e:	722e      	strb	r6, [r5, #8]
 8013670:	6860      	ldr	r0, [r4, #4]
 8013672:	e7d7      	b.n	8013624 <_rclc_execute.part.0+0x214>
 8013674:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013676:	f104 0510 	add.w	r5, r4, #16
 801367a:	6880      	ldr	r0, [r0, #8]
 801367c:	4798      	blx	r3
 801367e:	e6e3      	b.n	8013448 <_rclc_execute.part.0+0x38>
 8013680:	f100 0510 	add.w	r5, r0, #16
 8013684:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013686:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013688:	4629      	mov	r1, r5
 801368a:	6880      	ldr	r0, [r0, #8]
 801368c:	4798      	blx	r3
 801368e:	e6db      	b.n	8013448 <_rclc_execute.part.0+0x38>
 8013690:	2401      	movs	r4, #1
 8013692:	e710      	b.n	80134b6 <_rclc_execute.part.0+0xa6>

08013694 <rclc_executor_trigger_any>:
 8013694:	2800      	cmp	r0, #0
 8013696:	d03d      	beq.n	8013714 <rclc_executor_trigger_any+0x80>
 8013698:	2900      	cmp	r1, #0
 801369a:	d03c      	beq.n	8013716 <rclc_executor_trigger_any+0x82>
 801369c:	4603      	mov	r3, r0
 801369e:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 80136a2:	2200      	movs	r2, #0
 80136a4:	2800      	cmp	r0, #0
 80136a6:	d035      	beq.n	8013714 <rclc_executor_trigger_any+0x80>
 80136a8:	b430      	push	{r4, r5}
 80136aa:	f893 c000 	ldrb.w	ip, [r3]
 80136ae:	f1bc 0f08 	cmp.w	ip, #8
 80136b2:	d11d      	bne.n	80136f0 <rclc_executor_trigger_any+0x5c>
 80136b4:	685c      	ldr	r4, [r3, #4]
 80136b6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80136b8:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80136bc:	d105      	bne.n	80136ca <rclc_executor_trigger_any+0x36>
 80136be:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80136c2:	b910      	cbnz	r0, 80136ca <rclc_executor_trigger_any+0x36>
 80136c4:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 80136c8:	b128      	cbz	r0, 80136d6 <rclc_executor_trigger_any+0x42>
 80136ca:	bc30      	pop	{r4, r5}
 80136cc:	4770      	bx	lr
 80136ce:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 80136d2:	2800      	cmp	r0, #0
 80136d4:	d1f9      	bne.n	80136ca <rclc_executor_trigger_any+0x36>
 80136d6:	3201      	adds	r2, #1
 80136d8:	3340      	adds	r3, #64	; 0x40
 80136da:	4291      	cmp	r1, r2
 80136dc:	d017      	beq.n	801370e <rclc_executor_trigger_any+0x7a>
 80136de:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 80136e2:	2800      	cmp	r0, #0
 80136e4:	d0f1      	beq.n	80136ca <rclc_executor_trigger_any+0x36>
 80136e6:	f893 c000 	ldrb.w	ip, [r3]
 80136ea:	f1bc 0f08 	cmp.w	ip, #8
 80136ee:	d0e1      	beq.n	80136b4 <rclc_executor_trigger_any+0x20>
 80136f0:	f1bc 0f09 	cmp.w	ip, #9
 80136f4:	d1eb      	bne.n	80136ce <rclc_executor_trigger_any+0x3a>
 80136f6:	685c      	ldr	r4, [r3, #4]
 80136f8:	6a25      	ldr	r5, [r4, #32]
 80136fa:	2d00      	cmp	r5, #0
 80136fc:	d1e5      	bne.n	80136ca <rclc_executor_trigger_any+0x36>
 80136fe:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8013702:	2800      	cmp	r0, #0
 8013704:	d1e1      	bne.n	80136ca <rclc_executor_trigger_any+0x36>
 8013706:	3201      	adds	r2, #1
 8013708:	3340      	adds	r3, #64	; 0x40
 801370a:	4291      	cmp	r1, r2
 801370c:	d1e7      	bne.n	80136de <rclc_executor_trigger_any+0x4a>
 801370e:	2000      	movs	r0, #0
 8013710:	bc30      	pop	{r4, r5}
 8013712:	4770      	bx	lr
 8013714:	4770      	bx	lr
 8013716:	4608      	mov	r0, r1
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop

0801371c <rclc_executor_get_zero_initialized_executor>:
 801371c:	b510      	push	{r4, lr}
 801371e:	4604      	mov	r4, r0
 8013720:	2288      	movs	r2, #136	; 0x88
 8013722:	4902      	ldr	r1, [pc, #8]	; (801372c <rclc_executor_get_zero_initialized_executor+0x10>)
 8013724:	f00c fbeb 	bl	801fefe <memcpy>
 8013728:	4620      	mov	r0, r4
 801372a:	bd10      	pop	{r4, pc}
 801372c:	08023ee8 	.word	0x08023ee8

08013730 <rclc_executor_init>:
 8013730:	2900      	cmp	r1, #0
 8013732:	d06a      	beq.n	801380a <rclc_executor_init+0xda>
 8013734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013738:	4605      	mov	r5, r0
 801373a:	b0b0      	sub	sp, #192	; 0xc0
 801373c:	2800      	cmp	r0, #0
 801373e:	d05c      	beq.n	80137fa <rclc_executor_init+0xca>
 8013740:	4616      	mov	r6, r2
 8013742:	4618      	mov	r0, r3
 8013744:	4688      	mov	r8, r1
 8013746:	461f      	mov	r7, r3
 8013748:	f000 fc78 	bl	801403c <rcutils_allocator_is_valid>
 801374c:	2e00      	cmp	r6, #0
 801374e:	d054      	beq.n	80137fa <rclc_executor_init+0xca>
 8013750:	f080 0401 	eor.w	r4, r0, #1
 8013754:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8013758:	d14f      	bne.n	80137fa <rclc_executor_init+0xca>
 801375a:	2288      	movs	r2, #136	; 0x88
 801375c:	4930      	ldr	r1, [pc, #192]	; (8013820 <rclc_executor_init+0xf0>)
 801375e:	a80e      	add	r0, sp, #56	; 0x38
 8013760:	f00c fbcd 	bl	801fefe <memcpy>
 8013764:	a90e      	add	r1, sp, #56	; 0x38
 8013766:	2288      	movs	r2, #136	; 0x88
 8013768:	4628      	mov	r0, r5
 801376a:	f00c fbc8 	bl	801fefe <memcpy>
 801376e:	4668      	mov	r0, sp
 8013770:	f8c5 8000 	str.w	r8, [r5]
 8013774:	60ae      	str	r6, [r5, #8]
 8013776:	f007 fc97 	bl	801b0a8 <rcl_get_zero_initialized_wait_set>
 801377a:	46ec      	mov	ip, sp
 801377c:	f105 0e14 	add.w	lr, r5, #20
 8013780:	f8d7 8000 	ldr.w	r8, [r7]
 8013784:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013788:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801378c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013790:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013794:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013798:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013818 <rclc_executor_init+0xe8>
 801379c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80137a0:	f8dc 3000 	ldr.w	r3, [ip]
 80137a4:	01b0      	lsls	r0, r6, #6
 80137a6:	6939      	ldr	r1, [r7, #16]
 80137a8:	f8ce 3000 	str.w	r3, [lr]
 80137ac:	612f      	str	r7, [r5, #16]
 80137ae:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 80137b2:	47c0      	blx	r8
 80137b4:	6068      	str	r0, [r5, #4]
 80137b6:	b908      	cbnz	r0, 80137bc <rclc_executor_init+0x8c>
 80137b8:	e029      	b.n	801380e <rclc_executor_init+0xde>
 80137ba:	6868      	ldr	r0, [r5, #4]
 80137bc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80137c0:	3401      	adds	r4, #1
 80137c2:	4631      	mov	r1, r6
 80137c4:	f000 fac0 	bl	8013d48 <rclc_executor_handle_init>
 80137c8:	42a6      	cmp	r6, r4
 80137ca:	d8f6      	bhi.n	80137ba <rclc_executor_init+0x8a>
 80137cc:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80137d0:	f000 faae 	bl	8013d30 <rclc_executor_handle_counters_zero_init>
 80137d4:	4a13      	ldr	r2, [pc, #76]	; (8013824 <rclc_executor_init+0xf4>)
 80137d6:	2300      	movs	r3, #0
 80137d8:	6868      	ldr	r0, [r5, #4]
 80137da:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 80137de:	b168      	cbz	r0, 80137fc <rclc_executor_init+0xcc>
 80137e0:	68ab      	ldr	r3, [r5, #8]
 80137e2:	b173      	cbz	r3, 8013802 <rclc_executor_init+0xd2>
 80137e4:	692a      	ldr	r2, [r5, #16]
 80137e6:	fab2 f382 	clz	r3, r2
 80137ea:	095b      	lsrs	r3, r3, #5
 80137ec:	b14a      	cbz	r2, 8013802 <rclc_executor_init+0xd2>
 80137ee:	4618      	mov	r0, r3
 80137f0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 80137f4:	b030      	add	sp, #192	; 0xc0
 80137f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fa:	200b      	movs	r0, #11
 80137fc:	b030      	add	sp, #192	; 0xc0
 80137fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013802:	2000      	movs	r0, #0
 8013804:	b030      	add	sp, #192	; 0xc0
 8013806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801380a:	200b      	movs	r0, #11
 801380c:	4770      	bx	lr
 801380e:	200a      	movs	r0, #10
 8013810:	e7f4      	b.n	80137fc <rclc_executor_init+0xcc>
 8013812:	bf00      	nop
 8013814:	f3af 8000 	nop.w
 8013818:	3b9aca00 	.word	0x3b9aca00
 801381c:	00000000 	.word	0x00000000
 8013820:	08023ee8 	.word	0x08023ee8
 8013824:	08013695 	.word	0x08013695

08013828 <rclc_executor_add_subscription>:
 8013828:	2b00      	cmp	r3, #0
 801382a:	bf18      	it	ne
 801382c:	2a00      	cmpne	r2, #0
 801382e:	b570      	push	{r4, r5, r6, lr}
 8013830:	4604      	mov	r4, r0
 8013832:	bf0c      	ite	eq
 8013834:	2001      	moveq	r0, #1
 8013836:	2000      	movne	r0, #0
 8013838:	f89d c010 	ldrb.w	ip, [sp, #16]
 801383c:	2900      	cmp	r1, #0
 801383e:	bf08      	it	eq
 8013840:	f040 0001 	orreq.w	r0, r0, #1
 8013844:	bb28      	cbnz	r0, 8013892 <rclc_executor_add_subscription+0x6a>
 8013846:	fab4 f584 	clz	r5, r4
 801384a:	096d      	lsrs	r5, r5, #5
 801384c:	b30c      	cbz	r4, 8013892 <rclc_executor_add_subscription+0x6a>
 801384e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8013852:	4286      	cmp	r6, r0
 8013854:	d301      	bcc.n	801385a <rclc_executor_add_subscription+0x32>
 8013856:	2001      	movs	r0, #1
 8013858:	bd70      	pop	{r4, r5, r6, pc}
 801385a:	6860      	ldr	r0, [r4, #4]
 801385c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8013860:	f800 500e 	strb.w	r5, [r0, lr]
 8013864:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8013868:	3601      	adds	r6, #1
 801386a:	6303      	str	r3, [r0, #48]	; 0x30
 801386c:	2301      	movs	r3, #1
 801386e:	62c5      	str	r5, [r0, #44]	; 0x2c
 8013870:	f104 0514 	add.w	r5, r4, #20
 8013874:	f880 c001 	strb.w	ip, [r0, #1]
 8013878:	8703      	strh	r3, [r0, #56]	; 0x38
 801387a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801387e:	4628      	mov	r0, r5
 8013880:	60e6      	str	r6, [r4, #12]
 8013882:	f007 fc25 	bl	801b0d0 <rcl_wait_set_is_valid>
 8013886:	b930      	cbnz	r0, 8013896 <rclc_executor_add_subscription+0x6e>
 8013888:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801388a:	2000      	movs	r0, #0
 801388c:	3301      	adds	r3, #1
 801388e:	64a3      	str	r3, [r4, #72]	; 0x48
 8013890:	bd70      	pop	{r4, r5, r6, pc}
 8013892:	200b      	movs	r0, #11
 8013894:	bd70      	pop	{r4, r5, r6, pc}
 8013896:	4628      	mov	r0, r5
 8013898:	f007 fc20 	bl	801b0dc <rcl_wait_set_fini>
 801389c:	2800      	cmp	r0, #0
 801389e:	d0f3      	beq.n	8013888 <rclc_executor_add_subscription+0x60>
 80138a0:	bd70      	pop	{r4, r5, r6, pc}
 80138a2:	bf00      	nop

080138a4 <rclc_executor_add_service>:
 80138a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138a6:	9d06      	ldr	r5, [sp, #24]
 80138a8:	4604      	mov	r4, r0
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	bf18      	it	ne
 80138ae:	2d00      	cmpne	r5, #0
 80138b0:	bf0c      	ite	eq
 80138b2:	2001      	moveq	r0, #1
 80138b4:	2000      	movne	r0, #0
 80138b6:	2a00      	cmp	r2, #0
 80138b8:	bf08      	it	eq
 80138ba:	f040 0001 	orreq.w	r0, r0, #1
 80138be:	2900      	cmp	r1, #0
 80138c0:	bf08      	it	eq
 80138c2:	f040 0001 	orreq.w	r0, r0, #1
 80138c6:	bb40      	cbnz	r0, 801391a <rclc_executor_add_service+0x76>
 80138c8:	fab4 f684 	clz	r6, r4
 80138cc:	0976      	lsrs	r6, r6, #5
 80138ce:	b324      	cbz	r4, 801391a <rclc_executor_add_service+0x76>
 80138d0:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 80138d4:	42b8      	cmp	r0, r7
 80138d6:	d301      	bcc.n	80138dc <rclc_executor_add_service+0x38>
 80138d8:	2001      	movs	r0, #1
 80138da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138dc:	6867      	ldr	r7, [r4, #4]
 80138de:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 80138e2:	f100 0c01 	add.w	ip, r0, #1
 80138e6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 80138ea:	6283      	str	r3, [r0, #40]	; 0x28
 80138ec:	2305      	movs	r3, #5
 80138ee:	6305      	str	r5, [r0, #48]	; 0x30
 80138f0:	f104 0514 	add.w	r5, r4, #20
 80138f4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80138f8:	f827 300e 	strh.w	r3, [r7, lr]
 80138fc:	2301      	movs	r3, #1
 80138fe:	62c6      	str	r6, [r0, #44]	; 0x2c
 8013900:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8013904:	4628      	mov	r0, r5
 8013906:	f8c4 c00c 	str.w	ip, [r4, #12]
 801390a:	f007 fbe1 	bl	801b0d0 <rcl_wait_set_is_valid>
 801390e:	b930      	cbnz	r0, 801391e <rclc_executor_add_service+0x7a>
 8013910:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013912:	2000      	movs	r0, #0
 8013914:	3301      	adds	r3, #1
 8013916:	6563      	str	r3, [r4, #84]	; 0x54
 8013918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801391a:	200b      	movs	r0, #11
 801391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801391e:	4628      	mov	r0, r5
 8013920:	f007 fbdc 	bl	801b0dc <rcl_wait_set_fini>
 8013924:	2800      	cmp	r0, #0
 8013926:	d0f3      	beq.n	8013910 <rclc_executor_add_service+0x6c>
 8013928:	e7d7      	b.n	80138da <rclc_executor_add_service+0x36>
 801392a:	bf00      	nop

0801392c <rclc_executor_prepare>:
 801392c:	2800      	cmp	r0, #0
 801392e:	d044      	beq.n	80139ba <rclc_executor_prepare+0x8e>
 8013930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013932:	f100 0514 	add.w	r5, r0, #20
 8013936:	b09b      	sub	sp, #108	; 0x6c
 8013938:	4604      	mov	r4, r0
 801393a:	4628      	mov	r0, r5
 801393c:	f007 fbc8 	bl	801b0d0 <rcl_wait_set_is_valid>
 8013940:	b110      	cbz	r0, 8013948 <rclc_executor_prepare+0x1c>
 8013942:	2000      	movs	r0, #0
 8013944:	b01b      	add	sp, #108	; 0x6c
 8013946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013948:	4628      	mov	r0, r5
 801394a:	f007 fbc7 	bl	801b0dc <rcl_wait_set_fini>
 801394e:	2800      	cmp	r0, #0
 8013950:	d130      	bne.n	80139b4 <rclc_executor_prepare+0x88>
 8013952:	a80c      	add	r0, sp, #48	; 0x30
 8013954:	ae04      	add	r6, sp, #16
 8013956:	f007 fba7 	bl	801b0a8 <rcl_get_zero_initialized_wait_set>
 801395a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801395e:	46ae      	mov	lr, r5
 8013960:	6927      	ldr	r7, [r4, #16]
 8013962:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013966:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801396a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801396e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013972:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013976:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801397a:	f8dc 3000 	ldr.w	r3, [ip]
 801397e:	f8ce 3000 	str.w	r3, [lr]
 8013982:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013984:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	4628      	mov	r0, r5
 801398a:	6822      	ldr	r2, [r4, #0]
 801398c:	6033      	str	r3, [r6, #0]
 801398e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013990:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8013992:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013996:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 801399a:	e9cd 2100 	strd	r2, r1, [sp]
 801399e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80139a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80139a2:	f007 fe9b 	bl	801b6dc <rcl_wait_set_init>
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d0cc      	beq.n	8013944 <rclc_executor_prepare+0x18>
 80139aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80139ac:	f000 fb84 	bl	80140b8 <rcutils_reset_error>
 80139b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80139b2:	e7c7      	b.n	8013944 <rclc_executor_prepare+0x18>
 80139b4:	f000 fb80 	bl	80140b8 <rcutils_reset_error>
 80139b8:	e7cb      	b.n	8013952 <rclc_executor_prepare+0x26>
 80139ba:	200b      	movs	r0, #11
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop

080139c0 <rclc_executor_spin_some.part.0>:
 80139c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c4:	4605      	mov	r5, r0
 80139c6:	4691      	mov	r9, r2
 80139c8:	4698      	mov	r8, r3
 80139ca:	f7ff ffaf 	bl	801392c <rclc_executor_prepare>
 80139ce:	f105 0614 	add.w	r6, r5, #20
 80139d2:	4630      	mov	r0, r6
 80139d4:	f007 fc4e 	bl	801b274 <rcl_wait_set_clear>
 80139d8:	4607      	mov	r7, r0
 80139da:	2800      	cmp	r0, #0
 80139dc:	f040 80a8 	bne.w	8013b30 <rclc_executor_spin_some.part.0+0x170>
 80139e0:	68ab      	ldr	r3, [r5, #8]
 80139e2:	b30b      	cbz	r3, 8013a28 <rclc_executor_spin_some.part.0+0x68>
 80139e4:	4604      	mov	r4, r0
 80139e6:	6869      	ldr	r1, [r5, #4]
 80139e8:	01a2      	lsls	r2, r4, #6
 80139ea:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80139ee:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 80139f2:	b1cb      	cbz	r3, 8013a28 <rclc_executor_spin_some.part.0+0x68>
 80139f4:	5c8b      	ldrb	r3, [r1, r2]
 80139f6:	2b0a      	cmp	r3, #10
 80139f8:	f200 80de 	bhi.w	8013bb8 <rclc_executor_spin_some.part.0+0x1f8>
 80139fc:	e8df f003 	tbb	[pc, r3]
 8013a00:	8da99d9d 	.word	0x8da99d9d
 8013a04:	0606068d 	.word	0x0606068d
 8013a08:	c1ce      	.short	0xc1ce
 8013a0a:	b5          	.byte	0xb5
 8013a0b:	00          	.byte	0x00
 8013a0c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013a10:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013a14:	4630      	mov	r0, r6
 8013a16:	f007 ff7d 	bl	801b914 <rcl_wait_set_add_service>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	f040 8087 	bne.w	8013b2e <rclc_executor_spin_some.part.0+0x16e>
 8013a20:	3401      	adds	r4, #1
 8013a22:	68ab      	ldr	r3, [r5, #8]
 8013a24:	429c      	cmp	r4, r3
 8013a26:	d3de      	bcc.n	80139e6 <rclc_executor_spin_some.part.0+0x26>
 8013a28:	4643      	mov	r3, r8
 8013a2a:	464a      	mov	r2, r9
 8013a2c:	4630      	mov	r0, r6
 8013a2e:	f007 ff9f 	bl	801b970 <rcl_wait>
 8013a32:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	f000 80c6 	beq.w	8013bc8 <rclc_executor_spin_some.part.0+0x208>
 8013a3c:	2b01      	cmp	r3, #1
 8013a3e:	f040 80bb 	bne.w	8013bb8 <rclc_executor_spin_some.part.0+0x1f8>
 8013a42:	68ab      	ldr	r3, [r5, #8]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f000 8159 	beq.w	8013cfc <rclc_executor_spin_some.part.0+0x33c>
 8013a4a:	2400      	movs	r4, #0
 8013a4c:	f240 1991 	movw	r9, #401	; 0x191
 8013a50:	46a0      	mov	r8, r4
 8013a52:	e00a      	b.n	8013a6a <rclc_executor_spin_some.part.0+0xaa>
 8013a54:	f7ff fb1a 	bl	801308c <_rclc_check_for_new_data>
 8013a58:	4604      	mov	r4, r0
 8013a5a:	b110      	cbz	r0, 8013a62 <rclc_executor_spin_some.part.0+0xa2>
 8013a5c:	4548      	cmp	r0, r9
 8013a5e:	f040 80b1 	bne.w	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013a62:	68ab      	ldr	r3, [r5, #8]
 8013a64:	4598      	cmp	r8, r3
 8013a66:	f080 8126 	bcs.w	8013cb6 <rclc_executor_spin_some.part.0+0x2f6>
 8013a6a:	686a      	ldr	r2, [r5, #4]
 8013a6c:	4631      	mov	r1, r6
 8013a6e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8013a72:	f108 0801 	add.w	r8, r8, #1
 8013a76:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8013a7a:	f1bc 0f00 	cmp.w	ip, #0
 8013a7e:	d1e9      	bne.n	8013a54 <rclc_executor_spin_some.part.0+0x94>
 8013a80:	4619      	mov	r1, r3
 8013a82:	4610      	mov	r0, r2
 8013a84:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8013a88:	4798      	blx	r3
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	f000 809a 	beq.w	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013a90:	68ab      	ldr	r3, [r5, #8]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	f000 8096 	beq.w	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013a98:	f04f 0800 	mov.w	r8, #0
 8013a9c:	f240 1991 	movw	r9, #401	; 0x191
 8013aa0:	e009      	b.n	8013ab6 <rclc_executor_spin_some.part.0+0xf6>
 8013aa2:	f7ff fb41 	bl	8013128 <_rclc_take_new_data>
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	b110      	cbz	r0, 8013ab0 <rclc_executor_spin_some.part.0+0xf0>
 8013aaa:	4548      	cmp	r0, r9
 8013aac:	f040 808a 	bne.w	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013ab0:	68ab      	ldr	r3, [r5, #8]
 8013ab2:	4598      	cmp	r8, r3
 8013ab4:	d209      	bcs.n	8013aca <rclc_executor_spin_some.part.0+0x10a>
 8013ab6:	6868      	ldr	r0, [r5, #4]
 8013ab8:	4631      	mov	r1, r6
 8013aba:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8013abe:	f108 0801 	add.w	r8, r8, #1
 8013ac2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8013ac6:	2a00      	cmp	r2, #0
 8013ac8:	d1eb      	bne.n	8013aa2 <rclc_executor_spin_some.part.0+0xe2>
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d07a      	beq.n	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013ace:	2600      	movs	r6, #0
 8013ad0:	e00e      	b.n	8013af0 <rclc_executor_spin_some.part.0+0x130>
 8013ad2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8013ad6:	2a08      	cmp	r2, #8
 8013ad8:	f000 80fc 	beq.w	8013cd4 <rclc_executor_spin_some.part.0+0x314>
 8013adc:	2a09      	cmp	r2, #9
 8013ade:	f000 80ee 	beq.w	8013cbe <rclc_executor_spin_some.part.0+0x2fe>
 8013ae2:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8013ae6:	b98a      	cbnz	r2, 8013b0c <rclc_executor_spin_some.part.0+0x14c>
 8013ae8:	3601      	adds	r6, #1
 8013aea:	429e      	cmp	r6, r3
 8013aec:	d267      	bcs.n	8013bbe <rclc_executor_spin_some.part.0+0x1fe>
 8013aee:	2400      	movs	r4, #0
 8013af0:	686a      	ldr	r2, [r5, #4]
 8013af2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8013af6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8013afa:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8013afe:	2900      	cmp	r1, #0
 8013b00:	d060      	beq.n	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013b02:	7841      	ldrb	r1, [r0, #1]
 8013b04:	2900      	cmp	r1, #0
 8013b06:	d0e4      	beq.n	8013ad2 <rclc_executor_spin_some.part.0+0x112>
 8013b08:	2901      	cmp	r1, #1
 8013b0a:	d1ed      	bne.n	8013ae8 <rclc_executor_spin_some.part.0+0x128>
 8013b0c:	f7ff fc80 	bl	8013410 <_rclc_execute.part.0>
 8013b10:	2800      	cmp	r0, #0
 8013b12:	f040 80b5 	bne.w	8013c80 <rclc_executor_spin_some.part.0+0x2c0>
 8013b16:	68ab      	ldr	r3, [r5, #8]
 8013b18:	e7e6      	b.n	8013ae8 <rclc_executor_spin_some.part.0+0x128>
 8013b1a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013b1e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013b22:	4630      	mov	r0, r6
 8013b24:	f007 feca 	bl	801b8bc <rcl_wait_set_add_client>
 8013b28:	2800      	cmp	r0, #0
 8013b2a:	f43f af79 	beq.w	8013a20 <rclc_executor_spin_some.part.0+0x60>
 8013b2e:	4607      	mov	r7, r0
 8013b30:	f000 fac2 	bl	80140b8 <rcutils_reset_error>
 8013b34:	4638      	mov	r0, r7
 8013b36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b3a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013b3e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013b42:	4630      	mov	r0, r6
 8013b44:	f007 fb6a 	bl	801b21c <rcl_wait_set_add_subscription>
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	f43f af69 	beq.w	8013a20 <rclc_executor_spin_some.part.0+0x60>
 8013b4e:	4607      	mov	r7, r0
 8013b50:	e7ee      	b.n	8013b30 <rclc_executor_spin_some.part.0+0x170>
 8013b52:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013b56:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013b5a:	4630      	mov	r0, r6
 8013b5c:	f007 fe7e 	bl	801b85c <rcl_wait_set_add_timer>
 8013b60:	2800      	cmp	r0, #0
 8013b62:	f43f af5d 	beq.w	8013a20 <rclc_executor_spin_some.part.0+0x60>
 8013b66:	4607      	mov	r7, r0
 8013b68:	e7e2      	b.n	8013b30 <rclc_executor_spin_some.part.0+0x170>
 8013b6a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013b6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013b72:	4630      	mov	r0, r6
 8013b74:	f007 fe46 	bl	801b804 <rcl_wait_set_add_guard_condition>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	f43f af51 	beq.w	8013a20 <rclc_executor_spin_some.part.0+0x60>
 8013b7e:	4607      	mov	r7, r0
 8013b80:	e7d6      	b.n	8013b30 <rclc_executor_spin_some.part.0+0x170>
 8013b82:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013b86:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	3110      	adds	r1, #16
 8013b8e:	f008 fbc3 	bl	801c318 <rcl_action_wait_set_add_action_server>
 8013b92:	2800      	cmp	r0, #0
 8013b94:	f43f af44 	beq.w	8013a20 <rclc_executor_spin_some.part.0+0x60>
 8013b98:	4607      	mov	r7, r0
 8013b9a:	e7c9      	b.n	8013b30 <rclc_executor_spin_some.part.0+0x170>
 8013b9c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	3110      	adds	r1, #16
 8013baa:	f008 f98d 	bl	801bec8 <rcl_action_wait_set_add_action_client>
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	f43f af36 	beq.w	8013a20 <rclc_executor_spin_some.part.0+0x60>
 8013bb4:	4607      	mov	r7, r0
 8013bb6:	e7bb      	b.n	8013b30 <rclc_executor_spin_some.part.0+0x170>
 8013bb8:	2701      	movs	r7, #1
 8013bba:	f000 fa7d 	bl	80140b8 <rcutils_reset_error>
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bc4:	4627      	mov	r7, r4
 8013bc6:	e7fa      	b.n	8013bbe <rclc_executor_spin_some.part.0+0x1fe>
 8013bc8:	68ab      	ldr	r3, [r5, #8]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	f000 8093 	beq.w	8013cf6 <rclc_executor_spin_some.part.0+0x336>
 8013bd0:	2400      	movs	r4, #0
 8013bd2:	f240 1991 	movw	r9, #401	; 0x191
 8013bd6:	46a0      	mov	r8, r4
 8013bd8:	e008      	b.n	8013bec <rclc_executor_spin_some.part.0+0x22c>
 8013bda:	f7ff fa57 	bl	801308c <_rclc_check_for_new_data>
 8013bde:	4604      	mov	r4, r0
 8013be0:	b108      	cbz	r0, 8013be6 <rclc_executor_spin_some.part.0+0x226>
 8013be2:	4548      	cmp	r0, r9
 8013be4:	d1ee      	bne.n	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013be6:	68ab      	ldr	r3, [r5, #8]
 8013be8:	4598      	cmp	r8, r3
 8013bea:	d266      	bcs.n	8013cba <rclc_executor_spin_some.part.0+0x2fa>
 8013bec:	686a      	ldr	r2, [r5, #4]
 8013bee:	4631      	mov	r1, r6
 8013bf0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8013bf4:	f108 0801 	add.w	r8, r8, #1
 8013bf8:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8013bfc:	f1bc 0f00 	cmp.w	ip, #0
 8013c00:	d1eb      	bne.n	8013bda <rclc_executor_spin_some.part.0+0x21a>
 8013c02:	4619      	mov	r1, r3
 8013c04:	4610      	mov	r0, r2
 8013c06:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8013c0a:	4798      	blx	r3
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d0d9      	beq.n	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013c10:	68ab      	ldr	r3, [r5, #8]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d0d6      	beq.n	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013c16:	f04f 0a00 	mov.w	sl, #0
 8013c1a:	f240 1891 	movw	r8, #401	; 0x191
 8013c1e:	f240 2959 	movw	r9, #601	; 0x259
 8013c22:	e00e      	b.n	8013c42 <rclc_executor_spin_some.part.0+0x282>
 8013c24:	f813 300b 	ldrb.w	r3, [r3, fp]
 8013c28:	2b08      	cmp	r3, #8
 8013c2a:	d034      	beq.n	8013c96 <rclc_executor_spin_some.part.0+0x2d6>
 8013c2c:	2b09      	cmp	r3, #9
 8013c2e:	d029      	beq.n	8013c84 <rclc_executor_spin_some.part.0+0x2c4>
 8013c30:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8013c34:	bb03      	cbnz	r3, 8013c78 <rclc_executor_spin_some.part.0+0x2b8>
 8013c36:	f10a 0a01 	add.w	sl, sl, #1
 8013c3a:	68ab      	ldr	r3, [r5, #8]
 8013c3c:	459a      	cmp	sl, r3
 8013c3e:	d2be      	bcs.n	8013bbe <rclc_executor_spin_some.part.0+0x1fe>
 8013c40:	2400      	movs	r4, #0
 8013c42:	6868      	ldr	r0, [r5, #4]
 8013c44:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8013c48:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8013c4c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d0b7      	beq.n	8013bc4 <rclc_executor_spin_some.part.0+0x204>
 8013c54:	4631      	mov	r1, r6
 8013c56:	f7ff fa67 	bl	8013128 <_rclc_take_new_data>
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	bf18      	it	ne
 8013c5e:	4540      	cmpne	r0, r8
 8013c60:	d001      	beq.n	8013c66 <rclc_executor_spin_some.part.0+0x2a6>
 8013c62:	4548      	cmp	r0, r9
 8013c64:	d10c      	bne.n	8013c80 <rclc_executor_spin_some.part.0+0x2c0>
 8013c66:	686b      	ldr	r3, [r5, #4]
 8013c68:	eb13 000b 	adds.w	r0, r3, fp
 8013c6c:	d021      	beq.n	8013cb2 <rclc_executor_spin_some.part.0+0x2f2>
 8013c6e:	7842      	ldrb	r2, [r0, #1]
 8013c70:	2a00      	cmp	r2, #0
 8013c72:	d0d7      	beq.n	8013c24 <rclc_executor_spin_some.part.0+0x264>
 8013c74:	2a01      	cmp	r2, #1
 8013c76:	d1de      	bne.n	8013c36 <rclc_executor_spin_some.part.0+0x276>
 8013c78:	f7ff fbca 	bl	8013410 <_rclc_execute.part.0>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d0da      	beq.n	8013c36 <rclc_executor_spin_some.part.0+0x276>
 8013c80:	4607      	mov	r7, r0
 8013c82:	e79c      	b.n	8013bbe <rclc_executor_spin_some.part.0+0x1fe>
 8013c84:	6843      	ldr	r3, [r0, #4]
 8013c86:	6a1a      	ldr	r2, [r3, #32]
 8013c88:	2a00      	cmp	r2, #0
 8013c8a:	d1f5      	bne.n	8013c78 <rclc_executor_spin_some.part.0+0x2b8>
 8013c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d0d0      	beq.n	8013c36 <rclc_executor_spin_some.part.0+0x276>
 8013c94:	e7f0      	b.n	8013c78 <rclc_executor_spin_some.part.0+0x2b8>
 8013c96:	6843      	ldr	r3, [r0, #4]
 8013c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c9a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8013c9e:	d1eb      	bne.n	8013c78 <rclc_executor_spin_some.part.0+0x2b8>
 8013ca0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013ca4:	2a00      	cmp	r2, #0
 8013ca6:	d1e7      	bne.n	8013c78 <rclc_executor_spin_some.part.0+0x2b8>
 8013ca8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d0c2      	beq.n	8013c36 <rclc_executor_spin_some.part.0+0x276>
 8013cb0:	e7e2      	b.n	8013c78 <rclc_executor_spin_some.part.0+0x2b8>
 8013cb2:	270b      	movs	r7, #11
 8013cb4:	e783      	b.n	8013bbe <rclc_executor_spin_some.part.0+0x1fe>
 8013cb6:	686a      	ldr	r2, [r5, #4]
 8013cb8:	e6e2      	b.n	8013a80 <rclc_executor_spin_some.part.0+0xc0>
 8013cba:	686a      	ldr	r2, [r5, #4]
 8013cbc:	e7a1      	b.n	8013c02 <rclc_executor_spin_some.part.0+0x242>
 8013cbe:	6842      	ldr	r2, [r0, #4]
 8013cc0:	6a11      	ldr	r1, [r2, #32]
 8013cc2:	2900      	cmp	r1, #0
 8013cc4:	f47f af22 	bne.w	8013b0c <rclc_executor_spin_some.part.0+0x14c>
 8013cc8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8013ccc:	2a00      	cmp	r2, #0
 8013cce:	f43f af0b 	beq.w	8013ae8 <rclc_executor_spin_some.part.0+0x128>
 8013cd2:	e71b      	b.n	8013b0c <rclc_executor_spin_some.part.0+0x14c>
 8013cd4:	6842      	ldr	r2, [r0, #4]
 8013cd6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8013cd8:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8013cdc:	f47f af16 	bne.w	8013b0c <rclc_executor_spin_some.part.0+0x14c>
 8013ce0:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8013ce4:	2900      	cmp	r1, #0
 8013ce6:	f47f af11 	bne.w	8013b0c <rclc_executor_spin_some.part.0+0x14c>
 8013cea:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8013cee:	2a00      	cmp	r2, #0
 8013cf0:	f43f aefa 	beq.w	8013ae8 <rclc_executor_spin_some.part.0+0x128>
 8013cf4:	e70a      	b.n	8013b0c <rclc_executor_spin_some.part.0+0x14c>
 8013cf6:	686a      	ldr	r2, [r5, #4]
 8013cf8:	461c      	mov	r4, r3
 8013cfa:	e782      	b.n	8013c02 <rclc_executor_spin_some.part.0+0x242>
 8013cfc:	686a      	ldr	r2, [r5, #4]
 8013cfe:	461c      	mov	r4, r3
 8013d00:	e6be      	b.n	8013a80 <rclc_executor_spin_some.part.0+0xc0>
 8013d02:	bf00      	nop

08013d04 <rclc_executor_spin_some>:
 8013d04:	b190      	cbz	r0, 8013d2c <rclc_executor_spin_some+0x28>
 8013d06:	b570      	push	{r4, r5, r6, lr}
 8013d08:	4604      	mov	r4, r0
 8013d0a:	6800      	ldr	r0, [r0, #0]
 8013d0c:	4616      	mov	r6, r2
 8013d0e:	461d      	mov	r5, r3
 8013d10:	f006 fb96 	bl	801a440 <rcl_context_is_valid>
 8013d14:	b130      	cbz	r0, 8013d24 <rclc_executor_spin_some+0x20>
 8013d16:	4632      	mov	r2, r6
 8013d18:	462b      	mov	r3, r5
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d20:	f7ff be4e 	b.w	80139c0 <rclc_executor_spin_some.part.0>
 8013d24:	f000 f9c8 	bl	80140b8 <rcutils_reset_error>
 8013d28:	2001      	movs	r0, #1
 8013d2a:	bd70      	pop	{r4, r5, r6, pc}
 8013d2c:	200b      	movs	r0, #11
 8013d2e:	4770      	bx	lr

08013d30 <rclc_executor_handle_counters_zero_init>:
 8013d30:	b130      	cbz	r0, 8013d40 <rclc_executor_handle_counters_zero_init+0x10>
 8013d32:	2220      	movs	r2, #32
 8013d34:	2100      	movs	r1, #0
 8013d36:	b508      	push	{r3, lr}
 8013d38:	f00c f814 	bl	801fd64 <memset>
 8013d3c:	2000      	movs	r0, #0
 8013d3e:	bd08      	pop	{r3, pc}
 8013d40:	200b      	movs	r0, #11
 8013d42:	4770      	bx	lr
 8013d44:	0000      	movs	r0, r0
	...

08013d48 <rclc_executor_handle_init>:
 8013d48:	4603      	mov	r3, r0
 8013d4a:	b178      	cbz	r0, 8013d6c <rclc_executor_handle_init+0x24>
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	f04f 0c0b 	mov.w	ip, #11
 8013d52:	6341      	str	r1, [r0, #52]	; 0x34
 8013d54:	4610      	mov	r0, r2
 8013d56:	f8a3 c000 	strh.w	ip, [r3]
 8013d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8013d5c:	871a      	strh	r2, [r3, #56]	; 0x38
 8013d5e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8013d70 <rclc_executor_handle_init+0x28>
 8013d62:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8013d66:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8013d6a:	4770      	bx	lr
 8013d6c:	200b      	movs	r0, #11
 8013d6e:	4770      	bx	lr
	...

08013d78 <rclc_support_init_with_options>:
 8013d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d7c:	b083      	sub	sp, #12
 8013d7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	bf18      	it	ne
 8013d84:	2f00      	cmpne	r7, #0
 8013d86:	d027      	beq.n	8013dd8 <rclc_support_init_with_options+0x60>
 8013d88:	4604      	mov	r4, r0
 8013d8a:	b328      	cbz	r0, 8013dd8 <rclc_support_init_with_options+0x60>
 8013d8c:	46e9      	mov	r9, sp
 8013d8e:	461d      	mov	r5, r3
 8013d90:	460e      	mov	r6, r1
 8013d92:	4690      	mov	r8, r2
 8013d94:	4648      	mov	r0, r9
 8013d96:	f006 fb49 	bl	801a42c <rcl_get_zero_initialized_context>
 8013d9a:	462a      	mov	r2, r5
 8013d9c:	4623      	mov	r3, r4
 8013d9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013da2:	e884 0003 	stmia.w	r4, {r0, r1}
 8013da6:	4641      	mov	r1, r8
 8013da8:	4630      	mov	r0, r6
 8013daa:	f006 fc5d 	bl	801a668 <rcl_init>
 8013dae:	4605      	mov	r5, r0
 8013db0:	b960      	cbnz	r0, 8013dcc <rclc_support_init_with_options+0x54>
 8013db2:	463a      	mov	r2, r7
 8013db4:	f104 010c 	add.w	r1, r4, #12
 8013db8:	2003      	movs	r0, #3
 8013dba:	60a7      	str	r7, [r4, #8]
 8013dbc:	f006 ff6a 	bl	801ac94 <rcl_clock_init>
 8013dc0:	4605      	mov	r5, r0
 8013dc2:	b918      	cbnz	r0, 8013dcc <rclc_support_init_with_options+0x54>
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	b003      	add	sp, #12
 8013dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dcc:	f000 f974 	bl	80140b8 <rcutils_reset_error>
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	b003      	add	sp, #12
 8013dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dd8:	250b      	movs	r5, #11
 8013dda:	4628      	mov	r0, r5
 8013ddc:	b003      	add	sp, #12
 8013dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013de2:	bf00      	nop

08013de4 <rclc_node_init_with_options>:
 8013de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013de8:	b087      	sub	sp, #28
 8013dea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013dec:	2e00      	cmp	r6, #0
 8013dee:	bf18      	it	ne
 8013df0:	2b00      	cmpne	r3, #0
 8013df2:	bf0c      	ite	eq
 8013df4:	f04f 0c01 	moveq.w	ip, #1
 8013df8:	f04f 0c00 	movne.w	ip, #0
 8013dfc:	2a00      	cmp	r2, #0
 8013dfe:	bf08      	it	eq
 8013e00:	f04c 0c01 	orreq.w	ip, ip, #1
 8013e04:	2900      	cmp	r1, #0
 8013e06:	bf08      	it	eq
 8013e08:	f04c 0c01 	orreq.w	ip, ip, #1
 8013e0c:	f1bc 0f00 	cmp.w	ip, #0
 8013e10:	d118      	bne.n	8013e44 <rclc_node_init_with_options+0x60>
 8013e12:	4604      	mov	r4, r0
 8013e14:	b1b0      	cbz	r0, 8013e44 <rclc_node_init_with_options+0x60>
 8013e16:	f10d 0910 	add.w	r9, sp, #16
 8013e1a:	460d      	mov	r5, r1
 8013e1c:	4698      	mov	r8, r3
 8013e1e:	4617      	mov	r7, r2
 8013e20:	4648      	mov	r0, r9
 8013e22:	f7fe fc09 	bl	8012638 <rcl_get_zero_initialized_node>
 8013e26:	9600      	str	r6, [sp, #0]
 8013e28:	4643      	mov	r3, r8
 8013e2a:	463a      	mov	r2, r7
 8013e2c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013e30:	e884 0003 	stmia.w	r4, {r0, r1}
 8013e34:	4629      	mov	r1, r5
 8013e36:	4620      	mov	r0, r4
 8013e38:	f7fe fc08 	bl	801264c <rcl_node_init>
 8013e3c:	b930      	cbnz	r0, 8013e4c <rclc_node_init_with_options+0x68>
 8013e3e:	b007      	add	sp, #28
 8013e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e44:	200b      	movs	r0, #11
 8013e46:	b007      	add	sp, #28
 8013e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e4c:	9003      	str	r0, [sp, #12]
 8013e4e:	f000 f933 	bl	80140b8 <rcutils_reset_error>
 8013e52:	9803      	ldr	r0, [sp, #12]
 8013e54:	b007      	add	sp, #28
 8013e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e5a:	bf00      	nop

08013e5c <rclc_publisher_init_default>:
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	bf18      	it	ne
 8013e60:	2a00      	cmpne	r2, #0
 8013e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e66:	4616      	mov	r6, r2
 8013e68:	bf0c      	ite	eq
 8013e6a:	2201      	moveq	r2, #1
 8013e6c:	2200      	movne	r2, #0
 8013e6e:	b0a0      	sub	sp, #128	; 0x80
 8013e70:	2900      	cmp	r1, #0
 8013e72:	bf08      	it	eq
 8013e74:	f042 0201 	orreq.w	r2, r2, #1
 8013e78:	bb1a      	cbnz	r2, 8013ec2 <rclc_publisher_init_default+0x66>
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	b308      	cbz	r0, 8013ec2 <rclc_publisher_init_default+0x66>
 8013e7e:	f10d 0810 	add.w	r8, sp, #16
 8013e82:	461f      	mov	r7, r3
 8013e84:	460d      	mov	r5, r1
 8013e86:	f7fe fd81 	bl	801298c <rcl_get_zero_initialized_publisher>
 8013e8a:	6020      	str	r0, [r4, #0]
 8013e8c:	4640      	mov	r0, r8
 8013e8e:	f7fe fe1d 	bl	8012acc <rcl_publisher_get_default_options>
 8013e92:	2250      	movs	r2, #80	; 0x50
 8013e94:	490d      	ldr	r1, [pc, #52]	; (8013ecc <rclc_publisher_init_default+0x70>)
 8013e96:	4640      	mov	r0, r8
 8013e98:	f00c f831 	bl	801fefe <memcpy>
 8013e9c:	463b      	mov	r3, r7
 8013e9e:	4632      	mov	r2, r6
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	f8cd 8000 	str.w	r8, [sp]
 8013ea8:	f7fe fd76 	bl	8012998 <rcl_publisher_init>
 8013eac:	b910      	cbnz	r0, 8013eb4 <rclc_publisher_init_default+0x58>
 8013eae:	b020      	add	sp, #128	; 0x80
 8013eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb4:	9003      	str	r0, [sp, #12]
 8013eb6:	f000 f8ff 	bl	80140b8 <rcutils_reset_error>
 8013eba:	9803      	ldr	r0, [sp, #12]
 8013ebc:	b020      	add	sp, #128	; 0x80
 8013ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ec2:	200b      	movs	r0, #11
 8013ec4:	b020      	add	sp, #128	; 0x80
 8013ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eca:	bf00      	nop
 8013ecc:	08023f70 	.word	0x08023f70

08013ed0 <rclc_service_init_default>:
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	bf18      	it	ne
 8013ed4:	2a00      	cmpne	r2, #0
 8013ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eda:	4616      	mov	r6, r2
 8013edc:	bf0c      	ite	eq
 8013ede:	2201      	moveq	r2, #1
 8013ee0:	2200      	movne	r2, #0
 8013ee2:	b09e      	sub	sp, #120	; 0x78
 8013ee4:	2900      	cmp	r1, #0
 8013ee6:	bf08      	it	eq
 8013ee8:	f042 0201 	orreq.w	r2, r2, #1
 8013eec:	bb1a      	cbnz	r2, 8013f36 <rclc_service_init_default+0x66>
 8013eee:	4604      	mov	r4, r0
 8013ef0:	b308      	cbz	r0, 8013f36 <rclc_service_init_default+0x66>
 8013ef2:	f10d 0810 	add.w	r8, sp, #16
 8013ef6:	461f      	mov	r7, r3
 8013ef8:	460d      	mov	r5, r1
 8013efa:	f7fe fe5b 	bl	8012bb4 <rcl_get_zero_initialized_service>
 8013efe:	6020      	str	r0, [r4, #0]
 8013f00:	4640      	mov	r0, r8
 8013f02:	f7fe feef 	bl	8012ce4 <rcl_service_get_default_options>
 8013f06:	2250      	movs	r2, #80	; 0x50
 8013f08:	490d      	ldr	r1, [pc, #52]	; (8013f40 <rclc_service_init_default+0x70>)
 8013f0a:	4640      	mov	r0, r8
 8013f0c:	f00b fff7 	bl	801fefe <memcpy>
 8013f10:	463b      	mov	r3, r7
 8013f12:	4632      	mov	r2, r6
 8013f14:	4629      	mov	r1, r5
 8013f16:	4620      	mov	r0, r4
 8013f18:	f8cd 8000 	str.w	r8, [sp]
 8013f1c:	f7fe fe50 	bl	8012bc0 <rcl_service_init>
 8013f20:	b910      	cbnz	r0, 8013f28 <rclc_service_init_default+0x58>
 8013f22:	b01e      	add	sp, #120	; 0x78
 8013f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f28:	9003      	str	r0, [sp, #12]
 8013f2a:	f000 f8c5 	bl	80140b8 <rcutils_reset_error>
 8013f2e:	9803      	ldr	r0, [sp, #12]
 8013f30:	b01e      	add	sp, #120	; 0x78
 8013f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f36:	200b      	movs	r0, #11
 8013f38:	b01e      	add	sp, #120	; 0x78
 8013f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f3e:	bf00      	nop
 8013f40:	08023fc0 	.word	0x08023fc0

08013f44 <rclc_subscription_init_default>:
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	bf18      	it	ne
 8013f48:	2a00      	cmpne	r2, #0
 8013f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f4e:	4616      	mov	r6, r2
 8013f50:	bf0c      	ite	eq
 8013f52:	2201      	moveq	r2, #1
 8013f54:	2200      	movne	r2, #0
 8013f56:	b0a0      	sub	sp, #128	; 0x80
 8013f58:	2900      	cmp	r1, #0
 8013f5a:	bf08      	it	eq
 8013f5c:	f042 0201 	orreq.w	r2, r2, #1
 8013f60:	bb1a      	cbnz	r2, 8013faa <rclc_subscription_init_default+0x66>
 8013f62:	4604      	mov	r4, r0
 8013f64:	b308      	cbz	r0, 8013faa <rclc_subscription_init_default+0x66>
 8013f66:	f10d 0810 	add.w	r8, sp, #16
 8013f6a:	461f      	mov	r7, r3
 8013f6c:	460d      	mov	r5, r1
 8013f6e:	f7fe ff45 	bl	8012dfc <rcl_get_zero_initialized_subscription>
 8013f72:	6020      	str	r0, [r4, #0]
 8013f74:	4640      	mov	r0, r8
 8013f76:	f7fe fff5 	bl	8012f64 <rcl_subscription_get_default_options>
 8013f7a:	2250      	movs	r2, #80	; 0x50
 8013f7c:	490d      	ldr	r1, [pc, #52]	; (8013fb4 <rclc_subscription_init_default+0x70>)
 8013f7e:	4640      	mov	r0, r8
 8013f80:	f00b ffbd 	bl	801fefe <memcpy>
 8013f84:	463b      	mov	r3, r7
 8013f86:	4632      	mov	r2, r6
 8013f88:	4629      	mov	r1, r5
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f8cd 8000 	str.w	r8, [sp]
 8013f90:	f7fe ff3a 	bl	8012e08 <rcl_subscription_init>
 8013f94:	b910      	cbnz	r0, 8013f9c <rclc_subscription_init_default+0x58>
 8013f96:	b020      	add	sp, #128	; 0x80
 8013f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f9c:	9003      	str	r0, [sp, #12]
 8013f9e:	f000 f88b 	bl	80140b8 <rcutils_reset_error>
 8013fa2:	9803      	ldr	r0, [sp, #12]
 8013fa4:	b020      	add	sp, #128	; 0x80
 8013fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013faa:	200b      	movs	r0, #11
 8013fac:	b020      	add	sp, #128	; 0x80
 8013fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb2:	bf00      	nop
 8013fb4:	08024010 	.word	0x08024010

08013fb8 <__default_zero_allocate>:
 8013fb8:	f00a ba78 	b.w	801e4ac <calloc>

08013fbc <__default_reallocate>:
 8013fbc:	f00a bc16 	b.w	801e7ec <realloc>

08013fc0 <__default_deallocate>:
 8013fc0:	f00a baf4 	b.w	801e5ac <free>

08013fc4 <__default_allocate>:
 8013fc4:	f00a baea 	b.w	801e59c <malloc>

08013fc8 <rcutils_get_zero_initialized_allocator>:
 8013fc8:	b510      	push	{r4, lr}
 8013fca:	4c05      	ldr	r4, [pc, #20]	; (8013fe0 <rcutils_get_zero_initialized_allocator+0x18>)
 8013fcc:	4686      	mov	lr, r0
 8013fce:	4684      	mov	ip, r0
 8013fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fd6:	6823      	ldr	r3, [r4, #0]
 8013fd8:	4670      	mov	r0, lr
 8013fda:	f8cc 3000 	str.w	r3, [ip]
 8013fde:	bd10      	pop	{r4, pc}
 8013fe0:	08024060 	.word	0x08024060

08013fe4 <rcutils_set_default_allocator>:
 8013fe4:	b1a8      	cbz	r0, 8014012 <rcutils_set_default_allocator+0x2e>
 8013fe6:	6802      	ldr	r2, [r0, #0]
 8013fe8:	b1a2      	cbz	r2, 8014014 <rcutils_set_default_allocator+0x30>
 8013fea:	6841      	ldr	r1, [r0, #4]
 8013fec:	b1a1      	cbz	r1, 8014018 <rcutils_set_default_allocator+0x34>
 8013fee:	b410      	push	{r4}
 8013ff0:	68c4      	ldr	r4, [r0, #12]
 8013ff2:	b164      	cbz	r4, 801400e <rcutils_set_default_allocator+0x2a>
 8013ff4:	6880      	ldr	r0, [r0, #8]
 8013ff6:	b138      	cbz	r0, 8014008 <rcutils_set_default_allocator+0x24>
 8013ff8:	4b08      	ldr	r3, [pc, #32]	; (801401c <rcutils_set_default_allocator+0x38>)
 8013ffa:	601a      	str	r2, [r3, #0]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8014002:	2001      	movs	r0, #1
 8014004:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8014008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801400c:	4770      	bx	lr
 801400e:	4620      	mov	r0, r4
 8014010:	e7fa      	b.n	8014008 <rcutils_set_default_allocator+0x24>
 8014012:	4770      	bx	lr
 8014014:	4610      	mov	r0, r2
 8014016:	4770      	bx	lr
 8014018:	4608      	mov	r0, r1
 801401a:	4770      	bx	lr
 801401c:	200008a8 	.word	0x200008a8

08014020 <rcutils_get_default_allocator>:
 8014020:	b510      	push	{r4, lr}
 8014022:	4c05      	ldr	r4, [pc, #20]	; (8014038 <rcutils_get_default_allocator+0x18>)
 8014024:	4686      	mov	lr, r0
 8014026:	4684      	mov	ip, r0
 8014028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801402a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801402e:	6823      	ldr	r3, [r4, #0]
 8014030:	4670      	mov	r0, lr
 8014032:	f8cc 3000 	str.w	r3, [ip]
 8014036:	bd10      	pop	{r4, pc}
 8014038:	200008a8 	.word	0x200008a8

0801403c <rcutils_allocator_is_valid>:
 801403c:	b158      	cbz	r0, 8014056 <rcutils_allocator_is_valid+0x1a>
 801403e:	6803      	ldr	r3, [r0, #0]
 8014040:	b143      	cbz	r3, 8014054 <rcutils_allocator_is_valid+0x18>
 8014042:	6843      	ldr	r3, [r0, #4]
 8014044:	b133      	cbz	r3, 8014054 <rcutils_allocator_is_valid+0x18>
 8014046:	68c3      	ldr	r3, [r0, #12]
 8014048:	b123      	cbz	r3, 8014054 <rcutils_allocator_is_valid+0x18>
 801404a:	6880      	ldr	r0, [r0, #8]
 801404c:	3800      	subs	r0, #0
 801404e:	bf18      	it	ne
 8014050:	2001      	movne	r0, #1
 8014052:	4770      	bx	lr
 8014054:	4618      	mov	r0, r3
 8014056:	4770      	bx	lr

08014058 <rcutils_get_env>:
 8014058:	b168      	cbz	r0, 8014076 <rcutils_get_env+0x1e>
 801405a:	b510      	push	{r4, lr}
 801405c:	460c      	mov	r4, r1
 801405e:	b129      	cbz	r1, 801406c <rcutils_get_env+0x14>
 8014060:	f00a fa54 	bl	801e50c <getenv>
 8014064:	b120      	cbz	r0, 8014070 <rcutils_get_env+0x18>
 8014066:	6020      	str	r0, [r4, #0]
 8014068:	2000      	movs	r0, #0
 801406a:	bd10      	pop	{r4, pc}
 801406c:	4803      	ldr	r0, [pc, #12]	; (801407c <rcutils_get_env+0x24>)
 801406e:	bd10      	pop	{r4, pc}
 8014070:	4b03      	ldr	r3, [pc, #12]	; (8014080 <rcutils_get_env+0x28>)
 8014072:	6023      	str	r3, [r4, #0]
 8014074:	bd10      	pop	{r4, pc}
 8014076:	4803      	ldr	r0, [pc, #12]	; (8014084 <rcutils_get_env+0x2c>)
 8014078:	4770      	bx	lr
 801407a:	bf00      	nop
 801407c:	08024090 	.word	0x08024090
 8014080:	08024448 	.word	0x08024448
 8014084:	08024074 	.word	0x08024074

08014088 <rcutils_get_error_string>:
 8014088:	4b06      	ldr	r3, [pc, #24]	; (80140a4 <rcutils_get_error_string+0x1c>)
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	b13b      	cbz	r3, 801409e <rcutils_get_error_string+0x16>
 801408e:	4b06      	ldr	r3, [pc, #24]	; (80140a8 <rcutils_get_error_string+0x20>)
 8014090:	781a      	ldrb	r2, [r3, #0]
 8014092:	b90a      	cbnz	r2, 8014098 <rcutils_get_error_string+0x10>
 8014094:	2201      	movs	r2, #1
 8014096:	701a      	strb	r2, [r3, #0]
 8014098:	4b04      	ldr	r3, [pc, #16]	; (80140ac <rcutils_get_error_string+0x24>)
 801409a:	7818      	ldrb	r0, [r3, #0]
 801409c:	4770      	bx	lr
 801409e:	4b04      	ldr	r3, [pc, #16]	; (80140b0 <rcutils_get_error_string+0x28>)
 80140a0:	7818      	ldrb	r0, [r3, #0]
 80140a2:	4770      	bx	lr
 80140a4:	20012348 	.word	0x20012348
 80140a8:	20012361 	.word	0x20012361
 80140ac:	20012360 	.word	0x20012360
 80140b0:	08023720 	.word	0x08023720
 80140b4:	00000000 	.word	0x00000000

080140b8 <rcutils_reset_error>:
 80140b8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80140d8 <rcutils_reset_error+0x20>
 80140bc:	2300      	movs	r3, #0
 80140be:	4a08      	ldr	r2, [pc, #32]	; (80140e0 <rcutils_reset_error+0x28>)
 80140c0:	4808      	ldr	r0, [pc, #32]	; (80140e4 <rcutils_reset_error+0x2c>)
 80140c2:	8013      	strh	r3, [r2, #0]
 80140c4:	4908      	ldr	r1, [pc, #32]	; (80140e8 <rcutils_reset_error+0x30>)
 80140c6:	7003      	strb	r3, [r0, #0]
 80140c8:	700b      	strb	r3, [r1, #0]
 80140ca:	ed82 7b02 	vstr	d7, [r2, #8]
 80140ce:	4a07      	ldr	r2, [pc, #28]	; (80140ec <rcutils_reset_error+0x34>)
 80140d0:	7013      	strb	r3, [r2, #0]
 80140d2:	4770      	bx	lr
 80140d4:	f3af 8000 	nop.w
	...
 80140e0:	20012350 	.word	0x20012350
 80140e4:	20012361 	.word	0x20012361
 80140e8:	20012360 	.word	0x20012360
 80140ec:	20012348 	.word	0x20012348

080140f0 <rcutils_format_string_limit>:
 80140f0:	b40f      	push	{r0, r1, r2, r3}
 80140f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140f4:	b083      	sub	sp, #12
 80140f6:	ac08      	add	r4, sp, #32
 80140f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80140fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80140fe:	b326      	cbz	r6, 801414a <rcutils_format_string_limit+0x5a>
 8014100:	a808      	add	r0, sp, #32
 8014102:	f7ff ff9b 	bl	801403c <rcutils_allocator_is_valid>
 8014106:	b300      	cbz	r0, 801414a <rcutils_format_string_limit+0x5a>
 8014108:	2100      	movs	r1, #0
 801410a:	ab0f      	add	r3, sp, #60	; 0x3c
 801410c:	4632      	mov	r2, r6
 801410e:	4608      	mov	r0, r1
 8014110:	e9cd 3300 	strd	r3, r3, [sp]
 8014114:	f000 f906 	bl	8014324 <rcutils_vsnprintf>
 8014118:	1c43      	adds	r3, r0, #1
 801411a:	4605      	mov	r5, r0
 801411c:	d015      	beq.n	801414a <rcutils_format_string_limit+0x5a>
 801411e:	1c47      	adds	r7, r0, #1
 8014120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014122:	429f      	cmp	r7, r3
 8014124:	d901      	bls.n	801412a <rcutils_format_string_limit+0x3a>
 8014126:	1e5d      	subs	r5, r3, #1
 8014128:	461f      	mov	r7, r3
 801412a:	9b08      	ldr	r3, [sp, #32]
 801412c:	4638      	mov	r0, r7
 801412e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014130:	4798      	blx	r3
 8014132:	4604      	mov	r4, r0
 8014134:	b148      	cbz	r0, 801414a <rcutils_format_string_limit+0x5a>
 8014136:	4632      	mov	r2, r6
 8014138:	4639      	mov	r1, r7
 801413a:	9b01      	ldr	r3, [sp, #4]
 801413c:	f000 f8f2 	bl	8014324 <rcutils_vsnprintf>
 8014140:	2800      	cmp	r0, #0
 8014142:	db09      	blt.n	8014158 <rcutils_format_string_limit+0x68>
 8014144:	2300      	movs	r3, #0
 8014146:	5563      	strb	r3, [r4, r5]
 8014148:	e000      	b.n	801414c <rcutils_format_string_limit+0x5c>
 801414a:	2400      	movs	r4, #0
 801414c:	4620      	mov	r0, r4
 801414e:	b003      	add	sp, #12
 8014150:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014154:	b004      	add	sp, #16
 8014156:	4770      	bx	lr
 8014158:	4620      	mov	r0, r4
 801415a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801415c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801415e:	2400      	movs	r4, #0
 8014160:	4798      	blx	r3
 8014162:	e7f3      	b.n	801414c <rcutils_format_string_limit+0x5c>

08014164 <rcutils_repl_str>:
 8014164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014168:	ed2d 8b02 	vpush	{d8}
 801416c:	b087      	sub	sp, #28
 801416e:	2600      	movs	r6, #0
 8014170:	4680      	mov	r8, r0
 8014172:	468a      	mov	sl, r1
 8014174:	9000      	str	r0, [sp, #0]
 8014176:	4608      	mov	r0, r1
 8014178:	ee08 2a10 	vmov	s16, r2
 801417c:	4699      	mov	r9, r3
 801417e:	2510      	movs	r5, #16
 8014180:	f7ec f8be 	bl	8000300 <strlen>
 8014184:	4637      	mov	r7, r6
 8014186:	46b3      	mov	fp, r6
 8014188:	9001      	str	r0, [sp, #4]
 801418a:	e01e      	b.n	80141ca <rcutils_repl_str+0x66>
 801418c:	f10b 0b01 	add.w	fp, fp, #1
 8014190:	9b01      	ldr	r3, [sp, #4]
 8014192:	455e      	cmp	r6, fp
 8014194:	eb04 0803 	add.w	r8, r4, r3
 8014198:	d211      	bcs.n	80141be <rcutils_repl_str+0x5a>
 801419a:	442e      	add	r6, r5
 801419c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80141a0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80141a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141a8:	00b1      	lsls	r1, r6, #2
 80141aa:	4798      	blx	r3
 80141ac:	2800      	cmp	r0, #0
 80141ae:	f000 8088 	beq.w	80142c2 <rcutils_repl_str+0x15e>
 80141b2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80141b6:	4607      	mov	r7, r0
 80141b8:	bf28      	it	cs
 80141ba:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80141be:	9a00      	ldr	r2, [sp, #0]
 80141c0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80141c4:	1aa4      	subs	r4, r4, r2
 80141c6:	f843 4c04 	str.w	r4, [r3, #-4]
 80141ca:	4651      	mov	r1, sl
 80141cc:	4640      	mov	r0, r8
 80141ce:	f00b fdf0 	bl	801fdb2 <strstr>
 80141d2:	4604      	mov	r4, r0
 80141d4:	4638      	mov	r0, r7
 80141d6:	2c00      	cmp	r4, #0
 80141d8:	d1d8      	bne.n	801418c <rcutils_repl_str+0x28>
 80141da:	4640      	mov	r0, r8
 80141dc:	f7ec f890 	bl	8000300 <strlen>
 80141e0:	9b00      	ldr	r3, [sp, #0]
 80141e2:	eba8 0803 	sub.w	r8, r8, r3
 80141e6:	eb08 0400 	add.w	r4, r8, r0
 80141ea:	9402      	str	r4, [sp, #8]
 80141ec:	f1bb 0f00 	cmp.w	fp, #0
 80141f0:	d045      	beq.n	801427e <rcutils_repl_str+0x11a>
 80141f2:	ee18 0a10 	vmov	r0, s16
 80141f6:	f7ec f883 	bl	8000300 <strlen>
 80141fa:	9a01      	ldr	r2, [sp, #4]
 80141fc:	4606      	mov	r6, r0
 80141fe:	f8d9 3000 	ldr.w	r3, [r9]
 8014202:	1a82      	subs	r2, r0, r2
 8014204:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014208:	fb0b 4202 	mla	r2, fp, r2, r4
 801420c:	1c50      	adds	r0, r2, #1
 801420e:	9205      	str	r2, [sp, #20]
 8014210:	4798      	blx	r3
 8014212:	4682      	mov	sl, r0
 8014214:	2800      	cmp	r0, #0
 8014216:	d054      	beq.n	80142c2 <rcutils_repl_str+0x15e>
 8014218:	683a      	ldr	r2, [r7, #0]
 801421a:	463d      	mov	r5, r7
 801421c:	9900      	ldr	r1, [sp, #0]
 801421e:	2401      	movs	r4, #1
 8014220:	f00b fe6d 	bl	801fefe <memcpy>
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801422a:	eb0a 0803 	add.w	r8, sl, r3
 801422e:	ee18 7a10 	vmov	r7, s16
 8014232:	f8dd a000 	ldr.w	sl, [sp]
 8014236:	f8cd 9000 	str.w	r9, [sp]
 801423a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801423e:	4632      	mov	r2, r6
 8014240:	4639      	mov	r1, r7
 8014242:	4640      	mov	r0, r8
 8014244:	44b0      	add	r8, r6
 8014246:	f00b fe5a 	bl	801fefe <memcpy>
 801424a:	f855 2b04 	ldr.w	r2, [r5], #4
 801424e:	45a3      	cmp	fp, r4
 8014250:	444a      	add	r2, r9
 8014252:	eb0a 0102 	add.w	r1, sl, r2
 8014256:	d02a      	beq.n	80142ae <rcutils_repl_str+0x14a>
 8014258:	6828      	ldr	r0, [r5, #0]
 801425a:	1a82      	subs	r2, r0, r2
 801425c:	4640      	mov	r0, r8
 801425e:	4490      	add	r8, r2
 8014260:	f00b fe4d 	bl	801fefe <memcpy>
 8014264:	1c62      	adds	r2, r4, #1
 8014266:	45a3      	cmp	fp, r4
 8014268:	4614      	mov	r4, r2
 801426a:	d8e8      	bhi.n	801423e <rcutils_repl_str+0xda>
 801426c:	f8dd 9000 	ldr.w	r9, [sp]
 8014270:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8014274:	2300      	movs	r3, #0
 8014276:	9a05      	ldr	r2, [sp, #20]
 8014278:	f80a 3002 	strb.w	r3, [sl, r2]
 801427c:	e00b      	b.n	8014296 <rcutils_repl_str+0x132>
 801427e:	4620      	mov	r0, r4
 8014280:	f8d9 3000 	ldr.w	r3, [r9]
 8014284:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014288:	3001      	adds	r0, #1
 801428a:	4798      	blx	r3
 801428c:	4682      	mov	sl, r0
 801428e:	b110      	cbz	r0, 8014296 <rcutils_repl_str+0x132>
 8014290:	9900      	ldr	r1, [sp, #0]
 8014292:	f00b fe2c 	bl	801feee <strcpy>
 8014296:	4638      	mov	r0, r7
 8014298:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801429c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80142a0:	4798      	blx	r3
 80142a2:	4650      	mov	r0, sl
 80142a4:	b007      	add	sp, #28
 80142a6:	ecbd 8b02 	vpop	{d8}
 80142aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ae:	9b02      	ldr	r3, [sp, #8]
 80142b0:	4640      	mov	r0, r8
 80142b2:	f8dd 9000 	ldr.w	r9, [sp]
 80142b6:	1a9a      	subs	r2, r3, r2
 80142b8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80142bc:	f00b fe1f 	bl	801fefe <memcpy>
 80142c0:	e7d8      	b.n	8014274 <rcutils_repl_str+0x110>
 80142c2:	f04f 0a00 	mov.w	sl, #0
 80142c6:	e7e6      	b.n	8014296 <rcutils_repl_str+0x132>

080142c8 <rcutils_snprintf>:
 80142c8:	b40c      	push	{r2, r3}
 80142ca:	b530      	push	{r4, r5, lr}
 80142cc:	b083      	sub	sp, #12
 80142ce:	ab06      	add	r3, sp, #24
 80142d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80142d4:	9301      	str	r3, [sp, #4]
 80142d6:	b1e2      	cbz	r2, 8014312 <rcutils_snprintf+0x4a>
 80142d8:	fab0 f480 	clz	r4, r0
 80142dc:	fab1 f581 	clz	r5, r1
 80142e0:	ea50 0c01 	orrs.w	ip, r0, r1
 80142e4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80142e8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80142ec:	d008      	beq.n	8014300 <rcutils_snprintf+0x38>
 80142ee:	b984      	cbnz	r4, 8014312 <rcutils_snprintf+0x4a>
 80142f0:	b97d      	cbnz	r5, 8014312 <rcutils_snprintf+0x4a>
 80142f2:	f00b fc69 	bl	801fbc8 <vsniprintf>
 80142f6:	b003      	add	sp, #12
 80142f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142fc:	b002      	add	sp, #8
 80142fe:	4770      	bx	lr
 8014300:	4661      	mov	r1, ip
 8014302:	4660      	mov	r0, ip
 8014304:	f00b fc60 	bl	801fbc8 <vsniprintf>
 8014308:	b003      	add	sp, #12
 801430a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801430e:	b002      	add	sp, #8
 8014310:	4770      	bx	lr
 8014312:	f00b fdbf 	bl	801fe94 <__errno>
 8014316:	2216      	movs	r2, #22
 8014318:	4603      	mov	r3, r0
 801431a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801431e:	601a      	str	r2, [r3, #0]
 8014320:	e7e9      	b.n	80142f6 <rcutils_snprintf+0x2e>
 8014322:	bf00      	nop

08014324 <rcutils_vsnprintf>:
 8014324:	b570      	push	{r4, r5, r6, lr}
 8014326:	b1b2      	cbz	r2, 8014356 <rcutils_vsnprintf+0x32>
 8014328:	fab0 f480 	clz	r4, r0
 801432c:	fab1 f581 	clz	r5, r1
 8014330:	ea50 0c01 	orrs.w	ip, r0, r1
 8014334:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014338:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801433c:	d005      	beq.n	801434a <rcutils_vsnprintf+0x26>
 801433e:	b954      	cbnz	r4, 8014356 <rcutils_vsnprintf+0x32>
 8014340:	b94d      	cbnz	r5, 8014356 <rcutils_vsnprintf+0x32>
 8014342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014346:	f00b bc3f 	b.w	801fbc8 <vsniprintf>
 801434a:	4661      	mov	r1, ip
 801434c:	4660      	mov	r0, ip
 801434e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014352:	f00b bc39 	b.w	801fbc8 <vsniprintf>
 8014356:	f00b fd9d 	bl	801fe94 <__errno>
 801435a:	2316      	movs	r3, #22
 801435c:	6003      	str	r3, [r0, #0]
 801435e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014362:	bd70      	pop	{r4, r5, r6, pc}

08014364 <rcutils_strdup>:
 8014364:	b084      	sub	sp, #16
 8014366:	b570      	push	{r4, r5, r6, lr}
 8014368:	b082      	sub	sp, #8
 801436a:	4605      	mov	r5, r0
 801436c:	ac07      	add	r4, sp, #28
 801436e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014372:	b1b0      	cbz	r0, 80143a2 <rcutils_strdup+0x3e>
 8014374:	f7eb ffc4 	bl	8000300 <strlen>
 8014378:	1c42      	adds	r2, r0, #1
 801437a:	9b07      	ldr	r3, [sp, #28]
 801437c:	4606      	mov	r6, r0
 801437e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014380:	4610      	mov	r0, r2
 8014382:	9201      	str	r2, [sp, #4]
 8014384:	4798      	blx	r3
 8014386:	4604      	mov	r4, r0
 8014388:	b128      	cbz	r0, 8014396 <rcutils_strdup+0x32>
 801438a:	9a01      	ldr	r2, [sp, #4]
 801438c:	4629      	mov	r1, r5
 801438e:	f00b fdb6 	bl	801fefe <memcpy>
 8014392:	2300      	movs	r3, #0
 8014394:	55a3      	strb	r3, [r4, r6]
 8014396:	4620      	mov	r0, r4
 8014398:	b002      	add	sp, #8
 801439a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801439e:	b004      	add	sp, #16
 80143a0:	4770      	bx	lr
 80143a2:	4604      	mov	r4, r0
 80143a4:	e7f7      	b.n	8014396 <rcutils_strdup+0x32>
 80143a6:	bf00      	nop

080143a8 <rcutils_strndup>:
 80143a8:	b082      	sub	sp, #8
 80143aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ac:	ac06      	add	r4, sp, #24
 80143ae:	4605      	mov	r5, r0
 80143b0:	e884 000c 	stmia.w	r4, {r2, r3}
 80143b4:	b188      	cbz	r0, 80143da <rcutils_strndup+0x32>
 80143b6:	1c4f      	adds	r7, r1, #1
 80143b8:	460e      	mov	r6, r1
 80143ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80143bc:	4638      	mov	r0, r7
 80143be:	4790      	blx	r2
 80143c0:	4604      	mov	r4, r0
 80143c2:	b128      	cbz	r0, 80143d0 <rcutils_strndup+0x28>
 80143c4:	463a      	mov	r2, r7
 80143c6:	4629      	mov	r1, r5
 80143c8:	f00b fd99 	bl	801fefe <memcpy>
 80143cc:	2300      	movs	r3, #0
 80143ce:	55a3      	strb	r3, [r4, r6]
 80143d0:	4620      	mov	r0, r4
 80143d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80143d6:	b002      	add	sp, #8
 80143d8:	4770      	bx	lr
 80143da:	4604      	mov	r4, r0
 80143dc:	e7f8      	b.n	80143d0 <rcutils_strndup+0x28>
 80143de:	bf00      	nop

080143e0 <rcutils_system_time_now>:
 80143e0:	b300      	cbz	r0, 8014424 <rcutils_system_time_now+0x44>
 80143e2:	b570      	push	{r4, r5, r6, lr}
 80143e4:	b084      	sub	sp, #16
 80143e6:	4604      	mov	r4, r0
 80143e8:	2001      	movs	r0, #1
 80143ea:	4669      	mov	r1, sp
 80143ec:	f7ee fab0 	bl	8002950 <clock_gettime>
 80143f0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80143f4:	2900      	cmp	r1, #0
 80143f6:	db12      	blt.n	801441e <rcutils_system_time_now+0x3e>
 80143f8:	ea53 0201 	orrs.w	r2, r3, r1
 80143fc:	9d02      	ldr	r5, [sp, #8]
 80143fe:	d101      	bne.n	8014404 <rcutils_system_time_now+0x24>
 8014400:	2d00      	cmp	r5, #0
 8014402:	db0c      	blt.n	801441e <rcutils_system_time_now+0x3e>
 8014404:	4e08      	ldr	r6, [pc, #32]	; (8014428 <rcutils_system_time_now+0x48>)
 8014406:	2000      	movs	r0, #0
 8014408:	fba3 3206 	umull	r3, r2, r3, r6
 801440c:	195b      	adds	r3, r3, r5
 801440e:	fb06 2201 	mla	r2, r6, r1, r2
 8014412:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8014416:	e9c4 3200 	strd	r3, r2, [r4]
 801441a:	b004      	add	sp, #16
 801441c:	bd70      	pop	{r4, r5, r6, pc}
 801441e:	2002      	movs	r0, #2
 8014420:	b004      	add	sp, #16
 8014422:	bd70      	pop	{r4, r5, r6, pc}
 8014424:	200b      	movs	r0, #11
 8014426:	4770      	bx	lr
 8014428:	3b9aca00 	.word	0x3b9aca00

0801442c <rcutils_steady_time_now>:
 801442c:	b300      	cbz	r0, 8014470 <rcutils_steady_time_now+0x44>
 801442e:	b570      	push	{r4, r5, r6, lr}
 8014430:	b084      	sub	sp, #16
 8014432:	4604      	mov	r4, r0
 8014434:	2000      	movs	r0, #0
 8014436:	4669      	mov	r1, sp
 8014438:	f7ee fa8a 	bl	8002950 <clock_gettime>
 801443c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8014440:	2900      	cmp	r1, #0
 8014442:	db12      	blt.n	801446a <rcutils_steady_time_now+0x3e>
 8014444:	ea53 0201 	orrs.w	r2, r3, r1
 8014448:	9d02      	ldr	r5, [sp, #8]
 801444a:	d101      	bne.n	8014450 <rcutils_steady_time_now+0x24>
 801444c:	2d00      	cmp	r5, #0
 801444e:	db0c      	blt.n	801446a <rcutils_steady_time_now+0x3e>
 8014450:	4e08      	ldr	r6, [pc, #32]	; (8014474 <rcutils_steady_time_now+0x48>)
 8014452:	2000      	movs	r0, #0
 8014454:	fba3 3206 	umull	r3, r2, r3, r6
 8014458:	195b      	adds	r3, r3, r5
 801445a:	fb06 2201 	mla	r2, r6, r1, r2
 801445e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8014462:	e9c4 3200 	strd	r3, r2, [r4]
 8014466:	b004      	add	sp, #16
 8014468:	bd70      	pop	{r4, r5, r6, pc}
 801446a:	2002      	movs	r0, #2
 801446c:	b004      	add	sp, #16
 801446e:	bd70      	pop	{r4, r5, r6, pc}
 8014470:	200b      	movs	r0, #11
 8014472:	4770      	bx	lr
 8014474:	3b9aca00 	.word	0x3b9aca00

08014478 <rmw_get_zero_initialized_init_options>:
 8014478:	b510      	push	{r4, lr}
 801447a:	4604      	mov	r4, r0
 801447c:	2238      	movs	r2, #56	; 0x38
 801447e:	2100      	movs	r1, #0
 8014480:	f00b fc70 	bl	801fd64 <memset>
 8014484:	f104 0010 	add.w	r0, r4, #16
 8014488:	f000 f80a 	bl	80144a0 <rmw_get_default_security_options>
 801448c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014490:	4620      	mov	r0, r4
 8014492:	60e3      	str	r3, [r4, #12]
 8014494:	bd10      	pop	{r4, pc}
 8014496:	bf00      	nop

08014498 <rmw_get_default_publisher_options>:
 8014498:	2200      	movs	r2, #0
 801449a:	6002      	str	r2, [r0, #0]
 801449c:	7102      	strb	r2, [r0, #4]
 801449e:	4770      	bx	lr

080144a0 <rmw_get_default_security_options>:
 80144a0:	2200      	movs	r2, #0
 80144a2:	7002      	strb	r2, [r0, #0]
 80144a4:	6042      	str	r2, [r0, #4]
 80144a6:	4770      	bx	lr

080144a8 <rmw_subscription_content_filter_options_fini>:
 80144a8:	b1b0      	cbz	r0, 80144d8 <rmw_subscription_content_filter_options_fini+0x30>
 80144aa:	b538      	push	{r3, r4, r5, lr}
 80144ac:	4604      	mov	r4, r0
 80144ae:	4608      	mov	r0, r1
 80144b0:	460d      	mov	r5, r1
 80144b2:	f7ff fdc3 	bl	801403c <rcutils_allocator_is_valid>
 80144b6:	b168      	cbz	r0, 80144d4 <rmw_subscription_content_filter_options_fini+0x2c>
 80144b8:	6820      	ldr	r0, [r4, #0]
 80144ba:	b120      	cbz	r0, 80144c6 <rmw_subscription_content_filter_options_fini+0x1e>
 80144bc:	686b      	ldr	r3, [r5, #4]
 80144be:	6929      	ldr	r1, [r5, #16]
 80144c0:	4798      	blx	r3
 80144c2:	2300      	movs	r3, #0
 80144c4:	6023      	str	r3, [r4, #0]
 80144c6:	1d20      	adds	r0, r4, #4
 80144c8:	f008 fa06 	bl	801c8d8 <rcutils_string_array_fini>
 80144cc:	3800      	subs	r0, #0
 80144ce:	bf18      	it	ne
 80144d0:	2001      	movne	r0, #1
 80144d2:	bd38      	pop	{r3, r4, r5, pc}
 80144d4:	200b      	movs	r0, #11
 80144d6:	bd38      	pop	{r3, r4, r5, pc}
 80144d8:	200b      	movs	r0, #11
 80144da:	4770      	bx	lr

080144dc <rmw_get_default_subscription_options>:
 80144dc:	2200      	movs	r2, #0
 80144de:	e9c0 2200 	strd	r2, r2, [r0]
 80144e2:	6082      	str	r2, [r0, #8]
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop

080144e8 <rmw_get_zero_initialized_message_info>:
 80144e8:	b510      	push	{r4, lr}
 80144ea:	4604      	mov	r4, r0
 80144ec:	2240      	movs	r2, #64	; 0x40
 80144ee:	2100      	movs	r1, #0
 80144f0:	f00b fc38 	bl	801fd64 <memset>
 80144f4:	4620      	mov	r0, r4
 80144f6:	bd10      	pop	{r4, pc}

080144f8 <rmw_validate_namespace_with_size>:
 80144f8:	2800      	cmp	r0, #0
 80144fa:	d043      	beq.n	8014584 <rmw_validate_namespace_with_size+0x8c>
 80144fc:	b570      	push	{r4, r5, r6, lr}
 80144fe:	4614      	mov	r4, r2
 8014500:	b0c2      	sub	sp, #264	; 0x108
 8014502:	b32a      	cbz	r2, 8014550 <rmw_validate_namespace_with_size+0x58>
 8014504:	2901      	cmp	r1, #1
 8014506:	460d      	mov	r5, r1
 8014508:	461e      	mov	r6, r3
 801450a:	d102      	bne.n	8014512 <rmw_validate_namespace_with_size+0x1a>
 801450c:	7803      	ldrb	r3, [r0, #0]
 801450e:	2b2f      	cmp	r3, #47	; 0x2f
 8014510:	d012      	beq.n	8014538 <rmw_validate_namespace_with_size+0x40>
 8014512:	aa01      	add	r2, sp, #4
 8014514:	4669      	mov	r1, sp
 8014516:	f008 fbd3 	bl	801ccc0 <rmw_validate_full_topic_name>
 801451a:	b980      	cbnz	r0, 801453e <rmw_validate_namespace_with_size+0x46>
 801451c:	9a00      	ldr	r2, [sp, #0]
 801451e:	b14a      	cbz	r2, 8014534 <rmw_validate_namespace_with_size+0x3c>
 8014520:	2a07      	cmp	r2, #7
 8014522:	d007      	beq.n	8014534 <rmw_validate_namespace_with_size+0x3c>
 8014524:	1e53      	subs	r3, r2, #1
 8014526:	2b05      	cmp	r3, #5
 8014528:	d82e      	bhi.n	8014588 <rmw_validate_namespace_with_size+0x90>
 801452a:	e8df f003 	tbb	[pc, r3]
 801452e:	1f1c      	.short	0x1f1c
 8014530:	14282522 	.word	0x14282522
 8014534:	2df5      	cmp	r5, #245	; 0xf5
 8014536:	d804      	bhi.n	8014542 <rmw_validate_namespace_with_size+0x4a>
 8014538:	2300      	movs	r3, #0
 801453a:	4618      	mov	r0, r3
 801453c:	6023      	str	r3, [r4, #0]
 801453e:	b042      	add	sp, #264	; 0x108
 8014540:	bd70      	pop	{r4, r5, r6, pc}
 8014542:	2307      	movs	r3, #7
 8014544:	6023      	str	r3, [r4, #0]
 8014546:	2e00      	cmp	r6, #0
 8014548:	d0f9      	beq.n	801453e <rmw_validate_namespace_with_size+0x46>
 801454a:	23f4      	movs	r3, #244	; 0xf4
 801454c:	6033      	str	r3, [r6, #0]
 801454e:	e7f6      	b.n	801453e <rmw_validate_namespace_with_size+0x46>
 8014550:	200b      	movs	r0, #11
 8014552:	b042      	add	sp, #264	; 0x108
 8014554:	bd70      	pop	{r4, r5, r6, pc}
 8014556:	2306      	movs	r3, #6
 8014558:	6023      	str	r3, [r4, #0]
 801455a:	2e00      	cmp	r6, #0
 801455c:	d0ef      	beq.n	801453e <rmw_validate_namespace_with_size+0x46>
 801455e:	9b01      	ldr	r3, [sp, #4]
 8014560:	6033      	str	r3, [r6, #0]
 8014562:	b042      	add	sp, #264	; 0x108
 8014564:	bd70      	pop	{r4, r5, r6, pc}
 8014566:	2301      	movs	r3, #1
 8014568:	6023      	str	r3, [r4, #0]
 801456a:	e7f6      	b.n	801455a <rmw_validate_namespace_with_size+0x62>
 801456c:	2302      	movs	r3, #2
 801456e:	6023      	str	r3, [r4, #0]
 8014570:	e7f3      	b.n	801455a <rmw_validate_namespace_with_size+0x62>
 8014572:	2303      	movs	r3, #3
 8014574:	6023      	str	r3, [r4, #0]
 8014576:	e7f0      	b.n	801455a <rmw_validate_namespace_with_size+0x62>
 8014578:	2304      	movs	r3, #4
 801457a:	6023      	str	r3, [r4, #0]
 801457c:	e7ed      	b.n	801455a <rmw_validate_namespace_with_size+0x62>
 801457e:	2305      	movs	r3, #5
 8014580:	6023      	str	r3, [r4, #0]
 8014582:	e7ea      	b.n	801455a <rmw_validate_namespace_with_size+0x62>
 8014584:	200b      	movs	r0, #11
 8014586:	4770      	bx	lr
 8014588:	4613      	mov	r3, r2
 801458a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801458e:	4a03      	ldr	r2, [pc, #12]	; (801459c <rmw_validate_namespace_with_size+0xa4>)
 8014590:	a802      	add	r0, sp, #8
 8014592:	f7ff fe99 	bl	80142c8 <rcutils_snprintf>
 8014596:	2001      	movs	r0, #1
 8014598:	e7d1      	b.n	801453e <rmw_validate_namespace_with_size+0x46>
 801459a:	bf00      	nop
 801459c:	080240ac 	.word	0x080240ac

080145a0 <rmw_validate_namespace>:
 80145a0:	b168      	cbz	r0, 80145be <rmw_validate_namespace+0x1e>
 80145a2:	b570      	push	{r4, r5, r6, lr}
 80145a4:	460d      	mov	r5, r1
 80145a6:	4616      	mov	r6, r2
 80145a8:	4604      	mov	r4, r0
 80145aa:	f7eb fea9 	bl	8000300 <strlen>
 80145ae:	4633      	mov	r3, r6
 80145b0:	4601      	mov	r1, r0
 80145b2:	462a      	mov	r2, r5
 80145b4:	4620      	mov	r0, r4
 80145b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145ba:	f7ff bf9d 	b.w	80144f8 <rmw_validate_namespace_with_size>
 80145be:	200b      	movs	r0, #11
 80145c0:	4770      	bx	lr
 80145c2:	bf00      	nop

080145c4 <rmw_namespace_validation_result_string>:
 80145c4:	2807      	cmp	r0, #7
 80145c6:	d803      	bhi.n	80145d0 <rmw_namespace_validation_result_string+0xc>
 80145c8:	4b02      	ldr	r3, [pc, #8]	; (80145d4 <rmw_namespace_validation_result_string+0x10>)
 80145ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80145ce:	4770      	bx	lr
 80145d0:	4801      	ldr	r0, [pc, #4]	; (80145d8 <rmw_namespace_validation_result_string+0x14>)
 80145d2:	4770      	bx	lr
 80145d4:	080242a4 	.word	0x080242a4
 80145d8:	080240fc 	.word	0x080240fc

080145dc <rmw_validate_node_name>:
 80145dc:	2800      	cmp	r0, #0
 80145de:	d042      	beq.n	8014666 <rmw_validate_node_name+0x8a>
 80145e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145e4:	460d      	mov	r5, r1
 80145e6:	2900      	cmp	r1, #0
 80145e8:	d03f      	beq.n	801466a <rmw_validate_node_name+0x8e>
 80145ea:	4604      	mov	r4, r0
 80145ec:	4616      	mov	r6, r2
 80145ee:	f7eb fe87 	bl	8000300 <strlen>
 80145f2:	b310      	cbz	r0, 801463a <rmw_validate_node_name+0x5e>
 80145f4:	1e63      	subs	r3, r4, #1
 80145f6:	f1c4 0101 	rsb	r1, r4, #1
 80145fa:	eb03 0800 	add.w	r8, r3, r0
 80145fe:	18cf      	adds	r7, r1, r3
 8014600:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014604:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8014608:	f02e 0c20 	bic.w	ip, lr, #32
 801460c:	2a09      	cmp	r2, #9
 801460e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8014612:	d905      	bls.n	8014620 <rmw_validate_node_name+0x44>
 8014614:	f1bc 0f19 	cmp.w	ip, #25
 8014618:	d902      	bls.n	8014620 <rmw_validate_node_name+0x44>
 801461a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801461e:	d114      	bne.n	801464a <rmw_validate_node_name+0x6e>
 8014620:	4598      	cmp	r8, r3
 8014622:	d1ec      	bne.n	80145fe <rmw_validate_node_name+0x22>
 8014624:	7822      	ldrb	r2, [r4, #0]
 8014626:	4b16      	ldr	r3, [pc, #88]	; (8014680 <rmw_validate_node_name+0xa4>)
 8014628:	5cd3      	ldrb	r3, [r2, r3]
 801462a:	f013 0304 	ands.w	r3, r3, #4
 801462e:	d113      	bne.n	8014658 <rmw_validate_node_name+0x7c>
 8014630:	28ff      	cmp	r0, #255	; 0xff
 8014632:	d81c      	bhi.n	801466e <rmw_validate_node_name+0x92>
 8014634:	4618      	mov	r0, r3
 8014636:	602b      	str	r3, [r5, #0]
 8014638:	e00c      	b.n	8014654 <rmw_validate_node_name+0x78>
 801463a:	2301      	movs	r3, #1
 801463c:	602b      	str	r3, [r5, #0]
 801463e:	b17e      	cbz	r6, 8014660 <rmw_validate_node_name+0x84>
 8014640:	2300      	movs	r3, #0
 8014642:	4618      	mov	r0, r3
 8014644:	6033      	str	r3, [r6, #0]
 8014646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801464a:	2302      	movs	r3, #2
 801464c:	602b      	str	r3, [r5, #0]
 801464e:	b13e      	cbz	r6, 8014660 <rmw_validate_node_name+0x84>
 8014650:	2000      	movs	r0, #0
 8014652:	6037      	str	r7, [r6, #0]
 8014654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014658:	2303      	movs	r3, #3
 801465a:	602b      	str	r3, [r5, #0]
 801465c:	2e00      	cmp	r6, #0
 801465e:	d1ef      	bne.n	8014640 <rmw_validate_node_name+0x64>
 8014660:	2000      	movs	r0, #0
 8014662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014666:	200b      	movs	r0, #11
 8014668:	4770      	bx	lr
 801466a:	200b      	movs	r0, #11
 801466c:	e7f2      	b.n	8014654 <rmw_validate_node_name+0x78>
 801466e:	2204      	movs	r2, #4
 8014670:	602a      	str	r2, [r5, #0]
 8014672:	2e00      	cmp	r6, #0
 8014674:	d0f4      	beq.n	8014660 <rmw_validate_node_name+0x84>
 8014676:	22fe      	movs	r2, #254	; 0xfe
 8014678:	4618      	mov	r0, r3
 801467a:	6032      	str	r2, [r6, #0]
 801467c:	e7ea      	b.n	8014654 <rmw_validate_node_name+0x78>
 801467e:	bf00      	nop
 8014680:	08024adc 	.word	0x08024adc

08014684 <rmw_node_name_validation_result_string>:
 8014684:	2804      	cmp	r0, #4
 8014686:	d803      	bhi.n	8014690 <rmw_node_name_validation_result_string+0xc>
 8014688:	4b02      	ldr	r3, [pc, #8]	; (8014694 <rmw_node_name_validation_result_string+0x10>)
 801468a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801468e:	4770      	bx	lr
 8014690:	4801      	ldr	r0, [pc, #4]	; (8014698 <rmw_node_name_validation_result_string+0x14>)
 8014692:	4770      	bx	lr
 8014694:	080243b0 	.word	0x080243b0
 8014698:	080242c4 	.word	0x080242c4

0801469c <rmw_uros_set_custom_transport>:
 801469c:	b470      	push	{r4, r5, r6}
 801469e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80146a2:	b162      	cbz	r2, 80146be <rmw_uros_set_custom_transport+0x22>
 80146a4:	b15b      	cbz	r3, 80146be <rmw_uros_set_custom_transport+0x22>
 80146a6:	b155      	cbz	r5, 80146be <rmw_uros_set_custom_transport+0x22>
 80146a8:	b14e      	cbz	r6, 80146be <rmw_uros_set_custom_transport+0x22>
 80146aa:	4c06      	ldr	r4, [pc, #24]	; (80146c4 <rmw_uros_set_custom_transport+0x28>)
 80146ac:	7020      	strb	r0, [r4, #0]
 80146ae:	2000      	movs	r0, #0
 80146b0:	6166      	str	r6, [r4, #20]
 80146b2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80146b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80146ba:	bc70      	pop	{r4, r5, r6}
 80146bc:	4770      	bx	lr
 80146be:	200b      	movs	r0, #11
 80146c0:	bc70      	pop	{r4, r5, r6}
 80146c2:	4770      	bx	lr
 80146c4:	20012364 	.word	0x20012364

080146c8 <rmw_init_options_init>:
 80146c8:	b084      	sub	sp, #16
 80146ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146cc:	b083      	sub	sp, #12
 80146ce:	ad09      	add	r5, sp, #36	; 0x24
 80146d0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80146d4:	b130      	cbz	r0, 80146e4 <rmw_init_options_init+0x1c>
 80146d6:	4604      	mov	r4, r0
 80146d8:	4628      	mov	r0, r5
 80146da:	f7ff fcaf 	bl	801403c <rcutils_allocator_is_valid>
 80146de:	b108      	cbz	r0, 80146e4 <rmw_init_options_init+0x1c>
 80146e0:	68a6      	ldr	r6, [r4, #8]
 80146e2:	b12e      	cbz	r6, 80146f0 <rmw_init_options_init+0x28>
 80146e4:	200b      	movs	r0, #11
 80146e6:	b003      	add	sp, #12
 80146e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80146ec:	b004      	add	sp, #16
 80146ee:	4770      	bx	lr
 80146f0:	2200      	movs	r2, #0
 80146f2:	2300      	movs	r3, #0
 80146f4:	f104 0c20 	add.w	ip, r4, #32
 80146f8:	f8df e098 	ldr.w	lr, [pc, #152]	; 8014794 <rmw_init_options_init+0xcc>
 80146fc:	466f      	mov	r7, sp
 80146fe:	e9c4 2300 	strd	r2, r3, [r4]
 8014702:	4b20      	ldr	r3, [pc, #128]	; (8014784 <rmw_init_options_init+0xbc>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	60a3      	str	r3, [r4, #8]
 8014708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801470a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801470e:	682b      	ldr	r3, [r5, #0]
 8014710:	4638      	mov	r0, r7
 8014712:	f8cc 3000 	str.w	r3, [ip]
 8014716:	f8c4 e01c 	str.w	lr, [r4, #28]
 801471a:	60e6      	str	r6, [r4, #12]
 801471c:	f7ff fec0 	bl	80144a0 <rmw_get_default_security_options>
 8014720:	f104 0310 	add.w	r3, r4, #16
 8014724:	2203      	movs	r2, #3
 8014726:	e897 0003 	ldmia.w	r7, {r0, r1}
 801472a:	e883 0003 	stmia.w	r3, {r0, r1}
 801472e:	4816      	ldr	r0, [pc, #88]	; (8014788 <rmw_init_options_init+0xc0>)
 8014730:	4916      	ldr	r1, [pc, #88]	; (801478c <rmw_init_options_init+0xc4>)
 8014732:	7626      	strb	r6, [r4, #24]
 8014734:	f001 fa62 	bl	8015bfc <rmw_uxrce_init_init_options_impl_memory>
 8014738:	4813      	ldr	r0, [pc, #76]	; (8014788 <rmw_init_options_init+0xc0>)
 801473a:	f008 fc25 	bl	801cf88 <get_memory>
 801473e:	b1f0      	cbz	r0, 801477e <rmw_init_options_init+0xb6>
 8014740:	4a13      	ldr	r2, [pc, #76]	; (8014790 <rmw_init_options_init+0xc8>)
 8014742:	6883      	ldr	r3, [r0, #8]
 8014744:	6851      	ldr	r1, [r2, #4]
 8014746:	6363      	str	r3, [r4, #52]	; 0x34
 8014748:	7810      	ldrb	r0, [r2, #0]
 801474a:	6159      	str	r1, [r3, #20]
 801474c:	68d1      	ldr	r1, [r2, #12]
 801474e:	7418      	strb	r0, [r3, #16]
 8014750:	61d9      	str	r1, [r3, #28]
 8014752:	6911      	ldr	r1, [r2, #16]
 8014754:	6219      	str	r1, [r3, #32]
 8014756:	6951      	ldr	r1, [r2, #20]
 8014758:	6892      	ldr	r2, [r2, #8]
 801475a:	6259      	str	r1, [r3, #36]	; 0x24
 801475c:	619a      	str	r2, [r3, #24]
 801475e:	f004 fb65 	bl	8018e2c <uxr_nanos>
 8014762:	f009 ffd7 	bl	801e714 <srand>
 8014766:	f00a f803 	bl	801e770 <rand>
 801476a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801476c:	6298      	str	r0, [r3, #40]	; 0x28
 801476e:	2800      	cmp	r0, #0
 8014770:	d0f9      	beq.n	8014766 <rmw_init_options_init+0x9e>
 8014772:	2000      	movs	r0, #0
 8014774:	b003      	add	sp, #12
 8014776:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801477a:	b004      	add	sp, #16
 801477c:	4770      	bx	lr
 801477e:	2001      	movs	r0, #1
 8014780:	e7b1      	b.n	80146e6 <rmw_init_options_init+0x1e>
 8014782:	bf00      	nop
 8014784:	08024a34 	.word	0x08024a34
 8014788:	20016dbc 	.word	0x20016dbc
 801478c:	20012658 	.word	0x20012658
 8014790:	20012364 	.word	0x20012364
 8014794:	08023dc0 	.word	0x08023dc0

08014798 <rmw_init_options_copy>:
 8014798:	2800      	cmp	r0, #0
 801479a:	d047      	beq.n	801482c <rmw_init_options_copy+0x94>
 801479c:	b570      	push	{r4, r5, r6, lr}
 801479e:	460d      	mov	r5, r1
 80147a0:	b149      	cbz	r1, 80147b6 <rmw_init_options_copy+0x1e>
 80147a2:	4604      	mov	r4, r0
 80147a4:	6880      	ldr	r0, [r0, #8]
 80147a6:	b120      	cbz	r0, 80147b2 <rmw_init_options_copy+0x1a>
 80147a8:	4b22      	ldr	r3, [pc, #136]	; (8014834 <rmw_init_options_copy+0x9c>)
 80147aa:	6819      	ldr	r1, [r3, #0]
 80147ac:	f7eb fd48 	bl	8000240 <strcmp>
 80147b0:	bba8      	cbnz	r0, 801481e <rmw_init_options_copy+0x86>
 80147b2:	68ab      	ldr	r3, [r5, #8]
 80147b4:	b11b      	cbz	r3, 80147be <rmw_init_options_copy+0x26>
 80147b6:	f04f 0c0b 	mov.w	ip, #11
 80147ba:	4660      	mov	r0, ip
 80147bc:	bd70      	pop	{r4, r5, r6, pc}
 80147be:	4623      	mov	r3, r4
 80147c0:	462a      	mov	r2, r5
 80147c2:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80147c6:	f8d3 e000 	ldr.w	lr, [r3]
 80147ca:	3310      	adds	r3, #16
 80147cc:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80147d0:	3210      	adds	r2, #16
 80147d2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80147d6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80147da:	42b3      	cmp	r3, r6
 80147dc:	f842 ec10 	str.w	lr, [r2, #-16]
 80147e0:	f842 cc0c 	str.w	ip, [r2, #-12]
 80147e4:	f842 0c08 	str.w	r0, [r2, #-8]
 80147e8:	f842 1c04 	str.w	r1, [r2, #-4]
 80147ec:	d1eb      	bne.n	80147c6 <rmw_init_options_copy+0x2e>
 80147ee:	6819      	ldr	r1, [r3, #0]
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	4811      	ldr	r0, [pc, #68]	; (8014838 <rmw_init_options_copy+0xa0>)
 80147f4:	6011      	str	r1, [r2, #0]
 80147f6:	6053      	str	r3, [r2, #4]
 80147f8:	f008 fbc6 	bl	801cf88 <get_memory>
 80147fc:	b198      	cbz	r0, 8014826 <rmw_init_options_copy+0x8e>
 80147fe:	6883      	ldr	r3, [r0, #8]
 8014800:	f04f 0c00 	mov.w	ip, #0
 8014804:	636b      	str	r3, [r5, #52]	; 0x34
 8014806:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8014808:	f103 0410 	add.w	r4, r3, #16
 801480c:	3510      	adds	r5, #16
 801480e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014812:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801481a:	4660      	mov	r0, ip
 801481c:	bd70      	pop	{r4, r5, r6, pc}
 801481e:	f04f 0c0c 	mov.w	ip, #12
 8014822:	4660      	mov	r0, ip
 8014824:	bd70      	pop	{r4, r5, r6, pc}
 8014826:	f04f 0c01 	mov.w	ip, #1
 801482a:	e7c6      	b.n	80147ba <rmw_init_options_copy+0x22>
 801482c:	f04f 0c0b 	mov.w	ip, #11
 8014830:	4660      	mov	r0, ip
 8014832:	4770      	bx	lr
 8014834:	08024a34 	.word	0x08024a34
 8014838:	20016dbc 	.word	0x20016dbc

0801483c <rmw_init_options_fini>:
 801483c:	b510      	push	{r4, lr}
 801483e:	b08e      	sub	sp, #56	; 0x38
 8014840:	b388      	cbz	r0, 80148a6 <rmw_init_options_fini+0x6a>
 8014842:	4604      	mov	r4, r0
 8014844:	3020      	adds	r0, #32
 8014846:	f7ff fbf9 	bl	801403c <rcutils_allocator_is_valid>
 801484a:	b360      	cbz	r0, 80148a6 <rmw_init_options_fini+0x6a>
 801484c:	68a0      	ldr	r0, [r4, #8]
 801484e:	b120      	cbz	r0, 801485a <rmw_init_options_fini+0x1e>
 8014850:	4b1a      	ldr	r3, [pc, #104]	; (80148bc <rmw_init_options_fini+0x80>)
 8014852:	6819      	ldr	r1, [r3, #0]
 8014854:	f7eb fcf4 	bl	8000240 <strcmp>
 8014858:	bb68      	cbnz	r0, 80148b6 <rmw_init_options_fini+0x7a>
 801485a:	4b19      	ldr	r3, [pc, #100]	; (80148c0 <rmw_init_options_fini+0x84>)
 801485c:	6819      	ldr	r1, [r3, #0]
 801485e:	b331      	cbz	r1, 80148ae <rmw_init_options_fini+0x72>
 8014860:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014862:	e001      	b.n	8014868 <rmw_init_options_fini+0x2c>
 8014864:	6849      	ldr	r1, [r1, #4]
 8014866:	b311      	cbz	r1, 80148ae <rmw_init_options_fini+0x72>
 8014868:	688b      	ldr	r3, [r1, #8]
 801486a:	429a      	cmp	r2, r3
 801486c:	d1fa      	bne.n	8014864 <rmw_init_options_fini+0x28>
 801486e:	4814      	ldr	r0, [pc, #80]	; (80148c0 <rmw_init_options_fini+0x84>)
 8014870:	f008 fb9a 	bl	801cfa8 <put_memory>
 8014874:	4668      	mov	r0, sp
 8014876:	f7ff fdff 	bl	8014478 <rmw_get_zero_initialized_init_options>
 801487a:	46ee      	mov	lr, sp
 801487c:	46a4      	mov	ip, r4
 801487e:	2400      	movs	r4, #0
 8014880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014888:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801488c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014890:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014894:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014898:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801489c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80148a0:	4620      	mov	r0, r4
 80148a2:	b00e      	add	sp, #56	; 0x38
 80148a4:	bd10      	pop	{r4, pc}
 80148a6:	240b      	movs	r4, #11
 80148a8:	4620      	mov	r0, r4
 80148aa:	b00e      	add	sp, #56	; 0x38
 80148ac:	bd10      	pop	{r4, pc}
 80148ae:	2401      	movs	r4, #1
 80148b0:	4620      	mov	r0, r4
 80148b2:	b00e      	add	sp, #56	; 0x38
 80148b4:	bd10      	pop	{r4, pc}
 80148b6:	240c      	movs	r4, #12
 80148b8:	e7f2      	b.n	80148a0 <rmw_init_options_fini+0x64>
 80148ba:	bf00      	nop
 80148bc:	08024a34 	.word	0x08024a34
 80148c0:	20016dbc 	.word	0x20016dbc

080148c4 <rmw_init>:
 80148c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148c8:	b083      	sub	sp, #12
 80148ca:	2800      	cmp	r0, #0
 80148cc:	f000 80d3 	beq.w	8014a76 <rmw_init+0x1b2>
 80148d0:	460e      	mov	r6, r1
 80148d2:	2900      	cmp	r1, #0
 80148d4:	f000 80cf 	beq.w	8014a76 <rmw_init+0x1b2>
 80148d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80148da:	4605      	mov	r5, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	f000 80ca 	beq.w	8014a76 <rmw_init+0x1b2>
 80148e2:	4b78      	ldr	r3, [pc, #480]	; (8014ac4 <rmw_init+0x200>)
 80148e4:	6880      	ldr	r0, [r0, #8]
 80148e6:	681f      	ldr	r7, [r3, #0]
 80148e8:	b128      	cbz	r0, 80148f6 <rmw_init+0x32>
 80148ea:	4639      	mov	r1, r7
 80148ec:	f7eb fca8 	bl	8000240 <strcmp>
 80148f0:	2800      	cmp	r0, #0
 80148f2:	f040 80ca 	bne.w	8014a8a <rmw_init+0x1c6>
 80148f6:	4c74      	ldr	r4, [pc, #464]	; (8014ac8 <rmw_init+0x204>)
 80148f8:	f04f 0800 	mov.w	r8, #0
 80148fc:	4973      	ldr	r1, [pc, #460]	; (8014acc <rmw_init+0x208>)
 80148fe:	4874      	ldr	r0, [pc, #464]	; (8014ad0 <rmw_init+0x20c>)
 8014900:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014904:	60b7      	str	r7, [r6, #8]
 8014906:	e9c6 2300 	strd	r2, r3, [r6]
 801490a:	68eb      	ldr	r3, [r5, #12]
 801490c:	2201      	movs	r2, #1
 801490e:	64b3      	str	r3, [r6, #72]	; 0x48
 8014910:	f001 f914 	bl	8015b3c <rmw_uxrce_init_session_memory>
 8014914:	4620      	mov	r0, r4
 8014916:	2204      	movs	r2, #4
 8014918:	496e      	ldr	r1, [pc, #440]	; (8014ad4 <rmw_init+0x210>)
 801491a:	f001 f94f 	bl	8015bbc <rmw_uxrce_init_static_input_buffer_memory>
 801491e:	486c      	ldr	r0, [pc, #432]	; (8014ad0 <rmw_init+0x20c>)
 8014920:	f884 800d 	strb.w	r8, [r4, #13]
 8014924:	f008 fb30 	bl	801cf88 <get_memory>
 8014928:	2800      	cmp	r0, #0
 801492a:	f000 80a9 	beq.w	8014a80 <rmw_init+0x1bc>
 801492e:	6884      	ldr	r4, [r0, #8]
 8014930:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014932:	f104 0910 	add.w	r9, r4, #16
 8014936:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8014938:	f890 c010 	ldrb.w	ip, [r0, #16]
 801493c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014940:	9101      	str	r1, [sp, #4]
 8014942:	4661      	mov	r1, ip
 8014944:	6a00      	ldr	r0, [r0, #32]
 8014946:	9000      	str	r0, [sp, #0]
 8014948:	4648      	mov	r0, r9
 801494a:	f002 fa19 	bl	8016d80 <uxr_set_custom_transport_callbacks>
 801494e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014952:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8014956:	4960      	ldr	r1, [pc, #384]	; (8014ad8 <rmw_init+0x214>)
 8014958:	4860      	ldr	r0, [pc, #384]	; (8014adc <rmw_init+0x218>)
 801495a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 801495e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8014962:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8014966:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 801496a:	2201      	movs	r2, #1
 801496c:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8014970:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8014974:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8014978:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 801497c:	64f4      	str	r4, [r6, #76]	; 0x4c
 801497e:	f001 f8bd 	bl	8015afc <rmw_uxrce_init_node_memory>
 8014982:	2205      	movs	r2, #5
 8014984:	4956      	ldr	r1, [pc, #344]	; (8014ae0 <rmw_init+0x21c>)
 8014986:	4857      	ldr	r0, [pc, #348]	; (8014ae4 <rmw_init+0x220>)
 8014988:	f001 f898 	bl	8015abc <rmw_uxrce_init_subscription_memory>
 801498c:	220a      	movs	r2, #10
 801498e:	4956      	ldr	r1, [pc, #344]	; (8014ae8 <rmw_init+0x224>)
 8014990:	4856      	ldr	r0, [pc, #344]	; (8014aec <rmw_init+0x228>)
 8014992:	f001 f873 	bl	8015a7c <rmw_uxrce_init_publisher_memory>
 8014996:	2201      	movs	r2, #1
 8014998:	4955      	ldr	r1, [pc, #340]	; (8014af0 <rmw_init+0x22c>)
 801499a:	4856      	ldr	r0, [pc, #344]	; (8014af4 <rmw_init+0x230>)
 801499c:	f001 f82e 	bl	80159fc <rmw_uxrce_init_service_memory>
 80149a0:	2201      	movs	r2, #1
 80149a2:	4955      	ldr	r1, [pc, #340]	; (8014af8 <rmw_init+0x234>)
 80149a4:	4855      	ldr	r0, [pc, #340]	; (8014afc <rmw_init+0x238>)
 80149a6:	f001 f849 	bl	8015a3c <rmw_uxrce_init_client_memory>
 80149aa:	220f      	movs	r2, #15
 80149ac:	4954      	ldr	r1, [pc, #336]	; (8014b00 <rmw_init+0x23c>)
 80149ae:	4855      	ldr	r0, [pc, #340]	; (8014b04 <rmw_init+0x240>)
 80149b0:	f001 f8e4 	bl	8015b7c <rmw_uxrce_init_topic_memory>
 80149b4:	2203      	movs	r2, #3
 80149b6:	4954      	ldr	r1, [pc, #336]	; (8014b08 <rmw_init+0x244>)
 80149b8:	4854      	ldr	r0, [pc, #336]	; (8014b0c <rmw_init+0x248>)
 80149ba:	f001 f91f 	bl	8015bfc <rmw_uxrce_init_init_options_impl_memory>
 80149be:	2204      	movs	r2, #4
 80149c0:	4953      	ldr	r1, [pc, #332]	; (8014b10 <rmw_init+0x24c>)
 80149c2:	4854      	ldr	r0, [pc, #336]	; (8014b14 <rmw_init+0x250>)
 80149c4:	f001 f93a 	bl	8015c3c <rmw_uxrce_init_wait_set_memory>
 80149c8:	4953      	ldr	r1, [pc, #332]	; (8014b18 <rmw_init+0x254>)
 80149ca:	4854      	ldr	r0, [pc, #336]	; (8014b1c <rmw_init+0x258>)
 80149cc:	2204      	movs	r2, #4
 80149ce:	f001 f955 	bl	8015c7c <rmw_uxrce_init_guard_condition_memory>
 80149d2:	4642      	mov	r2, r8
 80149d4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80149d6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80149d8:	f000 fff8 	bl	80159cc <rmw_uxrce_transport_init>
 80149dc:	4607      	mov	r7, r0
 80149de:	2800      	cmp	r0, #0
 80149e0:	d158      	bne.n	8014a94 <rmw_init+0x1d0>
 80149e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80149e4:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80149e8:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80149ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80149ee:	4628      	mov	r0, r5
 80149f0:	f002 fbf6 	bl	80171e0 <uxr_init_session>
 80149f4:	4622      	mov	r2, r4
 80149f6:	494a      	ldr	r1, [pc, #296]	; (8014b20 <rmw_init+0x25c>)
 80149f8:	4628      	mov	r0, r5
 80149fa:	f002 fc15 	bl	8017228 <uxr_set_topic_callback>
 80149fe:	463a      	mov	r2, r7
 8014a00:	4948      	ldr	r1, [pc, #288]	; (8014b24 <rmw_init+0x260>)
 8014a02:	4628      	mov	r0, r5
 8014a04:	f002 fc0c 	bl	8017220 <uxr_set_status_callback>
 8014a08:	463a      	mov	r2, r7
 8014a0a:	4947      	ldr	r1, [pc, #284]	; (8014b28 <rmw_init+0x264>)
 8014a0c:	4628      	mov	r0, r5
 8014a0e:	f002 fc0f 	bl	8017230 <uxr_set_request_callback>
 8014a12:	463a      	mov	r2, r7
 8014a14:	4945      	ldr	r1, [pc, #276]	; (8014b2c <rmw_init+0x268>)
 8014a16:	4628      	mov	r0, r5
 8014a18:	f002 fc0e 	bl	8017238 <uxr_set_reply_callback>
 8014a1c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014a20:	2304      	movs	r3, #4
 8014a22:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8014a26:	0092      	lsls	r2, r2, #2
 8014a28:	4628      	mov	r0, r5
 8014a2a:	f002 fc45 	bl	80172b8 <uxr_create_input_reliable_stream>
 8014a2e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014a32:	2304      	movs	r3, #4
 8014a34:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8014a38:	0092      	lsls	r2, r2, #2
 8014a3a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8014a3e:	4628      	mov	r0, r5
 8014a40:	f002 fc10 	bl	8017264 <uxr_create_output_reliable_stream>
 8014a44:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8014a48:	4628      	mov	r0, r5
 8014a4a:	f002 fc2f 	bl	80172ac <uxr_create_input_best_effort_stream>
 8014a4e:	f241 3194 	movw	r1, #5012	; 0x1394
 8014a52:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8014a56:	4628      	mov	r0, r5
 8014a58:	4421      	add	r1, r4
 8014a5a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014a5e:	f002 fbef 	bl	8017240 <uxr_create_output_best_effort_stream>
 8014a62:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8014a66:	4628      	mov	r0, r5
 8014a68:	f003 f978 	bl	8017d5c <uxr_create_session>
 8014a6c:	b1f8      	cbz	r0, 8014aae <rmw_init+0x1ea>
 8014a6e:	4638      	mov	r0, r7
 8014a70:	b003      	add	sp, #12
 8014a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a76:	270b      	movs	r7, #11
 8014a78:	4638      	mov	r0, r7
 8014a7a:	b003      	add	sp, #12
 8014a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a80:	2701      	movs	r7, #1
 8014a82:	4638      	mov	r0, r7
 8014a84:	b003      	add	sp, #12
 8014a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a8a:	270c      	movs	r7, #12
 8014a8c:	4638      	mov	r0, r7
 8014a8e:	b003      	add	sp, #12
 8014a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a94:	4648      	mov	r0, r9
 8014a96:	f002 f9b1 	bl	8016dfc <uxr_close_custom_transport>
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	480c      	ldr	r0, [pc, #48]	; (8014ad0 <rmw_init+0x20c>)
 8014a9e:	f008 fa83 	bl	801cfa8 <put_memory>
 8014aa2:	4638      	mov	r0, r7
 8014aa4:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8014aa8:	b003      	add	sp, #12
 8014aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014aae:	4648      	mov	r0, r9
 8014ab0:	f002 f9a4 	bl	8016dfc <uxr_close_custom_transport>
 8014ab4:	4621      	mov	r1, r4
 8014ab6:	4806      	ldr	r0, [pc, #24]	; (8014ad0 <rmw_init+0x20c>)
 8014ab8:	f008 fa76 	bl	801cfa8 <put_memory>
 8014abc:	64f7      	str	r7, [r6, #76]	; 0x4c
 8014abe:	2701      	movs	r7, #1
 8014ac0:	e7d5      	b.n	8014a6e <rmw_init+0x1aa>
 8014ac2:	bf00      	nop
 8014ac4:	08024a34 	.word	0x08024a34
 8014ac8:	20016e0c 	.word	0x20016e0c
 8014acc:	200130b8 	.word	0x200130b8
 8014ad0:	20016dfc 	.word	0x20016dfc
 8014ad4:	20014660 	.word	0x20014660
 8014ad8:	200126dc 	.word	0x200126dc
 8014adc:	20016dcc 	.word	0x20016dcc
 8014ae0:	20016760 	.word	0x20016760
 8014ae4:	20016e1c 	.word	0x20016e1c
 8014ae8:	20012780 	.word	0x20012780
 8014aec:	20016ddc 	.word	0x20016ddc
 8014af0:	20012ff0 	.word	0x20012ff0
 8014af4:	20016dec 	.word	0x20016dec
 8014af8:	20012510 	.word	0x20012510
 8014afc:	200124fc 	.word	0x200124fc
 8014b00:	20016b98 	.word	0x20016b98
 8014b04:	20016e2c 	.word	0x20016e2c
 8014b08:	20012658 	.word	0x20012658
 8014b0c:	20016dbc 	.word	0x20016dbc
 8014b10:	20016d3c 	.word	0x20016d3c
 8014b14:	20016e3c 	.word	0x20016e3c
 8014b18:	200125d8 	.word	0x200125d8
 8014b1c:	20016dac 	.word	0x20016dac
 8014b20:	0801cdc1 	.word	0x0801cdc1
 8014b24:	0801cdb9 	.word	0x0801cdb9
 8014b28:	0801ce59 	.word	0x0801ce59
 8014b2c:	0801cef5 	.word	0x0801cef5

08014b30 <rmw_context_fini>:
 8014b30:	4b17      	ldr	r3, [pc, #92]	; (8014b90 <rmw_context_fini+0x60>)
 8014b32:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8014b34:	b570      	push	{r4, r5, r6, lr}
 8014b36:	681c      	ldr	r4, [r3, #0]
 8014b38:	4605      	mov	r5, r0
 8014b3a:	b334      	cbz	r4, 8014b8a <rmw_context_fini+0x5a>
 8014b3c:	2600      	movs	r6, #0
 8014b3e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8014b42:	6902      	ldr	r2, [r0, #16]
 8014b44:	428a      	cmp	r2, r1
 8014b46:	d018      	beq.n	8014b7a <rmw_context_fini+0x4a>
 8014b48:	2c00      	cmp	r4, #0
 8014b4a:	d1f8      	bne.n	8014b3e <rmw_context_fini+0xe>
 8014b4c:	b189      	cbz	r1, 8014b72 <rmw_context_fini+0x42>
 8014b4e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8014b52:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8014b56:	789b      	ldrb	r3, [r3, #2]
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	bf14      	ite	ne
 8014b5c:	210a      	movne	r1, #10
 8014b5e:	2100      	moveq	r1, #0
 8014b60:	f003 f8d4 	bl	8017d0c <uxr_delete_session_retries>
 8014b64:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8014b66:	f001 f8a9 	bl	8015cbc <rmw_uxrce_fini_session_memory>
 8014b6a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8014b6c:	3010      	adds	r0, #16
 8014b6e:	f002 f945 	bl	8016dfc <uxr_close_custom_transport>
 8014b72:	2300      	movs	r3, #0
 8014b74:	4630      	mov	r0, r6
 8014b76:	64eb      	str	r3, [r5, #76]	; 0x4c
 8014b78:	bd70      	pop	{r4, r5, r6, pc}
 8014b7a:	3018      	adds	r0, #24
 8014b7c:	f000 f89c 	bl	8014cb8 <rmw_destroy_node>
 8014b80:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8014b82:	4606      	mov	r6, r0
 8014b84:	2c00      	cmp	r4, #0
 8014b86:	d1da      	bne.n	8014b3e <rmw_context_fini+0xe>
 8014b88:	e7e0      	b.n	8014b4c <rmw_context_fini+0x1c>
 8014b8a:	4626      	mov	r6, r4
 8014b8c:	e7de      	b.n	8014b4c <rmw_context_fini+0x1c>
 8014b8e:	bf00      	nop
 8014b90:	20016dcc 	.word	0x20016dcc

08014b94 <create_node>:
 8014b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b98:	b083      	sub	sp, #12
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d064      	beq.n	8014c68 <create_node+0xd4>
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	4838      	ldr	r0, [pc, #224]	; (8014c84 <create_node+0xf0>)
 8014ba2:	460f      	mov	r7, r1
 8014ba4:	4690      	mov	r8, r2
 8014ba6:	461d      	mov	r5, r3
 8014ba8:	f008 f9ee 	bl	801cf88 <get_memory>
 8014bac:	2800      	cmp	r0, #0
 8014bae:	d05b      	beq.n	8014c68 <create_node+0xd4>
 8014bb0:	6884      	ldr	r4, [r0, #8]
 8014bb2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014bb4:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8014bb8:	f104 0518 	add.w	r5, r4, #24
 8014bbc:	6123      	str	r3, [r4, #16]
 8014bbe:	f008 fa4b 	bl	801d058 <rmw_get_implementation_identifier>
 8014bc2:	f8c4 9020 	str.w	r9, [r4, #32]
 8014bc6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8014bca:	4630      	mov	r0, r6
 8014bcc:	f7eb fb98 	bl	8000300 <strlen>
 8014bd0:	1c42      	adds	r2, r0, #1
 8014bd2:	2a3c      	cmp	r2, #60	; 0x3c
 8014bd4:	d840      	bhi.n	8014c58 <create_node+0xc4>
 8014bd6:	4648      	mov	r0, r9
 8014bd8:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8014bdc:	4631      	mov	r1, r6
 8014bde:	f00b f98e 	bl	801fefe <memcpy>
 8014be2:	4638      	mov	r0, r7
 8014be4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8014be8:	f7eb fb8a 	bl	8000300 <strlen>
 8014bec:	1c42      	adds	r2, r0, #1
 8014bee:	2a3c      	cmp	r2, #60	; 0x3c
 8014bf0:	d832      	bhi.n	8014c58 <create_node+0xc4>
 8014bf2:	4639      	mov	r1, r7
 8014bf4:	4648      	mov	r0, r9
 8014bf6:	f00b f982 	bl	801fefe <memcpy>
 8014bfa:	6923      	ldr	r3, [r4, #16]
 8014bfc:	2101      	movs	r1, #1
 8014bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c02:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8014c06:	1842      	adds	r2, r0, r1
 8014c08:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8014c0c:	f002 f8fa 	bl	8016e04 <uxr_object_id>
 8014c10:	6160      	str	r0, [r4, #20]
 8014c12:	783b      	ldrb	r3, [r7, #0]
 8014c14:	2b2f      	cmp	r3, #47	; 0x2f
 8014c16:	d12c      	bne.n	8014c72 <create_node+0xde>
 8014c18:	787b      	ldrb	r3, [r7, #1]
 8014c1a:	bb53      	cbnz	r3, 8014c72 <create_node+0xde>
 8014c1c:	4633      	mov	r3, r6
 8014c1e:	4a1a      	ldr	r2, [pc, #104]	; (8014c88 <create_node+0xf4>)
 8014c20:	213c      	movs	r1, #60	; 0x3c
 8014c22:	481a      	ldr	r0, [pc, #104]	; (8014c8c <create_node+0xf8>)
 8014c24:	f00a ff0e 	bl	801fa44 <sniprintf>
 8014c28:	6920      	ldr	r0, [r4, #16]
 8014c2a:	2106      	movs	r1, #6
 8014c2c:	fa1f f388 	uxth.w	r3, r8
 8014c30:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8014c34:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014c38:	9101      	str	r1, [sp, #4]
 8014c3a:	4914      	ldr	r1, [pc, #80]	; (8014c8c <create_node+0xf8>)
 8014c3c:	9100      	str	r1, [sp, #0]
 8014c3e:	6811      	ldr	r1, [r2, #0]
 8014c40:	6962      	ldr	r2, [r4, #20]
 8014c42:	f001 fe31 	bl	80168a8 <uxr_buffer_create_participant_bin>
 8014c46:	4602      	mov	r2, r0
 8014c48:	6920      	ldr	r0, [r4, #16]
 8014c4a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014c4e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014c52:	f001 f9b7 	bl	8015fc4 <run_xrce_session>
 8014c56:	b918      	cbnz	r0, 8014c60 <create_node+0xcc>
 8014c58:	4628      	mov	r0, r5
 8014c5a:	2500      	movs	r5, #0
 8014c5c:	f001 f834 	bl	8015cc8 <rmw_uxrce_fini_node_memory>
 8014c60:	4628      	mov	r0, r5
 8014c62:	b003      	add	sp, #12
 8014c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c68:	2500      	movs	r5, #0
 8014c6a:	4628      	mov	r0, r5
 8014c6c:	b003      	add	sp, #12
 8014c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c72:	463b      	mov	r3, r7
 8014c74:	4a06      	ldr	r2, [pc, #24]	; (8014c90 <create_node+0xfc>)
 8014c76:	213c      	movs	r1, #60	; 0x3c
 8014c78:	9600      	str	r6, [sp, #0]
 8014c7a:	4804      	ldr	r0, [pc, #16]	; (8014c8c <create_node+0xf8>)
 8014c7c:	f00a fee2 	bl	801fa44 <sniprintf>
 8014c80:	e7d2      	b.n	8014c28 <create_node+0x94>
 8014c82:	bf00      	nop
 8014c84:	20016dcc 	.word	0x20016dcc
 8014c88:	080243d4 	.word	0x080243d4
 8014c8c:	20012380 	.word	0x20012380
 8014c90:	08023dd0 	.word	0x08023dd0

08014c94 <rmw_create_node>:
 8014c94:	468c      	mov	ip, r1
 8014c96:	4611      	mov	r1, r2
 8014c98:	f1bc 0f00 	cmp.w	ip, #0
 8014c9c:	d00a      	beq.n	8014cb4 <rmw_create_node+0x20>
 8014c9e:	f89c 3000 	ldrb.w	r3, [ip]
 8014ca2:	b13b      	cbz	r3, 8014cb4 <rmw_create_node+0x20>
 8014ca4:	b132      	cbz	r2, 8014cb4 <rmw_create_node+0x20>
 8014ca6:	7813      	ldrb	r3, [r2, #0]
 8014ca8:	b123      	cbz	r3, 8014cb4 <rmw_create_node+0x20>
 8014caa:	4603      	mov	r3, r0
 8014cac:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8014cae:	4660      	mov	r0, ip
 8014cb0:	f7ff bf70 	b.w	8014b94 <create_node>
 8014cb4:	2000      	movs	r0, #0
 8014cb6:	4770      	bx	lr

08014cb8 <rmw_destroy_node>:
 8014cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cba:	b328      	cbz	r0, 8014d08 <rmw_destroy_node+0x50>
 8014cbc:	4607      	mov	r7, r0
 8014cbe:	6800      	ldr	r0, [r0, #0]
 8014cc0:	b120      	cbz	r0, 8014ccc <rmw_destroy_node+0x14>
 8014cc2:	4b37      	ldr	r3, [pc, #220]	; (8014da0 <rmw_destroy_node+0xe8>)
 8014cc4:	6819      	ldr	r1, [r3, #0]
 8014cc6:	f7eb fabb 	bl	8000240 <strcmp>
 8014cca:	b9e8      	cbnz	r0, 8014d08 <rmw_destroy_node+0x50>
 8014ccc:	687d      	ldr	r5, [r7, #4]
 8014cce:	b1dd      	cbz	r5, 8014d08 <rmw_destroy_node+0x50>
 8014cd0:	4b34      	ldr	r3, [pc, #208]	; (8014da4 <rmw_destroy_node+0xec>)
 8014cd2:	681c      	ldr	r4, [r3, #0]
 8014cd4:	2c00      	cmp	r4, #0
 8014cd6:	d060      	beq.n	8014d9a <rmw_destroy_node+0xe2>
 8014cd8:	2600      	movs	r6, #0
 8014cda:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014cde:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8014ce2:	429d      	cmp	r5, r3
 8014ce4:	d013      	beq.n	8014d0e <rmw_destroy_node+0x56>
 8014ce6:	2c00      	cmp	r4, #0
 8014ce8:	d1f7      	bne.n	8014cda <rmw_destroy_node+0x22>
 8014cea:	4b2f      	ldr	r3, [pc, #188]	; (8014da8 <rmw_destroy_node+0xf0>)
 8014cec:	681c      	ldr	r4, [r3, #0]
 8014cee:	b1c4      	cbz	r4, 8014d22 <rmw_destroy_node+0x6a>
 8014cf0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014cf4:	6a0b      	ldr	r3, [r1, #32]
 8014cf6:	429d      	cmp	r5, r3
 8014cf8:	d1f9      	bne.n	8014cee <rmw_destroy_node+0x36>
 8014cfa:	317c      	adds	r1, #124	; 0x7c
 8014cfc:	4638      	mov	r0, r7
 8014cfe:	f000 fdaf 	bl	8015860 <rmw_destroy_subscription>
 8014d02:	2801      	cmp	r0, #1
 8014d04:	4606      	mov	r6, r0
 8014d06:	d1f2      	bne.n	8014cee <rmw_destroy_node+0x36>
 8014d08:	2601      	movs	r6, #1
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d0e:	3184      	adds	r1, #132	; 0x84
 8014d10:	4638      	mov	r0, r7
 8014d12:	f000 f9b1 	bl	8015078 <rmw_destroy_publisher>
 8014d16:	2801      	cmp	r0, #1
 8014d18:	4606      	mov	r6, r0
 8014d1a:	d0f5      	beq.n	8014d08 <rmw_destroy_node+0x50>
 8014d1c:	2c00      	cmp	r4, #0
 8014d1e:	d1dc      	bne.n	8014cda <rmw_destroy_node+0x22>
 8014d20:	e7e3      	b.n	8014cea <rmw_destroy_node+0x32>
 8014d22:	4b22      	ldr	r3, [pc, #136]	; (8014dac <rmw_destroy_node+0xf4>)
 8014d24:	681c      	ldr	r4, [r3, #0]
 8014d26:	b16c      	cbz	r4, 8014d44 <rmw_destroy_node+0x8c>
 8014d28:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014d2c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014d2e:	429d      	cmp	r5, r3
 8014d30:	d1f9      	bne.n	8014d26 <rmw_destroy_node+0x6e>
 8014d32:	317c      	adds	r1, #124	; 0x7c
 8014d34:	4638      	mov	r0, r7
 8014d36:	f000 fc1d 	bl	8015574 <rmw_destroy_service>
 8014d3a:	2801      	cmp	r0, #1
 8014d3c:	4606      	mov	r6, r0
 8014d3e:	d0e3      	beq.n	8014d08 <rmw_destroy_node+0x50>
 8014d40:	2c00      	cmp	r4, #0
 8014d42:	d1f1      	bne.n	8014d28 <rmw_destroy_node+0x70>
 8014d44:	4b1a      	ldr	r3, [pc, #104]	; (8014db0 <rmw_destroy_node+0xf8>)
 8014d46:	681c      	ldr	r4, [r3, #0]
 8014d48:	b16c      	cbz	r4, 8014d66 <rmw_destroy_node+0xae>
 8014d4a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014d4e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014d50:	429d      	cmp	r5, r3
 8014d52:	d1f9      	bne.n	8014d48 <rmw_destroy_node+0x90>
 8014d54:	317c      	adds	r1, #124	; 0x7c
 8014d56:	4638      	mov	r0, r7
 8014d58:	f008 f93a 	bl	801cfd0 <rmw_destroy_client>
 8014d5c:	2801      	cmp	r0, #1
 8014d5e:	4606      	mov	r6, r0
 8014d60:	d0d2      	beq.n	8014d08 <rmw_destroy_node+0x50>
 8014d62:	2c00      	cmp	r4, #0
 8014d64:	d1f1      	bne.n	8014d4a <rmw_destroy_node+0x92>
 8014d66:	6928      	ldr	r0, [r5, #16]
 8014d68:	696a      	ldr	r2, [r5, #20]
 8014d6a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014d6e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014d72:	6819      	ldr	r1, [r3, #0]
 8014d74:	f001 fd4c 	bl	8016810 <uxr_buffer_delete_entity>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	6928      	ldr	r0, [r5, #16]
 8014d7c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014d80:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014d84:	f001 f91e 	bl	8015fc4 <run_xrce_session>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	4638      	mov	r0, r7
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	bf08      	it	eq
 8014d90:	2602      	moveq	r6, #2
 8014d92:	f000 ff99 	bl	8015cc8 <rmw_uxrce_fini_node_memory>
 8014d96:	4630      	mov	r0, r6
 8014d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d9a:	4626      	mov	r6, r4
 8014d9c:	e7a5      	b.n	8014cea <rmw_destroy_node+0x32>
 8014d9e:	bf00      	nop
 8014da0:	08024a34 	.word	0x08024a34
 8014da4:	20016ddc 	.word	0x20016ddc
 8014da8:	20016e1c 	.word	0x20016e1c
 8014dac:	20016dec 	.word	0x20016dec
 8014db0:	200124fc 	.word	0x200124fc

08014db4 <rmw_node_get_graph_guard_condition>:
 8014db4:	6843      	ldr	r3, [r0, #4]
 8014db6:	6918      	ldr	r0, [r3, #16]
 8014db8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8014dbc:	4770      	bx	lr
 8014dbe:	bf00      	nop

08014dc0 <flush_session>:
 8014dc0:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8014dc2:	f002 be59 	b.w	8017a78 <uxr_run_session_until_confirm_delivery>
 8014dc6:	bf00      	nop

08014dc8 <rmw_publish>:
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	d053      	beq.n	8014e74 <rmw_publish+0xac>
 8014dcc:	b570      	push	{r4, r5, r6, lr}
 8014dce:	460d      	mov	r5, r1
 8014dd0:	b08e      	sub	sp, #56	; 0x38
 8014dd2:	2900      	cmp	r1, #0
 8014dd4:	d04b      	beq.n	8014e6e <rmw_publish+0xa6>
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	6800      	ldr	r0, [r0, #0]
 8014dda:	f001 fa05 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 8014dde:	2800      	cmp	r0, #0
 8014de0:	d045      	beq.n	8014e6e <rmw_publish+0xa6>
 8014de2:	6866      	ldr	r6, [r4, #4]
 8014de4:	2e00      	cmp	r6, #0
 8014de6:	d042      	beq.n	8014e6e <rmw_publish+0xa6>
 8014de8:	69b4      	ldr	r4, [r6, #24]
 8014dea:	4628      	mov	r0, r5
 8014dec:	6923      	ldr	r3, [r4, #16]
 8014dee:	4798      	blx	r3
 8014df0:	69f3      	ldr	r3, [r6, #28]
 8014df2:	9005      	str	r0, [sp, #20]
 8014df4:	b113      	cbz	r3, 8014dfc <rmw_publish+0x34>
 8014df6:	a805      	add	r0, sp, #20
 8014df8:	4798      	blx	r3
 8014dfa:	9805      	ldr	r0, [sp, #20]
 8014dfc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014e00:	691b      	ldr	r3, [r3, #16]
 8014e02:	9000      	str	r0, [sp, #0]
 8014e04:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8014e08:	6972      	ldr	r2, [r6, #20]
 8014e0a:	ab06      	add	r3, sp, #24
 8014e0c:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8014e0e:	f004 f8ad 	bl	8018f6c <uxr_prepare_output_stream>
 8014e12:	b1d8      	cbz	r0, 8014e4c <rmw_publish+0x84>
 8014e14:	68a3      	ldr	r3, [r4, #8]
 8014e16:	a906      	add	r1, sp, #24
 8014e18:	4628      	mov	r0, r5
 8014e1a:	4798      	blx	r3
 8014e1c:	6a33      	ldr	r3, [r6, #32]
 8014e1e:	4604      	mov	r4, r0
 8014e20:	b10b      	cbz	r3, 8014e26 <rmw_publish+0x5e>
 8014e22:	a806      	add	r0, sp, #24
 8014e24:	4798      	blx	r3
 8014e26:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8014e2a:	2b01      	cmp	r3, #1
 8014e2c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014e30:	d022      	beq.n	8014e78 <rmw_publish+0xb0>
 8014e32:	6918      	ldr	r0, [r3, #16]
 8014e34:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8014e36:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014e3a:	f002 fe1d 	bl	8017a78 <uxr_run_session_until_confirm_delivery>
 8014e3e:	4020      	ands	r0, r4
 8014e40:	b2c4      	uxtb	r4, r0
 8014e42:	f084 0001 	eor.w	r0, r4, #1
 8014e46:	b2c0      	uxtb	r0, r0
 8014e48:	b00e      	add	sp, #56	; 0x38
 8014e4a:	bd70      	pop	{r4, r5, r6, pc}
 8014e4c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014e50:	6918      	ldr	r0, [r3, #16]
 8014e52:	9b05      	ldr	r3, [sp, #20]
 8014e54:	9602      	str	r6, [sp, #8]
 8014e56:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014e5a:	9300      	str	r3, [sp, #0]
 8014e5c:	4b09      	ldr	r3, [pc, #36]	; (8014e84 <rmw_publish+0xbc>)
 8014e5e:	9301      	str	r3, [sp, #4]
 8014e60:	ab06      	add	r3, sp, #24
 8014e62:	6972      	ldr	r2, [r6, #20]
 8014e64:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8014e66:	f004 f8b1 	bl	8018fcc <uxr_prepare_output_stream_fragmented>
 8014e6a:	2800      	cmp	r0, #0
 8014e6c:	d1d2      	bne.n	8014e14 <rmw_publish+0x4c>
 8014e6e:	2001      	movs	r0, #1
 8014e70:	b00e      	add	sp, #56	; 0x38
 8014e72:	bd70      	pop	{r4, r5, r6, pc}
 8014e74:	2001      	movs	r0, #1
 8014e76:	4770      	bx	lr
 8014e78:	6918      	ldr	r0, [r3, #16]
 8014e7a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014e7e:	f002 fa41 	bl	8017304 <uxr_flash_output_streams>
 8014e82:	e7de      	b.n	8014e42 <rmw_publish+0x7a>
 8014e84:	08014dc1 	.word	0x08014dc1

08014e88 <rmw_create_publisher>:
 8014e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e8c:	b087      	sub	sp, #28
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	f000 80d2 	beq.w	8015038 <rmw_create_publisher+0x1b0>
 8014e94:	460e      	mov	r6, r1
 8014e96:	2900      	cmp	r1, #0
 8014e98:	f000 80ce 	beq.w	8015038 <rmw_create_publisher+0x1b0>
 8014e9c:	4604      	mov	r4, r0
 8014e9e:	6800      	ldr	r0, [r0, #0]
 8014ea0:	4615      	mov	r5, r2
 8014ea2:	461f      	mov	r7, r3
 8014ea4:	f001 f9a0 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 8014ea8:	f080 0001 	eor.w	r0, r0, #1
 8014eac:	b2c0      	uxtb	r0, r0
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	f040 80c2 	bne.w	8015038 <rmw_create_publisher+0x1b0>
 8014eb4:	2d00      	cmp	r5, #0
 8014eb6:	f000 80bf 	beq.w	8015038 <rmw_create_publisher+0x1b0>
 8014eba:	782b      	ldrb	r3, [r5, #0]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	f000 80bb 	beq.w	8015038 <rmw_create_publisher+0x1b0>
 8014ec2:	2f00      	cmp	r7, #0
 8014ec4:	f000 80b8 	beq.w	8015038 <rmw_create_publisher+0x1b0>
 8014ec8:	485e      	ldr	r0, [pc, #376]	; (8015044 <rmw_create_publisher+0x1bc>)
 8014eca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014ece:	f008 f85b 	bl	801cf88 <get_memory>
 8014ed2:	2800      	cmp	r0, #0
 8014ed4:	f000 80b0 	beq.w	8015038 <rmw_create_publisher+0x1b0>
 8014ed8:	6884      	ldr	r4, [r0, #8]
 8014eda:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8014ede:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8014ee2:	f008 f8b9 	bl	801d058 <rmw_get_implementation_identifier>
 8014ee6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8014eea:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f7eb fa06 	bl	8000300 <strlen>
 8014ef4:	3001      	adds	r0, #1
 8014ef6:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8014efa:	283c      	cmp	r0, #60	; 0x3c
 8014efc:	f200 808f 	bhi.w	801501e <rmw_create_publisher+0x196>
 8014f00:	462b      	mov	r3, r5
 8014f02:	4a51      	ldr	r2, [pc, #324]	; (8015048 <rmw_create_publisher+0x1c0>)
 8014f04:	213c      	movs	r1, #60	; 0x3c
 8014f06:	4650      	mov	r0, sl
 8014f08:	f00a fd9c 	bl	801fa44 <sniprintf>
 8014f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014f10:	4639      	mov	r1, r7
 8014f12:	2250      	movs	r2, #80	; 0x50
 8014f14:	67e3      	str	r3, [r4, #124]	; 0x7c
 8014f16:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014f1a:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8014f1e:	f00a ffee 	bl	801fefe <memcpy>
 8014f22:	7a3b      	ldrb	r3, [r7, #8]
 8014f24:	4630      	mov	r0, r6
 8014f26:	4949      	ldr	r1, [pc, #292]	; (801504c <rmw_create_publisher+0x1c4>)
 8014f28:	2b02      	cmp	r3, #2
 8014f2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f2e:	bf0c      	ite	eq
 8014f30:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8014f34:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8014f38:	67a3      	str	r3, [r4, #120]	; 0x78
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014f40:	f001 f960 	bl	8016204 <get_message_typesupport_handle>
 8014f44:	2800      	cmp	r0, #0
 8014f46:	d06a      	beq.n	801501e <rmw_create_publisher+0x196>
 8014f48:	6842      	ldr	r2, [r0, #4]
 8014f4a:	61a2      	str	r2, [r4, #24]
 8014f4c:	2a00      	cmp	r2, #0
 8014f4e:	d066      	beq.n	801501e <rmw_create_publisher+0x196>
 8014f50:	4629      	mov	r1, r5
 8014f52:	463b      	mov	r3, r7
 8014f54:	4648      	mov	r0, r9
 8014f56:	f008 f8af 	bl	801d0b8 <create_topic>
 8014f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d062      	beq.n	8015026 <rmw_create_publisher+0x19e>
 8014f60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f64:	2103      	movs	r1, #3
 8014f66:	2506      	movs	r5, #6
 8014f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f6c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8014f70:	1c42      	adds	r2, r0, #1
 8014f72:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8014f76:	f001 ff45 	bl	8016e04 <uxr_object_id>
 8014f7a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8014f7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f82:	6120      	str	r0, [r4, #16]
 8014f84:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8014f88:	6910      	ldr	r0, [r2, #16]
 8014f8a:	9500      	str	r5, [sp, #0]
 8014f8c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014f90:	6819      	ldr	r1, [r3, #0]
 8014f92:	6922      	ldr	r2, [r4, #16]
 8014f94:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014f98:	f001 fcee 	bl	8016978 <uxr_buffer_create_publisher_bin>
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014fa2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014fa6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014faa:	f001 f80b 	bl	8015fc4 <run_xrce_session>
 8014fae:	b3b0      	cbz	r0, 801501e <rmw_create_publisher+0x196>
 8014fb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014fb4:	2105      	movs	r1, #5
 8014fb6:	f10d 0a10 	add.w	sl, sp, #16
 8014fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014fbe:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8014fc2:	1c42      	adds	r2, r0, #1
 8014fc4:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8014fc8:	f001 ff1c 	bl	8016e04 <uxr_object_id>
 8014fcc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014fd0:	4639      	mov	r1, r7
 8014fd2:	6160      	str	r0, [r4, #20]
 8014fd4:	691e      	ldr	r6, [r3, #16]
 8014fd6:	4650      	mov	r0, sl
 8014fd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014fdc:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8014fe0:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8014fe4:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8014fe8:	f001 f808 	bl	8015ffc <convert_qos_profile>
 8014fec:	9503      	str	r5, [sp, #12]
 8014fee:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014ff2:	9001      	str	r0, [sp, #4]
 8014ff4:	4630      	mov	r0, r6
 8014ff6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014ffa:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014ffe:	9300      	str	r3, [sp, #0]
 8015000:	6839      	ldr	r1, [r7, #0]
 8015002:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8015006:	f001 fd17 	bl	8016a38 <uxr_buffer_create_datawriter_bin>
 801500a:	4602      	mov	r2, r0
 801500c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015010:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015014:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015018:	f000 ffd4 	bl	8015fc4 <run_xrce_session>
 801501c:	b970      	cbnz	r0, 801503c <rmw_create_publisher+0x1b4>
 801501e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015020:	b108      	cbz	r0, 8015026 <rmw_create_publisher+0x19e>
 8015022:	f000 fec1 	bl	8015da8 <rmw_uxrce_fini_topic_memory>
 8015026:	4640      	mov	r0, r8
 8015028:	f04f 0800 	mov.w	r8, #0
 801502c:	f000 fe64 	bl	8015cf8 <rmw_uxrce_fini_publisher_memory>
 8015030:	4640      	mov	r0, r8
 8015032:	b007      	add	sp, #28
 8015034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015038:	f04f 0800 	mov.w	r8, #0
 801503c:	4640      	mov	r0, r8
 801503e:	b007      	add	sp, #28
 8015040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015044:	20016ddc 	.word	0x20016ddc
 8015048:	080243d4 	.word	0x080243d4
 801504c:	0802368c 	.word	0x0802368c

08015050 <rmw_publisher_get_actual_qos>:
 8015050:	b178      	cbz	r0, 8015072 <rmw_publisher_get_actual_qos+0x22>
 8015052:	b510      	push	{r4, lr}
 8015054:	fab1 f481 	clz	r4, r1
 8015058:	0964      	lsrs	r4, r4, #5
 801505a:	b141      	cbz	r1, 801506e <rmw_publisher_get_actual_qos+0x1e>
 801505c:	6843      	ldr	r3, [r0, #4]
 801505e:	2250      	movs	r2, #80	; 0x50
 8015060:	4608      	mov	r0, r1
 8015062:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8015066:	f00a ff4a 	bl	801fefe <memcpy>
 801506a:	4620      	mov	r0, r4
 801506c:	bd10      	pop	{r4, pc}
 801506e:	200b      	movs	r0, #11
 8015070:	bd10      	pop	{r4, pc}
 8015072:	200b      	movs	r0, #11
 8015074:	4770      	bx	lr
 8015076:	bf00      	nop

08015078 <rmw_destroy_publisher>:
 8015078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801507c:	b128      	cbz	r0, 801508a <rmw_destroy_publisher+0x12>
 801507e:	4604      	mov	r4, r0
 8015080:	6800      	ldr	r0, [r0, #0]
 8015082:	460d      	mov	r5, r1
 8015084:	f001 f8b0 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 8015088:	b918      	cbnz	r0, 8015092 <rmw_destroy_publisher+0x1a>
 801508a:	2401      	movs	r4, #1
 801508c:	4620      	mov	r0, r4
 801508e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015092:	6863      	ldr	r3, [r4, #4]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d0f8      	beq.n	801508a <rmw_destroy_publisher+0x12>
 8015098:	fab5 f485 	clz	r4, r5
 801509c:	0964      	lsrs	r4, r4, #5
 801509e:	2d00      	cmp	r5, #0
 80150a0:	d0f3      	beq.n	801508a <rmw_destroy_publisher+0x12>
 80150a2:	6828      	ldr	r0, [r5, #0]
 80150a4:	f001 f8a0 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	d0ee      	beq.n	801508a <rmw_destroy_publisher+0x12>
 80150ac:	686e      	ldr	r6, [r5, #4]
 80150ae:	2e00      	cmp	r6, #0
 80150b0:	d0eb      	beq.n	801508a <rmw_destroy_publisher+0x12>
 80150b2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80150b4:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 80150b8:	f008 f84e 	bl	801d158 <destroy_topic>
 80150bc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80150c0:	6972      	ldr	r2, [r6, #20]
 80150c2:	6918      	ldr	r0, [r3, #16]
 80150c4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80150c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80150cc:	6819      	ldr	r1, [r3, #0]
 80150ce:	f001 fb9f 	bl	8016810 <uxr_buffer_delete_entity>
 80150d2:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80150d6:	4680      	mov	r8, r0
 80150d8:	6932      	ldr	r2, [r6, #16]
 80150da:	6918      	ldr	r0, [r3, #16]
 80150dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80150e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80150e4:	6819      	ldr	r1, [r3, #0]
 80150e6:	f001 fb93 	bl	8016810 <uxr_buffer_delete_entity>
 80150ea:	4606      	mov	r6, r0
 80150ec:	6938      	ldr	r0, [r7, #16]
 80150ee:	4642      	mov	r2, r8
 80150f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80150f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80150f8:	f000 ff64 	bl	8015fc4 <run_xrce_session>
 80150fc:	693f      	ldr	r7, [r7, #16]
 80150fe:	4632      	mov	r2, r6
 8015100:	4606      	mov	r6, r0
 8015102:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8015106:	4638      	mov	r0, r7
 8015108:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801510c:	f000 ff5a 	bl	8015fc4 <run_xrce_session>
 8015110:	b126      	cbz	r6, 801511c <rmw_destroy_publisher+0xa4>
 8015112:	b118      	cbz	r0, 801511c <rmw_destroy_publisher+0xa4>
 8015114:	4628      	mov	r0, r5
 8015116:	f000 fdef 	bl	8015cf8 <rmw_uxrce_fini_publisher_memory>
 801511a:	e7b7      	b.n	801508c <rmw_destroy_publisher+0x14>
 801511c:	2402      	movs	r4, #2
 801511e:	e7f9      	b.n	8015114 <rmw_destroy_publisher+0x9c>

08015120 <rmw_send_request>:
 8015120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015124:	4604      	mov	r4, r0
 8015126:	6800      	ldr	r0, [r0, #0]
 8015128:	b08b      	sub	sp, #44	; 0x2c
 801512a:	460e      	mov	r6, r1
 801512c:	4615      	mov	r5, r2
 801512e:	b128      	cbz	r0, 801513c <rmw_send_request+0x1c>
 8015130:	4b21      	ldr	r3, [pc, #132]	; (80151b8 <rmw_send_request+0x98>)
 8015132:	6819      	ldr	r1, [r3, #0]
 8015134:	f7eb f884 	bl	8000240 <strcmp>
 8015138:	2800      	cmp	r0, #0
 801513a:	d139      	bne.n	80151b0 <rmw_send_request+0x90>
 801513c:	6864      	ldr	r4, [r4, #4]
 801513e:	2700      	movs	r7, #0
 8015140:	6963      	ldr	r3, [r4, #20]
 8015142:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8015146:	689b      	ldr	r3, [r3, #8]
 8015148:	4798      	blx	r3
 801514a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801514e:	4630      	mov	r0, r6
 8015150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015154:	4798      	blx	r3
 8015156:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801515a:	9000      	str	r0, [sp, #0]
 801515c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015160:	6922      	ldr	r2, [r4, #16]
 8015162:	ab02      	add	r3, sp, #8
 8015164:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8015166:	f003 ff01 	bl	8018f6c <uxr_prepare_output_stream>
 801516a:	e9c5 0700 	strd	r0, r7, [r5]
 801516e:	b198      	cbz	r0, 8015198 <rmw_send_request+0x78>
 8015170:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015174:	a902      	add	r1, sp, #8
 8015176:	4630      	mov	r0, r6
 8015178:	4798      	blx	r3
 801517a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801517e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015182:	2b01      	cmp	r3, #1
 8015184:	d00c      	beq.n	80151a0 <rmw_send_request+0x80>
 8015186:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8015188:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801518c:	f002 fc74 	bl	8017a78 <uxr_run_session_until_confirm_delivery>
 8015190:	4638      	mov	r0, r7
 8015192:	b00b      	add	sp, #44	; 0x2c
 8015194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015198:	2001      	movs	r0, #1
 801519a:	b00b      	add	sp, #44	; 0x2c
 801519c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80151a4:	f002 f8ae 	bl	8017304 <uxr_flash_output_streams>
 80151a8:	4638      	mov	r0, r7
 80151aa:	b00b      	add	sp, #44	; 0x2c
 80151ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151b0:	200c      	movs	r0, #12
 80151b2:	b00b      	add	sp, #44	; 0x2c
 80151b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151b8:	08024a34 	.word	0x08024a34

080151bc <rmw_take_request>:
 80151bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151c0:	4605      	mov	r5, r0
 80151c2:	6800      	ldr	r0, [r0, #0]
 80151c4:	b089      	sub	sp, #36	; 0x24
 80151c6:	460c      	mov	r4, r1
 80151c8:	4690      	mov	r8, r2
 80151ca:	461e      	mov	r6, r3
 80151cc:	b128      	cbz	r0, 80151da <rmw_take_request+0x1e>
 80151ce:	4b28      	ldr	r3, [pc, #160]	; (8015270 <rmw_take_request+0xb4>)
 80151d0:	6819      	ldr	r1, [r3, #0]
 80151d2:	f7eb f835 	bl	8000240 <strcmp>
 80151d6:	2800      	cmp	r0, #0
 80151d8:	d146      	bne.n	8015268 <rmw_take_request+0xac>
 80151da:	b10e      	cbz	r6, 80151e0 <rmw_take_request+0x24>
 80151dc:	2300      	movs	r3, #0
 80151de:	7033      	strb	r3, [r6, #0]
 80151e0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80151e4:	f000 fe70 	bl	8015ec8 <rmw_uxrce_clean_expired_static_input_buffer>
 80151e8:	4648      	mov	r0, r9
 80151ea:	f000 fe43 	bl	8015e74 <rmw_uxrce_find_static_input_buffer_by_owner>
 80151ee:	4607      	mov	r7, r0
 80151f0:	b3b0      	cbz	r0, 8015260 <rmw_take_request+0xa4>
 80151f2:	6885      	ldr	r5, [r0, #8]
 80151f4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80151f8:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 80151fc:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8015200:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8015204:	7423      	strb	r3, [r4, #16]
 8015206:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801520a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801520e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8015212:	74e3      	strb	r3, [r4, #19]
 8015214:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8015218:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801521c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8015220:	6161      	str	r1, [r4, #20]
 8015222:	61a2      	str	r2, [r4, #24]
 8015224:	61e3      	str	r3, [r4, #28]
 8015226:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801522a:	689b      	ldr	r3, [r3, #8]
 801522c:	4798      	blx	r3
 801522e:	6844      	ldr	r4, [r0, #4]
 8015230:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015234:	f105 0110 	add.w	r1, r5, #16
 8015238:	4668      	mov	r0, sp
 801523a:	f7fd f829 	bl	8012290 <ucdr_init_buffer>
 801523e:	4641      	mov	r1, r8
 8015240:	68e3      	ldr	r3, [r4, #12]
 8015242:	4668      	mov	r0, sp
 8015244:	4798      	blx	r3
 8015246:	4639      	mov	r1, r7
 8015248:	4604      	mov	r4, r0
 801524a:	480a      	ldr	r0, [pc, #40]	; (8015274 <rmw_take_request+0xb8>)
 801524c:	f007 feac 	bl	801cfa8 <put_memory>
 8015250:	b106      	cbz	r6, 8015254 <rmw_take_request+0x98>
 8015252:	7034      	strb	r4, [r6, #0]
 8015254:	f084 0001 	eor.w	r0, r4, #1
 8015258:	b2c0      	uxtb	r0, r0
 801525a:	b009      	add	sp, #36	; 0x24
 801525c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015260:	2001      	movs	r0, #1
 8015262:	b009      	add	sp, #36	; 0x24
 8015264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015268:	200c      	movs	r0, #12
 801526a:	b009      	add	sp, #36	; 0x24
 801526c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015270:	08024a34 	.word	0x08024a34
 8015274:	20016e0c 	.word	0x20016e0c

08015278 <rmw_send_response>:
 8015278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801527a:	4605      	mov	r5, r0
 801527c:	6800      	ldr	r0, [r0, #0]
 801527e:	b091      	sub	sp, #68	; 0x44
 8015280:	460c      	mov	r4, r1
 8015282:	4616      	mov	r6, r2
 8015284:	b128      	cbz	r0, 8015292 <rmw_send_response+0x1a>
 8015286:	4b29      	ldr	r3, [pc, #164]	; (801532c <rmw_send_response+0xb4>)
 8015288:	6819      	ldr	r1, [r3, #0]
 801528a:	f7ea ffd9 	bl	8000240 <strcmp>
 801528e:	2800      	cmp	r0, #0
 8015290:	d141      	bne.n	8015316 <rmw_send_response+0x9e>
 8015292:	686d      	ldr	r5, [r5, #4]
 8015294:	68a1      	ldr	r1, [r4, #8]
 8015296:	6860      	ldr	r0, [r4, #4]
 8015298:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801529a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801529e:	9307      	str	r3, [sp, #28]
 80152a0:	4623      	mov	r3, r4
 80152a2:	9206      	str	r2, [sp, #24]
 80152a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152a8:	789b      	ldrb	r3, [r3, #2]
 80152aa:	f88d 2017 	strb.w	r2, [sp, #23]
 80152ae:	f88d 3016 	strb.w	r3, [sp, #22]
 80152b2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80152b6:	68e2      	ldr	r2, [r4, #12]
 80152b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80152bc:	ab02      	add	r3, sp, #8
 80152be:	696c      	ldr	r4, [r5, #20]
 80152c0:	c307      	stmia	r3!, {r0, r1, r2}
 80152c2:	68e3      	ldr	r3, [r4, #12]
 80152c4:	4798      	blx	r3
 80152c6:	6844      	ldr	r4, [r0, #4]
 80152c8:	4630      	mov	r0, r6
 80152ca:	6923      	ldr	r3, [r4, #16]
 80152cc:	4798      	blx	r3
 80152ce:	f100 0318 	add.w	r3, r0, #24
 80152d2:	6938      	ldr	r0, [r7, #16]
 80152d4:	9300      	str	r3, [sp, #0]
 80152d6:	ab08      	add	r3, sp, #32
 80152d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80152dc:	692a      	ldr	r2, [r5, #16]
 80152de:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80152e0:	f003 fe44 	bl	8018f6c <uxr_prepare_output_stream>
 80152e4:	b910      	cbnz	r0, 80152ec <rmw_send_response+0x74>
 80152e6:	2001      	movs	r0, #1
 80152e8:	b011      	add	sp, #68	; 0x44
 80152ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152ec:	a902      	add	r1, sp, #8
 80152ee:	a808      	add	r0, sp, #32
 80152f0:	f004 ffa8 	bl	801a244 <uxr_serialize_SampleIdentity>
 80152f4:	68a3      	ldr	r3, [r4, #8]
 80152f6:	a908      	add	r1, sp, #32
 80152f8:	4630      	mov	r0, r6
 80152fa:	4798      	blx	r3
 80152fc:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8015300:	6938      	ldr	r0, [r7, #16]
 8015302:	2b01      	cmp	r3, #1
 8015304:	d00a      	beq.n	801531c <rmw_send_response+0xa4>
 8015306:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015308:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801530c:	f002 fbb4 	bl	8017a78 <uxr_run_session_until_confirm_delivery>
 8015310:	2000      	movs	r0, #0
 8015312:	b011      	add	sp, #68	; 0x44
 8015314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015316:	200c      	movs	r0, #12
 8015318:	b011      	add	sp, #68	; 0x44
 801531a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801531c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015320:	f001 fff0 	bl	8017304 <uxr_flash_output_streams>
 8015324:	2000      	movs	r0, #0
 8015326:	b011      	add	sp, #68	; 0x44
 8015328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801532a:	bf00      	nop
 801532c:	08024a34 	.word	0x08024a34

08015330 <rmw_take_response>:
 8015330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015334:	4604      	mov	r4, r0
 8015336:	6800      	ldr	r0, [r0, #0]
 8015338:	b088      	sub	sp, #32
 801533a:	460f      	mov	r7, r1
 801533c:	4690      	mov	r8, r2
 801533e:	461d      	mov	r5, r3
 8015340:	b120      	cbz	r0, 801534c <rmw_take_response+0x1c>
 8015342:	4b1d      	ldr	r3, [pc, #116]	; (80153b8 <rmw_take_response+0x88>)
 8015344:	6819      	ldr	r1, [r3, #0]
 8015346:	f7ea ff7b 	bl	8000240 <strcmp>
 801534a:	bb68      	cbnz	r0, 80153a8 <rmw_take_response+0x78>
 801534c:	b10d      	cbz	r5, 8015352 <rmw_take_response+0x22>
 801534e:	2300      	movs	r3, #0
 8015350:	702b      	strb	r3, [r5, #0]
 8015352:	6864      	ldr	r4, [r4, #4]
 8015354:	f000 fdb8 	bl	8015ec8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015358:	4620      	mov	r0, r4
 801535a:	f000 fd8b 	bl	8015e74 <rmw_uxrce_find_static_input_buffer_by_owner>
 801535e:	4606      	mov	r6, r0
 8015360:	b330      	cbz	r0, 80153b0 <rmw_take_response+0x80>
 8015362:	6963      	ldr	r3, [r4, #20]
 8015364:	6884      	ldr	r4, [r0, #8]
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801536c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015370:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8015374:	4798      	blx	r3
 8015376:	6847      	ldr	r7, [r0, #4]
 8015378:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801537c:	f104 0110 	add.w	r1, r4, #16
 8015380:	4668      	mov	r0, sp
 8015382:	f7fc ff85 	bl	8012290 <ucdr_init_buffer>
 8015386:	4641      	mov	r1, r8
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	4668      	mov	r0, sp
 801538c:	4798      	blx	r3
 801538e:	4631      	mov	r1, r6
 8015390:	4604      	mov	r4, r0
 8015392:	480a      	ldr	r0, [pc, #40]	; (80153bc <rmw_take_response+0x8c>)
 8015394:	f007 fe08 	bl	801cfa8 <put_memory>
 8015398:	b105      	cbz	r5, 801539c <rmw_take_response+0x6c>
 801539a:	702c      	strb	r4, [r5, #0]
 801539c:	f084 0001 	eor.w	r0, r4, #1
 80153a0:	b2c0      	uxtb	r0, r0
 80153a2:	b008      	add	sp, #32
 80153a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153a8:	200c      	movs	r0, #12
 80153aa:	b008      	add	sp, #32
 80153ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153b0:	2001      	movs	r0, #1
 80153b2:	b008      	add	sp, #32
 80153b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153b8:	08024a34 	.word	0x08024a34
 80153bc:	20016e0c 	.word	0x20016e0c

080153c0 <rmw_create_service>:
 80153c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153c4:	b091      	sub	sp, #68	; 0x44
 80153c6:	2900      	cmp	r1, #0
 80153c8:	f000 80bb 	beq.w	8015542 <rmw_create_service+0x182>
 80153cc:	4606      	mov	r6, r0
 80153ce:	2800      	cmp	r0, #0
 80153d0:	f000 80b7 	beq.w	8015542 <rmw_create_service+0x182>
 80153d4:	4614      	mov	r4, r2
 80153d6:	6800      	ldr	r0, [r0, #0]
 80153d8:	4689      	mov	r9, r1
 80153da:	461d      	mov	r5, r3
 80153dc:	f000 ff04 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 80153e0:	2c00      	cmp	r4, #0
 80153e2:	f000 80ae 	beq.w	8015542 <rmw_create_service+0x182>
 80153e6:	f080 0001 	eor.w	r0, r0, #1
 80153ea:	b2c0      	uxtb	r0, r0
 80153ec:	2800      	cmp	r0, #0
 80153ee:	f040 80a8 	bne.w	8015542 <rmw_create_service+0x182>
 80153f2:	7823      	ldrb	r3, [r4, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	f000 80a4 	beq.w	8015542 <rmw_create_service+0x182>
 80153fa:	2d00      	cmp	r5, #0
 80153fc:	f000 80a1 	beq.w	8015542 <rmw_create_service+0x182>
 8015400:	4856      	ldr	r0, [pc, #344]	; (801555c <rmw_create_service+0x19c>)
 8015402:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8015406:	f007 fdbf 	bl	801cf88 <get_memory>
 801540a:	4606      	mov	r6, r0
 801540c:	2800      	cmp	r0, #0
 801540e:	f000 8099 	beq.w	8015544 <rmw_create_service+0x184>
 8015412:	6887      	ldr	r7, [r0, #8]
 8015414:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8015418:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801541c:	f007 fe1c 	bl	801d058 <rmw_get_implementation_identifier>
 8015420:	67f8      	str	r0, [r7, #124]	; 0x7c
 8015422:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8015426:	4620      	mov	r0, r4
 8015428:	f7ea ff6a 	bl	8000300 <strlen>
 801542c:	1c42      	adds	r2, r0, #1
 801542e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8015432:	2a3c      	cmp	r2, #60	; 0x3c
 8015434:	f200 808a 	bhi.w	801554c <rmw_create_service+0x18c>
 8015438:	4621      	mov	r1, r4
 801543a:	4650      	mov	r0, sl
 801543c:	f00a fd5f 	bl	801fefe <memcpy>
 8015440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015444:	4629      	mov	r1, r5
 8015446:	2250      	movs	r2, #80	; 0x50
 8015448:	f107 0020 	add.w	r0, r7, #32
 801544c:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8015450:	677b      	str	r3, [r7, #116]	; 0x74
 8015452:	f00a fd54 	bl	801fefe <memcpy>
 8015456:	4648      	mov	r0, r9
 8015458:	4941      	ldr	r1, [pc, #260]	; (8015560 <rmw_create_service+0x1a0>)
 801545a:	f000 fedf 	bl	801621c <get_service_typesupport_handle>
 801545e:	2800      	cmp	r0, #0
 8015460:	d074      	beq.n	801554c <rmw_create_service+0x18c>
 8015462:	6843      	ldr	r3, [r0, #4]
 8015464:	617b      	str	r3, [r7, #20]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d070      	beq.n	801554c <rmw_create_service+0x18c>
 801546a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801546e:	2108      	movs	r1, #8
 8015470:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8015568 <rmw_create_service+0x1a8>
 8015474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015478:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801556c <rmw_create_service+0x1ac>
 801547c:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8015480:	1c42      	adds	r2, r0, #1
 8015482:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8015486:	f001 fcbd 	bl	8016e04 <uxr_object_id>
 801548a:	2364      	movs	r3, #100	; 0x64
 801548c:	6138      	str	r0, [r7, #16]
 801548e:	4652      	mov	r2, sl
 8015490:	4649      	mov	r1, r9
 8015492:	6978      	ldr	r0, [r7, #20]
 8015494:	f000 fdfc 	bl	8016090 <generate_service_types>
 8015498:	2800      	cmp	r0, #0
 801549a:	d057      	beq.n	801554c <rmw_create_service+0x18c>
 801549c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8015570 <rmw_create_service+0x1b0>
 80154a0:	233c      	movs	r3, #60	; 0x3c
 80154a2:	4a30      	ldr	r2, [pc, #192]	; (8015564 <rmw_create_service+0x1a4>)
 80154a4:	4620      	mov	r0, r4
 80154a6:	4659      	mov	r1, fp
 80154a8:	f000 fdc0 	bl	801602c <generate_service_topics>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d04d      	beq.n	801554c <rmw_create_service+0x18c>
 80154b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80154b4:	a80c      	add	r0, sp, #48	; 0x30
 80154b6:	4629      	mov	r1, r5
 80154b8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80154bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80154c0:	f000 fd9c 	bl	8015ffc <convert_qos_profile>
 80154c4:	4a27      	ldr	r2, [pc, #156]	; (8015564 <rmw_create_service+0x1a4>)
 80154c6:	a80c      	add	r0, sp, #48	; 0x30
 80154c8:	9400      	str	r4, [sp, #0]
 80154ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154cc:	e9cd b203 	strd	fp, r2, [sp, #12]
 80154d0:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80154d4:	c803      	ldmia	r0, {r0, r1}
 80154d6:	9a08      	ldr	r2, [sp, #32]
 80154d8:	9005      	str	r0, [sp, #20]
 80154da:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80154de:	2306      	movs	r3, #6
 80154e0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80154e4:	9307      	str	r3, [sp, #28]
 80154e6:	6811      	ldr	r1, [r2, #0]
 80154e8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80154ec:	693a      	ldr	r2, [r7, #16]
 80154ee:	f001 fb91 	bl	8016c14 <uxr_buffer_create_replier_bin>
 80154f2:	4602      	mov	r2, r0
 80154f4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80154f8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80154fc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015500:	f000 fd60 	bl	8015fc4 <run_xrce_session>
 8015504:	b310      	cbz	r0, 801554c <rmw_create_service+0x18c>
 8015506:	7a2b      	ldrb	r3, [r5, #8]
 8015508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801550c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015510:	2b02      	cmp	r3, #2
 8015512:	920e      	str	r2, [sp, #56]	; 0x38
 8015514:	f04f 0200 	mov.w	r2, #0
 8015518:	920f      	str	r2, [sp, #60]	; 0x3c
 801551a:	bf0c      	ite	eq
 801551c:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8015520:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8015524:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015528:	930b      	str	r3, [sp, #44]	; 0x2c
 801552a:	ab0e      	add	r3, sp, #56	; 0x38
 801552c:	673a      	str	r2, [r7, #112]	; 0x70
 801552e:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8015532:	9300      	str	r3, [sp, #0]
 8015534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015536:	6811      	ldr	r1, [r2, #0]
 8015538:	693a      	ldr	r2, [r7, #16]
 801553a:	f001 fc93 	bl	8016e64 <uxr_buffer_request_data>
 801553e:	8338      	strh	r0, [r7, #24]
 8015540:	e000      	b.n	8015544 <rmw_create_service+0x184>
 8015542:	2600      	movs	r6, #0
 8015544:	4630      	mov	r0, r6
 8015546:	b011      	add	sp, #68	; 0x44
 8015548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801554c:	4630      	mov	r0, r6
 801554e:	2600      	movs	r6, #0
 8015550:	f000 fbfe 	bl	8015d50 <rmw_uxrce_fini_service_memory>
 8015554:	4630      	mov	r0, r6
 8015556:	b011      	add	sp, #68	; 0x44
 8015558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555c:	20016dec 	.word	0x20016dec
 8015560:	0802368c 	.word	0x0802368c
 8015564:	2001245c 	.word	0x2001245c
 8015568:	20012498 	.word	0x20012498
 801556c:	200123f8 	.word	0x200123f8
 8015570:	200123bc 	.word	0x200123bc

08015574 <rmw_destroy_service>:
 8015574:	b570      	push	{r4, r5, r6, lr}
 8015576:	b128      	cbz	r0, 8015584 <rmw_destroy_service+0x10>
 8015578:	4604      	mov	r4, r0
 801557a:	6800      	ldr	r0, [r0, #0]
 801557c:	460d      	mov	r5, r1
 801557e:	f000 fe33 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 8015582:	b910      	cbnz	r0, 801558a <rmw_destroy_service+0x16>
 8015584:	2401      	movs	r4, #1
 8015586:	4620      	mov	r0, r4
 8015588:	bd70      	pop	{r4, r5, r6, pc}
 801558a:	6863      	ldr	r3, [r4, #4]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d0f9      	beq.n	8015584 <rmw_destroy_service+0x10>
 8015590:	2d00      	cmp	r5, #0
 8015592:	d0f7      	beq.n	8015584 <rmw_destroy_service+0x10>
 8015594:	6828      	ldr	r0, [r5, #0]
 8015596:	f000 fe27 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 801559a:	2800      	cmp	r0, #0
 801559c:	d0f2      	beq.n	8015584 <rmw_destroy_service+0x10>
 801559e:	686e      	ldr	r6, [r5, #4]
 80155a0:	2e00      	cmp	r6, #0
 80155a2:	d0ef      	beq.n	8015584 <rmw_destroy_service+0x10>
 80155a4:	6864      	ldr	r4, [r4, #4]
 80155a6:	6932      	ldr	r2, [r6, #16]
 80155a8:	6920      	ldr	r0, [r4, #16]
 80155aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80155ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80155b2:	6819      	ldr	r1, [r3, #0]
 80155b4:	f001 fc90 	bl	8016ed8 <uxr_buffer_cancel_data>
 80155b8:	4602      	mov	r2, r0
 80155ba:	6920      	ldr	r0, [r4, #16]
 80155bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80155c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80155c4:	f000 fcfe 	bl	8015fc4 <run_xrce_session>
 80155c8:	6920      	ldr	r0, [r4, #16]
 80155ca:	6932      	ldr	r2, [r6, #16]
 80155cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80155d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80155d4:	6819      	ldr	r1, [r3, #0]
 80155d6:	f001 f91b 	bl	8016810 <uxr_buffer_delete_entity>
 80155da:	4602      	mov	r2, r0
 80155dc:	6920      	ldr	r0, [r4, #16]
 80155de:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80155e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80155e6:	f000 fced 	bl	8015fc4 <run_xrce_session>
 80155ea:	4603      	mov	r3, r0
 80155ec:	4628      	mov	r0, r5
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	bf14      	ite	ne
 80155f2:	2400      	movne	r4, #0
 80155f4:	2402      	moveq	r4, #2
 80155f6:	f000 fbab 	bl	8015d50 <rmw_uxrce_fini_service_memory>
 80155fa:	e7c4      	b.n	8015586 <rmw_destroy_service+0x12>

080155fc <rmw_service_response_publisher_get_actual_qos>:
 80155fc:	b181      	cbz	r1, 8015620 <rmw_service_response_publisher_get_actual_qos+0x24>
 80155fe:	4603      	mov	r3, r0
 8015600:	b510      	push	{r4, lr}
 8015602:	fab0 f480 	clz	r4, r0
 8015606:	0964      	lsrs	r4, r4, #5
 8015608:	b140      	cbz	r0, 801561c <rmw_service_response_publisher_get_actual_qos+0x20>
 801560a:	685b      	ldr	r3, [r3, #4]
 801560c:	4608      	mov	r0, r1
 801560e:	2250      	movs	r2, #80	; 0x50
 8015610:	f103 0120 	add.w	r1, r3, #32
 8015614:	f00a fc73 	bl	801fefe <memcpy>
 8015618:	4620      	mov	r0, r4
 801561a:	bd10      	pop	{r4, pc}
 801561c:	200b      	movs	r0, #11
 801561e:	bd10      	pop	{r4, pc}
 8015620:	200b      	movs	r0, #11
 8015622:	4770      	bx	lr

08015624 <rmw_service_request_subscription_get_actual_qos>:
 8015624:	b178      	cbz	r0, 8015646 <rmw_service_request_subscription_get_actual_qos+0x22>
 8015626:	b510      	push	{r4, lr}
 8015628:	fab1 f481 	clz	r4, r1
 801562c:	0964      	lsrs	r4, r4, #5
 801562e:	b141      	cbz	r1, 8015642 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8015630:	6843      	ldr	r3, [r0, #4]
 8015632:	2250      	movs	r2, #80	; 0x50
 8015634:	4608      	mov	r0, r1
 8015636:	f103 0120 	add.w	r1, r3, #32
 801563a:	f00a fc60 	bl	801fefe <memcpy>
 801563e:	4620      	mov	r0, r4
 8015640:	bd10      	pop	{r4, pc}
 8015642:	200b      	movs	r0, #11
 8015644:	bd10      	pop	{r4, pc}
 8015646:	200b      	movs	r0, #11
 8015648:	4770      	bx	lr
 801564a:	bf00      	nop

0801564c <rmw_create_subscription>:
 801564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015650:	b08d      	sub	sp, #52	; 0x34
 8015652:	2900      	cmp	r1, #0
 8015654:	f000 80d8 	beq.w	8015808 <rmw_create_subscription+0x1bc>
 8015658:	4604      	mov	r4, r0
 801565a:	2800      	cmp	r0, #0
 801565c:	f000 80d4 	beq.w	8015808 <rmw_create_subscription+0x1bc>
 8015660:	6800      	ldr	r0, [r0, #0]
 8015662:	460e      	mov	r6, r1
 8015664:	4615      	mov	r5, r2
 8015666:	461f      	mov	r7, r3
 8015668:	f000 fdbe 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 801566c:	f080 0001 	eor.w	r0, r0, #1
 8015670:	b2c0      	uxtb	r0, r0
 8015672:	2800      	cmp	r0, #0
 8015674:	f040 80c8 	bne.w	8015808 <rmw_create_subscription+0x1bc>
 8015678:	2d00      	cmp	r5, #0
 801567a:	f000 80c5 	beq.w	8015808 <rmw_create_subscription+0x1bc>
 801567e:	782b      	ldrb	r3, [r5, #0]
 8015680:	2b00      	cmp	r3, #0
 8015682:	f000 80c1 	beq.w	8015808 <rmw_create_subscription+0x1bc>
 8015686:	2f00      	cmp	r7, #0
 8015688:	f000 80be 	beq.w	8015808 <rmw_create_subscription+0x1bc>
 801568c:	4867      	ldr	r0, [pc, #412]	; (801582c <rmw_create_subscription+0x1e0>)
 801568e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015692:	f007 fc79 	bl	801cf88 <get_memory>
 8015696:	4604      	mov	r4, r0
 8015698:	2800      	cmp	r0, #0
 801569a:	f000 80b6 	beq.w	801580a <rmw_create_subscription+0x1be>
 801569e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80156a2:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 80156a6:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 80156aa:	f007 fcd5 	bl	801d058 <rmw_get_implementation_identifier>
 80156ae:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 80156b2:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 80156b6:	4628      	mov	r0, r5
 80156b8:	f7ea fe22 	bl	8000300 <strlen>
 80156bc:	3001      	adds	r0, #1
 80156be:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 80156c2:	283c      	cmp	r0, #60	; 0x3c
 80156c4:	f200 80a5 	bhi.w	8015812 <rmw_create_subscription+0x1c6>
 80156c8:	462b      	mov	r3, r5
 80156ca:	4a59      	ldr	r2, [pc, #356]	; (8015830 <rmw_create_subscription+0x1e4>)
 80156cc:	213c      	movs	r1, #60	; 0x3c
 80156ce:	4650      	mov	r0, sl
 80156d0:	f00a f9b8 	bl	801fa44 <sniprintf>
 80156d4:	4639      	mov	r1, r7
 80156d6:	2250      	movs	r2, #80	; 0x50
 80156d8:	f108 0028 	add.w	r0, r8, #40	; 0x28
 80156dc:	f8c8 9020 	str.w	r9, [r8, #32]
 80156e0:	f00a fc0d 	bl	801fefe <memcpy>
 80156e4:	4630      	mov	r0, r6
 80156e6:	4953      	ldr	r1, [pc, #332]	; (8015834 <rmw_create_subscription+0x1e8>)
 80156e8:	f000 fd8c 	bl	8016204 <get_message_typesupport_handle>
 80156ec:	2800      	cmp	r0, #0
 80156ee:	f000 8090 	beq.w	8015812 <rmw_create_subscription+0x1c6>
 80156f2:	6842      	ldr	r2, [r0, #4]
 80156f4:	f8c8 2018 	str.w	r2, [r8, #24]
 80156f8:	2a00      	cmp	r2, #0
 80156fa:	f000 808a 	beq.w	8015812 <rmw_create_subscription+0x1c6>
 80156fe:	4629      	mov	r1, r5
 8015700:	463b      	mov	r3, r7
 8015702:	4648      	mov	r0, r9
 8015704:	f007 fcd8 	bl	801d0b8 <create_topic>
 8015708:	f8c8 001c 	str.w	r0, [r8, #28]
 801570c:	2800      	cmp	r0, #0
 801570e:	f000 8085 	beq.w	801581c <rmw_create_subscription+0x1d0>
 8015712:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015716:	2104      	movs	r1, #4
 8015718:	2506      	movs	r5, #6
 801571a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801571e:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8015722:	1c42      	adds	r2, r0, #1
 8015724:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8015728:	f001 fb6c 	bl	8016e04 <uxr_object_id>
 801572c:	f8c8 0010 	str.w	r0, [r8, #16]
 8015730:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015734:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8015738:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801573c:	9500      	str	r5, [sp, #0]
 801573e:	6819      	ldr	r1, [r3, #0]
 8015740:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015744:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015748:	f001 f946 	bl	80169d8 <uxr_buffer_create_subscriber_bin>
 801574c:	4602      	mov	r2, r0
 801574e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015752:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015756:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801575a:	f000 fc33 	bl	8015fc4 <run_xrce_session>
 801575e:	2800      	cmp	r0, #0
 8015760:	d057      	beq.n	8015812 <rmw_create_subscription+0x1c6>
 8015762:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015766:	4629      	mov	r1, r5
 8015768:	ae08      	add	r6, sp, #32
 801576a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801576e:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8015772:	1c42      	adds	r2, r0, #1
 8015774:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8015778:	f001 fb44 	bl	8016e04 <uxr_object_id>
 801577c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015780:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8015784:	4639      	mov	r1, r7
 8015786:	f8c8 0014 	str.w	r0, [r8, #20]
 801578a:	4630      	mov	r0, r6
 801578c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8015790:	9305      	str	r3, [sp, #20]
 8015792:	f000 fc33 	bl	8015ffc <convert_qos_profile>
 8015796:	9503      	str	r5, [sp, #12]
 8015798:	9b05      	ldr	r3, [sp, #20]
 801579a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801579e:	9001      	str	r0, [sp, #4]
 80157a0:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80157a4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80157a8:	691b      	ldr	r3, [r3, #16]
 80157aa:	9300      	str	r3, [sp, #0]
 80157ac:	f8db 1000 	ldr.w	r1, [fp]
 80157b0:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 80157b4:	f001 f9b6 	bl	8016b24 <uxr_buffer_create_datareader_bin>
 80157b8:	4602      	mov	r2, r0
 80157ba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80157be:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80157c2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80157c6:	f000 fbfd 	bl	8015fc4 <run_xrce_session>
 80157ca:	b310      	cbz	r0, 8015812 <rmw_create_subscription+0x1c6>
 80157cc:	7a3b      	ldrb	r3, [r7, #8]
 80157ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157d2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80157d6:	2b02      	cmp	r3, #2
 80157d8:	920a      	str	r2, [sp, #40]	; 0x28
 80157da:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80157de:	f04f 0200 	mov.w	r2, #0
 80157e2:	bf08      	it	eq
 80157e4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80157e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80157ec:	bf18      	it	ne
 80157ee:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 80157f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80157f4:	9307      	str	r3, [sp, #28]
 80157f6:	ab0a      	add	r3, sp, #40	; 0x28
 80157f8:	9300      	str	r3, [sp, #0]
 80157fa:	9b07      	ldr	r3, [sp, #28]
 80157fc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8015800:	6809      	ldr	r1, [r1, #0]
 8015802:	f001 fb2f 	bl	8016e64 <uxr_buffer_request_data>
 8015806:	e000      	b.n	801580a <rmw_create_subscription+0x1be>
 8015808:	2400      	movs	r4, #0
 801580a:	4620      	mov	r0, r4
 801580c:	b00d      	add	sp, #52	; 0x34
 801580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015812:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8015816:	b108      	cbz	r0, 801581c <rmw_create_subscription+0x1d0>
 8015818:	f000 fac6 	bl	8015da8 <rmw_uxrce_fini_topic_memory>
 801581c:	4620      	mov	r0, r4
 801581e:	2400      	movs	r4, #0
 8015820:	f000 fa80 	bl	8015d24 <rmw_uxrce_fini_subscription_memory>
 8015824:	4620      	mov	r0, r4
 8015826:	b00d      	add	sp, #52	; 0x34
 8015828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801582c:	20016e1c 	.word	0x20016e1c
 8015830:	080243d4 	.word	0x080243d4
 8015834:	0802368c 	.word	0x0802368c

08015838 <rmw_subscription_get_actual_qos>:
 8015838:	b178      	cbz	r0, 801585a <rmw_subscription_get_actual_qos+0x22>
 801583a:	b510      	push	{r4, lr}
 801583c:	fab1 f481 	clz	r4, r1
 8015840:	0964      	lsrs	r4, r4, #5
 8015842:	b141      	cbz	r1, 8015856 <rmw_subscription_get_actual_qos+0x1e>
 8015844:	6843      	ldr	r3, [r0, #4]
 8015846:	2250      	movs	r2, #80	; 0x50
 8015848:	4608      	mov	r0, r1
 801584a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801584e:	f00a fb56 	bl	801fefe <memcpy>
 8015852:	4620      	mov	r0, r4
 8015854:	bd10      	pop	{r4, pc}
 8015856:	200b      	movs	r0, #11
 8015858:	bd10      	pop	{r4, pc}
 801585a:	200b      	movs	r0, #11
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop

08015860 <rmw_destroy_subscription>:
 8015860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015864:	b128      	cbz	r0, 8015872 <rmw_destroy_subscription+0x12>
 8015866:	4604      	mov	r4, r0
 8015868:	6800      	ldr	r0, [r0, #0]
 801586a:	460d      	mov	r5, r1
 801586c:	f000 fcbc 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 8015870:	b918      	cbnz	r0, 801587a <rmw_destroy_subscription+0x1a>
 8015872:	2401      	movs	r4, #1
 8015874:	4620      	mov	r0, r4
 8015876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801587a:	6863      	ldr	r3, [r4, #4]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d0f8      	beq.n	8015872 <rmw_destroy_subscription+0x12>
 8015880:	fab5 f485 	clz	r4, r5
 8015884:	0964      	lsrs	r4, r4, #5
 8015886:	2d00      	cmp	r5, #0
 8015888:	d0f3      	beq.n	8015872 <rmw_destroy_subscription+0x12>
 801588a:	6828      	ldr	r0, [r5, #0]
 801588c:	f000 fcac 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 8015890:	2800      	cmp	r0, #0
 8015892:	d0ee      	beq.n	8015872 <rmw_destroy_subscription+0x12>
 8015894:	686e      	ldr	r6, [r5, #4]
 8015896:	2e00      	cmp	r6, #0
 8015898:	d0eb      	beq.n	8015872 <rmw_destroy_subscription+0x12>
 801589a:	6a37      	ldr	r7, [r6, #32]
 801589c:	6972      	ldr	r2, [r6, #20]
 801589e:	6938      	ldr	r0, [r7, #16]
 80158a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80158a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80158a8:	6819      	ldr	r1, [r3, #0]
 80158aa:	f001 fb15 	bl	8016ed8 <uxr_buffer_cancel_data>
 80158ae:	4602      	mov	r2, r0
 80158b0:	6938      	ldr	r0, [r7, #16]
 80158b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80158b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80158ba:	f000 fb83 	bl	8015fc4 <run_xrce_session>
 80158be:	69f0      	ldr	r0, [r6, #28]
 80158c0:	f007 fc4a 	bl	801d158 <destroy_topic>
 80158c4:	6a33      	ldr	r3, [r6, #32]
 80158c6:	6972      	ldr	r2, [r6, #20]
 80158c8:	6918      	ldr	r0, [r3, #16]
 80158ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80158ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80158d2:	6819      	ldr	r1, [r3, #0]
 80158d4:	f000 ff9c 	bl	8016810 <uxr_buffer_delete_entity>
 80158d8:	6a33      	ldr	r3, [r6, #32]
 80158da:	4680      	mov	r8, r0
 80158dc:	6932      	ldr	r2, [r6, #16]
 80158de:	6918      	ldr	r0, [r3, #16]
 80158e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80158e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80158e8:	6819      	ldr	r1, [r3, #0]
 80158ea:	f000 ff91 	bl	8016810 <uxr_buffer_delete_entity>
 80158ee:	4606      	mov	r6, r0
 80158f0:	6938      	ldr	r0, [r7, #16]
 80158f2:	4642      	mov	r2, r8
 80158f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80158f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80158fc:	f000 fb62 	bl	8015fc4 <run_xrce_session>
 8015900:	693f      	ldr	r7, [r7, #16]
 8015902:	4632      	mov	r2, r6
 8015904:	4606      	mov	r6, r0
 8015906:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801590a:	4638      	mov	r0, r7
 801590c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8015910:	f000 fb58 	bl	8015fc4 <run_xrce_session>
 8015914:	b126      	cbz	r6, 8015920 <rmw_destroy_subscription+0xc0>
 8015916:	b118      	cbz	r0, 8015920 <rmw_destroy_subscription+0xc0>
 8015918:	4628      	mov	r0, r5
 801591a:	f000 fa03 	bl	8015d24 <rmw_uxrce_fini_subscription_memory>
 801591e:	e7a9      	b.n	8015874 <rmw_destroy_subscription+0x14>
 8015920:	2402      	movs	r4, #2
 8015922:	e7f9      	b.n	8015918 <rmw_destroy_subscription+0xb8>

08015924 <rmw_take_with_info>:
 8015924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015926:	4604      	mov	r4, r0
 8015928:	6800      	ldr	r0, [r0, #0]
 801592a:	b089      	sub	sp, #36	; 0x24
 801592c:	460f      	mov	r7, r1
 801592e:	4615      	mov	r5, r2
 8015930:	b128      	cbz	r0, 801593e <rmw_take_with_info+0x1a>
 8015932:	4b24      	ldr	r3, [pc, #144]	; (80159c4 <rmw_take_with_info+0xa0>)
 8015934:	6819      	ldr	r1, [r3, #0]
 8015936:	f7ea fc83 	bl	8000240 <strcmp>
 801593a:	2800      	cmp	r0, #0
 801593c:	d13e      	bne.n	80159bc <rmw_take_with_info+0x98>
 801593e:	b305      	cbz	r5, 8015982 <rmw_take_with_info+0x5e>
 8015940:	2300      	movs	r3, #0
 8015942:	6864      	ldr	r4, [r4, #4]
 8015944:	702b      	strb	r3, [r5, #0]
 8015946:	f000 fabf 	bl	8015ec8 <rmw_uxrce_clean_expired_static_input_buffer>
 801594a:	4620      	mov	r0, r4
 801594c:	f000 fa92 	bl	8015e74 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015950:	4606      	mov	r6, r0
 8015952:	b1f0      	cbz	r0, 8015992 <rmw_take_with_info+0x6e>
 8015954:	6881      	ldr	r1, [r0, #8]
 8015956:	4668      	mov	r0, sp
 8015958:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801595c:	3110      	adds	r1, #16
 801595e:	f7fc fc97 	bl	8012290 <ucdr_init_buffer>
 8015962:	69a3      	ldr	r3, [r4, #24]
 8015964:	4639      	mov	r1, r7
 8015966:	4668      	mov	r0, sp
 8015968:	68db      	ldr	r3, [r3, #12]
 801596a:	4798      	blx	r3
 801596c:	4604      	mov	r4, r0
 801596e:	4631      	mov	r1, r6
 8015970:	4815      	ldr	r0, [pc, #84]	; (80159c8 <rmw_take_with_info+0xa4>)
 8015972:	f007 fb19 	bl	801cfa8 <put_memory>
 8015976:	702c      	strb	r4, [r5, #0]
 8015978:	f084 0001 	eor.w	r0, r4, #1
 801597c:	b2c0      	uxtb	r0, r0
 801597e:	b009      	add	sp, #36	; 0x24
 8015980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015982:	6864      	ldr	r4, [r4, #4]
 8015984:	f000 faa0 	bl	8015ec8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015988:	4620      	mov	r0, r4
 801598a:	f000 fa73 	bl	8015e74 <rmw_uxrce_find_static_input_buffer_by_owner>
 801598e:	4605      	mov	r5, r0
 8015990:	b910      	cbnz	r0, 8015998 <rmw_take_with_info+0x74>
 8015992:	2001      	movs	r0, #1
 8015994:	b009      	add	sp, #36	; 0x24
 8015996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015998:	68a9      	ldr	r1, [r5, #8]
 801599a:	4668      	mov	r0, sp
 801599c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80159a0:	3110      	adds	r1, #16
 80159a2:	f7fc fc75 	bl	8012290 <ucdr_init_buffer>
 80159a6:	69a3      	ldr	r3, [r4, #24]
 80159a8:	4639      	mov	r1, r7
 80159aa:	4668      	mov	r0, sp
 80159ac:	68db      	ldr	r3, [r3, #12]
 80159ae:	4798      	blx	r3
 80159b0:	4629      	mov	r1, r5
 80159b2:	4604      	mov	r4, r0
 80159b4:	4804      	ldr	r0, [pc, #16]	; (80159c8 <rmw_take_with_info+0xa4>)
 80159b6:	f007 faf7 	bl	801cfa8 <put_memory>
 80159ba:	e7dd      	b.n	8015978 <rmw_take_with_info+0x54>
 80159bc:	200c      	movs	r0, #12
 80159be:	b009      	add	sp, #36	; 0x24
 80159c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159c2:	bf00      	nop
 80159c4:	08024a34 	.word	0x08024a34
 80159c8:	20016e0c 	.word	0x20016e0c

080159cc <rmw_uxrce_transport_init>:
 80159cc:	b508      	push	{r3, lr}
 80159ce:	b108      	cbz	r0, 80159d4 <rmw_uxrce_transport_init+0x8>
 80159d0:	f100 0210 	add.w	r2, r0, #16
 80159d4:	b139      	cbz	r1, 80159e6 <rmw_uxrce_transport_init+0x1a>
 80159d6:	6949      	ldr	r1, [r1, #20]
 80159d8:	4610      	mov	r0, r2
 80159da:	f001 f9db 	bl	8016d94 <uxr_init_custom_transport>
 80159de:	f080 0001 	eor.w	r0, r0, #1
 80159e2:	b2c0      	uxtb	r0, r0
 80159e4:	bd08      	pop	{r3, pc}
 80159e6:	4b04      	ldr	r3, [pc, #16]	; (80159f8 <rmw_uxrce_transport_init+0x2c>)
 80159e8:	4610      	mov	r0, r2
 80159ea:	6859      	ldr	r1, [r3, #4]
 80159ec:	f001 f9d2 	bl	8016d94 <uxr_init_custom_transport>
 80159f0:	f080 0001 	eor.w	r0, r0, #1
 80159f4:	b2c0      	uxtb	r0, r0
 80159f6:	bd08      	pop	{r3, pc}
 80159f8:	20012364 	.word	0x20012364

080159fc <rmw_uxrce_init_service_memory>:
 80159fc:	b1e2      	cbz	r2, 8015a38 <rmw_uxrce_init_service_memory+0x3c>
 80159fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a02:	7b05      	ldrb	r5, [r0, #12]
 8015a04:	4606      	mov	r6, r0
 8015a06:	b9ad      	cbnz	r5, 8015a34 <rmw_uxrce_init_service_memory+0x38>
 8015a08:	23c8      	movs	r3, #200	; 0xc8
 8015a0a:	4617      	mov	r7, r2
 8015a0c:	460c      	mov	r4, r1
 8015a0e:	46a8      	mov	r8, r5
 8015a10:	6083      	str	r3, [r0, #8]
 8015a12:	f240 1301 	movw	r3, #257	; 0x101
 8015a16:	e9c0 5500 	strd	r5, r5, [r0]
 8015a1a:	8183      	strh	r3, [r0, #12]
 8015a1c:	3501      	adds	r5, #1
 8015a1e:	4621      	mov	r1, r4
 8015a20:	4630      	mov	r0, r6
 8015a22:	f007 fac1 	bl	801cfa8 <put_memory>
 8015a26:	42af      	cmp	r7, r5
 8015a28:	60a4      	str	r4, [r4, #8]
 8015a2a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8015a2e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015a32:	d1f3      	bne.n	8015a1c <rmw_uxrce_init_service_memory+0x20>
 8015a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a38:	4770      	bx	lr
 8015a3a:	bf00      	nop

08015a3c <rmw_uxrce_init_client_memory>:
 8015a3c:	b1e2      	cbz	r2, 8015a78 <rmw_uxrce_init_client_memory+0x3c>
 8015a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a42:	7b05      	ldrb	r5, [r0, #12]
 8015a44:	4606      	mov	r6, r0
 8015a46:	b9ad      	cbnz	r5, 8015a74 <rmw_uxrce_init_client_memory+0x38>
 8015a48:	23c8      	movs	r3, #200	; 0xc8
 8015a4a:	4617      	mov	r7, r2
 8015a4c:	460c      	mov	r4, r1
 8015a4e:	46a8      	mov	r8, r5
 8015a50:	6083      	str	r3, [r0, #8]
 8015a52:	f240 1301 	movw	r3, #257	; 0x101
 8015a56:	e9c0 5500 	strd	r5, r5, [r0]
 8015a5a:	8183      	strh	r3, [r0, #12]
 8015a5c:	3501      	adds	r5, #1
 8015a5e:	4621      	mov	r1, r4
 8015a60:	4630      	mov	r0, r6
 8015a62:	f007 faa1 	bl	801cfa8 <put_memory>
 8015a66:	42af      	cmp	r7, r5
 8015a68:	60a4      	str	r4, [r4, #8]
 8015a6a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8015a6e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015a72:	d1f3      	bne.n	8015a5c <rmw_uxrce_init_client_memory+0x20>
 8015a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a78:	4770      	bx	lr
 8015a7a:	bf00      	nop

08015a7c <rmw_uxrce_init_publisher_memory>:
 8015a7c:	b1e2      	cbz	r2, 8015ab8 <rmw_uxrce_init_publisher_memory+0x3c>
 8015a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a82:	7b05      	ldrb	r5, [r0, #12]
 8015a84:	4606      	mov	r6, r0
 8015a86:	b9ad      	cbnz	r5, 8015ab4 <rmw_uxrce_init_publisher_memory+0x38>
 8015a88:	23d8      	movs	r3, #216	; 0xd8
 8015a8a:	4617      	mov	r7, r2
 8015a8c:	460c      	mov	r4, r1
 8015a8e:	46a8      	mov	r8, r5
 8015a90:	6083      	str	r3, [r0, #8]
 8015a92:	f240 1301 	movw	r3, #257	; 0x101
 8015a96:	e9c0 5500 	strd	r5, r5, [r0]
 8015a9a:	8183      	strh	r3, [r0, #12]
 8015a9c:	3501      	adds	r5, #1
 8015a9e:	4621      	mov	r1, r4
 8015aa0:	4630      	mov	r0, r6
 8015aa2:	f007 fa81 	bl	801cfa8 <put_memory>
 8015aa6:	42af      	cmp	r7, r5
 8015aa8:	60a4      	str	r4, [r4, #8]
 8015aaa:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8015aae:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015ab2:	d1f3      	bne.n	8015a9c <rmw_uxrce_init_publisher_memory+0x20>
 8015ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ab8:	4770      	bx	lr
 8015aba:	bf00      	nop

08015abc <rmw_uxrce_init_subscription_memory>:
 8015abc:	b1e2      	cbz	r2, 8015af8 <rmw_uxrce_init_subscription_memory+0x3c>
 8015abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac2:	7b05      	ldrb	r5, [r0, #12]
 8015ac4:	4606      	mov	r6, r0
 8015ac6:	b9ad      	cbnz	r5, 8015af4 <rmw_uxrce_init_subscription_memory+0x38>
 8015ac8:	23d8      	movs	r3, #216	; 0xd8
 8015aca:	4617      	mov	r7, r2
 8015acc:	460c      	mov	r4, r1
 8015ace:	46a8      	mov	r8, r5
 8015ad0:	6083      	str	r3, [r0, #8]
 8015ad2:	f240 1301 	movw	r3, #257	; 0x101
 8015ad6:	e9c0 5500 	strd	r5, r5, [r0]
 8015ada:	8183      	strh	r3, [r0, #12]
 8015adc:	3501      	adds	r5, #1
 8015ade:	4621      	mov	r1, r4
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	f007 fa61 	bl	801cfa8 <put_memory>
 8015ae6:	42af      	cmp	r7, r5
 8015ae8:	60a4      	str	r4, [r4, #8]
 8015aea:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8015aee:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015af2:	d1f3      	bne.n	8015adc <rmw_uxrce_init_subscription_memory+0x20>
 8015af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015af8:	4770      	bx	lr
 8015afa:	bf00      	nop

08015afc <rmw_uxrce_init_node_memory>:
 8015afc:	b1e2      	cbz	r2, 8015b38 <rmw_uxrce_init_node_memory+0x3c>
 8015afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b02:	7b05      	ldrb	r5, [r0, #12]
 8015b04:	4606      	mov	r6, r0
 8015b06:	b9ad      	cbnz	r5, 8015b34 <rmw_uxrce_init_node_memory+0x38>
 8015b08:	23a4      	movs	r3, #164	; 0xa4
 8015b0a:	4617      	mov	r7, r2
 8015b0c:	460c      	mov	r4, r1
 8015b0e:	46a8      	mov	r8, r5
 8015b10:	6083      	str	r3, [r0, #8]
 8015b12:	f240 1301 	movw	r3, #257	; 0x101
 8015b16:	e9c0 5500 	strd	r5, r5, [r0]
 8015b1a:	8183      	strh	r3, [r0, #12]
 8015b1c:	3501      	adds	r5, #1
 8015b1e:	4621      	mov	r1, r4
 8015b20:	4630      	mov	r0, r6
 8015b22:	f007 fa41 	bl	801cfa8 <put_memory>
 8015b26:	42af      	cmp	r7, r5
 8015b28:	60a4      	str	r4, [r4, #8]
 8015b2a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8015b2e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015b32:	d1f3      	bne.n	8015b1c <rmw_uxrce_init_node_memory+0x20>
 8015b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b38:	4770      	bx	lr
 8015b3a:	bf00      	nop

08015b3c <rmw_uxrce_init_session_memory>:
 8015b3c:	b1ea      	cbz	r2, 8015b7a <rmw_uxrce_init_session_memory+0x3e>
 8015b3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b42:	7b05      	ldrb	r5, [r0, #12]
 8015b44:	4606      	mov	r6, r0
 8015b46:	b9b5      	cbnz	r5, 8015b76 <rmw_uxrce_init_session_memory+0x3a>
 8015b48:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8015b4c:	f240 1301 	movw	r3, #257	; 0x101
 8015b50:	4617      	mov	r7, r2
 8015b52:	460c      	mov	r4, r1
 8015b54:	46a9      	mov	r9, r5
 8015b56:	f8c0 8008 	str.w	r8, [r0, #8]
 8015b5a:	8183      	strh	r3, [r0, #12]
 8015b5c:	e9c0 5500 	strd	r5, r5, [r0]
 8015b60:	3501      	adds	r5, #1
 8015b62:	4621      	mov	r1, r4
 8015b64:	4630      	mov	r0, r6
 8015b66:	f007 fa1f 	bl	801cfa8 <put_memory>
 8015b6a:	42af      	cmp	r7, r5
 8015b6c:	60a4      	str	r4, [r4, #8]
 8015b6e:	f884 900c 	strb.w	r9, [r4, #12]
 8015b72:	4444      	add	r4, r8
 8015b74:	d1f4      	bne.n	8015b60 <rmw_uxrce_init_session_memory+0x24>
 8015b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b7a:	4770      	bx	lr

08015b7c <rmw_uxrce_init_topic_memory>:
 8015b7c:	b1e2      	cbz	r2, 8015bb8 <rmw_uxrce_init_topic_memory+0x3c>
 8015b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b82:	7b05      	ldrb	r5, [r0, #12]
 8015b84:	4606      	mov	r6, r0
 8015b86:	b9ad      	cbnz	r5, 8015bb4 <rmw_uxrce_init_topic_memory+0x38>
 8015b88:	231c      	movs	r3, #28
 8015b8a:	4617      	mov	r7, r2
 8015b8c:	460c      	mov	r4, r1
 8015b8e:	46a8      	mov	r8, r5
 8015b90:	6083      	str	r3, [r0, #8]
 8015b92:	f240 1301 	movw	r3, #257	; 0x101
 8015b96:	e9c0 5500 	strd	r5, r5, [r0]
 8015b9a:	8183      	strh	r3, [r0, #12]
 8015b9c:	3501      	adds	r5, #1
 8015b9e:	4621      	mov	r1, r4
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	f007 fa01 	bl	801cfa8 <put_memory>
 8015ba6:	42af      	cmp	r7, r5
 8015ba8:	60a4      	str	r4, [r4, #8]
 8015baa:	f104 041c 	add.w	r4, r4, #28
 8015bae:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015bb2:	d1f3      	bne.n	8015b9c <rmw_uxrce_init_topic_memory+0x20>
 8015bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bb8:	4770      	bx	lr
 8015bba:	bf00      	nop

08015bbc <rmw_uxrce_init_static_input_buffer_memory>:
 8015bbc:	b1ea      	cbz	r2, 8015bfa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8015bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc2:	7b05      	ldrb	r5, [r0, #12]
 8015bc4:	4606      	mov	r6, r0
 8015bc6:	b9b5      	cbnz	r5, 8015bf6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8015bc8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8015bcc:	4617      	mov	r7, r2
 8015bce:	460c      	mov	r4, r1
 8015bd0:	46a8      	mov	r8, r5
 8015bd2:	6083      	str	r3, [r0, #8]
 8015bd4:	f240 1301 	movw	r3, #257	; 0x101
 8015bd8:	e9c0 5500 	strd	r5, r5, [r0]
 8015bdc:	8183      	strh	r3, [r0, #12]
 8015bde:	3501      	adds	r5, #1
 8015be0:	4621      	mov	r1, r4
 8015be2:	4630      	mov	r0, r6
 8015be4:	f007 f9e0 	bl	801cfa8 <put_memory>
 8015be8:	42af      	cmp	r7, r5
 8015bea:	60a4      	str	r4, [r4, #8]
 8015bec:	f884 800c 	strb.w	r8, [r4, #12]
 8015bf0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8015bf4:	d1f3      	bne.n	8015bde <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bfa:	4770      	bx	lr

08015bfc <rmw_uxrce_init_init_options_impl_memory>:
 8015bfc:	b1e2      	cbz	r2, 8015c38 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8015bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c02:	7b05      	ldrb	r5, [r0, #12]
 8015c04:	4606      	mov	r6, r0
 8015c06:	b9ad      	cbnz	r5, 8015c34 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015c08:	232c      	movs	r3, #44	; 0x2c
 8015c0a:	4617      	mov	r7, r2
 8015c0c:	460c      	mov	r4, r1
 8015c0e:	46a8      	mov	r8, r5
 8015c10:	6083      	str	r3, [r0, #8]
 8015c12:	f240 1301 	movw	r3, #257	; 0x101
 8015c16:	e9c0 5500 	strd	r5, r5, [r0]
 8015c1a:	8183      	strh	r3, [r0, #12]
 8015c1c:	3501      	adds	r5, #1
 8015c1e:	4621      	mov	r1, r4
 8015c20:	4630      	mov	r0, r6
 8015c22:	f007 f9c1 	bl	801cfa8 <put_memory>
 8015c26:	42af      	cmp	r7, r5
 8015c28:	60a4      	str	r4, [r4, #8]
 8015c2a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8015c2e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015c32:	d1f3      	bne.n	8015c1c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c38:	4770      	bx	lr
 8015c3a:	bf00      	nop

08015c3c <rmw_uxrce_init_wait_set_memory>:
 8015c3c:	b1e2      	cbz	r2, 8015c78 <rmw_uxrce_init_wait_set_memory+0x3c>
 8015c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c42:	7b05      	ldrb	r5, [r0, #12]
 8015c44:	4606      	mov	r6, r0
 8015c46:	b9ad      	cbnz	r5, 8015c74 <rmw_uxrce_init_wait_set_memory+0x38>
 8015c48:	231c      	movs	r3, #28
 8015c4a:	4617      	mov	r7, r2
 8015c4c:	460c      	mov	r4, r1
 8015c4e:	46a8      	mov	r8, r5
 8015c50:	6083      	str	r3, [r0, #8]
 8015c52:	f240 1301 	movw	r3, #257	; 0x101
 8015c56:	e9c0 5500 	strd	r5, r5, [r0]
 8015c5a:	8183      	strh	r3, [r0, #12]
 8015c5c:	3501      	adds	r5, #1
 8015c5e:	4621      	mov	r1, r4
 8015c60:	4630      	mov	r0, r6
 8015c62:	f007 f9a1 	bl	801cfa8 <put_memory>
 8015c66:	42af      	cmp	r7, r5
 8015c68:	60a4      	str	r4, [r4, #8]
 8015c6a:	f104 041c 	add.w	r4, r4, #28
 8015c6e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015c72:	d1f3      	bne.n	8015c5c <rmw_uxrce_init_wait_set_memory+0x20>
 8015c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c78:	4770      	bx	lr
 8015c7a:	bf00      	nop

08015c7c <rmw_uxrce_init_guard_condition_memory>:
 8015c7c:	b1e2      	cbz	r2, 8015cb8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8015c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c82:	7b05      	ldrb	r5, [r0, #12]
 8015c84:	4606      	mov	r6, r0
 8015c86:	b9ad      	cbnz	r5, 8015cb4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8015c88:	2320      	movs	r3, #32
 8015c8a:	4617      	mov	r7, r2
 8015c8c:	460c      	mov	r4, r1
 8015c8e:	46a8      	mov	r8, r5
 8015c90:	6083      	str	r3, [r0, #8]
 8015c92:	f240 1301 	movw	r3, #257	; 0x101
 8015c96:	e9c0 5500 	strd	r5, r5, [r0]
 8015c9a:	8183      	strh	r3, [r0, #12]
 8015c9c:	3501      	adds	r5, #1
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4630      	mov	r0, r6
 8015ca2:	f007 f981 	bl	801cfa8 <put_memory>
 8015ca6:	42af      	cmp	r7, r5
 8015ca8:	60a4      	str	r4, [r4, #8]
 8015caa:	f104 0420 	add.w	r4, r4, #32
 8015cae:	f804 8c14 	strb.w	r8, [r4, #-20]
 8015cb2:	d1f3      	bne.n	8015c9c <rmw_uxrce_init_guard_condition_memory+0x20>
 8015cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cb8:	4770      	bx	lr
 8015cba:	bf00      	nop

08015cbc <rmw_uxrce_fini_session_memory>:
 8015cbc:	4601      	mov	r1, r0
 8015cbe:	4801      	ldr	r0, [pc, #4]	; (8015cc4 <rmw_uxrce_fini_session_memory+0x8>)
 8015cc0:	f007 b972 	b.w	801cfa8 <put_memory>
 8015cc4:	20016dfc 	.word	0x20016dfc

08015cc8 <rmw_uxrce_fini_node_memory>:
 8015cc8:	b538      	push	{r3, r4, r5, lr}
 8015cca:	4604      	mov	r4, r0
 8015ccc:	6800      	ldr	r0, [r0, #0]
 8015cce:	b128      	cbz	r0, 8015cdc <rmw_uxrce_fini_node_memory+0x14>
 8015cd0:	4b07      	ldr	r3, [pc, #28]	; (8015cf0 <rmw_uxrce_fini_node_memory+0x28>)
 8015cd2:	6819      	ldr	r1, [r3, #0]
 8015cd4:	f7ea fab4 	bl	8000240 <strcmp>
 8015cd8:	b940      	cbnz	r0, 8015cec <rmw_uxrce_fini_node_memory+0x24>
 8015cda:	6020      	str	r0, [r4, #0]
 8015cdc:	6861      	ldr	r1, [r4, #4]
 8015cde:	b129      	cbz	r1, 8015cec <rmw_uxrce_fini_node_memory+0x24>
 8015ce0:	2500      	movs	r5, #0
 8015ce2:	4804      	ldr	r0, [pc, #16]	; (8015cf4 <rmw_uxrce_fini_node_memory+0x2c>)
 8015ce4:	610d      	str	r5, [r1, #16]
 8015ce6:	f007 f95f 	bl	801cfa8 <put_memory>
 8015cea:	6065      	str	r5, [r4, #4]
 8015cec:	bd38      	pop	{r3, r4, r5, pc}
 8015cee:	bf00      	nop
 8015cf0:	08024a34 	.word	0x08024a34
 8015cf4:	20016dcc 	.word	0x20016dcc

08015cf8 <rmw_uxrce_fini_publisher_memory>:
 8015cf8:	b510      	push	{r4, lr}
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	6800      	ldr	r0, [r0, #0]
 8015cfe:	b128      	cbz	r0, 8015d0c <rmw_uxrce_fini_publisher_memory+0x14>
 8015d00:	4b06      	ldr	r3, [pc, #24]	; (8015d1c <rmw_uxrce_fini_publisher_memory+0x24>)
 8015d02:	6819      	ldr	r1, [r3, #0]
 8015d04:	f7ea fa9c 	bl	8000240 <strcmp>
 8015d08:	b938      	cbnz	r0, 8015d1a <rmw_uxrce_fini_publisher_memory+0x22>
 8015d0a:	6020      	str	r0, [r4, #0]
 8015d0c:	6861      	ldr	r1, [r4, #4]
 8015d0e:	b121      	cbz	r1, 8015d1a <rmw_uxrce_fini_publisher_memory+0x22>
 8015d10:	4803      	ldr	r0, [pc, #12]	; (8015d20 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015d12:	f007 f949 	bl	801cfa8 <put_memory>
 8015d16:	2300      	movs	r3, #0
 8015d18:	6063      	str	r3, [r4, #4]
 8015d1a:	bd10      	pop	{r4, pc}
 8015d1c:	08024a34 	.word	0x08024a34
 8015d20:	20016ddc 	.word	0x20016ddc

08015d24 <rmw_uxrce_fini_subscription_memory>:
 8015d24:	b510      	push	{r4, lr}
 8015d26:	4604      	mov	r4, r0
 8015d28:	6800      	ldr	r0, [r0, #0]
 8015d2a:	b128      	cbz	r0, 8015d38 <rmw_uxrce_fini_subscription_memory+0x14>
 8015d2c:	4b06      	ldr	r3, [pc, #24]	; (8015d48 <rmw_uxrce_fini_subscription_memory+0x24>)
 8015d2e:	6819      	ldr	r1, [r3, #0]
 8015d30:	f7ea fa86 	bl	8000240 <strcmp>
 8015d34:	b938      	cbnz	r0, 8015d46 <rmw_uxrce_fini_subscription_memory+0x22>
 8015d36:	6020      	str	r0, [r4, #0]
 8015d38:	6861      	ldr	r1, [r4, #4]
 8015d3a:	b121      	cbz	r1, 8015d46 <rmw_uxrce_fini_subscription_memory+0x22>
 8015d3c:	4803      	ldr	r0, [pc, #12]	; (8015d4c <rmw_uxrce_fini_subscription_memory+0x28>)
 8015d3e:	f007 f933 	bl	801cfa8 <put_memory>
 8015d42:	2300      	movs	r3, #0
 8015d44:	6063      	str	r3, [r4, #4]
 8015d46:	bd10      	pop	{r4, pc}
 8015d48:	08024a34 	.word	0x08024a34
 8015d4c:	20016e1c 	.word	0x20016e1c

08015d50 <rmw_uxrce_fini_service_memory>:
 8015d50:	b510      	push	{r4, lr}
 8015d52:	4604      	mov	r4, r0
 8015d54:	6800      	ldr	r0, [r0, #0]
 8015d56:	b128      	cbz	r0, 8015d64 <rmw_uxrce_fini_service_memory+0x14>
 8015d58:	4b06      	ldr	r3, [pc, #24]	; (8015d74 <rmw_uxrce_fini_service_memory+0x24>)
 8015d5a:	6819      	ldr	r1, [r3, #0]
 8015d5c:	f7ea fa70 	bl	8000240 <strcmp>
 8015d60:	b938      	cbnz	r0, 8015d72 <rmw_uxrce_fini_service_memory+0x22>
 8015d62:	6020      	str	r0, [r4, #0]
 8015d64:	6861      	ldr	r1, [r4, #4]
 8015d66:	b121      	cbz	r1, 8015d72 <rmw_uxrce_fini_service_memory+0x22>
 8015d68:	4803      	ldr	r0, [pc, #12]	; (8015d78 <rmw_uxrce_fini_service_memory+0x28>)
 8015d6a:	f007 f91d 	bl	801cfa8 <put_memory>
 8015d6e:	2300      	movs	r3, #0
 8015d70:	6063      	str	r3, [r4, #4]
 8015d72:	bd10      	pop	{r4, pc}
 8015d74:	08024a34 	.word	0x08024a34
 8015d78:	20016dec 	.word	0x20016dec

08015d7c <rmw_uxrce_fini_client_memory>:
 8015d7c:	b510      	push	{r4, lr}
 8015d7e:	4604      	mov	r4, r0
 8015d80:	6800      	ldr	r0, [r0, #0]
 8015d82:	b128      	cbz	r0, 8015d90 <rmw_uxrce_fini_client_memory+0x14>
 8015d84:	4b06      	ldr	r3, [pc, #24]	; (8015da0 <rmw_uxrce_fini_client_memory+0x24>)
 8015d86:	6819      	ldr	r1, [r3, #0]
 8015d88:	f7ea fa5a 	bl	8000240 <strcmp>
 8015d8c:	b938      	cbnz	r0, 8015d9e <rmw_uxrce_fini_client_memory+0x22>
 8015d8e:	6020      	str	r0, [r4, #0]
 8015d90:	6861      	ldr	r1, [r4, #4]
 8015d92:	b121      	cbz	r1, 8015d9e <rmw_uxrce_fini_client_memory+0x22>
 8015d94:	4803      	ldr	r0, [pc, #12]	; (8015da4 <rmw_uxrce_fini_client_memory+0x28>)
 8015d96:	f007 f907 	bl	801cfa8 <put_memory>
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	6063      	str	r3, [r4, #4]
 8015d9e:	bd10      	pop	{r4, pc}
 8015da0:	08024a34 	.word	0x08024a34
 8015da4:	200124fc 	.word	0x200124fc

08015da8 <rmw_uxrce_fini_topic_memory>:
 8015da8:	b510      	push	{r4, lr}
 8015daa:	4604      	mov	r4, r0
 8015dac:	4803      	ldr	r0, [pc, #12]	; (8015dbc <rmw_uxrce_fini_topic_memory+0x14>)
 8015dae:	4621      	mov	r1, r4
 8015db0:	f007 f8fa 	bl	801cfa8 <put_memory>
 8015db4:	2300      	movs	r3, #0
 8015db6:	61a3      	str	r3, [r4, #24]
 8015db8:	bd10      	pop	{r4, pc}
 8015dba:	bf00      	nop
 8015dbc:	20016e2c 	.word	0x20016e2c

08015dc0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8015dc0:	b082      	sub	sp, #8
 8015dc2:	492b      	ldr	r1, [pc, #172]	; (8015e70 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015dc4:	b530      	push	{r4, r5, lr}
 8015dc6:	680d      	ldr	r5, [r1, #0]
 8015dc8:	ac03      	add	r4, sp, #12
 8015dca:	e884 000c 	stmia.w	r4, {r2, r3}
 8015dce:	461c      	mov	r4, r3
 8015dd0:	2d00      	cmp	r5, #0
 8015dd2:	d04b      	beq.n	8015e6c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8015dd4:	462b      	mov	r3, r5
 8015dd6:	2100      	movs	r1, #0
 8015dd8:	689a      	ldr	r2, [r3, #8]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8015de0:	4290      	cmp	r0, r2
 8015de2:	bf08      	it	eq
 8015de4:	3101      	addeq	r1, #1
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d1f6      	bne.n	8015dd8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8015dea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015dee:	2b02      	cmp	r3, #2
 8015df0:	d029      	beq.n	8015e46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015df2:	d820      	bhi.n	8015e36 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015df4:	428c      	cmp	r4, r1
 8015df6:	d828      	bhi.n	8015e4a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015df8:	fab4 f284 	clz	r2, r4
 8015dfc:	0952      	lsrs	r2, r2, #5
 8015dfe:	b324      	cbz	r4, 8015e4a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015e00:	b1dd      	cbz	r5, 8015e3a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015e02:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8015e06:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8015e0a:	e001      	b.n	8015e10 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8015e0c:	686d      	ldr	r5, [r5, #4]
 8015e0e:	b1ad      	cbz	r5, 8015e3c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015e10:	68ab      	ldr	r3, [r5, #8]
 8015e12:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8015e16:	4288      	cmp	r0, r1
 8015e18:	d1f8      	bne.n	8015e0c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e1a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8015e1e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8015e22:	4561      	cmp	r1, ip
 8015e24:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015e28:	eb73 0e04 	sbcs.w	lr, r3, r4
 8015e2c:	daee      	bge.n	8015e0c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e2e:	468c      	mov	ip, r1
 8015e30:	461c      	mov	r4, r3
 8015e32:	462a      	mov	r2, r5
 8015e34:	e7ea      	b.n	8015e0c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e36:	2b03      	cmp	r3, #3
 8015e38:	d0dc      	beq.n	8015df4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	4610      	mov	r0, r2
 8015e3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e42:	b002      	add	sp, #8
 8015e44:	4770      	bx	lr
 8015e46:	428c      	cmp	r4, r1
 8015e48:	d905      	bls.n	8015e56 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8015e4a:	4809      	ldr	r0, [pc, #36]	; (8015e70 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e50:	b002      	add	sp, #8
 8015e52:	f007 b899 	b.w	801cf88 <get_memory>
 8015e56:	fab4 f284 	clz	r2, r4
 8015e5a:	0952      	lsrs	r2, r2, #5
 8015e5c:	2c00      	cmp	r4, #0
 8015e5e:	d1ed      	bne.n	8015e3c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015e60:	4803      	ldr	r0, [pc, #12]	; (8015e70 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015e62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e66:	b002      	add	sp, #8
 8015e68:	f007 b88e 	b.w	801cf88 <get_memory>
 8015e6c:	4629      	mov	r1, r5
 8015e6e:	e7bc      	b.n	8015dea <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015e70:	20016e0c 	.word	0x20016e0c

08015e74 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015e74:	4b12      	ldr	r3, [pc, #72]	; (8015ec0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	b530      	push	{r4, r5, lr}
 8015e7a:	b1f3      	cbz	r3, 8015eba <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8015e7c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8015e80:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8015e84:	2400      	movs	r4, #0
 8015e86:	e001      	b.n	8015e8c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	b1a3      	cbz	r3, 8015eb6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8015e8c:	689a      	ldr	r2, [r3, #8]
 8015e8e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8015e92:	4288      	cmp	r0, r1
 8015e94:	d1f8      	bne.n	8015e88 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015e96:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8015e9a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8015e9e:	4571      	cmp	r1, lr
 8015ea0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015ea4:	eb72 050c 	sbcs.w	r5, r2, ip
 8015ea8:	daee      	bge.n	8015e88 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015eaa:	461c      	mov	r4, r3
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	468e      	mov	lr, r1
 8015eb0:	4694      	mov	ip, r2
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d1ea      	bne.n	8015e8c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	bd30      	pop	{r4, r5, pc}
 8015eba:	461c      	mov	r4, r3
 8015ebc:	4620      	mov	r0, r4
 8015ebe:	bd30      	pop	{r4, r5, pc}
 8015ec0:	20016e0c 	.word	0x20016e0c
 8015ec4:	00000000 	.word	0x00000000

08015ec8 <rmw_uxrce_clean_expired_static_input_buffer>:
 8015ec8:	4b3d      	ldr	r3, [pc, #244]	; (8015fc0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ece:	681f      	ldr	r7, [r3, #0]
 8015ed0:	ed2d 8b06 	vpush	{d8-d10}
 8015ed4:	b08d      	sub	sp, #52	; 0x34
 8015ed6:	f007 fae3 	bl	801d4a0 <rmw_uros_epoch_nanos>
 8015eda:	2f00      	cmp	r7, #0
 8015edc:	d05d      	beq.n	8015f9a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015ede:	46b8      	mov	r8, r7
 8015ee0:	4681      	mov	r9, r0
 8015ee2:	468a      	mov	sl, r1
 8015ee4:	ac04      	add	r4, sp, #16
 8015ee6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015eea:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8015eee:	2b04      	cmp	r3, #4
 8015ef0:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8015fa8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8015ef4:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8015fb0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8015ef8:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8015fb8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8015efc:	d03f      	beq.n	8015f7e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015efe:	2b05      	cmp	r3, #5
 8015f00:	d044      	beq.n	8015f8c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8015f02:	2b03      	cmp	r3, #3
 8015f04:	d03b      	beq.n	8015f7e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015f06:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015f0a:	ed8d ab06 	vstr	d10, [sp, #24]
 8015f0e:	ab08      	add	r3, sp, #32
 8015f10:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015f14:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8015f18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f1a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015f1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f22:	f006 fe45 	bl	801cbb0 <rmw_time_equal>
 8015f26:	b118      	cbz	r0, 8015f30 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8015f28:	ed8d 9b04 	vstr	d9, [sp, #16]
 8015f2c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015f30:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8015f34:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8015f38:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8015f3c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8015f40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f44:	f006 fe8a 	bl	801cc5c <rmw_time_total_nsec>
 8015f48:	1830      	adds	r0, r6, r0
 8015f4a:	eb47 0101 	adc.w	r1, r7, r1
 8015f4e:	4548      	cmp	r0, r9
 8015f50:	eb71 030a 	sbcs.w	r3, r1, sl
 8015f54:	db05      	blt.n	8015f62 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8015f56:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8015f5a:	4591      	cmp	r9, r2
 8015f5c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8015f60:	da03      	bge.n	8015f6a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8015f62:	4641      	mov	r1, r8
 8015f64:	4816      	ldr	r0, [pc, #88]	; (8015fc0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015f66:	f007 f81f 	bl	801cfa8 <put_memory>
 8015f6a:	f1bb 0f00 	cmp.w	fp, #0
 8015f6e:	d014      	beq.n	8015f9a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015f70:	46d8      	mov	r8, fp
 8015f72:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015f76:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8015f7a:	2b04      	cmp	r3, #4
 8015f7c:	d1bf      	bne.n	8015efe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8015f7e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8015f82:	3340      	adds	r3, #64	; 0x40
 8015f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f8a:	e7c0      	b.n	8015f0e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015f8c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8015f90:	3348      	adds	r3, #72	; 0x48
 8015f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f98:	e7b9      	b.n	8015f0e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015f9a:	b00d      	add	sp, #52	; 0x34
 8015f9c:	ecbd 8b06 	vpop	{d8-d10}
 8015fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa4:	f3af 8000 	nop.w
	...
 8015fb0:	00000001 	.word	0x00000001
 8015fb4:	00000000 	.word	0x00000000
 8015fb8:	0000001e 	.word	0x0000001e
 8015fbc:	00000000 	.word	0x00000000
 8015fc0:	20016e0c 	.word	0x20016e0c

08015fc4 <run_xrce_session>:
 8015fc4:	b510      	push	{r4, lr}
 8015fc6:	788c      	ldrb	r4, [r1, #2]
 8015fc8:	b086      	sub	sp, #24
 8015fca:	2c01      	cmp	r4, #1
 8015fcc:	f8ad 200e 	strh.w	r2, [sp, #14]
 8015fd0:	d00c      	beq.n	8015fec <run_xrce_session+0x28>
 8015fd2:	2401      	movs	r4, #1
 8015fd4:	4619      	mov	r1, r3
 8015fd6:	f10d 020e 	add.w	r2, sp, #14
 8015fda:	f10d 0317 	add.w	r3, sp, #23
 8015fde:	9400      	str	r4, [sp, #0]
 8015fe0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fe4:	f001 fd6c 	bl	8017ac0 <uxr_run_session_until_all_status>
 8015fe8:	b006      	add	sp, #24
 8015fea:	bd10      	pop	{r4, pc}
 8015fec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ff0:	f001 f988 	bl	8017304 <uxr_flash_output_streams>
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	b006      	add	sp, #24
 8015ff8:	bd10      	pop	{r4, pc}
 8015ffa:	bf00      	nop

08015ffc <convert_qos_profile>:
 8015ffc:	7a4a      	ldrb	r2, [r1, #9]
 8015ffe:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016002:	2a02      	cmp	r2, #2
 8016004:	bf18      	it	ne
 8016006:	2200      	movne	r2, #0
 8016008:	7002      	strb	r2, [r0, #0]
 801600a:	f1ac 0202 	sub.w	r2, ip, #2
 801600e:	fab2 f282 	clz	r2, r2
 8016012:	0952      	lsrs	r2, r2, #5
 8016014:	7042      	strb	r2, [r0, #1]
 8016016:	780a      	ldrb	r2, [r1, #0]
 8016018:	8889      	ldrh	r1, [r1, #4]
 801601a:	f1a2 0202 	sub.w	r2, r2, #2
 801601e:	8081      	strh	r1, [r0, #4]
 8016020:	fab2 f282 	clz	r2, r2
 8016024:	0952      	lsrs	r2, r2, #5
 8016026:	7082      	strb	r2, [r0, #2]
 8016028:	4770      	bx	lr
 801602a:	bf00      	nop

0801602c <generate_service_topics>:
 801602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801602e:	461d      	mov	r5, r3
 8016030:	b083      	sub	sp, #12
 8016032:	4606      	mov	r6, r0
 8016034:	4c11      	ldr	r4, [pc, #68]	; (801607c <generate_service_topics+0x50>)
 8016036:	4608      	mov	r0, r1
 8016038:	4b11      	ldr	r3, [pc, #68]	; (8016080 <generate_service_topics+0x54>)
 801603a:	4617      	mov	r7, r2
 801603c:	4629      	mov	r1, r5
 801603e:	4a11      	ldr	r2, [pc, #68]	; (8016084 <generate_service_topics+0x58>)
 8016040:	9401      	str	r4, [sp, #4]
 8016042:	9600      	str	r6, [sp, #0]
 8016044:	f009 fcfe 	bl	801fa44 <sniprintf>
 8016048:	4a0f      	ldr	r2, [pc, #60]	; (8016088 <generate_service_topics+0x5c>)
 801604a:	4604      	mov	r4, r0
 801604c:	4b0f      	ldr	r3, [pc, #60]	; (801608c <generate_service_topics+0x60>)
 801604e:	9201      	str	r2, [sp, #4]
 8016050:	4638      	mov	r0, r7
 8016052:	4a0c      	ldr	r2, [pc, #48]	; (8016084 <generate_service_topics+0x58>)
 8016054:	4629      	mov	r1, r5
 8016056:	9600      	str	r6, [sp, #0]
 8016058:	f009 fcf4 	bl	801fa44 <sniprintf>
 801605c:	2c00      	cmp	r4, #0
 801605e:	bfa8      	it	ge
 8016060:	42a5      	cmpge	r5, r4
 8016062:	bfcc      	ite	gt
 8016064:	2401      	movgt	r4, #1
 8016066:	2400      	movle	r4, #0
 8016068:	dd05      	ble.n	8016076 <generate_service_topics+0x4a>
 801606a:	2800      	cmp	r0, #0
 801606c:	bfa8      	it	ge
 801606e:	4285      	cmpge	r5, r0
 8016070:	bfcc      	ite	gt
 8016072:	2401      	movgt	r4, #1
 8016074:	2400      	movle	r4, #0
 8016076:	4620      	mov	r0, r4
 8016078:	b003      	add	sp, #12
 801607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801607c:	080243f0 	.word	0x080243f0
 8016080:	080243ec 	.word	0x080243ec
 8016084:	080243d0 	.word	0x080243d0
 8016088:	080243e4 	.word	0x080243e4
 801608c:	080243e0 	.word	0x080243e0

08016090 <generate_service_types>:
 8016090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016094:	4606      	mov	r6, r0
 8016096:	b087      	sub	sp, #28
 8016098:	461c      	mov	r4, r3
 801609a:	6883      	ldr	r3, [r0, #8]
 801609c:	460d      	mov	r5, r1
 801609e:	4617      	mov	r7, r2
 80160a0:	4798      	blx	r3
 80160a2:	68f3      	ldr	r3, [r6, #12]
 80160a4:	4606      	mov	r6, r0
 80160a6:	4798      	blx	r3
 80160a8:	2300      	movs	r3, #0
 80160aa:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80160ae:	6872      	ldr	r2, [r6, #4]
 80160b0:	702b      	strb	r3, [r5, #0]
 80160b2:	6813      	ldr	r3, [r2, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d03f      	beq.n	8016138 <generate_service_types+0xa8>
 80160b8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801614c <generate_service_types+0xbc>
 80160bc:	4649      	mov	r1, r9
 80160be:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8016154 <generate_service_types+0xc4>
 80160c2:	4628      	mov	r0, r5
 80160c4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8016158 <generate_service_types+0xc8>
 80160c8:	f8cd 8014 	str.w	r8, [sp, #20]
 80160cc:	6852      	ldr	r2, [r2, #4]
 80160ce:	9100      	str	r1, [sp, #0]
 80160d0:	4621      	mov	r1, r4
 80160d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80160d6:	f8cd a004 	str.w	sl, [sp, #4]
 80160da:	e9cd 9203 	strd	r9, r2, [sp, #12]
 80160de:	4a1a      	ldr	r2, [pc, #104]	; (8016148 <generate_service_types+0xb8>)
 80160e0:	f009 fcb0 	bl	801fa44 <sniprintf>
 80160e4:	2300      	movs	r3, #0
 80160e6:	42a0      	cmp	r0, r4
 80160e8:	ea6f 0600 	mvn.w	r6, r0
 80160ec:	703b      	strb	r3, [r7, #0]
 80160ee:	f8db 3000 	ldr.w	r3, [fp]
 80160f2:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 80160f6:	bfac      	ite	ge
 80160f8:	2500      	movge	r5, #0
 80160fa:	2501      	movlt	r5, #1
 80160fc:	b30b      	cbz	r3, 8016142 <generate_service_types+0xb2>
 80160fe:	4a13      	ldr	r2, [pc, #76]	; (801614c <generate_service_types+0xbc>)
 8016100:	f8cd 8014 	str.w	r8, [sp, #20]
 8016104:	402e      	ands	r6, r5
 8016106:	f8db 1004 	ldr.w	r1, [fp, #4]
 801610a:	4638      	mov	r0, r7
 801610c:	9104      	str	r1, [sp, #16]
 801610e:	4621      	mov	r1, r4
 8016110:	e9cd 2a00 	strd	r2, sl, [sp]
 8016114:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016118:	4a0b      	ldr	r2, [pc, #44]	; (8016148 <generate_service_types+0xb8>)
 801611a:	f009 fc93 	bl	801fa44 <sniprintf>
 801611e:	2800      	cmp	r0, #0
 8016120:	bfb4      	ite	lt
 8016122:	2600      	movlt	r6, #0
 8016124:	f006 0601 	andge.w	r6, r6, #1
 8016128:	42a0      	cmp	r0, r4
 801612a:	bfac      	ite	ge
 801612c:	2000      	movge	r0, #0
 801612e:	f006 0001 	andlt.w	r0, r6, #1
 8016132:	b007      	add	sp, #28
 8016134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016138:	4b05      	ldr	r3, [pc, #20]	; (8016150 <generate_service_types+0xc0>)
 801613a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 801614c <generate_service_types+0xbc>
 801613e:	4619      	mov	r1, r3
 8016140:	e7bd      	b.n	80160be <generate_service_types+0x2e>
 8016142:	4b03      	ldr	r3, [pc, #12]	; (8016150 <generate_service_types+0xc0>)
 8016144:	461a      	mov	r2, r3
 8016146:	e7db      	b.n	8016100 <generate_service_types+0x70>
 8016148:	080243c8 	.word	0x080243c8
 801614c:	080243c4 	.word	0x080243c4
 8016150:	08024448 	.word	0x08024448
 8016154:	080243d8 	.word	0x080243d8
 8016158:	080243dc 	.word	0x080243dc

0801615c <generate_type_name>:
 801615c:	2300      	movs	r3, #0
 801615e:	b530      	push	{r4, r5, lr}
 8016160:	700b      	strb	r3, [r1, #0]
 8016162:	b087      	sub	sp, #28
 8016164:	6803      	ldr	r3, [r0, #0]
 8016166:	4614      	mov	r4, r2
 8016168:	b1bb      	cbz	r3, 801619a <generate_type_name+0x3e>
 801616a:	4a0e      	ldr	r2, [pc, #56]	; (80161a4 <generate_type_name+0x48>)
 801616c:	4615      	mov	r5, r2
 801616e:	9500      	str	r5, [sp, #0]
 8016170:	9203      	str	r2, [sp, #12]
 8016172:	4d0d      	ldr	r5, [pc, #52]	; (80161a8 <generate_type_name+0x4c>)
 8016174:	6842      	ldr	r2, [r0, #4]
 8016176:	4608      	mov	r0, r1
 8016178:	490c      	ldr	r1, [pc, #48]	; (80161ac <generate_type_name+0x50>)
 801617a:	9204      	str	r2, [sp, #16]
 801617c:	9105      	str	r1, [sp, #20]
 801617e:	9102      	str	r1, [sp, #8]
 8016180:	4621      	mov	r1, r4
 8016182:	4a0b      	ldr	r2, [pc, #44]	; (80161b0 <generate_type_name+0x54>)
 8016184:	9501      	str	r5, [sp, #4]
 8016186:	f009 fc5d 	bl	801fa44 <sniprintf>
 801618a:	2800      	cmp	r0, #0
 801618c:	bfa8      	it	ge
 801618e:	4284      	cmpge	r4, r0
 8016190:	bfcc      	ite	gt
 8016192:	2001      	movgt	r0, #1
 8016194:	2000      	movle	r0, #0
 8016196:	b007      	add	sp, #28
 8016198:	bd30      	pop	{r4, r5, pc}
 801619a:	4b06      	ldr	r3, [pc, #24]	; (80161b4 <generate_type_name+0x58>)
 801619c:	4a01      	ldr	r2, [pc, #4]	; (80161a4 <generate_type_name+0x48>)
 801619e:	461d      	mov	r5, r3
 80161a0:	e7e5      	b.n	801616e <generate_type_name+0x12>
 80161a2:	bf00      	nop
 80161a4:	080243c4 	.word	0x080243c4
 80161a8:	080243dc 	.word	0x080243dc
 80161ac:	080243d8 	.word	0x080243d8
 80161b0:	080243c8 	.word	0x080243c8
 80161b4:	08024448 	.word	0x08024448

080161b8 <generate_topic_name>:
 80161b8:	b530      	push	{r4, r5, lr}
 80161ba:	4614      	mov	r4, r2
 80161bc:	b083      	sub	sp, #12
 80161be:	4605      	mov	r5, r0
 80161c0:	4b07      	ldr	r3, [pc, #28]	; (80161e0 <generate_topic_name+0x28>)
 80161c2:	4a08      	ldr	r2, [pc, #32]	; (80161e4 <generate_topic_name+0x2c>)
 80161c4:	4608      	mov	r0, r1
 80161c6:	9500      	str	r5, [sp, #0]
 80161c8:	4621      	mov	r1, r4
 80161ca:	f009 fc3b 	bl	801fa44 <sniprintf>
 80161ce:	2800      	cmp	r0, #0
 80161d0:	bfa8      	it	ge
 80161d2:	4284      	cmpge	r4, r0
 80161d4:	bfcc      	ite	gt
 80161d6:	2001      	movgt	r0, #1
 80161d8:	2000      	movle	r0, #0
 80161da:	b003      	add	sp, #12
 80161dc:	bd30      	pop	{r4, r5, pc}
 80161de:	bf00      	nop
 80161e0:	080243f8 	.word	0x080243f8
 80161e4:	08023dc8 	.word	0x08023dc8

080161e8 <is_uxrce_rmw_identifier_valid>:
 80161e8:	b510      	push	{r4, lr}
 80161ea:	4604      	mov	r4, r0
 80161ec:	b140      	cbz	r0, 8016200 <is_uxrce_rmw_identifier_valid+0x18>
 80161ee:	f006 ff33 	bl	801d058 <rmw_get_implementation_identifier>
 80161f2:	4601      	mov	r1, r0
 80161f4:	4620      	mov	r0, r4
 80161f6:	f7ea f823 	bl	8000240 <strcmp>
 80161fa:	fab0 f080 	clz	r0, r0
 80161fe:	0940      	lsrs	r0, r0, #5
 8016200:	bd10      	pop	{r4, pc}
 8016202:	bf00      	nop

08016204 <get_message_typesupport_handle>:
 8016204:	6883      	ldr	r3, [r0, #8]
 8016206:	4718      	bx	r3

08016208 <get_message_typesupport_handle_function>:
 8016208:	b510      	push	{r4, lr}
 801620a:	4604      	mov	r4, r0
 801620c:	6800      	ldr	r0, [r0, #0]
 801620e:	f7ea f817 	bl	8000240 <strcmp>
 8016212:	2800      	cmp	r0, #0
 8016214:	bf0c      	ite	eq
 8016216:	4620      	moveq	r0, r4
 8016218:	2000      	movne	r0, #0
 801621a:	bd10      	pop	{r4, pc}

0801621c <get_service_typesupport_handle>:
 801621c:	6883      	ldr	r3, [r0, #8]
 801621e:	4718      	bx	r3

08016220 <get_service_typesupport_handle_function>:
 8016220:	b510      	push	{r4, lr}
 8016222:	4604      	mov	r4, r0
 8016224:	6800      	ldr	r0, [r0, #0]
 8016226:	f7ea f80b 	bl	8000240 <strcmp>
 801622a:	2800      	cmp	r0, #0
 801622c:	bf0c      	ite	eq
 801622e:	4620      	moveq	r0, r4
 8016230:	2000      	movne	r0, #0
 8016232:	bd10      	pop	{r4, pc}

08016234 <rosidl_runtime_c__String__init>:
 8016234:	b510      	push	{r4, lr}
 8016236:	4604      	mov	r4, r0
 8016238:	b086      	sub	sp, #24
 801623a:	b170      	cbz	r0, 801625a <rosidl_runtime_c__String__init+0x26>
 801623c:	a801      	add	r0, sp, #4
 801623e:	f7fd feef 	bl	8014020 <rcutils_get_default_allocator>
 8016242:	9b01      	ldr	r3, [sp, #4]
 8016244:	9905      	ldr	r1, [sp, #20]
 8016246:	2001      	movs	r0, #1
 8016248:	4798      	blx	r3
 801624a:	6020      	str	r0, [r4, #0]
 801624c:	b128      	cbz	r0, 801625a <rosidl_runtime_c__String__init+0x26>
 801624e:	2100      	movs	r1, #0
 8016250:	2201      	movs	r2, #1
 8016252:	7001      	strb	r1, [r0, #0]
 8016254:	4610      	mov	r0, r2
 8016256:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801625a:	b006      	add	sp, #24
 801625c:	bd10      	pop	{r4, pc}
 801625e:	bf00      	nop

08016260 <rosidl_runtime_c__String__fini>:
 8016260:	b320      	cbz	r0, 80162ac <rosidl_runtime_c__String__fini+0x4c>
 8016262:	6803      	ldr	r3, [r0, #0]
 8016264:	b510      	push	{r4, lr}
 8016266:	4604      	mov	r4, r0
 8016268:	b086      	sub	sp, #24
 801626a:	b173      	cbz	r3, 801628a <rosidl_runtime_c__String__fini+0x2a>
 801626c:	6883      	ldr	r3, [r0, #8]
 801626e:	b1f3      	cbz	r3, 80162ae <rosidl_runtime_c__String__fini+0x4e>
 8016270:	a801      	add	r0, sp, #4
 8016272:	f7fd fed5 	bl	8014020 <rcutils_get_default_allocator>
 8016276:	9b02      	ldr	r3, [sp, #8]
 8016278:	9905      	ldr	r1, [sp, #20]
 801627a:	6820      	ldr	r0, [r4, #0]
 801627c:	4798      	blx	r3
 801627e:	2300      	movs	r3, #0
 8016280:	e9c4 3300 	strd	r3, r3, [r4]
 8016284:	60a3      	str	r3, [r4, #8]
 8016286:	b006      	add	sp, #24
 8016288:	bd10      	pop	{r4, pc}
 801628a:	6843      	ldr	r3, [r0, #4]
 801628c:	b9db      	cbnz	r3, 80162c6 <rosidl_runtime_c__String__fini+0x66>
 801628e:	6883      	ldr	r3, [r0, #8]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d0f8      	beq.n	8016286 <rosidl_runtime_c__String__fini+0x26>
 8016294:	4b12      	ldr	r3, [pc, #72]	; (80162e0 <rosidl_runtime_c__String__fini+0x80>)
 8016296:	2251      	movs	r2, #81	; 0x51
 8016298:	2101      	movs	r1, #1
 801629a:	4812      	ldr	r0, [pc, #72]	; (80162e4 <rosidl_runtime_c__String__fini+0x84>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	f009 faa6 	bl	801f7f0 <fwrite>
 80162a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162a8:	f008 f91e 	bl	801e4e8 <exit>
 80162ac:	4770      	bx	lr
 80162ae:	4b0c      	ldr	r3, [pc, #48]	; (80162e0 <rosidl_runtime_c__String__fini+0x80>)
 80162b0:	224c      	movs	r2, #76	; 0x4c
 80162b2:	2101      	movs	r1, #1
 80162b4:	480c      	ldr	r0, [pc, #48]	; (80162e8 <rosidl_runtime_c__String__fini+0x88>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	68db      	ldr	r3, [r3, #12]
 80162ba:	f009 fa99 	bl	801f7f0 <fwrite>
 80162be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162c2:	f008 f911 	bl	801e4e8 <exit>
 80162c6:	4b06      	ldr	r3, [pc, #24]	; (80162e0 <rosidl_runtime_c__String__fini+0x80>)
 80162c8:	224e      	movs	r2, #78	; 0x4e
 80162ca:	2101      	movs	r1, #1
 80162cc:	4807      	ldr	r0, [pc, #28]	; (80162ec <rosidl_runtime_c__String__fini+0x8c>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	f009 fa8d 	bl	801f7f0 <fwrite>
 80162d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80162da:	f008 f905 	bl	801e4e8 <exit>
 80162de:	bf00      	nop
 80162e0:	200009a0 	.word	0x200009a0
 80162e4:	0802449c 	.word	0x0802449c
 80162e8:	080243fc 	.word	0x080243fc
 80162ec:	0802444c 	.word	0x0802444c

080162f0 <rosidl_runtime_c__String__assignn>:
 80162f0:	2900      	cmp	r1, #0
 80162f2:	bf18      	it	ne
 80162f4:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 80162f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162fc:	bf0c      	ite	eq
 80162fe:	2401      	moveq	r4, #1
 8016300:	2400      	movne	r4, #0
 8016302:	b087      	sub	sp, #28
 8016304:	2800      	cmp	r0, #0
 8016306:	bf08      	it	eq
 8016308:	f044 0401 	orreq.w	r4, r4, #1
 801630c:	b124      	cbz	r4, 8016318 <rosidl_runtime_c__String__assignn+0x28>
 801630e:	2400      	movs	r4, #0
 8016310:	4620      	mov	r0, r4
 8016312:	b007      	add	sp, #28
 8016314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016318:	4616      	mov	r6, r2
 801631a:	4605      	mov	r5, r0
 801631c:	a801      	add	r0, sp, #4
 801631e:	460f      	mov	r7, r1
 8016320:	f106 0901 	add.w	r9, r6, #1
 8016324:	f7fd fe7c 	bl	8014020 <rcutils_get_default_allocator>
 8016328:	9b03      	ldr	r3, [sp, #12]
 801632a:	9a05      	ldr	r2, [sp, #20]
 801632c:	4649      	mov	r1, r9
 801632e:	6828      	ldr	r0, [r5, #0]
 8016330:	4798      	blx	r3
 8016332:	4680      	mov	r8, r0
 8016334:	2800      	cmp	r0, #0
 8016336:	d0eb      	beq.n	8016310 <rosidl_runtime_c__String__assignn+0x20>
 8016338:	4639      	mov	r1, r7
 801633a:	4632      	mov	r2, r6
 801633c:	f009 fddf 	bl	801fefe <memcpy>
 8016340:	f808 4006 	strb.w	r4, [r8, r6]
 8016344:	2401      	movs	r4, #1
 8016346:	f8c5 9008 	str.w	r9, [r5, #8]
 801634a:	4620      	mov	r0, r4
 801634c:	e9c5 8600 	strd	r8, r6, [r5]
 8016350:	b007      	add	sp, #28
 8016352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016356:	bf00      	nop

08016358 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801635c:	6805      	ldr	r5, [r0, #0]
 801635e:	4604      	mov	r4, r0
 8016360:	460e      	mov	r6, r1
 8016362:	4628      	mov	r0, r5
 8016364:	f7e9 ff6c 	bl	8000240 <strcmp>
 8016368:	b1c8      	cbz	r0, 801639e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801636a:	4b11      	ldr	r3, [pc, #68]	; (80163b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	429d      	cmp	r5, r3
 8016370:	d112      	bne.n	8016398 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016372:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016376:	f8d8 4000 	ldr.w	r4, [r8]
 801637a:	b16c      	cbz	r4, 8016398 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801637c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016380:	2700      	movs	r7, #0
 8016382:	3d04      	subs	r5, #4
 8016384:	4631      	mov	r1, r6
 8016386:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801638a:	f7e9 ff59 	bl	8000240 <strcmp>
 801638e:	00bb      	lsls	r3, r7, #2
 8016390:	b140      	cbz	r0, 80163a4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8016392:	3701      	adds	r7, #1
 8016394:	42bc      	cmp	r4, r7
 8016396:	d1f5      	bne.n	8016384 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8016398:	2000      	movs	r0, #0
 801639a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801639e:	4620      	mov	r0, r4
 80163a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80163a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163ac:	58d3      	ldr	r3, [r2, r3]
 80163ae:	4718      	bx	r3
 80163b0:	200008bc 	.word	0x200008bc

080163b4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80163b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163b8:	6805      	ldr	r5, [r0, #0]
 80163ba:	4604      	mov	r4, r0
 80163bc:	460e      	mov	r6, r1
 80163be:	4628      	mov	r0, r5
 80163c0:	f7e9 ff3e 	bl	8000240 <strcmp>
 80163c4:	b1c8      	cbz	r0, 80163fa <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80163c6:	4b11      	ldr	r3, [pc, #68]	; (801640c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	429d      	cmp	r5, r3
 80163cc:	d112      	bne.n	80163f4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80163ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80163d2:	f8d8 4000 	ldr.w	r4, [r8]
 80163d6:	b16c      	cbz	r4, 80163f4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80163d8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80163dc:	2700      	movs	r7, #0
 80163de:	3d04      	subs	r5, #4
 80163e0:	4631      	mov	r1, r6
 80163e2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80163e6:	f7e9 ff2b 	bl	8000240 <strcmp>
 80163ea:	00bb      	lsls	r3, r7, #2
 80163ec:	b140      	cbz	r0, 8016400 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80163ee:	3701      	adds	r7, #1
 80163f0:	42bc      	cmp	r4, r7
 80163f2:	d1f5      	bne.n	80163e0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80163f4:	2000      	movs	r0, #0
 80163f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163fa:	4620      	mov	r0, r4
 80163fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016400:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016408:	58d3      	ldr	r3, [r2, r3]
 801640a:	4718      	bx	r3
 801640c:	200008bc 	.word	0x200008bc

08016410 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8016410:	4b04      	ldr	r3, [pc, #16]	; (8016424 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	b10a      	cbz	r2, 801641a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 8016416:	4803      	ldr	r0, [pc, #12]	; (8016424 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8016418:	4770      	bx	lr
 801641a:	4a03      	ldr	r2, [pc, #12]	; (8016428 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 801641c:	4801      	ldr	r0, [pc, #4]	; (8016424 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801641e:	6812      	ldr	r2, [r2, #0]
 8016420:	601a      	str	r2, [r3, #0]
 8016422:	4770      	bx	lr
 8016424:	200008cc 	.word	0x200008cc
 8016428:	200008bc 	.word	0x200008bc

0801642c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 801642c:	4a02      	ldr	r2, [pc, #8]	; (8016438 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 801642e:	4b03      	ldr	r3, [pc, #12]	; (801643c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8016430:	6812      	ldr	r2, [r2, #0]
 8016432:	601a      	str	r2, [r3, #0]
 8016434:	4770      	bx	lr
 8016436:	bf00      	nop
 8016438:	200008bc 	.word	0x200008bc
 801643c:	200008cc 	.word	0x200008cc

08016440 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8016440:	f007 b83c 	b.w	801d4bc <std_msgs__msg__String__init>

08016444 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 8016444:	f007 b84c 	b.w	801d4e0 <std_msgs__msg__String__fini>

08016448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 8016448:	4b04      	ldr	r3, [pc, #16]	; (801645c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	b10a      	cbz	r2, 8016452 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801644e:	4803      	ldr	r0, [pc, #12]	; (801645c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8016450:	4770      	bx	lr
 8016452:	4a03      	ldr	r2, [pc, #12]	; (8016460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8016454:	4801      	ldr	r0, [pc, #4]	; (801645c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8016456:	6812      	ldr	r2, [r2, #0]
 8016458:	601a      	str	r2, [r3, #0]
 801645a:	4770      	bx	lr
 801645c:	20000914 	.word	0x20000914
 8016460:	200008c0 	.word	0x200008c0

08016464 <_String__max_serialized_size>:
 8016464:	2000      	movs	r0, #0
 8016466:	4770      	bx	lr

08016468 <_String__cdr_serialize>:
 8016468:	b1c8      	cbz	r0, 801649e <_String__cdr_serialize+0x36>
 801646a:	b570      	push	{r4, r5, r6, lr}
 801646c:	6806      	ldr	r6, [r0, #0]
 801646e:	4604      	mov	r4, r0
 8016470:	460d      	mov	r5, r1
 8016472:	b15e      	cbz	r6, 801648c <_String__cdr_serialize+0x24>
 8016474:	4630      	mov	r0, r6
 8016476:	f7e9 ff43 	bl	8000300 <strlen>
 801647a:	4603      	mov	r3, r0
 801647c:	1c42      	adds	r2, r0, #1
 801647e:	4631      	mov	r1, r6
 8016480:	4628      	mov	r0, r5
 8016482:	6063      	str	r3, [r4, #4]
 8016484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016488:	f7fb bf76 	b.w	8012378 <ucdr_serialize_sequence_char>
 801648c:	4633      	mov	r3, r6
 801648e:	4632      	mov	r2, r6
 8016490:	4631      	mov	r1, r6
 8016492:	4628      	mov	r0, r5
 8016494:	6063      	str	r3, [r4, #4]
 8016496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801649a:	f7fb bf6d 	b.w	8012378 <ucdr_serialize_sequence_char>
 801649e:	4770      	bx	lr

080164a0 <get_serialized_size_std_msgs__msg__String>:
 80164a0:	b510      	push	{r4, lr}
 80164a2:	4604      	mov	r4, r0
 80164a4:	b130      	cbz	r0, 80164b4 <get_serialized_size_std_msgs__msg__String+0x14>
 80164a6:	4608      	mov	r0, r1
 80164a8:	2104      	movs	r1, #4
 80164aa:	f7fb fef5 	bl	8012298 <ucdr_alignment>
 80164ae:	6863      	ldr	r3, [r4, #4]
 80164b0:	3305      	adds	r3, #5
 80164b2:	4418      	add	r0, r3
 80164b4:	bd10      	pop	{r4, pc}
 80164b6:	bf00      	nop

080164b8 <_String__cdr_deserialize>:
 80164b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164ba:	460c      	mov	r4, r1
 80164bc:	b083      	sub	sp, #12
 80164be:	b1a1      	cbz	r1, 80164ea <_String__cdr_deserialize+0x32>
 80164c0:	688f      	ldr	r7, [r1, #8]
 80164c2:	ab01      	add	r3, sp, #4
 80164c4:	6809      	ldr	r1, [r1, #0]
 80164c6:	4606      	mov	r6, r0
 80164c8:	463a      	mov	r2, r7
 80164ca:	f7fb ff67 	bl	801239c <ucdr_deserialize_sequence_char>
 80164ce:	9b01      	ldr	r3, [sp, #4]
 80164d0:	4605      	mov	r5, r0
 80164d2:	b920      	cbnz	r0, 80164de <_String__cdr_deserialize+0x26>
 80164d4:	429f      	cmp	r7, r3
 80164d6:	d30c      	bcc.n	80164f2 <_String__cdr_deserialize+0x3a>
 80164d8:	4628      	mov	r0, r5
 80164da:	b003      	add	sp, #12
 80164dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164de:	b103      	cbz	r3, 80164e2 <_String__cdr_deserialize+0x2a>
 80164e0:	3b01      	subs	r3, #1
 80164e2:	4628      	mov	r0, r5
 80164e4:	6063      	str	r3, [r4, #4]
 80164e6:	b003      	add	sp, #12
 80164e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164ea:	460d      	mov	r5, r1
 80164ec:	4628      	mov	r0, r5
 80164ee:	b003      	add	sp, #12
 80164f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164f2:	2101      	movs	r1, #1
 80164f4:	4630      	mov	r0, r6
 80164f6:	75b5      	strb	r5, [r6, #22]
 80164f8:	7571      	strb	r1, [r6, #21]
 80164fa:	6065      	str	r5, [r4, #4]
 80164fc:	f7fb fee4 	bl	80122c8 <ucdr_align_to>
 8016500:	4630      	mov	r0, r6
 8016502:	9901      	ldr	r1, [sp, #4]
 8016504:	f7fb ff18 	bl	8012338 <ucdr_advance_buffer>
 8016508:	4628      	mov	r0, r5
 801650a:	b003      	add	sp, #12
 801650c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801650e:	bf00      	nop

08016510 <_String__get_serialized_size>:
 8016510:	b510      	push	{r4, lr}
 8016512:	4604      	mov	r4, r0
 8016514:	b130      	cbz	r0, 8016524 <_String__get_serialized_size+0x14>
 8016516:	2104      	movs	r1, #4
 8016518:	2000      	movs	r0, #0
 801651a:	f7fb febd 	bl	8012298 <ucdr_alignment>
 801651e:	6863      	ldr	r3, [r4, #4]
 8016520:	3305      	adds	r3, #5
 8016522:	4418      	add	r0, r3
 8016524:	bd10      	pop	{r4, pc}
 8016526:	bf00      	nop

08016528 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8016528:	4800      	ldr	r0, [pc, #0]	; (801652c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 801652a:	4770      	bx	lr
 801652c:	20000920 	.word	0x20000920

08016530 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 8016530:	3800      	subs	r0, #0
 8016532:	bf18      	it	ne
 8016534:	2001      	movne	r0, #1
 8016536:	4770      	bx	lr

08016538 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 8016538:	4770      	bx	lr
 801653a:	bf00      	nop

0801653c <custom_test_msgs__srv__AddThreeInts_Response__init>:
 801653c:	3800      	subs	r0, #0
 801653e:	bf18      	it	ne
 8016540:	2001      	movne	r0, #1
 8016542:	4770      	bx	lr

08016544 <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 8016544:	4770      	bx	lr
 8016546:	bf00      	nop

08016548 <drive_msgs__msg__Omni__init>:
 8016548:	b538      	push	{r3, r4, r5, lr}
 801654a:	4604      	mov	r4, r0
 801654c:	b128      	cbz	r0, 801655a <drive_msgs__msg__Omni__init+0x12>
 801654e:	f7ff fe71 	bl	8016234 <rosidl_runtime_c__String__init>
 8016552:	4605      	mov	r5, r0
 8016554:	b120      	cbz	r0, 8016560 <drive_msgs__msg__Omni__init+0x18>
 8016556:	4628      	mov	r0, r5
 8016558:	bd38      	pop	{r3, r4, r5, pc}
 801655a:	4605      	mov	r5, r0
 801655c:	4628      	mov	r0, r5
 801655e:	bd38      	pop	{r3, r4, r5, pc}
 8016560:	4620      	mov	r0, r4
 8016562:	f7ff fe7d 	bl	8016260 <rosidl_runtime_c__String__fini>
 8016566:	4628      	mov	r0, r5
 8016568:	bd38      	pop	{r3, r4, r5, pc}
 801656a:	bf00      	nop

0801656c <drive_msgs__msg__Omni__fini>:
 801656c:	b108      	cbz	r0, 8016572 <drive_msgs__msg__Omni__fini+0x6>
 801656e:	f7ff be77 	b.w	8016260 <rosidl_runtime_c__String__fini>
 8016572:	4770      	bx	lr

08016574 <drive_msgs__msg__OmniEnc__init>:
 8016574:	b538      	push	{r3, r4, r5, lr}
 8016576:	4604      	mov	r4, r0
 8016578:	b128      	cbz	r0, 8016586 <drive_msgs__msg__OmniEnc__init+0x12>
 801657a:	f7ff fe5b 	bl	8016234 <rosidl_runtime_c__String__init>
 801657e:	4605      	mov	r5, r0
 8016580:	b120      	cbz	r0, 801658c <drive_msgs__msg__OmniEnc__init+0x18>
 8016582:	4628      	mov	r0, r5
 8016584:	bd38      	pop	{r3, r4, r5, pc}
 8016586:	4605      	mov	r5, r0
 8016588:	4628      	mov	r0, r5
 801658a:	bd38      	pop	{r3, r4, r5, pc}
 801658c:	4620      	mov	r0, r4
 801658e:	f7ff fe67 	bl	8016260 <rosidl_runtime_c__String__fini>
 8016592:	4628      	mov	r0, r5
 8016594:	bd38      	pop	{r3, r4, r5, pc}
 8016596:	bf00      	nop

08016598 <drive_msgs__msg__OmniEnc__fini>:
 8016598:	b108      	cbz	r0, 801659e <drive_msgs__msg__OmniEnc__fini+0x6>
 801659a:	f7ff be61 	b.w	8016260 <rosidl_runtime_c__String__fini>
 801659e:	4770      	bx	lr

080165a0 <manip_msgs__msg__Cmd__init>:
 80165a0:	3800      	subs	r0, #0
 80165a2:	bf18      	it	ne
 80165a4:	2001      	movne	r0, #1
 80165a6:	4770      	bx	lr

080165a8 <manip_msgs__msg__Cmd__fini>:
 80165a8:	4770      	bx	lr
 80165aa:	bf00      	nop

080165ac <ucdr_serialize_endian_array_char>:
 80165ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165b0:	4619      	mov	r1, r3
 80165b2:	461f      	mov	r7, r3
 80165b4:	4605      	mov	r5, r0
 80165b6:	4690      	mov	r8, r2
 80165b8:	f7fb fe16 	bl	80121e8 <ucdr_check_buffer_available_for>
 80165bc:	b9e0      	cbnz	r0, 80165f8 <ucdr_serialize_endian_array_char+0x4c>
 80165be:	463e      	mov	r6, r7
 80165c0:	e00b      	b.n	80165da <ucdr_serialize_endian_array_char+0x2e>
 80165c2:	4441      	add	r1, r8
 80165c4:	68a8      	ldr	r0, [r5, #8]
 80165c6:	4622      	mov	r2, r4
 80165c8:	1b36      	subs	r6, r6, r4
 80165ca:	f009 fc98 	bl	801fefe <memcpy>
 80165ce:	68ab      	ldr	r3, [r5, #8]
 80165d0:	6928      	ldr	r0, [r5, #16]
 80165d2:	4423      	add	r3, r4
 80165d4:	4420      	add	r0, r4
 80165d6:	60ab      	str	r3, [r5, #8]
 80165d8:	6128      	str	r0, [r5, #16]
 80165da:	4631      	mov	r1, r6
 80165dc:	2201      	movs	r2, #1
 80165de:	4628      	mov	r0, r5
 80165e0:	f7fb fe8c 	bl	80122fc <ucdr_check_final_buffer_behavior_array>
 80165e4:	1bb9      	subs	r1, r7, r6
 80165e6:	4604      	mov	r4, r0
 80165e8:	2800      	cmp	r0, #0
 80165ea:	d1ea      	bne.n	80165c2 <ucdr_serialize_endian_array_char+0x16>
 80165ec:	2301      	movs	r3, #1
 80165ee:	7da8      	ldrb	r0, [r5, #22]
 80165f0:	756b      	strb	r3, [r5, #21]
 80165f2:	4058      	eors	r0, r3
 80165f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165f8:	463a      	mov	r2, r7
 80165fa:	4641      	mov	r1, r8
 80165fc:	68a8      	ldr	r0, [r5, #8]
 80165fe:	f009 fc7e 	bl	801fefe <memcpy>
 8016602:	68aa      	ldr	r2, [r5, #8]
 8016604:	692b      	ldr	r3, [r5, #16]
 8016606:	443a      	add	r2, r7
 8016608:	443b      	add	r3, r7
 801660a:	60aa      	str	r2, [r5, #8]
 801660c:	612b      	str	r3, [r5, #16]
 801660e:	e7ed      	b.n	80165ec <ucdr_serialize_endian_array_char+0x40>

08016610 <ucdr_deserialize_endian_array_char>:
 8016610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016614:	4619      	mov	r1, r3
 8016616:	461f      	mov	r7, r3
 8016618:	4605      	mov	r5, r0
 801661a:	4690      	mov	r8, r2
 801661c:	f7fb fde4 	bl	80121e8 <ucdr_check_buffer_available_for>
 8016620:	b9e8      	cbnz	r0, 801665e <ucdr_deserialize_endian_array_char+0x4e>
 8016622:	463e      	mov	r6, r7
 8016624:	e00c      	b.n	8016640 <ucdr_deserialize_endian_array_char+0x30>
 8016626:	eb08 0003 	add.w	r0, r8, r3
 801662a:	68a9      	ldr	r1, [r5, #8]
 801662c:	4622      	mov	r2, r4
 801662e:	1b36      	subs	r6, r6, r4
 8016630:	f009 fc65 	bl	801fefe <memcpy>
 8016634:	68ab      	ldr	r3, [r5, #8]
 8016636:	6928      	ldr	r0, [r5, #16]
 8016638:	4423      	add	r3, r4
 801663a:	4420      	add	r0, r4
 801663c:	60ab      	str	r3, [r5, #8]
 801663e:	6128      	str	r0, [r5, #16]
 8016640:	4631      	mov	r1, r6
 8016642:	2201      	movs	r2, #1
 8016644:	4628      	mov	r0, r5
 8016646:	f7fb fe59 	bl	80122fc <ucdr_check_final_buffer_behavior_array>
 801664a:	1bbb      	subs	r3, r7, r6
 801664c:	4604      	mov	r4, r0
 801664e:	2800      	cmp	r0, #0
 8016650:	d1e9      	bne.n	8016626 <ucdr_deserialize_endian_array_char+0x16>
 8016652:	2301      	movs	r3, #1
 8016654:	7da8      	ldrb	r0, [r5, #22]
 8016656:	756b      	strb	r3, [r5, #21]
 8016658:	4058      	eors	r0, r3
 801665a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801665e:	463a      	mov	r2, r7
 8016660:	68a9      	ldr	r1, [r5, #8]
 8016662:	4640      	mov	r0, r8
 8016664:	f009 fc4b 	bl	801fefe <memcpy>
 8016668:	68aa      	ldr	r2, [r5, #8]
 801666a:	692b      	ldr	r3, [r5, #16]
 801666c:	443a      	add	r2, r7
 801666e:	443b      	add	r3, r7
 8016670:	60aa      	str	r2, [r5, #8]
 8016672:	612b      	str	r3, [r5, #16]
 8016674:	e7ed      	b.n	8016652 <ucdr_deserialize_endian_array_char+0x42>
 8016676:	bf00      	nop

08016678 <ucdr_serialize_array_uint8_t>:
 8016678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801667c:	4688      	mov	r8, r1
 801667e:	4611      	mov	r1, r2
 8016680:	4617      	mov	r7, r2
 8016682:	4605      	mov	r5, r0
 8016684:	f7fb fdb0 	bl	80121e8 <ucdr_check_buffer_available_for>
 8016688:	b9e0      	cbnz	r0, 80166c4 <ucdr_serialize_array_uint8_t+0x4c>
 801668a:	463e      	mov	r6, r7
 801668c:	e00b      	b.n	80166a6 <ucdr_serialize_array_uint8_t+0x2e>
 801668e:	4441      	add	r1, r8
 8016690:	68a8      	ldr	r0, [r5, #8]
 8016692:	4622      	mov	r2, r4
 8016694:	1b36      	subs	r6, r6, r4
 8016696:	f009 fc32 	bl	801fefe <memcpy>
 801669a:	68ab      	ldr	r3, [r5, #8]
 801669c:	6928      	ldr	r0, [r5, #16]
 801669e:	4423      	add	r3, r4
 80166a0:	4420      	add	r0, r4
 80166a2:	60ab      	str	r3, [r5, #8]
 80166a4:	6128      	str	r0, [r5, #16]
 80166a6:	4631      	mov	r1, r6
 80166a8:	2201      	movs	r2, #1
 80166aa:	4628      	mov	r0, r5
 80166ac:	f7fb fe26 	bl	80122fc <ucdr_check_final_buffer_behavior_array>
 80166b0:	1bb9      	subs	r1, r7, r6
 80166b2:	4604      	mov	r4, r0
 80166b4:	2800      	cmp	r0, #0
 80166b6:	d1ea      	bne.n	801668e <ucdr_serialize_array_uint8_t+0x16>
 80166b8:	2301      	movs	r3, #1
 80166ba:	7da8      	ldrb	r0, [r5, #22]
 80166bc:	756b      	strb	r3, [r5, #21]
 80166be:	4058      	eors	r0, r3
 80166c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c4:	463a      	mov	r2, r7
 80166c6:	4641      	mov	r1, r8
 80166c8:	68a8      	ldr	r0, [r5, #8]
 80166ca:	f009 fc18 	bl	801fefe <memcpy>
 80166ce:	68aa      	ldr	r2, [r5, #8]
 80166d0:	692b      	ldr	r3, [r5, #16]
 80166d2:	443a      	add	r2, r7
 80166d4:	443b      	add	r3, r7
 80166d6:	60aa      	str	r2, [r5, #8]
 80166d8:	612b      	str	r3, [r5, #16]
 80166da:	e7ed      	b.n	80166b8 <ucdr_serialize_array_uint8_t+0x40>

080166dc <ucdr_serialize_endian_array_uint8_t>:
 80166dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166e0:	4619      	mov	r1, r3
 80166e2:	461f      	mov	r7, r3
 80166e4:	4605      	mov	r5, r0
 80166e6:	4690      	mov	r8, r2
 80166e8:	f7fb fd7e 	bl	80121e8 <ucdr_check_buffer_available_for>
 80166ec:	b9e0      	cbnz	r0, 8016728 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80166ee:	463e      	mov	r6, r7
 80166f0:	e00b      	b.n	801670a <ucdr_serialize_endian_array_uint8_t+0x2e>
 80166f2:	4441      	add	r1, r8
 80166f4:	68a8      	ldr	r0, [r5, #8]
 80166f6:	4622      	mov	r2, r4
 80166f8:	1b36      	subs	r6, r6, r4
 80166fa:	f009 fc00 	bl	801fefe <memcpy>
 80166fe:	68ab      	ldr	r3, [r5, #8]
 8016700:	6928      	ldr	r0, [r5, #16]
 8016702:	4423      	add	r3, r4
 8016704:	4420      	add	r0, r4
 8016706:	60ab      	str	r3, [r5, #8]
 8016708:	6128      	str	r0, [r5, #16]
 801670a:	4631      	mov	r1, r6
 801670c:	2201      	movs	r2, #1
 801670e:	4628      	mov	r0, r5
 8016710:	f7fb fdf4 	bl	80122fc <ucdr_check_final_buffer_behavior_array>
 8016714:	1bb9      	subs	r1, r7, r6
 8016716:	4604      	mov	r4, r0
 8016718:	2800      	cmp	r0, #0
 801671a:	d1ea      	bne.n	80166f2 <ucdr_serialize_endian_array_uint8_t+0x16>
 801671c:	2301      	movs	r3, #1
 801671e:	7da8      	ldrb	r0, [r5, #22]
 8016720:	756b      	strb	r3, [r5, #21]
 8016722:	4058      	eors	r0, r3
 8016724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016728:	463a      	mov	r2, r7
 801672a:	4641      	mov	r1, r8
 801672c:	68a8      	ldr	r0, [r5, #8]
 801672e:	f009 fbe6 	bl	801fefe <memcpy>
 8016732:	68aa      	ldr	r2, [r5, #8]
 8016734:	692b      	ldr	r3, [r5, #16]
 8016736:	443a      	add	r2, r7
 8016738:	443b      	add	r3, r7
 801673a:	60aa      	str	r2, [r5, #8]
 801673c:	612b      	str	r3, [r5, #16]
 801673e:	e7ed      	b.n	801671c <ucdr_serialize_endian_array_uint8_t+0x40>

08016740 <ucdr_deserialize_array_uint8_t>:
 8016740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016744:	4688      	mov	r8, r1
 8016746:	4611      	mov	r1, r2
 8016748:	4617      	mov	r7, r2
 801674a:	4605      	mov	r5, r0
 801674c:	f7fb fd4c 	bl	80121e8 <ucdr_check_buffer_available_for>
 8016750:	b9e8      	cbnz	r0, 801678e <ucdr_deserialize_array_uint8_t+0x4e>
 8016752:	463e      	mov	r6, r7
 8016754:	e00c      	b.n	8016770 <ucdr_deserialize_array_uint8_t+0x30>
 8016756:	eb08 0003 	add.w	r0, r8, r3
 801675a:	68a9      	ldr	r1, [r5, #8]
 801675c:	4622      	mov	r2, r4
 801675e:	1b36      	subs	r6, r6, r4
 8016760:	f009 fbcd 	bl	801fefe <memcpy>
 8016764:	68ab      	ldr	r3, [r5, #8]
 8016766:	6928      	ldr	r0, [r5, #16]
 8016768:	4423      	add	r3, r4
 801676a:	4420      	add	r0, r4
 801676c:	60ab      	str	r3, [r5, #8]
 801676e:	6128      	str	r0, [r5, #16]
 8016770:	4631      	mov	r1, r6
 8016772:	2201      	movs	r2, #1
 8016774:	4628      	mov	r0, r5
 8016776:	f7fb fdc1 	bl	80122fc <ucdr_check_final_buffer_behavior_array>
 801677a:	1bbb      	subs	r3, r7, r6
 801677c:	4604      	mov	r4, r0
 801677e:	2800      	cmp	r0, #0
 8016780:	d1e9      	bne.n	8016756 <ucdr_deserialize_array_uint8_t+0x16>
 8016782:	2301      	movs	r3, #1
 8016784:	7da8      	ldrb	r0, [r5, #22]
 8016786:	756b      	strb	r3, [r5, #21]
 8016788:	4058      	eors	r0, r3
 801678a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801678e:	463a      	mov	r2, r7
 8016790:	68a9      	ldr	r1, [r5, #8]
 8016792:	4640      	mov	r0, r8
 8016794:	f009 fbb3 	bl	801fefe <memcpy>
 8016798:	68aa      	ldr	r2, [r5, #8]
 801679a:	692b      	ldr	r3, [r5, #16]
 801679c:	443a      	add	r2, r7
 801679e:	443b      	add	r3, r7
 80167a0:	60aa      	str	r2, [r5, #8]
 80167a2:	612b      	str	r3, [r5, #16]
 80167a4:	e7ed      	b.n	8016782 <ucdr_deserialize_array_uint8_t+0x42>
 80167a6:	bf00      	nop

080167a8 <ucdr_deserialize_endian_array_uint8_t>:
 80167a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167ac:	4619      	mov	r1, r3
 80167ae:	461f      	mov	r7, r3
 80167b0:	4605      	mov	r5, r0
 80167b2:	4690      	mov	r8, r2
 80167b4:	f7fb fd18 	bl	80121e8 <ucdr_check_buffer_available_for>
 80167b8:	b9e8      	cbnz	r0, 80167f6 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 80167ba:	463e      	mov	r6, r7
 80167bc:	e00c      	b.n	80167d8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 80167be:	eb08 0003 	add.w	r0, r8, r3
 80167c2:	68a9      	ldr	r1, [r5, #8]
 80167c4:	4622      	mov	r2, r4
 80167c6:	1b36      	subs	r6, r6, r4
 80167c8:	f009 fb99 	bl	801fefe <memcpy>
 80167cc:	68ab      	ldr	r3, [r5, #8]
 80167ce:	6928      	ldr	r0, [r5, #16]
 80167d0:	4423      	add	r3, r4
 80167d2:	4420      	add	r0, r4
 80167d4:	60ab      	str	r3, [r5, #8]
 80167d6:	6128      	str	r0, [r5, #16]
 80167d8:	4631      	mov	r1, r6
 80167da:	2201      	movs	r2, #1
 80167dc:	4628      	mov	r0, r5
 80167de:	f7fb fd8d 	bl	80122fc <ucdr_check_final_buffer_behavior_array>
 80167e2:	1bbb      	subs	r3, r7, r6
 80167e4:	4604      	mov	r4, r0
 80167e6:	2800      	cmp	r0, #0
 80167e8:	d1e9      	bne.n	80167be <ucdr_deserialize_endian_array_uint8_t+0x16>
 80167ea:	2301      	movs	r3, #1
 80167ec:	7da8      	ldrb	r0, [r5, #22]
 80167ee:	756b      	strb	r3, [r5, #21]
 80167f0:	4058      	eors	r0, r3
 80167f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167f6:	463a      	mov	r2, r7
 80167f8:	68a9      	ldr	r1, [r5, #8]
 80167fa:	4640      	mov	r0, r8
 80167fc:	f009 fb7f 	bl	801fefe <memcpy>
 8016800:	68aa      	ldr	r2, [r5, #8]
 8016802:	692b      	ldr	r3, [r5, #16]
 8016804:	443a      	add	r2, r7
 8016806:	443b      	add	r3, r7
 8016808:	60aa      	str	r2, [r5, #8]
 801680a:	612b      	str	r3, [r5, #16]
 801680c:	e7ed      	b.n	80167ea <ucdr_deserialize_endian_array_uint8_t+0x42>
 801680e:	bf00      	nop

08016810 <uxr_buffer_delete_entity>:
 8016810:	b510      	push	{r4, lr}
 8016812:	2300      	movs	r3, #0
 8016814:	b08e      	sub	sp, #56	; 0x38
 8016816:	4604      	mov	r4, r0
 8016818:	9103      	str	r1, [sp, #12]
 801681a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801681e:	2303      	movs	r3, #3
 8016820:	2204      	movs	r2, #4
 8016822:	9300      	str	r3, [sp, #0]
 8016824:	ab06      	add	r3, sp, #24
 8016826:	f001 fb77 	bl	8017f18 <uxr_prepare_stream_to_write_submessage>
 801682a:	b918      	cbnz	r0, 8016834 <uxr_buffer_delete_entity+0x24>
 801682c:	4604      	mov	r4, r0
 801682e:	4620      	mov	r0, r4
 8016830:	b00e      	add	sp, #56	; 0x38
 8016832:	bd10      	pop	{r4, pc}
 8016834:	9902      	ldr	r1, [sp, #8]
 8016836:	aa05      	add	r2, sp, #20
 8016838:	4620      	mov	r0, r4
 801683a:	f001 fca9 	bl	8018190 <uxr_init_base_object_request>
 801683e:	4604      	mov	r4, r0
 8016840:	a905      	add	r1, sp, #20
 8016842:	a806      	add	r0, sp, #24
 8016844:	f003 fbae 	bl	8019fa4 <uxr_serialize_DELETE_Payload>
 8016848:	4620      	mov	r0, r4
 801684a:	b00e      	add	sp, #56	; 0x38
 801684c:	bd10      	pop	{r4, pc}
 801684e:	bf00      	nop

08016850 <uxr_common_create_entity>:
 8016850:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016854:	b510      	push	{r4, lr}
 8016856:	f1bc 0f01 	cmp.w	ip, #1
 801685a:	b08c      	sub	sp, #48	; 0x30
 801685c:	4604      	mov	r4, r0
 801685e:	9202      	str	r2, [sp, #8]
 8016860:	bf0c      	ite	eq
 8016862:	f003 0201 	andeq.w	r2, r3, #1
 8016866:	2200      	movne	r2, #0
 8016868:	330e      	adds	r3, #14
 801686a:	9103      	str	r1, [sp, #12]
 801686c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8016870:	441a      	add	r2, r3
 8016872:	ab04      	add	r3, sp, #16
 8016874:	9101      	str	r1, [sp, #4]
 8016876:	2101      	movs	r1, #1
 8016878:	b292      	uxth	r2, r2
 801687a:	9100      	str	r1, [sp, #0]
 801687c:	9903      	ldr	r1, [sp, #12]
 801687e:	f001 fb4b 	bl	8017f18 <uxr_prepare_stream_to_write_submessage>
 8016882:	b918      	cbnz	r0, 801688c <uxr_common_create_entity+0x3c>
 8016884:	4604      	mov	r4, r0
 8016886:	4620      	mov	r0, r4
 8016888:	b00c      	add	sp, #48	; 0x30
 801688a:	bd10      	pop	{r4, pc}
 801688c:	9902      	ldr	r1, [sp, #8]
 801688e:	4620      	mov	r0, r4
 8016890:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016892:	f001 fc7d 	bl	8018190 <uxr_init_base_object_request>
 8016896:	4604      	mov	r4, r0
 8016898:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801689a:	a804      	add	r0, sp, #16
 801689c:	f003 fadc 	bl	8019e58 <uxr_serialize_CREATE_Payload>
 80168a0:	4620      	mov	r0, r4
 80168a2:	b00c      	add	sp, #48	; 0x30
 80168a4:	bd10      	pop	{r4, pc}
 80168a6:	bf00      	nop

080168a8 <uxr_buffer_create_participant_bin>:
 80168a8:	b570      	push	{r4, r5, r6, lr}
 80168aa:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80168ae:	4605      	mov	r5, r0
 80168b0:	ac11      	add	r4, sp, #68	; 0x44
 80168b2:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 80168b6:	2303      	movs	r3, #3
 80168b8:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 80168bc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80168c0:	7223      	strb	r3, [r4, #8]
 80168c2:	2300      	movs	r3, #0
 80168c4:	2201      	movs	r2, #1
 80168c6:	f88d 3014 	strb.w	r3, [sp, #20]
 80168ca:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 80168cc:	7122      	strb	r2, [r4, #4]
 80168ce:	b1cb      	cbz	r3, 8016904 <uxr_buffer_create_participant_bin+0x5c>
 80168d0:	f88d 201c 	strb.w	r2, [sp, #28]
 80168d4:	9308      	str	r3, [sp, #32]
 80168d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80168da:	a915      	add	r1, sp, #84	; 0x54
 80168dc:	a809      	add	r0, sp, #36	; 0x24
 80168de:	f7fb fcd7 	bl	8012290 <ucdr_init_buffer>
 80168e2:	a905      	add	r1, sp, #20
 80168e4:	a809      	add	r0, sp, #36	; 0x24
 80168e6:	f002 fe6d 	bl	80195c4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80168ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168ec:	9600      	str	r6, [sp, #0]
 80168ee:	4628      	mov	r0, r5
 80168f0:	9401      	str	r4, [sp, #4]
 80168f2:	60e3      	str	r3, [r4, #12]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80168fa:	f7ff ffa9 	bl	8016850 <uxr_common_create_entity>
 80168fe:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8016902:	bd70      	pop	{r4, r5, r6, pc}
 8016904:	f88d 301c 	strb.w	r3, [sp, #28]
 8016908:	e7e5      	b.n	80168d6 <uxr_buffer_create_participant_bin+0x2e>
 801690a:	bf00      	nop

0801690c <uxr_buffer_create_topic_bin>:
 801690c:	b570      	push	{r4, r5, r6, lr}
 801690e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8016912:	4605      	mov	r5, r0
 8016914:	4618      	mov	r0, r3
 8016916:	9105      	str	r1, [sp, #20]
 8016918:	a997      	add	r1, sp, #604	; 0x25c
 801691a:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 801691e:	ac13      	add	r4, sp, #76	; 0x4c
 8016920:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016924:	2302      	movs	r3, #2
 8016926:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 801692a:	f000 fa8d 	bl	8016e48 <uxr_object_id_to_raw>
 801692e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8016930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016934:	a917      	add	r1, sp, #92	; 0x5c
 8016936:	a80b      	add	r0, sp, #44	; 0x2c
 8016938:	9306      	str	r3, [sp, #24]
 801693a:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 801693c:	930a      	str	r3, [sp, #40]	; 0x28
 801693e:	2303      	movs	r3, #3
 8016940:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8016944:	2301      	movs	r3, #1
 8016946:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801694a:	2300      	movs	r3, #0
 801694c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016950:	f7fb fc9e 	bl	8012290 <ucdr_init_buffer>
 8016954:	a906      	add	r1, sp, #24
 8016956:	a80b      	add	r0, sp, #44	; 0x2c
 8016958:	f002 fe56 	bl	8019608 <uxr_serialize_OBJK_Topic_Binary>
 801695c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801695e:	4628      	mov	r0, r5
 8016960:	9600      	str	r6, [sp, #0]
 8016962:	9316      	str	r3, [sp, #88]	; 0x58
 8016964:	b29b      	uxth	r3, r3
 8016966:	9401      	str	r4, [sp, #4]
 8016968:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801696c:	f7ff ff70 	bl	8016850 <uxr_common_create_entity>
 8016970:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8016974:	bd70      	pop	{r4, r5, r6, pc}
 8016976:	bf00      	nop

08016978 <uxr_buffer_create_publisher_bin>:
 8016978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801697a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 801697e:	2603      	movs	r6, #3
 8016980:	4605      	mov	r5, r0
 8016982:	4618      	mov	r0, r3
 8016984:	9105      	str	r1, [sp, #20]
 8016986:	a992      	add	r1, sp, #584	; 0x248
 8016988:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 801698c:	ac0e      	add	r4, sp, #56	; 0x38
 801698e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8016992:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016996:	f000 fa57 	bl	8016e48 <uxr_object_id_to_raw>
 801699a:	2300      	movs	r3, #0
 801699c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80169a0:	a912      	add	r1, sp, #72	; 0x48
 80169a2:	a806      	add	r0, sp, #24
 80169a4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80169a8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80169ac:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 80169b0:	f7fb fc6e 	bl	8012290 <ucdr_init_buffer>
 80169b4:	a993      	add	r1, sp, #588	; 0x24c
 80169b6:	a806      	add	r0, sp, #24
 80169b8:	f002 feda 	bl	8019770 <uxr_serialize_OBJK_Publisher_Binary>
 80169bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169be:	4628      	mov	r0, r5
 80169c0:	9700      	str	r7, [sp, #0]
 80169c2:	9311      	str	r3, [sp, #68]	; 0x44
 80169c4:	b29b      	uxth	r3, r3
 80169c6:	9401      	str	r4, [sp, #4]
 80169c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80169cc:	f7ff ff40 	bl	8016850 <uxr_common_create_entity>
 80169d0:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80169d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169d6:	bf00      	nop

080169d8 <uxr_buffer_create_subscriber_bin>:
 80169d8:	b570      	push	{r4, r5, r6, lr}
 80169da:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80169de:	4605      	mov	r5, r0
 80169e0:	4618      	mov	r0, r3
 80169e2:	9105      	str	r1, [sp, #20]
 80169e4:	a992      	add	r1, sp, #584	; 0x248
 80169e6:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 80169ea:	ac0e      	add	r4, sp, #56	; 0x38
 80169ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80169f0:	2304      	movs	r3, #4
 80169f2:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80169f6:	f000 fa27 	bl	8016e48 <uxr_object_id_to_raw>
 80169fa:	2300      	movs	r3, #0
 80169fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016a00:	a912      	add	r1, sp, #72	; 0x48
 8016a02:	a806      	add	r0, sp, #24
 8016a04:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8016a08:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8016a0c:	2303      	movs	r3, #3
 8016a0e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8016a12:	f7fb fc3d 	bl	8012290 <ucdr_init_buffer>
 8016a16:	a993      	add	r1, sp, #588	; 0x24c
 8016a18:	a806      	add	r0, sp, #24
 8016a1a:	f002 ff59 	bl	80198d0 <uxr_serialize_OBJK_Subscriber_Binary>
 8016a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a20:	4628      	mov	r0, r5
 8016a22:	9600      	str	r6, [sp, #0]
 8016a24:	9311      	str	r3, [sp, #68]	; 0x44
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	9401      	str	r4, [sp, #4]
 8016a2a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016a2e:	f7ff ff0f 	bl	8016850 <uxr_common_create_entity>
 8016a32:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8016a36:	bd70      	pop	{r4, r5, r6, pc}

08016a38 <uxr_buffer_create_datawriter_bin>:
 8016a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a3c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016a40:	4606      	mov	r6, r0
 8016a42:	4618      	mov	r0, r3
 8016a44:	2703      	movs	r7, #3
 8016a46:	ac1d      	add	r4, sp, #116	; 0x74
 8016a48:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8016a4c:	9105      	str	r1, [sp, #20]
 8016a4e:	a9a1      	add	r1, sp, #644	; 0x284
 8016a50:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8016a54:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016a58:	2305      	movs	r3, #5
 8016a5a:	7123      	strb	r3, [r4, #4]
 8016a5c:	f000 f9f4 	bl	8016e48 <uxr_object_id_to_raw>
 8016a60:	a90e      	add	r1, sp, #56	; 0x38
 8016a62:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8016a64:	7227      	strb	r7, [r4, #8]
 8016a66:	f000 f9ef 	bl	8016e48 <uxr_object_id_to_raw>
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8016a70:	3d00      	subs	r5, #0
 8016a72:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8016a76:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8016a7a:	bf18      	it	ne
 8016a7c:	2501      	movne	r5, #1
 8016a7e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8016a82:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8016a86:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8016a8a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8016a8e:	2301      	movs	r3, #1
 8016a90:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8016a94:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8016a98:	bb8a      	cbnz	r2, 8016afe <uxr_buffer_create_datawriter_bin+0xc6>
 8016a9a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8016a9e:	f04f 0c13 	mov.w	ip, #19
 8016aa2:	250b      	movs	r5, #11
 8016aa4:	2221      	movs	r2, #33	; 0x21
 8016aa6:	2111      	movs	r1, #17
 8016aa8:	2009      	movs	r0, #9
 8016aaa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8016aae:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8016ab2:	b923      	cbnz	r3, 8016abe <uxr_buffer_create_datawriter_bin+0x86>
 8016ab4:	4672      	mov	r2, lr
 8016ab6:	4661      	mov	r1, ip
 8016ab8:	4628      	mov	r0, r5
 8016aba:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8016abe:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d025      	beq.n	8016b12 <uxr_buffer_create_datawriter_bin+0xda>
 8016ac6:	2b03      	cmp	r3, #3
 8016ac8:	d029      	beq.n	8016b1e <uxr_buffer_create_datawriter_bin+0xe6>
 8016aca:	b32b      	cbz	r3, 8016b18 <uxr_buffer_create_datawriter_bin+0xe0>
 8016acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016ad0:	a921      	add	r1, sp, #132	; 0x84
 8016ad2:	a806      	add	r0, sp, #24
 8016ad4:	f7fb fbdc 	bl	8012290 <ucdr_init_buffer>
 8016ad8:	a90e      	add	r1, sp, #56	; 0x38
 8016ada:	a806      	add	r0, sp, #24
 8016adc:	f002 ffaa 	bl	8019a34 <uxr_serialize_OBJK_DataWriter_Binary>
 8016ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ae2:	f8cd 8000 	str.w	r8, [sp]
 8016ae6:	4630      	mov	r0, r6
 8016ae8:	9401      	str	r4, [sp, #4]
 8016aea:	60e3      	str	r3, [r4, #12]
 8016aec:	b29b      	uxth	r3, r3
 8016aee:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016af2:	f7ff fead 	bl	8016850 <uxr_common_create_entity>
 8016af6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016afe:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8016b02:	f04f 0c12 	mov.w	ip, #18
 8016b06:	250a      	movs	r5, #10
 8016b08:	2220      	movs	r2, #32
 8016b0a:	2110      	movs	r1, #16
 8016b0c:	2008      	movs	r0, #8
 8016b0e:	2702      	movs	r7, #2
 8016b10:	e7cd      	b.n	8016aae <uxr_buffer_create_datawriter_bin+0x76>
 8016b12:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8016b16:	e7d9      	b.n	8016acc <uxr_buffer_create_datawriter_bin+0x94>
 8016b18:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8016b1c:	e7d6      	b.n	8016acc <uxr_buffer_create_datawriter_bin+0x94>
 8016b1e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016b22:	e7d3      	b.n	8016acc <uxr_buffer_create_datawriter_bin+0x94>

08016b24 <uxr_buffer_create_datareader_bin>:
 8016b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b28:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8016b2c:	4606      	mov	r6, r0
 8016b2e:	4618      	mov	r0, r3
 8016b30:	2703      	movs	r7, #3
 8016b32:	ac1f      	add	r4, sp, #124	; 0x7c
 8016b34:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8016b38:	9105      	str	r1, [sp, #20]
 8016b3a:	a9a3      	add	r1, sp, #652	; 0x28c
 8016b3c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8016b40:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016b44:	2306      	movs	r3, #6
 8016b46:	7123      	strb	r3, [r4, #4]
 8016b48:	f000 f97e 	bl	8016e48 <uxr_object_id_to_raw>
 8016b4c:	a90e      	add	r1, sp, #56	; 0x38
 8016b4e:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8016b50:	7227      	strb	r7, [r4, #8]
 8016b52:	f000 f979 	bl	8016e48 <uxr_object_id_to_raw>
 8016b56:	2300      	movs	r3, #0
 8016b58:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8016b5c:	3d00      	subs	r5, #0
 8016b5e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8016b62:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8016b66:	bf18      	it	ne
 8016b68:	2501      	movne	r5, #1
 8016b6a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8016b6e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8016b72:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8016b76:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8016b7a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8016b7e:	2301      	movs	r3, #1
 8016b80:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8016b84:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8016b88:	bb8a      	cbnz	r2, 8016bee <uxr_buffer_create_datareader_bin+0xca>
 8016b8a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8016b8e:	f04f 0c13 	mov.w	ip, #19
 8016b92:	250b      	movs	r5, #11
 8016b94:	2221      	movs	r2, #33	; 0x21
 8016b96:	2111      	movs	r1, #17
 8016b98:	2009      	movs	r0, #9
 8016b9a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8016b9e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8016ba2:	b923      	cbnz	r3, 8016bae <uxr_buffer_create_datareader_bin+0x8a>
 8016ba4:	4672      	mov	r2, lr
 8016ba6:	4661      	mov	r1, ip
 8016ba8:	4628      	mov	r0, r5
 8016baa:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8016bae:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8016bb2:	2b01      	cmp	r3, #1
 8016bb4:	d025      	beq.n	8016c02 <uxr_buffer_create_datareader_bin+0xde>
 8016bb6:	2b03      	cmp	r3, #3
 8016bb8:	d029      	beq.n	8016c0e <uxr_buffer_create_datareader_bin+0xea>
 8016bba:	b32b      	cbz	r3, 8016c08 <uxr_buffer_create_datareader_bin+0xe4>
 8016bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016bc0:	a923      	add	r1, sp, #140	; 0x8c
 8016bc2:	a806      	add	r0, sp, #24
 8016bc4:	f7fb fb64 	bl	8012290 <ucdr_init_buffer>
 8016bc8:	a90e      	add	r1, sp, #56	; 0x38
 8016bca:	a806      	add	r0, sp, #24
 8016bcc:	f002 fef6 	bl	80199bc <uxr_serialize_OBJK_DataReader_Binary>
 8016bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bd2:	f8cd 8000 	str.w	r8, [sp]
 8016bd6:	4630      	mov	r0, r6
 8016bd8:	9401      	str	r4, [sp, #4]
 8016bda:	60e3      	str	r3, [r4, #12]
 8016bdc:	b29b      	uxth	r3, r3
 8016bde:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016be2:	f7ff fe35 	bl	8016850 <uxr_common_create_entity>
 8016be6:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8016bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bee:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8016bf2:	f04f 0c12 	mov.w	ip, #18
 8016bf6:	250a      	movs	r5, #10
 8016bf8:	2220      	movs	r2, #32
 8016bfa:	2110      	movs	r1, #16
 8016bfc:	2008      	movs	r0, #8
 8016bfe:	2702      	movs	r7, #2
 8016c00:	e7cd      	b.n	8016b9e <uxr_buffer_create_datareader_bin+0x7a>
 8016c02:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8016c06:	e7d9      	b.n	8016bbc <uxr_buffer_create_datareader_bin+0x98>
 8016c08:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8016c0c:	e7d6      	b.n	8016bbc <uxr_buffer_create_datareader_bin+0x98>
 8016c0e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016c12:	e7d3      	b.n	8016bbc <uxr_buffer_create_datareader_bin+0x98>

08016c14 <uxr_buffer_create_replier_bin>:
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8016c1a:	4605      	mov	r5, r0
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	9105      	str	r1, [sp, #20]
 8016c20:	a999      	add	r1, sp, #612	; 0x264
 8016c22:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8016c26:	ac15      	add	r4, sp, #84	; 0x54
 8016c28:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016c2c:	2308      	movs	r3, #8
 8016c2e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8016c32:	f000 f909 	bl	8016e48 <uxr_object_id_to_raw>
 8016c36:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8016c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c3c:	a919      	add	r1, sp, #100	; 0x64
 8016c3e:	a80d      	add	r0, sp, #52	; 0x34
 8016c40:	9306      	str	r3, [sp, #24]
 8016c42:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8016c44:	9307      	str	r3, [sp, #28]
 8016c46:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8016c48:	9308      	str	r3, [sp, #32]
 8016c4a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8016c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8016c4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c50:	930a      	str	r3, [sp, #40]	; 0x28
 8016c52:	2301      	movs	r3, #1
 8016c54:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8016c58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016c5c:	2303      	movs	r3, #3
 8016c5e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8016c62:	f7fb fb15 	bl	8012290 <ucdr_init_buffer>
 8016c66:	a906      	add	r1, sp, #24
 8016c68:	a80d      	add	r0, sp, #52	; 0x34
 8016c6a:	f002 ff0f 	bl	8019a8c <uxr_serialize_OBJK_Replier_Binary>
 8016c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c70:	4628      	mov	r0, r5
 8016c72:	9600      	str	r6, [sp, #0]
 8016c74:	9318      	str	r3, [sp, #96]	; 0x60
 8016c76:	b29b      	uxth	r3, r3
 8016c78:	9401      	str	r4, [sp, #4]
 8016c7a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016c7e:	f7ff fde7 	bl	8016850 <uxr_common_create_entity>
 8016c82:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8016c86:	bd70      	pop	{r4, r5, r6, pc}

08016c88 <get_custom_error>:
 8016c88:	4b01      	ldr	r3, [pc, #4]	; (8016c90 <get_custom_error+0x8>)
 8016c8a:	7818      	ldrb	r0, [r3, #0]
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop
 8016c90:	20016e4c 	.word	0x20016e4c

08016c94 <recv_custom_msg>:
 8016c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c98:	4693      	mov	fp, r2
 8016c9a:	b089      	sub	sp, #36	; 0x24
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	468a      	mov	sl, r1
 8016ca2:	9305      	str	r3, [sp, #20]
 8016ca4:	f88d 201e 	strb.w	r2, [sp, #30]
 8016ca8:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8016cac:	b322      	cbz	r2, 8016cf8 <recv_custom_msg+0x64>
 8016cae:	f200 2902 	addw	r9, r0, #514	; 0x202
 8016cb2:	f10d 081f 	add.w	r8, sp, #31
 8016cb6:	af05      	add	r7, sp, #20
 8016cb8:	f10d 061e 	add.w	r6, sp, #30
 8016cbc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8016cc0:	e002      	b.n	8016cc8 <recv_custom_msg+0x34>
 8016cc2:	9b05      	ldr	r3, [sp, #20]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	dd0f      	ble.n	8016ce8 <recv_custom_msg+0x54>
 8016cc8:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8016ccc:	4623      	mov	r3, r4
 8016cce:	4622      	mov	r2, r4
 8016cd0:	4648      	mov	r0, r9
 8016cd2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016cd6:	e9cd 5600 	strd	r5, r6, [sp]
 8016cda:	f001 fc6f 	bl	80185bc <uxr_read_framed_msg>
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d0ef      	beq.n	8016cc2 <recv_custom_msg+0x2e>
 8016ce2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016ce6:	b1b3      	cbz	r3, 8016d16 <recv_custom_msg+0x82>
 8016ce8:	4b0f      	ldr	r3, [pc, #60]	; (8016d28 <recv_custom_msg+0x94>)
 8016cea:	2000      	movs	r0, #0
 8016cec:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8016cf0:	701a      	strb	r2, [r3, #0]
 8016cf2:	b009      	add	sp, #36	; 0x24
 8016cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf8:	f10d 021f 	add.w	r2, sp, #31
 8016cfc:	4601      	mov	r1, r0
 8016cfe:	9200      	str	r2, [sp, #0]
 8016d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d04:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8016d08:	47a8      	blx	r5
 8016d0a:	2800      	cmp	r0, #0
 8016d0c:	d0ec      	beq.n	8016ce8 <recv_custom_msg+0x54>
 8016d0e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d1e8      	bne.n	8016ce8 <recv_custom_msg+0x54>
 8016d16:	f8cb 0000 	str.w	r0, [fp]
 8016d1a:	2001      	movs	r0, #1
 8016d1c:	f8ca 4000 	str.w	r4, [sl]
 8016d20:	b009      	add	sp, #36	; 0x24
 8016d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d26:	bf00      	nop
 8016d28:	20016e4c 	.word	0x20016e4c

08016d2c <send_custom_msg>:
 8016d2c:	b530      	push	{r4, r5, lr}
 8016d2e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8016d32:	b087      	sub	sp, #28
 8016d34:	4614      	mov	r4, r2
 8016d36:	b995      	cbnz	r5, 8016d5e <send_custom_msg+0x32>
 8016d38:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8016d3c:	f10d 0317 	add.w	r3, sp, #23
 8016d40:	47a8      	blx	r5
 8016d42:	1e03      	subs	r3, r0, #0
 8016d44:	bf18      	it	ne
 8016d46:	2301      	movne	r3, #1
 8016d48:	42a0      	cmp	r0, r4
 8016d4a:	bf18      	it	ne
 8016d4c:	2300      	movne	r3, #0
 8016d4e:	b91b      	cbnz	r3, 8016d58 <send_custom_msg+0x2c>
 8016d50:	4a0a      	ldr	r2, [pc, #40]	; (8016d7c <send_custom_msg+0x50>)
 8016d52:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8016d56:	7011      	strb	r1, [r2, #0]
 8016d58:	4618      	mov	r0, r3
 8016d5a:	b007      	add	sp, #28
 8016d5c:	bd30      	pop	{r4, r5, pc}
 8016d5e:	460b      	mov	r3, r1
 8016d60:	2200      	movs	r2, #0
 8016d62:	f10d 0117 	add.w	r1, sp, #23
 8016d66:	9400      	str	r4, [sp, #0]
 8016d68:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8016d72:	f200 2002 	addw	r0, r0, #514	; 0x202
 8016d76:	f001 fa43 	bl	8018200 <uxr_write_framed_msg>
 8016d7a:	e7e2      	b.n	8016d42 <send_custom_msg+0x16>
 8016d7c:	20016e4c 	.word	0x20016e4c

08016d80 <uxr_set_custom_transport_callbacks>:
 8016d80:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8016d84:	9901      	ldr	r1, [sp, #4]
 8016d86:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8016d8a:	9b00      	ldr	r3, [sp, #0]
 8016d8c:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8016d90:	4770      	bx	lr
 8016d92:	bf00      	nop

08016d94 <uxr_init_custom_transport>:
 8016d94:	b538      	push	{r3, r4, r5, lr}
 8016d96:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8016d9a:	b303      	cbz	r3, 8016dde <uxr_init_custom_transport+0x4a>
 8016d9c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8016da0:	4604      	mov	r4, r0
 8016da2:	b1e2      	cbz	r2, 8016dde <uxr_init_custom_transport+0x4a>
 8016da4:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8016da8:	b1ca      	cbz	r2, 8016dde <uxr_init_custom_transport+0x4a>
 8016daa:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8016dae:	b1b2      	cbz	r2, 8016dde <uxr_init_custom_transport+0x4a>
 8016db0:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8016db4:	4798      	blx	r3
 8016db6:	4605      	mov	r5, r0
 8016db8:	b188      	cbz	r0, 8016dde <uxr_init_custom_transport+0x4a>
 8016dba:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8016dbe:	b98b      	cbnz	r3, 8016de4 <uxr_init_custom_transport+0x50>
 8016dc0:	4b0b      	ldr	r3, [pc, #44]	; (8016df0 <uxr_init_custom_transport+0x5c>)
 8016dc2:	4628      	mov	r0, r5
 8016dc4:	490b      	ldr	r1, [pc, #44]	; (8016df4 <uxr_init_custom_transport+0x60>)
 8016dc6:	4a0c      	ldr	r2, [pc, #48]	; (8016df8 <uxr_init_custom_transport+0x64>)
 8016dc8:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8016dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016dd0:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8016dd4:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8016dd8:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8016ddc:	bd38      	pop	{r3, r4, r5, pc}
 8016dde:	2500      	movs	r5, #0
 8016de0:	4628      	mov	r0, r5
 8016de2:	bd38      	pop	{r3, r4, r5, pc}
 8016de4:	2100      	movs	r1, #0
 8016de6:	f204 2002 	addw	r0, r4, #514	; 0x202
 8016dea:	f001 fa03 	bl	80181f4 <uxr_init_framing_io>
 8016dee:	e7e7      	b.n	8016dc0 <uxr_init_custom_transport+0x2c>
 8016df0:	08016c95 	.word	0x08016c95
 8016df4:	08016d2d 	.word	0x08016d2d
 8016df8:	08016c89 	.word	0x08016c89

08016dfc <uxr_close_custom_transport>:
 8016dfc:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8016e00:	4718      	bx	r3
 8016e02:	bf00      	nop

08016e04 <uxr_object_id>:
 8016e04:	b082      	sub	sp, #8
 8016e06:	2300      	movs	r3, #0
 8016e08:	f88d 1006 	strb.w	r1, [sp, #6]
 8016e0c:	f360 030f 	bfi	r3, r0, #0, #16
 8016e10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016e14:	f362 431f 	bfi	r3, r2, #16, #16
 8016e18:	4618      	mov	r0, r3
 8016e1a:	b002      	add	sp, #8
 8016e1c:	4770      	bx	lr
 8016e1e:	bf00      	nop

08016e20 <uxr_object_id_from_raw>:
 8016e20:	7843      	ldrb	r3, [r0, #1]
 8016e22:	b082      	sub	sp, #8
 8016e24:	7801      	ldrb	r1, [r0, #0]
 8016e26:	2000      	movs	r0, #0
 8016e28:	091a      	lsrs	r2, r3, #4
 8016e2a:	f003 030f 	and.w	r3, r3, #15
 8016e2e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8016e32:	f88d 3006 	strb.w	r3, [sp, #6]
 8016e36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016e3a:	f362 000f 	bfi	r0, r2, #0, #16
 8016e3e:	f363 401f 	bfi	r0, r3, #16, #16
 8016e42:	b002      	add	sp, #8
 8016e44:	4770      	bx	lr
 8016e46:	bf00      	nop

08016e48 <uxr_object_id_to_raw>:
 8016e48:	4602      	mov	r2, r0
 8016e4a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8016e4e:	b082      	sub	sp, #8
 8016e50:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8016e54:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8016e58:	f881 c000 	strb.w	ip, [r1]
 8016e5c:	7048      	strb	r0, [r1, #1]
 8016e5e:	b002      	add	sp, #8
 8016e60:	4770      	bx	lr
 8016e62:	bf00      	nop

08016e64 <uxr_buffer_request_data>:
 8016e64:	b530      	push	{r4, r5, lr}
 8016e66:	b095      	sub	sp, #84	; 0x54
 8016e68:	4604      	mov	r4, r0
 8016e6a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8016e6c:	9303      	str	r3, [sp, #12]
 8016e6e:	2d00      	cmp	r5, #0
 8016e70:	f88d 301c 	strb.w	r3, [sp, #28]
 8016e74:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8016e78:	f04f 0200 	mov.w	r2, #0
 8016e7c:	bf14      	ite	ne
 8016e7e:	2101      	movne	r1, #1
 8016e80:	4611      	moveq	r1, r2
 8016e82:	f88d 201d 	strb.w	r2, [sp, #29]
 8016e86:	f88d 201e 	strb.w	r2, [sp, #30]
 8016e8a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8016e8e:	d021      	beq.n	8016ed4 <uxr_buffer_request_data+0x70>
 8016e90:	686b      	ldr	r3, [r5, #4]
 8016e92:	2210      	movs	r2, #16
 8016e94:	6829      	ldr	r1, [r5, #0]
 8016e96:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8016e9a:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8016e9e:	2308      	movs	r3, #8
 8016ea0:	2100      	movs	r1, #0
 8016ea2:	4620      	mov	r0, r4
 8016ea4:	e9cd 3100 	strd	r3, r1, [sp]
 8016ea8:	ab0c      	add	r3, sp, #48	; 0x30
 8016eaa:	9905      	ldr	r1, [sp, #20]
 8016eac:	f001 f834 	bl	8017f18 <uxr_prepare_stream_to_write_submessage>
 8016eb0:	b918      	cbnz	r0, 8016eba <uxr_buffer_request_data+0x56>
 8016eb2:	4604      	mov	r4, r0
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	b015      	add	sp, #84	; 0x54
 8016eb8:	bd30      	pop	{r4, r5, pc}
 8016eba:	9904      	ldr	r1, [sp, #16]
 8016ebc:	aa06      	add	r2, sp, #24
 8016ebe:	4620      	mov	r0, r4
 8016ec0:	f001 f966 	bl	8018190 <uxr_init_base_object_request>
 8016ec4:	4604      	mov	r4, r0
 8016ec6:	a906      	add	r1, sp, #24
 8016ec8:	a80c      	add	r0, sp, #48	; 0x30
 8016eca:	f003 f915 	bl	801a0f8 <uxr_serialize_READ_DATA_Payload>
 8016ece:	4620      	mov	r0, r4
 8016ed0:	b015      	add	sp, #84	; 0x54
 8016ed2:	bd30      	pop	{r4, r5, pc}
 8016ed4:	2208      	movs	r2, #8
 8016ed6:	e7e2      	b.n	8016e9e <uxr_buffer_request_data+0x3a>

08016ed8 <uxr_buffer_cancel_data>:
 8016ed8:	b510      	push	{r4, lr}
 8016eda:	2300      	movs	r3, #0
 8016edc:	b094      	sub	sp, #80	; 0x50
 8016ede:	4604      	mov	r4, r0
 8016ee0:	9205      	str	r2, [sp, #20]
 8016ee2:	9301      	str	r3, [sp, #4]
 8016ee4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016ee8:	f88d 301e 	strb.w	r3, [sp, #30]
 8016eec:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8016ef0:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8016ef4:	2308      	movs	r3, #8
 8016ef6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016efa:	2201      	movs	r2, #1
 8016efc:	9300      	str	r3, [sp, #0]
 8016efe:	ab0c      	add	r3, sp, #48	; 0x30
 8016f00:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8016f04:	2210      	movs	r2, #16
 8016f06:	f001 f807 	bl	8017f18 <uxr_prepare_stream_to_write_submessage>
 8016f0a:	b918      	cbnz	r0, 8016f14 <uxr_buffer_cancel_data+0x3c>
 8016f0c:	4604      	mov	r4, r0
 8016f0e:	4620      	mov	r0, r4
 8016f10:	b014      	add	sp, #80	; 0x50
 8016f12:	bd10      	pop	{r4, pc}
 8016f14:	9905      	ldr	r1, [sp, #20]
 8016f16:	aa06      	add	r2, sp, #24
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f001 f939 	bl	8018190 <uxr_init_base_object_request>
 8016f1e:	4604      	mov	r4, r0
 8016f20:	a906      	add	r1, sp, #24
 8016f22:	a80c      	add	r0, sp, #48	; 0x30
 8016f24:	f003 f8e8 	bl	801a0f8 <uxr_serialize_READ_DATA_Payload>
 8016f28:	4620      	mov	r0, r4
 8016f2a:	b014      	add	sp, #80	; 0x50
 8016f2c:	bd10      	pop	{r4, pc}
 8016f2e:	bf00      	nop

08016f30 <read_submessage_format>:
 8016f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f34:	b095      	sub	sp, #84	; 0x54
 8016f36:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8016f3a:	b113      	cbz	r3, 8016f42 <read_submessage_format+0x12>
 8016f3c:	b015      	add	sp, #84	; 0x54
 8016f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f42:	4606      	mov	r6, r0
 8016f44:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016f46:	460c      	mov	r4, r1
 8016f48:	4615      	mov	r5, r2
 8016f4a:	9004      	str	r0, [sp, #16]
 8016f4c:	4699      	mov	r9, r3
 8016f4e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016f50:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8016f54:	9005      	str	r0, [sp, #20]
 8016f56:	a80c      	add	r0, sp, #48	; 0x30
 8016f58:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016f5c:	1a52      	subs	r2, r2, r1
 8016f5e:	f7fb f997 	bl	8012290 <ucdr_init_buffer>
 8016f62:	a80c      	add	r0, sp, #48	; 0x30
 8016f64:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016f68:	f7fb f966 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 8016f6c:	69e2      	ldr	r2, [r4, #28]
 8016f6e:	b19a      	cbz	r2, 8016f98 <read_submessage_format+0x68>
 8016f70:	f1b8 0f07 	cmp.w	r8, #7
 8016f74:	f882 9014 	strb.w	r9, [r2, #20]
 8016f78:	d040      	beq.n	8016ffc <read_submessage_format+0xcc>
 8016f7a:	f1b8 0f08 	cmp.w	r8, #8
 8016f7e:	d02e      	beq.n	8016fde <read_submessage_format+0xae>
 8016f80:	f1b8 0f06 	cmp.w	r8, #6
 8016f84:	d011      	beq.n	8016faa <read_submessage_format+0x7a>
 8016f86:	2301      	movs	r3, #1
 8016f88:	7513      	strb	r3, [r2, #20]
 8016f8a:	4629      	mov	r1, r5
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	f7fb f9d3 	bl	8012338 <ucdr_advance_buffer>
 8016f92:	b015      	add	sp, #84	; 0x54
 8016f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f98:	f1b8 0f07 	cmp.w	r8, #7
 8016f9c:	d02e      	beq.n	8016ffc <read_submessage_format+0xcc>
 8016f9e:	f1b8 0f08 	cmp.w	r8, #8
 8016fa2:	d01c      	beq.n	8016fde <read_submessage_format+0xae>
 8016fa4:	f1b8 0f06 	cmp.w	r8, #6
 8016fa8:	d1ef      	bne.n	8016f8a <read_submessage_format+0x5a>
 8016faa:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8016fae:	f1b8 0f00 	cmp.w	r8, #0
 8016fb2:	d011      	beq.n	8016fd8 <read_submessage_format+0xa8>
 8016fb4:	ab0c      	add	r3, sp, #48	; 0x30
 8016fb6:	9501      	str	r5, [sp, #4]
 8016fb8:	463a      	mov	r2, r7
 8016fba:	4630      	mov	r0, r6
 8016fbc:	9300      	str	r3, [sp, #0]
 8016fbe:	2306      	movs	r3, #6
 8016fc0:	f88d 3016 	strb.w	r3, [sp, #22]
 8016fc4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8016fc8:	9302      	str	r3, [sp, #8]
 8016fca:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016fce:	47c0      	blx	r8
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	69e2      	ldr	r2, [r4, #28]
 8016fd4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8016fd8:	2a00      	cmp	r2, #0
 8016fda:	d1d4      	bne.n	8016f86 <read_submessage_format+0x56>
 8016fdc:	e7d5      	b.n	8016f8a <read_submessage_format+0x5a>
 8016fde:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d0f8      	beq.n	8016fd8 <read_submessage_format+0xa8>
 8016fe6:	a80c      	add	r0, sp, #48	; 0x30
 8016fe8:	a906      	add	r1, sp, #24
 8016fea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016fee:	f003 f94f 	bl	801a290 <uxr_deserialize_SampleIdentity>
 8016ff2:	b9a0      	cbnz	r0, 801701e <read_submessage_format+0xee>
 8016ff4:	69e2      	ldr	r2, [r4, #28]
 8016ff6:	2a00      	cmp	r2, #0
 8016ff8:	d1c5      	bne.n	8016f86 <read_submessage_format+0x56>
 8016ffa:	e7c6      	b.n	8016f8a <read_submessage_format+0x5a>
 8016ffc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8017000:	b13b      	cbz	r3, 8017012 <read_submessage_format+0xe2>
 8017002:	a906      	add	r1, sp, #24
 8017004:	a80c      	add	r0, sp, #48	; 0x30
 8017006:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801700a:	f002 fe15 	bl	8019c38 <uxr_deserialize_BaseObjectRequest>
 801700e:	bb60      	cbnz	r0, 801706a <read_submessage_format+0x13a>
 8017010:	69e2      	ldr	r2, [r4, #28]
 8017012:	68a3      	ldr	r3, [r4, #8]
 8017014:	442b      	add	r3, r5
 8017016:	60a3      	str	r3, [r4, #8]
 8017018:	2a00      	cmp	r2, #0
 801701a:	d1b4      	bne.n	8016f86 <read_submessage_format+0x56>
 801701c:	e7b5      	b.n	8016f8a <read_submessage_format+0x5a>
 801701e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017020:	a80c      	add	r0, sp, #48	; 0x30
 8017022:	eba8 0803 	sub.w	r8, r8, r3
 8017026:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801702a:	44a8      	add	r8, r5
 801702c:	1a52      	subs	r2, r2, r1
 801702e:	f7fb f92f 	bl	8012290 <ucdr_init_buffer>
 8017032:	a80c      	add	r0, sp, #48	; 0x30
 8017034:	fa1f f888 	uxth.w	r8, r8
 8017038:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801703c:	f7fb f8fc 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 8017040:	ab0c      	add	r3, sp, #48	; 0x30
 8017042:	2108      	movs	r1, #8
 8017044:	f8cd 8004 	str.w	r8, [sp, #4]
 8017048:	9300      	str	r3, [sp, #0]
 801704a:	463a      	mov	r2, r7
 801704c:	f88d 1016 	strb.w	r1, [sp, #22]
 8017050:	ab06      	add	r3, sp, #24
 8017052:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8017056:	4630      	mov	r0, r6
 8017058:	9102      	str	r1, [sp, #8]
 801705a:	9905      	ldr	r1, [sp, #20]
 801705c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8017060:	47b8      	blx	r7
 8017062:	2301      	movs	r3, #1
 8017064:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8017068:	e7c4      	b.n	8016ff4 <read_submessage_format+0xc4>
 801706a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801706e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017070:	a80c      	add	r0, sp, #48	; 0x30
 8017072:	1a52      	subs	r2, r2, r1
 8017074:	eba8 0803 	sub.w	r8, r8, r3
 8017078:	f7fb f90a 	bl	8012290 <ucdr_init_buffer>
 801707c:	a80c      	add	r0, sp, #48	; 0x30
 801707e:	44a8      	add	r8, r5
 8017080:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017084:	f7fb f8d8 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 8017088:	ab0c      	add	r3, sp, #48	; 0x30
 801708a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801708e:	fa1f f888 	uxth.w	r8, r8
 8017092:	9300      	str	r3, [sp, #0]
 8017094:	463a      	mov	r2, r7
 8017096:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801709a:	4630      	mov	r0, r6
 801709c:	f8cd 8004 	str.w	r8, [sp, #4]
 80170a0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80170a4:	2107      	movs	r1, #7
 80170a6:	f88d 1016 	strb.w	r1, [sp, #22]
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80170b0:	9102      	str	r1, [sp, #8]
 80170b2:	9905      	ldr	r1, [sp, #20]
 80170b4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80170b8:	47b8      	blx	r7
 80170ba:	2301      	movs	r3, #1
 80170bc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80170c0:	e7a6      	b.n	8017010 <read_submessage_format+0xe0>
 80170c2:	bf00      	nop

080170c4 <on_get_fragmentation_info>:
 80170c4:	b500      	push	{lr}
 80170c6:	b08b      	sub	sp, #44	; 0x2c
 80170c8:	4601      	mov	r1, r0
 80170ca:	2204      	movs	r2, #4
 80170cc:	a802      	add	r0, sp, #8
 80170ce:	f7fb f8df 	bl	8012290 <ucdr_init_buffer>
 80170d2:	f10d 0305 	add.w	r3, sp, #5
 80170d6:	f10d 0206 	add.w	r2, sp, #6
 80170da:	a901      	add	r1, sp, #4
 80170dc:	a802      	add	r0, sp, #8
 80170de:	f001 fe5d 	bl	8018d9c <uxr_read_submessage_header>
 80170e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80170e6:	2b0d      	cmp	r3, #13
 80170e8:	d003      	beq.n	80170f2 <on_get_fragmentation_info+0x2e>
 80170ea:	2000      	movs	r0, #0
 80170ec:	b00b      	add	sp, #44	; 0x2c
 80170ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80170f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80170f6:	f013 0f02 	tst.w	r3, #2
 80170fa:	bf14      	ite	ne
 80170fc:	2002      	movne	r0, #2
 80170fe:	2001      	moveq	r0, #1
 8017100:	b00b      	add	sp, #44	; 0x2c
 8017102:	f85d fb04 	ldr.w	pc, [sp], #4
 8017106:	bf00      	nop

08017108 <read_submessage_get_info>:
 8017108:	b570      	push	{r4, r5, r6, lr}
 801710a:	2500      	movs	r5, #0
 801710c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8017110:	460e      	mov	r6, r1
 8017112:	4604      	mov	r4, r0
 8017114:	f44f 7224 	mov.w	r2, #656	; 0x290
 8017118:	4629      	mov	r1, r5
 801711a:	a810      	add	r0, sp, #64	; 0x40
 801711c:	9503      	str	r5, [sp, #12]
 801711e:	9504      	str	r5, [sp, #16]
 8017120:	f008 fe20 	bl	801fd64 <memset>
 8017124:	a903      	add	r1, sp, #12
 8017126:	4630      	mov	r0, r6
 8017128:	f002 ff26 	bl	8019f78 <uxr_deserialize_GET_INFO_Payload>
 801712c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017130:	4620      	mov	r0, r4
 8017132:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017136:	f001 f823 	bl	8018180 <uxr_session_header_offset>
 801713a:	462b      	mov	r3, r5
 801713c:	220c      	movs	r2, #12
 801713e:	a905      	add	r1, sp, #20
 8017140:	9000      	str	r0, [sp, #0]
 8017142:	a808      	add	r0, sp, #32
 8017144:	f7fb f892 	bl	801226c <ucdr_init_buffer_origin_offset>
 8017148:	a910      	add	r1, sp, #64	; 0x40
 801714a:	a808      	add	r0, sp, #32
 801714c:	f002 ff88 	bl	801a060 <uxr_serialize_INFO_Payload>
 8017150:	9b08      	ldr	r3, [sp, #32]
 8017152:	462a      	mov	r2, r5
 8017154:	4629      	mov	r1, r5
 8017156:	4620      	mov	r0, r4
 8017158:	f000 ffbe 	bl	80180d8 <uxr_stamp_session_header>
 801715c:	a808      	add	r0, sp, #32
 801715e:	f7fb f8c5 	bl	80122ec <ucdr_buffer_length>
 8017162:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017164:	4602      	mov	r2, r0
 8017166:	a905      	add	r1, sp, #20
 8017168:	e9d3 0400 	ldrd	r0, r4, [r3]
 801716c:	47a0      	blx	r4
 801716e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8017172:	bd70      	pop	{r4, r5, r6, pc}

08017174 <write_submessage_acknack.isra.0>:
 8017174:	b570      	push	{r4, r5, r6, lr}
 8017176:	b092      	sub	sp, #72	; 0x48
 8017178:	4605      	mov	r5, r0
 801717a:	460e      	mov	r6, r1
 801717c:	4614      	mov	r4, r2
 801717e:	f000 ffff 	bl	8018180 <uxr_session_header_offset>
 8017182:	a905      	add	r1, sp, #20
 8017184:	9000      	str	r0, [sp, #0]
 8017186:	2300      	movs	r3, #0
 8017188:	a80a      	add	r0, sp, #40	; 0x28
 801718a:	2211      	movs	r2, #17
 801718c:	f7fb f86e 	bl	801226c <ucdr_init_buffer_origin_offset>
 8017190:	2218      	movs	r2, #24
 8017192:	2300      	movs	r3, #0
 8017194:	210a      	movs	r1, #10
 8017196:	fb02 5404 	mla	r4, r2, r4, r5
 801719a:	a80a      	add	r0, sp, #40	; 0x28
 801719c:	2205      	movs	r2, #5
 801719e:	3450      	adds	r4, #80	; 0x50
 80171a0:	f001 fde2 	bl	8018d68 <uxr_buffer_submessage_header>
 80171a4:	a903      	add	r1, sp, #12
 80171a6:	4620      	mov	r0, r4
 80171a8:	f006 fb50 	bl	801d84c <uxr_compute_acknack>
 80171ac:	ba40      	rev16	r0, r0
 80171ae:	a903      	add	r1, sp, #12
 80171b0:	f88d 6010 	strb.w	r6, [sp, #16]
 80171b4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80171b8:	a80a      	add	r0, sp, #40	; 0x28
 80171ba:	f002 ffc3 	bl	801a144 <uxr_serialize_ACKNACK_Payload>
 80171be:	2200      	movs	r2, #0
 80171c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171c2:	4628      	mov	r0, r5
 80171c4:	4611      	mov	r1, r2
 80171c6:	f000 ff87 	bl	80180d8 <uxr_stamp_session_header>
 80171ca:	a80a      	add	r0, sp, #40	; 0x28
 80171cc:	f7fb f88e 	bl	80122ec <ucdr_buffer_length>
 80171d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80171d2:	4602      	mov	r2, r0
 80171d4:	a905      	add	r1, sp, #20
 80171d6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80171da:	47a0      	blx	r4
 80171dc:	b012      	add	sp, #72	; 0x48
 80171de:	bd70      	pop	{r4, r5, r6, pc}

080171e0 <uxr_init_session>:
 80171e0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8017218 <uxr_init_session+0x38>
 80171e4:	2300      	movs	r3, #0
 80171e6:	b510      	push	{r4, lr}
 80171e8:	4604      	mov	r4, r0
 80171ea:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80171ee:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80171f2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80171f6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80171fa:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80171fe:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8017202:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8017206:	2181      	movs	r1, #129	; 0x81
 8017208:	f000 feca 	bl	8017fa0 <uxr_init_session_info>
 801720c:	f104 0008 	add.w	r0, r4, #8
 8017210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017214:	f001 bcc4 	b.w	8018ba0 <uxr_init_stream_storage>
	...

08017220 <uxr_set_status_callback>:
 8017220:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8017224:	4770      	bx	lr
 8017226:	bf00      	nop

08017228 <uxr_set_topic_callback>:
 8017228:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801722c:	4770      	bx	lr
 801722e:	bf00      	nop

08017230 <uxr_set_request_callback>:
 8017230:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8017234:	4770      	bx	lr
 8017236:	bf00      	nop

08017238 <uxr_set_reply_callback>:
 8017238:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801723c:	4770      	bx	lr
 801723e:	bf00      	nop

08017240 <uxr_create_output_best_effort_stream>:
 8017240:	b510      	push	{r4, lr}
 8017242:	4604      	mov	r4, r0
 8017244:	b084      	sub	sp, #16
 8017246:	e9cd 2100 	strd	r2, r1, [sp]
 801724a:	f000 ff99 	bl	8018180 <uxr_session_header_offset>
 801724e:	4603      	mov	r3, r0
 8017250:	f104 0008 	add.w	r0, r4, #8
 8017254:	e9dd 2100 	ldrd	r2, r1, [sp]
 8017258:	b004      	add	sp, #16
 801725a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801725e:	f001 bce5 	b.w	8018c2c <uxr_add_output_best_effort_buffer>
 8017262:	bf00      	nop

08017264 <uxr_create_output_reliable_stream>:
 8017264:	b530      	push	{r4, r5, lr}
 8017266:	b089      	sub	sp, #36	; 0x24
 8017268:	4604      	mov	r4, r0
 801726a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801726e:	9303      	str	r3, [sp, #12]
 8017270:	f000 ff86 	bl	8018180 <uxr_session_header_offset>
 8017274:	4605      	mov	r5, r0
 8017276:	9905      	ldr	r1, [sp, #20]
 8017278:	f104 0008 	add.w	r0, r4, #8
 801727c:	9500      	str	r5, [sp, #0]
 801727e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017282:	f001 fce7 	bl	8018c54 <uxr_add_output_reliable_buffer>
 8017286:	2200      	movs	r2, #0
 8017288:	fa5f fc80 	uxtb.w	ip, r0
 801728c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017290:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8017294:	0e03      	lsrs	r3, r0, #24
 8017296:	f36c 0207 	bfi	r2, ip, #0, #8
 801729a:	f364 220f 	bfi	r2, r4, #8, #8
 801729e:	f361 4217 	bfi	r2, r1, #16, #8
 80172a2:	f363 621f 	bfi	r2, r3, #24, #8
 80172a6:	4610      	mov	r0, r2
 80172a8:	b009      	add	sp, #36	; 0x24
 80172aa:	bd30      	pop	{r4, r5, pc}

080172ac <uxr_create_input_best_effort_stream>:
 80172ac:	b082      	sub	sp, #8
 80172ae:	3008      	adds	r0, #8
 80172b0:	b002      	add	sp, #8
 80172b2:	f001 bce9 	b.w	8018c88 <uxr_add_input_best_effort_buffer>
 80172b6:	bf00      	nop

080172b8 <uxr_create_input_reliable_stream>:
 80172b8:	b510      	push	{r4, lr}
 80172ba:	4c0c      	ldr	r4, [pc, #48]	; (80172ec <uxr_create_input_reliable_stream+0x34>)
 80172bc:	b084      	sub	sp, #16
 80172be:	3008      	adds	r0, #8
 80172c0:	9400      	str	r4, [sp, #0]
 80172c2:	f001 fcf7 	bl	8018cb4 <uxr_add_input_reliable_buffer>
 80172c6:	2200      	movs	r2, #0
 80172c8:	fa5f fe80 	uxtb.w	lr, r0
 80172cc:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80172d0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80172d4:	0e03      	lsrs	r3, r0, #24
 80172d6:	f36e 0207 	bfi	r2, lr, #0, #8
 80172da:	f36c 220f 	bfi	r2, ip, #8, #8
 80172de:	f361 4217 	bfi	r2, r1, #16, #8
 80172e2:	f363 621f 	bfi	r2, r3, #24, #8
 80172e6:	4610      	mov	r0, r2
 80172e8:	b004      	add	sp, #16
 80172ea:	bd10      	pop	{r4, pc}
 80172ec:	080170c5 	.word	0x080170c5

080172f0 <uxr_epoch_nanos>:
 80172f0:	b510      	push	{r4, lr}
 80172f2:	4604      	mov	r4, r0
 80172f4:	f001 fd9a 	bl	8018e2c <uxr_nanos>
 80172f8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80172fc:	1ac0      	subs	r0, r0, r3
 80172fe:	eb61 0102 	sbc.w	r1, r1, r2
 8017302:	bd10      	pop	{r4, pc}

08017304 <uxr_flash_output_streams>:
 8017304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017308:	7e03      	ldrb	r3, [r0, #24]
 801730a:	b084      	sub	sp, #16
 801730c:	4604      	mov	r4, r0
 801730e:	b1fb      	cbz	r3, 8017350 <uxr_flash_output_streams+0x4c>
 8017310:	f04f 0900 	mov.w	r9, #0
 8017314:	f10d 0802 	add.w	r8, sp, #2
 8017318:	af03      	add	r7, sp, #12
 801731a:	ae02      	add	r6, sp, #8
 801731c:	4648      	mov	r0, r9
 801731e:	2201      	movs	r2, #1
 8017320:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8017324:	4611      	mov	r1, r2
 8017326:	3508      	adds	r5, #8
 8017328:	f001 fbe0 	bl	8018aec <uxr_stream_id>
 801732c:	4684      	mov	ip, r0
 801732e:	4643      	mov	r3, r8
 8017330:	463a      	mov	r2, r7
 8017332:	4631      	mov	r1, r6
 8017334:	4628      	mov	r0, r5
 8017336:	f8cd c004 	str.w	ip, [sp, #4]
 801733a:	f006 fb11 	bl	801d960 <uxr_prepare_best_effort_buffer_to_send>
 801733e:	2800      	cmp	r0, #0
 8017340:	d13d      	bne.n	80173be <uxr_flash_output_streams+0xba>
 8017342:	f109 0901 	add.w	r9, r9, #1
 8017346:	7e23      	ldrb	r3, [r4, #24]
 8017348:	fa5f f089 	uxtb.w	r0, r9
 801734c:	4283      	cmp	r3, r0
 801734e:	d8e6      	bhi.n	801731e <uxr_flash_output_streams+0x1a>
 8017350:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8017354:	b383      	cbz	r3, 80173b8 <uxr_flash_output_streams+0xb4>
 8017356:	f04f 0900 	mov.w	r9, #0
 801735a:	f10d 0802 	add.w	r8, sp, #2
 801735e:	af03      	add	r7, sp, #12
 8017360:	ae02      	add	r6, sp, #8
 8017362:	4648      	mov	r0, r9
 8017364:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8017368:	2201      	movs	r2, #1
 801736a:	2102      	movs	r1, #2
 801736c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017370:	f001 fbbc 	bl	8018aec <uxr_stream_id>
 8017374:	9001      	str	r0, [sp, #4]
 8017376:	3520      	adds	r5, #32
 8017378:	e00c      	b.n	8017394 <uxr_flash_output_streams+0x90>
 801737a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801737e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017382:	9b02      	ldr	r3, [sp, #8]
 8017384:	f000 fea8 	bl	80180d8 <uxr_stamp_session_header>
 8017388:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801738a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801738e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8017392:	47d0      	blx	sl
 8017394:	4643      	mov	r3, r8
 8017396:	463a      	mov	r2, r7
 8017398:	4631      	mov	r1, r6
 801739a:	4628      	mov	r0, r5
 801739c:	f006 fd04 	bl	801dda8 <uxr_prepare_next_reliable_buffer_to_send>
 80173a0:	4603      	mov	r3, r0
 80173a2:	4620      	mov	r0, r4
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d1e8      	bne.n	801737a <uxr_flash_output_streams+0x76>
 80173a8:	f109 0901 	add.w	r9, r9, #1
 80173ac:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80173b0:	fa5f f089 	uxtb.w	r0, r9
 80173b4:	4283      	cmp	r3, r0
 80173b6:	d8d5      	bhi.n	8017364 <uxr_flash_output_streams+0x60>
 80173b8:	b004      	add	sp, #16
 80173ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173be:	9b02      	ldr	r3, [sp, #8]
 80173c0:	4620      	mov	r0, r4
 80173c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80173c6:	f109 0901 	add.w	r9, r9, #1
 80173ca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80173ce:	f000 fe83 	bl	80180d8 <uxr_stamp_session_header>
 80173d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80173d4:	9a03      	ldr	r2, [sp, #12]
 80173d6:	685d      	ldr	r5, [r3, #4]
 80173d8:	6818      	ldr	r0, [r3, #0]
 80173da:	9902      	ldr	r1, [sp, #8]
 80173dc:	47a8      	blx	r5
 80173de:	7e23      	ldrb	r3, [r4, #24]
 80173e0:	fa5f f089 	uxtb.w	r0, r9
 80173e4:	4283      	cmp	r3, r0
 80173e6:	d89a      	bhi.n	801731e <uxr_flash_output_streams+0x1a>
 80173e8:	e7b2      	b.n	8017350 <uxr_flash_output_streams+0x4c>
 80173ea:	bf00      	nop

080173ec <read_submessage_info>:
 80173ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173f0:	460d      	mov	r5, r1
 80173f2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80173f6:	4606      	mov	r6, r0
 80173f8:	4669      	mov	r1, sp
 80173fa:	4628      	mov	r0, r5
 80173fc:	f002 fcce 	bl	8019d9c <uxr_deserialize_BaseObjectReply>
 8017400:	4604      	mov	r4, r0
 8017402:	a902      	add	r1, sp, #8
 8017404:	4628      	mov	r0, r5
 8017406:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801740a:	f7f9 fc51 	bl	8010cb0 <ucdr_deserialize_bool>
 801740e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8017412:	4004      	ands	r4, r0
 8017414:	b2e4      	uxtb	r4, r4
 8017416:	b95b      	cbnz	r3, 8017430 <read_submessage_info+0x44>
 8017418:	a987      	add	r1, sp, #540	; 0x21c
 801741a:	4628      	mov	r0, r5
 801741c:	f7f9 fc48 	bl	8010cb0 <ucdr_deserialize_bool>
 8017420:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8017424:	4680      	mov	r8, r0
 8017426:	b94b      	cbnz	r3, 801743c <read_submessage_info+0x50>
 8017428:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017430:	a903      	add	r1, sp, #12
 8017432:	4628      	mov	r0, r5
 8017434:	f002 fb5e 	bl	8019af4 <uxr_deserialize_ObjectVariant>
 8017438:	4004      	ands	r4, r0
 801743a:	e7ed      	b.n	8017418 <read_submessage_info+0x2c>
 801743c:	a988      	add	r1, sp, #544	; 0x220
 801743e:	4628      	mov	r0, r5
 8017440:	f7f9 fc64 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8017444:	ea14 0f08 	tst.w	r4, r8
 8017448:	d0ee      	beq.n	8017428 <read_submessage_info+0x3c>
 801744a:	2800      	cmp	r0, #0
 801744c:	d0ec      	beq.n	8017428 <read_submessage_info+0x3c>
 801744e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8017452:	2b0d      	cmp	r3, #13
 8017454:	d1e8      	bne.n	8017428 <read_submessage_info+0x3c>
 8017456:	a98a      	add	r1, sp, #552	; 0x228
 8017458:	4628      	mov	r0, r5
 801745a:	f7fa f9fd 	bl	8011858 <ucdr_deserialize_int16_t>
 801745e:	b138      	cbz	r0, 8017470 <read_submessage_info+0x84>
 8017460:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8017464:	2b00      	cmp	r3, #0
 8017466:	dd06      	ble.n	8017476 <read_submessage_info+0x8a>
 8017468:	2f00      	cmp	r7, #0
 801746a:	bf14      	ite	ne
 801746c:	2001      	movne	r0, #1
 801746e:	2002      	moveq	r0, #2
 8017470:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8017474:	e7d8      	b.n	8017428 <read_submessage_info+0x3c>
 8017476:	2000      	movs	r0, #0
 8017478:	e7fa      	b.n	8017470 <read_submessage_info+0x84>
 801747a:	bf00      	nop

0801747c <read_submessage_list>:
 801747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017480:	4604      	mov	r4, r0
 8017482:	b097      	sub	sp, #92	; 0x5c
 8017484:	460d      	mov	r5, r1
 8017486:	4ec1      	ldr	r6, [pc, #772]	; (801778c <read_submessage_list+0x310>)
 8017488:	9209      	str	r2, [sp, #36]	; 0x24
 801748a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801748e:	aa0c      	add	r2, sp, #48	; 0x30
 8017490:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8017494:	4628      	mov	r0, r5
 8017496:	f001 fc81 	bl	8018d9c <uxr_read_submessage_header>
 801749a:	2800      	cmp	r0, #0
 801749c:	f000 8142 	beq.w	8017724 <read_submessage_list+0x2a8>
 80174a0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80174a4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80174a8:	3b02      	subs	r3, #2
 80174aa:	2b0d      	cmp	r3, #13
 80174ac:	d8ed      	bhi.n	801748a <read_submessage_list+0xe>
 80174ae:	a101      	add	r1, pc, #4	; (adr r1, 80174b4 <read_submessage_list+0x38>)
 80174b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80174b4:	0801771b 	.word	0x0801771b
 80174b8:	0801748b 	.word	0x0801748b
 80174bc:	0801770b 	.word	0x0801770b
 80174c0:	080176a9 	.word	0x080176a9
 80174c4:	0801769f 	.word	0x0801769f
 80174c8:	0801748b 	.word	0x0801748b
 80174cc:	0801748b 	.word	0x0801748b
 80174d0:	080175f5 	.word	0x080175f5
 80174d4:	08017587 	.word	0x08017587
 80174d8:	08017547 	.word	0x08017547
 80174dc:	0801748b 	.word	0x0801748b
 80174e0:	0801748b 	.word	0x0801748b
 80174e4:	0801748b 	.word	0x0801748b
 80174e8:	080174ed 	.word	0x080174ed
 80174ec:	a910      	add	r1, sp, #64	; 0x40
 80174ee:	4628      	mov	r0, r5
 80174f0:	f002 fe7c 	bl	801a1ec <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80174f4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 80174f8:	f1b8 0f00 	cmp.w	r8, #0
 80174fc:	f000 811a 	beq.w	8017734 <read_submessage_list+0x2b8>
 8017500:	f001 fc94 	bl	8018e2c <uxr_nanos>
 8017504:	4602      	mov	r2, r0
 8017506:	460b      	mov	r3, r1
 8017508:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801750c:	2100      	movs	r1, #0
 801750e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8017510:	9006      	str	r0, [sp, #24]
 8017512:	468c      	mov	ip, r1
 8017514:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017516:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801751a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801751c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8017520:	468c      	mov	ip, r1
 8017522:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017524:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017528:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801752c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8017530:	fbc7 0106 	smlal	r0, r1, r7, r6
 8017534:	e9cd 0100 	strd	r0, r1, [sp]
 8017538:	4620      	mov	r0, r4
 801753a:	47c0      	blx	r8
 801753c:	f04f 0301 	mov.w	r3, #1
 8017540:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8017544:	e7a1      	b.n	801748a <read_submessage_list+0xe>
 8017546:	a910      	add	r1, sp, #64	; 0x40
 8017548:	4628      	mov	r0, r5
 801754a:	f002 fe3b 	bl	801a1c4 <uxr_deserialize_HEARTBEAT_Payload>
 801754e:	2100      	movs	r1, #0
 8017550:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8017554:	f001 faf8 	bl	8018b48 <uxr_stream_id_from_raw>
 8017558:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801755c:	900f      	str	r0, [sp, #60]	; 0x3c
 801755e:	f104 0008 	add.w	r0, r4, #8
 8017562:	4641      	mov	r1, r8
 8017564:	f001 fbde 	bl	8018d24 <uxr_get_input_reliable_stream>
 8017568:	2800      	cmp	r0, #0
 801756a:	d08e      	beq.n	801748a <read_submessage_list+0xe>
 801756c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8017570:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017574:	f006 f95e 	bl	801d834 <uxr_process_heartbeat>
 8017578:	4642      	mov	r2, r8
 801757a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801757e:	4620      	mov	r0, r4
 8017580:	f7ff fdf8 	bl	8017174 <write_submessage_acknack.isra.0>
 8017584:	e781      	b.n	801748a <read_submessage_list+0xe>
 8017586:	a910      	add	r1, sp, #64	; 0x40
 8017588:	4628      	mov	r0, r5
 801758a:	f002 fdf3 	bl	801a174 <uxr_deserialize_ACKNACK_Payload>
 801758e:	2100      	movs	r1, #0
 8017590:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8017594:	f001 fad8 	bl	8018b48 <uxr_stream_id_from_raw>
 8017598:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801759c:	900d      	str	r0, [sp, #52]	; 0x34
 801759e:	f104 0008 	add.w	r0, r4, #8
 80175a2:	f001 fba9 	bl	8018cf8 <uxr_get_output_reliable_stream>
 80175a6:	4680      	mov	r8, r0
 80175a8:	2800      	cmp	r0, #0
 80175aa:	f43f af6e 	beq.w	801748a <read_submessage_list+0xe>
 80175ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80175b2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80175b6:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80175ba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80175be:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80175c2:	b289      	uxth	r1, r1
 80175c4:	f006 fc98 	bl	801def8 <uxr_process_acknack>
 80175c8:	4640      	mov	r0, r8
 80175ca:	f006 fc59 	bl	801de80 <uxr_begin_output_nack_buffer_it>
 80175ce:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80175d2:	e005      	b.n	80175e0 <read_submessage_list+0x164>
 80175d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80175d6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80175da:	e9d3 0900 	ldrd	r0, r9, [r3]
 80175de:	47c8      	blx	r9
 80175e0:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80175e4:	aa0f      	add	r2, sp, #60	; 0x3c
 80175e6:	4651      	mov	r1, sl
 80175e8:	4640      	mov	r0, r8
 80175ea:	f006 fc4b 	bl	801de84 <uxr_next_reliable_nack_buffer_to_send>
 80175ee:	2800      	cmp	r0, #0
 80175f0:	d1f0      	bne.n	80175d4 <read_submessage_list+0x158>
 80175f2:	e74a      	b.n	801748a <read_submessage_list+0xe>
 80175f4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80175f8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80175fc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8017600:	4628      	mov	r0, r5
 8017602:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8017606:	4651      	mov	r1, sl
 8017608:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801760c:	f1a8 0804 	sub.w	r8, r8, #4
 8017610:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8017614:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8017618:	fa1f f888 	uxth.w	r8, r8
 801761c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017620:	f009 090e 	and.w	r9, r9, #14
 8017624:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8017628:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801762c:	f002 fb04 	bl	8019c38 <uxr_deserialize_BaseObjectRequest>
 8017630:	4650      	mov	r0, sl
 8017632:	a90f      	add	r1, sp, #60	; 0x3c
 8017634:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8017638:	f000 fdca 	bl	80181d0 <uxr_parse_base_object_request>
 801763c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801763e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8017642:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8017646:	9110      	str	r1, [sp, #64]	; 0x40
 8017648:	f1bb 0f00 	cmp.w	fp, #0
 801764c:	d006      	beq.n	801765c <read_submessage_list+0x1e0>
 801764e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8017652:	4652      	mov	r2, sl
 8017654:	4620      	mov	r0, r4
 8017656:	9300      	str	r3, [sp, #0]
 8017658:	2300      	movs	r3, #0
 801765a:	47d8      	blx	fp
 801765c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801765e:	b182      	cbz	r2, 8017682 <read_submessage_list+0x206>
 8017660:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8017662:	f04f 0c00 	mov.w	ip, #0
 8017666:	3902      	subs	r1, #2
 8017668:	e003      	b.n	8017672 <read_submessage_list+0x1f6>
 801766a:	f10c 0c01 	add.w	ip, ip, #1
 801766e:	4594      	cmp	ip, r2
 8017670:	d007      	beq.n	8017682 <read_submessage_list+0x206>
 8017672:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8017676:	4553      	cmp	r3, sl
 8017678:	d1f7      	bne.n	801766a <read_submessage_list+0x1ee>
 801767a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801767c:	2200      	movs	r2, #0
 801767e:	f803 200c 	strb.w	r2, [r3, ip]
 8017682:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8017686:	464b      	mov	r3, r9
 8017688:	4642      	mov	r2, r8
 801768a:	4620      	mov	r0, r4
 801768c:	9102      	str	r1, [sp, #8]
 801768e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017690:	9101      	str	r1, [sp, #4]
 8017692:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017694:	9100      	str	r1, [sp, #0]
 8017696:	4629      	mov	r1, r5
 8017698:	f7ff fc4a 	bl	8016f30 <read_submessage_format>
 801769c:	e6f5      	b.n	801748a <read_submessage_list+0xe>
 801769e:	4629      	mov	r1, r5
 80176a0:	4620      	mov	r0, r4
 80176a2:	f7ff fea3 	bl	80173ec <read_submessage_info>
 80176a6:	e6f0      	b.n	801748a <read_submessage_list+0xe>
 80176a8:	2a00      	cmp	r2, #0
 80176aa:	d03e      	beq.n	801772a <read_submessage_list+0x2ae>
 80176ac:	a910      	add	r1, sp, #64	; 0x40
 80176ae:	4628      	mov	r0, r5
 80176b0:	f002 fcb8 	bl	801a024 <uxr_deserialize_STATUS_Payload>
 80176b4:	a90e      	add	r1, sp, #56	; 0x38
 80176b6:	aa0d      	add	r2, sp, #52	; 0x34
 80176b8:	a810      	add	r0, sp, #64	; 0x40
 80176ba:	f000 fd89 	bl	80181d0 <uxr_parse_base_object_request>
 80176be:	990e      	ldr	r1, [sp, #56]	; 0x38
 80176c0:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80176c4:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80176c8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 80176cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80176ce:	f1ba 0f00 	cmp.w	sl, #0
 80176d2:	d006      	beq.n	80176e2 <read_submessage_list+0x266>
 80176d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80176d8:	4642      	mov	r2, r8
 80176da:	4620      	mov	r0, r4
 80176dc:	9300      	str	r3, [sp, #0]
 80176de:	464b      	mov	r3, r9
 80176e0:	47d0      	blx	sl
 80176e2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80176e4:	2a00      	cmp	r2, #0
 80176e6:	f43f aed0 	beq.w	801748a <read_submessage_list+0xe>
 80176ea:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80176ec:	2100      	movs	r1, #0
 80176ee:	3802      	subs	r0, #2
 80176f0:	e003      	b.n	80176fa <read_submessage_list+0x27e>
 80176f2:	3101      	adds	r1, #1
 80176f4:	4291      	cmp	r1, r2
 80176f6:	f43f aec8 	beq.w	801748a <read_submessage_list+0xe>
 80176fa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80176fe:	4543      	cmp	r3, r8
 8017700:	d1f7      	bne.n	80176f2 <read_submessage_list+0x276>
 8017702:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017704:	f803 9001 	strb.w	r9, [r3, r1]
 8017708:	e6bf      	b.n	801748a <read_submessage_list+0xe>
 801770a:	2a00      	cmp	r2, #0
 801770c:	f47f aebd 	bne.w	801748a <read_submessage_list+0xe>
 8017710:	4629      	mov	r1, r5
 8017712:	4620      	mov	r0, r4
 8017714:	f000 fca0 	bl	8018058 <uxr_read_create_session_status>
 8017718:	e6b7      	b.n	801748a <read_submessage_list+0xe>
 801771a:	4629      	mov	r1, r5
 801771c:	4620      	mov	r0, r4
 801771e:	f7ff fcf3 	bl	8017108 <read_submessage_get_info>
 8017722:	e6b2      	b.n	801748a <read_submessage_list+0xe>
 8017724:	b017      	add	sp, #92	; 0x5c
 8017726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801772a:	4629      	mov	r1, r5
 801772c:	4620      	mov	r0, r4
 801772e:	f000 fca1 	bl	8018074 <uxr_read_delete_session_status>
 8017732:	e6aa      	b.n	801748a <read_submessage_list+0xe>
 8017734:	f001 fb7a 	bl	8018e2c <uxr_nanos>
 8017738:	4642      	mov	r2, r8
 801773a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801773c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801773e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017742:	1818      	adds	r0, r3, r0
 8017744:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017746:	eb42 0101 	adc.w	r1, r2, r1
 801774a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801774c:	4642      	mov	r2, r8
 801774e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017752:	469c      	mov	ip, r3
 8017754:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8017758:	fbc3 7806 	smlal	r7, r8, r3, r6
 801775c:	4643      	mov	r3, r8
 801775e:	eb1c 0c07 	adds.w	ip, ip, r7
 8017762:	eb42 0203 	adc.w	r2, r2, r3
 8017766:	ebb0 030c 	subs.w	r3, r0, ip
 801776a:	eb61 0202 	sbc.w	r2, r1, r2
 801776e:	2a00      	cmp	r2, #0
 8017770:	db08      	blt.n	8017784 <read_submessage_list+0x308>
 8017772:	085b      	lsrs	r3, r3, #1
 8017774:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8017778:	1052      	asrs	r2, r2, #1
 801777a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801777e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8017782:	e6db      	b.n	801753c <read_submessage_list+0xc0>
 8017784:	3301      	adds	r3, #1
 8017786:	f142 0200 	adc.w	r2, r2, #0
 801778a:	e7f2      	b.n	8017772 <read_submessage_list+0x2f6>
 801778c:	3b9aca00 	.word	0x3b9aca00

08017790 <listen_message_reliably>:
 8017790:	1e0b      	subs	r3, r1, #0
 8017792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017796:	bfb8      	it	lt
 8017798:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801779c:	b09d      	sub	sp, #116	; 0x74
 801779e:	4680      	mov	r8, r0
 80177a0:	9305      	str	r3, [sp, #20]
 80177a2:	f001 fb27 	bl	8018df4 <uxr_millis>
 80177a6:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80177aa:	4681      	mov	r9, r0
 80177ac:	2a00      	cmp	r2, #0
 80177ae:	f000 809a 	beq.w	80178e6 <listen_message_reliably+0x156>
 80177b2:	2600      	movs	r6, #0
 80177b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80177b8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80177bc:	460f      	mov	r7, r1
 80177be:	4630      	mov	r0, r6
 80177c0:	9303      	str	r3, [sp, #12]
 80177c2:	e00e      	b.n	80177e2 <listen_message_reliably+0x52>
 80177c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80177c6:	3601      	adds	r6, #1
 80177c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177ca:	455a      	cmp	r2, fp
 80177cc:	9903      	ldr	r1, [sp, #12]
 80177ce:	b2f0      	uxtb	r0, r6
 80177d0:	eb73 0101 	sbcs.w	r1, r3, r1
 80177d4:	da01      	bge.n	80177da <listen_message_reliably+0x4a>
 80177d6:	4693      	mov	fp, r2
 80177d8:	9303      	str	r3, [sp, #12]
 80177da:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80177de:	4283      	cmp	r3, r0
 80177e0:	d95f      	bls.n	80178a2 <listen_message_reliably+0x112>
 80177e2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80177e6:	2102      	movs	r1, #2
 80177e8:	2201      	movs	r2, #1
 80177ea:	00e4      	lsls	r4, r4, #3
 80177ec:	f001 f97e 	bl	8018aec <uxr_stream_id>
 80177f0:	4601      	mov	r1, r0
 80177f2:	f104 0520 	add.w	r5, r4, #32
 80177f6:	463b      	mov	r3, r7
 80177f8:	464a      	mov	r2, r9
 80177fa:	9109      	str	r1, [sp, #36]	; 0x24
 80177fc:	4445      	add	r5, r8
 80177fe:	4628      	mov	r0, r5
 8017800:	f006 fb12 	bl	801de28 <uxr_update_output_stream_heartbeat_timestamp>
 8017804:	eb08 0304 	add.w	r3, r8, r4
 8017808:	2800      	cmp	r0, #0
 801780a:	d0db      	beq.n	80177c4 <listen_message_reliably+0x34>
 801780c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8017810:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8017814:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017818:	4640      	mov	r0, r8
 801781a:	3501      	adds	r5, #1
 801781c:	4444      	add	r4, r8
 801781e:	9304      	str	r3, [sp, #16]
 8017820:	f000 fcae 	bl	8018180 <uxr_session_header_offset>
 8017824:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017828:	2300      	movs	r3, #0
 801782a:	2211      	movs	r2, #17
 801782c:	a90c      	add	r1, sp, #48	; 0x30
 801782e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8017832:	9000      	str	r0, [sp, #0]
 8017834:	4650      	mov	r0, sl
 8017836:	3601      	adds	r6, #1
 8017838:	f7fa fd18 	bl	801226c <ucdr_init_buffer_origin_offset>
 801783c:	2300      	movs	r3, #0
 801783e:	2205      	movs	r2, #5
 8017840:	210b      	movs	r1, #11
 8017842:	4650      	mov	r0, sl
 8017844:	f001 fa90 	bl	8018d68 <uxr_buffer_submessage_header>
 8017848:	2101      	movs	r1, #1
 801784a:	8968      	ldrh	r0, [r5, #10]
 801784c:	f006 fbb0 	bl	801dfb0 <uxr_seq_num_add>
 8017850:	892b      	ldrh	r3, [r5, #8]
 8017852:	4602      	mov	r2, r0
 8017854:	a90a      	add	r1, sp, #40	; 0x28
 8017856:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801785a:	4650      	mov	r0, sl
 801785c:	9b04      	ldr	r3, [sp, #16]
 801785e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017862:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017866:	f002 fc99 	bl	801a19c <uxr_serialize_HEARTBEAT_Payload>
 801786a:	2200      	movs	r2, #0
 801786c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801786e:	4640      	mov	r0, r8
 8017870:	4611      	mov	r1, r2
 8017872:	f000 fc31 	bl	80180d8 <uxr_stamp_session_header>
 8017876:	4650      	mov	r0, sl
 8017878:	f7fa fd38 	bl	80122ec <ucdr_buffer_length>
 801787c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8017880:	4602      	mov	r2, r0
 8017882:	a90c      	add	r1, sp, #48	; 0x30
 8017884:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017888:	47a8      	blx	r5
 801788a:	9903      	ldr	r1, [sp, #12]
 801788c:	b2f0      	uxtb	r0, r6
 801788e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8017892:	455a      	cmp	r2, fp
 8017894:	eb73 0101 	sbcs.w	r1, r3, r1
 8017898:	db9d      	blt.n	80177d6 <listen_message_reliably+0x46>
 801789a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801789e:	4283      	cmp	r3, r0
 80178a0:	d89f      	bhi.n	80177e2 <listen_message_reliably+0x52>
 80178a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80178a6:	9a03      	ldr	r2, [sp, #12]
 80178a8:	429a      	cmp	r2, r3
 80178aa:	bf08      	it	eq
 80178ac:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80178b0:	d019      	beq.n	80178e6 <listen_message_reliably+0x156>
 80178b2:	ebab 0309 	sub.w	r3, fp, r9
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	9d05      	ldr	r5, [sp, #20]
 80178ba:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80178be:	aa08      	add	r2, sp, #32
 80178c0:	bf08      	it	eq
 80178c2:	2301      	moveq	r3, #1
 80178c4:	a907      	add	r1, sp, #28
 80178c6:	6884      	ldr	r4, [r0, #8]
 80178c8:	429d      	cmp	r5, r3
 80178ca:	6800      	ldr	r0, [r0, #0]
 80178cc:	bfa8      	it	ge
 80178ce:	461d      	movge	r5, r3
 80178d0:	462b      	mov	r3, r5
 80178d2:	47a0      	blx	r4
 80178d4:	b948      	cbnz	r0, 80178ea <listen_message_reliably+0x15a>
 80178d6:	9b05      	ldr	r3, [sp, #20]
 80178d8:	1b5b      	subs	r3, r3, r5
 80178da:	2b00      	cmp	r3, #0
 80178dc:	9305      	str	r3, [sp, #20]
 80178de:	f73f af60 	bgt.w	80177a2 <listen_message_reliably+0x12>
 80178e2:	4604      	mov	r4, r0
 80178e4:	e012      	b.n	801790c <listen_message_reliably+0x17c>
 80178e6:	9b05      	ldr	r3, [sp, #20]
 80178e8:	e7e5      	b.n	80178b6 <listen_message_reliably+0x126>
 80178ea:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80178ee:	4604      	mov	r4, r0
 80178f0:	2500      	movs	r5, #0
 80178f2:	a80c      	add	r0, sp, #48	; 0x30
 80178f4:	f7fa fccc 	bl	8012290 <ucdr_init_buffer>
 80178f8:	f10d 031a 	add.w	r3, sp, #26
 80178fc:	aa06      	add	r2, sp, #24
 80178fe:	a90c      	add	r1, sp, #48	; 0x30
 8017900:	4640      	mov	r0, r8
 8017902:	f88d 5018 	strb.w	r5, [sp, #24]
 8017906:	f000 fbfb 	bl	8018100 <uxr_read_session_header>
 801790a:	b918      	cbnz	r0, 8017914 <listen_message_reliably+0x184>
 801790c:	4620      	mov	r0, r4
 801790e:	b01d      	add	sp, #116	; 0x74
 8017910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017914:	4629      	mov	r1, r5
 8017916:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801791a:	f001 f915 	bl	8018b48 <uxr_stream_id_from_raw>
 801791e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017922:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8017926:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801792a:	2e01      	cmp	r6, #1
 801792c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8017930:	d04b      	beq.n	80179ca <listen_message_reliably+0x23a>
 8017932:	2e02      	cmp	r6, #2
 8017934:	d00f      	beq.n	8017956 <listen_message_reliably+0x1c6>
 8017936:	2e00      	cmp	r6, #0
 8017938:	d1e8      	bne.n	801790c <listen_message_reliably+0x17c>
 801793a:	4631      	mov	r1, r6
 801793c:	4630      	mov	r0, r6
 801793e:	f001 f903 	bl	8018b48 <uxr_stream_id_from_raw>
 8017942:	4602      	mov	r2, r0
 8017944:	a90c      	add	r1, sp, #48	; 0x30
 8017946:	4640      	mov	r0, r8
 8017948:	920a      	str	r2, [sp, #40]	; 0x28
 801794a:	f7ff fd97 	bl	801747c <read_submessage_list>
 801794e:	4620      	mov	r0, r4
 8017950:	b01d      	add	sp, #116	; 0x74
 8017952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017956:	4629      	mov	r1, r5
 8017958:	f108 0008 	add.w	r0, r8, #8
 801795c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8017960:	f001 f9e0 	bl	8018d24 <uxr_get_input_reliable_stream>
 8017964:	4607      	mov	r7, r0
 8017966:	b338      	cbz	r0, 80179b8 <listen_message_reliably+0x228>
 8017968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801796a:	a80c      	add	r0, sp, #48	; 0x30
 801796c:	9203      	str	r2, [sp, #12]
 801796e:	f7fa fcc1 	bl	80122f4 <ucdr_buffer_remaining>
 8017972:	4603      	mov	r3, r0
 8017974:	f10d 0019 	add.w	r0, sp, #25
 8017978:	9a03      	ldr	r2, [sp, #12]
 801797a:	4651      	mov	r1, sl
 801797c:	9000      	str	r0, [sp, #0]
 801797e:	4638      	mov	r0, r7
 8017980:	f005 fe5c 	bl	801d63c <uxr_receive_reliable_message>
 8017984:	b1c0      	cbz	r0, 80179b8 <listen_message_reliably+0x228>
 8017986:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801798a:	b393      	cbz	r3, 80179f2 <listen_message_reliably+0x262>
 801798c:	ae14      	add	r6, sp, #80	; 0x50
 801798e:	f04f 0a02 	mov.w	sl, #2
 8017992:	e00a      	b.n	80179aa <listen_message_reliably+0x21a>
 8017994:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8017998:	4631      	mov	r1, r6
 801799a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801799e:	4640      	mov	r0, r8
 80179a0:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80179a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179a6:	f7ff fd69 	bl	801747c <read_submessage_list>
 80179aa:	2204      	movs	r2, #4
 80179ac:	4631      	mov	r1, r6
 80179ae:	4638      	mov	r0, r7
 80179b0:	f005 fec6 	bl	801d740 <uxr_next_input_reliable_buffer_available>
 80179b4:	2800      	cmp	r0, #0
 80179b6:	d1ed      	bne.n	8017994 <listen_message_reliably+0x204>
 80179b8:	4640      	mov	r0, r8
 80179ba:	462a      	mov	r2, r5
 80179bc:	4649      	mov	r1, r9
 80179be:	f7ff fbd9 	bl	8017174 <write_submessage_acknack.isra.0>
 80179c2:	4620      	mov	r0, r4
 80179c4:	b01d      	add	sp, #116	; 0x74
 80179c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179ca:	4629      	mov	r1, r5
 80179cc:	f108 0008 	add.w	r0, r8, #8
 80179d0:	f001 f99e 	bl	8018d10 <uxr_get_input_best_effort_stream>
 80179d4:	2800      	cmp	r0, #0
 80179d6:	d099      	beq.n	801790c <listen_message_reliably+0x17c>
 80179d8:	4651      	mov	r1, sl
 80179da:	f005 fda5 	bl	801d528 <uxr_receive_best_effort_message>
 80179de:	2800      	cmp	r0, #0
 80179e0:	d094      	beq.n	801790c <listen_message_reliably+0x17c>
 80179e2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80179e6:	a90c      	add	r1, sp, #48	; 0x30
 80179e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179ea:	4640      	mov	r0, r8
 80179ec:	f7ff fd46 	bl	801747c <read_submessage_list>
 80179f0:	e78c      	b.n	801790c <listen_message_reliably+0x17c>
 80179f2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80179f6:	a90c      	add	r1, sp, #48	; 0x30
 80179f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179fa:	4640      	mov	r0, r8
 80179fc:	f7ff fd3e 	bl	801747c <read_submessage_list>
 8017a00:	e7c4      	b.n	801798c <listen_message_reliably+0x1fc>
 8017a02:	bf00      	nop

08017a04 <uxr_run_session_timeout>:
 8017a04:	b570      	push	{r4, r5, r6, lr}
 8017a06:	4604      	mov	r4, r0
 8017a08:	460d      	mov	r5, r1
 8017a0a:	f001 f9f3 	bl	8018df4 <uxr_millis>
 8017a0e:	4606      	mov	r6, r0
 8017a10:	4620      	mov	r0, r4
 8017a12:	f7ff fc77 	bl	8017304 <uxr_flash_output_streams>
 8017a16:	4629      	mov	r1, r5
 8017a18:	4620      	mov	r0, r4
 8017a1a:	f7ff feb9 	bl	8017790 <listen_message_reliably>
 8017a1e:	f001 f9e9 	bl	8018df4 <uxr_millis>
 8017a22:	1b83      	subs	r3, r0, r6
 8017a24:	1ae9      	subs	r1, r5, r3
 8017a26:	2900      	cmp	r1, #0
 8017a28:	dcf6      	bgt.n	8017a18 <uxr_run_session_timeout+0x14>
 8017a2a:	f104 0008 	add.w	r0, r4, #8
 8017a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a32:	f001 b983 	b.w	8018d3c <uxr_output_streams_confirmed>
 8017a36:	bf00      	nop

08017a38 <uxr_run_session_until_data>:
 8017a38:	b570      	push	{r4, r5, r6, lr}
 8017a3a:	4604      	mov	r4, r0
 8017a3c:	460d      	mov	r5, r1
 8017a3e:	f001 f9d9 	bl	8018df4 <uxr_millis>
 8017a42:	4606      	mov	r6, r0
 8017a44:	4620      	mov	r0, r4
 8017a46:	f7ff fc5d 	bl	8017304 <uxr_flash_output_streams>
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	4629      	mov	r1, r5
 8017a4e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8017a52:	e005      	b.n	8017a60 <uxr_run_session_until_data+0x28>
 8017a54:	f001 f9ce 	bl	8018df4 <uxr_millis>
 8017a58:	1b83      	subs	r3, r0, r6
 8017a5a:	1ae9      	subs	r1, r5, r3
 8017a5c:	2900      	cmp	r1, #0
 8017a5e:	dd07      	ble.n	8017a70 <uxr_run_session_until_data+0x38>
 8017a60:	4620      	mov	r0, r4
 8017a62:	f7ff fe95 	bl	8017790 <listen_message_reliably>
 8017a66:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8017a6a:	2800      	cmp	r0, #0
 8017a6c:	d0f2      	beq.n	8017a54 <uxr_run_session_until_data+0x1c>
 8017a6e:	bd70      	pop	{r4, r5, r6, pc}
 8017a70:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8017a74:	bd70      	pop	{r4, r5, r6, pc}
 8017a76:	bf00      	nop

08017a78 <uxr_run_session_until_confirm_delivery>:
 8017a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a7c:	4606      	mov	r6, r0
 8017a7e:	460d      	mov	r5, r1
 8017a80:	f001 f9b8 	bl	8018df4 <uxr_millis>
 8017a84:	4607      	mov	r7, r0
 8017a86:	4630      	mov	r0, r6
 8017a88:	f106 0808 	add.w	r8, r6, #8
 8017a8c:	f7ff fc3a 	bl	8017304 <uxr_flash_output_streams>
 8017a90:	2d00      	cmp	r5, #0
 8017a92:	db10      	blt.n	8017ab6 <uxr_run_session_until_confirm_delivery+0x3e>
 8017a94:	462c      	mov	r4, r5
 8017a96:	e006      	b.n	8017aa6 <uxr_run_session_until_confirm_delivery+0x2e>
 8017a98:	f7ff fe7a 	bl	8017790 <listen_message_reliably>
 8017a9c:	f001 f9aa 	bl	8018df4 <uxr_millis>
 8017aa0:	1bc3      	subs	r3, r0, r7
 8017aa2:	1aec      	subs	r4, r5, r3
 8017aa4:	d407      	bmi.n	8017ab6 <uxr_run_session_until_confirm_delivery+0x3e>
 8017aa6:	4640      	mov	r0, r8
 8017aa8:	f001 f948 	bl	8018d3c <uxr_output_streams_confirmed>
 8017aac:	4603      	mov	r3, r0
 8017aae:	4621      	mov	r1, r4
 8017ab0:	4630      	mov	r0, r6
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d0f0      	beq.n	8017a98 <uxr_run_session_until_confirm_delivery+0x20>
 8017ab6:	4640      	mov	r0, r8
 8017ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017abc:	f001 b93e 	b.w	8018d3c <uxr_output_streams_confirmed>

08017ac0 <uxr_run_session_until_all_status>:
 8017ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8017ac8:	4606      	mov	r6, r0
 8017aca:	4688      	mov	r8, r1
 8017acc:	4692      	mov	sl, r2
 8017ace:	461f      	mov	r7, r3
 8017ad0:	f7ff fc18 	bl	8017304 <uxr_flash_output_streams>
 8017ad4:	f1bb 0f00 	cmp.w	fp, #0
 8017ad8:	d004      	beq.n	8017ae4 <uxr_run_session_until_all_status+0x24>
 8017ada:	465a      	mov	r2, fp
 8017adc:	21ff      	movs	r1, #255	; 0xff
 8017ade:	4638      	mov	r0, r7
 8017ae0:	f008 f940 	bl	801fd64 <memset>
 8017ae4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8017ae8:	1e7d      	subs	r5, r7, #1
 8017aea:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8017aee:	f001 f981 	bl	8018df4 <uxr_millis>
 8017af2:	4641      	mov	r1, r8
 8017af4:	4681      	mov	r9, r0
 8017af6:	4630      	mov	r0, r6
 8017af8:	f7ff fe4a 	bl	8017790 <listen_message_reliably>
 8017afc:	f001 f97a 	bl	8018df4 <uxr_millis>
 8017b00:	eba0 0009 	sub.w	r0, r0, r9
 8017b04:	eba8 0100 	sub.w	r1, r8, r0
 8017b08:	f1bb 0f00 	cmp.w	fp, #0
 8017b0c:	d029      	beq.n	8017b62 <uxr_run_session_until_all_status+0xa2>
 8017b0e:	46ae      	mov	lr, r5
 8017b10:	f04f 0c00 	mov.w	ip, #0
 8017b14:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8017b18:	2cff      	cmp	r4, #255	; 0xff
 8017b1a:	d015      	beq.n	8017b48 <uxr_run_session_until_all_status+0x88>
 8017b1c:	f10c 0c01 	add.w	ip, ip, #1
 8017b20:	45e3      	cmp	fp, ip
 8017b22:	d8f7      	bhi.n	8017b14 <uxr_run_session_until_all_status+0x54>
 8017b24:	2300      	movs	r3, #0
 8017b26:	67f3      	str	r3, [r6, #124]	; 0x7c
 8017b28:	e000      	b.n	8017b2c <uxr_run_session_until_all_status+0x6c>
 8017b2a:	b158      	cbz	r0, 8017b44 <uxr_run_session_until_all_status+0x84>
 8017b2c:	462b      	mov	r3, r5
 8017b2e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8017b32:	3302      	adds	r3, #2
 8017b34:	2801      	cmp	r0, #1
 8017b36:	eba3 0307 	sub.w	r3, r3, r7
 8017b3a:	bf8c      	ite	hi
 8017b3c:	2000      	movhi	r0, #0
 8017b3e:	2001      	movls	r0, #1
 8017b40:	459b      	cmp	fp, r3
 8017b42:	d8f2      	bhi.n	8017b2a <uxr_run_session_until_all_status+0x6a>
 8017b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b48:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8017b4c:	f10c 0c01 	add.w	ip, ip, #1
 8017b50:	45dc      	cmp	ip, fp
 8017b52:	d201      	bcs.n	8017b58 <uxr_run_session_until_all_status+0x98>
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d0dd      	beq.n	8017b14 <uxr_run_session_until_all_status+0x54>
 8017b58:	2900      	cmp	r1, #0
 8017b5a:	dde3      	ble.n	8017b24 <uxr_run_session_until_all_status+0x64>
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d1ca      	bne.n	8017af6 <uxr_run_session_until_all_status+0x36>
 8017b60:	e7e0      	b.n	8017b24 <uxr_run_session_until_all_status+0x64>
 8017b62:	2001      	movs	r0, #1
 8017b64:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8017b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b6c <wait_session_status>:
 8017b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b70:	4604      	mov	r4, r0
 8017b72:	b09d      	sub	sp, #116	; 0x74
 8017b74:	20ff      	movs	r0, #255	; 0xff
 8017b76:	9303      	str	r3, [sp, #12]
 8017b78:	7160      	strb	r0, [r4, #5]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f000 80b6 	beq.w	8017cec <wait_session_status+0x180>
 8017b80:	4689      	mov	r9, r1
 8017b82:	4692      	mov	sl, r2
 8017b84:	f04f 0b00 	mov.w	fp, #0
 8017b88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017b8a:	4652      	mov	r2, sl
 8017b8c:	4649      	mov	r1, r9
 8017b8e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017b92:	47a8      	blx	r5
 8017b94:	f001 f92e 	bl	8018df4 <uxr_millis>
 8017b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b9c:	4605      	mov	r5, r0
 8017b9e:	e009      	b.n	8017bb4 <wait_session_status+0x48>
 8017ba0:	f001 f928 	bl	8018df4 <uxr_millis>
 8017ba4:	1b40      	subs	r0, r0, r5
 8017ba6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	dd40      	ble.n	8017c30 <wait_session_status+0xc4>
 8017bae:	7960      	ldrb	r0, [r4, #5]
 8017bb0:	28ff      	cmp	r0, #255	; 0xff
 8017bb2:	d145      	bne.n	8017c40 <wait_session_status+0xd4>
 8017bb4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8017bb6:	a908      	add	r1, sp, #32
 8017bb8:	6896      	ldr	r6, [r2, #8]
 8017bba:	6810      	ldr	r0, [r2, #0]
 8017bbc:	aa09      	add	r2, sp, #36	; 0x24
 8017bbe:	47b0      	blx	r6
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	d0ed      	beq.n	8017ba0 <wait_session_status+0x34>
 8017bc4:	a80c      	add	r0, sp, #48	; 0x30
 8017bc6:	2600      	movs	r6, #0
 8017bc8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8017bcc:	f7fa fb60 	bl	8012290 <ucdr_init_buffer>
 8017bd0:	f10d 031e 	add.w	r3, sp, #30
 8017bd4:	aa07      	add	r2, sp, #28
 8017bd6:	a90c      	add	r1, sp, #48	; 0x30
 8017bd8:	4620      	mov	r0, r4
 8017bda:	f88d 601c 	strb.w	r6, [sp, #28]
 8017bde:	f000 fa8f 	bl	8018100 <uxr_read_session_header>
 8017be2:	2800      	cmp	r0, #0
 8017be4:	d0dc      	beq.n	8017ba0 <wait_session_status+0x34>
 8017be6:	4631      	mov	r1, r6
 8017be8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8017bec:	f000 ffac 	bl	8018b48 <uxr_stream_id_from_raw>
 8017bf0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017bf4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017bf8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8017bfc:	2f01      	cmp	r7, #1
 8017bfe:	9302      	str	r3, [sp, #8]
 8017c00:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8017c04:	d05c      	beq.n	8017cc0 <wait_session_status+0x154>
 8017c06:	2f02      	cmp	r7, #2
 8017c08:	d020      	beq.n	8017c4c <wait_session_status+0xe0>
 8017c0a:	2f00      	cmp	r7, #0
 8017c0c:	d1c8      	bne.n	8017ba0 <wait_session_status+0x34>
 8017c0e:	4639      	mov	r1, r7
 8017c10:	4638      	mov	r0, r7
 8017c12:	f000 ff99 	bl	8018b48 <uxr_stream_id_from_raw>
 8017c16:	a90c      	add	r1, sp, #48	; 0x30
 8017c18:	4602      	mov	r2, r0
 8017c1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	f7ff fc2d 	bl	801747c <read_submessage_list>
 8017c22:	f001 f8e7 	bl	8018df4 <uxr_millis>
 8017c26:	1b40      	subs	r0, r0, r5
 8017c28:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	dcbe      	bgt.n	8017bae <wait_session_status+0x42>
 8017c30:	f10b 0b01 	add.w	fp, fp, #1
 8017c34:	9b03      	ldr	r3, [sp, #12]
 8017c36:	7960      	ldrb	r0, [r4, #5]
 8017c38:	455b      	cmp	r3, fp
 8017c3a:	d001      	beq.n	8017c40 <wait_session_status+0xd4>
 8017c3c:	28ff      	cmp	r0, #255	; 0xff
 8017c3e:	d0a3      	beq.n	8017b88 <wait_session_status+0x1c>
 8017c40:	38ff      	subs	r0, #255	; 0xff
 8017c42:	bf18      	it	ne
 8017c44:	2001      	movne	r0, #1
 8017c46:	b01d      	add	sp, #116	; 0x74
 8017c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8017c50:	4631      	mov	r1, r6
 8017c52:	f104 0008 	add.w	r0, r4, #8
 8017c56:	9304      	str	r3, [sp, #16]
 8017c58:	f001 f864 	bl	8018d24 <uxr_get_input_reliable_stream>
 8017c5c:	4680      	mov	r8, r0
 8017c5e:	b348      	cbz	r0, 8017cb4 <wait_session_status+0x148>
 8017c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017c62:	a80c      	add	r0, sp, #48	; 0x30
 8017c64:	9205      	str	r2, [sp, #20]
 8017c66:	f7fa fb45 	bl	80122f4 <ucdr_buffer_remaining>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	f10d 001d 	add.w	r0, sp, #29
 8017c70:	9a05      	ldr	r2, [sp, #20]
 8017c72:	9000      	str	r0, [sp, #0]
 8017c74:	4640      	mov	r0, r8
 8017c76:	9902      	ldr	r1, [sp, #8]
 8017c78:	f005 fce0 	bl	801d63c <uxr_receive_reliable_message>
 8017c7c:	b1d0      	cbz	r0, 8017cb4 <wait_session_status+0x148>
 8017c7e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d03a      	beq.n	8017cfc <wait_session_status+0x190>
 8017c86:	9f04      	ldr	r7, [sp, #16]
 8017c88:	e00a      	b.n	8017ca0 <wait_session_status+0x134>
 8017c8a:	f04f 0302 	mov.w	r3, #2
 8017c8e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8017c92:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8017c96:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8017c9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017c9c:	f7ff fbee 	bl	801747c <read_submessage_list>
 8017ca0:	a914      	add	r1, sp, #80	; 0x50
 8017ca2:	2204      	movs	r2, #4
 8017ca4:	4640      	mov	r0, r8
 8017ca6:	f005 fd4b 	bl	801d740 <uxr_next_input_reliable_buffer_available>
 8017caa:	4603      	mov	r3, r0
 8017cac:	a914      	add	r1, sp, #80	; 0x50
 8017cae:	4620      	mov	r0, r4
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d1ea      	bne.n	8017c8a <wait_session_status+0x11e>
 8017cb4:	4632      	mov	r2, r6
 8017cb6:	9904      	ldr	r1, [sp, #16]
 8017cb8:	4620      	mov	r0, r4
 8017cba:	f7ff fa5b 	bl	8017174 <write_submessage_acknack.isra.0>
 8017cbe:	e76f      	b.n	8017ba0 <wait_session_status+0x34>
 8017cc0:	4631      	mov	r1, r6
 8017cc2:	f104 0008 	add.w	r0, r4, #8
 8017cc6:	f001 f823 	bl	8018d10 <uxr_get_input_best_effort_stream>
 8017cca:	2800      	cmp	r0, #0
 8017ccc:	f43f af68 	beq.w	8017ba0 <wait_session_status+0x34>
 8017cd0:	9902      	ldr	r1, [sp, #8]
 8017cd2:	f005 fc29 	bl	801d528 <uxr_receive_best_effort_message>
 8017cd6:	2800      	cmp	r0, #0
 8017cd8:	f43f af62 	beq.w	8017ba0 <wait_session_status+0x34>
 8017cdc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8017ce0:	a90c      	add	r1, sp, #48	; 0x30
 8017ce2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	f7ff fbc9 	bl	801747c <read_submessage_list>
 8017cea:	e759      	b.n	8017ba0 <wait_session_status+0x34>
 8017cec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017cee:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017cf2:	47a0      	blx	r4
 8017cf4:	2001      	movs	r0, #1
 8017cf6:	b01d      	add	sp, #116	; 0x74
 8017cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cfc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8017d00:	a90c      	add	r1, sp, #48	; 0x30
 8017d02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017d04:	4620      	mov	r0, r4
 8017d06:	f7ff fbb9 	bl	801747c <read_submessage_list>
 8017d0a:	e7bc      	b.n	8017c86 <wait_session_status+0x11a>

08017d0c <uxr_delete_session_retries>:
 8017d0c:	b530      	push	{r4, r5, lr}
 8017d0e:	b08f      	sub	sp, #60	; 0x3c
 8017d10:	4604      	mov	r4, r0
 8017d12:	460d      	mov	r5, r1
 8017d14:	f000 fa34 	bl	8018180 <uxr_session_header_offset>
 8017d18:	2300      	movs	r3, #0
 8017d1a:	2210      	movs	r2, #16
 8017d1c:	a902      	add	r1, sp, #8
 8017d1e:	9000      	str	r0, [sp, #0]
 8017d20:	a806      	add	r0, sp, #24
 8017d22:	f7fa faa3 	bl	801226c <ucdr_init_buffer_origin_offset>
 8017d26:	a906      	add	r1, sp, #24
 8017d28:	4620      	mov	r0, r4
 8017d2a:	f000 f979 	bl	8018020 <uxr_buffer_delete_session>
 8017d2e:	2200      	movs	r2, #0
 8017d30:	9b06      	ldr	r3, [sp, #24]
 8017d32:	4620      	mov	r0, r4
 8017d34:	4611      	mov	r1, r2
 8017d36:	f000 f9cf 	bl	80180d8 <uxr_stamp_session_header>
 8017d3a:	a806      	add	r0, sp, #24
 8017d3c:	f7fa fad6 	bl	80122ec <ucdr_buffer_length>
 8017d40:	462b      	mov	r3, r5
 8017d42:	4602      	mov	r2, r0
 8017d44:	a902      	add	r1, sp, #8
 8017d46:	4620      	mov	r0, r4
 8017d48:	f7ff ff10 	bl	8017b6c <wait_session_status>
 8017d4c:	b118      	cbz	r0, 8017d56 <uxr_delete_session_retries+0x4a>
 8017d4e:	7960      	ldrb	r0, [r4, #5]
 8017d50:	fab0 f080 	clz	r0, r0
 8017d54:	0940      	lsrs	r0, r0, #5
 8017d56:	b00f      	add	sp, #60	; 0x3c
 8017d58:	bd30      	pop	{r4, r5, pc}
 8017d5a:	bf00      	nop

08017d5c <uxr_create_session>:
 8017d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d60:	f100 0b08 	add.w	fp, r0, #8
 8017d64:	4604      	mov	r4, r0
 8017d66:	b0ab      	sub	sp, #172	; 0xac
 8017d68:	4658      	mov	r0, fp
 8017d6a:	465e      	mov	r6, fp
 8017d6c:	f000 ff22 	bl	8018bb4 <uxr_reset_stream_storage>
 8017d70:	4620      	mov	r0, r4
 8017d72:	f000 fa05 	bl	8018180 <uxr_session_header_offset>
 8017d76:	2300      	movs	r3, #0
 8017d78:	221c      	movs	r2, #28
 8017d7a:	a90b      	add	r1, sp, #44	; 0x2c
 8017d7c:	9000      	str	r0, [sp, #0]
 8017d7e:	a812      	add	r0, sp, #72	; 0x48
 8017d80:	f7fa fa74 	bl	801226c <ucdr_init_buffer_origin_offset>
 8017d84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017d86:	a912      	add	r1, sp, #72	; 0x48
 8017d88:	4620      	mov	r0, r4
 8017d8a:	8a1a      	ldrh	r2, [r3, #16]
 8017d8c:	3a04      	subs	r2, #4
 8017d8e:	b292      	uxth	r2, r2
 8017d90:	f000 f91c 	bl	8017fcc <uxr_buffer_create_session>
 8017d94:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017d96:	4620      	mov	r0, r4
 8017d98:	f000 f98a 	bl	80180b0 <uxr_stamp_create_session_header>
 8017d9c:	a812      	add	r0, sp, #72	; 0x48
 8017d9e:	f7fa faa5 	bl	80122ec <ucdr_buffer_length>
 8017da2:	23ff      	movs	r3, #255	; 0xff
 8017da4:	4681      	mov	r9, r0
 8017da6:	7163      	strb	r3, [r4, #5]
 8017da8:	230a      	movs	r3, #10
 8017daa:	9303      	str	r3, [sp, #12]
 8017dac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017dae:	464a      	mov	r2, r9
 8017db0:	a90b      	add	r1, sp, #44	; 0x2c
 8017db2:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017db6:	47a8      	blx	r5
 8017db8:	f001 f81c 	bl	8018df4 <uxr_millis>
 8017dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017dc0:	4605      	mov	r5, r0
 8017dc2:	e009      	b.n	8017dd8 <uxr_create_session+0x7c>
 8017dc4:	f001 f816 	bl	8018df4 <uxr_millis>
 8017dc8:	1b40      	subs	r0, r0, r5
 8017dca:	7962      	ldrb	r2, [r4, #5]
 8017dcc:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	dd38      	ble.n	8017e46 <uxr_create_session+0xea>
 8017dd4:	2aff      	cmp	r2, #255	; 0xff
 8017dd6:	d13c      	bne.n	8017e52 <uxr_create_session+0xf6>
 8017dd8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8017dda:	a907      	add	r1, sp, #28
 8017ddc:	6897      	ldr	r7, [r2, #8]
 8017dde:	6810      	ldr	r0, [r2, #0]
 8017de0:	aa08      	add	r2, sp, #32
 8017de2:	47b8      	blx	r7
 8017de4:	2800      	cmp	r0, #0
 8017de6:	d0ed      	beq.n	8017dc4 <uxr_create_session+0x68>
 8017de8:	a81a      	add	r0, sp, #104	; 0x68
 8017dea:	2700      	movs	r7, #0
 8017dec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017df0:	f7fa fa4e 	bl	8012290 <ucdr_init_buffer>
 8017df4:	f10d 031a 	add.w	r3, sp, #26
 8017df8:	aa06      	add	r2, sp, #24
 8017dfa:	a91a      	add	r1, sp, #104	; 0x68
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	f88d 7018 	strb.w	r7, [sp, #24]
 8017e02:	f000 f97d 	bl	8018100 <uxr_read_session_header>
 8017e06:	2800      	cmp	r0, #0
 8017e08:	d0dc      	beq.n	8017dc4 <uxr_create_session+0x68>
 8017e0a:	4639      	mov	r1, r7
 8017e0c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017e10:	f000 fe9a 	bl	8018b48 <uxr_stream_id_from_raw>
 8017e14:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017e18:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8017e1c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017e20:	2f01      	cmp	r7, #1
 8017e22:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8017e26:	d053      	beq.n	8017ed0 <uxr_create_session+0x174>
 8017e28:	2f02      	cmp	r7, #2
 8017e2a:	d018      	beq.n	8017e5e <uxr_create_session+0x102>
 8017e2c:	2f00      	cmp	r7, #0
 8017e2e:	d1c9      	bne.n	8017dc4 <uxr_create_session+0x68>
 8017e30:	4639      	mov	r1, r7
 8017e32:	4638      	mov	r0, r7
 8017e34:	f000 fe88 	bl	8018b48 <uxr_stream_id_from_raw>
 8017e38:	a91a      	add	r1, sp, #104	; 0x68
 8017e3a:	4602      	mov	r2, r0
 8017e3c:	900a      	str	r0, [sp, #40]	; 0x28
 8017e3e:	4620      	mov	r0, r4
 8017e40:	f7ff fb1c 	bl	801747c <read_submessage_list>
 8017e44:	e7be      	b.n	8017dc4 <uxr_create_session+0x68>
 8017e46:	9b03      	ldr	r3, [sp, #12]
 8017e48:	3b01      	subs	r3, #1
 8017e4a:	9303      	str	r3, [sp, #12]
 8017e4c:	d001      	beq.n	8017e52 <uxr_create_session+0xf6>
 8017e4e:	2aff      	cmp	r2, #255	; 0xff
 8017e50:	d0ac      	beq.n	8017dac <uxr_create_session+0x50>
 8017e52:	2a00      	cmp	r2, #0
 8017e54:	d051      	beq.n	8017efa <uxr_create_session+0x19e>
 8017e56:	2000      	movs	r0, #0
 8017e58:	b02b      	add	sp, #172	; 0xac
 8017e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e5e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017e62:	4641      	mov	r1, r8
 8017e64:	4630      	mov	r0, r6
 8017e66:	9304      	str	r3, [sp, #16]
 8017e68:	f000 ff5c 	bl	8018d24 <uxr_get_input_reliable_stream>
 8017e6c:	4682      	mov	sl, r0
 8017e6e:	b348      	cbz	r0, 8017ec4 <uxr_create_session+0x168>
 8017e70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017e72:	a81a      	add	r0, sp, #104	; 0x68
 8017e74:	9205      	str	r2, [sp, #20]
 8017e76:	f7fa fa3d 	bl	80122f4 <ucdr_buffer_remaining>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	f10d 0019 	add.w	r0, sp, #25
 8017e80:	9a05      	ldr	r2, [sp, #20]
 8017e82:	4659      	mov	r1, fp
 8017e84:	9000      	str	r0, [sp, #0]
 8017e86:	4650      	mov	r0, sl
 8017e88:	f005 fbd8 	bl	801d63c <uxr_receive_reliable_message>
 8017e8c:	b1d0      	cbz	r0, 8017ec4 <uxr_create_session+0x168>
 8017e8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d038      	beq.n	8017f08 <uxr_create_session+0x1ac>
 8017e96:	9f04      	ldr	r7, [sp, #16]
 8017e98:	e00a      	b.n	8017eb0 <uxr_create_session+0x154>
 8017e9a:	f04f 0302 	mov.w	r3, #2
 8017e9e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8017ea2:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8017ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017eac:	f7ff fae6 	bl	801747c <read_submessage_list>
 8017eb0:	a922      	add	r1, sp, #136	; 0x88
 8017eb2:	2204      	movs	r2, #4
 8017eb4:	4650      	mov	r0, sl
 8017eb6:	f005 fc43 	bl	801d740 <uxr_next_input_reliable_buffer_available>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	a922      	add	r1, sp, #136	; 0x88
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d1ea      	bne.n	8017e9a <uxr_create_session+0x13e>
 8017ec4:	4642      	mov	r2, r8
 8017ec6:	9904      	ldr	r1, [sp, #16]
 8017ec8:	4620      	mov	r0, r4
 8017eca:	f7ff f953 	bl	8017174 <write_submessage_acknack.isra.0>
 8017ece:	e779      	b.n	8017dc4 <uxr_create_session+0x68>
 8017ed0:	4641      	mov	r1, r8
 8017ed2:	4630      	mov	r0, r6
 8017ed4:	f000 ff1c 	bl	8018d10 <uxr_get_input_best_effort_stream>
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	f43f af73 	beq.w	8017dc4 <uxr_create_session+0x68>
 8017ede:	4659      	mov	r1, fp
 8017ee0:	f005 fb22 	bl	801d528 <uxr_receive_best_effort_message>
 8017ee4:	2800      	cmp	r0, #0
 8017ee6:	f43f af6d 	beq.w	8017dc4 <uxr_create_session+0x68>
 8017eea:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8017eee:	a91a      	add	r1, sp, #104	; 0x68
 8017ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ef2:	4620      	mov	r0, r4
 8017ef4:	f7ff fac2 	bl	801747c <read_submessage_list>
 8017ef8:	e764      	b.n	8017dc4 <uxr_create_session+0x68>
 8017efa:	4630      	mov	r0, r6
 8017efc:	f000 fe5a 	bl	8018bb4 <uxr_reset_stream_storage>
 8017f00:	2001      	movs	r0, #1
 8017f02:	b02b      	add	sp, #172	; 0xac
 8017f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f08:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8017f0c:	a91a      	add	r1, sp, #104	; 0x68
 8017f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f10:	4620      	mov	r0, r4
 8017f12:	f7ff fab3 	bl	801747c <read_submessage_list>
 8017f16:	e7be      	b.n	8017e96 <uxr_create_session+0x13a>

08017f18 <uxr_prepare_stream_to_write_submessage>:
 8017f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f1c:	b082      	sub	sp, #8
 8017f1e:	4604      	mov	r4, r0
 8017f20:	4610      	mov	r0, r2
 8017f22:	4615      	mov	r5, r2
 8017f24:	461e      	mov	r6, r3
 8017f26:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8017f2a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8017f2e:	f105 0904 	add.w	r9, r5, #4
 8017f32:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8017f36:	9101      	str	r1, [sp, #4]
 8017f38:	f000 ff56 	bl	8018de8 <uxr_submessage_padding>
 8017f3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017f40:	4481      	add	r9, r0
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d01d      	beq.n	8017f82 <uxr_prepare_stream_to_write_submessage+0x6a>
 8017f46:	2b02      	cmp	r3, #2
 8017f48:	d116      	bne.n	8017f78 <uxr_prepare_stream_to_write_submessage+0x60>
 8017f4a:	f104 0008 	add.w	r0, r4, #8
 8017f4e:	4651      	mov	r1, sl
 8017f50:	f000 fed2 	bl	8018cf8 <uxr_get_output_reliable_stream>
 8017f54:	4604      	mov	r4, r0
 8017f56:	b158      	cbz	r0, 8017f70 <uxr_prepare_stream_to_write_submessage+0x58>
 8017f58:	4649      	mov	r1, r9
 8017f5a:	4632      	mov	r2, r6
 8017f5c:	f005 fdb6 	bl	801dacc <uxr_prepare_reliable_buffer_to_write>
 8017f60:	4604      	mov	r4, r0
 8017f62:	b12c      	cbz	r4, 8017f70 <uxr_prepare_stream_to_write_submessage+0x58>
 8017f64:	4643      	mov	r3, r8
 8017f66:	b2aa      	uxth	r2, r5
 8017f68:	4639      	mov	r1, r7
 8017f6a:	4630      	mov	r0, r6
 8017f6c:	f000 fefc 	bl	8018d68 <uxr_buffer_submessage_header>
 8017f70:	4620      	mov	r0, r4
 8017f72:	b002      	add	sp, #8
 8017f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f78:	2400      	movs	r4, #0
 8017f7a:	4620      	mov	r0, r4
 8017f7c:	b002      	add	sp, #8
 8017f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f82:	f104 0008 	add.w	r0, r4, #8
 8017f86:	4651      	mov	r1, sl
 8017f88:	f000 feae 	bl	8018ce8 <uxr_get_output_best_effort_stream>
 8017f8c:	4604      	mov	r4, r0
 8017f8e:	2800      	cmp	r0, #0
 8017f90:	d0ee      	beq.n	8017f70 <uxr_prepare_stream_to_write_submessage+0x58>
 8017f92:	4649      	mov	r1, r9
 8017f94:	4632      	mov	r2, r6
 8017f96:	f005 fcc3 	bl	801d920 <uxr_prepare_best_effort_buffer_to_write>
 8017f9a:	4604      	mov	r4, r0
 8017f9c:	e7e1      	b.n	8017f62 <uxr_prepare_stream_to_write_submessage+0x4a>
 8017f9e:	bf00      	nop

08017fa0 <uxr_init_session_info>:
 8017fa0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8017fa4:	23ff      	movs	r3, #255	; 0xff
 8017fa6:	7102      	strb	r2, [r0, #4]
 8017fa8:	f880 c001 	strb.w	ip, [r0, #1]
 8017fac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017fb0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017fb4:	7001      	strb	r1, [r0, #0]
 8017fb6:	f880 c002 	strb.w	ip, [r0, #2]
 8017fba:	7143      	strb	r3, [r0, #5]
 8017fbc:	70c2      	strb	r2, [r0, #3]
 8017fbe:	b500      	push	{lr}
 8017fc0:	f04f 0e09 	mov.w	lr, #9
 8017fc4:	f8a0 e006 	strh.w	lr, [r0, #6]
 8017fc8:	f85d fb04 	ldr.w	pc, [sp], #4

08017fcc <uxr_buffer_create_session>:
 8017fcc:	b530      	push	{r4, r5, lr}
 8017fce:	2300      	movs	r3, #0
 8017fd0:	b089      	sub	sp, #36	; 0x24
 8017fd2:	4d12      	ldr	r5, [pc, #72]	; (801801c <uxr_buffer_create_session+0x50>)
 8017fd4:	460c      	mov	r4, r1
 8017fd6:	9307      	str	r3, [sp, #28]
 8017fd8:	4619      	mov	r1, r3
 8017fda:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017fde:	2201      	movs	r2, #1
 8017fe0:	9301      	str	r3, [sp, #4]
 8017fe2:	80c2      	strh	r2, [r0, #6]
 8017fe4:	f88d 2004 	strb.w	r2, [sp, #4]
 8017fe8:	682a      	ldr	r2, [r5, #0]
 8017fea:	9303      	str	r3, [sp, #12]
 8017fec:	9200      	str	r2, [sp, #0]
 8017fee:	88aa      	ldrh	r2, [r5, #4]
 8017ff0:	9306      	str	r3, [sp, #24]
 8017ff2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017ff6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8017ffa:	9202      	str	r2, [sp, #8]
 8017ffc:	7802      	ldrb	r2, [r0, #0]
 8017ffe:	4620      	mov	r0, r4
 8018000:	f88d 200c 	strb.w	r2, [sp, #12]
 8018004:	2210      	movs	r2, #16
 8018006:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801800a:	f000 fead 	bl	8018d68 <uxr_buffer_submessage_header>
 801800e:	4669      	mov	r1, sp
 8018010:	4620      	mov	r0, r4
 8018012:	f001 ff1f 	bl	8019e54 <uxr_serialize_CREATE_CLIENT_Payload>
 8018016:	b009      	add	sp, #36	; 0x24
 8018018:	bd30      	pop	{r4, r5, pc}
 801801a:	bf00      	nop
 801801c:	080234b4 	.word	0x080234b4

08018020 <uxr_buffer_delete_session>:
 8018020:	4a0c      	ldr	r2, [pc, #48]	; (8018054 <uxr_buffer_delete_session+0x34>)
 8018022:	2302      	movs	r3, #2
 8018024:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8018028:	b510      	push	{r4, lr}
 801802a:	460c      	mov	r4, r1
 801802c:	b082      	sub	sp, #8
 801802e:	8911      	ldrh	r1, [r2, #8]
 8018030:	2204      	movs	r2, #4
 8018032:	80c3      	strh	r3, [r0, #6]
 8018034:	2300      	movs	r3, #0
 8018036:	f8ad 1006 	strh.w	r1, [sp, #6]
 801803a:	4620      	mov	r0, r4
 801803c:	2103      	movs	r1, #3
 801803e:	f8ad c004 	strh.w	ip, [sp, #4]
 8018042:	f000 fe91 	bl	8018d68 <uxr_buffer_submessage_header>
 8018046:	a901      	add	r1, sp, #4
 8018048:	4620      	mov	r0, r4
 801804a:	f001 ffab 	bl	8019fa4 <uxr_serialize_DELETE_Payload>
 801804e:	b002      	add	sp, #8
 8018050:	bd10      	pop	{r4, pc}
 8018052:	bf00      	nop
 8018054:	080234b4 	.word	0x080234b4

08018058 <uxr_read_create_session_status>:
 8018058:	b510      	push	{r4, lr}
 801805a:	460b      	mov	r3, r1
 801805c:	b088      	sub	sp, #32
 801805e:	4604      	mov	r4, r0
 8018060:	a901      	add	r1, sp, #4
 8018062:	4618      	mov	r0, r3
 8018064:	f001 ffae 	bl	8019fc4 <uxr_deserialize_STATUS_AGENT_Payload>
 8018068:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801806c:	7163      	strb	r3, [r4, #5]
 801806e:	b008      	add	sp, #32
 8018070:	bd10      	pop	{r4, pc}
 8018072:	bf00      	nop

08018074 <uxr_read_delete_session_status>:
 8018074:	b510      	push	{r4, lr}
 8018076:	b084      	sub	sp, #16
 8018078:	4604      	mov	r4, r0
 801807a:	4608      	mov	r0, r1
 801807c:	a902      	add	r1, sp, #8
 801807e:	f001 ffd1 	bl	801a024 <uxr_deserialize_STATUS_Payload>
 8018082:	88e3      	ldrh	r3, [r4, #6]
 8018084:	2b02      	cmp	r3, #2
 8018086:	d001      	beq.n	801808c <uxr_read_delete_session_status+0x18>
 8018088:	b004      	add	sp, #16
 801808a:	bd10      	pop	{r4, pc}
 801808c:	f10d 000a 	add.w	r0, sp, #10
 8018090:	f7fe fec6 	bl	8016e20 <uxr_object_id_from_raw>
 8018094:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018098:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801809c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80180a0:	b29b      	uxth	r3, r3
 80180a2:	2b02      	cmp	r3, #2
 80180a4:	d1f0      	bne.n	8018088 <uxr_read_delete_session_status+0x14>
 80180a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80180aa:	7163      	strb	r3, [r4, #5]
 80180ac:	e7ec      	b.n	8018088 <uxr_read_delete_session_status+0x14>
 80180ae:	bf00      	nop

080180b0 <uxr_stamp_create_session_header>:
 80180b0:	b510      	push	{r4, lr}
 80180b2:	2208      	movs	r2, #8
 80180b4:	b08a      	sub	sp, #40	; 0x28
 80180b6:	4604      	mov	r4, r0
 80180b8:	eb0d 0002 	add.w	r0, sp, r2
 80180bc:	f7fa f8e8 	bl	8012290 <ucdr_init_buffer>
 80180c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180c4:	2300      	movs	r3, #0
 80180c6:	a802      	add	r0, sp, #8
 80180c8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80180cc:	9400      	str	r4, [sp, #0]
 80180ce:	461a      	mov	r2, r3
 80180d0:	f001 f846 	bl	8019160 <uxr_serialize_message_header>
 80180d4:	b00a      	add	sp, #40	; 0x28
 80180d6:	bd10      	pop	{r4, pc}

080180d8 <uxr_stamp_session_header>:
 80180d8:	b530      	push	{r4, r5, lr}
 80180da:	b08d      	sub	sp, #52	; 0x34
 80180dc:	4604      	mov	r4, r0
 80180de:	460d      	mov	r5, r1
 80180e0:	4619      	mov	r1, r3
 80180e2:	a804      	add	r0, sp, #16
 80180e4:	9203      	str	r2, [sp, #12]
 80180e6:	2208      	movs	r2, #8
 80180e8:	f7fa f8d2 	bl	8012290 <ucdr_init_buffer>
 80180ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180f0:	9b03      	ldr	r3, [sp, #12]
 80180f2:	462a      	mov	r2, r5
 80180f4:	a804      	add	r0, sp, #16
 80180f6:	9400      	str	r4, [sp, #0]
 80180f8:	f001 f832 	bl	8019160 <uxr_serialize_message_header>
 80180fc:	b00d      	add	sp, #52	; 0x34
 80180fe:	bd30      	pop	{r4, r5, pc}

08018100 <uxr_read_session_header>:
 8018100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018104:	4607      	mov	r7, r0
 8018106:	b084      	sub	sp, #16
 8018108:	4608      	mov	r0, r1
 801810a:	460c      	mov	r4, r1
 801810c:	4615      	mov	r5, r2
 801810e:	461e      	mov	r6, r3
 8018110:	f7fa f8f0 	bl	80122f4 <ucdr_buffer_remaining>
 8018114:	2808      	cmp	r0, #8
 8018116:	d803      	bhi.n	8018120 <uxr_read_session_header+0x20>
 8018118:	2000      	movs	r0, #0
 801811a:	b004      	add	sp, #16
 801811c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018120:	f10d 080c 	add.w	r8, sp, #12
 8018124:	4633      	mov	r3, r6
 8018126:	462a      	mov	r2, r5
 8018128:	4620      	mov	r0, r4
 801812a:	f10d 010b 	add.w	r1, sp, #11
 801812e:	f8cd 8000 	str.w	r8, [sp]
 8018132:	f001 f833 	bl	801919c <uxr_deserialize_message_header>
 8018136:	783a      	ldrb	r2, [r7, #0]
 8018138:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801813c:	4293      	cmp	r3, r2
 801813e:	d1eb      	bne.n	8018118 <uxr_read_session_header+0x18>
 8018140:	061b      	lsls	r3, r3, #24
 8018142:	d41b      	bmi.n	801817c <uxr_read_session_header+0x7c>
 8018144:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018148:	787b      	ldrb	r3, [r7, #1]
 801814a:	429a      	cmp	r2, r3
 801814c:	d003      	beq.n	8018156 <uxr_read_session_header+0x56>
 801814e:	2001      	movs	r0, #1
 8018150:	f080 0001 	eor.w	r0, r0, #1
 8018154:	e7e1      	b.n	801811a <uxr_read_session_header+0x1a>
 8018156:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801815a:	1cb8      	adds	r0, r7, #2
 801815c:	78bb      	ldrb	r3, [r7, #2]
 801815e:	429a      	cmp	r2, r3
 8018160:	d1f5      	bne.n	801814e <uxr_read_session_header+0x4e>
 8018162:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8018166:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801816a:	429a      	cmp	r2, r3
 801816c:	d1ef      	bne.n	801814e <uxr_read_session_header+0x4e>
 801816e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8018172:	7843      	ldrb	r3, [r0, #1]
 8018174:	429a      	cmp	r2, r3
 8018176:	d1ea      	bne.n	801814e <uxr_read_session_header+0x4e>
 8018178:	2000      	movs	r0, #0
 801817a:	e7e9      	b.n	8018150 <uxr_read_session_header+0x50>
 801817c:	2001      	movs	r0, #1
 801817e:	e7cc      	b.n	801811a <uxr_read_session_header+0x1a>

08018180 <uxr_session_header_offset>:
 8018180:	f990 3000 	ldrsb.w	r3, [r0]
 8018184:	2b00      	cmp	r3, #0
 8018186:	bfac      	ite	ge
 8018188:	2008      	movge	r0, #8
 801818a:	2004      	movlt	r0, #4
 801818c:	4770      	bx	lr
 801818e:	bf00      	nop

08018190 <uxr_init_base_object_request>:
 8018190:	b510      	push	{r4, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8018198:	9101      	str	r1, [sp, #4]
 801819a:	88c3      	ldrh	r3, [r0, #6]
 801819c:	f1a3 010a 	sub.w	r1, r3, #10
 80181a0:	b289      	uxth	r1, r1
 80181a2:	42a1      	cmp	r1, r4
 80181a4:	d80f      	bhi.n	80181c6 <uxr_init_base_object_request+0x36>
 80181a6:	3301      	adds	r3, #1
 80181a8:	b29c      	uxth	r4, r3
 80181aa:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80181ae:	b2db      	uxtb	r3, r3
 80181b0:	80c4      	strh	r4, [r0, #6]
 80181b2:	1c91      	adds	r1, r2, #2
 80181b4:	9801      	ldr	r0, [sp, #4]
 80181b6:	f882 c000 	strb.w	ip, [r2]
 80181ba:	7053      	strb	r3, [r2, #1]
 80181bc:	f7fe fe44 	bl	8016e48 <uxr_object_id_to_raw>
 80181c0:	4620      	mov	r0, r4
 80181c2:	b002      	add	sp, #8
 80181c4:	bd10      	pop	{r4, pc}
 80181c6:	230a      	movs	r3, #10
 80181c8:	f04f 0c00 	mov.w	ip, #0
 80181cc:	461c      	mov	r4, r3
 80181ce:	e7ef      	b.n	80181b0 <uxr_init_base_object_request+0x20>

080181d0 <uxr_parse_base_object_request>:
 80181d0:	b570      	push	{r4, r5, r6, lr}
 80181d2:	4604      	mov	r4, r0
 80181d4:	3002      	adds	r0, #2
 80181d6:	460d      	mov	r5, r1
 80181d8:	4616      	mov	r6, r2
 80181da:	f7fe fe21 	bl	8016e20 <uxr_object_id_from_raw>
 80181de:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80181e2:	8028      	strh	r0, [r5, #0]
 80181e4:	806b      	strh	r3, [r5, #2]
 80181e6:	7822      	ldrb	r2, [r4, #0]
 80181e8:	7863      	ldrb	r3, [r4, #1]
 80181ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80181ee:	8033      	strh	r3, [r6, #0]
 80181f0:	bd70      	pop	{r4, r5, r6, pc}
 80181f2:	bf00      	nop

080181f4 <uxr_init_framing_io>:
 80181f4:	2300      	movs	r3, #0
 80181f6:	7041      	strb	r1, [r0, #1]
 80181f8:	7003      	strb	r3, [r0, #0]
 80181fa:	8583      	strh	r3, [r0, #44]	; 0x2c
 80181fc:	4770      	bx	lr
 80181fe:	bf00      	nop

08018200 <uxr_write_framed_msg>:
 8018200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018204:	4617      	mov	r7, r2
 8018206:	7842      	ldrb	r2, [r0, #1]
 8018208:	460e      	mov	r6, r1
 801820a:	b083      	sub	sp, #12
 801820c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8018210:	469b      	mov	fp, r3
 8018212:	237e      	movs	r3, #126	; 0x7e
 8018214:	4604      	mov	r4, r0
 8018216:	2901      	cmp	r1, #1
 8018218:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801821c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018220:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8018224:	f240 8115 	bls.w	8018452 <uxr_write_framed_msg+0x252>
 8018228:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801822c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8018230:	2202      	movs	r2, #2
 8018232:	2901      	cmp	r1, #1
 8018234:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018238:	d952      	bls.n	80182e0 <uxr_write_framed_msg+0xe0>
 801823a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801823c:	2103      	movs	r1, #3
 801823e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8018242:	b2dd      	uxtb	r5, r3
 8018244:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018248:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801824c:	2a01      	cmp	r2, #1
 801824e:	d95c      	bls.n	801830a <uxr_write_framed_msg+0x10a>
 8018250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018252:	1862      	adds	r2, r4, r1
 8018254:	3101      	adds	r1, #1
 8018256:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801825a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801825e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018262:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018266:	2a01      	cmp	r2, #1
 8018268:	d961      	bls.n	801832e <uxr_write_framed_msg+0x12e>
 801826a:	1c4a      	adds	r2, r1, #1
 801826c:	4421      	add	r1, r4
 801826e:	b2d2      	uxtb	r2, r2
 8018270:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8018274:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018278:	2b00      	cmp	r3, #0
 801827a:	d06a      	beq.n	8018352 <uxr_write_framed_msg+0x152>
 801827c:	f04f 0800 	mov.w	r8, #0
 8018280:	46c1      	mov	r9, r8
 8018282:	e016      	b.n	80182b2 <uxr_write_framed_msg+0xb2>
 8018284:	2a29      	cmp	r2, #41	; 0x29
 8018286:	d868      	bhi.n	801835a <uxr_write_framed_msg+0x15a>
 8018288:	18a0      	adds	r0, r4, r2
 801828a:	3201      	adds	r2, #1
 801828c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018290:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018294:	ea88 0101 	eor.w	r1, r8, r1
 8018298:	4b7d      	ldr	r3, [pc, #500]	; (8018490 <uxr_write_framed_msg+0x290>)
 801829a:	f109 0901 	add.w	r9, r9, #1
 801829e:	b2c9      	uxtb	r1, r1
 80182a0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80182a4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80182a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182aa:	454b      	cmp	r3, r9
 80182ac:	d969      	bls.n	8018382 <uxr_write_framed_msg+0x182>
 80182ae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80182b2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80182b6:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80182ba:	2801      	cmp	r0, #1
 80182bc:	d8e2      	bhi.n	8018284 <uxr_write_framed_msg+0x84>
 80182be:	1c50      	adds	r0, r2, #1
 80182c0:	b2c0      	uxtb	r0, r0
 80182c2:	2829      	cmp	r0, #41	; 0x29
 80182c4:	d849      	bhi.n	801835a <uxr_write_framed_msg+0x15a>
 80182c6:	18a0      	adds	r0, r4, r2
 80182c8:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80182cc:	3202      	adds	r2, #2
 80182ce:	f081 0520 	eor.w	r5, r1, #32
 80182d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80182d6:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80182da:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80182de:	e7d9      	b.n	8018294 <uxr_write_framed_msg+0x94>
 80182e0:	2104      	movs	r1, #4
 80182e2:	f04f 0c03 	mov.w	ip, #3
 80182e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182e8:	4422      	add	r2, r4
 80182ea:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80182ee:	44a4      	add	ip, r4
 80182f0:	b2dd      	uxtb	r5, r3
 80182f2:	f080 0020 	eor.w	r0, r0, #32
 80182f6:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 80182fa:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80182fe:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8018302:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018306:	2a01      	cmp	r2, #1
 8018308:	d8a2      	bhi.n	8018250 <uxr_write_framed_msg+0x50>
 801830a:	1862      	adds	r2, r4, r1
 801830c:	207d      	movs	r0, #125	; 0x7d
 801830e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018310:	f085 0520 	eor.w	r5, r5, #32
 8018314:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8018318:	3102      	adds	r1, #2
 801831a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801831e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8018322:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018326:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801832a:	2a01      	cmp	r2, #1
 801832c:	d89d      	bhi.n	801826a <uxr_write_framed_msg+0x6a>
 801832e:	1c4d      	adds	r5, r1, #1
 8018330:	1c8a      	adds	r2, r1, #2
 8018332:	f080 0020 	eor.w	r0, r0, #32
 8018336:	4421      	add	r1, r4
 8018338:	fa54 f585 	uxtab	r5, r4, r5
 801833c:	b2d2      	uxtb	r2, r2
 801833e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018342:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8018346:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801834a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801834e:	2b00      	cmp	r3, #0
 8018350:	d194      	bne.n	801827c <uxr_write_framed_msg+0x7c>
 8018352:	4619      	mov	r1, r3
 8018354:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018358:	e019      	b.n	801838e <uxr_write_framed_msg+0x18e>
 801835a:	2500      	movs	r5, #0
 801835c:	e000      	b.n	8018360 <uxr_write_framed_msg+0x160>
 801835e:	b160      	cbz	r0, 801837a <uxr_write_framed_msg+0x17a>
 8018360:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018364:	1b52      	subs	r2, r2, r5
 8018366:	4653      	mov	r3, sl
 8018368:	4638      	mov	r0, r7
 801836a:	4421      	add	r1, r4
 801836c:	47b0      	blx	r6
 801836e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018372:	4405      	add	r5, r0
 8018374:	4295      	cmp	r5, r2
 8018376:	d3f2      	bcc.n	801835e <uxr_write_framed_msg+0x15e>
 8018378:	d066      	beq.n	8018448 <uxr_write_framed_msg+0x248>
 801837a:	2000      	movs	r0, #0
 801837c:	b003      	add	sp, #12
 801837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018382:	fa5f f188 	uxtb.w	r1, r8
 8018386:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801838a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801838e:	f04f 0900 	mov.w	r9, #0
 8018392:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8018396:	46c8      	mov	r8, r9
 8018398:	e013      	b.n	80183c2 <uxr_write_framed_msg+0x1c2>
 801839a:	2a29      	cmp	r2, #41	; 0x29
 801839c:	d824      	bhi.n	80183e8 <uxr_write_framed_msg+0x1e8>
 801839e:	18a3      	adds	r3, r4, r2
 80183a0:	3201      	adds	r2, #1
 80183a2:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80183a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80183aa:	f109 0901 	add.w	r9, r9, #1
 80183ae:	f1b9 0f02 	cmp.w	r9, #2
 80183b2:	d02d      	beq.n	8018410 <uxr_write_framed_msg+0x210>
 80183b4:	f109 0308 	add.w	r3, r9, #8
 80183b8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80183bc:	446b      	add	r3, sp
 80183be:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80183c2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80183c6:	2b01      	cmp	r3, #1
 80183c8:	d8e7      	bhi.n	801839a <uxr_write_framed_msg+0x19a>
 80183ca:	1c53      	adds	r3, r2, #1
 80183cc:	b2db      	uxtb	r3, r3
 80183ce:	2b29      	cmp	r3, #41	; 0x29
 80183d0:	d80a      	bhi.n	80183e8 <uxr_write_framed_msg+0x1e8>
 80183d2:	18a3      	adds	r3, r4, r2
 80183d4:	f081 0120 	eor.w	r1, r1, #32
 80183d8:	3202      	adds	r2, #2
 80183da:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80183de:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 80183e2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80183e6:	e7e0      	b.n	80183aa <uxr_write_framed_msg+0x1aa>
 80183e8:	2500      	movs	r5, #0
 80183ea:	e001      	b.n	80183f0 <uxr_write_framed_msg+0x1f0>
 80183ec:	2800      	cmp	r0, #0
 80183ee:	d0c4      	beq.n	801837a <uxr_write_framed_msg+0x17a>
 80183f0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80183f4:	1b52      	subs	r2, r2, r5
 80183f6:	4653      	mov	r3, sl
 80183f8:	4638      	mov	r0, r7
 80183fa:	4421      	add	r1, r4
 80183fc:	47b0      	blx	r6
 80183fe:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018402:	4405      	add	r5, r0
 8018404:	4295      	cmp	r5, r2
 8018406:	d3f1      	bcc.n	80183ec <uxr_write_framed_msg+0x1ec>
 8018408:	d1b7      	bne.n	801837a <uxr_write_framed_msg+0x17a>
 801840a:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801840e:	e7d1      	b.n	80183b4 <uxr_write_framed_msg+0x1b4>
 8018410:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018414:	b19a      	cbz	r2, 801843e <uxr_write_framed_msg+0x23e>
 8018416:	2500      	movs	r5, #0
 8018418:	e001      	b.n	801841e <uxr_write_framed_msg+0x21e>
 801841a:	2800      	cmp	r0, #0
 801841c:	d0ad      	beq.n	801837a <uxr_write_framed_msg+0x17a>
 801841e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018422:	1b52      	subs	r2, r2, r5
 8018424:	4653      	mov	r3, sl
 8018426:	4638      	mov	r0, r7
 8018428:	4421      	add	r1, r4
 801842a:	47b0      	blx	r6
 801842c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018430:	4405      	add	r5, r0
 8018432:	4295      	cmp	r5, r2
 8018434:	d3f1      	bcc.n	801841a <uxr_write_framed_msg+0x21a>
 8018436:	d1a0      	bne.n	801837a <uxr_write_framed_msg+0x17a>
 8018438:	2300      	movs	r3, #0
 801843a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801843e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018440:	b298      	uxth	r0, r3
 8018442:	b003      	add	sp, #12
 8018444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018448:	f04f 0300 	mov.w	r3, #0
 801844c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018450:	e72a      	b.n	80182a8 <uxr_write_framed_msg+0xa8>
 8018452:	217d      	movs	r1, #125	; 0x7d
 8018454:	f082 0220 	eor.w	r2, r2, #32
 8018458:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801845c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8018460:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8018464:	2203      	movs	r2, #3
 8018466:	2901      	cmp	r1, #1
 8018468:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801846c:	d803      	bhi.n	8018476 <uxr_write_framed_msg+0x276>
 801846e:	2105      	movs	r1, #5
 8018470:	f04f 0c04 	mov.w	ip, #4
 8018474:	e737      	b.n	80182e6 <uxr_write_framed_msg+0xe6>
 8018476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018478:	2104      	movs	r1, #4
 801847a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801847e:	b2dd      	uxtb	r5, r3
 8018480:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8018484:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8018488:	2a01      	cmp	r2, #1
 801848a:	f63f aee1 	bhi.w	8018250 <uxr_write_framed_msg+0x50>
 801848e:	e73c      	b.n	801830a <uxr_write_framed_msg+0x10a>
 8018490:	08024634 	.word	0x08024634

08018494 <uxr_framing_read_transport>:
 8018494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018498:	4604      	mov	r4, r0
 801849a:	b085      	sub	sp, #20
 801849c:	4692      	mov	sl, r2
 801849e:	4689      	mov	r9, r1
 80184a0:	461d      	mov	r5, r3
 80184a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80184a4:	f000 fca6 	bl	8018df4 <uxr_millis>
 80184a8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80184ac:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 80184b0:	4680      	mov	r8, r0
 80184b2:	42ba      	cmp	r2, r7
 80184b4:	d05f      	beq.n	8018576 <uxr_framing_read_transport+0xe2>
 80184b6:	d817      	bhi.n	80184e8 <uxr_framing_read_transport+0x54>
 80184b8:	3f01      	subs	r7, #1
 80184ba:	1aba      	subs	r2, r7, r2
 80184bc:	2700      	movs	r7, #0
 80184be:	b2d2      	uxtb	r2, r2
 80184c0:	42b2      	cmp	r2, r6
 80184c2:	d81a      	bhi.n	80184fa <uxr_framing_read_transport+0x66>
 80184c4:	19d3      	adds	r3, r2, r7
 80184c6:	42b3      	cmp	r3, r6
 80184c8:	d852      	bhi.n	8018570 <uxr_framing_read_transport+0xdc>
 80184ca:	b9d2      	cbnz	r2, 8018502 <uxr_framing_read_transport+0x6e>
 80184cc:	2600      	movs	r6, #0
 80184ce:	f000 fc91 	bl	8018df4 <uxr_millis>
 80184d2:	682b      	ldr	r3, [r5, #0]
 80184d4:	eba0 0008 	sub.w	r0, r0, r8
 80184d8:	1a1b      	subs	r3, r3, r0
 80184da:	4630      	mov	r0, r6
 80184dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80184e0:	602b      	str	r3, [r5, #0]
 80184e2:	b005      	add	sp, #20
 80184e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184e8:	2f00      	cmp	r7, #0
 80184ea:	d060      	beq.n	80185ae <uxr_framing_read_transport+0x11a>
 80184ec:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 80184f0:	3f01      	subs	r7, #1
 80184f2:	b2d2      	uxtb	r2, r2
 80184f4:	b2ff      	uxtb	r7, r7
 80184f6:	42b2      	cmp	r2, r6
 80184f8:	d9e4      	bls.n	80184c4 <uxr_framing_read_transport+0x30>
 80184fa:	b2f2      	uxtb	r2, r6
 80184fc:	2700      	movs	r7, #0
 80184fe:	2a00      	cmp	r2, #0
 8018500:	d0e4      	beq.n	80184cc <uxr_framing_read_transport+0x38>
 8018502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018504:	4650      	mov	r0, sl
 8018506:	9203      	str	r2, [sp, #12]
 8018508:	9300      	str	r3, [sp, #0]
 801850a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801850e:	682b      	ldr	r3, [r5, #0]
 8018510:	3102      	adds	r1, #2
 8018512:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80185b8 <uxr_framing_read_transport+0x124>
 8018516:	4421      	add	r1, r4
 8018518:	47c8      	blx	r9
 801851a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801851e:	4606      	mov	r6, r0
 8018520:	4403      	add	r3, r0
 8018522:	0859      	lsrs	r1, r3, #1
 8018524:	fbab 2101 	umull	r2, r1, fp, r1
 8018528:	222a      	movs	r2, #42	; 0x2a
 801852a:	0889      	lsrs	r1, r1, #2
 801852c:	fb02 3111 	mls	r1, r2, r1, r3
 8018530:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8018534:	2800      	cmp	r0, #0
 8018536:	d0c9      	beq.n	80184cc <uxr_framing_read_transport+0x38>
 8018538:	9a03      	ldr	r2, [sp, #12]
 801853a:	4290      	cmp	r0, r2
 801853c:	d1c7      	bne.n	80184ce <uxr_framing_read_transport+0x3a>
 801853e:	2f00      	cmp	r7, #0
 8018540:	d0c5      	beq.n	80184ce <uxr_framing_read_transport+0x3a>
 8018542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018544:	3102      	adds	r1, #2
 8018546:	463a      	mov	r2, r7
 8018548:	4650      	mov	r0, sl
 801854a:	4421      	add	r1, r4
 801854c:	9300      	str	r3, [sp, #0]
 801854e:	2300      	movs	r3, #0
 8018550:	47c8      	blx	r9
 8018552:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8018556:	4406      	add	r6, r0
 8018558:	1813      	adds	r3, r2, r0
 801855a:	085a      	lsrs	r2, r3, #1
 801855c:	fbab 1b02 	umull	r1, fp, fp, r2
 8018560:	222a      	movs	r2, #42	; 0x2a
 8018562:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8018566:	fb02 331b 	mls	r3, r2, fp, r3
 801856a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801856e:	e7ae      	b.n	80184ce <uxr_framing_read_transport+0x3a>
 8018570:	1ab6      	subs	r6, r6, r2
 8018572:	b2f7      	uxtb	r7, r6
 8018574:	e7a9      	b.n	80184ca <uxr_framing_read_transport+0x36>
 8018576:	2300      	movs	r3, #0
 8018578:	2e28      	cmp	r6, #40	; 0x28
 801857a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801857c:	d9bd      	bls.n	80184fa <uxr_framing_read_transport+0x66>
 801857e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018580:	2229      	movs	r2, #41	; 0x29
 8018582:	1ca1      	adds	r1, r4, #2
 8018584:	4650      	mov	r0, sl
 8018586:	9300      	str	r3, [sp, #0]
 8018588:	682b      	ldr	r3, [r5, #0]
 801858a:	47c8      	blx	r9
 801858c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018590:	4606      	mov	r6, r0
 8018592:	212a      	movs	r1, #42	; 0x2a
 8018594:	4403      	add	r3, r0
 8018596:	4808      	ldr	r0, [pc, #32]	; (80185b8 <uxr_framing_read_transport+0x124>)
 8018598:	085a      	lsrs	r2, r3, #1
 801859a:	fba0 0202 	umull	r0, r2, r0, r2
 801859e:	0892      	lsrs	r2, r2, #2
 80185a0:	fb01 3312 	mls	r3, r1, r2, r3
 80185a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80185a8:	2e00      	cmp	r6, #0
 80185aa:	d08f      	beq.n	80184cc <uxr_framing_read_transport+0x38>
 80185ac:	e78f      	b.n	80184ce <uxr_framing_read_transport+0x3a>
 80185ae:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 80185b2:	b2d2      	uxtb	r2, r2
 80185b4:	e784      	b.n	80184c0 <uxr_framing_read_transport+0x2c>
 80185b6:	bf00      	nop
 80185b8:	30c30c31 	.word	0x30c30c31

080185bc <uxr_read_framed_msg>:
 80185bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185c0:	461e      	mov	r6, r3
 80185c2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80185c6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80185ca:	b083      	sub	sp, #12
 80185cc:	4604      	mov	r4, r0
 80185ce:	4688      	mov	r8, r1
 80185d0:	429d      	cmp	r5, r3
 80185d2:	4691      	mov	r9, r2
 80185d4:	f000 818c 	beq.w	80188f0 <uxr_read_framed_msg+0x334>
 80185d8:	7823      	ldrb	r3, [r4, #0]
 80185da:	4dc3      	ldr	r5, [pc, #780]	; (80188e8 <uxr_read_framed_msg+0x32c>)
 80185dc:	4fc3      	ldr	r7, [pc, #780]	; (80188ec <uxr_read_framed_msg+0x330>)
 80185de:	2b07      	cmp	r3, #7
 80185e0:	d8fd      	bhi.n	80185de <uxr_read_framed_msg+0x22>
 80185e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80185e6:	011c      	.short	0x011c
 80185e8:	00d900fb 	.word	0x00d900fb
 80185ec:	008f00ba 	.word	0x008f00ba
 80185f0:	00320051 	.word	0x00320051
 80185f4:	0008      	.short	0x0008
 80185f6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80185fa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80185fe:	4299      	cmp	r1, r3
 8018600:	f000 814d 	beq.w	801889e <uxr_read_framed_msg+0x2e2>
 8018604:	18e2      	adds	r2, r4, r3
 8018606:	7892      	ldrb	r2, [r2, #2]
 8018608:	2a7d      	cmp	r2, #125	; 0x7d
 801860a:	f000 81b8 	beq.w	801897e <uxr_read_framed_msg+0x3c2>
 801860e:	3301      	adds	r3, #1
 8018610:	212a      	movs	r1, #42	; 0x2a
 8018612:	2a7e      	cmp	r2, #126	; 0x7e
 8018614:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018618:	fba5 c000 	umull	ip, r0, r5, r0
 801861c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018620:	fb01 3310 	mls	r3, r1, r0, r3
 8018624:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018628:	f000 8257 	beq.w	8018ada <uxr_read_framed_msg+0x51e>
 801862c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801862e:	2000      	movs	r0, #0
 8018630:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8018632:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018636:	7020      	strb	r0, [r4, #0]
 8018638:	b29b      	uxth	r3, r3
 801863a:	4299      	cmp	r1, r3
 801863c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801863e:	f000 8178 	beq.w	8018932 <uxr_read_framed_msg+0x376>
 8018642:	2000      	movs	r0, #0
 8018644:	b003      	add	sp, #12
 8018646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801864a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801864e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018652:	4298      	cmp	r0, r3
 8018654:	f000 8132 	beq.w	80188bc <uxr_read_framed_msg+0x300>
 8018658:	18e2      	adds	r2, r4, r3
 801865a:	7891      	ldrb	r1, [r2, #2]
 801865c:	297d      	cmp	r1, #125	; 0x7d
 801865e:	f000 8170 	beq.w	8018942 <uxr_read_framed_msg+0x386>
 8018662:	3301      	adds	r3, #1
 8018664:	202a      	movs	r0, #42	; 0x2a
 8018666:	297e      	cmp	r1, #126	; 0x7e
 8018668:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801866c:	fba5 c202 	umull	ip, r2, r5, r2
 8018670:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018674:	fb00 3312 	mls	r3, r0, r2, r3
 8018678:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801867c:	f000 821d 	beq.w	8018aba <uxr_read_framed_msg+0x4fe>
 8018680:	2307      	movs	r3, #7
 8018682:	86a1      	strh	r1, [r4, #52]	; 0x34
 8018684:	7023      	strb	r3, [r4, #0]
 8018686:	e7aa      	b.n	80185de <uxr_read_framed_msg+0x22>
 8018688:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801868a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801868e:	459e      	cmp	lr, r3
 8018690:	d827      	bhi.n	80186e2 <uxr_read_framed_msg+0x126>
 8018692:	e032      	b.n	80186fa <uxr_read_framed_msg+0x13e>
 8018694:	fba5 b101 	umull	fp, r1, r5, r1
 8018698:	f89c c002 	ldrb.w	ip, [ip, #2]
 801869c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80186a0:	0889      	lsrs	r1, r1, #2
 80186a2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80186a6:	fb0b 0111 	mls	r1, fp, r1, r0
 80186aa:	f000 80d4 	beq.w	8018856 <uxr_read_framed_msg+0x29a>
 80186ae:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80186b2:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80186b6:	f000 80cb 	beq.w	8018850 <uxr_read_framed_msg+0x294>
 80186ba:	f806 c003 	strb.w	ip, [r6, r3]
 80186be:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80186c0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80186c2:	ea80 010c 	eor.w	r1, r0, ip
 80186c6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80186ca:	3301      	adds	r3, #1
 80186cc:	b2c9      	uxtb	r1, r1
 80186ce:	b29b      	uxth	r3, r3
 80186d0:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 80186d4:	4573      	cmp	r3, lr
 80186d6:	8663      	strh	r3, [r4, #50]	; 0x32
 80186d8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80186dc:	86e2      	strh	r2, [r4, #54]	; 0x36
 80186de:	f080 811d 	bcs.w	801891c <uxr_read_framed_msg+0x360>
 80186e2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80186e6:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80186ea:	1c50      	adds	r0, r2, #1
 80186ec:	eb04 0c02 	add.w	ip, r4, r2
 80186f0:	4592      	cmp	sl, r2
 80186f2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 80186f6:	d1cd      	bne.n	8018694 <uxr_read_framed_msg+0xd8>
 80186f8:	459e      	cmp	lr, r3
 80186fa:	f040 8114 	bne.w	8018926 <uxr_read_framed_msg+0x36a>
 80186fe:	2306      	movs	r3, #6
 8018700:	7023      	strb	r3, [r4, #0]
 8018702:	e76c      	b.n	80185de <uxr_read_framed_msg+0x22>
 8018704:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8018708:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801870c:	4298      	cmp	r0, r3
 801870e:	f000 80c6 	beq.w	801889e <uxr_read_framed_msg+0x2e2>
 8018712:	18e2      	adds	r2, r4, r3
 8018714:	7891      	ldrb	r1, [r2, #2]
 8018716:	297d      	cmp	r1, #125	; 0x7d
 8018718:	f000 8193 	beq.w	8018a42 <uxr_read_framed_msg+0x486>
 801871c:	3301      	adds	r3, #1
 801871e:	202a      	movs	r0, #42	; 0x2a
 8018720:	297e      	cmp	r1, #126	; 0x7e
 8018722:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018726:	fba5 c202 	umull	ip, r2, r5, r2
 801872a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801872e:	fb00 3312 	mls	r3, r0, r2, r3
 8018732:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018736:	f000 81d0 	beq.w	8018ada <uxr_read_framed_msg+0x51e>
 801873a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801873c:	2000      	movs	r0, #0
 801873e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018742:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018744:	8660      	strh	r0, [r4, #50]	; 0x32
 8018746:	b29b      	uxth	r3, r3
 8018748:	86e0      	strh	r0, [r4, #54]	; 0x36
 801874a:	428b      	cmp	r3, r1
 801874c:	8623      	strh	r3, [r4, #48]	; 0x30
 801874e:	f240 80e2 	bls.w	8018916 <uxr_read_framed_msg+0x35a>
 8018752:	7020      	strb	r0, [r4, #0]
 8018754:	b003      	add	sp, #12
 8018756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801875a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801875e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018762:	4298      	cmp	r0, r3
 8018764:	f000 80aa 	beq.w	80188bc <uxr_read_framed_msg+0x300>
 8018768:	18e2      	adds	r2, r4, r3
 801876a:	7891      	ldrb	r1, [r2, #2]
 801876c:	297d      	cmp	r1, #125	; 0x7d
 801876e:	f000 8186 	beq.w	8018a7e <uxr_read_framed_msg+0x4c2>
 8018772:	3301      	adds	r3, #1
 8018774:	202a      	movs	r0, #42	; 0x2a
 8018776:	297e      	cmp	r1, #126	; 0x7e
 8018778:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801877c:	fba5 c202 	umull	ip, r2, r5, r2
 8018780:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018784:	fb00 3312 	mls	r3, r0, r2, r3
 8018788:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801878c:	f000 8195 	beq.w	8018aba <uxr_read_framed_msg+0x4fe>
 8018790:	2304      	movs	r3, #4
 8018792:	8621      	strh	r1, [r4, #48]	; 0x30
 8018794:	7023      	strb	r3, [r4, #0]
 8018796:	e722      	b.n	80185de <uxr_read_framed_msg+0x22>
 8018798:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801879c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80187a0:	4290      	cmp	r0, r2
 80187a2:	f000 80b4 	beq.w	801890e <uxr_read_framed_msg+0x352>
 80187a6:	18a3      	adds	r3, r4, r2
 80187a8:	7899      	ldrb	r1, [r3, #2]
 80187aa:	297d      	cmp	r1, #125	; 0x7d
 80187ac:	f000 8107 	beq.w	80189be <uxr_read_framed_msg+0x402>
 80187b0:	3201      	adds	r2, #1
 80187b2:	232a      	movs	r3, #42	; 0x2a
 80187b4:	297e      	cmp	r1, #126	; 0x7e
 80187b6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80187ba:	fba5 c000 	umull	ip, r0, r5, r0
 80187be:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80187c2:	fb03 2210 	mls	r2, r3, r0, r2
 80187c6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80187ca:	f000 818a 	beq.w	8018ae2 <uxr_read_framed_msg+0x526>
 80187ce:	7863      	ldrb	r3, [r4, #1]
 80187d0:	428b      	cmp	r3, r1
 80187d2:	bf0c      	ite	eq
 80187d4:	2303      	moveq	r3, #3
 80187d6:	2300      	movne	r3, #0
 80187d8:	7023      	strb	r3, [r4, #0]
 80187da:	e700      	b.n	80185de <uxr_read_framed_msg+0x22>
 80187dc:	2300      	movs	r3, #0
 80187de:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80187e2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80187e6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80187ea:	4299      	cmp	r1, r3
 80187ec:	d06a      	beq.n	80188c4 <uxr_read_framed_msg+0x308>
 80187ee:	18e2      	adds	r2, r4, r3
 80187f0:	7890      	ldrb	r0, [r2, #2]
 80187f2:	287d      	cmp	r0, #125	; 0x7d
 80187f4:	f000 8100 	beq.w	80189f8 <uxr_read_framed_msg+0x43c>
 80187f8:	3301      	adds	r3, #1
 80187fa:	212a      	movs	r1, #42	; 0x2a
 80187fc:	287e      	cmp	r0, #126	; 0x7e
 80187fe:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8018802:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018806:	fba5 c202 	umull	ip, r2, r5, r2
 801880a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801880e:	fb01 3312 	mls	r3, r1, r2, r3
 8018812:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018816:	d055      	beq.n	80188c4 <uxr_read_framed_msg+0x308>
 8018818:	2302      	movs	r3, #2
 801881a:	7023      	strb	r3, [r4, #0]
 801881c:	e6df      	b.n	80185de <uxr_read_framed_msg+0x22>
 801881e:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8018822:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8018826:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801882a:	1c5a      	adds	r2, r3, #1
 801882c:	459c      	cmp	ip, r3
 801882e:	eb04 0103 	add.w	r1, r4, r3
 8018832:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8018836:	f43f af04 	beq.w	8018642 <uxr_read_framed_msg+0x86>
 801883a:	fba5 0303 	umull	r0, r3, r5, r3
 801883e:	7889      	ldrb	r1, [r1, #2]
 8018840:	089b      	lsrs	r3, r3, #2
 8018842:	297e      	cmp	r1, #126	; 0x7e
 8018844:	fb0e 2313 	mls	r3, lr, r3, r2
 8018848:	b2db      	uxtb	r3, r3
 801884a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801884e:	d1ec      	bne.n	801882a <uxr_read_framed_msg+0x26e>
 8018850:	2301      	movs	r3, #1
 8018852:	7023      	strb	r3, [r4, #0]
 8018854:	e6c3      	b.n	80185de <uxr_read_framed_msg+0x22>
 8018856:	1c50      	adds	r0, r2, #1
 8018858:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801885c:	3202      	adds	r2, #2
 801885e:	0841      	lsrs	r1, r0, #1
 8018860:	fba5 c101 	umull	ip, r1, r5, r1
 8018864:	0889      	lsrs	r1, r1, #2
 8018866:	fb0b 0111 	mls	r1, fp, r1, r0
 801886a:	1860      	adds	r0, r4, r1
 801886c:	b2c9      	uxtb	r1, r1
 801886e:	458a      	cmp	sl, r1
 8018870:	f43f af42 	beq.w	80186f8 <uxr_read_framed_msg+0x13c>
 8018874:	0851      	lsrs	r1, r2, #1
 8018876:	7880      	ldrb	r0, [r0, #2]
 8018878:	fba5 a101 	umull	sl, r1, r5, r1
 801887c:	287e      	cmp	r0, #126	; 0x7e
 801887e:	f080 0c20 	eor.w	ip, r0, #32
 8018882:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8018886:	fb0b 2211 	mls	r2, fp, r1, r2
 801888a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801888e:	f47f af14 	bne.w	80186ba <uxr_read_framed_msg+0xfe>
 8018892:	459e      	cmp	lr, r3
 8018894:	f43f af33 	beq.w	80186fe <uxr_read_framed_msg+0x142>
 8018898:	2301      	movs	r3, #1
 801889a:	7023      	strb	r3, [r4, #0]
 801889c:	e69f      	b.n	80185de <uxr_read_framed_msg+0x22>
 801889e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188a0:	9300      	str	r3, [sp, #0]
 80188a2:	2301      	movs	r3, #1
 80188a4:	9301      	str	r3, [sp, #4]
 80188a6:	464a      	mov	r2, r9
 80188a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188aa:	4641      	mov	r1, r8
 80188ac:	4620      	mov	r0, r4
 80188ae:	f7ff fdf1 	bl	8018494 <uxr_framing_read_transport>
 80188b2:	2800      	cmp	r0, #0
 80188b4:	f43f aec5 	beq.w	8018642 <uxr_read_framed_msg+0x86>
 80188b8:	7823      	ldrb	r3, [r4, #0]
 80188ba:	e690      	b.n	80185de <uxr_read_framed_msg+0x22>
 80188bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188be:	9300      	str	r3, [sp, #0]
 80188c0:	2302      	movs	r3, #2
 80188c2:	e7ef      	b.n	80188a4 <uxr_read_framed_msg+0x2e8>
 80188c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188c6:	464a      	mov	r2, r9
 80188c8:	4641      	mov	r1, r8
 80188ca:	4620      	mov	r0, r4
 80188cc:	9300      	str	r3, [sp, #0]
 80188ce:	2304      	movs	r3, #4
 80188d0:	9301      	str	r3, [sp, #4]
 80188d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188d4:	f7ff fdde 	bl	8018494 <uxr_framing_read_transport>
 80188d8:	2800      	cmp	r0, #0
 80188da:	d1ed      	bne.n	80188b8 <uxr_read_framed_msg+0x2fc>
 80188dc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80188e0:	2b7e      	cmp	r3, #126	; 0x7e
 80188e2:	d0e9      	beq.n	80188b8 <uxr_read_framed_msg+0x2fc>
 80188e4:	e6ad      	b.n	8018642 <uxr_read_framed_msg+0x86>
 80188e6:	bf00      	nop
 80188e8:	30c30c31 	.word	0x30c30c31
 80188ec:	08024634 	.word	0x08024634
 80188f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188f2:	9300      	str	r3, [sp, #0]
 80188f4:	2305      	movs	r3, #5
 80188f6:	9301      	str	r3, [sp, #4]
 80188f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188fa:	f7ff fdcb 	bl	8018494 <uxr_framing_read_transport>
 80188fe:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8018902:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018906:	429a      	cmp	r2, r3
 8018908:	f43f ae9b 	beq.w	8018642 <uxr_read_framed_msg+0x86>
 801890c:	e664      	b.n	80185d8 <uxr_read_framed_msg+0x1c>
 801890e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018910:	9300      	str	r3, [sp, #0]
 8018912:	2303      	movs	r3, #3
 8018914:	e7c6      	b.n	80188a4 <uxr_read_framed_msg+0x2e8>
 8018916:	2305      	movs	r3, #5
 8018918:	7023      	strb	r3, [r4, #0]
 801891a:	e660      	b.n	80185de <uxr_read_framed_msg+0x22>
 801891c:	f43f aeef 	beq.w	80186fe <uxr_read_framed_msg+0x142>
 8018920:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8018924:	d094      	beq.n	8018850 <uxr_read_framed_msg+0x294>
 8018926:	ebae 0303 	sub.w	r3, lr, r3
 801892a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801892c:	3302      	adds	r3, #2
 801892e:	9200      	str	r2, [sp, #0]
 8018930:	e7b8      	b.n	80188a4 <uxr_read_framed_msg+0x2e8>
 8018932:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018938:	7013      	strb	r3, [r2, #0]
 801893a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801893c:	b003      	add	sp, #12
 801893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018942:	1c59      	adds	r1, r3, #1
 8018944:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018948:	084a      	lsrs	r2, r1, #1
 801894a:	fba5 e202 	umull	lr, r2, r5, r2
 801894e:	0892      	lsrs	r2, r2, #2
 8018950:	fb0c 1212 	mls	r2, ip, r2, r1
 8018954:	b2d1      	uxtb	r1, r2
 8018956:	4288      	cmp	r0, r1
 8018958:	d0b0      	beq.n	80188bc <uxr_read_framed_msg+0x300>
 801895a:	3302      	adds	r3, #2
 801895c:	4422      	add	r2, r4
 801895e:	7891      	ldrb	r1, [r2, #2]
 8018960:	085a      	lsrs	r2, r3, #1
 8018962:	fba5 0202 	umull	r0, r2, r5, r2
 8018966:	297e      	cmp	r1, #126	; 0x7e
 8018968:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801896c:	fb0c 3312 	mls	r3, ip, r2, r3
 8018970:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018974:	f000 80a1 	beq.w	8018aba <uxr_read_framed_msg+0x4fe>
 8018978:	f081 0120 	eor.w	r1, r1, #32
 801897c:	e680      	b.n	8018680 <uxr_read_framed_msg+0xc4>
 801897e:	f103 0c01 	add.w	ip, r3, #1
 8018982:	202a      	movs	r0, #42	; 0x2a
 8018984:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018988:	fba5 e202 	umull	lr, r2, r5, r2
 801898c:	0892      	lsrs	r2, r2, #2
 801898e:	fb00 c212 	mls	r2, r0, r2, ip
 8018992:	fa5f fc82 	uxtb.w	ip, r2
 8018996:	4561      	cmp	r1, ip
 8018998:	d081      	beq.n	801889e <uxr_read_framed_msg+0x2e2>
 801899a:	3302      	adds	r3, #2
 801899c:	4422      	add	r2, r4
 801899e:	0859      	lsrs	r1, r3, #1
 80189a0:	7892      	ldrb	r2, [r2, #2]
 80189a2:	fba5 c101 	umull	ip, r1, r5, r1
 80189a6:	2a7e      	cmp	r2, #126	; 0x7e
 80189a8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80189ac:	fb00 3311 	mls	r3, r0, r1, r3
 80189b0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80189b4:	f000 8091 	beq.w	8018ada <uxr_read_framed_msg+0x51e>
 80189b8:	f082 0220 	eor.w	r2, r2, #32
 80189bc:	e636      	b.n	801862c <uxr_read_framed_msg+0x70>
 80189be:	1c51      	adds	r1, r2, #1
 80189c0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80189c4:	084b      	lsrs	r3, r1, #1
 80189c6:	fba5 e303 	umull	lr, r3, r5, r3
 80189ca:	089b      	lsrs	r3, r3, #2
 80189cc:	fb0c 1313 	mls	r3, ip, r3, r1
 80189d0:	b2d9      	uxtb	r1, r3
 80189d2:	4288      	cmp	r0, r1
 80189d4:	d09b      	beq.n	801890e <uxr_read_framed_msg+0x352>
 80189d6:	3202      	adds	r2, #2
 80189d8:	4423      	add	r3, r4
 80189da:	0850      	lsrs	r0, r2, #1
 80189dc:	789b      	ldrb	r3, [r3, #2]
 80189de:	fba5 1000 	umull	r1, r0, r5, r0
 80189e2:	2b7e      	cmp	r3, #126	; 0x7e
 80189e4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80189e8:	fb0c 2210 	mls	r2, ip, r0, r2
 80189ec:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80189f0:	d077      	beq.n	8018ae2 <uxr_read_framed_msg+0x526>
 80189f2:	f083 0120 	eor.w	r1, r3, #32
 80189f6:	e6ea      	b.n	80187ce <uxr_read_framed_msg+0x212>
 80189f8:	f103 0c01 	add.w	ip, r3, #1
 80189fc:	202a      	movs	r0, #42	; 0x2a
 80189fe:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018a02:	fba5 e202 	umull	lr, r2, r5, r2
 8018a06:	0892      	lsrs	r2, r2, #2
 8018a08:	fb00 c212 	mls	r2, r0, r2, ip
 8018a0c:	fa5f fc82 	uxtb.w	ip, r2
 8018a10:	4561      	cmp	r1, ip
 8018a12:	f43f af57 	beq.w	80188c4 <uxr_read_framed_msg+0x308>
 8018a16:	3302      	adds	r3, #2
 8018a18:	4422      	add	r2, r4
 8018a1a:	7891      	ldrb	r1, [r2, #2]
 8018a1c:	085a      	lsrs	r2, r3, #1
 8018a1e:	fba5 c202 	umull	ip, r2, r5, r2
 8018a22:	297e      	cmp	r1, #126	; 0x7e
 8018a24:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8018a28:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018a2c:	fb00 3312 	mls	r3, r0, r2, r3
 8018a30:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018a34:	f43f af46 	beq.w	80188c4 <uxr_read_framed_msg+0x308>
 8018a38:	f081 0120 	eor.w	r1, r1, #32
 8018a3c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8018a40:	e6ea      	b.n	8018818 <uxr_read_framed_msg+0x25c>
 8018a42:	1c59      	adds	r1, r3, #1
 8018a44:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018a48:	084a      	lsrs	r2, r1, #1
 8018a4a:	fba5 e202 	umull	lr, r2, r5, r2
 8018a4e:	0892      	lsrs	r2, r2, #2
 8018a50:	fb0c 1212 	mls	r2, ip, r2, r1
 8018a54:	b2d1      	uxtb	r1, r2
 8018a56:	4288      	cmp	r0, r1
 8018a58:	f43f af21 	beq.w	801889e <uxr_read_framed_msg+0x2e2>
 8018a5c:	3302      	adds	r3, #2
 8018a5e:	4422      	add	r2, r4
 8018a60:	7891      	ldrb	r1, [r2, #2]
 8018a62:	085a      	lsrs	r2, r3, #1
 8018a64:	fba5 0202 	umull	r0, r2, r5, r2
 8018a68:	297e      	cmp	r1, #126	; 0x7e
 8018a6a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018a6e:	fb0c 3312 	mls	r3, ip, r2, r3
 8018a72:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018a76:	d030      	beq.n	8018ada <uxr_read_framed_msg+0x51e>
 8018a78:	f081 0120 	eor.w	r1, r1, #32
 8018a7c:	e65d      	b.n	801873a <uxr_read_framed_msg+0x17e>
 8018a7e:	1c59      	adds	r1, r3, #1
 8018a80:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018a84:	084a      	lsrs	r2, r1, #1
 8018a86:	fba5 e202 	umull	lr, r2, r5, r2
 8018a8a:	0892      	lsrs	r2, r2, #2
 8018a8c:	fb0c 1212 	mls	r2, ip, r2, r1
 8018a90:	b2d1      	uxtb	r1, r2
 8018a92:	4288      	cmp	r0, r1
 8018a94:	f43f af12 	beq.w	80188bc <uxr_read_framed_msg+0x300>
 8018a98:	3302      	adds	r3, #2
 8018a9a:	4422      	add	r2, r4
 8018a9c:	7891      	ldrb	r1, [r2, #2]
 8018a9e:	085a      	lsrs	r2, r3, #1
 8018aa0:	fba5 0202 	umull	r0, r2, r5, r2
 8018aa4:	297e      	cmp	r1, #126	; 0x7e
 8018aa6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018aaa:	fb0c 3312 	mls	r3, ip, r2, r3
 8018aae:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018ab2:	d002      	beq.n	8018aba <uxr_read_framed_msg+0x4fe>
 8018ab4:	f081 0120 	eor.w	r1, r1, #32
 8018ab8:	e66a      	b.n	8018790 <uxr_read_framed_msg+0x1d4>
 8018aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018abc:	9300      	str	r3, [sp, #0]
 8018abe:	2302      	movs	r3, #2
 8018ac0:	9301      	str	r3, [sp, #4]
 8018ac2:	464a      	mov	r2, r9
 8018ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ac6:	4641      	mov	r1, r8
 8018ac8:	4620      	mov	r0, r4
 8018aca:	f7ff fce3 	bl	8018494 <uxr_framing_read_transport>
 8018ace:	2800      	cmp	r0, #0
 8018ad0:	f47f aef2 	bne.w	80188b8 <uxr_read_framed_msg+0x2fc>
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	7023      	strb	r3, [r4, #0]
 8018ad8:	e581      	b.n	80185de <uxr_read_framed_msg+0x22>
 8018ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018adc:	9300      	str	r3, [sp, #0]
 8018ade:	2301      	movs	r3, #1
 8018ae0:	e7ee      	b.n	8018ac0 <uxr_read_framed_msg+0x504>
 8018ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018ae4:	9300      	str	r3, [sp, #0]
 8018ae6:	2303      	movs	r3, #3
 8018ae8:	e7ea      	b.n	8018ac0 <uxr_read_framed_msg+0x504>
 8018aea:	bf00      	nop

08018aec <uxr_stream_id>:
 8018aec:	2901      	cmp	r1, #1
 8018aee:	4684      	mov	ip, r0
 8018af0:	b500      	push	{lr}
 8018af2:	b083      	sub	sp, #12
 8018af4:	d01f      	beq.n	8018b36 <uxr_stream_id+0x4a>
 8018af6:	2902      	cmp	r1, #2
 8018af8:	f04f 0e00 	mov.w	lr, #0
 8018afc:	d020      	beq.n	8018b40 <uxr_stream_id+0x54>
 8018afe:	2300      	movs	r3, #0
 8018b00:	2000      	movs	r0, #0
 8018b02:	f36e 0307 	bfi	r3, lr, #0, #8
 8018b06:	f36c 230f 	bfi	r3, ip, #8, #8
 8018b0a:	f361 4317 	bfi	r3, r1, #16, #8
 8018b0e:	f362 631f 	bfi	r3, r2, #24, #8
 8018b12:	fa5f fc83 	uxtb.w	ip, r3
 8018b16:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8018b1a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8018b1e:	0e1b      	lsrs	r3, r3, #24
 8018b20:	f36c 0007 	bfi	r0, ip, #0, #8
 8018b24:	f361 200f 	bfi	r0, r1, #8, #8
 8018b28:	f362 4017 	bfi	r0, r2, #16, #8
 8018b2c:	f363 601f 	bfi	r0, r3, #24, #8
 8018b30:	b003      	add	sp, #12
 8018b32:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b36:	f100 0e01 	add.w	lr, r0, #1
 8018b3a:	fa5f fe8e 	uxtb.w	lr, lr
 8018b3e:	e7de      	b.n	8018afe <uxr_stream_id+0x12>
 8018b40:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8018b44:	e7db      	b.n	8018afe <uxr_stream_id+0x12>
 8018b46:	bf00      	nop

08018b48 <uxr_stream_id_from_raw>:
 8018b48:	b082      	sub	sp, #8
 8018b4a:	b130      	cbz	r0, 8018b5a <uxr_stream_id_from_raw+0x12>
 8018b4c:	0603      	lsls	r3, r0, #24
 8018b4e:	d421      	bmi.n	8018b94 <uxr_stream_id_from_raw+0x4c>
 8018b50:	1e42      	subs	r2, r0, #1
 8018b52:	f04f 0c01 	mov.w	ip, #1
 8018b56:	b2d2      	uxtb	r2, r2
 8018b58:	e001      	b.n	8018b5e <uxr_stream_id_from_raw+0x16>
 8018b5a:	4684      	mov	ip, r0
 8018b5c:	4602      	mov	r2, r0
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f360 0307 	bfi	r3, r0, #0, #8
 8018b64:	2000      	movs	r0, #0
 8018b66:	f362 230f 	bfi	r3, r2, #8, #8
 8018b6a:	f36c 4317 	bfi	r3, ip, #16, #8
 8018b6e:	f361 631f 	bfi	r3, r1, #24, #8
 8018b72:	fa5f fc83 	uxtb.w	ip, r3
 8018b76:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8018b7a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8018b7e:	0e1b      	lsrs	r3, r3, #24
 8018b80:	f36c 0007 	bfi	r0, ip, #0, #8
 8018b84:	f361 200f 	bfi	r0, r1, #8, #8
 8018b88:	f362 4017 	bfi	r0, r2, #16, #8
 8018b8c:	f363 601f 	bfi	r0, r3, #24, #8
 8018b90:	b002      	add	sp, #8
 8018b92:	4770      	bx	lr
 8018b94:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8018b98:	f04f 0c02 	mov.w	ip, #2
 8018b9c:	e7df      	b.n	8018b5e <uxr_stream_id_from_raw+0x16>
 8018b9e:	bf00      	nop

08018ba0 <uxr_init_stream_storage>:
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	7403      	strb	r3, [r0, #16]
 8018ba4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8018ba8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8018bac:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8018bb0:	4770      	bx	lr
 8018bb2:	bf00      	nop

08018bb4 <uxr_reset_stream_storage>:
 8018bb4:	b570      	push	{r4, r5, r6, lr}
 8018bb6:	7c03      	ldrb	r3, [r0, #16]
 8018bb8:	4604      	mov	r4, r0
 8018bba:	b14b      	cbz	r3, 8018bd0 <uxr_reset_stream_storage+0x1c>
 8018bbc:	4606      	mov	r6, r0
 8018bbe:	2500      	movs	r5, #0
 8018bc0:	4630      	mov	r0, r6
 8018bc2:	3501      	adds	r5, #1
 8018bc4:	f004 fea6 	bl	801d914 <uxr_reset_output_best_effort_stream>
 8018bc8:	7c23      	ldrb	r3, [r4, #16]
 8018bca:	3610      	adds	r6, #16
 8018bcc:	42ab      	cmp	r3, r5
 8018bce:	d8f7      	bhi.n	8018bc0 <uxr_reset_stream_storage+0xc>
 8018bd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018bd4:	b15b      	cbz	r3, 8018bee <uxr_reset_stream_storage+0x3a>
 8018bd6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018bda:	2500      	movs	r5, #0
 8018bdc:	4630      	mov	r0, r6
 8018bde:	3501      	adds	r5, #1
 8018be0:	f004 fc9e 	bl	801d520 <uxr_reset_input_best_effort_stream>
 8018be4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018be8:	3602      	adds	r6, #2
 8018bea:	42ab      	cmp	r3, r5
 8018bec:	d8f6      	bhi.n	8018bdc <uxr_reset_stream_storage+0x28>
 8018bee:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8018bf2:	b15b      	cbz	r3, 8018c0c <uxr_reset_stream_storage+0x58>
 8018bf4:	f104 0618 	add.w	r6, r4, #24
 8018bf8:	2500      	movs	r5, #0
 8018bfa:	4630      	mov	r0, r6
 8018bfc:	3501      	adds	r5, #1
 8018bfe:	f004 ff37 	bl	801da70 <uxr_reset_output_reliable_stream>
 8018c02:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8018c06:	3628      	adds	r6, #40	; 0x28
 8018c08:	42ab      	cmp	r3, r5
 8018c0a:	d8f6      	bhi.n	8018bfa <uxr_reset_stream_storage+0x46>
 8018c0c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018c10:	b15b      	cbz	r3, 8018c2a <uxr_reset_stream_storage+0x76>
 8018c12:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8018c16:	2500      	movs	r5, #0
 8018c18:	4630      	mov	r0, r6
 8018c1a:	3501      	adds	r5, #1
 8018c1c:	f004 fcec 	bl	801d5f8 <uxr_reset_input_reliable_stream>
 8018c20:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8018c24:	3618      	adds	r6, #24
 8018c26:	42ab      	cmp	r3, r5
 8018c28:	d8f6      	bhi.n	8018c18 <uxr_reset_stream_storage+0x64>
 8018c2a:	bd70      	pop	{r4, r5, r6, pc}

08018c2c <uxr_add_output_best_effort_buffer>:
 8018c2c:	b510      	push	{r4, lr}
 8018c2e:	7c04      	ldrb	r4, [r0, #16]
 8018c30:	b082      	sub	sp, #8
 8018c32:	f104 0c01 	add.w	ip, r4, #1
 8018c36:	f880 c010 	strb.w	ip, [r0, #16]
 8018c3a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8018c3e:	f004 fe5f 	bl	801d900 <uxr_init_output_best_effort_stream>
 8018c42:	2201      	movs	r2, #1
 8018c44:	4620      	mov	r0, r4
 8018c46:	4611      	mov	r1, r2
 8018c48:	b002      	add	sp, #8
 8018c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c4e:	f7ff bf4d 	b.w	8018aec <uxr_stream_id>
 8018c52:	bf00      	nop

08018c54 <uxr_add_output_reliable_buffer>:
 8018c54:	b510      	push	{r4, lr}
 8018c56:	b084      	sub	sp, #16
 8018c58:	4684      	mov	ip, r0
 8018c5a:	2028      	movs	r0, #40	; 0x28
 8018c5c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8018c60:	9400      	str	r4, [sp, #0]
 8018c62:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8018c66:	fb00 c004 	mla	r0, r0, r4, ip
 8018c6a:	f104 0e01 	add.w	lr, r4, #1
 8018c6e:	3018      	adds	r0, #24
 8018c70:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8018c74:	f004 fec4 	bl	801da00 <uxr_init_output_reliable_stream>
 8018c78:	2201      	movs	r2, #1
 8018c7a:	2102      	movs	r1, #2
 8018c7c:	4620      	mov	r0, r4
 8018c7e:	b004      	add	sp, #16
 8018c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c84:	f7ff bf32 	b.w	8018aec <uxr_stream_id>

08018c88 <uxr_add_input_best_effort_buffer>:
 8018c88:	b510      	push	{r4, lr}
 8018c8a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8018c8e:	b082      	sub	sp, #8
 8018c90:	1c62      	adds	r2, r4, #1
 8018c92:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8018c96:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8018c9a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018c9e:	f004 fc3b 	bl	801d518 <uxr_init_input_best_effort_stream>
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	2101      	movs	r1, #1
 8018ca6:	4620      	mov	r0, r4
 8018ca8:	b002      	add	sp, #8
 8018caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cae:	f7ff bf1d 	b.w	8018aec <uxr_stream_id>
 8018cb2:	bf00      	nop

08018cb4 <uxr_add_input_reliable_buffer>:
 8018cb4:	b510      	push	{r4, lr}
 8018cb6:	b084      	sub	sp, #16
 8018cb8:	4684      	mov	ip, r0
 8018cba:	2018      	movs	r0, #24
 8018cbc:	9c06      	ldr	r4, [sp, #24]
 8018cbe:	9400      	str	r4, [sp, #0]
 8018cc0:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8018cc4:	fb00 c004 	mla	r0, r0, r4, ip
 8018cc8:	f104 0e01 	add.w	lr, r4, #1
 8018ccc:	3048      	adds	r0, #72	; 0x48
 8018cce:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8018cd2:	f004 fc6b 	bl	801d5ac <uxr_init_input_reliable_stream>
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	2102      	movs	r1, #2
 8018cda:	4620      	mov	r0, r4
 8018cdc:	b004      	add	sp, #16
 8018cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ce2:	f7ff bf03 	b.w	8018aec <uxr_stream_id>
 8018ce6:	bf00      	nop

08018ce8 <uxr_get_output_best_effort_stream>:
 8018ce8:	7c03      	ldrb	r3, [r0, #16]
 8018cea:	428b      	cmp	r3, r1
 8018cec:	bf8c      	ite	hi
 8018cee:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8018cf2:	2000      	movls	r0, #0
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop

08018cf8 <uxr_get_output_reliable_stream>:
 8018cf8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8018cfc:	428b      	cmp	r3, r1
 8018cfe:	d904      	bls.n	8018d0a <uxr_get_output_reliable_stream+0x12>
 8018d00:	2328      	movs	r3, #40	; 0x28
 8018d02:	fb03 0001 	mla	r0, r3, r1, r0
 8018d06:	3018      	adds	r0, #24
 8018d08:	4770      	bx	lr
 8018d0a:	2000      	movs	r0, #0
 8018d0c:	4770      	bx	lr
 8018d0e:	bf00      	nop

08018d10 <uxr_get_input_best_effort_stream>:
 8018d10:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8018d14:	428b      	cmp	r3, r1
 8018d16:	d903      	bls.n	8018d20 <uxr_get_input_best_effort_stream+0x10>
 8018d18:	3121      	adds	r1, #33	; 0x21
 8018d1a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8018d1e:	4770      	bx	lr
 8018d20:	2000      	movs	r0, #0
 8018d22:	4770      	bx	lr

08018d24 <uxr_get_input_reliable_stream>:
 8018d24:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8018d28:	428b      	cmp	r3, r1
 8018d2a:	d904      	bls.n	8018d36 <uxr_get_input_reliable_stream+0x12>
 8018d2c:	2318      	movs	r3, #24
 8018d2e:	fb03 0001 	mla	r0, r3, r1, r0
 8018d32:	3048      	adds	r0, #72	; 0x48
 8018d34:	4770      	bx	lr
 8018d36:	2000      	movs	r0, #0
 8018d38:	4770      	bx	lr
 8018d3a:	bf00      	nop

08018d3c <uxr_output_streams_confirmed>:
 8018d3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8018d40:	b183      	cbz	r3, 8018d64 <uxr_output_streams_confirmed+0x28>
 8018d42:	b570      	push	{r4, r5, r6, lr}
 8018d44:	4606      	mov	r6, r0
 8018d46:	f100 0518 	add.w	r5, r0, #24
 8018d4a:	2400      	movs	r4, #0
 8018d4c:	e000      	b.n	8018d50 <uxr_output_streams_confirmed+0x14>
 8018d4e:	b140      	cbz	r0, 8018d62 <uxr_output_streams_confirmed+0x26>
 8018d50:	4628      	mov	r0, r5
 8018d52:	3401      	adds	r4, #1
 8018d54:	f005 f900 	bl	801df58 <uxr_is_output_up_to_date>
 8018d58:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8018d5c:	3528      	adds	r5, #40	; 0x28
 8018d5e:	42a3      	cmp	r3, r4
 8018d60:	d8f5      	bhi.n	8018d4e <uxr_output_streams_confirmed+0x12>
 8018d62:	bd70      	pop	{r4, r5, r6, pc}
 8018d64:	2001      	movs	r0, #1
 8018d66:	4770      	bx	lr

08018d68 <uxr_buffer_submessage_header>:
 8018d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d6a:	460e      	mov	r6, r1
 8018d6c:	2104      	movs	r1, #4
 8018d6e:	4604      	mov	r4, r0
 8018d70:	4615      	mov	r5, r2
 8018d72:	461f      	mov	r7, r3
 8018d74:	f7f9 faa8 	bl	80122c8 <ucdr_align_to>
 8018d78:	2301      	movs	r3, #1
 8018d7a:	4631      	mov	r1, r6
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	ea47 0203 	orr.w	r2, r7, r3
 8018d82:	7523      	strb	r3, [r4, #20]
 8018d84:	462b      	mov	r3, r5
 8018d86:	f000 fa29 	bl	80191dc <uxr_serialize_submessage_header>
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	f7f9 fab2 	bl	80122f4 <ucdr_buffer_remaining>
 8018d90:	42a8      	cmp	r0, r5
 8018d92:	bf34      	ite	cc
 8018d94:	2000      	movcc	r0, #0
 8018d96:	2001      	movcs	r0, #1
 8018d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d9a:	bf00      	nop

08018d9c <uxr_read_submessage_header>:
 8018d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da0:	4604      	mov	r4, r0
 8018da2:	460d      	mov	r5, r1
 8018da4:	2104      	movs	r1, #4
 8018da6:	4616      	mov	r6, r2
 8018da8:	4698      	mov	r8, r3
 8018daa:	f7f9 fa8d 	bl	80122c8 <ucdr_align_to>
 8018dae:	4620      	mov	r0, r4
 8018db0:	f7f9 faa0 	bl	80122f4 <ucdr_buffer_remaining>
 8018db4:	2803      	cmp	r0, #3
 8018db6:	bf8c      	ite	hi
 8018db8:	2701      	movhi	r7, #1
 8018dba:	2700      	movls	r7, #0
 8018dbc:	d802      	bhi.n	8018dc4 <uxr_read_submessage_header+0x28>
 8018dbe:	4638      	mov	r0, r7
 8018dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dc4:	4633      	mov	r3, r6
 8018dc6:	4642      	mov	r2, r8
 8018dc8:	4620      	mov	r0, r4
 8018dca:	4629      	mov	r1, r5
 8018dcc:	f000 fa1a 	bl	8019204 <uxr_deserialize_submessage_header>
 8018dd0:	f898 3000 	ldrb.w	r3, [r8]
 8018dd4:	4638      	mov	r0, r7
 8018dd6:	f003 0201 	and.w	r2, r3, #1
 8018dda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8018dde:	f888 3000 	strb.w	r3, [r8]
 8018de2:	7522      	strb	r2, [r4, #20]
 8018de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018de8 <uxr_submessage_padding>:
 8018de8:	f010 0003 	ands.w	r0, r0, #3
 8018dec:	bf18      	it	ne
 8018dee:	f1c0 0004 	rsbne	r0, r0, #4
 8018df2:	4770      	bx	lr

08018df4 <uxr_millis>:
 8018df4:	b510      	push	{r4, lr}
 8018df6:	b084      	sub	sp, #16
 8018df8:	2001      	movs	r0, #1
 8018dfa:	4669      	mov	r1, sp
 8018dfc:	f7e9 fda8 	bl	8002950 <clock_gettime>
 8018e00:	4908      	ldr	r1, [pc, #32]	; (8018e24 <uxr_millis+0x30>)
 8018e02:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8018e06:	fba0 0301 	umull	r0, r3, r0, r1
 8018e0a:	1900      	adds	r0, r0, r4
 8018e0c:	fb01 3102 	mla	r1, r1, r2, r3
 8018e10:	4a05      	ldr	r2, [pc, #20]	; (8018e28 <uxr_millis+0x34>)
 8018e12:	f04f 0300 	mov.w	r3, #0
 8018e16:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8018e1a:	f7e7 fd43 	bl	80008a4 <__aeabi_ldivmod>
 8018e1e:	b004      	add	sp, #16
 8018e20:	bd10      	pop	{r4, pc}
 8018e22:	bf00      	nop
 8018e24:	3b9aca00 	.word	0x3b9aca00
 8018e28:	000f4240 	.word	0x000f4240

08018e2c <uxr_nanos>:
 8018e2c:	b510      	push	{r4, lr}
 8018e2e:	b084      	sub	sp, #16
 8018e30:	2001      	movs	r0, #1
 8018e32:	4669      	mov	r1, sp
 8018e34:	f7e9 fd8c 	bl	8002950 <clock_gettime>
 8018e38:	4a06      	ldr	r2, [pc, #24]	; (8018e54 <uxr_nanos+0x28>)
 8018e3a:	9800      	ldr	r0, [sp, #0]
 8018e3c:	9902      	ldr	r1, [sp, #8]
 8018e3e:	fba0 0302 	umull	r0, r3, r0, r2
 8018e42:	9c01      	ldr	r4, [sp, #4]
 8018e44:	1840      	adds	r0, r0, r1
 8018e46:	fb02 3304 	mla	r3, r2, r4, r3
 8018e4a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8018e4e:	b004      	add	sp, #16
 8018e50:	bd10      	pop	{r4, pc}
 8018e52:	bf00      	nop
 8018e54:	3b9aca00 	.word	0x3b9aca00

08018e58 <on_full_output_buffer_fragmented>:
 8018e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e5c:	460c      	mov	r4, r1
 8018e5e:	b08a      	sub	sp, #40	; 0x28
 8018e60:	4606      	mov	r6, r0
 8018e62:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8018e66:	f104 0008 	add.w	r0, r4, #8
 8018e6a:	f7ff ff45 	bl	8018cf8 <uxr_get_output_reliable_stream>
 8018e6e:	4605      	mov	r5, r0
 8018e70:	f005 f87c 	bl	801df6c <get_available_free_slots>
 8018e74:	b968      	cbnz	r0, 8018e92 <on_full_output_buffer_fragmented+0x3a>
 8018e76:	4620      	mov	r0, r4
 8018e78:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8018e7c:	4798      	blx	r3
 8018e7e:	b918      	cbnz	r0, 8018e88 <on_full_output_buffer_fragmented+0x30>
 8018e80:	2001      	movs	r0, #1
 8018e82:	b00a      	add	sp, #40	; 0x28
 8018e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e88:	4628      	mov	r0, r5
 8018e8a:	f005 f86f 	bl	801df6c <get_available_free_slots>
 8018e8e:	2800      	cmp	r0, #0
 8018e90:	d0f6      	beq.n	8018e80 <on_full_output_buffer_fragmented+0x28>
 8018e92:	8929      	ldrh	r1, [r5, #8]
 8018e94:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8018e98:	89eb      	ldrh	r3, [r5, #14]
 8018e9a:	7b28      	ldrb	r0, [r5, #12]
 8018e9c:	686f      	ldr	r7, [r5, #4]
 8018e9e:	1a12      	subs	r2, r2, r0
 8018ea0:	fbb3 f0f1 	udiv	r0, r3, r1
 8018ea4:	fbb7 f7f1 	udiv	r7, r7, r1
 8018ea8:	fb01 3110 	mls	r1, r1, r0, r3
 8018eac:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8018eb0:	b289      	uxth	r1, r1
 8018eb2:	fb07 f101 	mul.w	r1, r7, r1
 8018eb6:	3f04      	subs	r7, #4
 8018eb8:	443a      	add	r2, r7
 8018eba:	3104      	adds	r1, #4
 8018ebc:	fa1f f882 	uxth.w	r8, r2
 8018ec0:	463a      	mov	r2, r7
 8018ec2:	eba3 0308 	sub.w	r3, r3, r8
 8018ec6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8018eca:	682b      	ldr	r3, [r5, #0]
 8018ecc:	4419      	add	r1, r3
 8018ece:	2300      	movs	r3, #0
 8018ed0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018ed4:	9000      	str	r0, [sp, #0]
 8018ed6:	a802      	add	r0, sp, #8
 8018ed8:	f7f9 f9c8 	bl	801226c <ucdr_init_buffer_origin_offset>
 8018edc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8018ee0:	f102 0308 	add.w	r3, r2, #8
 8018ee4:	42bb      	cmp	r3, r7
 8018ee6:	d927      	bls.n	8018f38 <on_full_output_buffer_fragmented+0xe0>
 8018ee8:	4642      	mov	r2, r8
 8018eea:	2300      	movs	r3, #0
 8018eec:	210d      	movs	r1, #13
 8018eee:	a802      	add	r0, sp, #8
 8018ef0:	f7ff ff3a 	bl	8018d68 <uxr_buffer_submessage_header>
 8018ef4:	8929      	ldrh	r1, [r5, #8]
 8018ef6:	89eb      	ldrh	r3, [r5, #14]
 8018ef8:	686a      	ldr	r2, [r5, #4]
 8018efa:	fbb3 f0f1 	udiv	r0, r3, r1
 8018efe:	fbb2 f2f1 	udiv	r2, r2, r1
 8018f02:	fb01 3310 	mls	r3, r1, r0, r3
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	fb02 f303 	mul.w	r3, r2, r3
 8018f0c:	682a      	ldr	r2, [r5, #0]
 8018f0e:	50d7      	str	r7, [r2, r3]
 8018f10:	2101      	movs	r1, #1
 8018f12:	89e8      	ldrh	r0, [r5, #14]
 8018f14:	f005 f84c 	bl	801dfb0 <uxr_seq_num_add>
 8018f18:	9904      	ldr	r1, [sp, #16]
 8018f1a:	9a03      	ldr	r2, [sp, #12]
 8018f1c:	81e8      	strh	r0, [r5, #14]
 8018f1e:	4630      	mov	r0, r6
 8018f20:	1a52      	subs	r2, r2, r1
 8018f22:	f7f9 f9b5 	bl	8012290 <ucdr_init_buffer>
 8018f26:	4630      	mov	r0, r6
 8018f28:	4622      	mov	r2, r4
 8018f2a:	490f      	ldr	r1, [pc, #60]	; (8018f68 <on_full_output_buffer_fragmented+0x110>)
 8018f2c:	f7f9 f984 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 8018f30:	2000      	movs	r0, #0
 8018f32:	b00a      	add	sp, #40	; 0x28
 8018f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f38:	b292      	uxth	r2, r2
 8018f3a:	2302      	movs	r3, #2
 8018f3c:	210d      	movs	r1, #13
 8018f3e:	a802      	add	r0, sp, #8
 8018f40:	f7ff ff12 	bl	8018d68 <uxr_buffer_submessage_header>
 8018f44:	8928      	ldrh	r0, [r5, #8]
 8018f46:	89eb      	ldrh	r3, [r5, #14]
 8018f48:	6869      	ldr	r1, [r5, #4]
 8018f4a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8018f4e:	fbb3 f7f0 	udiv	r7, r3, r0
 8018f52:	fbb1 f1f0 	udiv	r1, r1, r0
 8018f56:	fb00 3317 	mls	r3, r0, r7, r3
 8018f5a:	3208      	adds	r2, #8
 8018f5c:	b29b      	uxth	r3, r3
 8018f5e:	fb01 f303 	mul.w	r3, r1, r3
 8018f62:	6829      	ldr	r1, [r5, #0]
 8018f64:	50ca      	str	r2, [r1, r3]
 8018f66:	e7d3      	b.n	8018f10 <on_full_output_buffer_fragmented+0xb8>
 8018f68:	08018e59 	.word	0x08018e59

08018f6c <uxr_prepare_output_stream>:
 8018f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f6e:	b087      	sub	sp, #28
 8018f70:	2707      	movs	r7, #7
 8018f72:	2500      	movs	r5, #0
 8018f74:	461c      	mov	r4, r3
 8018f76:	4606      	mov	r6, r0
 8018f78:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f7e:	e9cd 7500 	strd	r7, r5, [sp]
 8018f82:	3204      	adds	r2, #4
 8018f84:	f7fe ffc8 	bl	8017f18 <uxr_prepare_stream_to_write_submessage>
 8018f88:	f080 0201 	eor.w	r2, r0, #1
 8018f8c:	b2d2      	uxtb	r2, r2
 8018f8e:	75a2      	strb	r2, [r4, #22]
 8018f90:	b112      	cbz	r2, 8018f98 <uxr_prepare_output_stream+0x2c>
 8018f92:	4628      	mov	r0, r5
 8018f94:	b007      	add	sp, #28
 8018f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f98:	aa05      	add	r2, sp, #20
 8018f9a:	9902      	ldr	r1, [sp, #8]
 8018f9c:	4630      	mov	r0, r6
 8018f9e:	f7ff f8f7 	bl	8018190 <uxr_init_base_object_request>
 8018fa2:	a905      	add	r1, sp, #20
 8018fa4:	4605      	mov	r5, r0
 8018fa6:	4620      	mov	r0, r4
 8018fa8:	f001 f8bc 	bl	801a124 <uxr_serialize_WRITE_DATA_Payload_Data>
 8018fac:	69a6      	ldr	r6, [r4, #24]
 8018fae:	69e7      	ldr	r7, [r4, #28]
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8018fb6:	1a52      	subs	r2, r2, r1
 8018fb8:	f7f9 f96a 	bl	8012290 <ucdr_init_buffer>
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	463a      	mov	r2, r7
 8018fc0:	4631      	mov	r1, r6
 8018fc2:	f7f9 f939 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 8018fc6:	4628      	mov	r0, r5
 8018fc8:	b007      	add	sp, #28
 8018fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018fcc <uxr_prepare_output_stream_fragmented>:
 8018fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd0:	b091      	sub	sp, #68	; 0x44
 8018fd2:	4605      	mov	r5, r0
 8018fd4:	3008      	adds	r0, #8
 8018fd6:	461e      	mov	r6, r3
 8018fd8:	9105      	str	r1, [sp, #20]
 8018fda:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018fde:	9204      	str	r2, [sp, #16]
 8018fe0:	f7ff fe8a 	bl	8018cf8 <uxr_get_output_reliable_stream>
 8018fe4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8018fe8:	2b01      	cmp	r3, #1
 8018fea:	f000 8093 	beq.w	8019114 <uxr_prepare_output_stream_fragmented+0x148>
 8018fee:	4604      	mov	r4, r0
 8018ff0:	2800      	cmp	r0, #0
 8018ff2:	f000 808f 	beq.w	8019114 <uxr_prepare_output_stream_fragmented+0x148>
 8018ff6:	f004 ffb9 	bl	801df6c <get_available_free_slots>
 8018ffa:	2800      	cmp	r0, #0
 8018ffc:	f000 8085 	beq.w	801910a <uxr_prepare_output_stream_fragmented+0x13e>
 8019000:	8923      	ldrh	r3, [r4, #8]
 8019002:	89e7      	ldrh	r7, [r4, #14]
 8019004:	6862      	ldr	r2, [r4, #4]
 8019006:	fbb7 f9f3 	udiv	r9, r7, r3
 801900a:	fbb2 f2f3 	udiv	r2, r2, r3
 801900e:	fb03 7919 	mls	r9, r3, r9, r7
 8019012:	6823      	ldr	r3, [r4, #0]
 8019014:	f1a2 0b04 	sub.w	fp, r2, #4
 8019018:	9203      	str	r2, [sp, #12]
 801901a:	fa1f f989 	uxth.w	r9, r9
 801901e:	fb02 f909 	mul.w	r9, r2, r9
 8019022:	f109 0904 	add.w	r9, r9, #4
 8019026:	4499      	add	r9, r3
 8019028:	7b23      	ldrb	r3, [r4, #12]
 801902a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801902e:	4543      	cmp	r3, r8
 8019030:	d37c      	bcc.n	801912c <uxr_prepare_output_stream_fragmented+0x160>
 8019032:	f1ab 0a04 	sub.w	sl, fp, #4
 8019036:	465a      	mov	r2, fp
 8019038:	4649      	mov	r1, r9
 801903a:	a808      	add	r0, sp, #32
 801903c:	ebaa 0a03 	sub.w	sl, sl, r3
 8019040:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019042:	f8cd 8000 	str.w	r8, [sp]
 8019046:	3308      	adds	r3, #8
 8019048:	fa1f fa8a 	uxth.w	sl, sl
 801904c:	9302      	str	r3, [sp, #8]
 801904e:	2300      	movs	r3, #0
 8019050:	f7f9 f90c 	bl	801226c <ucdr_init_buffer_origin_offset>
 8019054:	9b02      	ldr	r3, [sp, #8]
 8019056:	4652      	mov	r2, sl
 8019058:	210d      	movs	r1, #13
 801905a:	455b      	cmp	r3, fp
 801905c:	bf34      	ite	cc
 801905e:	2302      	movcc	r3, #2
 8019060:	2300      	movcs	r3, #0
 8019062:	a808      	add	r0, sp, #32
 8019064:	f7ff fe80 	bl	8018d68 <uxr_buffer_submessage_header>
 8019068:	8921      	ldrh	r1, [r4, #8]
 801906a:	6863      	ldr	r3, [r4, #4]
 801906c:	4638      	mov	r0, r7
 801906e:	fbb7 f2f1 	udiv	r2, r7, r1
 8019072:	fbb3 f3f1 	udiv	r3, r3, r1
 8019076:	fb01 7212 	mls	r2, r1, r2, r7
 801907a:	2101      	movs	r1, #1
 801907c:	b292      	uxth	r2, r2
 801907e:	fb02 f303 	mul.w	r3, r2, r3
 8019082:	6822      	ldr	r2, [r4, #0]
 8019084:	f842 b003 	str.w	fp, [r2, r3]
 8019088:	f004 ff92 	bl	801dfb0 <uxr_seq_num_add>
 801908c:	9b03      	ldr	r3, [sp, #12]
 801908e:	f108 0104 	add.w	r1, r8, #4
 8019092:	4607      	mov	r7, r0
 8019094:	f1a3 0208 	sub.w	r2, r3, #8
 8019098:	4630      	mov	r0, r6
 801909a:	4449      	add	r1, r9
 801909c:	eba2 0208 	sub.w	r2, r2, r8
 80190a0:	f7f9 f8f6 	bl	8012290 <ucdr_init_buffer>
 80190a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80190a6:	2107      	movs	r1, #7
 80190a8:	81e7      	strh	r7, [r4, #14]
 80190aa:	1d1a      	adds	r2, r3, #4
 80190ac:	2300      	movs	r3, #0
 80190ae:	4630      	mov	r0, r6
 80190b0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80190b4:	bf28      	it	cs
 80190b6:	461a      	movcs	r2, r3
 80190b8:	b292      	uxth	r2, r2
 80190ba:	f7ff fe55 	bl	8018d68 <uxr_buffer_submessage_header>
 80190be:	aa07      	add	r2, sp, #28
 80190c0:	9904      	ldr	r1, [sp, #16]
 80190c2:	4628      	mov	r0, r5
 80190c4:	f7ff f864 	bl	8018190 <uxr_init_base_object_request>
 80190c8:	4604      	mov	r4, r0
 80190ca:	b320      	cbz	r0, 8019116 <uxr_prepare_output_stream_fragmented+0x14a>
 80190cc:	a907      	add	r1, sp, #28
 80190ce:	4630      	mov	r0, r6
 80190d0:	f001 f828 	bl	801a124 <uxr_serialize_WRITE_DATA_Payload_Data>
 80190d4:	4630      	mov	r0, r6
 80190d6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80190da:	1a52      	subs	r2, r2, r1
 80190dc:	f7f9 f8d8 	bl	8012290 <ucdr_init_buffer>
 80190e0:	9b05      	ldr	r3, [sp, #20]
 80190e2:	9a02      	ldr	r2, [sp, #8]
 80190e4:	4630      	mov	r0, r6
 80190e6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80190ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80190ec:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80190f0:	462a      	mov	r2, r5
 80190f2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80190f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80190f8:	4918      	ldr	r1, [pc, #96]	; (801915c <uxr_prepare_output_stream_fragmented+0x190>)
 80190fa:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 80190fe:	f7f9 f89b 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 8019102:	4620      	mov	r0, r4
 8019104:	b011      	add	sp, #68	; 0x44
 8019106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801910a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801910c:	4628      	mov	r0, r5
 801910e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019110:	4798      	blx	r3
 8019112:	b920      	cbnz	r0, 801911e <uxr_prepare_output_stream_fragmented+0x152>
 8019114:	2400      	movs	r4, #0
 8019116:	4620      	mov	r0, r4
 8019118:	b011      	add	sp, #68	; 0x44
 801911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801911e:	4620      	mov	r0, r4
 8019120:	f004 ff24 	bl	801df6c <get_available_free_slots>
 8019124:	2800      	cmp	r0, #0
 8019126:	f47f af6b 	bne.w	8019000 <uxr_prepare_output_stream_fragmented+0x34>
 801912a:	e7f3      	b.n	8019114 <uxr_prepare_output_stream_fragmented+0x148>
 801912c:	4638      	mov	r0, r7
 801912e:	2101      	movs	r1, #1
 8019130:	f004 ff3e 	bl	801dfb0 <uxr_seq_num_add>
 8019134:	8922      	ldrh	r2, [r4, #8]
 8019136:	6863      	ldr	r3, [r4, #4]
 8019138:	4607      	mov	r7, r0
 801913a:	fbb3 f9f2 	udiv	r9, r3, r2
 801913e:	fbb0 f3f2 	udiv	r3, r0, r2
 8019142:	fb02 0313 	mls	r3, r2, r3, r0
 8019146:	b29b      	uxth	r3, r3
 8019148:	fb03 f909 	mul.w	r9, r3, r9
 801914c:	6823      	ldr	r3, [r4, #0]
 801914e:	f109 0904 	add.w	r9, r9, #4
 8019152:	4499      	add	r9, r3
 8019154:	7b23      	ldrb	r3, [r4, #12]
 8019156:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801915a:	e76a      	b.n	8019032 <uxr_prepare_output_stream_fragmented+0x66>
 801915c:	08018e59 	.word	0x08018e59

08019160 <uxr_serialize_message_header>:
 8019160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019162:	4616      	mov	r6, r2
 8019164:	b083      	sub	sp, #12
 8019166:	4604      	mov	r4, r0
 8019168:	460d      	mov	r5, r1
 801916a:	9301      	str	r3, [sp, #4]
 801916c:	9f08      	ldr	r7, [sp, #32]
 801916e:	f7f7 fdb7 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019172:	4631      	mov	r1, r6
 8019174:	4620      	mov	r0, r4
 8019176:	f7f7 fdb3 	bl	8010ce0 <ucdr_serialize_uint8_t>
 801917a:	9a01      	ldr	r2, [sp, #4]
 801917c:	2101      	movs	r1, #1
 801917e:	4620      	mov	r0, r4
 8019180:	f7f7 fe5a 	bl	8010e38 <ucdr_serialize_endian_uint16_t>
 8019184:	062b      	lsls	r3, r5, #24
 8019186:	d501      	bpl.n	801918c <uxr_serialize_message_header+0x2c>
 8019188:	b003      	add	sp, #12
 801918a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801918c:	2204      	movs	r2, #4
 801918e:	4639      	mov	r1, r7
 8019190:	4620      	mov	r0, r4
 8019192:	b003      	add	sp, #12
 8019194:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019198:	f7fd ba6e 	b.w	8016678 <ucdr_serialize_array_uint8_t>

0801919c <uxr_deserialize_message_header>:
 801919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801919e:	4616      	mov	r6, r2
 80191a0:	b083      	sub	sp, #12
 80191a2:	4604      	mov	r4, r0
 80191a4:	460d      	mov	r5, r1
 80191a6:	9301      	str	r3, [sp, #4]
 80191a8:	9f08      	ldr	r7, [sp, #32]
 80191aa:	f7f7 fdaf 	bl	8010d0c <ucdr_deserialize_uint8_t>
 80191ae:	4631      	mov	r1, r6
 80191b0:	4620      	mov	r0, r4
 80191b2:	f7f7 fdab 	bl	8010d0c <ucdr_deserialize_uint8_t>
 80191b6:	9a01      	ldr	r2, [sp, #4]
 80191b8:	2101      	movs	r1, #1
 80191ba:	4620      	mov	r0, r4
 80191bc:	f7f7 ff30 	bl	8011020 <ucdr_deserialize_endian_uint16_t>
 80191c0:	f995 3000 	ldrsb.w	r3, [r5]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	da01      	bge.n	80191cc <uxr_deserialize_message_header+0x30>
 80191c8:	b003      	add	sp, #12
 80191ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191cc:	2204      	movs	r2, #4
 80191ce:	4639      	mov	r1, r7
 80191d0:	4620      	mov	r0, r4
 80191d2:	b003      	add	sp, #12
 80191d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80191d8:	f7fd bab2 	b.w	8016740 <ucdr_deserialize_array_uint8_t>

080191dc <uxr_serialize_submessage_header>:
 80191dc:	b530      	push	{r4, r5, lr}
 80191de:	4615      	mov	r5, r2
 80191e0:	b083      	sub	sp, #12
 80191e2:	4604      	mov	r4, r0
 80191e4:	9301      	str	r3, [sp, #4]
 80191e6:	f7f7 fd7b 	bl	8010ce0 <ucdr_serialize_uint8_t>
 80191ea:	4629      	mov	r1, r5
 80191ec:	4620      	mov	r0, r4
 80191ee:	f7f7 fd77 	bl	8010ce0 <ucdr_serialize_uint8_t>
 80191f2:	9a01      	ldr	r2, [sp, #4]
 80191f4:	2101      	movs	r1, #1
 80191f6:	4620      	mov	r0, r4
 80191f8:	b003      	add	sp, #12
 80191fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80191fe:	f7f7 be1b 	b.w	8010e38 <ucdr_serialize_endian_uint16_t>
 8019202:	bf00      	nop

08019204 <uxr_deserialize_submessage_header>:
 8019204:	b530      	push	{r4, r5, lr}
 8019206:	4615      	mov	r5, r2
 8019208:	b083      	sub	sp, #12
 801920a:	4604      	mov	r4, r0
 801920c:	9301      	str	r3, [sp, #4]
 801920e:	f7f7 fd7d 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019212:	4629      	mov	r1, r5
 8019214:	4620      	mov	r0, r4
 8019216:	f7f7 fd79 	bl	8010d0c <ucdr_deserialize_uint8_t>
 801921a:	9a01      	ldr	r2, [sp, #4]
 801921c:	2101      	movs	r1, #1
 801921e:	4620      	mov	r0, r4
 8019220:	b003      	add	sp, #12
 8019222:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019226:	f7f7 befb 	b.w	8011020 <ucdr_deserialize_endian_uint16_t>
 801922a:	bf00      	nop

0801922c <uxr_serialize_CLIENT_Representation>:
 801922c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019230:	2204      	movs	r2, #4
 8019232:	460e      	mov	r6, r1
 8019234:	4605      	mov	r5, r0
 8019236:	f7fd fa1f 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801923a:	4607      	mov	r7, r0
 801923c:	2202      	movs	r2, #2
 801923e:	1d31      	adds	r1, r6, #4
 8019240:	4628      	mov	r0, r5
 8019242:	f7fd fa19 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019246:	4038      	ands	r0, r7
 8019248:	2202      	movs	r2, #2
 801924a:	1db1      	adds	r1, r6, #6
 801924c:	b2c7      	uxtb	r7, r0
 801924e:	4628      	mov	r0, r5
 8019250:	f7fd fa12 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019254:	2204      	movs	r2, #4
 8019256:	4007      	ands	r7, r0
 8019258:	f106 0108 	add.w	r1, r6, #8
 801925c:	4628      	mov	r0, r5
 801925e:	f7fd fa0b 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019262:	4007      	ands	r7, r0
 8019264:	7b31      	ldrb	r1, [r6, #12]
 8019266:	4628      	mov	r0, r5
 8019268:	f7f7 fd3a 	bl	8010ce0 <ucdr_serialize_uint8_t>
 801926c:	7b71      	ldrb	r1, [r6, #13]
 801926e:	4007      	ands	r7, r0
 8019270:	4628      	mov	r0, r5
 8019272:	f7f7 fd07 	bl	8010c84 <ucdr_serialize_bool>
 8019276:	7b73      	ldrb	r3, [r6, #13]
 8019278:	ea07 0800 	and.w	r8, r7, r0
 801927c:	b93b      	cbnz	r3, 801928e <uxr_serialize_CLIENT_Representation+0x62>
 801927e:	8bb1      	ldrh	r1, [r6, #28]
 8019280:	4628      	mov	r0, r5
 8019282:	f7f7 fd59 	bl	8010d38 <ucdr_serialize_uint16_t>
 8019286:	ea08 0000 	and.w	r0, r8, r0
 801928a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801928e:	6931      	ldr	r1, [r6, #16]
 8019290:	4628      	mov	r0, r5
 8019292:	f7f7 ff3b 	bl	801110c <ucdr_serialize_uint32_t>
 8019296:	6933      	ldr	r3, [r6, #16]
 8019298:	b1e3      	cbz	r3, 80192d4 <uxr_serialize_CLIENT_Representation+0xa8>
 801929a:	b1c0      	cbz	r0, 80192ce <uxr_serialize_CLIENT_Representation+0xa2>
 801929c:	4637      	mov	r7, r6
 801929e:	f04f 0900 	mov.w	r9, #0
 80192a2:	e000      	b.n	80192a6 <uxr_serialize_CLIENT_Representation+0x7a>
 80192a4:	b19c      	cbz	r4, 80192ce <uxr_serialize_CLIENT_Representation+0xa2>
 80192a6:	6979      	ldr	r1, [r7, #20]
 80192a8:	4628      	mov	r0, r5
 80192aa:	f004 f91d 	bl	801d4e8 <ucdr_serialize_string>
 80192ae:	69b9      	ldr	r1, [r7, #24]
 80192b0:	4604      	mov	r4, r0
 80192b2:	4628      	mov	r0, r5
 80192b4:	f004 f918 	bl	801d4e8 <ucdr_serialize_string>
 80192b8:	f109 0901 	add.w	r9, r9, #1
 80192bc:	6933      	ldr	r3, [r6, #16]
 80192be:	4004      	ands	r4, r0
 80192c0:	3708      	adds	r7, #8
 80192c2:	4599      	cmp	r9, r3
 80192c4:	b2e4      	uxtb	r4, r4
 80192c6:	d3ed      	bcc.n	80192a4 <uxr_serialize_CLIENT_Representation+0x78>
 80192c8:	ea08 0804 	and.w	r8, r8, r4
 80192cc:	e7d7      	b.n	801927e <uxr_serialize_CLIENT_Representation+0x52>
 80192ce:	f04f 0800 	mov.w	r8, #0
 80192d2:	e7d4      	b.n	801927e <uxr_serialize_CLIENT_Representation+0x52>
 80192d4:	ea08 0800 	and.w	r8, r8, r0
 80192d8:	e7d1      	b.n	801927e <uxr_serialize_CLIENT_Representation+0x52>
 80192da:	bf00      	nop

080192dc <uxr_deserialize_CLIENT_Representation>:
 80192dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192e0:	2204      	movs	r2, #4
 80192e2:	460c      	mov	r4, r1
 80192e4:	4605      	mov	r5, r0
 80192e6:	f7fd fa2b 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 80192ea:	4607      	mov	r7, r0
 80192ec:	2202      	movs	r2, #2
 80192ee:	1d21      	adds	r1, r4, #4
 80192f0:	4628      	mov	r0, r5
 80192f2:	f7fd fa25 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 80192f6:	4038      	ands	r0, r7
 80192f8:	2202      	movs	r2, #2
 80192fa:	1da1      	adds	r1, r4, #6
 80192fc:	b2c6      	uxtb	r6, r0
 80192fe:	4628      	mov	r0, r5
 8019300:	f7fd fa1e 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019304:	2204      	movs	r2, #4
 8019306:	4006      	ands	r6, r0
 8019308:	f104 0108 	add.w	r1, r4, #8
 801930c:	4628      	mov	r0, r5
 801930e:	f7fd fa17 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019312:	4006      	ands	r6, r0
 8019314:	f104 010c 	add.w	r1, r4, #12
 8019318:	4628      	mov	r0, r5
 801931a:	f7f7 fcf7 	bl	8010d0c <ucdr_deserialize_uint8_t>
 801931e:	f104 010d 	add.w	r1, r4, #13
 8019322:	ea06 0700 	and.w	r7, r6, r0
 8019326:	4628      	mov	r0, r5
 8019328:	f7f7 fcc2 	bl	8010cb0 <ucdr_deserialize_bool>
 801932c:	7b63      	ldrb	r3, [r4, #13]
 801932e:	4007      	ands	r7, r0
 8019330:	b93b      	cbnz	r3, 8019342 <uxr_deserialize_CLIENT_Representation+0x66>
 8019332:	f104 011c 	add.w	r1, r4, #28
 8019336:	4628      	mov	r0, r5
 8019338:	f7f7 fdfe 	bl	8010f38 <ucdr_deserialize_uint16_t>
 801933c:	4038      	ands	r0, r7
 801933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019342:	f104 0110 	add.w	r1, r4, #16
 8019346:	4628      	mov	r0, r5
 8019348:	f7f8 f810 	bl	801136c <ucdr_deserialize_uint32_t>
 801934c:	6923      	ldr	r3, [r4, #16]
 801934e:	2b01      	cmp	r3, #1
 8019350:	d903      	bls.n	801935a <uxr_deserialize_CLIENT_Representation+0x7e>
 8019352:	2301      	movs	r3, #1
 8019354:	2700      	movs	r7, #0
 8019356:	75ab      	strb	r3, [r5, #22]
 8019358:	e7eb      	b.n	8019332 <uxr_deserialize_CLIENT_Representation+0x56>
 801935a:	b30b      	cbz	r3, 80193a0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801935c:	b1f0      	cbz	r0, 801939c <uxr_deserialize_CLIENT_Representation+0xc0>
 801935e:	46a0      	mov	r8, r4
 8019360:	f04f 0900 	mov.w	r9, #0
 8019364:	e000      	b.n	8019368 <uxr_deserialize_CLIENT_Representation+0x8c>
 8019366:	b1ce      	cbz	r6, 801939c <uxr_deserialize_CLIENT_Representation+0xc0>
 8019368:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801936c:	f108 0808 	add.w	r8, r8, #8
 8019370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019374:	4628      	mov	r0, r5
 8019376:	f004 f8c7 	bl	801d508 <ucdr_deserialize_string>
 801937a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801937e:	4606      	mov	r6, r0
 8019380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019384:	4628      	mov	r0, r5
 8019386:	f109 0901 	add.w	r9, r9, #1
 801938a:	f004 f8bd 	bl	801d508 <ucdr_deserialize_string>
 801938e:	6923      	ldr	r3, [r4, #16]
 8019390:	4006      	ands	r6, r0
 8019392:	4599      	cmp	r9, r3
 8019394:	b2f6      	uxtb	r6, r6
 8019396:	d3e6      	bcc.n	8019366 <uxr_deserialize_CLIENT_Representation+0x8a>
 8019398:	4037      	ands	r7, r6
 801939a:	e7ca      	b.n	8019332 <uxr_deserialize_CLIENT_Representation+0x56>
 801939c:	2700      	movs	r7, #0
 801939e:	e7c8      	b.n	8019332 <uxr_deserialize_CLIENT_Representation+0x56>
 80193a0:	4007      	ands	r7, r0
 80193a2:	e7c6      	b.n	8019332 <uxr_deserialize_CLIENT_Representation+0x56>

080193a4 <uxr_serialize_AGENT_Representation>:
 80193a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193a8:	2204      	movs	r2, #4
 80193aa:	460f      	mov	r7, r1
 80193ac:	4605      	mov	r5, r0
 80193ae:	f7fd f963 	bl	8016678 <ucdr_serialize_array_uint8_t>
 80193b2:	4604      	mov	r4, r0
 80193b4:	2202      	movs	r2, #2
 80193b6:	1d39      	adds	r1, r7, #4
 80193b8:	4628      	mov	r0, r5
 80193ba:	f7fd f95d 	bl	8016678 <ucdr_serialize_array_uint8_t>
 80193be:	4020      	ands	r0, r4
 80193c0:	2202      	movs	r2, #2
 80193c2:	1db9      	adds	r1, r7, #6
 80193c4:	b2c4      	uxtb	r4, r0
 80193c6:	4628      	mov	r0, r5
 80193c8:	f7fd f956 	bl	8016678 <ucdr_serialize_array_uint8_t>
 80193cc:	7a39      	ldrb	r1, [r7, #8]
 80193ce:	4004      	ands	r4, r0
 80193d0:	4628      	mov	r0, r5
 80193d2:	f7f7 fc57 	bl	8010c84 <ucdr_serialize_bool>
 80193d6:	7a3b      	ldrb	r3, [r7, #8]
 80193d8:	ea00 0804 	and.w	r8, r0, r4
 80193dc:	b913      	cbnz	r3, 80193e4 <uxr_serialize_AGENT_Representation+0x40>
 80193de:	4640      	mov	r0, r8
 80193e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193e4:	68f9      	ldr	r1, [r7, #12]
 80193e6:	4628      	mov	r0, r5
 80193e8:	f7f7 fe90 	bl	801110c <ucdr_serialize_uint32_t>
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	b303      	cbz	r3, 8019432 <uxr_serialize_AGENT_Representation+0x8e>
 80193f0:	b1d0      	cbz	r0, 8019428 <uxr_serialize_AGENT_Representation+0x84>
 80193f2:	463e      	mov	r6, r7
 80193f4:	f04f 0900 	mov.w	r9, #0
 80193f8:	e000      	b.n	80193fc <uxr_serialize_AGENT_Representation+0x58>
 80193fa:	b1ac      	cbz	r4, 8019428 <uxr_serialize_AGENT_Representation+0x84>
 80193fc:	6931      	ldr	r1, [r6, #16]
 80193fe:	4628      	mov	r0, r5
 8019400:	f004 f872 	bl	801d4e8 <ucdr_serialize_string>
 8019404:	6971      	ldr	r1, [r6, #20]
 8019406:	4604      	mov	r4, r0
 8019408:	4628      	mov	r0, r5
 801940a:	f004 f86d 	bl	801d4e8 <ucdr_serialize_string>
 801940e:	f109 0901 	add.w	r9, r9, #1
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	4004      	ands	r4, r0
 8019416:	3608      	adds	r6, #8
 8019418:	4599      	cmp	r9, r3
 801941a:	b2e4      	uxtb	r4, r4
 801941c:	d3ed      	bcc.n	80193fa <uxr_serialize_AGENT_Representation+0x56>
 801941e:	ea08 0804 	and.w	r8, r8, r4
 8019422:	4640      	mov	r0, r8
 8019424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019428:	f04f 0800 	mov.w	r8, #0
 801942c:	4640      	mov	r0, r8
 801942e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019432:	ea08 0800 	and.w	r8, r8, r0
 8019436:	e7d2      	b.n	80193de <uxr_serialize_AGENT_Representation+0x3a>

08019438 <uxr_serialize_DATAWRITER_Representation>:
 8019438:	b570      	push	{r4, r5, r6, lr}
 801943a:	460d      	mov	r5, r1
 801943c:	7809      	ldrb	r1, [r1, #0]
 801943e:	4606      	mov	r6, r0
 8019440:	f7f7 fc4e 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019444:	4604      	mov	r4, r0
 8019446:	b130      	cbz	r0, 8019456 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019448:	782b      	ldrb	r3, [r5, #0]
 801944a:	2b02      	cmp	r3, #2
 801944c:	d00c      	beq.n	8019468 <uxr_serialize_DATAWRITER_Representation+0x30>
 801944e:	2b03      	cmp	r3, #3
 8019450:	d010      	beq.n	8019474 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8019452:	2b01      	cmp	r3, #1
 8019454:	d008      	beq.n	8019468 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019456:	2202      	movs	r2, #2
 8019458:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801945c:	4630      	mov	r0, r6
 801945e:	f7fd f90b 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019462:	4020      	ands	r0, r4
 8019464:	b2c0      	uxtb	r0, r0
 8019466:	bd70      	pop	{r4, r5, r6, pc}
 8019468:	6869      	ldr	r1, [r5, #4]
 801946a:	4630      	mov	r0, r6
 801946c:	f004 f83c 	bl	801d4e8 <ucdr_serialize_string>
 8019470:	4604      	mov	r4, r0
 8019472:	e7f0      	b.n	8019456 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019474:	4629      	mov	r1, r5
 8019476:	4630      	mov	r0, r6
 8019478:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801947c:	3104      	adds	r1, #4
 801947e:	f7f8 ffa7 	bl	80123d0 <ucdr_serialize_sequence_uint8_t>
 8019482:	4604      	mov	r4, r0
 8019484:	e7e7      	b.n	8019456 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019486:	bf00      	nop

08019488 <uxr_serialize_ObjectVariant.part.0>:
 8019488:	b570      	push	{r4, r5, r6, lr}
 801948a:	780b      	ldrb	r3, [r1, #0]
 801948c:	460c      	mov	r4, r1
 801948e:	4605      	mov	r5, r0
 8019490:	3b01      	subs	r3, #1
 8019492:	2b0d      	cmp	r3, #13
 8019494:	d854      	bhi.n	8019540 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019496:	e8df f003 	tbb	[pc, r3]
 801949a:	0730      	.short	0x0730
 801949c:	07071b1b 	.word	0x07071b1b
 80194a0:	0c530707 	.word	0x0c530707
 80194a4:	494e0c0c 	.word	0x494e0c0c
 80194a8:	3104      	adds	r1, #4
 80194aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194ae:	f7ff bfc3 	b.w	8019438 <uxr_serialize_DATAWRITER_Representation>
 80194b2:	7909      	ldrb	r1, [r1, #4]
 80194b4:	f7f7 fc14 	bl	8010ce0 <ucdr_serialize_uint8_t>
 80194b8:	b1e8      	cbz	r0, 80194f6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80194ba:	7923      	ldrb	r3, [r4, #4]
 80194bc:	2b01      	cmp	r3, #1
 80194be:	d001      	beq.n	80194c4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80194c0:	2b02      	cmp	r3, #2
 80194c2:	d13d      	bne.n	8019540 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80194c4:	68a1      	ldr	r1, [r4, #8]
 80194c6:	4628      	mov	r0, r5
 80194c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194cc:	f004 b80c 	b.w	801d4e8 <ucdr_serialize_string>
 80194d0:	7909      	ldrb	r1, [r1, #4]
 80194d2:	f7f7 fc05 	bl	8010ce0 <ucdr_serialize_uint8_t>
 80194d6:	4606      	mov	r6, r0
 80194d8:	b120      	cbz	r0, 80194e4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80194da:	7923      	ldrb	r3, [r4, #4]
 80194dc:	2b02      	cmp	r3, #2
 80194de:	d039      	beq.n	8019554 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80194e0:	2b03      	cmp	r3, #3
 80194e2:	d02f      	beq.n	8019544 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80194e4:	2202      	movs	r2, #2
 80194e6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80194ea:	4628      	mov	r0, r5
 80194ec:	f7fd f8c4 	bl	8016678 <ucdr_serialize_array_uint8_t>
 80194f0:	4030      	ands	r0, r6
 80194f2:	b2c0      	uxtb	r0, r0
 80194f4:	bd70      	pop	{r4, r5, r6, pc}
 80194f6:	2000      	movs	r0, #0
 80194f8:	bd70      	pop	{r4, r5, r6, pc}
 80194fa:	7909      	ldrb	r1, [r1, #4]
 80194fc:	f7f7 fbf0 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019500:	4606      	mov	r6, r0
 8019502:	b158      	cbz	r0, 801951c <uxr_serialize_ObjectVariant.part.0+0x94>
 8019504:	7923      	ldrb	r3, [r4, #4]
 8019506:	2b02      	cmp	r3, #2
 8019508:	d003      	beq.n	8019512 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801950a:	2b03      	cmp	r3, #3
 801950c:	d028      	beq.n	8019560 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801950e:	2b01      	cmp	r3, #1
 8019510:	d104      	bne.n	801951c <uxr_serialize_ObjectVariant.part.0+0x94>
 8019512:	68a1      	ldr	r1, [r4, #8]
 8019514:	4628      	mov	r0, r5
 8019516:	f003 ffe7 	bl	801d4e8 <ucdr_serialize_string>
 801951a:	4606      	mov	r6, r0
 801951c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8019520:	4628      	mov	r0, r5
 8019522:	f7f8 f919 	bl	8011758 <ucdr_serialize_int16_t>
 8019526:	4030      	ands	r0, r6
 8019528:	b2c0      	uxtb	r0, r0
 801952a:	bd70      	pop	{r4, r5, r6, pc}
 801952c:	3104      	adds	r1, #4
 801952e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019532:	f7ff be7b 	b.w	801922c <uxr_serialize_CLIENT_Representation>
 8019536:	3104      	adds	r1, #4
 8019538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801953c:	f7ff bf32 	b.w	80193a4 <uxr_serialize_AGENT_Representation>
 8019540:	2001      	movs	r0, #1
 8019542:	bd70      	pop	{r4, r5, r6, pc}
 8019544:	68a2      	ldr	r2, [r4, #8]
 8019546:	f104 010c 	add.w	r1, r4, #12
 801954a:	4628      	mov	r0, r5
 801954c:	f7f8 ff40 	bl	80123d0 <ucdr_serialize_sequence_uint8_t>
 8019550:	4606      	mov	r6, r0
 8019552:	e7c7      	b.n	80194e4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019554:	68a1      	ldr	r1, [r4, #8]
 8019556:	4628      	mov	r0, r5
 8019558:	f003 ffc6 	bl	801d4e8 <ucdr_serialize_string>
 801955c:	4606      	mov	r6, r0
 801955e:	e7c1      	b.n	80194e4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019560:	68a2      	ldr	r2, [r4, #8]
 8019562:	f104 010c 	add.w	r1, r4, #12
 8019566:	4628      	mov	r0, r5
 8019568:	f7f8 ff32 	bl	80123d0 <ucdr_serialize_sequence_uint8_t>
 801956c:	4606      	mov	r6, r0
 801956e:	e7d5      	b.n	801951c <uxr_serialize_ObjectVariant.part.0+0x94>

08019570 <uxr_deserialize_DATAWRITER_Representation>:
 8019570:	b570      	push	{r4, r5, r6, lr}
 8019572:	4606      	mov	r6, r0
 8019574:	460d      	mov	r5, r1
 8019576:	f7f7 fbc9 	bl	8010d0c <ucdr_deserialize_uint8_t>
 801957a:	4604      	mov	r4, r0
 801957c:	b130      	cbz	r0, 801958c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801957e:	782b      	ldrb	r3, [r5, #0]
 8019580:	2b02      	cmp	r3, #2
 8019582:	d00c      	beq.n	801959e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019584:	2b03      	cmp	r3, #3
 8019586:	d012      	beq.n	80195ae <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8019588:	2b01      	cmp	r3, #1
 801958a:	d008      	beq.n	801959e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801958c:	2202      	movs	r2, #2
 801958e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8019592:	4630      	mov	r0, r6
 8019594:	f7fd f8d4 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019598:	4020      	ands	r0, r4
 801959a:	b2c0      	uxtb	r0, r0
 801959c:	bd70      	pop	{r4, r5, r6, pc}
 801959e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80195a2:	6869      	ldr	r1, [r5, #4]
 80195a4:	4630      	mov	r0, r6
 80195a6:	f003 ffaf 	bl	801d508 <ucdr_deserialize_string>
 80195aa:	4604      	mov	r4, r0
 80195ac:	e7ee      	b.n	801958c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80195ae:	1d2b      	adds	r3, r5, #4
 80195b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80195b4:	f105 0108 	add.w	r1, r5, #8
 80195b8:	4630      	mov	r0, r6
 80195ba:	f7f8 ff1b 	bl	80123f4 <ucdr_deserialize_sequence_uint8_t>
 80195be:	4604      	mov	r4, r0
 80195c0:	e7e4      	b.n	801958c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80195c2:	bf00      	nop

080195c4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80195c4:	b570      	push	{r4, r5, r6, lr}
 80195c6:	460d      	mov	r5, r1
 80195c8:	7809      	ldrb	r1, [r1, #0]
 80195ca:	4606      	mov	r6, r0
 80195cc:	f7f7 fb5a 	bl	8010c84 <ucdr_serialize_bool>
 80195d0:	782b      	ldrb	r3, [r5, #0]
 80195d2:	4604      	mov	r4, r0
 80195d4:	b94b      	cbnz	r3, 80195ea <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80195d6:	7a29      	ldrb	r1, [r5, #8]
 80195d8:	4630      	mov	r0, r6
 80195da:	f7f7 fb53 	bl	8010c84 <ucdr_serialize_bool>
 80195de:	7a2b      	ldrb	r3, [r5, #8]
 80195e0:	4004      	ands	r4, r0
 80195e2:	b2e4      	uxtb	r4, r4
 80195e4:	b943      	cbnz	r3, 80195f8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80195e6:	4620      	mov	r0, r4
 80195e8:	bd70      	pop	{r4, r5, r6, pc}
 80195ea:	6869      	ldr	r1, [r5, #4]
 80195ec:	4630      	mov	r0, r6
 80195ee:	f003 ff7b 	bl	801d4e8 <ucdr_serialize_string>
 80195f2:	4004      	ands	r4, r0
 80195f4:	b2e4      	uxtb	r4, r4
 80195f6:	e7ee      	b.n	80195d6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80195f8:	68e9      	ldr	r1, [r5, #12]
 80195fa:	4630      	mov	r0, r6
 80195fc:	f003 ff74 	bl	801d4e8 <ucdr_serialize_string>
 8019600:	4004      	ands	r4, r0
 8019602:	4620      	mov	r0, r4
 8019604:	bd70      	pop	{r4, r5, r6, pc}
 8019606:	bf00      	nop

08019608 <uxr_serialize_OBJK_Topic_Binary>:
 8019608:	b570      	push	{r4, r5, r6, lr}
 801960a:	460d      	mov	r5, r1
 801960c:	4606      	mov	r6, r0
 801960e:	6809      	ldr	r1, [r1, #0]
 8019610:	f003 ff6a 	bl	801d4e8 <ucdr_serialize_string>
 8019614:	4604      	mov	r4, r0
 8019616:	7929      	ldrb	r1, [r5, #4]
 8019618:	4630      	mov	r0, r6
 801961a:	f7f7 fb33 	bl	8010c84 <ucdr_serialize_bool>
 801961e:	792b      	ldrb	r3, [r5, #4]
 8019620:	4004      	ands	r4, r0
 8019622:	b2e4      	uxtb	r4, r4
 8019624:	b943      	cbnz	r3, 8019638 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019626:	7b29      	ldrb	r1, [r5, #12]
 8019628:	4630      	mov	r0, r6
 801962a:	f7f7 fb2b 	bl	8010c84 <ucdr_serialize_bool>
 801962e:	7b2b      	ldrb	r3, [r5, #12]
 8019630:	4004      	ands	r4, r0
 8019632:	b93b      	cbnz	r3, 8019644 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019634:	4620      	mov	r0, r4
 8019636:	bd70      	pop	{r4, r5, r6, pc}
 8019638:	68a9      	ldr	r1, [r5, #8]
 801963a:	4630      	mov	r0, r6
 801963c:	f003 ff54 	bl	801d4e8 <ucdr_serialize_string>
 8019640:	4004      	ands	r4, r0
 8019642:	e7f0      	b.n	8019626 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019644:	6929      	ldr	r1, [r5, #16]
 8019646:	4630      	mov	r0, r6
 8019648:	f003 ff4e 	bl	801d4e8 <ucdr_serialize_string>
 801964c:	4004      	ands	r4, r0
 801964e:	b2e4      	uxtb	r4, r4
 8019650:	4620      	mov	r0, r4
 8019652:	bd70      	pop	{r4, r5, r6, pc}

08019654 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019658:	460c      	mov	r4, r1
 801965a:	7809      	ldrb	r1, [r1, #0]
 801965c:	4606      	mov	r6, r0
 801965e:	f7f7 fb11 	bl	8010c84 <ucdr_serialize_bool>
 8019662:	7823      	ldrb	r3, [r4, #0]
 8019664:	4605      	mov	r5, r0
 8019666:	b96b      	cbnz	r3, 8019684 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8019668:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801966c:	4630      	mov	r0, r6
 801966e:	f7f7 fb09 	bl	8010c84 <ucdr_serialize_bool>
 8019672:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019676:	4005      	ands	r5, r0
 8019678:	b2ed      	uxtb	r5, r5
 801967a:	2b00      	cmp	r3, #0
 801967c:	d169      	bne.n	8019752 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801967e:	4628      	mov	r0, r5
 8019680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019684:	6861      	ldr	r1, [r4, #4]
 8019686:	4630      	mov	r0, r6
 8019688:	f7f7 fd40 	bl	801110c <ucdr_serialize_uint32_t>
 801968c:	6863      	ldr	r3, [r4, #4]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d06b      	beq.n	801976a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8019692:	2800      	cmp	r0, #0
 8019694:	d067      	beq.n	8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019696:	68a1      	ldr	r1, [r4, #8]
 8019698:	4630      	mov	r0, r6
 801969a:	f003 ff25 	bl	801d4e8 <ucdr_serialize_string>
 801969e:	6863      	ldr	r3, [r4, #4]
 80196a0:	2b01      	cmp	r3, #1
 80196a2:	d953      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80196a4:	2800      	cmp	r0, #0
 80196a6:	d05e      	beq.n	8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80196a8:	68e1      	ldr	r1, [r4, #12]
 80196aa:	4630      	mov	r0, r6
 80196ac:	f003 ff1c 	bl	801d4e8 <ucdr_serialize_string>
 80196b0:	6863      	ldr	r3, [r4, #4]
 80196b2:	2b02      	cmp	r3, #2
 80196b4:	d94a      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80196b6:	2800      	cmp	r0, #0
 80196b8:	d055      	beq.n	8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80196ba:	6921      	ldr	r1, [r4, #16]
 80196bc:	4630      	mov	r0, r6
 80196be:	f003 ff13 	bl	801d4e8 <ucdr_serialize_string>
 80196c2:	6863      	ldr	r3, [r4, #4]
 80196c4:	2b03      	cmp	r3, #3
 80196c6:	d941      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80196c8:	2800      	cmp	r0, #0
 80196ca:	d04c      	beq.n	8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80196cc:	6961      	ldr	r1, [r4, #20]
 80196ce:	4630      	mov	r0, r6
 80196d0:	f003 ff0a 	bl	801d4e8 <ucdr_serialize_string>
 80196d4:	6863      	ldr	r3, [r4, #4]
 80196d6:	2b04      	cmp	r3, #4
 80196d8:	d938      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80196da:	2800      	cmp	r0, #0
 80196dc:	d043      	beq.n	8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80196de:	69a1      	ldr	r1, [r4, #24]
 80196e0:	4630      	mov	r0, r6
 80196e2:	f003 ff01 	bl	801d4e8 <ucdr_serialize_string>
 80196e6:	6863      	ldr	r3, [r4, #4]
 80196e8:	2b05      	cmp	r3, #5
 80196ea:	d92f      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80196ec:	2800      	cmp	r0, #0
 80196ee:	d03a      	beq.n	8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80196f0:	69e1      	ldr	r1, [r4, #28]
 80196f2:	4630      	mov	r0, r6
 80196f4:	f003 fef8 	bl	801d4e8 <ucdr_serialize_string>
 80196f8:	6863      	ldr	r3, [r4, #4]
 80196fa:	2b06      	cmp	r3, #6
 80196fc:	d926      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80196fe:	b390      	cbz	r0, 8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019700:	6a21      	ldr	r1, [r4, #32]
 8019702:	4630      	mov	r0, r6
 8019704:	f003 fef0 	bl	801d4e8 <ucdr_serialize_string>
 8019708:	6863      	ldr	r3, [r4, #4]
 801970a:	2b07      	cmp	r3, #7
 801970c:	d91e      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801970e:	b350      	cbz	r0, 8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019710:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019712:	4630      	mov	r0, r6
 8019714:	f003 fee8 	bl	801d4e8 <ucdr_serialize_string>
 8019718:	6863      	ldr	r3, [r4, #4]
 801971a:	2b08      	cmp	r3, #8
 801971c:	d916      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801971e:	b310      	cbz	r0, 8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019720:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019722:	4630      	mov	r0, r6
 8019724:	f003 fee0 	bl	801d4e8 <ucdr_serialize_string>
 8019728:	6863      	ldr	r3, [r4, #4]
 801972a:	2b09      	cmp	r3, #9
 801972c:	d90e      	bls.n	801974c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801972e:	b1d0      	cbz	r0, 8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019730:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8019734:	2709      	movs	r7, #9
 8019736:	e000      	b.n	801973a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8019738:	b1a8      	cbz	r0, 8019766 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801973a:	f858 1b04 	ldr.w	r1, [r8], #4
 801973e:	4630      	mov	r0, r6
 8019740:	f003 fed2 	bl	801d4e8 <ucdr_serialize_string>
 8019744:	3701      	adds	r7, #1
 8019746:	6862      	ldr	r2, [r4, #4]
 8019748:	4297      	cmp	r7, r2
 801974a:	d3f5      	bcc.n	8019738 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801974c:	4005      	ands	r5, r0
 801974e:	b2ed      	uxtb	r5, r5
 8019750:	e78a      	b.n	8019668 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019752:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019754:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019758:	4630      	mov	r0, r6
 801975a:	f7f8 fe39 	bl	80123d0 <ucdr_serialize_sequence_uint8_t>
 801975e:	4005      	ands	r5, r0
 8019760:	4628      	mov	r0, r5
 8019762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019766:	2500      	movs	r5, #0
 8019768:	e77e      	b.n	8019668 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801976a:	4028      	ands	r0, r5
 801976c:	b2c5      	uxtb	r5, r0
 801976e:	e77b      	b.n	8019668 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08019770 <uxr_serialize_OBJK_Publisher_Binary>:
 8019770:	b570      	push	{r4, r5, r6, lr}
 8019772:	460d      	mov	r5, r1
 8019774:	7809      	ldrb	r1, [r1, #0]
 8019776:	4606      	mov	r6, r0
 8019778:	f7f7 fa84 	bl	8010c84 <ucdr_serialize_bool>
 801977c:	782b      	ldrb	r3, [r5, #0]
 801977e:	4604      	mov	r4, r0
 8019780:	b94b      	cbnz	r3, 8019796 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8019782:	7a29      	ldrb	r1, [r5, #8]
 8019784:	4630      	mov	r0, r6
 8019786:	f7f7 fa7d 	bl	8010c84 <ucdr_serialize_bool>
 801978a:	7a2b      	ldrb	r3, [r5, #8]
 801978c:	4004      	ands	r4, r0
 801978e:	b2e4      	uxtb	r4, r4
 8019790:	b943      	cbnz	r3, 80197a4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8019792:	4620      	mov	r0, r4
 8019794:	bd70      	pop	{r4, r5, r6, pc}
 8019796:	6869      	ldr	r1, [r5, #4]
 8019798:	4630      	mov	r0, r6
 801979a:	f003 fea5 	bl	801d4e8 <ucdr_serialize_string>
 801979e:	4004      	ands	r4, r0
 80197a0:	b2e4      	uxtb	r4, r4
 80197a2:	e7ee      	b.n	8019782 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80197a4:	f105 010c 	add.w	r1, r5, #12
 80197a8:	4630      	mov	r0, r6
 80197aa:	f7ff ff53 	bl	8019654 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80197ae:	4004      	ands	r4, r0
 80197b0:	4620      	mov	r0, r4
 80197b2:	bd70      	pop	{r4, r5, r6, pc}

080197b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80197b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197b8:	460c      	mov	r4, r1
 80197ba:	7809      	ldrb	r1, [r1, #0]
 80197bc:	4606      	mov	r6, r0
 80197be:	f7f7 fa61 	bl	8010c84 <ucdr_serialize_bool>
 80197c2:	7823      	ldrb	r3, [r4, #0]
 80197c4:	4605      	mov	r5, r0
 80197c6:	b96b      	cbnz	r3, 80197e4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80197c8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80197cc:	4630      	mov	r0, r6
 80197ce:	f7f7 fa59 	bl	8010c84 <ucdr_serialize_bool>
 80197d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80197d6:	4005      	ands	r5, r0
 80197d8:	b2ed      	uxtb	r5, r5
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d169      	bne.n	80198b2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80197de:	4628      	mov	r0, r5
 80197e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197e4:	6861      	ldr	r1, [r4, #4]
 80197e6:	4630      	mov	r0, r6
 80197e8:	f7f7 fc90 	bl	801110c <ucdr_serialize_uint32_t>
 80197ec:	6863      	ldr	r3, [r4, #4]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d06b      	beq.n	80198ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80197f2:	2800      	cmp	r0, #0
 80197f4:	d067      	beq.n	80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80197f6:	68a1      	ldr	r1, [r4, #8]
 80197f8:	4630      	mov	r0, r6
 80197fa:	f003 fe75 	bl	801d4e8 <ucdr_serialize_string>
 80197fe:	6863      	ldr	r3, [r4, #4]
 8019800:	2b01      	cmp	r3, #1
 8019802:	d953      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019804:	2800      	cmp	r0, #0
 8019806:	d05e      	beq.n	80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019808:	68e1      	ldr	r1, [r4, #12]
 801980a:	4630      	mov	r0, r6
 801980c:	f003 fe6c 	bl	801d4e8 <ucdr_serialize_string>
 8019810:	6863      	ldr	r3, [r4, #4]
 8019812:	2b02      	cmp	r3, #2
 8019814:	d94a      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019816:	2800      	cmp	r0, #0
 8019818:	d055      	beq.n	80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801981a:	6921      	ldr	r1, [r4, #16]
 801981c:	4630      	mov	r0, r6
 801981e:	f003 fe63 	bl	801d4e8 <ucdr_serialize_string>
 8019822:	6863      	ldr	r3, [r4, #4]
 8019824:	2b03      	cmp	r3, #3
 8019826:	d941      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019828:	2800      	cmp	r0, #0
 801982a:	d04c      	beq.n	80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801982c:	6961      	ldr	r1, [r4, #20]
 801982e:	4630      	mov	r0, r6
 8019830:	f003 fe5a 	bl	801d4e8 <ucdr_serialize_string>
 8019834:	6863      	ldr	r3, [r4, #4]
 8019836:	2b04      	cmp	r3, #4
 8019838:	d938      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801983a:	2800      	cmp	r0, #0
 801983c:	d043      	beq.n	80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801983e:	69a1      	ldr	r1, [r4, #24]
 8019840:	4630      	mov	r0, r6
 8019842:	f003 fe51 	bl	801d4e8 <ucdr_serialize_string>
 8019846:	6863      	ldr	r3, [r4, #4]
 8019848:	2b05      	cmp	r3, #5
 801984a:	d92f      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801984c:	2800      	cmp	r0, #0
 801984e:	d03a      	beq.n	80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019850:	69e1      	ldr	r1, [r4, #28]
 8019852:	4630      	mov	r0, r6
 8019854:	f003 fe48 	bl	801d4e8 <ucdr_serialize_string>
 8019858:	6863      	ldr	r3, [r4, #4]
 801985a:	2b06      	cmp	r3, #6
 801985c:	d926      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801985e:	b390      	cbz	r0, 80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019860:	6a21      	ldr	r1, [r4, #32]
 8019862:	4630      	mov	r0, r6
 8019864:	f003 fe40 	bl	801d4e8 <ucdr_serialize_string>
 8019868:	6863      	ldr	r3, [r4, #4]
 801986a:	2b07      	cmp	r3, #7
 801986c:	d91e      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801986e:	b350      	cbz	r0, 80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019870:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019872:	4630      	mov	r0, r6
 8019874:	f003 fe38 	bl	801d4e8 <ucdr_serialize_string>
 8019878:	6863      	ldr	r3, [r4, #4]
 801987a:	2b08      	cmp	r3, #8
 801987c:	d916      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801987e:	b310      	cbz	r0, 80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019880:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019882:	4630      	mov	r0, r6
 8019884:	f003 fe30 	bl	801d4e8 <ucdr_serialize_string>
 8019888:	6863      	ldr	r3, [r4, #4]
 801988a:	2b09      	cmp	r3, #9
 801988c:	d90e      	bls.n	80198ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801988e:	b1d0      	cbz	r0, 80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019890:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8019894:	2709      	movs	r7, #9
 8019896:	e000      	b.n	801989a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8019898:	b1a8      	cbz	r0, 80198c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801989a:	f858 1b04 	ldr.w	r1, [r8], #4
 801989e:	4630      	mov	r0, r6
 80198a0:	f003 fe22 	bl	801d4e8 <ucdr_serialize_string>
 80198a4:	3701      	adds	r7, #1
 80198a6:	6862      	ldr	r2, [r4, #4]
 80198a8:	4297      	cmp	r7, r2
 80198aa:	d3f5      	bcc.n	8019898 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80198ac:	4005      	ands	r5, r0
 80198ae:	b2ed      	uxtb	r5, r5
 80198b0:	e78a      	b.n	80197c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80198b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80198b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80198b8:	4630      	mov	r0, r6
 80198ba:	f7f8 fd89 	bl	80123d0 <ucdr_serialize_sequence_uint8_t>
 80198be:	4005      	ands	r5, r0
 80198c0:	4628      	mov	r0, r5
 80198c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198c6:	2500      	movs	r5, #0
 80198c8:	e77e      	b.n	80197c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80198ca:	4028      	ands	r0, r5
 80198cc:	b2c5      	uxtb	r5, r0
 80198ce:	e77b      	b.n	80197c8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080198d0 <uxr_serialize_OBJK_Subscriber_Binary>:
 80198d0:	b570      	push	{r4, r5, r6, lr}
 80198d2:	460d      	mov	r5, r1
 80198d4:	7809      	ldrb	r1, [r1, #0]
 80198d6:	4606      	mov	r6, r0
 80198d8:	f7f7 f9d4 	bl	8010c84 <ucdr_serialize_bool>
 80198dc:	782b      	ldrb	r3, [r5, #0]
 80198de:	4604      	mov	r4, r0
 80198e0:	b94b      	cbnz	r3, 80198f6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80198e2:	7a29      	ldrb	r1, [r5, #8]
 80198e4:	4630      	mov	r0, r6
 80198e6:	f7f7 f9cd 	bl	8010c84 <ucdr_serialize_bool>
 80198ea:	7a2b      	ldrb	r3, [r5, #8]
 80198ec:	4004      	ands	r4, r0
 80198ee:	b2e4      	uxtb	r4, r4
 80198f0:	b943      	cbnz	r3, 8019904 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80198f2:	4620      	mov	r0, r4
 80198f4:	bd70      	pop	{r4, r5, r6, pc}
 80198f6:	6869      	ldr	r1, [r5, #4]
 80198f8:	4630      	mov	r0, r6
 80198fa:	f003 fdf5 	bl	801d4e8 <ucdr_serialize_string>
 80198fe:	4004      	ands	r4, r0
 8019900:	b2e4      	uxtb	r4, r4
 8019902:	e7ee      	b.n	80198e2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8019904:	f105 010c 	add.w	r1, r5, #12
 8019908:	4630      	mov	r0, r6
 801990a:	f7ff ff53 	bl	80197b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801990e:	4004      	ands	r4, r0
 8019910:	4620      	mov	r0, r4
 8019912:	bd70      	pop	{r4, r5, r6, pc}

08019914 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8019914:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8019918:	4688      	mov	r8, r1
 801991a:	4681      	mov	r9, r0
 801991c:	8809      	ldrh	r1, [r1, #0]
 801991e:	f7f7 fa0b 	bl	8010d38 <ucdr_serialize_uint16_t>
 8019922:	4606      	mov	r6, r0
 8019924:	f898 1002 	ldrb.w	r1, [r8, #2]
 8019928:	4648      	mov	r0, r9
 801992a:	f7f7 f9ab 	bl	8010c84 <ucdr_serialize_bool>
 801992e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019932:	4006      	ands	r6, r0
 8019934:	b2f5      	uxtb	r5, r6
 8019936:	b9eb      	cbnz	r3, 8019974 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8019938:	f898 1006 	ldrb.w	r1, [r8, #6]
 801993c:	4648      	mov	r0, r9
 801993e:	f7f7 f9a1 	bl	8010c84 <ucdr_serialize_bool>
 8019942:	f898 3006 	ldrb.w	r3, [r8, #6]
 8019946:	4005      	ands	r5, r0
 8019948:	bb7b      	cbnz	r3, 80199aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801994a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801994e:	4648      	mov	r0, r9
 8019950:	f7f7 f998 	bl	8010c84 <ucdr_serialize_bool>
 8019954:	f898 300c 	ldrb.w	r3, [r8, #12]
 8019958:	4005      	ands	r5, r0
 801995a:	b9f3      	cbnz	r3, 801999a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801995c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8019960:	4648      	mov	r0, r9
 8019962:	f7f7 f98f 	bl	8010c84 <ucdr_serialize_bool>
 8019966:	f898 3014 	ldrb.w	r3, [r8, #20]
 801996a:	4005      	ands	r5, r0
 801996c:	b94b      	cbnz	r3, 8019982 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801996e:	4628      	mov	r0, r5
 8019970:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8019974:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8019978:	4648      	mov	r0, r9
 801997a:	f7f7 f9dd 	bl	8010d38 <ucdr_serialize_uint16_t>
 801997e:	4005      	ands	r5, r0
 8019980:	e7da      	b.n	8019938 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8019982:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8019986:	f108 011c 	add.w	r1, r8, #28
 801998a:	4648      	mov	r0, r9
 801998c:	f7f8 fd20 	bl	80123d0 <ucdr_serialize_sequence_uint8_t>
 8019990:	4028      	ands	r0, r5
 8019992:	b2c5      	uxtb	r5, r0
 8019994:	4628      	mov	r0, r5
 8019996:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801999a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801999e:	4648      	mov	r0, r9
 80199a0:	f7f7 fbb4 	bl	801110c <ucdr_serialize_uint32_t>
 80199a4:	4028      	ands	r0, r5
 80199a6:	b2c5      	uxtb	r5, r0
 80199a8:	e7d8      	b.n	801995c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80199aa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80199ae:	4648      	mov	r0, r9
 80199b0:	f7f7 fbac 	bl	801110c <ucdr_serialize_uint32_t>
 80199b4:	4028      	ands	r0, r5
 80199b6:	b2c5      	uxtb	r5, r0
 80199b8:	e7c7      	b.n	801994a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80199ba:	bf00      	nop

080199bc <uxr_serialize_OBJK_DataReader_Binary>:
 80199bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199be:	2202      	movs	r2, #2
 80199c0:	460c      	mov	r4, r1
 80199c2:	4606      	mov	r6, r0
 80199c4:	f7fc fe58 	bl	8016678 <ucdr_serialize_array_uint8_t>
 80199c8:	4605      	mov	r5, r0
 80199ca:	78a1      	ldrb	r1, [r4, #2]
 80199cc:	4630      	mov	r0, r6
 80199ce:	f7f7 f959 	bl	8010c84 <ucdr_serialize_bool>
 80199d2:	78a3      	ldrb	r3, [r4, #2]
 80199d4:	4005      	ands	r5, r0
 80199d6:	b2ed      	uxtb	r5, r5
 80199d8:	b90b      	cbnz	r3, 80199de <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80199da:	4628      	mov	r0, r5
 80199dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199de:	f104 0108 	add.w	r1, r4, #8
 80199e2:	4630      	mov	r0, r6
 80199e4:	f7ff ff96 	bl	8019914 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80199e8:	4607      	mov	r7, r0
 80199ea:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80199ee:	4630      	mov	r0, r6
 80199f0:	f7f7 f948 	bl	8010c84 <ucdr_serialize_bool>
 80199f4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80199f8:	4038      	ands	r0, r7
 80199fa:	b2c7      	uxtb	r7, r0
 80199fc:	b95b      	cbnz	r3, 8019a16 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80199fe:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8019a02:	4630      	mov	r0, r6
 8019a04:	f7f7 f93e 	bl	8010c84 <ucdr_serialize_bool>
 8019a08:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019a0c:	4007      	ands	r7, r0
 8019a0e:	b94b      	cbnz	r3, 8019a24 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8019a10:	403d      	ands	r5, r7
 8019a12:	4628      	mov	r0, r5
 8019a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a16:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8019a1a:	4630      	mov	r0, r6
 8019a1c:	f7f7 fdcc 	bl	80115b8 <ucdr_serialize_uint64_t>
 8019a20:	4007      	ands	r7, r0
 8019a22:	e7ec      	b.n	80199fe <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8019a24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019a26:	4630      	mov	r0, r6
 8019a28:	f003 fd5e 	bl	801d4e8 <ucdr_serialize_string>
 8019a2c:	4007      	ands	r7, r0
 8019a2e:	b2ff      	uxtb	r7, r7
 8019a30:	e7ee      	b.n	8019a10 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8019a32:	bf00      	nop

08019a34 <uxr_serialize_OBJK_DataWriter_Binary>:
 8019a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a36:	2202      	movs	r2, #2
 8019a38:	460d      	mov	r5, r1
 8019a3a:	4606      	mov	r6, r0
 8019a3c:	f7fc fe1c 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019a40:	4604      	mov	r4, r0
 8019a42:	78a9      	ldrb	r1, [r5, #2]
 8019a44:	4630      	mov	r0, r6
 8019a46:	f7f7 f91d 	bl	8010c84 <ucdr_serialize_bool>
 8019a4a:	78ab      	ldrb	r3, [r5, #2]
 8019a4c:	4004      	ands	r4, r0
 8019a4e:	b2e4      	uxtb	r4, r4
 8019a50:	b90b      	cbnz	r3, 8019a56 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8019a52:	4620      	mov	r0, r4
 8019a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a56:	f105 0108 	add.w	r1, r5, #8
 8019a5a:	4630      	mov	r0, r6
 8019a5c:	f7ff ff5a 	bl	8019914 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8019a60:	4607      	mov	r7, r0
 8019a62:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8019a66:	4630      	mov	r0, r6
 8019a68:	f7f7 f90c 	bl	8010c84 <ucdr_serialize_bool>
 8019a6c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8019a70:	4038      	ands	r0, r7
 8019a72:	b2c7      	uxtb	r7, r0
 8019a74:	b913      	cbnz	r3, 8019a7c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8019a76:	403c      	ands	r4, r7
 8019a78:	4620      	mov	r0, r4
 8019a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a7c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8019a80:	4630      	mov	r0, r6
 8019a82:	f7f7 fd99 	bl	80115b8 <ucdr_serialize_uint64_t>
 8019a86:	4007      	ands	r7, r0
 8019a88:	e7f5      	b.n	8019a76 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8019a8a:	bf00      	nop

08019a8c <uxr_serialize_OBJK_Replier_Binary>:
 8019a8c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8019a90:	460f      	mov	r7, r1
 8019a92:	4680      	mov	r8, r0
 8019a94:	6809      	ldr	r1, [r1, #0]
 8019a96:	f003 fd27 	bl	801d4e8 <ucdr_serialize_string>
 8019a9a:	4605      	mov	r5, r0
 8019a9c:	6879      	ldr	r1, [r7, #4]
 8019a9e:	4640      	mov	r0, r8
 8019aa0:	f003 fd22 	bl	801d4e8 <ucdr_serialize_string>
 8019aa4:	4005      	ands	r5, r0
 8019aa6:	68b9      	ldr	r1, [r7, #8]
 8019aa8:	4640      	mov	r0, r8
 8019aaa:	b2ec      	uxtb	r4, r5
 8019aac:	f003 fd1c 	bl	801d4e8 <ucdr_serialize_string>
 8019ab0:	7b39      	ldrb	r1, [r7, #12]
 8019ab2:	4004      	ands	r4, r0
 8019ab4:	4640      	mov	r0, r8
 8019ab6:	f7f7 f8e5 	bl	8010c84 <ucdr_serialize_bool>
 8019aba:	7b3b      	ldrb	r3, [r7, #12]
 8019abc:	4004      	ands	r4, r0
 8019abe:	b94b      	cbnz	r3, 8019ad4 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8019ac0:	7d39      	ldrb	r1, [r7, #20]
 8019ac2:	4640      	mov	r0, r8
 8019ac4:	f7f7 f8de 	bl	8010c84 <ucdr_serialize_bool>
 8019ac8:	7d3b      	ldrb	r3, [r7, #20]
 8019aca:	4004      	ands	r4, r0
 8019acc:	b943      	cbnz	r3, 8019ae0 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8019ace:	4620      	mov	r0, r4
 8019ad0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8019ad4:	6939      	ldr	r1, [r7, #16]
 8019ad6:	4640      	mov	r0, r8
 8019ad8:	f003 fd06 	bl	801d4e8 <ucdr_serialize_string>
 8019adc:	4004      	ands	r4, r0
 8019ade:	e7ef      	b.n	8019ac0 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8019ae0:	69b9      	ldr	r1, [r7, #24]
 8019ae2:	4640      	mov	r0, r8
 8019ae4:	f003 fd00 	bl	801d4e8 <ucdr_serialize_string>
 8019ae8:	4004      	ands	r4, r0
 8019aea:	b2e4      	uxtb	r4, r4
 8019aec:	4620      	mov	r0, r4
 8019aee:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8019af2:	bf00      	nop

08019af4 <uxr_deserialize_ObjectVariant>:
 8019af4:	b570      	push	{r4, r5, r6, lr}
 8019af6:	4605      	mov	r5, r0
 8019af8:	460e      	mov	r6, r1
 8019afa:	f7f7 f907 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019afe:	b168      	cbz	r0, 8019b1c <uxr_deserialize_ObjectVariant+0x28>
 8019b00:	7833      	ldrb	r3, [r6, #0]
 8019b02:	4604      	mov	r4, r0
 8019b04:	3b01      	subs	r3, #1
 8019b06:	2b0d      	cmp	r3, #13
 8019b08:	d809      	bhi.n	8019b1e <uxr_deserialize_ObjectVariant+0x2a>
 8019b0a:	e8df f003 	tbb	[pc, r3]
 8019b0e:	0a41      	.short	0x0a41
 8019b10:	0a0a2323 	.word	0x0a0a2323
 8019b14:	10080a0a 	.word	0x10080a0a
 8019b18:	565c1010 	.word	0x565c1010
 8019b1c:	2400      	movs	r4, #0
 8019b1e:	4620      	mov	r0, r4
 8019b20:	bd70      	pop	{r4, r5, r6, pc}
 8019b22:	1d31      	adds	r1, r6, #4
 8019b24:	4628      	mov	r0, r5
 8019b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b2a:	f7ff bd21 	b.w	8019570 <uxr_deserialize_DATAWRITER_Representation>
 8019b2e:	1d31      	adds	r1, r6, #4
 8019b30:	4628      	mov	r0, r5
 8019b32:	f7f7 f8eb 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019b36:	2800      	cmp	r0, #0
 8019b38:	d0f0      	beq.n	8019b1c <uxr_deserialize_ObjectVariant+0x28>
 8019b3a:	7933      	ldrb	r3, [r6, #4]
 8019b3c:	2b01      	cmp	r3, #1
 8019b3e:	d001      	beq.n	8019b44 <uxr_deserialize_ObjectVariant+0x50>
 8019b40:	2b02      	cmp	r3, #2
 8019b42:	d1ec      	bne.n	8019b1e <uxr_deserialize_ObjectVariant+0x2a>
 8019b44:	68b1      	ldr	r1, [r6, #8]
 8019b46:	4628      	mov	r0, r5
 8019b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b50:	f003 bcda 	b.w	801d508 <ucdr_deserialize_string>
 8019b54:	1d31      	adds	r1, r6, #4
 8019b56:	4628      	mov	r0, r5
 8019b58:	f7f7 f8d8 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019b5c:	4604      	mov	r4, r0
 8019b5e:	b170      	cbz	r0, 8019b7e <uxr_deserialize_ObjectVariant+0x8a>
 8019b60:	7933      	ldrb	r3, [r6, #4]
 8019b62:	2b02      	cmp	r3, #2
 8019b64:	d04c      	beq.n	8019c00 <uxr_deserialize_ObjectVariant+0x10c>
 8019b66:	2b03      	cmp	r3, #3
 8019b68:	d109      	bne.n	8019b7e <uxr_deserialize_ObjectVariant+0x8a>
 8019b6a:	f106 0308 	add.w	r3, r6, #8
 8019b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019b72:	f106 010c 	add.w	r1, r6, #12
 8019b76:	4628      	mov	r0, r5
 8019b78:	f7f8 fc3c 	bl	80123f4 <ucdr_deserialize_sequence_uint8_t>
 8019b7c:	4604      	mov	r4, r0
 8019b7e:	2202      	movs	r2, #2
 8019b80:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8019b84:	4628      	mov	r0, r5
 8019b86:	f7fc fddb 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019b8a:	4020      	ands	r0, r4
 8019b8c:	b2c4      	uxtb	r4, r0
 8019b8e:	e7c6      	b.n	8019b1e <uxr_deserialize_ObjectVariant+0x2a>
 8019b90:	1d31      	adds	r1, r6, #4
 8019b92:	4628      	mov	r0, r5
 8019b94:	f7f7 f8ba 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019b98:	4604      	mov	r4, r0
 8019b9a:	b130      	cbz	r0, 8019baa <uxr_deserialize_ObjectVariant+0xb6>
 8019b9c:	7933      	ldrb	r3, [r6, #4]
 8019b9e:	2b02      	cmp	r3, #2
 8019ba0:	d036      	beq.n	8019c10 <uxr_deserialize_ObjectVariant+0x11c>
 8019ba2:	2b03      	cmp	r3, #3
 8019ba4:	d03c      	beq.n	8019c20 <uxr_deserialize_ObjectVariant+0x12c>
 8019ba6:	2b01      	cmp	r3, #1
 8019ba8:	d032      	beq.n	8019c10 <uxr_deserialize_ObjectVariant+0x11c>
 8019baa:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8019bae:	4628      	mov	r0, r5
 8019bb0:	f7f7 fe52 	bl	8011858 <ucdr_deserialize_int16_t>
 8019bb4:	4020      	ands	r0, r4
 8019bb6:	b2c4      	uxtb	r4, r0
 8019bb8:	e7b1      	b.n	8019b1e <uxr_deserialize_ObjectVariant+0x2a>
 8019bba:	1d31      	adds	r1, r6, #4
 8019bbc:	4628      	mov	r0, r5
 8019bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bc2:	f7ff bb8b 	b.w	80192dc <uxr_deserialize_CLIENT_Representation>
 8019bc6:	2204      	movs	r2, #4
 8019bc8:	4628      	mov	r0, r5
 8019bca:	18b1      	adds	r1, r6, r2
 8019bcc:	f7fc fdb8 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019bd0:	4604      	mov	r4, r0
 8019bd2:	2202      	movs	r2, #2
 8019bd4:	f106 0108 	add.w	r1, r6, #8
 8019bd8:	4628      	mov	r0, r5
 8019bda:	f7fc fdb1 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019bde:	4004      	ands	r4, r0
 8019be0:	2202      	movs	r2, #2
 8019be2:	f106 010a 	add.w	r1, r6, #10
 8019be6:	4628      	mov	r0, r5
 8019be8:	b2e4      	uxtb	r4, r4
 8019bea:	f7fc fda9 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019bee:	4603      	mov	r3, r0
 8019bf0:	f106 010c 	add.w	r1, r6, #12
 8019bf4:	4628      	mov	r0, r5
 8019bf6:	401c      	ands	r4, r3
 8019bf8:	f7f7 f85a 	bl	8010cb0 <ucdr_deserialize_bool>
 8019bfc:	4004      	ands	r4, r0
 8019bfe:	e78e      	b.n	8019b1e <uxr_deserialize_ObjectVariant+0x2a>
 8019c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c04:	68b1      	ldr	r1, [r6, #8]
 8019c06:	4628      	mov	r0, r5
 8019c08:	f003 fc7e 	bl	801d508 <ucdr_deserialize_string>
 8019c0c:	4604      	mov	r4, r0
 8019c0e:	e7b6      	b.n	8019b7e <uxr_deserialize_ObjectVariant+0x8a>
 8019c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c14:	68b1      	ldr	r1, [r6, #8]
 8019c16:	4628      	mov	r0, r5
 8019c18:	f003 fc76 	bl	801d508 <ucdr_deserialize_string>
 8019c1c:	4604      	mov	r4, r0
 8019c1e:	e7c4      	b.n	8019baa <uxr_deserialize_ObjectVariant+0xb6>
 8019c20:	f106 0308 	add.w	r3, r6, #8
 8019c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c28:	f106 010c 	add.w	r1, r6, #12
 8019c2c:	4628      	mov	r0, r5
 8019c2e:	f7f8 fbe1 	bl	80123f4 <ucdr_deserialize_sequence_uint8_t>
 8019c32:	4604      	mov	r4, r0
 8019c34:	e7b9      	b.n	8019baa <uxr_deserialize_ObjectVariant+0xb6>
 8019c36:	bf00      	nop

08019c38 <uxr_deserialize_BaseObjectRequest>:
 8019c38:	b570      	push	{r4, r5, r6, lr}
 8019c3a:	2202      	movs	r2, #2
 8019c3c:	4605      	mov	r5, r0
 8019c3e:	460e      	mov	r6, r1
 8019c40:	f7fc fd7e 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019c44:	2202      	movs	r2, #2
 8019c46:	4604      	mov	r4, r0
 8019c48:	4628      	mov	r0, r5
 8019c4a:	18b1      	adds	r1, r6, r2
 8019c4c:	f7fc fd78 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019c50:	4020      	ands	r0, r4
 8019c52:	b2c0      	uxtb	r0, r0
 8019c54:	bd70      	pop	{r4, r5, r6, pc}
 8019c56:	bf00      	nop

08019c58 <uxr_serialize_ActivityInfoVariant>:
 8019c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c5c:	460e      	mov	r6, r1
 8019c5e:	7809      	ldrb	r1, [r1, #0]
 8019c60:	4680      	mov	r8, r0
 8019c62:	f7f7 f83d 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019c66:	4607      	mov	r7, r0
 8019c68:	b138      	cbz	r0, 8019c7a <uxr_serialize_ActivityInfoVariant+0x22>
 8019c6a:	7833      	ldrb	r3, [r6, #0]
 8019c6c:	2b06      	cmp	r3, #6
 8019c6e:	f000 8081 	beq.w	8019d74 <uxr_serialize_ActivityInfoVariant+0x11c>
 8019c72:	2b0d      	cmp	r3, #13
 8019c74:	d014      	beq.n	8019ca0 <uxr_serialize_ActivityInfoVariant+0x48>
 8019c76:	2b05      	cmp	r3, #5
 8019c78:	d002      	beq.n	8019c80 <uxr_serialize_ActivityInfoVariant+0x28>
 8019c7a:	4638      	mov	r0, r7
 8019c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c80:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019c84:	4640      	mov	r0, r8
 8019c86:	f7f7 fd67 	bl	8011758 <ucdr_serialize_int16_t>
 8019c8a:	4607      	mov	r7, r0
 8019c8c:	4640      	mov	r0, r8
 8019c8e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8019c92:	f7f7 fc91 	bl	80115b8 <ucdr_serialize_uint64_t>
 8019c96:	4038      	ands	r0, r7
 8019c98:	b2c7      	uxtb	r7, r0
 8019c9a:	4638      	mov	r0, r7
 8019c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ca0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019ca4:	4640      	mov	r0, r8
 8019ca6:	f7f7 fd57 	bl	8011758 <ucdr_serialize_int16_t>
 8019caa:	68f1      	ldr	r1, [r6, #12]
 8019cac:	4607      	mov	r7, r0
 8019cae:	4640      	mov	r0, r8
 8019cb0:	f7f7 fa2c 	bl	801110c <ucdr_serialize_uint32_t>
 8019cb4:	68f3      	ldr	r3, [r6, #12]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d0ed      	beq.n	8019c96 <uxr_serialize_ActivityInfoVariant+0x3e>
 8019cba:	b318      	cbz	r0, 8019d04 <uxr_serialize_ActivityInfoVariant+0xac>
 8019cbc:	f106 090c 	add.w	r9, r6, #12
 8019cc0:	2400      	movs	r4, #0
 8019cc2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8019cc6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8019cca:	7c29      	ldrb	r1, [r5, #16]
 8019ccc:	4640      	mov	r0, r8
 8019cce:	f7f7 f807 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019cd2:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8019cd6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8019cda:	2800      	cmp	r0, #0
 8019cdc:	d051      	beq.n	8019d82 <uxr_serialize_ActivityInfoVariant+0x12a>
 8019cde:	7c2b      	ldrb	r3, [r5, #16]
 8019ce0:	00c9      	lsls	r1, r1, #3
 8019ce2:	2b03      	cmp	r3, #3
 8019ce4:	d854      	bhi.n	8019d90 <uxr_serialize_ActivityInfoVariant+0x138>
 8019ce6:	e8df f003 	tbb	[pc, r3]
 8019cea:	2133      	.short	0x2133
 8019cec:	020f      	.short	0x020f
 8019cee:	4449      	add	r1, r9
 8019cf0:	4640      	mov	r0, r8
 8019cf2:	6889      	ldr	r1, [r1, #8]
 8019cf4:	f003 fbf8 	bl	801d4e8 <ucdr_serialize_string>
 8019cf8:	3401      	adds	r4, #1
 8019cfa:	68f2      	ldr	r2, [r6, #12]
 8019cfc:	4294      	cmp	r4, r2
 8019cfe:	d244      	bcs.n	8019d8a <uxr_serialize_ActivityInfoVariant+0x132>
 8019d00:	2800      	cmp	r0, #0
 8019d02:	d1de      	bne.n	8019cc2 <uxr_serialize_ActivityInfoVariant+0x6a>
 8019d04:	2700      	movs	r7, #0
 8019d06:	e7b8      	b.n	8019c7a <uxr_serialize_ActivityInfoVariant+0x22>
 8019d08:	3108      	adds	r1, #8
 8019d0a:	44a2      	add	sl, r4
 8019d0c:	2210      	movs	r2, #16
 8019d0e:	4640      	mov	r0, r8
 8019d10:	4449      	add	r1, r9
 8019d12:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8019d16:	f7fc fcaf 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019d1a:	4605      	mov	r5, r0
 8019d1c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8019d20:	4640      	mov	r0, r8
 8019d22:	f7f7 f9f3 	bl	801110c <ucdr_serialize_uint32_t>
 8019d26:	4028      	ands	r0, r5
 8019d28:	b2c0      	uxtb	r0, r0
 8019d2a:	e7e5      	b.n	8019cf8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8019d2c:	3108      	adds	r1, #8
 8019d2e:	44a2      	add	sl, r4
 8019d30:	2204      	movs	r2, #4
 8019d32:	4640      	mov	r0, r8
 8019d34:	4449      	add	r1, r9
 8019d36:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8019d3a:	f7fc fc9d 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019d3e:	4605      	mov	r5, r0
 8019d40:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8019d44:	4640      	mov	r0, r8
 8019d46:	f7f6 fff7 	bl	8010d38 <ucdr_serialize_uint16_t>
 8019d4a:	4028      	ands	r0, r5
 8019d4c:	b2c0      	uxtb	r0, r0
 8019d4e:	e7d3      	b.n	8019cf8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8019d50:	3108      	adds	r1, #8
 8019d52:	44a2      	add	sl, r4
 8019d54:	2202      	movs	r2, #2
 8019d56:	4640      	mov	r0, r8
 8019d58:	4449      	add	r1, r9
 8019d5a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8019d5e:	f7fc fc8b 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019d62:	4605      	mov	r5, r0
 8019d64:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8019d68:	4640      	mov	r0, r8
 8019d6a:	f7f6 ffb9 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019d6e:	4028      	ands	r0, r5
 8019d70:	b2c0      	uxtb	r0, r0
 8019d72:	e7c1      	b.n	8019cf8 <uxr_serialize_ActivityInfoVariant+0xa0>
 8019d74:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019d78:	4640      	mov	r0, r8
 8019d7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d7e:	f7f7 bceb 	b.w	8011758 <ucdr_serialize_int16_t>
 8019d82:	3401      	adds	r4, #1
 8019d84:	68f2      	ldr	r2, [r6, #12]
 8019d86:	42a2      	cmp	r2, r4
 8019d88:	d8bc      	bhi.n	8019d04 <uxr_serialize_ActivityInfoVariant+0xac>
 8019d8a:	4007      	ands	r7, r0
 8019d8c:	b2ff      	uxtb	r7, r7
 8019d8e:	e774      	b.n	8019c7a <uxr_serialize_ActivityInfoVariant+0x22>
 8019d90:	3401      	adds	r4, #1
 8019d92:	68f3      	ldr	r3, [r6, #12]
 8019d94:	3518      	adds	r5, #24
 8019d96:	429c      	cmp	r4, r3
 8019d98:	d397      	bcc.n	8019cca <uxr_serialize_ActivityInfoVariant+0x72>
 8019d9a:	e76e      	b.n	8019c7a <uxr_serialize_ActivityInfoVariant+0x22>

08019d9c <uxr_deserialize_BaseObjectReply>:
 8019d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019da0:	2202      	movs	r2, #2
 8019da2:	4606      	mov	r6, r0
 8019da4:	460f      	mov	r7, r1
 8019da6:	f7fc fccb 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019daa:	2202      	movs	r2, #2
 8019dac:	4605      	mov	r5, r0
 8019dae:	4630      	mov	r0, r6
 8019db0:	18b9      	adds	r1, r7, r2
 8019db2:	f7fc fcc5 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019db6:	4680      	mov	r8, r0
 8019db8:	1d39      	adds	r1, r7, #4
 8019dba:	4630      	mov	r0, r6
 8019dbc:	f7f6 ffa6 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019dc0:	ea05 0508 	and.w	r5, r5, r8
 8019dc4:	4604      	mov	r4, r0
 8019dc6:	1d79      	adds	r1, r7, #5
 8019dc8:	4630      	mov	r0, r6
 8019dca:	402c      	ands	r4, r5
 8019dcc:	f7f6 ff9e 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019dd0:	4020      	ands	r0, r4
 8019dd2:	b2c0      	uxtb	r0, r0
 8019dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019dd8 <uxr_serialize_ReadSpecification>:
 8019dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dda:	460e      	mov	r6, r1
 8019ddc:	4607      	mov	r7, r0
 8019dde:	7809      	ldrb	r1, [r1, #0]
 8019de0:	f7f6 ff7e 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019de4:	4604      	mov	r4, r0
 8019de6:	7871      	ldrb	r1, [r6, #1]
 8019de8:	4638      	mov	r0, r7
 8019dea:	f7f6 ff79 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019dee:	4004      	ands	r4, r0
 8019df0:	78b1      	ldrb	r1, [r6, #2]
 8019df2:	4638      	mov	r0, r7
 8019df4:	f7f6 ff46 	bl	8010c84 <ucdr_serialize_bool>
 8019df8:	78b3      	ldrb	r3, [r6, #2]
 8019dfa:	b2e4      	uxtb	r4, r4
 8019dfc:	4004      	ands	r4, r0
 8019dfe:	b943      	cbnz	r3, 8019e12 <uxr_serialize_ReadSpecification+0x3a>
 8019e00:	7a31      	ldrb	r1, [r6, #8]
 8019e02:	4638      	mov	r0, r7
 8019e04:	f7f6 ff3e 	bl	8010c84 <ucdr_serialize_bool>
 8019e08:	7a33      	ldrb	r3, [r6, #8]
 8019e0a:	4004      	ands	r4, r0
 8019e0c:	b93b      	cbnz	r3, 8019e1e <uxr_serialize_ReadSpecification+0x46>
 8019e0e:	4620      	mov	r0, r4
 8019e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e12:	6871      	ldr	r1, [r6, #4]
 8019e14:	4638      	mov	r0, r7
 8019e16:	f003 fb67 	bl	801d4e8 <ucdr_serialize_string>
 8019e1a:	4004      	ands	r4, r0
 8019e1c:	e7f0      	b.n	8019e00 <uxr_serialize_ReadSpecification+0x28>
 8019e1e:	8971      	ldrh	r1, [r6, #10]
 8019e20:	4638      	mov	r0, r7
 8019e22:	f7f6 ff89 	bl	8010d38 <ucdr_serialize_uint16_t>
 8019e26:	4605      	mov	r5, r0
 8019e28:	89b1      	ldrh	r1, [r6, #12]
 8019e2a:	4638      	mov	r0, r7
 8019e2c:	f7f6 ff84 	bl	8010d38 <ucdr_serialize_uint16_t>
 8019e30:	4005      	ands	r5, r0
 8019e32:	89f1      	ldrh	r1, [r6, #14]
 8019e34:	4638      	mov	r0, r7
 8019e36:	b2ed      	uxtb	r5, r5
 8019e38:	f7f6 ff7e 	bl	8010d38 <ucdr_serialize_uint16_t>
 8019e3c:	8a31      	ldrh	r1, [r6, #16]
 8019e3e:	4025      	ands	r5, r4
 8019e40:	4604      	mov	r4, r0
 8019e42:	4638      	mov	r0, r7
 8019e44:	4025      	ands	r5, r4
 8019e46:	f7f6 ff77 	bl	8010d38 <ucdr_serialize_uint16_t>
 8019e4a:	ea00 0405 	and.w	r4, r0, r5
 8019e4e:	4620      	mov	r0, r4
 8019e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e52:	bf00      	nop

08019e54 <uxr_serialize_CREATE_CLIENT_Payload>:
 8019e54:	f7ff b9ea 	b.w	801922c <uxr_serialize_CLIENT_Representation>

08019e58 <uxr_serialize_CREATE_Payload>:
 8019e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e5a:	2202      	movs	r2, #2
 8019e5c:	4607      	mov	r7, r0
 8019e5e:	460e      	mov	r6, r1
 8019e60:	f7fc fc0a 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019e64:	2202      	movs	r2, #2
 8019e66:	4605      	mov	r5, r0
 8019e68:	4638      	mov	r0, r7
 8019e6a:	18b1      	adds	r1, r6, r2
 8019e6c:	f7fc fc04 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019e70:	7931      	ldrb	r1, [r6, #4]
 8019e72:	4604      	mov	r4, r0
 8019e74:	4638      	mov	r0, r7
 8019e76:	f7f6 ff33 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019e7a:	b170      	cbz	r0, 8019e9a <uxr_serialize_CREATE_Payload+0x42>
 8019e7c:	7933      	ldrb	r3, [r6, #4]
 8019e7e:	402c      	ands	r4, r5
 8019e80:	3b01      	subs	r3, #1
 8019e82:	b2e4      	uxtb	r4, r4
 8019e84:	2b0d      	cmp	r3, #13
 8019e86:	d809      	bhi.n	8019e9c <uxr_serialize_CREATE_Payload+0x44>
 8019e88:	e8df f003 	tbb	[pc, r3]
 8019e8c:	23230a4c 	.word	0x23230a4c
 8019e90:	0a0a0a0a 	.word	0x0a0a0a0a
 8019e94:	12121208 	.word	0x12121208
 8019e98:	3e45      	.short	0x3e45
 8019e9a:	2400      	movs	r4, #0
 8019e9c:	4620      	mov	r0, r4
 8019e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ea0:	f106 0108 	add.w	r1, r6, #8
 8019ea4:	4638      	mov	r0, r7
 8019ea6:	f7ff fac7 	bl	8019438 <uxr_serialize_DATAWRITER_Representation>
 8019eaa:	4004      	ands	r4, r0
 8019eac:	4620      	mov	r0, r4
 8019eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019eb0:	7a31      	ldrb	r1, [r6, #8]
 8019eb2:	4638      	mov	r0, r7
 8019eb4:	f7f6 ff14 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	d0ee      	beq.n	8019e9a <uxr_serialize_CREATE_Payload+0x42>
 8019ebc:	7a33      	ldrb	r3, [r6, #8]
 8019ebe:	2b01      	cmp	r3, #1
 8019ec0:	d001      	beq.n	8019ec6 <uxr_serialize_CREATE_Payload+0x6e>
 8019ec2:	2b02      	cmp	r3, #2
 8019ec4:	d1ea      	bne.n	8019e9c <uxr_serialize_CREATE_Payload+0x44>
 8019ec6:	68f1      	ldr	r1, [r6, #12]
 8019ec8:	4638      	mov	r0, r7
 8019eca:	f003 fb0d 	bl	801d4e8 <ucdr_serialize_string>
 8019ece:	4004      	ands	r4, r0
 8019ed0:	e7e4      	b.n	8019e9c <uxr_serialize_CREATE_Payload+0x44>
 8019ed2:	7a31      	ldrb	r1, [r6, #8]
 8019ed4:	4638      	mov	r0, r7
 8019ed6:	f7f6 ff03 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019eda:	4605      	mov	r5, r0
 8019edc:	b158      	cbz	r0, 8019ef6 <uxr_serialize_CREATE_Payload+0x9e>
 8019ede:	7a33      	ldrb	r3, [r6, #8]
 8019ee0:	2b02      	cmp	r3, #2
 8019ee2:	d034      	beq.n	8019f4e <uxr_serialize_CREATE_Payload+0xf6>
 8019ee4:	2b03      	cmp	r3, #3
 8019ee6:	d106      	bne.n	8019ef6 <uxr_serialize_CREATE_Payload+0x9e>
 8019ee8:	68f2      	ldr	r2, [r6, #12]
 8019eea:	f106 0110 	add.w	r1, r6, #16
 8019eee:	4638      	mov	r0, r7
 8019ef0:	f7f8 fa6e 	bl	80123d0 <ucdr_serialize_sequence_uint8_t>
 8019ef4:	4605      	mov	r5, r0
 8019ef6:	2202      	movs	r2, #2
 8019ef8:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8019efc:	4638      	mov	r0, r7
 8019efe:	f7fc fbbb 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019f02:	4028      	ands	r0, r5
 8019f04:	4004      	ands	r4, r0
 8019f06:	e7c9      	b.n	8019e9c <uxr_serialize_CREATE_Payload+0x44>
 8019f08:	f106 0108 	add.w	r1, r6, #8
 8019f0c:	4638      	mov	r0, r7
 8019f0e:	f7ff f98d 	bl	801922c <uxr_serialize_CLIENT_Representation>
 8019f12:	4004      	ands	r4, r0
 8019f14:	e7c2      	b.n	8019e9c <uxr_serialize_CREATE_Payload+0x44>
 8019f16:	f106 0108 	add.w	r1, r6, #8
 8019f1a:	4638      	mov	r0, r7
 8019f1c:	f7ff fa42 	bl	80193a4 <uxr_serialize_AGENT_Representation>
 8019f20:	4004      	ands	r4, r0
 8019f22:	e7bb      	b.n	8019e9c <uxr_serialize_CREATE_Payload+0x44>
 8019f24:	7a31      	ldrb	r1, [r6, #8]
 8019f26:	4638      	mov	r0, r7
 8019f28:	f7f6 feda 	bl	8010ce0 <ucdr_serialize_uint8_t>
 8019f2c:	4605      	mov	r5, r0
 8019f2e:	b130      	cbz	r0, 8019f3e <uxr_serialize_CREATE_Payload+0xe6>
 8019f30:	7a33      	ldrb	r3, [r6, #8]
 8019f32:	2b02      	cmp	r3, #2
 8019f34:	d011      	beq.n	8019f5a <uxr_serialize_CREATE_Payload+0x102>
 8019f36:	2b03      	cmp	r3, #3
 8019f38:	d015      	beq.n	8019f66 <uxr_serialize_CREATE_Payload+0x10e>
 8019f3a:	2b01      	cmp	r3, #1
 8019f3c:	d00d      	beq.n	8019f5a <uxr_serialize_CREATE_Payload+0x102>
 8019f3e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8019f42:	4638      	mov	r0, r7
 8019f44:	f7f7 fc08 	bl	8011758 <ucdr_serialize_int16_t>
 8019f48:	4028      	ands	r0, r5
 8019f4a:	4004      	ands	r4, r0
 8019f4c:	e7a6      	b.n	8019e9c <uxr_serialize_CREATE_Payload+0x44>
 8019f4e:	68f1      	ldr	r1, [r6, #12]
 8019f50:	4638      	mov	r0, r7
 8019f52:	f003 fac9 	bl	801d4e8 <ucdr_serialize_string>
 8019f56:	4605      	mov	r5, r0
 8019f58:	e7cd      	b.n	8019ef6 <uxr_serialize_CREATE_Payload+0x9e>
 8019f5a:	68f1      	ldr	r1, [r6, #12]
 8019f5c:	4638      	mov	r0, r7
 8019f5e:	f003 fac3 	bl	801d4e8 <ucdr_serialize_string>
 8019f62:	4605      	mov	r5, r0
 8019f64:	e7eb      	b.n	8019f3e <uxr_serialize_CREATE_Payload+0xe6>
 8019f66:	68f2      	ldr	r2, [r6, #12]
 8019f68:	f106 0110 	add.w	r1, r6, #16
 8019f6c:	4638      	mov	r0, r7
 8019f6e:	f7f8 fa2f 	bl	80123d0 <ucdr_serialize_sequence_uint8_t>
 8019f72:	4605      	mov	r5, r0
 8019f74:	e7e3      	b.n	8019f3e <uxr_serialize_CREATE_Payload+0xe6>
 8019f76:	bf00      	nop

08019f78 <uxr_deserialize_GET_INFO_Payload>:
 8019f78:	b570      	push	{r4, r5, r6, lr}
 8019f7a:	2202      	movs	r2, #2
 8019f7c:	4605      	mov	r5, r0
 8019f7e:	460e      	mov	r6, r1
 8019f80:	f7fc fbde 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019f84:	2202      	movs	r2, #2
 8019f86:	4604      	mov	r4, r0
 8019f88:	4628      	mov	r0, r5
 8019f8a:	18b1      	adds	r1, r6, r2
 8019f8c:	f7fc fbd8 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019f90:	4603      	mov	r3, r0
 8019f92:	1d31      	adds	r1, r6, #4
 8019f94:	4628      	mov	r0, r5
 8019f96:	401c      	ands	r4, r3
 8019f98:	f7f7 f9e8 	bl	801136c <ucdr_deserialize_uint32_t>
 8019f9c:	b2e4      	uxtb	r4, r4
 8019f9e:	4020      	ands	r0, r4
 8019fa0:	bd70      	pop	{r4, r5, r6, pc}
 8019fa2:	bf00      	nop

08019fa4 <uxr_serialize_DELETE_Payload>:
 8019fa4:	b570      	push	{r4, r5, r6, lr}
 8019fa6:	2202      	movs	r2, #2
 8019fa8:	4605      	mov	r5, r0
 8019faa:	460e      	mov	r6, r1
 8019fac:	f7fc fb64 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019fb0:	2202      	movs	r2, #2
 8019fb2:	4604      	mov	r4, r0
 8019fb4:	4628      	mov	r0, r5
 8019fb6:	18b1      	adds	r1, r6, r2
 8019fb8:	f7fc fb5e 	bl	8016678 <ucdr_serialize_array_uint8_t>
 8019fbc:	4020      	ands	r0, r4
 8019fbe:	b2c0      	uxtb	r0, r0
 8019fc0:	bd70      	pop	{r4, r5, r6, pc}
 8019fc2:	bf00      	nop

08019fc4 <uxr_deserialize_STATUS_AGENT_Payload>:
 8019fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fc8:	460e      	mov	r6, r1
 8019fca:	4605      	mov	r5, r0
 8019fcc:	f7f6 fe9e 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019fd0:	4604      	mov	r4, r0
 8019fd2:	1c71      	adds	r1, r6, #1
 8019fd4:	4628      	mov	r0, r5
 8019fd6:	f7f6 fe99 	bl	8010d0c <ucdr_deserialize_uint8_t>
 8019fda:	2204      	movs	r2, #4
 8019fdc:	4681      	mov	r9, r0
 8019fde:	4628      	mov	r0, r5
 8019fe0:	18b1      	adds	r1, r6, r2
 8019fe2:	f7fc fbad 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019fe6:	f106 0108 	add.w	r1, r6, #8
 8019fea:	4680      	mov	r8, r0
 8019fec:	2202      	movs	r2, #2
 8019fee:	4628      	mov	r0, r5
 8019ff0:	f7fc fba6 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 8019ff4:	ea04 0309 	and.w	r3, r4, r9
 8019ff8:	4607      	mov	r7, r0
 8019ffa:	2202      	movs	r2, #2
 8019ffc:	b2db      	uxtb	r3, r3
 8019ffe:	f106 010a 	add.w	r1, r6, #10
 801a002:	4628      	mov	r0, r5
 801a004:	ea03 0408 	and.w	r4, r3, r8
 801a008:	f7fc fb9a 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801a00c:	4603      	mov	r3, r0
 801a00e:	4628      	mov	r0, r5
 801a010:	403c      	ands	r4, r7
 801a012:	f106 010c 	add.w	r1, r6, #12
 801a016:	461d      	mov	r5, r3
 801a018:	f7f6 fe4a 	bl	8010cb0 <ucdr_deserialize_bool>
 801a01c:	4025      	ands	r5, r4
 801a01e:	4028      	ands	r0, r5
 801a020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a024 <uxr_deserialize_STATUS_Payload>:
 801a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a028:	2202      	movs	r2, #2
 801a02a:	4606      	mov	r6, r0
 801a02c:	460f      	mov	r7, r1
 801a02e:	f7fc fb87 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801a032:	2202      	movs	r2, #2
 801a034:	4605      	mov	r5, r0
 801a036:	4630      	mov	r0, r6
 801a038:	18b9      	adds	r1, r7, r2
 801a03a:	f7fc fb81 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801a03e:	4680      	mov	r8, r0
 801a040:	1d39      	adds	r1, r7, #4
 801a042:	4630      	mov	r0, r6
 801a044:	f7f6 fe62 	bl	8010d0c <ucdr_deserialize_uint8_t>
 801a048:	ea05 0508 	and.w	r5, r5, r8
 801a04c:	4604      	mov	r4, r0
 801a04e:	1d79      	adds	r1, r7, #5
 801a050:	4630      	mov	r0, r6
 801a052:	402c      	ands	r4, r5
 801a054:	f7f6 fe5a 	bl	8010d0c <ucdr_deserialize_uint8_t>
 801a058:	4020      	ands	r0, r4
 801a05a:	b2c0      	uxtb	r0, r0
 801a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a060 <uxr_serialize_INFO_Payload>:
 801a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a064:	2202      	movs	r2, #2
 801a066:	460c      	mov	r4, r1
 801a068:	4605      	mov	r5, r0
 801a06a:	f7fc fb05 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a06e:	2202      	movs	r2, #2
 801a070:	4680      	mov	r8, r0
 801a072:	4628      	mov	r0, r5
 801a074:	18a1      	adds	r1, r4, r2
 801a076:	f7fc faff 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a07a:	4607      	mov	r7, r0
 801a07c:	7921      	ldrb	r1, [r4, #4]
 801a07e:	4628      	mov	r0, r5
 801a080:	f7f6 fe2e 	bl	8010ce0 <ucdr_serialize_uint8_t>
 801a084:	ea08 0807 	and.w	r8, r8, r7
 801a088:	4606      	mov	r6, r0
 801a08a:	7961      	ldrb	r1, [r4, #5]
 801a08c:	4628      	mov	r0, r5
 801a08e:	ea06 0608 	and.w	r6, r6, r8
 801a092:	f7f6 fe25 	bl	8010ce0 <ucdr_serialize_uint8_t>
 801a096:	7a21      	ldrb	r1, [r4, #8]
 801a098:	4030      	ands	r0, r6
 801a09a:	b2c7      	uxtb	r7, r0
 801a09c:	4628      	mov	r0, r5
 801a09e:	f7f6 fdf1 	bl	8010c84 <ucdr_serialize_bool>
 801a0a2:	7a23      	ldrb	r3, [r4, #8]
 801a0a4:	4606      	mov	r6, r0
 801a0a6:	b96b      	cbnz	r3, 801a0c4 <uxr_serialize_INFO_Payload+0x64>
 801a0a8:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	f7f6 fde9 	bl	8010c84 <ucdr_serialize_bool>
 801a0b2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801a0b6:	4030      	ands	r0, r6
 801a0b8:	b2c6      	uxtb	r6, r0
 801a0ba:	b983      	cbnz	r3, 801a0de <uxr_serialize_INFO_Payload+0x7e>
 801a0bc:	ea06 0007 	and.w	r0, r6, r7
 801a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0c4:	7b21      	ldrb	r1, [r4, #12]
 801a0c6:	4628      	mov	r0, r5
 801a0c8:	f7f6 fe0a 	bl	8010ce0 <ucdr_serialize_uint8_t>
 801a0cc:	b188      	cbz	r0, 801a0f2 <uxr_serialize_INFO_Payload+0x92>
 801a0ce:	f104 010c 	add.w	r1, r4, #12
 801a0d2:	4628      	mov	r0, r5
 801a0d4:	f7ff f9d8 	bl	8019488 <uxr_serialize_ObjectVariant.part.0>
 801a0d8:	4030      	ands	r0, r6
 801a0da:	b2c6      	uxtb	r6, r0
 801a0dc:	e7e4      	b.n	801a0a8 <uxr_serialize_INFO_Payload+0x48>
 801a0de:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801a0e2:	4628      	mov	r0, r5
 801a0e4:	f7ff fdb8 	bl	8019c58 <uxr_serialize_ActivityInfoVariant>
 801a0e8:	4006      	ands	r6, r0
 801a0ea:	ea06 0007 	and.w	r0, r6, r7
 801a0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0f2:	4606      	mov	r6, r0
 801a0f4:	e7d8      	b.n	801a0a8 <uxr_serialize_INFO_Payload+0x48>
 801a0f6:	bf00      	nop

0801a0f8 <uxr_serialize_READ_DATA_Payload>:
 801a0f8:	b570      	push	{r4, r5, r6, lr}
 801a0fa:	2202      	movs	r2, #2
 801a0fc:	4605      	mov	r5, r0
 801a0fe:	460e      	mov	r6, r1
 801a100:	f7fc faba 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a104:	2202      	movs	r2, #2
 801a106:	4604      	mov	r4, r0
 801a108:	4628      	mov	r0, r5
 801a10a:	18b1      	adds	r1, r6, r2
 801a10c:	f7fc fab4 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a110:	4603      	mov	r3, r0
 801a112:	1d31      	adds	r1, r6, #4
 801a114:	4628      	mov	r0, r5
 801a116:	401c      	ands	r4, r3
 801a118:	f7ff fe5e 	bl	8019dd8 <uxr_serialize_ReadSpecification>
 801a11c:	b2e4      	uxtb	r4, r4
 801a11e:	4020      	ands	r0, r4
 801a120:	bd70      	pop	{r4, r5, r6, pc}
 801a122:	bf00      	nop

0801a124 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801a124:	b570      	push	{r4, r5, r6, lr}
 801a126:	2202      	movs	r2, #2
 801a128:	4605      	mov	r5, r0
 801a12a:	460e      	mov	r6, r1
 801a12c:	f7fc faa4 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a130:	2202      	movs	r2, #2
 801a132:	4604      	mov	r4, r0
 801a134:	4628      	mov	r0, r5
 801a136:	18b1      	adds	r1, r6, r2
 801a138:	f7fc fa9e 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a13c:	4020      	ands	r0, r4
 801a13e:	b2c0      	uxtb	r0, r0
 801a140:	bd70      	pop	{r4, r5, r6, pc}
 801a142:	bf00      	nop

0801a144 <uxr_serialize_ACKNACK_Payload>:
 801a144:	b570      	push	{r4, r5, r6, lr}
 801a146:	460c      	mov	r4, r1
 801a148:	4605      	mov	r5, r0
 801a14a:	460e      	mov	r6, r1
 801a14c:	f834 1b02 	ldrh.w	r1, [r4], #2
 801a150:	f7f6 fdf2 	bl	8010d38 <ucdr_serialize_uint16_t>
 801a154:	2202      	movs	r2, #2
 801a156:	4621      	mov	r1, r4
 801a158:	4604      	mov	r4, r0
 801a15a:	4628      	mov	r0, r5
 801a15c:	f7fc fa8c 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a160:	4603      	mov	r3, r0
 801a162:	7931      	ldrb	r1, [r6, #4]
 801a164:	4628      	mov	r0, r5
 801a166:	401c      	ands	r4, r3
 801a168:	f7f6 fdba 	bl	8010ce0 <ucdr_serialize_uint8_t>
 801a16c:	b2e4      	uxtb	r4, r4
 801a16e:	4020      	ands	r0, r4
 801a170:	bd70      	pop	{r4, r5, r6, pc}
 801a172:	bf00      	nop

0801a174 <uxr_deserialize_ACKNACK_Payload>:
 801a174:	b570      	push	{r4, r5, r6, lr}
 801a176:	460e      	mov	r6, r1
 801a178:	4605      	mov	r5, r0
 801a17a:	f7f6 fedd 	bl	8010f38 <ucdr_deserialize_uint16_t>
 801a17e:	2202      	movs	r2, #2
 801a180:	4604      	mov	r4, r0
 801a182:	4628      	mov	r0, r5
 801a184:	18b1      	adds	r1, r6, r2
 801a186:	f7fc fadb 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801a18a:	4603      	mov	r3, r0
 801a18c:	1d31      	adds	r1, r6, #4
 801a18e:	4628      	mov	r0, r5
 801a190:	401c      	ands	r4, r3
 801a192:	f7f6 fdbb 	bl	8010d0c <ucdr_deserialize_uint8_t>
 801a196:	b2e4      	uxtb	r4, r4
 801a198:	4020      	ands	r0, r4
 801a19a:	bd70      	pop	{r4, r5, r6, pc}

0801a19c <uxr_serialize_HEARTBEAT_Payload>:
 801a19c:	b570      	push	{r4, r5, r6, lr}
 801a19e:	460d      	mov	r5, r1
 801a1a0:	4606      	mov	r6, r0
 801a1a2:	8809      	ldrh	r1, [r1, #0]
 801a1a4:	f7f6 fdc8 	bl	8010d38 <ucdr_serialize_uint16_t>
 801a1a8:	8869      	ldrh	r1, [r5, #2]
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	4630      	mov	r0, r6
 801a1ae:	f7f6 fdc3 	bl	8010d38 <ucdr_serialize_uint16_t>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	7929      	ldrb	r1, [r5, #4]
 801a1b6:	4630      	mov	r0, r6
 801a1b8:	401c      	ands	r4, r3
 801a1ba:	f7f6 fd91 	bl	8010ce0 <ucdr_serialize_uint8_t>
 801a1be:	b2e4      	uxtb	r4, r4
 801a1c0:	4020      	ands	r0, r4
 801a1c2:	bd70      	pop	{r4, r5, r6, pc}

0801a1c4 <uxr_deserialize_HEARTBEAT_Payload>:
 801a1c4:	b570      	push	{r4, r5, r6, lr}
 801a1c6:	460e      	mov	r6, r1
 801a1c8:	4605      	mov	r5, r0
 801a1ca:	f7f6 feb5 	bl	8010f38 <ucdr_deserialize_uint16_t>
 801a1ce:	4604      	mov	r4, r0
 801a1d0:	1cb1      	adds	r1, r6, #2
 801a1d2:	4628      	mov	r0, r5
 801a1d4:	f7f6 feb0 	bl	8010f38 <ucdr_deserialize_uint16_t>
 801a1d8:	4603      	mov	r3, r0
 801a1da:	1d31      	adds	r1, r6, #4
 801a1dc:	4628      	mov	r0, r5
 801a1de:	401c      	ands	r4, r3
 801a1e0:	f7f6 fd94 	bl	8010d0c <ucdr_deserialize_uint8_t>
 801a1e4:	b2e4      	uxtb	r4, r4
 801a1e6:	4020      	ands	r0, r4
 801a1e8:	bd70      	pop	{r4, r5, r6, pc}
 801a1ea:	bf00      	nop

0801a1ec <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801a1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1f0:	460e      	mov	r6, r1
 801a1f2:	4605      	mov	r5, r0
 801a1f4:	f7f7 fc3c 	bl	8011a70 <ucdr_deserialize_int32_t>
 801a1f8:	4607      	mov	r7, r0
 801a1fa:	1d31      	adds	r1, r6, #4
 801a1fc:	4628      	mov	r0, r5
 801a1fe:	f7f7 f8b5 	bl	801136c <ucdr_deserialize_uint32_t>
 801a202:	4680      	mov	r8, r0
 801a204:	f106 0108 	add.w	r1, r6, #8
 801a208:	4628      	mov	r0, r5
 801a20a:	f7f7 fc31 	bl	8011a70 <ucdr_deserialize_int32_t>
 801a20e:	ea07 0708 	and.w	r7, r7, r8
 801a212:	4604      	mov	r4, r0
 801a214:	f106 010c 	add.w	r1, r6, #12
 801a218:	4628      	mov	r0, r5
 801a21a:	403c      	ands	r4, r7
 801a21c:	f7f7 f8a6 	bl	801136c <ucdr_deserialize_uint32_t>
 801a220:	f106 0110 	add.w	r1, r6, #16
 801a224:	4004      	ands	r4, r0
 801a226:	4628      	mov	r0, r5
 801a228:	f7f7 fc22 	bl	8011a70 <ucdr_deserialize_int32_t>
 801a22c:	4603      	mov	r3, r0
 801a22e:	b2e4      	uxtb	r4, r4
 801a230:	4628      	mov	r0, r5
 801a232:	461d      	mov	r5, r3
 801a234:	f106 0114 	add.w	r1, r6, #20
 801a238:	f7f7 f898 	bl	801136c <ucdr_deserialize_uint32_t>
 801a23c:	402c      	ands	r4, r5
 801a23e:	4020      	ands	r0, r4
 801a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a244 <uxr_serialize_SampleIdentity>:
 801a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a248:	4604      	mov	r4, r0
 801a24a:	460d      	mov	r5, r1
 801a24c:	220c      	movs	r2, #12
 801a24e:	f7fc fa13 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a252:	2203      	movs	r2, #3
 801a254:	f105 010c 	add.w	r1, r5, #12
 801a258:	4607      	mov	r7, r0
 801a25a:	4620      	mov	r0, r4
 801a25c:	f7fc fa0c 	bl	8016678 <ucdr_serialize_array_uint8_t>
 801a260:	7be9      	ldrb	r1, [r5, #15]
 801a262:	4680      	mov	r8, r0
 801a264:	4620      	mov	r0, r4
 801a266:	f7f6 fd3b 	bl	8010ce0 <ucdr_serialize_uint8_t>
 801a26a:	6929      	ldr	r1, [r5, #16]
 801a26c:	4606      	mov	r6, r0
 801a26e:	4620      	mov	r0, r4
 801a270:	f7f7 fb66 	bl	8011940 <ucdr_serialize_int32_t>
 801a274:	ea07 0708 	and.w	r7, r7, r8
 801a278:	4603      	mov	r3, r0
 801a27a:	4620      	mov	r0, r4
 801a27c:	403e      	ands	r6, r7
 801a27e:	6969      	ldr	r1, [r5, #20]
 801a280:	461c      	mov	r4, r3
 801a282:	f7f6 ff43 	bl	801110c <ucdr_serialize_uint32_t>
 801a286:	4034      	ands	r4, r6
 801a288:	4020      	ands	r0, r4
 801a28a:	b2c0      	uxtb	r0, r0
 801a28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a290 <uxr_deserialize_SampleIdentity>:
 801a290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a294:	4604      	mov	r4, r0
 801a296:	460d      	mov	r5, r1
 801a298:	220c      	movs	r2, #12
 801a29a:	f7fc fa51 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801a29e:	2203      	movs	r2, #3
 801a2a0:	f105 010c 	add.w	r1, r5, #12
 801a2a4:	4607      	mov	r7, r0
 801a2a6:	4620      	mov	r0, r4
 801a2a8:	f7fc fa4a 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801a2ac:	f105 010f 	add.w	r1, r5, #15
 801a2b0:	4680      	mov	r8, r0
 801a2b2:	4620      	mov	r0, r4
 801a2b4:	f7f6 fd2a 	bl	8010d0c <ucdr_deserialize_uint8_t>
 801a2b8:	f105 0110 	add.w	r1, r5, #16
 801a2bc:	4606      	mov	r6, r0
 801a2be:	4620      	mov	r0, r4
 801a2c0:	f7f7 fbd6 	bl	8011a70 <ucdr_deserialize_int32_t>
 801a2c4:	ea07 0708 	and.w	r7, r7, r8
 801a2c8:	4603      	mov	r3, r0
 801a2ca:	4620      	mov	r0, r4
 801a2cc:	403e      	ands	r6, r7
 801a2ce:	f105 0114 	add.w	r1, r5, #20
 801a2d2:	461c      	mov	r4, r3
 801a2d4:	f7f7 f84a 	bl	801136c <ucdr_deserialize_uint32_t>
 801a2d8:	4034      	ands	r4, r6
 801a2da:	4020      	ands	r0, r4
 801a2dc:	b2c0      	uxtb	r0, r0
 801a2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2e2:	bf00      	nop

0801a2e4 <rcl_client_get_rmw_handle>:
 801a2e4:	b118      	cbz	r0, 801a2ee <rcl_client_get_rmw_handle+0xa>
 801a2e6:	6800      	ldr	r0, [r0, #0]
 801a2e8:	b108      	cbz	r0, 801a2ee <rcl_client_get_rmw_handle+0xa>
 801a2ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801a2ee:	4770      	bx	lr

0801a2f0 <rcl_send_request>:
 801a2f0:	b570      	push	{r4, r5, r6, lr}
 801a2f2:	b082      	sub	sp, #8
 801a2f4:	b1f8      	cbz	r0, 801a336 <rcl_send_request+0x46>
 801a2f6:	4604      	mov	r4, r0
 801a2f8:	6800      	ldr	r0, [r0, #0]
 801a2fa:	b1e0      	cbz	r0, 801a336 <rcl_send_request+0x46>
 801a2fc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801a300:	b1cb      	cbz	r3, 801a336 <rcl_send_request+0x46>
 801a302:	460e      	mov	r6, r1
 801a304:	b1e1      	cbz	r1, 801a340 <rcl_send_request+0x50>
 801a306:	4615      	mov	r5, r2
 801a308:	b1d2      	cbz	r2, 801a340 <rcl_send_request+0x50>
 801a30a:	2105      	movs	r1, #5
 801a30c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801a310:	f002 fa2e 	bl	801c770 <__atomic_load_8>
 801a314:	4602      	mov	r2, r0
 801a316:	460b      	mov	r3, r1
 801a318:	4631      	mov	r1, r6
 801a31a:	e9c5 2300 	strd	r2, r3, [r5]
 801a31e:	6823      	ldr	r3, [r4, #0]
 801a320:	462a      	mov	r2, r5
 801a322:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801a326:	f7fa fefb 	bl	8015120 <rmw_send_request>
 801a32a:	4606      	mov	r6, r0
 801a32c:	b160      	cbz	r0, 801a348 <rcl_send_request+0x58>
 801a32e:	2601      	movs	r6, #1
 801a330:	4630      	mov	r0, r6
 801a332:	b002      	add	sp, #8
 801a334:	bd70      	pop	{r4, r5, r6, pc}
 801a336:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801a33a:	4630      	mov	r0, r6
 801a33c:	b002      	add	sp, #8
 801a33e:	bd70      	pop	{r4, r5, r6, pc}
 801a340:	260b      	movs	r6, #11
 801a342:	4630      	mov	r0, r6
 801a344:	b002      	add	sp, #8
 801a346:	bd70      	pop	{r4, r5, r6, pc}
 801a348:	6820      	ldr	r0, [r4, #0]
 801a34a:	2105      	movs	r1, #5
 801a34c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a350:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801a354:	9100      	str	r1, [sp, #0]
 801a356:	f002 fa77 	bl	801c848 <__atomic_exchange_8>
 801a35a:	4630      	mov	r0, r6
 801a35c:	b002      	add	sp, #8
 801a35e:	bd70      	pop	{r4, r5, r6, pc}

0801a360 <rcl_take_response>:
 801a360:	b570      	push	{r4, r5, r6, lr}
 801a362:	468e      	mov	lr, r1
 801a364:	b08c      	sub	sp, #48	; 0x30
 801a366:	460c      	mov	r4, r1
 801a368:	4616      	mov	r6, r2
 801a36a:	f10d 0c18 	add.w	ip, sp, #24
 801a36e:	4605      	mov	r5, r0
 801a370:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a374:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a378:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a37c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a380:	b35d      	cbz	r5, 801a3da <rcl_take_response+0x7a>
 801a382:	682b      	ldr	r3, [r5, #0]
 801a384:	b34b      	cbz	r3, 801a3da <rcl_take_response+0x7a>
 801a386:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801a38a:	b330      	cbz	r0, 801a3da <rcl_take_response+0x7a>
 801a38c:	b346      	cbz	r6, 801a3e0 <rcl_take_response+0x80>
 801a38e:	2300      	movs	r3, #0
 801a390:	4632      	mov	r2, r6
 801a392:	a902      	add	r1, sp, #8
 801a394:	f88d 3007 	strb.w	r3, [sp, #7]
 801a398:	f10d 0307 	add.w	r3, sp, #7
 801a39c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801a3e8 <rcl_take_response+0x88>
 801a3a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a3a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a3a8:	f7fa ffc2 	bl	8015330 <rmw_take_response>
 801a3ac:	4605      	mov	r5, r0
 801a3ae:	b9c8      	cbnz	r0, 801a3e4 <rcl_take_response+0x84>
 801a3b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a3b4:	f240 13f5 	movw	r3, #501	; 0x1f5
 801a3b8:	2a00      	cmp	r2, #0
 801a3ba:	bf08      	it	eq
 801a3bc:	461d      	moveq	r5, r3
 801a3be:	f10d 0e18 	add.w	lr, sp, #24
 801a3c2:	46a4      	mov	ip, r4
 801a3c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a3c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3cc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a3d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	b00c      	add	sp, #48	; 0x30
 801a3d8:	bd70      	pop	{r4, r5, r6, pc}
 801a3da:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801a3de:	e7ee      	b.n	801a3be <rcl_take_response+0x5e>
 801a3e0:	250b      	movs	r5, #11
 801a3e2:	e7ec      	b.n	801a3be <rcl_take_response+0x5e>
 801a3e4:	2501      	movs	r5, #1
 801a3e6:	e7ea      	b.n	801a3be <rcl_take_response+0x5e>
	...

0801a3f0 <rcl_client_is_valid>:
 801a3f0:	b130      	cbz	r0, 801a400 <rcl_client_is_valid+0x10>
 801a3f2:	6800      	ldr	r0, [r0, #0]
 801a3f4:	b120      	cbz	r0, 801a400 <rcl_client_is_valid+0x10>
 801a3f6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801a3fa:	3800      	subs	r0, #0
 801a3fc:	bf18      	it	ne
 801a3fe:	2001      	movne	r0, #1
 801a400:	4770      	bx	lr
 801a402:	bf00      	nop

0801a404 <rcl_convert_rmw_ret_to_rcl_ret>:
 801a404:	280b      	cmp	r0, #11
 801a406:	dc0d      	bgt.n	801a424 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801a408:	2800      	cmp	r0, #0
 801a40a:	db09      	blt.n	801a420 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801a40c:	280b      	cmp	r0, #11
 801a40e:	d807      	bhi.n	801a420 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801a410:	e8df f000 	tbb	[pc, r0]
 801a414:	07060607 	.word	0x07060607
 801a418:	06060606 	.word	0x06060606
 801a41c:	07070606 	.word	0x07070606
 801a420:	2001      	movs	r0, #1
 801a422:	4770      	bx	lr
 801a424:	28cb      	cmp	r0, #203	; 0xcb
 801a426:	bf18      	it	ne
 801a428:	2001      	movne	r0, #1
 801a42a:	4770      	bx	lr

0801a42c <rcl_get_zero_initialized_context>:
 801a42c:	4a03      	ldr	r2, [pc, #12]	; (801a43c <rcl_get_zero_initialized_context+0x10>)
 801a42e:	4603      	mov	r3, r0
 801a430:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a434:	e883 0003 	stmia.w	r3, {r0, r1}
 801a438:	4618      	mov	r0, r3
 801a43a:	4770      	bx	lr
 801a43c:	08024834 	.word	0x08024834

0801a440 <rcl_context_is_valid>:
 801a440:	b118      	cbz	r0, 801a44a <rcl_context_is_valid+0xa>
 801a442:	6840      	ldr	r0, [r0, #4]
 801a444:	3800      	subs	r0, #0
 801a446:	bf18      	it	ne
 801a448:	2001      	movne	r0, #1
 801a44a:	4770      	bx	lr

0801a44c <__cleanup_context>:
 801a44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a450:	4606      	mov	r6, r0
 801a452:	2300      	movs	r3, #0
 801a454:	6800      	ldr	r0, [r0, #0]
 801a456:	6073      	str	r3, [r6, #4]
 801a458:	2800      	cmp	r0, #0
 801a45a:	d049      	beq.n	801a4f0 <__cleanup_context+0xa4>
 801a45c:	6947      	ldr	r7, [r0, #20]
 801a45e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a462:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801a466:	b137      	cbz	r7, 801a476 <__cleanup_context+0x2a>
 801a468:	3014      	adds	r0, #20
 801a46a:	f7f8 f845 	bl	80124f8 <rcl_init_options_fini>
 801a46e:	4607      	mov	r7, r0
 801a470:	2800      	cmp	r0, #0
 801a472:	d144      	bne.n	801a4fe <__cleanup_context+0xb2>
 801a474:	6830      	ldr	r0, [r6, #0]
 801a476:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a478:	b143      	cbz	r3, 801a48c <__cleanup_context+0x40>
 801a47a:	3028      	adds	r0, #40	; 0x28
 801a47c:	f7fa fb58 	bl	8014b30 <rmw_context_fini>
 801a480:	b118      	cbz	r0, 801a48a <__cleanup_context+0x3e>
 801a482:	2f00      	cmp	r7, #0
 801a484:	d03e      	beq.n	801a504 <__cleanup_context+0xb8>
 801a486:	f7f9 fe17 	bl	80140b8 <rcutils_reset_error>
 801a48a:	6830      	ldr	r0, [r6, #0]
 801a48c:	6a03      	ldr	r3, [r0, #32]
 801a48e:	b1db      	cbz	r3, 801a4c8 <__cleanup_context+0x7c>
 801a490:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801a494:	2a01      	cmp	r2, #1
 801a496:	f17c 0100 	sbcs.w	r1, ip, #0
 801a49a:	db11      	blt.n	801a4c0 <__cleanup_context+0x74>
 801a49c:	2400      	movs	r4, #0
 801a49e:	4625      	mov	r5, r4
 801a4a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a4a4:	4649      	mov	r1, r9
 801a4a6:	b1b8      	cbz	r0, 801a4d8 <__cleanup_context+0x8c>
 801a4a8:	47c0      	blx	r8
 801a4aa:	6833      	ldr	r3, [r6, #0]
 801a4ac:	3401      	adds	r4, #1
 801a4ae:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801a4b2:	f145 0500 	adc.w	r5, r5, #0
 801a4b6:	6a1b      	ldr	r3, [r3, #32]
 801a4b8:	4294      	cmp	r4, r2
 801a4ba:	eb75 010c 	sbcs.w	r1, r5, ip
 801a4be:	dbef      	blt.n	801a4a0 <__cleanup_context+0x54>
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	4649      	mov	r1, r9
 801a4c4:	47c0      	blx	r8
 801a4c6:	6830      	ldr	r0, [r6, #0]
 801a4c8:	4649      	mov	r1, r9
 801a4ca:	47c0      	blx	r8
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	4638      	mov	r0, r7
 801a4d0:	e9c6 3300 	strd	r3, r3, [r6]
 801a4d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4d8:	3401      	adds	r4, #1
 801a4da:	f145 0500 	adc.w	r5, r5, #0
 801a4de:	4294      	cmp	r4, r2
 801a4e0:	eb75 010c 	sbcs.w	r1, r5, ip
 801a4e4:	dbdc      	blt.n	801a4a0 <__cleanup_context+0x54>
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	4649      	mov	r1, r9
 801a4ea:	47c0      	blx	r8
 801a4ec:	6830      	ldr	r0, [r6, #0]
 801a4ee:	e7eb      	b.n	801a4c8 <__cleanup_context+0x7c>
 801a4f0:	4607      	mov	r7, r0
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	4638      	mov	r0, r7
 801a4f6:	e9c6 3300 	strd	r3, r3, [r6]
 801a4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4fe:	f7f9 fddb 	bl	80140b8 <rcutils_reset_error>
 801a502:	e7b7      	b.n	801a474 <__cleanup_context+0x28>
 801a504:	f7ff ff7e 	bl	801a404 <rcl_convert_rmw_ret_to_rcl_ret>
 801a508:	4607      	mov	r7, r0
 801a50a:	e7bc      	b.n	801a486 <__cleanup_context+0x3a>

0801a50c <rcl_get_zero_initialized_guard_condition>:
 801a50c:	4a03      	ldr	r2, [pc, #12]	; (801a51c <rcl_get_zero_initialized_guard_condition+0x10>)
 801a50e:	4603      	mov	r3, r0
 801a510:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a514:	e883 0003 	stmia.w	r3, {r0, r1}
 801a518:	4618      	mov	r0, r3
 801a51a:	4770      	bx	lr
 801a51c:	0802483c 	.word	0x0802483c

0801a520 <rcl_guard_condition_init_from_rmw>:
 801a520:	b082      	sub	sp, #8
 801a522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a526:	b086      	sub	sp, #24
 801a528:	4604      	mov	r4, r0
 801a52a:	460e      	mov	r6, r1
 801a52c:	4615      	mov	r5, r2
 801a52e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a532:	f10d 0e04 	add.w	lr, sp, #4
 801a536:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a53a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a53e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a542:	f8dc 3000 	ldr.w	r3, [ip]
 801a546:	a801      	add	r0, sp, #4
 801a548:	f8ce 3000 	str.w	r3, [lr]
 801a54c:	f7f9 fd76 	bl	801403c <rcutils_allocator_is_valid>
 801a550:	f080 0301 	eor.w	r3, r0, #1
 801a554:	b2db      	uxtb	r3, r3
 801a556:	bb3b      	cbnz	r3, 801a5a8 <rcl_guard_condition_init_from_rmw+0x88>
 801a558:	b334      	cbz	r4, 801a5a8 <rcl_guard_condition_init_from_rmw+0x88>
 801a55a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a55e:	f1b8 0f00 	cmp.w	r8, #0
 801a562:	d11a      	bne.n	801a59a <rcl_guard_condition_init_from_rmw+0x7a>
 801a564:	b305      	cbz	r5, 801a5a8 <rcl_guard_condition_init_from_rmw+0x88>
 801a566:	4628      	mov	r0, r5
 801a568:	f7ff ff6a 	bl	801a440 <rcl_context_is_valid>
 801a56c:	b1f0      	cbz	r0, 801a5ac <rcl_guard_condition_init_from_rmw+0x8c>
 801a56e:	9b01      	ldr	r3, [sp, #4]
 801a570:	201c      	movs	r0, #28
 801a572:	9905      	ldr	r1, [sp, #20]
 801a574:	4798      	blx	r3
 801a576:	4607      	mov	r7, r0
 801a578:	6060      	str	r0, [r4, #4]
 801a57a:	b320      	cbz	r0, 801a5c6 <rcl_guard_condition_init_from_rmw+0xa6>
 801a57c:	b1c6      	cbz	r6, 801a5b0 <rcl_guard_condition_init_from_rmw+0x90>
 801a57e:	6006      	str	r6, [r0, #0]
 801a580:	f880 8004 	strb.w	r8, [r0, #4]
 801a584:	ac01      	add	r4, sp, #4
 801a586:	f107 0c08 	add.w	ip, r7, #8
 801a58a:	2500      	movs	r5, #0
 801a58c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a58e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a592:	6823      	ldr	r3, [r4, #0]
 801a594:	f8cc 3000 	str.w	r3, [ip]
 801a598:	e000      	b.n	801a59c <rcl_guard_condition_init_from_rmw+0x7c>
 801a59a:	2564      	movs	r5, #100	; 0x64
 801a59c:	4628      	mov	r0, r5
 801a59e:	b006      	add	sp, #24
 801a5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5a4:	b002      	add	sp, #8
 801a5a6:	4770      	bx	lr
 801a5a8:	250b      	movs	r5, #11
 801a5aa:	e7f7      	b.n	801a59c <rcl_guard_condition_init_from_rmw+0x7c>
 801a5ac:	2565      	movs	r5, #101	; 0x65
 801a5ae:	e7f5      	b.n	801a59c <rcl_guard_condition_init_from_rmw+0x7c>
 801a5b0:	6828      	ldr	r0, [r5, #0]
 801a5b2:	3028      	adds	r0, #40	; 0x28
 801a5b4:	f002 fd56 	bl	801d064 <rmw_create_guard_condition>
 801a5b8:	6038      	str	r0, [r7, #0]
 801a5ba:	6867      	ldr	r7, [r4, #4]
 801a5bc:	683e      	ldr	r6, [r7, #0]
 801a5be:	b126      	cbz	r6, 801a5ca <rcl_guard_condition_init_from_rmw+0xaa>
 801a5c0:	2301      	movs	r3, #1
 801a5c2:	713b      	strb	r3, [r7, #4]
 801a5c4:	e7de      	b.n	801a584 <rcl_guard_condition_init_from_rmw+0x64>
 801a5c6:	250a      	movs	r5, #10
 801a5c8:	e7e8      	b.n	801a59c <rcl_guard_condition_init_from_rmw+0x7c>
 801a5ca:	9b02      	ldr	r3, [sp, #8]
 801a5cc:	4638      	mov	r0, r7
 801a5ce:	9905      	ldr	r1, [sp, #20]
 801a5d0:	2501      	movs	r5, #1
 801a5d2:	4798      	blx	r3
 801a5d4:	6066      	str	r6, [r4, #4]
 801a5d6:	e7e1      	b.n	801a59c <rcl_guard_condition_init_from_rmw+0x7c>

0801a5d8 <rcl_guard_condition_fini>:
 801a5d8:	b570      	push	{r4, r5, r6, lr}
 801a5da:	b082      	sub	sp, #8
 801a5dc:	b1f0      	cbz	r0, 801a61c <rcl_guard_condition_fini+0x44>
 801a5de:	6843      	ldr	r3, [r0, #4]
 801a5e0:	4604      	mov	r4, r0
 801a5e2:	b163      	cbz	r3, 801a5fe <rcl_guard_condition_fini+0x26>
 801a5e4:	6818      	ldr	r0, [r3, #0]
 801a5e6:	68de      	ldr	r6, [r3, #12]
 801a5e8:	6999      	ldr	r1, [r3, #24]
 801a5ea:	b160      	cbz	r0, 801a606 <rcl_guard_condition_fini+0x2e>
 801a5ec:	791d      	ldrb	r5, [r3, #4]
 801a5ee:	b965      	cbnz	r5, 801a60a <rcl_guard_condition_fini+0x32>
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	47b0      	blx	r6
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	4628      	mov	r0, r5
 801a5f8:	6063      	str	r3, [r4, #4]
 801a5fa:	b002      	add	sp, #8
 801a5fc:	bd70      	pop	{r4, r5, r6, pc}
 801a5fe:	461d      	mov	r5, r3
 801a600:	4628      	mov	r0, r5
 801a602:	b002      	add	sp, #8
 801a604:	bd70      	pop	{r4, r5, r6, pc}
 801a606:	4605      	mov	r5, r0
 801a608:	e7f2      	b.n	801a5f0 <rcl_guard_condition_fini+0x18>
 801a60a:	9101      	str	r1, [sp, #4]
 801a60c:	f002 fd40 	bl	801d090 <rmw_destroy_guard_condition>
 801a610:	1e05      	subs	r5, r0, #0
 801a612:	6863      	ldr	r3, [r4, #4]
 801a614:	9901      	ldr	r1, [sp, #4]
 801a616:	bf18      	it	ne
 801a618:	2501      	movne	r5, #1
 801a61a:	e7e9      	b.n	801a5f0 <rcl_guard_condition_fini+0x18>
 801a61c:	250b      	movs	r5, #11
 801a61e:	4628      	mov	r0, r5
 801a620:	b002      	add	sp, #8
 801a622:	bd70      	pop	{r4, r5, r6, pc}

0801a624 <rcl_guard_condition_get_default_options>:
 801a624:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a626:	b087      	sub	sp, #28
 801a628:	4606      	mov	r6, r0
 801a62a:	4c0b      	ldr	r4, [pc, #44]	; (801a658 <rcl_guard_condition_get_default_options+0x34>)
 801a62c:	4668      	mov	r0, sp
 801a62e:	f7f9 fcf7 	bl	8014020 <rcutils_get_default_allocator>
 801a632:	46ee      	mov	lr, sp
 801a634:	46a4      	mov	ip, r4
 801a636:	4625      	mov	r5, r4
 801a638:	4634      	mov	r4, r6
 801a63a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a63e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a644:	f8de 7000 	ldr.w	r7, [lr]
 801a648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a64a:	4630      	mov	r0, r6
 801a64c:	f8cc 7000 	str.w	r7, [ip]
 801a650:	6027      	str	r7, [r4, #0]
 801a652:	b007      	add	sp, #28
 801a654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a656:	bf00      	nop
 801a658:	20016e50 	.word	0x20016e50

0801a65c <rcl_guard_condition_get_rmw_handle>:
 801a65c:	b110      	cbz	r0, 801a664 <rcl_guard_condition_get_rmw_handle+0x8>
 801a65e:	6840      	ldr	r0, [r0, #4]
 801a660:	b100      	cbz	r0, 801a664 <rcl_guard_condition_get_rmw_handle+0x8>
 801a662:	6800      	ldr	r0, [r0, #0]
 801a664:	4770      	bx	lr
 801a666:	bf00      	nop

0801a668 <rcl_init>:
 801a668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a66c:	1e05      	subs	r5, r0, #0
 801a66e:	b09e      	sub	sp, #120	; 0x78
 801a670:	460e      	mov	r6, r1
 801a672:	4690      	mov	r8, r2
 801a674:	461f      	mov	r7, r3
 801a676:	f340 809f 	ble.w	801a7b8 <rcl_init+0x150>
 801a67a:	2900      	cmp	r1, #0
 801a67c:	f000 809f 	beq.w	801a7be <rcl_init+0x156>
 801a680:	f1a1 0e04 	sub.w	lr, r1, #4
 801a684:	f04f 0c00 	mov.w	ip, #0
 801a688:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801a68c:	f10c 0c01 	add.w	ip, ip, #1
 801a690:	2c00      	cmp	r4, #0
 801a692:	f000 8094 	beq.w	801a7be <rcl_init+0x156>
 801a696:	4565      	cmp	r5, ip
 801a698:	d1f6      	bne.n	801a688 <rcl_init+0x20>
 801a69a:	f1b8 0f00 	cmp.w	r8, #0
 801a69e:	f000 808e 	beq.w	801a7be <rcl_init+0x156>
 801a6a2:	f8d8 4000 	ldr.w	r4, [r8]
 801a6a6:	2c00      	cmp	r4, #0
 801a6a8:	f000 8089 	beq.w	801a7be <rcl_init+0x156>
 801a6ac:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801a6b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a6b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a6b6:	6823      	ldr	r3, [r4, #0]
 801a6b8:	a819      	add	r0, sp, #100	; 0x64
 801a6ba:	f8cc 3000 	str.w	r3, [ip]
 801a6be:	f7f9 fcbd 	bl	801403c <rcutils_allocator_is_valid>
 801a6c2:	f080 0001 	eor.w	r0, r0, #1
 801a6c6:	b2c0      	uxtb	r0, r0
 801a6c8:	2800      	cmp	r0, #0
 801a6ca:	d178      	bne.n	801a7be <rcl_init+0x156>
 801a6cc:	2f00      	cmp	r7, #0
 801a6ce:	d076      	beq.n	801a7be <rcl_init+0x156>
 801a6d0:	683b      	ldr	r3, [r7, #0]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d178      	bne.n	801a7c8 <rcl_init+0x160>
 801a6d6:	2178      	movs	r1, #120	; 0x78
 801a6d8:	2001      	movs	r0, #1
 801a6da:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801a6de:	4798      	blx	r3
 801a6e0:	4604      	mov	r4, r0
 801a6e2:	6038      	str	r0, [r7, #0]
 801a6e4:	2800      	cmp	r0, #0
 801a6e6:	f000 80b6 	beq.w	801a856 <rcl_init+0x1ee>
 801a6ea:	a802      	add	r0, sp, #8
 801a6ec:	f002 fa4c 	bl	801cb88 <rmw_get_zero_initialized_context>
 801a6f0:	a902      	add	r1, sp, #8
 801a6f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801a6f6:	2250      	movs	r2, #80	; 0x50
 801a6f8:	f005 fc01 	bl	801fefe <memcpy>
 801a6fc:	ac19      	add	r4, sp, #100	; 0x64
 801a6fe:	f8d7 e000 	ldr.w	lr, [r7]
 801a702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a704:	46f4      	mov	ip, lr
 801a706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a70a:	6823      	ldr	r3, [r4, #0]
 801a70c:	f10e 0114 	add.w	r1, lr, #20
 801a710:	4640      	mov	r0, r8
 801a712:	f8cc 3000 	str.w	r3, [ip]
 801a716:	f7f7 ff19 	bl	801254c <rcl_init_options_copy>
 801a71a:	4604      	mov	r4, r0
 801a71c:	2800      	cmp	r0, #0
 801a71e:	d144      	bne.n	801a7aa <rcl_init+0x142>
 801a720:	f8d7 9000 	ldr.w	r9, [r7]
 801a724:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801a728:	f8c9 0020 	str.w	r0, [r9, #32]
 801a72c:	f8c9 5018 	str.w	r5, [r9, #24]
 801a730:	f8c9 801c 	str.w	r8, [r9, #28]
 801a734:	2d00      	cmp	r5, #0
 801a736:	d04e      	beq.n	801a7d6 <rcl_init+0x16e>
 801a738:	2e00      	cmp	r6, #0
 801a73a:	d04c      	beq.n	801a7d6 <rcl_init+0x16e>
 801a73c:	2104      	movs	r1, #4
 801a73e:	4628      	mov	r0, r5
 801a740:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801a744:	4798      	blx	r3
 801a746:	f8c9 0020 	str.w	r0, [r9, #32]
 801a74a:	f8d7 9000 	ldr.w	r9, [r7]
 801a74e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801a752:	46ca      	mov	sl, r9
 801a754:	b343      	cbz	r3, 801a7a8 <rcl_init+0x140>
 801a756:	2d01      	cmp	r5, #1
 801a758:	f178 0300 	sbcs.w	r3, r8, #0
 801a75c:	db3b      	blt.n	801a7d6 <rcl_init+0x16e>
 801a75e:	2400      	movs	r4, #0
 801a760:	3e04      	subs	r6, #4
 801a762:	46a1      	mov	r9, r4
 801a764:	e00b      	b.n	801a77e <rcl_init+0x116>
 801a766:	6831      	ldr	r1, [r6, #0]
 801a768:	f005 fbc9 	bl	801fefe <memcpy>
 801a76c:	3401      	adds	r4, #1
 801a76e:	f149 0900 	adc.w	r9, r9, #0
 801a772:	45c8      	cmp	r8, r9
 801a774:	bf08      	it	eq
 801a776:	42a5      	cmpeq	r5, r4
 801a778:	d02b      	beq.n	801a7d2 <rcl_init+0x16a>
 801a77a:	f8d7 a000 	ldr.w	sl, [r7]
 801a77e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801a782:	f7e5 fdbd 	bl	8000300 <strlen>
 801a786:	1c42      	adds	r2, r0, #1
 801a788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a78a:	4610      	mov	r0, r2
 801a78c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801a78e:	f8da a020 	ldr.w	sl, [sl, #32]
 801a792:	9201      	str	r2, [sp, #4]
 801a794:	4798      	blx	r3
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801a79c:	6a1b      	ldr	r3, [r3, #32]
 801a79e:	9a01      	ldr	r2, [sp, #4]
 801a7a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a7a4:	2800      	cmp	r0, #0
 801a7a6:	d1de      	bne.n	801a766 <rcl_init+0xfe>
 801a7a8:	240a      	movs	r4, #10
 801a7aa:	4638      	mov	r0, r7
 801a7ac:	f7ff fe4e 	bl	801a44c <__cleanup_context>
 801a7b0:	4620      	mov	r0, r4
 801a7b2:	b01e      	add	sp, #120	; 0x78
 801a7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7b8:	2900      	cmp	r1, #0
 801a7ba:	f43f af6e 	beq.w	801a69a <rcl_init+0x32>
 801a7be:	240b      	movs	r4, #11
 801a7c0:	4620      	mov	r0, r4
 801a7c2:	b01e      	add	sp, #120	; 0x78
 801a7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7c8:	2464      	movs	r4, #100	; 0x64
 801a7ca:	4620      	mov	r0, r4
 801a7cc:	b01e      	add	sp, #120	; 0x78
 801a7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7d2:	f8d7 9000 	ldr.w	r9, [r7]
 801a7d6:	4926      	ldr	r1, [pc, #152]	; (801a870 <rcl_init+0x208>)
 801a7d8:	680b      	ldr	r3, [r1, #0]
 801a7da:	3301      	adds	r3, #1
 801a7dc:	d036      	beq.n	801a84c <rcl_init+0x1e4>
 801a7de:	461a      	mov	r2, r3
 801a7e0:	2400      	movs	r4, #0
 801a7e2:	600b      	str	r3, [r1, #0]
 801a7e4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801a7e8:	607b      	str	r3, [r7, #4]
 801a7ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a7ec:	3301      	adds	r3, #1
 801a7ee:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801a7f2:	d034      	beq.n	801a85e <rcl_init+0x1f6>
 801a7f4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801a7f8:	b93b      	cbnz	r3, 801a80a <rcl_init+0x1a2>
 801a7fa:	3030      	adds	r0, #48	; 0x30
 801a7fc:	f000 f83a 	bl	801a874 <rcl_get_localhost_only>
 801a800:	4604      	mov	r4, r0
 801a802:	2800      	cmp	r0, #0
 801a804:	d1d1      	bne.n	801a7aa <rcl_init+0x142>
 801a806:	683b      	ldr	r3, [r7, #0]
 801a808:	6958      	ldr	r0, [r3, #20]
 801a80a:	aa18      	add	r2, sp, #96	; 0x60
 801a80c:	a917      	add	r1, sp, #92	; 0x5c
 801a80e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a810:	f000 fc38 	bl	801b084 <rcl_validate_enclave_name>
 801a814:	4604      	mov	r4, r0
 801a816:	2800      	cmp	r0, #0
 801a818:	d1c7      	bne.n	801a7aa <rcl_init+0x142>
 801a81a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a81c:	b9eb      	cbnz	r3, 801a85a <rcl_init+0x1f2>
 801a81e:	6839      	ldr	r1, [r7, #0]
 801a820:	694b      	ldr	r3, [r1, #20]
 801a822:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801a826:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801a828:	f000 f9c8 	bl	801abbc <rcl_get_security_options_from_environment>
 801a82c:	4604      	mov	r4, r0
 801a82e:	2800      	cmp	r0, #0
 801a830:	d1bb      	bne.n	801a7aa <rcl_init+0x142>
 801a832:	6839      	ldr	r1, [r7, #0]
 801a834:	6948      	ldr	r0, [r1, #20]
 801a836:	3128      	adds	r1, #40	; 0x28
 801a838:	3018      	adds	r0, #24
 801a83a:	f7fa f843 	bl	80148c4 <rmw_init>
 801a83e:	4604      	mov	r4, r0
 801a840:	2800      	cmp	r0, #0
 801a842:	d0bd      	beq.n	801a7c0 <rcl_init+0x158>
 801a844:	f7ff fdde 	bl	801a404 <rcl_convert_rmw_ret_to_rcl_ret>
 801a848:	4604      	mov	r4, r0
 801a84a:	e7ae      	b.n	801a7aa <rcl_init+0x142>
 801a84c:	2201      	movs	r2, #1
 801a84e:	461c      	mov	r4, r3
 801a850:	600a      	str	r2, [r1, #0]
 801a852:	4613      	mov	r3, r2
 801a854:	e7c6      	b.n	801a7e4 <rcl_init+0x17c>
 801a856:	240a      	movs	r4, #10
 801a858:	e7b2      	b.n	801a7c0 <rcl_init+0x158>
 801a85a:	2401      	movs	r4, #1
 801a85c:	e7a5      	b.n	801a7aa <rcl_init+0x142>
 801a85e:	3024      	adds	r0, #36	; 0x24
 801a860:	f003 fbc6 	bl	801dff0 <rcl_get_default_domain_id>
 801a864:	4604      	mov	r4, r0
 801a866:	2800      	cmp	r0, #0
 801a868:	d19f      	bne.n	801a7aa <rcl_init+0x142>
 801a86a:	683b      	ldr	r3, [r7, #0]
 801a86c:	6958      	ldr	r0, [r3, #20]
 801a86e:	e7c1      	b.n	801a7f4 <rcl_init+0x18c>
 801a870:	20016e64 	.word	0x20016e64

0801a874 <rcl_get_localhost_only>:
 801a874:	b510      	push	{r4, lr}
 801a876:	2300      	movs	r3, #0
 801a878:	b082      	sub	sp, #8
 801a87a:	9301      	str	r3, [sp, #4]
 801a87c:	b1b8      	cbz	r0, 801a8ae <rcl_get_localhost_only+0x3a>
 801a87e:	4604      	mov	r4, r0
 801a880:	a901      	add	r1, sp, #4
 801a882:	480c      	ldr	r0, [pc, #48]	; (801a8b4 <rcl_get_localhost_only+0x40>)
 801a884:	f7f9 fbe8 	bl	8014058 <rcutils_get_env>
 801a888:	b110      	cbz	r0, 801a890 <rcl_get_localhost_only+0x1c>
 801a88a:	2001      	movs	r0, #1
 801a88c:	b002      	add	sp, #8
 801a88e:	bd10      	pop	{r4, pc}
 801a890:	9b01      	ldr	r3, [sp, #4]
 801a892:	b113      	cbz	r3, 801a89a <rcl_get_localhost_only+0x26>
 801a894:	781a      	ldrb	r2, [r3, #0]
 801a896:	2a31      	cmp	r2, #49	; 0x31
 801a898:	d004      	beq.n	801a8a4 <rcl_get_localhost_only+0x30>
 801a89a:	2302      	movs	r3, #2
 801a89c:	2000      	movs	r0, #0
 801a89e:	7023      	strb	r3, [r4, #0]
 801a8a0:	b002      	add	sp, #8
 801a8a2:	bd10      	pop	{r4, pc}
 801a8a4:	785b      	ldrb	r3, [r3, #1]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d1f7      	bne.n	801a89a <rcl_get_localhost_only+0x26>
 801a8aa:	2301      	movs	r3, #1
 801a8ac:	e7f6      	b.n	801a89c <rcl_get_localhost_only+0x28>
 801a8ae:	200b      	movs	r0, #11
 801a8b0:	b002      	add	sp, #8
 801a8b2:	bd10      	pop	{r4, pc}
 801a8b4:	08024844 	.word	0x08024844

0801a8b8 <rcl_node_resolve_name>:
 801a8b8:	b082      	sub	sp, #8
 801a8ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8be:	b091      	sub	sp, #68	; 0x44
 801a8c0:	ac1a      	add	r4, sp, #104	; 0x68
 801a8c2:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801a8c6:	e884 000c 	stmia.w	r4, {r2, r3}
 801a8ca:	2800      	cmp	r0, #0
 801a8cc:	d03d      	beq.n	801a94a <rcl_node_resolve_name+0x92>
 801a8ce:	460c      	mov	r4, r1
 801a8d0:	4605      	mov	r5, r0
 801a8d2:	f7f8 f81d 	bl	8012910 <rcl_node_get_options>
 801a8d6:	2800      	cmp	r0, #0
 801a8d8:	d03a      	beq.n	801a950 <rcl_node_resolve_name+0x98>
 801a8da:	4628      	mov	r0, r5
 801a8dc:	f7f8 f808 	bl	80128f0 <rcl_node_get_name>
 801a8e0:	4606      	mov	r6, r0
 801a8e2:	4628      	mov	r0, r5
 801a8e4:	ad0b      	add	r5, sp, #44	; 0x2c
 801a8e6:	f7f8 f80b 	bl	8012900 <rcl_node_get_namespace>
 801a8ea:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801a8ee:	4607      	mov	r7, r0
 801a8f0:	46ac      	mov	ip, r5
 801a8f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a8f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a8fa:	f8de 3000 	ldr.w	r3, [lr]
 801a8fe:	f8cc 3000 	str.w	r3, [ip]
 801a902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a904:	b30b      	cbz	r3, 801a94a <rcl_node_resolve_name+0x92>
 801a906:	4689      	mov	r9, r1
 801a908:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801a90c:	f002 f80e 	bl	801c92c <rcutils_get_zero_initialized_string_map>
 801a910:	ab10      	add	r3, sp, #64	; 0x40
 801a912:	9008      	str	r0, [sp, #32]
 801a914:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801a918:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a91c:	2100      	movs	r1, #0
 801a91e:	a808      	add	r0, sp, #32
 801a920:	e895 000c 	ldmia.w	r5, {r2, r3}
 801a924:	f002 f878 	bl	801ca18 <rcutils_string_map_init>
 801a928:	4683      	mov	fp, r0
 801a92a:	b1a0      	cbz	r0, 801a956 <rcl_node_resolve_name+0x9e>
 801a92c:	f7f9 fbac 	bl	8014088 <rcutils_get_error_string>
 801a930:	f7f9 fbc2 	bl	80140b8 <rcutils_reset_error>
 801a934:	f1bb 0f0a 	cmp.w	fp, #10
 801a938:	bf18      	it	ne
 801a93a:	f04f 0b01 	movne.w	fp, #1
 801a93e:	4658      	mov	r0, fp
 801a940:	b011      	add	sp, #68	; 0x44
 801a942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a946:	b002      	add	sp, #8
 801a948:	4770      	bx	lr
 801a94a:	f04f 0b0b 	mov.w	fp, #11
 801a94e:	e7f6      	b.n	801a93e <rcl_node_resolve_name+0x86>
 801a950:	f04f 0b01 	mov.w	fp, #1
 801a954:	e7f3      	b.n	801a93e <rcl_node_resolve_name+0x86>
 801a956:	9009      	str	r0, [sp, #36]	; 0x24
 801a958:	9007      	str	r0, [sp, #28]
 801a95a:	a808      	add	r0, sp, #32
 801a95c:	f003 fcdc 	bl	801e318 <rcl_get_default_topic_name_substitutions>
 801a960:	4683      	mov	fp, r0
 801a962:	b180      	cbz	r0, 801a986 <rcl_node_resolve_name+0xce>
 801a964:	280a      	cmp	r0, #10
 801a966:	a808      	add	r0, sp, #32
 801a968:	bf18      	it	ne
 801a96a:	f04f 0b01 	movne.w	fp, #1
 801a96e:	f002 f893 	bl	801ca98 <rcutils_string_map_fini>
 801a972:	4604      	mov	r4, r0
 801a974:	2800      	cmp	r0, #0
 801a976:	d15b      	bne.n	801aa30 <rcl_node_resolve_name+0x178>
 801a978:	4651      	mov	r1, sl
 801a97a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a97c:	47c8      	blx	r9
 801a97e:	4651      	mov	r1, sl
 801a980:	4620      	mov	r0, r4
 801a982:	47c8      	blx	r9
 801a984:	e7db      	b.n	801a93e <rcl_node_resolve_name+0x86>
 801a986:	ab09      	add	r3, sp, #36	; 0x24
 801a988:	46ec      	mov	ip, sp
 801a98a:	9305      	str	r3, [sp, #20]
 801a98c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a98e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a992:	682b      	ldr	r3, [r5, #0]
 801a994:	463a      	mov	r2, r7
 801a996:	4631      	mov	r1, r6
 801a998:	4620      	mov	r0, r4
 801a99a:	f8cc 3000 	str.w	r3, [ip]
 801a99e:	ab08      	add	r3, sp, #32
 801a9a0:	f003 fb5a 	bl	801e058 <rcl_expand_topic_name>
 801a9a4:	4683      	mov	fp, r0
 801a9a6:	b9d8      	cbnz	r0, 801a9e0 <rcl_node_resolve_name+0x128>
 801a9a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a9aa:	4602      	mov	r2, r0
 801a9ac:	9009      	str	r0, [sp, #36]	; 0x24
 801a9ae:	a90a      	add	r1, sp, #40	; 0x28
 801a9b0:	4620      	mov	r0, r4
 801a9b2:	f002 f985 	bl	801ccc0 <rmw_validate_full_topic_name>
 801a9b6:	bb50      	cbnz	r0, 801aa0e <rcl_node_resolve_name+0x156>
 801a9b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a9ba:	2d00      	cmp	r5, #0
 801a9bc:	d140      	bne.n	801aa40 <rcl_node_resolve_name+0x188>
 801a9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a9c0:	a808      	add	r0, sp, #32
 801a9c2:	601c      	str	r4, [r3, #0]
 801a9c4:	f002 f868 	bl	801ca98 <rcutils_string_map_fini>
 801a9c8:	4683      	mov	fp, r0
 801a9ca:	2800      	cmp	r0, #0
 801a9cc:	d043      	beq.n	801aa56 <rcl_node_resolve_name+0x19e>
 801a9ce:	f7f9 fb5b 	bl	8014088 <rcutils_get_error_string>
 801a9d2:	46a8      	mov	r8, r5
 801a9d4:	f04f 0b01 	mov.w	fp, #1
 801a9d8:	462c      	mov	r4, r5
 801a9da:	f7f9 fb6d 	bl	80140b8 <rcutils_reset_error>
 801a9de:	e00a      	b.n	801a9f6 <rcl_node_resolve_name+0x13e>
 801a9e0:	2867      	cmp	r0, #103	; 0x67
 801a9e2:	bf14      	ite	ne
 801a9e4:	f04f 0800 	movne.w	r8, #0
 801a9e8:	f008 0801 	andeq.w	r8, r8, #1
 801a9ec:	9c07      	ldr	r4, [sp, #28]
 801a9ee:	a808      	add	r0, sp, #32
 801a9f0:	f002 f852 	bl	801ca98 <rcutils_string_map_fini>
 801a9f4:	bb50      	cbnz	r0, 801aa4c <rcl_node_resolve_name+0x194>
 801a9f6:	4651      	mov	r1, sl
 801a9f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a9fa:	47c8      	blx	r9
 801a9fc:	4651      	mov	r1, sl
 801a9fe:	4620      	mov	r0, r4
 801aa00:	47c8      	blx	r9
 801aa02:	f1b8 0f00 	cmp.w	r8, #0
 801aa06:	bf18      	it	ne
 801aa08:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801aa0c:	e797      	b.n	801a93e <rcl_node_resolve_name+0x86>
 801aa0e:	f7f9 fb3b 	bl	8014088 <rcutils_get_error_string>
 801aa12:	f7f9 fb51 	bl	80140b8 <rcutils_reset_error>
 801aa16:	a808      	add	r0, sp, #32
 801aa18:	f002 f83e 	bl	801ca98 <rcutils_string_map_fini>
 801aa1c:	b998      	cbnz	r0, 801aa46 <rcl_node_resolve_name+0x18e>
 801aa1e:	4651      	mov	r1, sl
 801aa20:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa22:	47c8      	blx	r9
 801aa24:	4651      	mov	r1, sl
 801aa26:	4620      	mov	r0, r4
 801aa28:	f04f 0b01 	mov.w	fp, #1
 801aa2c:	47c8      	blx	r9
 801aa2e:	e786      	b.n	801a93e <rcl_node_resolve_name+0x86>
 801aa30:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801aa34:	f7f9 fb28 	bl	8014088 <rcutils_get_error_string>
 801aa38:	f7f9 fb3e 	bl	80140b8 <rcutils_reset_error>
 801aa3c:	4644      	mov	r4, r8
 801aa3e:	e7da      	b.n	801a9f6 <rcl_node_resolve_name+0x13e>
 801aa40:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801aa44:	e7d3      	b.n	801a9ee <rcl_node_resolve_name+0x136>
 801aa46:	46d8      	mov	r8, fp
 801aa48:	f04f 0b01 	mov.w	fp, #1
 801aa4c:	f7f9 fb1c 	bl	8014088 <rcutils_get_error_string>
 801aa50:	f7f9 fb32 	bl	80140b8 <rcutils_reset_error>
 801aa54:	e7cf      	b.n	801a9f6 <rcl_node_resolve_name+0x13e>
 801aa56:	4651      	mov	r1, sl
 801aa58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa5a:	47c8      	blx	r9
 801aa5c:	4651      	mov	r1, sl
 801aa5e:	4658      	mov	r0, fp
 801aa60:	47c8      	blx	r9
 801aa62:	e76c      	b.n	801a93e <rcl_node_resolve_name+0x86>

0801aa64 <exact_match_lookup>:
 801aa64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa66:	f102 0708 	add.w	r7, r2, #8
 801aa6a:	460b      	mov	r3, r1
 801aa6c:	b085      	sub	sp, #20
 801aa6e:	4614      	mov	r4, r2
 801aa70:	4606      	mov	r6, r0
 801aa72:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801aa76:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	4919      	ldr	r1, [pc, #100]	; (801aae4 <exact_match_lookup+0x80>)
 801aa7e:	e894 000c 	ldmia.w	r4, {r2, r3}
 801aa82:	f001 ff1b 	bl	801c8bc <rcutils_join_path>
 801aa86:	7833      	ldrb	r3, [r6, #0]
 801aa88:	4605      	mov	r5, r0
 801aa8a:	2b2f      	cmp	r3, #47	; 0x2f
 801aa8c:	d023      	beq.n	801aad6 <exact_match_lookup+0x72>
 801aa8e:	f104 030c 	add.w	r3, r4, #12
 801aa92:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aa96:	e88d 0003 	stmia.w	sp, {r0, r1}
 801aa9a:	1c70      	adds	r0, r6, #1
 801aa9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801aaa0:	f001 ff12 	bl	801c8c8 <rcutils_to_native_path>
 801aaa4:	4606      	mov	r6, r0
 801aaa6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801aaaa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aaae:	4631      	mov	r1, r6
 801aab0:	4628      	mov	r0, r5
 801aab2:	e894 000c 	ldmia.w	r4, {r2, r3}
 801aab6:	f001 ff01 	bl	801c8bc <rcutils_join_path>
 801aaba:	4603      	mov	r3, r0
 801aabc:	4630      	mov	r0, r6
 801aabe:	6862      	ldr	r2, [r4, #4]
 801aac0:	461e      	mov	r6, r3
 801aac2:	6921      	ldr	r1, [r4, #16]
 801aac4:	4790      	blx	r2
 801aac6:	4628      	mov	r0, r5
 801aac8:	4635      	mov	r5, r6
 801aaca:	6863      	ldr	r3, [r4, #4]
 801aacc:	6921      	ldr	r1, [r4, #16]
 801aace:	4798      	blx	r3
 801aad0:	4628      	mov	r0, r5
 801aad2:	b005      	add	sp, #20
 801aad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aad6:	7873      	ldrb	r3, [r6, #1]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d1d8      	bne.n	801aa8e <exact_match_lookup+0x2a>
 801aadc:	4628      	mov	r0, r5
 801aade:	b005      	add	sp, #20
 801aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aae2:	bf00      	nop
 801aae4:	08024894 	.word	0x08024894

0801aae8 <rcl_get_secure_root>:
 801aae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aaec:	b085      	sub	sp, #20
 801aaee:	b168      	cbz	r0, 801ab0c <rcl_get_secure_root+0x24>
 801aaf0:	4607      	mov	r7, r0
 801aaf2:	4608      	mov	r0, r1
 801aaf4:	460c      	mov	r4, r1
 801aaf6:	f7f9 faa1 	bl	801403c <rcutils_allocator_is_valid>
 801aafa:	b138      	cbz	r0, 801ab0c <rcl_get_secure_root+0x24>
 801aafc:	2300      	movs	r3, #0
 801aafe:	482d      	ldr	r0, [pc, #180]	; (801abb4 <rcl_get_secure_root+0xcc>)
 801ab00:	a903      	add	r1, sp, #12
 801ab02:	9303      	str	r3, [sp, #12]
 801ab04:	f7f9 faa8 	bl	8014058 <rcutils_get_env>
 801ab08:	4605      	mov	r5, r0
 801ab0a:	b120      	cbz	r0, 801ab16 <rcl_get_secure_root+0x2e>
 801ab0c:	2500      	movs	r5, #0
 801ab0e:	4628      	mov	r0, r5
 801ab10:	b005      	add	sp, #20
 801ab12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab16:	9b03      	ldr	r3, [sp, #12]
 801ab18:	781a      	ldrb	r2, [r3, #0]
 801ab1a:	2a00      	cmp	r2, #0
 801ab1c:	d0f6      	beq.n	801ab0c <rcl_get_secure_root+0x24>
 801ab1e:	f104 090c 	add.w	r9, r4, #12
 801ab22:	e899 0003 	ldmia.w	r9, {r0, r1}
 801ab26:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ab30:	f7f9 fc18 	bl	8014364 <rcutils_strdup>
 801ab34:	4680      	mov	r8, r0
 801ab36:	2800      	cmp	r0, #0
 801ab38:	d0e8      	beq.n	801ab0c <rcl_get_secure_root+0x24>
 801ab3a:	a903      	add	r1, sp, #12
 801ab3c:	481e      	ldr	r0, [pc, #120]	; (801abb8 <rcl_get_secure_root+0xd0>)
 801ab3e:	9503      	str	r5, [sp, #12]
 801ab40:	f7f9 fa8a 	bl	8014058 <rcutils_get_env>
 801ab44:	b160      	cbz	r0, 801ab60 <rcl_get_secure_root+0x78>
 801ab46:	2600      	movs	r6, #0
 801ab48:	4630      	mov	r0, r6
 801ab4a:	6863      	ldr	r3, [r4, #4]
 801ab4c:	6921      	ldr	r1, [r4, #16]
 801ab4e:	4798      	blx	r3
 801ab50:	4640      	mov	r0, r8
 801ab52:	6863      	ldr	r3, [r4, #4]
 801ab54:	6921      	ldr	r1, [r4, #16]
 801ab56:	4798      	blx	r3
 801ab58:	4628      	mov	r0, r5
 801ab5a:	b005      	add	sp, #20
 801ab5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab60:	9b03      	ldr	r3, [sp, #12]
 801ab62:	781e      	ldrb	r6, [r3, #0]
 801ab64:	b1f6      	cbz	r6, 801aba4 <rcl_get_secure_root+0xbc>
 801ab66:	e899 0003 	ldmia.w	r9, {r0, r1}
 801ab6a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ab74:	f7f9 fbf6 	bl	8014364 <rcutils_strdup>
 801ab78:	4606      	mov	r6, r0
 801ab7a:	2800      	cmp	r0, #0
 801ab7c:	d0e3      	beq.n	801ab46 <rcl_get_secure_root+0x5e>
 801ab7e:	4622      	mov	r2, r4
 801ab80:	4641      	mov	r1, r8
 801ab82:	f7ff ff6f 	bl	801aa64 <exact_match_lookup>
 801ab86:	4605      	mov	r5, r0
 801ab88:	2d00      	cmp	r5, #0
 801ab8a:	d0dd      	beq.n	801ab48 <rcl_get_secure_root+0x60>
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	f001 fe93 	bl	801c8b8 <rcutils_is_directory>
 801ab92:	4603      	mov	r3, r0
 801ab94:	2800      	cmp	r0, #0
 801ab96:	d1d7      	bne.n	801ab48 <rcl_get_secure_root+0x60>
 801ab98:	4628      	mov	r0, r5
 801ab9a:	6921      	ldr	r1, [r4, #16]
 801ab9c:	461d      	mov	r5, r3
 801ab9e:	6863      	ldr	r3, [r4, #4]
 801aba0:	4798      	blx	r3
 801aba2:	e7d1      	b.n	801ab48 <rcl_get_secure_root+0x60>
 801aba4:	4622      	mov	r2, r4
 801aba6:	4638      	mov	r0, r7
 801aba8:	4641      	mov	r1, r8
 801abaa:	f7ff ff5b 	bl	801aa64 <exact_match_lookup>
 801abae:	4605      	mov	r5, r0
 801abb0:	e7ea      	b.n	801ab88 <rcl_get_secure_root+0xa0>
 801abb2:	bf00      	nop
 801abb4:	080248a0 	.word	0x080248a0
 801abb8:	080248b8 	.word	0x080248b8

0801abbc <rcl_get_security_options_from_environment>:
 801abbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abc0:	b082      	sub	sp, #8
 801abc2:	2300      	movs	r3, #0
 801abc4:	4606      	mov	r6, r0
 801abc6:	460f      	mov	r7, r1
 801abc8:	4821      	ldr	r0, [pc, #132]	; (801ac50 <rcl_get_security_options_from_environment+0x94>)
 801abca:	a901      	add	r1, sp, #4
 801abcc:	4690      	mov	r8, r2
 801abce:	9301      	str	r3, [sp, #4]
 801abd0:	f7f9 fa42 	bl	8014058 <rcutils_get_env>
 801abd4:	b120      	cbz	r0, 801abe0 <rcl_get_security_options_from_environment+0x24>
 801abd6:	2501      	movs	r5, #1
 801abd8:	4628      	mov	r0, r5
 801abda:	b002      	add	sp, #8
 801abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abe0:	4604      	mov	r4, r0
 801abe2:	491c      	ldr	r1, [pc, #112]	; (801ac54 <rcl_get_security_options_from_environment+0x98>)
 801abe4:	9801      	ldr	r0, [sp, #4]
 801abe6:	f7e5 fb2b 	bl	8000240 <strcmp>
 801abea:	4605      	mov	r5, r0
 801abec:	b9f0      	cbnz	r0, 801ac2c <rcl_get_security_options_from_environment+0x70>
 801abee:	9001      	str	r0, [sp, #4]
 801abf0:	f1b8 0f00 	cmp.w	r8, #0
 801abf4:	d021      	beq.n	801ac3a <rcl_get_security_options_from_environment+0x7e>
 801abf6:	a901      	add	r1, sp, #4
 801abf8:	4817      	ldr	r0, [pc, #92]	; (801ac58 <rcl_get_security_options_from_environment+0x9c>)
 801abfa:	f7f9 fa2d 	bl	8014058 <rcutils_get_env>
 801abfe:	2800      	cmp	r0, #0
 801ac00:	d1e9      	bne.n	801abd6 <rcl_get_security_options_from_environment+0x1a>
 801ac02:	4916      	ldr	r1, [pc, #88]	; (801ac5c <rcl_get_security_options_from_environment+0xa0>)
 801ac04:	9801      	ldr	r0, [sp, #4]
 801ac06:	f7e5 fb1b 	bl	8000240 <strcmp>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	4639      	mov	r1, r7
 801ac0e:	4630      	mov	r0, r6
 801ac10:	fab3 f383 	clz	r3, r3
 801ac14:	095b      	lsrs	r3, r3, #5
 801ac16:	f888 3000 	strb.w	r3, [r8]
 801ac1a:	f7ff ff65 	bl	801aae8 <rcl_get_secure_root>
 801ac1e:	b170      	cbz	r0, 801ac3e <rcl_get_security_options_from_environment+0x82>
 801ac20:	f8c8 0004 	str.w	r0, [r8, #4]
 801ac24:	4628      	mov	r0, r5
 801ac26:	b002      	add	sp, #8
 801ac28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac2c:	4625      	mov	r5, r4
 801ac2e:	f888 4000 	strb.w	r4, [r8]
 801ac32:	4628      	mov	r0, r5
 801ac34:	b002      	add	sp, #8
 801ac36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac3a:	250b      	movs	r5, #11
 801ac3c:	e7cc      	b.n	801abd8 <rcl_get_security_options_from_environment+0x1c>
 801ac3e:	f898 5000 	ldrb.w	r5, [r8]
 801ac42:	f1a5 0501 	sub.w	r5, r5, #1
 801ac46:	fab5 f585 	clz	r5, r5
 801ac4a:	096d      	lsrs	r5, r5, #5
 801ac4c:	e7c4      	b.n	801abd8 <rcl_get_security_options_from_environment+0x1c>
 801ac4e:	bf00      	nop
 801ac50:	08024858 	.word	0x08024858
 801ac54:	0802486c 	.word	0x0802486c
 801ac58:	08024874 	.word	0x08024874
 801ac5c:	0802488c 	.word	0x0802488c

0801ac60 <rcl_get_system_time>:
 801ac60:	4608      	mov	r0, r1
 801ac62:	f7f9 bbbd 	b.w	80143e0 <rcutils_system_time_now>
 801ac66:	bf00      	nop

0801ac68 <rcl_get_steady_time>:
 801ac68:	4608      	mov	r0, r1
 801ac6a:	f7f9 bbdf 	b.w	801442c <rcutils_steady_time_now>
 801ac6e:	bf00      	nop

0801ac70 <rcl_get_ros_time>:
 801ac70:	7a03      	ldrb	r3, [r0, #8]
 801ac72:	b510      	push	{r4, lr}
 801ac74:	460c      	mov	r4, r1
 801ac76:	b143      	cbz	r3, 801ac8a <rcl_get_ros_time+0x1a>
 801ac78:	2105      	movs	r1, #5
 801ac7a:	f001 fd79 	bl	801c770 <__atomic_load_8>
 801ac7e:	4602      	mov	r2, r0
 801ac80:	460b      	mov	r3, r1
 801ac82:	2000      	movs	r0, #0
 801ac84:	e9c4 2300 	strd	r2, r3, [r4]
 801ac88:	bd10      	pop	{r4, pc}
 801ac8a:	4608      	mov	r0, r1
 801ac8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac90:	f7f9 bba6 	b.w	80143e0 <rcutils_system_time_now>

0801ac94 <rcl_clock_init>:
 801ac94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac96:	4605      	mov	r5, r0
 801ac98:	4610      	mov	r0, r2
 801ac9a:	4614      	mov	r4, r2
 801ac9c:	460e      	mov	r6, r1
 801ac9e:	f7f9 f9cd 	bl	801403c <rcutils_allocator_is_valid>
 801aca2:	b128      	cbz	r0, 801acb0 <rcl_clock_init+0x1c>
 801aca4:	2d03      	cmp	r5, #3
 801aca6:	d803      	bhi.n	801acb0 <rcl_clock_init+0x1c>
 801aca8:	e8df f005 	tbb	[pc, r5]
 801acac:	0659301f 	.word	0x0659301f
 801acb0:	f04f 0c0b 	mov.w	ip, #11
 801acb4:	4660      	mov	r0, ip
 801acb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acb8:	2c00      	cmp	r4, #0
 801acba:	d0f9      	beq.n	801acb0 <rcl_clock_init+0x1c>
 801acbc:	fab6 f386 	clz	r3, r6
 801acc0:	095b      	lsrs	r3, r3, #5
 801acc2:	2e00      	cmp	r6, #0
 801acc4:	d0f4      	beq.n	801acb0 <rcl_clock_init+0x1c>
 801acc6:	6133      	str	r3, [r6, #16]
 801acc8:	469c      	mov	ip, r3
 801acca:	f106 0514 	add.w	r5, r6, #20
 801acce:	4f32      	ldr	r7, [pc, #200]	; (801ad98 <rcl_clock_init+0x104>)
 801acd0:	f04f 0e03 	mov.w	lr, #3
 801acd4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801acd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801acda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801acdc:	6823      	ldr	r3, [r4, #0]
 801acde:	4660      	mov	r0, ip
 801ace0:	602b      	str	r3, [r5, #0]
 801ace2:	60f7      	str	r7, [r6, #12]
 801ace4:	f886 e000 	strb.w	lr, [r6]
 801ace8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acea:	2e00      	cmp	r6, #0
 801acec:	d0e0      	beq.n	801acb0 <rcl_clock_init+0x1c>
 801acee:	2300      	movs	r3, #0
 801acf0:	f106 0514 	add.w	r5, r6, #20
 801acf4:	7033      	strb	r3, [r6, #0]
 801acf6:	469c      	mov	ip, r3
 801acf8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801acfc:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801ad00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad04:	6823      	ldr	r3, [r4, #0]
 801ad06:	4660      	mov	r0, ip
 801ad08:	602b      	str	r3, [r5, #0]
 801ad0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad0c:	2c00      	cmp	r4, #0
 801ad0e:	d0cf      	beq.n	801acb0 <rcl_clock_init+0x1c>
 801ad10:	fab6 f586 	clz	r5, r6
 801ad14:	096d      	lsrs	r5, r5, #5
 801ad16:	2e00      	cmp	r6, #0
 801ad18:	d0ca      	beq.n	801acb0 <rcl_clock_init+0x1c>
 801ad1a:	46a6      	mov	lr, r4
 801ad1c:	7035      	strb	r5, [r6, #0]
 801ad1e:	f106 0c14 	add.w	ip, r6, #20
 801ad22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ad26:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801ad2a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801ad2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ad32:	f8de 3000 	ldr.w	r3, [lr]
 801ad36:	2010      	movs	r0, #16
 801ad38:	f8cc 3000 	str.w	r3, [ip]
 801ad3c:	6823      	ldr	r3, [r4, #0]
 801ad3e:	6921      	ldr	r1, [r4, #16]
 801ad40:	4798      	blx	r3
 801ad42:	6130      	str	r0, [r6, #16]
 801ad44:	b320      	cbz	r0, 801ad90 <rcl_clock_init+0xfc>
 801ad46:	2200      	movs	r2, #0
 801ad48:	2300      	movs	r3, #0
 801ad4a:	46ac      	mov	ip, r5
 801ad4c:	7205      	strb	r5, [r0, #8]
 801ad4e:	e9c0 2300 	strd	r2, r3, [r0]
 801ad52:	4a12      	ldr	r2, [pc, #72]	; (801ad9c <rcl_clock_init+0x108>)
 801ad54:	2301      	movs	r3, #1
 801ad56:	4660      	mov	r0, ip
 801ad58:	60f2      	str	r2, [r6, #12]
 801ad5a:	7033      	strb	r3, [r6, #0]
 801ad5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad5e:	2c00      	cmp	r4, #0
 801ad60:	d0a6      	beq.n	801acb0 <rcl_clock_init+0x1c>
 801ad62:	fab6 f386 	clz	r3, r6
 801ad66:	095b      	lsrs	r3, r3, #5
 801ad68:	2e00      	cmp	r6, #0
 801ad6a:	d0a1      	beq.n	801acb0 <rcl_clock_init+0x1c>
 801ad6c:	6133      	str	r3, [r6, #16]
 801ad6e:	469c      	mov	ip, r3
 801ad70:	f106 0514 	add.w	r5, r6, #20
 801ad74:	f8df e028 	ldr.w	lr, [pc, #40]	; 801ada0 <rcl_clock_init+0x10c>
 801ad78:	2702      	movs	r7, #2
 801ad7a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801ad7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad82:	6823      	ldr	r3, [r4, #0]
 801ad84:	4660      	mov	r0, ip
 801ad86:	602b      	str	r3, [r5, #0]
 801ad88:	f8c6 e00c 	str.w	lr, [r6, #12]
 801ad8c:	7037      	strb	r7, [r6, #0]
 801ad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad90:	f04f 0c0a 	mov.w	ip, #10
 801ad94:	e78e      	b.n	801acb4 <rcl_clock_init+0x20>
 801ad96:	bf00      	nop
 801ad98:	0801ac69 	.word	0x0801ac69
 801ad9c:	0801ac71 	.word	0x0801ac71
 801ada0:	0801ac61 	.word	0x0801ac61

0801ada4 <rcl_clock_get_now>:
 801ada4:	b140      	cbz	r0, 801adb8 <rcl_clock_get_now+0x14>
 801ada6:	b139      	cbz	r1, 801adb8 <rcl_clock_get_now+0x14>
 801ada8:	7803      	ldrb	r3, [r0, #0]
 801adaa:	b11b      	cbz	r3, 801adb4 <rcl_clock_get_now+0x10>
 801adac:	68c3      	ldr	r3, [r0, #12]
 801adae:	b10b      	cbz	r3, 801adb4 <rcl_clock_get_now+0x10>
 801adb0:	6900      	ldr	r0, [r0, #16]
 801adb2:	4718      	bx	r3
 801adb4:	2001      	movs	r0, #1
 801adb6:	4770      	bx	lr
 801adb8:	200b      	movs	r0, #11
 801adba:	4770      	bx	lr

0801adbc <rcl_timer_call>:
 801adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adc0:	b087      	sub	sp, #28
 801adc2:	2800      	cmp	r0, #0
 801adc4:	d06c      	beq.n	801aea0 <rcl_timer_call+0xe4>
 801adc6:	6803      	ldr	r3, [r0, #0]
 801adc8:	4604      	mov	r4, r0
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d062      	beq.n	801ae94 <rcl_timer_call+0xd8>
 801adce:	f3bf 8f5b 	dmb	ish
 801add2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801add6:	f3bf 8f5b 	dmb	ish
 801adda:	2b00      	cmp	r3, #0
 801addc:	d14f      	bne.n	801ae7e <rcl_timer_call+0xc2>
 801adde:	6803      	ldr	r3, [r0, #0]
 801ade0:	a904      	add	r1, sp, #16
 801ade2:	6818      	ldr	r0, [r3, #0]
 801ade4:	f7ff ffde 	bl	801ada4 <rcl_clock_get_now>
 801ade8:	4605      	mov	r5, r0
 801adea:	2800      	cmp	r0, #0
 801adec:	d149      	bne.n	801ae82 <rcl_timer_call+0xc6>
 801adee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	db49      	blt.n	801ae8a <rcl_timer_call+0xce>
 801adf6:	2605      	movs	r6, #5
 801adf8:	6820      	ldr	r0, [r4, #0]
 801adfa:	9600      	str	r6, [sp, #0]
 801adfc:	3020      	adds	r0, #32
 801adfe:	f001 fd23 	bl	801c848 <__atomic_exchange_8>
 801ae02:	6823      	ldr	r3, [r4, #0]
 801ae04:	4680      	mov	r8, r0
 801ae06:	f3bf 8f5b 	dmb	ish
 801ae0a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801ae0e:	f3bf 8f5b 	dmb	ish
 801ae12:	6820      	ldr	r0, [r4, #0]
 801ae14:	4689      	mov	r9, r1
 801ae16:	4631      	mov	r1, r6
 801ae18:	3028      	adds	r0, #40	; 0x28
 801ae1a:	f001 fca9 	bl	801c770 <__atomic_load_8>
 801ae1e:	460f      	mov	r7, r1
 801ae20:	4631      	mov	r1, r6
 801ae22:	4606      	mov	r6, r0
 801ae24:	6820      	ldr	r0, [r4, #0]
 801ae26:	3018      	adds	r0, #24
 801ae28:	f001 fca2 	bl	801c770 <__atomic_load_8>
 801ae2c:	4602      	mov	r2, r0
 801ae2e:	9804      	ldr	r0, [sp, #16]
 801ae30:	460b      	mov	r3, r1
 801ae32:	18b6      	adds	r6, r6, r2
 801ae34:	f8dd c014 	ldr.w	ip, [sp, #20]
 801ae38:	4692      	mov	sl, r2
 801ae3a:	eb47 0701 	adc.w	r7, r7, r1
 801ae3e:	4286      	cmp	r6, r0
 801ae40:	eb77 010c 	sbcs.w	r1, r7, ip
 801ae44:	da04      	bge.n	801ae50 <rcl_timer_call+0x94>
 801ae46:	ea53 0102 	orrs.w	r1, r3, r2
 801ae4a:	d12e      	bne.n	801aeaa <rcl_timer_call+0xee>
 801ae4c:	4606      	mov	r6, r0
 801ae4e:	4667      	mov	r7, ip
 801ae50:	6820      	ldr	r0, [r4, #0]
 801ae52:	2105      	movs	r1, #5
 801ae54:	4632      	mov	r2, r6
 801ae56:	463b      	mov	r3, r7
 801ae58:	3028      	adds	r0, #40	; 0x28
 801ae5a:	9100      	str	r1, [sp, #0]
 801ae5c:	f001 fcbe 	bl	801c7dc <__atomic_store_8>
 801ae60:	f1bb 0f00 	cmp.w	fp, #0
 801ae64:	d00d      	beq.n	801ae82 <rcl_timer_call+0xc6>
 801ae66:	9a04      	ldr	r2, [sp, #16]
 801ae68:	4620      	mov	r0, r4
 801ae6a:	9b05      	ldr	r3, [sp, #20]
 801ae6c:	ebb2 0208 	subs.w	r2, r2, r8
 801ae70:	eb63 0309 	sbc.w	r3, r3, r9
 801ae74:	47d8      	blx	fp
 801ae76:	4628      	mov	r0, r5
 801ae78:	b007      	add	sp, #28
 801ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae7e:	f240 3521 	movw	r5, #801	; 0x321
 801ae82:	4628      	mov	r0, r5
 801ae84:	b007      	add	sp, #28
 801ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae8a:	2501      	movs	r5, #1
 801ae8c:	4628      	mov	r0, r5
 801ae8e:	b007      	add	sp, #28
 801ae90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae94:	f44f 7548 	mov.w	r5, #800	; 0x320
 801ae98:	4628      	mov	r0, r5
 801ae9a:	b007      	add	sp, #28
 801ae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea0:	250b      	movs	r5, #11
 801aea2:	4628      	mov	r0, r5
 801aea4:	b007      	add	sp, #28
 801aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeaa:	1b80      	subs	r0, r0, r6
 801aeac:	eb6c 0107 	sbc.w	r1, ip, r7
 801aeb0:	3801      	subs	r0, #1
 801aeb2:	f161 0100 	sbc.w	r1, r1, #0
 801aeb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801aeba:	f7e5 fcf3 	bl	80008a4 <__aeabi_ldivmod>
 801aebe:	9b02      	ldr	r3, [sp, #8]
 801aec0:	3001      	adds	r0, #1
 801aec2:	f141 0100 	adc.w	r1, r1, #0
 801aec6:	fb00 f303 	mul.w	r3, r0, r3
 801aeca:	fb01 330a 	mla	r3, r1, sl, r3
 801aece:	fba0 0a0a 	umull	r0, sl, r0, sl
 801aed2:	1986      	adds	r6, r0, r6
 801aed4:	4453      	add	r3, sl
 801aed6:	eb43 0707 	adc.w	r7, r3, r7
 801aeda:	e7b9      	b.n	801ae50 <rcl_timer_call+0x94>

0801aedc <rcl_timer_is_ready>:
 801aedc:	b570      	push	{r4, r5, r6, lr}
 801aede:	b082      	sub	sp, #8
 801aee0:	b380      	cbz	r0, 801af44 <rcl_timer_is_ready+0x68>
 801aee2:	6803      	ldr	r3, [r0, #0]
 801aee4:	4604      	mov	r4, r0
 801aee6:	b38b      	cbz	r3, 801af4c <rcl_timer_is_ready+0x70>
 801aee8:	460d      	mov	r5, r1
 801aeea:	b359      	cbz	r1, 801af44 <rcl_timer_is_ready+0x68>
 801aeec:	f3bf 8f5b 	dmb	ish
 801aef0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801aef4:	f3bf 8f5b 	dmb	ish
 801aef8:	b953      	cbnz	r3, 801af10 <rcl_timer_is_ready+0x34>
 801aefa:	6803      	ldr	r3, [r0, #0]
 801aefc:	4669      	mov	r1, sp
 801aefe:	6818      	ldr	r0, [r3, #0]
 801af00:	f7ff ff50 	bl	801ada4 <rcl_clock_get_now>
 801af04:	4606      	mov	r6, r0
 801af06:	b148      	cbz	r0, 801af1c <rcl_timer_is_ready+0x40>
 801af08:	f240 3321 	movw	r3, #801	; 0x321
 801af0c:	4298      	cmp	r0, r3
 801af0e:	d102      	bne.n	801af16 <rcl_timer_is_ready+0x3a>
 801af10:	2300      	movs	r3, #0
 801af12:	461e      	mov	r6, r3
 801af14:	702b      	strb	r3, [r5, #0]
 801af16:	4630      	mov	r0, r6
 801af18:	b002      	add	sp, #8
 801af1a:	bd70      	pop	{r4, r5, r6, pc}
 801af1c:	6820      	ldr	r0, [r4, #0]
 801af1e:	2105      	movs	r1, #5
 801af20:	3028      	adds	r0, #40	; 0x28
 801af22:	f001 fc25 	bl	801c770 <__atomic_load_8>
 801af26:	9b00      	ldr	r3, [sp, #0]
 801af28:	1ac0      	subs	r0, r0, r3
 801af2a:	9b01      	ldr	r3, [sp, #4]
 801af2c:	eb61 0103 	sbc.w	r1, r1, r3
 801af30:	2801      	cmp	r0, #1
 801af32:	4630      	mov	r0, r6
 801af34:	f171 0300 	sbcs.w	r3, r1, #0
 801af38:	bfb4      	ite	lt
 801af3a:	2301      	movlt	r3, #1
 801af3c:	2300      	movge	r3, #0
 801af3e:	702b      	strb	r3, [r5, #0]
 801af40:	b002      	add	sp, #8
 801af42:	bd70      	pop	{r4, r5, r6, pc}
 801af44:	260b      	movs	r6, #11
 801af46:	4630      	mov	r0, r6
 801af48:	b002      	add	sp, #8
 801af4a:	bd70      	pop	{r4, r5, r6, pc}
 801af4c:	f44f 7648 	mov.w	r6, #800	; 0x320
 801af50:	e7e1      	b.n	801af16 <rcl_timer_is_ready+0x3a>
 801af52:	bf00      	nop

0801af54 <rcl_timer_get_time_until_next_call>:
 801af54:	b570      	push	{r4, r5, r6, lr}
 801af56:	b082      	sub	sp, #8
 801af58:	b330      	cbz	r0, 801afa8 <rcl_timer_get_time_until_next_call+0x54>
 801af5a:	6803      	ldr	r3, [r0, #0]
 801af5c:	4604      	mov	r4, r0
 801af5e:	b33b      	cbz	r3, 801afb0 <rcl_timer_get_time_until_next_call+0x5c>
 801af60:	460d      	mov	r5, r1
 801af62:	b309      	cbz	r1, 801afa8 <rcl_timer_get_time_until_next_call+0x54>
 801af64:	f3bf 8f5b 	dmb	ish
 801af68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801af6c:	f3bf 8f5b 	dmb	ish
 801af70:	b9ab      	cbnz	r3, 801af9e <rcl_timer_get_time_until_next_call+0x4a>
 801af72:	6803      	ldr	r3, [r0, #0]
 801af74:	4669      	mov	r1, sp
 801af76:	6818      	ldr	r0, [r3, #0]
 801af78:	f7ff ff14 	bl	801ada4 <rcl_clock_get_now>
 801af7c:	4606      	mov	r6, r0
 801af7e:	b958      	cbnz	r0, 801af98 <rcl_timer_get_time_until_next_call+0x44>
 801af80:	6820      	ldr	r0, [r4, #0]
 801af82:	2105      	movs	r1, #5
 801af84:	3028      	adds	r0, #40	; 0x28
 801af86:	f001 fbf3 	bl	801c770 <__atomic_load_8>
 801af8a:	9b00      	ldr	r3, [sp, #0]
 801af8c:	1ac0      	subs	r0, r0, r3
 801af8e:	9b01      	ldr	r3, [sp, #4]
 801af90:	eb61 0103 	sbc.w	r1, r1, r3
 801af94:	6028      	str	r0, [r5, #0]
 801af96:	6069      	str	r1, [r5, #4]
 801af98:	4630      	mov	r0, r6
 801af9a:	b002      	add	sp, #8
 801af9c:	bd70      	pop	{r4, r5, r6, pc}
 801af9e:	f240 3621 	movw	r6, #801	; 0x321
 801afa2:	4630      	mov	r0, r6
 801afa4:	b002      	add	sp, #8
 801afa6:	bd70      	pop	{r4, r5, r6, pc}
 801afa8:	260b      	movs	r6, #11
 801afaa:	4630      	mov	r0, r6
 801afac:	b002      	add	sp, #8
 801afae:	bd70      	pop	{r4, r5, r6, pc}
 801afb0:	f44f 7648 	mov.w	r6, #800	; 0x320
 801afb4:	e7f0      	b.n	801af98 <rcl_timer_get_time_until_next_call+0x44>
 801afb6:	bf00      	nop

0801afb8 <rcl_timer_get_guard_condition>:
 801afb8:	b130      	cbz	r0, 801afc8 <rcl_timer_get_guard_condition+0x10>
 801afba:	6800      	ldr	r0, [r0, #0]
 801afbc:	b120      	cbz	r0, 801afc8 <rcl_timer_get_guard_condition+0x10>
 801afbe:	68c3      	ldr	r3, [r0, #12]
 801afc0:	b10b      	cbz	r3, 801afc6 <rcl_timer_get_guard_condition+0xe>
 801afc2:	3008      	adds	r0, #8
 801afc4:	4770      	bx	lr
 801afc6:	4618      	mov	r0, r3
 801afc8:	4770      	bx	lr
 801afca:	bf00      	nop

0801afcc <rcl_validate_enclave_name_with_size>:
 801afcc:	2800      	cmp	r0, #0
 801afce:	d049      	beq.n	801b064 <rcl_validate_enclave_name_with_size+0x98>
 801afd0:	b570      	push	{r4, r5, r6, lr}
 801afd2:	4615      	mov	r5, r2
 801afd4:	b0c2      	sub	sp, #264	; 0x108
 801afd6:	b19a      	cbz	r2, 801b000 <rcl_validate_enclave_name_with_size+0x34>
 801afd8:	461e      	mov	r6, r3
 801afda:	466a      	mov	r2, sp
 801afdc:	ab01      	add	r3, sp, #4
 801afde:	460c      	mov	r4, r1
 801afe0:	f7f9 fa8a 	bl	80144f8 <rmw_validate_namespace_with_size>
 801afe4:	4684      	mov	ip, r0
 801afe6:	b9b8      	cbnz	r0, 801b018 <rcl_validate_enclave_name_with_size+0x4c>
 801afe8:	9900      	ldr	r1, [sp, #0]
 801afea:	b171      	cbz	r1, 801b00a <rcl_validate_enclave_name_with_size+0x3e>
 801afec:	2907      	cmp	r1, #7
 801afee:	d019      	beq.n	801b024 <rcl_validate_enclave_name_with_size+0x58>
 801aff0:	1e4b      	subs	r3, r1, #1
 801aff2:	2b05      	cmp	r3, #5
 801aff4:	d83a      	bhi.n	801b06c <rcl_validate_enclave_name_with_size+0xa0>
 801aff6:	e8df f003 	tbb	[pc, r3]
 801affa:	2926      	.short	0x2926
 801affc:	1d322f2c 	.word	0x1d322f2c
 801b000:	f04f 0c0b 	mov.w	ip, #11
 801b004:	4660      	mov	r0, ip
 801b006:	b042      	add	sp, #264	; 0x108
 801b008:	bd70      	pop	{r4, r5, r6, pc}
 801b00a:	2907      	cmp	r1, #7
 801b00c:	d00a      	beq.n	801b024 <rcl_validate_enclave_name_with_size+0x58>
 801b00e:	2300      	movs	r3, #0
 801b010:	4660      	mov	r0, ip
 801b012:	602b      	str	r3, [r5, #0]
 801b014:	b042      	add	sp, #264	; 0x108
 801b016:	bd70      	pop	{r4, r5, r6, pc}
 801b018:	f7ff f9f4 	bl	801a404 <rcl_convert_rmw_ret_to_rcl_ret>
 801b01c:	4684      	mov	ip, r0
 801b01e:	4660      	mov	r0, ip
 801b020:	b042      	add	sp, #264	; 0x108
 801b022:	bd70      	pop	{r4, r5, r6, pc}
 801b024:	2cff      	cmp	r4, #255	; 0xff
 801b026:	d9f2      	bls.n	801b00e <rcl_validate_enclave_name_with_size+0x42>
 801b028:	6029      	str	r1, [r5, #0]
 801b02a:	2e00      	cmp	r6, #0
 801b02c:	d0ea      	beq.n	801b004 <rcl_validate_enclave_name_with_size+0x38>
 801b02e:	23fe      	movs	r3, #254	; 0xfe
 801b030:	6033      	str	r3, [r6, #0]
 801b032:	e7e7      	b.n	801b004 <rcl_validate_enclave_name_with_size+0x38>
 801b034:	2306      	movs	r3, #6
 801b036:	602b      	str	r3, [r5, #0]
 801b038:	2e00      	cmp	r6, #0
 801b03a:	d0e3      	beq.n	801b004 <rcl_validate_enclave_name_with_size+0x38>
 801b03c:	9b01      	ldr	r3, [sp, #4]
 801b03e:	4660      	mov	r0, ip
 801b040:	6033      	str	r3, [r6, #0]
 801b042:	b042      	add	sp, #264	; 0x108
 801b044:	bd70      	pop	{r4, r5, r6, pc}
 801b046:	2301      	movs	r3, #1
 801b048:	602b      	str	r3, [r5, #0]
 801b04a:	e7f5      	b.n	801b038 <rcl_validate_enclave_name_with_size+0x6c>
 801b04c:	2302      	movs	r3, #2
 801b04e:	602b      	str	r3, [r5, #0]
 801b050:	e7f2      	b.n	801b038 <rcl_validate_enclave_name_with_size+0x6c>
 801b052:	2303      	movs	r3, #3
 801b054:	602b      	str	r3, [r5, #0]
 801b056:	e7ef      	b.n	801b038 <rcl_validate_enclave_name_with_size+0x6c>
 801b058:	2304      	movs	r3, #4
 801b05a:	602b      	str	r3, [r5, #0]
 801b05c:	e7ec      	b.n	801b038 <rcl_validate_enclave_name_with_size+0x6c>
 801b05e:	2305      	movs	r3, #5
 801b060:	602b      	str	r3, [r5, #0]
 801b062:	e7e9      	b.n	801b038 <rcl_validate_enclave_name_with_size+0x6c>
 801b064:	f04f 0c0b 	mov.w	ip, #11
 801b068:	4660      	mov	r0, ip
 801b06a:	4770      	bx	lr
 801b06c:	460b      	mov	r3, r1
 801b06e:	4a04      	ldr	r2, [pc, #16]	; (801b080 <rcl_validate_enclave_name_with_size+0xb4>)
 801b070:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b074:	a802      	add	r0, sp, #8
 801b076:	f7f9 f927 	bl	80142c8 <rcutils_snprintf>
 801b07a:	f04f 0c01 	mov.w	ip, #1
 801b07e:	e7c1      	b.n	801b004 <rcl_validate_enclave_name_with_size+0x38>
 801b080:	080248d8 	.word	0x080248d8

0801b084 <rcl_validate_enclave_name>:
 801b084:	b168      	cbz	r0, 801b0a2 <rcl_validate_enclave_name+0x1e>
 801b086:	b570      	push	{r4, r5, r6, lr}
 801b088:	460d      	mov	r5, r1
 801b08a:	4616      	mov	r6, r2
 801b08c:	4604      	mov	r4, r0
 801b08e:	f7e5 f937 	bl	8000300 <strlen>
 801b092:	4633      	mov	r3, r6
 801b094:	4601      	mov	r1, r0
 801b096:	462a      	mov	r2, r5
 801b098:	4620      	mov	r0, r4
 801b09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b09e:	f7ff bf95 	b.w	801afcc <rcl_validate_enclave_name_with_size>
 801b0a2:	200b      	movs	r0, #11
 801b0a4:	4770      	bx	lr
 801b0a6:	bf00      	nop

0801b0a8 <rcl_get_zero_initialized_wait_set>:
 801b0a8:	b510      	push	{r4, lr}
 801b0aa:	4c08      	ldr	r4, [pc, #32]	; (801b0cc <rcl_get_zero_initialized_wait_set+0x24>)
 801b0ac:	4686      	mov	lr, r0
 801b0ae:	4684      	mov	ip, r0
 801b0b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b0b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b0b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b0b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b0bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b0be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b0c2:	6823      	ldr	r3, [r4, #0]
 801b0c4:	4670      	mov	r0, lr
 801b0c6:	f8cc 3000 	str.w	r3, [ip]
 801b0ca:	bd10      	pop	{r4, pc}
 801b0cc:	08024938 	.word	0x08024938

0801b0d0 <rcl_wait_set_is_valid>:
 801b0d0:	b118      	cbz	r0, 801b0da <rcl_wait_set_is_valid+0xa>
 801b0d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b0d4:	3800      	subs	r0, #0
 801b0d6:	bf18      	it	ne
 801b0d8:	2001      	movne	r0, #1
 801b0da:	4770      	bx	lr

0801b0dc <rcl_wait_set_fini>:
 801b0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0e0:	b082      	sub	sp, #8
 801b0e2:	2800      	cmp	r0, #0
 801b0e4:	f000 8095 	beq.w	801b212 <rcl_wait_set_fini+0x136>
 801b0e8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801b0ea:	4604      	mov	r4, r0
 801b0ec:	2e00      	cmp	r6, #0
 801b0ee:	f000 808c 	beq.w	801b20a <rcl_wait_set_fini+0x12e>
 801b0f2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801b0f4:	f002 f9c0 	bl	801d478 <rmw_destroy_wait_set>
 801b0f8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b0fa:	1e06      	subs	r6, r0, #0
 801b0fc:	bf18      	it	ne
 801b0fe:	f44f 7661 	movne.w	r6, #900	; 0x384
 801b102:	2d00      	cmp	r5, #0
 801b104:	f000 8081 	beq.w	801b20a <rcl_wait_set_fini+0x12e>
 801b108:	2700      	movs	r7, #0
 801b10a:	6820      	ldr	r0, [r4, #0]
 801b10c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801b110:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b112:	6067      	str	r7, [r4, #4]
 801b114:	602f      	str	r7, [r5, #0]
 801b116:	b120      	cbz	r0, 801b122 <rcl_wait_set_fini+0x46>
 801b118:	9101      	str	r1, [sp, #4]
 801b11a:	47c0      	blx	r8
 801b11c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b11e:	9901      	ldr	r1, [sp, #4]
 801b120:	6027      	str	r7, [r4, #0]
 801b122:	68a8      	ldr	r0, [r5, #8]
 801b124:	b120      	cbz	r0, 801b130 <rcl_wait_set_fini+0x54>
 801b126:	47c0      	blx	r8
 801b128:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b12a:	2300      	movs	r3, #0
 801b12c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801b130:	f04f 0800 	mov.w	r8, #0
 801b134:	68a0      	ldr	r0, [r4, #8]
 801b136:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801b138:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b13a:	f8c4 800c 	str.w	r8, [r4, #12]
 801b13e:	f8c5 800c 	str.w	r8, [r5, #12]
 801b142:	b128      	cbz	r0, 801b150 <rcl_wait_set_fini+0x74>
 801b144:	47b8      	blx	r7
 801b146:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b148:	f8c4 8008 	str.w	r8, [r4, #8]
 801b14c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801b14e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b150:	f04f 0800 	mov.w	r8, #0
 801b154:	6968      	ldr	r0, [r5, #20]
 801b156:	f8c5 8010 	str.w	r8, [r5, #16]
 801b15a:	b128      	cbz	r0, 801b168 <rcl_wait_set_fini+0x8c>
 801b15c:	47b8      	blx	r7
 801b15e:	f8c5 8014 	str.w	r8, [r5, #20]
 801b162:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b164:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801b166:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b168:	f04f 0800 	mov.w	r8, #0
 801b16c:	6920      	ldr	r0, [r4, #16]
 801b16e:	f8c4 8014 	str.w	r8, [r4, #20]
 801b172:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801b176:	b128      	cbz	r0, 801b184 <rcl_wait_set_fini+0xa8>
 801b178:	47b8      	blx	r7
 801b17a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b17c:	f8c4 8010 	str.w	r8, [r4, #16]
 801b180:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801b182:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b184:	f04f 0800 	mov.w	r8, #0
 801b188:	69a0      	ldr	r0, [r4, #24]
 801b18a:	f8c4 801c 	str.w	r8, [r4, #28]
 801b18e:	f8c5 8018 	str.w	r8, [r5, #24]
 801b192:	b128      	cbz	r0, 801b1a0 <rcl_wait_set_fini+0xc4>
 801b194:	9101      	str	r1, [sp, #4]
 801b196:	47b8      	blx	r7
 801b198:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b19a:	9901      	ldr	r1, [sp, #4]
 801b19c:	f8c4 8018 	str.w	r8, [r4, #24]
 801b1a0:	6a28      	ldr	r0, [r5, #32]
 801b1a2:	b120      	cbz	r0, 801b1ae <rcl_wait_set_fini+0xd2>
 801b1a4:	47b8      	blx	r7
 801b1a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801b1ae:	2700      	movs	r7, #0
 801b1b0:	6a20      	ldr	r0, [r4, #32]
 801b1b2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801b1b6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b1b8:	6267      	str	r7, [r4, #36]	; 0x24
 801b1ba:	626f      	str	r7, [r5, #36]	; 0x24
 801b1bc:	b120      	cbz	r0, 801b1c8 <rcl_wait_set_fini+0xec>
 801b1be:	9101      	str	r1, [sp, #4]
 801b1c0:	47c0      	blx	r8
 801b1c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b1c4:	9901      	ldr	r1, [sp, #4]
 801b1c6:	6227      	str	r7, [r4, #32]
 801b1c8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801b1ca:	b120      	cbz	r0, 801b1d6 <rcl_wait_set_fini+0xfa>
 801b1cc:	47c0      	blx	r8
 801b1ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801b1d6:	2700      	movs	r7, #0
 801b1d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b1da:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801b1de:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b1e0:	62e7      	str	r7, [r4, #44]	; 0x2c
 801b1e2:	632f      	str	r7, [r5, #48]	; 0x30
 801b1e4:	b120      	cbz	r0, 801b1f0 <rcl_wait_set_fini+0x114>
 801b1e6:	9101      	str	r1, [sp, #4]
 801b1e8:	47c0      	blx	r8
 801b1ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b1ec:	9901      	ldr	r1, [sp, #4]
 801b1ee:	62a7      	str	r7, [r4, #40]	; 0x28
 801b1f0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801b1f2:	b120      	cbz	r0, 801b1fe <rcl_wait_set_fini+0x122>
 801b1f4:	47c0      	blx	r8
 801b1f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801b1f8:	2300      	movs	r3, #0
 801b1fa:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801b1fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801b200:	4628      	mov	r0, r5
 801b202:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801b204:	4798      	blx	r3
 801b206:	2300      	movs	r3, #0
 801b208:	6323      	str	r3, [r4, #48]	; 0x30
 801b20a:	4630      	mov	r0, r6
 801b20c:	b002      	add	sp, #8
 801b20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b212:	260b      	movs	r6, #11
 801b214:	4630      	mov	r0, r6
 801b216:	b002      	add	sp, #8
 801b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b21c <rcl_wait_set_add_subscription>:
 801b21c:	b318      	cbz	r0, 801b266 <rcl_wait_set_add_subscription+0x4a>
 801b21e:	b538      	push	{r3, r4, r5, lr}
 801b220:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b222:	4604      	mov	r4, r0
 801b224:	b30b      	cbz	r3, 801b26a <rcl_wait_set_add_subscription+0x4e>
 801b226:	b319      	cbz	r1, 801b270 <rcl_wait_set_add_subscription+0x54>
 801b228:	681d      	ldr	r5, [r3, #0]
 801b22a:	6840      	ldr	r0, [r0, #4]
 801b22c:	4285      	cmp	r5, r0
 801b22e:	d217      	bcs.n	801b260 <rcl_wait_set_add_subscription+0x44>
 801b230:	1c68      	adds	r0, r5, #1
 801b232:	6018      	str	r0, [r3, #0]
 801b234:	6823      	ldr	r3, [r4, #0]
 801b236:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b23a:	b102      	cbz	r2, 801b23e <rcl_wait_set_add_subscription+0x22>
 801b23c:	6015      	str	r5, [r2, #0]
 801b23e:	4608      	mov	r0, r1
 801b240:	f7f7 ff14 	bl	801306c <rcl_subscription_get_rmw_handle>
 801b244:	b150      	cbz	r0, 801b25c <rcl_wait_set_add_subscription+0x40>
 801b246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b248:	6842      	ldr	r2, [r0, #4]
 801b24a:	2000      	movs	r0, #0
 801b24c:	689b      	ldr	r3, [r3, #8]
 801b24e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b252:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b254:	6853      	ldr	r3, [r2, #4]
 801b256:	3301      	adds	r3, #1
 801b258:	6053      	str	r3, [r2, #4]
 801b25a:	bd38      	pop	{r3, r4, r5, pc}
 801b25c:	2001      	movs	r0, #1
 801b25e:	bd38      	pop	{r3, r4, r5, pc}
 801b260:	f240 3086 	movw	r0, #902	; 0x386
 801b264:	bd38      	pop	{r3, r4, r5, pc}
 801b266:	200b      	movs	r0, #11
 801b268:	4770      	bx	lr
 801b26a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b26e:	bd38      	pop	{r3, r4, r5, pc}
 801b270:	200b      	movs	r0, #11
 801b272:	bd38      	pop	{r3, r4, r5, pc}

0801b274 <rcl_wait_set_clear>:
 801b274:	2800      	cmp	r0, #0
 801b276:	d074      	beq.n	801b362 <rcl_wait_set_clear+0xee>
 801b278:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b27a:	b510      	push	{r4, lr}
 801b27c:	4604      	mov	r4, r0
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d071      	beq.n	801b366 <rcl_wait_set_clear+0xf2>
 801b282:	6800      	ldr	r0, [r0, #0]
 801b284:	b138      	cbz	r0, 801b296 <rcl_wait_set_clear+0x22>
 801b286:	6862      	ldr	r2, [r4, #4]
 801b288:	2100      	movs	r1, #0
 801b28a:	0092      	lsls	r2, r2, #2
 801b28c:	f004 fd6a 	bl	801fd64 <memset>
 801b290:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b292:	2200      	movs	r2, #0
 801b294:	601a      	str	r2, [r3, #0]
 801b296:	68a0      	ldr	r0, [r4, #8]
 801b298:	b138      	cbz	r0, 801b2aa <rcl_wait_set_clear+0x36>
 801b29a:	68e2      	ldr	r2, [r4, #12]
 801b29c:	2100      	movs	r1, #0
 801b29e:	0092      	lsls	r2, r2, #2
 801b2a0:	f004 fd60 	bl	801fd64 <memset>
 801b2a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	60da      	str	r2, [r3, #12]
 801b2aa:	69a0      	ldr	r0, [r4, #24]
 801b2ac:	b138      	cbz	r0, 801b2be <rcl_wait_set_clear+0x4a>
 801b2ae:	69e2      	ldr	r2, [r4, #28]
 801b2b0:	2100      	movs	r1, #0
 801b2b2:	0092      	lsls	r2, r2, #2
 801b2b4:	f004 fd56 	bl	801fd64 <memset>
 801b2b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	619a      	str	r2, [r3, #24]
 801b2be:	6a20      	ldr	r0, [r4, #32]
 801b2c0:	b138      	cbz	r0, 801b2d2 <rcl_wait_set_clear+0x5e>
 801b2c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801b2c4:	2100      	movs	r1, #0
 801b2c6:	0092      	lsls	r2, r2, #2
 801b2c8:	f004 fd4c 	bl	801fd64 <memset>
 801b2cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	625a      	str	r2, [r3, #36]	; 0x24
 801b2d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b2d4:	b138      	cbz	r0, 801b2e6 <rcl_wait_set_clear+0x72>
 801b2d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b2d8:	2100      	movs	r1, #0
 801b2da:	0092      	lsls	r2, r2, #2
 801b2dc:	f004 fd42 	bl	801fd64 <memset>
 801b2e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	631a      	str	r2, [r3, #48]	; 0x30
 801b2e6:	6920      	ldr	r0, [r4, #16]
 801b2e8:	b138      	cbz	r0, 801b2fa <rcl_wait_set_clear+0x86>
 801b2ea:	6962      	ldr	r2, [r4, #20]
 801b2ec:	2100      	movs	r1, #0
 801b2ee:	0092      	lsls	r2, r2, #2
 801b2f0:	f004 fd38 	bl	801fd64 <memset>
 801b2f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b2f6:	2200      	movs	r2, #0
 801b2f8:	641a      	str	r2, [r3, #64]	; 0x40
 801b2fa:	6898      	ldr	r0, [r3, #8]
 801b2fc:	b138      	cbz	r0, 801b30e <rcl_wait_set_clear+0x9a>
 801b2fe:	685a      	ldr	r2, [r3, #4]
 801b300:	2100      	movs	r1, #0
 801b302:	0092      	lsls	r2, r2, #2
 801b304:	f004 fd2e 	bl	801fd64 <memset>
 801b308:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b30a:	2200      	movs	r2, #0
 801b30c:	605a      	str	r2, [r3, #4]
 801b30e:	6958      	ldr	r0, [r3, #20]
 801b310:	b138      	cbz	r0, 801b322 <rcl_wait_set_clear+0xae>
 801b312:	691a      	ldr	r2, [r3, #16]
 801b314:	2100      	movs	r1, #0
 801b316:	0092      	lsls	r2, r2, #2
 801b318:	f004 fd24 	bl	801fd64 <memset>
 801b31c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b31e:	2200      	movs	r2, #0
 801b320:	611a      	str	r2, [r3, #16]
 801b322:	6a18      	ldr	r0, [r3, #32]
 801b324:	b138      	cbz	r0, 801b336 <rcl_wait_set_clear+0xc2>
 801b326:	69da      	ldr	r2, [r3, #28]
 801b328:	2100      	movs	r1, #0
 801b32a:	0092      	lsls	r2, r2, #2
 801b32c:	f004 fd1a 	bl	801fd64 <memset>
 801b330:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b332:	2200      	movs	r2, #0
 801b334:	61da      	str	r2, [r3, #28]
 801b336:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801b338:	b138      	cbz	r0, 801b34a <rcl_wait_set_clear+0xd6>
 801b33a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b33c:	2100      	movs	r1, #0
 801b33e:	0092      	lsls	r2, r2, #2
 801b340:	f004 fd10 	bl	801fd64 <memset>
 801b344:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b346:	2200      	movs	r2, #0
 801b348:	629a      	str	r2, [r3, #40]	; 0x28
 801b34a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801b34c:	b140      	cbz	r0, 801b360 <rcl_wait_set_clear+0xec>
 801b34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b350:	2100      	movs	r1, #0
 801b352:	0092      	lsls	r2, r2, #2
 801b354:	f004 fd06 	bl	801fd64 <memset>
 801b358:	2300      	movs	r3, #0
 801b35a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b35c:	4618      	mov	r0, r3
 801b35e:	6353      	str	r3, [r2, #52]	; 0x34
 801b360:	bd10      	pop	{r4, pc}
 801b362:	200b      	movs	r0, #11
 801b364:	4770      	bx	lr
 801b366:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b36a:	bd10      	pop	{r4, pc}

0801b36c <rcl_wait_set_resize>:
 801b36c:	2800      	cmp	r0, #0
 801b36e:	f000 8180 	beq.w	801b672 <rcl_wait_set_resize+0x306>
 801b372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b376:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801b378:	b083      	sub	sp, #12
 801b37a:	4605      	mov	r5, r0
 801b37c:	2c00      	cmp	r4, #0
 801b37e:	f000 817a 	beq.w	801b676 <rcl_wait_set_resize+0x30a>
 801b382:	f04f 0900 	mov.w	r9, #0
 801b386:	461f      	mov	r7, r3
 801b388:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801b38c:	4688      	mov	r8, r1
 801b38e:	4616      	mov	r6, r2
 801b390:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801b394:	f8c0 9004 	str.w	r9, [r0, #4]
 801b398:	f8c4 9000 	str.w	r9, [r4]
 801b39c:	2900      	cmp	r1, #0
 801b39e:	f000 80bf 	beq.w	801b520 <rcl_wait_set_resize+0x1b4>
 801b3a2:	008c      	lsls	r4, r1, #2
 801b3a4:	4652      	mov	r2, sl
 801b3a6:	6800      	ldr	r0, [r0, #0]
 801b3a8:	4621      	mov	r1, r4
 801b3aa:	9301      	str	r3, [sp, #4]
 801b3ac:	4798      	blx	r3
 801b3ae:	9b01      	ldr	r3, [sp, #4]
 801b3b0:	6028      	str	r0, [r5, #0]
 801b3b2:	2800      	cmp	r0, #0
 801b3b4:	f000 80f6 	beq.w	801b5a4 <rcl_wait_set_resize+0x238>
 801b3b8:	4622      	mov	r2, r4
 801b3ba:	4649      	mov	r1, r9
 801b3bc:	9301      	str	r3, [sp, #4]
 801b3be:	f004 fcd1 	bl	801fd64 <memset>
 801b3c2:	f8c5 8004 	str.w	r8, [r5, #4]
 801b3c6:	4652      	mov	r2, sl
 801b3c8:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801b3cc:	4621      	mov	r1, r4
 801b3ce:	9b01      	ldr	r3, [sp, #4]
 801b3d0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801b3d4:	f8c8 9004 	str.w	r9, [r8, #4]
 801b3d8:	4798      	blx	r3
 801b3da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b3dc:	f8c8 0008 	str.w	r0, [r8, #8]
 801b3e0:	689b      	ldr	r3, [r3, #8]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	f000 814a 	beq.w	801b67c <rcl_wait_set_resize+0x310>
 801b3e8:	4622      	mov	r2, r4
 801b3ea:	4649      	mov	r1, r9
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	f004 fcb9 	bl	801fd64 <memset>
 801b3f2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b3f4:	f04f 0800 	mov.w	r8, #0
 801b3f8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b3fc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801b400:	f8c5 800c 	str.w	r8, [r5, #12]
 801b404:	f8c4 800c 	str.w	r8, [r4, #12]
 801b408:	2e00      	cmp	r6, #0
 801b40a:	f040 809b 	bne.w	801b544 <rcl_wait_set_resize+0x1d8>
 801b40e:	68a8      	ldr	r0, [r5, #8]
 801b410:	b128      	cbz	r0, 801b41e <rcl_wait_set_resize+0xb2>
 801b412:	4649      	mov	r1, r9
 801b414:	4790      	blx	r2
 801b416:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b418:	60ae      	str	r6, [r5, #8]
 801b41a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b41e:	f04f 0800 	mov.w	r8, #0
 801b422:	19f6      	adds	r6, r6, r7
 801b424:	f8c4 8010 	str.w	r8, [r4, #16]
 801b428:	f040 80a2 	bne.w	801b570 <rcl_wait_set_resize+0x204>
 801b42c:	6960      	ldr	r0, [r4, #20]
 801b42e:	b130      	cbz	r0, 801b43e <rcl_wait_set_resize+0xd2>
 801b430:	4649      	mov	r1, r9
 801b432:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801b434:	4798      	blx	r3
 801b436:	6166      	str	r6, [r4, #20]
 801b438:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b43a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b43e:	2600      	movs	r6, #0
 801b440:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801b444:	616e      	str	r6, [r5, #20]
 801b446:	6426      	str	r6, [r4, #64]	; 0x40
 801b448:	2f00      	cmp	r7, #0
 801b44a:	f040 80af 	bne.w	801b5ac <rcl_wait_set_resize+0x240>
 801b44e:	6928      	ldr	r0, [r5, #16]
 801b450:	b138      	cbz	r0, 801b462 <rcl_wait_set_resize+0xf6>
 801b452:	4649      	mov	r1, r9
 801b454:	47d0      	blx	sl
 801b456:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b458:	612f      	str	r7, [r5, #16]
 801b45a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b45e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801b462:	2600      	movs	r6, #0
 801b464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b466:	61ee      	str	r6, [r5, #28]
 801b468:	61a6      	str	r6, [r4, #24]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	f040 8093 	bne.w	801b596 <rcl_wait_set_resize+0x22a>
 801b470:	69a8      	ldr	r0, [r5, #24]
 801b472:	b120      	cbz	r0, 801b47e <rcl_wait_set_resize+0x112>
 801b474:	4649      	mov	r1, r9
 801b476:	47d0      	blx	sl
 801b478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b47a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b47c:	61ab      	str	r3, [r5, #24]
 801b47e:	6a20      	ldr	r0, [r4, #32]
 801b480:	b128      	cbz	r0, 801b48e <rcl_wait_set_resize+0x122>
 801b482:	4649      	mov	r1, r9
 801b484:	47d0      	blx	sl
 801b486:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b488:	2300      	movs	r3, #0
 801b48a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801b48e:	2600      	movs	r6, #0
 801b490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b492:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801b494:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801b498:	626e      	str	r6, [r5, #36]	; 0x24
 801b49a:	6266      	str	r6, [r4, #36]	; 0x24
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	f000 8098 	beq.w	801b5d2 <rcl_wait_set_resize+0x266>
 801b4a2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801b4a6:	463a      	mov	r2, r7
 801b4a8:	6a28      	ldr	r0, [r5, #32]
 801b4aa:	4651      	mov	r1, sl
 801b4ac:	47c8      	blx	r9
 801b4ae:	6228      	str	r0, [r5, #32]
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	d077      	beq.n	801b5a4 <rcl_wait_set_resize+0x238>
 801b4b4:	4652      	mov	r2, sl
 801b4b6:	4631      	mov	r1, r6
 801b4b8:	f004 fc54 	bl	801fd64 <memset>
 801b4bc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b4be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4c0:	463a      	mov	r2, r7
 801b4c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b4c4:	4651      	mov	r1, sl
 801b4c6:	626b      	str	r3, [r5, #36]	; 0x24
 801b4c8:	62a6      	str	r6, [r4, #40]	; 0x28
 801b4ca:	47c8      	blx	r9
 801b4cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b4ce:	62e0      	str	r0, [r4, #44]	; 0x2c
 801b4d0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801b4d2:	2c00      	cmp	r4, #0
 801b4d4:	f000 80f2 	beq.w	801b6bc <rcl_wait_set_resize+0x350>
 801b4d8:	4620      	mov	r0, r4
 801b4da:	4652      	mov	r2, sl
 801b4dc:	4631      	mov	r1, r6
 801b4de:	f004 fc41 	bl	801fd64 <memset>
 801b4e2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b4e4:	2600      	movs	r6, #0
 801b4e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4e8:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801b4ea:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801b4ee:	62ee      	str	r6, [r5, #44]	; 0x2c
 801b4f0:	6326      	str	r6, [r4, #48]	; 0x30
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	f040 8097 	bne.w	801b626 <rcl_wait_set_resize+0x2ba>
 801b4f8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801b4fa:	b120      	cbz	r0, 801b506 <rcl_wait_set_resize+0x19a>
 801b4fc:	4639      	mov	r1, r7
 801b4fe:	47c0      	blx	r8
 801b500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b502:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b504:	62ab      	str	r3, [r5, #40]	; 0x28
 801b506:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b508:	2800      	cmp	r0, #0
 801b50a:	d04c      	beq.n	801b5a6 <rcl_wait_set_resize+0x23a>
 801b50c:	4639      	mov	r1, r7
 801b50e:	47c0      	blx	r8
 801b510:	2300      	movs	r3, #0
 801b512:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801b514:	4618      	mov	r0, r3
 801b516:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801b51a:	b003      	add	sp, #12
 801b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b520:	6800      	ldr	r0, [r0, #0]
 801b522:	b120      	cbz	r0, 801b52e <rcl_wait_set_resize+0x1c2>
 801b524:	4651      	mov	r1, sl
 801b526:	47d8      	blx	fp
 801b528:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b52a:	f8c5 8000 	str.w	r8, [r5]
 801b52e:	68a0      	ldr	r0, [r4, #8]
 801b530:	2800      	cmp	r0, #0
 801b532:	f43f af5f 	beq.w	801b3f4 <rcl_wait_set_resize+0x88>
 801b536:	4651      	mov	r1, sl
 801b538:	47d8      	blx	fp
 801b53a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b53c:	2300      	movs	r3, #0
 801b53e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801b542:	e757      	b.n	801b3f4 <rcl_wait_set_resize+0x88>
 801b544:	00b4      	lsls	r4, r6, #2
 801b546:	464a      	mov	r2, r9
 801b548:	68a8      	ldr	r0, [r5, #8]
 801b54a:	4621      	mov	r1, r4
 801b54c:	4798      	blx	r3
 801b54e:	60a8      	str	r0, [r5, #8]
 801b550:	b340      	cbz	r0, 801b5a4 <rcl_wait_set_resize+0x238>
 801b552:	4622      	mov	r2, r4
 801b554:	4641      	mov	r1, r8
 801b556:	f004 fc05 	bl	801fd64 <memset>
 801b55a:	f04f 0800 	mov.w	r8, #0
 801b55e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b560:	60ee      	str	r6, [r5, #12]
 801b562:	19f6      	adds	r6, r6, r7
 801b564:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b568:	f8c4 8010 	str.w	r8, [r4, #16]
 801b56c:	f43f af5e 	beq.w	801b42c <rcl_wait_set_resize+0xc0>
 801b570:	00b6      	lsls	r6, r6, #2
 801b572:	464a      	mov	r2, r9
 801b574:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801b576:	6960      	ldr	r0, [r4, #20]
 801b578:	4631      	mov	r1, r6
 801b57a:	4798      	blx	r3
 801b57c:	4681      	mov	r9, r0
 801b57e:	6160      	str	r0, [r4, #20]
 801b580:	2800      	cmp	r0, #0
 801b582:	f000 8084 	beq.w	801b68e <rcl_wait_set_resize+0x322>
 801b586:	4632      	mov	r2, r6
 801b588:	4641      	mov	r1, r8
 801b58a:	f004 fbeb 	bl	801fd64 <memset>
 801b58e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b590:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b594:	e753      	b.n	801b43e <rcl_wait_set_resize+0xd2>
 801b596:	009c      	lsls	r4, r3, #2
 801b598:	464a      	mov	r2, r9
 801b59a:	69a8      	ldr	r0, [r5, #24]
 801b59c:	4621      	mov	r1, r4
 801b59e:	47c0      	blx	r8
 801b5a0:	61a8      	str	r0, [r5, #24]
 801b5a2:	bb40      	cbnz	r0, 801b5f6 <rcl_wait_set_resize+0x28a>
 801b5a4:	200a      	movs	r0, #10
 801b5a6:	b003      	add	sp, #12
 801b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ac:	00bc      	lsls	r4, r7, #2
 801b5ae:	464a      	mov	r2, r9
 801b5b0:	6928      	ldr	r0, [r5, #16]
 801b5b2:	4621      	mov	r1, r4
 801b5b4:	47c0      	blx	r8
 801b5b6:	6128      	str	r0, [r5, #16]
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	d0f3      	beq.n	801b5a4 <rcl_wait_set_resize+0x238>
 801b5bc:	4622      	mov	r2, r4
 801b5be:	4631      	mov	r1, r6
 801b5c0:	f004 fbd0 	bl	801fd64 <memset>
 801b5c4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b5c6:	616f      	str	r7, [r5, #20]
 801b5c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801b5cc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801b5d0:	e747      	b.n	801b462 <rcl_wait_set_resize+0xf6>
 801b5d2:	6a28      	ldr	r0, [r5, #32]
 801b5d4:	b120      	cbz	r0, 801b5e0 <rcl_wait_set_resize+0x274>
 801b5d6:	4639      	mov	r1, r7
 801b5d8:	47c0      	blx	r8
 801b5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b5dc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b5de:	622b      	str	r3, [r5, #32]
 801b5e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b5e2:	2800      	cmp	r0, #0
 801b5e4:	f43f af7e 	beq.w	801b4e4 <rcl_wait_set_resize+0x178>
 801b5e8:	4639      	mov	r1, r7
 801b5ea:	47c0      	blx	r8
 801b5ec:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801b5f4:	e776      	b.n	801b4e4 <rcl_wait_set_resize+0x178>
 801b5f6:	4622      	mov	r2, r4
 801b5f8:	4631      	mov	r1, r6
 801b5fa:	f004 fbb3 	bl	801fd64 <memset>
 801b5fe:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801b600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b602:	464a      	mov	r2, r9
 801b604:	6a38      	ldr	r0, [r7, #32]
 801b606:	4621      	mov	r1, r4
 801b608:	61eb      	str	r3, [r5, #28]
 801b60a:	61fe      	str	r6, [r7, #28]
 801b60c:	47c0      	blx	r8
 801b60e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b610:	6238      	str	r0, [r7, #32]
 801b612:	6a1f      	ldr	r7, [r3, #32]
 801b614:	2f00      	cmp	r7, #0
 801b616:	d04a      	beq.n	801b6ae <rcl_wait_set_resize+0x342>
 801b618:	4622      	mov	r2, r4
 801b61a:	4631      	mov	r1, r6
 801b61c:	4638      	mov	r0, r7
 801b61e:	f004 fba1 	bl	801fd64 <memset>
 801b622:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801b624:	e733      	b.n	801b48e <rcl_wait_set_resize+0x122>
 801b626:	009c      	lsls	r4, r3, #2
 801b628:	463a      	mov	r2, r7
 801b62a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801b62c:	4621      	mov	r1, r4
 801b62e:	47c8      	blx	r9
 801b630:	62a8      	str	r0, [r5, #40]	; 0x28
 801b632:	2800      	cmp	r0, #0
 801b634:	d0b6      	beq.n	801b5a4 <rcl_wait_set_resize+0x238>
 801b636:	4622      	mov	r2, r4
 801b638:	4631      	mov	r1, r6
 801b63a:	f004 fb93 	bl	801fd64 <memset>
 801b63e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801b642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b644:	463a      	mov	r2, r7
 801b646:	4621      	mov	r1, r4
 801b648:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801b64c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b64e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801b652:	47c8      	blx	r9
 801b654:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b656:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801b65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d034      	beq.n	801b6ca <rcl_wait_set_resize+0x35e>
 801b660:	4622      	mov	r2, r4
 801b662:	4631      	mov	r1, r6
 801b664:	4618      	mov	r0, r3
 801b666:	f004 fb7d 	bl	801fd64 <memset>
 801b66a:	4630      	mov	r0, r6
 801b66c:	b003      	add	sp, #12
 801b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b672:	200b      	movs	r0, #11
 801b674:	4770      	bx	lr
 801b676:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b67a:	e794      	b.n	801b5a6 <rcl_wait_set_resize+0x23a>
 801b67c:	6828      	ldr	r0, [r5, #0]
 801b67e:	4651      	mov	r1, sl
 801b680:	9301      	str	r3, [sp, #4]
 801b682:	47d8      	blx	fp
 801b684:	9b01      	ldr	r3, [sp, #4]
 801b686:	200a      	movs	r0, #10
 801b688:	e9c5 3300 	strd	r3, r3, [r5]
 801b68c:	e78b      	b.n	801b5a6 <rcl_wait_set_resize+0x23a>
 801b68e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b690:	68a8      	ldr	r0, [r5, #8]
 801b692:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801b694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b696:	4798      	blx	r3
 801b698:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b69a:	6928      	ldr	r0, [r5, #16]
 801b69c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b69e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801b6a0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801b6a4:	4790      	blx	r2
 801b6a6:	200a      	movs	r0, #10
 801b6a8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801b6ac:	e77b      	b.n	801b5a6 <rcl_wait_set_resize+0x23a>
 801b6ae:	69a8      	ldr	r0, [r5, #24]
 801b6b0:	4649      	mov	r1, r9
 801b6b2:	47d0      	blx	sl
 801b6b4:	200a      	movs	r0, #10
 801b6b6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801b6ba:	e774      	b.n	801b5a6 <rcl_wait_set_resize+0x23a>
 801b6bc:	6a28      	ldr	r0, [r5, #32]
 801b6be:	4639      	mov	r1, r7
 801b6c0:	47c0      	blx	r8
 801b6c2:	200a      	movs	r0, #10
 801b6c4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801b6c8:	e76d      	b.n	801b5a6 <rcl_wait_set_resize+0x23a>
 801b6ca:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801b6cc:	4639      	mov	r1, r7
 801b6ce:	9301      	str	r3, [sp, #4]
 801b6d0:	47c0      	blx	r8
 801b6d2:	9b01      	ldr	r3, [sp, #4]
 801b6d4:	200a      	movs	r0, #10
 801b6d6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801b6da:	e764      	b.n	801b5a6 <rcl_wait_set_resize+0x23a>

0801b6dc <rcl_wait_set_init>:
 801b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6e0:	b085      	sub	sp, #20
 801b6e2:	4605      	mov	r5, r0
 801b6e4:	460e      	mov	r6, r1
 801b6e6:	4617      	mov	r7, r2
 801b6e8:	a812      	add	r0, sp, #72	; 0x48
 801b6ea:	4698      	mov	r8, r3
 801b6ec:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801b6f0:	f7f8 fca4 	bl	801403c <rcutils_allocator_is_valid>
 801b6f4:	2d00      	cmp	r5, #0
 801b6f6:	d072      	beq.n	801b7de <rcl_wait_set_init+0x102>
 801b6f8:	f080 0001 	eor.w	r0, r0, #1
 801b6fc:	b2c0      	uxtb	r0, r0
 801b6fe:	2800      	cmp	r0, #0
 801b700:	d16d      	bne.n	801b7de <rcl_wait_set_init+0x102>
 801b702:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801b706:	f1ba 0f00 	cmp.w	sl, #0
 801b70a:	d004      	beq.n	801b716 <rcl_wait_set_init+0x3a>
 801b70c:	2464      	movs	r4, #100	; 0x64
 801b70e:	4620      	mov	r0, r4
 801b710:	b005      	add	sp, #20
 801b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b716:	f1b9 0f00 	cmp.w	r9, #0
 801b71a:	d060      	beq.n	801b7de <rcl_wait_set_init+0x102>
 801b71c:	4648      	mov	r0, r9
 801b71e:	f7fe fe8f 	bl	801a440 <rcl_context_is_valid>
 801b722:	2800      	cmp	r0, #0
 801b724:	d068      	beq.n	801b7f8 <rcl_wait_set_init+0x11c>
 801b726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b728:	205c      	movs	r0, #92	; 0x5c
 801b72a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b72c:	4798      	blx	r3
 801b72e:	6328      	str	r0, [r5, #48]	; 0x30
 801b730:	2800      	cmp	r0, #0
 801b732:	d063      	beq.n	801b7fc <rcl_wait_set_init+0x120>
 801b734:	225c      	movs	r2, #92	; 0x5c
 801b736:	4651      	mov	r1, sl
 801b738:	f004 fb14 	bl	801fd64 <memset>
 801b73c:	ac12      	add	r4, sp, #72	; 0x48
 801b73e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801b742:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801b746:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801b74a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801b74e:	eb03 0e02 	add.w	lr, r3, r2
 801b752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b754:	f8d9 9000 	ldr.w	r9, [r9]
 801b758:	449e      	add	lr, r3
 801b75a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b75c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801b760:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801b764:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801b768:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801b76c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801b770:	44be      	add	lr, r7
 801b772:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b776:	6823      	ldr	r3, [r4, #0]
 801b778:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801b77c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801b780:	f8cc 3000 	str.w	r3, [ip]
 801b784:	f001 fe6e 	bl	801d464 <rmw_create_wait_set>
 801b788:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b78a:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801b78e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801b790:	b350      	cbz	r0, 801b7e8 <rcl_wait_set_init+0x10c>
 801b792:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b794:	4643      	mov	r3, r8
 801b796:	463a      	mov	r2, r7
 801b798:	4631      	mov	r1, r6
 801b79a:	9402      	str	r4, [sp, #8]
 801b79c:	4628      	mov	r0, r5
 801b79e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b7a0:	9401      	str	r4, [sp, #4]
 801b7a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b7a4:	9400      	str	r4, [sp, #0]
 801b7a6:	f7ff fde1 	bl	801b36c <rcl_wait_set_resize>
 801b7aa:	4604      	mov	r4, r0
 801b7ac:	2800      	cmp	r0, #0
 801b7ae:	d0ae      	beq.n	801b70e <rcl_wait_set_init+0x32>
 801b7b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801b7b2:	bb2b      	cbnz	r3, 801b800 <rcl_wait_set_init+0x124>
 801b7b4:	2600      	movs	r6, #0
 801b7b6:	4628      	mov	r0, r5
 801b7b8:	4633      	mov	r3, r6
 801b7ba:	4632      	mov	r2, r6
 801b7bc:	4631      	mov	r1, r6
 801b7be:	9600      	str	r6, [sp, #0]
 801b7c0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801b7c4:	f7ff fdd2 	bl	801b36c <rcl_wait_set_resize>
 801b7c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b7ca:	2800      	cmp	r0, #0
 801b7cc:	d09f      	beq.n	801b70e <rcl_wait_set_init+0x32>
 801b7ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801b7d0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801b7d2:	4798      	blx	r3
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	632e      	str	r6, [r5, #48]	; 0x30
 801b7d8:	b005      	add	sp, #20
 801b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7de:	240b      	movs	r4, #11
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	b005      	add	sp, #20
 801b7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7e8:	2401      	movs	r4, #1
 801b7ea:	f001 fe45 	bl	801d478 <rmw_destroy_wait_set>
 801b7ee:	2800      	cmp	r0, #0
 801b7f0:	bf18      	it	ne
 801b7f2:	f44f 7461 	movne.w	r4, #900	; 0x384
 801b7f6:	e7dd      	b.n	801b7b4 <rcl_wait_set_init+0xd8>
 801b7f8:	2465      	movs	r4, #101	; 0x65
 801b7fa:	e788      	b.n	801b70e <rcl_wait_set_init+0x32>
 801b7fc:	240a      	movs	r4, #10
 801b7fe:	e786      	b.n	801b70e <rcl_wait_set_init+0x32>
 801b800:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801b802:	e7f2      	b.n	801b7ea <rcl_wait_set_init+0x10e>

0801b804 <rcl_wait_set_add_guard_condition>:
 801b804:	b318      	cbz	r0, 801b84e <rcl_wait_set_add_guard_condition+0x4a>
 801b806:	b538      	push	{r3, r4, r5, lr}
 801b808:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b80a:	4604      	mov	r4, r0
 801b80c:	b30b      	cbz	r3, 801b852 <rcl_wait_set_add_guard_condition+0x4e>
 801b80e:	b319      	cbz	r1, 801b858 <rcl_wait_set_add_guard_condition+0x54>
 801b810:	68dd      	ldr	r5, [r3, #12]
 801b812:	68c0      	ldr	r0, [r0, #12]
 801b814:	4285      	cmp	r5, r0
 801b816:	d217      	bcs.n	801b848 <rcl_wait_set_add_guard_condition+0x44>
 801b818:	1c68      	adds	r0, r5, #1
 801b81a:	60d8      	str	r0, [r3, #12]
 801b81c:	68a3      	ldr	r3, [r4, #8]
 801b81e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b822:	b102      	cbz	r2, 801b826 <rcl_wait_set_add_guard_condition+0x22>
 801b824:	6015      	str	r5, [r2, #0]
 801b826:	4608      	mov	r0, r1
 801b828:	f7fe ff18 	bl	801a65c <rcl_guard_condition_get_rmw_handle>
 801b82c:	b150      	cbz	r0, 801b844 <rcl_wait_set_add_guard_condition+0x40>
 801b82e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b830:	6842      	ldr	r2, [r0, #4]
 801b832:	2000      	movs	r0, #0
 801b834:	695b      	ldr	r3, [r3, #20]
 801b836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b83a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b83c:	6913      	ldr	r3, [r2, #16]
 801b83e:	3301      	adds	r3, #1
 801b840:	6113      	str	r3, [r2, #16]
 801b842:	bd38      	pop	{r3, r4, r5, pc}
 801b844:	2001      	movs	r0, #1
 801b846:	bd38      	pop	{r3, r4, r5, pc}
 801b848:	f240 3086 	movw	r0, #902	; 0x386
 801b84c:	bd38      	pop	{r3, r4, r5, pc}
 801b84e:	200b      	movs	r0, #11
 801b850:	4770      	bx	lr
 801b852:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b856:	bd38      	pop	{r3, r4, r5, pc}
 801b858:	200b      	movs	r0, #11
 801b85a:	bd38      	pop	{r3, r4, r5, pc}

0801b85c <rcl_wait_set_add_timer>:
 801b85c:	b328      	cbz	r0, 801b8aa <rcl_wait_set_add_timer+0x4e>
 801b85e:	b538      	push	{r3, r4, r5, lr}
 801b860:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b862:	4604      	mov	r4, r0
 801b864:	b31b      	cbz	r3, 801b8ae <rcl_wait_set_add_timer+0x52>
 801b866:	b329      	cbz	r1, 801b8b4 <rcl_wait_set_add_timer+0x58>
 801b868:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801b86a:	6965      	ldr	r5, [r4, #20]
 801b86c:	42a8      	cmp	r0, r5
 801b86e:	d219      	bcs.n	801b8a4 <rcl_wait_set_add_timer+0x48>
 801b870:	1c45      	adds	r5, r0, #1
 801b872:	641d      	str	r5, [r3, #64]	; 0x40
 801b874:	6923      	ldr	r3, [r4, #16]
 801b876:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801b87a:	b102      	cbz	r2, 801b87e <rcl_wait_set_add_timer+0x22>
 801b87c:	6010      	str	r0, [r2, #0]
 801b87e:	4608      	mov	r0, r1
 801b880:	f7ff fb9a 	bl	801afb8 <rcl_timer_get_guard_condition>
 801b884:	b168      	cbz	r0, 801b8a2 <rcl_wait_set_add_timer+0x46>
 801b886:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b888:	68e3      	ldr	r3, [r4, #12]
 801b88a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801b88c:	3b01      	subs	r3, #1
 801b88e:	441d      	add	r5, r3
 801b890:	f7fe fee4 	bl	801a65c <rcl_guard_condition_get_rmw_handle>
 801b894:	b180      	cbz	r0, 801b8b8 <rcl_wait_set_add_timer+0x5c>
 801b896:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b898:	6842      	ldr	r2, [r0, #4]
 801b89a:	2000      	movs	r0, #0
 801b89c:	695b      	ldr	r3, [r3, #20]
 801b89e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b8a2:	bd38      	pop	{r3, r4, r5, pc}
 801b8a4:	f240 3086 	movw	r0, #902	; 0x386
 801b8a8:	bd38      	pop	{r3, r4, r5, pc}
 801b8aa:	200b      	movs	r0, #11
 801b8ac:	4770      	bx	lr
 801b8ae:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b8b2:	bd38      	pop	{r3, r4, r5, pc}
 801b8b4:	200b      	movs	r0, #11
 801b8b6:	bd38      	pop	{r3, r4, r5, pc}
 801b8b8:	2001      	movs	r0, #1
 801b8ba:	bd38      	pop	{r3, r4, r5, pc}

0801b8bc <rcl_wait_set_add_client>:
 801b8bc:	b318      	cbz	r0, 801b906 <rcl_wait_set_add_client+0x4a>
 801b8be:	b538      	push	{r3, r4, r5, lr}
 801b8c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b8c2:	4604      	mov	r4, r0
 801b8c4:	b30b      	cbz	r3, 801b90a <rcl_wait_set_add_client+0x4e>
 801b8c6:	b319      	cbz	r1, 801b910 <rcl_wait_set_add_client+0x54>
 801b8c8:	699d      	ldr	r5, [r3, #24]
 801b8ca:	69c0      	ldr	r0, [r0, #28]
 801b8cc:	4285      	cmp	r5, r0
 801b8ce:	d217      	bcs.n	801b900 <rcl_wait_set_add_client+0x44>
 801b8d0:	1c68      	adds	r0, r5, #1
 801b8d2:	6198      	str	r0, [r3, #24]
 801b8d4:	69a3      	ldr	r3, [r4, #24]
 801b8d6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b8da:	b102      	cbz	r2, 801b8de <rcl_wait_set_add_client+0x22>
 801b8dc:	6015      	str	r5, [r2, #0]
 801b8de:	4608      	mov	r0, r1
 801b8e0:	f7fe fd00 	bl	801a2e4 <rcl_client_get_rmw_handle>
 801b8e4:	b150      	cbz	r0, 801b8fc <rcl_wait_set_add_client+0x40>
 801b8e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b8e8:	6842      	ldr	r2, [r0, #4]
 801b8ea:	2000      	movs	r0, #0
 801b8ec:	6a1b      	ldr	r3, [r3, #32]
 801b8ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b8f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b8f4:	69d3      	ldr	r3, [r2, #28]
 801b8f6:	3301      	adds	r3, #1
 801b8f8:	61d3      	str	r3, [r2, #28]
 801b8fa:	bd38      	pop	{r3, r4, r5, pc}
 801b8fc:	2001      	movs	r0, #1
 801b8fe:	bd38      	pop	{r3, r4, r5, pc}
 801b900:	f240 3086 	movw	r0, #902	; 0x386
 801b904:	bd38      	pop	{r3, r4, r5, pc}
 801b906:	200b      	movs	r0, #11
 801b908:	4770      	bx	lr
 801b90a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b90e:	bd38      	pop	{r3, r4, r5, pc}
 801b910:	200b      	movs	r0, #11
 801b912:	bd38      	pop	{r3, r4, r5, pc}

0801b914 <rcl_wait_set_add_service>:
 801b914:	b318      	cbz	r0, 801b95e <rcl_wait_set_add_service+0x4a>
 801b916:	b538      	push	{r3, r4, r5, lr}
 801b918:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b91a:	4604      	mov	r4, r0
 801b91c:	b30b      	cbz	r3, 801b962 <rcl_wait_set_add_service+0x4e>
 801b91e:	b319      	cbz	r1, 801b968 <rcl_wait_set_add_service+0x54>
 801b920:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801b922:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b924:	4285      	cmp	r5, r0
 801b926:	d217      	bcs.n	801b958 <rcl_wait_set_add_service+0x44>
 801b928:	1c68      	adds	r0, r5, #1
 801b92a:	6258      	str	r0, [r3, #36]	; 0x24
 801b92c:	6a23      	ldr	r3, [r4, #32]
 801b92e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b932:	b102      	cbz	r2, 801b936 <rcl_wait_set_add_service+0x22>
 801b934:	6015      	str	r5, [r2, #0]
 801b936:	4608      	mov	r0, r1
 801b938:	f7f7 f9f8 	bl	8012d2c <rcl_service_get_rmw_handle>
 801b93c:	b150      	cbz	r0, 801b954 <rcl_wait_set_add_service+0x40>
 801b93e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b940:	6842      	ldr	r2, [r0, #4]
 801b942:	2000      	movs	r0, #0
 801b944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b94a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b94c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801b94e:	3301      	adds	r3, #1
 801b950:	6293      	str	r3, [r2, #40]	; 0x28
 801b952:	bd38      	pop	{r3, r4, r5, pc}
 801b954:	2001      	movs	r0, #1
 801b956:	bd38      	pop	{r3, r4, r5, pc}
 801b958:	f240 3086 	movw	r0, #902	; 0x386
 801b95c:	bd38      	pop	{r3, r4, r5, pc}
 801b95e:	200b      	movs	r0, #11
 801b960:	4770      	bx	lr
 801b962:	f44f 7061 	mov.w	r0, #900	; 0x384
 801b966:	bd38      	pop	{r3, r4, r5, pc}
 801b968:	200b      	movs	r0, #11
 801b96a:	bd38      	pop	{r3, r4, r5, pc}
 801b96c:	0000      	movs	r0, r0
	...

0801b970 <rcl_wait>:
 801b970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b974:	ed2d 8b02 	vpush	{d8}
 801b978:	b08d      	sub	sp, #52	; 0x34
 801b97a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b97e:	2800      	cmp	r0, #0
 801b980:	f000 814f 	beq.w	801bc22 <rcl_wait+0x2b2>
 801b984:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801b986:	4605      	mov	r5, r0
 801b988:	2e00      	cmp	r6, #0
 801b98a:	f000 811a 	beq.w	801bbc2 <rcl_wait+0x252>
 801b98e:	6843      	ldr	r3, [r0, #4]
 801b990:	b983      	cbnz	r3, 801b9b4 <rcl_wait+0x44>
 801b992:	68eb      	ldr	r3, [r5, #12]
 801b994:	b973      	cbnz	r3, 801b9b4 <rcl_wait+0x44>
 801b996:	696b      	ldr	r3, [r5, #20]
 801b998:	b963      	cbnz	r3, 801b9b4 <rcl_wait+0x44>
 801b99a:	69eb      	ldr	r3, [r5, #28]
 801b99c:	b953      	cbnz	r3, 801b9b4 <rcl_wait+0x44>
 801b99e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b9a0:	b943      	cbnz	r3, 801b9b4 <rcl_wait+0x44>
 801b9a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801b9a4:	b933      	cbnz	r3, 801b9b4 <rcl_wait+0x44>
 801b9a6:	f240 3085 	movw	r0, #901	; 0x385
 801b9aa:	b00d      	add	sp, #52	; 0x34
 801b9ac:	ecbd 8b02 	vpop	{d8}
 801b9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9b4:	9b04      	ldr	r3, [sp, #16]
 801b9b6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801b9b8:	2b01      	cmp	r3, #1
 801b9ba:	9b05      	ldr	r3, [sp, #20]
 801b9bc:	f173 0300 	sbcs.w	r3, r3, #0
 801b9c0:	f2c0 80f8 	blt.w	801bbb4 <rcl_wait+0x244>
 801b9c4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801b9c8:	2a00      	cmp	r2, #0
 801b9ca:	f000 810f 	beq.w	801bbec <rcl_wait+0x27c>
 801b9ce:	2400      	movs	r4, #0
 801b9d0:	4613      	mov	r3, r2
 801b9d2:	f240 3921 	movw	r9, #801	; 0x321
 801b9d6:	4632      	mov	r2, r6
 801b9d8:	46a2      	mov	sl, r4
 801b9da:	46a3      	mov	fp, r4
 801b9dc:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801bc40 <rcl_wait+0x2d0>
 801b9e0:	e014      	b.n	801ba0c <rcl_wait+0x9c>
 801b9e2:	2800      	cmp	r0, #0
 801b9e4:	d1e1      	bne.n	801b9aa <rcl_wait+0x3a>
 801b9e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b9ea:	4542      	cmp	r2, r8
 801b9ec:	eb73 0107 	sbcs.w	r1, r3, r7
 801b9f0:	da03      	bge.n	801b9fa <rcl_wait+0x8a>
 801b9f2:	4690      	mov	r8, r2
 801b9f4:	461f      	mov	r7, r3
 801b9f6:	f04f 0b01 	mov.w	fp, #1
 801b9fa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801b9fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801b9fe:	3401      	adds	r4, #1
 801ba00:	f14a 0a00 	adc.w	sl, sl, #0
 801ba04:	429c      	cmp	r4, r3
 801ba06:	f17a 0100 	sbcs.w	r1, sl, #0
 801ba0a:	d228      	bcs.n	801ba5e <rcl_wait+0xee>
 801ba0c:	6928      	ldr	r0, [r5, #16]
 801ba0e:	a908      	add	r1, sp, #32
 801ba10:	00a6      	lsls	r6, r4, #2
 801ba12:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ba16:	2800      	cmp	r0, #0
 801ba18:	d0f1      	beq.n	801b9fe <rcl_wait+0x8e>
 801ba1a:	68eb      	ldr	r3, [r5, #12]
 801ba1c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801ba20:	4423      	add	r3, r4
 801ba22:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801ba26:	f1be 0f00 	cmp.w	lr, #0
 801ba2a:	d006      	beq.n	801ba3a <rcl_wait+0xca>
 801ba2c:	6913      	ldr	r3, [r2, #16]
 801ba2e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801ba32:	3301      	adds	r3, #1
 801ba34:	6113      	str	r3, [r2, #16]
 801ba36:	692b      	ldr	r3, [r5, #16]
 801ba38:	5998      	ldr	r0, [r3, r6]
 801ba3a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801ba3e:	f7ff fa89 	bl	801af54 <rcl_timer_get_time_until_next_call>
 801ba42:	4548      	cmp	r0, r9
 801ba44:	d1cd      	bne.n	801b9e2 <rcl_wait+0x72>
 801ba46:	692b      	ldr	r3, [r5, #16]
 801ba48:	2200      	movs	r2, #0
 801ba4a:	3401      	adds	r4, #1
 801ba4c:	519a      	str	r2, [r3, r6]
 801ba4e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801ba50:	f14a 0a00 	adc.w	sl, sl, #0
 801ba54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801ba56:	429c      	cmp	r4, r3
 801ba58:	f17a 0100 	sbcs.w	r1, sl, #0
 801ba5c:	d3d6      	bcc.n	801ba0c <rcl_wait+0x9c>
 801ba5e:	4659      	mov	r1, fp
 801ba60:	4616      	mov	r6, r2
 801ba62:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ba66:	4313      	orrs	r3, r2
 801ba68:	f040 80b4 	bne.w	801bbd4 <rcl_wait+0x264>
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	2200      	movs	r2, #0
 801ba70:	460c      	mov	r4, r1
 801ba72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ba76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ba7a:	ab08      	add	r3, sp, #32
 801ba7c:	9302      	str	r3, [sp, #8]
 801ba7e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801ba82:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801ba84:	f106 0110 	add.w	r1, r6, #16
 801ba88:	9300      	str	r3, [sp, #0]
 801ba8a:	1d30      	adds	r0, r6, #4
 801ba8c:	f106 031c 	add.w	r3, r6, #28
 801ba90:	9201      	str	r2, [sp, #4]
 801ba92:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801ba96:	f001 fb81 	bl	801d19c <rmw_wait>
 801ba9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ba9c:	4680      	mov	r8, r0
 801ba9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801baa0:	b1e2      	cbz	r2, 801badc <rcl_wait+0x16c>
 801baa2:	f04f 0900 	mov.w	r9, #0
 801baa6:	464f      	mov	r7, r9
 801baa8:	692a      	ldr	r2, [r5, #16]
 801baaa:	f10d 011f 	add.w	r1, sp, #31
 801baae:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801bab2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801bab6:	b160      	cbz	r0, 801bad2 <rcl_wait+0x162>
 801bab8:	f88d 701f 	strb.w	r7, [sp, #31]
 801babc:	f7ff fa0e 	bl	801aedc <rcl_timer_is_ready>
 801bac0:	2800      	cmp	r0, #0
 801bac2:	f47f af72 	bne.w	801b9aa <rcl_wait+0x3a>
 801bac6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801baca:	b90b      	cbnz	r3, 801bad0 <rcl_wait+0x160>
 801bacc:	692a      	ldr	r2, [r5, #16]
 801bace:	5193      	str	r3, [r2, r6]
 801bad0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801bad2:	f109 0901 	add.w	r9, r9, #1
 801bad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bad8:	454a      	cmp	r2, r9
 801bada:	d8e5      	bhi.n	801baa8 <rcl_wait+0x138>
 801badc:	f038 0002 	bics.w	r0, r8, #2
 801bae0:	d176      	bne.n	801bbd0 <rcl_wait+0x260>
 801bae2:	686f      	ldr	r7, [r5, #4]
 801bae4:	b17f      	cbz	r7, 801bb06 <rcl_wait+0x196>
 801bae6:	4602      	mov	r2, r0
 801bae8:	e002      	b.n	801baf0 <rcl_wait+0x180>
 801baea:	3201      	adds	r2, #1
 801baec:	42ba      	cmp	r2, r7
 801baee:	d00a      	beq.n	801bb06 <rcl_wait+0x196>
 801baf0:	6899      	ldr	r1, [r3, #8]
 801baf2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801baf6:	2900      	cmp	r1, #0
 801baf8:	d1f7      	bne.n	801baea <rcl_wait+0x17a>
 801bafa:	682e      	ldr	r6, [r5, #0]
 801bafc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801bb00:	3201      	adds	r2, #1
 801bb02:	42ba      	cmp	r2, r7
 801bb04:	d1f4      	bne.n	801baf0 <rcl_wait+0x180>
 801bb06:	68ef      	ldr	r7, [r5, #12]
 801bb08:	b17f      	cbz	r7, 801bb2a <rcl_wait+0x1ba>
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	e002      	b.n	801bb14 <rcl_wait+0x1a4>
 801bb0e:	3201      	adds	r2, #1
 801bb10:	42ba      	cmp	r2, r7
 801bb12:	d00a      	beq.n	801bb2a <rcl_wait+0x1ba>
 801bb14:	6959      	ldr	r1, [r3, #20]
 801bb16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bb1a:	2900      	cmp	r1, #0
 801bb1c:	d1f7      	bne.n	801bb0e <rcl_wait+0x19e>
 801bb1e:	68ae      	ldr	r6, [r5, #8]
 801bb20:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801bb24:	3201      	adds	r2, #1
 801bb26:	42ba      	cmp	r2, r7
 801bb28:	d1f4      	bne.n	801bb14 <rcl_wait+0x1a4>
 801bb2a:	69ef      	ldr	r7, [r5, #28]
 801bb2c:	b17f      	cbz	r7, 801bb4e <rcl_wait+0x1de>
 801bb2e:	2200      	movs	r2, #0
 801bb30:	e002      	b.n	801bb38 <rcl_wait+0x1c8>
 801bb32:	3201      	adds	r2, #1
 801bb34:	42ba      	cmp	r2, r7
 801bb36:	d00a      	beq.n	801bb4e <rcl_wait+0x1de>
 801bb38:	6a19      	ldr	r1, [r3, #32]
 801bb3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bb3e:	2900      	cmp	r1, #0
 801bb40:	d1f7      	bne.n	801bb32 <rcl_wait+0x1c2>
 801bb42:	69ae      	ldr	r6, [r5, #24]
 801bb44:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801bb48:	3201      	adds	r2, #1
 801bb4a:	42ba      	cmp	r2, r7
 801bb4c:	d1f4      	bne.n	801bb38 <rcl_wait+0x1c8>
 801bb4e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801bb50:	b17f      	cbz	r7, 801bb72 <rcl_wait+0x202>
 801bb52:	2200      	movs	r2, #0
 801bb54:	e002      	b.n	801bb5c <rcl_wait+0x1ec>
 801bb56:	3201      	adds	r2, #1
 801bb58:	42ba      	cmp	r2, r7
 801bb5a:	d00a      	beq.n	801bb72 <rcl_wait+0x202>
 801bb5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801bb5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bb62:	2900      	cmp	r1, #0
 801bb64:	d1f7      	bne.n	801bb56 <rcl_wait+0x1e6>
 801bb66:	6a2e      	ldr	r6, [r5, #32]
 801bb68:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801bb6c:	3201      	adds	r2, #1
 801bb6e:	42ba      	cmp	r2, r7
 801bb70:	d1f4      	bne.n	801bb5c <rcl_wait+0x1ec>
 801bb72:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801bb74:	b17f      	cbz	r7, 801bb96 <rcl_wait+0x226>
 801bb76:	2200      	movs	r2, #0
 801bb78:	e002      	b.n	801bb80 <rcl_wait+0x210>
 801bb7a:	3201      	adds	r2, #1
 801bb7c:	42ba      	cmp	r2, r7
 801bb7e:	d00a      	beq.n	801bb96 <rcl_wait+0x226>
 801bb80:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801bb82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bb86:	2900      	cmp	r1, #0
 801bb88:	d1f7      	bne.n	801bb7a <rcl_wait+0x20a>
 801bb8a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801bb8c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801bb90:	3201      	adds	r2, #1
 801bb92:	42ba      	cmp	r2, r7
 801bb94:	d1f4      	bne.n	801bb80 <rcl_wait+0x210>
 801bb96:	f1b8 0f02 	cmp.w	r8, #2
 801bb9a:	f47f af06 	bne.w	801b9aa <rcl_wait+0x3a>
 801bb9e:	f084 0301 	eor.w	r3, r4, #1
 801bba2:	b2db      	uxtb	r3, r3
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	bf18      	it	ne
 801bba8:	2002      	movne	r0, #2
 801bbaa:	b00d      	add	sp, #52	; 0x34
 801bbac:	ecbd 8b02 	vpop	{d8}
 801bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbb4:	2a00      	cmp	r2, #0
 801bbb6:	d03a      	beq.n	801bc2e <rcl_wait+0x2be>
 801bbb8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bbbc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801bbc0:	e705      	b.n	801b9ce <rcl_wait+0x5e>
 801bbc2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801bbc6:	b00d      	add	sp, #52	; 0x34
 801bbc8:	ecbd 8b02 	vpop	{d8}
 801bbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd0:	2001      	movs	r0, #1
 801bbd2:	e6ea      	b.n	801b9aa <rcl_wait+0x3a>
 801bbd4:	9b04      	ldr	r3, [sp, #16]
 801bbd6:	460c      	mov	r4, r1
 801bbd8:	2b01      	cmp	r3, #1
 801bbda:	9b05      	ldr	r3, [sp, #20]
 801bbdc:	f173 0300 	sbcs.w	r3, r3, #0
 801bbe0:	bfa8      	it	ge
 801bbe2:	f044 0401 	orrge.w	r4, r4, #1
 801bbe6:	b914      	cbnz	r4, 801bbee <rcl_wait+0x27e>
 801bbe8:	4623      	mov	r3, r4
 801bbea:	e747      	b.n	801ba7c <rcl_wait+0x10c>
 801bbec:	4611      	mov	r1, r2
 801bbee:	2f00      	cmp	r7, #0
 801bbf0:	da02      	bge.n	801bbf8 <rcl_wait+0x288>
 801bbf2:	f04f 0800 	mov.w	r8, #0
 801bbf6:	4647      	mov	r7, r8
 801bbf8:	460c      	mov	r4, r1
 801bbfa:	4640      	mov	r0, r8
 801bbfc:	4639      	mov	r1, r7
 801bbfe:	a312      	add	r3, pc, #72	; (adr r3, 801bc48 <rcl_wait+0x2d8>)
 801bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc04:	f7e4 fe4e 	bl	80008a4 <__aeabi_ldivmod>
 801bc08:	a30f      	add	r3, pc, #60	; (adr r3, 801bc48 <rcl_wait+0x2d8>)
 801bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bc12:	4640      	mov	r0, r8
 801bc14:	4639      	mov	r1, r7
 801bc16:	f7e4 fe45 	bl	80008a4 <__aeabi_ldivmod>
 801bc1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801bc1e:	ab08      	add	r3, sp, #32
 801bc20:	e72c      	b.n	801ba7c <rcl_wait+0x10c>
 801bc22:	200b      	movs	r0, #11
 801bc24:	b00d      	add	sp, #52	; 0x34
 801bc26:	ecbd 8b02 	vpop	{d8}
 801bc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc2e:	4611      	mov	r1, r2
 801bc30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bc34:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801bc38:	e713      	b.n	801ba62 <rcl_wait+0xf2>
 801bc3a:	bf00      	nop
 801bc3c:	f3af 8000 	nop.w
 801bc40:	ffffffff 	.word	0xffffffff
 801bc44:	7fffffff 	.word	0x7fffffff
 801bc48:	3b9aca00 	.word	0x3b9aca00
 801bc4c:	00000000 	.word	0x00000000

0801bc50 <rcl_action_take_goal_response>:
 801bc50:	2800      	cmp	r0, #0
 801bc52:	d039      	beq.n	801bcc8 <rcl_action_take_goal_response+0x78>
 801bc54:	b570      	push	{r4, r5, r6, lr}
 801bc56:	4604      	mov	r4, r0
 801bc58:	6800      	ldr	r0, [r0, #0]
 801bc5a:	b380      	cbz	r0, 801bcbe <rcl_action_take_goal_response+0x6e>
 801bc5c:	460e      	mov	r6, r1
 801bc5e:	4615      	mov	r5, r2
 801bc60:	f7fe fbc6 	bl	801a3f0 <rcl_client_is_valid>
 801bc64:	b330      	cbz	r0, 801bcb4 <rcl_action_take_goal_response+0x64>
 801bc66:	6820      	ldr	r0, [r4, #0]
 801bc68:	3004      	adds	r0, #4
 801bc6a:	f7fe fbc1 	bl	801a3f0 <rcl_client_is_valid>
 801bc6e:	b308      	cbz	r0, 801bcb4 <rcl_action_take_goal_response+0x64>
 801bc70:	6820      	ldr	r0, [r4, #0]
 801bc72:	3008      	adds	r0, #8
 801bc74:	f7fe fbbc 	bl	801a3f0 <rcl_client_is_valid>
 801bc78:	b1e0      	cbz	r0, 801bcb4 <rcl_action_take_goal_response+0x64>
 801bc7a:	6820      	ldr	r0, [r4, #0]
 801bc7c:	300c      	adds	r0, #12
 801bc7e:	f7f7 f9fb 	bl	8013078 <rcl_subscription_is_valid>
 801bc82:	b1b8      	cbz	r0, 801bcb4 <rcl_action_take_goal_response+0x64>
 801bc84:	6820      	ldr	r0, [r4, #0]
 801bc86:	3010      	adds	r0, #16
 801bc88:	f7f7 f9f6 	bl	8013078 <rcl_subscription_is_valid>
 801bc8c:	b190      	cbz	r0, 801bcb4 <rcl_action_take_goal_response+0x64>
 801bc8e:	b1cd      	cbz	r5, 801bcc4 <rcl_action_take_goal_response+0x74>
 801bc90:	b1c6      	cbz	r6, 801bcc4 <rcl_action_take_goal_response+0x74>
 801bc92:	462a      	mov	r2, r5
 801bc94:	4631      	mov	r1, r6
 801bc96:	6820      	ldr	r0, [r4, #0]
 801bc98:	f7fe fb62 	bl	801a360 <rcl_take_response>
 801bc9c:	b148      	cbz	r0, 801bcb2 <rcl_action_take_goal_response+0x62>
 801bc9e:	280a      	cmp	r0, #10
 801bca0:	d007      	beq.n	801bcb2 <rcl_action_take_goal_response+0x62>
 801bca2:	f240 12f5 	movw	r2, #501	; 0x1f5
 801bca6:	f640 0337 	movw	r3, #2103	; 0x837
 801bcaa:	4290      	cmp	r0, r2
 801bcac:	bf0c      	ite	eq
 801bcae:	4618      	moveq	r0, r3
 801bcb0:	2001      	movne	r0, #1
 801bcb2:	bd70      	pop	{r4, r5, r6, pc}
 801bcb4:	f7f8 fa00 	bl	80140b8 <rcutils_reset_error>
 801bcb8:	f640 0036 	movw	r0, #2102	; 0x836
 801bcbc:	bd70      	pop	{r4, r5, r6, pc}
 801bcbe:	f640 0036 	movw	r0, #2102	; 0x836
 801bcc2:	bd70      	pop	{r4, r5, r6, pc}
 801bcc4:	200b      	movs	r0, #11
 801bcc6:	bd70      	pop	{r4, r5, r6, pc}
 801bcc8:	f640 0036 	movw	r0, #2102	; 0x836
 801bccc:	4770      	bx	lr
 801bcce:	bf00      	nop

0801bcd0 <rcl_action_send_result_request>:
 801bcd0:	b390      	cbz	r0, 801bd38 <rcl_action_send_result_request+0x68>
 801bcd2:	b570      	push	{r4, r5, r6, lr}
 801bcd4:	4604      	mov	r4, r0
 801bcd6:	6800      	ldr	r0, [r0, #0]
 801bcd8:	b348      	cbz	r0, 801bd2e <rcl_action_send_result_request+0x5e>
 801bcda:	460e      	mov	r6, r1
 801bcdc:	4615      	mov	r5, r2
 801bcde:	f7fe fb87 	bl	801a3f0 <rcl_client_is_valid>
 801bce2:	b1f8      	cbz	r0, 801bd24 <rcl_action_send_result_request+0x54>
 801bce4:	6820      	ldr	r0, [r4, #0]
 801bce6:	3004      	adds	r0, #4
 801bce8:	f7fe fb82 	bl	801a3f0 <rcl_client_is_valid>
 801bcec:	b1d0      	cbz	r0, 801bd24 <rcl_action_send_result_request+0x54>
 801bcee:	6820      	ldr	r0, [r4, #0]
 801bcf0:	3008      	adds	r0, #8
 801bcf2:	f7fe fb7d 	bl	801a3f0 <rcl_client_is_valid>
 801bcf6:	b1a8      	cbz	r0, 801bd24 <rcl_action_send_result_request+0x54>
 801bcf8:	6820      	ldr	r0, [r4, #0]
 801bcfa:	300c      	adds	r0, #12
 801bcfc:	f7f7 f9bc 	bl	8013078 <rcl_subscription_is_valid>
 801bd00:	b180      	cbz	r0, 801bd24 <rcl_action_send_result_request+0x54>
 801bd02:	6820      	ldr	r0, [r4, #0]
 801bd04:	3010      	adds	r0, #16
 801bd06:	f7f7 f9b7 	bl	8013078 <rcl_subscription_is_valid>
 801bd0a:	b158      	cbz	r0, 801bd24 <rcl_action_send_result_request+0x54>
 801bd0c:	b195      	cbz	r5, 801bd34 <rcl_action_send_result_request+0x64>
 801bd0e:	b18e      	cbz	r6, 801bd34 <rcl_action_send_result_request+0x64>
 801bd10:	6820      	ldr	r0, [r4, #0]
 801bd12:	462a      	mov	r2, r5
 801bd14:	4631      	mov	r1, r6
 801bd16:	3008      	adds	r0, #8
 801bd18:	f7fe faea 	bl	801a2f0 <rcl_send_request>
 801bd1c:	3800      	subs	r0, #0
 801bd1e:	bf18      	it	ne
 801bd20:	2001      	movne	r0, #1
 801bd22:	bd70      	pop	{r4, r5, r6, pc}
 801bd24:	f7f8 f9c8 	bl	80140b8 <rcutils_reset_error>
 801bd28:	f640 0036 	movw	r0, #2102	; 0x836
 801bd2c:	bd70      	pop	{r4, r5, r6, pc}
 801bd2e:	f640 0036 	movw	r0, #2102	; 0x836
 801bd32:	bd70      	pop	{r4, r5, r6, pc}
 801bd34:	200b      	movs	r0, #11
 801bd36:	bd70      	pop	{r4, r5, r6, pc}
 801bd38:	f640 0036 	movw	r0, #2102	; 0x836
 801bd3c:	4770      	bx	lr
 801bd3e:	bf00      	nop

0801bd40 <rcl_action_take_result_response>:
 801bd40:	2800      	cmp	r0, #0
 801bd42:	d03a      	beq.n	801bdba <rcl_action_take_result_response+0x7a>
 801bd44:	b570      	push	{r4, r5, r6, lr}
 801bd46:	4604      	mov	r4, r0
 801bd48:	6800      	ldr	r0, [r0, #0]
 801bd4a:	b388      	cbz	r0, 801bdb0 <rcl_action_take_result_response+0x70>
 801bd4c:	460e      	mov	r6, r1
 801bd4e:	4615      	mov	r5, r2
 801bd50:	f7fe fb4e 	bl	801a3f0 <rcl_client_is_valid>
 801bd54:	b338      	cbz	r0, 801bda6 <rcl_action_take_result_response+0x66>
 801bd56:	6820      	ldr	r0, [r4, #0]
 801bd58:	3004      	adds	r0, #4
 801bd5a:	f7fe fb49 	bl	801a3f0 <rcl_client_is_valid>
 801bd5e:	b310      	cbz	r0, 801bda6 <rcl_action_take_result_response+0x66>
 801bd60:	6820      	ldr	r0, [r4, #0]
 801bd62:	3008      	adds	r0, #8
 801bd64:	f7fe fb44 	bl	801a3f0 <rcl_client_is_valid>
 801bd68:	b1e8      	cbz	r0, 801bda6 <rcl_action_take_result_response+0x66>
 801bd6a:	6820      	ldr	r0, [r4, #0]
 801bd6c:	300c      	adds	r0, #12
 801bd6e:	f7f7 f983 	bl	8013078 <rcl_subscription_is_valid>
 801bd72:	b1c0      	cbz	r0, 801bda6 <rcl_action_take_result_response+0x66>
 801bd74:	6820      	ldr	r0, [r4, #0]
 801bd76:	3010      	adds	r0, #16
 801bd78:	f7f7 f97e 	bl	8013078 <rcl_subscription_is_valid>
 801bd7c:	b198      	cbz	r0, 801bda6 <rcl_action_take_result_response+0x66>
 801bd7e:	b1d5      	cbz	r5, 801bdb6 <rcl_action_take_result_response+0x76>
 801bd80:	b1ce      	cbz	r6, 801bdb6 <rcl_action_take_result_response+0x76>
 801bd82:	6820      	ldr	r0, [r4, #0]
 801bd84:	462a      	mov	r2, r5
 801bd86:	4631      	mov	r1, r6
 801bd88:	3008      	adds	r0, #8
 801bd8a:	f7fe fae9 	bl	801a360 <rcl_take_response>
 801bd8e:	b148      	cbz	r0, 801bda4 <rcl_action_take_result_response+0x64>
 801bd90:	280a      	cmp	r0, #10
 801bd92:	d007      	beq.n	801bda4 <rcl_action_take_result_response+0x64>
 801bd94:	f240 12f5 	movw	r2, #501	; 0x1f5
 801bd98:	f640 0337 	movw	r3, #2103	; 0x837
 801bd9c:	4290      	cmp	r0, r2
 801bd9e:	bf0c      	ite	eq
 801bda0:	4618      	moveq	r0, r3
 801bda2:	2001      	movne	r0, #1
 801bda4:	bd70      	pop	{r4, r5, r6, pc}
 801bda6:	f7f8 f987 	bl	80140b8 <rcutils_reset_error>
 801bdaa:	f640 0036 	movw	r0, #2102	; 0x836
 801bdae:	bd70      	pop	{r4, r5, r6, pc}
 801bdb0:	f640 0036 	movw	r0, #2102	; 0x836
 801bdb4:	bd70      	pop	{r4, r5, r6, pc}
 801bdb6:	200b      	movs	r0, #11
 801bdb8:	bd70      	pop	{r4, r5, r6, pc}
 801bdba:	f640 0036 	movw	r0, #2102	; 0x836
 801bdbe:	4770      	bx	lr

0801bdc0 <rcl_action_take_cancel_response>:
 801bdc0:	2800      	cmp	r0, #0
 801bdc2:	d03a      	beq.n	801be3a <rcl_action_take_cancel_response+0x7a>
 801bdc4:	b570      	push	{r4, r5, r6, lr}
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	6800      	ldr	r0, [r0, #0]
 801bdca:	b388      	cbz	r0, 801be30 <rcl_action_take_cancel_response+0x70>
 801bdcc:	460e      	mov	r6, r1
 801bdce:	4615      	mov	r5, r2
 801bdd0:	f7fe fb0e 	bl	801a3f0 <rcl_client_is_valid>
 801bdd4:	b338      	cbz	r0, 801be26 <rcl_action_take_cancel_response+0x66>
 801bdd6:	6820      	ldr	r0, [r4, #0]
 801bdd8:	3004      	adds	r0, #4
 801bdda:	f7fe fb09 	bl	801a3f0 <rcl_client_is_valid>
 801bdde:	b310      	cbz	r0, 801be26 <rcl_action_take_cancel_response+0x66>
 801bde0:	6820      	ldr	r0, [r4, #0]
 801bde2:	3008      	adds	r0, #8
 801bde4:	f7fe fb04 	bl	801a3f0 <rcl_client_is_valid>
 801bde8:	b1e8      	cbz	r0, 801be26 <rcl_action_take_cancel_response+0x66>
 801bdea:	6820      	ldr	r0, [r4, #0]
 801bdec:	300c      	adds	r0, #12
 801bdee:	f7f7 f943 	bl	8013078 <rcl_subscription_is_valid>
 801bdf2:	b1c0      	cbz	r0, 801be26 <rcl_action_take_cancel_response+0x66>
 801bdf4:	6820      	ldr	r0, [r4, #0]
 801bdf6:	3010      	adds	r0, #16
 801bdf8:	f7f7 f93e 	bl	8013078 <rcl_subscription_is_valid>
 801bdfc:	b198      	cbz	r0, 801be26 <rcl_action_take_cancel_response+0x66>
 801bdfe:	b1d5      	cbz	r5, 801be36 <rcl_action_take_cancel_response+0x76>
 801be00:	b1ce      	cbz	r6, 801be36 <rcl_action_take_cancel_response+0x76>
 801be02:	6820      	ldr	r0, [r4, #0]
 801be04:	462a      	mov	r2, r5
 801be06:	4631      	mov	r1, r6
 801be08:	3004      	adds	r0, #4
 801be0a:	f7fe faa9 	bl	801a360 <rcl_take_response>
 801be0e:	b148      	cbz	r0, 801be24 <rcl_action_take_cancel_response+0x64>
 801be10:	280a      	cmp	r0, #10
 801be12:	d007      	beq.n	801be24 <rcl_action_take_cancel_response+0x64>
 801be14:	f240 12f5 	movw	r2, #501	; 0x1f5
 801be18:	f640 0337 	movw	r3, #2103	; 0x837
 801be1c:	4290      	cmp	r0, r2
 801be1e:	bf0c      	ite	eq
 801be20:	4618      	moveq	r0, r3
 801be22:	2001      	movne	r0, #1
 801be24:	bd70      	pop	{r4, r5, r6, pc}
 801be26:	f7f8 f947 	bl	80140b8 <rcutils_reset_error>
 801be2a:	f640 0036 	movw	r0, #2102	; 0x836
 801be2e:	bd70      	pop	{r4, r5, r6, pc}
 801be30:	f640 0036 	movw	r0, #2102	; 0x836
 801be34:	bd70      	pop	{r4, r5, r6, pc}
 801be36:	200b      	movs	r0, #11
 801be38:	bd70      	pop	{r4, r5, r6, pc}
 801be3a:	f640 0036 	movw	r0, #2102	; 0x836
 801be3e:	4770      	bx	lr

0801be40 <rcl_action_take_feedback>:
 801be40:	2800      	cmp	r0, #0
 801be42:	d038      	beq.n	801beb6 <rcl_action_take_feedback+0x76>
 801be44:	b530      	push	{r4, r5, lr}
 801be46:	4604      	mov	r4, r0
 801be48:	6800      	ldr	r0, [r0, #0]
 801be4a:	b091      	sub	sp, #68	; 0x44
 801be4c:	b378      	cbz	r0, 801beae <rcl_action_take_feedback+0x6e>
 801be4e:	460d      	mov	r5, r1
 801be50:	f7fe face 	bl	801a3f0 <rcl_client_is_valid>
 801be54:	b328      	cbz	r0, 801bea2 <rcl_action_take_feedback+0x62>
 801be56:	6820      	ldr	r0, [r4, #0]
 801be58:	3004      	adds	r0, #4
 801be5a:	f7fe fac9 	bl	801a3f0 <rcl_client_is_valid>
 801be5e:	b300      	cbz	r0, 801bea2 <rcl_action_take_feedback+0x62>
 801be60:	6820      	ldr	r0, [r4, #0]
 801be62:	3008      	adds	r0, #8
 801be64:	f7fe fac4 	bl	801a3f0 <rcl_client_is_valid>
 801be68:	b1d8      	cbz	r0, 801bea2 <rcl_action_take_feedback+0x62>
 801be6a:	6820      	ldr	r0, [r4, #0]
 801be6c:	300c      	adds	r0, #12
 801be6e:	f7f7 f903 	bl	8013078 <rcl_subscription_is_valid>
 801be72:	b1b0      	cbz	r0, 801bea2 <rcl_action_take_feedback+0x62>
 801be74:	6820      	ldr	r0, [r4, #0]
 801be76:	3010      	adds	r0, #16
 801be78:	f7f7 f8fe 	bl	8013078 <rcl_subscription_is_valid>
 801be7c:	b188      	cbz	r0, 801bea2 <rcl_action_take_feedback+0x62>
 801be7e:	b1ed      	cbz	r5, 801bebc <rcl_action_take_feedback+0x7c>
 801be80:	6820      	ldr	r0, [r4, #0]
 801be82:	2300      	movs	r3, #0
 801be84:	466a      	mov	r2, sp
 801be86:	4629      	mov	r1, r5
 801be88:	300c      	adds	r0, #12
 801be8a:	f7f7 f899 	bl	8012fc0 <rcl_take>
 801be8e:	b160      	cbz	r0, 801beaa <rcl_action_take_feedback+0x6a>
 801be90:	f240 1391 	movw	r3, #401	; 0x191
 801be94:	4298      	cmp	r0, r3
 801be96:	d014      	beq.n	801bec2 <rcl_action_take_feedback+0x82>
 801be98:	280a      	cmp	r0, #10
 801be9a:	bf18      	it	ne
 801be9c:	2001      	movne	r0, #1
 801be9e:	b011      	add	sp, #68	; 0x44
 801bea0:	bd30      	pop	{r4, r5, pc}
 801bea2:	f7f8 f909 	bl	80140b8 <rcutils_reset_error>
 801bea6:	f640 0036 	movw	r0, #2102	; 0x836
 801beaa:	b011      	add	sp, #68	; 0x44
 801beac:	bd30      	pop	{r4, r5, pc}
 801beae:	f640 0036 	movw	r0, #2102	; 0x836
 801beb2:	b011      	add	sp, #68	; 0x44
 801beb4:	bd30      	pop	{r4, r5, pc}
 801beb6:	f640 0036 	movw	r0, #2102	; 0x836
 801beba:	4770      	bx	lr
 801bebc:	200b      	movs	r0, #11
 801bebe:	b011      	add	sp, #68	; 0x44
 801bec0:	bd30      	pop	{r4, r5, pc}
 801bec2:	f640 0037 	movw	r0, #2103	; 0x837
 801bec6:	e7f0      	b.n	801beaa <rcl_action_take_feedback+0x6a>

0801bec8 <rcl_action_wait_set_add_action_client>:
 801bec8:	2800      	cmp	r0, #0
 801beca:	d048      	beq.n	801bf5e <rcl_action_wait_set_add_action_client+0x96>
 801becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bece:	460c      	mov	r4, r1
 801bed0:	2900      	cmp	r1, #0
 801bed2:	d03c      	beq.n	801bf4e <rcl_action_wait_set_add_action_client+0x86>
 801bed4:	4605      	mov	r5, r0
 801bed6:	6808      	ldr	r0, [r1, #0]
 801bed8:	2800      	cmp	r0, #0
 801beda:	d038      	beq.n	801bf4e <rcl_action_wait_set_add_action_client+0x86>
 801bedc:	4617      	mov	r7, r2
 801bede:	461e      	mov	r6, r3
 801bee0:	f7fe fa86 	bl	801a3f0 <rcl_client_is_valid>
 801bee4:	b3b0      	cbz	r0, 801bf54 <rcl_action_wait_set_add_action_client+0x8c>
 801bee6:	6820      	ldr	r0, [r4, #0]
 801bee8:	3004      	adds	r0, #4
 801beea:	f7fe fa81 	bl	801a3f0 <rcl_client_is_valid>
 801beee:	b388      	cbz	r0, 801bf54 <rcl_action_wait_set_add_action_client+0x8c>
 801bef0:	6820      	ldr	r0, [r4, #0]
 801bef2:	3008      	adds	r0, #8
 801bef4:	f7fe fa7c 	bl	801a3f0 <rcl_client_is_valid>
 801bef8:	b360      	cbz	r0, 801bf54 <rcl_action_wait_set_add_action_client+0x8c>
 801befa:	6820      	ldr	r0, [r4, #0]
 801befc:	300c      	adds	r0, #12
 801befe:	f7f7 f8bb 	bl	8013078 <rcl_subscription_is_valid>
 801bf02:	b338      	cbz	r0, 801bf54 <rcl_action_wait_set_add_action_client+0x8c>
 801bf04:	6820      	ldr	r0, [r4, #0]
 801bf06:	3010      	adds	r0, #16
 801bf08:	f7f7 f8b6 	bl	8013078 <rcl_subscription_is_valid>
 801bf0c:	b310      	cbz	r0, 801bf54 <rcl_action_wait_set_add_action_client+0x8c>
 801bf0e:	6821      	ldr	r1, [r4, #0]
 801bf10:	4628      	mov	r0, r5
 801bf12:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801bf16:	f7ff fcd1 	bl	801b8bc <rcl_wait_set_add_client>
 801bf1a:	b9b8      	cbnz	r0, 801bf4c <rcl_action_wait_set_add_action_client+0x84>
 801bf1c:	6821      	ldr	r1, [r4, #0]
 801bf1e:	4628      	mov	r0, r5
 801bf20:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801bf24:	3104      	adds	r1, #4
 801bf26:	f7ff fcc9 	bl	801b8bc <rcl_wait_set_add_client>
 801bf2a:	b978      	cbnz	r0, 801bf4c <rcl_action_wait_set_add_action_client+0x84>
 801bf2c:	6821      	ldr	r1, [r4, #0]
 801bf2e:	4628      	mov	r0, r5
 801bf30:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801bf34:	3108      	adds	r1, #8
 801bf36:	f7ff fcc1 	bl	801b8bc <rcl_wait_set_add_client>
 801bf3a:	b938      	cbnz	r0, 801bf4c <rcl_action_wait_set_add_action_client+0x84>
 801bf3c:	6821      	ldr	r1, [r4, #0]
 801bf3e:	4628      	mov	r0, r5
 801bf40:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801bf44:	310c      	adds	r1, #12
 801bf46:	f7ff f969 	bl	801b21c <rcl_wait_set_add_subscription>
 801bf4a:	b158      	cbz	r0, 801bf64 <rcl_action_wait_set_add_action_client+0x9c>
 801bf4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf4e:	f640 0036 	movw	r0, #2102	; 0x836
 801bf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf54:	f7f8 f8b0 	bl	80140b8 <rcutils_reset_error>
 801bf58:	f640 0036 	movw	r0, #2102	; 0x836
 801bf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf5e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801bf62:	4770      	bx	lr
 801bf64:	6821      	ldr	r1, [r4, #0]
 801bf66:	4628      	mov	r0, r5
 801bf68:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801bf6c:	3110      	adds	r1, #16
 801bf6e:	f7ff f955 	bl	801b21c <rcl_wait_set_add_subscription>
 801bf72:	2800      	cmp	r0, #0
 801bf74:	d1ea      	bne.n	801bf4c <rcl_action_wait_set_add_action_client+0x84>
 801bf76:	b11f      	cbz	r7, 801bf80 <rcl_action_wait_set_add_action_client+0xb8>
 801bf78:	6823      	ldr	r3, [r4, #0]
 801bf7a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801bf7e:	603b      	str	r3, [r7, #0]
 801bf80:	2e00      	cmp	r6, #0
 801bf82:	d0e3      	beq.n	801bf4c <rcl_action_wait_set_add_action_client+0x84>
 801bf84:	6823      	ldr	r3, [r4, #0]
 801bf86:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801bf8a:	6033      	str	r3, [r6, #0]
 801bf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf8e:	bf00      	nop

0801bf90 <rcl_action_client_wait_set_get_entities_ready>:
 801bf90:	2800      	cmp	r0, #0
 801bf92:	d050      	beq.n	801c036 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801bf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf98:	460c      	mov	r4, r1
 801bf9a:	2900      	cmp	r1, #0
 801bf9c:	d03e      	beq.n	801c01c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801bf9e:	4605      	mov	r5, r0
 801bfa0:	6808      	ldr	r0, [r1, #0]
 801bfa2:	2800      	cmp	r0, #0
 801bfa4:	d03a      	beq.n	801c01c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801bfa6:	4616      	mov	r6, r2
 801bfa8:	461f      	mov	r7, r3
 801bfaa:	f7fe fa21 	bl	801a3f0 <rcl_client_is_valid>
 801bfae:	2800      	cmp	r0, #0
 801bfb0:	d038      	beq.n	801c024 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801bfb2:	6820      	ldr	r0, [r4, #0]
 801bfb4:	3004      	adds	r0, #4
 801bfb6:	f7fe fa1b 	bl	801a3f0 <rcl_client_is_valid>
 801bfba:	2800      	cmp	r0, #0
 801bfbc:	d032      	beq.n	801c024 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801bfbe:	6820      	ldr	r0, [r4, #0]
 801bfc0:	3008      	adds	r0, #8
 801bfc2:	f7fe fa15 	bl	801a3f0 <rcl_client_is_valid>
 801bfc6:	b368      	cbz	r0, 801c024 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801bfc8:	6820      	ldr	r0, [r4, #0]
 801bfca:	300c      	adds	r0, #12
 801bfcc:	f7f7 f854 	bl	8013078 <rcl_subscription_is_valid>
 801bfd0:	b340      	cbz	r0, 801c024 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801bfd2:	6820      	ldr	r0, [r4, #0]
 801bfd4:	3010      	adds	r0, #16
 801bfd6:	f7f7 f84f 	bl	8013078 <rcl_subscription_is_valid>
 801bfda:	b318      	cbz	r0, 801c024 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801bfdc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801bfe0:	2a00      	cmp	r2, #0
 801bfe2:	bf18      	it	ne
 801bfe4:	2b00      	cmpne	r3, #0
 801bfe6:	9b08      	ldr	r3, [sp, #32]
 801bfe8:	bf0c      	ite	eq
 801bfea:	2101      	moveq	r1, #1
 801bfec:	2100      	movne	r1, #0
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	bf08      	it	eq
 801bff2:	f041 0101 	orreq.w	r1, r1, #1
 801bff6:	2f00      	cmp	r7, #0
 801bff8:	bf08      	it	eq
 801bffa:	f041 0101 	orreq.w	r1, r1, #1
 801bffe:	b9b9      	cbnz	r1, 801c030 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801c000:	b1b6      	cbz	r6, 801c030 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801c002:	6823      	ldr	r3, [r4, #0]
 801c004:	686c      	ldr	r4, [r5, #4]
 801c006:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801c00a:	428a      	cmp	r2, r1
 801c00c:	4610      	mov	r0, r2
 801c00e:	bf38      	it	cc
 801c010:	4608      	movcc	r0, r1
 801c012:	4284      	cmp	r4, r0
 801c014:	d812      	bhi.n	801c03c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801c016:	2001      	movs	r0, #1
 801c018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c01c:	f640 0036 	movw	r0, #2102	; 0x836
 801c020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c024:	f7f8 f848 	bl	80140b8 <rcutils_reset_error>
 801c028:	f640 0036 	movw	r0, #2102	; 0x836
 801c02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c030:	200b      	movs	r0, #11
 801c032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c036:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c03a:	4770      	bx	lr
 801c03c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801c040:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801c044:	45f0      	cmp	r8, lr
 801c046:	4640      	mov	r0, r8
 801c048:	69ec      	ldr	r4, [r5, #28]
 801c04a:	bf38      	it	cc
 801c04c:	4670      	movcc	r0, lr
 801c04e:	4560      	cmp	r0, ip
 801c050:	bf38      	it	cc
 801c052:	4660      	movcc	r0, ip
 801c054:	4284      	cmp	r4, r0
 801c056:	d9de      	bls.n	801c016 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801c058:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801c05c:	682d      	ldr	r5, [r5, #0]
 801c05e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801c062:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801c066:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c06a:	1a18      	subs	r0, r3, r0
 801c06c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801c070:	f103 0c0c 	add.w	ip, r3, #12
 801c074:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801c078:	fab0 f080 	clz	r0, r0
 801c07c:	eba5 050c 	sub.w	r5, r5, ip
 801c080:	0940      	lsrs	r0, r0, #5
 801c082:	fab5 f585 	clz	r5, r5
 801c086:	096d      	lsrs	r5, r5, #5
 801c088:	7035      	strb	r5, [r6, #0]
 801c08a:	f103 0510 	add.w	r5, r3, #16
 801c08e:	1b64      	subs	r4, r4, r5
 801c090:	9d08      	ldr	r5, [sp, #32]
 801c092:	fab4 f484 	clz	r4, r4
 801c096:	0964      	lsrs	r4, r4, #5
 801c098:	703c      	strb	r4, [r7, #0]
 801c09a:	1d1c      	adds	r4, r3, #4
 801c09c:	3308      	adds	r3, #8
 801c09e:	7028      	strb	r0, [r5, #0]
 801c0a0:	1b09      	subs	r1, r1, r4
 801c0a2:	2000      	movs	r0, #0
 801c0a4:	1ad3      	subs	r3, r2, r3
 801c0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c0a8:	fab1 f181 	clz	r1, r1
 801c0ac:	fab3 f383 	clz	r3, r3
 801c0b0:	0949      	lsrs	r1, r1, #5
 801c0b2:	095b      	lsrs	r3, r3, #5
 801c0b4:	7011      	strb	r1, [r2, #0]
 801c0b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c0b8:	7013      	strb	r3, [r2, #0]
 801c0ba:	e7b1      	b.n	801c020 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801c0bc <rcl_action_take_goal_request>:
 801c0bc:	2800      	cmp	r0, #0
 801c0be:	d039      	beq.n	801c134 <rcl_action_take_goal_request+0x78>
 801c0c0:	b570      	push	{r4, r5, r6, lr}
 801c0c2:	4604      	mov	r4, r0
 801c0c4:	6800      	ldr	r0, [r0, #0]
 801c0c6:	b380      	cbz	r0, 801c12a <rcl_action_take_goal_request+0x6e>
 801c0c8:	460e      	mov	r6, r1
 801c0ca:	4615      	mov	r5, r2
 801c0cc:	f7f6 fe8c 	bl	8012de8 <rcl_service_is_valid>
 801c0d0:	b330      	cbz	r0, 801c120 <rcl_action_take_goal_request+0x64>
 801c0d2:	6820      	ldr	r0, [r4, #0]
 801c0d4:	3004      	adds	r0, #4
 801c0d6:	f7f6 fe87 	bl	8012de8 <rcl_service_is_valid>
 801c0da:	b308      	cbz	r0, 801c120 <rcl_action_take_goal_request+0x64>
 801c0dc:	6820      	ldr	r0, [r4, #0]
 801c0de:	3008      	adds	r0, #8
 801c0e0:	f7f6 fe82 	bl	8012de8 <rcl_service_is_valid>
 801c0e4:	b1e0      	cbz	r0, 801c120 <rcl_action_take_goal_request+0x64>
 801c0e6:	6820      	ldr	r0, [r4, #0]
 801c0e8:	300c      	adds	r0, #12
 801c0ea:	f7f6 fd41 	bl	8012b70 <rcl_publisher_is_valid>
 801c0ee:	b1b8      	cbz	r0, 801c120 <rcl_action_take_goal_request+0x64>
 801c0f0:	6820      	ldr	r0, [r4, #0]
 801c0f2:	3010      	adds	r0, #16
 801c0f4:	f7f6 fd3c 	bl	8012b70 <rcl_publisher_is_valid>
 801c0f8:	b190      	cbz	r0, 801c120 <rcl_action_take_goal_request+0x64>
 801c0fa:	b1cd      	cbz	r5, 801c130 <rcl_action_take_goal_request+0x74>
 801c0fc:	b1c6      	cbz	r6, 801c130 <rcl_action_take_goal_request+0x74>
 801c0fe:	462a      	mov	r2, r5
 801c100:	4631      	mov	r1, r6
 801c102:	6820      	ldr	r0, [r4, #0]
 801c104:	f7f6 fe18 	bl	8012d38 <rcl_take_request>
 801c108:	b148      	cbz	r0, 801c11e <rcl_action_take_goal_request+0x62>
 801c10a:	280a      	cmp	r0, #10
 801c10c:	d007      	beq.n	801c11e <rcl_action_take_goal_request+0x62>
 801c10e:	f240 2259 	movw	r2, #601	; 0x259
 801c112:	f640 0399 	movw	r3, #2201	; 0x899
 801c116:	4290      	cmp	r0, r2
 801c118:	bf0c      	ite	eq
 801c11a:	4618      	moveq	r0, r3
 801c11c:	2001      	movne	r0, #1
 801c11e:	bd70      	pop	{r4, r5, r6, pc}
 801c120:	f7f7 ffca 	bl	80140b8 <rcutils_reset_error>
 801c124:	f640 0098 	movw	r0, #2200	; 0x898
 801c128:	bd70      	pop	{r4, r5, r6, pc}
 801c12a:	f640 0098 	movw	r0, #2200	; 0x898
 801c12e:	bd70      	pop	{r4, r5, r6, pc}
 801c130:	200b      	movs	r0, #11
 801c132:	bd70      	pop	{r4, r5, r6, pc}
 801c134:	f640 0098 	movw	r0, #2200	; 0x898
 801c138:	4770      	bx	lr
 801c13a:	bf00      	nop

0801c13c <rcl_action_send_goal_response>:
 801c13c:	b388      	cbz	r0, 801c1a2 <rcl_action_send_goal_response+0x66>
 801c13e:	b570      	push	{r4, r5, r6, lr}
 801c140:	4604      	mov	r4, r0
 801c142:	6800      	ldr	r0, [r0, #0]
 801c144:	b340      	cbz	r0, 801c198 <rcl_action_send_goal_response+0x5c>
 801c146:	460e      	mov	r6, r1
 801c148:	4615      	mov	r5, r2
 801c14a:	f7f6 fe4d 	bl	8012de8 <rcl_service_is_valid>
 801c14e:	b1f0      	cbz	r0, 801c18e <rcl_action_send_goal_response+0x52>
 801c150:	6820      	ldr	r0, [r4, #0]
 801c152:	3004      	adds	r0, #4
 801c154:	f7f6 fe48 	bl	8012de8 <rcl_service_is_valid>
 801c158:	b1c8      	cbz	r0, 801c18e <rcl_action_send_goal_response+0x52>
 801c15a:	6820      	ldr	r0, [r4, #0]
 801c15c:	3008      	adds	r0, #8
 801c15e:	f7f6 fe43 	bl	8012de8 <rcl_service_is_valid>
 801c162:	b1a0      	cbz	r0, 801c18e <rcl_action_send_goal_response+0x52>
 801c164:	6820      	ldr	r0, [r4, #0]
 801c166:	300c      	adds	r0, #12
 801c168:	f7f6 fd02 	bl	8012b70 <rcl_publisher_is_valid>
 801c16c:	b178      	cbz	r0, 801c18e <rcl_action_send_goal_response+0x52>
 801c16e:	6820      	ldr	r0, [r4, #0]
 801c170:	3010      	adds	r0, #16
 801c172:	f7f6 fcfd 	bl	8012b70 <rcl_publisher_is_valid>
 801c176:	b150      	cbz	r0, 801c18e <rcl_action_send_goal_response+0x52>
 801c178:	b18d      	cbz	r5, 801c19e <rcl_action_send_goal_response+0x62>
 801c17a:	b186      	cbz	r6, 801c19e <rcl_action_send_goal_response+0x62>
 801c17c:	462a      	mov	r2, r5
 801c17e:	4631      	mov	r1, r6
 801c180:	6820      	ldr	r0, [r4, #0]
 801c182:	f7f6 fe19 	bl	8012db8 <rcl_send_response>
 801c186:	3800      	subs	r0, #0
 801c188:	bf18      	it	ne
 801c18a:	2001      	movne	r0, #1
 801c18c:	bd70      	pop	{r4, r5, r6, pc}
 801c18e:	f7f7 ff93 	bl	80140b8 <rcutils_reset_error>
 801c192:	f640 0098 	movw	r0, #2200	; 0x898
 801c196:	bd70      	pop	{r4, r5, r6, pc}
 801c198:	f640 0098 	movw	r0, #2200	; 0x898
 801c19c:	bd70      	pop	{r4, r5, r6, pc}
 801c19e:	200b      	movs	r0, #11
 801c1a0:	bd70      	pop	{r4, r5, r6, pc}
 801c1a2:	f640 0098 	movw	r0, #2200	; 0x898
 801c1a6:	4770      	bx	lr

0801c1a8 <rcl_action_take_result_request>:
 801c1a8:	2800      	cmp	r0, #0
 801c1aa:	d03a      	beq.n	801c222 <rcl_action_take_result_request+0x7a>
 801c1ac:	b570      	push	{r4, r5, r6, lr}
 801c1ae:	4604      	mov	r4, r0
 801c1b0:	6800      	ldr	r0, [r0, #0]
 801c1b2:	b388      	cbz	r0, 801c218 <rcl_action_take_result_request+0x70>
 801c1b4:	460e      	mov	r6, r1
 801c1b6:	4615      	mov	r5, r2
 801c1b8:	f7f6 fe16 	bl	8012de8 <rcl_service_is_valid>
 801c1bc:	b338      	cbz	r0, 801c20e <rcl_action_take_result_request+0x66>
 801c1be:	6820      	ldr	r0, [r4, #0]
 801c1c0:	3004      	adds	r0, #4
 801c1c2:	f7f6 fe11 	bl	8012de8 <rcl_service_is_valid>
 801c1c6:	b310      	cbz	r0, 801c20e <rcl_action_take_result_request+0x66>
 801c1c8:	6820      	ldr	r0, [r4, #0]
 801c1ca:	3008      	adds	r0, #8
 801c1cc:	f7f6 fe0c 	bl	8012de8 <rcl_service_is_valid>
 801c1d0:	b1e8      	cbz	r0, 801c20e <rcl_action_take_result_request+0x66>
 801c1d2:	6820      	ldr	r0, [r4, #0]
 801c1d4:	300c      	adds	r0, #12
 801c1d6:	f7f6 fccb 	bl	8012b70 <rcl_publisher_is_valid>
 801c1da:	b1c0      	cbz	r0, 801c20e <rcl_action_take_result_request+0x66>
 801c1dc:	6820      	ldr	r0, [r4, #0]
 801c1de:	3010      	adds	r0, #16
 801c1e0:	f7f6 fcc6 	bl	8012b70 <rcl_publisher_is_valid>
 801c1e4:	b198      	cbz	r0, 801c20e <rcl_action_take_result_request+0x66>
 801c1e6:	b1d5      	cbz	r5, 801c21e <rcl_action_take_result_request+0x76>
 801c1e8:	b1ce      	cbz	r6, 801c21e <rcl_action_take_result_request+0x76>
 801c1ea:	6820      	ldr	r0, [r4, #0]
 801c1ec:	462a      	mov	r2, r5
 801c1ee:	4631      	mov	r1, r6
 801c1f0:	3008      	adds	r0, #8
 801c1f2:	f7f6 fda1 	bl	8012d38 <rcl_take_request>
 801c1f6:	b148      	cbz	r0, 801c20c <rcl_action_take_result_request+0x64>
 801c1f8:	280a      	cmp	r0, #10
 801c1fa:	d007      	beq.n	801c20c <rcl_action_take_result_request+0x64>
 801c1fc:	f240 2259 	movw	r2, #601	; 0x259
 801c200:	f640 0399 	movw	r3, #2201	; 0x899
 801c204:	4290      	cmp	r0, r2
 801c206:	bf0c      	ite	eq
 801c208:	4618      	moveq	r0, r3
 801c20a:	2001      	movne	r0, #1
 801c20c:	bd70      	pop	{r4, r5, r6, pc}
 801c20e:	f7f7 ff53 	bl	80140b8 <rcutils_reset_error>
 801c212:	f640 0098 	movw	r0, #2200	; 0x898
 801c216:	bd70      	pop	{r4, r5, r6, pc}
 801c218:	f640 0098 	movw	r0, #2200	; 0x898
 801c21c:	bd70      	pop	{r4, r5, r6, pc}
 801c21e:	200b      	movs	r0, #11
 801c220:	bd70      	pop	{r4, r5, r6, pc}
 801c222:	f640 0098 	movw	r0, #2200	; 0x898
 801c226:	4770      	bx	lr

0801c228 <rcl_action_take_cancel_request>:
 801c228:	2800      	cmp	r0, #0
 801c22a:	d03a      	beq.n	801c2a2 <rcl_action_take_cancel_request+0x7a>
 801c22c:	b570      	push	{r4, r5, r6, lr}
 801c22e:	4604      	mov	r4, r0
 801c230:	6800      	ldr	r0, [r0, #0]
 801c232:	b388      	cbz	r0, 801c298 <rcl_action_take_cancel_request+0x70>
 801c234:	460e      	mov	r6, r1
 801c236:	4615      	mov	r5, r2
 801c238:	f7f6 fdd6 	bl	8012de8 <rcl_service_is_valid>
 801c23c:	b338      	cbz	r0, 801c28e <rcl_action_take_cancel_request+0x66>
 801c23e:	6820      	ldr	r0, [r4, #0]
 801c240:	3004      	adds	r0, #4
 801c242:	f7f6 fdd1 	bl	8012de8 <rcl_service_is_valid>
 801c246:	b310      	cbz	r0, 801c28e <rcl_action_take_cancel_request+0x66>
 801c248:	6820      	ldr	r0, [r4, #0]
 801c24a:	3008      	adds	r0, #8
 801c24c:	f7f6 fdcc 	bl	8012de8 <rcl_service_is_valid>
 801c250:	b1e8      	cbz	r0, 801c28e <rcl_action_take_cancel_request+0x66>
 801c252:	6820      	ldr	r0, [r4, #0]
 801c254:	300c      	adds	r0, #12
 801c256:	f7f6 fc8b 	bl	8012b70 <rcl_publisher_is_valid>
 801c25a:	b1c0      	cbz	r0, 801c28e <rcl_action_take_cancel_request+0x66>
 801c25c:	6820      	ldr	r0, [r4, #0]
 801c25e:	3010      	adds	r0, #16
 801c260:	f7f6 fc86 	bl	8012b70 <rcl_publisher_is_valid>
 801c264:	b198      	cbz	r0, 801c28e <rcl_action_take_cancel_request+0x66>
 801c266:	b1d5      	cbz	r5, 801c29e <rcl_action_take_cancel_request+0x76>
 801c268:	b1ce      	cbz	r6, 801c29e <rcl_action_take_cancel_request+0x76>
 801c26a:	6820      	ldr	r0, [r4, #0]
 801c26c:	462a      	mov	r2, r5
 801c26e:	4631      	mov	r1, r6
 801c270:	3004      	adds	r0, #4
 801c272:	f7f6 fd61 	bl	8012d38 <rcl_take_request>
 801c276:	b148      	cbz	r0, 801c28c <rcl_action_take_cancel_request+0x64>
 801c278:	280a      	cmp	r0, #10
 801c27a:	d007      	beq.n	801c28c <rcl_action_take_cancel_request+0x64>
 801c27c:	f240 2259 	movw	r2, #601	; 0x259
 801c280:	f640 0399 	movw	r3, #2201	; 0x899
 801c284:	4290      	cmp	r0, r2
 801c286:	bf0c      	ite	eq
 801c288:	4618      	moveq	r0, r3
 801c28a:	2001      	movne	r0, #1
 801c28c:	bd70      	pop	{r4, r5, r6, pc}
 801c28e:	f7f7 ff13 	bl	80140b8 <rcutils_reset_error>
 801c292:	f640 0098 	movw	r0, #2200	; 0x898
 801c296:	bd70      	pop	{r4, r5, r6, pc}
 801c298:	f640 0098 	movw	r0, #2200	; 0x898
 801c29c:	bd70      	pop	{r4, r5, r6, pc}
 801c29e:	200b      	movs	r0, #11
 801c2a0:	bd70      	pop	{r4, r5, r6, pc}
 801c2a2:	f640 0098 	movw	r0, #2200	; 0x898
 801c2a6:	4770      	bx	lr

0801c2a8 <rcl_action_send_cancel_response>:
 801c2a8:	b390      	cbz	r0, 801c310 <rcl_action_send_cancel_response+0x68>
 801c2aa:	b570      	push	{r4, r5, r6, lr}
 801c2ac:	4604      	mov	r4, r0
 801c2ae:	6800      	ldr	r0, [r0, #0]
 801c2b0:	b348      	cbz	r0, 801c306 <rcl_action_send_cancel_response+0x5e>
 801c2b2:	460e      	mov	r6, r1
 801c2b4:	4615      	mov	r5, r2
 801c2b6:	f7f6 fd97 	bl	8012de8 <rcl_service_is_valid>
 801c2ba:	b1f8      	cbz	r0, 801c2fc <rcl_action_send_cancel_response+0x54>
 801c2bc:	6820      	ldr	r0, [r4, #0]
 801c2be:	3004      	adds	r0, #4
 801c2c0:	f7f6 fd92 	bl	8012de8 <rcl_service_is_valid>
 801c2c4:	b1d0      	cbz	r0, 801c2fc <rcl_action_send_cancel_response+0x54>
 801c2c6:	6820      	ldr	r0, [r4, #0]
 801c2c8:	3008      	adds	r0, #8
 801c2ca:	f7f6 fd8d 	bl	8012de8 <rcl_service_is_valid>
 801c2ce:	b1a8      	cbz	r0, 801c2fc <rcl_action_send_cancel_response+0x54>
 801c2d0:	6820      	ldr	r0, [r4, #0]
 801c2d2:	300c      	adds	r0, #12
 801c2d4:	f7f6 fc4c 	bl	8012b70 <rcl_publisher_is_valid>
 801c2d8:	b180      	cbz	r0, 801c2fc <rcl_action_send_cancel_response+0x54>
 801c2da:	6820      	ldr	r0, [r4, #0]
 801c2dc:	3010      	adds	r0, #16
 801c2de:	f7f6 fc47 	bl	8012b70 <rcl_publisher_is_valid>
 801c2e2:	b158      	cbz	r0, 801c2fc <rcl_action_send_cancel_response+0x54>
 801c2e4:	b195      	cbz	r5, 801c30c <rcl_action_send_cancel_response+0x64>
 801c2e6:	b18e      	cbz	r6, 801c30c <rcl_action_send_cancel_response+0x64>
 801c2e8:	6820      	ldr	r0, [r4, #0]
 801c2ea:	462a      	mov	r2, r5
 801c2ec:	4631      	mov	r1, r6
 801c2ee:	3004      	adds	r0, #4
 801c2f0:	f7f6 fd62 	bl	8012db8 <rcl_send_response>
 801c2f4:	3800      	subs	r0, #0
 801c2f6:	bf18      	it	ne
 801c2f8:	2001      	movne	r0, #1
 801c2fa:	bd70      	pop	{r4, r5, r6, pc}
 801c2fc:	f7f7 fedc 	bl	80140b8 <rcutils_reset_error>
 801c300:	f640 0098 	movw	r0, #2200	; 0x898
 801c304:	bd70      	pop	{r4, r5, r6, pc}
 801c306:	f640 0098 	movw	r0, #2200	; 0x898
 801c30a:	bd70      	pop	{r4, r5, r6, pc}
 801c30c:	200b      	movs	r0, #11
 801c30e:	bd70      	pop	{r4, r5, r6, pc}
 801c310:	f640 0098 	movw	r0, #2200	; 0x898
 801c314:	4770      	bx	lr
 801c316:	bf00      	nop

0801c318 <rcl_action_wait_set_add_action_server>:
 801c318:	2800      	cmp	r0, #0
 801c31a:	d04d      	beq.n	801c3b8 <rcl_action_wait_set_add_action_server+0xa0>
 801c31c:	b570      	push	{r4, r5, r6, lr}
 801c31e:	460c      	mov	r4, r1
 801c320:	b159      	cbz	r1, 801c33a <rcl_action_wait_set_add_action_server+0x22>
 801c322:	4605      	mov	r5, r0
 801c324:	6808      	ldr	r0, [r1, #0]
 801c326:	b140      	cbz	r0, 801c33a <rcl_action_wait_set_add_action_server+0x22>
 801c328:	4616      	mov	r6, r2
 801c32a:	f7f6 fd5d 	bl	8012de8 <rcl_service_is_valid>
 801c32e:	b120      	cbz	r0, 801c33a <rcl_action_wait_set_add_action_server+0x22>
 801c330:	6820      	ldr	r0, [r4, #0]
 801c332:	3004      	adds	r0, #4
 801c334:	f7f6 fd58 	bl	8012de8 <rcl_service_is_valid>
 801c338:	b910      	cbnz	r0, 801c340 <rcl_action_wait_set_add_action_server+0x28>
 801c33a:	f640 0098 	movw	r0, #2200	; 0x898
 801c33e:	bd70      	pop	{r4, r5, r6, pc}
 801c340:	6820      	ldr	r0, [r4, #0]
 801c342:	3008      	adds	r0, #8
 801c344:	f7f6 fd50 	bl	8012de8 <rcl_service_is_valid>
 801c348:	2800      	cmp	r0, #0
 801c34a:	d0f6      	beq.n	801c33a <rcl_action_wait_set_add_action_server+0x22>
 801c34c:	6820      	ldr	r0, [r4, #0]
 801c34e:	300c      	adds	r0, #12
 801c350:	f7f6 fc26 	bl	8012ba0 <rcl_publisher_is_valid_except_context>
 801c354:	2800      	cmp	r0, #0
 801c356:	d0f0      	beq.n	801c33a <rcl_action_wait_set_add_action_server+0x22>
 801c358:	6820      	ldr	r0, [r4, #0]
 801c35a:	3010      	adds	r0, #16
 801c35c:	f7f6 fc20 	bl	8012ba0 <rcl_publisher_is_valid_except_context>
 801c360:	2800      	cmp	r0, #0
 801c362:	d0ea      	beq.n	801c33a <rcl_action_wait_set_add_action_server+0x22>
 801c364:	6821      	ldr	r1, [r4, #0]
 801c366:	4628      	mov	r0, r5
 801c368:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801c36c:	f7ff fad2 	bl	801b914 <rcl_wait_set_add_service>
 801c370:	2800      	cmp	r0, #0
 801c372:	d1e4      	bne.n	801c33e <rcl_action_wait_set_add_action_server+0x26>
 801c374:	6821      	ldr	r1, [r4, #0]
 801c376:	4628      	mov	r0, r5
 801c378:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801c37c:	3104      	adds	r1, #4
 801c37e:	f7ff fac9 	bl	801b914 <rcl_wait_set_add_service>
 801c382:	2800      	cmp	r0, #0
 801c384:	d1db      	bne.n	801c33e <rcl_action_wait_set_add_action_server+0x26>
 801c386:	6821      	ldr	r1, [r4, #0]
 801c388:	4628      	mov	r0, r5
 801c38a:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801c38e:	3108      	adds	r1, #8
 801c390:	f7ff fac0 	bl	801b914 <rcl_wait_set_add_service>
 801c394:	2800      	cmp	r0, #0
 801c396:	d1d2      	bne.n	801c33e <rcl_action_wait_set_add_action_server+0x26>
 801c398:	6821      	ldr	r1, [r4, #0]
 801c39a:	4628      	mov	r0, r5
 801c39c:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801c3a0:	3114      	adds	r1, #20
 801c3a2:	f7ff fa5b 	bl	801b85c <rcl_wait_set_add_timer>
 801c3a6:	2800      	cmp	r0, #0
 801c3a8:	d1c9      	bne.n	801c33e <rcl_action_wait_set_add_action_server+0x26>
 801c3aa:	2e00      	cmp	r6, #0
 801c3ac:	d0c7      	beq.n	801c33e <rcl_action_wait_set_add_action_server+0x26>
 801c3ae:	6823      	ldr	r3, [r4, #0]
 801c3b0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801c3b4:	6033      	str	r3, [r6, #0]
 801c3b6:	bd70      	pop	{r4, r5, r6, pc}
 801c3b8:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c3bc:	4770      	bx	lr
 801c3be:	bf00      	nop

0801c3c0 <rcl_action_server_wait_set_get_entities_ready>:
 801c3c0:	2800      	cmp	r0, #0
 801c3c2:	d067      	beq.n	801c494 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801c3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3c8:	460c      	mov	r4, r1
 801c3ca:	b161      	cbz	r1, 801c3e6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c3cc:	4605      	mov	r5, r0
 801c3ce:	6808      	ldr	r0, [r1, #0]
 801c3d0:	b148      	cbz	r0, 801c3e6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c3d2:	4616      	mov	r6, r2
 801c3d4:	4698      	mov	r8, r3
 801c3d6:	f7f6 fd07 	bl	8012de8 <rcl_service_is_valid>
 801c3da:	b120      	cbz	r0, 801c3e6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c3dc:	6820      	ldr	r0, [r4, #0]
 801c3de:	3004      	adds	r0, #4
 801c3e0:	f7f6 fd02 	bl	8012de8 <rcl_service_is_valid>
 801c3e4:	b918      	cbnz	r0, 801c3ee <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801c3e6:	f640 0098 	movw	r0, #2200	; 0x898
 801c3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3ee:	6820      	ldr	r0, [r4, #0]
 801c3f0:	3008      	adds	r0, #8
 801c3f2:	f7f6 fcf9 	bl	8012de8 <rcl_service_is_valid>
 801c3f6:	2800      	cmp	r0, #0
 801c3f8:	d0f5      	beq.n	801c3e6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c3fa:	6820      	ldr	r0, [r4, #0]
 801c3fc:	300c      	adds	r0, #12
 801c3fe:	f7f6 fbcf 	bl	8012ba0 <rcl_publisher_is_valid_except_context>
 801c402:	2800      	cmp	r0, #0
 801c404:	d0ef      	beq.n	801c3e6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c406:	6820      	ldr	r0, [r4, #0]
 801c408:	3010      	adds	r0, #16
 801c40a:	f7f6 fbc9 	bl	8012ba0 <rcl_publisher_is_valid_except_context>
 801c40e:	2800      	cmp	r0, #0
 801c410:	d0e9      	beq.n	801c3e6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801c412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c416:	2a00      	cmp	r2, #0
 801c418:	bf18      	it	ne
 801c41a:	2b00      	cmpne	r3, #0
 801c41c:	bf0c      	ite	eq
 801c41e:	2101      	moveq	r1, #1
 801c420:	2100      	movne	r1, #0
 801c422:	f1b8 0f00 	cmp.w	r8, #0
 801c426:	bf08      	it	eq
 801c428:	f041 0101 	orreq.w	r1, r1, #1
 801c42c:	bba9      	cbnz	r1, 801c49a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801c42e:	b3a6      	cbz	r6, 801c49a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801c430:	6821      	ldr	r1, [r4, #0]
 801c432:	2000      	movs	r0, #0
 801c434:	692c      	ldr	r4, [r5, #16]
 801c436:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801c43a:	6a2f      	ldr	r7, [r5, #32]
 801c43c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c440:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801c444:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801c448:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801c44c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801c450:	1a64      	subs	r4, r4, r1
 801c452:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801c456:	fab4 f484 	clz	r4, r4
 801c45a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801c45e:	0964      	lsrs	r4, r4, #5
 801c460:	7034      	strb	r4, [r6, #0]
 801c462:	1d0c      	adds	r4, r1, #4
 801c464:	1b2c      	subs	r4, r5, r4
 801c466:	fab4 f484 	clz	r4, r4
 801c46a:	0964      	lsrs	r4, r4, #5
 801c46c:	f888 4000 	strb.w	r4, [r8]
 801c470:	f101 0408 	add.w	r4, r1, #8
 801c474:	1b1b      	subs	r3, r3, r4
 801c476:	9c06      	ldr	r4, [sp, #24]
 801c478:	fab3 f383 	clz	r3, r3
 801c47c:	095b      	lsrs	r3, r3, #5
 801c47e:	7023      	strb	r3, [r4, #0]
 801c480:	f101 0314 	add.w	r3, r1, #20
 801c484:	1ad3      	subs	r3, r2, r3
 801c486:	9a07      	ldr	r2, [sp, #28]
 801c488:	fab3 f383 	clz	r3, r3
 801c48c:	095b      	lsrs	r3, r3, #5
 801c48e:	7013      	strb	r3, [r2, #0]
 801c490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c494:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c498:	4770      	bx	lr
 801c49a:	200b      	movs	r0, #11
 801c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c4a0 <_execute_event_handler>:
 801c4a0:	2002      	movs	r0, #2
 801c4a2:	4770      	bx	lr

0801c4a4 <_cancel_goal_event_handler>:
 801c4a4:	2003      	movs	r0, #3
 801c4a6:	4770      	bx	lr

0801c4a8 <_succeed_event_handler>:
 801c4a8:	2004      	movs	r0, #4
 801c4aa:	4770      	bx	lr

0801c4ac <_abort_event_handler>:
 801c4ac:	2006      	movs	r0, #6
 801c4ae:	4770      	bx	lr

0801c4b0 <_canceled_event_handler>:
 801c4b0:	2005      	movs	r0, #5
 801c4b2:	4770      	bx	lr

0801c4b4 <rcl_action_transition_goal_state>:
 801c4b4:	b2c2      	uxtb	r2, r0
 801c4b6:	2a06      	cmp	r2, #6
 801c4b8:	d810      	bhi.n	801c4dc <rcl_action_transition_goal_state+0x28>
 801c4ba:	2904      	cmp	r1, #4
 801c4bc:	d80e      	bhi.n	801c4dc <rcl_action_transition_goal_state+0x28>
 801c4be:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801c4c2:	b410      	push	{r4}
 801c4c4:	1853      	adds	r3, r2, r1
 801c4c6:	4c06      	ldr	r4, [pc, #24]	; (801c4e0 <rcl_action_transition_goal_state+0x2c>)
 801c4c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c4cc:	b113      	cbz	r3, 801c4d4 <rcl_action_transition_goal_state+0x20>
 801c4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4d2:	4718      	bx	r3
 801c4d4:	2000      	movs	r0, #0
 801c4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4da:	4770      	bx	lr
 801c4dc:	2000      	movs	r0, #0
 801c4de:	4770      	bx	lr
 801c4e0:	0802496c 	.word	0x0802496c

0801c4e4 <rcl_action_get_zero_initialized_cancel_response>:
 801c4e4:	b510      	push	{r4, lr}
 801c4e6:	4c07      	ldr	r4, [pc, #28]	; (801c504 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801c4e8:	4686      	mov	lr, r0
 801c4ea:	4684      	mov	ip, r0
 801c4ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c4f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c4f8:	6823      	ldr	r3, [r4, #0]
 801c4fa:	4670      	mov	r0, lr
 801c4fc:	f8cc 3000 	str.w	r3, [ip]
 801c500:	bd10      	pop	{r4, pc}
 801c502:	bf00      	nop
 801c504:	080249f8 	.word	0x080249f8

0801c508 <rclc_action_send_result_request>:
 801c508:	b1d0      	cbz	r0, 801c540 <rclc_action_send_result_request+0x38>
 801c50a:	4684      	mov	ip, r0
 801c50c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801c510:	b500      	push	{lr}
 801c512:	b087      	sub	sp, #28
 801c514:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801c518:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801c51c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801c520:	f10d 0e08 	add.w	lr, sp, #8
 801c524:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c528:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c52c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801c530:	a902      	add	r1, sp, #8
 801c532:	3010      	adds	r0, #16
 801c534:	f7ff fbcc 	bl	801bcd0 <rcl_action_send_result_request>
 801c538:	b920      	cbnz	r0, 801c544 <rclc_action_send_result_request+0x3c>
 801c53a:	b007      	add	sp, #28
 801c53c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c540:	200b      	movs	r0, #11
 801c542:	4770      	bx	lr
 801c544:	9001      	str	r0, [sp, #4]
 801c546:	f7f7 fdb7 	bl	80140b8 <rcutils_reset_error>
 801c54a:	9801      	ldr	r0, [sp, #4]
 801c54c:	b007      	add	sp, #28
 801c54e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c552:	bf00      	nop

0801c554 <rclc_action_take_goal_handle>:
 801c554:	b160      	cbz	r0, 801c570 <rclc_action_take_goal_handle+0x1c>
 801c556:	6883      	ldr	r3, [r0, #8]
 801c558:	b143      	cbz	r3, 801c56c <rclc_action_take_goal_handle+0x18>
 801c55a:	6819      	ldr	r1, [r3, #0]
 801c55c:	2200      	movs	r2, #0
 801c55e:	6081      	str	r1, [r0, #8]
 801c560:	721a      	strb	r2, [r3, #8]
 801c562:	68c1      	ldr	r1, [r0, #12]
 801c564:	621a      	str	r2, [r3, #32]
 801c566:	849a      	strh	r2, [r3, #36]	; 0x24
 801c568:	6019      	str	r1, [r3, #0]
 801c56a:	60c3      	str	r3, [r0, #12]
 801c56c:	4618      	mov	r0, r3
 801c56e:	4770      	bx	lr
 801c570:	4603      	mov	r3, r0
 801c572:	e7fb      	b.n	801c56c <rclc_action_take_goal_handle+0x18>

0801c574 <rclc_action_remove_used_goal_handle>:
 801c574:	b180      	cbz	r0, 801c598 <rclc_action_remove_used_goal_handle+0x24>
 801c576:	b179      	cbz	r1, 801c598 <rclc_action_remove_used_goal_handle+0x24>
 801c578:	68c3      	ldr	r3, [r0, #12]
 801c57a:	4299      	cmp	r1, r3
 801c57c:	d00d      	beq.n	801c59a <rclc_action_remove_used_goal_handle+0x26>
 801c57e:	b12b      	cbz	r3, 801c58c <rclc_action_remove_used_goal_handle+0x18>
 801c580:	681a      	ldr	r2, [r3, #0]
 801c582:	4291      	cmp	r1, r2
 801c584:	d003      	beq.n	801c58e <rclc_action_remove_used_goal_handle+0x1a>
 801c586:	4613      	mov	r3, r2
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d1f9      	bne.n	801c580 <rclc_action_remove_used_goal_handle+0xc>
 801c58c:	4770      	bx	lr
 801c58e:	680a      	ldr	r2, [r1, #0]
 801c590:	601a      	str	r2, [r3, #0]
 801c592:	6883      	ldr	r3, [r0, #8]
 801c594:	600b      	str	r3, [r1, #0]
 801c596:	6081      	str	r1, [r0, #8]
 801c598:	4770      	bx	lr
 801c59a:	680b      	ldr	r3, [r1, #0]
 801c59c:	60c3      	str	r3, [r0, #12]
 801c59e:	e7f8      	b.n	801c592 <rclc_action_remove_used_goal_handle+0x1e>

0801c5a0 <rclc_action_find_goal_handle_by_uuid>:
 801c5a0:	b538      	push	{r3, r4, r5, lr}
 801c5a2:	b181      	cbz	r1, 801c5c6 <rclc_action_find_goal_handle_by_uuid+0x26>
 801c5a4:	b178      	cbz	r0, 801c5c6 <rclc_action_find_goal_handle_by_uuid+0x26>
 801c5a6:	68c4      	ldr	r4, [r0, #12]
 801c5a8:	460d      	mov	r5, r1
 801c5aa:	b914      	cbnz	r4, 801c5b2 <rclc_action_find_goal_handle_by_uuid+0x12>
 801c5ac:	e009      	b.n	801c5c2 <rclc_action_find_goal_handle_by_uuid+0x22>
 801c5ae:	6824      	ldr	r4, [r4, #0]
 801c5b0:	b13c      	cbz	r4, 801c5c2 <rclc_action_find_goal_handle_by_uuid+0x22>
 801c5b2:	f104 0009 	add.w	r0, r4, #9
 801c5b6:	2210      	movs	r2, #16
 801c5b8:	4629      	mov	r1, r5
 801c5ba:	f003 fba9 	bl	801fd10 <memcmp>
 801c5be:	2800      	cmp	r0, #0
 801c5c0:	d1f5      	bne.n	801c5ae <rclc_action_find_goal_handle_by_uuid+0xe>
 801c5c2:	4620      	mov	r0, r4
 801c5c4:	bd38      	pop	{r3, r4, r5, pc}
 801c5c6:	2400      	movs	r4, #0
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	bd38      	pop	{r3, r4, r5, pc}

0801c5cc <rclc_action_find_first_handle_by_status>:
 801c5cc:	b140      	cbz	r0, 801c5e0 <rclc_action_find_first_handle_by_status+0x14>
 801c5ce:	68c0      	ldr	r0, [r0, #12]
 801c5d0:	b910      	cbnz	r0, 801c5d8 <rclc_action_find_first_handle_by_status+0xc>
 801c5d2:	e005      	b.n	801c5e0 <rclc_action_find_first_handle_by_status+0x14>
 801c5d4:	6800      	ldr	r0, [r0, #0]
 801c5d6:	b118      	cbz	r0, 801c5e0 <rclc_action_find_first_handle_by_status+0x14>
 801c5d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801c5dc:	428b      	cmp	r3, r1
 801c5de:	d1f9      	bne.n	801c5d4 <rclc_action_find_first_handle_by_status+0x8>
 801c5e0:	4770      	bx	lr
 801c5e2:	bf00      	nop

0801c5e4 <rclc_action_find_first_terminated_handle>:
 801c5e4:	b140      	cbz	r0, 801c5f8 <rclc_action_find_first_terminated_handle+0x14>
 801c5e6:	68c0      	ldr	r0, [r0, #12]
 801c5e8:	b910      	cbnz	r0, 801c5f0 <rclc_action_find_first_terminated_handle+0xc>
 801c5ea:	e005      	b.n	801c5f8 <rclc_action_find_first_terminated_handle+0x14>
 801c5ec:	6800      	ldr	r0, [r0, #0]
 801c5ee:	b118      	cbz	r0, 801c5f8 <rclc_action_find_first_terminated_handle+0x14>
 801c5f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801c5f4:	2b03      	cmp	r3, #3
 801c5f6:	ddf9      	ble.n	801c5ec <rclc_action_find_first_terminated_handle+0x8>
 801c5f8:	4770      	bx	lr
 801c5fa:	bf00      	nop

0801c5fc <rclc_action_find_handle_by_goal_request_sequence_number>:
 801c5fc:	b170      	cbz	r0, 801c61c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801c5fe:	68c0      	ldr	r0, [r0, #12]
 801c600:	b160      	cbz	r0, 801c61c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801c602:	b410      	push	{r4}
 801c604:	e001      	b.n	801c60a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801c606:	6800      	ldr	r0, [r0, #0]
 801c608:	b128      	cbz	r0, 801c616 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801c60a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801c60e:	4299      	cmp	r1, r3
 801c610:	bf08      	it	eq
 801c612:	4294      	cmpeq	r4, r2
 801c614:	d1f7      	bne.n	801c606 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801c616:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c61a:	4770      	bx	lr
 801c61c:	4770      	bx	lr
 801c61e:	bf00      	nop

0801c620 <rclc_action_find_handle_by_result_request_sequence_number>:
 801c620:	b170      	cbz	r0, 801c640 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801c622:	68c0      	ldr	r0, [r0, #12]
 801c624:	b160      	cbz	r0, 801c640 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801c626:	b410      	push	{r4}
 801c628:	e001      	b.n	801c62e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801c62a:	6800      	ldr	r0, [r0, #0]
 801c62c:	b128      	cbz	r0, 801c63a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801c62e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801c632:	4299      	cmp	r1, r3
 801c634:	bf08      	it	eq
 801c636:	4294      	cmpeq	r4, r2
 801c638:	d1f7      	bne.n	801c62a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801c63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c63e:	4770      	bx	lr
 801c640:	4770      	bx	lr
 801c642:	bf00      	nop

0801c644 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801c644:	b170      	cbz	r0, 801c664 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801c646:	68c0      	ldr	r0, [r0, #12]
 801c648:	b160      	cbz	r0, 801c664 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801c64a:	b410      	push	{r4}
 801c64c:	e001      	b.n	801c652 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801c64e:	6800      	ldr	r0, [r0, #0]
 801c650:	b128      	cbz	r0, 801c65e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801c652:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801c656:	4299      	cmp	r1, r3
 801c658:	bf08      	it	eq
 801c65a:	4294      	cmpeq	r4, r2
 801c65c:	d1f7      	bne.n	801c64e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801c65e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c662:	4770      	bx	lr
 801c664:	4770      	bx	lr
 801c666:	bf00      	nop

0801c668 <rclc_action_find_first_handle_with_goal_response>:
 801c668:	b140      	cbz	r0, 801c67c <rclc_action_find_first_handle_with_goal_response+0x14>
 801c66a:	68c0      	ldr	r0, [r0, #12]
 801c66c:	b910      	cbnz	r0, 801c674 <rclc_action_find_first_handle_with_goal_response+0xc>
 801c66e:	e005      	b.n	801c67c <rclc_action_find_first_handle_with_goal_response+0x14>
 801c670:	6800      	ldr	r0, [r0, #0]
 801c672:	b118      	cbz	r0, 801c67c <rclc_action_find_first_handle_with_goal_response+0x14>
 801c674:	f890 3020 	ldrb.w	r3, [r0, #32]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d0f9      	beq.n	801c670 <rclc_action_find_first_handle_with_goal_response+0x8>
 801c67c:	4770      	bx	lr
 801c67e:	bf00      	nop

0801c680 <rclc_action_find_first_handle_with_result_response>:
 801c680:	b140      	cbz	r0, 801c694 <rclc_action_find_first_handle_with_result_response+0x14>
 801c682:	68c0      	ldr	r0, [r0, #12]
 801c684:	b910      	cbnz	r0, 801c68c <rclc_action_find_first_handle_with_result_response+0xc>
 801c686:	e005      	b.n	801c694 <rclc_action_find_first_handle_with_result_response+0x14>
 801c688:	6800      	ldr	r0, [r0, #0]
 801c68a:	b118      	cbz	r0, 801c694 <rclc_action_find_first_handle_with_result_response+0x14>
 801c68c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801c690:	2b00      	cmp	r3, #0
 801c692:	d0f9      	beq.n	801c688 <rclc_action_find_first_handle_with_result_response+0x8>
 801c694:	4770      	bx	lr
 801c696:	bf00      	nop

0801c698 <rclc_action_server_response_goal_request>:
 801c698:	b198      	cbz	r0, 801c6c2 <rclc_action_server_response_goal_request+0x2a>
 801c69a:	2200      	movs	r2, #0
 801c69c:	460b      	mov	r3, r1
 801c69e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801c6a2:	b510      	push	{r4, lr}
 801c6a4:	6844      	ldr	r4, [r0, #4]
 801c6a6:	b086      	sub	sp, #24
 801c6a8:	f104 0010 	add.w	r0, r4, #16
 801c6ac:	9205      	str	r2, [sp, #20]
 801c6ae:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801c6b2:	aa03      	add	r2, sp, #12
 801c6b4:	f88d 300c 	strb.w	r3, [sp, #12]
 801c6b8:	f7ff fd40 	bl	801c13c <rcl_action_send_goal_response>
 801c6bc:	b918      	cbnz	r0, 801c6c6 <rclc_action_server_response_goal_request+0x2e>
 801c6be:	b006      	add	sp, #24
 801c6c0:	bd10      	pop	{r4, pc}
 801c6c2:	200b      	movs	r0, #11
 801c6c4:	4770      	bx	lr
 801c6c6:	9001      	str	r0, [sp, #4]
 801c6c8:	f7f7 fcf6 	bl	80140b8 <rcutils_reset_error>
 801c6cc:	9801      	ldr	r0, [sp, #4]
 801c6ce:	b006      	add	sp, #24
 801c6d0:	bd10      	pop	{r4, pc}
 801c6d2:	bf00      	nop
 801c6d4:	0000      	movs	r0, r0
	...

0801c6d8 <rclc_action_server_goal_cancel_accept>:
 801c6d8:	b310      	cbz	r0, 801c720 <rclc_action_server_goal_cancel_accept+0x48>
 801c6da:	b510      	push	{r4, lr}
 801c6dc:	b090      	sub	sp, #64	; 0x40
 801c6de:	4604      	mov	r4, r0
 801c6e0:	a806      	add	r0, sp, #24
 801c6e2:	f7ff feff 	bl	801c4e4 <rcl_action_get_zero_initialized_cancel_response>
 801c6e6:	2300      	movs	r3, #0
 801c6e8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801c6ec:	46ec      	mov	ip, sp
 801c6ee:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801c6f2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801c6f6:	f88d 3018 	strb.w	r3, [sp, #24]
 801c6fa:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801c6fe:	f8cd d01c 	str.w	sp, [sp, #28]
 801c702:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c706:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801c728 <rclc_action_server_goal_cancel_accept+0x50>
 801c70a:	6860      	ldr	r0, [r4, #4]
 801c70c:	aa06      	add	r2, sp, #24
 801c70e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801c712:	3010      	adds	r0, #16
 801c714:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c718:	f7ff fdc6 	bl	801c2a8 <rcl_action_send_cancel_response>
 801c71c:	b010      	add	sp, #64	; 0x40
 801c71e:	bd10      	pop	{r4, pc}
 801c720:	200b      	movs	r0, #11
 801c722:	4770      	bx	lr
 801c724:	f3af 8000 	nop.w
 801c728:	00000001 	.word	0x00000001
 801c72c:	00000001 	.word	0x00000001

0801c730 <rclc_action_server_goal_cancel_reject>:
 801c730:	b082      	sub	sp, #8
 801c732:	b530      	push	{r4, r5, lr}
 801c734:	b08b      	sub	sp, #44	; 0x2c
 801c736:	ac0e      	add	r4, sp, #56	; 0x38
 801c738:	e884 000c 	stmia.w	r4, {r2, r3}
 801c73c:	b188      	cbz	r0, 801c762 <rclc_action_server_goal_cancel_reject+0x32>
 801c73e:	4604      	mov	r4, r0
 801c740:	a801      	add	r0, sp, #4
 801c742:	460d      	mov	r5, r1
 801c744:	f7ff fece 	bl	801c4e4 <rcl_action_get_zero_initialized_cancel_response>
 801c748:	aa01      	add	r2, sp, #4
 801c74a:	a90e      	add	r1, sp, #56	; 0x38
 801c74c:	f104 0010 	add.w	r0, r4, #16
 801c750:	f88d 5004 	strb.w	r5, [sp, #4]
 801c754:	f7ff fda8 	bl	801c2a8 <rcl_action_send_cancel_response>
 801c758:	b00b      	add	sp, #44	; 0x2c
 801c75a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c75e:	b002      	add	sp, #8
 801c760:	4770      	bx	lr
 801c762:	200b      	movs	r0, #11
 801c764:	b00b      	add	sp, #44	; 0x2c
 801c766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c76a:	b002      	add	sp, #8
 801c76c:	4770      	bx	lr
 801c76e:	bf00      	nop

0801c770 <__atomic_load_8>:
 801c770:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801c774:	4a16      	ldr	r2, [pc, #88]	; (801c7d0 <__atomic_load_8+0x60>)
 801c776:	4b17      	ldr	r3, [pc, #92]	; (801c7d4 <__atomic_load_8+0x64>)
 801c778:	f04f 0c01 	mov.w	ip, #1
 801c77c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801c780:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801c784:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801c788:	fb02 f101 	mul.w	r1, r2, r1
 801c78c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801c790:	fba3 2301 	umull	r2, r3, r3, r1
 801c794:	091b      	lsrs	r3, r3, #4
 801c796:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c79a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801c79e:	b4d0      	push	{r4, r6, r7}
 801c7a0:	1ac9      	subs	r1, r1, r3
 801c7a2:	4c0d      	ldr	r4, [pc, #52]	; (801c7d8 <__atomic_load_8+0x68>)
 801c7a4:	1862      	adds	r2, r4, r1
 801c7a6:	e8d2 3f4f 	ldrexb	r3, [r2]
 801c7aa:	e8c2 cf46 	strexb	r6, ip, [r2]
 801c7ae:	2e00      	cmp	r6, #0
 801c7b0:	d1f9      	bne.n	801c7a6 <__atomic_load_8+0x36>
 801c7b2:	b2db      	uxtb	r3, r3
 801c7b4:	f3bf 8f5b 	dmb	ish
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d1f4      	bne.n	801c7a6 <__atomic_load_8+0x36>
 801c7bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 801c7c0:	f3bf 8f5b 	dmb	ish
 801c7c4:	5463      	strb	r3, [r4, r1]
 801c7c6:	4630      	mov	r0, r6
 801c7c8:	4639      	mov	r1, r7
 801c7ca:	bcd0      	pop	{r4, r6, r7}
 801c7cc:	4770      	bx	lr
 801c7ce:	bf00      	nop
 801c7d0:	27d4eb2d 	.word	0x27d4eb2d
 801c7d4:	b21642c9 	.word	0xb21642c9
 801c7d8:	20016e68 	.word	0x20016e68

0801c7dc <__atomic_store_8>:
 801c7dc:	b570      	push	{r4, r5, r6, lr}
 801c7de:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801c7e2:	4916      	ldr	r1, [pc, #88]	; (801c83c <__atomic_store_8+0x60>)
 801c7e4:	4c16      	ldr	r4, [pc, #88]	; (801c840 <__atomic_store_8+0x64>)
 801c7e6:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801c7ea:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801c7ee:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801c7f2:	fb01 fe0e 	mul.w	lr, r1, lr
 801c7f6:	4913      	ldr	r1, [pc, #76]	; (801c844 <__atomic_store_8+0x68>)
 801c7f8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801c7fc:	fba1 510e 	umull	r5, r1, r1, lr
 801c800:	f04f 0501 	mov.w	r5, #1
 801c804:	0909      	lsrs	r1, r1, #4
 801c806:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801c80a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801c80e:	ebae 0e01 	sub.w	lr, lr, r1
 801c812:	eb04 0c0e 	add.w	ip, r4, lr
 801c816:	e8dc 1f4f 	ldrexb	r1, [ip]
 801c81a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801c81e:	2e00      	cmp	r6, #0
 801c820:	d1f9      	bne.n	801c816 <__atomic_store_8+0x3a>
 801c822:	b2c9      	uxtb	r1, r1
 801c824:	f3bf 8f5b 	dmb	ish
 801c828:	2900      	cmp	r1, #0
 801c82a:	d1f4      	bne.n	801c816 <__atomic_store_8+0x3a>
 801c82c:	e9c0 2300 	strd	r2, r3, [r0]
 801c830:	f3bf 8f5b 	dmb	ish
 801c834:	f804 100e 	strb.w	r1, [r4, lr]
 801c838:	bd70      	pop	{r4, r5, r6, pc}
 801c83a:	bf00      	nop
 801c83c:	27d4eb2d 	.word	0x27d4eb2d
 801c840:	20016e68 	.word	0x20016e68
 801c844:	b21642c9 	.word	0xb21642c9

0801c848 <__atomic_exchange_8>:
 801c848:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801c84c:	4917      	ldr	r1, [pc, #92]	; (801c8ac <__atomic_exchange_8+0x64>)
 801c84e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801c852:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801c856:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801c85a:	fb01 fc0c 	mul.w	ip, r1, ip
 801c85e:	4914      	ldr	r1, [pc, #80]	; (801c8b0 <__atomic_exchange_8+0x68>)
 801c860:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801c864:	b570      	push	{r4, r5, r6, lr}
 801c866:	4686      	mov	lr, r0
 801c868:	fba1 010c 	umull	r0, r1, r1, ip
 801c86c:	4d11      	ldr	r5, [pc, #68]	; (801c8b4 <__atomic_exchange_8+0x6c>)
 801c86e:	f04f 0001 	mov.w	r0, #1
 801c872:	0909      	lsrs	r1, r1, #4
 801c874:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801c878:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801c87c:	ebac 0c01 	sub.w	ip, ip, r1
 801c880:	eb05 010c 	add.w	r1, r5, ip
 801c884:	e8d1 4f4f 	ldrexb	r4, [r1]
 801c888:	e8c1 0f46 	strexb	r6, r0, [r1]
 801c88c:	2e00      	cmp	r6, #0
 801c88e:	d1f9      	bne.n	801c884 <__atomic_exchange_8+0x3c>
 801c890:	b2e4      	uxtb	r4, r4
 801c892:	f3bf 8f5b 	dmb	ish
 801c896:	2c00      	cmp	r4, #0
 801c898:	d1f4      	bne.n	801c884 <__atomic_exchange_8+0x3c>
 801c89a:	e9de 0100 	ldrd	r0, r1, [lr]
 801c89e:	e9ce 2300 	strd	r2, r3, [lr]
 801c8a2:	f3bf 8f5b 	dmb	ish
 801c8a6:	f805 400c 	strb.w	r4, [r5, ip]
 801c8aa:	bd70      	pop	{r4, r5, r6, pc}
 801c8ac:	27d4eb2d 	.word	0x27d4eb2d
 801c8b0:	b21642c9 	.word	0xb21642c9
 801c8b4:	20016e68 	.word	0x20016e68

0801c8b8 <rcutils_is_directory>:
 801c8b8:	2000      	movs	r0, #0
 801c8ba:	4770      	bx	lr

0801c8bc <rcutils_join_path>:
 801c8bc:	b082      	sub	sp, #8
 801c8be:	2000      	movs	r0, #0
 801c8c0:	e88d 000c 	stmia.w	sp, {r2, r3}
 801c8c4:	b002      	add	sp, #8
 801c8c6:	4770      	bx	lr

0801c8c8 <rcutils_to_native_path>:
 801c8c8:	b084      	sub	sp, #16
 801c8ca:	2000      	movs	r0, #0
 801c8cc:	f10d 0c04 	add.w	ip, sp, #4
 801c8d0:	b004      	add	sp, #16
 801c8d2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801c8d6:	4770      	bx	lr

0801c8d8 <rcutils_string_array_fini>:
 801c8d8:	b328      	cbz	r0, 801c926 <rcutils_string_array_fini+0x4e>
 801c8da:	b570      	push	{r4, r5, r6, lr}
 801c8dc:	4604      	mov	r4, r0
 801c8de:	6840      	ldr	r0, [r0, #4]
 801c8e0:	b1e0      	cbz	r0, 801c91c <rcutils_string_array_fini+0x44>
 801c8e2:	f104 0008 	add.w	r0, r4, #8
 801c8e6:	f7f7 fba9 	bl	801403c <rcutils_allocator_is_valid>
 801c8ea:	b1c0      	cbz	r0, 801c91e <rcutils_string_array_fini+0x46>
 801c8ec:	6823      	ldr	r3, [r4, #0]
 801c8ee:	b1c3      	cbz	r3, 801c922 <rcutils_string_array_fini+0x4a>
 801c8f0:	2500      	movs	r5, #0
 801c8f2:	6860      	ldr	r0, [r4, #4]
 801c8f4:	462e      	mov	r6, r5
 801c8f6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c8fa:	68e3      	ldr	r3, [r4, #12]
 801c8fc:	69a1      	ldr	r1, [r4, #24]
 801c8fe:	4798      	blx	r3
 801c900:	e9d4 3000 	ldrd	r3, r0, [r4]
 801c904:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801c908:	3501      	adds	r5, #1
 801c90a:	429d      	cmp	r5, r3
 801c90c:	d3f3      	bcc.n	801c8f6 <rcutils_string_array_fini+0x1e>
 801c90e:	68e3      	ldr	r3, [r4, #12]
 801c910:	69a1      	ldr	r1, [r4, #24]
 801c912:	4798      	blx	r3
 801c914:	2300      	movs	r3, #0
 801c916:	4618      	mov	r0, r3
 801c918:	e9c4 3300 	strd	r3, r3, [r4]
 801c91c:	bd70      	pop	{r4, r5, r6, pc}
 801c91e:	200b      	movs	r0, #11
 801c920:	bd70      	pop	{r4, r5, r6, pc}
 801c922:	6860      	ldr	r0, [r4, #4]
 801c924:	e7f3      	b.n	801c90e <rcutils_string_array_fini+0x36>
 801c926:	200b      	movs	r0, #11
 801c928:	4770      	bx	lr
 801c92a:	bf00      	nop

0801c92c <rcutils_get_zero_initialized_string_map>:
 801c92c:	2000      	movs	r0, #0
 801c92e:	4b01      	ldr	r3, [pc, #4]	; (801c934 <rcutils_get_zero_initialized_string_map+0x8>)
 801c930:	6018      	str	r0, [r3, #0]
 801c932:	4770      	bx	lr
 801c934:	20016e80 	.word	0x20016e80

0801c938 <rcutils_string_map_reserve>:
 801c938:	2800      	cmp	r0, #0
 801c93a:	d05e      	beq.n	801c9fa <rcutils_string_map_reserve+0xc2>
 801c93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c940:	460c      	mov	r4, r1
 801c942:	6801      	ldr	r1, [r0, #0]
 801c944:	b082      	sub	sp, #8
 801c946:	4605      	mov	r5, r0
 801c948:	b129      	cbz	r1, 801c956 <rcutils_string_map_reserve+0x1e>
 801c94a:	68cb      	ldr	r3, [r1, #12]
 801c94c:	42a3      	cmp	r3, r4
 801c94e:	d906      	bls.n	801c95e <rcutils_string_map_reserve+0x26>
 801c950:	461c      	mov	r4, r3
 801c952:	2900      	cmp	r1, #0
 801c954:	d1f9      	bne.n	801c94a <rcutils_string_map_reserve+0x12>
 801c956:	201f      	movs	r0, #31
 801c958:	b002      	add	sp, #8
 801c95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c95e:	688b      	ldr	r3, [r1, #8]
 801c960:	42a3      	cmp	r3, r4
 801c962:	d046      	beq.n	801c9f2 <rcutils_string_map_reserve+0xba>
 801c964:	6a0e      	ldr	r6, [r1, #32]
 801c966:	2c00      	cmp	r4, #0
 801c968:	d033      	beq.n	801c9d2 <rcutils_string_map_reserve+0x9a>
 801c96a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801c96e:	d242      	bcs.n	801c9f6 <rcutils_string_map_reserve+0xbe>
 801c970:	00a7      	lsls	r7, r4, #2
 801c972:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801c976:	6808      	ldr	r0, [r1, #0]
 801c978:	4632      	mov	r2, r6
 801c97a:	4639      	mov	r1, r7
 801c97c:	47c0      	blx	r8
 801c97e:	2800      	cmp	r0, #0
 801c980:	d039      	beq.n	801c9f6 <rcutils_string_map_reserve+0xbe>
 801c982:	682b      	ldr	r3, [r5, #0]
 801c984:	4632      	mov	r2, r6
 801c986:	4639      	mov	r1, r7
 801c988:	6018      	str	r0, [r3, #0]
 801c98a:	6858      	ldr	r0, [r3, #4]
 801c98c:	47c0      	blx	r8
 801c98e:	2800      	cmp	r0, #0
 801c990:	d031      	beq.n	801c9f6 <rcutils_string_map_reserve+0xbe>
 801c992:	682d      	ldr	r5, [r5, #0]
 801c994:	68ab      	ldr	r3, [r5, #8]
 801c996:	6068      	str	r0, [r5, #4]
 801c998:	42a3      	cmp	r3, r4
 801c99a:	d225      	bcs.n	801c9e8 <rcutils_string_map_reserve+0xb0>
 801c99c:	682a      	ldr	r2, [r5, #0]
 801c99e:	eb00 0c07 	add.w	ip, r0, r7
 801c9a2:	0099      	lsls	r1, r3, #2
 801c9a4:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801c9a8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801c9ac:	45e6      	cmp	lr, ip
 801c9ae:	d203      	bcs.n	801c9b8 <rcutils_string_map_reserve+0x80>
 801c9b0:	eb02 0c07 	add.w	ip, r2, r7
 801c9b4:	4566      	cmp	r6, ip
 801c9b6:	d322      	bcc.n	801c9fe <rcutils_string_map_reserve+0xc6>
 801c9b8:	1ae3      	subs	r3, r4, r3
 801c9ba:	4670      	mov	r0, lr
 801c9bc:	2100      	movs	r1, #0
 801c9be:	009a      	lsls	r2, r3, #2
 801c9c0:	9201      	str	r2, [sp, #4]
 801c9c2:	f003 f9cf 	bl	801fd64 <memset>
 801c9c6:	9a01      	ldr	r2, [sp, #4]
 801c9c8:	2100      	movs	r1, #0
 801c9ca:	4630      	mov	r0, r6
 801c9cc:	f003 f9ca 	bl	801fd64 <memset>
 801c9d0:	e00a      	b.n	801c9e8 <rcutils_string_map_reserve+0xb0>
 801c9d2:	694f      	ldr	r7, [r1, #20]
 801c9d4:	6808      	ldr	r0, [r1, #0]
 801c9d6:	4631      	mov	r1, r6
 801c9d8:	47b8      	blx	r7
 801c9da:	682b      	ldr	r3, [r5, #0]
 801c9dc:	4631      	mov	r1, r6
 801c9de:	6858      	ldr	r0, [r3, #4]
 801c9e0:	601c      	str	r4, [r3, #0]
 801c9e2:	47b8      	blx	r7
 801c9e4:	682d      	ldr	r5, [r5, #0]
 801c9e6:	606c      	str	r4, [r5, #4]
 801c9e8:	2000      	movs	r0, #0
 801c9ea:	60ac      	str	r4, [r5, #8]
 801c9ec:	b002      	add	sp, #8
 801c9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9f2:	2000      	movs	r0, #0
 801c9f4:	e7b0      	b.n	801c958 <rcutils_string_map_reserve+0x20>
 801c9f6:	200a      	movs	r0, #10
 801c9f8:	e7ae      	b.n	801c958 <rcutils_string_map_reserve+0x20>
 801c9fa:	200b      	movs	r0, #11
 801c9fc:	4770      	bx	lr
 801c9fe:	1f0b      	subs	r3, r1, #4
 801ca00:	4418      	add	r0, r3
 801ca02:	4413      	add	r3, r2
 801ca04:	3a04      	subs	r2, #4
 801ca06:	4417      	add	r7, r2
 801ca08:	2200      	movs	r2, #0
 801ca0a:	f843 2f04 	str.w	r2, [r3, #4]!
 801ca0e:	42bb      	cmp	r3, r7
 801ca10:	f840 2f04 	str.w	r2, [r0, #4]!
 801ca14:	d1f9      	bne.n	801ca0a <rcutils_string_map_reserve+0xd2>
 801ca16:	e7e7      	b.n	801c9e8 <rcutils_string_map_reserve+0xb0>

0801ca18 <rcutils_string_map_init>:
 801ca18:	b082      	sub	sp, #8
 801ca1a:	b570      	push	{r4, r5, r6, lr}
 801ca1c:	ac04      	add	r4, sp, #16
 801ca1e:	e884 000c 	stmia.w	r4, {r2, r3}
 801ca22:	b380      	cbz	r0, 801ca86 <rcutils_string_map_init+0x6e>
 801ca24:	6806      	ldr	r6, [r0, #0]
 801ca26:	4604      	mov	r4, r0
 801ca28:	b12e      	cbz	r6, 801ca36 <rcutils_string_map_init+0x1e>
 801ca2a:	251e      	movs	r5, #30
 801ca2c:	4628      	mov	r0, r5
 801ca2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca32:	b002      	add	sp, #8
 801ca34:	4770      	bx	lr
 801ca36:	a804      	add	r0, sp, #16
 801ca38:	460d      	mov	r5, r1
 801ca3a:	f7f7 faff 	bl	801403c <rcutils_allocator_is_valid>
 801ca3e:	b310      	cbz	r0, 801ca86 <rcutils_string_map_init+0x6e>
 801ca40:	9b04      	ldr	r3, [sp, #16]
 801ca42:	2024      	movs	r0, #36	; 0x24
 801ca44:	9908      	ldr	r1, [sp, #32]
 801ca46:	4798      	blx	r3
 801ca48:	6020      	str	r0, [r4, #0]
 801ca4a:	b310      	cbz	r0, 801ca92 <rcutils_string_map_init+0x7a>
 801ca4c:	f10d 0e10 	add.w	lr, sp, #16
 801ca50:	f100 0c10 	add.w	ip, r0, #16
 801ca54:	e9c0 6600 	strd	r6, r6, [r0]
 801ca58:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801ca5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ca60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca64:	f8de 3000 	ldr.w	r3, [lr]
 801ca68:	4629      	mov	r1, r5
 801ca6a:	4620      	mov	r0, r4
 801ca6c:	f8cc 3000 	str.w	r3, [ip]
 801ca70:	f7ff ff62 	bl	801c938 <rcutils_string_map_reserve>
 801ca74:	4605      	mov	r5, r0
 801ca76:	2800      	cmp	r0, #0
 801ca78:	d0d8      	beq.n	801ca2c <rcutils_string_map_init+0x14>
 801ca7a:	9b05      	ldr	r3, [sp, #20]
 801ca7c:	9908      	ldr	r1, [sp, #32]
 801ca7e:	6820      	ldr	r0, [r4, #0]
 801ca80:	4798      	blx	r3
 801ca82:	6026      	str	r6, [r4, #0]
 801ca84:	e7d2      	b.n	801ca2c <rcutils_string_map_init+0x14>
 801ca86:	250b      	movs	r5, #11
 801ca88:	4628      	mov	r0, r5
 801ca8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca8e:	b002      	add	sp, #8
 801ca90:	4770      	bx	lr
 801ca92:	250a      	movs	r5, #10
 801ca94:	e7ca      	b.n	801ca2c <rcutils_string_map_init+0x14>
 801ca96:	bf00      	nop

0801ca98 <rcutils_string_map_fini>:
 801ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca9c:	b082      	sub	sp, #8
 801ca9e:	2800      	cmp	r0, #0
 801caa0:	d03a      	beq.n	801cb18 <rcutils_string_map_fini+0x80>
 801caa2:	6804      	ldr	r4, [r0, #0]
 801caa4:	4606      	mov	r6, r0
 801caa6:	2c00      	cmp	r4, #0
 801caa8:	d032      	beq.n	801cb10 <rcutils_string_map_fini+0x78>
 801caaa:	68a3      	ldr	r3, [r4, #8]
 801caac:	b32b      	cbz	r3, 801cafa <rcutils_string_map_fini+0x62>
 801caae:	2500      	movs	r5, #0
 801cab0:	6822      	ldr	r2, [r4, #0]
 801cab2:	462f      	mov	r7, r5
 801cab4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801cab8:	b1e0      	cbz	r0, 801caf4 <rcutils_string_map_fini+0x5c>
 801caba:	6a21      	ldr	r1, [r4, #32]
 801cabc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801cac0:	9101      	str	r1, [sp, #4]
 801cac2:	47c0      	blx	r8
 801cac4:	9901      	ldr	r1, [sp, #4]
 801cac6:	e9d4 3200 	ldrd	r3, r2, [r4]
 801caca:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801cace:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801cad2:	47c0      	blx	r8
 801cad4:	68e3      	ldr	r3, [r4, #12]
 801cad6:	6862      	ldr	r2, [r4, #4]
 801cad8:	3b01      	subs	r3, #1
 801cada:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801cade:	3501      	adds	r5, #1
 801cae0:	60e3      	str	r3, [r4, #12]
 801cae2:	6834      	ldr	r4, [r6, #0]
 801cae4:	68a3      	ldr	r3, [r4, #8]
 801cae6:	429d      	cmp	r5, r3
 801cae8:	d207      	bcs.n	801cafa <rcutils_string_map_fini+0x62>
 801caea:	6822      	ldr	r2, [r4, #0]
 801caec:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801caf0:	2800      	cmp	r0, #0
 801caf2:	d1e2      	bne.n	801caba <rcutils_string_map_fini+0x22>
 801caf4:	3501      	adds	r5, #1
 801caf6:	429d      	cmp	r5, r3
 801caf8:	d3dc      	bcc.n	801cab4 <rcutils_string_map_fini+0x1c>
 801cafa:	2100      	movs	r1, #0
 801cafc:	4630      	mov	r0, r6
 801cafe:	f7ff ff1b 	bl	801c938 <rcutils_string_map_reserve>
 801cb02:	4604      	mov	r4, r0
 801cb04:	b920      	cbnz	r0, 801cb10 <rcutils_string_map_fini+0x78>
 801cb06:	6830      	ldr	r0, [r6, #0]
 801cb08:	6943      	ldr	r3, [r0, #20]
 801cb0a:	6a01      	ldr	r1, [r0, #32]
 801cb0c:	4798      	blx	r3
 801cb0e:	6034      	str	r4, [r6, #0]
 801cb10:	4620      	mov	r0, r4
 801cb12:	b002      	add	sp, #8
 801cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb18:	240b      	movs	r4, #11
 801cb1a:	4620      	mov	r0, r4
 801cb1c:	b002      	add	sp, #8
 801cb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb22:	bf00      	nop

0801cb24 <rcutils_string_map_getn>:
 801cb24:	b378      	cbz	r0, 801cb86 <rcutils_string_map_getn+0x62>
 801cb26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb2a:	f8d0 b000 	ldr.w	fp, [r0]
 801cb2e:	f1bb 0f00 	cmp.w	fp, #0
 801cb32:	d01f      	beq.n	801cb74 <rcutils_string_map_getn+0x50>
 801cb34:	fab1 f481 	clz	r4, r1
 801cb38:	4688      	mov	r8, r1
 801cb3a:	0964      	lsrs	r4, r4, #5
 801cb3c:	b1d1      	cbz	r1, 801cb74 <rcutils_string_map_getn+0x50>
 801cb3e:	f8db 7008 	ldr.w	r7, [fp, #8]
 801cb42:	f8db 6000 	ldr.w	r6, [fp]
 801cb46:	b1af      	cbz	r7, 801cb74 <rcutils_string_map_getn+0x50>
 801cb48:	4691      	mov	r9, r2
 801cb4a:	3e04      	subs	r6, #4
 801cb4c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801cb50:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801cb54:	3401      	adds	r4, #1
 801cb56:	4628      	mov	r0, r5
 801cb58:	b155      	cbz	r5, 801cb70 <rcutils_string_map_getn+0x4c>
 801cb5a:	f7e3 fbd1 	bl	8000300 <strlen>
 801cb5e:	4602      	mov	r2, r0
 801cb60:	4629      	mov	r1, r5
 801cb62:	4640      	mov	r0, r8
 801cb64:	454a      	cmp	r2, r9
 801cb66:	bf38      	it	cc
 801cb68:	464a      	movcc	r2, r9
 801cb6a:	f003 f910 	bl	801fd8e <strncmp>
 801cb6e:	b120      	cbz	r0, 801cb7a <rcutils_string_map_getn+0x56>
 801cb70:	42a7      	cmp	r7, r4
 801cb72:	d1eb      	bne.n	801cb4c <rcutils_string_map_getn+0x28>
 801cb74:	2000      	movs	r0, #0
 801cb76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb7a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801cb7e:	f853 000a 	ldr.w	r0, [r3, sl]
 801cb82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb86:	4770      	bx	lr

0801cb88 <rmw_get_zero_initialized_context>:
 801cb88:	b510      	push	{r4, lr}
 801cb8a:	4604      	mov	r4, r0
 801cb8c:	3010      	adds	r0, #16
 801cb8e:	f7f7 fc73 	bl	8014478 <rmw_get_zero_initialized_init_options>
 801cb92:	2300      	movs	r3, #0
 801cb94:	4620      	mov	r0, r4
 801cb96:	60a3      	str	r3, [r4, #8]
 801cb98:	64a3      	str	r3, [r4, #72]	; 0x48
 801cb9a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801cb9c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801cba8 <rmw_get_zero_initialized_context+0x20>
 801cba0:	ed84 7b00 	vstr	d7, [r4]
 801cba4:	bd10      	pop	{r4, pc}
 801cba6:	bf00      	nop
	...

0801cbb0 <rmw_time_equal>:
 801cbb0:	b4f0      	push	{r4, r5, r6, r7}
 801cbb2:	b084      	sub	sp, #16
 801cbb4:	ac04      	add	r4, sp, #16
 801cbb6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801cbba:	4603      	mov	r3, r0
 801cbbc:	4925      	ldr	r1, [pc, #148]	; (801cc54 <rmw_time_equal+0xa4>)
 801cbbe:	9d01      	ldr	r5, [sp, #4]
 801cbc0:	4610      	mov	r0, r2
 801cbc2:	4299      	cmp	r1, r3
 801cbc4:	f04f 0202 	mov.w	r2, #2
 801cbc8:	9e03      	ldr	r6, [sp, #12]
 801cbca:	41aa      	sbcs	r2, r5
 801cbcc:	d330      	bcc.n	801cc30 <rmw_time_equal+0x80>
 801cbce:	4c22      	ldr	r4, [pc, #136]	; (801cc58 <rmw_time_equal+0xa8>)
 801cbd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cbd4:	fba3 3204 	umull	r3, r2, r3, r4
 801cbd8:	fb04 2205 	mla	r2, r4, r5, r2
 801cbdc:	43dd      	mvns	r5, r3
 801cbde:	1a8c      	subs	r4, r1, r2
 801cbe0:	4285      	cmp	r5, r0
 801cbe2:	41b4      	sbcs	r4, r6
 801cbe4:	d332      	bcc.n	801cc4c <rmw_time_equal+0x9c>
 801cbe6:	eb10 0c03 	adds.w	ip, r0, r3
 801cbea:	eb42 0106 	adc.w	r1, r2, r6
 801cbee:	4819      	ldr	r0, [pc, #100]	; (801cc54 <rmw_time_equal+0xa4>)
 801cbf0:	2202      	movs	r2, #2
 801cbf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801cbf4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801cbf6:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801cbfa:	4298      	cmp	r0, r3
 801cbfc:	41b2      	sbcs	r2, r6
 801cbfe:	d31c      	bcc.n	801cc3a <rmw_time_equal+0x8a>
 801cc00:	4c15      	ldr	r4, [pc, #84]	; (801cc58 <rmw_time_equal+0xa8>)
 801cc02:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801cc06:	fba3 3204 	umull	r3, r2, r3, r4
 801cc0a:	fb04 2206 	mla	r2, r4, r6, r2
 801cc0e:	43de      	mvns	r6, r3
 801cc10:	1a84      	subs	r4, r0, r2
 801cc12:	42ae      	cmp	r6, r5
 801cc14:	41bc      	sbcs	r4, r7
 801cc16:	d315      	bcc.n	801cc44 <rmw_time_equal+0x94>
 801cc18:	195b      	adds	r3, r3, r5
 801cc1a:	eb42 0207 	adc.w	r2, r2, r7
 801cc1e:	428a      	cmp	r2, r1
 801cc20:	bf08      	it	eq
 801cc22:	4563      	cmpeq	r3, ip
 801cc24:	bf0c      	ite	eq
 801cc26:	2001      	moveq	r0, #1
 801cc28:	2000      	movne	r0, #0
 801cc2a:	b004      	add	sp, #16
 801cc2c:	bcf0      	pop	{r4, r5, r6, r7}
 801cc2e:	4770      	bx	lr
 801cc30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801cc34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cc38:	e7d9      	b.n	801cbee <rmw_time_equal+0x3e>
 801cc3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801cc42:	e7ec      	b.n	801cc1e <rmw_time_equal+0x6e>
 801cc44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc48:	4602      	mov	r2, r0
 801cc4a:	e7e8      	b.n	801cc1e <rmw_time_equal+0x6e>
 801cc4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801cc50:	e7cd      	b.n	801cbee <rmw_time_equal+0x3e>
 801cc52:	bf00      	nop
 801cc54:	25c17d04 	.word	0x25c17d04
 801cc58:	3b9aca00 	.word	0x3b9aca00

0801cc5c <rmw_time_total_nsec>:
 801cc5c:	b470      	push	{r4, r5, r6}
 801cc5e:	b085      	sub	sp, #20
 801cc60:	ac04      	add	r4, sp, #16
 801cc62:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801cc66:	4603      	mov	r3, r0
 801cc68:	4913      	ldr	r1, [pc, #76]	; (801ccb8 <rmw_time_total_nsec+0x5c>)
 801cc6a:	9d01      	ldr	r5, [sp, #4]
 801cc6c:	4610      	mov	r0, r2
 801cc6e:	4299      	cmp	r1, r3
 801cc70:	f04f 0202 	mov.w	r2, #2
 801cc74:	9e03      	ldr	r6, [sp, #12]
 801cc76:	41aa      	sbcs	r2, r5
 801cc78:	d311      	bcc.n	801cc9e <rmw_time_total_nsec+0x42>
 801cc7a:	4c10      	ldr	r4, [pc, #64]	; (801ccbc <rmw_time_total_nsec+0x60>)
 801cc7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cc80:	fba3 3204 	umull	r3, r2, r3, r4
 801cc84:	fb04 2205 	mla	r2, r4, r5, r2
 801cc88:	43dd      	mvns	r5, r3
 801cc8a:	1a8c      	subs	r4, r1, r2
 801cc8c:	4285      	cmp	r5, r0
 801cc8e:	41b4      	sbcs	r4, r6
 801cc90:	d30c      	bcc.n	801ccac <rmw_time_total_nsec+0x50>
 801cc92:	1818      	adds	r0, r3, r0
 801cc94:	eb42 0106 	adc.w	r1, r2, r6
 801cc98:	b005      	add	sp, #20
 801cc9a:	bc70      	pop	{r4, r5, r6}
 801cc9c:	4770      	bx	lr
 801cc9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cca6:	b005      	add	sp, #20
 801cca8:	bc70      	pop	{r4, r5, r6}
 801ccaa:	4770      	bx	lr
 801ccac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ccb0:	b005      	add	sp, #20
 801ccb2:	bc70      	pop	{r4, r5, r6}
 801ccb4:	4770      	bx	lr
 801ccb6:	bf00      	nop
 801ccb8:	25c17d04 	.word	0x25c17d04
 801ccbc:	3b9aca00 	.word	0x3b9aca00

0801ccc0 <rmw_validate_full_topic_name>:
 801ccc0:	2800      	cmp	r0, #0
 801ccc2:	d05d      	beq.n	801cd80 <rmw_validate_full_topic_name+0xc0>
 801ccc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccc8:	460d      	mov	r5, r1
 801ccca:	2900      	cmp	r1, #0
 801cccc:	d05a      	beq.n	801cd84 <rmw_validate_full_topic_name+0xc4>
 801ccce:	4604      	mov	r4, r0
 801ccd0:	4616      	mov	r6, r2
 801ccd2:	f7e3 fb15 	bl	8000300 <strlen>
 801ccd6:	b150      	cbz	r0, 801ccee <rmw_validate_full_topic_name+0x2e>
 801ccd8:	7823      	ldrb	r3, [r4, #0]
 801ccda:	2b2f      	cmp	r3, #47	; 0x2f
 801ccdc:	d00e      	beq.n	801ccfc <rmw_validate_full_topic_name+0x3c>
 801ccde:	2302      	movs	r3, #2
 801cce0:	602b      	str	r3, [r5, #0]
 801cce2:	b146      	cbz	r6, 801ccf6 <rmw_validate_full_topic_name+0x36>
 801cce4:	2300      	movs	r3, #0
 801cce6:	4618      	mov	r0, r3
 801cce8:	6033      	str	r3, [r6, #0]
 801ccea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccee:	2301      	movs	r3, #1
 801ccf0:	602b      	str	r3, [r5, #0]
 801ccf2:	2e00      	cmp	r6, #0
 801ccf4:	d1f6      	bne.n	801cce4 <rmw_validate_full_topic_name+0x24>
 801ccf6:	2000      	movs	r0, #0
 801ccf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccfc:	1e43      	subs	r3, r0, #1
 801ccfe:	5ce2      	ldrb	r2, [r4, r3]
 801cd00:	2a2f      	cmp	r2, #47	; 0x2f
 801cd02:	d041      	beq.n	801cd88 <rmw_validate_full_topic_name+0xc8>
 801cd04:	1e62      	subs	r2, r4, #1
 801cd06:	f1c4 0e01 	rsb	lr, r4, #1
 801cd0a:	eb02 0800 	add.w	r8, r2, r0
 801cd0e:	eb0e 0702 	add.w	r7, lr, r2
 801cd12:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801cd16:	f023 0120 	bic.w	r1, r3, #32
 801cd1a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801cd1e:	3941      	subs	r1, #65	; 0x41
 801cd20:	2919      	cmp	r1, #25
 801cd22:	d90f      	bls.n	801cd44 <rmw_validate_full_topic_name+0x84>
 801cd24:	f1bc 0f0a 	cmp.w	ip, #10
 801cd28:	d90c      	bls.n	801cd44 <rmw_validate_full_topic_name+0x84>
 801cd2a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801cd2e:	fab3 f383 	clz	r3, r3
 801cd32:	095b      	lsrs	r3, r3, #5
 801cd34:	b933      	cbnz	r3, 801cd44 <rmw_validate_full_topic_name+0x84>
 801cd36:	2204      	movs	r2, #4
 801cd38:	602a      	str	r2, [r5, #0]
 801cd3a:	2e00      	cmp	r6, #0
 801cd3c:	d0db      	beq.n	801ccf6 <rmw_validate_full_topic_name+0x36>
 801cd3e:	4618      	mov	r0, r3
 801cd40:	6037      	str	r7, [r6, #0]
 801cd42:	e7d2      	b.n	801ccea <rmw_validate_full_topic_name+0x2a>
 801cd44:	4542      	cmp	r2, r8
 801cd46:	d1e2      	bne.n	801cd0e <rmw_validate_full_topic_name+0x4e>
 801cd48:	2301      	movs	r3, #1
 801cd4a:	4f1a      	ldr	r7, [pc, #104]	; (801cdb4 <rmw_validate_full_topic_name+0xf4>)
 801cd4c:	e004      	b.n	801cd58 <rmw_validate_full_topic_name+0x98>
 801cd4e:	4298      	cmp	r0, r3
 801cd50:	f104 0401 	add.w	r4, r4, #1
 801cd54:	4613      	mov	r3, r2
 801cd56:	d91c      	bls.n	801cd92 <rmw_validate_full_topic_name+0xd2>
 801cd58:	4298      	cmp	r0, r3
 801cd5a:	f103 0201 	add.w	r2, r3, #1
 801cd5e:	d0f6      	beq.n	801cd4e <rmw_validate_full_topic_name+0x8e>
 801cd60:	7821      	ldrb	r1, [r4, #0]
 801cd62:	292f      	cmp	r1, #47	; 0x2f
 801cd64:	d1f3      	bne.n	801cd4e <rmw_validate_full_topic_name+0x8e>
 801cd66:	7861      	ldrb	r1, [r4, #1]
 801cd68:	292f      	cmp	r1, #47	; 0x2f
 801cd6a:	d01e      	beq.n	801cdaa <rmw_validate_full_topic_name+0xea>
 801cd6c:	5dc9      	ldrb	r1, [r1, r7]
 801cd6e:	0749      	lsls	r1, r1, #29
 801cd70:	d5ed      	bpl.n	801cd4e <rmw_validate_full_topic_name+0x8e>
 801cd72:	2206      	movs	r2, #6
 801cd74:	602a      	str	r2, [r5, #0]
 801cd76:	2e00      	cmp	r6, #0
 801cd78:	d0bd      	beq.n	801ccf6 <rmw_validate_full_topic_name+0x36>
 801cd7a:	2000      	movs	r0, #0
 801cd7c:	6033      	str	r3, [r6, #0]
 801cd7e:	e7b4      	b.n	801ccea <rmw_validate_full_topic_name+0x2a>
 801cd80:	200b      	movs	r0, #11
 801cd82:	4770      	bx	lr
 801cd84:	200b      	movs	r0, #11
 801cd86:	e7b0      	b.n	801ccea <rmw_validate_full_topic_name+0x2a>
 801cd88:	2203      	movs	r2, #3
 801cd8a:	602a      	str	r2, [r5, #0]
 801cd8c:	2e00      	cmp	r6, #0
 801cd8e:	d1f4      	bne.n	801cd7a <rmw_validate_full_topic_name+0xba>
 801cd90:	e7b1      	b.n	801ccf6 <rmw_validate_full_topic_name+0x36>
 801cd92:	28f7      	cmp	r0, #247	; 0xf7
 801cd94:	d803      	bhi.n	801cd9e <rmw_validate_full_topic_name+0xde>
 801cd96:	2300      	movs	r3, #0
 801cd98:	4618      	mov	r0, r3
 801cd9a:	602b      	str	r3, [r5, #0]
 801cd9c:	e7a5      	b.n	801ccea <rmw_validate_full_topic_name+0x2a>
 801cd9e:	2307      	movs	r3, #7
 801cda0:	602b      	str	r3, [r5, #0]
 801cda2:	2e00      	cmp	r6, #0
 801cda4:	d0a7      	beq.n	801ccf6 <rmw_validate_full_topic_name+0x36>
 801cda6:	23f6      	movs	r3, #246	; 0xf6
 801cda8:	e7e7      	b.n	801cd7a <rmw_validate_full_topic_name+0xba>
 801cdaa:	2205      	movs	r2, #5
 801cdac:	602a      	str	r2, [r5, #0]
 801cdae:	2e00      	cmp	r6, #0
 801cdb0:	d1e3      	bne.n	801cd7a <rmw_validate_full_topic_name+0xba>
 801cdb2:	e7a0      	b.n	801ccf6 <rmw_validate_full_topic_name+0x36>
 801cdb4:	08024adc 	.word	0x08024adc

0801cdb8 <on_status>:
 801cdb8:	b082      	sub	sp, #8
 801cdba:	b002      	add	sp, #8
 801cdbc:	4770      	bx	lr
 801cdbe:	bf00      	nop

0801cdc0 <on_topic>:
 801cdc0:	4a23      	ldr	r2, [pc, #140]	; (801ce50 <on_topic+0x90>)
 801cdc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdc6:	6812      	ldr	r2, [r2, #0]
 801cdc8:	b094      	sub	sp, #80	; 0x50
 801cdca:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801cdcc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801cdd0:	9113      	str	r1, [sp, #76]	; 0x4c
 801cdd2:	9312      	str	r3, [sp, #72]	; 0x48
 801cdd4:	b3c2      	cbz	r2, 801ce48 <on_topic+0x88>
 801cdd6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801cdda:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801cdde:	e001      	b.n	801cde4 <on_topic+0x24>
 801cde0:	6852      	ldr	r2, [r2, #4]
 801cde2:	b38a      	cbz	r2, 801ce48 <on_topic+0x88>
 801cde4:	6894      	ldr	r4, [r2, #8]
 801cde6:	8aa3      	ldrh	r3, [r4, #20]
 801cde8:	428b      	cmp	r3, r1
 801cdea:	d1f9      	bne.n	801cde0 <on_topic+0x20>
 801cdec:	7da3      	ldrb	r3, [r4, #22]
 801cdee:	4283      	cmp	r3, r0
 801cdf0:	d1f6      	bne.n	801cde0 <on_topic+0x20>
 801cdf2:	2248      	movs	r2, #72	; 0x48
 801cdf4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801cdf8:	4668      	mov	r0, sp
 801cdfa:	f003 f880 	bl	801fefe <memcpy>
 801cdfe:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801ce02:	4620      	mov	r0, r4
 801ce04:	cb0c      	ldmia	r3, {r2, r3}
 801ce06:	f7f8 ffdb 	bl	8015dc0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ce0a:	4607      	mov	r7, r0
 801ce0c:	b1e0      	cbz	r0, 801ce48 <on_topic+0x88>
 801ce0e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801ce12:	462a      	mov	r2, r5
 801ce14:	4630      	mov	r0, r6
 801ce16:	f108 0110 	add.w	r1, r8, #16
 801ce1a:	f7f9 fc91 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801ce1e:	b930      	cbnz	r0, 801ce2e <on_topic+0x6e>
 801ce20:	4639      	mov	r1, r7
 801ce22:	480c      	ldr	r0, [pc, #48]	; (801ce54 <on_topic+0x94>)
 801ce24:	b014      	add	sp, #80	; 0x50
 801ce26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce2a:	f000 b8bd 	b.w	801cfa8 <put_memory>
 801ce2e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801ce32:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801ce36:	f000 fb33 	bl	801d4a0 <rmw_uros_epoch_nanos>
 801ce3a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801ce3e:	2305      	movs	r3, #5
 801ce40:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ce44:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801ce48:	b014      	add	sp, #80	; 0x50
 801ce4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce4e:	bf00      	nop
 801ce50:	20016e1c 	.word	0x20016e1c
 801ce54:	20016e0c 	.word	0x20016e0c

0801ce58 <on_request>:
 801ce58:	4824      	ldr	r0, [pc, #144]	; (801ceec <on_request+0x94>)
 801ce5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce5e:	6800      	ldr	r0, [r0, #0]
 801ce60:	b094      	sub	sp, #80	; 0x50
 801ce62:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801ce64:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801ce68:	9113      	str	r1, [sp, #76]	; 0x4c
 801ce6a:	2800      	cmp	r0, #0
 801ce6c:	d03b      	beq.n	801cee6 <on_request+0x8e>
 801ce6e:	461d      	mov	r5, r3
 801ce70:	e001      	b.n	801ce76 <on_request+0x1e>
 801ce72:	6840      	ldr	r0, [r0, #4]
 801ce74:	b3b8      	cbz	r0, 801cee6 <on_request+0x8e>
 801ce76:	6884      	ldr	r4, [r0, #8]
 801ce78:	8b21      	ldrh	r1, [r4, #24]
 801ce7a:	4291      	cmp	r1, r2
 801ce7c:	d1f9      	bne.n	801ce72 <on_request+0x1a>
 801ce7e:	2248      	movs	r2, #72	; 0x48
 801ce80:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801ce84:	4668      	mov	r0, sp
 801ce86:	f003 f83a 	bl	801fefe <memcpy>
 801ce8a:	f104 0320 	add.w	r3, r4, #32
 801ce8e:	4620      	mov	r0, r4
 801ce90:	cb0c      	ldmia	r3, {r2, r3}
 801ce92:	f7f8 ff95 	bl	8015dc0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ce96:	4680      	mov	r8, r0
 801ce98:	b328      	cbz	r0, 801cee6 <on_request+0x8e>
 801ce9a:	4630      	mov	r0, r6
 801ce9c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801cea0:	463a      	mov	r2, r7
 801cea2:	f106 0110 	add.w	r1, r6, #16
 801cea6:	f7f9 fc4b 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801ceaa:	b930      	cbnz	r0, 801ceba <on_request+0x62>
 801ceac:	4641      	mov	r1, r8
 801ceae:	4810      	ldr	r0, [pc, #64]	; (801cef0 <on_request+0x98>)
 801ceb0:	b014      	add	sp, #80	; 0x50
 801ceb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ceb6:	f000 b877 	b.w	801cfa8 <put_memory>
 801ceba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cebc:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801cec0:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801cec4:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801cec8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cecc:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ced0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ced4:	f000 fae4 	bl	801d4a0 <rmw_uros_epoch_nanos>
 801ced8:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801cedc:	2303      	movs	r3, #3
 801cede:	e942 0102 	strd	r0, r1, [r2, #-8]
 801cee2:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801cee6:	b014      	add	sp, #80	; 0x50
 801cee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ceec:	20016dec 	.word	0x20016dec
 801cef0:	20016e0c 	.word	0x20016e0c

0801cef4 <on_reply>:
 801cef4:	4822      	ldr	r0, [pc, #136]	; (801cf80 <on_reply+0x8c>)
 801cef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cefa:	6800      	ldr	r0, [r0, #0]
 801cefc:	b094      	sub	sp, #80	; 0x50
 801cefe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801cf00:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801cf04:	9113      	str	r1, [sp, #76]	; 0x4c
 801cf06:	b3b8      	cbz	r0, 801cf78 <on_reply+0x84>
 801cf08:	461d      	mov	r5, r3
 801cf0a:	e001      	b.n	801cf10 <on_reply+0x1c>
 801cf0c:	6840      	ldr	r0, [r0, #4]
 801cf0e:	b398      	cbz	r0, 801cf78 <on_reply+0x84>
 801cf10:	6884      	ldr	r4, [r0, #8]
 801cf12:	8b21      	ldrh	r1, [r4, #24]
 801cf14:	4291      	cmp	r1, r2
 801cf16:	d1f9      	bne.n	801cf0c <on_reply+0x18>
 801cf18:	2248      	movs	r2, #72	; 0x48
 801cf1a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801cf1e:	4668      	mov	r0, sp
 801cf20:	f002 ffed 	bl	801fefe <memcpy>
 801cf24:	f104 0320 	add.w	r3, r4, #32
 801cf28:	4620      	mov	r0, r4
 801cf2a:	cb0c      	ldmia	r3, {r2, r3}
 801cf2c:	f7f8 ff48 	bl	8015dc0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801cf30:	4680      	mov	r8, r0
 801cf32:	b308      	cbz	r0, 801cf78 <on_reply+0x84>
 801cf34:	4630      	mov	r0, r6
 801cf36:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801cf3a:	463a      	mov	r2, r7
 801cf3c:	f106 0110 	add.w	r1, r6, #16
 801cf40:	f7f9 fbfe 	bl	8016740 <ucdr_deserialize_array_uint8_t>
 801cf44:	b930      	cbnz	r0, 801cf54 <on_reply+0x60>
 801cf46:	4641      	mov	r1, r8
 801cf48:	480e      	ldr	r0, [pc, #56]	; (801cf84 <on_reply+0x90>)
 801cf4a:	b014      	add	sp, #80	; 0x50
 801cf4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf50:	f000 b82a 	b.w	801cfa8 <put_memory>
 801cf54:	2200      	movs	r2, #0
 801cf56:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801cf5a:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801cf5e:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801cf62:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801cf66:	f000 fa9b 	bl	801d4a0 <rmw_uros_epoch_nanos>
 801cf6a:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801cf6e:	2304      	movs	r3, #4
 801cf70:	e942 0102 	strd	r0, r1, [r2, #-8]
 801cf74:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801cf78:	b014      	add	sp, #80	; 0x50
 801cf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf7e:	bf00      	nop
 801cf80:	200124fc 	.word	0x200124fc
 801cf84:	20016e0c 	.word	0x20016e0c

0801cf88 <get_memory>:
 801cf88:	4603      	mov	r3, r0
 801cf8a:	6840      	ldr	r0, [r0, #4]
 801cf8c:	b158      	cbz	r0, 801cfa6 <get_memory+0x1e>
 801cf8e:	6842      	ldr	r2, [r0, #4]
 801cf90:	605a      	str	r2, [r3, #4]
 801cf92:	b10a      	cbz	r2, 801cf98 <get_memory+0x10>
 801cf94:	2100      	movs	r1, #0
 801cf96:	6011      	str	r1, [r2, #0]
 801cf98:	681a      	ldr	r2, [r3, #0]
 801cf9a:	6042      	str	r2, [r0, #4]
 801cf9c:	b102      	cbz	r2, 801cfa0 <get_memory+0x18>
 801cf9e:	6010      	str	r0, [r2, #0]
 801cfa0:	2200      	movs	r2, #0
 801cfa2:	6002      	str	r2, [r0, #0]
 801cfa4:	6018      	str	r0, [r3, #0]
 801cfa6:	4770      	bx	lr

0801cfa8 <put_memory>:
 801cfa8:	680b      	ldr	r3, [r1, #0]
 801cfaa:	b10b      	cbz	r3, 801cfb0 <put_memory+0x8>
 801cfac:	684a      	ldr	r2, [r1, #4]
 801cfae:	605a      	str	r2, [r3, #4]
 801cfb0:	684a      	ldr	r2, [r1, #4]
 801cfb2:	b102      	cbz	r2, 801cfb6 <put_memory+0xe>
 801cfb4:	6013      	str	r3, [r2, #0]
 801cfb6:	6803      	ldr	r3, [r0, #0]
 801cfb8:	428b      	cmp	r3, r1
 801cfba:	6843      	ldr	r3, [r0, #4]
 801cfbc:	bf08      	it	eq
 801cfbe:	6002      	streq	r2, [r0, #0]
 801cfc0:	604b      	str	r3, [r1, #4]
 801cfc2:	b103      	cbz	r3, 801cfc6 <put_memory+0x1e>
 801cfc4:	6019      	str	r1, [r3, #0]
 801cfc6:	2300      	movs	r3, #0
 801cfc8:	600b      	str	r3, [r1, #0]
 801cfca:	6041      	str	r1, [r0, #4]
 801cfcc:	4770      	bx	lr
 801cfce:	bf00      	nop

0801cfd0 <rmw_destroy_client>:
 801cfd0:	b570      	push	{r4, r5, r6, lr}
 801cfd2:	b128      	cbz	r0, 801cfe0 <rmw_destroy_client+0x10>
 801cfd4:	4604      	mov	r4, r0
 801cfd6:	6800      	ldr	r0, [r0, #0]
 801cfd8:	460d      	mov	r5, r1
 801cfda:	f7f9 f905 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 801cfde:	b910      	cbnz	r0, 801cfe6 <rmw_destroy_client+0x16>
 801cfe0:	2401      	movs	r4, #1
 801cfe2:	4620      	mov	r0, r4
 801cfe4:	bd70      	pop	{r4, r5, r6, pc}
 801cfe6:	6863      	ldr	r3, [r4, #4]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d0f9      	beq.n	801cfe0 <rmw_destroy_client+0x10>
 801cfec:	2d00      	cmp	r5, #0
 801cfee:	d0f7      	beq.n	801cfe0 <rmw_destroy_client+0x10>
 801cff0:	6828      	ldr	r0, [r5, #0]
 801cff2:	f7f9 f8f9 	bl	80161e8 <is_uxrce_rmw_identifier_valid>
 801cff6:	2800      	cmp	r0, #0
 801cff8:	d0f2      	beq.n	801cfe0 <rmw_destroy_client+0x10>
 801cffa:	686e      	ldr	r6, [r5, #4]
 801cffc:	2e00      	cmp	r6, #0
 801cffe:	d0ef      	beq.n	801cfe0 <rmw_destroy_client+0x10>
 801d000:	6864      	ldr	r4, [r4, #4]
 801d002:	6932      	ldr	r2, [r6, #16]
 801d004:	6920      	ldr	r0, [r4, #16]
 801d006:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801d00a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d00e:	6819      	ldr	r1, [r3, #0]
 801d010:	f7f9 ff62 	bl	8016ed8 <uxr_buffer_cancel_data>
 801d014:	4602      	mov	r2, r0
 801d016:	6920      	ldr	r0, [r4, #16]
 801d018:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801d01c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801d020:	f7f8 ffd0 	bl	8015fc4 <run_xrce_session>
 801d024:	6920      	ldr	r0, [r4, #16]
 801d026:	6932      	ldr	r2, [r6, #16]
 801d028:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801d02c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d030:	6819      	ldr	r1, [r3, #0]
 801d032:	f7f9 fbed 	bl	8016810 <uxr_buffer_delete_entity>
 801d036:	4602      	mov	r2, r0
 801d038:	6920      	ldr	r0, [r4, #16]
 801d03a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801d03e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801d042:	f7f8 ffbf 	bl	8015fc4 <run_xrce_session>
 801d046:	4603      	mov	r3, r0
 801d048:	4628      	mov	r0, r5
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	bf14      	ite	ne
 801d04e:	2400      	movne	r4, #0
 801d050:	2402      	moveq	r4, #2
 801d052:	f7f8 fe93 	bl	8015d7c <rmw_uxrce_fini_client_memory>
 801d056:	e7c4      	b.n	801cfe2 <rmw_destroy_client+0x12>

0801d058 <rmw_get_implementation_identifier>:
 801d058:	4b01      	ldr	r3, [pc, #4]	; (801d060 <rmw_get_implementation_identifier+0x8>)
 801d05a:	6818      	ldr	r0, [r3, #0]
 801d05c:	4770      	bx	lr
 801d05e:	bf00      	nop
 801d060:	08024a34 	.word	0x08024a34

0801d064 <rmw_create_guard_condition>:
 801d064:	b538      	push	{r3, r4, r5, lr}
 801d066:	4605      	mov	r5, r0
 801d068:	4808      	ldr	r0, [pc, #32]	; (801d08c <rmw_create_guard_condition+0x28>)
 801d06a:	f7ff ff8d 	bl	801cf88 <get_memory>
 801d06e:	4603      	mov	r3, r0
 801d070:	b148      	cbz	r0, 801d086 <rmw_create_guard_condition+0x22>
 801d072:	6884      	ldr	r4, [r0, #8]
 801d074:	2300      	movs	r3, #0
 801d076:	61e5      	str	r5, [r4, #28]
 801d078:	7423      	strb	r3, [r4, #16]
 801d07a:	f7ff ffed 	bl	801d058 <rmw_get_implementation_identifier>
 801d07e:	f104 0314 	add.w	r3, r4, #20
 801d082:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801d086:	4618      	mov	r0, r3
 801d088:	bd38      	pop	{r3, r4, r5, pc}
 801d08a:	bf00      	nop
 801d08c:	20016dac 	.word	0x20016dac

0801d090 <rmw_destroy_guard_condition>:
 801d090:	b508      	push	{r3, lr}
 801d092:	4b08      	ldr	r3, [pc, #32]	; (801d0b4 <rmw_destroy_guard_condition+0x24>)
 801d094:	6819      	ldr	r1, [r3, #0]
 801d096:	b911      	cbnz	r1, 801d09e <rmw_destroy_guard_condition+0xe>
 801d098:	e00a      	b.n	801d0b0 <rmw_destroy_guard_condition+0x20>
 801d09a:	6849      	ldr	r1, [r1, #4]
 801d09c:	b141      	cbz	r1, 801d0b0 <rmw_destroy_guard_condition+0x20>
 801d09e:	688b      	ldr	r3, [r1, #8]
 801d0a0:	3314      	adds	r3, #20
 801d0a2:	4298      	cmp	r0, r3
 801d0a4:	d1f9      	bne.n	801d09a <rmw_destroy_guard_condition+0xa>
 801d0a6:	4803      	ldr	r0, [pc, #12]	; (801d0b4 <rmw_destroy_guard_condition+0x24>)
 801d0a8:	f7ff ff7e 	bl	801cfa8 <put_memory>
 801d0ac:	2000      	movs	r0, #0
 801d0ae:	bd08      	pop	{r3, pc}
 801d0b0:	2001      	movs	r0, #1
 801d0b2:	bd08      	pop	{r3, pc}
 801d0b4:	20016dac 	.word	0x20016dac

0801d0b8 <create_topic>:
 801d0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0bc:	4605      	mov	r5, r0
 801d0be:	b084      	sub	sp, #16
 801d0c0:	4822      	ldr	r0, [pc, #136]	; (801d14c <create_topic+0x94>)
 801d0c2:	460f      	mov	r7, r1
 801d0c4:	4616      	mov	r6, r2
 801d0c6:	f7ff ff5f 	bl	801cf88 <get_memory>
 801d0ca:	4604      	mov	r4, r0
 801d0cc:	2800      	cmp	r0, #0
 801d0ce:	d039      	beq.n	801d144 <create_topic+0x8c>
 801d0d0:	692b      	ldr	r3, [r5, #16]
 801d0d2:	2102      	movs	r1, #2
 801d0d4:	6884      	ldr	r4, [r0, #8]
 801d0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d0da:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801d154 <create_topic+0x9c>
 801d0de:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801d0e2:	1c42      	adds	r2, r0, #1
 801d0e4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801d0e8:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801d0ec:	f7f9 fe8a 	bl	8016e04 <uxr_object_id>
 801d0f0:	223c      	movs	r2, #60	; 0x3c
 801d0f2:	6120      	str	r0, [r4, #16]
 801d0f4:	4641      	mov	r1, r8
 801d0f6:	4638      	mov	r0, r7
 801d0f8:	f7f9 f85e 	bl	80161b8 <generate_topic_name>
 801d0fc:	b1f0      	cbz	r0, 801d13c <create_topic+0x84>
 801d0fe:	4f14      	ldr	r7, [pc, #80]	; (801d150 <create_topic+0x98>)
 801d100:	4630      	mov	r0, r6
 801d102:	2264      	movs	r2, #100	; 0x64
 801d104:	4639      	mov	r1, r7
 801d106:	f7f9 f829 	bl	801615c <generate_type_name>
 801d10a:	b1b8      	cbz	r0, 801d13c <create_topic+0x84>
 801d10c:	6928      	ldr	r0, [r5, #16]
 801d10e:	2106      	movs	r1, #6
 801d110:	696b      	ldr	r3, [r5, #20]
 801d112:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801d116:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d11a:	f8cd 8000 	str.w	r8, [sp]
 801d11e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801d122:	6811      	ldr	r1, [r2, #0]
 801d124:	6922      	ldr	r2, [r4, #16]
 801d126:	f7f9 fbf1 	bl	801690c <uxr_buffer_create_topic_bin>
 801d12a:	4602      	mov	r2, r0
 801d12c:	6928      	ldr	r0, [r5, #16]
 801d12e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801d132:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801d136:	f7f8 ff45 	bl	8015fc4 <run_xrce_session>
 801d13a:	b918      	cbnz	r0, 801d144 <create_topic+0x8c>
 801d13c:	4620      	mov	r0, r4
 801d13e:	2400      	movs	r4, #0
 801d140:	f7f8 fe32 	bl	8015da8 <rmw_uxrce_fini_topic_memory>
 801d144:	4620      	mov	r0, r4
 801d146:	b004      	add	sp, #16
 801d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d14c:	20016e2c 	.word	0x20016e2c
 801d150:	20016ec0 	.word	0x20016ec0
 801d154:	20016e84 	.word	0x20016e84

0801d158 <destroy_topic>:
 801d158:	b538      	push	{r3, r4, r5, lr}
 801d15a:	6985      	ldr	r5, [r0, #24]
 801d15c:	b1dd      	cbz	r5, 801d196 <destroy_topic+0x3e>
 801d15e:	4604      	mov	r4, r0
 801d160:	6928      	ldr	r0, [r5, #16]
 801d162:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801d166:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d16a:	6922      	ldr	r2, [r4, #16]
 801d16c:	6819      	ldr	r1, [r3, #0]
 801d16e:	f7f9 fb4f 	bl	8016810 <uxr_buffer_delete_entity>
 801d172:	4602      	mov	r2, r0
 801d174:	6928      	ldr	r0, [r5, #16]
 801d176:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801d17a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801d17e:	f7f8 ff21 	bl	8015fc4 <run_xrce_session>
 801d182:	4603      	mov	r3, r0
 801d184:	4620      	mov	r0, r4
 801d186:	2b00      	cmp	r3, #0
 801d188:	bf14      	ite	ne
 801d18a:	2400      	movne	r4, #0
 801d18c:	2402      	moveq	r4, #2
 801d18e:	f7f8 fe0b 	bl	8015da8 <rmw_uxrce_fini_topic_memory>
 801d192:	4620      	mov	r0, r4
 801d194:	bd38      	pop	{r3, r4, r5, pc}
 801d196:	2401      	movs	r4, #1
 801d198:	4620      	mov	r0, r4
 801d19a:	bd38      	pop	{r3, r4, r5, pc}

0801d19c <rmw_wait>:
 801d19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d1a0:	4698      	mov	r8, r3
 801d1a2:	ea40 0301 	orr.w	r3, r0, r1
 801d1a6:	b089      	sub	sp, #36	; 0x24
 801d1a8:	ea48 0303 	orr.w	r3, r8, r3
 801d1ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d1ae:	4313      	orrs	r3, r2
 801d1b0:	f000 8106 	beq.w	801d3c0 <rmw_wait+0x224>
 801d1b4:	4605      	mov	r5, r0
 801d1b6:	460e      	mov	r6, r1
 801d1b8:	4691      	mov	r9, r2
 801d1ba:	b16c      	cbz	r4, 801d1d8 <rmw_wait+0x3c>
 801d1bc:	4ba6      	ldr	r3, [pc, #664]	; (801d458 <rmw_wait+0x2bc>)
 801d1be:	af04      	add	r7, sp, #16
 801d1c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d1c2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801d1c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801d1ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d1ce:	f7ff fcef 	bl	801cbb0 <rmw_time_equal>
 801d1d2:	2800      	cmp	r0, #0
 801d1d4:	f000 810b 	beq.w	801d3ee <rmw_wait+0x252>
 801d1d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d1dc:	f7f8 fe74 	bl	8015ec8 <rmw_uxrce_clean_expired_static_input_buffer>
 801d1e0:	4b9e      	ldr	r3, [pc, #632]	; (801d45c <rmw_wait+0x2c0>)
 801d1e2:	681c      	ldr	r4, [r3, #0]
 801d1e4:	b14c      	cbz	r4, 801d1fa <rmw_wait+0x5e>
 801d1e6:	4623      	mov	r3, r4
 801d1e8:	2100      	movs	r1, #0
 801d1ea:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801d1ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d1f2:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	d1f7      	bne.n	801d1ea <rmw_wait+0x4e>
 801d1fa:	f1b9 0f00 	cmp.w	r9, #0
 801d1fe:	d011      	beq.n	801d224 <rmw_wait+0x88>
 801d200:	f8d9 1000 	ldr.w	r1, [r9]
 801d204:	b171      	cbz	r1, 801d224 <rmw_wait+0x88>
 801d206:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801d20a:	2300      	movs	r3, #0
 801d20c:	2001      	movs	r0, #1
 801d20e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d212:	3301      	adds	r3, #1
 801d214:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801d216:	4299      	cmp	r1, r3
 801d218:	6912      	ldr	r2, [r2, #16]
 801d21a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d21e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801d222:	d1f4      	bne.n	801d20e <rmw_wait+0x72>
 801d224:	f1b8 0f00 	cmp.w	r8, #0
 801d228:	d011      	beq.n	801d24e <rmw_wait+0xb2>
 801d22a:	f8d8 1000 	ldr.w	r1, [r8]
 801d22e:	b171      	cbz	r1, 801d24e <rmw_wait+0xb2>
 801d230:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801d234:	2300      	movs	r3, #0
 801d236:	2001      	movs	r0, #1
 801d238:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d23c:	3301      	adds	r3, #1
 801d23e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801d240:	4299      	cmp	r1, r3
 801d242:	6912      	ldr	r2, [r2, #16]
 801d244:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d248:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801d24c:	d1f4      	bne.n	801d238 <rmw_wait+0x9c>
 801d24e:	b185      	cbz	r5, 801d272 <rmw_wait+0xd6>
 801d250:	6829      	ldr	r1, [r5, #0]
 801d252:	b171      	cbz	r1, 801d272 <rmw_wait+0xd6>
 801d254:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801d258:	2300      	movs	r3, #0
 801d25a:	2001      	movs	r0, #1
 801d25c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d260:	3301      	adds	r3, #1
 801d262:	6a12      	ldr	r2, [r2, #32]
 801d264:	4299      	cmp	r1, r3
 801d266:	6912      	ldr	r2, [r2, #16]
 801d268:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801d26c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801d270:	d1f4      	bne.n	801d25c <rmw_wait+0xc0>
 801d272:	b344      	cbz	r4, 801d2c6 <rmw_wait+0x12a>
 801d274:	4622      	mov	r2, r4
 801d276:	2300      	movs	r3, #0
 801d278:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801d27c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801d280:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801d284:	440b      	add	r3, r1
 801d286:	b2db      	uxtb	r3, r3
 801d288:	2a00      	cmp	r2, #0
 801d28a:	d1f5      	bne.n	801d278 <rmw_wait+0xdc>
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	d05f      	beq.n	801d350 <rmw_wait+0x1b4>
 801d290:	1c7a      	adds	r2, r7, #1
 801d292:	d00d      	beq.n	801d2b0 <rmw_wait+0x114>
 801d294:	ee07 7a90 	vmov	s15, r7
 801d298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801d29c:	ee07 3a90 	vmov	s15, r3
 801d2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d2a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d2a8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801d2ac:	ee17 7a90 	vmov	r7, s15
 801d2b0:	68a0      	ldr	r0, [r4, #8]
 801d2b2:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801d2b6:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	f040 808d 	bne.w	801d3da <rmw_wait+0x23e>
 801d2c0:	6864      	ldr	r4, [r4, #4]
 801d2c2:	2c00      	cmp	r4, #0
 801d2c4:	d1f4      	bne.n	801d2b0 <rmw_wait+0x114>
 801d2c6:	f1b9 0f00 	cmp.w	r9, #0
 801d2ca:	f000 80a1 	beq.w	801d410 <rmw_wait+0x274>
 801d2ce:	f8d9 7000 	ldr.w	r7, [r9]
 801d2d2:	2f00      	cmp	r7, #0
 801d2d4:	f000 80a4 	beq.w	801d420 <rmw_wait+0x284>
 801d2d8:	2400      	movs	r4, #0
 801d2da:	4627      	mov	r7, r4
 801d2dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d2e0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d2e4:	f7f8 fdc6 	bl	8015e74 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d2e8:	2800      	cmp	r0, #0
 801d2ea:	d03b      	beq.n	801d364 <rmw_wait+0x1c8>
 801d2ec:	3401      	adds	r4, #1
 801d2ee:	f8d9 3000 	ldr.w	r3, [r9]
 801d2f2:	2701      	movs	r7, #1
 801d2f4:	42a3      	cmp	r3, r4
 801d2f6:	d8f1      	bhi.n	801d2dc <rmw_wait+0x140>
 801d2f8:	2701      	movs	r7, #1
 801d2fa:	f1b8 0f00 	cmp.w	r8, #0
 801d2fe:	d010      	beq.n	801d322 <rmw_wait+0x186>
 801d300:	f8d8 3000 	ldr.w	r3, [r8]
 801d304:	b16b      	cbz	r3, 801d322 <rmw_wait+0x186>
 801d306:	2400      	movs	r4, #0
 801d308:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d30c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d310:	f7f8 fdb0 	bl	8015e74 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d314:	b370      	cbz	r0, 801d374 <rmw_wait+0x1d8>
 801d316:	3401      	adds	r4, #1
 801d318:	f8d8 3000 	ldr.w	r3, [r8]
 801d31c:	2701      	movs	r7, #1
 801d31e:	42a3      	cmp	r3, r4
 801d320:	d8f2      	bhi.n	801d308 <rmw_wait+0x16c>
 801d322:	2d00      	cmp	r5, #0
 801d324:	d035      	beq.n	801d392 <rmw_wait+0x1f6>
 801d326:	682b      	ldr	r3, [r5, #0]
 801d328:	b39b      	cbz	r3, 801d392 <rmw_wait+0x1f6>
 801d32a:	2400      	movs	r4, #0
 801d32c:	686b      	ldr	r3, [r5, #4]
 801d32e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d332:	f7f8 fd9f 	bl	8015e74 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d336:	b328      	cbz	r0, 801d384 <rmw_wait+0x1e8>
 801d338:	3401      	adds	r4, #1
 801d33a:	682b      	ldr	r3, [r5, #0]
 801d33c:	2701      	movs	r7, #1
 801d33e:	42a3      	cmp	r3, r4
 801d340:	d8f4      	bhi.n	801d32c <rmw_wait+0x190>
 801d342:	2e00      	cmp	r6, #0
 801d344:	d03c      	beq.n	801d3c0 <rmw_wait+0x224>
 801d346:	6834      	ldr	r4, [r6, #0]
 801d348:	2c00      	cmp	r4, #0
 801d34a:	d039      	beq.n	801d3c0 <rmw_wait+0x224>
 801d34c:	2701      	movs	r7, #1
 801d34e:	e023      	b.n	801d398 <rmw_wait+0x1fc>
 801d350:	68a0      	ldr	r0, [r4, #8]
 801d352:	2100      	movs	r1, #0
 801d354:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d358:	f7fa fb54 	bl	8017a04 <uxr_run_session_timeout>
 801d35c:	6864      	ldr	r4, [r4, #4]
 801d35e:	2c00      	cmp	r4, #0
 801d360:	d1f6      	bne.n	801d350 <rmw_wait+0x1b4>
 801d362:	e7b0      	b.n	801d2c6 <rmw_wait+0x12a>
 801d364:	e9d9 3200 	ldrd	r3, r2, [r9]
 801d368:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d36c:	3401      	adds	r4, #1
 801d36e:	42a3      	cmp	r3, r4
 801d370:	d8b4      	bhi.n	801d2dc <rmw_wait+0x140>
 801d372:	e7c2      	b.n	801d2fa <rmw_wait+0x15e>
 801d374:	e9d8 3200 	ldrd	r3, r2, [r8]
 801d378:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d37c:	3401      	adds	r4, #1
 801d37e:	429c      	cmp	r4, r3
 801d380:	d3c2      	bcc.n	801d308 <rmw_wait+0x16c>
 801d382:	e7ce      	b.n	801d322 <rmw_wait+0x186>
 801d384:	e9d5 3200 	ldrd	r3, r2, [r5]
 801d388:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d38c:	3401      	adds	r4, #1
 801d38e:	42a3      	cmp	r3, r4
 801d390:	d8cc      	bhi.n	801d32c <rmw_wait+0x190>
 801d392:	b1a6      	cbz	r6, 801d3be <rmw_wait+0x222>
 801d394:	6834      	ldr	r4, [r6, #0]
 801d396:	b194      	cbz	r4, 801d3be <rmw_wait+0x222>
 801d398:	2300      	movs	r3, #0
 801d39a:	461d      	mov	r5, r3
 801d39c:	e004      	b.n	801d3a8 <rmw_wait+0x20c>
 801d39e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801d3a2:	3301      	adds	r3, #1
 801d3a4:	42a3      	cmp	r3, r4
 801d3a6:	d00a      	beq.n	801d3be <rmw_wait+0x222>
 801d3a8:	6870      	ldr	r0, [r6, #4]
 801d3aa:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801d3ae:	7c0a      	ldrb	r2, [r1, #16]
 801d3b0:	2a00      	cmp	r2, #0
 801d3b2:	d0f4      	beq.n	801d39e <rmw_wait+0x202>
 801d3b4:	3301      	adds	r3, #1
 801d3b6:	4617      	mov	r7, r2
 801d3b8:	740d      	strb	r5, [r1, #16]
 801d3ba:	42a3      	cmp	r3, r4
 801d3bc:	d1f4      	bne.n	801d3a8 <rmw_wait+0x20c>
 801d3be:	b147      	cbz	r7, 801d3d2 <rmw_wait+0x236>
 801d3c0:	2000      	movs	r0, #0
 801d3c2:	b009      	add	sp, #36	; 0x24
 801d3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3c8:	b11e      	cbz	r6, 801d3d2 <rmw_wait+0x236>
 801d3ca:	6834      	ldr	r4, [r6, #0]
 801d3cc:	462f      	mov	r7, r5
 801d3ce:	2c00      	cmp	r4, #0
 801d3d0:	d1e2      	bne.n	801d398 <rmw_wait+0x1fc>
 801d3d2:	2002      	movs	r0, #2
 801d3d4:	b009      	add	sp, #36	; 0x24
 801d3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3da:	4639      	mov	r1, r7
 801d3dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d3e0:	f7fa fb2a 	bl	8017a38 <uxr_run_session_until_data>
 801d3e4:	6864      	ldr	r4, [r4, #4]
 801d3e6:	2c00      	cmp	r4, #0
 801d3e8:	f47f af62 	bne.w	801d2b0 <rmw_wait+0x114>
 801d3ec:	e76b      	b.n	801d2c6 <rmw_wait+0x12a>
 801d3ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d3f2:	f7ff fc33 	bl	801cc5c <rmw_time_total_nsec>
 801d3f6:	2300      	movs	r3, #0
 801d3f8:	4a19      	ldr	r2, [pc, #100]	; (801d460 <rmw_wait+0x2c4>)
 801d3fa:	f7e3 faa3 	bl	8000944 <__aeabi_uldivmod>
 801d3fe:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801d402:	4607      	mov	r7, r0
 801d404:	f171 0300 	sbcs.w	r3, r1, #0
 801d408:	bfa8      	it	ge
 801d40a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801d40e:	e6e5      	b.n	801d1dc <rmw_wait+0x40>
 801d410:	f1b8 0f00 	cmp.w	r8, #0
 801d414:	d00f      	beq.n	801d436 <rmw_wait+0x29a>
 801d416:	f8d8 3000 	ldr.w	r3, [r8]
 801d41a:	b193      	cbz	r3, 801d442 <rmw_wait+0x2a6>
 801d41c:	464f      	mov	r7, r9
 801d41e:	e772      	b.n	801d306 <rmw_wait+0x16a>
 801d420:	f1b8 0f00 	cmp.w	r8, #0
 801d424:	d007      	beq.n	801d436 <rmw_wait+0x29a>
 801d426:	f8d8 3000 	ldr.w	r3, [r8]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	f47f af6b 	bne.w	801d306 <rmw_wait+0x16a>
 801d430:	b155      	cbz	r5, 801d448 <rmw_wait+0x2ac>
 801d432:	461f      	mov	r7, r3
 801d434:	e777      	b.n	801d326 <rmw_wait+0x18a>
 801d436:	2d00      	cmp	r5, #0
 801d438:	d0c6      	beq.n	801d3c8 <rmw_wait+0x22c>
 801d43a:	682b      	ldr	r3, [r5, #0]
 801d43c:	b143      	cbz	r3, 801d450 <rmw_wait+0x2b4>
 801d43e:	4647      	mov	r7, r8
 801d440:	e773      	b.n	801d32a <rmw_wait+0x18e>
 801d442:	b10d      	cbz	r5, 801d448 <rmw_wait+0x2ac>
 801d444:	464f      	mov	r7, r9
 801d446:	e76e      	b.n	801d326 <rmw_wait+0x18a>
 801d448:	462f      	mov	r7, r5
 801d44a:	2e00      	cmp	r6, #0
 801d44c:	d1a2      	bne.n	801d394 <rmw_wait+0x1f8>
 801d44e:	e7c0      	b.n	801d3d2 <rmw_wait+0x236>
 801d450:	4647      	mov	r7, r8
 801d452:	2e00      	cmp	r6, #0
 801d454:	d19e      	bne.n	801d394 <rmw_wait+0x1f8>
 801d456:	e7bc      	b.n	801d3d2 <rmw_wait+0x236>
 801d458:	080234c0 	.word	0x080234c0
 801d45c:	20016dfc 	.word	0x20016dfc
 801d460:	000f4240 	.word	0x000f4240

0801d464 <rmw_create_wait_set>:
 801d464:	b508      	push	{r3, lr}
 801d466:	4803      	ldr	r0, [pc, #12]	; (801d474 <rmw_create_wait_set+0x10>)
 801d468:	f7ff fd8e 	bl	801cf88 <get_memory>
 801d46c:	b108      	cbz	r0, 801d472 <rmw_create_wait_set+0xe>
 801d46e:	6880      	ldr	r0, [r0, #8]
 801d470:	3010      	adds	r0, #16
 801d472:	bd08      	pop	{r3, pc}
 801d474:	20016e3c 	.word	0x20016e3c

0801d478 <rmw_destroy_wait_set>:
 801d478:	b508      	push	{r3, lr}
 801d47a:	4b08      	ldr	r3, [pc, #32]	; (801d49c <rmw_destroy_wait_set+0x24>)
 801d47c:	6819      	ldr	r1, [r3, #0]
 801d47e:	b911      	cbnz	r1, 801d486 <rmw_destroy_wait_set+0xe>
 801d480:	e00a      	b.n	801d498 <rmw_destroy_wait_set+0x20>
 801d482:	6849      	ldr	r1, [r1, #4]
 801d484:	b141      	cbz	r1, 801d498 <rmw_destroy_wait_set+0x20>
 801d486:	688b      	ldr	r3, [r1, #8]
 801d488:	3310      	adds	r3, #16
 801d48a:	4298      	cmp	r0, r3
 801d48c:	d1f9      	bne.n	801d482 <rmw_destroy_wait_set+0xa>
 801d48e:	4803      	ldr	r0, [pc, #12]	; (801d49c <rmw_destroy_wait_set+0x24>)
 801d490:	f7ff fd8a 	bl	801cfa8 <put_memory>
 801d494:	2000      	movs	r0, #0
 801d496:	bd08      	pop	{r3, pc}
 801d498:	2001      	movs	r0, #1
 801d49a:	bd08      	pop	{r3, pc}
 801d49c:	20016e3c 	.word	0x20016e3c

0801d4a0 <rmw_uros_epoch_nanos>:
 801d4a0:	4b05      	ldr	r3, [pc, #20]	; (801d4b8 <rmw_uros_epoch_nanos+0x18>)
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	b123      	cbz	r3, 801d4b0 <rmw_uros_epoch_nanos+0x10>
 801d4a6:	6898      	ldr	r0, [r3, #8]
 801d4a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801d4ac:	f7f9 bf20 	b.w	80172f0 <uxr_epoch_nanos>
 801d4b0:	2000      	movs	r0, #0
 801d4b2:	2100      	movs	r1, #0
 801d4b4:	4770      	bx	lr
 801d4b6:	bf00      	nop
 801d4b8:	20016dfc 	.word	0x20016dfc

0801d4bc <std_msgs__msg__String__init>:
 801d4bc:	b538      	push	{r3, r4, r5, lr}
 801d4be:	4604      	mov	r4, r0
 801d4c0:	b128      	cbz	r0, 801d4ce <std_msgs__msg__String__init+0x12>
 801d4c2:	f7f8 feb7 	bl	8016234 <rosidl_runtime_c__String__init>
 801d4c6:	4605      	mov	r5, r0
 801d4c8:	b120      	cbz	r0, 801d4d4 <std_msgs__msg__String__init+0x18>
 801d4ca:	4628      	mov	r0, r5
 801d4cc:	bd38      	pop	{r3, r4, r5, pc}
 801d4ce:	4605      	mov	r5, r0
 801d4d0:	4628      	mov	r0, r5
 801d4d2:	bd38      	pop	{r3, r4, r5, pc}
 801d4d4:	4620      	mov	r0, r4
 801d4d6:	f7f8 fec3 	bl	8016260 <rosidl_runtime_c__String__fini>
 801d4da:	4628      	mov	r0, r5
 801d4dc:	bd38      	pop	{r3, r4, r5, pc}
 801d4de:	bf00      	nop

0801d4e0 <std_msgs__msg__String__fini>:
 801d4e0:	b108      	cbz	r0, 801d4e6 <std_msgs__msg__String__fini+0x6>
 801d4e2:	f7f8 bebd 	b.w	8016260 <rosidl_runtime_c__String__fini>
 801d4e6:	4770      	bx	lr

0801d4e8 <ucdr_serialize_string>:
 801d4e8:	b510      	push	{r4, lr}
 801d4ea:	b082      	sub	sp, #8
 801d4ec:	4604      	mov	r4, r0
 801d4ee:	4608      	mov	r0, r1
 801d4f0:	9101      	str	r1, [sp, #4]
 801d4f2:	f7e2 ff05 	bl	8000300 <strlen>
 801d4f6:	4602      	mov	r2, r0
 801d4f8:	9901      	ldr	r1, [sp, #4]
 801d4fa:	4620      	mov	r0, r4
 801d4fc:	3201      	adds	r2, #1
 801d4fe:	b002      	add	sp, #8
 801d500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d504:	f7f4 bf38 	b.w	8012378 <ucdr_serialize_sequence_char>

0801d508 <ucdr_deserialize_string>:
 801d508:	b500      	push	{lr}
 801d50a:	b083      	sub	sp, #12
 801d50c:	ab01      	add	r3, sp, #4
 801d50e:	f7f4 ff45 	bl	801239c <ucdr_deserialize_sequence_char>
 801d512:	b003      	add	sp, #12
 801d514:	f85d fb04 	ldr.w	pc, [sp], #4

0801d518 <uxr_init_input_best_effort_stream>:
 801d518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d51c:	8003      	strh	r3, [r0, #0]
 801d51e:	4770      	bx	lr

0801d520 <uxr_reset_input_best_effort_stream>:
 801d520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d524:	8003      	strh	r3, [r0, #0]
 801d526:	4770      	bx	lr

0801d528 <uxr_receive_best_effort_message>:
 801d528:	b538      	push	{r3, r4, r5, lr}
 801d52a:	4604      	mov	r4, r0
 801d52c:	8800      	ldrh	r0, [r0, #0]
 801d52e:	460d      	mov	r5, r1
 801d530:	f000 fd46 	bl	801dfc0 <uxr_seq_num_cmp>
 801d534:	4603      	mov	r3, r0
 801d536:	0fc0      	lsrs	r0, r0, #31
 801d538:	2b00      	cmp	r3, #0
 801d53a:	bfb8      	it	lt
 801d53c:	8025      	strhlt	r5, [r4, #0]
 801d53e:	bd38      	pop	{r3, r4, r5, pc}

0801d540 <on_full_input_buffer>:
 801d540:	b570      	push	{r4, r5, r6, lr}
 801d542:	460c      	mov	r4, r1
 801d544:	4605      	mov	r5, r0
 801d546:	8908      	ldrh	r0, [r1, #8]
 801d548:	682b      	ldr	r3, [r5, #0]
 801d54a:	7d26      	ldrb	r6, [r4, #20]
 801d54c:	e9d1 1200 	ldrd	r1, r2, [r1]
 801d550:	fbb2 f2f0 	udiv	r2, r2, r0
 801d554:	eba3 0c01 	sub.w	ip, r3, r1
 801d558:	fbbc fcf2 	udiv	ip, ip, r2
 801d55c:	f10c 0c01 	add.w	ip, ip, #1
 801d560:	fa1f f38c 	uxth.w	r3, ip
 801d564:	fbb3 fcf0 	udiv	ip, r3, r0
 801d568:	fb00 331c 	mls	r3, r0, ip, r3
 801d56c:	b29b      	uxth	r3, r3
 801d56e:	fb02 f303 	mul.w	r3, r2, r3
 801d572:	1d18      	adds	r0, r3, #4
 801d574:	4408      	add	r0, r1
 801d576:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801d57a:	b116      	cbz	r6, 801d582 <on_full_input_buffer+0x42>
 801d57c:	2600      	movs	r6, #0
 801d57e:	f840 6c04 	str.w	r6, [r0, #-4]
 801d582:	2a03      	cmp	r2, #3
 801d584:	d801      	bhi.n	801d58a <on_full_input_buffer+0x4a>
 801d586:	2001      	movs	r0, #1
 801d588:	bd70      	pop	{r4, r5, r6, pc}
 801d58a:	3308      	adds	r3, #8
 801d58c:	4628      	mov	r0, r5
 801d58e:	3a04      	subs	r2, #4
 801d590:	4419      	add	r1, r3
 801d592:	692b      	ldr	r3, [r5, #16]
 801d594:	f7f4 fe74 	bl	8012280 <ucdr_init_buffer_origin>
 801d598:	4628      	mov	r0, r5
 801d59a:	4622      	mov	r2, r4
 801d59c:	4902      	ldr	r1, [pc, #8]	; (801d5a8 <on_full_input_buffer+0x68>)
 801d59e:	f7f4 fe4b 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 801d5a2:	2000      	movs	r0, #0
 801d5a4:	bd70      	pop	{r4, r5, r6, pc}
 801d5a6:	bf00      	nop
 801d5a8:	0801d541 	.word	0x0801d541

0801d5ac <uxr_init_input_reliable_stream>:
 801d5ac:	b510      	push	{r4, lr}
 801d5ae:	e9c0 1200 	strd	r1, r2, [r0]
 801d5b2:	2400      	movs	r4, #0
 801d5b4:	9a02      	ldr	r2, [sp, #8]
 801d5b6:	8103      	strh	r3, [r0, #8]
 801d5b8:	6102      	str	r2, [r0, #16]
 801d5ba:	7504      	strb	r4, [r0, #20]
 801d5bc:	b1c3      	cbz	r3, 801d5f0 <uxr_init_input_reliable_stream+0x44>
 801d5be:	600c      	str	r4, [r1, #0]
 801d5c0:	8901      	ldrh	r1, [r0, #8]
 801d5c2:	2901      	cmp	r1, #1
 801d5c4:	d914      	bls.n	801d5f0 <uxr_init_input_reliable_stream+0x44>
 801d5c6:	f04f 0c01 	mov.w	ip, #1
 801d5ca:	6843      	ldr	r3, [r0, #4]
 801d5cc:	f10c 0e01 	add.w	lr, ip, #1
 801d5d0:	fbbc f2f1 	udiv	r2, ip, r1
 801d5d4:	fbb3 f3f1 	udiv	r3, r3, r1
 801d5d8:	fb01 c212 	mls	r2, r1, r2, ip
 801d5dc:	fa1f fc8e 	uxth.w	ip, lr
 801d5e0:	b292      	uxth	r2, r2
 801d5e2:	fb02 f303 	mul.w	r3, r2, r3
 801d5e6:	6802      	ldr	r2, [r0, #0]
 801d5e8:	50d4      	str	r4, [r2, r3]
 801d5ea:	8901      	ldrh	r1, [r0, #8]
 801d5ec:	4561      	cmp	r1, ip
 801d5ee:	d8ec      	bhi.n	801d5ca <uxr_init_input_reliable_stream+0x1e>
 801d5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d5f4:	60c3      	str	r3, [r0, #12]
 801d5f6:	bd10      	pop	{r4, pc}

0801d5f8 <uxr_reset_input_reliable_stream>:
 801d5f8:	8901      	ldrh	r1, [r0, #8]
 801d5fa:	b1d9      	cbz	r1, 801d634 <uxr_reset_input_reliable_stream+0x3c>
 801d5fc:	b510      	push	{r4, lr}
 801d5fe:	f04f 0e00 	mov.w	lr, #0
 801d602:	46f4      	mov	ip, lr
 801d604:	4674      	mov	r4, lr
 801d606:	6843      	ldr	r3, [r0, #4]
 801d608:	f10e 0e01 	add.w	lr, lr, #1
 801d60c:	fbbc f2f1 	udiv	r2, ip, r1
 801d610:	fbb3 f3f1 	udiv	r3, r3, r1
 801d614:	fb01 c212 	mls	r2, r1, r2, ip
 801d618:	fa1f fc8e 	uxth.w	ip, lr
 801d61c:	b292      	uxth	r2, r2
 801d61e:	fb02 f303 	mul.w	r3, r2, r3
 801d622:	6802      	ldr	r2, [r0, #0]
 801d624:	50d4      	str	r4, [r2, r3]
 801d626:	8901      	ldrh	r1, [r0, #8]
 801d628:	4561      	cmp	r1, ip
 801d62a:	d8ec      	bhi.n	801d606 <uxr_reset_input_reliable_stream+0xe>
 801d62c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d630:	60c3      	str	r3, [r0, #12]
 801d632:	bd10      	pop	{r4, pc}
 801d634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d638:	60c3      	str	r3, [r0, #12]
 801d63a:	4770      	bx	lr

0801d63c <uxr_receive_reliable_message>:
 801d63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d640:	4604      	mov	r4, r0
 801d642:	460d      	mov	r5, r1
 801d644:	8901      	ldrh	r1, [r0, #8]
 801d646:	4617      	mov	r7, r2
 801d648:	8980      	ldrh	r0, [r0, #12]
 801d64a:	4698      	mov	r8, r3
 801d64c:	f000 fcb0 	bl	801dfb0 <uxr_seq_num_add>
 801d650:	4629      	mov	r1, r5
 801d652:	4606      	mov	r6, r0
 801d654:	89a0      	ldrh	r0, [r4, #12]
 801d656:	f000 fcb3 	bl	801dfc0 <uxr_seq_num_cmp>
 801d65a:	2800      	cmp	r0, #0
 801d65c:	db0a      	blt.n	801d674 <uxr_receive_reliable_message+0x38>
 801d65e:	2600      	movs	r6, #0
 801d660:	4629      	mov	r1, r5
 801d662:	89e0      	ldrh	r0, [r4, #14]
 801d664:	f000 fcac 	bl	801dfc0 <uxr_seq_num_cmp>
 801d668:	2800      	cmp	r0, #0
 801d66a:	da00      	bge.n	801d66e <uxr_receive_reliable_message+0x32>
 801d66c:	81e5      	strh	r5, [r4, #14]
 801d66e:	4630      	mov	r0, r6
 801d670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d674:	4630      	mov	r0, r6
 801d676:	4629      	mov	r1, r5
 801d678:	f000 fca2 	bl	801dfc0 <uxr_seq_num_cmp>
 801d67c:	2800      	cmp	r0, #0
 801d67e:	dbee      	blt.n	801d65e <uxr_receive_reliable_message+0x22>
 801d680:	6923      	ldr	r3, [r4, #16]
 801d682:	4638      	mov	r0, r7
 801d684:	4798      	blx	r3
 801d686:	4681      	mov	r9, r0
 801d688:	2101      	movs	r1, #1
 801d68a:	89a0      	ldrh	r0, [r4, #12]
 801d68c:	f000 fc90 	bl	801dfb0 <uxr_seq_num_add>
 801d690:	f1b9 0f00 	cmp.w	r9, #0
 801d694:	bf08      	it	eq
 801d696:	4285      	cmpeq	r5, r0
 801d698:	bf0c      	ite	eq
 801d69a:	2601      	moveq	r6, #1
 801d69c:	2600      	movne	r6, #0
 801d69e:	d104      	bne.n	801d6aa <uxr_receive_reliable_message+0x6e>
 801d6a0:	2300      	movs	r3, #0
 801d6a2:	9a08      	ldr	r2, [sp, #32]
 801d6a4:	81a0      	strh	r0, [r4, #12]
 801d6a6:	7013      	strb	r3, [r2, #0]
 801d6a8:	e7da      	b.n	801d660 <uxr_receive_reliable_message+0x24>
 801d6aa:	8922      	ldrh	r2, [r4, #8]
 801d6ac:	6863      	ldr	r3, [r4, #4]
 801d6ae:	fbb5 f0f2 	udiv	r0, r5, r2
 801d6b2:	fbb3 f3f2 	udiv	r3, r3, r2
 801d6b6:	fb02 5010 	mls	r0, r2, r0, r5
 801d6ba:	b280      	uxth	r0, r0
 801d6bc:	fb03 f000 	mul.w	r0, r3, r0
 801d6c0:	6823      	ldr	r3, [r4, #0]
 801d6c2:	3004      	adds	r0, #4
 801d6c4:	4418      	add	r0, r3
 801d6c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d1c7      	bne.n	801d65e <uxr_receive_reliable_message+0x22>
 801d6ce:	4639      	mov	r1, r7
 801d6d0:	4642      	mov	r2, r8
 801d6d2:	f002 fc14 	bl	801fefe <memcpy>
 801d6d6:	8921      	ldrh	r1, [r4, #8]
 801d6d8:	6863      	ldr	r3, [r4, #4]
 801d6da:	fbb5 f2f1 	udiv	r2, r5, r1
 801d6de:	fbb3 f3f1 	udiv	r3, r3, r1
 801d6e2:	fb01 5212 	mls	r2, r1, r2, r5
 801d6e6:	b292      	uxth	r2, r2
 801d6e8:	fb02 f303 	mul.w	r3, r2, r3
 801d6ec:	6822      	ldr	r2, [r4, #0]
 801d6ee:	f842 8003 	str.w	r8, [r2, r3]
 801d6f2:	2301      	movs	r3, #1
 801d6f4:	9a08      	ldr	r2, [sp, #32]
 801d6f6:	7013      	strb	r3, [r2, #0]
 801d6f8:	f1b9 0f00 	cmp.w	r9, #0
 801d6fc:	d0af      	beq.n	801d65e <uxr_receive_reliable_message+0x22>
 801d6fe:	89a6      	ldrh	r6, [r4, #12]
 801d700:	2101      	movs	r1, #1
 801d702:	4630      	mov	r0, r6
 801d704:	f000 fc54 	bl	801dfb0 <uxr_seq_num_add>
 801d708:	8921      	ldrh	r1, [r4, #8]
 801d70a:	6863      	ldr	r3, [r4, #4]
 801d70c:	4606      	mov	r6, r0
 801d70e:	fbb0 f2f1 	udiv	r2, r0, r1
 801d712:	fbb3 f3f1 	udiv	r3, r3, r1
 801d716:	fb01 0212 	mls	r2, r1, r2, r0
 801d71a:	6820      	ldr	r0, [r4, #0]
 801d71c:	b292      	uxth	r2, r2
 801d71e:	fb02 f303 	mul.w	r3, r2, r3
 801d722:	3304      	adds	r3, #4
 801d724:	4418      	add	r0, r3
 801d726:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d097      	beq.n	801d65e <uxr_receive_reliable_message+0x22>
 801d72e:	6923      	ldr	r3, [r4, #16]
 801d730:	4798      	blx	r3
 801d732:	2802      	cmp	r0, #2
 801d734:	d002      	beq.n	801d73c <uxr_receive_reliable_message+0x100>
 801d736:	2801      	cmp	r0, #1
 801d738:	d0e2      	beq.n	801d700 <uxr_receive_reliable_message+0xc4>
 801d73a:	e790      	b.n	801d65e <uxr_receive_reliable_message+0x22>
 801d73c:	2601      	movs	r6, #1
 801d73e:	e78f      	b.n	801d660 <uxr_receive_reliable_message+0x24>

0801d740 <uxr_next_input_reliable_buffer_available>:
 801d740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d744:	4604      	mov	r4, r0
 801d746:	460f      	mov	r7, r1
 801d748:	8980      	ldrh	r0, [r0, #12]
 801d74a:	2101      	movs	r1, #1
 801d74c:	4690      	mov	r8, r2
 801d74e:	f000 fc2f 	bl	801dfb0 <uxr_seq_num_add>
 801d752:	8922      	ldrh	r2, [r4, #8]
 801d754:	6866      	ldr	r6, [r4, #4]
 801d756:	fbb0 f3f2 	udiv	r3, r0, r2
 801d75a:	fbb6 f6f2 	udiv	r6, r6, r2
 801d75e:	fb02 0313 	mls	r3, r2, r3, r0
 801d762:	b29b      	uxth	r3, r3
 801d764:	fb03 f606 	mul.w	r6, r3, r6
 801d768:	6823      	ldr	r3, [r4, #0]
 801d76a:	3604      	adds	r6, #4
 801d76c:	441e      	add	r6, r3
 801d76e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801d772:	f1b9 0f00 	cmp.w	r9, #0
 801d776:	d023      	beq.n	801d7c0 <uxr_next_input_reliable_buffer_available+0x80>
 801d778:	4605      	mov	r5, r0
 801d77a:	6923      	ldr	r3, [r4, #16]
 801d77c:	4630      	mov	r0, r6
 801d77e:	4798      	blx	r3
 801d780:	4682      	mov	sl, r0
 801d782:	b300      	cbz	r0, 801d7c6 <uxr_next_input_reliable_buffer_available+0x86>
 801d784:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801d788:	2101      	movs	r1, #1
 801d78a:	4650      	mov	r0, sl
 801d78c:	f000 fc10 	bl	801dfb0 <uxr_seq_num_add>
 801d790:	8921      	ldrh	r1, [r4, #8]
 801d792:	4682      	mov	sl, r0
 801d794:	6863      	ldr	r3, [r4, #4]
 801d796:	6820      	ldr	r0, [r4, #0]
 801d798:	fbba f2f1 	udiv	r2, sl, r1
 801d79c:	fbb3 f3f1 	udiv	r3, r3, r1
 801d7a0:	fb01 a212 	mls	r2, r1, r2, sl
 801d7a4:	b292      	uxth	r2, r2
 801d7a6:	fb02 f303 	mul.w	r3, r2, r3
 801d7aa:	3304      	adds	r3, #4
 801d7ac:	4418      	add	r0, r3
 801d7ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801d7b2:	b12b      	cbz	r3, 801d7c0 <uxr_next_input_reliable_buffer_available+0x80>
 801d7b4:	6923      	ldr	r3, [r4, #16]
 801d7b6:	4798      	blx	r3
 801d7b8:	2802      	cmp	r0, #2
 801d7ba:	d01b      	beq.n	801d7f4 <uxr_next_input_reliable_buffer_available+0xb4>
 801d7bc:	2801      	cmp	r0, #1
 801d7be:	d0e3      	beq.n	801d788 <uxr_next_input_reliable_buffer_available+0x48>
 801d7c0:	2000      	movs	r0, #0
 801d7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7c6:	464a      	mov	r2, r9
 801d7c8:	4631      	mov	r1, r6
 801d7ca:	4638      	mov	r0, r7
 801d7cc:	f7f4 fd60 	bl	8012290 <ucdr_init_buffer>
 801d7d0:	8921      	ldrh	r1, [r4, #8]
 801d7d2:	6863      	ldr	r3, [r4, #4]
 801d7d4:	2001      	movs	r0, #1
 801d7d6:	fbb5 f2f1 	udiv	r2, r5, r1
 801d7da:	fbb3 f3f1 	udiv	r3, r3, r1
 801d7de:	fb01 5212 	mls	r2, r1, r2, r5
 801d7e2:	b292      	uxth	r2, r2
 801d7e4:	fb02 f303 	mul.w	r3, r2, r3
 801d7e8:	6822      	ldr	r2, [r4, #0]
 801d7ea:	f842 a003 	str.w	sl, [r2, r3]
 801d7ee:	81a5      	strh	r5, [r4, #12]
 801d7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7f4:	8920      	ldrh	r0, [r4, #8]
 801d7f6:	eb06 0108 	add.w	r1, r6, r8
 801d7fa:	6863      	ldr	r3, [r4, #4]
 801d7fc:	eba9 0208 	sub.w	r2, r9, r8
 801d800:	fbb5 f6f0 	udiv	r6, r5, r0
 801d804:	fbb3 f3f0 	udiv	r3, r3, r0
 801d808:	fb00 5516 	mls	r5, r0, r6, r5
 801d80c:	2000      	movs	r0, #0
 801d80e:	b2ad      	uxth	r5, r5
 801d810:	fb03 f505 	mul.w	r5, r3, r5
 801d814:	6823      	ldr	r3, [r4, #0]
 801d816:	5158      	str	r0, [r3, r5]
 801d818:	4638      	mov	r0, r7
 801d81a:	f7f4 fd39 	bl	8012290 <ucdr_init_buffer>
 801d81e:	4638      	mov	r0, r7
 801d820:	4622      	mov	r2, r4
 801d822:	4903      	ldr	r1, [pc, #12]	; (801d830 <uxr_next_input_reliable_buffer_available+0xf0>)
 801d824:	f7f4 fd08 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 801d828:	2001      	movs	r0, #1
 801d82a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801d82e:	e7c8      	b.n	801d7c2 <uxr_next_input_reliable_buffer_available+0x82>
 801d830:	0801d541 	.word	0x0801d541

0801d834 <uxr_process_heartbeat>:
 801d834:	b538      	push	{r3, r4, r5, lr}
 801d836:	4611      	mov	r1, r2
 801d838:	4604      	mov	r4, r0
 801d83a:	89c0      	ldrh	r0, [r0, #14]
 801d83c:	4615      	mov	r5, r2
 801d83e:	f000 fbbf 	bl	801dfc0 <uxr_seq_num_cmp>
 801d842:	2800      	cmp	r0, #0
 801d844:	bfb8      	it	lt
 801d846:	81e5      	strhlt	r5, [r4, #14]
 801d848:	bd38      	pop	{r3, r4, r5, pc}
 801d84a:	bf00      	nop

0801d84c <uxr_compute_acknack>:
 801d84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d850:	8903      	ldrh	r3, [r0, #8]
 801d852:	4604      	mov	r4, r0
 801d854:	460f      	mov	r7, r1
 801d856:	8985      	ldrh	r5, [r0, #12]
 801d858:	b1db      	cbz	r3, 801d892 <uxr_compute_acknack+0x46>
 801d85a:	4628      	mov	r0, r5
 801d85c:	2601      	movs	r6, #1
 801d85e:	e004      	b.n	801d86a <uxr_compute_acknack+0x1e>
 801d860:	4566      	cmp	r6, ip
 801d862:	f106 0601 	add.w	r6, r6, #1
 801d866:	d214      	bcs.n	801d892 <uxr_compute_acknack+0x46>
 801d868:	89a0      	ldrh	r0, [r4, #12]
 801d86a:	b2b1      	uxth	r1, r6
 801d86c:	f000 fba0 	bl	801dfb0 <uxr_seq_num_add>
 801d870:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801d874:	fbb0 f2fc 	udiv	r2, r0, ip
 801d878:	e9d4 1300 	ldrd	r1, r3, [r4]
 801d87c:	fb0c 0212 	mls	r2, ip, r2, r0
 801d880:	fbb3 f3fc 	udiv	r3, r3, ip
 801d884:	b292      	uxth	r2, r2
 801d886:	fb02 f303 	mul.w	r3, r2, r3
 801d88a:	58cb      	ldr	r3, [r1, r3]
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	d1e7      	bne.n	801d860 <uxr_compute_acknack+0x14>
 801d890:	4605      	mov	r5, r0
 801d892:	803d      	strh	r5, [r7, #0]
 801d894:	2101      	movs	r1, #1
 801d896:	89e6      	ldrh	r6, [r4, #14]
 801d898:	4628      	mov	r0, r5
 801d89a:	f000 fb8d 	bl	801dfb8 <uxr_seq_num_sub>
 801d89e:	4601      	mov	r1, r0
 801d8a0:	4630      	mov	r0, r6
 801d8a2:	f000 fb89 	bl	801dfb8 <uxr_seq_num_sub>
 801d8a6:	4606      	mov	r6, r0
 801d8a8:	b328      	cbz	r0, 801d8f6 <uxr_compute_acknack+0xaa>
 801d8aa:	f04f 0900 	mov.w	r9, #0
 801d8ae:	f04f 0801 	mov.w	r8, #1
 801d8b2:	464d      	mov	r5, r9
 801d8b4:	fa1f f189 	uxth.w	r1, r9
 801d8b8:	8838      	ldrh	r0, [r7, #0]
 801d8ba:	f000 fb79 	bl	801dfb0 <uxr_seq_num_add>
 801d8be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801d8c2:	6861      	ldr	r1, [r4, #4]
 801d8c4:	fa08 fe09 	lsl.w	lr, r8, r9
 801d8c8:	6822      	ldr	r2, [r4, #0]
 801d8ca:	f109 0901 	add.w	r9, r9, #1
 801d8ce:	ea4e 0e05 	orr.w	lr, lr, r5
 801d8d2:	fbb0 f3fc 	udiv	r3, r0, ip
 801d8d6:	fbb1 f1fc 	udiv	r1, r1, ip
 801d8da:	fb03 001c 	mls	r0, r3, ip, r0
 801d8de:	b283      	uxth	r3, r0
 801d8e0:	fb01 f303 	mul.w	r3, r1, r3
 801d8e4:	58d3      	ldr	r3, [r2, r3]
 801d8e6:	b90b      	cbnz	r3, 801d8ec <uxr_compute_acknack+0xa0>
 801d8e8:	fa1f f58e 	uxth.w	r5, lr
 801d8ec:	454e      	cmp	r6, r9
 801d8ee:	d1e1      	bne.n	801d8b4 <uxr_compute_acknack+0x68>
 801d8f0:	4628      	mov	r0, r5
 801d8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8f6:	4605      	mov	r5, r0
 801d8f8:	4628      	mov	r0, r5
 801d8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8fe:	bf00      	nop

0801d900 <uxr_init_output_best_effort_stream>:
 801d900:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801d904:	6001      	str	r1, [r0, #0]
 801d906:	7303      	strb	r3, [r0, #12]
 801d908:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801d90c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801d910:	4770      	bx	lr
 801d912:	bf00      	nop

0801d914 <uxr_reset_output_best_effort_stream>:
 801d914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d918:	7b03      	ldrb	r3, [r0, #12]
 801d91a:	81c2      	strh	r2, [r0, #14]
 801d91c:	6043      	str	r3, [r0, #4]
 801d91e:	4770      	bx	lr

0801d920 <uxr_prepare_best_effort_buffer_to_write>:
 801d920:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d922:	4604      	mov	r4, r0
 801d924:	b083      	sub	sp, #12
 801d926:	6840      	ldr	r0, [r0, #4]
 801d928:	460d      	mov	r5, r1
 801d92a:	4616      	mov	r6, r2
 801d92c:	f7fb fa5c 	bl	8018de8 <uxr_submessage_padding>
 801d930:	6863      	ldr	r3, [r4, #4]
 801d932:	4418      	add	r0, r3
 801d934:	68a3      	ldr	r3, [r4, #8]
 801d936:	1942      	adds	r2, r0, r5
 801d938:	4293      	cmp	r3, r2
 801d93a:	bf2c      	ite	cs
 801d93c:	2701      	movcs	r7, #1
 801d93e:	2700      	movcc	r7, #0
 801d940:	d202      	bcs.n	801d948 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801d942:	4638      	mov	r0, r7
 801d944:	b003      	add	sp, #12
 801d946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d948:	9000      	str	r0, [sp, #0]
 801d94a:	2300      	movs	r3, #0
 801d94c:	4630      	mov	r0, r6
 801d94e:	6821      	ldr	r1, [r4, #0]
 801d950:	f7f4 fc8c 	bl	801226c <ucdr_init_buffer_origin_offset>
 801d954:	6861      	ldr	r1, [r4, #4]
 801d956:	4638      	mov	r0, r7
 801d958:	4429      	add	r1, r5
 801d95a:	6061      	str	r1, [r4, #4]
 801d95c:	b003      	add	sp, #12
 801d95e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d960 <uxr_prepare_best_effort_buffer_to_send>:
 801d960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d964:	4604      	mov	r4, r0
 801d966:	461d      	mov	r5, r3
 801d968:	6840      	ldr	r0, [r0, #4]
 801d96a:	7b23      	ldrb	r3, [r4, #12]
 801d96c:	4298      	cmp	r0, r3
 801d96e:	bf8c      	ite	hi
 801d970:	2601      	movhi	r6, #1
 801d972:	2600      	movls	r6, #0
 801d974:	d802      	bhi.n	801d97c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801d976:	4630      	mov	r0, r6
 801d978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d97c:	4688      	mov	r8, r1
 801d97e:	89e0      	ldrh	r0, [r4, #14]
 801d980:	2101      	movs	r1, #1
 801d982:	4617      	mov	r7, r2
 801d984:	f000 fb14 	bl	801dfb0 <uxr_seq_num_add>
 801d988:	6823      	ldr	r3, [r4, #0]
 801d98a:	81e0      	strh	r0, [r4, #14]
 801d98c:	8028      	strh	r0, [r5, #0]
 801d98e:	4630      	mov	r0, r6
 801d990:	f8c8 3000 	str.w	r3, [r8]
 801d994:	6863      	ldr	r3, [r4, #4]
 801d996:	603b      	str	r3, [r7, #0]
 801d998:	7b23      	ldrb	r3, [r4, #12]
 801d99a:	6063      	str	r3, [r4, #4]
 801d99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d9a0 <on_full_output_buffer>:
 801d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9a2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801d9a6:	460c      	mov	r4, r1
 801d9a8:	6803      	ldr	r3, [r0, #0]
 801d9aa:	4605      	mov	r5, r0
 801d9ac:	7b26      	ldrb	r6, [r4, #12]
 801d9ae:	e9d1 1200 	ldrd	r1, r2, [r1]
 801d9b2:	fbb2 f2fc 	udiv	r2, r2, ip
 801d9b6:	eba3 0e01 	sub.w	lr, r3, r1
 801d9ba:	6903      	ldr	r3, [r0, #16]
 801d9bc:	fbbe fef2 	udiv	lr, lr, r2
 801d9c0:	f10e 0e01 	add.w	lr, lr, #1
 801d9c4:	fa1f fe8e 	uxth.w	lr, lr
 801d9c8:	fbbe f7fc 	udiv	r7, lr, ip
 801d9cc:	fb0c ec17 	mls	ip, ip, r7, lr
 801d9d0:	fa1f fc8c 	uxth.w	ip, ip
 801d9d4:	fb02 fc0c 	mul.w	ip, r2, ip
 801d9d8:	f851 200c 	ldr.w	r2, [r1, ip]
 801d9dc:	44b4      	add	ip, r6
 801d9de:	1b92      	subs	r2, r2, r6
 801d9e0:	f10c 0c08 	add.w	ip, ip, #8
 801d9e4:	3a04      	subs	r2, #4
 801d9e6:	4461      	add	r1, ip
 801d9e8:	f7f4 fc4a 	bl	8012280 <ucdr_init_buffer_origin>
 801d9ec:	4628      	mov	r0, r5
 801d9ee:	4622      	mov	r2, r4
 801d9f0:	4902      	ldr	r1, [pc, #8]	; (801d9fc <on_full_output_buffer+0x5c>)
 801d9f2:	f7f4 fc21 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 801d9f6:	2000      	movs	r0, #0
 801d9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9fa:	bf00      	nop
 801d9fc:	0801d9a1 	.word	0x0801d9a1

0801da00 <uxr_init_output_reliable_stream>:
 801da00:	b530      	push	{r4, r5, lr}
 801da02:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801da06:	8103      	strh	r3, [r0, #8]
 801da08:	7304      	strb	r4, [r0, #12]
 801da0a:	e9c0 1200 	strd	r1, r2, [r0]
 801da0e:	b1e3      	cbz	r3, 801da4a <uxr_init_output_reliable_stream+0x4a>
 801da10:	600c      	str	r4, [r1, #0]
 801da12:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801da16:	f1bc 0f01 	cmp.w	ip, #1
 801da1a:	d916      	bls.n	801da4a <uxr_init_output_reliable_stream+0x4a>
 801da1c:	f04f 0e01 	mov.w	lr, #1
 801da20:	6843      	ldr	r3, [r0, #4]
 801da22:	f10e 0501 	add.w	r5, lr, #1
 801da26:	7b04      	ldrb	r4, [r0, #12]
 801da28:	6801      	ldr	r1, [r0, #0]
 801da2a:	fbbe f2fc 	udiv	r2, lr, ip
 801da2e:	fbb3 f3fc 	udiv	r3, r3, ip
 801da32:	fb0c e212 	mls	r2, ip, r2, lr
 801da36:	fa1f fe85 	uxth.w	lr, r5
 801da3a:	b292      	uxth	r2, r2
 801da3c:	fb02 f303 	mul.w	r3, r2, r3
 801da40:	50cc      	str	r4, [r1, r3]
 801da42:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801da46:	45f4      	cmp	ip, lr
 801da48:	d8ea      	bhi.n	801da20 <uxr_init_output_reliable_stream+0x20>
 801da4a:	4b07      	ldr	r3, [pc, #28]	; (801da68 <uxr_init_output_reliable_stream+0x68>)
 801da4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801da50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801da54:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801da58:	f8c0 300e 	str.w	r3, [r0, #14]
 801da5c:	2300      	movs	r3, #0
 801da5e:	8242      	strh	r2, [r0, #18]
 801da60:	8403      	strh	r3, [r0, #32]
 801da62:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801da66:	bd30      	pop	{r4, r5, pc}
 801da68:	ffff0000 	.word	0xffff0000
 801da6c:	00000000 	.word	0x00000000

0801da70 <uxr_reset_output_reliable_stream>:
 801da70:	8901      	ldrh	r1, [r0, #8]
 801da72:	b510      	push	{r4, lr}
 801da74:	b1b1      	cbz	r1, 801daa4 <uxr_reset_output_reliable_stream+0x34>
 801da76:	f04f 0e00 	mov.w	lr, #0
 801da7a:	46f4      	mov	ip, lr
 801da7c:	6843      	ldr	r3, [r0, #4]
 801da7e:	f10e 0e01 	add.w	lr, lr, #1
 801da82:	7b04      	ldrb	r4, [r0, #12]
 801da84:	fbbc f2f1 	udiv	r2, ip, r1
 801da88:	fbb3 f3f1 	udiv	r3, r3, r1
 801da8c:	fb01 c212 	mls	r2, r1, r2, ip
 801da90:	fa1f fc8e 	uxth.w	ip, lr
 801da94:	b292      	uxth	r2, r2
 801da96:	fb02 f303 	mul.w	r3, r2, r3
 801da9a:	6802      	ldr	r2, [r0, #0]
 801da9c:	50d4      	str	r4, [r2, r3]
 801da9e:	8901      	ldrh	r1, [r0, #8]
 801daa0:	4561      	cmp	r1, ip
 801daa2:	d8eb      	bhi.n	801da7c <uxr_reset_output_reliable_stream+0xc>
 801daa4:	4b08      	ldr	r3, [pc, #32]	; (801dac8 <uxr_reset_output_reliable_stream+0x58>)
 801daa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801daaa:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801dac0 <uxr_reset_output_reliable_stream+0x50>
 801daae:	f8c0 300e 	str.w	r3, [r0, #14]
 801dab2:	2300      	movs	r3, #0
 801dab4:	8242      	strh	r2, [r0, #18]
 801dab6:	8403      	strh	r3, [r0, #32]
 801dab8:	ed80 7b06 	vstr	d7, [r0, #24]
 801dabc:	bd10      	pop	{r4, pc}
 801dabe:	bf00      	nop
 801dac0:	ffffffff 	.word	0xffffffff
 801dac4:	7fffffff 	.word	0x7fffffff
 801dac8:	ffff0000 	.word	0xffff0000

0801dacc <uxr_prepare_reliable_buffer_to_write>:
 801dacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad0:	4604      	mov	r4, r0
 801dad2:	b091      	sub	sp, #68	; 0x44
 801dad4:	8900      	ldrh	r0, [r0, #8]
 801dad6:	468b      	mov	fp, r1
 801dad8:	89e6      	ldrh	r6, [r4, #14]
 801dada:	9204      	str	r2, [sp, #16]
 801dadc:	6865      	ldr	r5, [r4, #4]
 801dade:	6823      	ldr	r3, [r4, #0]
 801dae0:	f894 900c 	ldrb.w	r9, [r4, #12]
 801dae4:	fbb6 f2f0 	udiv	r2, r6, r0
 801dae8:	fbb5 f5f0 	udiv	r5, r5, r0
 801daec:	fb00 6212 	mls	r2, r0, r2, r6
 801daf0:	1f2f      	subs	r7, r5, #4
 801daf2:	b292      	uxth	r2, r2
 801daf4:	fb05 3202 	mla	r2, r5, r2, r3
 801daf8:	1d11      	adds	r1, r2, #4
 801dafa:	f8d2 8000 	ldr.w	r8, [r2]
 801dafe:	9103      	str	r1, [sp, #12]
 801db00:	2800      	cmp	r0, #0
 801db02:	f000 814a 	beq.w	801dd9a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801db06:	f04f 0c00 	mov.w	ip, #0
 801db0a:	46e2      	mov	sl, ip
 801db0c:	4661      	mov	r1, ip
 801db0e:	f10c 0c01 	add.w	ip, ip, #1
 801db12:	fbb1 f2f0 	udiv	r2, r1, r0
 801db16:	fb00 1212 	mls	r2, r0, r2, r1
 801db1a:	fa1f f18c 	uxth.w	r1, ip
 801db1e:	b292      	uxth	r2, r2
 801db20:	fb05 f202 	mul.w	r2, r5, r2
 801db24:	589a      	ldr	r2, [r3, r2]
 801db26:	454a      	cmp	r2, r9
 801db28:	d103      	bne.n	801db32 <uxr_prepare_reliable_buffer_to_write+0x66>
 801db2a:	f10a 0a01 	add.w	sl, sl, #1
 801db2e:	fa1f fa8a 	uxth.w	sl, sl
 801db32:	4281      	cmp	r1, r0
 801db34:	d3eb      	bcc.n	801db0e <uxr_prepare_reliable_buffer_to_write+0x42>
 801db36:	4640      	mov	r0, r8
 801db38:	2104      	movs	r1, #4
 801db3a:	f8cd a014 	str.w	sl, [sp, #20]
 801db3e:	f7f4 fbab 	bl	8012298 <ucdr_alignment>
 801db42:	4480      	add	r8, r0
 801db44:	eb08 020b 	add.w	r2, r8, fp
 801db48:	42ba      	cmp	r2, r7
 801db4a:	f240 80ca 	bls.w	801dce2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801db4e:	7b22      	ldrb	r2, [r4, #12]
 801db50:	445a      	add	r2, fp
 801db52:	42ba      	cmp	r2, r7
 801db54:	f240 80b2 	bls.w	801dcbc <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801db58:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801db5c:	b2bb      	uxth	r3, r7
 801db5e:	eba2 0209 	sub.w	r2, r2, r9
 801db62:	441a      	add	r2, r3
 801db64:	b292      	uxth	r2, r2
 801db66:	fb0a f902 	mul.w	r9, sl, r2
 801db6a:	9205      	str	r2, [sp, #20]
 801db6c:	45d9      	cmp	r9, fp
 801db6e:	9206      	str	r2, [sp, #24]
 801db70:	f0c0 80b3 	bcc.w	801dcda <uxr_prepare_reliable_buffer_to_write+0x20e>
 801db74:	f108 0204 	add.w	r2, r8, #4
 801db78:	42ba      	cmp	r2, r7
 801db7a:	f080 80da 	bcs.w	801dd32 <uxr_prepare_reliable_buffer_to_write+0x266>
 801db7e:	f1a3 0904 	sub.w	r9, r3, #4
 801db82:	9b05      	ldr	r3, [sp, #20]
 801db84:	eba9 0908 	sub.w	r9, r9, r8
 801db88:	fa1f f989 	uxth.w	r9, r9
 801db8c:	ebab 0b09 	sub.w	fp, fp, r9
 801db90:	fbbb f2f3 	udiv	r2, fp, r3
 801db94:	fb03 b312 	mls	r3, r3, r2, fp
 801db98:	2b00      	cmp	r3, #0
 801db9a:	f040 80c4 	bne.w	801dd26 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801db9e:	b293      	uxth	r3, r2
 801dba0:	4553      	cmp	r3, sl
 801dba2:	f200 809a 	bhi.w	801dcda <uxr_prepare_reliable_buffer_to_write+0x20e>
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	f000 80f9 	beq.w	801dd9e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801dbac:	f8cd 801c 	str.w	r8, [sp, #28]
 801dbb0:	f04f 0a00 	mov.w	sl, #0
 801dbb4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801dbb8:	f10d 0b20 	add.w	fp, sp, #32
 801dbbc:	9505      	str	r5, [sp, #20]
 801dbbe:	461d      	mov	r5, r3
 801dbc0:	e000      	b.n	801dbc4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801dbc2:	46c1      	mov	r9, r8
 801dbc4:	8922      	ldrh	r2, [r4, #8]
 801dbc6:	4658      	mov	r0, fp
 801dbc8:	6863      	ldr	r3, [r4, #4]
 801dbca:	f10a 0a01 	add.w	sl, sl, #1
 801dbce:	fbb6 f1f2 	udiv	r1, r6, r2
 801dbd2:	fbb3 f3f2 	udiv	r3, r3, r2
 801dbd6:	fb02 6111 	mls	r1, r2, r1, r6
 801dbda:	463a      	mov	r2, r7
 801dbdc:	b289      	uxth	r1, r1
 801dbde:	fb03 f101 	mul.w	r1, r3, r1
 801dbe2:	6823      	ldr	r3, [r4, #0]
 801dbe4:	3104      	adds	r1, #4
 801dbe6:	4419      	add	r1, r3
 801dbe8:	2300      	movs	r3, #0
 801dbea:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801dbee:	f8cd c000 	str.w	ip, [sp]
 801dbf2:	f7f4 fb3b 	bl	801226c <ucdr_init_buffer_origin_offset>
 801dbf6:	464a      	mov	r2, r9
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	210d      	movs	r1, #13
 801dbfc:	4658      	mov	r0, fp
 801dbfe:	f7fb f8b3 	bl	8018d68 <uxr_buffer_submessage_header>
 801dc02:	8921      	ldrh	r1, [r4, #8]
 801dc04:	6863      	ldr	r3, [r4, #4]
 801dc06:	4630      	mov	r0, r6
 801dc08:	fbb6 f2f1 	udiv	r2, r6, r1
 801dc0c:	fbb3 f3f1 	udiv	r3, r3, r1
 801dc10:	fb01 6212 	mls	r2, r1, r2, r6
 801dc14:	2101      	movs	r1, #1
 801dc16:	b292      	uxth	r2, r2
 801dc18:	fb02 f303 	mul.w	r3, r2, r3
 801dc1c:	6822      	ldr	r2, [r4, #0]
 801dc1e:	50d7      	str	r7, [r2, r3]
 801dc20:	f000 f9c6 	bl	801dfb0 <uxr_seq_num_add>
 801dc24:	4606      	mov	r6, r0
 801dc26:	fa1f f38a 	uxth.w	r3, sl
 801dc2a:	429d      	cmp	r5, r3
 801dc2c:	d8c9      	bhi.n	801dbc2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801dc2e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801dc32:	9d05      	ldr	r5, [sp, #20]
 801dc34:	8920      	ldrh	r0, [r4, #8]
 801dc36:	463a      	mov	r2, r7
 801dc38:	6863      	ldr	r3, [r4, #4]
 801dc3a:	fbb6 f1f0 	udiv	r1, r6, r0
 801dc3e:	fbb3 f3f0 	udiv	r3, r3, r0
 801dc42:	fb00 6111 	mls	r1, r0, r1, r6
 801dc46:	4658      	mov	r0, fp
 801dc48:	b289      	uxth	r1, r1
 801dc4a:	fb01 f303 	mul.w	r3, r1, r3
 801dc4e:	6821      	ldr	r1, [r4, #0]
 801dc50:	3304      	adds	r3, #4
 801dc52:	4419      	add	r1, r3
 801dc54:	2300      	movs	r3, #0
 801dc56:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801dc5a:	9700      	str	r7, [sp, #0]
 801dc5c:	f7f4 fb06 	bl	801226c <ucdr_init_buffer_origin_offset>
 801dc60:	9f06      	ldr	r7, [sp, #24]
 801dc62:	4658      	mov	r0, fp
 801dc64:	2302      	movs	r3, #2
 801dc66:	b2ba      	uxth	r2, r7
 801dc68:	210d      	movs	r1, #13
 801dc6a:	f7fb f87d 	bl	8018d68 <uxr_buffer_submessage_header>
 801dc6e:	f108 0104 	add.w	r1, r8, #4
 801dc72:	9b03      	ldr	r3, [sp, #12]
 801dc74:	f1a5 0208 	sub.w	r2, r5, #8
 801dc78:	8925      	ldrh	r5, [r4, #8]
 801dc7a:	440b      	add	r3, r1
 801dc7c:	eba2 0208 	sub.w	r2, r2, r8
 801dc80:	fbb6 f0f5 	udiv	r0, r6, r5
 801dc84:	4619      	mov	r1, r3
 801dc86:	6863      	ldr	r3, [r4, #4]
 801dc88:	fb05 6010 	mls	r0, r5, r0, r6
 801dc8c:	fbb3 f3f5 	udiv	r3, r3, r5
 801dc90:	b280      	uxth	r0, r0
 801dc92:	6825      	ldr	r5, [r4, #0]
 801dc94:	fb00 f303 	mul.w	r3, r0, r3
 801dc98:	7b20      	ldrb	r0, [r4, #12]
 801dc9a:	3004      	adds	r0, #4
 801dc9c:	4438      	add	r0, r7
 801dc9e:	50e8      	str	r0, [r5, r3]
 801dca0:	9d04      	ldr	r5, [sp, #16]
 801dca2:	4628      	mov	r0, r5
 801dca4:	f7f4 faf4 	bl	8012290 <ucdr_init_buffer>
 801dca8:	4628      	mov	r0, r5
 801dcaa:	4622      	mov	r2, r4
 801dcac:	493d      	ldr	r1, [pc, #244]	; (801dda4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801dcae:	f7f4 fac3 	bl	8012238 <ucdr_set_on_full_buffer_callback>
 801dcb2:	2001      	movs	r0, #1
 801dcb4:	81e6      	strh	r6, [r4, #14]
 801dcb6:	b011      	add	sp, #68	; 0x44
 801dcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcbc:	2101      	movs	r1, #1
 801dcbe:	89e0      	ldrh	r0, [r4, #14]
 801dcc0:	f000 f976 	bl	801dfb0 <uxr_seq_num_add>
 801dcc4:	4605      	mov	r5, r0
 801dcc6:	8921      	ldrh	r1, [r4, #8]
 801dcc8:	8a60      	ldrh	r0, [r4, #18]
 801dcca:	f000 f971 	bl	801dfb0 <uxr_seq_num_add>
 801dcce:	4601      	mov	r1, r0
 801dcd0:	4628      	mov	r0, r5
 801dcd2:	f000 f975 	bl	801dfc0 <uxr_seq_num_cmp>
 801dcd6:	2800      	cmp	r0, #0
 801dcd8:	dd44      	ble.n	801dd64 <uxr_prepare_reliable_buffer_to_write+0x298>
 801dcda:	2000      	movs	r0, #0
 801dcdc:	b011      	add	sp, #68	; 0x44
 801dcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dce2:	8921      	ldrh	r1, [r4, #8]
 801dce4:	8a60      	ldrh	r0, [r4, #18]
 801dce6:	9205      	str	r2, [sp, #20]
 801dce8:	f000 f962 	bl	801dfb0 <uxr_seq_num_add>
 801dcec:	4601      	mov	r1, r0
 801dcee:	4630      	mov	r0, r6
 801dcf0:	f000 f966 	bl	801dfc0 <uxr_seq_num_cmp>
 801dcf4:	2800      	cmp	r0, #0
 801dcf6:	9a05      	ldr	r2, [sp, #20]
 801dcf8:	dcef      	bgt.n	801dcda <uxr_prepare_reliable_buffer_to_write+0x20e>
 801dcfa:	8925      	ldrh	r5, [r4, #8]
 801dcfc:	e9d4 7300 	ldrd	r7, r3, [r4]
 801dd00:	fbb6 f4f5 	udiv	r4, r6, r5
 801dd04:	fbb3 f3f5 	udiv	r3, r3, r5
 801dd08:	fb05 6414 	mls	r4, r5, r4, r6
 801dd0c:	b2a4      	uxth	r4, r4
 801dd0e:	fb04 f303 	mul.w	r3, r4, r3
 801dd12:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801dd16:	50fa      	str	r2, [r7, r3]
 801dd18:	2300      	movs	r3, #0
 801dd1a:	f8cd 8000 	str.w	r8, [sp]
 801dd1e:	f7f4 faa5 	bl	801226c <ucdr_init_buffer_origin_offset>
 801dd22:	2001      	movs	r0, #1
 801dd24:	e7da      	b.n	801dcdc <uxr_prepare_reliable_buffer_to_write+0x210>
 801dd26:	3201      	adds	r2, #1
 801dd28:	9306      	str	r3, [sp, #24]
 801dd2a:	b293      	uxth	r3, r2
 801dd2c:	4553      	cmp	r3, sl
 801dd2e:	d8d4      	bhi.n	801dcda <uxr_prepare_reliable_buffer_to_write+0x20e>
 801dd30:	e739      	b.n	801dba6 <uxr_prepare_reliable_buffer_to_write+0xda>
 801dd32:	4630      	mov	r0, r6
 801dd34:	2101      	movs	r1, #1
 801dd36:	9307      	str	r3, [sp, #28]
 801dd38:	f000 f93a 	bl	801dfb0 <uxr_seq_num_add>
 801dd3c:	4606      	mov	r6, r0
 801dd3e:	8920      	ldrh	r0, [r4, #8]
 801dd40:	6862      	ldr	r2, [r4, #4]
 801dd42:	fbb6 f1f0 	udiv	r1, r6, r0
 801dd46:	fbb2 f2f0 	udiv	r2, r2, r0
 801dd4a:	fb00 6111 	mls	r1, r0, r1, r6
 801dd4e:	b289      	uxth	r1, r1
 801dd50:	fb01 f202 	mul.w	r2, r1, r2
 801dd54:	6821      	ldr	r1, [r4, #0]
 801dd56:	3204      	adds	r2, #4
 801dd58:	188b      	adds	r3, r1, r2
 801dd5a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801dd5e:	9303      	str	r3, [sp, #12]
 801dd60:	9b07      	ldr	r3, [sp, #28]
 801dd62:	e70c      	b.n	801db7e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801dd64:	8921      	ldrh	r1, [r4, #8]
 801dd66:	6863      	ldr	r3, [r4, #4]
 801dd68:	9804      	ldr	r0, [sp, #16]
 801dd6a:	fbb5 f2f1 	udiv	r2, r5, r1
 801dd6e:	fbb3 f3f1 	udiv	r3, r3, r1
 801dd72:	fb01 5212 	mls	r2, r1, r2, r5
 801dd76:	6821      	ldr	r1, [r4, #0]
 801dd78:	b292      	uxth	r2, r2
 801dd7a:	fb02 f303 	mul.w	r3, r2, r3
 801dd7e:	7b22      	ldrb	r2, [r4, #12]
 801dd80:	3304      	adds	r3, #4
 801dd82:	445a      	add	r2, fp
 801dd84:	4419      	add	r1, r3
 801dd86:	f841 2c04 	str.w	r2, [r1, #-4]
 801dd8a:	7b23      	ldrb	r3, [r4, #12]
 801dd8c:	9300      	str	r3, [sp, #0]
 801dd8e:	2300      	movs	r3, #0
 801dd90:	f7f4 fa6c 	bl	801226c <ucdr_init_buffer_origin_offset>
 801dd94:	2001      	movs	r0, #1
 801dd96:	81e5      	strh	r5, [r4, #14]
 801dd98:	e7a0      	b.n	801dcdc <uxr_prepare_reliable_buffer_to_write+0x210>
 801dd9a:	4682      	mov	sl, r0
 801dd9c:	e6cb      	b.n	801db36 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801dd9e:	f10d 0b20 	add.w	fp, sp, #32
 801dda2:	e747      	b.n	801dc34 <uxr_prepare_reliable_buffer_to_write+0x168>
 801dda4:	0801d9a1 	.word	0x0801d9a1

0801dda8 <uxr_prepare_next_reliable_buffer_to_send>:
 801dda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddaa:	4604      	mov	r4, r0
 801ddac:	461d      	mov	r5, r3
 801ddae:	460f      	mov	r7, r1
 801ddb0:	8a00      	ldrh	r0, [r0, #16]
 801ddb2:	2101      	movs	r1, #1
 801ddb4:	4616      	mov	r6, r2
 801ddb6:	f000 f8fb 	bl	801dfb0 <uxr_seq_num_add>
 801ddba:	8028      	strh	r0, [r5, #0]
 801ddbc:	8922      	ldrh	r2, [r4, #8]
 801ddbe:	6863      	ldr	r3, [r4, #4]
 801ddc0:	fbb0 f1f2 	udiv	r1, r0, r2
 801ddc4:	fbb3 f3f2 	udiv	r3, r3, r2
 801ddc8:	fb02 0c11 	mls	ip, r2, r1, r0
 801ddcc:	89e1      	ldrh	r1, [r4, #14]
 801ddce:	fa1f fc8c 	uxth.w	ip, ip
 801ddd2:	fb0c fc03 	mul.w	ip, ip, r3
 801ddd6:	6823      	ldr	r3, [r4, #0]
 801ddd8:	f10c 0c04 	add.w	ip, ip, #4
 801dddc:	4463      	add	r3, ip
 801ddde:	603b      	str	r3, [r7, #0]
 801dde0:	6823      	ldr	r3, [r4, #0]
 801dde2:	449c      	add	ip, r3
 801dde4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801dde8:	6033      	str	r3, [r6, #0]
 801ddea:	f000 f8e9 	bl	801dfc0 <uxr_seq_num_cmp>
 801ddee:	2800      	cmp	r0, #0
 801ddf0:	dd01      	ble.n	801ddf6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ddf2:	2000      	movs	r0, #0
 801ddf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddf6:	7b23      	ldrb	r3, [r4, #12]
 801ddf8:	6832      	ldr	r2, [r6, #0]
 801ddfa:	429a      	cmp	r2, r3
 801ddfc:	d9f9      	bls.n	801ddf2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ddfe:	8a61      	ldrh	r1, [r4, #18]
 801de00:	8a20      	ldrh	r0, [r4, #16]
 801de02:	f000 f8d9 	bl	801dfb8 <uxr_seq_num_sub>
 801de06:	8923      	ldrh	r3, [r4, #8]
 801de08:	4283      	cmp	r3, r0
 801de0a:	d0f2      	beq.n	801ddf2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801de0c:	8828      	ldrh	r0, [r5, #0]
 801de0e:	89e3      	ldrh	r3, [r4, #14]
 801de10:	8220      	strh	r0, [r4, #16]
 801de12:	4298      	cmp	r0, r3
 801de14:	d001      	beq.n	801de1a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801de16:	2001      	movs	r0, #1
 801de18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de1a:	2101      	movs	r1, #1
 801de1c:	f000 f8c8 	bl	801dfb0 <uxr_seq_num_add>
 801de20:	4603      	mov	r3, r0
 801de22:	2001      	movs	r0, #1
 801de24:	81e3      	strh	r3, [r4, #14]
 801de26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801de28 <uxr_update_output_stream_heartbeat_timestamp>:
 801de28:	b570      	push	{r4, r5, r6, lr}
 801de2a:	8a01      	ldrh	r1, [r0, #16]
 801de2c:	4604      	mov	r4, r0
 801de2e:	8a40      	ldrh	r0, [r0, #18]
 801de30:	4615      	mov	r5, r2
 801de32:	461e      	mov	r6, r3
 801de34:	f000 f8c4 	bl	801dfc0 <uxr_seq_num_cmp>
 801de38:	2800      	cmp	r0, #0
 801de3a:	db07      	blt.n	801de4c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801de3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801de40:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801de44:	2000      	movs	r0, #0
 801de46:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801de4a:	bd70      	pop	{r4, r5, r6, pc}
 801de4c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801de50:	b940      	cbnz	r0, 801de64 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801de52:	2301      	movs	r3, #1
 801de54:	f884 3020 	strb.w	r3, [r4, #32]
 801de58:	3564      	adds	r5, #100	; 0x64
 801de5a:	f146 0600 	adc.w	r6, r6, #0
 801de5e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801de62:	bd70      	pop	{r4, r5, r6, pc}
 801de64:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801de68:	4295      	cmp	r5, r2
 801de6a:	eb76 0303 	sbcs.w	r3, r6, r3
 801de6e:	db04      	blt.n	801de7a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801de70:	1c43      	adds	r3, r0, #1
 801de72:	2001      	movs	r0, #1
 801de74:	f884 3020 	strb.w	r3, [r4, #32]
 801de78:	e7ee      	b.n	801de58 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801de7a:	2000      	movs	r0, #0
 801de7c:	e7ec      	b.n	801de58 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801de7e:	bf00      	nop

0801de80 <uxr_begin_output_nack_buffer_it>:
 801de80:	8a40      	ldrh	r0, [r0, #18]
 801de82:	4770      	bx	lr

0801de84 <uxr_next_reliable_nack_buffer_to_send>:
 801de84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de88:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801de8c:	b197      	cbz	r7, 801deb4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801de8e:	4680      	mov	r8, r0
 801de90:	460d      	mov	r5, r1
 801de92:	4616      	mov	r6, r2
 801de94:	461c      	mov	r4, r3
 801de96:	8818      	ldrh	r0, [r3, #0]
 801de98:	2101      	movs	r1, #1
 801de9a:	f000 f889 	bl	801dfb0 <uxr_seq_num_add>
 801de9e:	8020      	strh	r0, [r4, #0]
 801dea0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801dea4:	f000 f88c 	bl	801dfc0 <uxr_seq_num_cmp>
 801dea8:	2800      	cmp	r0, #0
 801deaa:	dd06      	ble.n	801deba <uxr_next_reliable_nack_buffer_to_send+0x36>
 801deac:	2300      	movs	r3, #0
 801deae:	461f      	mov	r7, r3
 801deb0:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801deb4:	4638      	mov	r0, r7
 801deb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801deba:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801debe:	8820      	ldrh	r0, [r4, #0]
 801dec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dec4:	fbb0 f3f2 	udiv	r3, r0, r2
 801dec8:	fbb1 fcf2 	udiv	ip, r1, r2
 801decc:	fb02 0313 	mls	r3, r2, r3, r0
 801ded0:	b29b      	uxth	r3, r3
 801ded2:	fb03 fc0c 	mul.w	ip, r3, ip
 801ded6:	f8d8 3000 	ldr.w	r3, [r8]
 801deda:	f10c 0c04 	add.w	ip, ip, #4
 801dede:	4463      	add	r3, ip
 801dee0:	602b      	str	r3, [r5, #0]
 801dee2:	f8d8 3000 	ldr.w	r3, [r8]
 801dee6:	4463      	add	r3, ip
 801dee8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801deec:	6033      	str	r3, [r6, #0]
 801deee:	f898 200c 	ldrb.w	r2, [r8, #12]
 801def2:	429a      	cmp	r2, r3
 801def4:	d0d0      	beq.n	801de98 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801def6:	e7dd      	b.n	801deb4 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801def8 <uxr_process_acknack>:
 801def8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801defa:	4604      	mov	r4, r0
 801defc:	460e      	mov	r6, r1
 801defe:	4610      	mov	r0, r2
 801df00:	2101      	movs	r1, #1
 801df02:	f000 f859 	bl	801dfb8 <uxr_seq_num_sub>
 801df06:	8a61      	ldrh	r1, [r4, #18]
 801df08:	f000 f856 	bl	801dfb8 <uxr_seq_num_sub>
 801df0c:	b1c8      	cbz	r0, 801df42 <uxr_process_acknack+0x4a>
 801df0e:	4605      	mov	r5, r0
 801df10:	2700      	movs	r7, #0
 801df12:	2101      	movs	r1, #1
 801df14:	8a60      	ldrh	r0, [r4, #18]
 801df16:	f000 f84b 	bl	801dfb0 <uxr_seq_num_add>
 801df1a:	8923      	ldrh	r3, [r4, #8]
 801df1c:	6862      	ldr	r2, [r4, #4]
 801df1e:	3701      	adds	r7, #1
 801df20:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801df24:	6821      	ldr	r1, [r4, #0]
 801df26:	42bd      	cmp	r5, r7
 801df28:	8260      	strh	r0, [r4, #18]
 801df2a:	fbb0 fef3 	udiv	lr, r0, r3
 801df2e:	fbb2 f2f3 	udiv	r2, r2, r3
 801df32:	fb03 031e 	mls	r3, r3, lr, r0
 801df36:	b29b      	uxth	r3, r3
 801df38:	fb02 f303 	mul.w	r3, r2, r3
 801df3c:	f841 c003 	str.w	ip, [r1, r3]
 801df40:	d1e7      	bne.n	801df12 <uxr_process_acknack+0x1a>
 801df42:	3e00      	subs	r6, #0
 801df44:	f04f 0300 	mov.w	r3, #0
 801df48:	bf18      	it	ne
 801df4a:	2601      	movne	r6, #1
 801df4c:	f884 3020 	strb.w	r3, [r4, #32]
 801df50:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801df54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df56:	bf00      	nop

0801df58 <uxr_is_output_up_to_date>:
 801df58:	8a01      	ldrh	r1, [r0, #16]
 801df5a:	8a40      	ldrh	r0, [r0, #18]
 801df5c:	b508      	push	{r3, lr}
 801df5e:	f000 f82f 	bl	801dfc0 <uxr_seq_num_cmp>
 801df62:	fab0 f080 	clz	r0, r0
 801df66:	0940      	lsrs	r0, r0, #5
 801df68:	bd08      	pop	{r3, pc}
 801df6a:	bf00      	nop

0801df6c <get_available_free_slots>:
 801df6c:	8901      	ldrh	r1, [r0, #8]
 801df6e:	b1e1      	cbz	r1, 801dfaa <get_available_free_slots+0x3e>
 801df70:	6843      	ldr	r3, [r0, #4]
 801df72:	f04f 0c00 	mov.w	ip, #0
 801df76:	b530      	push	{r4, r5, lr}
 801df78:	fbb3 fef1 	udiv	lr, r3, r1
 801df7c:	6805      	ldr	r5, [r0, #0]
 801df7e:	4662      	mov	r2, ip
 801df80:	7b04      	ldrb	r4, [r0, #12]
 801df82:	4660      	mov	r0, ip
 801df84:	f10c 0c01 	add.w	ip, ip, #1
 801df88:	fbb2 f3f1 	udiv	r3, r2, r1
 801df8c:	fb01 2313 	mls	r3, r1, r3, r2
 801df90:	fa1f f28c 	uxth.w	r2, ip
 801df94:	b29b      	uxth	r3, r3
 801df96:	fb0e f303 	mul.w	r3, lr, r3
 801df9a:	58eb      	ldr	r3, [r5, r3]
 801df9c:	429c      	cmp	r4, r3
 801df9e:	d101      	bne.n	801dfa4 <get_available_free_slots+0x38>
 801dfa0:	3001      	adds	r0, #1
 801dfa2:	b280      	uxth	r0, r0
 801dfa4:	428a      	cmp	r2, r1
 801dfa6:	d3ed      	bcc.n	801df84 <get_available_free_slots+0x18>
 801dfa8:	bd30      	pop	{r4, r5, pc}
 801dfaa:	4608      	mov	r0, r1
 801dfac:	4770      	bx	lr
 801dfae:	bf00      	nop

0801dfb0 <uxr_seq_num_add>:
 801dfb0:	4408      	add	r0, r1
 801dfb2:	b280      	uxth	r0, r0
 801dfb4:	4770      	bx	lr
 801dfb6:	bf00      	nop

0801dfb8 <uxr_seq_num_sub>:
 801dfb8:	1a40      	subs	r0, r0, r1
 801dfba:	b280      	uxth	r0, r0
 801dfbc:	4770      	bx	lr
 801dfbe:	bf00      	nop

0801dfc0 <uxr_seq_num_cmp>:
 801dfc0:	4288      	cmp	r0, r1
 801dfc2:	d011      	beq.n	801dfe8 <uxr_seq_num_cmp+0x28>
 801dfc4:	d309      	bcc.n	801dfda <uxr_seq_num_cmp+0x1a>
 801dfc6:	4288      	cmp	r0, r1
 801dfc8:	d910      	bls.n	801dfec <uxr_seq_num_cmp+0x2c>
 801dfca:	1a40      	subs	r0, r0, r1
 801dfcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801dfd0:	bfd4      	ite	le
 801dfd2:	2001      	movle	r0, #1
 801dfd4:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801dfd8:	4770      	bx	lr
 801dfda:	1a0b      	subs	r3, r1, r0
 801dfdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dfe0:	daf1      	bge.n	801dfc6 <uxr_seq_num_cmp+0x6>
 801dfe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dfe6:	4770      	bx	lr
 801dfe8:	2000      	movs	r0, #0
 801dfea:	4770      	bx	lr
 801dfec:	2001      	movs	r0, #1
 801dfee:	4770      	bx	lr

0801dff0 <rcl_get_default_domain_id>:
 801dff0:	b530      	push	{r4, r5, lr}
 801dff2:	2300      	movs	r3, #0
 801dff4:	b083      	sub	sp, #12
 801dff6:	9300      	str	r3, [sp, #0]
 801dff8:	b1d0      	cbz	r0, 801e030 <rcl_get_default_domain_id+0x40>
 801dffa:	4604      	mov	r4, r0
 801dffc:	4669      	mov	r1, sp
 801dffe:	4815      	ldr	r0, [pc, #84]	; (801e054 <rcl_get_default_domain_id+0x64>)
 801e000:	f7f6 f82a 	bl	8014058 <rcutils_get_env>
 801e004:	4602      	mov	r2, r0
 801e006:	b110      	cbz	r0, 801e00e <rcl_get_default_domain_id+0x1e>
 801e008:	2001      	movs	r0, #1
 801e00a:	b003      	add	sp, #12
 801e00c:	bd30      	pop	{r4, r5, pc}
 801e00e:	9b00      	ldr	r3, [sp, #0]
 801e010:	b18b      	cbz	r3, 801e036 <rcl_get_default_domain_id+0x46>
 801e012:	7818      	ldrb	r0, [r3, #0]
 801e014:	2800      	cmp	r0, #0
 801e016:	d0f8      	beq.n	801e00a <rcl_get_default_domain_id+0x1a>
 801e018:	a901      	add	r1, sp, #4
 801e01a:	4618      	mov	r0, r3
 801e01c:	9201      	str	r2, [sp, #4]
 801e01e:	f000 fc8f 	bl	801e940 <strtoul>
 801e022:	4605      	mov	r5, r0
 801e024:	b150      	cbz	r0, 801e03c <rcl_get_default_domain_id+0x4c>
 801e026:	1c43      	adds	r3, r0, #1
 801e028:	d00d      	beq.n	801e046 <rcl_get_default_domain_id+0x56>
 801e02a:	2000      	movs	r0, #0
 801e02c:	6025      	str	r5, [r4, #0]
 801e02e:	e7ec      	b.n	801e00a <rcl_get_default_domain_id+0x1a>
 801e030:	200b      	movs	r0, #11
 801e032:	b003      	add	sp, #12
 801e034:	bd30      	pop	{r4, r5, pc}
 801e036:	4618      	mov	r0, r3
 801e038:	b003      	add	sp, #12
 801e03a:	bd30      	pop	{r4, r5, pc}
 801e03c:	9b01      	ldr	r3, [sp, #4]
 801e03e:	781b      	ldrb	r3, [r3, #0]
 801e040:	2b00      	cmp	r3, #0
 801e042:	d0f2      	beq.n	801e02a <rcl_get_default_domain_id+0x3a>
 801e044:	e7e0      	b.n	801e008 <rcl_get_default_domain_id+0x18>
 801e046:	f001 ff25 	bl	801fe94 <__errno>
 801e04a:	6803      	ldr	r3, [r0, #0]
 801e04c:	2b22      	cmp	r3, #34	; 0x22
 801e04e:	d1ec      	bne.n	801e02a <rcl_get_default_domain_id+0x3a>
 801e050:	e7da      	b.n	801e008 <rcl_get_default_domain_id+0x18>
 801e052:	bf00      	nop
 801e054:	08024a38 	.word	0x08024a38

0801e058 <rcl_expand_topic_name>:
 801e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e05c:	b08d      	sub	sp, #52	; 0x34
 801e05e:	4698      	mov	r8, r3
 801e060:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e062:	9207      	str	r2, [sp, #28]
 801e064:	2b00      	cmp	r3, #0
 801e066:	bf18      	it	ne
 801e068:	f1b8 0f00 	cmpne.w	r8, #0
 801e06c:	bf0c      	ite	eq
 801e06e:	2301      	moveq	r3, #1
 801e070:	2300      	movne	r3, #0
 801e072:	2a00      	cmp	r2, #0
 801e074:	bf08      	it	eq
 801e076:	f043 0301 	orreq.w	r3, r3, #1
 801e07a:	2900      	cmp	r1, #0
 801e07c:	bf08      	it	eq
 801e07e:	f043 0301 	orreq.w	r3, r3, #1
 801e082:	2b00      	cmp	r3, #0
 801e084:	d13d      	bne.n	801e102 <rcl_expand_topic_name+0xaa>
 801e086:	fab0 f280 	clz	r2, r0
 801e08a:	4604      	mov	r4, r0
 801e08c:	0952      	lsrs	r2, r2, #5
 801e08e:	2800      	cmp	r0, #0
 801e090:	d037      	beq.n	801e102 <rcl_expand_topic_name+0xaa>
 801e092:	460f      	mov	r7, r1
 801e094:	a90b      	add	r1, sp, #44	; 0x2c
 801e096:	f000 f945 	bl	801e324 <rcl_validate_topic_name>
 801e09a:	4605      	mov	r5, r0
 801e09c:	bb68      	cbnz	r0, 801e0fa <rcl_expand_topic_name+0xa2>
 801e09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0a0:	2b00      	cmp	r3, #0
 801e0a2:	d137      	bne.n	801e114 <rcl_expand_topic_name+0xbc>
 801e0a4:	4602      	mov	r2, r0
 801e0a6:	a90b      	add	r1, sp, #44	; 0x2c
 801e0a8:	4638      	mov	r0, r7
 801e0aa:	f7f6 fa97 	bl	80145dc <rmw_validate_node_name>
 801e0ae:	bb68      	cbnz	r0, 801e10c <rcl_expand_topic_name+0xb4>
 801e0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d133      	bne.n	801e11e <rcl_expand_topic_name+0xc6>
 801e0b6:	462a      	mov	r2, r5
 801e0b8:	a90b      	add	r1, sp, #44	; 0x2c
 801e0ba:	9807      	ldr	r0, [sp, #28]
 801e0bc:	f7f6 fa70 	bl	80145a0 <rmw_validate_namespace>
 801e0c0:	bb20      	cbnz	r0, 801e10c <rcl_expand_topic_name+0xb4>
 801e0c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e0c4:	2d00      	cmp	r5, #0
 801e0c6:	f040 80a2 	bne.w	801e20e <rcl_expand_topic_name+0x1b6>
 801e0ca:	217b      	movs	r1, #123	; 0x7b
 801e0cc:	4620      	mov	r0, r4
 801e0ce:	f001 fe51 	bl	801fd74 <strchr>
 801e0d2:	7823      	ldrb	r3, [r4, #0]
 801e0d4:	4681      	mov	r9, r0
 801e0d6:	bb20      	cbnz	r0, 801e122 <rcl_expand_topic_name+0xca>
 801e0d8:	2b2f      	cmp	r3, #47	; 0x2f
 801e0da:	d122      	bne.n	801e122 <rcl_expand_topic_name+0xca>
 801e0dc:	ab19      	add	r3, sp, #100	; 0x64
 801e0de:	e893 0003 	ldmia.w	r3, {r0, r1}
 801e0e2:	ab16      	add	r3, sp, #88	; 0x58
 801e0e4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801e0e8:	4620      	mov	r0, r4
 801e0ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e0ec:	f7f6 f93a 	bl	8014364 <rcutils_strdup>
 801e0f0:	2800      	cmp	r0, #0
 801e0f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e0f4:	bf08      	it	eq
 801e0f6:	250a      	moveq	r5, #10
 801e0f8:	6018      	str	r0, [r3, #0]
 801e0fa:	4628      	mov	r0, r5
 801e0fc:	b00d      	add	sp, #52	; 0x34
 801e0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e102:	250b      	movs	r5, #11
 801e104:	4628      	mov	r0, r5
 801e106:	b00d      	add	sp, #52	; 0x34
 801e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e10c:	f7fc f97a 	bl	801a404 <rcl_convert_rmw_ret_to_rcl_ret>
 801e110:	4605      	mov	r5, r0
 801e112:	e7f2      	b.n	801e0fa <rcl_expand_topic_name+0xa2>
 801e114:	2567      	movs	r5, #103	; 0x67
 801e116:	4628      	mov	r0, r5
 801e118:	b00d      	add	sp, #52	; 0x34
 801e11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e11e:	25c9      	movs	r5, #201	; 0xc9
 801e120:	e7eb      	b.n	801e0fa <rcl_expand_topic_name+0xa2>
 801e122:	2b7e      	cmp	r3, #126	; 0x7e
 801e124:	d075      	beq.n	801e212 <rcl_expand_topic_name+0x1ba>
 801e126:	f1b9 0f00 	cmp.w	r9, #0
 801e12a:	f000 80c2 	beq.w	801e2b2 <rcl_expand_topic_name+0x25a>
 801e12e:	2300      	movs	r3, #0
 801e130:	46a2      	mov	sl, r4
 801e132:	461e      	mov	r6, r3
 801e134:	9508      	str	r5, [sp, #32]
 801e136:	4655      	mov	r5, sl
 801e138:	9409      	str	r4, [sp, #36]	; 0x24
 801e13a:	46b2      	mov	sl, r6
 801e13c:	464c      	mov	r4, r9
 801e13e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e142:	2c00      	cmp	r4, #0
 801e144:	f000 80ae 	beq.w	801e2a4 <rcl_expand_topic_name+0x24c>
 801e148:	217d      	movs	r1, #125	; 0x7d
 801e14a:	4628      	mov	r0, r5
 801e14c:	f001 fe12 	bl	801fd74 <strchr>
 801e150:	eba0 0904 	sub.w	r9, r0, r4
 801e154:	4621      	mov	r1, r4
 801e156:	4869      	ldr	r0, [pc, #420]	; (801e2fc <rcl_expand_topic_name+0x2a4>)
 801e158:	f109 0601 	add.w	r6, r9, #1
 801e15c:	4632      	mov	r2, r6
 801e15e:	f001 fe16 	bl	801fd8e <strncmp>
 801e162:	2800      	cmp	r0, #0
 801e164:	d051      	beq.n	801e20a <rcl_expand_topic_name+0x1b2>
 801e166:	4632      	mov	r2, r6
 801e168:	4621      	mov	r1, r4
 801e16a:	4865      	ldr	r0, [pc, #404]	; (801e300 <rcl_expand_topic_name+0x2a8>)
 801e16c:	f001 fe0f 	bl	801fd8e <strncmp>
 801e170:	b128      	cbz	r0, 801e17e <rcl_expand_topic_name+0x126>
 801e172:	4632      	mov	r2, r6
 801e174:	4621      	mov	r1, r4
 801e176:	4863      	ldr	r0, [pc, #396]	; (801e304 <rcl_expand_topic_name+0x2ac>)
 801e178:	f001 fe09 	bl	801fd8e <strncmp>
 801e17c:	bb38      	cbnz	r0, 801e1ce <rcl_expand_topic_name+0x176>
 801e17e:	46d9      	mov	r9, fp
 801e180:	ab18      	add	r3, sp, #96	; 0x60
 801e182:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e186:	ab16      	add	r3, sp, #88	; 0x58
 801e188:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801e18c:	4620      	mov	r0, r4
 801e18e:	4631      	mov	r1, r6
 801e190:	cb0c      	ldmia	r3, {r2, r3}
 801e192:	f7f6 f909 	bl	80143a8 <rcutils_strndup>
 801e196:	4604      	mov	r4, r0
 801e198:	2800      	cmp	r0, #0
 801e19a:	f000 80a3 	beq.w	801e2e4 <rcl_expand_topic_name+0x28c>
 801e19e:	464a      	mov	r2, r9
 801e1a0:	4628      	mov	r0, r5
 801e1a2:	ab16      	add	r3, sp, #88	; 0x58
 801e1a4:	4621      	mov	r1, r4
 801e1a6:	f7f5 ffdd 	bl	8014164 <rcutils_repl_str>
 801e1aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e1ac:	4605      	mov	r5, r0
 801e1ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e1b0:	4620      	mov	r0, r4
 801e1b2:	4798      	blx	r3
 801e1b4:	4650      	mov	r0, sl
 801e1b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e1b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e1ba:	4798      	blx	r3
 801e1bc:	2d00      	cmp	r5, #0
 801e1be:	d06c      	beq.n	801e29a <rcl_expand_topic_name+0x242>
 801e1c0:	217b      	movs	r1, #123	; 0x7b
 801e1c2:	4628      	mov	r0, r5
 801e1c4:	f001 fdd6 	bl	801fd74 <strchr>
 801e1c8:	46aa      	mov	sl, r5
 801e1ca:	4604      	mov	r4, r0
 801e1cc:	e7b9      	b.n	801e142 <rcl_expand_topic_name+0xea>
 801e1ce:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801e1d2:	1c61      	adds	r1, r4, #1
 801e1d4:	4640      	mov	r0, r8
 801e1d6:	f7fe fca5 	bl	801cb24 <rcutils_string_map_getn>
 801e1da:	4681      	mov	r9, r0
 801e1dc:	2800      	cmp	r0, #0
 801e1de:	d1cf      	bne.n	801e180 <rcl_expand_topic_name+0x128>
 801e1e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e1e2:	aa18      	add	r2, sp, #96	; 0x60
 801e1e4:	2569      	movs	r5, #105	; 0x69
 801e1e6:	6018      	str	r0, [r3, #0]
 801e1e8:	ab16      	add	r3, sp, #88	; 0x58
 801e1ea:	ca07      	ldmia	r2, {r0, r1, r2}
 801e1ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801e1f0:	4631      	mov	r1, r6
 801e1f2:	4620      	mov	r0, r4
 801e1f4:	cb0c      	ldmia	r3, {r2, r3}
 801e1f6:	f7f6 f8d7 	bl	80143a8 <rcutils_strndup>
 801e1fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e1fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e1fe:	4798      	blx	r3
 801e200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e202:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e204:	4650      	mov	r0, sl
 801e206:	4798      	blx	r3
 801e208:	e777      	b.n	801e0fa <rcl_expand_topic_name+0xa2>
 801e20a:	46b9      	mov	r9, r7
 801e20c:	e7b8      	b.n	801e180 <rcl_expand_topic_name+0x128>
 801e20e:	25ca      	movs	r5, #202	; 0xca
 801e210:	e773      	b.n	801e0fa <rcl_expand_topic_name+0xa2>
 801e212:	9e07      	ldr	r6, [sp, #28]
 801e214:	4630      	mov	r0, r6
 801e216:	f7e2 f873 	bl	8000300 <strlen>
 801e21a:	4a3b      	ldr	r2, [pc, #236]	; (801e308 <rcl_expand_topic_name+0x2b0>)
 801e21c:	4b3b      	ldr	r3, [pc, #236]	; (801e30c <rcl_expand_topic_name+0x2b4>)
 801e21e:	9603      	str	r6, [sp, #12]
 801e220:	2801      	cmp	r0, #1
 801e222:	bf18      	it	ne
 801e224:	4613      	movne	r3, r2
 801e226:	9704      	str	r7, [sp, #16]
 801e228:	9302      	str	r3, [sp, #8]
 801e22a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e22c:	9300      	str	r3, [sp, #0]
 801e22e:	1c63      	adds	r3, r4, #1
 801e230:	9305      	str	r3, [sp, #20]
 801e232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e236:	9301      	str	r3, [sp, #4]
 801e238:	ab16      	add	r3, sp, #88	; 0x58
 801e23a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e23c:	f7f5 ff58 	bl	80140f0 <rcutils_format_string_limit>
 801e240:	4606      	mov	r6, r0
 801e242:	b350      	cbz	r0, 801e29a <rcl_expand_topic_name+0x242>
 801e244:	f1b9 0f00 	cmp.w	r9, #0
 801e248:	d005      	beq.n	801e256 <rcl_expand_topic_name+0x1fe>
 801e24a:	217b      	movs	r1, #123	; 0x7b
 801e24c:	46b2      	mov	sl, r6
 801e24e:	f001 fd91 	bl	801fd74 <strchr>
 801e252:	4681      	mov	r9, r0
 801e254:	e76e      	b.n	801e134 <rcl_expand_topic_name+0xdc>
 801e256:	7833      	ldrb	r3, [r6, #0]
 801e258:	2b2f      	cmp	r3, #47	; 0x2f
 801e25a:	d01b      	beq.n	801e294 <rcl_expand_topic_name+0x23c>
 801e25c:	9c07      	ldr	r4, [sp, #28]
 801e25e:	4620      	mov	r0, r4
 801e260:	f7e2 f84e 	bl	8000300 <strlen>
 801e264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e268:	4a29      	ldr	r2, [pc, #164]	; (801e310 <rcl_expand_topic_name+0x2b8>)
 801e26a:	9301      	str	r3, [sp, #4]
 801e26c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e26e:	9604      	str	r6, [sp, #16]
 801e270:	9300      	str	r3, [sp, #0]
 801e272:	4b28      	ldr	r3, [pc, #160]	; (801e314 <rcl_expand_topic_name+0x2bc>)
 801e274:	9403      	str	r4, [sp, #12]
 801e276:	2801      	cmp	r0, #1
 801e278:	bf18      	it	ne
 801e27a:	4613      	movne	r3, r2
 801e27c:	9302      	str	r3, [sp, #8]
 801e27e:	ab16      	add	r3, sp, #88	; 0x58
 801e280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e282:	f7f5 ff35 	bl	80140f0 <rcutils_format_string_limit>
 801e286:	4603      	mov	r3, r0
 801e288:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e28a:	4630      	mov	r0, r6
 801e28c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e28e:	461e      	mov	r6, r3
 801e290:	4790      	blx	r2
 801e292:	b116      	cbz	r6, 801e29a <rcl_expand_topic_name+0x242>
 801e294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e296:	601e      	str	r6, [r3, #0]
 801e298:	e72f      	b.n	801e0fa <rcl_expand_topic_name+0xa2>
 801e29a:	2300      	movs	r3, #0
 801e29c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e29e:	250a      	movs	r5, #10
 801e2a0:	6013      	str	r3, [r2, #0]
 801e2a2:	e72a      	b.n	801e0fa <rcl_expand_topic_name+0xa2>
 801e2a4:	4653      	mov	r3, sl
 801e2a6:	4656      	mov	r6, sl
 801e2a8:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d1d2      	bne.n	801e256 <rcl_expand_topic_name+0x1fe>
 801e2b0:	7823      	ldrb	r3, [r4, #0]
 801e2b2:	2b2f      	cmp	r3, #47	; 0x2f
 801e2b4:	d01e      	beq.n	801e2f4 <rcl_expand_topic_name+0x29c>
 801e2b6:	9e07      	ldr	r6, [sp, #28]
 801e2b8:	4630      	mov	r0, r6
 801e2ba:	f7e2 f821 	bl	8000300 <strlen>
 801e2be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e2c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e2c4:	9603      	str	r6, [sp, #12]
 801e2c6:	9404      	str	r4, [sp, #16]
 801e2c8:	e9cd 2300 	strd	r2, r3, [sp]
 801e2cc:	4a10      	ldr	r2, [pc, #64]	; (801e310 <rcl_expand_topic_name+0x2b8>)
 801e2ce:	4b11      	ldr	r3, [pc, #68]	; (801e314 <rcl_expand_topic_name+0x2bc>)
 801e2d0:	2801      	cmp	r0, #1
 801e2d2:	bf18      	it	ne
 801e2d4:	4613      	movne	r3, r2
 801e2d6:	9302      	str	r3, [sp, #8]
 801e2d8:	ab16      	add	r3, sp, #88	; 0x58
 801e2da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e2dc:	f7f5 ff08 	bl	80140f0 <rcutils_format_string_limit>
 801e2e0:	4606      	mov	r6, r0
 801e2e2:	e7d6      	b.n	801e292 <rcl_expand_topic_name+0x23a>
 801e2e4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801e2e8:	4650      	mov	r0, sl
 801e2ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e2ec:	6014      	str	r4, [r2, #0]
 801e2ee:	250a      	movs	r5, #10
 801e2f0:	4798      	blx	r3
 801e2f2:	e702      	b.n	801e0fa <rcl_expand_topic_name+0xa2>
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	461e      	mov	r6, r3
 801e2f8:	e7cc      	b.n	801e294 <rcl_expand_topic_name+0x23c>
 801e2fa:	bf00      	nop
 801e2fc:	08024a50 	.word	0x08024a50
 801e300:	08024a58 	.word	0x08024a58
 801e304:	08024a60 	.word	0x08024a60
 801e308:	08024a48 	.word	0x08024a48
 801e30c:	080243d0 	.word	0x080243d0
 801e310:	08023dd0 	.word	0x08023dd0
 801e314:	08023dc8 	.word	0x08023dc8

0801e318 <rcl_get_default_topic_name_substitutions>:
 801e318:	2800      	cmp	r0, #0
 801e31a:	bf0c      	ite	eq
 801e31c:	200b      	moveq	r0, #11
 801e31e:	2000      	movne	r0, #0
 801e320:	4770      	bx	lr
 801e322:	bf00      	nop

0801e324 <rcl_validate_topic_name>:
 801e324:	2800      	cmp	r0, #0
 801e326:	f000 8089 	beq.w	801e43c <rcl_validate_topic_name+0x118>
 801e32a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e32e:	460e      	mov	r6, r1
 801e330:	2900      	cmp	r1, #0
 801e332:	f000 8085 	beq.w	801e440 <rcl_validate_topic_name+0x11c>
 801e336:	4604      	mov	r4, r0
 801e338:	4617      	mov	r7, r2
 801e33a:	f7e1 ffe1 	bl	8000300 <strlen>
 801e33e:	b1b0      	cbz	r0, 801e36e <rcl_validate_topic_name+0x4a>
 801e340:	f894 e000 	ldrb.w	lr, [r4]
 801e344:	f8df c160 	ldr.w	ip, [pc, #352]	; 801e4a8 <rcl_validate_topic_name+0x184>
 801e348:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801e34c:	f013 0304 	ands.w	r3, r3, #4
 801e350:	d139      	bne.n	801e3c6 <rcl_validate_topic_name+0xa2>
 801e352:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801e356:	f814 2008 	ldrb.w	r2, [r4, r8]
 801e35a:	2a2f      	cmp	r2, #47	; 0x2f
 801e35c:	d10f      	bne.n	801e37e <rcl_validate_topic_name+0x5a>
 801e35e:	2202      	movs	r2, #2
 801e360:	6032      	str	r2, [r6, #0]
 801e362:	b3a7      	cbz	r7, 801e3ce <rcl_validate_topic_name+0xaa>
 801e364:	4618      	mov	r0, r3
 801e366:	f8c7 8000 	str.w	r8, [r7]
 801e36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e36e:	2301      	movs	r3, #1
 801e370:	6033      	str	r3, [r6, #0]
 801e372:	b367      	cbz	r7, 801e3ce <rcl_validate_topic_name+0xaa>
 801e374:	2300      	movs	r3, #0
 801e376:	4618      	mov	r0, r3
 801e378:	603b      	str	r3, [r7, #0]
 801e37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e37e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801e382:	461d      	mov	r5, r3
 801e384:	4619      	mov	r1, r3
 801e386:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801e38a:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801e38e:	f1b9 0f09 	cmp.w	r9, #9
 801e392:	d91f      	bls.n	801e3d4 <rcl_validate_topic_name+0xb0>
 801e394:	f022 0920 	bic.w	r9, r2, #32
 801e398:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801e39c:	f1b9 0f19 	cmp.w	r9, #25
 801e3a0:	d918      	bls.n	801e3d4 <rcl_validate_topic_name+0xb0>
 801e3a2:	2a5f      	cmp	r2, #95	; 0x5f
 801e3a4:	d024      	beq.n	801e3f0 <rcl_validate_topic_name+0xcc>
 801e3a6:	2a2f      	cmp	r2, #47	; 0x2f
 801e3a8:	d058      	beq.n	801e45c <rcl_validate_topic_name+0x138>
 801e3aa:	2a7e      	cmp	r2, #126	; 0x7e
 801e3ac:	d04a      	beq.n	801e444 <rcl_validate_topic_name+0x120>
 801e3ae:	2a7b      	cmp	r2, #123	; 0x7b
 801e3b0:	d05b      	beq.n	801e46a <rcl_validate_topic_name+0x146>
 801e3b2:	2a7d      	cmp	r2, #125	; 0x7d
 801e3b4:	d169      	bne.n	801e48a <rcl_validate_topic_name+0x166>
 801e3b6:	2d00      	cmp	r5, #0
 801e3b8:	d15c      	bne.n	801e474 <rcl_validate_topic_name+0x150>
 801e3ba:	2305      	movs	r3, #5
 801e3bc:	6033      	str	r3, [r6, #0]
 801e3be:	b137      	cbz	r7, 801e3ce <rcl_validate_topic_name+0xaa>
 801e3c0:	2000      	movs	r0, #0
 801e3c2:	6039      	str	r1, [r7, #0]
 801e3c4:	e7d9      	b.n	801e37a <rcl_validate_topic_name+0x56>
 801e3c6:	2304      	movs	r3, #4
 801e3c8:	6033      	str	r3, [r6, #0]
 801e3ca:	2f00      	cmp	r7, #0
 801e3cc:	d1d2      	bne.n	801e374 <rcl_validate_topic_name+0x50>
 801e3ce:	2000      	movs	r0, #0
 801e3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3d4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e3d8:	0752      	lsls	r2, r2, #29
 801e3da:	d509      	bpl.n	801e3f0 <rcl_validate_topic_name+0xcc>
 801e3dc:	2900      	cmp	r1, #0
 801e3de:	bf0c      	ite	eq
 801e3e0:	2200      	moveq	r2, #0
 801e3e2:	f005 0201 	andne.w	r2, r5, #1
 801e3e6:	b11a      	cbz	r2, 801e3f0 <rcl_validate_topic_name+0xcc>
 801e3e8:	1e4d      	subs	r5, r1, #1
 801e3ea:	429d      	cmp	r5, r3
 801e3ec:	d031      	beq.n	801e452 <rcl_validate_topic_name+0x12e>
 801e3ee:	4615      	mov	r5, r2
 801e3f0:	3101      	adds	r1, #1
 801e3f2:	4288      	cmp	r0, r1
 801e3f4:	d1c7      	bne.n	801e386 <rcl_validate_topic_name+0x62>
 801e3f6:	2d00      	cmp	r5, #0
 801e3f8:	d142      	bne.n	801e480 <rcl_validate_topic_name+0x15c>
 801e3fa:	4628      	mov	r0, r5
 801e3fc:	2301      	movs	r3, #1
 801e3fe:	e00c      	b.n	801e41a <rcl_validate_topic_name+0xf6>
 801e400:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801e404:	d101      	bne.n	801e40a <rcl_validate_topic_name+0xe6>
 801e406:	2801      	cmp	r0, #1
 801e408:	d047      	beq.n	801e49a <rcl_validate_topic_name+0x176>
 801e40a:	1c5a      	adds	r2, r3, #1
 801e40c:	428b      	cmp	r3, r1
 801e40e:	f100 0001 	add.w	r0, r0, #1
 801e412:	f104 0401 	add.w	r4, r4, #1
 801e416:	4613      	mov	r3, r2
 801e418:	d22e      	bcs.n	801e478 <rcl_validate_topic_name+0x154>
 801e41a:	4580      	cmp	r8, r0
 801e41c:	d0f5      	beq.n	801e40a <rcl_validate_topic_name+0xe6>
 801e41e:	7822      	ldrb	r2, [r4, #0]
 801e420:	2a2f      	cmp	r2, #47	; 0x2f
 801e422:	d1ed      	bne.n	801e400 <rcl_validate_topic_name+0xdc>
 801e424:	7862      	ldrb	r2, [r4, #1]
 801e426:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e42a:	0752      	lsls	r2, r2, #29
 801e42c:	d5ed      	bpl.n	801e40a <rcl_validate_topic_name+0xe6>
 801e42e:	2204      	movs	r2, #4
 801e430:	6032      	str	r2, [r6, #0]
 801e432:	2f00      	cmp	r7, #0
 801e434:	d0cb      	beq.n	801e3ce <rcl_validate_topic_name+0xaa>
 801e436:	2000      	movs	r0, #0
 801e438:	603b      	str	r3, [r7, #0]
 801e43a:	e79e      	b.n	801e37a <rcl_validate_topic_name+0x56>
 801e43c:	200b      	movs	r0, #11
 801e43e:	4770      	bx	lr
 801e440:	200b      	movs	r0, #11
 801e442:	e79a      	b.n	801e37a <rcl_validate_topic_name+0x56>
 801e444:	2900      	cmp	r1, #0
 801e446:	d0d3      	beq.n	801e3f0 <rcl_validate_topic_name+0xcc>
 801e448:	2306      	movs	r3, #6
 801e44a:	6033      	str	r3, [r6, #0]
 801e44c:	2f00      	cmp	r7, #0
 801e44e:	d1b7      	bne.n	801e3c0 <rcl_validate_topic_name+0x9c>
 801e450:	e7bd      	b.n	801e3ce <rcl_validate_topic_name+0xaa>
 801e452:	2309      	movs	r3, #9
 801e454:	6033      	str	r3, [r6, #0]
 801e456:	2f00      	cmp	r7, #0
 801e458:	d1b2      	bne.n	801e3c0 <rcl_validate_topic_name+0x9c>
 801e45a:	e7b8      	b.n	801e3ce <rcl_validate_topic_name+0xaa>
 801e45c:	2d00      	cmp	r5, #0
 801e45e:	d0c7      	beq.n	801e3f0 <rcl_validate_topic_name+0xcc>
 801e460:	2308      	movs	r3, #8
 801e462:	6033      	str	r3, [r6, #0]
 801e464:	2f00      	cmp	r7, #0
 801e466:	d1ab      	bne.n	801e3c0 <rcl_validate_topic_name+0x9c>
 801e468:	e7b1      	b.n	801e3ce <rcl_validate_topic_name+0xaa>
 801e46a:	2d00      	cmp	r5, #0
 801e46c:	d1f8      	bne.n	801e460 <rcl_validate_topic_name+0x13c>
 801e46e:	460b      	mov	r3, r1
 801e470:	2501      	movs	r5, #1
 801e472:	e7bd      	b.n	801e3f0 <rcl_validate_topic_name+0xcc>
 801e474:	2500      	movs	r5, #0
 801e476:	e7bb      	b.n	801e3f0 <rcl_validate_topic_name+0xcc>
 801e478:	2300      	movs	r3, #0
 801e47a:	4618      	mov	r0, r3
 801e47c:	6033      	str	r3, [r6, #0]
 801e47e:	e77c      	b.n	801e37a <rcl_validate_topic_name+0x56>
 801e480:	2205      	movs	r2, #5
 801e482:	6032      	str	r2, [r6, #0]
 801e484:	2f00      	cmp	r7, #0
 801e486:	d1d6      	bne.n	801e436 <rcl_validate_topic_name+0x112>
 801e488:	e7a1      	b.n	801e3ce <rcl_validate_topic_name+0xaa>
 801e48a:	2d00      	cmp	r5, #0
 801e48c:	bf14      	ite	ne
 801e48e:	2308      	movne	r3, #8
 801e490:	2303      	moveq	r3, #3
 801e492:	6033      	str	r3, [r6, #0]
 801e494:	2f00      	cmp	r7, #0
 801e496:	d193      	bne.n	801e3c0 <rcl_validate_topic_name+0x9c>
 801e498:	e799      	b.n	801e3ce <rcl_validate_topic_name+0xaa>
 801e49a:	2307      	movs	r3, #7
 801e49c:	6033      	str	r3, [r6, #0]
 801e49e:	2f00      	cmp	r7, #0
 801e4a0:	d095      	beq.n	801e3ce <rcl_validate_topic_name+0xaa>
 801e4a2:	2301      	movs	r3, #1
 801e4a4:	e7c7      	b.n	801e436 <rcl_validate_topic_name+0x112>
 801e4a6:	bf00      	nop
 801e4a8:	08024adc 	.word	0x08024adc

0801e4ac <calloc>:
 801e4ac:	4b02      	ldr	r3, [pc, #8]	; (801e4b8 <calloc+0xc>)
 801e4ae:	460a      	mov	r2, r1
 801e4b0:	4601      	mov	r1, r0
 801e4b2:	6818      	ldr	r0, [r3, #0]
 801e4b4:	f000 b802 	b.w	801e4bc <_calloc_r>
 801e4b8:	200009a0 	.word	0x200009a0

0801e4bc <_calloc_r>:
 801e4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e4be:	fba1 2402 	umull	r2, r4, r1, r2
 801e4c2:	b94c      	cbnz	r4, 801e4d8 <_calloc_r+0x1c>
 801e4c4:	4611      	mov	r1, r2
 801e4c6:	9201      	str	r2, [sp, #4]
 801e4c8:	f000 f898 	bl	801e5fc <_malloc_r>
 801e4cc:	9a01      	ldr	r2, [sp, #4]
 801e4ce:	4605      	mov	r5, r0
 801e4d0:	b930      	cbnz	r0, 801e4e0 <_calloc_r+0x24>
 801e4d2:	4628      	mov	r0, r5
 801e4d4:	b003      	add	sp, #12
 801e4d6:	bd30      	pop	{r4, r5, pc}
 801e4d8:	220c      	movs	r2, #12
 801e4da:	6002      	str	r2, [r0, #0]
 801e4dc:	2500      	movs	r5, #0
 801e4de:	e7f8      	b.n	801e4d2 <_calloc_r+0x16>
 801e4e0:	4621      	mov	r1, r4
 801e4e2:	f001 fc3f 	bl	801fd64 <memset>
 801e4e6:	e7f4      	b.n	801e4d2 <_calloc_r+0x16>

0801e4e8 <exit>:
 801e4e8:	b508      	push	{r3, lr}
 801e4ea:	4b06      	ldr	r3, [pc, #24]	; (801e504 <exit+0x1c>)
 801e4ec:	4604      	mov	r4, r0
 801e4ee:	b113      	cbz	r3, 801e4f6 <exit+0xe>
 801e4f0:	2100      	movs	r1, #0
 801e4f2:	f3af 8000 	nop.w
 801e4f6:	4b04      	ldr	r3, [pc, #16]	; (801e508 <exit+0x20>)
 801e4f8:	681b      	ldr	r3, [r3, #0]
 801e4fa:	b103      	cbz	r3, 801e4fe <exit+0x16>
 801e4fc:	4798      	blx	r3
 801e4fe:	4620      	mov	r0, r4
 801e500:	f7e4 fbbe 	bl	8002c80 <_exit>
 801e504:	00000000 	.word	0x00000000
 801e508:	20017064 	.word	0x20017064

0801e50c <getenv>:
 801e50c:	b507      	push	{r0, r1, r2, lr}
 801e50e:	4b04      	ldr	r3, [pc, #16]	; (801e520 <getenv+0x14>)
 801e510:	4601      	mov	r1, r0
 801e512:	aa01      	add	r2, sp, #4
 801e514:	6818      	ldr	r0, [r3, #0]
 801e516:	f000 f805 	bl	801e524 <_findenv_r>
 801e51a:	b003      	add	sp, #12
 801e51c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e520:	200009a0 	.word	0x200009a0

0801e524 <_findenv_r>:
 801e524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e528:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801e598 <_findenv_r+0x74>
 801e52c:	4607      	mov	r7, r0
 801e52e:	4689      	mov	r9, r1
 801e530:	4616      	mov	r6, r2
 801e532:	f002 fb0d 	bl	8020b50 <__env_lock>
 801e536:	f8da 4000 	ldr.w	r4, [sl]
 801e53a:	b134      	cbz	r4, 801e54a <_findenv_r+0x26>
 801e53c:	464b      	mov	r3, r9
 801e53e:	4698      	mov	r8, r3
 801e540:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e544:	b13a      	cbz	r2, 801e556 <_findenv_r+0x32>
 801e546:	2a3d      	cmp	r2, #61	; 0x3d
 801e548:	d1f9      	bne.n	801e53e <_findenv_r+0x1a>
 801e54a:	4638      	mov	r0, r7
 801e54c:	f002 fb06 	bl	8020b5c <__env_unlock>
 801e550:	2000      	movs	r0, #0
 801e552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e556:	eba8 0809 	sub.w	r8, r8, r9
 801e55a:	46a3      	mov	fp, r4
 801e55c:	f854 0b04 	ldr.w	r0, [r4], #4
 801e560:	2800      	cmp	r0, #0
 801e562:	d0f2      	beq.n	801e54a <_findenv_r+0x26>
 801e564:	4642      	mov	r2, r8
 801e566:	4649      	mov	r1, r9
 801e568:	f001 fc11 	bl	801fd8e <strncmp>
 801e56c:	2800      	cmp	r0, #0
 801e56e:	d1f4      	bne.n	801e55a <_findenv_r+0x36>
 801e570:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801e574:	eb03 0508 	add.w	r5, r3, r8
 801e578:	f813 3008 	ldrb.w	r3, [r3, r8]
 801e57c:	2b3d      	cmp	r3, #61	; 0x3d
 801e57e:	d1ec      	bne.n	801e55a <_findenv_r+0x36>
 801e580:	f8da 3000 	ldr.w	r3, [sl]
 801e584:	ebab 0303 	sub.w	r3, fp, r3
 801e588:	109b      	asrs	r3, r3, #2
 801e58a:	4638      	mov	r0, r7
 801e58c:	6033      	str	r3, [r6, #0]
 801e58e:	f002 fae5 	bl	8020b5c <__env_unlock>
 801e592:	1c68      	adds	r0, r5, #1
 801e594:	e7dd      	b.n	801e552 <_findenv_r+0x2e>
 801e596:	bf00      	nop
 801e598:	20000004 	.word	0x20000004

0801e59c <malloc>:
 801e59c:	4b02      	ldr	r3, [pc, #8]	; (801e5a8 <malloc+0xc>)
 801e59e:	4601      	mov	r1, r0
 801e5a0:	6818      	ldr	r0, [r3, #0]
 801e5a2:	f000 b82b 	b.w	801e5fc <_malloc_r>
 801e5a6:	bf00      	nop
 801e5a8:	200009a0 	.word	0x200009a0

0801e5ac <free>:
 801e5ac:	4b02      	ldr	r3, [pc, #8]	; (801e5b8 <free+0xc>)
 801e5ae:	4601      	mov	r1, r0
 801e5b0:	6818      	ldr	r0, [r3, #0]
 801e5b2:	f002 bad9 	b.w	8020b68 <_free_r>
 801e5b6:	bf00      	nop
 801e5b8:	200009a0 	.word	0x200009a0

0801e5bc <sbrk_aligned>:
 801e5bc:	b570      	push	{r4, r5, r6, lr}
 801e5be:	4e0e      	ldr	r6, [pc, #56]	; (801e5f8 <sbrk_aligned+0x3c>)
 801e5c0:	460c      	mov	r4, r1
 801e5c2:	6831      	ldr	r1, [r6, #0]
 801e5c4:	4605      	mov	r5, r0
 801e5c6:	b911      	cbnz	r1, 801e5ce <sbrk_aligned+0x12>
 801e5c8:	f001 fc42 	bl	801fe50 <_sbrk_r>
 801e5cc:	6030      	str	r0, [r6, #0]
 801e5ce:	4621      	mov	r1, r4
 801e5d0:	4628      	mov	r0, r5
 801e5d2:	f001 fc3d 	bl	801fe50 <_sbrk_r>
 801e5d6:	1c43      	adds	r3, r0, #1
 801e5d8:	d00a      	beq.n	801e5f0 <sbrk_aligned+0x34>
 801e5da:	1cc4      	adds	r4, r0, #3
 801e5dc:	f024 0403 	bic.w	r4, r4, #3
 801e5e0:	42a0      	cmp	r0, r4
 801e5e2:	d007      	beq.n	801e5f4 <sbrk_aligned+0x38>
 801e5e4:	1a21      	subs	r1, r4, r0
 801e5e6:	4628      	mov	r0, r5
 801e5e8:	f001 fc32 	bl	801fe50 <_sbrk_r>
 801e5ec:	3001      	adds	r0, #1
 801e5ee:	d101      	bne.n	801e5f4 <sbrk_aligned+0x38>
 801e5f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	bd70      	pop	{r4, r5, r6, pc}
 801e5f8:	20016f28 	.word	0x20016f28

0801e5fc <_malloc_r>:
 801e5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e600:	1ccd      	adds	r5, r1, #3
 801e602:	f025 0503 	bic.w	r5, r5, #3
 801e606:	3508      	adds	r5, #8
 801e608:	2d0c      	cmp	r5, #12
 801e60a:	bf38      	it	cc
 801e60c:	250c      	movcc	r5, #12
 801e60e:	2d00      	cmp	r5, #0
 801e610:	4607      	mov	r7, r0
 801e612:	db01      	blt.n	801e618 <_malloc_r+0x1c>
 801e614:	42a9      	cmp	r1, r5
 801e616:	d905      	bls.n	801e624 <_malloc_r+0x28>
 801e618:	230c      	movs	r3, #12
 801e61a:	603b      	str	r3, [r7, #0]
 801e61c:	2600      	movs	r6, #0
 801e61e:	4630      	mov	r0, r6
 801e620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e624:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801e6f8 <_malloc_r+0xfc>
 801e628:	f000 f868 	bl	801e6fc <__malloc_lock>
 801e62c:	f8d8 3000 	ldr.w	r3, [r8]
 801e630:	461c      	mov	r4, r3
 801e632:	bb5c      	cbnz	r4, 801e68c <_malloc_r+0x90>
 801e634:	4629      	mov	r1, r5
 801e636:	4638      	mov	r0, r7
 801e638:	f7ff ffc0 	bl	801e5bc <sbrk_aligned>
 801e63c:	1c43      	adds	r3, r0, #1
 801e63e:	4604      	mov	r4, r0
 801e640:	d155      	bne.n	801e6ee <_malloc_r+0xf2>
 801e642:	f8d8 4000 	ldr.w	r4, [r8]
 801e646:	4626      	mov	r6, r4
 801e648:	2e00      	cmp	r6, #0
 801e64a:	d145      	bne.n	801e6d8 <_malloc_r+0xdc>
 801e64c:	2c00      	cmp	r4, #0
 801e64e:	d048      	beq.n	801e6e2 <_malloc_r+0xe6>
 801e650:	6823      	ldr	r3, [r4, #0]
 801e652:	4631      	mov	r1, r6
 801e654:	4638      	mov	r0, r7
 801e656:	eb04 0903 	add.w	r9, r4, r3
 801e65a:	f001 fbf9 	bl	801fe50 <_sbrk_r>
 801e65e:	4581      	cmp	r9, r0
 801e660:	d13f      	bne.n	801e6e2 <_malloc_r+0xe6>
 801e662:	6821      	ldr	r1, [r4, #0]
 801e664:	1a6d      	subs	r5, r5, r1
 801e666:	4629      	mov	r1, r5
 801e668:	4638      	mov	r0, r7
 801e66a:	f7ff ffa7 	bl	801e5bc <sbrk_aligned>
 801e66e:	3001      	adds	r0, #1
 801e670:	d037      	beq.n	801e6e2 <_malloc_r+0xe6>
 801e672:	6823      	ldr	r3, [r4, #0]
 801e674:	442b      	add	r3, r5
 801e676:	6023      	str	r3, [r4, #0]
 801e678:	f8d8 3000 	ldr.w	r3, [r8]
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d038      	beq.n	801e6f2 <_malloc_r+0xf6>
 801e680:	685a      	ldr	r2, [r3, #4]
 801e682:	42a2      	cmp	r2, r4
 801e684:	d12b      	bne.n	801e6de <_malloc_r+0xe2>
 801e686:	2200      	movs	r2, #0
 801e688:	605a      	str	r2, [r3, #4]
 801e68a:	e00f      	b.n	801e6ac <_malloc_r+0xb0>
 801e68c:	6822      	ldr	r2, [r4, #0]
 801e68e:	1b52      	subs	r2, r2, r5
 801e690:	d41f      	bmi.n	801e6d2 <_malloc_r+0xd6>
 801e692:	2a0b      	cmp	r2, #11
 801e694:	d917      	bls.n	801e6c6 <_malloc_r+0xca>
 801e696:	1961      	adds	r1, r4, r5
 801e698:	42a3      	cmp	r3, r4
 801e69a:	6025      	str	r5, [r4, #0]
 801e69c:	bf18      	it	ne
 801e69e:	6059      	strne	r1, [r3, #4]
 801e6a0:	6863      	ldr	r3, [r4, #4]
 801e6a2:	bf08      	it	eq
 801e6a4:	f8c8 1000 	streq.w	r1, [r8]
 801e6a8:	5162      	str	r2, [r4, r5]
 801e6aa:	604b      	str	r3, [r1, #4]
 801e6ac:	4638      	mov	r0, r7
 801e6ae:	f104 060b 	add.w	r6, r4, #11
 801e6b2:	f000 f829 	bl	801e708 <__malloc_unlock>
 801e6b6:	f026 0607 	bic.w	r6, r6, #7
 801e6ba:	1d23      	adds	r3, r4, #4
 801e6bc:	1af2      	subs	r2, r6, r3
 801e6be:	d0ae      	beq.n	801e61e <_malloc_r+0x22>
 801e6c0:	1b9b      	subs	r3, r3, r6
 801e6c2:	50a3      	str	r3, [r4, r2]
 801e6c4:	e7ab      	b.n	801e61e <_malloc_r+0x22>
 801e6c6:	42a3      	cmp	r3, r4
 801e6c8:	6862      	ldr	r2, [r4, #4]
 801e6ca:	d1dd      	bne.n	801e688 <_malloc_r+0x8c>
 801e6cc:	f8c8 2000 	str.w	r2, [r8]
 801e6d0:	e7ec      	b.n	801e6ac <_malloc_r+0xb0>
 801e6d2:	4623      	mov	r3, r4
 801e6d4:	6864      	ldr	r4, [r4, #4]
 801e6d6:	e7ac      	b.n	801e632 <_malloc_r+0x36>
 801e6d8:	4634      	mov	r4, r6
 801e6da:	6876      	ldr	r6, [r6, #4]
 801e6dc:	e7b4      	b.n	801e648 <_malloc_r+0x4c>
 801e6de:	4613      	mov	r3, r2
 801e6e0:	e7cc      	b.n	801e67c <_malloc_r+0x80>
 801e6e2:	230c      	movs	r3, #12
 801e6e4:	603b      	str	r3, [r7, #0]
 801e6e6:	4638      	mov	r0, r7
 801e6e8:	f000 f80e 	bl	801e708 <__malloc_unlock>
 801e6ec:	e797      	b.n	801e61e <_malloc_r+0x22>
 801e6ee:	6025      	str	r5, [r4, #0]
 801e6f0:	e7dc      	b.n	801e6ac <_malloc_r+0xb0>
 801e6f2:	605b      	str	r3, [r3, #4]
 801e6f4:	deff      	udf	#255	; 0xff
 801e6f6:	bf00      	nop
 801e6f8:	20016f24 	.word	0x20016f24

0801e6fc <__malloc_lock>:
 801e6fc:	4801      	ldr	r0, [pc, #4]	; (801e704 <__malloc_lock+0x8>)
 801e6fe:	f001 bbf4 	b.w	801feea <__retarget_lock_acquire_recursive>
 801e702:	bf00      	nop
 801e704:	2001706d 	.word	0x2001706d

0801e708 <__malloc_unlock>:
 801e708:	4801      	ldr	r0, [pc, #4]	; (801e710 <__malloc_unlock+0x8>)
 801e70a:	f001 bbef 	b.w	801feec <__retarget_lock_release_recursive>
 801e70e:	bf00      	nop
 801e710:	2001706d 	.word	0x2001706d

0801e714 <srand>:
 801e714:	b538      	push	{r3, r4, r5, lr}
 801e716:	4b10      	ldr	r3, [pc, #64]	; (801e758 <srand+0x44>)
 801e718:	681d      	ldr	r5, [r3, #0]
 801e71a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801e71c:	4604      	mov	r4, r0
 801e71e:	b9b3      	cbnz	r3, 801e74e <srand+0x3a>
 801e720:	2018      	movs	r0, #24
 801e722:	f7ff ff3b 	bl	801e59c <malloc>
 801e726:	4602      	mov	r2, r0
 801e728:	6328      	str	r0, [r5, #48]	; 0x30
 801e72a:	b920      	cbnz	r0, 801e736 <srand+0x22>
 801e72c:	4b0b      	ldr	r3, [pc, #44]	; (801e75c <srand+0x48>)
 801e72e:	480c      	ldr	r0, [pc, #48]	; (801e760 <srand+0x4c>)
 801e730:	2146      	movs	r1, #70	; 0x46
 801e732:	f001 fbf9 	bl	801ff28 <__assert_func>
 801e736:	490b      	ldr	r1, [pc, #44]	; (801e764 <srand+0x50>)
 801e738:	4b0b      	ldr	r3, [pc, #44]	; (801e768 <srand+0x54>)
 801e73a:	e9c0 1300 	strd	r1, r3, [r0]
 801e73e:	4b0b      	ldr	r3, [pc, #44]	; (801e76c <srand+0x58>)
 801e740:	6083      	str	r3, [r0, #8]
 801e742:	230b      	movs	r3, #11
 801e744:	8183      	strh	r3, [r0, #12]
 801e746:	2100      	movs	r1, #0
 801e748:	2001      	movs	r0, #1
 801e74a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e74e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801e750:	2200      	movs	r2, #0
 801e752:	611c      	str	r4, [r3, #16]
 801e754:	615a      	str	r2, [r3, #20]
 801e756:	bd38      	pop	{r3, r4, r5, pc}
 801e758:	200009a0 	.word	0x200009a0
 801e75c:	08024a6c 	.word	0x08024a6c
 801e760:	08024a83 	.word	0x08024a83
 801e764:	abcd330e 	.word	0xabcd330e
 801e768:	e66d1234 	.word	0xe66d1234
 801e76c:	0005deec 	.word	0x0005deec

0801e770 <rand>:
 801e770:	4b16      	ldr	r3, [pc, #88]	; (801e7cc <rand+0x5c>)
 801e772:	b510      	push	{r4, lr}
 801e774:	681c      	ldr	r4, [r3, #0]
 801e776:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e778:	b9b3      	cbnz	r3, 801e7a8 <rand+0x38>
 801e77a:	2018      	movs	r0, #24
 801e77c:	f7ff ff0e 	bl	801e59c <malloc>
 801e780:	4602      	mov	r2, r0
 801e782:	6320      	str	r0, [r4, #48]	; 0x30
 801e784:	b920      	cbnz	r0, 801e790 <rand+0x20>
 801e786:	4b12      	ldr	r3, [pc, #72]	; (801e7d0 <rand+0x60>)
 801e788:	4812      	ldr	r0, [pc, #72]	; (801e7d4 <rand+0x64>)
 801e78a:	2152      	movs	r1, #82	; 0x52
 801e78c:	f001 fbcc 	bl	801ff28 <__assert_func>
 801e790:	4911      	ldr	r1, [pc, #68]	; (801e7d8 <rand+0x68>)
 801e792:	4b12      	ldr	r3, [pc, #72]	; (801e7dc <rand+0x6c>)
 801e794:	e9c0 1300 	strd	r1, r3, [r0]
 801e798:	4b11      	ldr	r3, [pc, #68]	; (801e7e0 <rand+0x70>)
 801e79a:	6083      	str	r3, [r0, #8]
 801e79c:	230b      	movs	r3, #11
 801e79e:	8183      	strh	r3, [r0, #12]
 801e7a0:	2100      	movs	r1, #0
 801e7a2:	2001      	movs	r0, #1
 801e7a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e7a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e7aa:	480e      	ldr	r0, [pc, #56]	; (801e7e4 <rand+0x74>)
 801e7ac:	690b      	ldr	r3, [r1, #16]
 801e7ae:	694c      	ldr	r4, [r1, #20]
 801e7b0:	4a0d      	ldr	r2, [pc, #52]	; (801e7e8 <rand+0x78>)
 801e7b2:	4358      	muls	r0, r3
 801e7b4:	fb02 0004 	mla	r0, r2, r4, r0
 801e7b8:	fba3 3202 	umull	r3, r2, r3, r2
 801e7bc:	3301      	adds	r3, #1
 801e7be:	eb40 0002 	adc.w	r0, r0, r2
 801e7c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801e7c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e7ca:	bd10      	pop	{r4, pc}
 801e7cc:	200009a0 	.word	0x200009a0
 801e7d0:	08024a6c 	.word	0x08024a6c
 801e7d4:	08024a83 	.word	0x08024a83
 801e7d8:	abcd330e 	.word	0xabcd330e
 801e7dc:	e66d1234 	.word	0xe66d1234
 801e7e0:	0005deec 	.word	0x0005deec
 801e7e4:	5851f42d 	.word	0x5851f42d
 801e7e8:	4c957f2d 	.word	0x4c957f2d

0801e7ec <realloc>:
 801e7ec:	4b02      	ldr	r3, [pc, #8]	; (801e7f8 <realloc+0xc>)
 801e7ee:	460a      	mov	r2, r1
 801e7f0:	4601      	mov	r1, r0
 801e7f2:	6818      	ldr	r0, [r3, #0]
 801e7f4:	f000 b802 	b.w	801e7fc <_realloc_r>
 801e7f8:	200009a0 	.word	0x200009a0

0801e7fc <_realloc_r>:
 801e7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e800:	4680      	mov	r8, r0
 801e802:	4614      	mov	r4, r2
 801e804:	460e      	mov	r6, r1
 801e806:	b921      	cbnz	r1, 801e812 <_realloc_r+0x16>
 801e808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e80c:	4611      	mov	r1, r2
 801e80e:	f7ff bef5 	b.w	801e5fc <_malloc_r>
 801e812:	b92a      	cbnz	r2, 801e820 <_realloc_r+0x24>
 801e814:	f002 f9a8 	bl	8020b68 <_free_r>
 801e818:	4625      	mov	r5, r4
 801e81a:	4628      	mov	r0, r5
 801e81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e820:	f002 fe98 	bl	8021554 <_malloc_usable_size_r>
 801e824:	4284      	cmp	r4, r0
 801e826:	4607      	mov	r7, r0
 801e828:	d802      	bhi.n	801e830 <_realloc_r+0x34>
 801e82a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e82e:	d812      	bhi.n	801e856 <_realloc_r+0x5a>
 801e830:	4621      	mov	r1, r4
 801e832:	4640      	mov	r0, r8
 801e834:	f7ff fee2 	bl	801e5fc <_malloc_r>
 801e838:	4605      	mov	r5, r0
 801e83a:	2800      	cmp	r0, #0
 801e83c:	d0ed      	beq.n	801e81a <_realloc_r+0x1e>
 801e83e:	42bc      	cmp	r4, r7
 801e840:	4622      	mov	r2, r4
 801e842:	4631      	mov	r1, r6
 801e844:	bf28      	it	cs
 801e846:	463a      	movcs	r2, r7
 801e848:	f001 fb59 	bl	801fefe <memcpy>
 801e84c:	4631      	mov	r1, r6
 801e84e:	4640      	mov	r0, r8
 801e850:	f002 f98a 	bl	8020b68 <_free_r>
 801e854:	e7e1      	b.n	801e81a <_realloc_r+0x1e>
 801e856:	4635      	mov	r5, r6
 801e858:	e7df      	b.n	801e81a <_realloc_r+0x1e>
	...

0801e85c <_strtoul_l.constprop.0>:
 801e85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e860:	4f36      	ldr	r7, [pc, #216]	; (801e93c <_strtoul_l.constprop.0+0xe0>)
 801e862:	4686      	mov	lr, r0
 801e864:	460d      	mov	r5, r1
 801e866:	4628      	mov	r0, r5
 801e868:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e86c:	5d3e      	ldrb	r6, [r7, r4]
 801e86e:	f016 0608 	ands.w	r6, r6, #8
 801e872:	d1f8      	bne.n	801e866 <_strtoul_l.constprop.0+0xa>
 801e874:	2c2d      	cmp	r4, #45	; 0x2d
 801e876:	d130      	bne.n	801e8da <_strtoul_l.constprop.0+0x7e>
 801e878:	782c      	ldrb	r4, [r5, #0]
 801e87a:	2601      	movs	r6, #1
 801e87c:	1c85      	adds	r5, r0, #2
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d057      	beq.n	801e932 <_strtoul_l.constprop.0+0xd6>
 801e882:	2b10      	cmp	r3, #16
 801e884:	d109      	bne.n	801e89a <_strtoul_l.constprop.0+0x3e>
 801e886:	2c30      	cmp	r4, #48	; 0x30
 801e888:	d107      	bne.n	801e89a <_strtoul_l.constprop.0+0x3e>
 801e88a:	7828      	ldrb	r0, [r5, #0]
 801e88c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e890:	2858      	cmp	r0, #88	; 0x58
 801e892:	d149      	bne.n	801e928 <_strtoul_l.constprop.0+0xcc>
 801e894:	786c      	ldrb	r4, [r5, #1]
 801e896:	2310      	movs	r3, #16
 801e898:	3502      	adds	r5, #2
 801e89a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801e89e:	2700      	movs	r7, #0
 801e8a0:	fbb8 f8f3 	udiv	r8, r8, r3
 801e8a4:	fb03 f908 	mul.w	r9, r3, r8
 801e8a8:	ea6f 0909 	mvn.w	r9, r9
 801e8ac:	4638      	mov	r0, r7
 801e8ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e8b2:	f1bc 0f09 	cmp.w	ip, #9
 801e8b6:	d815      	bhi.n	801e8e4 <_strtoul_l.constprop.0+0x88>
 801e8b8:	4664      	mov	r4, ip
 801e8ba:	42a3      	cmp	r3, r4
 801e8bc:	dd23      	ble.n	801e906 <_strtoul_l.constprop.0+0xaa>
 801e8be:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801e8c2:	d007      	beq.n	801e8d4 <_strtoul_l.constprop.0+0x78>
 801e8c4:	4580      	cmp	r8, r0
 801e8c6:	d31b      	bcc.n	801e900 <_strtoul_l.constprop.0+0xa4>
 801e8c8:	d101      	bne.n	801e8ce <_strtoul_l.constprop.0+0x72>
 801e8ca:	45a1      	cmp	r9, r4
 801e8cc:	db18      	blt.n	801e900 <_strtoul_l.constprop.0+0xa4>
 801e8ce:	fb00 4003 	mla	r0, r0, r3, r4
 801e8d2:	2701      	movs	r7, #1
 801e8d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e8d8:	e7e9      	b.n	801e8ae <_strtoul_l.constprop.0+0x52>
 801e8da:	2c2b      	cmp	r4, #43	; 0x2b
 801e8dc:	bf04      	itt	eq
 801e8de:	782c      	ldrbeq	r4, [r5, #0]
 801e8e0:	1c85      	addeq	r5, r0, #2
 801e8e2:	e7cc      	b.n	801e87e <_strtoul_l.constprop.0+0x22>
 801e8e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e8e8:	f1bc 0f19 	cmp.w	ip, #25
 801e8ec:	d801      	bhi.n	801e8f2 <_strtoul_l.constprop.0+0x96>
 801e8ee:	3c37      	subs	r4, #55	; 0x37
 801e8f0:	e7e3      	b.n	801e8ba <_strtoul_l.constprop.0+0x5e>
 801e8f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e8f6:	f1bc 0f19 	cmp.w	ip, #25
 801e8fa:	d804      	bhi.n	801e906 <_strtoul_l.constprop.0+0xaa>
 801e8fc:	3c57      	subs	r4, #87	; 0x57
 801e8fe:	e7dc      	b.n	801e8ba <_strtoul_l.constprop.0+0x5e>
 801e900:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e904:	e7e6      	b.n	801e8d4 <_strtoul_l.constprop.0+0x78>
 801e906:	1c7b      	adds	r3, r7, #1
 801e908:	d106      	bne.n	801e918 <_strtoul_l.constprop.0+0xbc>
 801e90a:	2322      	movs	r3, #34	; 0x22
 801e90c:	f8ce 3000 	str.w	r3, [lr]
 801e910:	4638      	mov	r0, r7
 801e912:	b932      	cbnz	r2, 801e922 <_strtoul_l.constprop.0+0xc6>
 801e914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e918:	b106      	cbz	r6, 801e91c <_strtoul_l.constprop.0+0xc0>
 801e91a:	4240      	negs	r0, r0
 801e91c:	2a00      	cmp	r2, #0
 801e91e:	d0f9      	beq.n	801e914 <_strtoul_l.constprop.0+0xb8>
 801e920:	b107      	cbz	r7, 801e924 <_strtoul_l.constprop.0+0xc8>
 801e922:	1e69      	subs	r1, r5, #1
 801e924:	6011      	str	r1, [r2, #0]
 801e926:	e7f5      	b.n	801e914 <_strtoul_l.constprop.0+0xb8>
 801e928:	2430      	movs	r4, #48	; 0x30
 801e92a:	2b00      	cmp	r3, #0
 801e92c:	d1b5      	bne.n	801e89a <_strtoul_l.constprop.0+0x3e>
 801e92e:	2308      	movs	r3, #8
 801e930:	e7b3      	b.n	801e89a <_strtoul_l.constprop.0+0x3e>
 801e932:	2c30      	cmp	r4, #48	; 0x30
 801e934:	d0a9      	beq.n	801e88a <_strtoul_l.constprop.0+0x2e>
 801e936:	230a      	movs	r3, #10
 801e938:	e7af      	b.n	801e89a <_strtoul_l.constprop.0+0x3e>
 801e93a:	bf00      	nop
 801e93c:	08024adc 	.word	0x08024adc

0801e940 <strtoul>:
 801e940:	4613      	mov	r3, r2
 801e942:	460a      	mov	r2, r1
 801e944:	4601      	mov	r1, r0
 801e946:	4802      	ldr	r0, [pc, #8]	; (801e950 <strtoul+0x10>)
 801e948:	6800      	ldr	r0, [r0, #0]
 801e94a:	f7ff bf87 	b.w	801e85c <_strtoul_l.constprop.0>
 801e94e:	bf00      	nop
 801e950:	200009a0 	.word	0x200009a0

0801e954 <__cvt>:
 801e954:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e956:	ed2d 8b02 	vpush	{d8}
 801e95a:	eeb0 8b40 	vmov.f64	d8, d0
 801e95e:	b085      	sub	sp, #20
 801e960:	4617      	mov	r7, r2
 801e962:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e964:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e966:	ee18 2a90 	vmov	r2, s17
 801e96a:	f025 0520 	bic.w	r5, r5, #32
 801e96e:	2a00      	cmp	r2, #0
 801e970:	bfb6      	itet	lt
 801e972:	222d      	movlt	r2, #45	; 0x2d
 801e974:	2200      	movge	r2, #0
 801e976:	eeb1 8b40 	vneglt.f64	d8, d0
 801e97a:	2d46      	cmp	r5, #70	; 0x46
 801e97c:	460c      	mov	r4, r1
 801e97e:	701a      	strb	r2, [r3, #0]
 801e980:	d004      	beq.n	801e98c <__cvt+0x38>
 801e982:	2d45      	cmp	r5, #69	; 0x45
 801e984:	d100      	bne.n	801e988 <__cvt+0x34>
 801e986:	3401      	adds	r4, #1
 801e988:	2102      	movs	r1, #2
 801e98a:	e000      	b.n	801e98e <__cvt+0x3a>
 801e98c:	2103      	movs	r1, #3
 801e98e:	ab03      	add	r3, sp, #12
 801e990:	9301      	str	r3, [sp, #4]
 801e992:	ab02      	add	r3, sp, #8
 801e994:	9300      	str	r3, [sp, #0]
 801e996:	4622      	mov	r2, r4
 801e998:	4633      	mov	r3, r6
 801e99a:	eeb0 0b48 	vmov.f64	d0, d8
 801e99e:	f001 fb6b 	bl	8020078 <_dtoa_r>
 801e9a2:	2d47      	cmp	r5, #71	; 0x47
 801e9a4:	d101      	bne.n	801e9aa <__cvt+0x56>
 801e9a6:	07fb      	lsls	r3, r7, #31
 801e9a8:	d51a      	bpl.n	801e9e0 <__cvt+0x8c>
 801e9aa:	2d46      	cmp	r5, #70	; 0x46
 801e9ac:	eb00 0204 	add.w	r2, r0, r4
 801e9b0:	d10c      	bne.n	801e9cc <__cvt+0x78>
 801e9b2:	7803      	ldrb	r3, [r0, #0]
 801e9b4:	2b30      	cmp	r3, #48	; 0x30
 801e9b6:	d107      	bne.n	801e9c8 <__cvt+0x74>
 801e9b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9c0:	bf1c      	itt	ne
 801e9c2:	f1c4 0401 	rsbne	r4, r4, #1
 801e9c6:	6034      	strne	r4, [r6, #0]
 801e9c8:	6833      	ldr	r3, [r6, #0]
 801e9ca:	441a      	add	r2, r3
 801e9cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9d4:	bf08      	it	eq
 801e9d6:	9203      	streq	r2, [sp, #12]
 801e9d8:	2130      	movs	r1, #48	; 0x30
 801e9da:	9b03      	ldr	r3, [sp, #12]
 801e9dc:	4293      	cmp	r3, r2
 801e9de:	d307      	bcc.n	801e9f0 <__cvt+0x9c>
 801e9e0:	9b03      	ldr	r3, [sp, #12]
 801e9e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e9e4:	1a1b      	subs	r3, r3, r0
 801e9e6:	6013      	str	r3, [r2, #0]
 801e9e8:	b005      	add	sp, #20
 801e9ea:	ecbd 8b02 	vpop	{d8}
 801e9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9f0:	1c5c      	adds	r4, r3, #1
 801e9f2:	9403      	str	r4, [sp, #12]
 801e9f4:	7019      	strb	r1, [r3, #0]
 801e9f6:	e7f0      	b.n	801e9da <__cvt+0x86>

0801e9f8 <__exponent>:
 801e9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e9fa:	4603      	mov	r3, r0
 801e9fc:	2900      	cmp	r1, #0
 801e9fe:	bfb8      	it	lt
 801ea00:	4249      	neglt	r1, r1
 801ea02:	f803 2b02 	strb.w	r2, [r3], #2
 801ea06:	bfb4      	ite	lt
 801ea08:	222d      	movlt	r2, #45	; 0x2d
 801ea0a:	222b      	movge	r2, #43	; 0x2b
 801ea0c:	2909      	cmp	r1, #9
 801ea0e:	7042      	strb	r2, [r0, #1]
 801ea10:	dd2a      	ble.n	801ea68 <__exponent+0x70>
 801ea12:	f10d 0207 	add.w	r2, sp, #7
 801ea16:	4617      	mov	r7, r2
 801ea18:	260a      	movs	r6, #10
 801ea1a:	4694      	mov	ip, r2
 801ea1c:	fb91 f5f6 	sdiv	r5, r1, r6
 801ea20:	fb06 1415 	mls	r4, r6, r5, r1
 801ea24:	3430      	adds	r4, #48	; 0x30
 801ea26:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801ea2a:	460c      	mov	r4, r1
 801ea2c:	2c63      	cmp	r4, #99	; 0x63
 801ea2e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801ea32:	4629      	mov	r1, r5
 801ea34:	dcf1      	bgt.n	801ea1a <__exponent+0x22>
 801ea36:	3130      	adds	r1, #48	; 0x30
 801ea38:	f1ac 0402 	sub.w	r4, ip, #2
 801ea3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801ea40:	1c41      	adds	r1, r0, #1
 801ea42:	4622      	mov	r2, r4
 801ea44:	42ba      	cmp	r2, r7
 801ea46:	d30a      	bcc.n	801ea5e <__exponent+0x66>
 801ea48:	f10d 0209 	add.w	r2, sp, #9
 801ea4c:	eba2 020c 	sub.w	r2, r2, ip
 801ea50:	42bc      	cmp	r4, r7
 801ea52:	bf88      	it	hi
 801ea54:	2200      	movhi	r2, #0
 801ea56:	4413      	add	r3, r2
 801ea58:	1a18      	subs	r0, r3, r0
 801ea5a:	b003      	add	sp, #12
 801ea5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea5e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801ea62:	f801 5f01 	strb.w	r5, [r1, #1]!
 801ea66:	e7ed      	b.n	801ea44 <__exponent+0x4c>
 801ea68:	2330      	movs	r3, #48	; 0x30
 801ea6a:	3130      	adds	r1, #48	; 0x30
 801ea6c:	7083      	strb	r3, [r0, #2]
 801ea6e:	70c1      	strb	r1, [r0, #3]
 801ea70:	1d03      	adds	r3, r0, #4
 801ea72:	e7f1      	b.n	801ea58 <__exponent+0x60>
 801ea74:	0000      	movs	r0, r0
	...

0801ea78 <_printf_float>:
 801ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea7c:	b08b      	sub	sp, #44	; 0x2c
 801ea7e:	460c      	mov	r4, r1
 801ea80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801ea84:	4616      	mov	r6, r2
 801ea86:	461f      	mov	r7, r3
 801ea88:	4605      	mov	r5, r0
 801ea8a:	f001 f9a9 	bl	801fde0 <_localeconv_r>
 801ea8e:	f8d0 b000 	ldr.w	fp, [r0]
 801ea92:	4658      	mov	r0, fp
 801ea94:	f7e1 fc34 	bl	8000300 <strlen>
 801ea98:	2300      	movs	r3, #0
 801ea9a:	9308      	str	r3, [sp, #32]
 801ea9c:	f8d8 3000 	ldr.w	r3, [r8]
 801eaa0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801eaa4:	6822      	ldr	r2, [r4, #0]
 801eaa6:	3307      	adds	r3, #7
 801eaa8:	f023 0307 	bic.w	r3, r3, #7
 801eaac:	f103 0108 	add.w	r1, r3, #8
 801eab0:	f8c8 1000 	str.w	r1, [r8]
 801eab4:	ed93 0b00 	vldr	d0, [r3]
 801eab8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801ed18 <_printf_float+0x2a0>
 801eabc:	eeb0 7bc0 	vabs.f64	d7, d0
 801eac0:	eeb4 7b46 	vcmp.f64	d7, d6
 801eac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eac8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801eacc:	4682      	mov	sl, r0
 801eace:	dd24      	ble.n	801eb1a <_printf_float+0xa2>
 801ead0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ead4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ead8:	d502      	bpl.n	801eae0 <_printf_float+0x68>
 801eada:	232d      	movs	r3, #45	; 0x2d
 801eadc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eae0:	498f      	ldr	r1, [pc, #572]	; (801ed20 <_printf_float+0x2a8>)
 801eae2:	4b90      	ldr	r3, [pc, #576]	; (801ed24 <_printf_float+0x2ac>)
 801eae4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801eae8:	bf94      	ite	ls
 801eaea:	4688      	movls	r8, r1
 801eaec:	4698      	movhi	r8, r3
 801eaee:	2303      	movs	r3, #3
 801eaf0:	6123      	str	r3, [r4, #16]
 801eaf2:	f022 0204 	bic.w	r2, r2, #4
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	6022      	str	r2, [r4, #0]
 801eafa:	9304      	str	r3, [sp, #16]
 801eafc:	9700      	str	r7, [sp, #0]
 801eafe:	4633      	mov	r3, r6
 801eb00:	aa09      	add	r2, sp, #36	; 0x24
 801eb02:	4621      	mov	r1, r4
 801eb04:	4628      	mov	r0, r5
 801eb06:	f000 f9d1 	bl	801eeac <_printf_common>
 801eb0a:	3001      	adds	r0, #1
 801eb0c:	f040 808a 	bne.w	801ec24 <_printf_float+0x1ac>
 801eb10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801eb14:	b00b      	add	sp, #44	; 0x2c
 801eb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb1a:	eeb4 0b40 	vcmp.f64	d0, d0
 801eb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb22:	d709      	bvc.n	801eb38 <_printf_float+0xc0>
 801eb24:	ee10 3a90 	vmov	r3, s1
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	bfbc      	itt	lt
 801eb2c:	232d      	movlt	r3, #45	; 0x2d
 801eb2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801eb32:	497d      	ldr	r1, [pc, #500]	; (801ed28 <_printf_float+0x2b0>)
 801eb34:	4b7d      	ldr	r3, [pc, #500]	; (801ed2c <_printf_float+0x2b4>)
 801eb36:	e7d5      	b.n	801eae4 <_printf_float+0x6c>
 801eb38:	6863      	ldr	r3, [r4, #4]
 801eb3a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801eb3e:	9104      	str	r1, [sp, #16]
 801eb40:	1c59      	adds	r1, r3, #1
 801eb42:	d13c      	bne.n	801ebbe <_printf_float+0x146>
 801eb44:	2306      	movs	r3, #6
 801eb46:	6063      	str	r3, [r4, #4]
 801eb48:	2300      	movs	r3, #0
 801eb4a:	9303      	str	r3, [sp, #12]
 801eb4c:	ab08      	add	r3, sp, #32
 801eb4e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801eb52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801eb56:	ab07      	add	r3, sp, #28
 801eb58:	6861      	ldr	r1, [r4, #4]
 801eb5a:	9300      	str	r3, [sp, #0]
 801eb5c:	6022      	str	r2, [r4, #0]
 801eb5e:	f10d 031b 	add.w	r3, sp, #27
 801eb62:	4628      	mov	r0, r5
 801eb64:	f7ff fef6 	bl	801e954 <__cvt>
 801eb68:	9b04      	ldr	r3, [sp, #16]
 801eb6a:	9907      	ldr	r1, [sp, #28]
 801eb6c:	2b47      	cmp	r3, #71	; 0x47
 801eb6e:	4680      	mov	r8, r0
 801eb70:	d108      	bne.n	801eb84 <_printf_float+0x10c>
 801eb72:	1cc8      	adds	r0, r1, #3
 801eb74:	db02      	blt.n	801eb7c <_printf_float+0x104>
 801eb76:	6863      	ldr	r3, [r4, #4]
 801eb78:	4299      	cmp	r1, r3
 801eb7a:	dd41      	ble.n	801ec00 <_printf_float+0x188>
 801eb7c:	f1a9 0902 	sub.w	r9, r9, #2
 801eb80:	fa5f f989 	uxtb.w	r9, r9
 801eb84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801eb88:	d820      	bhi.n	801ebcc <_printf_float+0x154>
 801eb8a:	3901      	subs	r1, #1
 801eb8c:	464a      	mov	r2, r9
 801eb8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801eb92:	9107      	str	r1, [sp, #28]
 801eb94:	f7ff ff30 	bl	801e9f8 <__exponent>
 801eb98:	9a08      	ldr	r2, [sp, #32]
 801eb9a:	9004      	str	r0, [sp, #16]
 801eb9c:	1813      	adds	r3, r2, r0
 801eb9e:	2a01      	cmp	r2, #1
 801eba0:	6123      	str	r3, [r4, #16]
 801eba2:	dc02      	bgt.n	801ebaa <_printf_float+0x132>
 801eba4:	6822      	ldr	r2, [r4, #0]
 801eba6:	07d2      	lsls	r2, r2, #31
 801eba8:	d501      	bpl.n	801ebae <_printf_float+0x136>
 801ebaa:	3301      	adds	r3, #1
 801ebac:	6123      	str	r3, [r4, #16]
 801ebae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d0a2      	beq.n	801eafc <_printf_float+0x84>
 801ebb6:	232d      	movs	r3, #45	; 0x2d
 801ebb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ebbc:	e79e      	b.n	801eafc <_printf_float+0x84>
 801ebbe:	9904      	ldr	r1, [sp, #16]
 801ebc0:	2947      	cmp	r1, #71	; 0x47
 801ebc2:	d1c1      	bne.n	801eb48 <_printf_float+0xd0>
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d1bf      	bne.n	801eb48 <_printf_float+0xd0>
 801ebc8:	2301      	movs	r3, #1
 801ebca:	e7bc      	b.n	801eb46 <_printf_float+0xce>
 801ebcc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ebd0:	d118      	bne.n	801ec04 <_printf_float+0x18c>
 801ebd2:	2900      	cmp	r1, #0
 801ebd4:	6863      	ldr	r3, [r4, #4]
 801ebd6:	dd0b      	ble.n	801ebf0 <_printf_float+0x178>
 801ebd8:	6121      	str	r1, [r4, #16]
 801ebda:	b913      	cbnz	r3, 801ebe2 <_printf_float+0x16a>
 801ebdc:	6822      	ldr	r2, [r4, #0]
 801ebde:	07d0      	lsls	r0, r2, #31
 801ebe0:	d502      	bpl.n	801ebe8 <_printf_float+0x170>
 801ebe2:	3301      	adds	r3, #1
 801ebe4:	440b      	add	r3, r1
 801ebe6:	6123      	str	r3, [r4, #16]
 801ebe8:	2300      	movs	r3, #0
 801ebea:	65a1      	str	r1, [r4, #88]	; 0x58
 801ebec:	9304      	str	r3, [sp, #16]
 801ebee:	e7de      	b.n	801ebae <_printf_float+0x136>
 801ebf0:	b913      	cbnz	r3, 801ebf8 <_printf_float+0x180>
 801ebf2:	6822      	ldr	r2, [r4, #0]
 801ebf4:	07d2      	lsls	r2, r2, #31
 801ebf6:	d501      	bpl.n	801ebfc <_printf_float+0x184>
 801ebf8:	3302      	adds	r3, #2
 801ebfa:	e7f4      	b.n	801ebe6 <_printf_float+0x16e>
 801ebfc:	2301      	movs	r3, #1
 801ebfe:	e7f2      	b.n	801ebe6 <_printf_float+0x16e>
 801ec00:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ec04:	9b08      	ldr	r3, [sp, #32]
 801ec06:	4299      	cmp	r1, r3
 801ec08:	db05      	blt.n	801ec16 <_printf_float+0x19e>
 801ec0a:	6823      	ldr	r3, [r4, #0]
 801ec0c:	6121      	str	r1, [r4, #16]
 801ec0e:	07d8      	lsls	r0, r3, #31
 801ec10:	d5ea      	bpl.n	801ebe8 <_printf_float+0x170>
 801ec12:	1c4b      	adds	r3, r1, #1
 801ec14:	e7e7      	b.n	801ebe6 <_printf_float+0x16e>
 801ec16:	2900      	cmp	r1, #0
 801ec18:	bfd4      	ite	le
 801ec1a:	f1c1 0202 	rsble	r2, r1, #2
 801ec1e:	2201      	movgt	r2, #1
 801ec20:	4413      	add	r3, r2
 801ec22:	e7e0      	b.n	801ebe6 <_printf_float+0x16e>
 801ec24:	6823      	ldr	r3, [r4, #0]
 801ec26:	055a      	lsls	r2, r3, #21
 801ec28:	d407      	bmi.n	801ec3a <_printf_float+0x1c2>
 801ec2a:	6923      	ldr	r3, [r4, #16]
 801ec2c:	4642      	mov	r2, r8
 801ec2e:	4631      	mov	r1, r6
 801ec30:	4628      	mov	r0, r5
 801ec32:	47b8      	blx	r7
 801ec34:	3001      	adds	r0, #1
 801ec36:	d12a      	bne.n	801ec8e <_printf_float+0x216>
 801ec38:	e76a      	b.n	801eb10 <_printf_float+0x98>
 801ec3a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ec3e:	f240 80e0 	bls.w	801ee02 <_printf_float+0x38a>
 801ec42:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ec46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ec4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec4e:	d133      	bne.n	801ecb8 <_printf_float+0x240>
 801ec50:	4a37      	ldr	r2, [pc, #220]	; (801ed30 <_printf_float+0x2b8>)
 801ec52:	2301      	movs	r3, #1
 801ec54:	4631      	mov	r1, r6
 801ec56:	4628      	mov	r0, r5
 801ec58:	47b8      	blx	r7
 801ec5a:	3001      	adds	r0, #1
 801ec5c:	f43f af58 	beq.w	801eb10 <_printf_float+0x98>
 801ec60:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ec64:	429a      	cmp	r2, r3
 801ec66:	db02      	blt.n	801ec6e <_printf_float+0x1f6>
 801ec68:	6823      	ldr	r3, [r4, #0]
 801ec6a:	07d8      	lsls	r0, r3, #31
 801ec6c:	d50f      	bpl.n	801ec8e <_printf_float+0x216>
 801ec6e:	4653      	mov	r3, sl
 801ec70:	465a      	mov	r2, fp
 801ec72:	4631      	mov	r1, r6
 801ec74:	4628      	mov	r0, r5
 801ec76:	47b8      	blx	r7
 801ec78:	3001      	adds	r0, #1
 801ec7a:	f43f af49 	beq.w	801eb10 <_printf_float+0x98>
 801ec7e:	f04f 0800 	mov.w	r8, #0
 801ec82:	f104 091a 	add.w	r9, r4, #26
 801ec86:	9b08      	ldr	r3, [sp, #32]
 801ec88:	3b01      	subs	r3, #1
 801ec8a:	4543      	cmp	r3, r8
 801ec8c:	dc09      	bgt.n	801eca2 <_printf_float+0x22a>
 801ec8e:	6823      	ldr	r3, [r4, #0]
 801ec90:	079b      	lsls	r3, r3, #30
 801ec92:	f100 8106 	bmi.w	801eea2 <_printf_float+0x42a>
 801ec96:	68e0      	ldr	r0, [r4, #12]
 801ec98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec9a:	4298      	cmp	r0, r3
 801ec9c:	bfb8      	it	lt
 801ec9e:	4618      	movlt	r0, r3
 801eca0:	e738      	b.n	801eb14 <_printf_float+0x9c>
 801eca2:	2301      	movs	r3, #1
 801eca4:	464a      	mov	r2, r9
 801eca6:	4631      	mov	r1, r6
 801eca8:	4628      	mov	r0, r5
 801ecaa:	47b8      	blx	r7
 801ecac:	3001      	adds	r0, #1
 801ecae:	f43f af2f 	beq.w	801eb10 <_printf_float+0x98>
 801ecb2:	f108 0801 	add.w	r8, r8, #1
 801ecb6:	e7e6      	b.n	801ec86 <_printf_float+0x20e>
 801ecb8:	9b07      	ldr	r3, [sp, #28]
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	dc3a      	bgt.n	801ed34 <_printf_float+0x2bc>
 801ecbe:	4a1c      	ldr	r2, [pc, #112]	; (801ed30 <_printf_float+0x2b8>)
 801ecc0:	2301      	movs	r3, #1
 801ecc2:	4631      	mov	r1, r6
 801ecc4:	4628      	mov	r0, r5
 801ecc6:	47b8      	blx	r7
 801ecc8:	3001      	adds	r0, #1
 801ecca:	f43f af21 	beq.w	801eb10 <_printf_float+0x98>
 801ecce:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ecd2:	4313      	orrs	r3, r2
 801ecd4:	d102      	bne.n	801ecdc <_printf_float+0x264>
 801ecd6:	6823      	ldr	r3, [r4, #0]
 801ecd8:	07d9      	lsls	r1, r3, #31
 801ecda:	d5d8      	bpl.n	801ec8e <_printf_float+0x216>
 801ecdc:	4653      	mov	r3, sl
 801ecde:	465a      	mov	r2, fp
 801ece0:	4631      	mov	r1, r6
 801ece2:	4628      	mov	r0, r5
 801ece4:	47b8      	blx	r7
 801ece6:	3001      	adds	r0, #1
 801ece8:	f43f af12 	beq.w	801eb10 <_printf_float+0x98>
 801ecec:	f04f 0900 	mov.w	r9, #0
 801ecf0:	f104 0a1a 	add.w	sl, r4, #26
 801ecf4:	9b07      	ldr	r3, [sp, #28]
 801ecf6:	425b      	negs	r3, r3
 801ecf8:	454b      	cmp	r3, r9
 801ecfa:	dc01      	bgt.n	801ed00 <_printf_float+0x288>
 801ecfc:	9b08      	ldr	r3, [sp, #32]
 801ecfe:	e795      	b.n	801ec2c <_printf_float+0x1b4>
 801ed00:	2301      	movs	r3, #1
 801ed02:	4652      	mov	r2, sl
 801ed04:	4631      	mov	r1, r6
 801ed06:	4628      	mov	r0, r5
 801ed08:	47b8      	blx	r7
 801ed0a:	3001      	adds	r0, #1
 801ed0c:	f43f af00 	beq.w	801eb10 <_printf_float+0x98>
 801ed10:	f109 0901 	add.w	r9, r9, #1
 801ed14:	e7ee      	b.n	801ecf4 <_printf_float+0x27c>
 801ed16:	bf00      	nop
 801ed18:	ffffffff 	.word	0xffffffff
 801ed1c:	7fefffff 	.word	0x7fefffff
 801ed20:	08024bdc 	.word	0x08024bdc
 801ed24:	08024be0 	.word	0x08024be0
 801ed28:	08024be4 	.word	0x08024be4
 801ed2c:	08024be8 	.word	0x08024be8
 801ed30:	08024bec 	.word	0x08024bec
 801ed34:	9a08      	ldr	r2, [sp, #32]
 801ed36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ed38:	429a      	cmp	r2, r3
 801ed3a:	bfa8      	it	ge
 801ed3c:	461a      	movge	r2, r3
 801ed3e:	2a00      	cmp	r2, #0
 801ed40:	4691      	mov	r9, r2
 801ed42:	dc38      	bgt.n	801edb6 <_printf_float+0x33e>
 801ed44:	2300      	movs	r3, #0
 801ed46:	9305      	str	r3, [sp, #20]
 801ed48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ed4c:	f104 021a 	add.w	r2, r4, #26
 801ed50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ed52:	9905      	ldr	r1, [sp, #20]
 801ed54:	9304      	str	r3, [sp, #16]
 801ed56:	eba3 0309 	sub.w	r3, r3, r9
 801ed5a:	428b      	cmp	r3, r1
 801ed5c:	dc33      	bgt.n	801edc6 <_printf_float+0x34e>
 801ed5e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ed62:	429a      	cmp	r2, r3
 801ed64:	db3c      	blt.n	801ede0 <_printf_float+0x368>
 801ed66:	6823      	ldr	r3, [r4, #0]
 801ed68:	07da      	lsls	r2, r3, #31
 801ed6a:	d439      	bmi.n	801ede0 <_printf_float+0x368>
 801ed6c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ed70:	eba2 0903 	sub.w	r9, r2, r3
 801ed74:	9b04      	ldr	r3, [sp, #16]
 801ed76:	1ad2      	subs	r2, r2, r3
 801ed78:	4591      	cmp	r9, r2
 801ed7a:	bfa8      	it	ge
 801ed7c:	4691      	movge	r9, r2
 801ed7e:	f1b9 0f00 	cmp.w	r9, #0
 801ed82:	dc35      	bgt.n	801edf0 <_printf_float+0x378>
 801ed84:	f04f 0800 	mov.w	r8, #0
 801ed88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ed8c:	f104 0a1a 	add.w	sl, r4, #26
 801ed90:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ed94:	1a9b      	subs	r3, r3, r2
 801ed96:	eba3 0309 	sub.w	r3, r3, r9
 801ed9a:	4543      	cmp	r3, r8
 801ed9c:	f77f af77 	ble.w	801ec8e <_printf_float+0x216>
 801eda0:	2301      	movs	r3, #1
 801eda2:	4652      	mov	r2, sl
 801eda4:	4631      	mov	r1, r6
 801eda6:	4628      	mov	r0, r5
 801eda8:	47b8      	blx	r7
 801edaa:	3001      	adds	r0, #1
 801edac:	f43f aeb0 	beq.w	801eb10 <_printf_float+0x98>
 801edb0:	f108 0801 	add.w	r8, r8, #1
 801edb4:	e7ec      	b.n	801ed90 <_printf_float+0x318>
 801edb6:	4613      	mov	r3, r2
 801edb8:	4631      	mov	r1, r6
 801edba:	4642      	mov	r2, r8
 801edbc:	4628      	mov	r0, r5
 801edbe:	47b8      	blx	r7
 801edc0:	3001      	adds	r0, #1
 801edc2:	d1bf      	bne.n	801ed44 <_printf_float+0x2cc>
 801edc4:	e6a4      	b.n	801eb10 <_printf_float+0x98>
 801edc6:	2301      	movs	r3, #1
 801edc8:	4631      	mov	r1, r6
 801edca:	4628      	mov	r0, r5
 801edcc:	9204      	str	r2, [sp, #16]
 801edce:	47b8      	blx	r7
 801edd0:	3001      	adds	r0, #1
 801edd2:	f43f ae9d 	beq.w	801eb10 <_printf_float+0x98>
 801edd6:	9b05      	ldr	r3, [sp, #20]
 801edd8:	9a04      	ldr	r2, [sp, #16]
 801edda:	3301      	adds	r3, #1
 801eddc:	9305      	str	r3, [sp, #20]
 801edde:	e7b7      	b.n	801ed50 <_printf_float+0x2d8>
 801ede0:	4653      	mov	r3, sl
 801ede2:	465a      	mov	r2, fp
 801ede4:	4631      	mov	r1, r6
 801ede6:	4628      	mov	r0, r5
 801ede8:	47b8      	blx	r7
 801edea:	3001      	adds	r0, #1
 801edec:	d1be      	bne.n	801ed6c <_printf_float+0x2f4>
 801edee:	e68f      	b.n	801eb10 <_printf_float+0x98>
 801edf0:	9a04      	ldr	r2, [sp, #16]
 801edf2:	464b      	mov	r3, r9
 801edf4:	4442      	add	r2, r8
 801edf6:	4631      	mov	r1, r6
 801edf8:	4628      	mov	r0, r5
 801edfa:	47b8      	blx	r7
 801edfc:	3001      	adds	r0, #1
 801edfe:	d1c1      	bne.n	801ed84 <_printf_float+0x30c>
 801ee00:	e686      	b.n	801eb10 <_printf_float+0x98>
 801ee02:	9a08      	ldr	r2, [sp, #32]
 801ee04:	2a01      	cmp	r2, #1
 801ee06:	dc01      	bgt.n	801ee0c <_printf_float+0x394>
 801ee08:	07db      	lsls	r3, r3, #31
 801ee0a:	d537      	bpl.n	801ee7c <_printf_float+0x404>
 801ee0c:	2301      	movs	r3, #1
 801ee0e:	4642      	mov	r2, r8
 801ee10:	4631      	mov	r1, r6
 801ee12:	4628      	mov	r0, r5
 801ee14:	47b8      	blx	r7
 801ee16:	3001      	adds	r0, #1
 801ee18:	f43f ae7a 	beq.w	801eb10 <_printf_float+0x98>
 801ee1c:	4653      	mov	r3, sl
 801ee1e:	465a      	mov	r2, fp
 801ee20:	4631      	mov	r1, r6
 801ee22:	4628      	mov	r0, r5
 801ee24:	47b8      	blx	r7
 801ee26:	3001      	adds	r0, #1
 801ee28:	f43f ae72 	beq.w	801eb10 <_printf_float+0x98>
 801ee2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ee30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ee34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee38:	9b08      	ldr	r3, [sp, #32]
 801ee3a:	d01a      	beq.n	801ee72 <_printf_float+0x3fa>
 801ee3c:	3b01      	subs	r3, #1
 801ee3e:	f108 0201 	add.w	r2, r8, #1
 801ee42:	4631      	mov	r1, r6
 801ee44:	4628      	mov	r0, r5
 801ee46:	47b8      	blx	r7
 801ee48:	3001      	adds	r0, #1
 801ee4a:	d10e      	bne.n	801ee6a <_printf_float+0x3f2>
 801ee4c:	e660      	b.n	801eb10 <_printf_float+0x98>
 801ee4e:	2301      	movs	r3, #1
 801ee50:	464a      	mov	r2, r9
 801ee52:	4631      	mov	r1, r6
 801ee54:	4628      	mov	r0, r5
 801ee56:	47b8      	blx	r7
 801ee58:	3001      	adds	r0, #1
 801ee5a:	f43f ae59 	beq.w	801eb10 <_printf_float+0x98>
 801ee5e:	f108 0801 	add.w	r8, r8, #1
 801ee62:	9b08      	ldr	r3, [sp, #32]
 801ee64:	3b01      	subs	r3, #1
 801ee66:	4543      	cmp	r3, r8
 801ee68:	dcf1      	bgt.n	801ee4e <_printf_float+0x3d6>
 801ee6a:	9b04      	ldr	r3, [sp, #16]
 801ee6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ee70:	e6dd      	b.n	801ec2e <_printf_float+0x1b6>
 801ee72:	f04f 0800 	mov.w	r8, #0
 801ee76:	f104 091a 	add.w	r9, r4, #26
 801ee7a:	e7f2      	b.n	801ee62 <_printf_float+0x3ea>
 801ee7c:	2301      	movs	r3, #1
 801ee7e:	4642      	mov	r2, r8
 801ee80:	e7df      	b.n	801ee42 <_printf_float+0x3ca>
 801ee82:	2301      	movs	r3, #1
 801ee84:	464a      	mov	r2, r9
 801ee86:	4631      	mov	r1, r6
 801ee88:	4628      	mov	r0, r5
 801ee8a:	47b8      	blx	r7
 801ee8c:	3001      	adds	r0, #1
 801ee8e:	f43f ae3f 	beq.w	801eb10 <_printf_float+0x98>
 801ee92:	f108 0801 	add.w	r8, r8, #1
 801ee96:	68e3      	ldr	r3, [r4, #12]
 801ee98:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ee9a:	1a5b      	subs	r3, r3, r1
 801ee9c:	4543      	cmp	r3, r8
 801ee9e:	dcf0      	bgt.n	801ee82 <_printf_float+0x40a>
 801eea0:	e6f9      	b.n	801ec96 <_printf_float+0x21e>
 801eea2:	f04f 0800 	mov.w	r8, #0
 801eea6:	f104 0919 	add.w	r9, r4, #25
 801eeaa:	e7f4      	b.n	801ee96 <_printf_float+0x41e>

0801eeac <_printf_common>:
 801eeac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eeb0:	4616      	mov	r6, r2
 801eeb2:	4699      	mov	r9, r3
 801eeb4:	688a      	ldr	r2, [r1, #8]
 801eeb6:	690b      	ldr	r3, [r1, #16]
 801eeb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801eebc:	4293      	cmp	r3, r2
 801eebe:	bfb8      	it	lt
 801eec0:	4613      	movlt	r3, r2
 801eec2:	6033      	str	r3, [r6, #0]
 801eec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801eec8:	4607      	mov	r7, r0
 801eeca:	460c      	mov	r4, r1
 801eecc:	b10a      	cbz	r2, 801eed2 <_printf_common+0x26>
 801eece:	3301      	adds	r3, #1
 801eed0:	6033      	str	r3, [r6, #0]
 801eed2:	6823      	ldr	r3, [r4, #0]
 801eed4:	0699      	lsls	r1, r3, #26
 801eed6:	bf42      	ittt	mi
 801eed8:	6833      	ldrmi	r3, [r6, #0]
 801eeda:	3302      	addmi	r3, #2
 801eedc:	6033      	strmi	r3, [r6, #0]
 801eede:	6825      	ldr	r5, [r4, #0]
 801eee0:	f015 0506 	ands.w	r5, r5, #6
 801eee4:	d106      	bne.n	801eef4 <_printf_common+0x48>
 801eee6:	f104 0a19 	add.w	sl, r4, #25
 801eeea:	68e3      	ldr	r3, [r4, #12]
 801eeec:	6832      	ldr	r2, [r6, #0]
 801eeee:	1a9b      	subs	r3, r3, r2
 801eef0:	42ab      	cmp	r3, r5
 801eef2:	dc26      	bgt.n	801ef42 <_printf_common+0x96>
 801eef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801eef8:	1e13      	subs	r3, r2, #0
 801eefa:	6822      	ldr	r2, [r4, #0]
 801eefc:	bf18      	it	ne
 801eefe:	2301      	movne	r3, #1
 801ef00:	0692      	lsls	r2, r2, #26
 801ef02:	d42b      	bmi.n	801ef5c <_printf_common+0xb0>
 801ef04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ef08:	4649      	mov	r1, r9
 801ef0a:	4638      	mov	r0, r7
 801ef0c:	47c0      	blx	r8
 801ef0e:	3001      	adds	r0, #1
 801ef10:	d01e      	beq.n	801ef50 <_printf_common+0xa4>
 801ef12:	6823      	ldr	r3, [r4, #0]
 801ef14:	6922      	ldr	r2, [r4, #16]
 801ef16:	f003 0306 	and.w	r3, r3, #6
 801ef1a:	2b04      	cmp	r3, #4
 801ef1c:	bf02      	ittt	eq
 801ef1e:	68e5      	ldreq	r5, [r4, #12]
 801ef20:	6833      	ldreq	r3, [r6, #0]
 801ef22:	1aed      	subeq	r5, r5, r3
 801ef24:	68a3      	ldr	r3, [r4, #8]
 801ef26:	bf0c      	ite	eq
 801ef28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ef2c:	2500      	movne	r5, #0
 801ef2e:	4293      	cmp	r3, r2
 801ef30:	bfc4      	itt	gt
 801ef32:	1a9b      	subgt	r3, r3, r2
 801ef34:	18ed      	addgt	r5, r5, r3
 801ef36:	2600      	movs	r6, #0
 801ef38:	341a      	adds	r4, #26
 801ef3a:	42b5      	cmp	r5, r6
 801ef3c:	d11a      	bne.n	801ef74 <_printf_common+0xc8>
 801ef3e:	2000      	movs	r0, #0
 801ef40:	e008      	b.n	801ef54 <_printf_common+0xa8>
 801ef42:	2301      	movs	r3, #1
 801ef44:	4652      	mov	r2, sl
 801ef46:	4649      	mov	r1, r9
 801ef48:	4638      	mov	r0, r7
 801ef4a:	47c0      	blx	r8
 801ef4c:	3001      	adds	r0, #1
 801ef4e:	d103      	bne.n	801ef58 <_printf_common+0xac>
 801ef50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ef54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef58:	3501      	adds	r5, #1
 801ef5a:	e7c6      	b.n	801eeea <_printf_common+0x3e>
 801ef5c:	18e1      	adds	r1, r4, r3
 801ef5e:	1c5a      	adds	r2, r3, #1
 801ef60:	2030      	movs	r0, #48	; 0x30
 801ef62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ef66:	4422      	add	r2, r4
 801ef68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ef6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ef70:	3302      	adds	r3, #2
 801ef72:	e7c7      	b.n	801ef04 <_printf_common+0x58>
 801ef74:	2301      	movs	r3, #1
 801ef76:	4622      	mov	r2, r4
 801ef78:	4649      	mov	r1, r9
 801ef7a:	4638      	mov	r0, r7
 801ef7c:	47c0      	blx	r8
 801ef7e:	3001      	adds	r0, #1
 801ef80:	d0e6      	beq.n	801ef50 <_printf_common+0xa4>
 801ef82:	3601      	adds	r6, #1
 801ef84:	e7d9      	b.n	801ef3a <_printf_common+0x8e>
	...

0801ef88 <_printf_i>:
 801ef88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ef8c:	7e0f      	ldrb	r7, [r1, #24]
 801ef8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ef90:	2f78      	cmp	r7, #120	; 0x78
 801ef92:	4691      	mov	r9, r2
 801ef94:	4680      	mov	r8, r0
 801ef96:	460c      	mov	r4, r1
 801ef98:	469a      	mov	sl, r3
 801ef9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ef9e:	d807      	bhi.n	801efb0 <_printf_i+0x28>
 801efa0:	2f62      	cmp	r7, #98	; 0x62
 801efa2:	d80a      	bhi.n	801efba <_printf_i+0x32>
 801efa4:	2f00      	cmp	r7, #0
 801efa6:	f000 80d4 	beq.w	801f152 <_printf_i+0x1ca>
 801efaa:	2f58      	cmp	r7, #88	; 0x58
 801efac:	f000 80c0 	beq.w	801f130 <_printf_i+0x1a8>
 801efb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801efb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801efb8:	e03a      	b.n	801f030 <_printf_i+0xa8>
 801efba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801efbe:	2b15      	cmp	r3, #21
 801efc0:	d8f6      	bhi.n	801efb0 <_printf_i+0x28>
 801efc2:	a101      	add	r1, pc, #4	; (adr r1, 801efc8 <_printf_i+0x40>)
 801efc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801efc8:	0801f021 	.word	0x0801f021
 801efcc:	0801f035 	.word	0x0801f035
 801efd0:	0801efb1 	.word	0x0801efb1
 801efd4:	0801efb1 	.word	0x0801efb1
 801efd8:	0801efb1 	.word	0x0801efb1
 801efdc:	0801efb1 	.word	0x0801efb1
 801efe0:	0801f035 	.word	0x0801f035
 801efe4:	0801efb1 	.word	0x0801efb1
 801efe8:	0801efb1 	.word	0x0801efb1
 801efec:	0801efb1 	.word	0x0801efb1
 801eff0:	0801efb1 	.word	0x0801efb1
 801eff4:	0801f139 	.word	0x0801f139
 801eff8:	0801f061 	.word	0x0801f061
 801effc:	0801f0f3 	.word	0x0801f0f3
 801f000:	0801efb1 	.word	0x0801efb1
 801f004:	0801efb1 	.word	0x0801efb1
 801f008:	0801f15b 	.word	0x0801f15b
 801f00c:	0801efb1 	.word	0x0801efb1
 801f010:	0801f061 	.word	0x0801f061
 801f014:	0801efb1 	.word	0x0801efb1
 801f018:	0801efb1 	.word	0x0801efb1
 801f01c:	0801f0fb 	.word	0x0801f0fb
 801f020:	682b      	ldr	r3, [r5, #0]
 801f022:	1d1a      	adds	r2, r3, #4
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	602a      	str	r2, [r5, #0]
 801f028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f02c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f030:	2301      	movs	r3, #1
 801f032:	e09f      	b.n	801f174 <_printf_i+0x1ec>
 801f034:	6820      	ldr	r0, [r4, #0]
 801f036:	682b      	ldr	r3, [r5, #0]
 801f038:	0607      	lsls	r7, r0, #24
 801f03a:	f103 0104 	add.w	r1, r3, #4
 801f03e:	6029      	str	r1, [r5, #0]
 801f040:	d501      	bpl.n	801f046 <_printf_i+0xbe>
 801f042:	681e      	ldr	r6, [r3, #0]
 801f044:	e003      	b.n	801f04e <_printf_i+0xc6>
 801f046:	0646      	lsls	r6, r0, #25
 801f048:	d5fb      	bpl.n	801f042 <_printf_i+0xba>
 801f04a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f04e:	2e00      	cmp	r6, #0
 801f050:	da03      	bge.n	801f05a <_printf_i+0xd2>
 801f052:	232d      	movs	r3, #45	; 0x2d
 801f054:	4276      	negs	r6, r6
 801f056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f05a:	485a      	ldr	r0, [pc, #360]	; (801f1c4 <_printf_i+0x23c>)
 801f05c:	230a      	movs	r3, #10
 801f05e:	e012      	b.n	801f086 <_printf_i+0xfe>
 801f060:	682b      	ldr	r3, [r5, #0]
 801f062:	6820      	ldr	r0, [r4, #0]
 801f064:	1d19      	adds	r1, r3, #4
 801f066:	6029      	str	r1, [r5, #0]
 801f068:	0605      	lsls	r5, r0, #24
 801f06a:	d501      	bpl.n	801f070 <_printf_i+0xe8>
 801f06c:	681e      	ldr	r6, [r3, #0]
 801f06e:	e002      	b.n	801f076 <_printf_i+0xee>
 801f070:	0641      	lsls	r1, r0, #25
 801f072:	d5fb      	bpl.n	801f06c <_printf_i+0xe4>
 801f074:	881e      	ldrh	r6, [r3, #0]
 801f076:	4853      	ldr	r0, [pc, #332]	; (801f1c4 <_printf_i+0x23c>)
 801f078:	2f6f      	cmp	r7, #111	; 0x6f
 801f07a:	bf0c      	ite	eq
 801f07c:	2308      	moveq	r3, #8
 801f07e:	230a      	movne	r3, #10
 801f080:	2100      	movs	r1, #0
 801f082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f086:	6865      	ldr	r5, [r4, #4]
 801f088:	60a5      	str	r5, [r4, #8]
 801f08a:	2d00      	cmp	r5, #0
 801f08c:	bfa2      	ittt	ge
 801f08e:	6821      	ldrge	r1, [r4, #0]
 801f090:	f021 0104 	bicge.w	r1, r1, #4
 801f094:	6021      	strge	r1, [r4, #0]
 801f096:	b90e      	cbnz	r6, 801f09c <_printf_i+0x114>
 801f098:	2d00      	cmp	r5, #0
 801f09a:	d04b      	beq.n	801f134 <_printf_i+0x1ac>
 801f09c:	4615      	mov	r5, r2
 801f09e:	fbb6 f1f3 	udiv	r1, r6, r3
 801f0a2:	fb03 6711 	mls	r7, r3, r1, r6
 801f0a6:	5dc7      	ldrb	r7, [r0, r7]
 801f0a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f0ac:	4637      	mov	r7, r6
 801f0ae:	42bb      	cmp	r3, r7
 801f0b0:	460e      	mov	r6, r1
 801f0b2:	d9f4      	bls.n	801f09e <_printf_i+0x116>
 801f0b4:	2b08      	cmp	r3, #8
 801f0b6:	d10b      	bne.n	801f0d0 <_printf_i+0x148>
 801f0b8:	6823      	ldr	r3, [r4, #0]
 801f0ba:	07de      	lsls	r6, r3, #31
 801f0bc:	d508      	bpl.n	801f0d0 <_printf_i+0x148>
 801f0be:	6923      	ldr	r3, [r4, #16]
 801f0c0:	6861      	ldr	r1, [r4, #4]
 801f0c2:	4299      	cmp	r1, r3
 801f0c4:	bfde      	ittt	le
 801f0c6:	2330      	movle	r3, #48	; 0x30
 801f0c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f0cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801f0d0:	1b52      	subs	r2, r2, r5
 801f0d2:	6122      	str	r2, [r4, #16]
 801f0d4:	f8cd a000 	str.w	sl, [sp]
 801f0d8:	464b      	mov	r3, r9
 801f0da:	aa03      	add	r2, sp, #12
 801f0dc:	4621      	mov	r1, r4
 801f0de:	4640      	mov	r0, r8
 801f0e0:	f7ff fee4 	bl	801eeac <_printf_common>
 801f0e4:	3001      	adds	r0, #1
 801f0e6:	d14a      	bne.n	801f17e <_printf_i+0x1f6>
 801f0e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f0ec:	b004      	add	sp, #16
 801f0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0f2:	6823      	ldr	r3, [r4, #0]
 801f0f4:	f043 0320 	orr.w	r3, r3, #32
 801f0f8:	6023      	str	r3, [r4, #0]
 801f0fa:	4833      	ldr	r0, [pc, #204]	; (801f1c8 <_printf_i+0x240>)
 801f0fc:	2778      	movs	r7, #120	; 0x78
 801f0fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f102:	6823      	ldr	r3, [r4, #0]
 801f104:	6829      	ldr	r1, [r5, #0]
 801f106:	061f      	lsls	r7, r3, #24
 801f108:	f851 6b04 	ldr.w	r6, [r1], #4
 801f10c:	d402      	bmi.n	801f114 <_printf_i+0x18c>
 801f10e:	065f      	lsls	r7, r3, #25
 801f110:	bf48      	it	mi
 801f112:	b2b6      	uxthmi	r6, r6
 801f114:	07df      	lsls	r7, r3, #31
 801f116:	bf48      	it	mi
 801f118:	f043 0320 	orrmi.w	r3, r3, #32
 801f11c:	6029      	str	r1, [r5, #0]
 801f11e:	bf48      	it	mi
 801f120:	6023      	strmi	r3, [r4, #0]
 801f122:	b91e      	cbnz	r6, 801f12c <_printf_i+0x1a4>
 801f124:	6823      	ldr	r3, [r4, #0]
 801f126:	f023 0320 	bic.w	r3, r3, #32
 801f12a:	6023      	str	r3, [r4, #0]
 801f12c:	2310      	movs	r3, #16
 801f12e:	e7a7      	b.n	801f080 <_printf_i+0xf8>
 801f130:	4824      	ldr	r0, [pc, #144]	; (801f1c4 <_printf_i+0x23c>)
 801f132:	e7e4      	b.n	801f0fe <_printf_i+0x176>
 801f134:	4615      	mov	r5, r2
 801f136:	e7bd      	b.n	801f0b4 <_printf_i+0x12c>
 801f138:	682b      	ldr	r3, [r5, #0]
 801f13a:	6826      	ldr	r6, [r4, #0]
 801f13c:	6961      	ldr	r1, [r4, #20]
 801f13e:	1d18      	adds	r0, r3, #4
 801f140:	6028      	str	r0, [r5, #0]
 801f142:	0635      	lsls	r5, r6, #24
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	d501      	bpl.n	801f14c <_printf_i+0x1c4>
 801f148:	6019      	str	r1, [r3, #0]
 801f14a:	e002      	b.n	801f152 <_printf_i+0x1ca>
 801f14c:	0670      	lsls	r0, r6, #25
 801f14e:	d5fb      	bpl.n	801f148 <_printf_i+0x1c0>
 801f150:	8019      	strh	r1, [r3, #0]
 801f152:	2300      	movs	r3, #0
 801f154:	6123      	str	r3, [r4, #16]
 801f156:	4615      	mov	r5, r2
 801f158:	e7bc      	b.n	801f0d4 <_printf_i+0x14c>
 801f15a:	682b      	ldr	r3, [r5, #0]
 801f15c:	1d1a      	adds	r2, r3, #4
 801f15e:	602a      	str	r2, [r5, #0]
 801f160:	681d      	ldr	r5, [r3, #0]
 801f162:	6862      	ldr	r2, [r4, #4]
 801f164:	2100      	movs	r1, #0
 801f166:	4628      	mov	r0, r5
 801f168:	f7e1 f87a 	bl	8000260 <memchr>
 801f16c:	b108      	cbz	r0, 801f172 <_printf_i+0x1ea>
 801f16e:	1b40      	subs	r0, r0, r5
 801f170:	6060      	str	r0, [r4, #4]
 801f172:	6863      	ldr	r3, [r4, #4]
 801f174:	6123      	str	r3, [r4, #16]
 801f176:	2300      	movs	r3, #0
 801f178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f17c:	e7aa      	b.n	801f0d4 <_printf_i+0x14c>
 801f17e:	6923      	ldr	r3, [r4, #16]
 801f180:	462a      	mov	r2, r5
 801f182:	4649      	mov	r1, r9
 801f184:	4640      	mov	r0, r8
 801f186:	47d0      	blx	sl
 801f188:	3001      	adds	r0, #1
 801f18a:	d0ad      	beq.n	801f0e8 <_printf_i+0x160>
 801f18c:	6823      	ldr	r3, [r4, #0]
 801f18e:	079b      	lsls	r3, r3, #30
 801f190:	d413      	bmi.n	801f1ba <_printf_i+0x232>
 801f192:	68e0      	ldr	r0, [r4, #12]
 801f194:	9b03      	ldr	r3, [sp, #12]
 801f196:	4298      	cmp	r0, r3
 801f198:	bfb8      	it	lt
 801f19a:	4618      	movlt	r0, r3
 801f19c:	e7a6      	b.n	801f0ec <_printf_i+0x164>
 801f19e:	2301      	movs	r3, #1
 801f1a0:	4632      	mov	r2, r6
 801f1a2:	4649      	mov	r1, r9
 801f1a4:	4640      	mov	r0, r8
 801f1a6:	47d0      	blx	sl
 801f1a8:	3001      	adds	r0, #1
 801f1aa:	d09d      	beq.n	801f0e8 <_printf_i+0x160>
 801f1ac:	3501      	adds	r5, #1
 801f1ae:	68e3      	ldr	r3, [r4, #12]
 801f1b0:	9903      	ldr	r1, [sp, #12]
 801f1b2:	1a5b      	subs	r3, r3, r1
 801f1b4:	42ab      	cmp	r3, r5
 801f1b6:	dcf2      	bgt.n	801f19e <_printf_i+0x216>
 801f1b8:	e7eb      	b.n	801f192 <_printf_i+0x20a>
 801f1ba:	2500      	movs	r5, #0
 801f1bc:	f104 0619 	add.w	r6, r4, #25
 801f1c0:	e7f5      	b.n	801f1ae <_printf_i+0x226>
 801f1c2:	bf00      	nop
 801f1c4:	08024bee 	.word	0x08024bee
 801f1c8:	08024bff 	.word	0x08024bff

0801f1cc <_scanf_float>:
 801f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1d0:	b087      	sub	sp, #28
 801f1d2:	4617      	mov	r7, r2
 801f1d4:	9303      	str	r3, [sp, #12]
 801f1d6:	688b      	ldr	r3, [r1, #8]
 801f1d8:	1e5a      	subs	r2, r3, #1
 801f1da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f1de:	bf83      	ittte	hi
 801f1e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f1e4:	195b      	addhi	r3, r3, r5
 801f1e6:	9302      	strhi	r3, [sp, #8]
 801f1e8:	2300      	movls	r3, #0
 801f1ea:	bf86      	itte	hi
 801f1ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f1f0:	608b      	strhi	r3, [r1, #8]
 801f1f2:	9302      	strls	r3, [sp, #8]
 801f1f4:	680b      	ldr	r3, [r1, #0]
 801f1f6:	468b      	mov	fp, r1
 801f1f8:	2500      	movs	r5, #0
 801f1fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801f1fe:	f84b 3b1c 	str.w	r3, [fp], #28
 801f202:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801f206:	4680      	mov	r8, r0
 801f208:	460c      	mov	r4, r1
 801f20a:	465e      	mov	r6, fp
 801f20c:	46aa      	mov	sl, r5
 801f20e:	46a9      	mov	r9, r5
 801f210:	9501      	str	r5, [sp, #4]
 801f212:	68a2      	ldr	r2, [r4, #8]
 801f214:	b152      	cbz	r2, 801f22c <_scanf_float+0x60>
 801f216:	683b      	ldr	r3, [r7, #0]
 801f218:	781b      	ldrb	r3, [r3, #0]
 801f21a:	2b4e      	cmp	r3, #78	; 0x4e
 801f21c:	d864      	bhi.n	801f2e8 <_scanf_float+0x11c>
 801f21e:	2b40      	cmp	r3, #64	; 0x40
 801f220:	d83c      	bhi.n	801f29c <_scanf_float+0xd0>
 801f222:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801f226:	b2c8      	uxtb	r0, r1
 801f228:	280e      	cmp	r0, #14
 801f22a:	d93a      	bls.n	801f2a2 <_scanf_float+0xd6>
 801f22c:	f1b9 0f00 	cmp.w	r9, #0
 801f230:	d003      	beq.n	801f23a <_scanf_float+0x6e>
 801f232:	6823      	ldr	r3, [r4, #0]
 801f234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f238:	6023      	str	r3, [r4, #0]
 801f23a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f23e:	f1ba 0f01 	cmp.w	sl, #1
 801f242:	f200 8113 	bhi.w	801f46c <_scanf_float+0x2a0>
 801f246:	455e      	cmp	r6, fp
 801f248:	f200 8105 	bhi.w	801f456 <_scanf_float+0x28a>
 801f24c:	2501      	movs	r5, #1
 801f24e:	4628      	mov	r0, r5
 801f250:	b007      	add	sp, #28
 801f252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f256:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801f25a:	2a0d      	cmp	r2, #13
 801f25c:	d8e6      	bhi.n	801f22c <_scanf_float+0x60>
 801f25e:	a101      	add	r1, pc, #4	; (adr r1, 801f264 <_scanf_float+0x98>)
 801f260:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f264:	0801f3a3 	.word	0x0801f3a3
 801f268:	0801f22d 	.word	0x0801f22d
 801f26c:	0801f22d 	.word	0x0801f22d
 801f270:	0801f22d 	.word	0x0801f22d
 801f274:	0801f403 	.word	0x0801f403
 801f278:	0801f3db 	.word	0x0801f3db
 801f27c:	0801f22d 	.word	0x0801f22d
 801f280:	0801f22d 	.word	0x0801f22d
 801f284:	0801f3b1 	.word	0x0801f3b1
 801f288:	0801f22d 	.word	0x0801f22d
 801f28c:	0801f22d 	.word	0x0801f22d
 801f290:	0801f22d 	.word	0x0801f22d
 801f294:	0801f22d 	.word	0x0801f22d
 801f298:	0801f369 	.word	0x0801f369
 801f29c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801f2a0:	e7db      	b.n	801f25a <_scanf_float+0x8e>
 801f2a2:	290e      	cmp	r1, #14
 801f2a4:	d8c2      	bhi.n	801f22c <_scanf_float+0x60>
 801f2a6:	a001      	add	r0, pc, #4	; (adr r0, 801f2ac <_scanf_float+0xe0>)
 801f2a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801f2ac:	0801f35b 	.word	0x0801f35b
 801f2b0:	0801f22d 	.word	0x0801f22d
 801f2b4:	0801f35b 	.word	0x0801f35b
 801f2b8:	0801f3ef 	.word	0x0801f3ef
 801f2bc:	0801f22d 	.word	0x0801f22d
 801f2c0:	0801f309 	.word	0x0801f309
 801f2c4:	0801f345 	.word	0x0801f345
 801f2c8:	0801f345 	.word	0x0801f345
 801f2cc:	0801f345 	.word	0x0801f345
 801f2d0:	0801f345 	.word	0x0801f345
 801f2d4:	0801f345 	.word	0x0801f345
 801f2d8:	0801f345 	.word	0x0801f345
 801f2dc:	0801f345 	.word	0x0801f345
 801f2e0:	0801f345 	.word	0x0801f345
 801f2e4:	0801f345 	.word	0x0801f345
 801f2e8:	2b6e      	cmp	r3, #110	; 0x6e
 801f2ea:	d809      	bhi.n	801f300 <_scanf_float+0x134>
 801f2ec:	2b60      	cmp	r3, #96	; 0x60
 801f2ee:	d8b2      	bhi.n	801f256 <_scanf_float+0x8a>
 801f2f0:	2b54      	cmp	r3, #84	; 0x54
 801f2f2:	d077      	beq.n	801f3e4 <_scanf_float+0x218>
 801f2f4:	2b59      	cmp	r3, #89	; 0x59
 801f2f6:	d199      	bne.n	801f22c <_scanf_float+0x60>
 801f2f8:	2d07      	cmp	r5, #7
 801f2fa:	d197      	bne.n	801f22c <_scanf_float+0x60>
 801f2fc:	2508      	movs	r5, #8
 801f2fe:	e029      	b.n	801f354 <_scanf_float+0x188>
 801f300:	2b74      	cmp	r3, #116	; 0x74
 801f302:	d06f      	beq.n	801f3e4 <_scanf_float+0x218>
 801f304:	2b79      	cmp	r3, #121	; 0x79
 801f306:	e7f6      	b.n	801f2f6 <_scanf_float+0x12a>
 801f308:	6821      	ldr	r1, [r4, #0]
 801f30a:	05c8      	lsls	r0, r1, #23
 801f30c:	d51a      	bpl.n	801f344 <_scanf_float+0x178>
 801f30e:	9b02      	ldr	r3, [sp, #8]
 801f310:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801f314:	6021      	str	r1, [r4, #0]
 801f316:	f109 0901 	add.w	r9, r9, #1
 801f31a:	b11b      	cbz	r3, 801f324 <_scanf_float+0x158>
 801f31c:	3b01      	subs	r3, #1
 801f31e:	3201      	adds	r2, #1
 801f320:	9302      	str	r3, [sp, #8]
 801f322:	60a2      	str	r2, [r4, #8]
 801f324:	68a3      	ldr	r3, [r4, #8]
 801f326:	3b01      	subs	r3, #1
 801f328:	60a3      	str	r3, [r4, #8]
 801f32a:	6923      	ldr	r3, [r4, #16]
 801f32c:	3301      	adds	r3, #1
 801f32e:	6123      	str	r3, [r4, #16]
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	3b01      	subs	r3, #1
 801f334:	2b00      	cmp	r3, #0
 801f336:	607b      	str	r3, [r7, #4]
 801f338:	f340 8084 	ble.w	801f444 <_scanf_float+0x278>
 801f33c:	683b      	ldr	r3, [r7, #0]
 801f33e:	3301      	adds	r3, #1
 801f340:	603b      	str	r3, [r7, #0]
 801f342:	e766      	b.n	801f212 <_scanf_float+0x46>
 801f344:	eb1a 0f05 	cmn.w	sl, r5
 801f348:	f47f af70 	bne.w	801f22c <_scanf_float+0x60>
 801f34c:	6822      	ldr	r2, [r4, #0]
 801f34e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801f352:	6022      	str	r2, [r4, #0]
 801f354:	f806 3b01 	strb.w	r3, [r6], #1
 801f358:	e7e4      	b.n	801f324 <_scanf_float+0x158>
 801f35a:	6822      	ldr	r2, [r4, #0]
 801f35c:	0610      	lsls	r0, r2, #24
 801f35e:	f57f af65 	bpl.w	801f22c <_scanf_float+0x60>
 801f362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801f366:	e7f4      	b.n	801f352 <_scanf_float+0x186>
 801f368:	f1ba 0f00 	cmp.w	sl, #0
 801f36c:	d10e      	bne.n	801f38c <_scanf_float+0x1c0>
 801f36e:	f1b9 0f00 	cmp.w	r9, #0
 801f372:	d10e      	bne.n	801f392 <_scanf_float+0x1c6>
 801f374:	6822      	ldr	r2, [r4, #0]
 801f376:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f37a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f37e:	d108      	bne.n	801f392 <_scanf_float+0x1c6>
 801f380:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f384:	6022      	str	r2, [r4, #0]
 801f386:	f04f 0a01 	mov.w	sl, #1
 801f38a:	e7e3      	b.n	801f354 <_scanf_float+0x188>
 801f38c:	f1ba 0f02 	cmp.w	sl, #2
 801f390:	d055      	beq.n	801f43e <_scanf_float+0x272>
 801f392:	2d01      	cmp	r5, #1
 801f394:	d002      	beq.n	801f39c <_scanf_float+0x1d0>
 801f396:	2d04      	cmp	r5, #4
 801f398:	f47f af48 	bne.w	801f22c <_scanf_float+0x60>
 801f39c:	3501      	adds	r5, #1
 801f39e:	b2ed      	uxtb	r5, r5
 801f3a0:	e7d8      	b.n	801f354 <_scanf_float+0x188>
 801f3a2:	f1ba 0f01 	cmp.w	sl, #1
 801f3a6:	f47f af41 	bne.w	801f22c <_scanf_float+0x60>
 801f3aa:	f04f 0a02 	mov.w	sl, #2
 801f3ae:	e7d1      	b.n	801f354 <_scanf_float+0x188>
 801f3b0:	b97d      	cbnz	r5, 801f3d2 <_scanf_float+0x206>
 801f3b2:	f1b9 0f00 	cmp.w	r9, #0
 801f3b6:	f47f af3c 	bne.w	801f232 <_scanf_float+0x66>
 801f3ba:	6822      	ldr	r2, [r4, #0]
 801f3bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f3c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f3c4:	f47f af39 	bne.w	801f23a <_scanf_float+0x6e>
 801f3c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f3cc:	6022      	str	r2, [r4, #0]
 801f3ce:	2501      	movs	r5, #1
 801f3d0:	e7c0      	b.n	801f354 <_scanf_float+0x188>
 801f3d2:	2d03      	cmp	r5, #3
 801f3d4:	d0e2      	beq.n	801f39c <_scanf_float+0x1d0>
 801f3d6:	2d05      	cmp	r5, #5
 801f3d8:	e7de      	b.n	801f398 <_scanf_float+0x1cc>
 801f3da:	2d02      	cmp	r5, #2
 801f3dc:	f47f af26 	bne.w	801f22c <_scanf_float+0x60>
 801f3e0:	2503      	movs	r5, #3
 801f3e2:	e7b7      	b.n	801f354 <_scanf_float+0x188>
 801f3e4:	2d06      	cmp	r5, #6
 801f3e6:	f47f af21 	bne.w	801f22c <_scanf_float+0x60>
 801f3ea:	2507      	movs	r5, #7
 801f3ec:	e7b2      	b.n	801f354 <_scanf_float+0x188>
 801f3ee:	6822      	ldr	r2, [r4, #0]
 801f3f0:	0591      	lsls	r1, r2, #22
 801f3f2:	f57f af1b 	bpl.w	801f22c <_scanf_float+0x60>
 801f3f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801f3fa:	6022      	str	r2, [r4, #0]
 801f3fc:	f8cd 9004 	str.w	r9, [sp, #4]
 801f400:	e7a8      	b.n	801f354 <_scanf_float+0x188>
 801f402:	6822      	ldr	r2, [r4, #0]
 801f404:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801f408:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801f40c:	d006      	beq.n	801f41c <_scanf_float+0x250>
 801f40e:	0550      	lsls	r0, r2, #21
 801f410:	f57f af0c 	bpl.w	801f22c <_scanf_float+0x60>
 801f414:	f1b9 0f00 	cmp.w	r9, #0
 801f418:	f43f af0f 	beq.w	801f23a <_scanf_float+0x6e>
 801f41c:	0591      	lsls	r1, r2, #22
 801f41e:	bf58      	it	pl
 801f420:	9901      	ldrpl	r1, [sp, #4]
 801f422:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f426:	bf58      	it	pl
 801f428:	eba9 0101 	subpl.w	r1, r9, r1
 801f42c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801f430:	bf58      	it	pl
 801f432:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801f436:	6022      	str	r2, [r4, #0]
 801f438:	f04f 0900 	mov.w	r9, #0
 801f43c:	e78a      	b.n	801f354 <_scanf_float+0x188>
 801f43e:	f04f 0a03 	mov.w	sl, #3
 801f442:	e787      	b.n	801f354 <_scanf_float+0x188>
 801f444:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f448:	4639      	mov	r1, r7
 801f44a:	4640      	mov	r0, r8
 801f44c:	4798      	blx	r3
 801f44e:	2800      	cmp	r0, #0
 801f450:	f43f aedf 	beq.w	801f212 <_scanf_float+0x46>
 801f454:	e6ea      	b.n	801f22c <_scanf_float+0x60>
 801f456:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f45a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f45e:	463a      	mov	r2, r7
 801f460:	4640      	mov	r0, r8
 801f462:	4798      	blx	r3
 801f464:	6923      	ldr	r3, [r4, #16]
 801f466:	3b01      	subs	r3, #1
 801f468:	6123      	str	r3, [r4, #16]
 801f46a:	e6ec      	b.n	801f246 <_scanf_float+0x7a>
 801f46c:	1e6b      	subs	r3, r5, #1
 801f46e:	2b06      	cmp	r3, #6
 801f470:	d825      	bhi.n	801f4be <_scanf_float+0x2f2>
 801f472:	2d02      	cmp	r5, #2
 801f474:	d836      	bhi.n	801f4e4 <_scanf_float+0x318>
 801f476:	455e      	cmp	r6, fp
 801f478:	f67f aee8 	bls.w	801f24c <_scanf_float+0x80>
 801f47c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f480:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f484:	463a      	mov	r2, r7
 801f486:	4640      	mov	r0, r8
 801f488:	4798      	blx	r3
 801f48a:	6923      	ldr	r3, [r4, #16]
 801f48c:	3b01      	subs	r3, #1
 801f48e:	6123      	str	r3, [r4, #16]
 801f490:	e7f1      	b.n	801f476 <_scanf_float+0x2aa>
 801f492:	9802      	ldr	r0, [sp, #8]
 801f494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f498:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801f49c:	9002      	str	r0, [sp, #8]
 801f49e:	463a      	mov	r2, r7
 801f4a0:	4640      	mov	r0, r8
 801f4a2:	4798      	blx	r3
 801f4a4:	6923      	ldr	r3, [r4, #16]
 801f4a6:	3b01      	subs	r3, #1
 801f4a8:	6123      	str	r3, [r4, #16]
 801f4aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f4ae:	fa5f fa8a 	uxtb.w	sl, sl
 801f4b2:	f1ba 0f02 	cmp.w	sl, #2
 801f4b6:	d1ec      	bne.n	801f492 <_scanf_float+0x2c6>
 801f4b8:	3d03      	subs	r5, #3
 801f4ba:	b2ed      	uxtb	r5, r5
 801f4bc:	1b76      	subs	r6, r6, r5
 801f4be:	6823      	ldr	r3, [r4, #0]
 801f4c0:	05da      	lsls	r2, r3, #23
 801f4c2:	d52f      	bpl.n	801f524 <_scanf_float+0x358>
 801f4c4:	055b      	lsls	r3, r3, #21
 801f4c6:	d510      	bpl.n	801f4ea <_scanf_float+0x31e>
 801f4c8:	455e      	cmp	r6, fp
 801f4ca:	f67f aebf 	bls.w	801f24c <_scanf_float+0x80>
 801f4ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f4d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f4d6:	463a      	mov	r2, r7
 801f4d8:	4640      	mov	r0, r8
 801f4da:	4798      	blx	r3
 801f4dc:	6923      	ldr	r3, [r4, #16]
 801f4de:	3b01      	subs	r3, #1
 801f4e0:	6123      	str	r3, [r4, #16]
 801f4e2:	e7f1      	b.n	801f4c8 <_scanf_float+0x2fc>
 801f4e4:	46aa      	mov	sl, r5
 801f4e6:	9602      	str	r6, [sp, #8]
 801f4e8:	e7df      	b.n	801f4aa <_scanf_float+0x2de>
 801f4ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f4ee:	6923      	ldr	r3, [r4, #16]
 801f4f0:	2965      	cmp	r1, #101	; 0x65
 801f4f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801f4f6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801f4fa:	6123      	str	r3, [r4, #16]
 801f4fc:	d00c      	beq.n	801f518 <_scanf_float+0x34c>
 801f4fe:	2945      	cmp	r1, #69	; 0x45
 801f500:	d00a      	beq.n	801f518 <_scanf_float+0x34c>
 801f502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f506:	463a      	mov	r2, r7
 801f508:	4640      	mov	r0, r8
 801f50a:	4798      	blx	r3
 801f50c:	6923      	ldr	r3, [r4, #16]
 801f50e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801f512:	3b01      	subs	r3, #1
 801f514:	1eb5      	subs	r5, r6, #2
 801f516:	6123      	str	r3, [r4, #16]
 801f518:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f51c:	463a      	mov	r2, r7
 801f51e:	4640      	mov	r0, r8
 801f520:	4798      	blx	r3
 801f522:	462e      	mov	r6, r5
 801f524:	6825      	ldr	r5, [r4, #0]
 801f526:	f015 0510 	ands.w	r5, r5, #16
 801f52a:	d14d      	bne.n	801f5c8 <_scanf_float+0x3fc>
 801f52c:	7035      	strb	r5, [r6, #0]
 801f52e:	6823      	ldr	r3, [r4, #0]
 801f530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801f534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f538:	d11a      	bne.n	801f570 <_scanf_float+0x3a4>
 801f53a:	9b01      	ldr	r3, [sp, #4]
 801f53c:	454b      	cmp	r3, r9
 801f53e:	eba3 0209 	sub.w	r2, r3, r9
 801f542:	d122      	bne.n	801f58a <_scanf_float+0x3be>
 801f544:	2200      	movs	r2, #0
 801f546:	4659      	mov	r1, fp
 801f548:	4640      	mov	r0, r8
 801f54a:	f002 fdd7 	bl	80220fc <_strtod_r>
 801f54e:	9b03      	ldr	r3, [sp, #12]
 801f550:	6821      	ldr	r1, [r4, #0]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	f011 0f02 	tst.w	r1, #2
 801f558:	f103 0204 	add.w	r2, r3, #4
 801f55c:	d020      	beq.n	801f5a0 <_scanf_float+0x3d4>
 801f55e:	9903      	ldr	r1, [sp, #12]
 801f560:	600a      	str	r2, [r1, #0]
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	ed83 0b00 	vstr	d0, [r3]
 801f568:	68e3      	ldr	r3, [r4, #12]
 801f56a:	3301      	adds	r3, #1
 801f56c:	60e3      	str	r3, [r4, #12]
 801f56e:	e66e      	b.n	801f24e <_scanf_float+0x82>
 801f570:	9b04      	ldr	r3, [sp, #16]
 801f572:	2b00      	cmp	r3, #0
 801f574:	d0e6      	beq.n	801f544 <_scanf_float+0x378>
 801f576:	9905      	ldr	r1, [sp, #20]
 801f578:	230a      	movs	r3, #10
 801f57a:	462a      	mov	r2, r5
 801f57c:	3101      	adds	r1, #1
 801f57e:	4640      	mov	r0, r8
 801f580:	f002 fe44 	bl	802220c <_strtol_r>
 801f584:	9b04      	ldr	r3, [sp, #16]
 801f586:	9e05      	ldr	r6, [sp, #20]
 801f588:	1ac2      	subs	r2, r0, r3
 801f58a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801f58e:	429e      	cmp	r6, r3
 801f590:	bf28      	it	cs
 801f592:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801f596:	490d      	ldr	r1, [pc, #52]	; (801f5cc <_scanf_float+0x400>)
 801f598:	4630      	mov	r0, r6
 801f59a:	f000 fa87 	bl	801faac <siprintf>
 801f59e:	e7d1      	b.n	801f544 <_scanf_float+0x378>
 801f5a0:	f011 0f04 	tst.w	r1, #4
 801f5a4:	9903      	ldr	r1, [sp, #12]
 801f5a6:	600a      	str	r2, [r1, #0]
 801f5a8:	d1db      	bne.n	801f562 <_scanf_float+0x396>
 801f5aa:	eeb4 0b40 	vcmp.f64	d0, d0
 801f5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5b2:	681e      	ldr	r6, [r3, #0]
 801f5b4:	d705      	bvc.n	801f5c2 <_scanf_float+0x3f6>
 801f5b6:	4806      	ldr	r0, [pc, #24]	; (801f5d0 <_scanf_float+0x404>)
 801f5b8:	f000 fcb0 	bl	801ff1c <nanf>
 801f5bc:	ed86 0a00 	vstr	s0, [r6]
 801f5c0:	e7d2      	b.n	801f568 <_scanf_float+0x39c>
 801f5c2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801f5c6:	e7f9      	b.n	801f5bc <_scanf_float+0x3f0>
 801f5c8:	2500      	movs	r5, #0
 801f5ca:	e640      	b.n	801f24e <_scanf_float+0x82>
 801f5cc:	08024c10 	.word	0x08024c10
 801f5d0:	08024c50 	.word	0x08024c50

0801f5d4 <std>:
 801f5d4:	2300      	movs	r3, #0
 801f5d6:	b510      	push	{r4, lr}
 801f5d8:	4604      	mov	r4, r0
 801f5da:	e9c0 3300 	strd	r3, r3, [r0]
 801f5de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f5e2:	6083      	str	r3, [r0, #8]
 801f5e4:	8181      	strh	r1, [r0, #12]
 801f5e6:	6643      	str	r3, [r0, #100]	; 0x64
 801f5e8:	81c2      	strh	r2, [r0, #14]
 801f5ea:	6183      	str	r3, [r0, #24]
 801f5ec:	4619      	mov	r1, r3
 801f5ee:	2208      	movs	r2, #8
 801f5f0:	305c      	adds	r0, #92	; 0x5c
 801f5f2:	f000 fbb7 	bl	801fd64 <memset>
 801f5f6:	4b0d      	ldr	r3, [pc, #52]	; (801f62c <std+0x58>)
 801f5f8:	6263      	str	r3, [r4, #36]	; 0x24
 801f5fa:	4b0d      	ldr	r3, [pc, #52]	; (801f630 <std+0x5c>)
 801f5fc:	62a3      	str	r3, [r4, #40]	; 0x28
 801f5fe:	4b0d      	ldr	r3, [pc, #52]	; (801f634 <std+0x60>)
 801f600:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f602:	4b0d      	ldr	r3, [pc, #52]	; (801f638 <std+0x64>)
 801f604:	6323      	str	r3, [r4, #48]	; 0x30
 801f606:	4b0d      	ldr	r3, [pc, #52]	; (801f63c <std+0x68>)
 801f608:	6224      	str	r4, [r4, #32]
 801f60a:	429c      	cmp	r4, r3
 801f60c:	d006      	beq.n	801f61c <std+0x48>
 801f60e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801f612:	4294      	cmp	r4, r2
 801f614:	d002      	beq.n	801f61c <std+0x48>
 801f616:	33d0      	adds	r3, #208	; 0xd0
 801f618:	429c      	cmp	r4, r3
 801f61a:	d105      	bne.n	801f628 <std+0x54>
 801f61c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f624:	f000 bc60 	b.w	801fee8 <__retarget_lock_init_recursive>
 801f628:	bd10      	pop	{r4, pc}
 801f62a:	bf00      	nop
 801f62c:	0801faed 	.word	0x0801faed
 801f630:	0801fb0f 	.word	0x0801fb0f
 801f634:	0801fb47 	.word	0x0801fb47
 801f638:	0801fb6b 	.word	0x0801fb6b
 801f63c:	20016f2c 	.word	0x20016f2c

0801f640 <stdio_exit_handler>:
 801f640:	4a02      	ldr	r2, [pc, #8]	; (801f64c <stdio_exit_handler+0xc>)
 801f642:	4903      	ldr	r1, [pc, #12]	; (801f650 <stdio_exit_handler+0x10>)
 801f644:	4803      	ldr	r0, [pc, #12]	; (801f654 <stdio_exit_handler+0x14>)
 801f646:	f000 b869 	b.w	801f71c <_fwalk_sglue>
 801f64a:	bf00      	nop
 801f64c:	20000948 	.word	0x20000948
 801f650:	08022855 	.word	0x08022855
 801f654:	20000954 	.word	0x20000954

0801f658 <cleanup_stdio>:
 801f658:	6841      	ldr	r1, [r0, #4]
 801f65a:	4b0c      	ldr	r3, [pc, #48]	; (801f68c <cleanup_stdio+0x34>)
 801f65c:	4299      	cmp	r1, r3
 801f65e:	b510      	push	{r4, lr}
 801f660:	4604      	mov	r4, r0
 801f662:	d001      	beq.n	801f668 <cleanup_stdio+0x10>
 801f664:	f003 f8f6 	bl	8022854 <_fflush_r>
 801f668:	68a1      	ldr	r1, [r4, #8]
 801f66a:	4b09      	ldr	r3, [pc, #36]	; (801f690 <cleanup_stdio+0x38>)
 801f66c:	4299      	cmp	r1, r3
 801f66e:	d002      	beq.n	801f676 <cleanup_stdio+0x1e>
 801f670:	4620      	mov	r0, r4
 801f672:	f003 f8ef 	bl	8022854 <_fflush_r>
 801f676:	68e1      	ldr	r1, [r4, #12]
 801f678:	4b06      	ldr	r3, [pc, #24]	; (801f694 <cleanup_stdio+0x3c>)
 801f67a:	4299      	cmp	r1, r3
 801f67c:	d004      	beq.n	801f688 <cleanup_stdio+0x30>
 801f67e:	4620      	mov	r0, r4
 801f680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f684:	f003 b8e6 	b.w	8022854 <_fflush_r>
 801f688:	bd10      	pop	{r4, pc}
 801f68a:	bf00      	nop
 801f68c:	20016f2c 	.word	0x20016f2c
 801f690:	20016f94 	.word	0x20016f94
 801f694:	20016ffc 	.word	0x20016ffc

0801f698 <global_stdio_init.part.0>:
 801f698:	b510      	push	{r4, lr}
 801f69a:	4b0b      	ldr	r3, [pc, #44]	; (801f6c8 <global_stdio_init.part.0+0x30>)
 801f69c:	4c0b      	ldr	r4, [pc, #44]	; (801f6cc <global_stdio_init.part.0+0x34>)
 801f69e:	4a0c      	ldr	r2, [pc, #48]	; (801f6d0 <global_stdio_init.part.0+0x38>)
 801f6a0:	601a      	str	r2, [r3, #0]
 801f6a2:	4620      	mov	r0, r4
 801f6a4:	2200      	movs	r2, #0
 801f6a6:	2104      	movs	r1, #4
 801f6a8:	f7ff ff94 	bl	801f5d4 <std>
 801f6ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801f6b0:	2201      	movs	r2, #1
 801f6b2:	2109      	movs	r1, #9
 801f6b4:	f7ff ff8e 	bl	801f5d4 <std>
 801f6b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801f6bc:	2202      	movs	r2, #2
 801f6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f6c2:	2112      	movs	r1, #18
 801f6c4:	f7ff bf86 	b.w	801f5d4 <std>
 801f6c8:	20017064 	.word	0x20017064
 801f6cc:	20016f2c 	.word	0x20016f2c
 801f6d0:	0801f641 	.word	0x0801f641

0801f6d4 <__sfp_lock_acquire>:
 801f6d4:	4801      	ldr	r0, [pc, #4]	; (801f6dc <__sfp_lock_acquire+0x8>)
 801f6d6:	f000 bc08 	b.w	801feea <__retarget_lock_acquire_recursive>
 801f6da:	bf00      	nop
 801f6dc:	2001706e 	.word	0x2001706e

0801f6e0 <__sfp_lock_release>:
 801f6e0:	4801      	ldr	r0, [pc, #4]	; (801f6e8 <__sfp_lock_release+0x8>)
 801f6e2:	f000 bc03 	b.w	801feec <__retarget_lock_release_recursive>
 801f6e6:	bf00      	nop
 801f6e8:	2001706e 	.word	0x2001706e

0801f6ec <__sinit>:
 801f6ec:	b510      	push	{r4, lr}
 801f6ee:	4604      	mov	r4, r0
 801f6f0:	f7ff fff0 	bl	801f6d4 <__sfp_lock_acquire>
 801f6f4:	6a23      	ldr	r3, [r4, #32]
 801f6f6:	b11b      	cbz	r3, 801f700 <__sinit+0x14>
 801f6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f6fc:	f7ff bff0 	b.w	801f6e0 <__sfp_lock_release>
 801f700:	4b04      	ldr	r3, [pc, #16]	; (801f714 <__sinit+0x28>)
 801f702:	6223      	str	r3, [r4, #32]
 801f704:	4b04      	ldr	r3, [pc, #16]	; (801f718 <__sinit+0x2c>)
 801f706:	681b      	ldr	r3, [r3, #0]
 801f708:	2b00      	cmp	r3, #0
 801f70a:	d1f5      	bne.n	801f6f8 <__sinit+0xc>
 801f70c:	f7ff ffc4 	bl	801f698 <global_stdio_init.part.0>
 801f710:	e7f2      	b.n	801f6f8 <__sinit+0xc>
 801f712:	bf00      	nop
 801f714:	0801f659 	.word	0x0801f659
 801f718:	20017064 	.word	0x20017064

0801f71c <_fwalk_sglue>:
 801f71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f720:	4607      	mov	r7, r0
 801f722:	4688      	mov	r8, r1
 801f724:	4614      	mov	r4, r2
 801f726:	2600      	movs	r6, #0
 801f728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f72c:	f1b9 0901 	subs.w	r9, r9, #1
 801f730:	d505      	bpl.n	801f73e <_fwalk_sglue+0x22>
 801f732:	6824      	ldr	r4, [r4, #0]
 801f734:	2c00      	cmp	r4, #0
 801f736:	d1f7      	bne.n	801f728 <_fwalk_sglue+0xc>
 801f738:	4630      	mov	r0, r6
 801f73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f73e:	89ab      	ldrh	r3, [r5, #12]
 801f740:	2b01      	cmp	r3, #1
 801f742:	d907      	bls.n	801f754 <_fwalk_sglue+0x38>
 801f744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f748:	3301      	adds	r3, #1
 801f74a:	d003      	beq.n	801f754 <_fwalk_sglue+0x38>
 801f74c:	4629      	mov	r1, r5
 801f74e:	4638      	mov	r0, r7
 801f750:	47c0      	blx	r8
 801f752:	4306      	orrs	r6, r0
 801f754:	3568      	adds	r5, #104	; 0x68
 801f756:	e7e9      	b.n	801f72c <_fwalk_sglue+0x10>

0801f758 <_fwrite_r>:
 801f758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f75c:	9c08      	ldr	r4, [sp, #32]
 801f75e:	468a      	mov	sl, r1
 801f760:	4690      	mov	r8, r2
 801f762:	fb02 f903 	mul.w	r9, r2, r3
 801f766:	4606      	mov	r6, r0
 801f768:	b118      	cbz	r0, 801f772 <_fwrite_r+0x1a>
 801f76a:	6a03      	ldr	r3, [r0, #32]
 801f76c:	b90b      	cbnz	r3, 801f772 <_fwrite_r+0x1a>
 801f76e:	f7ff ffbd 	bl	801f6ec <__sinit>
 801f772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f774:	07dd      	lsls	r5, r3, #31
 801f776:	d405      	bmi.n	801f784 <_fwrite_r+0x2c>
 801f778:	89a3      	ldrh	r3, [r4, #12]
 801f77a:	0598      	lsls	r0, r3, #22
 801f77c:	d402      	bmi.n	801f784 <_fwrite_r+0x2c>
 801f77e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f780:	f000 fbb3 	bl	801feea <__retarget_lock_acquire_recursive>
 801f784:	89a3      	ldrh	r3, [r4, #12]
 801f786:	0719      	lsls	r1, r3, #28
 801f788:	d516      	bpl.n	801f7b8 <_fwrite_r+0x60>
 801f78a:	6923      	ldr	r3, [r4, #16]
 801f78c:	b1a3      	cbz	r3, 801f7b8 <_fwrite_r+0x60>
 801f78e:	2500      	movs	r5, #0
 801f790:	454d      	cmp	r5, r9
 801f792:	d01f      	beq.n	801f7d4 <_fwrite_r+0x7c>
 801f794:	68a7      	ldr	r7, [r4, #8]
 801f796:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801f79a:	3f01      	subs	r7, #1
 801f79c:	2f00      	cmp	r7, #0
 801f79e:	60a7      	str	r7, [r4, #8]
 801f7a0:	da04      	bge.n	801f7ac <_fwrite_r+0x54>
 801f7a2:	69a3      	ldr	r3, [r4, #24]
 801f7a4:	429f      	cmp	r7, r3
 801f7a6:	db0f      	blt.n	801f7c8 <_fwrite_r+0x70>
 801f7a8:	290a      	cmp	r1, #10
 801f7aa:	d00d      	beq.n	801f7c8 <_fwrite_r+0x70>
 801f7ac:	6823      	ldr	r3, [r4, #0]
 801f7ae:	1c5a      	adds	r2, r3, #1
 801f7b0:	6022      	str	r2, [r4, #0]
 801f7b2:	7019      	strb	r1, [r3, #0]
 801f7b4:	3501      	adds	r5, #1
 801f7b6:	e7eb      	b.n	801f790 <_fwrite_r+0x38>
 801f7b8:	4621      	mov	r1, r4
 801f7ba:	4630      	mov	r0, r6
 801f7bc:	f000 fa50 	bl	801fc60 <__swsetup_r>
 801f7c0:	2800      	cmp	r0, #0
 801f7c2:	d0e4      	beq.n	801f78e <_fwrite_r+0x36>
 801f7c4:	2500      	movs	r5, #0
 801f7c6:	e005      	b.n	801f7d4 <_fwrite_r+0x7c>
 801f7c8:	4622      	mov	r2, r4
 801f7ca:	4630      	mov	r0, r6
 801f7cc:	f000 fa0a 	bl	801fbe4 <__swbuf_r>
 801f7d0:	3001      	adds	r0, #1
 801f7d2:	d1ef      	bne.n	801f7b4 <_fwrite_r+0x5c>
 801f7d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f7d6:	07da      	lsls	r2, r3, #31
 801f7d8:	d405      	bmi.n	801f7e6 <_fwrite_r+0x8e>
 801f7da:	89a3      	ldrh	r3, [r4, #12]
 801f7dc:	059b      	lsls	r3, r3, #22
 801f7de:	d402      	bmi.n	801f7e6 <_fwrite_r+0x8e>
 801f7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7e2:	f000 fb83 	bl	801feec <__retarget_lock_release_recursive>
 801f7e6:	fbb5 f0f8 	udiv	r0, r5, r8
 801f7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801f7f0 <fwrite>:
 801f7f0:	b507      	push	{r0, r1, r2, lr}
 801f7f2:	9300      	str	r3, [sp, #0]
 801f7f4:	4613      	mov	r3, r2
 801f7f6:	460a      	mov	r2, r1
 801f7f8:	4601      	mov	r1, r0
 801f7fa:	4803      	ldr	r0, [pc, #12]	; (801f808 <fwrite+0x18>)
 801f7fc:	6800      	ldr	r0, [r0, #0]
 801f7fe:	f7ff ffab 	bl	801f758 <_fwrite_r>
 801f802:	b003      	add	sp, #12
 801f804:	f85d fb04 	ldr.w	pc, [sp], #4
 801f808:	200009a0 	.word	0x200009a0

0801f80c <iprintf>:
 801f80c:	b40f      	push	{r0, r1, r2, r3}
 801f80e:	b507      	push	{r0, r1, r2, lr}
 801f810:	4906      	ldr	r1, [pc, #24]	; (801f82c <iprintf+0x20>)
 801f812:	ab04      	add	r3, sp, #16
 801f814:	6808      	ldr	r0, [r1, #0]
 801f816:	f853 2b04 	ldr.w	r2, [r3], #4
 801f81a:	6881      	ldr	r1, [r0, #8]
 801f81c:	9301      	str	r3, [sp, #4]
 801f81e:	f002 fe79 	bl	8022514 <_vfiprintf_r>
 801f822:	b003      	add	sp, #12
 801f824:	f85d eb04 	ldr.w	lr, [sp], #4
 801f828:	b004      	add	sp, #16
 801f82a:	4770      	bx	lr
 801f82c:	200009a0 	.word	0x200009a0

0801f830 <_puts_r>:
 801f830:	6a03      	ldr	r3, [r0, #32]
 801f832:	b570      	push	{r4, r5, r6, lr}
 801f834:	6884      	ldr	r4, [r0, #8]
 801f836:	4605      	mov	r5, r0
 801f838:	460e      	mov	r6, r1
 801f83a:	b90b      	cbnz	r3, 801f840 <_puts_r+0x10>
 801f83c:	f7ff ff56 	bl	801f6ec <__sinit>
 801f840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f842:	07db      	lsls	r3, r3, #31
 801f844:	d405      	bmi.n	801f852 <_puts_r+0x22>
 801f846:	89a3      	ldrh	r3, [r4, #12]
 801f848:	0598      	lsls	r0, r3, #22
 801f84a:	d402      	bmi.n	801f852 <_puts_r+0x22>
 801f84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f84e:	f000 fb4c 	bl	801feea <__retarget_lock_acquire_recursive>
 801f852:	89a3      	ldrh	r3, [r4, #12]
 801f854:	0719      	lsls	r1, r3, #28
 801f856:	d513      	bpl.n	801f880 <_puts_r+0x50>
 801f858:	6923      	ldr	r3, [r4, #16]
 801f85a:	b18b      	cbz	r3, 801f880 <_puts_r+0x50>
 801f85c:	3e01      	subs	r6, #1
 801f85e:	68a3      	ldr	r3, [r4, #8]
 801f860:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f864:	3b01      	subs	r3, #1
 801f866:	60a3      	str	r3, [r4, #8]
 801f868:	b9e9      	cbnz	r1, 801f8a6 <_puts_r+0x76>
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	da2e      	bge.n	801f8cc <_puts_r+0x9c>
 801f86e:	4622      	mov	r2, r4
 801f870:	210a      	movs	r1, #10
 801f872:	4628      	mov	r0, r5
 801f874:	f000 f9b6 	bl	801fbe4 <__swbuf_r>
 801f878:	3001      	adds	r0, #1
 801f87a:	d007      	beq.n	801f88c <_puts_r+0x5c>
 801f87c:	250a      	movs	r5, #10
 801f87e:	e007      	b.n	801f890 <_puts_r+0x60>
 801f880:	4621      	mov	r1, r4
 801f882:	4628      	mov	r0, r5
 801f884:	f000 f9ec 	bl	801fc60 <__swsetup_r>
 801f888:	2800      	cmp	r0, #0
 801f88a:	d0e7      	beq.n	801f85c <_puts_r+0x2c>
 801f88c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f892:	07da      	lsls	r2, r3, #31
 801f894:	d405      	bmi.n	801f8a2 <_puts_r+0x72>
 801f896:	89a3      	ldrh	r3, [r4, #12]
 801f898:	059b      	lsls	r3, r3, #22
 801f89a:	d402      	bmi.n	801f8a2 <_puts_r+0x72>
 801f89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f89e:	f000 fb25 	bl	801feec <__retarget_lock_release_recursive>
 801f8a2:	4628      	mov	r0, r5
 801f8a4:	bd70      	pop	{r4, r5, r6, pc}
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	da04      	bge.n	801f8b4 <_puts_r+0x84>
 801f8aa:	69a2      	ldr	r2, [r4, #24]
 801f8ac:	429a      	cmp	r2, r3
 801f8ae:	dc06      	bgt.n	801f8be <_puts_r+0x8e>
 801f8b0:	290a      	cmp	r1, #10
 801f8b2:	d004      	beq.n	801f8be <_puts_r+0x8e>
 801f8b4:	6823      	ldr	r3, [r4, #0]
 801f8b6:	1c5a      	adds	r2, r3, #1
 801f8b8:	6022      	str	r2, [r4, #0]
 801f8ba:	7019      	strb	r1, [r3, #0]
 801f8bc:	e7cf      	b.n	801f85e <_puts_r+0x2e>
 801f8be:	4622      	mov	r2, r4
 801f8c0:	4628      	mov	r0, r5
 801f8c2:	f000 f98f 	bl	801fbe4 <__swbuf_r>
 801f8c6:	3001      	adds	r0, #1
 801f8c8:	d1c9      	bne.n	801f85e <_puts_r+0x2e>
 801f8ca:	e7df      	b.n	801f88c <_puts_r+0x5c>
 801f8cc:	6823      	ldr	r3, [r4, #0]
 801f8ce:	250a      	movs	r5, #10
 801f8d0:	1c5a      	adds	r2, r3, #1
 801f8d2:	6022      	str	r2, [r4, #0]
 801f8d4:	701d      	strb	r5, [r3, #0]
 801f8d6:	e7db      	b.n	801f890 <_puts_r+0x60>

0801f8d8 <puts>:
 801f8d8:	4b02      	ldr	r3, [pc, #8]	; (801f8e4 <puts+0xc>)
 801f8da:	4601      	mov	r1, r0
 801f8dc:	6818      	ldr	r0, [r3, #0]
 801f8de:	f7ff bfa7 	b.w	801f830 <_puts_r>
 801f8e2:	bf00      	nop
 801f8e4:	200009a0 	.word	0x200009a0

0801f8e8 <setvbuf>:
 801f8e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f8ec:	461d      	mov	r5, r3
 801f8ee:	4b54      	ldr	r3, [pc, #336]	; (801fa40 <setvbuf+0x158>)
 801f8f0:	681f      	ldr	r7, [r3, #0]
 801f8f2:	4604      	mov	r4, r0
 801f8f4:	460e      	mov	r6, r1
 801f8f6:	4690      	mov	r8, r2
 801f8f8:	b127      	cbz	r7, 801f904 <setvbuf+0x1c>
 801f8fa:	6a3b      	ldr	r3, [r7, #32]
 801f8fc:	b913      	cbnz	r3, 801f904 <setvbuf+0x1c>
 801f8fe:	4638      	mov	r0, r7
 801f900:	f7ff fef4 	bl	801f6ec <__sinit>
 801f904:	f1b8 0f02 	cmp.w	r8, #2
 801f908:	d006      	beq.n	801f918 <setvbuf+0x30>
 801f90a:	f1b8 0f01 	cmp.w	r8, #1
 801f90e:	f200 8094 	bhi.w	801fa3a <setvbuf+0x152>
 801f912:	2d00      	cmp	r5, #0
 801f914:	f2c0 8091 	blt.w	801fa3a <setvbuf+0x152>
 801f918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f91a:	07da      	lsls	r2, r3, #31
 801f91c:	d405      	bmi.n	801f92a <setvbuf+0x42>
 801f91e:	89a3      	ldrh	r3, [r4, #12]
 801f920:	059b      	lsls	r3, r3, #22
 801f922:	d402      	bmi.n	801f92a <setvbuf+0x42>
 801f924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f926:	f000 fae0 	bl	801feea <__retarget_lock_acquire_recursive>
 801f92a:	4621      	mov	r1, r4
 801f92c:	4638      	mov	r0, r7
 801f92e:	f002 ff91 	bl	8022854 <_fflush_r>
 801f932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f934:	b141      	cbz	r1, 801f948 <setvbuf+0x60>
 801f936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f93a:	4299      	cmp	r1, r3
 801f93c:	d002      	beq.n	801f944 <setvbuf+0x5c>
 801f93e:	4638      	mov	r0, r7
 801f940:	f001 f912 	bl	8020b68 <_free_r>
 801f944:	2300      	movs	r3, #0
 801f946:	6363      	str	r3, [r4, #52]	; 0x34
 801f948:	2300      	movs	r3, #0
 801f94a:	61a3      	str	r3, [r4, #24]
 801f94c:	6063      	str	r3, [r4, #4]
 801f94e:	89a3      	ldrh	r3, [r4, #12]
 801f950:	0618      	lsls	r0, r3, #24
 801f952:	d503      	bpl.n	801f95c <setvbuf+0x74>
 801f954:	6921      	ldr	r1, [r4, #16]
 801f956:	4638      	mov	r0, r7
 801f958:	f001 f906 	bl	8020b68 <_free_r>
 801f95c:	89a3      	ldrh	r3, [r4, #12]
 801f95e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801f962:	f023 0303 	bic.w	r3, r3, #3
 801f966:	f1b8 0f02 	cmp.w	r8, #2
 801f96a:	81a3      	strh	r3, [r4, #12]
 801f96c:	d05f      	beq.n	801fa2e <setvbuf+0x146>
 801f96e:	ab01      	add	r3, sp, #4
 801f970:	466a      	mov	r2, sp
 801f972:	4621      	mov	r1, r4
 801f974:	4638      	mov	r0, r7
 801f976:	f002 ffa7 	bl	80228c8 <__swhatbuf_r>
 801f97a:	89a3      	ldrh	r3, [r4, #12]
 801f97c:	4318      	orrs	r0, r3
 801f97e:	81a0      	strh	r0, [r4, #12]
 801f980:	bb2d      	cbnz	r5, 801f9ce <setvbuf+0xe6>
 801f982:	9d00      	ldr	r5, [sp, #0]
 801f984:	4628      	mov	r0, r5
 801f986:	f7fe fe09 	bl	801e59c <malloc>
 801f98a:	4606      	mov	r6, r0
 801f98c:	2800      	cmp	r0, #0
 801f98e:	d150      	bne.n	801fa32 <setvbuf+0x14a>
 801f990:	f8dd 9000 	ldr.w	r9, [sp]
 801f994:	45a9      	cmp	r9, r5
 801f996:	d13e      	bne.n	801fa16 <setvbuf+0x12e>
 801f998:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f99c:	2200      	movs	r2, #0
 801f99e:	60a2      	str	r2, [r4, #8]
 801f9a0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801f9a4:	6022      	str	r2, [r4, #0]
 801f9a6:	6122      	str	r2, [r4, #16]
 801f9a8:	2201      	movs	r2, #1
 801f9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f9ae:	6162      	str	r2, [r4, #20]
 801f9b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f9b2:	f043 0302 	orr.w	r3, r3, #2
 801f9b6:	07d1      	lsls	r1, r2, #31
 801f9b8:	81a3      	strh	r3, [r4, #12]
 801f9ba:	d404      	bmi.n	801f9c6 <setvbuf+0xde>
 801f9bc:	059b      	lsls	r3, r3, #22
 801f9be:	d402      	bmi.n	801f9c6 <setvbuf+0xde>
 801f9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f9c2:	f000 fa93 	bl	801feec <__retarget_lock_release_recursive>
 801f9c6:	4628      	mov	r0, r5
 801f9c8:	b003      	add	sp, #12
 801f9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f9ce:	2e00      	cmp	r6, #0
 801f9d0:	d0d8      	beq.n	801f984 <setvbuf+0x9c>
 801f9d2:	6a3b      	ldr	r3, [r7, #32]
 801f9d4:	b913      	cbnz	r3, 801f9dc <setvbuf+0xf4>
 801f9d6:	4638      	mov	r0, r7
 801f9d8:	f7ff fe88 	bl	801f6ec <__sinit>
 801f9dc:	f1b8 0f01 	cmp.w	r8, #1
 801f9e0:	bf08      	it	eq
 801f9e2:	89a3      	ldrheq	r3, [r4, #12]
 801f9e4:	6026      	str	r6, [r4, #0]
 801f9e6:	bf04      	itt	eq
 801f9e8:	f043 0301 	orreq.w	r3, r3, #1
 801f9ec:	81a3      	strheq	r3, [r4, #12]
 801f9ee:	89a3      	ldrh	r3, [r4, #12]
 801f9f0:	f013 0208 	ands.w	r2, r3, #8
 801f9f4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801f9f8:	d01d      	beq.n	801fa36 <setvbuf+0x14e>
 801f9fa:	07da      	lsls	r2, r3, #31
 801f9fc:	bf41      	itttt	mi
 801f9fe:	2200      	movmi	r2, #0
 801fa00:	426d      	negmi	r5, r5
 801fa02:	60a2      	strmi	r2, [r4, #8]
 801fa04:	61a5      	strmi	r5, [r4, #24]
 801fa06:	bf58      	it	pl
 801fa08:	60a5      	strpl	r5, [r4, #8]
 801fa0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801fa0c:	f015 0501 	ands.w	r5, r5, #1
 801fa10:	d0d4      	beq.n	801f9bc <setvbuf+0xd4>
 801fa12:	2500      	movs	r5, #0
 801fa14:	e7d7      	b.n	801f9c6 <setvbuf+0xde>
 801fa16:	4648      	mov	r0, r9
 801fa18:	f7fe fdc0 	bl	801e59c <malloc>
 801fa1c:	4606      	mov	r6, r0
 801fa1e:	2800      	cmp	r0, #0
 801fa20:	d0ba      	beq.n	801f998 <setvbuf+0xb0>
 801fa22:	89a3      	ldrh	r3, [r4, #12]
 801fa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fa28:	81a3      	strh	r3, [r4, #12]
 801fa2a:	464d      	mov	r5, r9
 801fa2c:	e7d1      	b.n	801f9d2 <setvbuf+0xea>
 801fa2e:	2500      	movs	r5, #0
 801fa30:	e7b4      	b.n	801f99c <setvbuf+0xb4>
 801fa32:	46a9      	mov	r9, r5
 801fa34:	e7f5      	b.n	801fa22 <setvbuf+0x13a>
 801fa36:	60a2      	str	r2, [r4, #8]
 801fa38:	e7e7      	b.n	801fa0a <setvbuf+0x122>
 801fa3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801fa3e:	e7c2      	b.n	801f9c6 <setvbuf+0xde>
 801fa40:	200009a0 	.word	0x200009a0

0801fa44 <sniprintf>:
 801fa44:	b40c      	push	{r2, r3}
 801fa46:	b530      	push	{r4, r5, lr}
 801fa48:	4b17      	ldr	r3, [pc, #92]	; (801faa8 <sniprintf+0x64>)
 801fa4a:	1e0c      	subs	r4, r1, #0
 801fa4c:	681d      	ldr	r5, [r3, #0]
 801fa4e:	b09d      	sub	sp, #116	; 0x74
 801fa50:	da08      	bge.n	801fa64 <sniprintf+0x20>
 801fa52:	238b      	movs	r3, #139	; 0x8b
 801fa54:	602b      	str	r3, [r5, #0]
 801fa56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fa5a:	b01d      	add	sp, #116	; 0x74
 801fa5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fa60:	b002      	add	sp, #8
 801fa62:	4770      	bx	lr
 801fa64:	f44f 7302 	mov.w	r3, #520	; 0x208
 801fa68:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fa6c:	bf14      	ite	ne
 801fa6e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801fa72:	4623      	moveq	r3, r4
 801fa74:	9304      	str	r3, [sp, #16]
 801fa76:	9307      	str	r3, [sp, #28]
 801fa78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fa7c:	9002      	str	r0, [sp, #8]
 801fa7e:	9006      	str	r0, [sp, #24]
 801fa80:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fa84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fa86:	ab21      	add	r3, sp, #132	; 0x84
 801fa88:	a902      	add	r1, sp, #8
 801fa8a:	4628      	mov	r0, r5
 801fa8c:	9301      	str	r3, [sp, #4]
 801fa8e:	f002 fc19 	bl	80222c4 <_svfiprintf_r>
 801fa92:	1c43      	adds	r3, r0, #1
 801fa94:	bfbc      	itt	lt
 801fa96:	238b      	movlt	r3, #139	; 0x8b
 801fa98:	602b      	strlt	r3, [r5, #0]
 801fa9a:	2c00      	cmp	r4, #0
 801fa9c:	d0dd      	beq.n	801fa5a <sniprintf+0x16>
 801fa9e:	9b02      	ldr	r3, [sp, #8]
 801faa0:	2200      	movs	r2, #0
 801faa2:	701a      	strb	r2, [r3, #0]
 801faa4:	e7d9      	b.n	801fa5a <sniprintf+0x16>
 801faa6:	bf00      	nop
 801faa8:	200009a0 	.word	0x200009a0

0801faac <siprintf>:
 801faac:	b40e      	push	{r1, r2, r3}
 801faae:	b500      	push	{lr}
 801fab0:	b09c      	sub	sp, #112	; 0x70
 801fab2:	ab1d      	add	r3, sp, #116	; 0x74
 801fab4:	9002      	str	r0, [sp, #8]
 801fab6:	9006      	str	r0, [sp, #24]
 801fab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fabc:	4809      	ldr	r0, [pc, #36]	; (801fae4 <siprintf+0x38>)
 801fabe:	9107      	str	r1, [sp, #28]
 801fac0:	9104      	str	r1, [sp, #16]
 801fac2:	4909      	ldr	r1, [pc, #36]	; (801fae8 <siprintf+0x3c>)
 801fac4:	f853 2b04 	ldr.w	r2, [r3], #4
 801fac8:	9105      	str	r1, [sp, #20]
 801faca:	6800      	ldr	r0, [r0, #0]
 801facc:	9301      	str	r3, [sp, #4]
 801face:	a902      	add	r1, sp, #8
 801fad0:	f002 fbf8 	bl	80222c4 <_svfiprintf_r>
 801fad4:	9b02      	ldr	r3, [sp, #8]
 801fad6:	2200      	movs	r2, #0
 801fad8:	701a      	strb	r2, [r3, #0]
 801fada:	b01c      	add	sp, #112	; 0x70
 801fadc:	f85d eb04 	ldr.w	lr, [sp], #4
 801fae0:	b003      	add	sp, #12
 801fae2:	4770      	bx	lr
 801fae4:	200009a0 	.word	0x200009a0
 801fae8:	ffff0208 	.word	0xffff0208

0801faec <__sread>:
 801faec:	b510      	push	{r4, lr}
 801faee:	460c      	mov	r4, r1
 801faf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801faf4:	f000 f99a 	bl	801fe2c <_read_r>
 801faf8:	2800      	cmp	r0, #0
 801fafa:	bfab      	itete	ge
 801fafc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fafe:	89a3      	ldrhlt	r3, [r4, #12]
 801fb00:	181b      	addge	r3, r3, r0
 801fb02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fb06:	bfac      	ite	ge
 801fb08:	6563      	strge	r3, [r4, #84]	; 0x54
 801fb0a:	81a3      	strhlt	r3, [r4, #12]
 801fb0c:	bd10      	pop	{r4, pc}

0801fb0e <__swrite>:
 801fb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb12:	461f      	mov	r7, r3
 801fb14:	898b      	ldrh	r3, [r1, #12]
 801fb16:	05db      	lsls	r3, r3, #23
 801fb18:	4605      	mov	r5, r0
 801fb1a:	460c      	mov	r4, r1
 801fb1c:	4616      	mov	r6, r2
 801fb1e:	d505      	bpl.n	801fb2c <__swrite+0x1e>
 801fb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb24:	2302      	movs	r3, #2
 801fb26:	2200      	movs	r2, #0
 801fb28:	f000 f96e 	bl	801fe08 <_lseek_r>
 801fb2c:	89a3      	ldrh	r3, [r4, #12]
 801fb2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fb32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fb36:	81a3      	strh	r3, [r4, #12]
 801fb38:	4632      	mov	r2, r6
 801fb3a:	463b      	mov	r3, r7
 801fb3c:	4628      	mov	r0, r5
 801fb3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fb42:	f000 b995 	b.w	801fe70 <_write_r>

0801fb46 <__sseek>:
 801fb46:	b510      	push	{r4, lr}
 801fb48:	460c      	mov	r4, r1
 801fb4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb4e:	f000 f95b 	bl	801fe08 <_lseek_r>
 801fb52:	1c43      	adds	r3, r0, #1
 801fb54:	89a3      	ldrh	r3, [r4, #12]
 801fb56:	bf15      	itete	ne
 801fb58:	6560      	strne	r0, [r4, #84]	; 0x54
 801fb5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fb5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fb62:	81a3      	strheq	r3, [r4, #12]
 801fb64:	bf18      	it	ne
 801fb66:	81a3      	strhne	r3, [r4, #12]
 801fb68:	bd10      	pop	{r4, pc}

0801fb6a <__sclose>:
 801fb6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb6e:	f000 b93b 	b.w	801fde8 <_close_r>

0801fb72 <_vsniprintf_r>:
 801fb72:	b530      	push	{r4, r5, lr}
 801fb74:	4614      	mov	r4, r2
 801fb76:	2c00      	cmp	r4, #0
 801fb78:	b09b      	sub	sp, #108	; 0x6c
 801fb7a:	4605      	mov	r5, r0
 801fb7c:	461a      	mov	r2, r3
 801fb7e:	da05      	bge.n	801fb8c <_vsniprintf_r+0x1a>
 801fb80:	238b      	movs	r3, #139	; 0x8b
 801fb82:	6003      	str	r3, [r0, #0]
 801fb84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb88:	b01b      	add	sp, #108	; 0x6c
 801fb8a:	bd30      	pop	{r4, r5, pc}
 801fb8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801fb90:	f8ad 300c 	strh.w	r3, [sp, #12]
 801fb94:	bf14      	ite	ne
 801fb96:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801fb9a:	4623      	moveq	r3, r4
 801fb9c:	9302      	str	r3, [sp, #8]
 801fb9e:	9305      	str	r3, [sp, #20]
 801fba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fba4:	9100      	str	r1, [sp, #0]
 801fba6:	9104      	str	r1, [sp, #16]
 801fba8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fbac:	4669      	mov	r1, sp
 801fbae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fbb0:	f002 fb88 	bl	80222c4 <_svfiprintf_r>
 801fbb4:	1c43      	adds	r3, r0, #1
 801fbb6:	bfbc      	itt	lt
 801fbb8:	238b      	movlt	r3, #139	; 0x8b
 801fbba:	602b      	strlt	r3, [r5, #0]
 801fbbc:	2c00      	cmp	r4, #0
 801fbbe:	d0e3      	beq.n	801fb88 <_vsniprintf_r+0x16>
 801fbc0:	9b00      	ldr	r3, [sp, #0]
 801fbc2:	2200      	movs	r2, #0
 801fbc4:	701a      	strb	r2, [r3, #0]
 801fbc6:	e7df      	b.n	801fb88 <_vsniprintf_r+0x16>

0801fbc8 <vsniprintf>:
 801fbc8:	b507      	push	{r0, r1, r2, lr}
 801fbca:	9300      	str	r3, [sp, #0]
 801fbcc:	4613      	mov	r3, r2
 801fbce:	460a      	mov	r2, r1
 801fbd0:	4601      	mov	r1, r0
 801fbd2:	4803      	ldr	r0, [pc, #12]	; (801fbe0 <vsniprintf+0x18>)
 801fbd4:	6800      	ldr	r0, [r0, #0]
 801fbd6:	f7ff ffcc 	bl	801fb72 <_vsniprintf_r>
 801fbda:	b003      	add	sp, #12
 801fbdc:	f85d fb04 	ldr.w	pc, [sp], #4
 801fbe0:	200009a0 	.word	0x200009a0

0801fbe4 <__swbuf_r>:
 801fbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbe6:	460e      	mov	r6, r1
 801fbe8:	4614      	mov	r4, r2
 801fbea:	4605      	mov	r5, r0
 801fbec:	b118      	cbz	r0, 801fbf6 <__swbuf_r+0x12>
 801fbee:	6a03      	ldr	r3, [r0, #32]
 801fbf0:	b90b      	cbnz	r3, 801fbf6 <__swbuf_r+0x12>
 801fbf2:	f7ff fd7b 	bl	801f6ec <__sinit>
 801fbf6:	69a3      	ldr	r3, [r4, #24]
 801fbf8:	60a3      	str	r3, [r4, #8]
 801fbfa:	89a3      	ldrh	r3, [r4, #12]
 801fbfc:	071a      	lsls	r2, r3, #28
 801fbfe:	d525      	bpl.n	801fc4c <__swbuf_r+0x68>
 801fc00:	6923      	ldr	r3, [r4, #16]
 801fc02:	b31b      	cbz	r3, 801fc4c <__swbuf_r+0x68>
 801fc04:	6823      	ldr	r3, [r4, #0]
 801fc06:	6922      	ldr	r2, [r4, #16]
 801fc08:	1a98      	subs	r0, r3, r2
 801fc0a:	6963      	ldr	r3, [r4, #20]
 801fc0c:	b2f6      	uxtb	r6, r6
 801fc0e:	4283      	cmp	r3, r0
 801fc10:	4637      	mov	r7, r6
 801fc12:	dc04      	bgt.n	801fc1e <__swbuf_r+0x3a>
 801fc14:	4621      	mov	r1, r4
 801fc16:	4628      	mov	r0, r5
 801fc18:	f002 fe1c 	bl	8022854 <_fflush_r>
 801fc1c:	b9e0      	cbnz	r0, 801fc58 <__swbuf_r+0x74>
 801fc1e:	68a3      	ldr	r3, [r4, #8]
 801fc20:	3b01      	subs	r3, #1
 801fc22:	60a3      	str	r3, [r4, #8]
 801fc24:	6823      	ldr	r3, [r4, #0]
 801fc26:	1c5a      	adds	r2, r3, #1
 801fc28:	6022      	str	r2, [r4, #0]
 801fc2a:	701e      	strb	r6, [r3, #0]
 801fc2c:	6962      	ldr	r2, [r4, #20]
 801fc2e:	1c43      	adds	r3, r0, #1
 801fc30:	429a      	cmp	r2, r3
 801fc32:	d004      	beq.n	801fc3e <__swbuf_r+0x5a>
 801fc34:	89a3      	ldrh	r3, [r4, #12]
 801fc36:	07db      	lsls	r3, r3, #31
 801fc38:	d506      	bpl.n	801fc48 <__swbuf_r+0x64>
 801fc3a:	2e0a      	cmp	r6, #10
 801fc3c:	d104      	bne.n	801fc48 <__swbuf_r+0x64>
 801fc3e:	4621      	mov	r1, r4
 801fc40:	4628      	mov	r0, r5
 801fc42:	f002 fe07 	bl	8022854 <_fflush_r>
 801fc46:	b938      	cbnz	r0, 801fc58 <__swbuf_r+0x74>
 801fc48:	4638      	mov	r0, r7
 801fc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc4c:	4621      	mov	r1, r4
 801fc4e:	4628      	mov	r0, r5
 801fc50:	f000 f806 	bl	801fc60 <__swsetup_r>
 801fc54:	2800      	cmp	r0, #0
 801fc56:	d0d5      	beq.n	801fc04 <__swbuf_r+0x20>
 801fc58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fc5c:	e7f4      	b.n	801fc48 <__swbuf_r+0x64>
	...

0801fc60 <__swsetup_r>:
 801fc60:	b538      	push	{r3, r4, r5, lr}
 801fc62:	4b2a      	ldr	r3, [pc, #168]	; (801fd0c <__swsetup_r+0xac>)
 801fc64:	4605      	mov	r5, r0
 801fc66:	6818      	ldr	r0, [r3, #0]
 801fc68:	460c      	mov	r4, r1
 801fc6a:	b118      	cbz	r0, 801fc74 <__swsetup_r+0x14>
 801fc6c:	6a03      	ldr	r3, [r0, #32]
 801fc6e:	b90b      	cbnz	r3, 801fc74 <__swsetup_r+0x14>
 801fc70:	f7ff fd3c 	bl	801f6ec <__sinit>
 801fc74:	89a3      	ldrh	r3, [r4, #12]
 801fc76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fc7a:	0718      	lsls	r0, r3, #28
 801fc7c:	d422      	bmi.n	801fcc4 <__swsetup_r+0x64>
 801fc7e:	06d9      	lsls	r1, r3, #27
 801fc80:	d407      	bmi.n	801fc92 <__swsetup_r+0x32>
 801fc82:	2309      	movs	r3, #9
 801fc84:	602b      	str	r3, [r5, #0]
 801fc86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fc8a:	81a3      	strh	r3, [r4, #12]
 801fc8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fc90:	e034      	b.n	801fcfc <__swsetup_r+0x9c>
 801fc92:	0758      	lsls	r0, r3, #29
 801fc94:	d512      	bpl.n	801fcbc <__swsetup_r+0x5c>
 801fc96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc98:	b141      	cbz	r1, 801fcac <__swsetup_r+0x4c>
 801fc9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc9e:	4299      	cmp	r1, r3
 801fca0:	d002      	beq.n	801fca8 <__swsetup_r+0x48>
 801fca2:	4628      	mov	r0, r5
 801fca4:	f000 ff60 	bl	8020b68 <_free_r>
 801fca8:	2300      	movs	r3, #0
 801fcaa:	6363      	str	r3, [r4, #52]	; 0x34
 801fcac:	89a3      	ldrh	r3, [r4, #12]
 801fcae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fcb2:	81a3      	strh	r3, [r4, #12]
 801fcb4:	2300      	movs	r3, #0
 801fcb6:	6063      	str	r3, [r4, #4]
 801fcb8:	6923      	ldr	r3, [r4, #16]
 801fcba:	6023      	str	r3, [r4, #0]
 801fcbc:	89a3      	ldrh	r3, [r4, #12]
 801fcbe:	f043 0308 	orr.w	r3, r3, #8
 801fcc2:	81a3      	strh	r3, [r4, #12]
 801fcc4:	6923      	ldr	r3, [r4, #16]
 801fcc6:	b94b      	cbnz	r3, 801fcdc <__swsetup_r+0x7c>
 801fcc8:	89a3      	ldrh	r3, [r4, #12]
 801fcca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fcce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fcd2:	d003      	beq.n	801fcdc <__swsetup_r+0x7c>
 801fcd4:	4621      	mov	r1, r4
 801fcd6:	4628      	mov	r0, r5
 801fcd8:	f002 fe1c 	bl	8022914 <__smakebuf_r>
 801fcdc:	89a0      	ldrh	r0, [r4, #12]
 801fcde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fce2:	f010 0301 	ands.w	r3, r0, #1
 801fce6:	d00a      	beq.n	801fcfe <__swsetup_r+0x9e>
 801fce8:	2300      	movs	r3, #0
 801fcea:	60a3      	str	r3, [r4, #8]
 801fcec:	6963      	ldr	r3, [r4, #20]
 801fcee:	425b      	negs	r3, r3
 801fcf0:	61a3      	str	r3, [r4, #24]
 801fcf2:	6923      	ldr	r3, [r4, #16]
 801fcf4:	b943      	cbnz	r3, 801fd08 <__swsetup_r+0xa8>
 801fcf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fcfa:	d1c4      	bne.n	801fc86 <__swsetup_r+0x26>
 801fcfc:	bd38      	pop	{r3, r4, r5, pc}
 801fcfe:	0781      	lsls	r1, r0, #30
 801fd00:	bf58      	it	pl
 801fd02:	6963      	ldrpl	r3, [r4, #20]
 801fd04:	60a3      	str	r3, [r4, #8]
 801fd06:	e7f4      	b.n	801fcf2 <__swsetup_r+0x92>
 801fd08:	2000      	movs	r0, #0
 801fd0a:	e7f7      	b.n	801fcfc <__swsetup_r+0x9c>
 801fd0c:	200009a0 	.word	0x200009a0

0801fd10 <memcmp>:
 801fd10:	b510      	push	{r4, lr}
 801fd12:	3901      	subs	r1, #1
 801fd14:	4402      	add	r2, r0
 801fd16:	4290      	cmp	r0, r2
 801fd18:	d101      	bne.n	801fd1e <memcmp+0xe>
 801fd1a:	2000      	movs	r0, #0
 801fd1c:	e005      	b.n	801fd2a <memcmp+0x1a>
 801fd1e:	7803      	ldrb	r3, [r0, #0]
 801fd20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fd24:	42a3      	cmp	r3, r4
 801fd26:	d001      	beq.n	801fd2c <memcmp+0x1c>
 801fd28:	1b18      	subs	r0, r3, r4
 801fd2a:	bd10      	pop	{r4, pc}
 801fd2c:	3001      	adds	r0, #1
 801fd2e:	e7f2      	b.n	801fd16 <memcmp+0x6>

0801fd30 <memmove>:
 801fd30:	4288      	cmp	r0, r1
 801fd32:	b510      	push	{r4, lr}
 801fd34:	eb01 0402 	add.w	r4, r1, r2
 801fd38:	d902      	bls.n	801fd40 <memmove+0x10>
 801fd3a:	4284      	cmp	r4, r0
 801fd3c:	4623      	mov	r3, r4
 801fd3e:	d807      	bhi.n	801fd50 <memmove+0x20>
 801fd40:	1e43      	subs	r3, r0, #1
 801fd42:	42a1      	cmp	r1, r4
 801fd44:	d008      	beq.n	801fd58 <memmove+0x28>
 801fd46:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fd4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fd4e:	e7f8      	b.n	801fd42 <memmove+0x12>
 801fd50:	4402      	add	r2, r0
 801fd52:	4601      	mov	r1, r0
 801fd54:	428a      	cmp	r2, r1
 801fd56:	d100      	bne.n	801fd5a <memmove+0x2a>
 801fd58:	bd10      	pop	{r4, pc}
 801fd5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fd5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fd62:	e7f7      	b.n	801fd54 <memmove+0x24>

0801fd64 <memset>:
 801fd64:	4402      	add	r2, r0
 801fd66:	4603      	mov	r3, r0
 801fd68:	4293      	cmp	r3, r2
 801fd6a:	d100      	bne.n	801fd6e <memset+0xa>
 801fd6c:	4770      	bx	lr
 801fd6e:	f803 1b01 	strb.w	r1, [r3], #1
 801fd72:	e7f9      	b.n	801fd68 <memset+0x4>

0801fd74 <strchr>:
 801fd74:	b2c9      	uxtb	r1, r1
 801fd76:	4603      	mov	r3, r0
 801fd78:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd7c:	b11a      	cbz	r2, 801fd86 <strchr+0x12>
 801fd7e:	428a      	cmp	r2, r1
 801fd80:	d1f9      	bne.n	801fd76 <strchr+0x2>
 801fd82:	4618      	mov	r0, r3
 801fd84:	4770      	bx	lr
 801fd86:	2900      	cmp	r1, #0
 801fd88:	bf18      	it	ne
 801fd8a:	2300      	movne	r3, #0
 801fd8c:	e7f9      	b.n	801fd82 <strchr+0xe>

0801fd8e <strncmp>:
 801fd8e:	b510      	push	{r4, lr}
 801fd90:	b16a      	cbz	r2, 801fdae <strncmp+0x20>
 801fd92:	3901      	subs	r1, #1
 801fd94:	1884      	adds	r4, r0, r2
 801fd96:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801fd9e:	429a      	cmp	r2, r3
 801fda0:	d103      	bne.n	801fdaa <strncmp+0x1c>
 801fda2:	42a0      	cmp	r0, r4
 801fda4:	d001      	beq.n	801fdaa <strncmp+0x1c>
 801fda6:	2a00      	cmp	r2, #0
 801fda8:	d1f5      	bne.n	801fd96 <strncmp+0x8>
 801fdaa:	1ad0      	subs	r0, r2, r3
 801fdac:	bd10      	pop	{r4, pc}
 801fdae:	4610      	mov	r0, r2
 801fdb0:	e7fc      	b.n	801fdac <strncmp+0x1e>

0801fdb2 <strstr>:
 801fdb2:	780a      	ldrb	r2, [r1, #0]
 801fdb4:	b570      	push	{r4, r5, r6, lr}
 801fdb6:	b96a      	cbnz	r2, 801fdd4 <strstr+0x22>
 801fdb8:	bd70      	pop	{r4, r5, r6, pc}
 801fdba:	429a      	cmp	r2, r3
 801fdbc:	d109      	bne.n	801fdd2 <strstr+0x20>
 801fdbe:	460c      	mov	r4, r1
 801fdc0:	4605      	mov	r5, r0
 801fdc2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	d0f6      	beq.n	801fdb8 <strstr+0x6>
 801fdca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801fdce:	429e      	cmp	r6, r3
 801fdd0:	d0f7      	beq.n	801fdc2 <strstr+0x10>
 801fdd2:	3001      	adds	r0, #1
 801fdd4:	7803      	ldrb	r3, [r0, #0]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d1ef      	bne.n	801fdba <strstr+0x8>
 801fdda:	4618      	mov	r0, r3
 801fddc:	e7ec      	b.n	801fdb8 <strstr+0x6>
	...

0801fde0 <_localeconv_r>:
 801fde0:	4800      	ldr	r0, [pc, #0]	; (801fde4 <_localeconv_r+0x4>)
 801fde2:	4770      	bx	lr
 801fde4:	20000a94 	.word	0x20000a94

0801fde8 <_close_r>:
 801fde8:	b538      	push	{r3, r4, r5, lr}
 801fdea:	4d06      	ldr	r5, [pc, #24]	; (801fe04 <_close_r+0x1c>)
 801fdec:	2300      	movs	r3, #0
 801fdee:	4604      	mov	r4, r0
 801fdf0:	4608      	mov	r0, r1
 801fdf2:	602b      	str	r3, [r5, #0]
 801fdf4:	f7e2 ff87 	bl	8002d06 <_close>
 801fdf8:	1c43      	adds	r3, r0, #1
 801fdfa:	d102      	bne.n	801fe02 <_close_r+0x1a>
 801fdfc:	682b      	ldr	r3, [r5, #0]
 801fdfe:	b103      	cbz	r3, 801fe02 <_close_r+0x1a>
 801fe00:	6023      	str	r3, [r4, #0]
 801fe02:	bd38      	pop	{r3, r4, r5, pc}
 801fe04:	20017068 	.word	0x20017068

0801fe08 <_lseek_r>:
 801fe08:	b538      	push	{r3, r4, r5, lr}
 801fe0a:	4d07      	ldr	r5, [pc, #28]	; (801fe28 <_lseek_r+0x20>)
 801fe0c:	4604      	mov	r4, r0
 801fe0e:	4608      	mov	r0, r1
 801fe10:	4611      	mov	r1, r2
 801fe12:	2200      	movs	r2, #0
 801fe14:	602a      	str	r2, [r5, #0]
 801fe16:	461a      	mov	r2, r3
 801fe18:	f7e2 ff9c 	bl	8002d54 <_lseek>
 801fe1c:	1c43      	adds	r3, r0, #1
 801fe1e:	d102      	bne.n	801fe26 <_lseek_r+0x1e>
 801fe20:	682b      	ldr	r3, [r5, #0]
 801fe22:	b103      	cbz	r3, 801fe26 <_lseek_r+0x1e>
 801fe24:	6023      	str	r3, [r4, #0]
 801fe26:	bd38      	pop	{r3, r4, r5, pc}
 801fe28:	20017068 	.word	0x20017068

0801fe2c <_read_r>:
 801fe2c:	b538      	push	{r3, r4, r5, lr}
 801fe2e:	4d07      	ldr	r5, [pc, #28]	; (801fe4c <_read_r+0x20>)
 801fe30:	4604      	mov	r4, r0
 801fe32:	4608      	mov	r0, r1
 801fe34:	4611      	mov	r1, r2
 801fe36:	2200      	movs	r2, #0
 801fe38:	602a      	str	r2, [r5, #0]
 801fe3a:	461a      	mov	r2, r3
 801fe3c:	f7e2 ff2a 	bl	8002c94 <_read>
 801fe40:	1c43      	adds	r3, r0, #1
 801fe42:	d102      	bne.n	801fe4a <_read_r+0x1e>
 801fe44:	682b      	ldr	r3, [r5, #0]
 801fe46:	b103      	cbz	r3, 801fe4a <_read_r+0x1e>
 801fe48:	6023      	str	r3, [r4, #0]
 801fe4a:	bd38      	pop	{r3, r4, r5, pc}
 801fe4c:	20017068 	.word	0x20017068

0801fe50 <_sbrk_r>:
 801fe50:	b538      	push	{r3, r4, r5, lr}
 801fe52:	4d06      	ldr	r5, [pc, #24]	; (801fe6c <_sbrk_r+0x1c>)
 801fe54:	2300      	movs	r3, #0
 801fe56:	4604      	mov	r4, r0
 801fe58:	4608      	mov	r0, r1
 801fe5a:	602b      	str	r3, [r5, #0]
 801fe5c:	f7e2 ff88 	bl	8002d70 <_sbrk>
 801fe60:	1c43      	adds	r3, r0, #1
 801fe62:	d102      	bne.n	801fe6a <_sbrk_r+0x1a>
 801fe64:	682b      	ldr	r3, [r5, #0]
 801fe66:	b103      	cbz	r3, 801fe6a <_sbrk_r+0x1a>
 801fe68:	6023      	str	r3, [r4, #0]
 801fe6a:	bd38      	pop	{r3, r4, r5, pc}
 801fe6c:	20017068 	.word	0x20017068

0801fe70 <_write_r>:
 801fe70:	b538      	push	{r3, r4, r5, lr}
 801fe72:	4d07      	ldr	r5, [pc, #28]	; (801fe90 <_write_r+0x20>)
 801fe74:	4604      	mov	r4, r0
 801fe76:	4608      	mov	r0, r1
 801fe78:	4611      	mov	r1, r2
 801fe7a:	2200      	movs	r2, #0
 801fe7c:	602a      	str	r2, [r5, #0]
 801fe7e:	461a      	mov	r2, r3
 801fe80:	f7e2 ff25 	bl	8002cce <_write>
 801fe84:	1c43      	adds	r3, r0, #1
 801fe86:	d102      	bne.n	801fe8e <_write_r+0x1e>
 801fe88:	682b      	ldr	r3, [r5, #0]
 801fe8a:	b103      	cbz	r3, 801fe8e <_write_r+0x1e>
 801fe8c:	6023      	str	r3, [r4, #0]
 801fe8e:	bd38      	pop	{r3, r4, r5, pc}
 801fe90:	20017068 	.word	0x20017068

0801fe94 <__errno>:
 801fe94:	4b01      	ldr	r3, [pc, #4]	; (801fe9c <__errno+0x8>)
 801fe96:	6818      	ldr	r0, [r3, #0]
 801fe98:	4770      	bx	lr
 801fe9a:	bf00      	nop
 801fe9c:	200009a0 	.word	0x200009a0

0801fea0 <__libc_init_array>:
 801fea0:	b570      	push	{r4, r5, r6, lr}
 801fea2:	4d0d      	ldr	r5, [pc, #52]	; (801fed8 <__libc_init_array+0x38>)
 801fea4:	4c0d      	ldr	r4, [pc, #52]	; (801fedc <__libc_init_array+0x3c>)
 801fea6:	1b64      	subs	r4, r4, r5
 801fea8:	10a4      	asrs	r4, r4, #2
 801feaa:	2600      	movs	r6, #0
 801feac:	42a6      	cmp	r6, r4
 801feae:	d109      	bne.n	801fec4 <__libc_init_array+0x24>
 801feb0:	4d0b      	ldr	r5, [pc, #44]	; (801fee0 <__libc_init_array+0x40>)
 801feb2:	4c0c      	ldr	r4, [pc, #48]	; (801fee4 <__libc_init_array+0x44>)
 801feb4:	f003 f954 	bl	8023160 <_init>
 801feb8:	1b64      	subs	r4, r4, r5
 801feba:	10a4      	asrs	r4, r4, #2
 801febc:	2600      	movs	r6, #0
 801febe:	42a6      	cmp	r6, r4
 801fec0:	d105      	bne.n	801fece <__libc_init_array+0x2e>
 801fec2:	bd70      	pop	{r4, r5, r6, pc}
 801fec4:	f855 3b04 	ldr.w	r3, [r5], #4
 801fec8:	4798      	blx	r3
 801feca:	3601      	adds	r6, #1
 801fecc:	e7ee      	b.n	801feac <__libc_init_array+0xc>
 801fece:	f855 3b04 	ldr.w	r3, [r5], #4
 801fed2:	4798      	blx	r3
 801fed4:	3601      	adds	r6, #1
 801fed6:	e7f2      	b.n	801febe <__libc_init_array+0x1e>
 801fed8:	08024ef4 	.word	0x08024ef4
 801fedc:	08024ef4 	.word	0x08024ef4
 801fee0:	08024ef4 	.word	0x08024ef4
 801fee4:	08024f0c 	.word	0x08024f0c

0801fee8 <__retarget_lock_init_recursive>:
 801fee8:	4770      	bx	lr

0801feea <__retarget_lock_acquire_recursive>:
 801feea:	4770      	bx	lr

0801feec <__retarget_lock_release_recursive>:
 801feec:	4770      	bx	lr

0801feee <strcpy>:
 801feee:	4603      	mov	r3, r0
 801fef0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fef4:	f803 2b01 	strb.w	r2, [r3], #1
 801fef8:	2a00      	cmp	r2, #0
 801fefa:	d1f9      	bne.n	801fef0 <strcpy+0x2>
 801fefc:	4770      	bx	lr

0801fefe <memcpy>:
 801fefe:	440a      	add	r2, r1
 801ff00:	4291      	cmp	r1, r2
 801ff02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ff06:	d100      	bne.n	801ff0a <memcpy+0xc>
 801ff08:	4770      	bx	lr
 801ff0a:	b510      	push	{r4, lr}
 801ff0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ff10:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ff14:	4291      	cmp	r1, r2
 801ff16:	d1f9      	bne.n	801ff0c <memcpy+0xe>
 801ff18:	bd10      	pop	{r4, pc}
	...

0801ff1c <nanf>:
 801ff1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ff24 <nanf+0x8>
 801ff20:	4770      	bx	lr
 801ff22:	bf00      	nop
 801ff24:	7fc00000 	.word	0x7fc00000

0801ff28 <__assert_func>:
 801ff28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ff2a:	4614      	mov	r4, r2
 801ff2c:	461a      	mov	r2, r3
 801ff2e:	4b09      	ldr	r3, [pc, #36]	; (801ff54 <__assert_func+0x2c>)
 801ff30:	681b      	ldr	r3, [r3, #0]
 801ff32:	4605      	mov	r5, r0
 801ff34:	68d8      	ldr	r0, [r3, #12]
 801ff36:	b14c      	cbz	r4, 801ff4c <__assert_func+0x24>
 801ff38:	4b07      	ldr	r3, [pc, #28]	; (801ff58 <__assert_func+0x30>)
 801ff3a:	9100      	str	r1, [sp, #0]
 801ff3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ff40:	4906      	ldr	r1, [pc, #24]	; (801ff5c <__assert_func+0x34>)
 801ff42:	462b      	mov	r3, r5
 801ff44:	f002 fcae 	bl	80228a4 <fiprintf>
 801ff48:	f002 fd4a 	bl	80229e0 <abort>
 801ff4c:	4b04      	ldr	r3, [pc, #16]	; (801ff60 <__assert_func+0x38>)
 801ff4e:	461c      	mov	r4, r3
 801ff50:	e7f3      	b.n	801ff3a <__assert_func+0x12>
 801ff52:	bf00      	nop
 801ff54:	200009a0 	.word	0x200009a0
 801ff58:	08024c15 	.word	0x08024c15
 801ff5c:	08024c22 	.word	0x08024c22
 801ff60:	08024c50 	.word	0x08024c50

0801ff64 <quorem>:
 801ff64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff68:	6903      	ldr	r3, [r0, #16]
 801ff6a:	690c      	ldr	r4, [r1, #16]
 801ff6c:	42a3      	cmp	r3, r4
 801ff6e:	4607      	mov	r7, r0
 801ff70:	db7e      	blt.n	8020070 <quorem+0x10c>
 801ff72:	3c01      	subs	r4, #1
 801ff74:	f101 0814 	add.w	r8, r1, #20
 801ff78:	f100 0514 	add.w	r5, r0, #20
 801ff7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ff80:	9301      	str	r3, [sp, #4]
 801ff82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ff86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ff8a:	3301      	adds	r3, #1
 801ff8c:	429a      	cmp	r2, r3
 801ff8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ff92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ff96:	fbb2 f6f3 	udiv	r6, r2, r3
 801ff9a:	d331      	bcc.n	8020000 <quorem+0x9c>
 801ff9c:	f04f 0e00 	mov.w	lr, #0
 801ffa0:	4640      	mov	r0, r8
 801ffa2:	46ac      	mov	ip, r5
 801ffa4:	46f2      	mov	sl, lr
 801ffa6:	f850 2b04 	ldr.w	r2, [r0], #4
 801ffaa:	b293      	uxth	r3, r2
 801ffac:	fb06 e303 	mla	r3, r6, r3, lr
 801ffb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ffb4:	0c1a      	lsrs	r2, r3, #16
 801ffb6:	b29b      	uxth	r3, r3
 801ffb8:	ebaa 0303 	sub.w	r3, sl, r3
 801ffbc:	f8dc a000 	ldr.w	sl, [ip]
 801ffc0:	fa13 f38a 	uxtah	r3, r3, sl
 801ffc4:	fb06 220e 	mla	r2, r6, lr, r2
 801ffc8:	9300      	str	r3, [sp, #0]
 801ffca:	9b00      	ldr	r3, [sp, #0]
 801ffcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ffd0:	b292      	uxth	r2, r2
 801ffd2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801ffd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ffda:	f8bd 3000 	ldrh.w	r3, [sp]
 801ffde:	4581      	cmp	r9, r0
 801ffe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ffe4:	f84c 3b04 	str.w	r3, [ip], #4
 801ffe8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ffec:	d2db      	bcs.n	801ffa6 <quorem+0x42>
 801ffee:	f855 300b 	ldr.w	r3, [r5, fp]
 801fff2:	b92b      	cbnz	r3, 8020000 <quorem+0x9c>
 801fff4:	9b01      	ldr	r3, [sp, #4]
 801fff6:	3b04      	subs	r3, #4
 801fff8:	429d      	cmp	r5, r3
 801fffa:	461a      	mov	r2, r3
 801fffc:	d32c      	bcc.n	8020058 <quorem+0xf4>
 801fffe:	613c      	str	r4, [r7, #16]
 8020000:	4638      	mov	r0, r7
 8020002:	f001 f8c3 	bl	802118c <__mcmp>
 8020006:	2800      	cmp	r0, #0
 8020008:	db22      	blt.n	8020050 <quorem+0xec>
 802000a:	3601      	adds	r6, #1
 802000c:	4629      	mov	r1, r5
 802000e:	2000      	movs	r0, #0
 8020010:	f858 2b04 	ldr.w	r2, [r8], #4
 8020014:	f8d1 c000 	ldr.w	ip, [r1]
 8020018:	b293      	uxth	r3, r2
 802001a:	1ac3      	subs	r3, r0, r3
 802001c:	0c12      	lsrs	r2, r2, #16
 802001e:	fa13 f38c 	uxtah	r3, r3, ip
 8020022:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8020026:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802002a:	b29b      	uxth	r3, r3
 802002c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020030:	45c1      	cmp	r9, r8
 8020032:	f841 3b04 	str.w	r3, [r1], #4
 8020036:	ea4f 4022 	mov.w	r0, r2, asr #16
 802003a:	d2e9      	bcs.n	8020010 <quorem+0xac>
 802003c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020040:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020044:	b922      	cbnz	r2, 8020050 <quorem+0xec>
 8020046:	3b04      	subs	r3, #4
 8020048:	429d      	cmp	r5, r3
 802004a:	461a      	mov	r2, r3
 802004c:	d30a      	bcc.n	8020064 <quorem+0x100>
 802004e:	613c      	str	r4, [r7, #16]
 8020050:	4630      	mov	r0, r6
 8020052:	b003      	add	sp, #12
 8020054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020058:	6812      	ldr	r2, [r2, #0]
 802005a:	3b04      	subs	r3, #4
 802005c:	2a00      	cmp	r2, #0
 802005e:	d1ce      	bne.n	801fffe <quorem+0x9a>
 8020060:	3c01      	subs	r4, #1
 8020062:	e7c9      	b.n	801fff8 <quorem+0x94>
 8020064:	6812      	ldr	r2, [r2, #0]
 8020066:	3b04      	subs	r3, #4
 8020068:	2a00      	cmp	r2, #0
 802006a:	d1f0      	bne.n	802004e <quorem+0xea>
 802006c:	3c01      	subs	r4, #1
 802006e:	e7eb      	b.n	8020048 <quorem+0xe4>
 8020070:	2000      	movs	r0, #0
 8020072:	e7ee      	b.n	8020052 <quorem+0xee>
 8020074:	0000      	movs	r0, r0
	...

08020078 <_dtoa_r>:
 8020078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802007c:	ed2d 8b02 	vpush	{d8}
 8020080:	69c5      	ldr	r5, [r0, #28]
 8020082:	b091      	sub	sp, #68	; 0x44
 8020084:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020088:	ec59 8b10 	vmov	r8, r9, d0
 802008c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802008e:	9106      	str	r1, [sp, #24]
 8020090:	4606      	mov	r6, r0
 8020092:	9208      	str	r2, [sp, #32]
 8020094:	930c      	str	r3, [sp, #48]	; 0x30
 8020096:	b975      	cbnz	r5, 80200b6 <_dtoa_r+0x3e>
 8020098:	2010      	movs	r0, #16
 802009a:	f7fe fa7f 	bl	801e59c <malloc>
 802009e:	4602      	mov	r2, r0
 80200a0:	61f0      	str	r0, [r6, #28]
 80200a2:	b920      	cbnz	r0, 80200ae <_dtoa_r+0x36>
 80200a4:	4ba6      	ldr	r3, [pc, #664]	; (8020340 <_dtoa_r+0x2c8>)
 80200a6:	21ef      	movs	r1, #239	; 0xef
 80200a8:	48a6      	ldr	r0, [pc, #664]	; (8020344 <_dtoa_r+0x2cc>)
 80200aa:	f7ff ff3d 	bl	801ff28 <__assert_func>
 80200ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80200b2:	6005      	str	r5, [r0, #0]
 80200b4:	60c5      	str	r5, [r0, #12]
 80200b6:	69f3      	ldr	r3, [r6, #28]
 80200b8:	6819      	ldr	r1, [r3, #0]
 80200ba:	b151      	cbz	r1, 80200d2 <_dtoa_r+0x5a>
 80200bc:	685a      	ldr	r2, [r3, #4]
 80200be:	604a      	str	r2, [r1, #4]
 80200c0:	2301      	movs	r3, #1
 80200c2:	4093      	lsls	r3, r2
 80200c4:	608b      	str	r3, [r1, #8]
 80200c6:	4630      	mov	r0, r6
 80200c8:	f000 fdda 	bl	8020c80 <_Bfree>
 80200cc:	69f3      	ldr	r3, [r6, #28]
 80200ce:	2200      	movs	r2, #0
 80200d0:	601a      	str	r2, [r3, #0]
 80200d2:	f1b9 0300 	subs.w	r3, r9, #0
 80200d6:	bfbb      	ittet	lt
 80200d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80200dc:	9303      	strlt	r3, [sp, #12]
 80200de:	2300      	movge	r3, #0
 80200e0:	2201      	movlt	r2, #1
 80200e2:	bfac      	ite	ge
 80200e4:	6023      	strge	r3, [r4, #0]
 80200e6:	6022      	strlt	r2, [r4, #0]
 80200e8:	4b97      	ldr	r3, [pc, #604]	; (8020348 <_dtoa_r+0x2d0>)
 80200ea:	9c03      	ldr	r4, [sp, #12]
 80200ec:	43a3      	bics	r3, r4
 80200ee:	d11c      	bne.n	802012a <_dtoa_r+0xb2>
 80200f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80200f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80200f6:	6013      	str	r3, [r2, #0]
 80200f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80200fc:	ea53 0308 	orrs.w	r3, r3, r8
 8020100:	f000 84fb 	beq.w	8020afa <_dtoa_r+0xa82>
 8020104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020106:	b963      	cbnz	r3, 8020122 <_dtoa_r+0xaa>
 8020108:	4b90      	ldr	r3, [pc, #576]	; (802034c <_dtoa_r+0x2d4>)
 802010a:	e020      	b.n	802014e <_dtoa_r+0xd6>
 802010c:	4b90      	ldr	r3, [pc, #576]	; (8020350 <_dtoa_r+0x2d8>)
 802010e:	9301      	str	r3, [sp, #4]
 8020110:	3308      	adds	r3, #8
 8020112:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020114:	6013      	str	r3, [r2, #0]
 8020116:	9801      	ldr	r0, [sp, #4]
 8020118:	b011      	add	sp, #68	; 0x44
 802011a:	ecbd 8b02 	vpop	{d8}
 802011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020122:	4b8a      	ldr	r3, [pc, #552]	; (802034c <_dtoa_r+0x2d4>)
 8020124:	9301      	str	r3, [sp, #4]
 8020126:	3303      	adds	r3, #3
 8020128:	e7f3      	b.n	8020112 <_dtoa_r+0x9a>
 802012a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802012e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020136:	d10c      	bne.n	8020152 <_dtoa_r+0xda>
 8020138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802013a:	2301      	movs	r3, #1
 802013c:	6013      	str	r3, [r2, #0]
 802013e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020140:	2b00      	cmp	r3, #0
 8020142:	f000 84d7 	beq.w	8020af4 <_dtoa_r+0xa7c>
 8020146:	4b83      	ldr	r3, [pc, #524]	; (8020354 <_dtoa_r+0x2dc>)
 8020148:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802014a:	6013      	str	r3, [r2, #0]
 802014c:	3b01      	subs	r3, #1
 802014e:	9301      	str	r3, [sp, #4]
 8020150:	e7e1      	b.n	8020116 <_dtoa_r+0x9e>
 8020152:	aa0e      	add	r2, sp, #56	; 0x38
 8020154:	a90f      	add	r1, sp, #60	; 0x3c
 8020156:	4630      	mov	r0, r6
 8020158:	eeb0 0b48 	vmov.f64	d0, d8
 802015c:	f001 f92c 	bl	80213b8 <__d2b>
 8020160:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8020164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020166:	4605      	mov	r5, r0
 8020168:	2b00      	cmp	r3, #0
 802016a:	d046      	beq.n	80201fa <_dtoa_r+0x182>
 802016c:	eeb0 7b48 	vmov.f64	d7, d8
 8020170:	ee18 1a90 	vmov	r1, s17
 8020174:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8020178:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802017c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8020180:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020184:	2000      	movs	r0, #0
 8020186:	ee07 1a90 	vmov	s15, r1
 802018a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 802018e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8020328 <_dtoa_r+0x2b0>
 8020192:	ee37 7b46 	vsub.f64	d7, d7, d6
 8020196:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8020330 <_dtoa_r+0x2b8>
 802019a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802019e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8020338 <_dtoa_r+0x2c0>
 80201a2:	ee07 3a90 	vmov	s15, r3
 80201a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80201aa:	eeb0 7b46 	vmov.f64	d7, d6
 80201ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80201b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80201b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80201ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201be:	ee16 ba90 	vmov	fp, s13
 80201c2:	9009      	str	r0, [sp, #36]	; 0x24
 80201c4:	d508      	bpl.n	80201d8 <_dtoa_r+0x160>
 80201c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80201ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80201ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201d2:	bf18      	it	ne
 80201d4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80201d8:	f1bb 0f16 	cmp.w	fp, #22
 80201dc:	d82b      	bhi.n	8020236 <_dtoa_r+0x1be>
 80201de:	495e      	ldr	r1, [pc, #376]	; (8020358 <_dtoa_r+0x2e0>)
 80201e0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80201e4:	ed91 7b00 	vldr	d7, [r1]
 80201e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80201ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201f0:	d501      	bpl.n	80201f6 <_dtoa_r+0x17e>
 80201f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80201f6:	2100      	movs	r1, #0
 80201f8:	e01e      	b.n	8020238 <_dtoa_r+0x1c0>
 80201fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80201fc:	4413      	add	r3, r2
 80201fe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8020202:	2920      	cmp	r1, #32
 8020204:	bfc1      	itttt	gt
 8020206:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 802020a:	408c      	lslgt	r4, r1
 802020c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8020210:	fa28 f101 	lsrgt.w	r1, r8, r1
 8020214:	bfd6      	itet	le
 8020216:	f1c1 0120 	rsble	r1, r1, #32
 802021a:	4321      	orrgt	r1, r4
 802021c:	fa08 f101 	lslle.w	r1, r8, r1
 8020220:	ee07 1a90 	vmov	s15, r1
 8020224:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8020228:	3b01      	subs	r3, #1
 802022a:	ee17 1a90 	vmov	r1, s15
 802022e:	2001      	movs	r0, #1
 8020230:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8020234:	e7a7      	b.n	8020186 <_dtoa_r+0x10e>
 8020236:	2101      	movs	r1, #1
 8020238:	1ad2      	subs	r2, r2, r3
 802023a:	1e53      	subs	r3, r2, #1
 802023c:	9305      	str	r3, [sp, #20]
 802023e:	bf45      	ittet	mi
 8020240:	f1c2 0301 	rsbmi	r3, r2, #1
 8020244:	9304      	strmi	r3, [sp, #16]
 8020246:	2300      	movpl	r3, #0
 8020248:	2300      	movmi	r3, #0
 802024a:	bf4c      	ite	mi
 802024c:	9305      	strmi	r3, [sp, #20]
 802024e:	9304      	strpl	r3, [sp, #16]
 8020250:	f1bb 0f00 	cmp.w	fp, #0
 8020254:	910b      	str	r1, [sp, #44]	; 0x2c
 8020256:	db18      	blt.n	802028a <_dtoa_r+0x212>
 8020258:	9b05      	ldr	r3, [sp, #20]
 802025a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802025e:	445b      	add	r3, fp
 8020260:	9305      	str	r3, [sp, #20]
 8020262:	2300      	movs	r3, #0
 8020264:	9a06      	ldr	r2, [sp, #24]
 8020266:	2a09      	cmp	r2, #9
 8020268:	d848      	bhi.n	80202fc <_dtoa_r+0x284>
 802026a:	2a05      	cmp	r2, #5
 802026c:	bfc4      	itt	gt
 802026e:	3a04      	subgt	r2, #4
 8020270:	9206      	strgt	r2, [sp, #24]
 8020272:	9a06      	ldr	r2, [sp, #24]
 8020274:	f1a2 0202 	sub.w	r2, r2, #2
 8020278:	bfcc      	ite	gt
 802027a:	2400      	movgt	r4, #0
 802027c:	2401      	movle	r4, #1
 802027e:	2a03      	cmp	r2, #3
 8020280:	d847      	bhi.n	8020312 <_dtoa_r+0x29a>
 8020282:	e8df f002 	tbb	[pc, r2]
 8020286:	2d0b      	.short	0x2d0b
 8020288:	392b      	.short	0x392b
 802028a:	9b04      	ldr	r3, [sp, #16]
 802028c:	2200      	movs	r2, #0
 802028e:	eba3 030b 	sub.w	r3, r3, fp
 8020292:	9304      	str	r3, [sp, #16]
 8020294:	920a      	str	r2, [sp, #40]	; 0x28
 8020296:	f1cb 0300 	rsb	r3, fp, #0
 802029a:	e7e3      	b.n	8020264 <_dtoa_r+0x1ec>
 802029c:	2200      	movs	r2, #0
 802029e:	9207      	str	r2, [sp, #28]
 80202a0:	9a08      	ldr	r2, [sp, #32]
 80202a2:	2a00      	cmp	r2, #0
 80202a4:	dc38      	bgt.n	8020318 <_dtoa_r+0x2a0>
 80202a6:	f04f 0a01 	mov.w	sl, #1
 80202aa:	46d1      	mov	r9, sl
 80202ac:	4652      	mov	r2, sl
 80202ae:	f8cd a020 	str.w	sl, [sp, #32]
 80202b2:	69f7      	ldr	r7, [r6, #28]
 80202b4:	2100      	movs	r1, #0
 80202b6:	2004      	movs	r0, #4
 80202b8:	f100 0c14 	add.w	ip, r0, #20
 80202bc:	4594      	cmp	ip, r2
 80202be:	d930      	bls.n	8020322 <_dtoa_r+0x2aa>
 80202c0:	6079      	str	r1, [r7, #4]
 80202c2:	4630      	mov	r0, r6
 80202c4:	930d      	str	r3, [sp, #52]	; 0x34
 80202c6:	f000 fc9b 	bl	8020c00 <_Balloc>
 80202ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80202cc:	9001      	str	r0, [sp, #4]
 80202ce:	4602      	mov	r2, r0
 80202d0:	2800      	cmp	r0, #0
 80202d2:	d145      	bne.n	8020360 <_dtoa_r+0x2e8>
 80202d4:	4b21      	ldr	r3, [pc, #132]	; (802035c <_dtoa_r+0x2e4>)
 80202d6:	f240 11af 	movw	r1, #431	; 0x1af
 80202da:	e6e5      	b.n	80200a8 <_dtoa_r+0x30>
 80202dc:	2201      	movs	r2, #1
 80202de:	e7de      	b.n	802029e <_dtoa_r+0x226>
 80202e0:	2200      	movs	r2, #0
 80202e2:	9207      	str	r2, [sp, #28]
 80202e4:	9a08      	ldr	r2, [sp, #32]
 80202e6:	eb0b 0a02 	add.w	sl, fp, r2
 80202ea:	f10a 0901 	add.w	r9, sl, #1
 80202ee:	464a      	mov	r2, r9
 80202f0:	2a01      	cmp	r2, #1
 80202f2:	bfb8      	it	lt
 80202f4:	2201      	movlt	r2, #1
 80202f6:	e7dc      	b.n	80202b2 <_dtoa_r+0x23a>
 80202f8:	2201      	movs	r2, #1
 80202fa:	e7f2      	b.n	80202e2 <_dtoa_r+0x26a>
 80202fc:	2401      	movs	r4, #1
 80202fe:	2200      	movs	r2, #0
 8020300:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8020304:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020308:	2100      	movs	r1, #0
 802030a:	46d1      	mov	r9, sl
 802030c:	2212      	movs	r2, #18
 802030e:	9108      	str	r1, [sp, #32]
 8020310:	e7cf      	b.n	80202b2 <_dtoa_r+0x23a>
 8020312:	2201      	movs	r2, #1
 8020314:	9207      	str	r2, [sp, #28]
 8020316:	e7f5      	b.n	8020304 <_dtoa_r+0x28c>
 8020318:	f8dd a020 	ldr.w	sl, [sp, #32]
 802031c:	46d1      	mov	r9, sl
 802031e:	4652      	mov	r2, sl
 8020320:	e7c7      	b.n	80202b2 <_dtoa_r+0x23a>
 8020322:	3101      	adds	r1, #1
 8020324:	0040      	lsls	r0, r0, #1
 8020326:	e7c7      	b.n	80202b8 <_dtoa_r+0x240>
 8020328:	636f4361 	.word	0x636f4361
 802032c:	3fd287a7 	.word	0x3fd287a7
 8020330:	8b60c8b3 	.word	0x8b60c8b3
 8020334:	3fc68a28 	.word	0x3fc68a28
 8020338:	509f79fb 	.word	0x509f79fb
 802033c:	3fd34413 	.word	0x3fd34413
 8020340:	08024a6c 	.word	0x08024a6c
 8020344:	08024c5e 	.word	0x08024c5e
 8020348:	7ff00000 	.word	0x7ff00000
 802034c:	08024c5a 	.word	0x08024c5a
 8020350:	08024c51 	.word	0x08024c51
 8020354:	08024bed 	.word	0x08024bed
 8020358:	08024d48 	.word	0x08024d48
 802035c:	08024cb6 	.word	0x08024cb6
 8020360:	69f2      	ldr	r2, [r6, #28]
 8020362:	9901      	ldr	r1, [sp, #4]
 8020364:	6011      	str	r1, [r2, #0]
 8020366:	f1b9 0f0e 	cmp.w	r9, #14
 802036a:	d86c      	bhi.n	8020446 <_dtoa_r+0x3ce>
 802036c:	2c00      	cmp	r4, #0
 802036e:	d06a      	beq.n	8020446 <_dtoa_r+0x3ce>
 8020370:	f1bb 0f00 	cmp.w	fp, #0
 8020374:	f340 80a0 	ble.w	80204b8 <_dtoa_r+0x440>
 8020378:	4ac1      	ldr	r2, [pc, #772]	; (8020680 <_dtoa_r+0x608>)
 802037a:	f00b 010f 	and.w	r1, fp, #15
 802037e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8020382:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8020386:	ed92 7b00 	vldr	d7, [r2]
 802038a:	ea4f 122b 	mov.w	r2, fp, asr #4
 802038e:	f000 8087 	beq.w	80204a0 <_dtoa_r+0x428>
 8020392:	49bc      	ldr	r1, [pc, #752]	; (8020684 <_dtoa_r+0x60c>)
 8020394:	ed91 6b08 	vldr	d6, [r1, #32]
 8020398:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802039c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80203a0:	f002 020f 	and.w	r2, r2, #15
 80203a4:	2103      	movs	r1, #3
 80203a6:	48b7      	ldr	r0, [pc, #732]	; (8020684 <_dtoa_r+0x60c>)
 80203a8:	2a00      	cmp	r2, #0
 80203aa:	d17b      	bne.n	80204a4 <_dtoa_r+0x42c>
 80203ac:	ed9d 6b02 	vldr	d6, [sp, #8]
 80203b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80203b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80203b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80203ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80203be:	2a00      	cmp	r2, #0
 80203c0:	f000 80a0 	beq.w	8020504 <_dtoa_r+0x48c>
 80203c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80203c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80203cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203d0:	f140 8098 	bpl.w	8020504 <_dtoa_r+0x48c>
 80203d4:	f1b9 0f00 	cmp.w	r9, #0
 80203d8:	f000 8094 	beq.w	8020504 <_dtoa_r+0x48c>
 80203dc:	f1ba 0f00 	cmp.w	sl, #0
 80203e0:	dd2f      	ble.n	8020442 <_dtoa_r+0x3ca>
 80203e2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80203e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80203ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80203ee:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80203f2:	3101      	adds	r1, #1
 80203f4:	4654      	mov	r4, sl
 80203f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80203fa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80203fe:	ee07 1a90 	vmov	s15, r1
 8020402:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8020406:	eea7 5b06 	vfma.f64	d5, d7, d6
 802040a:	ee15 7a90 	vmov	r7, s11
 802040e:	ec51 0b15 	vmov	r0, r1, d5
 8020412:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8020416:	2c00      	cmp	r4, #0
 8020418:	d177      	bne.n	802050a <_dtoa_r+0x492>
 802041a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802041e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8020422:	ec41 0b17 	vmov	d7, r0, r1
 8020426:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802042a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802042e:	f300 826a 	bgt.w	8020906 <_dtoa_r+0x88e>
 8020432:	eeb1 7b47 	vneg.f64	d7, d7
 8020436:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802043a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802043e:	f100 8260 	bmi.w	8020902 <_dtoa_r+0x88a>
 8020442:	ed8d 8b02 	vstr	d8, [sp, #8]
 8020446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020448:	2a00      	cmp	r2, #0
 802044a:	f2c0 811d 	blt.w	8020688 <_dtoa_r+0x610>
 802044e:	f1bb 0f0e 	cmp.w	fp, #14
 8020452:	f300 8119 	bgt.w	8020688 <_dtoa_r+0x610>
 8020456:	4b8a      	ldr	r3, [pc, #552]	; (8020680 <_dtoa_r+0x608>)
 8020458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802045c:	ed93 6b00 	vldr	d6, [r3]
 8020460:	9b08      	ldr	r3, [sp, #32]
 8020462:	2b00      	cmp	r3, #0
 8020464:	f280 80b7 	bge.w	80205d6 <_dtoa_r+0x55e>
 8020468:	f1b9 0f00 	cmp.w	r9, #0
 802046c:	f300 80b3 	bgt.w	80205d6 <_dtoa_r+0x55e>
 8020470:	f040 8246 	bne.w	8020900 <_dtoa_r+0x888>
 8020474:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8020478:	ee26 6b07 	vmul.f64	d6, d6, d7
 802047c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020480:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020488:	464c      	mov	r4, r9
 802048a:	464f      	mov	r7, r9
 802048c:	f280 821c 	bge.w	80208c8 <_dtoa_r+0x850>
 8020490:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020494:	2331      	movs	r3, #49	; 0x31
 8020496:	f808 3b01 	strb.w	r3, [r8], #1
 802049a:	f10b 0b01 	add.w	fp, fp, #1
 802049e:	e218      	b.n	80208d2 <_dtoa_r+0x85a>
 80204a0:	2102      	movs	r1, #2
 80204a2:	e780      	b.n	80203a6 <_dtoa_r+0x32e>
 80204a4:	07d4      	lsls	r4, r2, #31
 80204a6:	d504      	bpl.n	80204b2 <_dtoa_r+0x43a>
 80204a8:	ed90 6b00 	vldr	d6, [r0]
 80204ac:	3101      	adds	r1, #1
 80204ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80204b2:	1052      	asrs	r2, r2, #1
 80204b4:	3008      	adds	r0, #8
 80204b6:	e777      	b.n	80203a8 <_dtoa_r+0x330>
 80204b8:	d022      	beq.n	8020500 <_dtoa_r+0x488>
 80204ba:	f1cb 0200 	rsb	r2, fp, #0
 80204be:	4970      	ldr	r1, [pc, #448]	; (8020680 <_dtoa_r+0x608>)
 80204c0:	f002 000f 	and.w	r0, r2, #15
 80204c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80204c8:	ed91 7b00 	vldr	d7, [r1]
 80204cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80204d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80204d4:	486b      	ldr	r0, [pc, #428]	; (8020684 <_dtoa_r+0x60c>)
 80204d6:	1112      	asrs	r2, r2, #4
 80204d8:	2400      	movs	r4, #0
 80204da:	2102      	movs	r1, #2
 80204dc:	b92a      	cbnz	r2, 80204ea <_dtoa_r+0x472>
 80204de:	2c00      	cmp	r4, #0
 80204e0:	f43f af6a 	beq.w	80203b8 <_dtoa_r+0x340>
 80204e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80204e8:	e766      	b.n	80203b8 <_dtoa_r+0x340>
 80204ea:	07d7      	lsls	r7, r2, #31
 80204ec:	d505      	bpl.n	80204fa <_dtoa_r+0x482>
 80204ee:	ed90 6b00 	vldr	d6, [r0]
 80204f2:	3101      	adds	r1, #1
 80204f4:	2401      	movs	r4, #1
 80204f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80204fa:	1052      	asrs	r2, r2, #1
 80204fc:	3008      	adds	r0, #8
 80204fe:	e7ed      	b.n	80204dc <_dtoa_r+0x464>
 8020500:	2102      	movs	r1, #2
 8020502:	e759      	b.n	80203b8 <_dtoa_r+0x340>
 8020504:	465a      	mov	r2, fp
 8020506:	464c      	mov	r4, r9
 8020508:	e775      	b.n	80203f6 <_dtoa_r+0x37e>
 802050a:	ec41 0b17 	vmov	d7, r0, r1
 802050e:	495c      	ldr	r1, [pc, #368]	; (8020680 <_dtoa_r+0x608>)
 8020510:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8020514:	ed11 4b02 	vldr	d4, [r1, #-8]
 8020518:	9901      	ldr	r1, [sp, #4]
 802051a:	440c      	add	r4, r1
 802051c:	9907      	ldr	r1, [sp, #28]
 802051e:	b351      	cbz	r1, 8020576 <_dtoa_r+0x4fe>
 8020520:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8020524:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8020528:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802052c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8020530:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020534:	ee35 7b47 	vsub.f64	d7, d5, d7
 8020538:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802053c:	ee14 1a90 	vmov	r1, s9
 8020540:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020544:	3130      	adds	r1, #48	; 0x30
 8020546:	ee36 6b45 	vsub.f64	d6, d6, d5
 802054a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020552:	f808 1b01 	strb.w	r1, [r8], #1
 8020556:	d439      	bmi.n	80205cc <_dtoa_r+0x554>
 8020558:	ee32 5b46 	vsub.f64	d5, d2, d6
 802055c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8020560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020564:	d472      	bmi.n	802064c <_dtoa_r+0x5d4>
 8020566:	45a0      	cmp	r8, r4
 8020568:	f43f af6b 	beq.w	8020442 <_dtoa_r+0x3ca>
 802056c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8020570:	ee26 6b03 	vmul.f64	d6, d6, d3
 8020574:	e7e0      	b.n	8020538 <_dtoa_r+0x4c0>
 8020576:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802057a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802057e:	4620      	mov	r0, r4
 8020580:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020584:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8020588:	ee14 1a90 	vmov	r1, s9
 802058c:	3130      	adds	r1, #48	; 0x30
 802058e:	f808 1b01 	strb.w	r1, [r8], #1
 8020592:	45a0      	cmp	r8, r4
 8020594:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020598:	ee36 6b45 	vsub.f64	d6, d6, d5
 802059c:	d118      	bne.n	80205d0 <_dtoa_r+0x558>
 802059e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80205a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80205a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80205aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205ae:	dc4d      	bgt.n	802064c <_dtoa_r+0x5d4>
 80205b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80205b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80205b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205bc:	f57f af41 	bpl.w	8020442 <_dtoa_r+0x3ca>
 80205c0:	4680      	mov	r8, r0
 80205c2:	3801      	subs	r0, #1
 80205c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80205c8:	2b30      	cmp	r3, #48	; 0x30
 80205ca:	d0f9      	beq.n	80205c0 <_dtoa_r+0x548>
 80205cc:	4693      	mov	fp, r2
 80205ce:	e02a      	b.n	8020626 <_dtoa_r+0x5ae>
 80205d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80205d4:	e7d6      	b.n	8020584 <_dtoa_r+0x50c>
 80205d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80205da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80205de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80205e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80205e6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80205ea:	ee15 3a10 	vmov	r3, s10
 80205ee:	3330      	adds	r3, #48	; 0x30
 80205f0:	f808 3b01 	strb.w	r3, [r8], #1
 80205f4:	9b01      	ldr	r3, [sp, #4]
 80205f6:	eba8 0303 	sub.w	r3, r8, r3
 80205fa:	4599      	cmp	r9, r3
 80205fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8020600:	eea3 7b46 	vfms.f64	d7, d3, d6
 8020604:	d133      	bne.n	802066e <_dtoa_r+0x5f6>
 8020606:	ee37 7b07 	vadd.f64	d7, d7, d7
 802060a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020612:	dc1a      	bgt.n	802064a <_dtoa_r+0x5d2>
 8020614:	eeb4 7b46 	vcmp.f64	d7, d6
 8020618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802061c:	d103      	bne.n	8020626 <_dtoa_r+0x5ae>
 802061e:	ee15 3a10 	vmov	r3, s10
 8020622:	07d9      	lsls	r1, r3, #31
 8020624:	d411      	bmi.n	802064a <_dtoa_r+0x5d2>
 8020626:	4629      	mov	r1, r5
 8020628:	4630      	mov	r0, r6
 802062a:	f000 fb29 	bl	8020c80 <_Bfree>
 802062e:	2300      	movs	r3, #0
 8020630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020632:	f888 3000 	strb.w	r3, [r8]
 8020636:	f10b 0301 	add.w	r3, fp, #1
 802063a:	6013      	str	r3, [r2, #0]
 802063c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802063e:	2b00      	cmp	r3, #0
 8020640:	f43f ad69 	beq.w	8020116 <_dtoa_r+0x9e>
 8020644:	f8c3 8000 	str.w	r8, [r3]
 8020648:	e565      	b.n	8020116 <_dtoa_r+0x9e>
 802064a:	465a      	mov	r2, fp
 802064c:	4643      	mov	r3, r8
 802064e:	4698      	mov	r8, r3
 8020650:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8020654:	2939      	cmp	r1, #57	; 0x39
 8020656:	d106      	bne.n	8020666 <_dtoa_r+0x5ee>
 8020658:	9901      	ldr	r1, [sp, #4]
 802065a:	4299      	cmp	r1, r3
 802065c:	d1f7      	bne.n	802064e <_dtoa_r+0x5d6>
 802065e:	9801      	ldr	r0, [sp, #4]
 8020660:	2130      	movs	r1, #48	; 0x30
 8020662:	3201      	adds	r2, #1
 8020664:	7001      	strb	r1, [r0, #0]
 8020666:	7819      	ldrb	r1, [r3, #0]
 8020668:	3101      	adds	r1, #1
 802066a:	7019      	strb	r1, [r3, #0]
 802066c:	e7ae      	b.n	80205cc <_dtoa_r+0x554>
 802066e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8020672:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802067a:	d1b2      	bne.n	80205e2 <_dtoa_r+0x56a>
 802067c:	e7d3      	b.n	8020626 <_dtoa_r+0x5ae>
 802067e:	bf00      	nop
 8020680:	08024d48 	.word	0x08024d48
 8020684:	08024d20 	.word	0x08024d20
 8020688:	9907      	ldr	r1, [sp, #28]
 802068a:	2900      	cmp	r1, #0
 802068c:	f000 80d0 	beq.w	8020830 <_dtoa_r+0x7b8>
 8020690:	9906      	ldr	r1, [sp, #24]
 8020692:	2901      	cmp	r1, #1
 8020694:	f300 80b4 	bgt.w	8020800 <_dtoa_r+0x788>
 8020698:	9909      	ldr	r1, [sp, #36]	; 0x24
 802069a:	2900      	cmp	r1, #0
 802069c:	f000 80ac 	beq.w	80207f8 <_dtoa_r+0x780>
 80206a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80206a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80206a8:	461c      	mov	r4, r3
 80206aa:	9309      	str	r3, [sp, #36]	; 0x24
 80206ac:	9b04      	ldr	r3, [sp, #16]
 80206ae:	4413      	add	r3, r2
 80206b0:	9304      	str	r3, [sp, #16]
 80206b2:	9b05      	ldr	r3, [sp, #20]
 80206b4:	2101      	movs	r1, #1
 80206b6:	4413      	add	r3, r2
 80206b8:	4630      	mov	r0, r6
 80206ba:	9305      	str	r3, [sp, #20]
 80206bc:	f000 fbe0 	bl	8020e80 <__i2b>
 80206c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206c2:	4607      	mov	r7, r0
 80206c4:	f1b8 0f00 	cmp.w	r8, #0
 80206c8:	d00d      	beq.n	80206e6 <_dtoa_r+0x66e>
 80206ca:	9a05      	ldr	r2, [sp, #20]
 80206cc:	2a00      	cmp	r2, #0
 80206ce:	dd0a      	ble.n	80206e6 <_dtoa_r+0x66e>
 80206d0:	4542      	cmp	r2, r8
 80206d2:	9904      	ldr	r1, [sp, #16]
 80206d4:	bfa8      	it	ge
 80206d6:	4642      	movge	r2, r8
 80206d8:	1a89      	subs	r1, r1, r2
 80206da:	9104      	str	r1, [sp, #16]
 80206dc:	9905      	ldr	r1, [sp, #20]
 80206de:	eba8 0802 	sub.w	r8, r8, r2
 80206e2:	1a8a      	subs	r2, r1, r2
 80206e4:	9205      	str	r2, [sp, #20]
 80206e6:	b303      	cbz	r3, 802072a <_dtoa_r+0x6b2>
 80206e8:	9a07      	ldr	r2, [sp, #28]
 80206ea:	2a00      	cmp	r2, #0
 80206ec:	f000 80a5 	beq.w	802083a <_dtoa_r+0x7c2>
 80206f0:	2c00      	cmp	r4, #0
 80206f2:	dd13      	ble.n	802071c <_dtoa_r+0x6a4>
 80206f4:	4639      	mov	r1, r7
 80206f6:	4622      	mov	r2, r4
 80206f8:	4630      	mov	r0, r6
 80206fa:	930d      	str	r3, [sp, #52]	; 0x34
 80206fc:	f000 fc80 	bl	8021000 <__pow5mult>
 8020700:	462a      	mov	r2, r5
 8020702:	4601      	mov	r1, r0
 8020704:	4607      	mov	r7, r0
 8020706:	4630      	mov	r0, r6
 8020708:	f000 fbd0 	bl	8020eac <__multiply>
 802070c:	4629      	mov	r1, r5
 802070e:	9009      	str	r0, [sp, #36]	; 0x24
 8020710:	4630      	mov	r0, r6
 8020712:	f000 fab5 	bl	8020c80 <_Bfree>
 8020716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802071a:	4615      	mov	r5, r2
 802071c:	1b1a      	subs	r2, r3, r4
 802071e:	d004      	beq.n	802072a <_dtoa_r+0x6b2>
 8020720:	4629      	mov	r1, r5
 8020722:	4630      	mov	r0, r6
 8020724:	f000 fc6c 	bl	8021000 <__pow5mult>
 8020728:	4605      	mov	r5, r0
 802072a:	2101      	movs	r1, #1
 802072c:	4630      	mov	r0, r6
 802072e:	f000 fba7 	bl	8020e80 <__i2b>
 8020732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020734:	2b00      	cmp	r3, #0
 8020736:	4604      	mov	r4, r0
 8020738:	f340 8081 	ble.w	802083e <_dtoa_r+0x7c6>
 802073c:	461a      	mov	r2, r3
 802073e:	4601      	mov	r1, r0
 8020740:	4630      	mov	r0, r6
 8020742:	f000 fc5d 	bl	8021000 <__pow5mult>
 8020746:	9b06      	ldr	r3, [sp, #24]
 8020748:	2b01      	cmp	r3, #1
 802074a:	4604      	mov	r4, r0
 802074c:	dd7a      	ble.n	8020844 <_dtoa_r+0x7cc>
 802074e:	2300      	movs	r3, #0
 8020750:	9309      	str	r3, [sp, #36]	; 0x24
 8020752:	6922      	ldr	r2, [r4, #16]
 8020754:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020758:	6910      	ldr	r0, [r2, #16]
 802075a:	f000 fb43 	bl	8020de4 <__hi0bits>
 802075e:	f1c0 0020 	rsb	r0, r0, #32
 8020762:	9b05      	ldr	r3, [sp, #20]
 8020764:	4418      	add	r0, r3
 8020766:	f010 001f 	ands.w	r0, r0, #31
 802076a:	f000 8093 	beq.w	8020894 <_dtoa_r+0x81c>
 802076e:	f1c0 0220 	rsb	r2, r0, #32
 8020772:	2a04      	cmp	r2, #4
 8020774:	f340 8085 	ble.w	8020882 <_dtoa_r+0x80a>
 8020778:	9b04      	ldr	r3, [sp, #16]
 802077a:	f1c0 001c 	rsb	r0, r0, #28
 802077e:	4403      	add	r3, r0
 8020780:	9304      	str	r3, [sp, #16]
 8020782:	9b05      	ldr	r3, [sp, #20]
 8020784:	4480      	add	r8, r0
 8020786:	4403      	add	r3, r0
 8020788:	9305      	str	r3, [sp, #20]
 802078a:	9b04      	ldr	r3, [sp, #16]
 802078c:	2b00      	cmp	r3, #0
 802078e:	dd05      	ble.n	802079c <_dtoa_r+0x724>
 8020790:	4629      	mov	r1, r5
 8020792:	461a      	mov	r2, r3
 8020794:	4630      	mov	r0, r6
 8020796:	f000 fc8d 	bl	80210b4 <__lshift>
 802079a:	4605      	mov	r5, r0
 802079c:	9b05      	ldr	r3, [sp, #20]
 802079e:	2b00      	cmp	r3, #0
 80207a0:	dd05      	ble.n	80207ae <_dtoa_r+0x736>
 80207a2:	4621      	mov	r1, r4
 80207a4:	461a      	mov	r2, r3
 80207a6:	4630      	mov	r0, r6
 80207a8:	f000 fc84 	bl	80210b4 <__lshift>
 80207ac:	4604      	mov	r4, r0
 80207ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d071      	beq.n	8020898 <_dtoa_r+0x820>
 80207b4:	4621      	mov	r1, r4
 80207b6:	4628      	mov	r0, r5
 80207b8:	f000 fce8 	bl	802118c <__mcmp>
 80207bc:	2800      	cmp	r0, #0
 80207be:	da6b      	bge.n	8020898 <_dtoa_r+0x820>
 80207c0:	2300      	movs	r3, #0
 80207c2:	4629      	mov	r1, r5
 80207c4:	220a      	movs	r2, #10
 80207c6:	4630      	mov	r0, r6
 80207c8:	f000 fa7c 	bl	8020cc4 <__multadd>
 80207cc:	9b07      	ldr	r3, [sp, #28]
 80207ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80207d2:	4605      	mov	r5, r0
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	f000 8197 	beq.w	8020b08 <_dtoa_r+0xa90>
 80207da:	4639      	mov	r1, r7
 80207dc:	2300      	movs	r3, #0
 80207de:	220a      	movs	r2, #10
 80207e0:	4630      	mov	r0, r6
 80207e2:	f000 fa6f 	bl	8020cc4 <__multadd>
 80207e6:	f1ba 0f00 	cmp.w	sl, #0
 80207ea:	4607      	mov	r7, r0
 80207ec:	f300 8093 	bgt.w	8020916 <_dtoa_r+0x89e>
 80207f0:	9b06      	ldr	r3, [sp, #24]
 80207f2:	2b02      	cmp	r3, #2
 80207f4:	dc57      	bgt.n	80208a6 <_dtoa_r+0x82e>
 80207f6:	e08e      	b.n	8020916 <_dtoa_r+0x89e>
 80207f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80207fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80207fe:	e751      	b.n	80206a4 <_dtoa_r+0x62c>
 8020800:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8020804:	42a3      	cmp	r3, r4
 8020806:	bfbf      	itttt	lt
 8020808:	1ae2      	sublt	r2, r4, r3
 802080a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802080c:	189b      	addlt	r3, r3, r2
 802080e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020810:	bfae      	itee	ge
 8020812:	1b1c      	subge	r4, r3, r4
 8020814:	4623      	movlt	r3, r4
 8020816:	2400      	movlt	r4, #0
 8020818:	f1b9 0f00 	cmp.w	r9, #0
 802081c:	bfb5      	itete	lt
 802081e:	9a04      	ldrlt	r2, [sp, #16]
 8020820:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8020824:	eba2 0809 	sublt.w	r8, r2, r9
 8020828:	464a      	movge	r2, r9
 802082a:	bfb8      	it	lt
 802082c:	2200      	movlt	r2, #0
 802082e:	e73c      	b.n	80206aa <_dtoa_r+0x632>
 8020830:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8020834:	9f07      	ldr	r7, [sp, #28]
 8020836:	461c      	mov	r4, r3
 8020838:	e744      	b.n	80206c4 <_dtoa_r+0x64c>
 802083a:	461a      	mov	r2, r3
 802083c:	e770      	b.n	8020720 <_dtoa_r+0x6a8>
 802083e:	9b06      	ldr	r3, [sp, #24]
 8020840:	2b01      	cmp	r3, #1
 8020842:	dc18      	bgt.n	8020876 <_dtoa_r+0x7fe>
 8020844:	9b02      	ldr	r3, [sp, #8]
 8020846:	b9b3      	cbnz	r3, 8020876 <_dtoa_r+0x7fe>
 8020848:	9b03      	ldr	r3, [sp, #12]
 802084a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802084e:	b9a2      	cbnz	r2, 802087a <_dtoa_r+0x802>
 8020850:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020854:	0d12      	lsrs	r2, r2, #20
 8020856:	0512      	lsls	r2, r2, #20
 8020858:	b18a      	cbz	r2, 802087e <_dtoa_r+0x806>
 802085a:	9b04      	ldr	r3, [sp, #16]
 802085c:	3301      	adds	r3, #1
 802085e:	9304      	str	r3, [sp, #16]
 8020860:	9b05      	ldr	r3, [sp, #20]
 8020862:	3301      	adds	r3, #1
 8020864:	9305      	str	r3, [sp, #20]
 8020866:	2301      	movs	r3, #1
 8020868:	9309      	str	r3, [sp, #36]	; 0x24
 802086a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802086c:	2b00      	cmp	r3, #0
 802086e:	f47f af70 	bne.w	8020752 <_dtoa_r+0x6da>
 8020872:	2001      	movs	r0, #1
 8020874:	e775      	b.n	8020762 <_dtoa_r+0x6ea>
 8020876:	2300      	movs	r3, #0
 8020878:	e7f6      	b.n	8020868 <_dtoa_r+0x7f0>
 802087a:	9b02      	ldr	r3, [sp, #8]
 802087c:	e7f4      	b.n	8020868 <_dtoa_r+0x7f0>
 802087e:	9209      	str	r2, [sp, #36]	; 0x24
 8020880:	e7f3      	b.n	802086a <_dtoa_r+0x7f2>
 8020882:	d082      	beq.n	802078a <_dtoa_r+0x712>
 8020884:	9b04      	ldr	r3, [sp, #16]
 8020886:	321c      	adds	r2, #28
 8020888:	4413      	add	r3, r2
 802088a:	9304      	str	r3, [sp, #16]
 802088c:	9b05      	ldr	r3, [sp, #20]
 802088e:	4490      	add	r8, r2
 8020890:	4413      	add	r3, r2
 8020892:	e779      	b.n	8020788 <_dtoa_r+0x710>
 8020894:	4602      	mov	r2, r0
 8020896:	e7f5      	b.n	8020884 <_dtoa_r+0x80c>
 8020898:	f1b9 0f00 	cmp.w	r9, #0
 802089c:	dc36      	bgt.n	802090c <_dtoa_r+0x894>
 802089e:	9b06      	ldr	r3, [sp, #24]
 80208a0:	2b02      	cmp	r3, #2
 80208a2:	dd33      	ble.n	802090c <_dtoa_r+0x894>
 80208a4:	46ca      	mov	sl, r9
 80208a6:	f1ba 0f00 	cmp.w	sl, #0
 80208aa:	d10d      	bne.n	80208c8 <_dtoa_r+0x850>
 80208ac:	4621      	mov	r1, r4
 80208ae:	4653      	mov	r3, sl
 80208b0:	2205      	movs	r2, #5
 80208b2:	4630      	mov	r0, r6
 80208b4:	f000 fa06 	bl	8020cc4 <__multadd>
 80208b8:	4601      	mov	r1, r0
 80208ba:	4604      	mov	r4, r0
 80208bc:	4628      	mov	r0, r5
 80208be:	f000 fc65 	bl	802118c <__mcmp>
 80208c2:	2800      	cmp	r0, #0
 80208c4:	f73f ade4 	bgt.w	8020490 <_dtoa_r+0x418>
 80208c8:	9b08      	ldr	r3, [sp, #32]
 80208ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80208ce:	ea6f 0b03 	mvn.w	fp, r3
 80208d2:	f04f 0900 	mov.w	r9, #0
 80208d6:	4621      	mov	r1, r4
 80208d8:	4630      	mov	r0, r6
 80208da:	f000 f9d1 	bl	8020c80 <_Bfree>
 80208de:	2f00      	cmp	r7, #0
 80208e0:	f43f aea1 	beq.w	8020626 <_dtoa_r+0x5ae>
 80208e4:	f1b9 0f00 	cmp.w	r9, #0
 80208e8:	d005      	beq.n	80208f6 <_dtoa_r+0x87e>
 80208ea:	45b9      	cmp	r9, r7
 80208ec:	d003      	beq.n	80208f6 <_dtoa_r+0x87e>
 80208ee:	4649      	mov	r1, r9
 80208f0:	4630      	mov	r0, r6
 80208f2:	f000 f9c5 	bl	8020c80 <_Bfree>
 80208f6:	4639      	mov	r1, r7
 80208f8:	4630      	mov	r0, r6
 80208fa:	f000 f9c1 	bl	8020c80 <_Bfree>
 80208fe:	e692      	b.n	8020626 <_dtoa_r+0x5ae>
 8020900:	2400      	movs	r4, #0
 8020902:	4627      	mov	r7, r4
 8020904:	e7e0      	b.n	80208c8 <_dtoa_r+0x850>
 8020906:	4693      	mov	fp, r2
 8020908:	4627      	mov	r7, r4
 802090a:	e5c1      	b.n	8020490 <_dtoa_r+0x418>
 802090c:	9b07      	ldr	r3, [sp, #28]
 802090e:	46ca      	mov	sl, r9
 8020910:	2b00      	cmp	r3, #0
 8020912:	f000 8100 	beq.w	8020b16 <_dtoa_r+0xa9e>
 8020916:	f1b8 0f00 	cmp.w	r8, #0
 802091a:	dd05      	ble.n	8020928 <_dtoa_r+0x8b0>
 802091c:	4639      	mov	r1, r7
 802091e:	4642      	mov	r2, r8
 8020920:	4630      	mov	r0, r6
 8020922:	f000 fbc7 	bl	80210b4 <__lshift>
 8020926:	4607      	mov	r7, r0
 8020928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802092a:	2b00      	cmp	r3, #0
 802092c:	d05d      	beq.n	80209ea <_dtoa_r+0x972>
 802092e:	6879      	ldr	r1, [r7, #4]
 8020930:	4630      	mov	r0, r6
 8020932:	f000 f965 	bl	8020c00 <_Balloc>
 8020936:	4680      	mov	r8, r0
 8020938:	b928      	cbnz	r0, 8020946 <_dtoa_r+0x8ce>
 802093a:	4b82      	ldr	r3, [pc, #520]	; (8020b44 <_dtoa_r+0xacc>)
 802093c:	4602      	mov	r2, r0
 802093e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8020942:	f7ff bbb1 	b.w	80200a8 <_dtoa_r+0x30>
 8020946:	693a      	ldr	r2, [r7, #16]
 8020948:	3202      	adds	r2, #2
 802094a:	0092      	lsls	r2, r2, #2
 802094c:	f107 010c 	add.w	r1, r7, #12
 8020950:	300c      	adds	r0, #12
 8020952:	f7ff fad4 	bl	801fefe <memcpy>
 8020956:	2201      	movs	r2, #1
 8020958:	4641      	mov	r1, r8
 802095a:	4630      	mov	r0, r6
 802095c:	f000 fbaa 	bl	80210b4 <__lshift>
 8020960:	9b01      	ldr	r3, [sp, #4]
 8020962:	3301      	adds	r3, #1
 8020964:	9304      	str	r3, [sp, #16]
 8020966:	9b01      	ldr	r3, [sp, #4]
 8020968:	4453      	add	r3, sl
 802096a:	9308      	str	r3, [sp, #32]
 802096c:	9b02      	ldr	r3, [sp, #8]
 802096e:	f003 0301 	and.w	r3, r3, #1
 8020972:	46b9      	mov	r9, r7
 8020974:	9307      	str	r3, [sp, #28]
 8020976:	4607      	mov	r7, r0
 8020978:	9b04      	ldr	r3, [sp, #16]
 802097a:	4621      	mov	r1, r4
 802097c:	3b01      	subs	r3, #1
 802097e:	4628      	mov	r0, r5
 8020980:	9302      	str	r3, [sp, #8]
 8020982:	f7ff faef 	bl	801ff64 <quorem>
 8020986:	4603      	mov	r3, r0
 8020988:	3330      	adds	r3, #48	; 0x30
 802098a:	9005      	str	r0, [sp, #20]
 802098c:	4649      	mov	r1, r9
 802098e:	4628      	mov	r0, r5
 8020990:	9309      	str	r3, [sp, #36]	; 0x24
 8020992:	f000 fbfb 	bl	802118c <__mcmp>
 8020996:	463a      	mov	r2, r7
 8020998:	4682      	mov	sl, r0
 802099a:	4621      	mov	r1, r4
 802099c:	4630      	mov	r0, r6
 802099e:	f000 fc11 	bl	80211c4 <__mdiff>
 80209a2:	68c2      	ldr	r2, [r0, #12]
 80209a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209a6:	4680      	mov	r8, r0
 80209a8:	bb0a      	cbnz	r2, 80209ee <_dtoa_r+0x976>
 80209aa:	4601      	mov	r1, r0
 80209ac:	4628      	mov	r0, r5
 80209ae:	f000 fbed 	bl	802118c <__mcmp>
 80209b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209b4:	4602      	mov	r2, r0
 80209b6:	4641      	mov	r1, r8
 80209b8:	4630      	mov	r0, r6
 80209ba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80209be:	f000 f95f 	bl	8020c80 <_Bfree>
 80209c2:	9b06      	ldr	r3, [sp, #24]
 80209c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80209c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80209ca:	ea43 0102 	orr.w	r1, r3, r2
 80209ce:	9b07      	ldr	r3, [sp, #28]
 80209d0:	4319      	orrs	r1, r3
 80209d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209d4:	d10d      	bne.n	80209f2 <_dtoa_r+0x97a>
 80209d6:	2b39      	cmp	r3, #57	; 0x39
 80209d8:	d029      	beq.n	8020a2e <_dtoa_r+0x9b6>
 80209da:	f1ba 0f00 	cmp.w	sl, #0
 80209de:	dd01      	ble.n	80209e4 <_dtoa_r+0x96c>
 80209e0:	9b05      	ldr	r3, [sp, #20]
 80209e2:	3331      	adds	r3, #49	; 0x31
 80209e4:	9a02      	ldr	r2, [sp, #8]
 80209e6:	7013      	strb	r3, [r2, #0]
 80209e8:	e775      	b.n	80208d6 <_dtoa_r+0x85e>
 80209ea:	4638      	mov	r0, r7
 80209ec:	e7b8      	b.n	8020960 <_dtoa_r+0x8e8>
 80209ee:	2201      	movs	r2, #1
 80209f0:	e7e1      	b.n	80209b6 <_dtoa_r+0x93e>
 80209f2:	f1ba 0f00 	cmp.w	sl, #0
 80209f6:	db06      	blt.n	8020a06 <_dtoa_r+0x98e>
 80209f8:	9906      	ldr	r1, [sp, #24]
 80209fa:	ea41 0a0a 	orr.w	sl, r1, sl
 80209fe:	9907      	ldr	r1, [sp, #28]
 8020a00:	ea5a 0a01 	orrs.w	sl, sl, r1
 8020a04:	d120      	bne.n	8020a48 <_dtoa_r+0x9d0>
 8020a06:	2a00      	cmp	r2, #0
 8020a08:	ddec      	ble.n	80209e4 <_dtoa_r+0x96c>
 8020a0a:	4629      	mov	r1, r5
 8020a0c:	2201      	movs	r2, #1
 8020a0e:	4630      	mov	r0, r6
 8020a10:	9304      	str	r3, [sp, #16]
 8020a12:	f000 fb4f 	bl	80210b4 <__lshift>
 8020a16:	4621      	mov	r1, r4
 8020a18:	4605      	mov	r5, r0
 8020a1a:	f000 fbb7 	bl	802118c <__mcmp>
 8020a1e:	2800      	cmp	r0, #0
 8020a20:	9b04      	ldr	r3, [sp, #16]
 8020a22:	dc02      	bgt.n	8020a2a <_dtoa_r+0x9b2>
 8020a24:	d1de      	bne.n	80209e4 <_dtoa_r+0x96c>
 8020a26:	07da      	lsls	r2, r3, #31
 8020a28:	d5dc      	bpl.n	80209e4 <_dtoa_r+0x96c>
 8020a2a:	2b39      	cmp	r3, #57	; 0x39
 8020a2c:	d1d8      	bne.n	80209e0 <_dtoa_r+0x968>
 8020a2e:	9a02      	ldr	r2, [sp, #8]
 8020a30:	2339      	movs	r3, #57	; 0x39
 8020a32:	7013      	strb	r3, [r2, #0]
 8020a34:	4643      	mov	r3, r8
 8020a36:	4698      	mov	r8, r3
 8020a38:	3b01      	subs	r3, #1
 8020a3a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8020a3e:	2a39      	cmp	r2, #57	; 0x39
 8020a40:	d051      	beq.n	8020ae6 <_dtoa_r+0xa6e>
 8020a42:	3201      	adds	r2, #1
 8020a44:	701a      	strb	r2, [r3, #0]
 8020a46:	e746      	b.n	80208d6 <_dtoa_r+0x85e>
 8020a48:	2a00      	cmp	r2, #0
 8020a4a:	dd03      	ble.n	8020a54 <_dtoa_r+0x9dc>
 8020a4c:	2b39      	cmp	r3, #57	; 0x39
 8020a4e:	d0ee      	beq.n	8020a2e <_dtoa_r+0x9b6>
 8020a50:	3301      	adds	r3, #1
 8020a52:	e7c7      	b.n	80209e4 <_dtoa_r+0x96c>
 8020a54:	9a04      	ldr	r2, [sp, #16]
 8020a56:	9908      	ldr	r1, [sp, #32]
 8020a58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020a5c:	428a      	cmp	r2, r1
 8020a5e:	d02b      	beq.n	8020ab8 <_dtoa_r+0xa40>
 8020a60:	4629      	mov	r1, r5
 8020a62:	2300      	movs	r3, #0
 8020a64:	220a      	movs	r2, #10
 8020a66:	4630      	mov	r0, r6
 8020a68:	f000 f92c 	bl	8020cc4 <__multadd>
 8020a6c:	45b9      	cmp	r9, r7
 8020a6e:	4605      	mov	r5, r0
 8020a70:	f04f 0300 	mov.w	r3, #0
 8020a74:	f04f 020a 	mov.w	r2, #10
 8020a78:	4649      	mov	r1, r9
 8020a7a:	4630      	mov	r0, r6
 8020a7c:	d107      	bne.n	8020a8e <_dtoa_r+0xa16>
 8020a7e:	f000 f921 	bl	8020cc4 <__multadd>
 8020a82:	4681      	mov	r9, r0
 8020a84:	4607      	mov	r7, r0
 8020a86:	9b04      	ldr	r3, [sp, #16]
 8020a88:	3301      	adds	r3, #1
 8020a8a:	9304      	str	r3, [sp, #16]
 8020a8c:	e774      	b.n	8020978 <_dtoa_r+0x900>
 8020a8e:	f000 f919 	bl	8020cc4 <__multadd>
 8020a92:	4639      	mov	r1, r7
 8020a94:	4681      	mov	r9, r0
 8020a96:	2300      	movs	r3, #0
 8020a98:	220a      	movs	r2, #10
 8020a9a:	4630      	mov	r0, r6
 8020a9c:	f000 f912 	bl	8020cc4 <__multadd>
 8020aa0:	4607      	mov	r7, r0
 8020aa2:	e7f0      	b.n	8020a86 <_dtoa_r+0xa0e>
 8020aa4:	f1ba 0f00 	cmp.w	sl, #0
 8020aa8:	9a01      	ldr	r2, [sp, #4]
 8020aaa:	bfcc      	ite	gt
 8020aac:	46d0      	movgt	r8, sl
 8020aae:	f04f 0801 	movle.w	r8, #1
 8020ab2:	4490      	add	r8, r2
 8020ab4:	f04f 0900 	mov.w	r9, #0
 8020ab8:	4629      	mov	r1, r5
 8020aba:	2201      	movs	r2, #1
 8020abc:	4630      	mov	r0, r6
 8020abe:	9302      	str	r3, [sp, #8]
 8020ac0:	f000 faf8 	bl	80210b4 <__lshift>
 8020ac4:	4621      	mov	r1, r4
 8020ac6:	4605      	mov	r5, r0
 8020ac8:	f000 fb60 	bl	802118c <__mcmp>
 8020acc:	2800      	cmp	r0, #0
 8020ace:	dcb1      	bgt.n	8020a34 <_dtoa_r+0x9bc>
 8020ad0:	d102      	bne.n	8020ad8 <_dtoa_r+0xa60>
 8020ad2:	9b02      	ldr	r3, [sp, #8]
 8020ad4:	07db      	lsls	r3, r3, #31
 8020ad6:	d4ad      	bmi.n	8020a34 <_dtoa_r+0x9bc>
 8020ad8:	4643      	mov	r3, r8
 8020ada:	4698      	mov	r8, r3
 8020adc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020ae0:	2a30      	cmp	r2, #48	; 0x30
 8020ae2:	d0fa      	beq.n	8020ada <_dtoa_r+0xa62>
 8020ae4:	e6f7      	b.n	80208d6 <_dtoa_r+0x85e>
 8020ae6:	9a01      	ldr	r2, [sp, #4]
 8020ae8:	429a      	cmp	r2, r3
 8020aea:	d1a4      	bne.n	8020a36 <_dtoa_r+0x9be>
 8020aec:	f10b 0b01 	add.w	fp, fp, #1
 8020af0:	2331      	movs	r3, #49	; 0x31
 8020af2:	e778      	b.n	80209e6 <_dtoa_r+0x96e>
 8020af4:	4b14      	ldr	r3, [pc, #80]	; (8020b48 <_dtoa_r+0xad0>)
 8020af6:	f7ff bb2a 	b.w	802014e <_dtoa_r+0xd6>
 8020afa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	f47f ab05 	bne.w	802010c <_dtoa_r+0x94>
 8020b02:	4b12      	ldr	r3, [pc, #72]	; (8020b4c <_dtoa_r+0xad4>)
 8020b04:	f7ff bb23 	b.w	802014e <_dtoa_r+0xd6>
 8020b08:	f1ba 0f00 	cmp.w	sl, #0
 8020b0c:	dc03      	bgt.n	8020b16 <_dtoa_r+0xa9e>
 8020b0e:	9b06      	ldr	r3, [sp, #24]
 8020b10:	2b02      	cmp	r3, #2
 8020b12:	f73f aec8 	bgt.w	80208a6 <_dtoa_r+0x82e>
 8020b16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020b1a:	4621      	mov	r1, r4
 8020b1c:	4628      	mov	r0, r5
 8020b1e:	f7ff fa21 	bl	801ff64 <quorem>
 8020b22:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8020b26:	f808 3b01 	strb.w	r3, [r8], #1
 8020b2a:	9a01      	ldr	r2, [sp, #4]
 8020b2c:	eba8 0202 	sub.w	r2, r8, r2
 8020b30:	4592      	cmp	sl, r2
 8020b32:	ddb7      	ble.n	8020aa4 <_dtoa_r+0xa2c>
 8020b34:	4629      	mov	r1, r5
 8020b36:	2300      	movs	r3, #0
 8020b38:	220a      	movs	r2, #10
 8020b3a:	4630      	mov	r0, r6
 8020b3c:	f000 f8c2 	bl	8020cc4 <__multadd>
 8020b40:	4605      	mov	r5, r0
 8020b42:	e7ea      	b.n	8020b1a <_dtoa_r+0xaa2>
 8020b44:	08024cb6 	.word	0x08024cb6
 8020b48:	08024bec 	.word	0x08024bec
 8020b4c:	08024c51 	.word	0x08024c51

08020b50 <__env_lock>:
 8020b50:	4801      	ldr	r0, [pc, #4]	; (8020b58 <__env_lock+0x8>)
 8020b52:	f7ff b9ca 	b.w	801feea <__retarget_lock_acquire_recursive>
 8020b56:	bf00      	nop
 8020b58:	2001706c 	.word	0x2001706c

08020b5c <__env_unlock>:
 8020b5c:	4801      	ldr	r0, [pc, #4]	; (8020b64 <__env_unlock+0x8>)
 8020b5e:	f7ff b9c5 	b.w	801feec <__retarget_lock_release_recursive>
 8020b62:	bf00      	nop
 8020b64:	2001706c 	.word	0x2001706c

08020b68 <_free_r>:
 8020b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020b6a:	2900      	cmp	r1, #0
 8020b6c:	d044      	beq.n	8020bf8 <_free_r+0x90>
 8020b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020b72:	9001      	str	r0, [sp, #4]
 8020b74:	2b00      	cmp	r3, #0
 8020b76:	f1a1 0404 	sub.w	r4, r1, #4
 8020b7a:	bfb8      	it	lt
 8020b7c:	18e4      	addlt	r4, r4, r3
 8020b7e:	f7fd fdbd 	bl	801e6fc <__malloc_lock>
 8020b82:	4a1e      	ldr	r2, [pc, #120]	; (8020bfc <_free_r+0x94>)
 8020b84:	9801      	ldr	r0, [sp, #4]
 8020b86:	6813      	ldr	r3, [r2, #0]
 8020b88:	b933      	cbnz	r3, 8020b98 <_free_r+0x30>
 8020b8a:	6063      	str	r3, [r4, #4]
 8020b8c:	6014      	str	r4, [r2, #0]
 8020b8e:	b003      	add	sp, #12
 8020b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020b94:	f7fd bdb8 	b.w	801e708 <__malloc_unlock>
 8020b98:	42a3      	cmp	r3, r4
 8020b9a:	d908      	bls.n	8020bae <_free_r+0x46>
 8020b9c:	6825      	ldr	r5, [r4, #0]
 8020b9e:	1961      	adds	r1, r4, r5
 8020ba0:	428b      	cmp	r3, r1
 8020ba2:	bf01      	itttt	eq
 8020ba4:	6819      	ldreq	r1, [r3, #0]
 8020ba6:	685b      	ldreq	r3, [r3, #4]
 8020ba8:	1949      	addeq	r1, r1, r5
 8020baa:	6021      	streq	r1, [r4, #0]
 8020bac:	e7ed      	b.n	8020b8a <_free_r+0x22>
 8020bae:	461a      	mov	r2, r3
 8020bb0:	685b      	ldr	r3, [r3, #4]
 8020bb2:	b10b      	cbz	r3, 8020bb8 <_free_r+0x50>
 8020bb4:	42a3      	cmp	r3, r4
 8020bb6:	d9fa      	bls.n	8020bae <_free_r+0x46>
 8020bb8:	6811      	ldr	r1, [r2, #0]
 8020bba:	1855      	adds	r5, r2, r1
 8020bbc:	42a5      	cmp	r5, r4
 8020bbe:	d10b      	bne.n	8020bd8 <_free_r+0x70>
 8020bc0:	6824      	ldr	r4, [r4, #0]
 8020bc2:	4421      	add	r1, r4
 8020bc4:	1854      	adds	r4, r2, r1
 8020bc6:	42a3      	cmp	r3, r4
 8020bc8:	6011      	str	r1, [r2, #0]
 8020bca:	d1e0      	bne.n	8020b8e <_free_r+0x26>
 8020bcc:	681c      	ldr	r4, [r3, #0]
 8020bce:	685b      	ldr	r3, [r3, #4]
 8020bd0:	6053      	str	r3, [r2, #4]
 8020bd2:	440c      	add	r4, r1
 8020bd4:	6014      	str	r4, [r2, #0]
 8020bd6:	e7da      	b.n	8020b8e <_free_r+0x26>
 8020bd8:	d902      	bls.n	8020be0 <_free_r+0x78>
 8020bda:	230c      	movs	r3, #12
 8020bdc:	6003      	str	r3, [r0, #0]
 8020bde:	e7d6      	b.n	8020b8e <_free_r+0x26>
 8020be0:	6825      	ldr	r5, [r4, #0]
 8020be2:	1961      	adds	r1, r4, r5
 8020be4:	428b      	cmp	r3, r1
 8020be6:	bf04      	itt	eq
 8020be8:	6819      	ldreq	r1, [r3, #0]
 8020bea:	685b      	ldreq	r3, [r3, #4]
 8020bec:	6063      	str	r3, [r4, #4]
 8020bee:	bf04      	itt	eq
 8020bf0:	1949      	addeq	r1, r1, r5
 8020bf2:	6021      	streq	r1, [r4, #0]
 8020bf4:	6054      	str	r4, [r2, #4]
 8020bf6:	e7ca      	b.n	8020b8e <_free_r+0x26>
 8020bf8:	b003      	add	sp, #12
 8020bfa:	bd30      	pop	{r4, r5, pc}
 8020bfc:	20016f24 	.word	0x20016f24

08020c00 <_Balloc>:
 8020c00:	b570      	push	{r4, r5, r6, lr}
 8020c02:	69c6      	ldr	r6, [r0, #28]
 8020c04:	4604      	mov	r4, r0
 8020c06:	460d      	mov	r5, r1
 8020c08:	b976      	cbnz	r6, 8020c28 <_Balloc+0x28>
 8020c0a:	2010      	movs	r0, #16
 8020c0c:	f7fd fcc6 	bl	801e59c <malloc>
 8020c10:	4602      	mov	r2, r0
 8020c12:	61e0      	str	r0, [r4, #28]
 8020c14:	b920      	cbnz	r0, 8020c20 <_Balloc+0x20>
 8020c16:	4b18      	ldr	r3, [pc, #96]	; (8020c78 <_Balloc+0x78>)
 8020c18:	4818      	ldr	r0, [pc, #96]	; (8020c7c <_Balloc+0x7c>)
 8020c1a:	216b      	movs	r1, #107	; 0x6b
 8020c1c:	f7ff f984 	bl	801ff28 <__assert_func>
 8020c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020c24:	6006      	str	r6, [r0, #0]
 8020c26:	60c6      	str	r6, [r0, #12]
 8020c28:	69e6      	ldr	r6, [r4, #28]
 8020c2a:	68f3      	ldr	r3, [r6, #12]
 8020c2c:	b183      	cbz	r3, 8020c50 <_Balloc+0x50>
 8020c2e:	69e3      	ldr	r3, [r4, #28]
 8020c30:	68db      	ldr	r3, [r3, #12]
 8020c32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020c36:	b9b8      	cbnz	r0, 8020c68 <_Balloc+0x68>
 8020c38:	2101      	movs	r1, #1
 8020c3a:	fa01 f605 	lsl.w	r6, r1, r5
 8020c3e:	1d72      	adds	r2, r6, #5
 8020c40:	0092      	lsls	r2, r2, #2
 8020c42:	4620      	mov	r0, r4
 8020c44:	f7fd fc3a 	bl	801e4bc <_calloc_r>
 8020c48:	b160      	cbz	r0, 8020c64 <_Balloc+0x64>
 8020c4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020c4e:	e00e      	b.n	8020c6e <_Balloc+0x6e>
 8020c50:	2221      	movs	r2, #33	; 0x21
 8020c52:	2104      	movs	r1, #4
 8020c54:	4620      	mov	r0, r4
 8020c56:	f7fd fc31 	bl	801e4bc <_calloc_r>
 8020c5a:	69e3      	ldr	r3, [r4, #28]
 8020c5c:	60f0      	str	r0, [r6, #12]
 8020c5e:	68db      	ldr	r3, [r3, #12]
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d1e4      	bne.n	8020c2e <_Balloc+0x2e>
 8020c64:	2000      	movs	r0, #0
 8020c66:	bd70      	pop	{r4, r5, r6, pc}
 8020c68:	6802      	ldr	r2, [r0, #0]
 8020c6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020c6e:	2300      	movs	r3, #0
 8020c70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020c74:	e7f7      	b.n	8020c66 <_Balloc+0x66>
 8020c76:	bf00      	nop
 8020c78:	08024a6c 	.word	0x08024a6c
 8020c7c:	08024cc7 	.word	0x08024cc7

08020c80 <_Bfree>:
 8020c80:	b570      	push	{r4, r5, r6, lr}
 8020c82:	69c6      	ldr	r6, [r0, #28]
 8020c84:	4605      	mov	r5, r0
 8020c86:	460c      	mov	r4, r1
 8020c88:	b976      	cbnz	r6, 8020ca8 <_Bfree+0x28>
 8020c8a:	2010      	movs	r0, #16
 8020c8c:	f7fd fc86 	bl	801e59c <malloc>
 8020c90:	4602      	mov	r2, r0
 8020c92:	61e8      	str	r0, [r5, #28]
 8020c94:	b920      	cbnz	r0, 8020ca0 <_Bfree+0x20>
 8020c96:	4b09      	ldr	r3, [pc, #36]	; (8020cbc <_Bfree+0x3c>)
 8020c98:	4809      	ldr	r0, [pc, #36]	; (8020cc0 <_Bfree+0x40>)
 8020c9a:	218f      	movs	r1, #143	; 0x8f
 8020c9c:	f7ff f944 	bl	801ff28 <__assert_func>
 8020ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020ca4:	6006      	str	r6, [r0, #0]
 8020ca6:	60c6      	str	r6, [r0, #12]
 8020ca8:	b13c      	cbz	r4, 8020cba <_Bfree+0x3a>
 8020caa:	69eb      	ldr	r3, [r5, #28]
 8020cac:	6862      	ldr	r2, [r4, #4]
 8020cae:	68db      	ldr	r3, [r3, #12]
 8020cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020cb4:	6021      	str	r1, [r4, #0]
 8020cb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020cba:	bd70      	pop	{r4, r5, r6, pc}
 8020cbc:	08024a6c 	.word	0x08024a6c
 8020cc0:	08024cc7 	.word	0x08024cc7

08020cc4 <__multadd>:
 8020cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020cc8:	690d      	ldr	r5, [r1, #16]
 8020cca:	4607      	mov	r7, r0
 8020ccc:	460c      	mov	r4, r1
 8020cce:	461e      	mov	r6, r3
 8020cd0:	f101 0c14 	add.w	ip, r1, #20
 8020cd4:	2000      	movs	r0, #0
 8020cd6:	f8dc 3000 	ldr.w	r3, [ip]
 8020cda:	b299      	uxth	r1, r3
 8020cdc:	fb02 6101 	mla	r1, r2, r1, r6
 8020ce0:	0c1e      	lsrs	r6, r3, #16
 8020ce2:	0c0b      	lsrs	r3, r1, #16
 8020ce4:	fb02 3306 	mla	r3, r2, r6, r3
 8020ce8:	b289      	uxth	r1, r1
 8020cea:	3001      	adds	r0, #1
 8020cec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020cf0:	4285      	cmp	r5, r0
 8020cf2:	f84c 1b04 	str.w	r1, [ip], #4
 8020cf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020cfa:	dcec      	bgt.n	8020cd6 <__multadd+0x12>
 8020cfc:	b30e      	cbz	r6, 8020d42 <__multadd+0x7e>
 8020cfe:	68a3      	ldr	r3, [r4, #8]
 8020d00:	42ab      	cmp	r3, r5
 8020d02:	dc19      	bgt.n	8020d38 <__multadd+0x74>
 8020d04:	6861      	ldr	r1, [r4, #4]
 8020d06:	4638      	mov	r0, r7
 8020d08:	3101      	adds	r1, #1
 8020d0a:	f7ff ff79 	bl	8020c00 <_Balloc>
 8020d0e:	4680      	mov	r8, r0
 8020d10:	b928      	cbnz	r0, 8020d1e <__multadd+0x5a>
 8020d12:	4602      	mov	r2, r0
 8020d14:	4b0c      	ldr	r3, [pc, #48]	; (8020d48 <__multadd+0x84>)
 8020d16:	480d      	ldr	r0, [pc, #52]	; (8020d4c <__multadd+0x88>)
 8020d18:	21ba      	movs	r1, #186	; 0xba
 8020d1a:	f7ff f905 	bl	801ff28 <__assert_func>
 8020d1e:	6922      	ldr	r2, [r4, #16]
 8020d20:	3202      	adds	r2, #2
 8020d22:	f104 010c 	add.w	r1, r4, #12
 8020d26:	0092      	lsls	r2, r2, #2
 8020d28:	300c      	adds	r0, #12
 8020d2a:	f7ff f8e8 	bl	801fefe <memcpy>
 8020d2e:	4621      	mov	r1, r4
 8020d30:	4638      	mov	r0, r7
 8020d32:	f7ff ffa5 	bl	8020c80 <_Bfree>
 8020d36:	4644      	mov	r4, r8
 8020d38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020d3c:	3501      	adds	r5, #1
 8020d3e:	615e      	str	r6, [r3, #20]
 8020d40:	6125      	str	r5, [r4, #16]
 8020d42:	4620      	mov	r0, r4
 8020d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d48:	08024cb6 	.word	0x08024cb6
 8020d4c:	08024cc7 	.word	0x08024cc7

08020d50 <__s2b>:
 8020d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020d54:	460c      	mov	r4, r1
 8020d56:	4615      	mov	r5, r2
 8020d58:	461f      	mov	r7, r3
 8020d5a:	2209      	movs	r2, #9
 8020d5c:	3308      	adds	r3, #8
 8020d5e:	4606      	mov	r6, r0
 8020d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8020d64:	2100      	movs	r1, #0
 8020d66:	2201      	movs	r2, #1
 8020d68:	429a      	cmp	r2, r3
 8020d6a:	db09      	blt.n	8020d80 <__s2b+0x30>
 8020d6c:	4630      	mov	r0, r6
 8020d6e:	f7ff ff47 	bl	8020c00 <_Balloc>
 8020d72:	b940      	cbnz	r0, 8020d86 <__s2b+0x36>
 8020d74:	4602      	mov	r2, r0
 8020d76:	4b19      	ldr	r3, [pc, #100]	; (8020ddc <__s2b+0x8c>)
 8020d78:	4819      	ldr	r0, [pc, #100]	; (8020de0 <__s2b+0x90>)
 8020d7a:	21d3      	movs	r1, #211	; 0xd3
 8020d7c:	f7ff f8d4 	bl	801ff28 <__assert_func>
 8020d80:	0052      	lsls	r2, r2, #1
 8020d82:	3101      	adds	r1, #1
 8020d84:	e7f0      	b.n	8020d68 <__s2b+0x18>
 8020d86:	9b08      	ldr	r3, [sp, #32]
 8020d88:	6143      	str	r3, [r0, #20]
 8020d8a:	2d09      	cmp	r5, #9
 8020d8c:	f04f 0301 	mov.w	r3, #1
 8020d90:	6103      	str	r3, [r0, #16]
 8020d92:	dd16      	ble.n	8020dc2 <__s2b+0x72>
 8020d94:	f104 0909 	add.w	r9, r4, #9
 8020d98:	46c8      	mov	r8, r9
 8020d9a:	442c      	add	r4, r5
 8020d9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020da0:	4601      	mov	r1, r0
 8020da2:	3b30      	subs	r3, #48	; 0x30
 8020da4:	220a      	movs	r2, #10
 8020da6:	4630      	mov	r0, r6
 8020da8:	f7ff ff8c 	bl	8020cc4 <__multadd>
 8020dac:	45a0      	cmp	r8, r4
 8020dae:	d1f5      	bne.n	8020d9c <__s2b+0x4c>
 8020db0:	f1a5 0408 	sub.w	r4, r5, #8
 8020db4:	444c      	add	r4, r9
 8020db6:	1b2d      	subs	r5, r5, r4
 8020db8:	1963      	adds	r3, r4, r5
 8020dba:	42bb      	cmp	r3, r7
 8020dbc:	db04      	blt.n	8020dc8 <__s2b+0x78>
 8020dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020dc2:	340a      	adds	r4, #10
 8020dc4:	2509      	movs	r5, #9
 8020dc6:	e7f6      	b.n	8020db6 <__s2b+0x66>
 8020dc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020dcc:	4601      	mov	r1, r0
 8020dce:	3b30      	subs	r3, #48	; 0x30
 8020dd0:	220a      	movs	r2, #10
 8020dd2:	4630      	mov	r0, r6
 8020dd4:	f7ff ff76 	bl	8020cc4 <__multadd>
 8020dd8:	e7ee      	b.n	8020db8 <__s2b+0x68>
 8020dda:	bf00      	nop
 8020ddc:	08024cb6 	.word	0x08024cb6
 8020de0:	08024cc7 	.word	0x08024cc7

08020de4 <__hi0bits>:
 8020de4:	0c03      	lsrs	r3, r0, #16
 8020de6:	041b      	lsls	r3, r3, #16
 8020de8:	b9d3      	cbnz	r3, 8020e20 <__hi0bits+0x3c>
 8020dea:	0400      	lsls	r0, r0, #16
 8020dec:	2310      	movs	r3, #16
 8020dee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020df2:	bf04      	itt	eq
 8020df4:	0200      	lsleq	r0, r0, #8
 8020df6:	3308      	addeq	r3, #8
 8020df8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020dfc:	bf04      	itt	eq
 8020dfe:	0100      	lsleq	r0, r0, #4
 8020e00:	3304      	addeq	r3, #4
 8020e02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020e06:	bf04      	itt	eq
 8020e08:	0080      	lsleq	r0, r0, #2
 8020e0a:	3302      	addeq	r3, #2
 8020e0c:	2800      	cmp	r0, #0
 8020e0e:	db05      	blt.n	8020e1c <__hi0bits+0x38>
 8020e10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020e14:	f103 0301 	add.w	r3, r3, #1
 8020e18:	bf08      	it	eq
 8020e1a:	2320      	moveq	r3, #32
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	4770      	bx	lr
 8020e20:	2300      	movs	r3, #0
 8020e22:	e7e4      	b.n	8020dee <__hi0bits+0xa>

08020e24 <__lo0bits>:
 8020e24:	6803      	ldr	r3, [r0, #0]
 8020e26:	f013 0207 	ands.w	r2, r3, #7
 8020e2a:	d00c      	beq.n	8020e46 <__lo0bits+0x22>
 8020e2c:	07d9      	lsls	r1, r3, #31
 8020e2e:	d422      	bmi.n	8020e76 <__lo0bits+0x52>
 8020e30:	079a      	lsls	r2, r3, #30
 8020e32:	bf49      	itett	mi
 8020e34:	085b      	lsrmi	r3, r3, #1
 8020e36:	089b      	lsrpl	r3, r3, #2
 8020e38:	6003      	strmi	r3, [r0, #0]
 8020e3a:	2201      	movmi	r2, #1
 8020e3c:	bf5c      	itt	pl
 8020e3e:	6003      	strpl	r3, [r0, #0]
 8020e40:	2202      	movpl	r2, #2
 8020e42:	4610      	mov	r0, r2
 8020e44:	4770      	bx	lr
 8020e46:	b299      	uxth	r1, r3
 8020e48:	b909      	cbnz	r1, 8020e4e <__lo0bits+0x2a>
 8020e4a:	0c1b      	lsrs	r3, r3, #16
 8020e4c:	2210      	movs	r2, #16
 8020e4e:	b2d9      	uxtb	r1, r3
 8020e50:	b909      	cbnz	r1, 8020e56 <__lo0bits+0x32>
 8020e52:	3208      	adds	r2, #8
 8020e54:	0a1b      	lsrs	r3, r3, #8
 8020e56:	0719      	lsls	r1, r3, #28
 8020e58:	bf04      	itt	eq
 8020e5a:	091b      	lsreq	r3, r3, #4
 8020e5c:	3204      	addeq	r2, #4
 8020e5e:	0799      	lsls	r1, r3, #30
 8020e60:	bf04      	itt	eq
 8020e62:	089b      	lsreq	r3, r3, #2
 8020e64:	3202      	addeq	r2, #2
 8020e66:	07d9      	lsls	r1, r3, #31
 8020e68:	d403      	bmi.n	8020e72 <__lo0bits+0x4e>
 8020e6a:	085b      	lsrs	r3, r3, #1
 8020e6c:	f102 0201 	add.w	r2, r2, #1
 8020e70:	d003      	beq.n	8020e7a <__lo0bits+0x56>
 8020e72:	6003      	str	r3, [r0, #0]
 8020e74:	e7e5      	b.n	8020e42 <__lo0bits+0x1e>
 8020e76:	2200      	movs	r2, #0
 8020e78:	e7e3      	b.n	8020e42 <__lo0bits+0x1e>
 8020e7a:	2220      	movs	r2, #32
 8020e7c:	e7e1      	b.n	8020e42 <__lo0bits+0x1e>
	...

08020e80 <__i2b>:
 8020e80:	b510      	push	{r4, lr}
 8020e82:	460c      	mov	r4, r1
 8020e84:	2101      	movs	r1, #1
 8020e86:	f7ff febb 	bl	8020c00 <_Balloc>
 8020e8a:	4602      	mov	r2, r0
 8020e8c:	b928      	cbnz	r0, 8020e9a <__i2b+0x1a>
 8020e8e:	4b05      	ldr	r3, [pc, #20]	; (8020ea4 <__i2b+0x24>)
 8020e90:	4805      	ldr	r0, [pc, #20]	; (8020ea8 <__i2b+0x28>)
 8020e92:	f240 1145 	movw	r1, #325	; 0x145
 8020e96:	f7ff f847 	bl	801ff28 <__assert_func>
 8020e9a:	2301      	movs	r3, #1
 8020e9c:	6144      	str	r4, [r0, #20]
 8020e9e:	6103      	str	r3, [r0, #16]
 8020ea0:	bd10      	pop	{r4, pc}
 8020ea2:	bf00      	nop
 8020ea4:	08024cb6 	.word	0x08024cb6
 8020ea8:	08024cc7 	.word	0x08024cc7

08020eac <__multiply>:
 8020eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eb0:	4691      	mov	r9, r2
 8020eb2:	690a      	ldr	r2, [r1, #16]
 8020eb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020eb8:	429a      	cmp	r2, r3
 8020eba:	bfb8      	it	lt
 8020ebc:	460b      	movlt	r3, r1
 8020ebe:	460c      	mov	r4, r1
 8020ec0:	bfbc      	itt	lt
 8020ec2:	464c      	movlt	r4, r9
 8020ec4:	4699      	movlt	r9, r3
 8020ec6:	6927      	ldr	r7, [r4, #16]
 8020ec8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020ecc:	68a3      	ldr	r3, [r4, #8]
 8020ece:	6861      	ldr	r1, [r4, #4]
 8020ed0:	eb07 060a 	add.w	r6, r7, sl
 8020ed4:	42b3      	cmp	r3, r6
 8020ed6:	b085      	sub	sp, #20
 8020ed8:	bfb8      	it	lt
 8020eda:	3101      	addlt	r1, #1
 8020edc:	f7ff fe90 	bl	8020c00 <_Balloc>
 8020ee0:	b930      	cbnz	r0, 8020ef0 <__multiply+0x44>
 8020ee2:	4602      	mov	r2, r0
 8020ee4:	4b44      	ldr	r3, [pc, #272]	; (8020ff8 <__multiply+0x14c>)
 8020ee6:	4845      	ldr	r0, [pc, #276]	; (8020ffc <__multiply+0x150>)
 8020ee8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8020eec:	f7ff f81c 	bl	801ff28 <__assert_func>
 8020ef0:	f100 0514 	add.w	r5, r0, #20
 8020ef4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020ef8:	462b      	mov	r3, r5
 8020efa:	2200      	movs	r2, #0
 8020efc:	4543      	cmp	r3, r8
 8020efe:	d321      	bcc.n	8020f44 <__multiply+0x98>
 8020f00:	f104 0314 	add.w	r3, r4, #20
 8020f04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020f08:	f109 0314 	add.w	r3, r9, #20
 8020f0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8020f10:	9202      	str	r2, [sp, #8]
 8020f12:	1b3a      	subs	r2, r7, r4
 8020f14:	3a15      	subs	r2, #21
 8020f16:	f022 0203 	bic.w	r2, r2, #3
 8020f1a:	3204      	adds	r2, #4
 8020f1c:	f104 0115 	add.w	r1, r4, #21
 8020f20:	428f      	cmp	r7, r1
 8020f22:	bf38      	it	cc
 8020f24:	2204      	movcc	r2, #4
 8020f26:	9201      	str	r2, [sp, #4]
 8020f28:	9a02      	ldr	r2, [sp, #8]
 8020f2a:	9303      	str	r3, [sp, #12]
 8020f2c:	429a      	cmp	r2, r3
 8020f2e:	d80c      	bhi.n	8020f4a <__multiply+0x9e>
 8020f30:	2e00      	cmp	r6, #0
 8020f32:	dd03      	ble.n	8020f3c <__multiply+0x90>
 8020f34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d05b      	beq.n	8020ff4 <__multiply+0x148>
 8020f3c:	6106      	str	r6, [r0, #16]
 8020f3e:	b005      	add	sp, #20
 8020f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f44:	f843 2b04 	str.w	r2, [r3], #4
 8020f48:	e7d8      	b.n	8020efc <__multiply+0x50>
 8020f4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8020f4e:	f1ba 0f00 	cmp.w	sl, #0
 8020f52:	d024      	beq.n	8020f9e <__multiply+0xf2>
 8020f54:	f104 0e14 	add.w	lr, r4, #20
 8020f58:	46a9      	mov	r9, r5
 8020f5a:	f04f 0c00 	mov.w	ip, #0
 8020f5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8020f62:	f8d9 1000 	ldr.w	r1, [r9]
 8020f66:	fa1f fb82 	uxth.w	fp, r2
 8020f6a:	b289      	uxth	r1, r1
 8020f6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8020f70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8020f74:	f8d9 2000 	ldr.w	r2, [r9]
 8020f78:	4461      	add	r1, ip
 8020f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020f7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8020f82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8020f86:	b289      	uxth	r1, r1
 8020f88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020f8c:	4577      	cmp	r7, lr
 8020f8e:	f849 1b04 	str.w	r1, [r9], #4
 8020f92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020f96:	d8e2      	bhi.n	8020f5e <__multiply+0xb2>
 8020f98:	9a01      	ldr	r2, [sp, #4]
 8020f9a:	f845 c002 	str.w	ip, [r5, r2]
 8020f9e:	9a03      	ldr	r2, [sp, #12]
 8020fa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020fa4:	3304      	adds	r3, #4
 8020fa6:	f1b9 0f00 	cmp.w	r9, #0
 8020faa:	d021      	beq.n	8020ff0 <__multiply+0x144>
 8020fac:	6829      	ldr	r1, [r5, #0]
 8020fae:	f104 0c14 	add.w	ip, r4, #20
 8020fb2:	46ae      	mov	lr, r5
 8020fb4:	f04f 0a00 	mov.w	sl, #0
 8020fb8:	f8bc b000 	ldrh.w	fp, [ip]
 8020fbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8020fc0:	fb09 220b 	mla	r2, r9, fp, r2
 8020fc4:	4452      	add	r2, sl
 8020fc6:	b289      	uxth	r1, r1
 8020fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020fcc:	f84e 1b04 	str.w	r1, [lr], #4
 8020fd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8020fd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8020fd8:	f8be 1000 	ldrh.w	r1, [lr]
 8020fdc:	fb09 110a 	mla	r1, r9, sl, r1
 8020fe0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8020fe4:	4567      	cmp	r7, ip
 8020fe6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8020fea:	d8e5      	bhi.n	8020fb8 <__multiply+0x10c>
 8020fec:	9a01      	ldr	r2, [sp, #4]
 8020fee:	50a9      	str	r1, [r5, r2]
 8020ff0:	3504      	adds	r5, #4
 8020ff2:	e799      	b.n	8020f28 <__multiply+0x7c>
 8020ff4:	3e01      	subs	r6, #1
 8020ff6:	e79b      	b.n	8020f30 <__multiply+0x84>
 8020ff8:	08024cb6 	.word	0x08024cb6
 8020ffc:	08024cc7 	.word	0x08024cc7

08021000 <__pow5mult>:
 8021000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021004:	4615      	mov	r5, r2
 8021006:	f012 0203 	ands.w	r2, r2, #3
 802100a:	4606      	mov	r6, r0
 802100c:	460f      	mov	r7, r1
 802100e:	d007      	beq.n	8021020 <__pow5mult+0x20>
 8021010:	4c25      	ldr	r4, [pc, #148]	; (80210a8 <__pow5mult+0xa8>)
 8021012:	3a01      	subs	r2, #1
 8021014:	2300      	movs	r3, #0
 8021016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802101a:	f7ff fe53 	bl	8020cc4 <__multadd>
 802101e:	4607      	mov	r7, r0
 8021020:	10ad      	asrs	r5, r5, #2
 8021022:	d03d      	beq.n	80210a0 <__pow5mult+0xa0>
 8021024:	69f4      	ldr	r4, [r6, #28]
 8021026:	b97c      	cbnz	r4, 8021048 <__pow5mult+0x48>
 8021028:	2010      	movs	r0, #16
 802102a:	f7fd fab7 	bl	801e59c <malloc>
 802102e:	4602      	mov	r2, r0
 8021030:	61f0      	str	r0, [r6, #28]
 8021032:	b928      	cbnz	r0, 8021040 <__pow5mult+0x40>
 8021034:	4b1d      	ldr	r3, [pc, #116]	; (80210ac <__pow5mult+0xac>)
 8021036:	481e      	ldr	r0, [pc, #120]	; (80210b0 <__pow5mult+0xb0>)
 8021038:	f240 11b3 	movw	r1, #435	; 0x1b3
 802103c:	f7fe ff74 	bl	801ff28 <__assert_func>
 8021040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021044:	6004      	str	r4, [r0, #0]
 8021046:	60c4      	str	r4, [r0, #12]
 8021048:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802104c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021050:	b94c      	cbnz	r4, 8021066 <__pow5mult+0x66>
 8021052:	f240 2171 	movw	r1, #625	; 0x271
 8021056:	4630      	mov	r0, r6
 8021058:	f7ff ff12 	bl	8020e80 <__i2b>
 802105c:	2300      	movs	r3, #0
 802105e:	f8c8 0008 	str.w	r0, [r8, #8]
 8021062:	4604      	mov	r4, r0
 8021064:	6003      	str	r3, [r0, #0]
 8021066:	f04f 0900 	mov.w	r9, #0
 802106a:	07eb      	lsls	r3, r5, #31
 802106c:	d50a      	bpl.n	8021084 <__pow5mult+0x84>
 802106e:	4639      	mov	r1, r7
 8021070:	4622      	mov	r2, r4
 8021072:	4630      	mov	r0, r6
 8021074:	f7ff ff1a 	bl	8020eac <__multiply>
 8021078:	4639      	mov	r1, r7
 802107a:	4680      	mov	r8, r0
 802107c:	4630      	mov	r0, r6
 802107e:	f7ff fdff 	bl	8020c80 <_Bfree>
 8021082:	4647      	mov	r7, r8
 8021084:	106d      	asrs	r5, r5, #1
 8021086:	d00b      	beq.n	80210a0 <__pow5mult+0xa0>
 8021088:	6820      	ldr	r0, [r4, #0]
 802108a:	b938      	cbnz	r0, 802109c <__pow5mult+0x9c>
 802108c:	4622      	mov	r2, r4
 802108e:	4621      	mov	r1, r4
 8021090:	4630      	mov	r0, r6
 8021092:	f7ff ff0b 	bl	8020eac <__multiply>
 8021096:	6020      	str	r0, [r4, #0]
 8021098:	f8c0 9000 	str.w	r9, [r0]
 802109c:	4604      	mov	r4, r0
 802109e:	e7e4      	b.n	802106a <__pow5mult+0x6a>
 80210a0:	4638      	mov	r0, r7
 80210a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80210a6:	bf00      	nop
 80210a8:	08024e10 	.word	0x08024e10
 80210ac:	08024a6c 	.word	0x08024a6c
 80210b0:	08024cc7 	.word	0x08024cc7

080210b4 <__lshift>:
 80210b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80210b8:	460c      	mov	r4, r1
 80210ba:	6849      	ldr	r1, [r1, #4]
 80210bc:	6923      	ldr	r3, [r4, #16]
 80210be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80210c2:	68a3      	ldr	r3, [r4, #8]
 80210c4:	4607      	mov	r7, r0
 80210c6:	4691      	mov	r9, r2
 80210c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80210cc:	f108 0601 	add.w	r6, r8, #1
 80210d0:	42b3      	cmp	r3, r6
 80210d2:	db0b      	blt.n	80210ec <__lshift+0x38>
 80210d4:	4638      	mov	r0, r7
 80210d6:	f7ff fd93 	bl	8020c00 <_Balloc>
 80210da:	4605      	mov	r5, r0
 80210dc:	b948      	cbnz	r0, 80210f2 <__lshift+0x3e>
 80210de:	4602      	mov	r2, r0
 80210e0:	4b28      	ldr	r3, [pc, #160]	; (8021184 <__lshift+0xd0>)
 80210e2:	4829      	ldr	r0, [pc, #164]	; (8021188 <__lshift+0xd4>)
 80210e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80210e8:	f7fe ff1e 	bl	801ff28 <__assert_func>
 80210ec:	3101      	adds	r1, #1
 80210ee:	005b      	lsls	r3, r3, #1
 80210f0:	e7ee      	b.n	80210d0 <__lshift+0x1c>
 80210f2:	2300      	movs	r3, #0
 80210f4:	f100 0114 	add.w	r1, r0, #20
 80210f8:	f100 0210 	add.w	r2, r0, #16
 80210fc:	4618      	mov	r0, r3
 80210fe:	4553      	cmp	r3, sl
 8021100:	db33      	blt.n	802116a <__lshift+0xb6>
 8021102:	6920      	ldr	r0, [r4, #16]
 8021104:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021108:	f104 0314 	add.w	r3, r4, #20
 802110c:	f019 091f 	ands.w	r9, r9, #31
 8021110:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021114:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021118:	d02b      	beq.n	8021172 <__lshift+0xbe>
 802111a:	f1c9 0e20 	rsb	lr, r9, #32
 802111e:	468a      	mov	sl, r1
 8021120:	2200      	movs	r2, #0
 8021122:	6818      	ldr	r0, [r3, #0]
 8021124:	fa00 f009 	lsl.w	r0, r0, r9
 8021128:	4310      	orrs	r0, r2
 802112a:	f84a 0b04 	str.w	r0, [sl], #4
 802112e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021132:	459c      	cmp	ip, r3
 8021134:	fa22 f20e 	lsr.w	r2, r2, lr
 8021138:	d8f3      	bhi.n	8021122 <__lshift+0x6e>
 802113a:	ebac 0304 	sub.w	r3, ip, r4
 802113e:	3b15      	subs	r3, #21
 8021140:	f023 0303 	bic.w	r3, r3, #3
 8021144:	3304      	adds	r3, #4
 8021146:	f104 0015 	add.w	r0, r4, #21
 802114a:	4584      	cmp	ip, r0
 802114c:	bf38      	it	cc
 802114e:	2304      	movcc	r3, #4
 8021150:	50ca      	str	r2, [r1, r3]
 8021152:	b10a      	cbz	r2, 8021158 <__lshift+0xa4>
 8021154:	f108 0602 	add.w	r6, r8, #2
 8021158:	3e01      	subs	r6, #1
 802115a:	4638      	mov	r0, r7
 802115c:	612e      	str	r6, [r5, #16]
 802115e:	4621      	mov	r1, r4
 8021160:	f7ff fd8e 	bl	8020c80 <_Bfree>
 8021164:	4628      	mov	r0, r5
 8021166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802116a:	f842 0f04 	str.w	r0, [r2, #4]!
 802116e:	3301      	adds	r3, #1
 8021170:	e7c5      	b.n	80210fe <__lshift+0x4a>
 8021172:	3904      	subs	r1, #4
 8021174:	f853 2b04 	ldr.w	r2, [r3], #4
 8021178:	f841 2f04 	str.w	r2, [r1, #4]!
 802117c:	459c      	cmp	ip, r3
 802117e:	d8f9      	bhi.n	8021174 <__lshift+0xc0>
 8021180:	e7ea      	b.n	8021158 <__lshift+0xa4>
 8021182:	bf00      	nop
 8021184:	08024cb6 	.word	0x08024cb6
 8021188:	08024cc7 	.word	0x08024cc7

0802118c <__mcmp>:
 802118c:	b530      	push	{r4, r5, lr}
 802118e:	6902      	ldr	r2, [r0, #16]
 8021190:	690c      	ldr	r4, [r1, #16]
 8021192:	1b12      	subs	r2, r2, r4
 8021194:	d10e      	bne.n	80211b4 <__mcmp+0x28>
 8021196:	f100 0314 	add.w	r3, r0, #20
 802119a:	3114      	adds	r1, #20
 802119c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80211a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80211a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80211a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80211ac:	42a5      	cmp	r5, r4
 80211ae:	d003      	beq.n	80211b8 <__mcmp+0x2c>
 80211b0:	d305      	bcc.n	80211be <__mcmp+0x32>
 80211b2:	2201      	movs	r2, #1
 80211b4:	4610      	mov	r0, r2
 80211b6:	bd30      	pop	{r4, r5, pc}
 80211b8:	4283      	cmp	r3, r0
 80211ba:	d3f3      	bcc.n	80211a4 <__mcmp+0x18>
 80211bc:	e7fa      	b.n	80211b4 <__mcmp+0x28>
 80211be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80211c2:	e7f7      	b.n	80211b4 <__mcmp+0x28>

080211c4 <__mdiff>:
 80211c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211c8:	460c      	mov	r4, r1
 80211ca:	4606      	mov	r6, r0
 80211cc:	4611      	mov	r1, r2
 80211ce:	4620      	mov	r0, r4
 80211d0:	4690      	mov	r8, r2
 80211d2:	f7ff ffdb 	bl	802118c <__mcmp>
 80211d6:	1e05      	subs	r5, r0, #0
 80211d8:	d110      	bne.n	80211fc <__mdiff+0x38>
 80211da:	4629      	mov	r1, r5
 80211dc:	4630      	mov	r0, r6
 80211de:	f7ff fd0f 	bl	8020c00 <_Balloc>
 80211e2:	b930      	cbnz	r0, 80211f2 <__mdiff+0x2e>
 80211e4:	4b3a      	ldr	r3, [pc, #232]	; (80212d0 <__mdiff+0x10c>)
 80211e6:	4602      	mov	r2, r0
 80211e8:	f240 2137 	movw	r1, #567	; 0x237
 80211ec:	4839      	ldr	r0, [pc, #228]	; (80212d4 <__mdiff+0x110>)
 80211ee:	f7fe fe9b 	bl	801ff28 <__assert_func>
 80211f2:	2301      	movs	r3, #1
 80211f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80211f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211fc:	bfa4      	itt	ge
 80211fe:	4643      	movge	r3, r8
 8021200:	46a0      	movge	r8, r4
 8021202:	4630      	mov	r0, r6
 8021204:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021208:	bfa6      	itte	ge
 802120a:	461c      	movge	r4, r3
 802120c:	2500      	movge	r5, #0
 802120e:	2501      	movlt	r5, #1
 8021210:	f7ff fcf6 	bl	8020c00 <_Balloc>
 8021214:	b920      	cbnz	r0, 8021220 <__mdiff+0x5c>
 8021216:	4b2e      	ldr	r3, [pc, #184]	; (80212d0 <__mdiff+0x10c>)
 8021218:	4602      	mov	r2, r0
 802121a:	f240 2145 	movw	r1, #581	; 0x245
 802121e:	e7e5      	b.n	80211ec <__mdiff+0x28>
 8021220:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021224:	6926      	ldr	r6, [r4, #16]
 8021226:	60c5      	str	r5, [r0, #12]
 8021228:	f104 0914 	add.w	r9, r4, #20
 802122c:	f108 0514 	add.w	r5, r8, #20
 8021230:	f100 0e14 	add.w	lr, r0, #20
 8021234:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021238:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802123c:	f108 0210 	add.w	r2, r8, #16
 8021240:	46f2      	mov	sl, lr
 8021242:	2100      	movs	r1, #0
 8021244:	f859 3b04 	ldr.w	r3, [r9], #4
 8021248:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802124c:	fa11 f88b 	uxtah	r8, r1, fp
 8021250:	b299      	uxth	r1, r3
 8021252:	0c1b      	lsrs	r3, r3, #16
 8021254:	eba8 0801 	sub.w	r8, r8, r1
 8021258:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802125c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021260:	fa1f f888 	uxth.w	r8, r8
 8021264:	1419      	asrs	r1, r3, #16
 8021266:	454e      	cmp	r6, r9
 8021268:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802126c:	f84a 3b04 	str.w	r3, [sl], #4
 8021270:	d8e8      	bhi.n	8021244 <__mdiff+0x80>
 8021272:	1b33      	subs	r3, r6, r4
 8021274:	3b15      	subs	r3, #21
 8021276:	f023 0303 	bic.w	r3, r3, #3
 802127a:	3304      	adds	r3, #4
 802127c:	3415      	adds	r4, #21
 802127e:	42a6      	cmp	r6, r4
 8021280:	bf38      	it	cc
 8021282:	2304      	movcc	r3, #4
 8021284:	441d      	add	r5, r3
 8021286:	4473      	add	r3, lr
 8021288:	469e      	mov	lr, r3
 802128a:	462e      	mov	r6, r5
 802128c:	4566      	cmp	r6, ip
 802128e:	d30e      	bcc.n	80212ae <__mdiff+0xea>
 8021290:	f10c 0203 	add.w	r2, ip, #3
 8021294:	1b52      	subs	r2, r2, r5
 8021296:	f022 0203 	bic.w	r2, r2, #3
 802129a:	3d03      	subs	r5, #3
 802129c:	45ac      	cmp	ip, r5
 802129e:	bf38      	it	cc
 80212a0:	2200      	movcc	r2, #0
 80212a2:	4413      	add	r3, r2
 80212a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80212a8:	b17a      	cbz	r2, 80212ca <__mdiff+0x106>
 80212aa:	6107      	str	r7, [r0, #16]
 80212ac:	e7a4      	b.n	80211f8 <__mdiff+0x34>
 80212ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80212b2:	fa11 f288 	uxtah	r2, r1, r8
 80212b6:	1414      	asrs	r4, r2, #16
 80212b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80212bc:	b292      	uxth	r2, r2
 80212be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80212c2:	f84e 2b04 	str.w	r2, [lr], #4
 80212c6:	1421      	asrs	r1, r4, #16
 80212c8:	e7e0      	b.n	802128c <__mdiff+0xc8>
 80212ca:	3f01      	subs	r7, #1
 80212cc:	e7ea      	b.n	80212a4 <__mdiff+0xe0>
 80212ce:	bf00      	nop
 80212d0:	08024cb6 	.word	0x08024cb6
 80212d4:	08024cc7 	.word	0x08024cc7

080212d8 <__ulp>:
 80212d8:	b082      	sub	sp, #8
 80212da:	ed8d 0b00 	vstr	d0, [sp]
 80212de:	9a01      	ldr	r2, [sp, #4]
 80212e0:	4b0f      	ldr	r3, [pc, #60]	; (8021320 <__ulp+0x48>)
 80212e2:	4013      	ands	r3, r2
 80212e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	dc08      	bgt.n	80212fe <__ulp+0x26>
 80212ec:	425b      	negs	r3, r3
 80212ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80212f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80212f6:	da04      	bge.n	8021302 <__ulp+0x2a>
 80212f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80212fc:	4113      	asrs	r3, r2
 80212fe:	2200      	movs	r2, #0
 8021300:	e008      	b.n	8021314 <__ulp+0x3c>
 8021302:	f1a2 0314 	sub.w	r3, r2, #20
 8021306:	2b1e      	cmp	r3, #30
 8021308:	bfda      	itte	le
 802130a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802130e:	40da      	lsrle	r2, r3
 8021310:	2201      	movgt	r2, #1
 8021312:	2300      	movs	r3, #0
 8021314:	4619      	mov	r1, r3
 8021316:	4610      	mov	r0, r2
 8021318:	ec41 0b10 	vmov	d0, r0, r1
 802131c:	b002      	add	sp, #8
 802131e:	4770      	bx	lr
 8021320:	7ff00000 	.word	0x7ff00000

08021324 <__b2d>:
 8021324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021328:	6906      	ldr	r6, [r0, #16]
 802132a:	f100 0814 	add.w	r8, r0, #20
 802132e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8021332:	1f37      	subs	r7, r6, #4
 8021334:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8021338:	4610      	mov	r0, r2
 802133a:	f7ff fd53 	bl	8020de4 <__hi0bits>
 802133e:	f1c0 0320 	rsb	r3, r0, #32
 8021342:	280a      	cmp	r0, #10
 8021344:	600b      	str	r3, [r1, #0]
 8021346:	491b      	ldr	r1, [pc, #108]	; (80213b4 <__b2d+0x90>)
 8021348:	dc15      	bgt.n	8021376 <__b2d+0x52>
 802134a:	f1c0 0c0b 	rsb	ip, r0, #11
 802134e:	fa22 f30c 	lsr.w	r3, r2, ip
 8021352:	45b8      	cmp	r8, r7
 8021354:	ea43 0501 	orr.w	r5, r3, r1
 8021358:	bf34      	ite	cc
 802135a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802135e:	2300      	movcs	r3, #0
 8021360:	3015      	adds	r0, #21
 8021362:	fa02 f000 	lsl.w	r0, r2, r0
 8021366:	fa23 f30c 	lsr.w	r3, r3, ip
 802136a:	4303      	orrs	r3, r0
 802136c:	461c      	mov	r4, r3
 802136e:	ec45 4b10 	vmov	d0, r4, r5
 8021372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021376:	45b8      	cmp	r8, r7
 8021378:	bf3a      	itte	cc
 802137a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802137e:	f1a6 0708 	subcc.w	r7, r6, #8
 8021382:	2300      	movcs	r3, #0
 8021384:	380b      	subs	r0, #11
 8021386:	d012      	beq.n	80213ae <__b2d+0x8a>
 8021388:	f1c0 0120 	rsb	r1, r0, #32
 802138c:	fa23 f401 	lsr.w	r4, r3, r1
 8021390:	4082      	lsls	r2, r0
 8021392:	4322      	orrs	r2, r4
 8021394:	4547      	cmp	r7, r8
 8021396:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802139a:	bf8c      	ite	hi
 802139c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80213a0:	2200      	movls	r2, #0
 80213a2:	4083      	lsls	r3, r0
 80213a4:	40ca      	lsrs	r2, r1
 80213a6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80213aa:	4313      	orrs	r3, r2
 80213ac:	e7de      	b.n	802136c <__b2d+0x48>
 80213ae:	ea42 0501 	orr.w	r5, r2, r1
 80213b2:	e7db      	b.n	802136c <__b2d+0x48>
 80213b4:	3ff00000 	.word	0x3ff00000

080213b8 <__d2b>:
 80213b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80213bc:	460f      	mov	r7, r1
 80213be:	2101      	movs	r1, #1
 80213c0:	ec59 8b10 	vmov	r8, r9, d0
 80213c4:	4616      	mov	r6, r2
 80213c6:	f7ff fc1b 	bl	8020c00 <_Balloc>
 80213ca:	4604      	mov	r4, r0
 80213cc:	b930      	cbnz	r0, 80213dc <__d2b+0x24>
 80213ce:	4602      	mov	r2, r0
 80213d0:	4b24      	ldr	r3, [pc, #144]	; (8021464 <__d2b+0xac>)
 80213d2:	4825      	ldr	r0, [pc, #148]	; (8021468 <__d2b+0xb0>)
 80213d4:	f240 310f 	movw	r1, #783	; 0x30f
 80213d8:	f7fe fda6 	bl	801ff28 <__assert_func>
 80213dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80213e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80213e4:	bb2d      	cbnz	r5, 8021432 <__d2b+0x7a>
 80213e6:	9301      	str	r3, [sp, #4]
 80213e8:	f1b8 0300 	subs.w	r3, r8, #0
 80213ec:	d026      	beq.n	802143c <__d2b+0x84>
 80213ee:	4668      	mov	r0, sp
 80213f0:	9300      	str	r3, [sp, #0]
 80213f2:	f7ff fd17 	bl	8020e24 <__lo0bits>
 80213f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80213fa:	b1e8      	cbz	r0, 8021438 <__d2b+0x80>
 80213fc:	f1c0 0320 	rsb	r3, r0, #32
 8021400:	fa02 f303 	lsl.w	r3, r2, r3
 8021404:	430b      	orrs	r3, r1
 8021406:	40c2      	lsrs	r2, r0
 8021408:	6163      	str	r3, [r4, #20]
 802140a:	9201      	str	r2, [sp, #4]
 802140c:	9b01      	ldr	r3, [sp, #4]
 802140e:	61a3      	str	r3, [r4, #24]
 8021410:	2b00      	cmp	r3, #0
 8021412:	bf14      	ite	ne
 8021414:	2202      	movne	r2, #2
 8021416:	2201      	moveq	r2, #1
 8021418:	6122      	str	r2, [r4, #16]
 802141a:	b1bd      	cbz	r5, 802144c <__d2b+0x94>
 802141c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021420:	4405      	add	r5, r0
 8021422:	603d      	str	r5, [r7, #0]
 8021424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021428:	6030      	str	r0, [r6, #0]
 802142a:	4620      	mov	r0, r4
 802142c:	b003      	add	sp, #12
 802142e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021436:	e7d6      	b.n	80213e6 <__d2b+0x2e>
 8021438:	6161      	str	r1, [r4, #20]
 802143a:	e7e7      	b.n	802140c <__d2b+0x54>
 802143c:	a801      	add	r0, sp, #4
 802143e:	f7ff fcf1 	bl	8020e24 <__lo0bits>
 8021442:	9b01      	ldr	r3, [sp, #4]
 8021444:	6163      	str	r3, [r4, #20]
 8021446:	3020      	adds	r0, #32
 8021448:	2201      	movs	r2, #1
 802144a:	e7e5      	b.n	8021418 <__d2b+0x60>
 802144c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021450:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021454:	6038      	str	r0, [r7, #0]
 8021456:	6918      	ldr	r0, [r3, #16]
 8021458:	f7ff fcc4 	bl	8020de4 <__hi0bits>
 802145c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021460:	e7e2      	b.n	8021428 <__d2b+0x70>
 8021462:	bf00      	nop
 8021464:	08024cb6 	.word	0x08024cb6
 8021468:	08024cc7 	.word	0x08024cc7

0802146c <__ratio>:
 802146c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021470:	4688      	mov	r8, r1
 8021472:	4669      	mov	r1, sp
 8021474:	4681      	mov	r9, r0
 8021476:	f7ff ff55 	bl	8021324 <__b2d>
 802147a:	a901      	add	r1, sp, #4
 802147c:	4640      	mov	r0, r8
 802147e:	ec55 4b10 	vmov	r4, r5, d0
 8021482:	ee10 aa10 	vmov	sl, s0
 8021486:	f7ff ff4d 	bl	8021324 <__b2d>
 802148a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802148e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8021492:	1ad2      	subs	r2, r2, r3
 8021494:	e9dd 3100 	ldrd	r3, r1, [sp]
 8021498:	1a5b      	subs	r3, r3, r1
 802149a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 802149e:	ec57 6b10 	vmov	r6, r7, d0
 80214a2:	2b00      	cmp	r3, #0
 80214a4:	bfd6      	itet	le
 80214a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80214aa:	462a      	movgt	r2, r5
 80214ac:	463a      	movle	r2, r7
 80214ae:	46ab      	mov	fp, r5
 80214b0:	bfd6      	itet	le
 80214b2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80214b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80214ba:	ee00 3a90 	vmovle	s1, r3
 80214be:	ec4b ab17 	vmov	d7, sl, fp
 80214c2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80214c6:	b003      	add	sp, #12
 80214c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080214cc <__copybits>:
 80214cc:	3901      	subs	r1, #1
 80214ce:	b570      	push	{r4, r5, r6, lr}
 80214d0:	1149      	asrs	r1, r1, #5
 80214d2:	6914      	ldr	r4, [r2, #16]
 80214d4:	3101      	adds	r1, #1
 80214d6:	f102 0314 	add.w	r3, r2, #20
 80214da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80214de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80214e2:	1f05      	subs	r5, r0, #4
 80214e4:	42a3      	cmp	r3, r4
 80214e6:	d30c      	bcc.n	8021502 <__copybits+0x36>
 80214e8:	1aa3      	subs	r3, r4, r2
 80214ea:	3b11      	subs	r3, #17
 80214ec:	f023 0303 	bic.w	r3, r3, #3
 80214f0:	3211      	adds	r2, #17
 80214f2:	42a2      	cmp	r2, r4
 80214f4:	bf88      	it	hi
 80214f6:	2300      	movhi	r3, #0
 80214f8:	4418      	add	r0, r3
 80214fa:	2300      	movs	r3, #0
 80214fc:	4288      	cmp	r0, r1
 80214fe:	d305      	bcc.n	802150c <__copybits+0x40>
 8021500:	bd70      	pop	{r4, r5, r6, pc}
 8021502:	f853 6b04 	ldr.w	r6, [r3], #4
 8021506:	f845 6f04 	str.w	r6, [r5, #4]!
 802150a:	e7eb      	b.n	80214e4 <__copybits+0x18>
 802150c:	f840 3b04 	str.w	r3, [r0], #4
 8021510:	e7f4      	b.n	80214fc <__copybits+0x30>

08021512 <__any_on>:
 8021512:	f100 0214 	add.w	r2, r0, #20
 8021516:	6900      	ldr	r0, [r0, #16]
 8021518:	114b      	asrs	r3, r1, #5
 802151a:	4298      	cmp	r0, r3
 802151c:	b510      	push	{r4, lr}
 802151e:	db11      	blt.n	8021544 <__any_on+0x32>
 8021520:	dd0a      	ble.n	8021538 <__any_on+0x26>
 8021522:	f011 011f 	ands.w	r1, r1, #31
 8021526:	d007      	beq.n	8021538 <__any_on+0x26>
 8021528:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802152c:	fa24 f001 	lsr.w	r0, r4, r1
 8021530:	fa00 f101 	lsl.w	r1, r0, r1
 8021534:	428c      	cmp	r4, r1
 8021536:	d10b      	bne.n	8021550 <__any_on+0x3e>
 8021538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802153c:	4293      	cmp	r3, r2
 802153e:	d803      	bhi.n	8021548 <__any_on+0x36>
 8021540:	2000      	movs	r0, #0
 8021542:	bd10      	pop	{r4, pc}
 8021544:	4603      	mov	r3, r0
 8021546:	e7f7      	b.n	8021538 <__any_on+0x26>
 8021548:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802154c:	2900      	cmp	r1, #0
 802154e:	d0f5      	beq.n	802153c <__any_on+0x2a>
 8021550:	2001      	movs	r0, #1
 8021552:	e7f6      	b.n	8021542 <__any_on+0x30>

08021554 <_malloc_usable_size_r>:
 8021554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021558:	1f18      	subs	r0, r3, #4
 802155a:	2b00      	cmp	r3, #0
 802155c:	bfbc      	itt	lt
 802155e:	580b      	ldrlt	r3, [r1, r0]
 8021560:	18c0      	addlt	r0, r0, r3
 8021562:	4770      	bx	lr

08021564 <sulp>:
 8021564:	b570      	push	{r4, r5, r6, lr}
 8021566:	4604      	mov	r4, r0
 8021568:	460d      	mov	r5, r1
 802156a:	4616      	mov	r6, r2
 802156c:	ec45 4b10 	vmov	d0, r4, r5
 8021570:	f7ff feb2 	bl	80212d8 <__ulp>
 8021574:	b17e      	cbz	r6, 8021596 <sulp+0x32>
 8021576:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802157a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802157e:	2b00      	cmp	r3, #0
 8021580:	dd09      	ble.n	8021596 <sulp+0x32>
 8021582:	051b      	lsls	r3, r3, #20
 8021584:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8021588:	2000      	movs	r0, #0
 802158a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 802158e:	ec41 0b17 	vmov	d7, r0, r1
 8021592:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021596:	bd70      	pop	{r4, r5, r6, pc}

08021598 <_strtod_l>:
 8021598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802159c:	ed2d 8b0e 	vpush	{d8-d14}
 80215a0:	b097      	sub	sp, #92	; 0x5c
 80215a2:	4604      	mov	r4, r0
 80215a4:	920d      	str	r2, [sp, #52]	; 0x34
 80215a6:	2200      	movs	r2, #0
 80215a8:	9212      	str	r2, [sp, #72]	; 0x48
 80215aa:	468a      	mov	sl, r1
 80215ac:	f04f 0800 	mov.w	r8, #0
 80215b0:	f04f 0900 	mov.w	r9, #0
 80215b4:	460a      	mov	r2, r1
 80215b6:	9211      	str	r2, [sp, #68]	; 0x44
 80215b8:	7811      	ldrb	r1, [r2, #0]
 80215ba:	292b      	cmp	r1, #43	; 0x2b
 80215bc:	d04c      	beq.n	8021658 <_strtod_l+0xc0>
 80215be:	d839      	bhi.n	8021634 <_strtod_l+0x9c>
 80215c0:	290d      	cmp	r1, #13
 80215c2:	d833      	bhi.n	802162c <_strtod_l+0x94>
 80215c4:	2908      	cmp	r1, #8
 80215c6:	d833      	bhi.n	8021630 <_strtod_l+0x98>
 80215c8:	2900      	cmp	r1, #0
 80215ca:	d03c      	beq.n	8021646 <_strtod_l+0xae>
 80215cc:	2200      	movs	r2, #0
 80215ce:	9208      	str	r2, [sp, #32]
 80215d0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80215d2:	7832      	ldrb	r2, [r6, #0]
 80215d4:	2a30      	cmp	r2, #48	; 0x30
 80215d6:	f040 80b8 	bne.w	802174a <_strtod_l+0x1b2>
 80215da:	7872      	ldrb	r2, [r6, #1]
 80215dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80215e0:	2a58      	cmp	r2, #88	; 0x58
 80215e2:	d170      	bne.n	80216c6 <_strtod_l+0x12e>
 80215e4:	9302      	str	r3, [sp, #8]
 80215e6:	9b08      	ldr	r3, [sp, #32]
 80215e8:	9301      	str	r3, [sp, #4]
 80215ea:	ab12      	add	r3, sp, #72	; 0x48
 80215ec:	9300      	str	r3, [sp, #0]
 80215ee:	4a91      	ldr	r2, [pc, #580]	; (8021834 <_strtod_l+0x29c>)
 80215f0:	ab13      	add	r3, sp, #76	; 0x4c
 80215f2:	a911      	add	r1, sp, #68	; 0x44
 80215f4:	4620      	mov	r0, r4
 80215f6:	f001 fa61 	bl	8022abc <__gethex>
 80215fa:	f010 070f 	ands.w	r7, r0, #15
 80215fe:	4605      	mov	r5, r0
 8021600:	d005      	beq.n	802160e <_strtod_l+0x76>
 8021602:	2f06      	cmp	r7, #6
 8021604:	d12a      	bne.n	802165c <_strtod_l+0xc4>
 8021606:	3601      	adds	r6, #1
 8021608:	2300      	movs	r3, #0
 802160a:	9611      	str	r6, [sp, #68]	; 0x44
 802160c:	9308      	str	r3, [sp, #32]
 802160e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021610:	2b00      	cmp	r3, #0
 8021612:	f040 8555 	bne.w	80220c0 <_strtod_l+0xb28>
 8021616:	9b08      	ldr	r3, [sp, #32]
 8021618:	ec49 8b10 	vmov	d0, r8, r9
 802161c:	b1cb      	cbz	r3, 8021652 <_strtod_l+0xba>
 802161e:	eeb1 0b40 	vneg.f64	d0, d0
 8021622:	b017      	add	sp, #92	; 0x5c
 8021624:	ecbd 8b0e 	vpop	{d8-d14}
 8021628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802162c:	2920      	cmp	r1, #32
 802162e:	d1cd      	bne.n	80215cc <_strtod_l+0x34>
 8021630:	3201      	adds	r2, #1
 8021632:	e7c0      	b.n	80215b6 <_strtod_l+0x1e>
 8021634:	292d      	cmp	r1, #45	; 0x2d
 8021636:	d1c9      	bne.n	80215cc <_strtod_l+0x34>
 8021638:	2101      	movs	r1, #1
 802163a:	9108      	str	r1, [sp, #32]
 802163c:	1c51      	adds	r1, r2, #1
 802163e:	9111      	str	r1, [sp, #68]	; 0x44
 8021640:	7852      	ldrb	r2, [r2, #1]
 8021642:	2a00      	cmp	r2, #0
 8021644:	d1c4      	bne.n	80215d0 <_strtod_l+0x38>
 8021646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021648:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 802164c:	2b00      	cmp	r3, #0
 802164e:	f040 8535 	bne.w	80220bc <_strtod_l+0xb24>
 8021652:	ec49 8b10 	vmov	d0, r8, r9
 8021656:	e7e4      	b.n	8021622 <_strtod_l+0x8a>
 8021658:	2100      	movs	r1, #0
 802165a:	e7ee      	b.n	802163a <_strtod_l+0xa2>
 802165c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802165e:	b13a      	cbz	r2, 8021670 <_strtod_l+0xd8>
 8021660:	2135      	movs	r1, #53	; 0x35
 8021662:	a814      	add	r0, sp, #80	; 0x50
 8021664:	f7ff ff32 	bl	80214cc <__copybits>
 8021668:	9912      	ldr	r1, [sp, #72]	; 0x48
 802166a:	4620      	mov	r0, r4
 802166c:	f7ff fb08 	bl	8020c80 <_Bfree>
 8021670:	1e7b      	subs	r3, r7, #1
 8021672:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021674:	2b04      	cmp	r3, #4
 8021676:	d806      	bhi.n	8021686 <_strtod_l+0xee>
 8021678:	e8df f003 	tbb	[pc, r3]
 802167c:	201d0314 	.word	0x201d0314
 8021680:	14          	.byte	0x14
 8021681:	00          	.byte	0x00
 8021682:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8021686:	05eb      	lsls	r3, r5, #23
 8021688:	bf48      	it	mi
 802168a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802168e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021692:	0d1b      	lsrs	r3, r3, #20
 8021694:	051b      	lsls	r3, r3, #20
 8021696:	2b00      	cmp	r3, #0
 8021698:	d1b9      	bne.n	802160e <_strtod_l+0x76>
 802169a:	f7fe fbfb 	bl	801fe94 <__errno>
 802169e:	2322      	movs	r3, #34	; 0x22
 80216a0:	6003      	str	r3, [r0, #0]
 80216a2:	e7b4      	b.n	802160e <_strtod_l+0x76>
 80216a4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80216a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80216ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80216b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80216b4:	e7e7      	b.n	8021686 <_strtod_l+0xee>
 80216b6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 802183c <_strtod_l+0x2a4>
 80216ba:	e7e4      	b.n	8021686 <_strtod_l+0xee>
 80216bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80216c0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80216c4:	e7df      	b.n	8021686 <_strtod_l+0xee>
 80216c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80216c8:	1c5a      	adds	r2, r3, #1
 80216ca:	9211      	str	r2, [sp, #68]	; 0x44
 80216cc:	785b      	ldrb	r3, [r3, #1]
 80216ce:	2b30      	cmp	r3, #48	; 0x30
 80216d0:	d0f9      	beq.n	80216c6 <_strtod_l+0x12e>
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d09b      	beq.n	802160e <_strtod_l+0x76>
 80216d6:	2301      	movs	r3, #1
 80216d8:	9306      	str	r3, [sp, #24]
 80216da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80216dc:	9309      	str	r3, [sp, #36]	; 0x24
 80216de:	2300      	movs	r3, #0
 80216e0:	9305      	str	r3, [sp, #20]
 80216e2:	9307      	str	r3, [sp, #28]
 80216e4:	461e      	mov	r6, r3
 80216e6:	220a      	movs	r2, #10
 80216e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80216ea:	7805      	ldrb	r5, [r0, #0]
 80216ec:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80216f0:	b2d9      	uxtb	r1, r3
 80216f2:	2909      	cmp	r1, #9
 80216f4:	d92b      	bls.n	802174e <_strtod_l+0x1b6>
 80216f6:	4950      	ldr	r1, [pc, #320]	; (8021838 <_strtod_l+0x2a0>)
 80216f8:	2201      	movs	r2, #1
 80216fa:	f7fe fb48 	bl	801fd8e <strncmp>
 80216fe:	2800      	cmp	r0, #0
 8021700:	d035      	beq.n	802176e <_strtod_l+0x1d6>
 8021702:	2000      	movs	r0, #0
 8021704:	462a      	mov	r2, r5
 8021706:	4633      	mov	r3, r6
 8021708:	4683      	mov	fp, r0
 802170a:	4601      	mov	r1, r0
 802170c:	2a65      	cmp	r2, #101	; 0x65
 802170e:	d001      	beq.n	8021714 <_strtod_l+0x17c>
 8021710:	2a45      	cmp	r2, #69	; 0x45
 8021712:	d118      	bne.n	8021746 <_strtod_l+0x1ae>
 8021714:	b91b      	cbnz	r3, 802171e <_strtod_l+0x186>
 8021716:	9b06      	ldr	r3, [sp, #24]
 8021718:	4303      	orrs	r3, r0
 802171a:	d094      	beq.n	8021646 <_strtod_l+0xae>
 802171c:	2300      	movs	r3, #0
 802171e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8021722:	f10a 0201 	add.w	r2, sl, #1
 8021726:	9211      	str	r2, [sp, #68]	; 0x44
 8021728:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802172c:	2a2b      	cmp	r2, #43	; 0x2b
 802172e:	d075      	beq.n	802181c <_strtod_l+0x284>
 8021730:	2a2d      	cmp	r2, #45	; 0x2d
 8021732:	d07b      	beq.n	802182c <_strtod_l+0x294>
 8021734:	f04f 0e00 	mov.w	lr, #0
 8021738:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 802173c:	2d09      	cmp	r5, #9
 802173e:	f240 8083 	bls.w	8021848 <_strtod_l+0x2b0>
 8021742:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8021746:	2500      	movs	r5, #0
 8021748:	e09e      	b.n	8021888 <_strtod_l+0x2f0>
 802174a:	2300      	movs	r3, #0
 802174c:	e7c4      	b.n	80216d8 <_strtod_l+0x140>
 802174e:	2e08      	cmp	r6, #8
 8021750:	bfd5      	itete	le
 8021752:	9907      	ldrle	r1, [sp, #28]
 8021754:	9905      	ldrgt	r1, [sp, #20]
 8021756:	fb02 3301 	mlale	r3, r2, r1, r3
 802175a:	fb02 3301 	mlagt	r3, r2, r1, r3
 802175e:	f100 0001 	add.w	r0, r0, #1
 8021762:	bfd4      	ite	le
 8021764:	9307      	strle	r3, [sp, #28]
 8021766:	9305      	strgt	r3, [sp, #20]
 8021768:	3601      	adds	r6, #1
 802176a:	9011      	str	r0, [sp, #68]	; 0x44
 802176c:	e7bc      	b.n	80216e8 <_strtod_l+0x150>
 802176e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021770:	1c5a      	adds	r2, r3, #1
 8021772:	9211      	str	r2, [sp, #68]	; 0x44
 8021774:	785a      	ldrb	r2, [r3, #1]
 8021776:	b3ae      	cbz	r6, 80217e4 <_strtod_l+0x24c>
 8021778:	4683      	mov	fp, r0
 802177a:	4633      	mov	r3, r6
 802177c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8021780:	2909      	cmp	r1, #9
 8021782:	d912      	bls.n	80217aa <_strtod_l+0x212>
 8021784:	2101      	movs	r1, #1
 8021786:	e7c1      	b.n	802170c <_strtod_l+0x174>
 8021788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802178a:	1c5a      	adds	r2, r3, #1
 802178c:	9211      	str	r2, [sp, #68]	; 0x44
 802178e:	785a      	ldrb	r2, [r3, #1]
 8021790:	3001      	adds	r0, #1
 8021792:	2a30      	cmp	r2, #48	; 0x30
 8021794:	d0f8      	beq.n	8021788 <_strtod_l+0x1f0>
 8021796:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802179a:	2b08      	cmp	r3, #8
 802179c:	f200 8495 	bhi.w	80220ca <_strtod_l+0xb32>
 80217a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80217a2:	9309      	str	r3, [sp, #36]	; 0x24
 80217a4:	4683      	mov	fp, r0
 80217a6:	2000      	movs	r0, #0
 80217a8:	4603      	mov	r3, r0
 80217aa:	3a30      	subs	r2, #48	; 0x30
 80217ac:	f100 0101 	add.w	r1, r0, #1
 80217b0:	d012      	beq.n	80217d8 <_strtod_l+0x240>
 80217b2:	448b      	add	fp, r1
 80217b4:	eb00 0c03 	add.w	ip, r0, r3
 80217b8:	4619      	mov	r1, r3
 80217ba:	250a      	movs	r5, #10
 80217bc:	4561      	cmp	r1, ip
 80217be:	d113      	bne.n	80217e8 <_strtod_l+0x250>
 80217c0:	1819      	adds	r1, r3, r0
 80217c2:	2908      	cmp	r1, #8
 80217c4:	f103 0301 	add.w	r3, r3, #1
 80217c8:	4403      	add	r3, r0
 80217ca:	dc1b      	bgt.n	8021804 <_strtod_l+0x26c>
 80217cc:	9807      	ldr	r0, [sp, #28]
 80217ce:	210a      	movs	r1, #10
 80217d0:	fb01 2200 	mla	r2, r1, r0, r2
 80217d4:	9207      	str	r2, [sp, #28]
 80217d6:	2100      	movs	r1, #0
 80217d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80217da:	1c50      	adds	r0, r2, #1
 80217dc:	9011      	str	r0, [sp, #68]	; 0x44
 80217de:	7852      	ldrb	r2, [r2, #1]
 80217e0:	4608      	mov	r0, r1
 80217e2:	e7cb      	b.n	802177c <_strtod_l+0x1e4>
 80217e4:	4630      	mov	r0, r6
 80217e6:	e7d4      	b.n	8021792 <_strtod_l+0x1fa>
 80217e8:	2908      	cmp	r1, #8
 80217ea:	f101 0101 	add.w	r1, r1, #1
 80217ee:	dc03      	bgt.n	80217f8 <_strtod_l+0x260>
 80217f0:	9f07      	ldr	r7, [sp, #28]
 80217f2:	436f      	muls	r7, r5
 80217f4:	9707      	str	r7, [sp, #28]
 80217f6:	e7e1      	b.n	80217bc <_strtod_l+0x224>
 80217f8:	2910      	cmp	r1, #16
 80217fa:	bfde      	ittt	le
 80217fc:	9f05      	ldrle	r7, [sp, #20]
 80217fe:	436f      	mulle	r7, r5
 8021800:	9705      	strle	r7, [sp, #20]
 8021802:	e7db      	b.n	80217bc <_strtod_l+0x224>
 8021804:	2b10      	cmp	r3, #16
 8021806:	bfdf      	itttt	le
 8021808:	9805      	ldrle	r0, [sp, #20]
 802180a:	210a      	movle	r1, #10
 802180c:	fb01 2200 	mlale	r2, r1, r0, r2
 8021810:	9205      	strle	r2, [sp, #20]
 8021812:	e7e0      	b.n	80217d6 <_strtod_l+0x23e>
 8021814:	f04f 0b00 	mov.w	fp, #0
 8021818:	2101      	movs	r1, #1
 802181a:	e77c      	b.n	8021716 <_strtod_l+0x17e>
 802181c:	f04f 0e00 	mov.w	lr, #0
 8021820:	f10a 0202 	add.w	r2, sl, #2
 8021824:	9211      	str	r2, [sp, #68]	; 0x44
 8021826:	f89a 2002 	ldrb.w	r2, [sl, #2]
 802182a:	e785      	b.n	8021738 <_strtod_l+0x1a0>
 802182c:	f04f 0e01 	mov.w	lr, #1
 8021830:	e7f6      	b.n	8021820 <_strtod_l+0x288>
 8021832:	bf00      	nop
 8021834:	08024e20 	.word	0x08024e20
 8021838:	08024e1c 	.word	0x08024e1c
 802183c:	7ff00000 	.word	0x7ff00000
 8021840:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021842:	1c55      	adds	r5, r2, #1
 8021844:	9511      	str	r5, [sp, #68]	; 0x44
 8021846:	7852      	ldrb	r2, [r2, #1]
 8021848:	2a30      	cmp	r2, #48	; 0x30
 802184a:	d0f9      	beq.n	8021840 <_strtod_l+0x2a8>
 802184c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8021850:	2d08      	cmp	r5, #8
 8021852:	f63f af78 	bhi.w	8021746 <_strtod_l+0x1ae>
 8021856:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 802185a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802185c:	920a      	str	r2, [sp, #40]	; 0x28
 802185e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021860:	1c55      	adds	r5, r2, #1
 8021862:	9511      	str	r5, [sp, #68]	; 0x44
 8021864:	7852      	ldrb	r2, [r2, #1]
 8021866:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 802186a:	2f09      	cmp	r7, #9
 802186c:	d937      	bls.n	80218de <_strtod_l+0x346>
 802186e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021870:	1bed      	subs	r5, r5, r7
 8021872:	2d08      	cmp	r5, #8
 8021874:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8021878:	dc02      	bgt.n	8021880 <_strtod_l+0x2e8>
 802187a:	4565      	cmp	r5, ip
 802187c:	bfa8      	it	ge
 802187e:	4665      	movge	r5, ip
 8021880:	f1be 0f00 	cmp.w	lr, #0
 8021884:	d000      	beq.n	8021888 <_strtod_l+0x2f0>
 8021886:	426d      	negs	r5, r5
 8021888:	2b00      	cmp	r3, #0
 802188a:	d14d      	bne.n	8021928 <_strtod_l+0x390>
 802188c:	9b06      	ldr	r3, [sp, #24]
 802188e:	4303      	orrs	r3, r0
 8021890:	f47f aebd 	bne.w	802160e <_strtod_l+0x76>
 8021894:	2900      	cmp	r1, #0
 8021896:	f47f aed6 	bne.w	8021646 <_strtod_l+0xae>
 802189a:	2a69      	cmp	r2, #105	; 0x69
 802189c:	d027      	beq.n	80218ee <_strtod_l+0x356>
 802189e:	dc24      	bgt.n	80218ea <_strtod_l+0x352>
 80218a0:	2a49      	cmp	r2, #73	; 0x49
 80218a2:	d024      	beq.n	80218ee <_strtod_l+0x356>
 80218a4:	2a4e      	cmp	r2, #78	; 0x4e
 80218a6:	f47f aece 	bne.w	8021646 <_strtod_l+0xae>
 80218aa:	4995      	ldr	r1, [pc, #596]	; (8021b00 <_strtod_l+0x568>)
 80218ac:	a811      	add	r0, sp, #68	; 0x44
 80218ae:	f001 fb45 	bl	8022f3c <__match>
 80218b2:	2800      	cmp	r0, #0
 80218b4:	f43f aec7 	beq.w	8021646 <_strtod_l+0xae>
 80218b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80218ba:	781b      	ldrb	r3, [r3, #0]
 80218bc:	2b28      	cmp	r3, #40	; 0x28
 80218be:	d12d      	bne.n	802191c <_strtod_l+0x384>
 80218c0:	4990      	ldr	r1, [pc, #576]	; (8021b04 <_strtod_l+0x56c>)
 80218c2:	aa14      	add	r2, sp, #80	; 0x50
 80218c4:	a811      	add	r0, sp, #68	; 0x44
 80218c6:	f001 fb4d 	bl	8022f64 <__hexnan>
 80218ca:	2805      	cmp	r0, #5
 80218cc:	d126      	bne.n	802191c <_strtod_l+0x384>
 80218ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80218d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80218d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80218d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80218dc:	e697      	b.n	802160e <_strtod_l+0x76>
 80218de:	250a      	movs	r5, #10
 80218e0:	fb05 2c0c 	mla	ip, r5, ip, r2
 80218e4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80218e8:	e7b9      	b.n	802185e <_strtod_l+0x2c6>
 80218ea:	2a6e      	cmp	r2, #110	; 0x6e
 80218ec:	e7db      	b.n	80218a6 <_strtod_l+0x30e>
 80218ee:	4986      	ldr	r1, [pc, #536]	; (8021b08 <_strtod_l+0x570>)
 80218f0:	a811      	add	r0, sp, #68	; 0x44
 80218f2:	f001 fb23 	bl	8022f3c <__match>
 80218f6:	2800      	cmp	r0, #0
 80218f8:	f43f aea5 	beq.w	8021646 <_strtod_l+0xae>
 80218fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80218fe:	4983      	ldr	r1, [pc, #524]	; (8021b0c <_strtod_l+0x574>)
 8021900:	3b01      	subs	r3, #1
 8021902:	a811      	add	r0, sp, #68	; 0x44
 8021904:	9311      	str	r3, [sp, #68]	; 0x44
 8021906:	f001 fb19 	bl	8022f3c <__match>
 802190a:	b910      	cbnz	r0, 8021912 <_strtod_l+0x37a>
 802190c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802190e:	3301      	adds	r3, #1
 8021910:	9311      	str	r3, [sp, #68]	; 0x44
 8021912:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8021b20 <_strtod_l+0x588>
 8021916:	f04f 0800 	mov.w	r8, #0
 802191a:	e678      	b.n	802160e <_strtod_l+0x76>
 802191c:	487c      	ldr	r0, [pc, #496]	; (8021b10 <_strtod_l+0x578>)
 802191e:	f001 f857 	bl	80229d0 <nan>
 8021922:	ec59 8b10 	vmov	r8, r9, d0
 8021926:	e672      	b.n	802160e <_strtod_l+0x76>
 8021928:	eddd 7a07 	vldr	s15, [sp, #28]
 802192c:	eba5 020b 	sub.w	r2, r5, fp
 8021930:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8021934:	2e00      	cmp	r6, #0
 8021936:	bf08      	it	eq
 8021938:	461e      	moveq	r6, r3
 802193a:	2b10      	cmp	r3, #16
 802193c:	9206      	str	r2, [sp, #24]
 802193e:	461a      	mov	r2, r3
 8021940:	bfa8      	it	ge
 8021942:	2210      	movge	r2, #16
 8021944:	2b09      	cmp	r3, #9
 8021946:	ec59 8b17 	vmov	r8, r9, d7
 802194a:	dd0c      	ble.n	8021966 <_strtod_l+0x3ce>
 802194c:	4971      	ldr	r1, [pc, #452]	; (8021b14 <_strtod_l+0x57c>)
 802194e:	eddd 6a05 	vldr	s13, [sp, #20]
 8021952:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8021956:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 802195a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 802195e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8021962:	ec59 8b16 	vmov	r8, r9, d6
 8021966:	2b0f      	cmp	r3, #15
 8021968:	dc37      	bgt.n	80219da <_strtod_l+0x442>
 802196a:	9906      	ldr	r1, [sp, #24]
 802196c:	2900      	cmp	r1, #0
 802196e:	f43f ae4e 	beq.w	802160e <_strtod_l+0x76>
 8021972:	dd23      	ble.n	80219bc <_strtod_l+0x424>
 8021974:	2916      	cmp	r1, #22
 8021976:	dc0b      	bgt.n	8021990 <_strtod_l+0x3f8>
 8021978:	4b66      	ldr	r3, [pc, #408]	; (8021b14 <_strtod_l+0x57c>)
 802197a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802197e:	ed93 7b00 	vldr	d7, [r3]
 8021982:	ec49 8b16 	vmov	d6, r8, r9
 8021986:	ee27 7b06 	vmul.f64	d7, d7, d6
 802198a:	ec59 8b17 	vmov	r8, r9, d7
 802198e:	e63e      	b.n	802160e <_strtod_l+0x76>
 8021990:	9806      	ldr	r0, [sp, #24]
 8021992:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8021996:	4281      	cmp	r1, r0
 8021998:	db1f      	blt.n	80219da <_strtod_l+0x442>
 802199a:	4a5e      	ldr	r2, [pc, #376]	; (8021b14 <_strtod_l+0x57c>)
 802199c:	f1c3 030f 	rsb	r3, r3, #15
 80219a0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80219a4:	ed91 7b00 	vldr	d7, [r1]
 80219a8:	ec49 8b16 	vmov	d6, r8, r9
 80219ac:	1ac3      	subs	r3, r0, r3
 80219ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80219b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80219b6:	ed92 6b00 	vldr	d6, [r2]
 80219ba:	e7e4      	b.n	8021986 <_strtod_l+0x3ee>
 80219bc:	9906      	ldr	r1, [sp, #24]
 80219be:	3116      	adds	r1, #22
 80219c0:	db0b      	blt.n	80219da <_strtod_l+0x442>
 80219c2:	4b54      	ldr	r3, [pc, #336]	; (8021b14 <_strtod_l+0x57c>)
 80219c4:	ebab 0505 	sub.w	r5, fp, r5
 80219c8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80219cc:	ed95 7b00 	vldr	d7, [r5]
 80219d0:	ec49 8b16 	vmov	d6, r8, r9
 80219d4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80219d8:	e7d7      	b.n	802198a <_strtod_l+0x3f2>
 80219da:	9906      	ldr	r1, [sp, #24]
 80219dc:	1a9a      	subs	r2, r3, r2
 80219de:	440a      	add	r2, r1
 80219e0:	2a00      	cmp	r2, #0
 80219e2:	dd6e      	ble.n	8021ac2 <_strtod_l+0x52a>
 80219e4:	f012 000f 	ands.w	r0, r2, #15
 80219e8:	d00a      	beq.n	8021a00 <_strtod_l+0x468>
 80219ea:	494a      	ldr	r1, [pc, #296]	; (8021b14 <_strtod_l+0x57c>)
 80219ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80219f0:	ed91 7b00 	vldr	d7, [r1]
 80219f4:	ec49 8b16 	vmov	d6, r8, r9
 80219f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80219fc:	ec59 8b17 	vmov	r8, r9, d7
 8021a00:	f032 020f 	bics.w	r2, r2, #15
 8021a04:	d04e      	beq.n	8021aa4 <_strtod_l+0x50c>
 8021a06:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8021a0a:	dd22      	ble.n	8021a52 <_strtod_l+0x4ba>
 8021a0c:	2500      	movs	r5, #0
 8021a0e:	462e      	mov	r6, r5
 8021a10:	9507      	str	r5, [sp, #28]
 8021a12:	462f      	mov	r7, r5
 8021a14:	2322      	movs	r3, #34	; 0x22
 8021a16:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8021b20 <_strtod_l+0x588>
 8021a1a:	6023      	str	r3, [r4, #0]
 8021a1c:	f04f 0800 	mov.w	r8, #0
 8021a20:	9b07      	ldr	r3, [sp, #28]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	f43f adf3 	beq.w	802160e <_strtod_l+0x76>
 8021a28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021a2a:	4620      	mov	r0, r4
 8021a2c:	f7ff f928 	bl	8020c80 <_Bfree>
 8021a30:	4639      	mov	r1, r7
 8021a32:	4620      	mov	r0, r4
 8021a34:	f7ff f924 	bl	8020c80 <_Bfree>
 8021a38:	4631      	mov	r1, r6
 8021a3a:	4620      	mov	r0, r4
 8021a3c:	f7ff f920 	bl	8020c80 <_Bfree>
 8021a40:	9907      	ldr	r1, [sp, #28]
 8021a42:	4620      	mov	r0, r4
 8021a44:	f7ff f91c 	bl	8020c80 <_Bfree>
 8021a48:	4629      	mov	r1, r5
 8021a4a:	4620      	mov	r0, r4
 8021a4c:	f7ff f918 	bl	8020c80 <_Bfree>
 8021a50:	e5dd      	b.n	802160e <_strtod_l+0x76>
 8021a52:	2000      	movs	r0, #0
 8021a54:	ec49 8b17 	vmov	d7, r8, r9
 8021a58:	4f2f      	ldr	r7, [pc, #188]	; (8021b18 <_strtod_l+0x580>)
 8021a5a:	1112      	asrs	r2, r2, #4
 8021a5c:	4601      	mov	r1, r0
 8021a5e:	2a01      	cmp	r2, #1
 8021a60:	dc23      	bgt.n	8021aaa <_strtod_l+0x512>
 8021a62:	b108      	cbz	r0, 8021a68 <_strtod_l+0x4d0>
 8021a64:	ec59 8b17 	vmov	r8, r9, d7
 8021a68:	4a2b      	ldr	r2, [pc, #172]	; (8021b18 <_strtod_l+0x580>)
 8021a6a:	482c      	ldr	r0, [pc, #176]	; (8021b1c <_strtod_l+0x584>)
 8021a6c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8021a70:	ed92 7b00 	vldr	d7, [r2]
 8021a74:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8021a78:	ec49 8b16 	vmov	d6, r8, r9
 8021a7c:	4a28      	ldr	r2, [pc, #160]	; (8021b20 <_strtod_l+0x588>)
 8021a7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021a82:	ee17 1a90 	vmov	r1, s15
 8021a86:	400a      	ands	r2, r1
 8021a88:	4282      	cmp	r2, r0
 8021a8a:	ec59 8b17 	vmov	r8, r9, d7
 8021a8e:	d8bd      	bhi.n	8021a0c <_strtod_l+0x474>
 8021a90:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8021a94:	4282      	cmp	r2, r0
 8021a96:	bf86      	itte	hi
 8021a98:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8021b24 <_strtod_l+0x58c>
 8021a9c:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8021aa0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8021aa4:	2200      	movs	r2, #0
 8021aa6:	9205      	str	r2, [sp, #20]
 8021aa8:	e076      	b.n	8021b98 <_strtod_l+0x600>
 8021aaa:	f012 0f01 	tst.w	r2, #1
 8021aae:	d004      	beq.n	8021aba <_strtod_l+0x522>
 8021ab0:	ed97 6b00 	vldr	d6, [r7]
 8021ab4:	2001      	movs	r0, #1
 8021ab6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021aba:	3101      	adds	r1, #1
 8021abc:	1052      	asrs	r2, r2, #1
 8021abe:	3708      	adds	r7, #8
 8021ac0:	e7cd      	b.n	8021a5e <_strtod_l+0x4c6>
 8021ac2:	d0ef      	beq.n	8021aa4 <_strtod_l+0x50c>
 8021ac4:	4252      	negs	r2, r2
 8021ac6:	f012 000f 	ands.w	r0, r2, #15
 8021aca:	d00a      	beq.n	8021ae2 <_strtod_l+0x54a>
 8021acc:	4911      	ldr	r1, [pc, #68]	; (8021b14 <_strtod_l+0x57c>)
 8021ace:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021ad2:	ed91 7b00 	vldr	d7, [r1]
 8021ad6:	ec49 8b16 	vmov	d6, r8, r9
 8021ada:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021ade:	ec59 8b17 	vmov	r8, r9, d7
 8021ae2:	1112      	asrs	r2, r2, #4
 8021ae4:	d0de      	beq.n	8021aa4 <_strtod_l+0x50c>
 8021ae6:	2a1f      	cmp	r2, #31
 8021ae8:	dd1e      	ble.n	8021b28 <_strtod_l+0x590>
 8021aea:	2500      	movs	r5, #0
 8021aec:	462e      	mov	r6, r5
 8021aee:	9507      	str	r5, [sp, #28]
 8021af0:	462f      	mov	r7, r5
 8021af2:	2322      	movs	r3, #34	; 0x22
 8021af4:	f04f 0800 	mov.w	r8, #0
 8021af8:	f04f 0900 	mov.w	r9, #0
 8021afc:	6023      	str	r3, [r4, #0]
 8021afe:	e78f      	b.n	8021a20 <_strtod_l+0x488>
 8021b00:	08024be9 	.word	0x08024be9
 8021b04:	08024e34 	.word	0x08024e34
 8021b08:	08024be1 	.word	0x08024be1
 8021b0c:	08024c54 	.word	0x08024c54
 8021b10:	08024c50 	.word	0x08024c50
 8021b14:	08024d48 	.word	0x08024d48
 8021b18:	08024d20 	.word	0x08024d20
 8021b1c:	7ca00000 	.word	0x7ca00000
 8021b20:	7ff00000 	.word	0x7ff00000
 8021b24:	7fefffff 	.word	0x7fefffff
 8021b28:	f012 0110 	ands.w	r1, r2, #16
 8021b2c:	bf18      	it	ne
 8021b2e:	216a      	movne	r1, #106	; 0x6a
 8021b30:	9105      	str	r1, [sp, #20]
 8021b32:	ec49 8b17 	vmov	d7, r8, r9
 8021b36:	49be      	ldr	r1, [pc, #760]	; (8021e30 <_strtod_l+0x898>)
 8021b38:	2000      	movs	r0, #0
 8021b3a:	07d7      	lsls	r7, r2, #31
 8021b3c:	d504      	bpl.n	8021b48 <_strtod_l+0x5b0>
 8021b3e:	ed91 6b00 	vldr	d6, [r1]
 8021b42:	2001      	movs	r0, #1
 8021b44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021b48:	1052      	asrs	r2, r2, #1
 8021b4a:	f101 0108 	add.w	r1, r1, #8
 8021b4e:	d1f4      	bne.n	8021b3a <_strtod_l+0x5a2>
 8021b50:	b108      	cbz	r0, 8021b56 <_strtod_l+0x5be>
 8021b52:	ec59 8b17 	vmov	r8, r9, d7
 8021b56:	9a05      	ldr	r2, [sp, #20]
 8021b58:	b1ba      	cbz	r2, 8021b8a <_strtod_l+0x5f2>
 8021b5a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8021b5e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8021b62:	2a00      	cmp	r2, #0
 8021b64:	4648      	mov	r0, r9
 8021b66:	dd10      	ble.n	8021b8a <_strtod_l+0x5f2>
 8021b68:	2a1f      	cmp	r2, #31
 8021b6a:	f340 812c 	ble.w	8021dc6 <_strtod_l+0x82e>
 8021b6e:	2a34      	cmp	r2, #52	; 0x34
 8021b70:	bfde      	ittt	le
 8021b72:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8021b76:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8021b7a:	408a      	lslle	r2, r1
 8021b7c:	f04f 0800 	mov.w	r8, #0
 8021b80:	bfcc      	ite	gt
 8021b82:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8021b86:	ea02 0900 	andle.w	r9, r2, r0
 8021b8a:	ec49 8b17 	vmov	d7, r8, r9
 8021b8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b96:	d0a8      	beq.n	8021aea <_strtod_l+0x552>
 8021b98:	9a07      	ldr	r2, [sp, #28]
 8021b9a:	9200      	str	r2, [sp, #0]
 8021b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021b9e:	4632      	mov	r2, r6
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	f7ff f8d5 	bl	8020d50 <__s2b>
 8021ba6:	9007      	str	r0, [sp, #28]
 8021ba8:	2800      	cmp	r0, #0
 8021baa:	f43f af2f 	beq.w	8021a0c <_strtod_l+0x474>
 8021bae:	9a06      	ldr	r2, [sp, #24]
 8021bb0:	2a00      	cmp	r2, #0
 8021bb2:	ebab 0305 	sub.w	r3, fp, r5
 8021bb6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8021e10 <_strtod_l+0x878>
 8021bba:	bfa8      	it	ge
 8021bbc:	2300      	movge	r3, #0
 8021bbe:	ed9f ab96 	vldr	d10, [pc, #600]	; 8021e18 <_strtod_l+0x880>
 8021bc2:	ed9f bb97 	vldr	d11, [pc, #604]	; 8021e20 <_strtod_l+0x888>
 8021bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8021bc8:	2500      	movs	r5, #0
 8021bca:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8021bce:	930c      	str	r3, [sp, #48]	; 0x30
 8021bd0:	462e      	mov	r6, r5
 8021bd2:	9b07      	ldr	r3, [sp, #28]
 8021bd4:	4620      	mov	r0, r4
 8021bd6:	6859      	ldr	r1, [r3, #4]
 8021bd8:	f7ff f812 	bl	8020c00 <_Balloc>
 8021bdc:	4607      	mov	r7, r0
 8021bde:	2800      	cmp	r0, #0
 8021be0:	f43f af18 	beq.w	8021a14 <_strtod_l+0x47c>
 8021be4:	9b07      	ldr	r3, [sp, #28]
 8021be6:	691a      	ldr	r2, [r3, #16]
 8021be8:	3202      	adds	r2, #2
 8021bea:	f103 010c 	add.w	r1, r3, #12
 8021bee:	0092      	lsls	r2, r2, #2
 8021bf0:	300c      	adds	r0, #12
 8021bf2:	f7fe f984 	bl	801fefe <memcpy>
 8021bf6:	ec49 8b10 	vmov	d0, r8, r9
 8021bfa:	aa14      	add	r2, sp, #80	; 0x50
 8021bfc:	a913      	add	r1, sp, #76	; 0x4c
 8021bfe:	4620      	mov	r0, r4
 8021c00:	f7ff fbda 	bl	80213b8 <__d2b>
 8021c04:	ec49 8b18 	vmov	d8, r8, r9
 8021c08:	9012      	str	r0, [sp, #72]	; 0x48
 8021c0a:	2800      	cmp	r0, #0
 8021c0c:	f43f af02 	beq.w	8021a14 <_strtod_l+0x47c>
 8021c10:	2101      	movs	r1, #1
 8021c12:	4620      	mov	r0, r4
 8021c14:	f7ff f934 	bl	8020e80 <__i2b>
 8021c18:	4606      	mov	r6, r0
 8021c1a:	2800      	cmp	r0, #0
 8021c1c:	f43f aefa 	beq.w	8021a14 <_strtod_l+0x47c>
 8021c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021c22:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021c24:	2b00      	cmp	r3, #0
 8021c26:	bfab      	itete	ge
 8021c28:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8021c2a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8021c2c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8021c30:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8021c34:	bfac      	ite	ge
 8021c36:	eb03 0b02 	addge.w	fp, r3, r2
 8021c3a:	eba2 0a03 	sublt.w	sl, r2, r3
 8021c3e:	9a05      	ldr	r2, [sp, #20]
 8021c40:	1a9b      	subs	r3, r3, r2
 8021c42:	440b      	add	r3, r1
 8021c44:	4a7b      	ldr	r2, [pc, #492]	; (8021e34 <_strtod_l+0x89c>)
 8021c46:	3b01      	subs	r3, #1
 8021c48:	4293      	cmp	r3, r2
 8021c4a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8021c4e:	f280 80cd 	bge.w	8021dec <_strtod_l+0x854>
 8021c52:	1ad2      	subs	r2, r2, r3
 8021c54:	2a1f      	cmp	r2, #31
 8021c56:	eba1 0102 	sub.w	r1, r1, r2
 8021c5a:	f04f 0001 	mov.w	r0, #1
 8021c5e:	f300 80b9 	bgt.w	8021dd4 <_strtod_l+0x83c>
 8021c62:	fa00 f302 	lsl.w	r3, r0, r2
 8021c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8021c68:	2300      	movs	r3, #0
 8021c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8021c6c:	eb0b 0301 	add.w	r3, fp, r1
 8021c70:	9a05      	ldr	r2, [sp, #20]
 8021c72:	459b      	cmp	fp, r3
 8021c74:	448a      	add	sl, r1
 8021c76:	4492      	add	sl, r2
 8021c78:	465a      	mov	r2, fp
 8021c7a:	bfa8      	it	ge
 8021c7c:	461a      	movge	r2, r3
 8021c7e:	4552      	cmp	r2, sl
 8021c80:	bfa8      	it	ge
 8021c82:	4652      	movge	r2, sl
 8021c84:	2a00      	cmp	r2, #0
 8021c86:	bfc2      	ittt	gt
 8021c88:	1a9b      	subgt	r3, r3, r2
 8021c8a:	ebaa 0a02 	subgt.w	sl, sl, r2
 8021c8e:	ebab 0b02 	subgt.w	fp, fp, r2
 8021c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021c94:	2a00      	cmp	r2, #0
 8021c96:	dd18      	ble.n	8021cca <_strtod_l+0x732>
 8021c98:	4631      	mov	r1, r6
 8021c9a:	4620      	mov	r0, r4
 8021c9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8021c9e:	f7ff f9af 	bl	8021000 <__pow5mult>
 8021ca2:	4606      	mov	r6, r0
 8021ca4:	2800      	cmp	r0, #0
 8021ca6:	f43f aeb5 	beq.w	8021a14 <_strtod_l+0x47c>
 8021caa:	4601      	mov	r1, r0
 8021cac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021cae:	4620      	mov	r0, r4
 8021cb0:	f7ff f8fc 	bl	8020eac <__multiply>
 8021cb4:	900e      	str	r0, [sp, #56]	; 0x38
 8021cb6:	2800      	cmp	r0, #0
 8021cb8:	f43f aeac 	beq.w	8021a14 <_strtod_l+0x47c>
 8021cbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021cbe:	4620      	mov	r0, r4
 8021cc0:	f7fe ffde 	bl	8020c80 <_Bfree>
 8021cc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021cc8:	9212      	str	r2, [sp, #72]	; 0x48
 8021cca:	2b00      	cmp	r3, #0
 8021ccc:	f300 8093 	bgt.w	8021df6 <_strtod_l+0x85e>
 8021cd0:	9b06      	ldr	r3, [sp, #24]
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	dd08      	ble.n	8021ce8 <_strtod_l+0x750>
 8021cd6:	4639      	mov	r1, r7
 8021cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021cda:	4620      	mov	r0, r4
 8021cdc:	f7ff f990 	bl	8021000 <__pow5mult>
 8021ce0:	4607      	mov	r7, r0
 8021ce2:	2800      	cmp	r0, #0
 8021ce4:	f43f ae96 	beq.w	8021a14 <_strtod_l+0x47c>
 8021ce8:	f1ba 0f00 	cmp.w	sl, #0
 8021cec:	dd08      	ble.n	8021d00 <_strtod_l+0x768>
 8021cee:	4639      	mov	r1, r7
 8021cf0:	4652      	mov	r2, sl
 8021cf2:	4620      	mov	r0, r4
 8021cf4:	f7ff f9de 	bl	80210b4 <__lshift>
 8021cf8:	4607      	mov	r7, r0
 8021cfa:	2800      	cmp	r0, #0
 8021cfc:	f43f ae8a 	beq.w	8021a14 <_strtod_l+0x47c>
 8021d00:	f1bb 0f00 	cmp.w	fp, #0
 8021d04:	dd08      	ble.n	8021d18 <_strtod_l+0x780>
 8021d06:	4631      	mov	r1, r6
 8021d08:	465a      	mov	r2, fp
 8021d0a:	4620      	mov	r0, r4
 8021d0c:	f7ff f9d2 	bl	80210b4 <__lshift>
 8021d10:	4606      	mov	r6, r0
 8021d12:	2800      	cmp	r0, #0
 8021d14:	f43f ae7e 	beq.w	8021a14 <_strtod_l+0x47c>
 8021d18:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021d1a:	463a      	mov	r2, r7
 8021d1c:	4620      	mov	r0, r4
 8021d1e:	f7ff fa51 	bl	80211c4 <__mdiff>
 8021d22:	4605      	mov	r5, r0
 8021d24:	2800      	cmp	r0, #0
 8021d26:	f43f ae75 	beq.w	8021a14 <_strtod_l+0x47c>
 8021d2a:	2300      	movs	r3, #0
 8021d2c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8021d30:	60c3      	str	r3, [r0, #12]
 8021d32:	4631      	mov	r1, r6
 8021d34:	f7ff fa2a 	bl	802118c <__mcmp>
 8021d38:	2800      	cmp	r0, #0
 8021d3a:	da7f      	bge.n	8021e3c <_strtod_l+0x8a4>
 8021d3c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8021d40:	f040 80a5 	bne.w	8021e8e <_strtod_l+0x8f6>
 8021d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021d48:	2b00      	cmp	r3, #0
 8021d4a:	f040 80a0 	bne.w	8021e8e <_strtod_l+0x8f6>
 8021d4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8021d52:	0d1b      	lsrs	r3, r3, #20
 8021d54:	051b      	lsls	r3, r3, #20
 8021d56:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8021d5a:	f240 8098 	bls.w	8021e8e <_strtod_l+0x8f6>
 8021d5e:	696b      	ldr	r3, [r5, #20]
 8021d60:	b91b      	cbnz	r3, 8021d6a <_strtod_l+0x7d2>
 8021d62:	692b      	ldr	r3, [r5, #16]
 8021d64:	2b01      	cmp	r3, #1
 8021d66:	f340 8092 	ble.w	8021e8e <_strtod_l+0x8f6>
 8021d6a:	4629      	mov	r1, r5
 8021d6c:	2201      	movs	r2, #1
 8021d6e:	4620      	mov	r0, r4
 8021d70:	f7ff f9a0 	bl	80210b4 <__lshift>
 8021d74:	4631      	mov	r1, r6
 8021d76:	4605      	mov	r5, r0
 8021d78:	f7ff fa08 	bl	802118c <__mcmp>
 8021d7c:	2800      	cmp	r0, #0
 8021d7e:	f340 8086 	ble.w	8021e8e <_strtod_l+0x8f6>
 8021d82:	9905      	ldr	r1, [sp, #20]
 8021d84:	4a2c      	ldr	r2, [pc, #176]	; (8021e38 <_strtod_l+0x8a0>)
 8021d86:	464b      	mov	r3, r9
 8021d88:	2900      	cmp	r1, #0
 8021d8a:	f000 809f 	beq.w	8021ecc <_strtod_l+0x934>
 8021d8e:	ea02 0109 	and.w	r1, r2, r9
 8021d92:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8021d96:	f300 8099 	bgt.w	8021ecc <_strtod_l+0x934>
 8021d9a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8021d9e:	f77f aea8 	ble.w	8021af2 <_strtod_l+0x55a>
 8021da2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8021e28 <_strtod_l+0x890>
 8021da6:	ec49 8b16 	vmov	d6, r8, r9
 8021daa:	4b23      	ldr	r3, [pc, #140]	; (8021e38 <_strtod_l+0x8a0>)
 8021dac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021db0:	ee17 2a90 	vmov	r2, s15
 8021db4:	4013      	ands	r3, r2
 8021db6:	ec59 8b17 	vmov	r8, r9, d7
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	f47f ae34 	bne.w	8021a28 <_strtod_l+0x490>
 8021dc0:	2322      	movs	r3, #34	; 0x22
 8021dc2:	6023      	str	r3, [r4, #0]
 8021dc4:	e630      	b.n	8021a28 <_strtod_l+0x490>
 8021dc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021dca:	fa01 f202 	lsl.w	r2, r1, r2
 8021dce:	ea02 0808 	and.w	r8, r2, r8
 8021dd2:	e6da      	b.n	8021b8a <_strtod_l+0x5f2>
 8021dd4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8021dd8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8021ddc:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8021de0:	33e2      	adds	r3, #226	; 0xe2
 8021de2:	fa00 f303 	lsl.w	r3, r0, r3
 8021de6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8021dea:	e73f      	b.n	8021c6c <_strtod_l+0x6d4>
 8021dec:	2200      	movs	r2, #0
 8021dee:	2301      	movs	r3, #1
 8021df0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8021df4:	e73a      	b.n	8021c6c <_strtod_l+0x6d4>
 8021df6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021df8:	461a      	mov	r2, r3
 8021dfa:	4620      	mov	r0, r4
 8021dfc:	f7ff f95a 	bl	80210b4 <__lshift>
 8021e00:	9012      	str	r0, [sp, #72]	; 0x48
 8021e02:	2800      	cmp	r0, #0
 8021e04:	f47f af64 	bne.w	8021cd0 <_strtod_l+0x738>
 8021e08:	e604      	b.n	8021a14 <_strtod_l+0x47c>
 8021e0a:	bf00      	nop
 8021e0c:	f3af 8000 	nop.w
 8021e10:	94a03595 	.word	0x94a03595
 8021e14:	3fcfffff 	.word	0x3fcfffff
 8021e18:	94a03595 	.word	0x94a03595
 8021e1c:	3fdfffff 	.word	0x3fdfffff
 8021e20:	35afe535 	.word	0x35afe535
 8021e24:	3fe00000 	.word	0x3fe00000
 8021e28:	00000000 	.word	0x00000000
 8021e2c:	39500000 	.word	0x39500000
 8021e30:	08024e48 	.word	0x08024e48
 8021e34:	fffffc02 	.word	0xfffffc02
 8021e38:	7ff00000 	.word	0x7ff00000
 8021e3c:	46cb      	mov	fp, r9
 8021e3e:	d15f      	bne.n	8021f00 <_strtod_l+0x968>
 8021e40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021e44:	f1ba 0f00 	cmp.w	sl, #0
 8021e48:	d02a      	beq.n	8021ea0 <_strtod_l+0x908>
 8021e4a:	4aa7      	ldr	r2, [pc, #668]	; (80220e8 <_strtod_l+0xb50>)
 8021e4c:	4293      	cmp	r3, r2
 8021e4e:	d12b      	bne.n	8021ea8 <_strtod_l+0x910>
 8021e50:	9b05      	ldr	r3, [sp, #20]
 8021e52:	4642      	mov	r2, r8
 8021e54:	b1fb      	cbz	r3, 8021e96 <_strtod_l+0x8fe>
 8021e56:	4ba5      	ldr	r3, [pc, #660]	; (80220ec <_strtod_l+0xb54>)
 8021e58:	ea09 0303 	and.w	r3, r9, r3
 8021e5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8021e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021e64:	d81a      	bhi.n	8021e9c <_strtod_l+0x904>
 8021e66:	0d1b      	lsrs	r3, r3, #20
 8021e68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8021e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8021e70:	429a      	cmp	r2, r3
 8021e72:	d119      	bne.n	8021ea8 <_strtod_l+0x910>
 8021e74:	4b9e      	ldr	r3, [pc, #632]	; (80220f0 <_strtod_l+0xb58>)
 8021e76:	459b      	cmp	fp, r3
 8021e78:	d102      	bne.n	8021e80 <_strtod_l+0x8e8>
 8021e7a:	3201      	adds	r2, #1
 8021e7c:	f43f adca 	beq.w	8021a14 <_strtod_l+0x47c>
 8021e80:	4b9a      	ldr	r3, [pc, #616]	; (80220ec <_strtod_l+0xb54>)
 8021e82:	ea0b 0303 	and.w	r3, fp, r3
 8021e86:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8021e8a:	f04f 0800 	mov.w	r8, #0
 8021e8e:	9b05      	ldr	r3, [sp, #20]
 8021e90:	2b00      	cmp	r3, #0
 8021e92:	d186      	bne.n	8021da2 <_strtod_l+0x80a>
 8021e94:	e5c8      	b.n	8021a28 <_strtod_l+0x490>
 8021e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021e9a:	e7e9      	b.n	8021e70 <_strtod_l+0x8d8>
 8021e9c:	460b      	mov	r3, r1
 8021e9e:	e7e7      	b.n	8021e70 <_strtod_l+0x8d8>
 8021ea0:	ea53 0308 	orrs.w	r3, r3, r8
 8021ea4:	f43f af6d 	beq.w	8021d82 <_strtod_l+0x7ea>
 8021ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021eaa:	b1cb      	cbz	r3, 8021ee0 <_strtod_l+0x948>
 8021eac:	ea13 0f0b 	tst.w	r3, fp
 8021eb0:	d0ed      	beq.n	8021e8e <_strtod_l+0x8f6>
 8021eb2:	9a05      	ldr	r2, [sp, #20]
 8021eb4:	4640      	mov	r0, r8
 8021eb6:	4649      	mov	r1, r9
 8021eb8:	f1ba 0f00 	cmp.w	sl, #0
 8021ebc:	d014      	beq.n	8021ee8 <_strtod_l+0x950>
 8021ebe:	f7ff fb51 	bl	8021564 <sulp>
 8021ec2:	ee38 7b00 	vadd.f64	d7, d8, d0
 8021ec6:	ec59 8b17 	vmov	r8, r9, d7
 8021eca:	e7e0      	b.n	8021e8e <_strtod_l+0x8f6>
 8021ecc:	4013      	ands	r3, r2
 8021ece:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8021ed2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8021ed6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8021eda:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8021ede:	e7d6      	b.n	8021e8e <_strtod_l+0x8f6>
 8021ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ee2:	ea13 0f08 	tst.w	r3, r8
 8021ee6:	e7e3      	b.n	8021eb0 <_strtod_l+0x918>
 8021ee8:	f7ff fb3c 	bl	8021564 <sulp>
 8021eec:	ee38 0b40 	vsub.f64	d0, d8, d0
 8021ef0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8021ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ef8:	ec59 8b10 	vmov	r8, r9, d0
 8021efc:	d1c7      	bne.n	8021e8e <_strtod_l+0x8f6>
 8021efe:	e5f8      	b.n	8021af2 <_strtod_l+0x55a>
 8021f00:	4631      	mov	r1, r6
 8021f02:	4628      	mov	r0, r5
 8021f04:	f7ff fab2 	bl	802146c <__ratio>
 8021f08:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8021f0c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8021f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f14:	d85f      	bhi.n	8021fd6 <_strtod_l+0xa3e>
 8021f16:	f1ba 0f00 	cmp.w	sl, #0
 8021f1a:	d166      	bne.n	8021fea <_strtod_l+0xa52>
 8021f1c:	f1b8 0f00 	cmp.w	r8, #0
 8021f20:	d14d      	bne.n	8021fbe <_strtod_l+0xa26>
 8021f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021f26:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d162      	bne.n	8021ff4 <_strtod_l+0xa5c>
 8021f2e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8021f32:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8021f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f3a:	d401      	bmi.n	8021f40 <_strtod_l+0x9a8>
 8021f3c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8021f40:	eeb1 cb4d 	vneg.f64	d12, d13
 8021f44:	4869      	ldr	r0, [pc, #420]	; (80220ec <_strtod_l+0xb54>)
 8021f46:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80220f8 <_strtod_l+0xb60>
 8021f4a:	ea0b 0100 	and.w	r1, fp, r0
 8021f4e:	4561      	cmp	r1, ip
 8021f50:	ec53 2b1c 	vmov	r2, r3, d12
 8021f54:	d17a      	bne.n	802204c <_strtod_l+0xab4>
 8021f56:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8021f5a:	ec49 8b10 	vmov	d0, r8, r9
 8021f5e:	910a      	str	r1, [sp, #40]	; 0x28
 8021f60:	f7ff f9ba 	bl	80212d8 <__ulp>
 8021f64:	ec49 8b1e 	vmov	d14, r8, r9
 8021f68:	4860      	ldr	r0, [pc, #384]	; (80220ec <_strtod_l+0xb54>)
 8021f6a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8021f6e:	ee1e 3a90 	vmov	r3, s29
 8021f72:	4a60      	ldr	r2, [pc, #384]	; (80220f4 <_strtod_l+0xb5c>)
 8021f74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021f76:	4018      	ands	r0, r3
 8021f78:	4290      	cmp	r0, r2
 8021f7a:	ec59 8b1e 	vmov	r8, r9, d14
 8021f7e:	d93c      	bls.n	8021ffa <_strtod_l+0xa62>
 8021f80:	ee18 2a90 	vmov	r2, s17
 8021f84:	4b5a      	ldr	r3, [pc, #360]	; (80220f0 <_strtod_l+0xb58>)
 8021f86:	429a      	cmp	r2, r3
 8021f88:	d104      	bne.n	8021f94 <_strtod_l+0x9fc>
 8021f8a:	ee18 3a10 	vmov	r3, s16
 8021f8e:	3301      	adds	r3, #1
 8021f90:	f43f ad40 	beq.w	8021a14 <_strtod_l+0x47c>
 8021f94:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80220f0 <_strtod_l+0xb58>
 8021f98:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8021f9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021f9e:	4620      	mov	r0, r4
 8021fa0:	f7fe fe6e 	bl	8020c80 <_Bfree>
 8021fa4:	4639      	mov	r1, r7
 8021fa6:	4620      	mov	r0, r4
 8021fa8:	f7fe fe6a 	bl	8020c80 <_Bfree>
 8021fac:	4631      	mov	r1, r6
 8021fae:	4620      	mov	r0, r4
 8021fb0:	f7fe fe66 	bl	8020c80 <_Bfree>
 8021fb4:	4629      	mov	r1, r5
 8021fb6:	4620      	mov	r0, r4
 8021fb8:	f7fe fe62 	bl	8020c80 <_Bfree>
 8021fbc:	e609      	b.n	8021bd2 <_strtod_l+0x63a>
 8021fbe:	f1b8 0f01 	cmp.w	r8, #1
 8021fc2:	d103      	bne.n	8021fcc <_strtod_l+0xa34>
 8021fc4:	f1b9 0f00 	cmp.w	r9, #0
 8021fc8:	f43f ad93 	beq.w	8021af2 <_strtod_l+0x55a>
 8021fcc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8021fd0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8021fd4:	e7b6      	b.n	8021f44 <_strtod_l+0x9ac>
 8021fd6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8021fda:	ee20 db0d 	vmul.f64	d13, d0, d13
 8021fde:	f1ba 0f00 	cmp.w	sl, #0
 8021fe2:	d0ad      	beq.n	8021f40 <_strtod_l+0x9a8>
 8021fe4:	eeb0 cb4d 	vmov.f64	d12, d13
 8021fe8:	e7ac      	b.n	8021f44 <_strtod_l+0x9ac>
 8021fea:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8021fee:	eeb0 db4c 	vmov.f64	d13, d12
 8021ff2:	e7a7      	b.n	8021f44 <_strtod_l+0x9ac>
 8021ff4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8021ff8:	e7a4      	b.n	8021f44 <_strtod_l+0x9ac>
 8021ffa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8021ffe:	9b05      	ldr	r3, [sp, #20]
 8022000:	46cb      	mov	fp, r9
 8022002:	2b00      	cmp	r3, #0
 8022004:	d1ca      	bne.n	8021f9c <_strtod_l+0xa04>
 8022006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802200a:	0d1b      	lsrs	r3, r3, #20
 802200c:	051b      	lsls	r3, r3, #20
 802200e:	4299      	cmp	r1, r3
 8022010:	d1c4      	bne.n	8021f9c <_strtod_l+0xa04>
 8022012:	ec51 0b1d 	vmov	r0, r1, d13
 8022016:	f7de fcad 	bl	8000974 <__aeabi_d2lz>
 802201a:	f7de fb07 	bl	800062c <__aeabi_l2d>
 802201e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8022022:	ec41 0b17 	vmov	d7, r0, r1
 8022026:	ea4b 0b08 	orr.w	fp, fp, r8
 802202a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 802202e:	ee3d db47 	vsub.f64	d13, d13, d7
 8022032:	d03c      	beq.n	80220ae <_strtod_l+0xb16>
 8022034:	eeb4 dbca 	vcmpe.f64	d13, d10
 8022038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802203c:	f53f acf4 	bmi.w	8021a28 <_strtod_l+0x490>
 8022040:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8022044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022048:	dda8      	ble.n	8021f9c <_strtod_l+0xa04>
 802204a:	e4ed      	b.n	8021a28 <_strtod_l+0x490>
 802204c:	9805      	ldr	r0, [sp, #20]
 802204e:	b1f0      	cbz	r0, 802208e <_strtod_l+0xaf6>
 8022050:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8022054:	d81b      	bhi.n	802208e <_strtod_l+0xaf6>
 8022056:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80220e0 <_strtod_l+0xb48>
 802205a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 802205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022062:	d811      	bhi.n	8022088 <_strtod_l+0xaf0>
 8022064:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8022068:	ee1d 3a10 	vmov	r3, s26
 802206c:	2b01      	cmp	r3, #1
 802206e:	bf38      	it	cc
 8022070:	2301      	movcc	r3, #1
 8022072:	ee0d 3a10 	vmov	s26, r3
 8022076:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 802207a:	f1ba 0f00 	cmp.w	sl, #0
 802207e:	d113      	bne.n	80220a8 <_strtod_l+0xb10>
 8022080:	eeb1 7b4d 	vneg.f64	d7, d13
 8022084:	ec53 2b17 	vmov	r2, r3, d7
 8022088:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 802208c:	1a43      	subs	r3, r0, r1
 802208e:	eeb0 0b48 	vmov.f64	d0, d8
 8022092:	ec43 2b1c 	vmov	d12, r2, r3
 8022096:	910a      	str	r1, [sp, #40]	; 0x28
 8022098:	f7ff f91e 	bl	80212d8 <__ulp>
 802209c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802209e:	eeac 8b00 	vfma.f64	d8, d12, d0
 80220a2:	ec59 8b18 	vmov	r8, r9, d8
 80220a6:	e7aa      	b.n	8021ffe <_strtod_l+0xa66>
 80220a8:	eeb0 7b4d 	vmov.f64	d7, d13
 80220ac:	e7ea      	b.n	8022084 <_strtod_l+0xaec>
 80220ae:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80220b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220b6:	f57f af71 	bpl.w	8021f9c <_strtod_l+0xa04>
 80220ba:	e4b5      	b.n	8021a28 <_strtod_l+0x490>
 80220bc:	2300      	movs	r3, #0
 80220be:	9308      	str	r3, [sp, #32]
 80220c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80220c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80220c4:	6013      	str	r3, [r2, #0]
 80220c6:	f7ff baa6 	b.w	8021616 <_strtod_l+0x7e>
 80220ca:	2a65      	cmp	r2, #101	; 0x65
 80220cc:	f43f aba2 	beq.w	8021814 <_strtod_l+0x27c>
 80220d0:	2a45      	cmp	r2, #69	; 0x45
 80220d2:	f43f ab9f 	beq.w	8021814 <_strtod_l+0x27c>
 80220d6:	2101      	movs	r1, #1
 80220d8:	f7ff bbd8 	b.w	802188c <_strtod_l+0x2f4>
 80220dc:	f3af 8000 	nop.w
 80220e0:	ffc00000 	.word	0xffc00000
 80220e4:	41dfffff 	.word	0x41dfffff
 80220e8:	000fffff 	.word	0x000fffff
 80220ec:	7ff00000 	.word	0x7ff00000
 80220f0:	7fefffff 	.word	0x7fefffff
 80220f4:	7c9fffff 	.word	0x7c9fffff
 80220f8:	7fe00000 	.word	0x7fe00000

080220fc <_strtod_r>:
 80220fc:	4b01      	ldr	r3, [pc, #4]	; (8022104 <_strtod_r+0x8>)
 80220fe:	f7ff ba4b 	b.w	8021598 <_strtod_l>
 8022102:	bf00      	nop
 8022104:	200009a4 	.word	0x200009a4

08022108 <_strtol_l.constprop.0>:
 8022108:	2b01      	cmp	r3, #1
 802210a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802210e:	d001      	beq.n	8022114 <_strtol_l.constprop.0+0xc>
 8022110:	2b24      	cmp	r3, #36	; 0x24
 8022112:	d906      	bls.n	8022122 <_strtol_l.constprop.0+0x1a>
 8022114:	f7fd febe 	bl	801fe94 <__errno>
 8022118:	2316      	movs	r3, #22
 802211a:	6003      	str	r3, [r0, #0]
 802211c:	2000      	movs	r0, #0
 802211e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022122:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022208 <_strtol_l.constprop.0+0x100>
 8022126:	460d      	mov	r5, r1
 8022128:	462e      	mov	r6, r5
 802212a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802212e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8022132:	f017 0708 	ands.w	r7, r7, #8
 8022136:	d1f7      	bne.n	8022128 <_strtol_l.constprop.0+0x20>
 8022138:	2c2d      	cmp	r4, #45	; 0x2d
 802213a:	d132      	bne.n	80221a2 <_strtol_l.constprop.0+0x9a>
 802213c:	782c      	ldrb	r4, [r5, #0]
 802213e:	2701      	movs	r7, #1
 8022140:	1cb5      	adds	r5, r6, #2
 8022142:	2b00      	cmp	r3, #0
 8022144:	d05b      	beq.n	80221fe <_strtol_l.constprop.0+0xf6>
 8022146:	2b10      	cmp	r3, #16
 8022148:	d109      	bne.n	802215e <_strtol_l.constprop.0+0x56>
 802214a:	2c30      	cmp	r4, #48	; 0x30
 802214c:	d107      	bne.n	802215e <_strtol_l.constprop.0+0x56>
 802214e:	782c      	ldrb	r4, [r5, #0]
 8022150:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022154:	2c58      	cmp	r4, #88	; 0x58
 8022156:	d14d      	bne.n	80221f4 <_strtol_l.constprop.0+0xec>
 8022158:	786c      	ldrb	r4, [r5, #1]
 802215a:	2310      	movs	r3, #16
 802215c:	3502      	adds	r5, #2
 802215e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8022162:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8022166:	f04f 0e00 	mov.w	lr, #0
 802216a:	fbb8 f9f3 	udiv	r9, r8, r3
 802216e:	4676      	mov	r6, lr
 8022170:	fb03 8a19 	mls	sl, r3, r9, r8
 8022174:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8022178:	f1bc 0f09 	cmp.w	ip, #9
 802217c:	d816      	bhi.n	80221ac <_strtol_l.constprop.0+0xa4>
 802217e:	4664      	mov	r4, ip
 8022180:	42a3      	cmp	r3, r4
 8022182:	dd24      	ble.n	80221ce <_strtol_l.constprop.0+0xc6>
 8022184:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8022188:	d008      	beq.n	802219c <_strtol_l.constprop.0+0x94>
 802218a:	45b1      	cmp	r9, r6
 802218c:	d31c      	bcc.n	80221c8 <_strtol_l.constprop.0+0xc0>
 802218e:	d101      	bne.n	8022194 <_strtol_l.constprop.0+0x8c>
 8022190:	45a2      	cmp	sl, r4
 8022192:	db19      	blt.n	80221c8 <_strtol_l.constprop.0+0xc0>
 8022194:	fb06 4603 	mla	r6, r6, r3, r4
 8022198:	f04f 0e01 	mov.w	lr, #1
 802219c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80221a0:	e7e8      	b.n	8022174 <_strtol_l.constprop.0+0x6c>
 80221a2:	2c2b      	cmp	r4, #43	; 0x2b
 80221a4:	bf04      	itt	eq
 80221a6:	782c      	ldrbeq	r4, [r5, #0]
 80221a8:	1cb5      	addeq	r5, r6, #2
 80221aa:	e7ca      	b.n	8022142 <_strtol_l.constprop.0+0x3a>
 80221ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80221b0:	f1bc 0f19 	cmp.w	ip, #25
 80221b4:	d801      	bhi.n	80221ba <_strtol_l.constprop.0+0xb2>
 80221b6:	3c37      	subs	r4, #55	; 0x37
 80221b8:	e7e2      	b.n	8022180 <_strtol_l.constprop.0+0x78>
 80221ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80221be:	f1bc 0f19 	cmp.w	ip, #25
 80221c2:	d804      	bhi.n	80221ce <_strtol_l.constprop.0+0xc6>
 80221c4:	3c57      	subs	r4, #87	; 0x57
 80221c6:	e7db      	b.n	8022180 <_strtol_l.constprop.0+0x78>
 80221c8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80221cc:	e7e6      	b.n	802219c <_strtol_l.constprop.0+0x94>
 80221ce:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80221d2:	d105      	bne.n	80221e0 <_strtol_l.constprop.0+0xd8>
 80221d4:	2322      	movs	r3, #34	; 0x22
 80221d6:	6003      	str	r3, [r0, #0]
 80221d8:	4646      	mov	r6, r8
 80221da:	b942      	cbnz	r2, 80221ee <_strtol_l.constprop.0+0xe6>
 80221dc:	4630      	mov	r0, r6
 80221de:	e79e      	b.n	802211e <_strtol_l.constprop.0+0x16>
 80221e0:	b107      	cbz	r7, 80221e4 <_strtol_l.constprop.0+0xdc>
 80221e2:	4276      	negs	r6, r6
 80221e4:	2a00      	cmp	r2, #0
 80221e6:	d0f9      	beq.n	80221dc <_strtol_l.constprop.0+0xd4>
 80221e8:	f1be 0f00 	cmp.w	lr, #0
 80221ec:	d000      	beq.n	80221f0 <_strtol_l.constprop.0+0xe8>
 80221ee:	1e69      	subs	r1, r5, #1
 80221f0:	6011      	str	r1, [r2, #0]
 80221f2:	e7f3      	b.n	80221dc <_strtol_l.constprop.0+0xd4>
 80221f4:	2430      	movs	r4, #48	; 0x30
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	d1b1      	bne.n	802215e <_strtol_l.constprop.0+0x56>
 80221fa:	2308      	movs	r3, #8
 80221fc:	e7af      	b.n	802215e <_strtol_l.constprop.0+0x56>
 80221fe:	2c30      	cmp	r4, #48	; 0x30
 8022200:	d0a5      	beq.n	802214e <_strtol_l.constprop.0+0x46>
 8022202:	230a      	movs	r3, #10
 8022204:	e7ab      	b.n	802215e <_strtol_l.constprop.0+0x56>
 8022206:	bf00      	nop
 8022208:	08024adc 	.word	0x08024adc

0802220c <_strtol_r>:
 802220c:	f7ff bf7c 	b.w	8022108 <_strtol_l.constprop.0>

08022210 <__ssputs_r>:
 8022210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022214:	688e      	ldr	r6, [r1, #8]
 8022216:	461f      	mov	r7, r3
 8022218:	42be      	cmp	r6, r7
 802221a:	680b      	ldr	r3, [r1, #0]
 802221c:	4682      	mov	sl, r0
 802221e:	460c      	mov	r4, r1
 8022220:	4690      	mov	r8, r2
 8022222:	d82c      	bhi.n	802227e <__ssputs_r+0x6e>
 8022224:	898a      	ldrh	r2, [r1, #12]
 8022226:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802222a:	d026      	beq.n	802227a <__ssputs_r+0x6a>
 802222c:	6965      	ldr	r5, [r4, #20]
 802222e:	6909      	ldr	r1, [r1, #16]
 8022230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022234:	eba3 0901 	sub.w	r9, r3, r1
 8022238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802223c:	1c7b      	adds	r3, r7, #1
 802223e:	444b      	add	r3, r9
 8022240:	106d      	asrs	r5, r5, #1
 8022242:	429d      	cmp	r5, r3
 8022244:	bf38      	it	cc
 8022246:	461d      	movcc	r5, r3
 8022248:	0553      	lsls	r3, r2, #21
 802224a:	d527      	bpl.n	802229c <__ssputs_r+0x8c>
 802224c:	4629      	mov	r1, r5
 802224e:	f7fc f9d5 	bl	801e5fc <_malloc_r>
 8022252:	4606      	mov	r6, r0
 8022254:	b360      	cbz	r0, 80222b0 <__ssputs_r+0xa0>
 8022256:	6921      	ldr	r1, [r4, #16]
 8022258:	464a      	mov	r2, r9
 802225a:	f7fd fe50 	bl	801fefe <memcpy>
 802225e:	89a3      	ldrh	r3, [r4, #12]
 8022260:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022268:	81a3      	strh	r3, [r4, #12]
 802226a:	6126      	str	r6, [r4, #16]
 802226c:	6165      	str	r5, [r4, #20]
 802226e:	444e      	add	r6, r9
 8022270:	eba5 0509 	sub.w	r5, r5, r9
 8022274:	6026      	str	r6, [r4, #0]
 8022276:	60a5      	str	r5, [r4, #8]
 8022278:	463e      	mov	r6, r7
 802227a:	42be      	cmp	r6, r7
 802227c:	d900      	bls.n	8022280 <__ssputs_r+0x70>
 802227e:	463e      	mov	r6, r7
 8022280:	6820      	ldr	r0, [r4, #0]
 8022282:	4632      	mov	r2, r6
 8022284:	4641      	mov	r1, r8
 8022286:	f7fd fd53 	bl	801fd30 <memmove>
 802228a:	68a3      	ldr	r3, [r4, #8]
 802228c:	1b9b      	subs	r3, r3, r6
 802228e:	60a3      	str	r3, [r4, #8]
 8022290:	6823      	ldr	r3, [r4, #0]
 8022292:	4433      	add	r3, r6
 8022294:	6023      	str	r3, [r4, #0]
 8022296:	2000      	movs	r0, #0
 8022298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802229c:	462a      	mov	r2, r5
 802229e:	f7fc faad 	bl	801e7fc <_realloc_r>
 80222a2:	4606      	mov	r6, r0
 80222a4:	2800      	cmp	r0, #0
 80222a6:	d1e0      	bne.n	802226a <__ssputs_r+0x5a>
 80222a8:	6921      	ldr	r1, [r4, #16]
 80222aa:	4650      	mov	r0, sl
 80222ac:	f7fe fc5c 	bl	8020b68 <_free_r>
 80222b0:	230c      	movs	r3, #12
 80222b2:	f8ca 3000 	str.w	r3, [sl]
 80222b6:	89a3      	ldrh	r3, [r4, #12]
 80222b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80222bc:	81a3      	strh	r3, [r4, #12]
 80222be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80222c2:	e7e9      	b.n	8022298 <__ssputs_r+0x88>

080222c4 <_svfiprintf_r>:
 80222c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222c8:	4698      	mov	r8, r3
 80222ca:	898b      	ldrh	r3, [r1, #12]
 80222cc:	061b      	lsls	r3, r3, #24
 80222ce:	b09d      	sub	sp, #116	; 0x74
 80222d0:	4607      	mov	r7, r0
 80222d2:	460d      	mov	r5, r1
 80222d4:	4614      	mov	r4, r2
 80222d6:	d50e      	bpl.n	80222f6 <_svfiprintf_r+0x32>
 80222d8:	690b      	ldr	r3, [r1, #16]
 80222da:	b963      	cbnz	r3, 80222f6 <_svfiprintf_r+0x32>
 80222dc:	2140      	movs	r1, #64	; 0x40
 80222de:	f7fc f98d 	bl	801e5fc <_malloc_r>
 80222e2:	6028      	str	r0, [r5, #0]
 80222e4:	6128      	str	r0, [r5, #16]
 80222e6:	b920      	cbnz	r0, 80222f2 <_svfiprintf_r+0x2e>
 80222e8:	230c      	movs	r3, #12
 80222ea:	603b      	str	r3, [r7, #0]
 80222ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80222f0:	e0d0      	b.n	8022494 <_svfiprintf_r+0x1d0>
 80222f2:	2340      	movs	r3, #64	; 0x40
 80222f4:	616b      	str	r3, [r5, #20]
 80222f6:	2300      	movs	r3, #0
 80222f8:	9309      	str	r3, [sp, #36]	; 0x24
 80222fa:	2320      	movs	r3, #32
 80222fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022300:	f8cd 800c 	str.w	r8, [sp, #12]
 8022304:	2330      	movs	r3, #48	; 0x30
 8022306:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80224ac <_svfiprintf_r+0x1e8>
 802230a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802230e:	f04f 0901 	mov.w	r9, #1
 8022312:	4623      	mov	r3, r4
 8022314:	469a      	mov	sl, r3
 8022316:	f813 2b01 	ldrb.w	r2, [r3], #1
 802231a:	b10a      	cbz	r2, 8022320 <_svfiprintf_r+0x5c>
 802231c:	2a25      	cmp	r2, #37	; 0x25
 802231e:	d1f9      	bne.n	8022314 <_svfiprintf_r+0x50>
 8022320:	ebba 0b04 	subs.w	fp, sl, r4
 8022324:	d00b      	beq.n	802233e <_svfiprintf_r+0x7a>
 8022326:	465b      	mov	r3, fp
 8022328:	4622      	mov	r2, r4
 802232a:	4629      	mov	r1, r5
 802232c:	4638      	mov	r0, r7
 802232e:	f7ff ff6f 	bl	8022210 <__ssputs_r>
 8022332:	3001      	adds	r0, #1
 8022334:	f000 80a9 	beq.w	802248a <_svfiprintf_r+0x1c6>
 8022338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802233a:	445a      	add	r2, fp
 802233c:	9209      	str	r2, [sp, #36]	; 0x24
 802233e:	f89a 3000 	ldrb.w	r3, [sl]
 8022342:	2b00      	cmp	r3, #0
 8022344:	f000 80a1 	beq.w	802248a <_svfiprintf_r+0x1c6>
 8022348:	2300      	movs	r3, #0
 802234a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802234e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022352:	f10a 0a01 	add.w	sl, sl, #1
 8022356:	9304      	str	r3, [sp, #16]
 8022358:	9307      	str	r3, [sp, #28]
 802235a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802235e:	931a      	str	r3, [sp, #104]	; 0x68
 8022360:	4654      	mov	r4, sl
 8022362:	2205      	movs	r2, #5
 8022364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022368:	4850      	ldr	r0, [pc, #320]	; (80224ac <_svfiprintf_r+0x1e8>)
 802236a:	f7dd ff79 	bl	8000260 <memchr>
 802236e:	9a04      	ldr	r2, [sp, #16]
 8022370:	b9d8      	cbnz	r0, 80223aa <_svfiprintf_r+0xe6>
 8022372:	06d0      	lsls	r0, r2, #27
 8022374:	bf44      	itt	mi
 8022376:	2320      	movmi	r3, #32
 8022378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802237c:	0711      	lsls	r1, r2, #28
 802237e:	bf44      	itt	mi
 8022380:	232b      	movmi	r3, #43	; 0x2b
 8022382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022386:	f89a 3000 	ldrb.w	r3, [sl]
 802238a:	2b2a      	cmp	r3, #42	; 0x2a
 802238c:	d015      	beq.n	80223ba <_svfiprintf_r+0xf6>
 802238e:	9a07      	ldr	r2, [sp, #28]
 8022390:	4654      	mov	r4, sl
 8022392:	2000      	movs	r0, #0
 8022394:	f04f 0c0a 	mov.w	ip, #10
 8022398:	4621      	mov	r1, r4
 802239a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802239e:	3b30      	subs	r3, #48	; 0x30
 80223a0:	2b09      	cmp	r3, #9
 80223a2:	d94d      	bls.n	8022440 <_svfiprintf_r+0x17c>
 80223a4:	b1b0      	cbz	r0, 80223d4 <_svfiprintf_r+0x110>
 80223a6:	9207      	str	r2, [sp, #28]
 80223a8:	e014      	b.n	80223d4 <_svfiprintf_r+0x110>
 80223aa:	eba0 0308 	sub.w	r3, r0, r8
 80223ae:	fa09 f303 	lsl.w	r3, r9, r3
 80223b2:	4313      	orrs	r3, r2
 80223b4:	9304      	str	r3, [sp, #16]
 80223b6:	46a2      	mov	sl, r4
 80223b8:	e7d2      	b.n	8022360 <_svfiprintf_r+0x9c>
 80223ba:	9b03      	ldr	r3, [sp, #12]
 80223bc:	1d19      	adds	r1, r3, #4
 80223be:	681b      	ldr	r3, [r3, #0]
 80223c0:	9103      	str	r1, [sp, #12]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	bfbb      	ittet	lt
 80223c6:	425b      	neglt	r3, r3
 80223c8:	f042 0202 	orrlt.w	r2, r2, #2
 80223cc:	9307      	strge	r3, [sp, #28]
 80223ce:	9307      	strlt	r3, [sp, #28]
 80223d0:	bfb8      	it	lt
 80223d2:	9204      	strlt	r2, [sp, #16]
 80223d4:	7823      	ldrb	r3, [r4, #0]
 80223d6:	2b2e      	cmp	r3, #46	; 0x2e
 80223d8:	d10c      	bne.n	80223f4 <_svfiprintf_r+0x130>
 80223da:	7863      	ldrb	r3, [r4, #1]
 80223dc:	2b2a      	cmp	r3, #42	; 0x2a
 80223de:	d134      	bne.n	802244a <_svfiprintf_r+0x186>
 80223e0:	9b03      	ldr	r3, [sp, #12]
 80223e2:	1d1a      	adds	r2, r3, #4
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	9203      	str	r2, [sp, #12]
 80223e8:	2b00      	cmp	r3, #0
 80223ea:	bfb8      	it	lt
 80223ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80223f0:	3402      	adds	r4, #2
 80223f2:	9305      	str	r3, [sp, #20]
 80223f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80224bc <_svfiprintf_r+0x1f8>
 80223f8:	7821      	ldrb	r1, [r4, #0]
 80223fa:	2203      	movs	r2, #3
 80223fc:	4650      	mov	r0, sl
 80223fe:	f7dd ff2f 	bl	8000260 <memchr>
 8022402:	b138      	cbz	r0, 8022414 <_svfiprintf_r+0x150>
 8022404:	9b04      	ldr	r3, [sp, #16]
 8022406:	eba0 000a 	sub.w	r0, r0, sl
 802240a:	2240      	movs	r2, #64	; 0x40
 802240c:	4082      	lsls	r2, r0
 802240e:	4313      	orrs	r3, r2
 8022410:	3401      	adds	r4, #1
 8022412:	9304      	str	r3, [sp, #16]
 8022414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022418:	4825      	ldr	r0, [pc, #148]	; (80224b0 <_svfiprintf_r+0x1ec>)
 802241a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802241e:	2206      	movs	r2, #6
 8022420:	f7dd ff1e 	bl	8000260 <memchr>
 8022424:	2800      	cmp	r0, #0
 8022426:	d038      	beq.n	802249a <_svfiprintf_r+0x1d6>
 8022428:	4b22      	ldr	r3, [pc, #136]	; (80224b4 <_svfiprintf_r+0x1f0>)
 802242a:	bb1b      	cbnz	r3, 8022474 <_svfiprintf_r+0x1b0>
 802242c:	9b03      	ldr	r3, [sp, #12]
 802242e:	3307      	adds	r3, #7
 8022430:	f023 0307 	bic.w	r3, r3, #7
 8022434:	3308      	adds	r3, #8
 8022436:	9303      	str	r3, [sp, #12]
 8022438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802243a:	4433      	add	r3, r6
 802243c:	9309      	str	r3, [sp, #36]	; 0x24
 802243e:	e768      	b.n	8022312 <_svfiprintf_r+0x4e>
 8022440:	fb0c 3202 	mla	r2, ip, r2, r3
 8022444:	460c      	mov	r4, r1
 8022446:	2001      	movs	r0, #1
 8022448:	e7a6      	b.n	8022398 <_svfiprintf_r+0xd4>
 802244a:	2300      	movs	r3, #0
 802244c:	3401      	adds	r4, #1
 802244e:	9305      	str	r3, [sp, #20]
 8022450:	4619      	mov	r1, r3
 8022452:	f04f 0c0a 	mov.w	ip, #10
 8022456:	4620      	mov	r0, r4
 8022458:	f810 2b01 	ldrb.w	r2, [r0], #1
 802245c:	3a30      	subs	r2, #48	; 0x30
 802245e:	2a09      	cmp	r2, #9
 8022460:	d903      	bls.n	802246a <_svfiprintf_r+0x1a6>
 8022462:	2b00      	cmp	r3, #0
 8022464:	d0c6      	beq.n	80223f4 <_svfiprintf_r+0x130>
 8022466:	9105      	str	r1, [sp, #20]
 8022468:	e7c4      	b.n	80223f4 <_svfiprintf_r+0x130>
 802246a:	fb0c 2101 	mla	r1, ip, r1, r2
 802246e:	4604      	mov	r4, r0
 8022470:	2301      	movs	r3, #1
 8022472:	e7f0      	b.n	8022456 <_svfiprintf_r+0x192>
 8022474:	ab03      	add	r3, sp, #12
 8022476:	9300      	str	r3, [sp, #0]
 8022478:	462a      	mov	r2, r5
 802247a:	4b0f      	ldr	r3, [pc, #60]	; (80224b8 <_svfiprintf_r+0x1f4>)
 802247c:	a904      	add	r1, sp, #16
 802247e:	4638      	mov	r0, r7
 8022480:	f7fc fafa 	bl	801ea78 <_printf_float>
 8022484:	1c42      	adds	r2, r0, #1
 8022486:	4606      	mov	r6, r0
 8022488:	d1d6      	bne.n	8022438 <_svfiprintf_r+0x174>
 802248a:	89ab      	ldrh	r3, [r5, #12]
 802248c:	065b      	lsls	r3, r3, #25
 802248e:	f53f af2d 	bmi.w	80222ec <_svfiprintf_r+0x28>
 8022492:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022494:	b01d      	add	sp, #116	; 0x74
 8022496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802249a:	ab03      	add	r3, sp, #12
 802249c:	9300      	str	r3, [sp, #0]
 802249e:	462a      	mov	r2, r5
 80224a0:	4b05      	ldr	r3, [pc, #20]	; (80224b8 <_svfiprintf_r+0x1f4>)
 80224a2:	a904      	add	r1, sp, #16
 80224a4:	4638      	mov	r0, r7
 80224a6:	f7fc fd6f 	bl	801ef88 <_printf_i>
 80224aa:	e7eb      	b.n	8022484 <_svfiprintf_r+0x1c0>
 80224ac:	08024e70 	.word	0x08024e70
 80224b0:	08024e7a 	.word	0x08024e7a
 80224b4:	0801ea79 	.word	0x0801ea79
 80224b8:	08022211 	.word	0x08022211
 80224bc:	08024e76 	.word	0x08024e76

080224c0 <__sfputc_r>:
 80224c0:	6893      	ldr	r3, [r2, #8]
 80224c2:	3b01      	subs	r3, #1
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	b410      	push	{r4}
 80224c8:	6093      	str	r3, [r2, #8]
 80224ca:	da08      	bge.n	80224de <__sfputc_r+0x1e>
 80224cc:	6994      	ldr	r4, [r2, #24]
 80224ce:	42a3      	cmp	r3, r4
 80224d0:	db01      	blt.n	80224d6 <__sfputc_r+0x16>
 80224d2:	290a      	cmp	r1, #10
 80224d4:	d103      	bne.n	80224de <__sfputc_r+0x1e>
 80224d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80224da:	f7fd bb83 	b.w	801fbe4 <__swbuf_r>
 80224de:	6813      	ldr	r3, [r2, #0]
 80224e0:	1c58      	adds	r0, r3, #1
 80224e2:	6010      	str	r0, [r2, #0]
 80224e4:	7019      	strb	r1, [r3, #0]
 80224e6:	4608      	mov	r0, r1
 80224e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80224ec:	4770      	bx	lr

080224ee <__sfputs_r>:
 80224ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224f0:	4606      	mov	r6, r0
 80224f2:	460f      	mov	r7, r1
 80224f4:	4614      	mov	r4, r2
 80224f6:	18d5      	adds	r5, r2, r3
 80224f8:	42ac      	cmp	r4, r5
 80224fa:	d101      	bne.n	8022500 <__sfputs_r+0x12>
 80224fc:	2000      	movs	r0, #0
 80224fe:	e007      	b.n	8022510 <__sfputs_r+0x22>
 8022500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022504:	463a      	mov	r2, r7
 8022506:	4630      	mov	r0, r6
 8022508:	f7ff ffda 	bl	80224c0 <__sfputc_r>
 802250c:	1c43      	adds	r3, r0, #1
 802250e:	d1f3      	bne.n	80224f8 <__sfputs_r+0xa>
 8022510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022514 <_vfiprintf_r>:
 8022514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022518:	460d      	mov	r5, r1
 802251a:	b09d      	sub	sp, #116	; 0x74
 802251c:	4614      	mov	r4, r2
 802251e:	4698      	mov	r8, r3
 8022520:	4606      	mov	r6, r0
 8022522:	b118      	cbz	r0, 802252c <_vfiprintf_r+0x18>
 8022524:	6a03      	ldr	r3, [r0, #32]
 8022526:	b90b      	cbnz	r3, 802252c <_vfiprintf_r+0x18>
 8022528:	f7fd f8e0 	bl	801f6ec <__sinit>
 802252c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802252e:	07d9      	lsls	r1, r3, #31
 8022530:	d405      	bmi.n	802253e <_vfiprintf_r+0x2a>
 8022532:	89ab      	ldrh	r3, [r5, #12]
 8022534:	059a      	lsls	r2, r3, #22
 8022536:	d402      	bmi.n	802253e <_vfiprintf_r+0x2a>
 8022538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802253a:	f7fd fcd6 	bl	801feea <__retarget_lock_acquire_recursive>
 802253e:	89ab      	ldrh	r3, [r5, #12]
 8022540:	071b      	lsls	r3, r3, #28
 8022542:	d501      	bpl.n	8022548 <_vfiprintf_r+0x34>
 8022544:	692b      	ldr	r3, [r5, #16]
 8022546:	b99b      	cbnz	r3, 8022570 <_vfiprintf_r+0x5c>
 8022548:	4629      	mov	r1, r5
 802254a:	4630      	mov	r0, r6
 802254c:	f7fd fb88 	bl	801fc60 <__swsetup_r>
 8022550:	b170      	cbz	r0, 8022570 <_vfiprintf_r+0x5c>
 8022552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022554:	07dc      	lsls	r4, r3, #31
 8022556:	d504      	bpl.n	8022562 <_vfiprintf_r+0x4e>
 8022558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802255c:	b01d      	add	sp, #116	; 0x74
 802255e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022562:	89ab      	ldrh	r3, [r5, #12]
 8022564:	0598      	lsls	r0, r3, #22
 8022566:	d4f7      	bmi.n	8022558 <_vfiprintf_r+0x44>
 8022568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802256a:	f7fd fcbf 	bl	801feec <__retarget_lock_release_recursive>
 802256e:	e7f3      	b.n	8022558 <_vfiprintf_r+0x44>
 8022570:	2300      	movs	r3, #0
 8022572:	9309      	str	r3, [sp, #36]	; 0x24
 8022574:	2320      	movs	r3, #32
 8022576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802257a:	f8cd 800c 	str.w	r8, [sp, #12]
 802257e:	2330      	movs	r3, #48	; 0x30
 8022580:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8022734 <_vfiprintf_r+0x220>
 8022584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022588:	f04f 0901 	mov.w	r9, #1
 802258c:	4623      	mov	r3, r4
 802258e:	469a      	mov	sl, r3
 8022590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022594:	b10a      	cbz	r2, 802259a <_vfiprintf_r+0x86>
 8022596:	2a25      	cmp	r2, #37	; 0x25
 8022598:	d1f9      	bne.n	802258e <_vfiprintf_r+0x7a>
 802259a:	ebba 0b04 	subs.w	fp, sl, r4
 802259e:	d00b      	beq.n	80225b8 <_vfiprintf_r+0xa4>
 80225a0:	465b      	mov	r3, fp
 80225a2:	4622      	mov	r2, r4
 80225a4:	4629      	mov	r1, r5
 80225a6:	4630      	mov	r0, r6
 80225a8:	f7ff ffa1 	bl	80224ee <__sfputs_r>
 80225ac:	3001      	adds	r0, #1
 80225ae:	f000 80a9 	beq.w	8022704 <_vfiprintf_r+0x1f0>
 80225b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80225b4:	445a      	add	r2, fp
 80225b6:	9209      	str	r2, [sp, #36]	; 0x24
 80225b8:	f89a 3000 	ldrb.w	r3, [sl]
 80225bc:	2b00      	cmp	r3, #0
 80225be:	f000 80a1 	beq.w	8022704 <_vfiprintf_r+0x1f0>
 80225c2:	2300      	movs	r3, #0
 80225c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80225c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80225cc:	f10a 0a01 	add.w	sl, sl, #1
 80225d0:	9304      	str	r3, [sp, #16]
 80225d2:	9307      	str	r3, [sp, #28]
 80225d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80225d8:	931a      	str	r3, [sp, #104]	; 0x68
 80225da:	4654      	mov	r4, sl
 80225dc:	2205      	movs	r2, #5
 80225de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80225e2:	4854      	ldr	r0, [pc, #336]	; (8022734 <_vfiprintf_r+0x220>)
 80225e4:	f7dd fe3c 	bl	8000260 <memchr>
 80225e8:	9a04      	ldr	r2, [sp, #16]
 80225ea:	b9d8      	cbnz	r0, 8022624 <_vfiprintf_r+0x110>
 80225ec:	06d1      	lsls	r1, r2, #27
 80225ee:	bf44      	itt	mi
 80225f0:	2320      	movmi	r3, #32
 80225f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80225f6:	0713      	lsls	r3, r2, #28
 80225f8:	bf44      	itt	mi
 80225fa:	232b      	movmi	r3, #43	; 0x2b
 80225fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022600:	f89a 3000 	ldrb.w	r3, [sl]
 8022604:	2b2a      	cmp	r3, #42	; 0x2a
 8022606:	d015      	beq.n	8022634 <_vfiprintf_r+0x120>
 8022608:	9a07      	ldr	r2, [sp, #28]
 802260a:	4654      	mov	r4, sl
 802260c:	2000      	movs	r0, #0
 802260e:	f04f 0c0a 	mov.w	ip, #10
 8022612:	4621      	mov	r1, r4
 8022614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022618:	3b30      	subs	r3, #48	; 0x30
 802261a:	2b09      	cmp	r3, #9
 802261c:	d94d      	bls.n	80226ba <_vfiprintf_r+0x1a6>
 802261e:	b1b0      	cbz	r0, 802264e <_vfiprintf_r+0x13a>
 8022620:	9207      	str	r2, [sp, #28]
 8022622:	e014      	b.n	802264e <_vfiprintf_r+0x13a>
 8022624:	eba0 0308 	sub.w	r3, r0, r8
 8022628:	fa09 f303 	lsl.w	r3, r9, r3
 802262c:	4313      	orrs	r3, r2
 802262e:	9304      	str	r3, [sp, #16]
 8022630:	46a2      	mov	sl, r4
 8022632:	e7d2      	b.n	80225da <_vfiprintf_r+0xc6>
 8022634:	9b03      	ldr	r3, [sp, #12]
 8022636:	1d19      	adds	r1, r3, #4
 8022638:	681b      	ldr	r3, [r3, #0]
 802263a:	9103      	str	r1, [sp, #12]
 802263c:	2b00      	cmp	r3, #0
 802263e:	bfbb      	ittet	lt
 8022640:	425b      	neglt	r3, r3
 8022642:	f042 0202 	orrlt.w	r2, r2, #2
 8022646:	9307      	strge	r3, [sp, #28]
 8022648:	9307      	strlt	r3, [sp, #28]
 802264a:	bfb8      	it	lt
 802264c:	9204      	strlt	r2, [sp, #16]
 802264e:	7823      	ldrb	r3, [r4, #0]
 8022650:	2b2e      	cmp	r3, #46	; 0x2e
 8022652:	d10c      	bne.n	802266e <_vfiprintf_r+0x15a>
 8022654:	7863      	ldrb	r3, [r4, #1]
 8022656:	2b2a      	cmp	r3, #42	; 0x2a
 8022658:	d134      	bne.n	80226c4 <_vfiprintf_r+0x1b0>
 802265a:	9b03      	ldr	r3, [sp, #12]
 802265c:	1d1a      	adds	r2, r3, #4
 802265e:	681b      	ldr	r3, [r3, #0]
 8022660:	9203      	str	r2, [sp, #12]
 8022662:	2b00      	cmp	r3, #0
 8022664:	bfb8      	it	lt
 8022666:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802266a:	3402      	adds	r4, #2
 802266c:	9305      	str	r3, [sp, #20]
 802266e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8022744 <_vfiprintf_r+0x230>
 8022672:	7821      	ldrb	r1, [r4, #0]
 8022674:	2203      	movs	r2, #3
 8022676:	4650      	mov	r0, sl
 8022678:	f7dd fdf2 	bl	8000260 <memchr>
 802267c:	b138      	cbz	r0, 802268e <_vfiprintf_r+0x17a>
 802267e:	9b04      	ldr	r3, [sp, #16]
 8022680:	eba0 000a 	sub.w	r0, r0, sl
 8022684:	2240      	movs	r2, #64	; 0x40
 8022686:	4082      	lsls	r2, r0
 8022688:	4313      	orrs	r3, r2
 802268a:	3401      	adds	r4, #1
 802268c:	9304      	str	r3, [sp, #16]
 802268e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022692:	4829      	ldr	r0, [pc, #164]	; (8022738 <_vfiprintf_r+0x224>)
 8022694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022698:	2206      	movs	r2, #6
 802269a:	f7dd fde1 	bl	8000260 <memchr>
 802269e:	2800      	cmp	r0, #0
 80226a0:	d03f      	beq.n	8022722 <_vfiprintf_r+0x20e>
 80226a2:	4b26      	ldr	r3, [pc, #152]	; (802273c <_vfiprintf_r+0x228>)
 80226a4:	bb1b      	cbnz	r3, 80226ee <_vfiprintf_r+0x1da>
 80226a6:	9b03      	ldr	r3, [sp, #12]
 80226a8:	3307      	adds	r3, #7
 80226aa:	f023 0307 	bic.w	r3, r3, #7
 80226ae:	3308      	adds	r3, #8
 80226b0:	9303      	str	r3, [sp, #12]
 80226b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226b4:	443b      	add	r3, r7
 80226b6:	9309      	str	r3, [sp, #36]	; 0x24
 80226b8:	e768      	b.n	802258c <_vfiprintf_r+0x78>
 80226ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80226be:	460c      	mov	r4, r1
 80226c0:	2001      	movs	r0, #1
 80226c2:	e7a6      	b.n	8022612 <_vfiprintf_r+0xfe>
 80226c4:	2300      	movs	r3, #0
 80226c6:	3401      	adds	r4, #1
 80226c8:	9305      	str	r3, [sp, #20]
 80226ca:	4619      	mov	r1, r3
 80226cc:	f04f 0c0a 	mov.w	ip, #10
 80226d0:	4620      	mov	r0, r4
 80226d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80226d6:	3a30      	subs	r2, #48	; 0x30
 80226d8:	2a09      	cmp	r2, #9
 80226da:	d903      	bls.n	80226e4 <_vfiprintf_r+0x1d0>
 80226dc:	2b00      	cmp	r3, #0
 80226de:	d0c6      	beq.n	802266e <_vfiprintf_r+0x15a>
 80226e0:	9105      	str	r1, [sp, #20]
 80226e2:	e7c4      	b.n	802266e <_vfiprintf_r+0x15a>
 80226e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80226e8:	4604      	mov	r4, r0
 80226ea:	2301      	movs	r3, #1
 80226ec:	e7f0      	b.n	80226d0 <_vfiprintf_r+0x1bc>
 80226ee:	ab03      	add	r3, sp, #12
 80226f0:	9300      	str	r3, [sp, #0]
 80226f2:	462a      	mov	r2, r5
 80226f4:	4b12      	ldr	r3, [pc, #72]	; (8022740 <_vfiprintf_r+0x22c>)
 80226f6:	a904      	add	r1, sp, #16
 80226f8:	4630      	mov	r0, r6
 80226fa:	f7fc f9bd 	bl	801ea78 <_printf_float>
 80226fe:	4607      	mov	r7, r0
 8022700:	1c78      	adds	r0, r7, #1
 8022702:	d1d6      	bne.n	80226b2 <_vfiprintf_r+0x19e>
 8022704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022706:	07d9      	lsls	r1, r3, #31
 8022708:	d405      	bmi.n	8022716 <_vfiprintf_r+0x202>
 802270a:	89ab      	ldrh	r3, [r5, #12]
 802270c:	059a      	lsls	r2, r3, #22
 802270e:	d402      	bmi.n	8022716 <_vfiprintf_r+0x202>
 8022710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022712:	f7fd fbeb 	bl	801feec <__retarget_lock_release_recursive>
 8022716:	89ab      	ldrh	r3, [r5, #12]
 8022718:	065b      	lsls	r3, r3, #25
 802271a:	f53f af1d 	bmi.w	8022558 <_vfiprintf_r+0x44>
 802271e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022720:	e71c      	b.n	802255c <_vfiprintf_r+0x48>
 8022722:	ab03      	add	r3, sp, #12
 8022724:	9300      	str	r3, [sp, #0]
 8022726:	462a      	mov	r2, r5
 8022728:	4b05      	ldr	r3, [pc, #20]	; (8022740 <_vfiprintf_r+0x22c>)
 802272a:	a904      	add	r1, sp, #16
 802272c:	4630      	mov	r0, r6
 802272e:	f7fc fc2b 	bl	801ef88 <_printf_i>
 8022732:	e7e4      	b.n	80226fe <_vfiprintf_r+0x1ea>
 8022734:	08024e70 	.word	0x08024e70
 8022738:	08024e7a 	.word	0x08024e7a
 802273c:	0801ea79 	.word	0x0801ea79
 8022740:	080224ef 	.word	0x080224ef
 8022744:	08024e76 	.word	0x08024e76

08022748 <__sflush_r>:
 8022748:	898a      	ldrh	r2, [r1, #12]
 802274a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802274e:	4605      	mov	r5, r0
 8022750:	0710      	lsls	r0, r2, #28
 8022752:	460c      	mov	r4, r1
 8022754:	d458      	bmi.n	8022808 <__sflush_r+0xc0>
 8022756:	684b      	ldr	r3, [r1, #4]
 8022758:	2b00      	cmp	r3, #0
 802275a:	dc05      	bgt.n	8022768 <__sflush_r+0x20>
 802275c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802275e:	2b00      	cmp	r3, #0
 8022760:	dc02      	bgt.n	8022768 <__sflush_r+0x20>
 8022762:	2000      	movs	r0, #0
 8022764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802276a:	2e00      	cmp	r6, #0
 802276c:	d0f9      	beq.n	8022762 <__sflush_r+0x1a>
 802276e:	2300      	movs	r3, #0
 8022770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022774:	682f      	ldr	r7, [r5, #0]
 8022776:	6a21      	ldr	r1, [r4, #32]
 8022778:	602b      	str	r3, [r5, #0]
 802277a:	d032      	beq.n	80227e2 <__sflush_r+0x9a>
 802277c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802277e:	89a3      	ldrh	r3, [r4, #12]
 8022780:	075a      	lsls	r2, r3, #29
 8022782:	d505      	bpl.n	8022790 <__sflush_r+0x48>
 8022784:	6863      	ldr	r3, [r4, #4]
 8022786:	1ac0      	subs	r0, r0, r3
 8022788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802278a:	b10b      	cbz	r3, 8022790 <__sflush_r+0x48>
 802278c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802278e:	1ac0      	subs	r0, r0, r3
 8022790:	2300      	movs	r3, #0
 8022792:	4602      	mov	r2, r0
 8022794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022796:	6a21      	ldr	r1, [r4, #32]
 8022798:	4628      	mov	r0, r5
 802279a:	47b0      	blx	r6
 802279c:	1c43      	adds	r3, r0, #1
 802279e:	89a3      	ldrh	r3, [r4, #12]
 80227a0:	d106      	bne.n	80227b0 <__sflush_r+0x68>
 80227a2:	6829      	ldr	r1, [r5, #0]
 80227a4:	291d      	cmp	r1, #29
 80227a6:	d82b      	bhi.n	8022800 <__sflush_r+0xb8>
 80227a8:	4a29      	ldr	r2, [pc, #164]	; (8022850 <__sflush_r+0x108>)
 80227aa:	410a      	asrs	r2, r1
 80227ac:	07d6      	lsls	r6, r2, #31
 80227ae:	d427      	bmi.n	8022800 <__sflush_r+0xb8>
 80227b0:	2200      	movs	r2, #0
 80227b2:	6062      	str	r2, [r4, #4]
 80227b4:	04d9      	lsls	r1, r3, #19
 80227b6:	6922      	ldr	r2, [r4, #16]
 80227b8:	6022      	str	r2, [r4, #0]
 80227ba:	d504      	bpl.n	80227c6 <__sflush_r+0x7e>
 80227bc:	1c42      	adds	r2, r0, #1
 80227be:	d101      	bne.n	80227c4 <__sflush_r+0x7c>
 80227c0:	682b      	ldr	r3, [r5, #0]
 80227c2:	b903      	cbnz	r3, 80227c6 <__sflush_r+0x7e>
 80227c4:	6560      	str	r0, [r4, #84]	; 0x54
 80227c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80227c8:	602f      	str	r7, [r5, #0]
 80227ca:	2900      	cmp	r1, #0
 80227cc:	d0c9      	beq.n	8022762 <__sflush_r+0x1a>
 80227ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80227d2:	4299      	cmp	r1, r3
 80227d4:	d002      	beq.n	80227dc <__sflush_r+0x94>
 80227d6:	4628      	mov	r0, r5
 80227d8:	f7fe f9c6 	bl	8020b68 <_free_r>
 80227dc:	2000      	movs	r0, #0
 80227de:	6360      	str	r0, [r4, #52]	; 0x34
 80227e0:	e7c0      	b.n	8022764 <__sflush_r+0x1c>
 80227e2:	2301      	movs	r3, #1
 80227e4:	4628      	mov	r0, r5
 80227e6:	47b0      	blx	r6
 80227e8:	1c41      	adds	r1, r0, #1
 80227ea:	d1c8      	bne.n	802277e <__sflush_r+0x36>
 80227ec:	682b      	ldr	r3, [r5, #0]
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	d0c5      	beq.n	802277e <__sflush_r+0x36>
 80227f2:	2b1d      	cmp	r3, #29
 80227f4:	d001      	beq.n	80227fa <__sflush_r+0xb2>
 80227f6:	2b16      	cmp	r3, #22
 80227f8:	d101      	bne.n	80227fe <__sflush_r+0xb6>
 80227fa:	602f      	str	r7, [r5, #0]
 80227fc:	e7b1      	b.n	8022762 <__sflush_r+0x1a>
 80227fe:	89a3      	ldrh	r3, [r4, #12]
 8022800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022804:	81a3      	strh	r3, [r4, #12]
 8022806:	e7ad      	b.n	8022764 <__sflush_r+0x1c>
 8022808:	690f      	ldr	r7, [r1, #16]
 802280a:	2f00      	cmp	r7, #0
 802280c:	d0a9      	beq.n	8022762 <__sflush_r+0x1a>
 802280e:	0793      	lsls	r3, r2, #30
 8022810:	680e      	ldr	r6, [r1, #0]
 8022812:	bf08      	it	eq
 8022814:	694b      	ldreq	r3, [r1, #20]
 8022816:	600f      	str	r7, [r1, #0]
 8022818:	bf18      	it	ne
 802281a:	2300      	movne	r3, #0
 802281c:	eba6 0807 	sub.w	r8, r6, r7
 8022820:	608b      	str	r3, [r1, #8]
 8022822:	f1b8 0f00 	cmp.w	r8, #0
 8022826:	dd9c      	ble.n	8022762 <__sflush_r+0x1a>
 8022828:	6a21      	ldr	r1, [r4, #32]
 802282a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802282c:	4643      	mov	r3, r8
 802282e:	463a      	mov	r2, r7
 8022830:	4628      	mov	r0, r5
 8022832:	47b0      	blx	r6
 8022834:	2800      	cmp	r0, #0
 8022836:	dc06      	bgt.n	8022846 <__sflush_r+0xfe>
 8022838:	89a3      	ldrh	r3, [r4, #12]
 802283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802283e:	81a3      	strh	r3, [r4, #12]
 8022840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022844:	e78e      	b.n	8022764 <__sflush_r+0x1c>
 8022846:	4407      	add	r7, r0
 8022848:	eba8 0800 	sub.w	r8, r8, r0
 802284c:	e7e9      	b.n	8022822 <__sflush_r+0xda>
 802284e:	bf00      	nop
 8022850:	dfbffffe 	.word	0xdfbffffe

08022854 <_fflush_r>:
 8022854:	b538      	push	{r3, r4, r5, lr}
 8022856:	690b      	ldr	r3, [r1, #16]
 8022858:	4605      	mov	r5, r0
 802285a:	460c      	mov	r4, r1
 802285c:	b913      	cbnz	r3, 8022864 <_fflush_r+0x10>
 802285e:	2500      	movs	r5, #0
 8022860:	4628      	mov	r0, r5
 8022862:	bd38      	pop	{r3, r4, r5, pc}
 8022864:	b118      	cbz	r0, 802286e <_fflush_r+0x1a>
 8022866:	6a03      	ldr	r3, [r0, #32]
 8022868:	b90b      	cbnz	r3, 802286e <_fflush_r+0x1a>
 802286a:	f7fc ff3f 	bl	801f6ec <__sinit>
 802286e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022872:	2b00      	cmp	r3, #0
 8022874:	d0f3      	beq.n	802285e <_fflush_r+0xa>
 8022876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022878:	07d0      	lsls	r0, r2, #31
 802287a:	d404      	bmi.n	8022886 <_fflush_r+0x32>
 802287c:	0599      	lsls	r1, r3, #22
 802287e:	d402      	bmi.n	8022886 <_fflush_r+0x32>
 8022880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022882:	f7fd fb32 	bl	801feea <__retarget_lock_acquire_recursive>
 8022886:	4628      	mov	r0, r5
 8022888:	4621      	mov	r1, r4
 802288a:	f7ff ff5d 	bl	8022748 <__sflush_r>
 802288e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022890:	07da      	lsls	r2, r3, #31
 8022892:	4605      	mov	r5, r0
 8022894:	d4e4      	bmi.n	8022860 <_fflush_r+0xc>
 8022896:	89a3      	ldrh	r3, [r4, #12]
 8022898:	059b      	lsls	r3, r3, #22
 802289a:	d4e1      	bmi.n	8022860 <_fflush_r+0xc>
 802289c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802289e:	f7fd fb25 	bl	801feec <__retarget_lock_release_recursive>
 80228a2:	e7dd      	b.n	8022860 <_fflush_r+0xc>

080228a4 <fiprintf>:
 80228a4:	b40e      	push	{r1, r2, r3}
 80228a6:	b503      	push	{r0, r1, lr}
 80228a8:	4601      	mov	r1, r0
 80228aa:	ab03      	add	r3, sp, #12
 80228ac:	4805      	ldr	r0, [pc, #20]	; (80228c4 <fiprintf+0x20>)
 80228ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80228b2:	6800      	ldr	r0, [r0, #0]
 80228b4:	9301      	str	r3, [sp, #4]
 80228b6:	f7ff fe2d 	bl	8022514 <_vfiprintf_r>
 80228ba:	b002      	add	sp, #8
 80228bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80228c0:	b003      	add	sp, #12
 80228c2:	4770      	bx	lr
 80228c4:	200009a0 	.word	0x200009a0

080228c8 <__swhatbuf_r>:
 80228c8:	b570      	push	{r4, r5, r6, lr}
 80228ca:	460c      	mov	r4, r1
 80228cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80228d0:	2900      	cmp	r1, #0
 80228d2:	b096      	sub	sp, #88	; 0x58
 80228d4:	4615      	mov	r5, r2
 80228d6:	461e      	mov	r6, r3
 80228d8:	da0d      	bge.n	80228f6 <__swhatbuf_r+0x2e>
 80228da:	89a3      	ldrh	r3, [r4, #12]
 80228dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80228e0:	f04f 0100 	mov.w	r1, #0
 80228e4:	bf0c      	ite	eq
 80228e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80228ea:	2340      	movne	r3, #64	; 0x40
 80228ec:	2000      	movs	r0, #0
 80228ee:	6031      	str	r1, [r6, #0]
 80228f0:	602b      	str	r3, [r5, #0]
 80228f2:	b016      	add	sp, #88	; 0x58
 80228f4:	bd70      	pop	{r4, r5, r6, pc}
 80228f6:	466a      	mov	r2, sp
 80228f8:	f000 f848 	bl	802298c <_fstat_r>
 80228fc:	2800      	cmp	r0, #0
 80228fe:	dbec      	blt.n	80228da <__swhatbuf_r+0x12>
 8022900:	9901      	ldr	r1, [sp, #4]
 8022902:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8022906:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802290a:	4259      	negs	r1, r3
 802290c:	4159      	adcs	r1, r3
 802290e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022912:	e7eb      	b.n	80228ec <__swhatbuf_r+0x24>

08022914 <__smakebuf_r>:
 8022914:	898b      	ldrh	r3, [r1, #12]
 8022916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022918:	079d      	lsls	r5, r3, #30
 802291a:	4606      	mov	r6, r0
 802291c:	460c      	mov	r4, r1
 802291e:	d507      	bpl.n	8022930 <__smakebuf_r+0x1c>
 8022920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022924:	6023      	str	r3, [r4, #0]
 8022926:	6123      	str	r3, [r4, #16]
 8022928:	2301      	movs	r3, #1
 802292a:	6163      	str	r3, [r4, #20]
 802292c:	b002      	add	sp, #8
 802292e:	bd70      	pop	{r4, r5, r6, pc}
 8022930:	ab01      	add	r3, sp, #4
 8022932:	466a      	mov	r2, sp
 8022934:	f7ff ffc8 	bl	80228c8 <__swhatbuf_r>
 8022938:	9900      	ldr	r1, [sp, #0]
 802293a:	4605      	mov	r5, r0
 802293c:	4630      	mov	r0, r6
 802293e:	f7fb fe5d 	bl	801e5fc <_malloc_r>
 8022942:	b948      	cbnz	r0, 8022958 <__smakebuf_r+0x44>
 8022944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022948:	059a      	lsls	r2, r3, #22
 802294a:	d4ef      	bmi.n	802292c <__smakebuf_r+0x18>
 802294c:	f023 0303 	bic.w	r3, r3, #3
 8022950:	f043 0302 	orr.w	r3, r3, #2
 8022954:	81a3      	strh	r3, [r4, #12]
 8022956:	e7e3      	b.n	8022920 <__smakebuf_r+0xc>
 8022958:	89a3      	ldrh	r3, [r4, #12]
 802295a:	6020      	str	r0, [r4, #0]
 802295c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022960:	81a3      	strh	r3, [r4, #12]
 8022962:	9b00      	ldr	r3, [sp, #0]
 8022964:	6163      	str	r3, [r4, #20]
 8022966:	9b01      	ldr	r3, [sp, #4]
 8022968:	6120      	str	r0, [r4, #16]
 802296a:	b15b      	cbz	r3, 8022984 <__smakebuf_r+0x70>
 802296c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022970:	4630      	mov	r0, r6
 8022972:	f000 f81d 	bl	80229b0 <_isatty_r>
 8022976:	b128      	cbz	r0, 8022984 <__smakebuf_r+0x70>
 8022978:	89a3      	ldrh	r3, [r4, #12]
 802297a:	f023 0303 	bic.w	r3, r3, #3
 802297e:	f043 0301 	orr.w	r3, r3, #1
 8022982:	81a3      	strh	r3, [r4, #12]
 8022984:	89a3      	ldrh	r3, [r4, #12]
 8022986:	431d      	orrs	r5, r3
 8022988:	81a5      	strh	r5, [r4, #12]
 802298a:	e7cf      	b.n	802292c <__smakebuf_r+0x18>

0802298c <_fstat_r>:
 802298c:	b538      	push	{r3, r4, r5, lr}
 802298e:	4d07      	ldr	r5, [pc, #28]	; (80229ac <_fstat_r+0x20>)
 8022990:	2300      	movs	r3, #0
 8022992:	4604      	mov	r4, r0
 8022994:	4608      	mov	r0, r1
 8022996:	4611      	mov	r1, r2
 8022998:	602b      	str	r3, [r5, #0]
 802299a:	f7e0 f9c0 	bl	8002d1e <_fstat>
 802299e:	1c43      	adds	r3, r0, #1
 80229a0:	d102      	bne.n	80229a8 <_fstat_r+0x1c>
 80229a2:	682b      	ldr	r3, [r5, #0]
 80229a4:	b103      	cbz	r3, 80229a8 <_fstat_r+0x1c>
 80229a6:	6023      	str	r3, [r4, #0]
 80229a8:	bd38      	pop	{r3, r4, r5, pc}
 80229aa:	bf00      	nop
 80229ac:	20017068 	.word	0x20017068

080229b0 <_isatty_r>:
 80229b0:	b538      	push	{r3, r4, r5, lr}
 80229b2:	4d06      	ldr	r5, [pc, #24]	; (80229cc <_isatty_r+0x1c>)
 80229b4:	2300      	movs	r3, #0
 80229b6:	4604      	mov	r4, r0
 80229b8:	4608      	mov	r0, r1
 80229ba:	602b      	str	r3, [r5, #0]
 80229bc:	f7e0 f9bf 	bl	8002d3e <_isatty>
 80229c0:	1c43      	adds	r3, r0, #1
 80229c2:	d102      	bne.n	80229ca <_isatty_r+0x1a>
 80229c4:	682b      	ldr	r3, [r5, #0]
 80229c6:	b103      	cbz	r3, 80229ca <_isatty_r+0x1a>
 80229c8:	6023      	str	r3, [r4, #0]
 80229ca:	bd38      	pop	{r3, r4, r5, pc}
 80229cc:	20017068 	.word	0x20017068

080229d0 <nan>:
 80229d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80229d8 <nan+0x8>
 80229d4:	4770      	bx	lr
 80229d6:	bf00      	nop
 80229d8:	00000000 	.word	0x00000000
 80229dc:	7ff80000 	.word	0x7ff80000

080229e0 <abort>:
 80229e0:	b508      	push	{r3, lr}
 80229e2:	2006      	movs	r0, #6
 80229e4:	f000 fba0 	bl	8023128 <raise>
 80229e8:	2001      	movs	r0, #1
 80229ea:	f7e0 f949 	bl	8002c80 <_exit>

080229ee <rshift>:
 80229ee:	6903      	ldr	r3, [r0, #16]
 80229f0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80229f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80229f8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80229fc:	f100 0414 	add.w	r4, r0, #20
 8022a00:	dd45      	ble.n	8022a8e <rshift+0xa0>
 8022a02:	f011 011f 	ands.w	r1, r1, #31
 8022a06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8022a0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8022a0e:	d10c      	bne.n	8022a2a <rshift+0x3c>
 8022a10:	f100 0710 	add.w	r7, r0, #16
 8022a14:	4629      	mov	r1, r5
 8022a16:	42b1      	cmp	r1, r6
 8022a18:	d334      	bcc.n	8022a84 <rshift+0x96>
 8022a1a:	1a9b      	subs	r3, r3, r2
 8022a1c:	009b      	lsls	r3, r3, #2
 8022a1e:	1eea      	subs	r2, r5, #3
 8022a20:	4296      	cmp	r6, r2
 8022a22:	bf38      	it	cc
 8022a24:	2300      	movcc	r3, #0
 8022a26:	4423      	add	r3, r4
 8022a28:	e015      	b.n	8022a56 <rshift+0x68>
 8022a2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8022a2e:	f1c1 0820 	rsb	r8, r1, #32
 8022a32:	40cf      	lsrs	r7, r1
 8022a34:	f105 0e04 	add.w	lr, r5, #4
 8022a38:	46a1      	mov	r9, r4
 8022a3a:	4576      	cmp	r6, lr
 8022a3c:	46f4      	mov	ip, lr
 8022a3e:	d815      	bhi.n	8022a6c <rshift+0x7e>
 8022a40:	1a9a      	subs	r2, r3, r2
 8022a42:	0092      	lsls	r2, r2, #2
 8022a44:	3a04      	subs	r2, #4
 8022a46:	3501      	adds	r5, #1
 8022a48:	42ae      	cmp	r6, r5
 8022a4a:	bf38      	it	cc
 8022a4c:	2200      	movcc	r2, #0
 8022a4e:	18a3      	adds	r3, r4, r2
 8022a50:	50a7      	str	r7, [r4, r2]
 8022a52:	b107      	cbz	r7, 8022a56 <rshift+0x68>
 8022a54:	3304      	adds	r3, #4
 8022a56:	1b1a      	subs	r2, r3, r4
 8022a58:	42a3      	cmp	r3, r4
 8022a5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8022a5e:	bf08      	it	eq
 8022a60:	2300      	moveq	r3, #0
 8022a62:	6102      	str	r2, [r0, #16]
 8022a64:	bf08      	it	eq
 8022a66:	6143      	streq	r3, [r0, #20]
 8022a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022a6c:	f8dc c000 	ldr.w	ip, [ip]
 8022a70:	fa0c fc08 	lsl.w	ip, ip, r8
 8022a74:	ea4c 0707 	orr.w	r7, ip, r7
 8022a78:	f849 7b04 	str.w	r7, [r9], #4
 8022a7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8022a80:	40cf      	lsrs	r7, r1
 8022a82:	e7da      	b.n	8022a3a <rshift+0x4c>
 8022a84:	f851 cb04 	ldr.w	ip, [r1], #4
 8022a88:	f847 cf04 	str.w	ip, [r7, #4]!
 8022a8c:	e7c3      	b.n	8022a16 <rshift+0x28>
 8022a8e:	4623      	mov	r3, r4
 8022a90:	e7e1      	b.n	8022a56 <rshift+0x68>

08022a92 <__hexdig_fun>:
 8022a92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8022a96:	2b09      	cmp	r3, #9
 8022a98:	d802      	bhi.n	8022aa0 <__hexdig_fun+0xe>
 8022a9a:	3820      	subs	r0, #32
 8022a9c:	b2c0      	uxtb	r0, r0
 8022a9e:	4770      	bx	lr
 8022aa0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8022aa4:	2b05      	cmp	r3, #5
 8022aa6:	d801      	bhi.n	8022aac <__hexdig_fun+0x1a>
 8022aa8:	3847      	subs	r0, #71	; 0x47
 8022aaa:	e7f7      	b.n	8022a9c <__hexdig_fun+0xa>
 8022aac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8022ab0:	2b05      	cmp	r3, #5
 8022ab2:	d801      	bhi.n	8022ab8 <__hexdig_fun+0x26>
 8022ab4:	3827      	subs	r0, #39	; 0x27
 8022ab6:	e7f1      	b.n	8022a9c <__hexdig_fun+0xa>
 8022ab8:	2000      	movs	r0, #0
 8022aba:	4770      	bx	lr

08022abc <__gethex>:
 8022abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ac0:	4617      	mov	r7, r2
 8022ac2:	680a      	ldr	r2, [r1, #0]
 8022ac4:	b085      	sub	sp, #20
 8022ac6:	f102 0b02 	add.w	fp, r2, #2
 8022aca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8022ace:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8022ad2:	4681      	mov	r9, r0
 8022ad4:	468a      	mov	sl, r1
 8022ad6:	9302      	str	r3, [sp, #8]
 8022ad8:	32fe      	adds	r2, #254	; 0xfe
 8022ada:	eb02 030b 	add.w	r3, r2, fp
 8022ade:	46d8      	mov	r8, fp
 8022ae0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8022ae4:	9301      	str	r3, [sp, #4]
 8022ae6:	2830      	cmp	r0, #48	; 0x30
 8022ae8:	d0f7      	beq.n	8022ada <__gethex+0x1e>
 8022aea:	f7ff ffd2 	bl	8022a92 <__hexdig_fun>
 8022aee:	4604      	mov	r4, r0
 8022af0:	2800      	cmp	r0, #0
 8022af2:	d138      	bne.n	8022b66 <__gethex+0xaa>
 8022af4:	49a7      	ldr	r1, [pc, #668]	; (8022d94 <__gethex+0x2d8>)
 8022af6:	2201      	movs	r2, #1
 8022af8:	4640      	mov	r0, r8
 8022afa:	f7fd f948 	bl	801fd8e <strncmp>
 8022afe:	4606      	mov	r6, r0
 8022b00:	2800      	cmp	r0, #0
 8022b02:	d169      	bne.n	8022bd8 <__gethex+0x11c>
 8022b04:	f898 0001 	ldrb.w	r0, [r8, #1]
 8022b08:	465d      	mov	r5, fp
 8022b0a:	f7ff ffc2 	bl	8022a92 <__hexdig_fun>
 8022b0e:	2800      	cmp	r0, #0
 8022b10:	d064      	beq.n	8022bdc <__gethex+0x120>
 8022b12:	465a      	mov	r2, fp
 8022b14:	7810      	ldrb	r0, [r2, #0]
 8022b16:	2830      	cmp	r0, #48	; 0x30
 8022b18:	4690      	mov	r8, r2
 8022b1a:	f102 0201 	add.w	r2, r2, #1
 8022b1e:	d0f9      	beq.n	8022b14 <__gethex+0x58>
 8022b20:	f7ff ffb7 	bl	8022a92 <__hexdig_fun>
 8022b24:	2301      	movs	r3, #1
 8022b26:	fab0 f480 	clz	r4, r0
 8022b2a:	0964      	lsrs	r4, r4, #5
 8022b2c:	465e      	mov	r6, fp
 8022b2e:	9301      	str	r3, [sp, #4]
 8022b30:	4642      	mov	r2, r8
 8022b32:	4615      	mov	r5, r2
 8022b34:	3201      	adds	r2, #1
 8022b36:	7828      	ldrb	r0, [r5, #0]
 8022b38:	f7ff ffab 	bl	8022a92 <__hexdig_fun>
 8022b3c:	2800      	cmp	r0, #0
 8022b3e:	d1f8      	bne.n	8022b32 <__gethex+0x76>
 8022b40:	4994      	ldr	r1, [pc, #592]	; (8022d94 <__gethex+0x2d8>)
 8022b42:	2201      	movs	r2, #1
 8022b44:	4628      	mov	r0, r5
 8022b46:	f7fd f922 	bl	801fd8e <strncmp>
 8022b4a:	b978      	cbnz	r0, 8022b6c <__gethex+0xb0>
 8022b4c:	b946      	cbnz	r6, 8022b60 <__gethex+0xa4>
 8022b4e:	1c6e      	adds	r6, r5, #1
 8022b50:	4632      	mov	r2, r6
 8022b52:	4615      	mov	r5, r2
 8022b54:	3201      	adds	r2, #1
 8022b56:	7828      	ldrb	r0, [r5, #0]
 8022b58:	f7ff ff9b 	bl	8022a92 <__hexdig_fun>
 8022b5c:	2800      	cmp	r0, #0
 8022b5e:	d1f8      	bne.n	8022b52 <__gethex+0x96>
 8022b60:	1b73      	subs	r3, r6, r5
 8022b62:	009e      	lsls	r6, r3, #2
 8022b64:	e004      	b.n	8022b70 <__gethex+0xb4>
 8022b66:	2400      	movs	r4, #0
 8022b68:	4626      	mov	r6, r4
 8022b6a:	e7e1      	b.n	8022b30 <__gethex+0x74>
 8022b6c:	2e00      	cmp	r6, #0
 8022b6e:	d1f7      	bne.n	8022b60 <__gethex+0xa4>
 8022b70:	782b      	ldrb	r3, [r5, #0]
 8022b72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8022b76:	2b50      	cmp	r3, #80	; 0x50
 8022b78:	d13d      	bne.n	8022bf6 <__gethex+0x13a>
 8022b7a:	786b      	ldrb	r3, [r5, #1]
 8022b7c:	2b2b      	cmp	r3, #43	; 0x2b
 8022b7e:	d02f      	beq.n	8022be0 <__gethex+0x124>
 8022b80:	2b2d      	cmp	r3, #45	; 0x2d
 8022b82:	d031      	beq.n	8022be8 <__gethex+0x12c>
 8022b84:	1c69      	adds	r1, r5, #1
 8022b86:	f04f 0b00 	mov.w	fp, #0
 8022b8a:	7808      	ldrb	r0, [r1, #0]
 8022b8c:	f7ff ff81 	bl	8022a92 <__hexdig_fun>
 8022b90:	1e42      	subs	r2, r0, #1
 8022b92:	b2d2      	uxtb	r2, r2
 8022b94:	2a18      	cmp	r2, #24
 8022b96:	d82e      	bhi.n	8022bf6 <__gethex+0x13a>
 8022b98:	f1a0 0210 	sub.w	r2, r0, #16
 8022b9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8022ba0:	f7ff ff77 	bl	8022a92 <__hexdig_fun>
 8022ba4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8022ba8:	fa5f fc8c 	uxtb.w	ip, ip
 8022bac:	f1bc 0f18 	cmp.w	ip, #24
 8022bb0:	d91d      	bls.n	8022bee <__gethex+0x132>
 8022bb2:	f1bb 0f00 	cmp.w	fp, #0
 8022bb6:	d000      	beq.n	8022bba <__gethex+0xfe>
 8022bb8:	4252      	negs	r2, r2
 8022bba:	4416      	add	r6, r2
 8022bbc:	f8ca 1000 	str.w	r1, [sl]
 8022bc0:	b1dc      	cbz	r4, 8022bfa <__gethex+0x13e>
 8022bc2:	9b01      	ldr	r3, [sp, #4]
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	bf14      	ite	ne
 8022bc8:	f04f 0800 	movne.w	r8, #0
 8022bcc:	f04f 0806 	moveq.w	r8, #6
 8022bd0:	4640      	mov	r0, r8
 8022bd2:	b005      	add	sp, #20
 8022bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bd8:	4645      	mov	r5, r8
 8022bda:	4626      	mov	r6, r4
 8022bdc:	2401      	movs	r4, #1
 8022bde:	e7c7      	b.n	8022b70 <__gethex+0xb4>
 8022be0:	f04f 0b00 	mov.w	fp, #0
 8022be4:	1ca9      	adds	r1, r5, #2
 8022be6:	e7d0      	b.n	8022b8a <__gethex+0xce>
 8022be8:	f04f 0b01 	mov.w	fp, #1
 8022bec:	e7fa      	b.n	8022be4 <__gethex+0x128>
 8022bee:	230a      	movs	r3, #10
 8022bf0:	fb03 0002 	mla	r0, r3, r2, r0
 8022bf4:	e7d0      	b.n	8022b98 <__gethex+0xdc>
 8022bf6:	4629      	mov	r1, r5
 8022bf8:	e7e0      	b.n	8022bbc <__gethex+0x100>
 8022bfa:	eba5 0308 	sub.w	r3, r5, r8
 8022bfe:	3b01      	subs	r3, #1
 8022c00:	4621      	mov	r1, r4
 8022c02:	2b07      	cmp	r3, #7
 8022c04:	dc0a      	bgt.n	8022c1c <__gethex+0x160>
 8022c06:	4648      	mov	r0, r9
 8022c08:	f7fd fffa 	bl	8020c00 <_Balloc>
 8022c0c:	4604      	mov	r4, r0
 8022c0e:	b940      	cbnz	r0, 8022c22 <__gethex+0x166>
 8022c10:	4b61      	ldr	r3, [pc, #388]	; (8022d98 <__gethex+0x2dc>)
 8022c12:	4602      	mov	r2, r0
 8022c14:	21e4      	movs	r1, #228	; 0xe4
 8022c16:	4861      	ldr	r0, [pc, #388]	; (8022d9c <__gethex+0x2e0>)
 8022c18:	f7fd f986 	bl	801ff28 <__assert_func>
 8022c1c:	3101      	adds	r1, #1
 8022c1e:	105b      	asrs	r3, r3, #1
 8022c20:	e7ef      	b.n	8022c02 <__gethex+0x146>
 8022c22:	f100 0a14 	add.w	sl, r0, #20
 8022c26:	2300      	movs	r3, #0
 8022c28:	495a      	ldr	r1, [pc, #360]	; (8022d94 <__gethex+0x2d8>)
 8022c2a:	f8cd a004 	str.w	sl, [sp, #4]
 8022c2e:	469b      	mov	fp, r3
 8022c30:	45a8      	cmp	r8, r5
 8022c32:	d342      	bcc.n	8022cba <__gethex+0x1fe>
 8022c34:	9801      	ldr	r0, [sp, #4]
 8022c36:	f840 bb04 	str.w	fp, [r0], #4
 8022c3a:	eba0 000a 	sub.w	r0, r0, sl
 8022c3e:	1080      	asrs	r0, r0, #2
 8022c40:	6120      	str	r0, [r4, #16]
 8022c42:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8022c46:	4658      	mov	r0, fp
 8022c48:	f7fe f8cc 	bl	8020de4 <__hi0bits>
 8022c4c:	683d      	ldr	r5, [r7, #0]
 8022c4e:	eba8 0000 	sub.w	r0, r8, r0
 8022c52:	42a8      	cmp	r0, r5
 8022c54:	dd59      	ble.n	8022d0a <__gethex+0x24e>
 8022c56:	eba0 0805 	sub.w	r8, r0, r5
 8022c5a:	4641      	mov	r1, r8
 8022c5c:	4620      	mov	r0, r4
 8022c5e:	f7fe fc58 	bl	8021512 <__any_on>
 8022c62:	4683      	mov	fp, r0
 8022c64:	b1b8      	cbz	r0, 8022c96 <__gethex+0x1da>
 8022c66:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8022c6a:	1159      	asrs	r1, r3, #5
 8022c6c:	f003 021f 	and.w	r2, r3, #31
 8022c70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8022c74:	f04f 0b01 	mov.w	fp, #1
 8022c78:	fa0b f202 	lsl.w	r2, fp, r2
 8022c7c:	420a      	tst	r2, r1
 8022c7e:	d00a      	beq.n	8022c96 <__gethex+0x1da>
 8022c80:	455b      	cmp	r3, fp
 8022c82:	dd06      	ble.n	8022c92 <__gethex+0x1d6>
 8022c84:	f1a8 0102 	sub.w	r1, r8, #2
 8022c88:	4620      	mov	r0, r4
 8022c8a:	f7fe fc42 	bl	8021512 <__any_on>
 8022c8e:	2800      	cmp	r0, #0
 8022c90:	d138      	bne.n	8022d04 <__gethex+0x248>
 8022c92:	f04f 0b02 	mov.w	fp, #2
 8022c96:	4641      	mov	r1, r8
 8022c98:	4620      	mov	r0, r4
 8022c9a:	f7ff fea8 	bl	80229ee <rshift>
 8022c9e:	4446      	add	r6, r8
 8022ca0:	68bb      	ldr	r3, [r7, #8]
 8022ca2:	42b3      	cmp	r3, r6
 8022ca4:	da41      	bge.n	8022d2a <__gethex+0x26e>
 8022ca6:	4621      	mov	r1, r4
 8022ca8:	4648      	mov	r0, r9
 8022caa:	f7fd ffe9 	bl	8020c80 <_Bfree>
 8022cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022cb0:	2300      	movs	r3, #0
 8022cb2:	6013      	str	r3, [r2, #0]
 8022cb4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8022cb8:	e78a      	b.n	8022bd0 <__gethex+0x114>
 8022cba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8022cbe:	2a2e      	cmp	r2, #46	; 0x2e
 8022cc0:	d014      	beq.n	8022cec <__gethex+0x230>
 8022cc2:	2b20      	cmp	r3, #32
 8022cc4:	d106      	bne.n	8022cd4 <__gethex+0x218>
 8022cc6:	9b01      	ldr	r3, [sp, #4]
 8022cc8:	f843 bb04 	str.w	fp, [r3], #4
 8022ccc:	f04f 0b00 	mov.w	fp, #0
 8022cd0:	9301      	str	r3, [sp, #4]
 8022cd2:	465b      	mov	r3, fp
 8022cd4:	7828      	ldrb	r0, [r5, #0]
 8022cd6:	9303      	str	r3, [sp, #12]
 8022cd8:	f7ff fedb 	bl	8022a92 <__hexdig_fun>
 8022cdc:	9b03      	ldr	r3, [sp, #12]
 8022cde:	f000 000f 	and.w	r0, r0, #15
 8022ce2:	4098      	lsls	r0, r3
 8022ce4:	ea4b 0b00 	orr.w	fp, fp, r0
 8022ce8:	3304      	adds	r3, #4
 8022cea:	e7a1      	b.n	8022c30 <__gethex+0x174>
 8022cec:	45a8      	cmp	r8, r5
 8022cee:	d8e8      	bhi.n	8022cc2 <__gethex+0x206>
 8022cf0:	2201      	movs	r2, #1
 8022cf2:	4628      	mov	r0, r5
 8022cf4:	9303      	str	r3, [sp, #12]
 8022cf6:	f7fd f84a 	bl	801fd8e <strncmp>
 8022cfa:	4926      	ldr	r1, [pc, #152]	; (8022d94 <__gethex+0x2d8>)
 8022cfc:	9b03      	ldr	r3, [sp, #12]
 8022cfe:	2800      	cmp	r0, #0
 8022d00:	d1df      	bne.n	8022cc2 <__gethex+0x206>
 8022d02:	e795      	b.n	8022c30 <__gethex+0x174>
 8022d04:	f04f 0b03 	mov.w	fp, #3
 8022d08:	e7c5      	b.n	8022c96 <__gethex+0x1da>
 8022d0a:	da0b      	bge.n	8022d24 <__gethex+0x268>
 8022d0c:	eba5 0800 	sub.w	r8, r5, r0
 8022d10:	4621      	mov	r1, r4
 8022d12:	4642      	mov	r2, r8
 8022d14:	4648      	mov	r0, r9
 8022d16:	f7fe f9cd 	bl	80210b4 <__lshift>
 8022d1a:	eba6 0608 	sub.w	r6, r6, r8
 8022d1e:	4604      	mov	r4, r0
 8022d20:	f100 0a14 	add.w	sl, r0, #20
 8022d24:	f04f 0b00 	mov.w	fp, #0
 8022d28:	e7ba      	b.n	8022ca0 <__gethex+0x1e4>
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	42b3      	cmp	r3, r6
 8022d2e:	dd73      	ble.n	8022e18 <__gethex+0x35c>
 8022d30:	1b9e      	subs	r6, r3, r6
 8022d32:	42b5      	cmp	r5, r6
 8022d34:	dc34      	bgt.n	8022da0 <__gethex+0x2e4>
 8022d36:	68fb      	ldr	r3, [r7, #12]
 8022d38:	2b02      	cmp	r3, #2
 8022d3a:	d023      	beq.n	8022d84 <__gethex+0x2c8>
 8022d3c:	2b03      	cmp	r3, #3
 8022d3e:	d025      	beq.n	8022d8c <__gethex+0x2d0>
 8022d40:	2b01      	cmp	r3, #1
 8022d42:	d115      	bne.n	8022d70 <__gethex+0x2b4>
 8022d44:	42b5      	cmp	r5, r6
 8022d46:	d113      	bne.n	8022d70 <__gethex+0x2b4>
 8022d48:	2d01      	cmp	r5, #1
 8022d4a:	d10b      	bne.n	8022d64 <__gethex+0x2a8>
 8022d4c:	9a02      	ldr	r2, [sp, #8]
 8022d4e:	687b      	ldr	r3, [r7, #4]
 8022d50:	6013      	str	r3, [r2, #0]
 8022d52:	2301      	movs	r3, #1
 8022d54:	6123      	str	r3, [r4, #16]
 8022d56:	f8ca 3000 	str.w	r3, [sl]
 8022d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d5c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8022d60:	601c      	str	r4, [r3, #0]
 8022d62:	e735      	b.n	8022bd0 <__gethex+0x114>
 8022d64:	1e69      	subs	r1, r5, #1
 8022d66:	4620      	mov	r0, r4
 8022d68:	f7fe fbd3 	bl	8021512 <__any_on>
 8022d6c:	2800      	cmp	r0, #0
 8022d6e:	d1ed      	bne.n	8022d4c <__gethex+0x290>
 8022d70:	4621      	mov	r1, r4
 8022d72:	4648      	mov	r0, r9
 8022d74:	f7fd ff84 	bl	8020c80 <_Bfree>
 8022d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d7a:	2300      	movs	r3, #0
 8022d7c:	6013      	str	r3, [r2, #0]
 8022d7e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8022d82:	e725      	b.n	8022bd0 <__gethex+0x114>
 8022d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	d1f2      	bne.n	8022d70 <__gethex+0x2b4>
 8022d8a:	e7df      	b.n	8022d4c <__gethex+0x290>
 8022d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d8e:	2b00      	cmp	r3, #0
 8022d90:	d1dc      	bne.n	8022d4c <__gethex+0x290>
 8022d92:	e7ed      	b.n	8022d70 <__gethex+0x2b4>
 8022d94:	08024e1c 	.word	0x08024e1c
 8022d98:	08024cb6 	.word	0x08024cb6
 8022d9c:	08024e89 	.word	0x08024e89
 8022da0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8022da4:	f1bb 0f00 	cmp.w	fp, #0
 8022da8:	d133      	bne.n	8022e12 <__gethex+0x356>
 8022daa:	f1b8 0f00 	cmp.w	r8, #0
 8022dae:	d004      	beq.n	8022dba <__gethex+0x2fe>
 8022db0:	4641      	mov	r1, r8
 8022db2:	4620      	mov	r0, r4
 8022db4:	f7fe fbad 	bl	8021512 <__any_on>
 8022db8:	4683      	mov	fp, r0
 8022dba:	ea4f 1268 	mov.w	r2, r8, asr #5
 8022dbe:	2301      	movs	r3, #1
 8022dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8022dc4:	f008 081f 	and.w	r8, r8, #31
 8022dc8:	fa03 f308 	lsl.w	r3, r3, r8
 8022dcc:	4213      	tst	r3, r2
 8022dce:	4631      	mov	r1, r6
 8022dd0:	4620      	mov	r0, r4
 8022dd2:	bf18      	it	ne
 8022dd4:	f04b 0b02 	orrne.w	fp, fp, #2
 8022dd8:	1bad      	subs	r5, r5, r6
 8022dda:	f7ff fe08 	bl	80229ee <rshift>
 8022dde:	687e      	ldr	r6, [r7, #4]
 8022de0:	f04f 0802 	mov.w	r8, #2
 8022de4:	f1bb 0f00 	cmp.w	fp, #0
 8022de8:	d04a      	beq.n	8022e80 <__gethex+0x3c4>
 8022dea:	68fb      	ldr	r3, [r7, #12]
 8022dec:	2b02      	cmp	r3, #2
 8022dee:	d016      	beq.n	8022e1e <__gethex+0x362>
 8022df0:	2b03      	cmp	r3, #3
 8022df2:	d018      	beq.n	8022e26 <__gethex+0x36a>
 8022df4:	2b01      	cmp	r3, #1
 8022df6:	d109      	bne.n	8022e0c <__gethex+0x350>
 8022df8:	f01b 0f02 	tst.w	fp, #2
 8022dfc:	d006      	beq.n	8022e0c <__gethex+0x350>
 8022dfe:	f8da 3000 	ldr.w	r3, [sl]
 8022e02:	ea4b 0b03 	orr.w	fp, fp, r3
 8022e06:	f01b 0f01 	tst.w	fp, #1
 8022e0a:	d10f      	bne.n	8022e2c <__gethex+0x370>
 8022e0c:	f048 0810 	orr.w	r8, r8, #16
 8022e10:	e036      	b.n	8022e80 <__gethex+0x3c4>
 8022e12:	f04f 0b01 	mov.w	fp, #1
 8022e16:	e7d0      	b.n	8022dba <__gethex+0x2fe>
 8022e18:	f04f 0801 	mov.w	r8, #1
 8022e1c:	e7e2      	b.n	8022de4 <__gethex+0x328>
 8022e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022e20:	f1c3 0301 	rsb	r3, r3, #1
 8022e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8022e26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	d0ef      	beq.n	8022e0c <__gethex+0x350>
 8022e2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8022e30:	f104 0214 	add.w	r2, r4, #20
 8022e34:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8022e38:	9301      	str	r3, [sp, #4]
 8022e3a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8022e3e:	2300      	movs	r3, #0
 8022e40:	4694      	mov	ip, r2
 8022e42:	f852 1b04 	ldr.w	r1, [r2], #4
 8022e46:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8022e4a:	d01e      	beq.n	8022e8a <__gethex+0x3ce>
 8022e4c:	3101      	adds	r1, #1
 8022e4e:	f8cc 1000 	str.w	r1, [ip]
 8022e52:	f1b8 0f02 	cmp.w	r8, #2
 8022e56:	f104 0214 	add.w	r2, r4, #20
 8022e5a:	d13d      	bne.n	8022ed8 <__gethex+0x41c>
 8022e5c:	683b      	ldr	r3, [r7, #0]
 8022e5e:	3b01      	subs	r3, #1
 8022e60:	42ab      	cmp	r3, r5
 8022e62:	d10b      	bne.n	8022e7c <__gethex+0x3c0>
 8022e64:	1169      	asrs	r1, r5, #5
 8022e66:	2301      	movs	r3, #1
 8022e68:	f005 051f 	and.w	r5, r5, #31
 8022e6c:	fa03 f505 	lsl.w	r5, r3, r5
 8022e70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022e74:	421d      	tst	r5, r3
 8022e76:	bf18      	it	ne
 8022e78:	f04f 0801 	movne.w	r8, #1
 8022e7c:	f048 0820 	orr.w	r8, r8, #32
 8022e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022e82:	601c      	str	r4, [r3, #0]
 8022e84:	9b02      	ldr	r3, [sp, #8]
 8022e86:	601e      	str	r6, [r3, #0]
 8022e88:	e6a2      	b.n	8022bd0 <__gethex+0x114>
 8022e8a:	4290      	cmp	r0, r2
 8022e8c:	f842 3c04 	str.w	r3, [r2, #-4]
 8022e90:	d8d6      	bhi.n	8022e40 <__gethex+0x384>
 8022e92:	68a2      	ldr	r2, [r4, #8]
 8022e94:	4593      	cmp	fp, r2
 8022e96:	db17      	blt.n	8022ec8 <__gethex+0x40c>
 8022e98:	6861      	ldr	r1, [r4, #4]
 8022e9a:	4648      	mov	r0, r9
 8022e9c:	3101      	adds	r1, #1
 8022e9e:	f7fd feaf 	bl	8020c00 <_Balloc>
 8022ea2:	4682      	mov	sl, r0
 8022ea4:	b918      	cbnz	r0, 8022eae <__gethex+0x3f2>
 8022ea6:	4b1b      	ldr	r3, [pc, #108]	; (8022f14 <__gethex+0x458>)
 8022ea8:	4602      	mov	r2, r0
 8022eaa:	2184      	movs	r1, #132	; 0x84
 8022eac:	e6b3      	b.n	8022c16 <__gethex+0x15a>
 8022eae:	6922      	ldr	r2, [r4, #16]
 8022eb0:	3202      	adds	r2, #2
 8022eb2:	f104 010c 	add.w	r1, r4, #12
 8022eb6:	0092      	lsls	r2, r2, #2
 8022eb8:	300c      	adds	r0, #12
 8022eba:	f7fd f820 	bl	801fefe <memcpy>
 8022ebe:	4621      	mov	r1, r4
 8022ec0:	4648      	mov	r0, r9
 8022ec2:	f7fd fedd 	bl	8020c80 <_Bfree>
 8022ec6:	4654      	mov	r4, sl
 8022ec8:	6922      	ldr	r2, [r4, #16]
 8022eca:	1c51      	adds	r1, r2, #1
 8022ecc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8022ed0:	6121      	str	r1, [r4, #16]
 8022ed2:	2101      	movs	r1, #1
 8022ed4:	6151      	str	r1, [r2, #20]
 8022ed6:	e7bc      	b.n	8022e52 <__gethex+0x396>
 8022ed8:	6921      	ldr	r1, [r4, #16]
 8022eda:	4559      	cmp	r1, fp
 8022edc:	dd0b      	ble.n	8022ef6 <__gethex+0x43a>
 8022ede:	2101      	movs	r1, #1
 8022ee0:	4620      	mov	r0, r4
 8022ee2:	f7ff fd84 	bl	80229ee <rshift>
 8022ee6:	68bb      	ldr	r3, [r7, #8]
 8022ee8:	3601      	adds	r6, #1
 8022eea:	42b3      	cmp	r3, r6
 8022eec:	f6ff aedb 	blt.w	8022ca6 <__gethex+0x1ea>
 8022ef0:	f04f 0801 	mov.w	r8, #1
 8022ef4:	e7c2      	b.n	8022e7c <__gethex+0x3c0>
 8022ef6:	f015 051f 	ands.w	r5, r5, #31
 8022efa:	d0f9      	beq.n	8022ef0 <__gethex+0x434>
 8022efc:	9b01      	ldr	r3, [sp, #4]
 8022efe:	441a      	add	r2, r3
 8022f00:	f1c5 0520 	rsb	r5, r5, #32
 8022f04:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8022f08:	f7fd ff6c 	bl	8020de4 <__hi0bits>
 8022f0c:	42a8      	cmp	r0, r5
 8022f0e:	dbe6      	blt.n	8022ede <__gethex+0x422>
 8022f10:	e7ee      	b.n	8022ef0 <__gethex+0x434>
 8022f12:	bf00      	nop
 8022f14:	08024cb6 	.word	0x08024cb6

08022f18 <L_shift>:
 8022f18:	f1c2 0208 	rsb	r2, r2, #8
 8022f1c:	0092      	lsls	r2, r2, #2
 8022f1e:	b570      	push	{r4, r5, r6, lr}
 8022f20:	f1c2 0620 	rsb	r6, r2, #32
 8022f24:	6843      	ldr	r3, [r0, #4]
 8022f26:	6804      	ldr	r4, [r0, #0]
 8022f28:	fa03 f506 	lsl.w	r5, r3, r6
 8022f2c:	432c      	orrs	r4, r5
 8022f2e:	40d3      	lsrs	r3, r2
 8022f30:	6004      	str	r4, [r0, #0]
 8022f32:	f840 3f04 	str.w	r3, [r0, #4]!
 8022f36:	4288      	cmp	r0, r1
 8022f38:	d3f4      	bcc.n	8022f24 <L_shift+0xc>
 8022f3a:	bd70      	pop	{r4, r5, r6, pc}

08022f3c <__match>:
 8022f3c:	b530      	push	{r4, r5, lr}
 8022f3e:	6803      	ldr	r3, [r0, #0]
 8022f40:	3301      	adds	r3, #1
 8022f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022f46:	b914      	cbnz	r4, 8022f4e <__match+0x12>
 8022f48:	6003      	str	r3, [r0, #0]
 8022f4a:	2001      	movs	r0, #1
 8022f4c:	bd30      	pop	{r4, r5, pc}
 8022f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022f52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8022f56:	2d19      	cmp	r5, #25
 8022f58:	bf98      	it	ls
 8022f5a:	3220      	addls	r2, #32
 8022f5c:	42a2      	cmp	r2, r4
 8022f5e:	d0f0      	beq.n	8022f42 <__match+0x6>
 8022f60:	2000      	movs	r0, #0
 8022f62:	e7f3      	b.n	8022f4c <__match+0x10>

08022f64 <__hexnan>:
 8022f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f68:	680b      	ldr	r3, [r1, #0]
 8022f6a:	6801      	ldr	r1, [r0, #0]
 8022f6c:	115e      	asrs	r6, r3, #5
 8022f6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8022f72:	f013 031f 	ands.w	r3, r3, #31
 8022f76:	b087      	sub	sp, #28
 8022f78:	bf18      	it	ne
 8022f7a:	3604      	addne	r6, #4
 8022f7c:	2500      	movs	r5, #0
 8022f7e:	1f37      	subs	r7, r6, #4
 8022f80:	4682      	mov	sl, r0
 8022f82:	4690      	mov	r8, r2
 8022f84:	9301      	str	r3, [sp, #4]
 8022f86:	f846 5c04 	str.w	r5, [r6, #-4]
 8022f8a:	46b9      	mov	r9, r7
 8022f8c:	463c      	mov	r4, r7
 8022f8e:	9502      	str	r5, [sp, #8]
 8022f90:	46ab      	mov	fp, r5
 8022f92:	784a      	ldrb	r2, [r1, #1]
 8022f94:	1c4b      	adds	r3, r1, #1
 8022f96:	9303      	str	r3, [sp, #12]
 8022f98:	b342      	cbz	r2, 8022fec <__hexnan+0x88>
 8022f9a:	4610      	mov	r0, r2
 8022f9c:	9105      	str	r1, [sp, #20]
 8022f9e:	9204      	str	r2, [sp, #16]
 8022fa0:	f7ff fd77 	bl	8022a92 <__hexdig_fun>
 8022fa4:	2800      	cmp	r0, #0
 8022fa6:	d14f      	bne.n	8023048 <__hexnan+0xe4>
 8022fa8:	9a04      	ldr	r2, [sp, #16]
 8022faa:	9905      	ldr	r1, [sp, #20]
 8022fac:	2a20      	cmp	r2, #32
 8022fae:	d818      	bhi.n	8022fe2 <__hexnan+0x7e>
 8022fb0:	9b02      	ldr	r3, [sp, #8]
 8022fb2:	459b      	cmp	fp, r3
 8022fb4:	dd13      	ble.n	8022fde <__hexnan+0x7a>
 8022fb6:	454c      	cmp	r4, r9
 8022fb8:	d206      	bcs.n	8022fc8 <__hexnan+0x64>
 8022fba:	2d07      	cmp	r5, #7
 8022fbc:	dc04      	bgt.n	8022fc8 <__hexnan+0x64>
 8022fbe:	462a      	mov	r2, r5
 8022fc0:	4649      	mov	r1, r9
 8022fc2:	4620      	mov	r0, r4
 8022fc4:	f7ff ffa8 	bl	8022f18 <L_shift>
 8022fc8:	4544      	cmp	r4, r8
 8022fca:	d950      	bls.n	802306e <__hexnan+0x10a>
 8022fcc:	2300      	movs	r3, #0
 8022fce:	f1a4 0904 	sub.w	r9, r4, #4
 8022fd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8022fd6:	f8cd b008 	str.w	fp, [sp, #8]
 8022fda:	464c      	mov	r4, r9
 8022fdc:	461d      	mov	r5, r3
 8022fde:	9903      	ldr	r1, [sp, #12]
 8022fe0:	e7d7      	b.n	8022f92 <__hexnan+0x2e>
 8022fe2:	2a29      	cmp	r2, #41	; 0x29
 8022fe4:	d155      	bne.n	8023092 <__hexnan+0x12e>
 8022fe6:	3102      	adds	r1, #2
 8022fe8:	f8ca 1000 	str.w	r1, [sl]
 8022fec:	f1bb 0f00 	cmp.w	fp, #0
 8022ff0:	d04f      	beq.n	8023092 <__hexnan+0x12e>
 8022ff2:	454c      	cmp	r4, r9
 8022ff4:	d206      	bcs.n	8023004 <__hexnan+0xa0>
 8022ff6:	2d07      	cmp	r5, #7
 8022ff8:	dc04      	bgt.n	8023004 <__hexnan+0xa0>
 8022ffa:	462a      	mov	r2, r5
 8022ffc:	4649      	mov	r1, r9
 8022ffe:	4620      	mov	r0, r4
 8023000:	f7ff ff8a 	bl	8022f18 <L_shift>
 8023004:	4544      	cmp	r4, r8
 8023006:	d934      	bls.n	8023072 <__hexnan+0x10e>
 8023008:	f1a8 0204 	sub.w	r2, r8, #4
 802300c:	4623      	mov	r3, r4
 802300e:	f853 1b04 	ldr.w	r1, [r3], #4
 8023012:	f842 1f04 	str.w	r1, [r2, #4]!
 8023016:	429f      	cmp	r7, r3
 8023018:	d2f9      	bcs.n	802300e <__hexnan+0xaa>
 802301a:	1b3b      	subs	r3, r7, r4
 802301c:	f023 0303 	bic.w	r3, r3, #3
 8023020:	3304      	adds	r3, #4
 8023022:	3e03      	subs	r6, #3
 8023024:	3401      	adds	r4, #1
 8023026:	42a6      	cmp	r6, r4
 8023028:	bf38      	it	cc
 802302a:	2304      	movcc	r3, #4
 802302c:	4443      	add	r3, r8
 802302e:	2200      	movs	r2, #0
 8023030:	f843 2b04 	str.w	r2, [r3], #4
 8023034:	429f      	cmp	r7, r3
 8023036:	d2fb      	bcs.n	8023030 <__hexnan+0xcc>
 8023038:	683b      	ldr	r3, [r7, #0]
 802303a:	b91b      	cbnz	r3, 8023044 <__hexnan+0xe0>
 802303c:	4547      	cmp	r7, r8
 802303e:	d126      	bne.n	802308e <__hexnan+0x12a>
 8023040:	2301      	movs	r3, #1
 8023042:	603b      	str	r3, [r7, #0]
 8023044:	2005      	movs	r0, #5
 8023046:	e025      	b.n	8023094 <__hexnan+0x130>
 8023048:	3501      	adds	r5, #1
 802304a:	2d08      	cmp	r5, #8
 802304c:	f10b 0b01 	add.w	fp, fp, #1
 8023050:	dd06      	ble.n	8023060 <__hexnan+0xfc>
 8023052:	4544      	cmp	r4, r8
 8023054:	d9c3      	bls.n	8022fde <__hexnan+0x7a>
 8023056:	2300      	movs	r3, #0
 8023058:	f844 3c04 	str.w	r3, [r4, #-4]
 802305c:	2501      	movs	r5, #1
 802305e:	3c04      	subs	r4, #4
 8023060:	6822      	ldr	r2, [r4, #0]
 8023062:	f000 000f 	and.w	r0, r0, #15
 8023066:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802306a:	6020      	str	r0, [r4, #0]
 802306c:	e7b7      	b.n	8022fde <__hexnan+0x7a>
 802306e:	2508      	movs	r5, #8
 8023070:	e7b5      	b.n	8022fde <__hexnan+0x7a>
 8023072:	9b01      	ldr	r3, [sp, #4]
 8023074:	2b00      	cmp	r3, #0
 8023076:	d0df      	beq.n	8023038 <__hexnan+0xd4>
 8023078:	f1c3 0320 	rsb	r3, r3, #32
 802307c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023080:	40da      	lsrs	r2, r3
 8023082:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8023086:	4013      	ands	r3, r2
 8023088:	f846 3c04 	str.w	r3, [r6, #-4]
 802308c:	e7d4      	b.n	8023038 <__hexnan+0xd4>
 802308e:	3f04      	subs	r7, #4
 8023090:	e7d2      	b.n	8023038 <__hexnan+0xd4>
 8023092:	2004      	movs	r0, #4
 8023094:	b007      	add	sp, #28
 8023096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802309a <__ascii_mbtowc>:
 802309a:	b082      	sub	sp, #8
 802309c:	b901      	cbnz	r1, 80230a0 <__ascii_mbtowc+0x6>
 802309e:	a901      	add	r1, sp, #4
 80230a0:	b142      	cbz	r2, 80230b4 <__ascii_mbtowc+0x1a>
 80230a2:	b14b      	cbz	r3, 80230b8 <__ascii_mbtowc+0x1e>
 80230a4:	7813      	ldrb	r3, [r2, #0]
 80230a6:	600b      	str	r3, [r1, #0]
 80230a8:	7812      	ldrb	r2, [r2, #0]
 80230aa:	1e10      	subs	r0, r2, #0
 80230ac:	bf18      	it	ne
 80230ae:	2001      	movne	r0, #1
 80230b0:	b002      	add	sp, #8
 80230b2:	4770      	bx	lr
 80230b4:	4610      	mov	r0, r2
 80230b6:	e7fb      	b.n	80230b0 <__ascii_mbtowc+0x16>
 80230b8:	f06f 0001 	mvn.w	r0, #1
 80230bc:	e7f8      	b.n	80230b0 <__ascii_mbtowc+0x16>

080230be <__ascii_wctomb>:
 80230be:	b149      	cbz	r1, 80230d4 <__ascii_wctomb+0x16>
 80230c0:	2aff      	cmp	r2, #255	; 0xff
 80230c2:	bf85      	ittet	hi
 80230c4:	238a      	movhi	r3, #138	; 0x8a
 80230c6:	6003      	strhi	r3, [r0, #0]
 80230c8:	700a      	strbls	r2, [r1, #0]
 80230ca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80230ce:	bf98      	it	ls
 80230d0:	2001      	movls	r0, #1
 80230d2:	4770      	bx	lr
 80230d4:	4608      	mov	r0, r1
 80230d6:	4770      	bx	lr

080230d8 <_raise_r>:
 80230d8:	291f      	cmp	r1, #31
 80230da:	b538      	push	{r3, r4, r5, lr}
 80230dc:	4604      	mov	r4, r0
 80230de:	460d      	mov	r5, r1
 80230e0:	d904      	bls.n	80230ec <_raise_r+0x14>
 80230e2:	2316      	movs	r3, #22
 80230e4:	6003      	str	r3, [r0, #0]
 80230e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80230ea:	bd38      	pop	{r3, r4, r5, pc}
 80230ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80230ee:	b112      	cbz	r2, 80230f6 <_raise_r+0x1e>
 80230f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80230f4:	b94b      	cbnz	r3, 802310a <_raise_r+0x32>
 80230f6:	4620      	mov	r0, r4
 80230f8:	f000 f830 	bl	802315c <_getpid_r>
 80230fc:	462a      	mov	r2, r5
 80230fe:	4601      	mov	r1, r0
 8023100:	4620      	mov	r0, r4
 8023102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023106:	f000 b817 	b.w	8023138 <_kill_r>
 802310a:	2b01      	cmp	r3, #1
 802310c:	d00a      	beq.n	8023124 <_raise_r+0x4c>
 802310e:	1c59      	adds	r1, r3, #1
 8023110:	d103      	bne.n	802311a <_raise_r+0x42>
 8023112:	2316      	movs	r3, #22
 8023114:	6003      	str	r3, [r0, #0]
 8023116:	2001      	movs	r0, #1
 8023118:	e7e7      	b.n	80230ea <_raise_r+0x12>
 802311a:	2400      	movs	r4, #0
 802311c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023120:	4628      	mov	r0, r5
 8023122:	4798      	blx	r3
 8023124:	2000      	movs	r0, #0
 8023126:	e7e0      	b.n	80230ea <_raise_r+0x12>

08023128 <raise>:
 8023128:	4b02      	ldr	r3, [pc, #8]	; (8023134 <raise+0xc>)
 802312a:	4601      	mov	r1, r0
 802312c:	6818      	ldr	r0, [r3, #0]
 802312e:	f7ff bfd3 	b.w	80230d8 <_raise_r>
 8023132:	bf00      	nop
 8023134:	200009a0 	.word	0x200009a0

08023138 <_kill_r>:
 8023138:	b538      	push	{r3, r4, r5, lr}
 802313a:	4d07      	ldr	r5, [pc, #28]	; (8023158 <_kill_r+0x20>)
 802313c:	2300      	movs	r3, #0
 802313e:	4604      	mov	r4, r0
 8023140:	4608      	mov	r0, r1
 8023142:	4611      	mov	r1, r2
 8023144:	602b      	str	r3, [r5, #0]
 8023146:	f7df fd8b 	bl	8002c60 <_kill>
 802314a:	1c43      	adds	r3, r0, #1
 802314c:	d102      	bne.n	8023154 <_kill_r+0x1c>
 802314e:	682b      	ldr	r3, [r5, #0]
 8023150:	b103      	cbz	r3, 8023154 <_kill_r+0x1c>
 8023152:	6023      	str	r3, [r4, #0]
 8023154:	bd38      	pop	{r3, r4, r5, pc}
 8023156:	bf00      	nop
 8023158:	20017068 	.word	0x20017068

0802315c <_getpid_r>:
 802315c:	f7df bd78 	b.w	8002c50 <_getpid>

08023160 <_init>:
 8023160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023162:	bf00      	nop
 8023164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023166:	bc08      	pop	{r3}
 8023168:	469e      	mov	lr, r3
 802316a:	4770      	bx	lr

0802316c <_fini>:
 802316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802316e:	bf00      	nop
 8023170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023172:	bc08      	pop	{r3}
 8023174:	469e      	mov	lr, r3
 8023176:	4770      	bx	lr
