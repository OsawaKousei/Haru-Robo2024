
harurobo2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023fa0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dc4  080241a0  080241a0  000341a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025f64  08025f64  00040b48  2**0
                  CONTENTS
  4 .ARM          00000008  08025f64  08025f64  00035f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025f6c  08025f6c  00040b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08025f6c  08025f6c  00035f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025f84  08025f84  00035f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b48  20000000  08025f88  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016668  20000b48  08026ad0  00040b48  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200171b0  08026ad0  000471b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040b48  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040b76  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f33f  00000000  00000000  00040bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c25  00000000  00000000  0006ff2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a0  00000000  00000000  00076b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a8e  00000000  00000000  00078df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322fa  00000000  00000000  0007a87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002db2c  00000000  00000000  000acb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119dde  00000000  00000000  000da6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a5d4  00000000  00000000  001f4484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001fea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b48 	.word	0x20000b48
 800021c:	00000000 	.word	0x00000000
 8000220:	08024188 	.word	0x08024188

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b4c 	.word	0x20000b4c
 800023c:	08024188 	.word	0x08024188

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a6:	f000 b9f3 	b.w	8000a90 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3304      	adds	r3, #4
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4413      	add	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
 8000ac2:	e010      	b.n	8000ae6 <PushTx8Bytes+0x52>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	7808      	ldrb	r0, [r1, #0]
 8000ad2:	4919      	ldr	r1, [pc, #100]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	440a      	add	r2, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	3308      	adds	r3, #8
 8000adc:	4602      	mov	r2, r0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d8ea      	bhi.n	8000ac4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <PushTx8Bytes+0x70>
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <PushTx8Bytes+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b02:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b10:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d102      	bne.n	8000b24 <PushTx8Bytes+0x90>
		isfull = 1;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20002e3c 	.word	0x20002e3c
 8000b38:	20000e38 	.word	0x20000e38
 8000b3c:	20002e40 	.word	0x20002e40
 8000b40:	20002e38 	.word	0x20002e38

08000b44 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000b4e:	2304      	movs	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000b56:	e035      	b.n	8000bc4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <PopSendTx8Bytes+0x28>
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <PopSendTx8Bytes+0xa8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d034      	beq.n	8000bd6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3308      	adds	r3, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b98:	441a      	add	r2, r3
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f003 fd5b 	bl	8004658 <HAL_CAN_AddTxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <PopSendTx8Bytes+0x6c>
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	e014      	b.n	8000bda <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bbc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fe15 	bl	80047f8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1c1      	bne.n	8000b58 <PopSendTx8Bytes+0x14>
 8000bd4:	e000      	b.n	8000bd8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000bd6:	bf00      	nop
	}

	return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20002e40 	.word	0x20002e40
 8000be8:	20002e38 	.word	0x20002e38
 8000bec:	20002e3c 	.word	0x20002e3c
 8000bf0:	20000e38 	.word	0x20000e38
 8000bf4:	20000b64 	.word	0x20000b64

08000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000bfc:	f7ff ffa2 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000c08:	f7ff ff9c 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c14:	b08e      	sub	sp, #56	; 0x38
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 fe1b 	bl	8004862 <HAL_CAN_GetRxMessage>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000c32:	486e      	ldr	r0, [pc, #440]	; (8000dec <WhenCANRxFifo0MsgPending+0x1dc>)
 8000c34:	f01f fdfe 	bl	8020834 <iprintf>
		Error_Handler();
 8000c38:	f002 fcf5 	bl	8003626 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4698      	mov	r8, r3
 8000c42:	4691      	mov	r9, r2
 8000c44:	4640      	mov	r0, r8
 8000c46:	4649      	mov	r1, r9
 8000c48:	f000 fe70 	bl	800192c <Extract_CAN_Device>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	733a      	strb	r2, [r7, #12]
 8000c52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c56:	737a      	strb	r2, [r7, #13]
 8000c58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000c5c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	2200      	movs	r2, #0
 8000c62:	461c      	mov	r4, r3
 8000c64:	4615      	mov	r5, r2
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 feab 	bl	80019c4 <Extract_CAN_CMD>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000c74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d139      	bne.n	8000cf0 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c82:	e013      	b.n	8000cac <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c8c:	4958      	ldr	r1, [pc, #352]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000c8e:	4603      	mov	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	440b      	add	r3, r1
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f000 80a0 	beq.w	8000de2 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cb2:	5c9b      	ldrb	r3, [r3, r2]
 8000cb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	7b3b      	ldrb	r3, [r7, #12]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cc6:	5c9b      	ldrb	r3, [r3, r2]
 8000cc8:	461c      	mov	r4, r3
 8000cca:	7c38      	ldrb	r0, [r7, #16]
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000cce:	460b      	mov	r3, r1
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a5b      	subs	r3, r3, r1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4423      	add	r3, r4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	7b3a      	ldrb	r2, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cec:	5499      	strb	r1, [r3, r2]
 8000cee:	e04a      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d146      	bne.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	7bba      	ldrb	r2, [r7, #14]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	cb03      	ldmia	r3!, {r0, r1}
 8000d14:	6010      	str	r0, [r2, #0]
 8000d16:	6051      	str	r1, [r2, #4]
 8000d18:	e035      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10d      	bne.n	8000d3c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <WhenCANRxFifo0MsgPending+0x1ec>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	cb03      	ldmia	r3!, {r0, r1}
 8000d36:	6010      	str	r0, [r2, #0]
 8000d38:	6051      	str	r1, [r2, #4]
 8000d3a:	e024      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10d      	bne.n	8000d5e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	7bba      	ldrb	r2, [r7, #14]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	cb03      	ldmia	r3!, {r0, r1}
 8000d58:	6010      	str	r0, [r2, #0]
 8000d5a:	6051      	str	r1, [r2, #4]
 8000d5c:	e013      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d10d      	bne.n	8000d80 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	7bba      	ldrb	r2, [r7, #14]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	cb03      	ldmia	r3!, {r0, r1}
 8000d7a:	6010      	str	r0, [r2, #0]
 8000d7c:	6051      	str	r1, [r2, #4]
 8000d7e:	e002      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000d82:	f01f fd57 	bl	8020834 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d88:	785a      	ldrb	r2, [r3, #1]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d128      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d122      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000da0:	78da      	ldrb	r2, [r3, #3]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d11c      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dac:	791a      	ldrb	r2, [r3, #4]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d116      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000db8:	795a      	ldrb	r2, [r3, #5]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d110      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dc4:	799a      	ldrb	r2, [r3, #6]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10a      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dd0:	7a1a      	ldrb	r2, [r3, #8]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	799b      	ldrb	r3, [r3, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d104      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000de2:	bf00      	nop
	}
}
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000dec:	080241a0 	.word	0x080241a0
 8000df0:	20000b78 	.word	0x20000b78
 8000df4:	20000b6c 	.word	0x20000b6c
 8000df8:	20000bb8 	.word	0x20000bb8
 8000dfc:	20000c58 	.word	0x20000c58
 8000e00:	20000cf8 	.word	0x20000cf8
 8000e04:	20000d98 	.word	0x20000d98
 8000e08:	080241b8 	.word	0x080241b8
 8000e0c:	20000b68 	.word	0x20000b68

08000e10 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	e015      	b.n	8000e5e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	461a      	mov	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe27 	bl	8000a94 <PushTx8Bytes>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <SendBytes+0x48>
			Error_Handler();
 8000e50:	f002 fbe9 	bl	8003626 <Error_Handler>
			return ret;
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	e027      	b.n	8000ea8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8e5      	bhi.n	8000e32 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d011      	beq.n	8000e90 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fe0b 	bl	8000a94 <PushTx8Bytes>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <SendBytes+0x80>
			Error_Handler();
 8000e88:	f002 fbcd 	bl	8003626 <Error_Handler>
			return ret;
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	e00b      	b.n	8000ea8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 8000e90:	f7ff fe58 	bl	8000b44 <PopSendTx8Bytes>
 8000e94:	4603      	mov	r3, r0
 8000e96:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <SendBytes+0x96>
		Error_Handler();
 8000e9e:	f002 fbc2 	bl	8003626 <Error_Handler>
		return ret;
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	e000      	b.n	8000ea8 <SendBytes+0x98>
	}

	return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <CAN_SystemInit+0x30>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <CAN_SystemInit+0x34>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000eca:	e029      	b.n	8000f20 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <CAN_SystemInit+0x38>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000edc:	e017      	b.n	8000f0e <CAN_SystemInit+0x5e>
 8000ede:	bf00      	nop
 8000ee0:	20000b64 	.word	0x20000b64
 8000ee4:	20000b68 	.word	0x20000b68
 8000ee8:	20000b6c 	.word	0x20000b6c
			node_id_list[type][i] = 0xff;
 8000eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ef0:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000ef4:	48d7      	ldr	r0, [pc, #860]	; (8001254 <CAN_SystemInit+0x3a4>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	4403      	add	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000f04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d9ea      	bls.n	8000eec <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d9d1      	bls.n	8000ecc <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fcc3 	bl	80018d2 <Make_CAN_ID>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	0b42      	lsrs	r2, r0, #13
 8000f56:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f5a:	0b4b      	lsrs	r3, r1, #13
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000f60:	231f      	movs	r3, #31
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fcb3 	bl	80018d2 <Make_CAN_ID>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	0b42      	lsrs	r2, r0, #13
 8000f76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f7a:	0b4b      	lsrs	r3, r1, #13
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fca3 	bl	80018d2 <Make_CAN_ID>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4613      	mov	r3, r2
 8000f92:	00da      	lsls	r2, r3, #3
 8000f94:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fc93 	bl	80018d2 <Make_CAN_ID>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000fc0:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <CAN_SystemInit+0x3a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fa14 	bl	80043f8 <HAL_CAN_ConfigFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000fd6:	f002 fb26 	bl	8003626 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fc74 	bl	80018d2 <Make_CAN_ID>
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	0b42      	lsrs	r2, r0, #13
 8000ff4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ff8:	0b4b      	lsrs	r3, r1, #13
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000ffe:	231f      	movs	r3, #31
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2002      	movs	r0, #2
 8001006:	f000 fc64 	bl	80018d2 <Make_CAN_ID>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	0b42      	lsrs	r2, r0, #13
 8001014:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001018:	0b4b      	lsrs	r3, r1, #13
 800101a:	4613      	mov	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2002      	movs	r0, #2
 8001026:	f000 fc54 	bl	80018d2 <Make_CAN_ID>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4613      	mov	r3, r2
 8001030:	00da      	lsls	r2, r3, #3
 8001032:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001036:	4013      	ands	r3, r2
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800103e:	231f      	movs	r3, #31
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2002      	movs	r0, #2
 8001046:	f000 fc44 	bl	80018d2 <Make_CAN_ID>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4613      	mov	r3, r2
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001056:	4013      	ands	r3, r2
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <CAN_SystemInit+0x3a8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f9c5 	bl	80043f8 <HAL_CAN_ConfigFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8001074:	f002 fad7 	bl	8003626 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2003      	movs	r0, #3
 8001084:	f000 fc25 	bl	80018d2 <Make_CAN_ID>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	0b42      	lsrs	r2, r0, #13
 8001092:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001096:	0b4b      	lsrs	r3, r1, #13
 8001098:	4613      	mov	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 800109c:	231f      	movs	r3, #31
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 fc15 	bl	80018d2 <Make_CAN_ID>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	0b42      	lsrs	r2, r0, #13
 80010b2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010b6:	0b4b      	lsrs	r3, r1, #13
 80010b8:	4613      	mov	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 fc05 	bl	80018d2 <Make_CAN_ID>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4613      	mov	r3, r2
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d4:	4013      	ands	r3, r2
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010dc:	231f      	movs	r3, #31
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 fbf5 	bl	80018d2 <Make_CAN_ID>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4613      	mov	r3, r2
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010f4:	4013      	ands	r3, r2
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80010fc:	4b56      	ldr	r3, [pc, #344]	; (8001258 <CAN_SystemInit+0x3a8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f003 f976 	bl	80043f8 <HAL_CAN_ConfigFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8001112:	f002 fa88 	bl	8003626 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fbd6 	bl	80018d2 <Make_CAN_ID>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	0b42      	lsrs	r2, r0, #13
 8001130:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001134:	0b4b      	lsrs	r3, r1, #13
 8001136:	4613      	mov	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 800113a:	231f      	movs	r3, #31
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fbc6 	bl	80018d2 <Make_CAN_ID>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0b42      	lsrs	r2, r0, #13
 8001150:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001154:	0b4b      	lsrs	r3, r1, #13
 8001156:	4613      	mov	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 800115a:	2301      	movs	r3, #1
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fbb6 	bl	80018d2 <Make_CAN_ID>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4613      	mov	r3, r2
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001172:	4013      	ands	r3, r2
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800117a:	231f      	movs	r3, #31
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fba6 	bl	80018d2 <Make_CAN_ID>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4613      	mov	r3, r2
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001192:	4013      	ands	r3, r2
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <CAN_SystemInit+0x3a8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 f927 	bl	80043f8 <HAL_CAN_ConfigFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 80011b0:	f002 fa39 	bl	8003626 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2004      	movs	r0, #4
 80011c0:	f000 fb87 	bl	80018d2 <Make_CAN_ID>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	0b42      	lsrs	r2, r0, #13
 80011ce:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011d2:	0b4b      	lsrs	r3, r1, #13
 80011d4:	4613      	mov	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 80011d8:	231f      	movs	r3, #31
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2004      	movs	r0, #4
 80011e0:	f000 fb77 	bl	80018d2 <Make_CAN_ID>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0b42      	lsrs	r2, r0, #13
 80011ee:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011f2:	0b4b      	lsrs	r3, r1, #13
 80011f4:	4613      	mov	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2004      	movs	r0, #4
 8001200:	f000 fb67 	bl	80018d2 <Make_CAN_ID>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4613      	mov	r3, r2
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001218:	231f      	movs	r3, #31
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2004      	movs	r0, #4
 8001220:	f000 fb57 	bl	80018d2 <Make_CAN_ID>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4613      	mov	r3, r2
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001230:	4013      	ands	r3, r2
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <CAN_SystemInit+0x3a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f8d8 	bl	80043f8 <HAL_CAN_ConfigFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 800124e:	f002 f9ea 	bl	8003626 <Error_Handler>
 8001252:	e003      	b.n	800125c <CAN_SystemInit+0x3ac>
 8001254:	20000b78 	.word	0x20000b78
 8001258:	20000b64 	.word	0x20000b64
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fb33 	bl	80018d2 <Make_CAN_ID>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0b42      	lsrs	r2, r0, #13
 8001276:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800127a:	0b4b      	lsrs	r3, r1, #13
 800127c:	4613      	mov	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8001280:	231f      	movs	r3, #31
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fb23 	bl	80018d2 <Make_CAN_ID>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	0b42      	lsrs	r2, r0, #13
 8001296:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800129a:	0b4b      	lsrs	r3, r1, #13
 800129c:	4613      	mov	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 fb13 	bl	80018d2 <Make_CAN_ID>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012b8:	4013      	ands	r3, r2
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80012c0:	231f      	movs	r3, #31
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fb03 	bl	80018d2 <Make_CAN_ID>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4613      	mov	r3, r2
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012d8:	4013      	ands	r3, r2
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <CAN_SystemInit+0x544>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f884 	bl	80043f8 <HAL_CAN_ConfigFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80012f6:	f002 f996 	bl	8003626 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 80012fa:	2306      	movs	r3, #6
 80012fc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2006      	movs	r0, #6
 8001306:	f000 fae4 	bl	80018d2 <Make_CAN_ID>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0b42      	lsrs	r2, r0, #13
 8001314:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001318:	0b4b      	lsrs	r3, r1, #13
 800131a:	4613      	mov	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 800131e:	231f      	movs	r3, #31
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2006      	movs	r0, #6
 8001326:	f000 fad4 	bl	80018d2 <Make_CAN_ID>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	0b42      	lsrs	r2, r0, #13
 8001334:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001338:	0b4b      	lsrs	r3, r1, #13
 800133a:	4613      	mov	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f000 fac4 	bl	80018d2 <Make_CAN_ID>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4613      	mov	r3, r2
 8001350:	00da      	lsls	r2, r3, #3
 8001352:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001356:	4013      	ands	r3, r2
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800135e:	231f      	movs	r3, #31
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fab4 	bl	80018d2 <Make_CAN_ID>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001376:	4013      	ands	r3, r2
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <CAN_SystemInit+0x544>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f003 f835 	bl	80043f8 <HAL_CAN_ConfigFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001394:	f002 f947 	bl	8003626 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <CAN_SystemInit+0x544>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f003 f917 	bl	80045d0 <HAL_CAN_Start>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <CAN_SystemInit+0x548>)
 80013aa:	f01f faa9 	bl	8020900 <puts>
		Error_Handler();
 80013ae:	f002 f93a 	bl	8003626 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <CAN_SystemInit+0x544>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fb64 	bl	8004a86 <HAL_CAN_ActivateNotification>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <CAN_SystemInit+0x54c>)
 80013c6:	f01f fa35 	bl	8020834 <iprintf>
		Error_Handler();
 80013ca:	f002 f92c 	bl	8003626 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <CAN_SystemInit+0x544>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fb56 	bl	8004a86 <HAL_CAN_ActivateNotification>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <CAN_SystemInit+0x54c>)
 80013e2:	f01f fa27 	bl	8020834 <iprintf>
		Error_Handler();
 80013e6:	f002 f91e 	bl	8003626 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000b64 	.word	0x20000b64
 80013f8:	080241c0 	.word	0x080241c0
 80013fc:	080241d0 	.word	0x080241d0

08001400 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8001408:	e006      	b.n	8001418 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <CAN_WaitConnect+0x13c>)
 800140c:	f01f fa12 	bl	8020834 <iprintf>
		HAL_Delay(500);
 8001410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001414:	f002 fed0 	bl	80041b8 <HAL_Delay>
	while (all_node_detected == 0){
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <CAN_WaitConnect+0x140>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f3      	beq.n	800140a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e00a      	b.n	800143e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <CAN_WaitConnect+0x144>)
 800142c:	4413      	add	r3, r2
 800142e:	79db      	ldrb	r3, [r3, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <CAN_WaitConnect+0x148>)
 8001434:	f01f f9fe 	bl	8020834 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3ef      	bcc.n	8001428 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	e00a      	b.n	8001464 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <CAN_WaitConnect+0x144>)
 8001452:	4413      	add	r3, r2
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <CAN_WaitConnect+0x14c>)
 800145a:	f01f f9eb 	bl	8020834 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	7bba      	ldrb	r2, [r7, #14]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ef      	bcc.n	800144e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	737b      	strb	r3, [r7, #13]
 8001472:	e00a      	b.n	800148a <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <CAN_WaitConnect+0x144>)
 8001478:	4413      	add	r3, r2
 800147a:	7d5b      	ldrb	r3, [r3, #21]
 800147c:	4619      	mov	r1, r3
 800147e:	4834      	ldr	r0, [pc, #208]	; (8001550 <CAN_WaitConnect+0x150>)
 8001480:	f01f f9d8 	bl	8020834 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	3301      	adds	r3, #1
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	7b7a      	ldrb	r2, [r7, #13]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ef      	bcc.n	8001474 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	e00b      	b.n	80014b2 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <CAN_WaitConnect+0x144>)
 800149e:	4413      	add	r3, r2
 80014a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014a4:	4619      	mov	r1, r3
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <CAN_WaitConnect+0x154>)
 80014a8:	f01f f9c4 	bl	8020834 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	733b      	strb	r3, [r7, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	7b3a      	ldrb	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ee      	bcc.n	800149a <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	72fb      	strb	r3, [r7, #11]
 80014c0:	e00a      	b.n	80014d8 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <CAN_WaitConnect+0x144>)
 80014c6:	4413      	add	r3, r2
 80014c8:	7f1b      	ldrb	r3, [r3, #28]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <CAN_WaitConnect+0x158>)
 80014ce:	f01f f9b1 	bl	8020834 <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	3301      	adds	r3, #1
 80014d6:	72fb      	strb	r3, [r7, #11]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3ef      	bcc.n	80014c2 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	72bb      	strb	r3, [r7, #10]
 80014e6:	e00b      	b.n	8001500 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <CAN_WaitConnect+0x144>)
 80014ec:	4413      	add	r3, r2
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <CAN_WaitConnect+0x15c>)
 80014f6:	f01f f99d 	bl	8020834 <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014fa:	7abb      	ldrb	r3, [r7, #10]
 80014fc:	3301      	adds	r3, #1
 80014fe:	72bb      	strb	r3, [r7, #10]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	7aba      	ldrb	r2, [r7, #10]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ee      	bcc.n	80014e8 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	727b      	strb	r3, [r7, #9]
 800150e:	e00b      	b.n	8001528 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <CAN_WaitConnect+0x144>)
 8001514:	4413      	add	r3, r2
 8001516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <CAN_WaitConnect+0x160>)
 800151e:	f01f f989 	bl	8020834 <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001522:	7a7b      	ldrb	r3, [r7, #9]
 8001524:	3301      	adds	r3, #1
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	7a7a      	ldrb	r2, [r7, #9]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3ee      	bcc.n	8001510 <CAN_WaitConnect+0x110>
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	080241f4 	.word	0x080241f4
 8001540:	20000b68 	.word	0x20000b68
 8001544:	20000b78 	.word	0x20000b78
 8001548:	08024214 	.word	0x08024214
 800154c:	08024224 	.word	0x08024224
 8001550:	08024234 	.word	0x08024234
 8001554:	08024244 	.word	0x08024244
 8001558:	08024254 	.word	0x08024254
 800155c:	08024264 	.word	0x08024264
 8001560:	08024270 	.word	0x08024270

08001564 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2105      	movs	r1, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f97f 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fc3e 	bl	8000e10 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2106      	movs	r1, #6
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f96b 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fc2a 	bl	8000e10 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2107      	movs	r1, #7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f957 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2208      	movs	r2, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fc16 	bl	8000e10 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d1b      	ldrb	r3, [r3, #20]
 80015e8:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f0:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f8:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001600:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800160e:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2108      	movs	r1, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f933 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2206      	movs	r2, #6
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fbf2 	bl	8000e10 <SendBytes>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	795b      	ldrb	r3, [r3, #5]
 8001646:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	79db      	ldrb	r3, [r3, #7]
 800164c:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f911 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2204      	movs	r2, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fbd0 	bl	8000e10 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f8fd 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fbbc 	bl	8000e10 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2104      	movs	r1, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f8e9 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fba8 	bl	8000e10 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f002 fd79 	bl	80041b8 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <MCMD_ChangeControl>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2109      	movs	r1, #9
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f8cd 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fb8c 	bl	8000e10 <SendBytes>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	210a      	movs	r1, #10
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8b7 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fb76 	bl	8000e10 <SendBytes>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	210c      	movs	r1, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f89f 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fb5f 	bl	8000e10 <SendBytes>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <ServoDriver_Init>:
		return ans;
	}
}

////servo
void ServoDriver_Init(CAN_Device *can_device, CANServo_Param_Typedef *param){
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	float fdata[2];
	fdata[0] = param->pulse_width_min;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->pulse_width_max;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT1), (uint8_t *)fdata, sizeof(fdata));
 8001770:	2101      	movs	r1, #1
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f884 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2208      	movs	r2, #8
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fb43 	bl	8000e10 <SendBytes>
	fdata[0] = param->pwm_frequency;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->angle_range;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT2), (uint8_t *)fdata, sizeof(fdata));
 8001796:	2102      	movs	r1, #2
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f871 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	2208      	movs	r2, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff fb30 	bl	8000e10 <SendBytes>
	fdata[0] = param->angle_offset;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0.0f;
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT3), (uint8_t *)fdata, sizeof(fdata));
 80017bc:	2103      	movs	r1, #3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f85e 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2208      	movs	r2, #8
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff fb1d 	bl	8000e10 <SendBytes>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <ServoDriver_SendValue>:

void ServoDriver_SendValue(CAN_Device *can_device, float angle){
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	ed87 0a00 	vstr	s0, [r7]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_SET_TARGET), (uint8_t *)(&angle), sizeof(float)) != HAL_OK){
 80017ea:	2104      	movs	r1, #4
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f847 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	463b      	mov	r3, r7
 80017fa:	2204      	movs	r2, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fb07 	bl	8000e10 <SendBytes>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <ServoDriver_SendValue+0x2e>
		Error_Handler();
 8001808:	f001 ff0d 	bl	8003626 <Error_Handler>
	}
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001820:	2101      	movs	r1, #1
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f82c 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	1cfb      	adds	r3, r7, #3
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff faec 	bl	8000e10 <SendBytes>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <AirCylinder_Init+0x2e>
		Error_Handler();
 800183e:	f001 fef2 	bl	8003626 <Error_Handler>
	}
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001856:	2102      	movs	r1, #2
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f811 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	1cfb      	adds	r3, r7, #3
 8001866:	2201      	movs	r2, #1
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff fad1 	bl	8000e10 <SendBytes>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001874:	f001 fed7 	bl	8003626 <Error_Handler>
	}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001880:	b4b0      	push	{r4, r5, r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	02db      	lsls	r3, r3, #11
 800189a:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	4313      	orrs	r3, r2
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	461c      	mov	r4, r3
 80018c0:	4615      	mov	r5, r2
 80018c2:	4622      	mov	r2, r4
 80018c4:	462b      	mov	r3, r5
}
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bcb0      	pop	{r4, r5, r7}
 80018d0:	4770      	bx	lr

080018d2 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 80018d2:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	02db      	lsls	r3, r3, #11
 80018f6:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001902:	431a      	orrs	r2, r3
 8001904:	797b      	ldrb	r3, [r7, #5]
 8001906:	015b      	lsls	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 800190c:	793b      	ldrb	r3, [r7, #4]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	17da      	asrs	r2, r3, #31
 8001916:	4698      	mov	r8, r3
 8001918:	4691      	mov	r9, r2
 800191a:	4642      	mov	r2, r8
 800191c:	464b      	mov	r3, r9
}
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 800192a:	4770      	bx	lr

0800192c <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	0942      	lsrs	r2, r0, #5
 8001944:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001948:	094b      	lsrs	r3, r1, #5
 800194a:	b2d3      	uxtb	r3, r2
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	b2db      	uxtb	r3, r3
 8001952:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	0a02      	lsrs	r2, r0, #8
 8001962:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001966:	0a0b      	lsrs	r3, r1, #8
 8001968:	b2d3      	uxtb	r3, r2
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	b2db      	uxtb	r3, r3
 8001970:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001972:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	0ac2      	lsrs	r2, r0, #11
 8001980:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001984:	0acb      	lsrs	r3, r1, #11
 8001986:	b2d3      	uxtb	r3, r2
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	b2db      	uxtb	r3, r3
 800198e:	723b      	strb	r3, [r7, #8]
    return ans;
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	f107 0208 	add.w	r2, r7, #8
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4611      	mov	r1, r2
 800199c:	8019      	strh	r1, [r3, #0]
 800199e:	3302      	adds	r3, #2
 80019a0:	0c12      	lsrs	r2, r2, #16
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	7b3a      	ldrb	r2, [r7, #12]
 80019a8:	f362 0307 	bfi	r3, r2, #0, #8
 80019ac:	7b7a      	ldrb	r2, [r7, #13]
 80019ae:	f362 230f 	bfi	r3, r2, #8, #8
 80019b2:	7bba      	ldrb	r2, [r7, #14]
 80019b4:	f362 4317 	bfi	r3, r2, #16, #8
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	e9c7 0100 	strd	r0, r1, [r7]
 80019ce:	783b      	ldrb	r3, [r7, #0]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <MX_CAN1_Init+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a02:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001a06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a34:	f002 fbe4 	bl	8004200 <HAL_CAN_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a3e:	f001 fdf2 	bl	8003626 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20002e44 	.word	0x20002e44
 8001a4c:	40006400 	.word	0x40006400

08001a50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a23      	ldr	r2, [pc, #140]	; (8001afc <HAL_CAN_MspInit+0xac>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d13f      	bne.n	8001af2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4811      	ldr	r0, [pc, #68]	; (8001b04 <HAL_CAN_MspInit+0xb4>)
 8001abe:	f003 fef3 	bl	80058a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	2013      	movs	r0, #19
 8001ac8:	f003 faae 	bl	8005028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001acc:	2013      	movs	r0, #19
 8001ace:	f003 fac7 	bl	8005060 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	2014      	movs	r0, #20
 8001ad8:	f003 faa6 	bl	8005028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001adc:	2014      	movs	r0, #20
 8001ade:	f003 fabf 	bl	8005060 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	2015      	movs	r0, #21
 8001ae8:	f003 fa9e 	bl	8005028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001aec:	2015      	movs	r0, #21
 8001aee:	f003 fab7 	bl	8005060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40006400 	.word	0x40006400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020c00 	.word	0x40020c00

08001b08 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001b14:	f00d fa90 	bl	800f038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b18:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <pvPortMallocMicroROS+0x180>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001b20:	f000 f98a 	bl	8001e38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <pvPortMallocMicroROS+0x184>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 8092 	bne.w	8001c56 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01f      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001b38:	2208      	movs	r2, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f023 0307 	bic.w	r3, r3, #7
 8001b50:	3308      	adds	r3, #8
 8001b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00c      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b62:	b672      	cpsid	i
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	b662      	cpsie	i
 8001b72:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b74:	bf00      	nop
 8001b76:	e7fe      	b.n	8001b76 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06b      	beq.n	8001c56 <pvPortMallocMicroROS+0x14e>
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d866      	bhi.n	8001c56 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001b88:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <pvPortMallocMicroROS+0x18c>)
 8001b8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <pvPortMallocMicroROS+0x18c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b92:	e004      	b.n	8001b9e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d903      	bls.n	8001bb0 <pvPortMallocMicroROS+0xa8>
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f1      	bne.n	8001b94 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <pvPortMallocMicroROS+0x180>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d04d      	beq.n	8001c56 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	4413      	add	r3, r2
 8001bc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d921      	bls.n	8001c20 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	b672      	cpsid	i
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	b662      	cpsie	i
 8001c02:	613b      	str	r3, [r7, #16]
}
 8001c04:	bf00      	nop
 8001c06:	e7fe      	b.n	8001c06 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c1a:	69b8      	ldr	r0, [r7, #24]
 8001c1c:	f000 f96e 	bl	8001efc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <pvPortMallocMicroROS+0x190>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d203      	bcs.n	8001c42 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <pvPortMallocMicroROS+0x190>)
 8001c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <pvPortMallocMicroROS+0x184>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c56:	f00d f9fd 	bl	800f054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	b672      	cpsid	i
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	b662      	cpsie	i
 8001c78:	60fb      	str	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	e7fe      	b.n	8001c7c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20006a74 	.word	0x20006a74
 8001c8c:	20006a80 	.word	0x20006a80
 8001c90:	20006a78 	.word	0x20006a78
 8001c94:	20006a6c 	.word	0x20006a6c
 8001c98:	20006a7c 	.word	0x20006a7c

08001c9c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04c      	beq.n	8001d48 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	b672      	cpsid	i
 8001cd0:	f383 8811 	msr	BASEPRI, r3
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	f3bf 8f4f 	dsb	sy
 8001cdc:	b662      	cpsie	i
 8001cde:	60fb      	str	r3, [r7, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	e7fe      	b.n	8001ce2 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	b672      	cpsid	i
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	b662      	cpsie	i
 8001d00:	60bb      	str	r3, [r7, #8]
}
 8001d02:	bf00      	nop
 8001d04:	e7fe      	b.n	8001d04 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d019      	beq.n	8001d48 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d115      	bne.n	8001d48 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d2c:	f00d f984 	bl	800f038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <vPortFreeMicroROS+0xb8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <vPortFreeMicroROS+0xb8>)
 8001d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d3e:	6938      	ldr	r0, [r7, #16]
 8001d40:	f000 f8dc 	bl	8001efc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d44:	f00d f986 	bl	800f054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20006a80 	.word	0x20006a80
 8001d54:	20006a78 	.word	0x20006a78

08001d58 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d64:	2308      	movs	r3, #8
 8001d66:	425b      	negs	r3, r3
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <getBlockSize+0x38>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

	return count;
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20006a80 	.word	0x20006a80

08001d94 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d9e:	f00d f94b 	bl	800f038 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f7ff feb0 	bl	8001b08 <pvPortMallocMicroROS>
 8001da8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <pvPortReallocMicroROS+0x4c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d014      	beq.n	8001de0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffce 	bl	8001d58 <getBlockSize>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d201      	bcs.n	8001dd0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	f01f f8a6 	bl	8020f26 <memcpy>

		vPortFreeMicroROS(pv);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff5e 	bl	8001c9c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001de0:	f00d f938 	bl	800f054 <xTaskResumeAll>

	return newmem;
 8001de4:	68bb      	ldr	r3, [r7, #8]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001df8:	f00d f91e 	bl	800f038 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff fe7e 	bl	8001b08 <pvPortMallocMicroROS>
 8001e0c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001e12:	e004      	b.n	8001e1e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	613a      	str	r2, [r7, #16]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	617a      	str	r2, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f5      	bne.n	8001e14 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001e28:	f00d f914 	bl	800f054 <xTaskResumeAll>
  	return mem;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001e42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <prvHeapInit+0xac>)
 8001e46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3307      	adds	r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0307 	bic.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <prvHeapInit+0xac>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <prvHeapInit+0xb0>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <prvHeapInit+0xb0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e84:	2208      	movs	r2, #8
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <prvHeapInit+0xb4>)
 8001e98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <prvHeapInit+0xb4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <prvHeapInit+0xb4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <prvHeapInit+0xb4>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <prvHeapInit+0xb8>)
 8001ec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <prvHeapInit+0xbc>)
 8001ece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <prvHeapInit+0xc0>)
 8001ed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20002e6c 	.word	0x20002e6c
 8001ee8:	20006a6c 	.word	0x20006a6c
 8001eec:	20006a74 	.word	0x20006a74
 8001ef0:	20006a7c 	.word	0x20006a7c
 8001ef4:	20006a78 	.word	0x20006a78
 8001ef8:	20006a80 	.word	0x20006a80

08001efc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <prvInsertBlockIntoFreeList+0xac>)
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e002      	b.n	8001f10 <prvInsertBlockIntoFreeList+0x14>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d8f7      	bhi.n	8001f0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d108      	bne.n	8001f3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	441a      	add	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d118      	bne.n	8001f84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <prvInsertBlockIntoFreeList+0xb0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d00d      	beq.n	8001f7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e008      	b.n	8001f8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <prvInsertBlockIntoFreeList+0xb0>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e003      	b.n	8001f8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d002      	beq.n	8001f9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20006a6c 	.word	0x20006a6c
 8001fac:	20006a74 	.word	0x20006a74

08001fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	200c      	movs	r0, #12
 8001fd4:	f003 f828 	bl	8005028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fd8:	200c      	movs	r0, #12
 8001fda:	f003 f841 	bl	8005060 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	200e      	movs	r0, #14
 8001fe4:	f003 f820 	bl	8005028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001fe8:	200e      	movs	r0, #14
 8001fea:	f003 f839 	bl	8005060 <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800200a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800200c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <cubemx_transport_open+0x28>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f006 ffc0 	bl	8008f98 <HAL_UART_Receive_DMA>
    return true;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20006a84 	.word	0x20006a84

08002028 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002036:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f006 fff1 	bl	8009020 <HAL_UART_DMAStop>
    return true;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800205c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002062:	2b20      	cmp	r3, #32
 8002064:	d11a      	bne.n	800209c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f006 ff16 	bl	8008ea0 <HAL_UART_Transmit_DMA>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002078:	e002      	b.n	8002080 <cubemx_transport_write+0x38>
            osDelay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f00b ff72 	bl	800df64 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <cubemx_transport_write+0x46>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800208a:	2b20      	cmp	r3, #32
 800208c:	d1f5      	bne.n	800207a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <cubemx_transport_write+0x50>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	e002      	b.n	800209e <cubemx_transport_write+0x56>
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800209c:	2300      	movs	r3, #0
    }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020bc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c2:	b672      	cpsid	i
}
 80020c4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <cubemx_transport_read+0x9c>)
 80020d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020d6:	b662      	cpsie	i
}
 80020d8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f00b ff3f 	bl	800df64 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <cubemx_transport_read+0xa0>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <cubemx_transport_read+0x9c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d103      	bne.n	80020fa <cubemx_transport_read+0x52>
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbe3      	blt.n	80020c2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80020fe:	e011      	b.n	8002124 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <cubemx_transport_read+0xa0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	440b      	add	r3, r1
 800210a:	4910      	ldr	r1, [pc, #64]	; (800214c <cubemx_transport_read+0xa4>)
 800210c:	5c8a      	ldrb	r2, [r1, r2]
 800210e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <cubemx_transport_read+0xa0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <cubemx_transport_read+0xa0>)
 800211c:	6013      	str	r3, [r2, #0]
        wrote++;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3301      	adds	r3, #1
 8002122:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <cubemx_transport_read+0xa0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <cubemx_transport_read+0x9c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d003      	beq.n	8002138 <cubemx_transport_read+0x90>
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3e3      	bcc.n	8002100 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002138:	69bb      	ldr	r3, [r7, #24]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20007288 	.word	0x20007288
 8002148:	20007284 	.word	0x20007284
 800214c:	20006a84 	.word	0x20006a84

08002150 <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002158:	f7fe fd4e 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800216c:	f7fe fd4a 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002180:	f7fe fd3a 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8002194:	f7fe fd36 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80021a8:	f7fe fd26 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80021bc:	f7fe fd22 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fd1c 	bl	8000c10 <WhenCANRxFifo0MsgPending>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20007334 	.word	0x20007334

080021e4 <canSetting>:
//can通信の設定
void canSetting(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 80021e8:	480f      	ldr	r0, [pc, #60]	; (8002228 <canSetting+0x44>)
 80021ea:	f01e fb23 	bl	8020834 <iprintf>
	osDelay(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f00b feb8 	bl	800df64 <osDelay>

	CAN_SystemInit(&hcan1);
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <canSetting+0x48>)
 80021f6:	f7fe fe5b 	bl	8000eb0 <CAN_SystemInit>

//	num_of_devices.mcmd3 = 0;
	num_of_devices.mcmd3 = 3;
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <canSetting+0x4c>)
 80021fc:	2203      	movs	r2, #3
 80021fe:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <canSetting+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 1;
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <canSetting+0x4c>)
 8002208:	2201      	movs	r2, #1
 800220a:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 2;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <canSetting+0x4c>)
 800220e:	2202      	movs	r2, #2
 8002210:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <canSetting+0x50>)
 8002214:	f01e fb0e 	bl	8020834 <iprintf>
	osDelay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f00b fea3 	bl	800df64 <osDelay>
	CAN_WaitConnect(&num_of_devices);
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <canSetting+0x4c>)
 8002220:	f7ff f8ee 	bl	8001400 <CAN_WaitConnect>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	080242d0 	.word	0x080242d0
 800222c:	20002e44 	.word	0x20002e44
 8002230:	20007334 	.word	0x20007334
 8002234:	080242f8 	.word	0x080242f8

08002238 <mcmdMoter1Setting>:

//モータ1のmcmd設定
void mcmdMoter1Setting(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	    mcmd4M1_struct.device.node_type = NODE_MCMD3;
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800223e:	2203      	movs	r2, #3
 8002240:	701a      	strb	r2, [r3, #0]
	    mcmd4M1_struct.device.node_id = 3;
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002244:	2203      	movs	r2, #3
 8002246:	705a      	strb	r2, [r3, #1]
	    mcmd4M1_struct.device.device_num = 0;
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800224a:	2200      	movs	r2, #0
 800224c:	709a      	strb	r2, [r3, #2]

	    mcmd4M1_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002250:	2202      	movs	r2, #2
 8002252:	751a      	strb	r2, [r3, #20]
	    mcmd4M1_struct.ctrl_param.PID_param.kp = 0.055f;
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002256:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002258:	619a      	str	r2, [r3, #24]
	    mcmd4M1_struct.ctrl_param.PID_param.ki = 0.015f;
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800225c:	4a23      	ldr	r2, [pc, #140]	; (80022ec <mcmdMoter1Setting+0xb4>)
 800225e:	61da      	str	r2, [r3, #28]
	    mcmd4M1_struct.ctrl_param.PID_param.kd = 0.02f;
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <mcmdMoter1Setting+0xb8>)
 8002264:	621a      	str	r2, [r3, #32]
	    mcmd4M1_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M1_struct.ctrl_param.accel_limit_size = 2.0f;
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002274:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M1_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M1_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M1_struct.enc_dir = MCMD_DIR_FW;
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002288:	2200      	movs	r2, #0
 800228a:	711a      	strb	r2, [r3, #4]
	    mcmd4M1_struct.rot_dir = MCMD_DIR_FW;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	715a      	strb	r2, [r3, #5]
	    mcmd4M1_struct.quant_per_unit = 1.0/103500.0f;
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002294:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <mcmdMoter1Setting+0xbc>)
 8002296:	611a      	str	r2, [r3, #16]

	    mcmd4M1_struct.limit_sw_type = LIMIT_SW_NO;
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800229a:	2201      	movs	r2, #1
 800229c:	719a      	strb	r2, [r3, #6]
	    mcmd4M1_struct.calib = CALIBRATION_DISABLE;
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	71da      	strb	r2, [r3, #7]
	    mcmd4M1_struct.calib_duty = -0.2f;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <mcmdMoter1Setting+0xc0>)
 80022a8:	609a      	str	r2, [r3, #8]
	    mcmd4M1_struct.offset = 0.0f;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
	    mcmd4M1_struct.fb_type = MCMD_FB_POS;
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M1_struct);
 80022b8:	480a      	ldr	r0, [pc, #40]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022ba:	f7ff f9bb 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80022be:	200a      	movs	r0, #10
 80022c0:	f00b fe50 	bl	800df64 <osDelay>
		 MCMD_Calib(&mcmd4M1_struct);
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022c6:	f7ff fa05 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80022ca:	2032      	movs	r0, #50	; 0x32
 80022cc:	f00b fe4a 	bl	800df64 <osDelay>
		 MCMD_SetTarget(&mcmd4M1_struct, 0.0f);
 80022d0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80022fc <mcmdMoter1Setting+0xc4>
 80022d4:	4803      	ldr	r0, [pc, #12]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022d6:	f7ff fa29 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M1_struct);
 80022da:	4802      	ldr	r0, [pc, #8]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022dc:	f7ff fa10 	bl	8001700 <MCMD_Control_Enable>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000733c 	.word	0x2000733c
 80022e8:	3d6147ae 	.word	0x3d6147ae
 80022ec:	3c75c28f 	.word	0x3c75c28f
 80022f0:	3ca3d70a 	.word	0x3ca3d70a
 80022f4:	37221945 	.word	0x37221945
 80022f8:	be4ccccd 	.word	0xbe4ccccd
 80022fc:	00000000 	.word	0x00000000

08002300 <mcmdMoter2Setting>:

//モータ2のmcmd設定
void mcmdMoter2Setting(){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	    mcmd4M2_struct.device.node_type = NODE_MCMD3;
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002306:	2203      	movs	r2, #3
 8002308:	701a      	strb	r2, [r3, #0]
	    mcmd4M2_struct.device.node_id = 3;
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <mcmdMoter2Setting+0xac>)
 800230c:	2203      	movs	r2, #3
 800230e:	705a      	strb	r2, [r3, #1]
	    mcmd4M2_struct.device.device_num = 1;
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002312:	2201      	movs	r2, #1
 8002314:	709a      	strb	r2, [r3, #2]

	    mcmd4M2_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 8002316:	4b25      	ldr	r3, [pc, #148]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002318:	2202      	movs	r2, #2
 800231a:	751a      	strb	r2, [r3, #20]
	    mcmd4M2_struct.ctrl_param.PID_param.kp = 0.055f;
 800231c:	4b23      	ldr	r3, [pc, #140]	; (80023ac <mcmdMoter2Setting+0xac>)
 800231e:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002320:	619a      	str	r2, [r3, #24]
	    mcmd4M2_struct.ctrl_param.PID_param.ki = 0.015f;
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002324:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <mcmdMoter2Setting+0xb4>)
 8002326:	61da      	str	r2, [r3, #28]
	    mcmd4M2_struct.ctrl_param.PID_param.kd = 0.02f;
 8002328:	4b20      	ldr	r3, [pc, #128]	; (80023ac <mcmdMoter2Setting+0xac>)
 800232a:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <mcmdMoter2Setting+0xb8>)
 800232c:	621a      	str	r2, [r3, #32]
	    mcmd4M2_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M2_struct.ctrl_param.accel_limit_size = 2.0f;
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M2_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M2_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M2_struct.enc_dir = MCMD_DIR_FW;
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002350:	2200      	movs	r2, #0
 8002352:	711a      	strb	r2, [r3, #4]
	    mcmd4M2_struct.rot_dir = MCMD_DIR_FW;
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002356:	2200      	movs	r2, #0
 8002358:	715a      	strb	r2, [r3, #5]
	    mcmd4M2_struct.quant_per_unit = 1.0/103500.0f;
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <mcmdMoter2Setting+0xac>)
 800235c:	4a17      	ldr	r2, [pc, #92]	; (80023bc <mcmdMoter2Setting+0xbc>)
 800235e:	611a      	str	r2, [r3, #16]

	    mcmd4M2_struct.limit_sw_type = LIMIT_SW_NO;
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002362:	2201      	movs	r2, #1
 8002364:	719a      	strb	r2, [r3, #6]
	    mcmd4M2_struct.calib = CALIBRATION_DISABLE;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002368:	2201      	movs	r2, #1
 800236a:	71da      	strb	r2, [r3, #7]
	    mcmd4M2_struct.calib_duty = -0.2f;
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <mcmdMoter2Setting+0xac>)
 800236e:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <mcmdMoter2Setting+0xc0>)
 8002370:	609a      	str	r2, [r3, #8]
	    mcmd4M2_struct.offset = 0.0f;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
	    mcmd4M2_struct.fb_type = MCMD_FB_POS;
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <mcmdMoter2Setting+0xac>)
 800237c:	2200      	movs	r2, #0
 800237e:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M2_struct);
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002382:	f7ff f957 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002386:	200a      	movs	r0, #10
 8002388:	f00b fdec 	bl	800df64 <osDelay>
		 MCMD_Calib(&mcmd4M2_struct);
 800238c:	4807      	ldr	r0, [pc, #28]	; (80023ac <mcmdMoter2Setting+0xac>)
 800238e:	f7ff f9a1 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002392:	2032      	movs	r0, #50	; 0x32
 8002394:	f00b fde6 	bl	800df64 <osDelay>
		 MCMD_SetTarget(&mcmd4M2_struct, 0.00f);
 8002398:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80023c4 <mcmdMoter2Setting+0xc4>
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <mcmdMoter2Setting+0xac>)
 800239e:	f7ff f9c5 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M2_struct);
 80023a2:	4802      	ldr	r0, [pc, #8]	; (80023ac <mcmdMoter2Setting+0xac>)
 80023a4:	f7ff f9ac 	bl	8001700 <MCMD_Control_Enable>
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2000737c 	.word	0x2000737c
 80023b0:	3d6147ae 	.word	0x3d6147ae
 80023b4:	3c75c28f 	.word	0x3c75c28f
 80023b8:	3ca3d70a 	.word	0x3ca3d70a
 80023bc:	37221945 	.word	0x37221945
 80023c0:	be4ccccd 	.word	0xbe4ccccd
 80023c4:	00000000 	.word	0x00000000

080023c8 <mcmdMoter3Setting>:

void mcmdMoter3Setting(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	    mcmd4M3_struct.device.node_type = NODE_MCMD3;
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023ce:	2203      	movs	r2, #3
 80023d0:	701a      	strb	r2, [r3, #0]
	    mcmd4M3_struct.device.node_id = 2;
 80023d2:	4b28      	ldr	r3, [pc, #160]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023d4:	2202      	movs	r2, #2
 80023d6:	705a      	strb	r2, [r3, #1]
	    mcmd4M3_struct.device.device_num = 0;
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023da:	2200      	movs	r2, #0
 80023dc:	709a      	strb	r2, [r3, #2]

	    mcmd4M3_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023e0:	2202      	movs	r2, #2
 80023e2:	751a      	strb	r2, [r3, #20]
	    mcmd4M3_struct.ctrl_param.PID_param.kp = 0.055f;
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023e8:	619a      	str	r2, [r3, #24]
	    mcmd4M3_struct.ctrl_param.PID_param.ki = 0.015f;
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <mcmdMoter3Setting+0xb4>)
 80023ee:	61da      	str	r2, [r3, #28]
	    mcmd4M3_struct.ctrl_param.PID_param.kd = 0.02f;
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <mcmdMoter3Setting+0xb8>)
 80023f4:	621a      	str	r2, [r3, #32]
	    mcmd4M3_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M3_struct.ctrl_param.accel_limit_size = 2.0f;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M3_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M3_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M3_struct.enc_dir = MCMD_DIR_FW;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002418:	2200      	movs	r2, #0
 800241a:	711a      	strb	r2, [r3, #4]
	    mcmd4M3_struct.rot_dir = MCMD_DIR_FW;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <mcmdMoter3Setting+0xac>)
 800241e:	2200      	movs	r2, #0
 8002420:	715a      	strb	r2, [r3, #5]
	    mcmd4M3_struct.quant_per_unit = 1.0/103500.0f;
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <mcmdMoter3Setting+0xbc>)
 8002426:	611a      	str	r2, [r3, #16]

	    mcmd4M3_struct.limit_sw_type = LIMIT_SW_NO;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <mcmdMoter3Setting+0xac>)
 800242a:	2201      	movs	r2, #1
 800242c:	719a      	strb	r2, [r3, #6]
	    mcmd4M3_struct.calib = CALIBRATION_DISABLE;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002430:	2201      	movs	r2, #1
 8002432:	71da      	strb	r2, [r3, #7]
	    mcmd4M3_struct.calib_duty = -0.2f;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002436:	4a14      	ldr	r2, [pc, #80]	; (8002488 <mcmdMoter3Setting+0xc0>)
 8002438:	609a      	str	r2, [r3, #8]
	    mcmd4M3_struct.offset = 0.0f;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <mcmdMoter3Setting+0xac>)
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
	    mcmd4M3_struct.fb_type = MCMD_FB_POS;
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002444:	2200      	movs	r2, #0
 8002446:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M3_struct);
 8002448:	480a      	ldr	r0, [pc, #40]	; (8002474 <mcmdMoter3Setting+0xac>)
 800244a:	f7ff f8f3 	bl	8001634 <MCMD_init>
		 osDelay(10);
 800244e:	200a      	movs	r0, #10
 8002450:	f00b fd88 	bl	800df64 <osDelay>
		 MCMD_Calib(&mcmd4M3_struct);
 8002454:	4807      	ldr	r0, [pc, #28]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002456:	f7ff f93d 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800245a:	2032      	movs	r0, #50	; 0x32
 800245c:	f00b fd82 	bl	800df64 <osDelay>
		 MCMD_SetTarget(&mcmd4M3_struct, 0.00f);
 8002460:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800248c <mcmdMoter3Setting+0xc4>
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002466:	f7ff f961 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M3_struct);
 800246a:	4802      	ldr	r0, [pc, #8]	; (8002474 <mcmdMoter3Setting+0xac>)
 800246c:	f7ff f948 	bl	8001700 <MCMD_Control_Enable>
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200073bc 	.word	0x200073bc
 8002478:	3d6147ae 	.word	0x3d6147ae
 800247c:	3c75c28f 	.word	0x3c75c28f
 8002480:	3ca3d70a 	.word	0x3ca3d70a
 8002484:	37221945 	.word	0x37221945
 8002488:	be4ccccd 	.word	0xbe4ccccd
 800248c:	00000000 	.word	0x00000000

08002490 <mcmdMoter4Setting>:

void mcmdMoter4Setting(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	    mcmd4M4_struct.device.node_type = NODE_MCMD3;
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <mcmdMoter4Setting+0xac>)
 8002496:	2203      	movs	r2, #3
 8002498:	701a      	strb	r2, [r3, #0]
	    mcmd4M4_struct.device.node_id =2;
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <mcmdMoter4Setting+0xac>)
 800249c:	2202      	movs	r2, #2
 800249e:	705a      	strb	r2, [r3, #1]
	    mcmd4M4_struct.device.device_num = 1;
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <mcmdMoter4Setting+0xac>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	709a      	strb	r2, [r3, #2]

	    mcmd4M4_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <mcmdMoter4Setting+0xac>)
 80024a8:	2202      	movs	r2, #2
 80024aa:	751a      	strb	r2, [r3, #20]
	    mcmd4M4_struct.ctrl_param.PID_param.kp = 0.055f;
 80024ac:	4b23      	ldr	r3, [pc, #140]	; (800253c <mcmdMoter4Setting+0xac>)
 80024ae:	4a24      	ldr	r2, [pc, #144]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024b0:	619a      	str	r2, [r3, #24]
	    mcmd4M4_struct.ctrl_param.PID_param.ki = 0.015f;
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <mcmdMoter4Setting+0xac>)
 80024b4:	4a23      	ldr	r2, [pc, #140]	; (8002544 <mcmdMoter4Setting+0xb4>)
 80024b6:	61da      	str	r2, [r3, #28]
	    mcmd4M4_struct.ctrl_param.PID_param.kd = 0.02f;
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <mcmdMoter4Setting+0xac>)
 80024ba:	4a23      	ldr	r2, [pc, #140]	; (8002548 <mcmdMoter4Setting+0xb8>)
 80024bc:	621a      	str	r2, [r3, #32]
	    mcmd4M4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <mcmdMoter4Setting+0xac>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M4_struct.ctrl_param.accel_limit_size = 2.0f;
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <mcmdMoter4Setting+0xac>)
 80024c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <mcmdMoter4Setting+0xac>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <mcmdMoter4Setting+0xac>)
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M4_struct.enc_dir = MCMD_DIR_FW;
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <mcmdMoter4Setting+0xac>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	711a      	strb	r2, [r3, #4]
	    mcmd4M4_struct.rot_dir = MCMD_DIR_FW;
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <mcmdMoter4Setting+0xac>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	715a      	strb	r2, [r3, #5]
	    mcmd4M4_struct.quant_per_unit = 1.0/26850.0f;
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <mcmdMoter4Setting+0xac>)
 80024ec:	4a17      	ldr	r2, [pc, #92]	; (800254c <mcmdMoter4Setting+0xbc>)
 80024ee:	611a      	str	r2, [r3, #16]

	    mcmd4M4_struct.limit_sw_type = LIMIT_SW_NO;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <mcmdMoter4Setting+0xac>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	719a      	strb	r2, [r3, #6]
	    mcmd4M4_struct.calib = CALIBRATION_DISABLE;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <mcmdMoter4Setting+0xac>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	71da      	strb	r2, [r3, #7]
	    mcmd4M4_struct.calib_duty = -0.2f;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <mcmdMoter4Setting+0xac>)
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <mcmdMoter4Setting+0xc0>)
 8002500:	609a      	str	r2, [r3, #8]
	    mcmd4M4_struct.offset = 0.0f;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <mcmdMoter4Setting+0xac>)
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
	    mcmd4M4_struct.fb_type = MCMD_FB_POS;
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <mcmdMoter4Setting+0xac>)
 800250c:	2200      	movs	r2, #0
 800250e:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M4_struct);
 8002510:	480a      	ldr	r0, [pc, #40]	; (800253c <mcmdMoter4Setting+0xac>)
 8002512:	f7ff f88f 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002516:	200a      	movs	r0, #10
 8002518:	f00b fd24 	bl	800df64 <osDelay>
		 MCMD_Calib(&mcmd4M4_struct);
 800251c:	4807      	ldr	r0, [pc, #28]	; (800253c <mcmdMoter4Setting+0xac>)
 800251e:	f7ff f8d9 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002522:	2032      	movs	r0, #50	; 0x32
 8002524:	f00b fd1e 	bl	800df64 <osDelay>
		 MCMD_SetTarget(&mcmd4M4_struct, 0.00f);
 8002528:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002554 <mcmdMoter4Setting+0xc4>
 800252c:	4803      	ldr	r0, [pc, #12]	; (800253c <mcmdMoter4Setting+0xac>)
 800252e:	f7ff f8fd 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M4_struct);
 8002532:	4802      	ldr	r0, [pc, #8]	; (800253c <mcmdMoter4Setting+0xac>)
 8002534:	f7ff f8e4 	bl	8001700 <MCMD_Control_Enable>
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200073fc 	.word	0x200073fc
 8002540:	3d6147ae 	.word	0x3d6147ae
 8002544:	3c75c28f 	.word	0x3c75c28f
 8002548:	3ca3d70a 	.word	0x3ca3d70a
 800254c:	381c3662 	.word	0x381c3662
 8002550:	be4ccccd 	.word	0xbe4ccccd
 8002554:	00000000 	.word	0x00000000

08002558 <mcmdMoter5Setting>:

void mcmdMoter5Setting(){
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	    mcmd4M5_struct.device.node_type = NODE_MCMD3;
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <mcmdMoter5Setting+0xb0>)
 800255e:	2203      	movs	r2, #3
 8002560:	701a      	strb	r2, [r3, #0]
	    mcmd4M5_struct.device.node_id =5;
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002564:	2205      	movs	r2, #5
 8002566:	705a      	strb	r2, [r3, #1]
	    mcmd4M5_struct.device.device_num = 0;
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <mcmdMoter5Setting+0xb0>)
 800256a:	2200      	movs	r2, #0
 800256c:	709a      	strb	r2, [r3, #2]

	    mcmd4M5_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002570:	2200      	movs	r2, #0
 8002572:	751a      	strb	r2, [r3, #20]
	    mcmd4M5_struct.ctrl_param.PID_param.kp = 4.5f;
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <mcmdMoter5Setting+0xb4>)
 8002578:	619a      	str	r2, [r3, #24]
	    mcmd4M5_struct.ctrl_param.PID_param.ki = 1.0f;
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <mcmdMoter5Setting+0xb0>)
 800257c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002580:	61da      	str	r2, [r3, #28]
	    mcmd4M5_struct.ctrl_param.PID_param.kd = 0.01f;
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002584:	4a22      	ldr	r2, [pc, #136]	; (8002610 <mcmdMoter5Setting+0xb8>)
 8002586:	621a      	str	r2, [r3, #32]
	    mcmd4M5_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <mcmdMoter5Setting+0xb0>)
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M5_struct.ctrl_param.accel_limit_size = 2.0f;
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002596:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M5_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <mcmdMoter5Setting+0xb0>)
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M5_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M5_struct.enc_dir = MCMD_DIR_BC;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	711a      	strb	r2, [r3, #4]
	    mcmd4M5_struct.rot_dir = MCMD_DIR_BC;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	715a      	strb	r2, [r3, #5]
	    mcmd4M5_struct.quant_per_unit = 1.0/8230.0f;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025b6:	4a17      	ldr	r2, [pc, #92]	; (8002614 <mcmdMoter5Setting+0xbc>)
 80025b8:	611a      	str	r2, [r3, #16]

	    mcmd4M5_struct.limit_sw_type = LIMIT_SW_NO;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	719a      	strb	r2, [r3, #6]
	    mcmd4M5_struct.calib = CALIBRATION_DISABLE;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	71da      	strb	r2, [r3, #7]
	    mcmd4M5_struct.calib_duty = -0.2f;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025c8:	4a13      	ldr	r2, [pc, #76]	; (8002618 <mcmdMoter5Setting+0xc0>)
 80025ca:	609a      	str	r2, [r3, #8]
	    mcmd4M5_struct.offset = 0.0f;
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]
	    mcmd4M5_struct.fb_type = MCMD_FB_POS;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M5_struct);
 80025da:	480b      	ldr	r0, [pc, #44]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025dc:	f7ff f82a 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80025e0:	200a      	movs	r0, #10
 80025e2:	f00b fcbf 	bl	800df64 <osDelay>
		 MCMD_Calib(&mcmd4M5_struct);
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025e8:	f7ff f874 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80025ec:	2032      	movs	r0, #50	; 0x32
 80025ee:	f00b fcb9 	bl	800df64 <osDelay>
		 MCMD_SetTarget(&mcmd4M5_struct, 0.00f);
 80025f2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800261c <mcmdMoter5Setting+0xc4>
 80025f6:	4804      	ldr	r0, [pc, #16]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025f8:	f7ff f898 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M5_struct);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025fe:	f7ff f87f 	bl	8001700 <MCMD_Control_Enable>
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000743c 	.word	0x2000743c
 800260c:	40900000 	.word	0x40900000
 8002610:	3c23d70a 	.word	0x3c23d70a
 8002614:	38fed167 	.word	0x38fed167
 8002618:	be4ccccd 	.word	0xbe4ccccd
 800261c:	00000000 	.word	0x00000000

08002620 <mcmdMoter6Setting>:

void mcmdMoter6Setting(){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	    mcmd4M6_struct.device.node_type = NODE_MCMD3;
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002626:	2203      	movs	r2, #3
 8002628:	701a      	strb	r2, [r3, #0]
	    mcmd4M6_struct.device.node_id =5;
 800262a:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800262c:	2205      	movs	r2, #5
 800262e:	705a      	strb	r2, [r3, #1]
	    mcmd4M6_struct.device.device_num = 1;
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002632:	2201      	movs	r2, #1
 8002634:	709a      	strb	r2, [r3, #2]

	    mcmd4M6_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002638:	2200      	movs	r2, #0
 800263a:	751a      	strb	r2, [r3, #20]
	    mcmd4M6_struct.ctrl_param.PID_param.kp = 4.5f;
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <mcmdMoter6Setting+0xb4>)
 8002640:	619a      	str	r2, [r3, #24]
	    mcmd4M6_struct.ctrl_param.PID_param.ki = 1.0f;
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002644:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002648:	61da      	str	r2, [r3, #28]
	    mcmd4M6_struct.ctrl_param.PID_param.kd = 0.01f;
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <mcmdMoter6Setting+0xb8>)
 800264e:	621a      	str	r2, [r3, #32]
	    mcmd4M6_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M6_struct.ctrl_param.accel_limit_size = 2.0f;
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800265a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265e:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M6_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M6_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M6_struct.enc_dir = MCMD_DIR_FW;
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002672:	2200      	movs	r2, #0
 8002674:	711a      	strb	r2, [r3, #4]
	    mcmd4M6_struct.rot_dir = MCMD_DIR_FW;
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002678:	2200      	movs	r2, #0
 800267a:	715a      	strb	r2, [r3, #5]
	    mcmd4M6_struct.quant_per_unit = 1.0/8230.0f;
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800267e:	4a17      	ldr	r2, [pc, #92]	; (80026dc <mcmdMoter6Setting+0xbc>)
 8002680:	611a      	str	r2, [r3, #16]

	    mcmd4M6_struct.limit_sw_type = LIMIT_SW_NO;
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002684:	2201      	movs	r2, #1
 8002686:	719a      	strb	r2, [r3, #6]
	    mcmd4M6_struct.calib = CALIBRATION_DISABLE;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800268a:	2201      	movs	r2, #1
 800268c:	71da      	strb	r2, [r3, #7]
	    mcmd4M6_struct.calib_duty = -0.2f;
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002690:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <mcmdMoter6Setting+0xc0>)
 8002692:	609a      	str	r2, [r3, #8]
	    mcmd4M6_struct.offset = 0.0f;
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
	    mcmd4M6_struct.fb_type = MCMD_FB_POS;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M6_struct);
 80026a2:	480b      	ldr	r0, [pc, #44]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 80026a4:	f7fe ffc6 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80026a8:	200a      	movs	r0, #10
 80026aa:	f00b fc5b 	bl	800df64 <osDelay>
		 MCMD_Calib(&mcmd4M6_struct);
 80026ae:	4808      	ldr	r0, [pc, #32]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 80026b0:	f7ff f810 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80026b4:	2032      	movs	r0, #50	; 0x32
 80026b6:	f00b fc55 	bl	800df64 <osDelay>
		 MCMD_SetTarget(&mcmd4M6_struct, 0.00f);
 80026ba:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80026e4 <mcmdMoter6Setting+0xc4>
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 80026c0:	f7ff f834 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M6_struct);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 80026c6:	f7ff f81b 	bl	8001700 <MCMD_Control_Enable>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000747c 	.word	0x2000747c
 80026d4:	40900000 	.word	0x40900000
 80026d8:	3c23d70a 	.word	0x3c23d70a
 80026dc:	38fed167 	.word	0x38fed167
 80026e0:	be4ccccd 	.word	0xbe4ccccd
 80026e4:	00000000 	.word	0x00000000

080026e8 <servo1Setting>:
		 MCMD_SetTarget(&mcmd4Mt_struct, 0.00f);
		 MCMD_Control_Enable(&mcmd4Mt_struct);
}

//サーボ基盤設定
void servo1Setting(){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	servo_device1.node_type = NODE_SERVO;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <servo1Setting+0x44>)
 80026ee:	2204      	movs	r2, #4
 80026f0:	701a      	strb	r2, [r3, #0]
	servo_device1.node_id = 0;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <servo1Setting+0x44>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	705a      	strb	r2, [r3, #1]
	servo_device1.device_num = 0;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <servo1Setting+0x44>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	709a      	strb	r2, [r3, #2]

	servo_param1.angle_range=270.0f;
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <servo1Setting+0x48>)
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <servo1Setting+0x4c>)
 8002702:	60da      	str	r2, [r3, #12]
	servo_param1.angle_offset=0.0f;
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <servo1Setting+0x48>)
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
	servo_param1.pulse_width_max=2.4f;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <servo1Setting+0x48>)
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <servo1Setting+0x50>)
 8002710:	605a      	str	r2, [r3, #4]
	servo_param1.pulse_width_min=0.5f;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <servo1Setting+0x48>)
 8002714:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002718:	601a      	str	r2, [r3, #0]
	servo_param1.pwm_frequency=50;
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <servo1Setting+0x48>)
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <servo1Setting+0x54>)
 800271e:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002720:	2032      	movs	r0, #50	; 0x32
 8002722:	f00b fc1f 	bl	800df64 <osDelay>
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200074d0 	.word	0x200074d0
 8002730:	200074bc 	.word	0x200074bc
 8002734:	43870000 	.word	0x43870000
 8002738:	4019999a 	.word	0x4019999a
 800273c:	42480000 	.word	0x42480000

08002740 <servo2Setting>:

void servo2Setting(){
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	servo_device2.node_type = NODE_SERVO;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <servo2Setting+0x44>)
 8002746:	2204      	movs	r2, #4
 8002748:	701a      	strb	r2, [r3, #0]
	servo_device2.node_id = 0;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <servo2Setting+0x44>)
 800274c:	2200      	movs	r2, #0
 800274e:	705a      	strb	r2, [r3, #1]
	servo_device2.device_num = 1;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <servo2Setting+0x44>)
 8002752:	2201      	movs	r2, #1
 8002754:	709a      	strb	r2, [r3, #2]

	servo_param2.angle_range=270.0f;
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <servo2Setting+0x48>)
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <servo2Setting+0x4c>)
 800275a:	60da      	str	r2, [r3, #12]
	servo_param2.angle_offset=0.0f;
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <servo2Setting+0x48>)
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
	servo_param2.pulse_width_max=2.4f;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <servo2Setting+0x48>)
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <servo2Setting+0x50>)
 8002768:	605a      	str	r2, [r3, #4]
	servo_param2.pulse_width_min=0.5f;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <servo2Setting+0x48>)
 800276c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002770:	601a      	str	r2, [r3, #0]
	servo_param2.pwm_frequency=50;
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <servo2Setting+0x48>)
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <servo2Setting+0x54>)
 8002776:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002778:	2032      	movs	r0, #50	; 0x32
 800277a:	f00b fbf3 	bl	800df64 <osDelay>
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200074e8 	.word	0x200074e8
 8002788:	200074d4 	.word	0x200074d4
 800278c:	43870000 	.word	0x43870000
 8002790:	4019999a 	.word	0x4019999a
 8002794:	42480000 	.word	0x42480000

08002798 <servo3Setting>:

void servo3Setting(){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	servo_device3.node_type = NODE_SERVO;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <servo3Setting+0x44>)
 800279e:	2204      	movs	r2, #4
 80027a0:	701a      	strb	r2, [r3, #0]
	servo_device3.node_id = 1;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <servo3Setting+0x44>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	705a      	strb	r2, [r3, #1]
	servo_device3.device_num = 0;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <servo3Setting+0x44>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	709a      	strb	r2, [r3, #2]

	servo_param3.angle_range=270.0f;
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <servo3Setting+0x48>)
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <servo3Setting+0x4c>)
 80027b2:	60da      	str	r2, [r3, #12]
	servo_param3.angle_offset=0.0f;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <servo3Setting+0x48>)
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
	servo_param3.pulse_width_max=2.4f;
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <servo3Setting+0x48>)
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <servo3Setting+0x50>)
 80027c0:	605a      	str	r2, [r3, #4]
	servo_param3.pulse_width_min=0.5f;
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <servo3Setting+0x48>)
 80027c4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80027c8:	601a      	str	r2, [r3, #0]
	servo_param3.pwm_frequency=50;
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <servo3Setting+0x48>)
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <servo3Setting+0x54>)
 80027ce:	609a      	str	r2, [r3, #8]

	osDelay(50);
 80027d0:	2032      	movs	r0, #50	; 0x32
 80027d2:	f00b fbc7 	bl	800df64 <osDelay>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20007500 	.word	0x20007500
 80027e0:	200074ec 	.word	0x200074ec
 80027e4:	43870000 	.word	0x43870000
 80027e8:	4019999a 	.word	0x4019999a
 80027ec:	42480000 	.word	0x42480000

080027f0 <servo4Setting>:
void servo4Setting(){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	servo_device4.node_type = NODE_SERVO;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <servo4Setting+0x44>)
 80027f6:	2204      	movs	r2, #4
 80027f8:	701a      	strb	r2, [r3, #0]
	servo_device4.node_id = 1;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <servo4Setting+0x44>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	705a      	strb	r2, [r3, #1]
	servo_device4.device_num = 1;
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <servo4Setting+0x44>)
 8002802:	2201      	movs	r2, #1
 8002804:	709a      	strb	r2, [r3, #2]

	servo_param4.angle_range=270.0f;
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <servo4Setting+0x48>)
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <servo4Setting+0x4c>)
 800280a:	60da      	str	r2, [r3, #12]
	servo_param4.angle_offset=0.0f;
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <servo4Setting+0x48>)
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
	servo_param4.pulse_width_max=2.4f;
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <servo4Setting+0x48>)
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <servo4Setting+0x50>)
 8002818:	605a      	str	r2, [r3, #4]
	servo_param4.pulse_width_min=0.5f;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <servo4Setting+0x48>)
 800281c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002820:	601a      	str	r2, [r3, #0]
	servo_param4.pwm_frequency=50;
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <servo4Setting+0x48>)
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <servo4Setting+0x54>)
 8002826:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002828:	2032      	movs	r0, #50	; 0x32
 800282a:	f00b fb9b 	bl	800df64 <osDelay>
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20007518 	.word	0x20007518
 8002838:	20007504 	.word	0x20007504
 800283c:	43870000 	.word	0x43870000
 8002840:	4019999a 	.word	0x4019999a
 8002844:	42480000 	.word	0x42480000

08002848 <servo5Setting>:
void servo5Setting(){
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	servo_device5.node_type = NODE_SERVO;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <servo5Setting+0x44>)
 800284e:	2204      	movs	r2, #4
 8002850:	701a      	strb	r2, [r3, #0]
	servo_device5.node_id = 0;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <servo5Setting+0x44>)
 8002854:	2200      	movs	r2, #0
 8002856:	705a      	strb	r2, [r3, #1]
	servo_device5.device_num = 2;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <servo5Setting+0x44>)
 800285a:	2202      	movs	r2, #2
 800285c:	709a      	strb	r2, [r3, #2]

	servo_param5.angle_range=270.0f;
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <servo5Setting+0x48>)
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <servo5Setting+0x4c>)
 8002862:	60da      	str	r2, [r3, #12]
	servo_param5.angle_offset=0.0f;
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <servo5Setting+0x48>)
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
	servo_param5.pulse_width_max=2.4f;
 800286c:	4b08      	ldr	r3, [pc, #32]	; (8002890 <servo5Setting+0x48>)
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <servo5Setting+0x50>)
 8002870:	605a      	str	r2, [r3, #4]
	servo_param5.pulse_width_min=0.5f;
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <servo5Setting+0x48>)
 8002874:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002878:	601a      	str	r2, [r3, #0]
	servo_param5.pwm_frequency=50;
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <servo5Setting+0x48>)
 800287c:	4a07      	ldr	r2, [pc, #28]	; (800289c <servo5Setting+0x54>)
 800287e:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002880:	2032      	movs	r0, #50	; 0x32
 8002882:	f00b fb6f 	bl	800df64 <osDelay>
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20007530 	.word	0x20007530
 8002890:	2000751c 	.word	0x2000751c
 8002894:	43870000 	.word	0x43870000
 8002898:	4019999a 	.word	0x4019999a
 800289c:	42480000 	.word	0x42480000

080028a0 <servo6Setting>:
void servo6Setting(){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	servo_device6.node_type = NODE_SERVO;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <servo6Setting+0x44>)
 80028a6:	2204      	movs	r2, #4
 80028a8:	701a      	strb	r2, [r3, #0]
	servo_device6.node_id = 1;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <servo6Setting+0x44>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	705a      	strb	r2, [r3, #1]
	servo_device6.device_num = 3;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <servo6Setting+0x44>)
 80028b2:	2203      	movs	r2, #3
 80028b4:	709a      	strb	r2, [r3, #2]

	servo_param6.angle_range=270.0f;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <servo6Setting+0x48>)
 80028b8:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <servo6Setting+0x4c>)
 80028ba:	60da      	str	r2, [r3, #12]
	servo_param6.angle_offset=0.0f;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <servo6Setting+0x48>)
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
	servo_param6.pulse_width_max=2.4f;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <servo6Setting+0x48>)
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <servo6Setting+0x50>)
 80028c8:	605a      	str	r2, [r3, #4]
	servo_param6.pulse_width_min=0.5f;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <servo6Setting+0x48>)
 80028cc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80028d0:	601a      	str	r2, [r3, #0]
	servo_param6.pwm_frequency=50;
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <servo6Setting+0x48>)
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <servo6Setting+0x54>)
 80028d6:	609a      	str	r2, [r3, #8]

	osDelay(50);
 80028d8:	2032      	movs	r0, #50	; 0x32
 80028da:	f00b fb43 	bl	800df64 <osDelay>
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20007548 	.word	0x20007548
 80028e8:	20007534 	.word	0x20007534
 80028ec:	43870000 	.word	0x43870000
 80028f0:	4019999a 	.word	0x4019999a
 80028f4:	42480000 	.word	0x42480000

080028f8 <airSetting>:

//エアシリ基盤設定
void airSetting(){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR;
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <airSetting+0x44>)
 8002900:	2205      	movs	r2, #5
 8002902:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <airSetting+0x44>)
 8002906:	2200      	movs	r2, #0
 8002908:	705a      	strb	r2, [r3, #1]

	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 800290a:	2300      	movs	r3, #0
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	e00c      	b.n	800292a <airSetting+0x32>
		air_device.device_num = i; //
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <airSetting+0x44>)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	7093      	strb	r3, [r2, #2]
		AirCylinder_Init(&air_device, AIR_OFF);
 8002916:	2100      	movs	r1, #0
 8002918:	4808      	ldr	r0, [pc, #32]	; (800293c <airSetting+0x44>)
 800291a:	f7fe ff7b 	bl	8001814 <AirCylinder_Init>
		HAL_Delay(10);  // このdelayは必要
 800291e:	200a      	movs	r0, #10
 8002920:	f001 fc4a 	bl	80041b8 <HAL_Delay>
	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	3301      	adds	r3, #1
 8002928:	71fb      	strb	r3, [r7, #7]
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b07      	cmp	r3, #7
 800292e:	d9ef      	bls.n	8002910 <airSetting+0x18>
	 }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000754c 	.word	0x2000754c

08002940 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002944:	4a10      	ldr	r2, [pc, #64]	; (8002988 <MX_FREERTOS_Init+0x48>)
 8002946:	2100      	movs	r1, #0
 8002948:	4810      	ldr	r0, [pc, #64]	; (800298c <MX_FREERTOS_Init+0x4c>)
 800294a:	f00b fa65 	bl	800de18 <osThreadNew>
 800294e:	4603      	mov	r3, r0
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <MX_FREERTOS_Init+0x50>)
 8002952:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 8002954:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <MX_FREERTOS_Init+0x54>)
 8002956:	2100      	movs	r1, #0
 8002958:	480f      	ldr	r0, [pc, #60]	; (8002998 <MX_FREERTOS_Init+0x58>)
 800295a:	f00b fa5d 	bl	800de18 <osThreadNew>
 800295e:	4603      	mov	r3, r0
 8002960:	4a0e      	ldr	r2, [pc, #56]	; (800299c <MX_FREERTOS_Init+0x5c>)
 8002962:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <MX_FREERTOS_Init+0x60>)
 8002966:	2100      	movs	r1, #0
 8002968:	480e      	ldr	r0, [pc, #56]	; (80029a4 <MX_FREERTOS_Init+0x64>)
 800296a:	f00b fa55 	bl	800de18 <osThreadNew>
 800296e:	4603      	mov	r3, r0
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <MX_FREERTOS_Init+0x68>)
 8002972:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <MX_FREERTOS_Init+0x6c>)
 8002976:	2100      	movs	r1, #0
 8002978:	480d      	ldr	r0, [pc, #52]	; (80029b0 <MX_FREERTOS_Init+0x70>)
 800297a:	f00b fa4d 	bl	800de18 <osThreadNew>
 800297e:	4603      	mov	r3, r0
 8002980:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <MX_FREERTOS_Init+0x74>)
 8002982:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	08024538 	.word	0x08024538
 800298c:	08002dc9 	.word	0x08002dc9
 8002990:	20007558 	.word	0x20007558
 8002994:	0802455c 	.word	0x0802455c
 8002998:	080032ed 	.word	0x080032ed
 800299c:	2000a498 	.word	0x2000a498
 80029a0:	08024580 	.word	0x08024580
 80029a4:	080033c5 	.word	0x080033c5
 80029a8:	2000acf8 	.word	0x2000acf8
 80029ac:	080245a4 	.word	0x080245a4
 80029b0:	080033d9 	.word	0x080033d9
 80029b4:	2000b558 	.word	0x2000b558

080029b8 <service_callback>:
  * @retval None
  */

//過去の遺物
void service_callback(const void *request, void *response)
{
 80029b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	60bb      	str	r3, [r7, #8]

	osDelay(1000);
 80029cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029d0:	f00b fac8 	bl	800df64 <osDelay>

	_res->sum = _req->a + _req->b + _req->c;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029e0:	1884      	adds	r4, r0, r2
 80029e2:	eb41 0503 	adc.w	r5, r1, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029ec:	eb14 0802 	adds.w	r8, r4, r2
 80029f0:	eb45 0903 	adc.w	r9, r5, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	e9c3 8900 	strd	r8, r9, [r3]
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002a04 <subscription_callback>:

//速度司令を格納
void subscription_callback(const void * msgin)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <subscription_callback+0x58>)
 8002a1c:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	ed93 7b06 	vldr	d7, [r3, #24]
 8002a26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <subscription_callback+0x58>)
 8002a2c:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	ed93 7b08 	vldr	d7, [r3, #32]
 8002a36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <subscription_callback+0x58>)
 8002a3c:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002a46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <subscription_callback+0x58>)
 8002a4c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	2000bdbc 	.word	0x2000bdbc

08002a60 <manipsub_callback>:
	RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
}

//マニピュレーションのためのコールバック関数群
void manipsub_callback(const void * msgin)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const manip_msgs__msg__Cmd * msub = (const manip_msgs__msg__Cmd *)msgin;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]

//	  print_int(msub->num);
//	  print_int(msub->top_base_arm);
//	  print_int(msub->top_base_hand);

	  work_arm_deployer(msub->work_arm_deploy);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f000 f835 	bl	8002ae4 <work_arm_deployer>
	  work_arm_setter(msub->work_arm);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f000 f8b0 	bl	8002be8 <work_arm_setter>
	  work_hand_setter(msub->work_hand);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f000 f889 	bl	8002ba8 <work_hand_setter>
	  base1_arm_setter(msub->top_base_arm);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f000 f908 	bl	8002cb4 <base1_arm_setter>
	  base1_hand_setter(msub->top_base_hand);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f000 f92b 	bl	8002d08 <base1_hand_setter>
	  base2_arm_setter(msub->bottom_base_arm);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f000 f944 	bl	8002d48 <base2_arm_setter>
	  base2_hand_setter(msub->bottom_base_hand);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f000 f95d 	bl	8002d88 <base2_hand_setter>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <manipsub_callback+0x80>)
 8002ad2:	f003 f8ae 	bl	8005c32 <HAL_GPIO_TogglePin>
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40020400 	.word	0x40020400

08002ae4 <work_arm_deployer>:

void work_arm_deployer(int state){//state:{0:close,1:open}
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d118      	bne.n	8002b24 <work_arm_deployer+0x40>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002af2:	4922      	ldr	r1, [pc, #136]	; (8002b7c <work_arm_deployer+0x98>)
 8002af4:	4822      	ldr	r0, [pc, #136]	; (8002b80 <work_arm_deployer+0x9c>)
 8002af6:	f7fe fe30 	bl	800175a <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 8002afa:	2064      	movs	r0, #100	; 0x64
 8002afc:	f00b fa32 	bl	800df64 <osDelay>
		ServoDriver_SendValue(&servo_device1, 45.0f);
 8002b00:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8002b84 <work_arm_deployer+0xa0>
 8002b04:	481e      	ldr	r0, [pc, #120]	; (8002b80 <work_arm_deployer+0x9c>)
 8002b06:	f7fe fe6a 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002b0a:	491f      	ldr	r1, [pc, #124]	; (8002b88 <work_arm_deployer+0xa4>)
 8002b0c:	481f      	ldr	r0, [pc, #124]	; (8002b8c <work_arm_deployer+0xa8>)
 8002b0e:	f7fe fe24 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002b12:	2064      	movs	r0, #100	; 0x64
 8002b14:	f00b fa26 	bl	800df64 <osDelay>
		ServoDriver_SendValue(&servo_device2, 145.0f);
 8002b18:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002b90 <work_arm_deployer+0xac>
 8002b1c:	481b      	ldr	r0, [pc, #108]	; (8002b8c <work_arm_deployer+0xa8>)
 8002b1e:	f7fe fe5e 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_SendValue(&servo_device2, 60.0f);
		ServoDriver_Init(&servo_device5, &servo_param5);
		osDelay(200);
		ServoDriver_SendValue(&servo_device5, 180.0f);
	}
}
 8002b22:	e026      	b.n	8002b72 <work_arm_deployer+0x8e>
	}else if(state == 1){
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d123      	bne.n	8002b72 <work_arm_deployer+0x8e>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002b2a:	4914      	ldr	r1, [pc, #80]	; (8002b7c <work_arm_deployer+0x98>)
 8002b2c:	4814      	ldr	r0, [pc, #80]	; (8002b80 <work_arm_deployer+0x9c>)
 8002b2e:	f7fe fe14 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002b32:	2064      	movs	r0, #100	; 0x64
 8002b34:	f00b fa16 	bl	800df64 <osDelay>
		ServoDriver_SendValue(&servo_device1, 135.0f);
 8002b38:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002b94 <work_arm_deployer+0xb0>
 8002b3c:	4810      	ldr	r0, [pc, #64]	; (8002b80 <work_arm_deployer+0x9c>)
 8002b3e:	f7fe fe4e 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002b42:	4911      	ldr	r1, [pc, #68]	; (8002b88 <work_arm_deployer+0xa4>)
 8002b44:	4811      	ldr	r0, [pc, #68]	; (8002b8c <work_arm_deployer+0xa8>)
 8002b46:	f7fe fe08 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002b4a:	2064      	movs	r0, #100	; 0x64
 8002b4c:	f00b fa0a 	bl	800df64 <osDelay>
		ServoDriver_SendValue(&servo_device2, 60.0f);
 8002b50:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002b98 <work_arm_deployer+0xb4>
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <work_arm_deployer+0xa8>)
 8002b56:	f7fe fe42 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device5, &servo_param5);
 8002b5a:	4910      	ldr	r1, [pc, #64]	; (8002b9c <work_arm_deployer+0xb8>)
 8002b5c:	4810      	ldr	r0, [pc, #64]	; (8002ba0 <work_arm_deployer+0xbc>)
 8002b5e:	f7fe fdfc 	bl	800175a <ServoDriver_Init>
		osDelay(200);
 8002b62:	20c8      	movs	r0, #200	; 0xc8
 8002b64:	f00b f9fe 	bl	800df64 <osDelay>
		ServoDriver_SendValue(&servo_device5, 180.0f);
 8002b68:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002ba4 <work_arm_deployer+0xc0>
 8002b6c:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <work_arm_deployer+0xbc>)
 8002b6e:	f7fe fe36 	bl	80017de <ServoDriver_SendValue>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200074bc 	.word	0x200074bc
 8002b80:	200074d0 	.word	0x200074d0
 8002b84:	42340000 	.word	0x42340000
 8002b88:	200074d4 	.word	0x200074d4
 8002b8c:	200074e8 	.word	0x200074e8
 8002b90:	43110000 	.word	0x43110000
 8002b94:	43070000 	.word	0x43070000
 8002b98:	42700000 	.word	0x42700000
 8002b9c:	2000751c 	.word	0x2000751c
 8002ba0:	20007530 	.word	0x20007530
 8002ba4:	43340000 	.word	0x43340000

08002ba8 <work_hand_setter>:

void work_hand_setter(int state){//state:{0:open,1:close}
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d107      	bne.n	8002bc6 <work_hand_setter+0x1e>
		  air_device.device_num=1;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <work_hand_setter+0x3c>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4809      	ldr	r0, [pc, #36]	; (8002be4 <work_hand_setter+0x3c>)
 8002bc0:	f7fe fe43 	bl	800184a <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=1;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002bc4:	e009      	b.n	8002bda <work_hand_setter+0x32>
	  }else if(state == 1){
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <work_hand_setter+0x32>
		  air_device.device_num=1;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <work_hand_setter+0x3c>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4803      	ldr	r0, [pc, #12]	; (8002be4 <work_hand_setter+0x3c>)
 8002bd6:	f7fe fe38 	bl	800184a <AirCylinder_SendOutput>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000754c 	.word	0x2000754c

08002be8 <work_arm_setter>:

void work_arm_setter(int state){//state:{0:up,1:down}
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <work_arm_setter+0x1e>
		  air_device.device_num=0;
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <work_arm_setter+0x3c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4809      	ldr	r0, [pc, #36]	; (8002c24 <work_arm_setter+0x3c>)
 8002c00:	f7fe fe23 	bl	800184a <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=0;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002c04:	e009      	b.n	8002c1a <work_arm_setter+0x32>
	  }else if(state == 1){
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <work_arm_setter+0x32>
		  air_device.device_num=0;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <work_arm_setter+0x3c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002c12:	2101      	movs	r1, #1
 8002c14:	4803      	ldr	r0, [pc, #12]	; (8002c24 <work_arm_setter+0x3c>)
 8002c16:	f7fe fe18 	bl	800184a <AirCylinder_SendOutput>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000754c 	.word	0x2000754c

08002c28 <base_hand_deployer>:

void base_hand_deployer(int state){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d127      	bne.n	8002c86 <base_hand_deployer+0x5e>
		ServoDriver_Init(&servo_device3, &servo_param3);
 8002c36:	4916      	ldr	r1, [pc, #88]	; (8002c90 <base_hand_deployer+0x68>)
 8002c38:	4816      	ldr	r0, [pc, #88]	; (8002c94 <base_hand_deployer+0x6c>)
 8002c3a:	f7fe fd8e 	bl	800175a <ServoDriver_Init>
		osDelay(200);  // 適切なdelayを入れる
 8002c3e:	20c8      	movs	r0, #200	; 0xc8
 8002c40:	f00b f990 	bl	800df64 <osDelay>
		ServoDriver_SendValue(&servo_device3, 60.0f);
 8002c44:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002c98 <base_hand_deployer+0x70>
 8002c48:	4812      	ldr	r0, [pc, #72]	; (8002c94 <base_hand_deployer+0x6c>)
 8002c4a:	f7fe fdc8 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device4, &servo_param4);
 8002c4e:	4913      	ldr	r1, [pc, #76]	; (8002c9c <base_hand_deployer+0x74>)
 8002c50:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <base_hand_deployer+0x78>)
 8002c52:	f7fe fd82 	bl	800175a <ServoDriver_Init>
		osDelay(200);
 8002c56:	20c8      	movs	r0, #200	; 0xc8
 8002c58:	f00b f984 	bl	800df64 <osDelay>
		ServoDriver_SendValue(&servo_device4, 90.0f);
 8002c5c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002ca4 <base_hand_deployer+0x7c>
 8002c60:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <base_hand_deployer+0x78>)
 8002c62:	f7fe fdbc 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device6, &servo_param6);
 8002c66:	4910      	ldr	r1, [pc, #64]	; (8002ca8 <base_hand_deployer+0x80>)
 8002c68:	4810      	ldr	r0, [pc, #64]	; (8002cac <base_hand_deployer+0x84>)
 8002c6a:	f7fe fd76 	bl	800175a <ServoDriver_Init>
		osDelay(200);
 8002c6e:	20c8      	movs	r0, #200	; 0xc8
 8002c70:	f00b f978 	bl	800df64 <osDelay>
		ServoDriver_SendValue(&servo_device6, 180.0f);
 8002c74:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002cb0 <base_hand_deployer+0x88>
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <base_hand_deployer+0x84>)
 8002c7a:	f7fe fdb0 	bl	80017de <ServoDriver_SendValue>
		osDelay(1000);
 8002c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c82:	f00b f96f 	bl	800df64 <osDelay>

	}else if(state == 1){

	}
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200074ec 	.word	0x200074ec
 8002c94:	20007500 	.word	0x20007500
 8002c98:	42700000 	.word	0x42700000
 8002c9c:	20007504 	.word	0x20007504
 8002ca0:	20007518 	.word	0x20007518
 8002ca4:	42b40000 	.word	0x42b40000
 8002ca8:	20007534 	.word	0x20007534
 8002cac:	20007548 	.word	0x20007548
 8002cb0:	43340000 	.word	0x43340000

08002cb4 <base1_arm_setter>:
//base1 high
//base2 low
void base1_arm_setter(int state){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	if(state == 1){
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <base1_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M5_struct,0.0f);
 8002cc2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002cf8 <base1_arm_setter+0x44>
 8002cc6:	480d      	ldr	r0, [pc, #52]	; (8002cfc <base1_arm_setter+0x48>)
 8002cc8:	f7fe fd30 	bl	800172c <MCMD_SetTarget>
	}else if(state == 0){
		MCMD_SetTarget(&mcmd4M5_struct,0.23f);
	}else if(state == 2){
		MCMD_SetTarget(&mcmd4M5_struct,0.11f);
	}
}
 8002ccc:	e010      	b.n	8002cf0 <base1_arm_setter+0x3c>
	}else if(state == 0){
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <base1_arm_setter+0x2c>
		MCMD_SetTarget(&mcmd4M5_struct,0.23f);
 8002cd4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002d00 <base1_arm_setter+0x4c>
 8002cd8:	4808      	ldr	r0, [pc, #32]	; (8002cfc <base1_arm_setter+0x48>)
 8002cda:	f7fe fd27 	bl	800172c <MCMD_SetTarget>
}
 8002cde:	e007      	b.n	8002cf0 <base1_arm_setter+0x3c>
	}else if(state == 2){
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d104      	bne.n	8002cf0 <base1_arm_setter+0x3c>
		MCMD_SetTarget(&mcmd4M5_struct,0.11f);
 8002ce6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002d04 <base1_arm_setter+0x50>
 8002cea:	4804      	ldr	r0, [pc, #16]	; (8002cfc <base1_arm_setter+0x48>)
 8002cec:	f7fe fd1e 	bl	800172c <MCMD_SetTarget>
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	2000743c 	.word	0x2000743c
 8002d00:	3e6b851f 	.word	0x3e6b851f
 8002d04:	3de147ae 	.word	0x3de147ae

08002d08 <base1_hand_setter>:

void base1_hand_setter(int state){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

	if(state == 0){
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <base1_hand_setter+0x1e>
		air_device.device_num=3;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <base1_hand_setter+0x3c>)
 8002d18:	2203      	movs	r2, #3
 8002d1a:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4809      	ldr	r0, [pc, #36]	; (8002d44 <base1_hand_setter+0x3c>)
 8002d20:	f7fe fd93 	bl	800184a <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=3;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8002d24:	e009      	b.n	8002d3a <base1_hand_setter+0x32>
		}else if(state == 1){
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <base1_hand_setter+0x32>
			air_device.device_num=3;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <base1_hand_setter+0x3c>)
 8002d2e:	2203      	movs	r2, #3
 8002d30:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8002d32:	2101      	movs	r1, #1
 8002d34:	4803      	ldr	r0, [pc, #12]	; (8002d44 <base1_hand_setter+0x3c>)
 8002d36:	f7fe fd88 	bl	800184a <AirCylinder_SendOutput>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000754c 	.word	0x2000754c

08002d48 <base2_arm_setter>:

void base2_arm_setter(int state){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	if(state == 1){
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d105      	bne.n	8002d62 <base2_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M6_struct,0.0f);
 8002d56:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002d7c <base2_arm_setter+0x34>
 8002d5a:	4809      	ldr	r0, [pc, #36]	; (8002d80 <base2_arm_setter+0x38>)
 8002d5c:	f7fe fce6 	bl	800172c <MCMD_SetTarget>
	}else if(state == 0){
		MCMD_SetTarget(&mcmd4M6_struct,0.12f);
	}
}
 8002d60:	e007      	b.n	8002d72 <base2_arm_setter+0x2a>
	}else if(state == 0){
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d104      	bne.n	8002d72 <base2_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M6_struct,0.12f);
 8002d68:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002d84 <base2_arm_setter+0x3c>
 8002d6c:	4804      	ldr	r0, [pc, #16]	; (8002d80 <base2_arm_setter+0x38>)
 8002d6e:	f7fe fcdd 	bl	800172c <MCMD_SetTarget>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	00000000 	.word	0x00000000
 8002d80:	2000747c 	.word	0x2000747c
 8002d84:	3df5c28f 	.word	0x3df5c28f

08002d88 <base2_hand_setter>:

void base2_hand_setter(int state){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <base2_hand_setter+0x1e>
		air_device.device_num=2;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <base2_hand_setter+0x3c>)
 8002d98:	2202      	movs	r2, #2
 8002d9a:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <base2_hand_setter+0x3c>)
 8002da0:	f7fe fd53 	bl	800184a <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=2;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8002da4:	e009      	b.n	8002dba <base2_hand_setter+0x32>
		}else if(state == 1){
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d106      	bne.n	8002dba <base2_hand_setter+0x32>
			air_device.device_num=2;
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <base2_hand_setter+0x3c>)
 8002dae:	2202      	movs	r2, #2
 8002db0:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8002db2:	2101      	movs	r1, #1
 8002db4:	4803      	ldr	r0, [pc, #12]	; (8002dc4 <base2_hand_setter+0x3c>)
 8002db6:	f7fe fd48 	bl	800184a <AirCylinder_SendOutput>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000754c 	.word	0x2000754c

08002dc8 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	b0f0      	sub	sp, #448	; 0x1c0
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002dd2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dd6:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002dd8:	f00d fda8 	bl	801092c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの設定
  	rmw_uros_set_custom_transport(
 8002ddc:	4bd2      	ldr	r3, [pc, #840]	; (8003128 <StartDefaultTask+0x360>)
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	4bd2      	ldr	r3, [pc, #840]	; (800312c <StartDefaultTask+0x364>)
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4bd2      	ldr	r3, [pc, #840]	; (8003130 <StartDefaultTask+0x368>)
 8002de6:	4ad3      	ldr	r2, [pc, #844]	; (8003134 <StartDefaultTask+0x36c>)
 8002de8:	49d3      	ldr	r1, [pc, #844]	; (8003138 <StartDefaultTask+0x370>)
 8002dea:	2001      	movs	r0, #1
 8002dec:	f012 fc6a 	bl	80156c4 <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002df0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002df4:	4618      	mov	r0, r3
 8002df6:	f012 f8fb 	bl	8014ff0 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8002dfa:	4bd0      	ldr	r3, [pc, #832]	; (800313c <StartDefaultTask+0x374>)
 8002dfc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8002e00:	4bcf      	ldr	r3, [pc, #828]	; (8003140 <StartDefaultTask+0x378>)
 8002e02:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.reallocate = microros_reallocate;
 8002e06:	4bcf      	ldr	r3, [pc, #828]	; (8003144 <StartDefaultTask+0x37c>)
 8002e08:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002e0c:	4bce      	ldr	r3, [pc, #824]	; (8003148 <StartDefaultTask+0x380>)
 8002e0e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002e12:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002e16:	4618      	mov	r0, r3
 8002e18:	f012 f8f8 	bl	801500c <rcutils_set_default_allocator>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f083 0301 	eor.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8002e28:	f240 3153 	movw	r1, #851	; 0x353
 8002e2c:	48c7      	ldr	r0, [pc, #796]	; (800314c <StartDefaultTask+0x384>)
 8002e2e:	f01d fd01 	bl	8020834 <iprintf>
  	}

  	osDelay(100);
 8002e32:	2064      	movs	r0, #100	; 0x64
 8002e34:	f00b f896 	bl	800df64 <osDelay>

  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8002e38:	4bc5      	ldr	r3, [pc, #788]	; (8003150 <StartDefaultTask+0x388>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6898      	ldr	r0, [r3, #8]
 8002e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e42:	2202      	movs	r2, #2
 8002e44:	2100      	movs	r1, #0
 8002e46:	f01d fd63 	bl	8020910 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8002e4a:	f010 fb01 	bl	8013450 <rcl_get_zero_initialized_init_options>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8002e54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f012 f8f5 	bl	8015048 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8002e5e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002e62:	4618      	mov	r0, r3
 8002e64:	f010 fbfc 	bl	8013660 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8002e68:	f010 feb8 	bl	8013bdc <rcl_get_zero_initialized_service>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  	publisher = rcl_get_zero_initialized_publisher();
 8002e72:	f010 fd9f 	bl	80139b4 <rcl_get_zero_initialized_publisher>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4ab6      	ldr	r2, [pc, #728]	; (8003154 <StartDefaultTask+0x38c>)
 8002e7a:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 8002e7c:	f010 ffd2 	bl	8013e24 <rcl_get_zero_initialized_subscription>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	rcl_subscription_t manipsub = rcl_get_zero_initialized_subscription();
 8002e86:	f010 ffcd 	bl	8013e24 <rcl_get_zero_initialized_subscription>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8002e90:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f011 fc53 	bl	8014744 <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 8002e9e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002ea2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f010 fd54 	bl	8013954 <rcl_node_get_default_options>

  	osDelay(100);
 8002eac:	2064      	movs	r0, #100	; 0x64
 8002eae:	f00b f859 	bl	800df64 <osDelay>

  	//ノードの設定
  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002eb2:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8002eb6:	466a      	mov	r2, sp
 8002eb8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002ebc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ec0:	e882 0003 	stmia.w	r2, {r0, r1}
 8002ec4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002ec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f010 fac2 	bl	8013454 <rcl_init_options_init>
 8002ed0:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8002ed4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <StartDefaultTask+0x122>
 8002edc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ee0:	f240 3167 	movw	r1, #871	; 0x367
 8002ee4:	489c      	ldr	r0, [pc, #624]	; (8003158 <StartDefaultTask+0x390>)
 8002ee6:	f01d fca5 	bl	8020834 <iprintf>
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 8002eea:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f010 fbad 	bl	8013650 <rcl_init_options_set_domain_id>
 8002ef6:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8002efa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <StartDefaultTask+0x148>
 8002f02:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002f06:	f44f 715a 	mov.w	r1, #872	; 0x368
 8002f0a:	4893      	ldr	r0, [pc, #588]	; (8003158 <StartDefaultTask+0x390>)
 8002f0c:	f01d fc92 	bl	8020834 <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002f10:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8002f14:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8002f18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	2200      	movs	r2, #0
 8002f22:	2100      	movs	r1, #0
 8002f24:	f011 ff3c 	bl	8014da0 <rclc_support_init_with_options>
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8002f28:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8002f2c:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8002f30:	f107 0320 	add.w	r3, r7, #32
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	4a88      	ldr	r2, [pc, #544]	; (800315c <StartDefaultTask+0x394>)
 8002f3a:	4989      	ldr	r1, [pc, #548]	; (8003160 <StartDefaultTask+0x398>)
 8002f3c:	f011 ff66 	bl	8014e0c <rclc_node_init_with_options>
 8002f40:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8002f44:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <StartDefaultTask+0x192>
 8002f4c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002f50:	f240 316a 	movw	r1, #874	; 0x36a
 8002f54:	4880      	ldr	r0, [pc, #512]	; (8003158 <StartDefaultTask+0x390>)
 8002f56:	f01d fc6d 	bl	8020834 <iprintf>
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8002f5a:	f00e fa47 	bl	80113ec <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002f64:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002f68:	4b7e      	ldr	r3, [pc, #504]	; (8003164 <StartDefaultTask+0x39c>)
 8002f6a:	f011 ffc5 	bl	8014ef8 <rclc_service_init_default>
 8002f6e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8002f72:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <StartDefaultTask+0x1c0>
 8002f7a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002f7e:	f240 316b 	movw	r1, #875	; 0x36b
 8002f82:	4875      	ldr	r0, [pc, #468]	; (8003158 <StartDefaultTask+0x390>)
 8002f84:	f01d fc56 	bl	8020834 <iprintf>

	RCCHECK(rclc_publisher_init_default(
 8002f88:	f014 fa56 	bl	8017438 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002f92:	4b75      	ldr	r3, [pc, #468]	; (8003168 <StartDefaultTask+0x3a0>)
 8002f94:	486f      	ldr	r0, [pc, #444]	; (8003154 <StartDefaultTask+0x38c>)
 8002f96:	f011 ff75 	bl	8014e84 <rclc_publisher_init_default>
 8002f9a:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8002f9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <StartDefaultTask+0x1ec>
 8002fa6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002faa:	f240 316d 	movw	r1, #877	; 0x36d
 8002fae:	486a      	ldr	r0, [pc, #424]	; (8003158 <StartDefaultTask+0x390>)
 8002fb0:	f01d fc40 	bl	8020834 <iprintf>
	  &publisher,
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

		RCCHECK(rclc_publisher_init_default(
 8002fb4:	f00e fb4a 	bl	801164c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002fbe:	4b6b      	ldr	r3, [pc, #428]	; (800316c <StartDefaultTask+0x3a4>)
 8002fc0:	486b      	ldr	r0, [pc, #428]	; (8003170 <StartDefaultTask+0x3a8>)
 8002fc2:	f011 ff5f 	bl	8014e84 <rclc_publisher_init_default>
 8002fc6:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8002fca:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <StartDefaultTask+0x218>
 8002fd2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002fd6:	f240 3173 	movw	r1, #883	; 0x373
 8002fda:	485f      	ldr	r0, [pc, #380]	; (8003158 <StartDefaultTask+0x390>)
 8002fdc:	f01d fc2a 	bl	8020834 <iprintf>
		  &encpublisher,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002fe0:	f00e fb1c 	bl	801161c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002fea:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8002fee:	4b61      	ldr	r3, [pc, #388]	; (8003174 <StartDefaultTask+0x3ac>)
 8002ff0:	f011 ffbc 	bl	8014f6c <rclc_subscription_init_default>
 8002ff4:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8002ff8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <StartDefaultTask+0x246>
 8003000:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003004:	f240 3179 	movw	r1, #889	; 0x379
 8003008:	4853      	ldr	r0, [pc, #332]	; (8003158 <StartDefaultTask+0x390>)
 800300a:	f01d fc13 	bl	8020834 <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));

		RCCHECK(rclc_subscription_init_default(
 800300e:	f00e fd2b 	bl	8011a68 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>
 8003012:	4602      	mov	r2, r0
 8003014:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8003018:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800301c:	4b56      	ldr	r3, [pc, #344]	; (8003178 <StartDefaultTask+0x3b0>)
 800301e:	f011 ffa5 	bl	8014f6c <rclc_subscription_init_default>
 8003022:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 8003026:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <StartDefaultTask+0x274>
 800302e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003032:	f240 317f 	movw	r1, #895	; 0x37f
 8003036:	4848      	ldr	r0, [pc, #288]	; (8003158 <StartDefaultTask+0x390>)
 8003038:	f01d fbfc 	bl	8020834 <iprintf>
		  &manipsub,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(manip_msgs, msg, Cmd),
		  "/manip_cmd_f7"));

		RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 800303c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003040:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8003044:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003048:	2203      	movs	r2, #3
 800304a:	f011 fb85 	bl	8014758 <rclc_executor_init>
 800304e:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8003052:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <StartDefaultTask+0x2a0>
 800305a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800305e:	f240 3185 	movw	r1, #901	; 0x385
 8003062:	483d      	ldr	r0, [pc, #244]	; (8003158 <StartDefaultTask+0x390>)
 8003064:	f01d fbe6 	bl	8020834 <iprintf>

  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8003068:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800306c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003070:	4b42      	ldr	r3, [pc, #264]	; (800317c <StartDefaultTask+0x3b4>)
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4b42      	ldr	r3, [pc, #264]	; (8003180 <StartDefaultTask+0x3b8>)
 8003076:	4a43      	ldr	r2, [pc, #268]	; (8003184 <StartDefaultTask+0x3bc>)
 8003078:	f011 fc28 	bl	80148cc <rclc_executor_add_service>
 800307c:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8003080:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <StartDefaultTask+0x2ce>
 8003088:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800308c:	f240 3187 	movw	r1, #903	; 0x387
 8003090:	4831      	ldr	r0, [pc, #196]	; (8003158 <StartDefaultTask+0x390>)
 8003092:	f01d fbcf 	bl	8020834 <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8003096:	f507 718a 	add.w	r1, r7, #276	; 0x114
 800309a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800309e:	2300      	movs	r3, #0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <StartDefaultTask+0x3c0>)
 80030a4:	4a39      	ldr	r2, [pc, #228]	; (800318c <StartDefaultTask+0x3c4>)
 80030a6:	f011 fbd3 	bl	8014850 <rclc_executor_add_subscription>
 80030aa:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 80030ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <StartDefaultTask+0x2fc>
 80030b6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80030ba:	f44f 7162 	mov.w	r1, #904	; 0x388
 80030be:	4826      	ldr	r0, [pc, #152]	; (8003158 <StartDefaultTask+0x390>)
 80030c0:	f01d fbb8 	bl	8020834 <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));
  	RCCHECK(rclc_executor_add_subscription(
 80030c4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80030c8:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80030cc:	2300      	movs	r3, #0
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <StartDefaultTask+0x3c8>)
 80030d2:	4a30      	ldr	r2, [pc, #192]	; (8003194 <StartDefaultTask+0x3cc>)
 80030d4:	f011 fbbc 	bl	8014850 <rclc_executor_add_subscription>
 80030d8:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 80030dc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <StartDefaultTask+0x32a>
 80030e4:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80030e8:	f240 318b 	movw	r1, #907	; 0x38b
 80030ec:	481a      	ldr	r0, [pc, #104]	; (8003158 <StartDefaultTask+0x390>)
 80030ee:	f01d fba1 	bl	8020834 <iprintf>
  	  		  &executor, &manipsub, &msub,
  	  		  &manipsub_callback, ON_NEW_DATA));

  	osDelay(100);
 80030f2:	2064      	movs	r0, #100	; 0x64
 80030f4:	f00a ff36 	bl	800df64 <osDelay>

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 80030f8:	4827      	ldr	r0, [pc, #156]	; (8003198 <StartDefaultTask+0x3d0>)
 80030fa:	f014 f8af 	bl	801725c <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 80030fe:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003102:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003106:	4a25      	ldr	r2, [pc, #148]	; (800319c <StartDefaultTask+0x3d4>)
 8003108:	461c      	mov	r4, r3
 800310a:	4615      	mov	r5, r2
 800310c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800310e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	2214      	movs	r2, #20
 800311a:	4619      	mov	r1, r3
 800311c:	481e      	ldr	r0, [pc, #120]	; (8003198 <StartDefaultTask+0x3d0>)
 800311e:	f014 f8fb 	bl	8017318 <rosidl_runtime_c__String__assignn>
    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8003122:	2200      	movs	r2, #0
 8003124:	e03c      	b.n	80031a0 <StartDefaultTask+0x3d8>
 8003126:	bf00      	nop
 8003128:	080020a9 	.word	0x080020a9
 800312c:	08002049 	.word	0x08002049
 8003130:	08002029 	.word	0x08002029
 8003134:	08001ffd 	.word	0x08001ffd
 8003138:	2000bec4 	.word	0x2000bec4
 800313c:	08003631 	.word	0x08003631
 8003140:	08003675 	.word	0x08003675
 8003144:	080036ad 	.word	0x080036ad
 8003148:	08003719 	.word	0x08003719
 800314c:	0802434c 	.word	0x0802434c
 8003150:	200009d8 	.word	0x200009d8
 8003154:	20007550 	.word	0x20007550
 8003158:	08024374 	.word	0x08024374
 800315c:	080243a0 	.word	0x080243a0
 8003160:	080243a4 	.word	0x080243a4
 8003164:	080243ac 	.word	0x080243ac
 8003168:	080243bc 	.word	0x080243bc
 800316c:	080243cc 	.word	0x080243cc
 8003170:	20007554 	.word	0x20007554
 8003174:	080243d8 	.word	0x080243d8
 8003178:	080243e8 	.word	0x080243e8
 800317c:	080029b9 	.word	0x080029b9
 8003180:	200072a8 	.word	0x200072a8
 8003184:	20007290 	.word	0x20007290
 8003188:	08002a05 	.word	0x08002a05
 800318c:	200072b0 	.word	0x200072b0
 8003190:	08002a61 	.word	0x08002a61
 8003194:	200072e0 	.word	0x200072e0
 8003198:	20007328 	.word	0x20007328
 800319c:	08024424 	.word	0x08024424
 80031a0:	492f      	ldr	r1, [pc, #188]	; (8003260 <StartDefaultTask+0x498>)
 80031a2:	4830      	ldr	r0, [pc, #192]	; (8003264 <StartDefaultTask+0x49c>)
 80031a4:	f010 fcd4 	bl	8013b50 <rcl_publish>
 80031a8:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80031ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <StartDefaultTask+0x3fa>
 80031b4:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80031b8:	f240 3195 	movw	r1, #917	; 0x395
 80031bc:	482a      	ldr	r0, [pc, #168]	; (8003268 <StartDefaultTask+0x4a0>)
 80031be:	f01d fb39 	bl	8020834 <iprintf>

    //ピンの初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2180      	movs	r1, #128	; 0x80
 80031c6:	4829      	ldr	r0, [pc, #164]	; (800326c <StartDefaultTask+0x4a4>)
 80031c8:	f002 fd1a 	bl	8005c00 <HAL_GPIO_WritePin>

    //CANの設定を実行
	canSetting();
 80031cc:	f7ff f80a 	bl	80021e4 <canSetting>
//	mcmdMoter_Test_Setting();
	mcmdMoter1Setting();
 80031d0:	f7ff f832 	bl	8002238 <mcmdMoter1Setting>
	mcmdMoter2Setting();
 80031d4:	f7ff f894 	bl	8002300 <mcmdMoter2Setting>
	mcmdMoter3Setting();
 80031d8:	f7ff f8f6 	bl	80023c8 <mcmdMoter3Setting>
	mcmdMoter4Setting();
 80031dc:	f7ff f958 	bl	8002490 <mcmdMoter4Setting>
	mcmdMoter5Setting();
 80031e0:	f7ff f9ba 	bl	8002558 <mcmdMoter5Setting>
	mcmdMoter6Setting();
 80031e4:	f7ff fa1c 	bl	8002620 <mcmdMoter6Setting>
//	mcmdMoter7Setting();
//	mcmdMoter8Setting();
	servo1Setting();
 80031e8:	f7ff fa7e 	bl	80026e8 <servo1Setting>
	servo2Setting();
 80031ec:	f7ff faa8 	bl	8002740 <servo2Setting>
	servo3Setting();
 80031f0:	f7ff fad2 	bl	8002798 <servo3Setting>
	servo4Setting();
 80031f4:	f7ff fafc 	bl	80027f0 <servo4Setting>
	servo5Setting();
 80031f8:	f7ff fb26 	bl	8002848 <servo5Setting>
	servo6Setting();
 80031fc:	f7ff fb50 	bl	80028a0 <servo6Setting>
	airSetting();
 8003200:	f7ff fb7a 	bl	80028f8 <airSetting>

	printf("All Setting Finished\r\n");
 8003204:	481a      	ldr	r0, [pc, #104]	; (8003270 <StartDefaultTask+0x4a8>)
 8003206:	f01d fb7b 	bl	8020900 <puts>
	base_hand_deployer(0);
 800320a:	2000      	movs	r0, #0
 800320c:	f7ff fd0c 	bl	8002c28 <base_hand_deployer>
	work_arm_deployer(1);
 8003210:	2001      	movs	r0, #1
 8003212:	f7ff fc67 	bl	8002ae4 <work_arm_deployer>
	osDelay(2000);
 8003216:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800321a:	f00a fea3 	bl	800df64 <osDelay>
	base1_hand_setter(1);
 800321e:	2001      	movs	r0, #1
 8003220:	f7ff fd72 	bl	8002d08 <base1_hand_setter>
	base2_hand_setter(1);
 8003224:	2001      	movs	r0, #1
 8003226:	f7ff fdaf 	bl	8002d88 <base2_hand_setter>
	printf("work arm deployed \r\n");
 800322a:	4812      	ldr	r0, [pc, #72]	; (8003274 <StartDefaultTask+0x4ac>)
 800322c:	f01d fb68 	bl	8020900 <puts>
	finishCANsetting = true;
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <StartDefaultTask+0x4b0>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8003236:	2064      	movs	r0, #100	; 0x64
 8003238:	f00a fe94 	bl	800df64 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800323c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003240:	a305      	add	r3, pc, #20	; (adr r3, 8003258 <StartDefaultTask+0x490>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	4608      	mov	r0, r1
 8003248:	f011 fd70 	bl	8014d2c <rclc_executor_spin_some>
	  //RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));//printfを見たいときはコメントアウト

	  osDelay(10);
 800324c:	200a      	movs	r0, #10
 800324e:	f00a fe89 	bl	800df64 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8003252:	e7f3      	b.n	800323c <StartDefaultTask+0x474>
 8003254:	f3af 8000 	nop.w
 8003258:	05f5e100 	.word	0x05f5e100
 800325c:	00000000 	.word	0x00000000
 8003260:	20007328 	.word	0x20007328
 8003264:	20007550 	.word	0x20007550
 8003268:	08024320 	.word	0x08024320
 800326c:	40020400 	.word	0x40020400
 8003270:	080243f8 	.word	0x080243f8
 8003274:	08024410 	.word	0x08024410
 8003278:	2000bdb8 	.word	0x2000bdb8

0800327c <dutyLimmiter>:
	}

	return input;
}

float dutyLimmiter(float input){
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	ed87 0a01 	vstr	s0, [r7, #4]
	const float dutyLimmit = 0.5;
 8003286:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800328a:	60fb      	str	r3, [r7, #12]
	if(input >= dutyLimmit){
 800328c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003290:	edd7 7a03 	vldr	s15, [r7, #12]
 8003294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	db02      	blt.n	80032a4 <dutyLimmiter+0x28>
		input = dutyLimmit;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	e018      	b.n	80032d6 <dutyLimmiter+0x5a>
	}else if(input <= dutyLimmit*-1.0){
 80032a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80032b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032b4:	eeb1 7b47 	vneg.f64	d7, d7
 80032b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c0:	d809      	bhi.n	80032d6 <dutyLimmiter+0x5a>
		input = dutyLimmit*-1.0;
 80032c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032ce:	eef1 7a67 	vneg.f32	s15, s15
 80032d2:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	return input;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	ee07 3a90 	vmov	s15, r3
}
 80032dc:	eeb0 0a67 	vmov.f32	s0, s15
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <StartSysCheckTask>:
	  air_device.device_num=1;
	  AirCylinder_SendOutput(&air_device, AIR_OFF);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <StartSysCheckTask+0x44>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d015      	beq.n	8003328 <StartSysCheckTask+0x3c>
		  if(!finishCheck){
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <StartSysCheckTask+0x48>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	f083 0301 	eor.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00e      	beq.n	8003328 <StartSysCheckTask+0x3c>
			  osDelay(1000);//このdelayは必要？
 800330a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800330e:	f00a fe29 	bl	800df64 <osDelay>
//			  base1_arm_setter(1);
//			  osDelay(10000);
//			  base2_arm_setter(1);
//			  base1_hand_setter(1);
//			  base2_hand_setter(1);
			  	osDelay(1000);
 8003312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003316:	f00a fe25 	bl	800df64 <osDelay>
			  	osDelay(3000);
 800331a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800331e:	f00a fe21 	bl	800df64 <osDelay>
			  finishCheck = true;
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <StartSysCheckTask+0x48>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
//	  mcmdEncChecker(&mcmdM2_fb,&mcmd4M2_struct,100);
//	  mcmdEncChecker(&mcmdM3_fb,&mcmd4M3_struct,100);
//	  mcmdEncChecker(&mcmdM4_fb,&mcmd4M4_struct,100);
//	  mcmdEncChecker(&mcmdM5_fb,&mcmd4M5_struct,100);
//	  mcmdEncChecker(&mcmdM6_fb,&mcmd4M6_struct,100);
	  osDelay(10);
 8003328:	200a      	movs	r0, #10
 800332a:	f00a fe1b 	bl	800df64 <osDelay>
	  if(finishCANsetting){
 800332e:	e7e1      	b.n	80032f4 <StartSysCheckTask+0x8>
 8003330:	2000bdb8 	.word	0x2000bdb8
 8003334:	2000bdcc 	.word	0x2000bdcc

08003338 <motorRun>:
/**
* @brief Function implementing the MotorRunTask thread.
* @param argument: Not used
* @retval None
*/
void motorRun(){
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	MCMD_SetTarget(&mcmd4M1_struct,dutyLimmiter(cmd_motor[0]));
 800333c:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <motorRun+0x78>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	eeb0 0a67 	vmov.f32	s0, s15
 8003346:	f7ff ff99 	bl	800327c <dutyLimmiter>
 800334a:	eef0 7a40 	vmov.f32	s15, s0
 800334e:	eeb0 0a67 	vmov.f32	s0, s15
 8003352:	4818      	ldr	r0, [pc, #96]	; (80033b4 <motorRun+0x7c>)
 8003354:	f7fe f9ea 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M2_struct,dutyLimmiter(cmd_motor[1]));
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <motorRun+0x78>)
 800335a:	edd3 7a01 	vldr	s15, [r3, #4]
 800335e:	eeb0 0a67 	vmov.f32	s0, s15
 8003362:	f7ff ff8b 	bl	800327c <dutyLimmiter>
 8003366:	eef0 7a40 	vmov.f32	s15, s0
 800336a:	eeb0 0a67 	vmov.f32	s0, s15
 800336e:	4812      	ldr	r0, [pc, #72]	; (80033b8 <motorRun+0x80>)
 8003370:	f7fe f9dc 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M3_struct,dutyLimmiter(cmd_motor[2]));
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <motorRun+0x78>)
 8003376:	edd3 7a02 	vldr	s15, [r3, #8]
 800337a:	eeb0 0a67 	vmov.f32	s0, s15
 800337e:	f7ff ff7d 	bl	800327c <dutyLimmiter>
 8003382:	eef0 7a40 	vmov.f32	s15, s0
 8003386:	eeb0 0a67 	vmov.f32	s0, s15
 800338a:	480c      	ldr	r0, [pc, #48]	; (80033bc <motorRun+0x84>)
 800338c:	f7fe f9ce 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M4_struct,dutyLimmiter(cmd_motor[3]));
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <motorRun+0x78>)
 8003392:	edd3 7a03 	vldr	s15, [r3, #12]
 8003396:	eeb0 0a67 	vmov.f32	s0, s15
 800339a:	f7ff ff6f 	bl	800327c <dutyLimmiter>
 800339e:	eef0 7a40 	vmov.f32	s15, s0
 80033a2:	eeb0 0a67 	vmov.f32	s0, s15
 80033a6:	4806      	ldr	r0, [pc, #24]	; (80033c0 <motorRun+0x88>)
 80033a8:	f7fe f9c0 	bl	800172c <MCMD_SetTarget>
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	2000bdbc 	.word	0x2000bdbc
 80033b4:	2000733c 	.word	0x2000733c
 80033b8:	2000737c 	.word	0x2000737c
 80033bc:	200073bc 	.word	0x200073bc
 80033c0:	200073fc 	.word	0x200073fc

080033c4 <StartMotorRunTask>:
/* USER CODE END Header_StartMotorRunTask */
void StartMotorRunTask(void *argument)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorRunTask */

  /* Infinite loop */
  for(;;)
  {
	  motorRun();
 80033cc:	f7ff ffb4 	bl	8003338 <motorRun>

    osDelay(10);
 80033d0:	200a      	movs	r0, #10
 80033d2:	f00a fdc7 	bl	800df64 <osDelay>
	  motorRun();
 80033d6:	e7f9      	b.n	80033cc <StartMotorRunTask+0x8>

080033d8 <StartEncorderTask>:
int64_t count1;
int64_t count2;
float quant_per_unit = 1.0/4096.0f;
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
//	  printf("base2 %f \r\n",base2);

//	  printf("enc1: %d\r\n",(int)(count1*quant_per_unit));
//	  printf("enc2: %d\r\n",(int)(count2*quant_per_unit));

    osDelay(1000);
 80033e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e4:	f00a fdbe 	bl	800df64 <osDelay>
 80033e8:	e7fa      	b.n	80033e0 <StartEncorderTask+0x8>
	...

080033ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	; 0x30
 80033f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003402:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <MX_GPIO_Init+0xd8>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003420:	f043 0310 	orr.w	r3, r3, #16
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <MX_GPIO_Init+0xd8>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <MX_GPIO_Init+0xd8>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <MX_GPIO_Init+0xd8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 8003492:	2200      	movs	r2, #0
 8003494:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8003498:	480b      	ldr	r0, [pc, #44]	; (80034c8 <MX_GPIO_Init+0xdc>)
 800349a:	f002 fbb1 	bl	8005c00 <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 800349e:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80034a2:	61fb      	str	r3, [r7, #28]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a4:	2301      	movs	r3, #1
 80034a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	4619      	mov	r1, r3
 80034b6:	4804      	ldr	r0, [pc, #16]	; (80034c8 <MX_GPIO_Init+0xdc>)
 80034b8:	f002 f9f6 	bl	80058a8 <HAL_GPIO_Init>

}
 80034bc:	bf00      	nop
 80034be:	3730      	adds	r7, #48	; 0x30
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40020400 	.word	0x40020400

080034cc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80034d6:	1df9      	adds	r1, r7, #7
 80034d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034dc:	2201      	movs	r2, #1
 80034de:	4804      	ldr	r0, [pc, #16]	; (80034f0 <__io_putchar+0x24>)
 80034e0:	f005 fc5a 	bl	8008d98 <HAL_UART_Transmit>
    return ch;
 80034e4:	79fb      	ldrb	r3, [r7, #7]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000bec4 	.word	0x2000bec4

080034f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034f8:	f000 fe31 	bl	800415e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034fc:	f000 f814 	bl	8003528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003500:	f7ff ff74 	bl	80033ec <MX_GPIO_Init>
  MX_DMA_Init();
 8003504:	f7fe fd54 	bl	8001fb0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003508:	f000 fd00 	bl	8003f0c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800350c:	f000 fbd4 	bl	8003cb8 <MX_TIM1_Init>
  MX_CAN1_Init();
 8003510:	f7fe fa68 	bl	80019e4 <MX_CAN1_Init>
  MX_TIM8_Init();
 8003514:	f000 fc2a 	bl	8003d6c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003518:	f00a fc14 	bl	800dd44 <osKernelInitialize>
  MX_FREERTOS_Init();
 800351c:	f7ff fa10 	bl	8002940 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003520:	f00a fc44 	bl	800ddac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003524:	e7fe      	b.n	8003524 <main+0x30>
	...

08003528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b094      	sub	sp, #80	; 0x50
 800352c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800352e:	f107 031c 	add.w	r3, r7, #28
 8003532:	2234      	movs	r2, #52	; 0x34
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f01d fc28 	bl	8020d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800353c:	f107 0308 	add.w	r3, r7, #8
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <SystemClock_Config+0xd8>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <SystemClock_Config+0xd8>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6413      	str	r3, [r2, #64]	; 0x40
 8003558:	4b29      	ldr	r3, [pc, #164]	; (8003600 <SystemClock_Config+0xd8>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <SystemClock_Config+0xdc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800356c:	4a25      	ldr	r2, [pc, #148]	; (8003604 <SystemClock_Config+0xdc>)
 800356e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b23      	ldr	r3, [pc, #140]	; (8003604 <SystemClock_Config+0xdc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003580:	2301      	movs	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800358a:	2302      	movs	r3, #2
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800358e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003594:	2304      	movs	r3, #4
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003598:	2360      	movs	r3, #96	; 0x60
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800359c:	2302      	movs	r3, #2
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035a0:	2304      	movs	r3, #4
 80035a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80035a4:	2302      	movs	r3, #2
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a8:	f107 031c 	add.w	r3, r7, #28
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fe63 	bl	8007278 <HAL_RCC_OscConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035b8:	f000 f835 	bl	8003626 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80035bc:	f003 fe0c 	bl	80071d8 <HAL_PWREx_EnableOverDrive>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80035c6:	f000 f82e 	bl	8003626 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ca:	230f      	movs	r3, #15
 80035cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ce:	2302      	movs	r3, #2
 80035d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	2103      	movs	r1, #3
 80035e8:	4618      	mov	r0, r3
 80035ea:	f004 f8f3 	bl	80077d4 <HAL_RCC_ClockConfig>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80035f4:	f000 f817 	bl	8003626 <Error_Handler>
  }
}
 80035f8:	bf00      	nop
 80035fa:	3750      	adds	r7, #80	; 0x50
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40023800 	.word	0x40023800
 8003604:	40007000 	.word	0x40007000

08003608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d101      	bne.n	800361e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800361a:	f000 fdad 	bl	8004178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800362a:	b672      	cpsid	i
}
 800362c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800362e:	e7fe      	b.n	800362e <Error_Handler+0x8>

08003630 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800363a:	4b0c      	ldr	r3, [pc, #48]	; (800366c <microros_allocate+0x3c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	461a      	mov	r2, r3
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <microros_allocate+0x3c>)
 8003648:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <microros_allocate+0x40>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <microros_allocate+0x40>)
 8003658:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe fa54 	bl	8001b08 <pvPortMallocMicroROS>
 8003660:	4603      	mov	r3, r0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	2000bdd0 	.word	0x2000bdd0
 8003670:	2000bdd4 	.word	0x2000bdd4

08003674 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00c      	beq.n	800369e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7fe fb67 	bl	8001d58 <getBlockSize>
 800368a:	4603      	mov	r3, r0
 800368c:	4a06      	ldr	r2, [pc, #24]	; (80036a8 <microros_deallocate+0x34>)
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	461a      	mov	r2, r3
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <microros_deallocate+0x34>)
 8003696:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fe faff 	bl	8001c9c <vPortFreeMicroROS>
  }
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000bdd4 	.word	0x2000bdd4

080036ac <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80036b8:	4b15      	ldr	r3, [pc, #84]	; (8003710 <microros_reallocate+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4413      	add	r3, r2
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <microros_reallocate+0x64>)
 80036c6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <microros_reallocate+0x68>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4413      	add	r3, r2
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <microros_reallocate+0x68>)
 80036d6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	f7fe fa12 	bl	8001b08 <pvPortMallocMicroROS>
 80036e4:	4603      	mov	r3, r0
 80036e6:	e00e      	b.n	8003706 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7fe fb35 	bl	8001d58 <getBlockSize>
 80036ee:	4603      	mov	r3, r0
 80036f0:	4a08      	ldr	r2, [pc, #32]	; (8003714 <microros_reallocate+0x68>)
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <microros_reallocate+0x68>)
 80036fa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7fe fb48 	bl	8001d94 <pvPortReallocMicroROS>
 8003704:	4603      	mov	r3, r0
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	2000bdd0 	.word	0x2000bdd0
 8003714:	2000bdd4 	.word	0x2000bdd4

08003718 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <microros_zero_allocate+0x48>)
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	4413      	add	r3, r2
 8003732:	461a      	mov	r2, r3
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <microros_zero_allocate+0x48>)
 8003736:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	4a08      	ldr	r2, [pc, #32]	; (8003764 <microros_zero_allocate+0x4c>)
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	4413      	add	r3, r2
 8003746:	461a      	mov	r2, r3
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <microros_zero_allocate+0x4c>)
 800374a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7fe fb4d 	bl	8001dee <pvPortCallocMicroROS>
 8003754:	4603      	mov	r3, r0
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	2000bdd0 	.word	0x2000bdd0
 8003764:	2000bdd4 	.word	0x2000bdd4

08003768 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003768:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800377a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800377e:	a320      	add	r3, pc, #128	; (adr r3, 8003800 <UTILS_NanosecondsToTimespec+0x98>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f7fc ff80 	bl	8000688 <__aeabi_ldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003796:	a31a      	add	r3, pc, #104	; (adr r3, 8003800 <UTILS_NanosecondsToTimespec+0x98>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f7fc ff74 	bl	8000688 <__aeabi_ldivmod>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da20      	bge.n	80037ee <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <UTILS_NanosecondsToTimespec+0x90>)
 80037b2:	fb82 1203 	smull	r1, r2, r2, r3
 80037b6:	1712      	asrs	r2, r2, #28
 80037b8:	17db      	asrs	r3, r3, #31
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	17c8      	asrs	r0, r1, #31
 80037ca:	460c      	mov	r4, r1
 80037cc:	4605      	mov	r5, r0
 80037ce:	ebb2 0804 	subs.w	r8, r2, r4
 80037d2:	eb63 0905 	sbc.w	r9, r3, r5
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4906      	ldr	r1, [pc, #24]	; (80037fc <UTILS_NanosecondsToTimespec+0x94>)
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	609a      	str	r2, [r3, #8]
    }
}
 80037ee:	bf00      	nop
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037f8:	44b82fa1 	.word	0x44b82fa1
 80037fc:	3b9aca00 	.word	0x3b9aca00
 8003800:	3b9aca00 	.word	0x3b9aca00
 8003804:	00000000 	.word	0x00000000

08003808 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b08e      	sub	sp, #56	; 0x38
 800380e:	af00      	add	r7, sp, #0
 8003810:	6278      	str	r0, [r7, #36]	; 0x24
 8003812:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003814:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003818:	2300      	movs	r3, #0
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800382a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382e:	4618      	mov	r0, r3
 8003830:	f00b fe96 	bl	800f560 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	17da      	asrs	r2, r3, #31
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	61fa      	str	r2, [r7, #28]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	000b      	movs	r3, r1
 8003848:	2200      	movs	r2, #0
 800384a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	2200      	movs	r2, #0
 8003852:	461c      	mov	r4, r3
 8003854:	4615      	mov	r5, r2
 8003856:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800385a:	1911      	adds	r1, r2, r4
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	416b      	adcs	r3, r5
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003866:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800386a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	f04f 0400 	mov.w	r4, #0
 8003876:	f04f 0500 	mov.w	r5, #0
 800387a:	015d      	lsls	r5, r3, #5
 800387c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003880:	0154      	lsls	r4, r2, #5
 8003882:	4622      	mov	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	ebb2 0800 	subs.w	r8, r2, r0
 800388a:	eb63 0901 	sbc.w	r9, r3, r1
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800389a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800389e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80038a2:	4690      	mov	r8, r2
 80038a4:	4699      	mov	r9, r3
 80038a6:	eb18 0a00 	adds.w	sl, r8, r0
 80038aa:	eb49 0b01 	adc.w	fp, r9, r1
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038c2:	ebb2 040a 	subs.w	r4, r2, sl
 80038c6:	603c      	str	r4, [r7, #0]
 80038c8:	eb63 030b 	sbc.w	r3, r3, fp
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038d2:	4623      	mov	r3, r4
 80038d4:	181b      	adds	r3, r3, r0
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	462b      	mov	r3, r5
 80038da:	eb41 0303 	adc.w	r3, r1, r3
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038e6:	f7ff ff3f 	bl	8003768 <UTILS_NanosecondsToTimespec>

    return 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	3738      	adds	r7, #56	; 0x38
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080038f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_MspInit+0x4c>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	4a10      	ldr	r2, [pc, #64]	; (8003944 <HAL_MspInit+0x4c>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	6413      	str	r3, [r2, #64]	; 0x40
 800390a:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <HAL_MspInit+0x4c>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_MspInit+0x4c>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <HAL_MspInit+0x4c>)
 800391c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003920:	6453      	str	r3, [r2, #68]	; 0x44
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <HAL_MspInit+0x4c>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800392e:	2200      	movs	r2, #0
 8003930:	210f      	movs	r1, #15
 8003932:	f06f 0001 	mvn.w	r0, #1
 8003936:	f001 fb77 	bl	8005028 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800

08003948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08e      	sub	sp, #56	; 0x38
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003958:	4b34      	ldr	r3, [pc, #208]	; (8003a2c <HAL_InitTick+0xe4>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a33      	ldr	r2, [pc, #204]	; (8003a2c <HAL_InitTick+0xe4>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
 8003964:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <HAL_InitTick+0xe4>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003970:	f107 0210 	add.w	r2, r7, #16
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f004 f950 	bl	8007c20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800398a:	f004 f921 	bl	8007bd0 <HAL_RCC_GetPCLK1Freq>
 800398e:	6378      	str	r0, [r7, #52]	; 0x34
 8003990:	e004      	b.n	800399c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003992:	f004 f91d 	bl	8007bd0 <HAL_RCC_GetPCLK1Freq>
 8003996:	4603      	mov	r3, r0
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <HAL_InitTick+0xe8>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	0c9b      	lsrs	r3, r3, #18
 80039a6:	3b01      	subs	r3, #1
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_InitTick+0xec>)
 80039ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_InitTick+0xec>)
 80039b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039b8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80039ba:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_InitTick+0xec>)
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <HAL_InitTick+0xec>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_InitTick+0xec>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_InitTick+0xec>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80039d2:	4818      	ldr	r0, [pc, #96]	; (8003a34 <HAL_InitTick+0xec>)
 80039d4:	f004 fd7e 	bl	80084d4 <HAL_TIM_Base_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80039de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11b      	bne.n	8003a1e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80039e6:	4813      	ldr	r0, [pc, #76]	; (8003a34 <HAL_InitTick+0xec>)
 80039e8:	f004 fdd6 	bl	8008598 <HAL_TIM_Base_Start_IT>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80039f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d111      	bne.n	8003a1e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039fa:	201c      	movs	r0, #28
 80039fc:	f001 fb30 	bl	8005060 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b0f      	cmp	r3, #15
 8003a04:	d808      	bhi.n	8003a18 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003a06:	2200      	movs	r2, #0
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	201c      	movs	r0, #28
 8003a0c:	f001 fb0c 	bl	8005028 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a10:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_InitTick+0xf0>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e002      	b.n	8003a1e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3738      	adds	r7, #56	; 0x38
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	431bde83 	.word	0x431bde83
 8003a34:	2000bdd8 	.word	0x2000bdd8
 8003a38:	20000008 	.word	0x20000008

08003a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <NMI_Handler+0x4>

08003a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a46:	e7fe      	b.n	8003a46 <HardFault_Handler+0x4>

08003a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <MemManage_Handler+0x4>

08003a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a52:	e7fe      	b.n	8003a52 <BusFault_Handler+0x4>

08003a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a58:	e7fe      	b.n	8003a58 <UsageFault_Handler+0x4>

08003a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <DMA1_Stream1_IRQHandler+0x10>)
 8003a6e:	f001 fca5 	bl	80053bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	2000bf4c 	.word	0x2000bf4c

08003a7c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <DMA1_Stream3_IRQHandler+0x10>)
 8003a82:	f001 fc9b 	bl	80053bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	2000bfac 	.word	0x2000bfac

08003a90 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <CAN1_TX_IRQHandler+0x10>)
 8003a96:	f001 f81c 	bl	8004ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20002e44 	.word	0x20002e44

08003aa4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <CAN1_RX0_IRQHandler+0x10>)
 8003aaa:	f001 f812 	bl	8004ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20002e44 	.word	0x20002e44

08003ab8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <CAN1_RX1_IRQHandler+0x10>)
 8003abe:	f001 f808 	bl	8004ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20002e44 	.word	0x20002e44

08003acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ad0:	4802      	ldr	r0, [pc, #8]	; (8003adc <TIM2_IRQHandler+0x10>)
 8003ad2:	f004 fe7f 	bl	80087d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	2000bdd8 	.word	0x2000bdd8

08003ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ae4:	4802      	ldr	r0, [pc, #8]	; (8003af0 <USART3_IRQHandler+0x10>)
 8003ae6:	f005 fb2d 	bl	8009144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2000bec4 	.word	0x2000bec4

08003af4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <OTG_FS_IRQHandler+0x10>)
 8003afa:	f002 f9fa 	bl	8005ef2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20011e38 	.word	0x20011e38

08003b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return 1;
 8003b0c:	2301      	movs	r3, #1
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_kill>:

int _kill(int pid, int sig)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b22:	f01d f9cb 	bl	8020ebc <__errno>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2216      	movs	r2, #22
 8003b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_exit>:

void _exit (int status)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ffe7 	bl	8003b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b4a:	e7fe      	b.n	8003b4a <_exit+0x12>

08003b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e00a      	b.n	8003b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b5e:	f3af 8000 	nop.w
 8003b62:	4601      	mov	r1, r0
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	60ba      	str	r2, [r7, #8]
 8003b6a:	b2ca      	uxtb	r2, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	dbf0      	blt.n	8003b5e <_read+0x12>
  }

  return len;
 8003b7c:	687b      	ldr	r3, [r7, #4]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e009      	b.n	8003bac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	60ba      	str	r2, [r7, #8]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fc93 	bl	80034cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	dbf1      	blt.n	8003b98 <_write+0x12>
  }
  return len;
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_close>:

int _close(int file)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003be6:	605a      	str	r2, [r3, #4]
  return 0;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <_isatty>:

int _isatty(int file)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bfe:	2301      	movs	r3, #1
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <_sbrk+0x5c>)
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <_sbrk+0x60>)
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <_sbrk+0x64>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <_sbrk+0x64>)
 8003c46:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <_sbrk+0x68>)
 8003c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <_sbrk+0x64>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d207      	bcs.n	8003c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c58:	f01d f930 	bl	8020ebc <__errno>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	220c      	movs	r2, #12
 8003c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c66:	e009      	b.n	8003c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c68:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <_sbrk+0x64>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <_sbrk+0x64>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <_sbrk+0x64>)
 8003c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20080000 	.word	0x20080000
 8003c88:	00000400 	.word	0x00000400
 8003c8c:	2000be28 	.word	0x2000be28
 8003c90:	200171b0 	.word	0x200171b0

08003c94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <SystemInit+0x20>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <SystemInit+0x20>)
 8003ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	; 0x30
 8003cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003cbe:	f107 030c 	add.w	r3, r7, #12
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f01d f860 	bl	8020d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ccc:	463b      	mov	r3, r7
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <MX_TIM1_Init+0xb0>)
 8003cda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d02:	2303      	movs	r3, #3
 8003d04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d16:	2300      	movs	r3, #0
 8003d18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	480d      	ldr	r0, [pc, #52]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003d2e:	f004 fcab 	bl	8008688 <HAL_TIM_Encoder_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003d38:	f7ff fc75 	bl	8003626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d40:	2300      	movs	r3, #0
 8003d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d48:	463b      	mov	r3, r7
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4805      	ldr	r0, [pc, #20]	; (8003d64 <MX_TIM1_Init+0xac>)
 8003d4e:	f004 ff29 	bl	8008ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003d58:	f7ff fc65 	bl	8003626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d5c:	bf00      	nop
 8003d5e:	3730      	adds	r7, #48	; 0x30
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	2000be2c 	.word	0x2000be2c
 8003d68:	40010000 	.word	0x40010000

08003d6c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	; 0x30
 8003d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f01d f806 	bl	8020d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d80:	463b      	mov	r3, r7
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003d8a:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <MX_TIM8_Init+0xb0>)
 8003d8e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003d90:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003db6:	2303      	movs	r3, #3
 8003db8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	4619      	mov	r1, r3
 8003de0:	480d      	ldr	r0, [pc, #52]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003de2:	f004 fc51 	bl	8008688 <HAL_TIM_Encoder_Init>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003dec:	f7ff fc1b 	bl	8003626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003df0:	2300      	movs	r3, #0
 8003df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003df4:	2300      	movs	r3, #0
 8003df6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4805      	ldr	r0, [pc, #20]	; (8003e18 <MX_TIM8_Init+0xac>)
 8003e02:	f004 fecf 	bl	8008ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003e0c:	f7ff fc0b 	bl	8003626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003e10:	bf00      	nop
 8003e12:	3730      	adds	r7, #48	; 0x30
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	2000be78 	.word	0x2000be78
 8003e1c:	40010400 	.word	0x40010400

08003e20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	f107 031c 	add.w	r3, r7, #28
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2e      	ldr	r2, [pc, #184]	; (8003ef8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d129      	bne.n	8003e96 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e42:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4a2d      	ldr	r2, [pc, #180]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a27      	ldr	r2, [pc, #156]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003e60:	f043 0310 	orr.w	r3, r3, #16
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b25      	ldr	r3, [pc, #148]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003e72:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e84:	2301      	movs	r3, #1
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e88:	f107 031c 	add.w	r3, r7, #28
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	481c      	ldr	r0, [pc, #112]	; (8003f00 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003e90:	f001 fd0a 	bl	80058a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003e94:	e02c      	b.n	8003ef0 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(tim_encoderHandle->Instance==TIM8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d127      	bne.n	8003ef0 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	4a15      	ldr	r2, [pc, #84]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	6453      	str	r3, [r2, #68]	; 0x44
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ed0:	23c0      	movs	r3, #192	; 0xc0
 8003ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee4:	f107 031c 	add.w	r3, r7, #28
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4807      	ldr	r0, [pc, #28]	; (8003f08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003eec:	f001 fcdc 	bl	80058a8 <HAL_GPIO_Init>
}
 8003ef0:	bf00      	nop
 8003ef2:	3730      	adds	r7, #48	; 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40010400 	.word	0x40010400
 8003f08:	40020800 	.word	0x40020800

08003f0c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003f10:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f12:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <MX_USART3_UART_Init+0x5c>)
 8003f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f32:	220c      	movs	r2, #12
 8003f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f4e:	4805      	ldr	r0, [pc, #20]	; (8003f64 <MX_USART3_UART_Init+0x58>)
 8003f50:	f004 fed4 	bl	8008cfc <HAL_UART_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003f5a:	f7ff fb64 	bl	8003626 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000bec4 	.word	0x2000bec4
 8003f68:	40004800 	.word	0x40004800

08003f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b0ae      	sub	sp, #184	; 0xb8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	2290      	movs	r2, #144	; 0x90
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f01c fefd 	bl	8020d8c <memset>
  if(uartHandle->Instance==USART3)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a56      	ldr	r2, [pc, #344]	; (80040f0 <HAL_UART_MspInit+0x184>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	f040 80a4 	bne.w	80040e6 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fa2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 fe69 	bl	8007c84 <HAL_RCCEx_PeriphCLKConfig>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003fb8:	f7ff fb35 	bl	8003626 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	; (80040f4 <HAL_UART_MspInit+0x188>)
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	4a4c      	ldr	r2, [pc, #304]	; (80040f4 <HAL_UART_MspInit+0x188>)
 8003fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc8:	4b4a      	ldr	r3, [pc, #296]	; (80040f4 <HAL_UART_MspInit+0x188>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fd4:	4b47      	ldr	r3, [pc, #284]	; (80040f4 <HAL_UART_MspInit+0x188>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	4a46      	ldr	r2, [pc, #280]	; (80040f4 <HAL_UART_MspInit+0x188>)
 8003fda:	f043 0308 	orr.w	r3, r3, #8
 8003fde:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe0:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <HAL_UART_MspInit+0x188>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004000:	2303      	movs	r3, #3
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004006:	2307      	movs	r3, #7
 8004008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800400c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004010:	4619      	mov	r1, r3
 8004012:	4839      	ldr	r0, [pc, #228]	; (80040f8 <HAL_UART_MspInit+0x18c>)
 8004014:	f001 fc48 	bl	80058a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004018:	4b38      	ldr	r3, [pc, #224]	; (80040fc <HAL_UART_MspInit+0x190>)
 800401a:	4a39      	ldr	r2, [pc, #228]	; (8004100 <HAL_UART_MspInit+0x194>)
 800401c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004024:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004028:	2200      	movs	r2, #0
 800402a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800402c:	4b33      	ldr	r3, [pc, #204]	; (80040fc <HAL_UART_MspInit+0x190>)
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004032:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004038:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800403a:	4b30      	ldr	r3, [pc, #192]	; (80040fc <HAL_UART_MspInit+0x190>)
 800403c:	2200      	movs	r2, #0
 800403e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004040:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004042:	2200      	movs	r2, #0
 8004044:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004046:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800404c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004050:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004054:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004058:	2200      	movs	r2, #0
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800405c:	4827      	ldr	r0, [pc, #156]	; (80040fc <HAL_UART_MspInit+0x190>)
 800405e:	f001 f80d 	bl	800507c <HAL_DMA_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8004068:	f7ff fadd 	bl	8003626 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a23      	ldr	r2, [pc, #140]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004070:	675a      	str	r2, [r3, #116]	; 0x74
 8004072:	4a22      	ldr	r2, [pc, #136]	; (80040fc <HAL_UART_MspInit+0x190>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_UART_MspInit+0x198>)
 800407a:	4a23      	ldr	r2, [pc, #140]	; (8004108 <HAL_UART_MspInit+0x19c>)
 800407c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800407e:	4b21      	ldr	r3, [pc, #132]	; (8004104 <HAL_UART_MspInit+0x198>)
 8004080:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004084:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004086:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <HAL_UART_MspInit+0x198>)
 8004088:	2240      	movs	r2, #64	; 0x40
 800408a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_UART_MspInit+0x198>)
 800408e:	2200      	movs	r2, #0
 8004090:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004092:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <HAL_UART_MspInit+0x198>)
 8004094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004098:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <HAL_UART_MspInit+0x198>)
 800409c:	2200      	movs	r2, #0
 800409e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <HAL_UART_MspInit+0x198>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <HAL_UART_MspInit+0x198>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_UART_MspInit+0x198>)
 80040ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_UART_MspInit+0x198>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80040ba:	4812      	ldr	r0, [pc, #72]	; (8004104 <HAL_UART_MspInit+0x198>)
 80040bc:	f000 ffde 	bl	800507c <HAL_DMA_Init>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80040c6:	f7ff faae 	bl	8003626 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a0d      	ldr	r2, [pc, #52]	; (8004104 <HAL_UART_MspInit+0x198>)
 80040ce:	671a      	str	r2, [r3, #112]	; 0x70
 80040d0:	4a0c      	ldr	r2, [pc, #48]	; (8004104 <HAL_UART_MspInit+0x198>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80040d6:	2200      	movs	r2, #0
 80040d8:	2105      	movs	r1, #5
 80040da:	2027      	movs	r0, #39	; 0x27
 80040dc:	f000 ffa4 	bl	8005028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040e0:	2027      	movs	r0, #39	; 0x27
 80040e2:	f000 ffbd 	bl	8005060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80040e6:	bf00      	nop
 80040e8:	37b8      	adds	r7, #184	; 0xb8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40004800 	.word	0x40004800
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40020c00 	.word	0x40020c00
 80040fc:	2000bf4c 	.word	0x2000bf4c
 8004100:	40026028 	.word	0x40026028
 8004104:	2000bfac 	.word	0x2000bfac
 8004108:	40026058 	.word	0x40026058

0800410c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800410c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004110:	480d      	ldr	r0, [pc, #52]	; (8004148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004112:	490e      	ldr	r1, [pc, #56]	; (800414c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004114:	4a0e      	ldr	r2, [pc, #56]	; (8004150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004118:	e002      	b.n	8004120 <LoopCopyDataInit>

0800411a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800411c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800411e:	3304      	adds	r3, #4

08004120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004124:	d3f9      	bcc.n	800411a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004126:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004128:	4c0b      	ldr	r4, [pc, #44]	; (8004158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800412a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800412c:	e001      	b.n	8004132 <LoopFillZerobss>

0800412e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800412e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004130:	3204      	adds	r2, #4

08004132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004134:	d3fb      	bcc.n	800412e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004136:	f7ff fdad 	bl	8003c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800413a:	f01c fec5 	bl	8020ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413e:	f7ff f9d9 	bl	80034f4 <main>
  bx  lr    
 8004142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004144:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800414c:	20000b48 	.word	0x20000b48
  ldr r2, =_sidata
 8004150:	08025f88 	.word	0x08025f88
  ldr r2, =_sbss
 8004154:	20000b48 	.word	0x20000b48
  ldr r4, =_ebss
 8004158:	200171b0 	.word	0x200171b0

0800415c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800415c:	e7fe      	b.n	800415c <ADC_IRQHandler>

0800415e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004162:	2003      	movs	r0, #3
 8004164:	f000 ff55 	bl	8005012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004168:	200f      	movs	r0, #15
 800416a:	f7ff fbed 	bl	8003948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800416e:	f7ff fbc3 	bl	80038f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_IncTick+0x20>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_IncTick+0x24>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4413      	add	r3, r2
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_IncTick+0x24>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000000c 	.word	0x2000000c
 800419c:	2000c00c 	.word	0x2000c00c

080041a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return uwTick;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_GetTick+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	2000c00c 	.word	0x2000c00c

080041b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041c0:	f7ff ffee 	bl	80041a0 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d0:	d005      	beq.n	80041de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_Delay+0x44>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041de:	bf00      	nop
 80041e0:	f7ff ffde 	bl	80041a0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d8f7      	bhi.n	80041e0 <HAL_Delay+0x28>
  {
  }
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	2000000c 	.word	0x2000000c

08004200 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0ed      	b.n	80043ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd fc16 	bl	8001a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004234:	f7ff ffb4 	bl	80041a0 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800423a:	e012      	b.n	8004262 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800423c:	f7ff ffb0 	bl	80041a0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b0a      	cmp	r3, #10
 8004248:	d90b      	bls.n	8004262 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2205      	movs	r2, #5
 800425a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0c5      	b.n	80043ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0e5      	beq.n	800423c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0202 	bic.w	r2, r2, #2
 800427e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004280:	f7ff ff8e 	bl	80041a0 <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004286:	e012      	b.n	80042ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004288:	f7ff ff8a 	bl	80041a0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b0a      	cmp	r3, #10
 8004294:	d90b      	bls.n	80042ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2205      	movs	r2, #5
 80042a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e09f      	b.n	80043ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e5      	bne.n	8004288 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	7e1b      	ldrb	r3, [r3, #24]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d108      	bne.n	80042d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e007      	b.n	80042e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	7e5b      	ldrb	r3, [r3, #25]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d108      	bne.n	8004300 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e007      	b.n	8004310 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	7e9b      	ldrb	r3, [r3, #26]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d108      	bne.n	800432a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0220 	orr.w	r2, r2, #32
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e007      	b.n	800433a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0220 	bic.w	r2, r2, #32
 8004338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	7edb      	ldrb	r3, [r3, #27]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d108      	bne.n	8004354 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0210 	bic.w	r2, r2, #16
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e007      	b.n	8004364 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0210 	orr.w	r2, r2, #16
 8004362:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	7f1b      	ldrb	r3, [r3, #28]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d108      	bne.n	800437e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0208 	orr.w	r2, r2, #8
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e007      	b.n	800438e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0208 	bic.w	r2, r2, #8
 800438c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	7f5b      	ldrb	r3, [r3, #29]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d108      	bne.n	80043a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0204 	orr.w	r2, r2, #4
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e007      	b.n	80043b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	ea42 0103 	orr.w	r1, r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	1e5a      	subs	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d003      	beq.n	800441e <HAL_CAN_ConfigFilter+0x26>
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b02      	cmp	r3, #2
 800441a:	f040 80c7 	bne.w	80045ac <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a69      	ldr	r2, [pc, #420]	; (80045c8 <HAL_CAN_ConfigFilter+0x1d0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d001      	beq.n	800442c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004428:	4b68      	ldr	r3, [pc, #416]	; (80045cc <HAL_CAN_ConfigFilter+0x1d4>)
 800442a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4a63      	ldr	r2, [pc, #396]	; (80045cc <HAL_CAN_ConfigFilter+0x1d4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d111      	bne.n	8004468 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800444a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	431a      	orrs	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2201      	movs	r2, #1
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d123      	bne.n	80044da <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	43db      	mvns	r3, r3
 800449c:	401a      	ands	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	3248      	adds	r2, #72	; 0x48
 80044ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044d0:	6979      	ldr	r1, [r7, #20]
 80044d2:	3348      	adds	r3, #72	; 0x48
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	440b      	add	r3, r1
 80044d8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d122      	bne.n	8004528 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004502:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3248      	adds	r2, #72	; 0x48
 8004508:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800451c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	3348      	adds	r3, #72	; 0x48
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	43db      	mvns	r3, r3
 800453a:	401a      	ands	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004542:	e007      	b.n	8004554 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	431a      	orrs	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	43db      	mvns	r3, r3
 8004566:	401a      	ands	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800456e:	e007      	b.n	8004580 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	431a      	orrs	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	431a      	orrs	r2, r3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800459e:	f023 0201 	bic.w	r2, r3, #1
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e006      	b.n	80045ba <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40003400 	.word	0x40003400
 80045cc:	40006400 	.word	0x40006400

080045d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d12e      	bne.n	8004642 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045fc:	f7ff fdd0 	bl	80041a0 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004602:	e012      	b.n	800462a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004604:	f7ff fdcc 	bl	80041a0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b0a      	cmp	r3, #10
 8004610:	d90b      	bls.n	800462a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2205      	movs	r2, #5
 8004622:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e012      	b.n	8004650 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e006      	b.n	8004650 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004676:	7ffb      	ldrb	r3, [r7, #31]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d003      	beq.n	8004684 <HAL_CAN_AddTxMessage+0x2c>
 800467c:	7ffb      	ldrb	r3, [r7, #31]
 800467e:	2b02      	cmp	r3, #2
 8004680:	f040 80ad 	bne.w	80047de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8095 	beq.w	80047ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	0e1b      	lsrs	r3, r3, #24
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80046ae:	2201      	movs	r2, #1
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	409a      	lsls	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	6809      	ldr	r1, [r1, #0]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3318      	adds	r3, #24
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	440b      	add	r3, r1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e00f      	b.n	80046fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80046f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3318      	adds	r3, #24
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	440b      	add	r3, r1
 80046fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	3318      	adds	r3, #24
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	440b      	add	r3, r1
 800470c:	3304      	adds	r3, #4
 800470e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	7d1b      	ldrb	r3, [r3, #20]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d111      	bne.n	800473c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	3318      	adds	r3, #24
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	4413      	add	r3, r2
 8004724:	3304      	adds	r3, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	6811      	ldr	r1, [r2, #0]
 800472c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	3318      	adds	r3, #24
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	440b      	add	r3, r1
 8004738:	3304      	adds	r3, #4
 800473a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3307      	adds	r3, #7
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	061a      	lsls	r2, r3, #24
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3306      	adds	r3, #6
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3305      	adds	r3, #5
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	4313      	orrs	r3, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	3204      	adds	r2, #4
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	4610      	mov	r0, r2
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	6811      	ldr	r1, [r2, #0]
 8004764:	ea43 0200 	orr.w	r2, r3, r0
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	440b      	add	r3, r1
 800476e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004772:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3303      	adds	r3, #3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	061a      	lsls	r2, r3, #24
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3302      	adds	r3, #2
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3301      	adds	r3, #1
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4313      	orrs	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	7812      	ldrb	r2, [r2, #0]
 8004794:	4610      	mov	r0, r2
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	6811      	ldr	r1, [r2, #0]
 800479a:	ea43 0200 	orr.w	r2, r3, r0
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	440b      	add	r3, r1
 80047a4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80047a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	3318      	adds	r3, #24
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	4413      	add	r3, r2
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	6811      	ldr	r1, [r2, #0]
 80047bc:	f043 0201 	orr.w	r2, r3, #1
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	3318      	adds	r3, #24
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	440b      	add	r3, r1
 80047c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e00e      	b.n	80047ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e006      	b.n	80047ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3724      	adds	r7, #36	; 0x24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800480a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800480c:	7afb      	ldrb	r3, [r7, #11]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d002      	beq.n	8004818 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004812:	7afb      	ldrb	r3, [r7, #11]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d11d      	bne.n	8004854 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3301      	adds	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3301      	adds	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004854:	68fb      	ldr	r3, [r7, #12]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004862:	b480      	push	{r7}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004876:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d003      	beq.n	8004886 <HAL_CAN_GetRxMessage+0x24>
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	2b02      	cmp	r3, #2
 8004882:	f040 80f3 	bne.w	8004a6c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10e      	bne.n	80048aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d116      	bne.n	80048c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0e7      	b.n	8004a7a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0d8      	b.n	8004a7a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	331b      	adds	r3, #27
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	4413      	add	r3, r2
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0204 	and.w	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	331b      	adds	r3, #27
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	4413      	add	r3, r2
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	0d5b      	lsrs	r3, r3, #21
 80048f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e00b      	b.n	8004918 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	331b      	adds	r3, #27
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4413      	add	r3, r2
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	08db      	lsrs	r3, r3, #3
 8004910:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	331b      	adds	r3, #27
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	4413      	add	r3, r2
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0202 	and.w	r2, r3, #2
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	331b      	adds	r3, #27
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 020f 	and.w	r2, r3, #15
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	331b      	adds	r3, #27
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4413      	add	r3, r2
 8004952:	3304      	adds	r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	b2da      	uxtb	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	331b      	adds	r3, #27
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	4413      	add	r3, r2
 800496a:	3304      	adds	r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	0c1b      	lsrs	r3, r3, #16
 8004970:	b29a      	uxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	4413      	add	r3, r2
 8004980:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	4413      	add	r3, r2
 8004996:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	0a1a      	lsrs	r2, r3, #8
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	0c1a      	lsrs	r2, r3, #16
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	3302      	adds	r3, #2
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	0e1a      	lsrs	r2, r3, #24
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	3303      	adds	r3, #3
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	3304      	adds	r3, #4
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	0a1a      	lsrs	r2, r3, #8
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	3305      	adds	r3, #5
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0c1a      	lsrs	r2, r3, #16
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	3306      	adds	r3, #6
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	0e1a      	lsrs	r2, r3, #24
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	3307      	adds	r3, #7
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d108      	bne.n	8004a58 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0220 	orr.w	r2, r2, #32
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	e007      	b.n	8004a68 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0220 	orr.w	r2, r2, #32
 8004a66:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e006      	b.n	8004a7a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a96:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d002      	beq.n	8004aa4 <HAL_CAN_ActivateNotification+0x1e>
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d109      	bne.n	8004ab8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6959      	ldr	r1, [r3, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e006      	b.n	8004ac6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b08a      	sub	sp, #40	; 0x28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d07c      	beq.n	8004c12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d023      	beq.n	8004b6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2201      	movs	r2, #1
 8004b28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fd fb0b 	bl	8002150 <HAL_CAN_TxMailbox0CompleteCallback>
 8004b3a:	e016      	b.n	8004b6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d004      	beq.n	8004b50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4e:	e00c      	b.n	8004b6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	e002      	b.n	8004b6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fd fafd 	bl	8002164 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d024      	beq.n	8004bbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fd faf5 	bl	8002178 <HAL_CAN_TxMailbox1CompleteCallback>
 8004b8e:	e016      	b.n	8004bbe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d004      	beq.n	8004ba4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba2:	e00c      	b.n	8004bbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb6:	e002      	b.n	8004bbe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fd fae7 	bl	800218c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d024      	beq.n	8004c12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fd fadf 	bl	80021a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8004be2:	e016      	b.n	8004c12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d004      	beq.n	8004bf8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf6:	e00c      	b.n	8004c12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	e002      	b.n	8004c12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fd fad1 	bl	80021b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00c      	beq.n	8004c36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d006      	beq.n	8004c58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2208      	movs	r2, #8
 8004c50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8f4 	bl	8004e40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fd faa9 	bl	80021c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00c      	beq.n	8004c9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2210      	movs	r2, #16
 8004c98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d006      	beq.n	8004cbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8d6 	bl	8004e68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f8bd 	bl	8004e54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2210      	movs	r2, #16
 8004cf4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8c0 	bl	8004e7c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2208      	movs	r2, #8
 8004d16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f8b9 	bl	8004e90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d07b      	beq.n	8004e20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d072      	beq.n	8004e18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	f043 0302 	orr.w	r3, r3, #2
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d043      	beq.n	8004e18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d03e      	beq.n	8004e18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da0:	2b60      	cmp	r3, #96	; 0x60
 8004da2:	d02b      	beq.n	8004dfc <HAL_CAN_IRQHandler+0x32a>
 8004da4:	2b60      	cmp	r3, #96	; 0x60
 8004da6:	d82e      	bhi.n	8004e06 <HAL_CAN_IRQHandler+0x334>
 8004da8:	2b50      	cmp	r3, #80	; 0x50
 8004daa:	d022      	beq.n	8004df2 <HAL_CAN_IRQHandler+0x320>
 8004dac:	2b50      	cmp	r3, #80	; 0x50
 8004dae:	d82a      	bhi.n	8004e06 <HAL_CAN_IRQHandler+0x334>
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d019      	beq.n	8004de8 <HAL_CAN_IRQHandler+0x316>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d826      	bhi.n	8004e06 <HAL_CAN_IRQHandler+0x334>
 8004db8:	2b30      	cmp	r3, #48	; 0x30
 8004dba:	d010      	beq.n	8004dde <HAL_CAN_IRQHandler+0x30c>
 8004dbc:	2b30      	cmp	r3, #48	; 0x30
 8004dbe:	d822      	bhi.n	8004e06 <HAL_CAN_IRQHandler+0x334>
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d002      	beq.n	8004dca <HAL_CAN_IRQHandler+0x2f8>
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d005      	beq.n	8004dd4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004dc8:	e01d      	b.n	8004e06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f043 0308 	orr.w	r3, r3, #8
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dd2:	e019      	b.n	8004e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	f043 0310 	orr.w	r3, r3, #16
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ddc:	e014      	b.n	8004e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f043 0320 	orr.w	r3, r3, #32
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004de6:	e00f      	b.n	8004e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004df0:	e00a      	b.n	8004e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dfa:	e005      	b.n	8004e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e04:	e000      	b.n	8004e08 <HAL_CAN_IRQHandler+0x336>
            break;
 8004e06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f836 	bl	8004ea4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e38:	bf00      	nop
 8004e3a:	3728      	adds	r7, #40	; 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <__NVIC_SetPriorityGrouping+0x44>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ee6:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	60d3      	str	r3, [r2, #12]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	e000ed00 	.word	0xe000ed00
 8004efc:	05fa0000 	.word	0x05fa0000

08004f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f04:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <__NVIC_GetPriorityGrouping+0x18>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	f003 0307 	and.w	r3, r3, #7
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	db0b      	blt.n	8004f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	f003 021f 	and.w	r2, r3, #31
 8004f34:	4907      	ldr	r1, [pc, #28]	; (8004f54 <__NVIC_EnableIRQ+0x38>)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	e000e100 	.word	0xe000e100

08004f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db0a      	blt.n	8004f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	490c      	ldr	r1, [pc, #48]	; (8004fa4 <__NVIC_SetPriority+0x4c>)
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	0112      	lsls	r2, r2, #4
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f80:	e00a      	b.n	8004f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	4908      	ldr	r1, [pc, #32]	; (8004fa8 <__NVIC_SetPriority+0x50>)
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	3b04      	subs	r3, #4
 8004f90:	0112      	lsls	r2, r2, #4
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	440b      	add	r3, r1
 8004f96:	761a      	strb	r2, [r3, #24]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000e100 	.word	0xe000e100
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f1c3 0307 	rsb	r3, r3, #7
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	bf28      	it	cs
 8004fca:	2304      	movcs	r3, #4
 8004fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2b06      	cmp	r3, #6
 8004fd4:	d902      	bls.n	8004fdc <NVIC_EncodePriority+0x30>
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3b03      	subs	r3, #3
 8004fda:	e000      	b.n	8004fde <NVIC_EncodePriority+0x32>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43da      	mvns	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	401a      	ands	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ff4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	43d9      	mvns	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005004:	4313      	orrs	r3, r2
         );
}
 8005006:	4618      	mov	r0, r3
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff ff4c 	bl	8004eb8 <__NVIC_SetPriorityGrouping>
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800503a:	f7ff ff61 	bl	8004f00 <__NVIC_GetPriorityGrouping>
 800503e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	6978      	ldr	r0, [r7, #20]
 8005046:	f7ff ffb1 	bl	8004fac <NVIC_EncodePriority>
 800504a:	4602      	mov	r2, r0
 800504c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff ff80 	bl	8004f58 <__NVIC_SetPriority>
}
 8005058:	bf00      	nop
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ff54 	bl	8004f1c <__NVIC_EnableIRQ>
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005088:	f7ff f88a 	bl	80041a0 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e099      	b.n	80051cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050b8:	e00f      	b.n	80050da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ba:	f7ff f871 	bl	80041a0 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b05      	cmp	r3, #5
 80050c6:	d908      	bls.n	80050da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2203      	movs	r2, #3
 80050d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e078      	b.n	80051cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e8      	bne.n	80050ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4b38      	ldr	r3, [pc, #224]	; (80051d4 <HAL_DMA_Init+0x158>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005106:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800511e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	2b04      	cmp	r3, #4
 8005132:	d107      	bne.n	8005144 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	4313      	orrs	r3, r2
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b04      	cmp	r3, #4
 800516c:	d117      	bne.n	800519e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00e      	beq.n	800519e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fb15 	bl	80057b0 <DMA_CheckFifoParam>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2240      	movs	r2, #64	; 0x40
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800519a:	2301      	movs	r3, #1
 800519c:	e016      	b.n	80051cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 facc 	bl	8005744 <DMA_CalcBaseAndBitshift>
 80051ac:	4603      	mov	r3, r0
 80051ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	223f      	movs	r2, #63	; 0x3f
 80051b6:	409a      	lsls	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	e010803f 	.word	0xe010803f

080051d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_DMA_Start_IT+0x26>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e048      	b.n	8005290 <HAL_DMA_Start_IT+0xb8>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d137      	bne.n	8005282 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fa5e 	bl	80056e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005230:	223f      	movs	r2, #63	; 0x3f
 8005232:	409a      	lsls	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0216 	orr.w	r2, r2, #22
 8005246:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005256:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0208 	orr.w	r2, r2, #8
 800526e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e005      	b.n	800528e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800528a:	2302      	movs	r3, #2
 800528c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052a6:	f7fe ff7b 	bl	80041a0 <HAL_GetTick>
 80052aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d008      	beq.n	80052ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2280      	movs	r2, #128	; 0x80
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e052      	b.n	8005370 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0216 	bic.w	r2, r2, #22
 80052d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695a      	ldr	r2, [r3, #20]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_DMA_Abort+0x62>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0208 	bic.w	r2, r2, #8
 8005308:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800531a:	e013      	b.n	8005344 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800531c:	f7fe ff40 	bl	80041a0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b05      	cmp	r3, #5
 8005328:	d90c      	bls.n	8005344 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2203      	movs	r2, #3
 8005334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e015      	b.n	8005370 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e4      	bne.n	800531c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	223f      	movs	r2, #63	; 0x3f
 8005358:	409a      	lsls	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d004      	beq.n	8005396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2280      	movs	r2, #128	; 0x80
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e00c      	b.n	80053b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2205      	movs	r2, #5
 800539a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80053c8:	4b8e      	ldr	r3, [pc, #568]	; (8005604 <HAL_DMA_IRQHandler+0x248>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a8e      	ldr	r2, [pc, #568]	; (8005608 <HAL_DMA_IRQHandler+0x24c>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	0a9b      	lsrs	r3, r3, #10
 80053d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	2208      	movs	r2, #8
 80053e8:	409a      	lsls	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01a      	beq.n	8005428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0204 	bic.w	r2, r2, #4
 800540e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005414:	2208      	movs	r2, #8
 8005416:	409a      	lsls	r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542c:	2201      	movs	r2, #1
 800542e:	409a      	lsls	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d012      	beq.n	800545e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f043 0202 	orr.w	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	2204      	movs	r2, #4
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d012      	beq.n	8005494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005480:	2204      	movs	r2, #4
 8005482:	409a      	lsls	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	f043 0204 	orr.w	r2, r3, #4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005498:	2210      	movs	r2, #16
 800549a:	409a      	lsls	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d043      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03c      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	2210      	movs	r2, #16
 80054b8:	409a      	lsls	r2, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d018      	beq.n	80054fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d024      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
 80054ea:	e01f      	b.n	800552c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	4798      	blx	r3
 80054fc:	e016      	b.n	800552c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d107      	bne.n	800551c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0208 	bic.w	r2, r2, #8
 800551a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	2220      	movs	r2, #32
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 808f 	beq.w	800565c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8087 	beq.w	800565c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005552:	2220      	movs	r2, #32
 8005554:	409a      	lsls	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b05      	cmp	r3, #5
 8005564:	d136      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0216 	bic.w	r2, r2, #22
 8005574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <HAL_DMA_IRQHandler+0x1da>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0208 	bic.w	r2, r2, #8
 80055a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055aa:	223f      	movs	r2, #63	; 0x3f
 80055ac:	409a      	lsls	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d07e      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
        }
        return;
 80055d2:	e079      	b.n	80056c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01d      	beq.n	800561e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10d      	bne.n	800560c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d031      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	e02c      	b.n	800565c <HAL_DMA_IRQHandler+0x2a0>
 8005602:	bf00      	nop
 8005604:	20000004 	.word	0x20000004
 8005608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d023      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
 800561c:	e01e      	b.n	800565c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10f      	bne.n	800564c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0210 	bic.w	r2, r2, #16
 800563a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	2b00      	cmp	r3, #0
 8005662:	d032      	beq.n	80056ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d022      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2205      	movs	r2, #5
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	3301      	adds	r3, #1
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	429a      	cmp	r2, r3
 8005692:	d307      	bcc.n	80056a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f2      	bne.n	8005688 <HAL_DMA_IRQHandler+0x2cc>
 80056a2:	e000      	b.n	80056a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4798      	blx	r3
 80056c6:	e000      	b.n	80056ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80056c8:	bf00      	nop
    }
  }
}
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005704:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d108      	bne.n	8005728 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005726:	e007      	b.n	8005738 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	3b10      	subs	r3, #16
 8005754:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <DMA_CalcBaseAndBitshift+0x60>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800575e:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d908      	bls.n	8005784 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <DMA_CalcBaseAndBitshift+0x68>)
 800577a:	4013      	ands	r3, r2
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	659a      	str	r2, [r3, #88]	; 0x58
 8005782:	e006      	b.n	8005792 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	4b08      	ldr	r3, [pc, #32]	; (80057ac <DMA_CalcBaseAndBitshift+0x68>)
 800578c:	4013      	ands	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	aaaaaaab 	.word	0xaaaaaaab
 80057a8:	080245e0 	.word	0x080245e0
 80057ac:	fffffc00 	.word	0xfffffc00

080057b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11f      	bne.n	800580a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d856      	bhi.n	800587e <DMA_CheckFifoParam+0xce>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <DMA_CheckFifoParam+0x28>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	080057e9 	.word	0x080057e9
 80057dc:	080057fb 	.word	0x080057fb
 80057e0:	080057e9 	.word	0x080057e9
 80057e4:	0800587f 	.word	0x0800587f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d046      	beq.n	8005882 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f8:	e043      	b.n	8005882 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005802:	d140      	bne.n	8005886 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005808:	e03d      	b.n	8005886 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	d121      	bne.n	8005858 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d837      	bhi.n	800588a <DMA_CheckFifoParam+0xda>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <DMA_CheckFifoParam+0x70>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005831 	.word	0x08005831
 8005824:	08005837 	.word	0x08005837
 8005828:	08005831 	.word	0x08005831
 800582c:	08005849 	.word	0x08005849
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e030      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d025      	beq.n	800588e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005846:	e022      	b.n	800588e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005850:	d11f      	bne.n	8005892 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005856:	e01c      	b.n	8005892 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d903      	bls.n	8005866 <DMA_CheckFifoParam+0xb6>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d003      	beq.n	800586c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005864:	e018      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
      break;
 800586a:	e015      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00e      	beq.n	8005896 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e00b      	b.n	8005896 <DMA_CheckFifoParam+0xe6>
      break;
 800587e:	bf00      	nop
 8005880:	e00a      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005882:	bf00      	nop
 8005884:	e008      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005886:	bf00      	nop
 8005888:	e006      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 800588a:	bf00      	nop
 800588c:	e004      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 800588e:	bf00      	nop
 8005890:	e002      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;   
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <DMA_CheckFifoParam+0xe8>
      break;
 8005896:	bf00      	nop
    }
  } 
  
  return status; 
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop

080058a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	; 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	e175      	b.n	8005bb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058c8:	2201      	movs	r2, #1
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4013      	ands	r3, r2
 80058da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	f040 8164 	bne.w	8005bae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d005      	beq.n	80058fe <HAL_GPIO_Init+0x56>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d130      	bne.n	8005960 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	2203      	movs	r2, #3
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43db      	mvns	r3, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4013      	ands	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4313      	orrs	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005934:	2201      	movs	r2, #1
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	43db      	mvns	r3, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4013      	ands	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f003 0201 	and.w	r2, r3, #1
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4313      	orrs	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	2b03      	cmp	r3, #3
 800596a:	d017      	beq.n	800599c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	2203      	movs	r2, #3
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d123      	bne.n	80059f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	08da      	lsrs	r2, r3, #3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3208      	adds	r2, #8
 80059b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	220f      	movs	r2, #15
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4313      	orrs	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	08da      	lsrs	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3208      	adds	r2, #8
 80059ea:	69b9      	ldr	r1, [r7, #24]
 80059ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	2203      	movs	r2, #3
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 0203 	and.w	r2, r3, #3
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80be 	beq.w	8005bae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a32:	4b66      	ldr	r3, [pc, #408]	; (8005bcc <HAL_GPIO_Init+0x324>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	4a65      	ldr	r2, [pc, #404]	; (8005bcc <HAL_GPIO_Init+0x324>)
 8005a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a3e:	4b63      	ldr	r3, [pc, #396]	; (8005bcc <HAL_GPIO_Init+0x324>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a4a:	4a61      	ldr	r2, [pc, #388]	; (8005bd0 <HAL_GPIO_Init+0x328>)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	3302      	adds	r3, #2
 8005a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	220f      	movs	r2, #15
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a58      	ldr	r2, [pc, #352]	; (8005bd4 <HAL_GPIO_Init+0x32c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d037      	beq.n	8005ae6 <HAL_GPIO_Init+0x23e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a57      	ldr	r2, [pc, #348]	; (8005bd8 <HAL_GPIO_Init+0x330>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d031      	beq.n	8005ae2 <HAL_GPIO_Init+0x23a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a56      	ldr	r2, [pc, #344]	; (8005bdc <HAL_GPIO_Init+0x334>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02b      	beq.n	8005ade <HAL_GPIO_Init+0x236>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a55      	ldr	r2, [pc, #340]	; (8005be0 <HAL_GPIO_Init+0x338>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d025      	beq.n	8005ada <HAL_GPIO_Init+0x232>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a54      	ldr	r2, [pc, #336]	; (8005be4 <HAL_GPIO_Init+0x33c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01f      	beq.n	8005ad6 <HAL_GPIO_Init+0x22e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a53      	ldr	r2, [pc, #332]	; (8005be8 <HAL_GPIO_Init+0x340>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d019      	beq.n	8005ad2 <HAL_GPIO_Init+0x22a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a52      	ldr	r2, [pc, #328]	; (8005bec <HAL_GPIO_Init+0x344>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_GPIO_Init+0x226>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a51      	ldr	r2, [pc, #324]	; (8005bf0 <HAL_GPIO_Init+0x348>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00d      	beq.n	8005aca <HAL_GPIO_Init+0x222>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a50      	ldr	r2, [pc, #320]	; (8005bf4 <HAL_GPIO_Init+0x34c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d007      	beq.n	8005ac6 <HAL_GPIO_Init+0x21e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a4f      	ldr	r2, [pc, #316]	; (8005bf8 <HAL_GPIO_Init+0x350>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d101      	bne.n	8005ac2 <HAL_GPIO_Init+0x21a>
 8005abe:	2309      	movs	r3, #9
 8005ac0:	e012      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ac2:	230a      	movs	r3, #10
 8005ac4:	e010      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	e00e      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005aca:	2307      	movs	r3, #7
 8005acc:	e00c      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ace:	2306      	movs	r3, #6
 8005ad0:	e00a      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ad2:	2305      	movs	r3, #5
 8005ad4:	e008      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ad6:	2304      	movs	r3, #4
 8005ad8:	e006      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ada:	2303      	movs	r3, #3
 8005adc:	e004      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e002      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <HAL_GPIO_Init+0x240>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	f002 0203 	and.w	r2, r2, #3
 8005aee:	0092      	lsls	r2, r2, #2
 8005af0:	4093      	lsls	r3, r2
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005af8:	4935      	ldr	r1, [pc, #212]	; (8005bd0 <HAL_GPIO_Init+0x328>)
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	089b      	lsrs	r3, r3, #2
 8005afe:	3302      	adds	r3, #2
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b06:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <HAL_GPIO_Init+0x354>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b2a:	4a34      	ldr	r2, [pc, #208]	; (8005bfc <HAL_GPIO_Init+0x354>)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b30:	4b32      	ldr	r3, [pc, #200]	; (8005bfc <HAL_GPIO_Init+0x354>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <HAL_GPIO_Init+0x354>)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b5a:	4b28      	ldr	r3, [pc, #160]	; (8005bfc <HAL_GPIO_Init+0x354>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	43db      	mvns	r3, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	4013      	ands	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b7e:	4a1f      	ldr	r2, [pc, #124]	; (8005bfc <HAL_GPIO_Init+0x354>)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b84:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <HAL_GPIO_Init+0x354>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ba8:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <HAL_GPIO_Init+0x354>)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	f67f ae86 	bls.w	80058c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	3724      	adds	r7, #36	; 0x24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	40013800 	.word	0x40013800
 8005bd4:	40020000 	.word	0x40020000
 8005bd8:	40020400 	.word	0x40020400
 8005bdc:	40020800 	.word	0x40020800
 8005be0:	40020c00 	.word	0x40020c00
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40021400 	.word	0x40021400
 8005bec:	40021800 	.word	0x40021800
 8005bf0:	40021c00 	.word	0x40021c00
 8005bf4:	40022000 	.word	0x40022000
 8005bf8:	40022400 	.word	0x40022400
 8005bfc:	40013c00 	.word	0x40013c00

08005c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	807b      	strh	r3, [r7, #2]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c10:	787b      	ldrb	r3, [r7, #1]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c16:	887a      	ldrh	r2, [r7, #2]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c1c:	e003      	b.n	8005c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c1e:	887b      	ldrh	r3, [r7, #2]
 8005c20:	041a      	lsls	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	619a      	str	r2, [r3, #24]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c44:	887a      	ldrh	r2, [r7, #2]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	041a      	lsls	r2, r3, #16
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	43d9      	mvns	r1, r3
 8005c50:	887b      	ldrh	r3, [r7, #2]
 8005c52:	400b      	ands	r3, r1
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	619a      	str	r2, [r3, #24]
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c68:	b08f      	sub	sp, #60	; 0x3c
 8005c6a:	af0a      	add	r7, sp, #40	; 0x28
 8005c6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e116      	b.n	8005ea6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f00b f83c 	bl	8010d10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f004 fd4f 	bl	800a75a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	687e      	ldr	r6, [r7, #4]
 8005cc4:	466d      	mov	r5, sp
 8005cc6:	f106 0410 	add.w	r4, r6, #16
 8005cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cda:	1d33      	adds	r3, r6, #4
 8005cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cde:	6838      	ldr	r0, [r7, #0]
 8005ce0:	f004 fc30 	bl	800a544 <USB_CoreInit>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e0d7      	b.n	8005ea6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f004 fd3d 	bl	800a77c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
 8005d06:	e04a      	b.n	8005d9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d08:	7bfa      	ldrb	r2, [r7, #15]
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	333d      	adds	r3, #61	; 0x3d
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4613      	mov	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	440b      	add	r3, r1
 8005d2a:	333c      	adds	r3, #60	; 0x3c
 8005d2c:	7bfa      	ldrb	r2, [r7, #15]
 8005d2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d30:	7bfa      	ldrb	r2, [r7, #15]
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	b298      	uxth	r0, r3
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	3344      	adds	r3, #68	; 0x44
 8005d44:	4602      	mov	r2, r0
 8005d46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d48:	7bfa      	ldrb	r2, [r7, #15]
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3340      	adds	r3, #64	; 0x40
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d5c:	7bfa      	ldrb	r2, [r7, #15]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	3348      	adds	r3, #72	; 0x48
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	334c      	adds	r3, #76	; 0x4c
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d84:	7bfa      	ldrb	r2, [r7, #15]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	3354      	adds	r3, #84	; 0x54
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
 8005d9e:	7bfa      	ldrb	r2, [r7, #15]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d3af      	bcc.n	8005d08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005da8:	2300      	movs	r3, #0
 8005daa:	73fb      	strb	r3, [r7, #15]
 8005dac:	e044      	b.n	8005e38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005dae:	7bfa      	ldrb	r2, [r7, #15]
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005dc4:	7bfa      	ldrb	r2, [r7, #15]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005dd6:	7bfa      	ldrb	r2, [r7, #15]
 8005dd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005dda:	7bfa      	ldrb	r2, [r7, #15]
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005df0:	7bfa      	ldrb	r2, [r7, #15]
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e06:	7bfa      	ldrb	r2, [r7, #15]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e1c:	7bfa      	ldrb	r2, [r7, #15]
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	3301      	adds	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
 8005e38:	7bfa      	ldrb	r2, [r7, #15]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d3b5      	bcc.n	8005dae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	687e      	ldr	r6, [r7, #4]
 8005e4a:	466d      	mov	r5, sp
 8005e4c:	f106 0410 	add.w	r4, r6, #16
 8005e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e60:	1d33      	adds	r3, r6, #4
 8005e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e64:	6838      	ldr	r0, [r7, #0]
 8005e66:	f004 fcd5 	bl	800a814 <USB_DevInit>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e014      	b.n	8005ea6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d102      	bne.n	8005e9a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 f97b 	bl	8007190 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f005 fe23 	bl	800baea <USB_DevDisconnect>

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005eae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_PCD_Start+0x16>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e012      	b.n	8005eea <HAL_PCD_Start+0x3c>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f004 fc31 	bl	800a738 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f005 fde4 	bl	800baa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ef2:	b590      	push	{r4, r7, lr}
 8005ef4:	b08d      	sub	sp, #52	; 0x34
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f005 fea2 	bl	800bc52 <USB_GetMode>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 84b7 	bne.w	8006884 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f005 fe06 	bl	800bb2c <USB_ReadInterrupts>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 84ad 	beq.w	8006882 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	0a1b      	lsrs	r3, r3, #8
 8005f32:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f005 fdf3 	bl	800bb2c <USB_ReadInterrupts>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d107      	bne.n	8005f60 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f002 0202 	and.w	r2, r2, #2
 8005f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f005 fde1 	bl	800bb2c <USB_ReadInterrupts>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d161      	bne.n	8006038 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0210 	bic.w	r2, r2, #16
 8005f82:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f003 020f 	and.w	r2, r3, #15
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	0c5b      	lsrs	r3, r3, #17
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d124      	bne.n	8005ffa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d035      	beq.n	8006028 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6a38      	ldr	r0, [r7, #32]
 8005fd0:	f005 fc18 	bl	800b804 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	091b      	lsrs	r3, r3, #4
 8005fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fe0:	441a      	add	r2, r3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	6a1a      	ldr	r2, [r3, #32]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	091b      	lsrs	r3, r3, #4
 8005fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ff2:	441a      	add	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
 8005ff8:	e016      	b.n	8006028 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	0c5b      	lsrs	r3, r3, #17
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	2b06      	cmp	r3, #6
 8006004:	d110      	bne.n	8006028 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800600c:	2208      	movs	r2, #8
 800600e:	4619      	mov	r1, r3
 8006010:	6a38      	ldr	r0, [r7, #32]
 8006012:	f005 fbf7 	bl	800b804 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	6a1a      	ldr	r2, [r3, #32]
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006022:	441a      	add	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0210 	orr.w	r2, r2, #16
 8006036:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f005 fd75 	bl	800bb2c <USB_ReadInterrupts>
 8006042:	4603      	mov	r3, r0
 8006044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006048:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800604c:	f040 80a7 	bne.w	800619e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f005 fd7a 	bl	800bb52 <USB_ReadDevAllOutEpInterrupt>
 800605e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006060:	e099      	b.n	8006196 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 808e 	beq.w	800618a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	4611      	mov	r1, r2
 8006078:	4618      	mov	r0, r3
 800607a:	f005 fd9e 	bl	800bbba <USB_ReadDevOutEPInterrupt>
 800607e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00c      	beq.n	80060a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	461a      	mov	r2, r3
 8006098:	2301      	movs	r3, #1
 800609a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800609c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fef0 	bl	8006e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	461a      	mov	r2, r3
 80060bc:	2308      	movs	r3, #8
 80060be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80060c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 ffc6 	bl	8007054 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	461a      	mov	r2, r3
 80060e0:	2310      	movs	r3, #16
 80060e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d030      	beq.n	8006150 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f6:	2b80      	cmp	r3, #128	; 0x80
 80060f8:	d109      	bne.n	800610e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800610c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800610e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	3304      	adds	r3, #4
 8006122:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	78db      	ldrb	r3, [r3, #3]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d108      	bne.n	800613e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	b2db      	uxtb	r3, r3
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f00a ff0d 	bl	8010f58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	461a      	mov	r2, r3
 800614c:	2302      	movs	r3, #2
 800614e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	461a      	mov	r2, r3
 8006168:	2320      	movs	r3, #32
 800616a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006182:	461a      	mov	r2, r3
 8006184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006188:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	3301      	adds	r3, #1
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	f47f af62 	bne.w	8006062 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f005 fcc2 	bl	800bb2c <USB_ReadInterrupts>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061b2:	f040 80db 	bne.w	800636c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f005 fce3 	bl	800bb86 <USB_ReadDevAllInEpInterrupt>
 80061c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80061c6:	e0cd      	b.n	8006364 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80c2 	beq.w	8006358 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f005 fd09 	bl	800bbf6 <USB_ReadDevInEPInterrupt>
 80061e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d057      	beq.n	80062a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	2201      	movs	r2, #1
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	43db      	mvns	r3, r3
 800620a:	69f9      	ldr	r1, [r7, #28]
 800620c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006210:	4013      	ands	r3, r2
 8006212:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	461a      	mov	r2, r3
 8006222:	2301      	movs	r3, #1
 8006224:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d132      	bne.n	8006294 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	4613      	mov	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	334c      	adds	r3, #76	; 0x4c
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006244:	4613      	mov	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4403      	add	r3, r0
 800624e:	3348      	adds	r3, #72	; 0x48
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4419      	add	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	4613      	mov	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4403      	add	r3, r0
 8006262:	334c      	adds	r3, #76	; 0x4c
 8006264:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d113      	bne.n	8006294 <HAL_PCD_IRQHandler+0x3a2>
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	3354      	adds	r3, #84	; 0x54
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800628c:	461a      	mov	r2, r3
 800628e:	2101      	movs	r1, #1
 8006290:	f005 fd12 	bl	800bcb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	b2db      	uxtb	r3, r3
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f00a fdd7 	bl	8010e4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b6:	461a      	mov	r2, r3
 80062b8:	2308      	movs	r3, #8
 80062ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d2:	461a      	mov	r2, r3
 80062d4:	2310      	movs	r3, #16
 80062d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ee:	461a      	mov	r2, r3
 80062f0:	2340      	movs	r3, #64	; 0x40
 80062f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d023      	beq.n	8006346 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80062fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006300:	6a38      	ldr	r0, [r7, #32]
 8006302:	f004 fbe5 	bl	800aad0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006308:	4613      	mov	r3, r2
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	3338      	adds	r3, #56	; 0x38
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	3304      	adds	r3, #4
 8006318:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	78db      	ldrb	r3, [r3, #3]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d108      	bne.n	8006334 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2200      	movs	r2, #0
 8006326:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	b2db      	uxtb	r3, r3
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f00a fe24 	bl	8010f7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	461a      	mov	r2, r3
 8006342:	2302      	movs	r3, #2
 8006344:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fd08 	bl	8006d68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	3301      	adds	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	f47f af2e 	bne.w	80061c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4618      	mov	r0, r3
 8006372:	f005 fbdb 	bl	800bb2c <USB_ReadInterrupts>
 8006376:	4603      	mov	r3, r0
 8006378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006380:	d122      	bne.n	80063c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006390:	f023 0301 	bic.w	r3, r3, #1
 8006394:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800639c:	2b01      	cmp	r3, #1
 800639e:	d108      	bne.n	80063b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80063a8:	2100      	movs	r1, #0
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f00a ff9e 	bl	80112ec <HAL_PCDEx_LPM_Callback>
 80063b0:	e002      	b.n	80063b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f00a fdc2 	bl	8010f3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80063c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f005 fbad 	bl	800bb2c <USB_ReadInterrupts>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063dc:	d112      	bne.n	8006404 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d102      	bne.n	80063f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f00a fd7e 	bl	8010ef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695a      	ldr	r2, [r3, #20]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006402:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f005 fb8f 	bl	800bb2c <USB_ReadInterrupts>
 800640e:	4603      	mov	r3, r0
 8006410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006418:	d121      	bne.n	800645e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695a      	ldr	r2, [r3, #20]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006428:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d111      	bne.n	8006458 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	f003 020f 	and.w	r2, r3, #15
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800644e:	2101      	movs	r1, #1
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f00a ff4b 	bl	80112ec <HAL_PCDEx_LPM_Callback>
 8006456:	e002      	b.n	800645e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f00a fd49 	bl	8010ef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f005 fb62 	bl	800bb2c <USB_ReadInterrupts>
 8006468:	4603      	mov	r3, r0
 800646a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	f040 80b7 	bne.w	80065e4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2110      	movs	r1, #16
 8006490:	4618      	mov	r0, r3
 8006492:	f004 fb1d 	bl	800aad0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006496:	2300      	movs	r3, #0
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800649a:	e046      	b.n	800652a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	461a      	mov	r2, r3
 80064aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064dc:	461a      	mov	r2, r3
 80064de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006502:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	440a      	add	r2, r1
 800651a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006522:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	3301      	adds	r3, #1
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006530:	429a      	cmp	r2, r3
 8006532:	d3b3      	bcc.n	800649c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006542:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006546:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d016      	beq.n	800657e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006560:	f043 030b 	orr.w	r3, r3, #11
 8006564:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006576:	f043 030b 	orr.w	r3, r3, #11
 800657a:	6453      	str	r3, [r2, #68]	; 0x44
 800657c:	e015      	b.n	80065aa <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006584:	695a      	ldr	r2, [r3, #20]
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	4619      	mov	r1, r3
 800658e:	f242 032b 	movw	r3, #8235	; 0x202b
 8006592:	4313      	orrs	r3, r2
 8006594:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065a4:	f043 030b 	orr.w	r3, r3, #11
 80065a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065ce:	461a      	mov	r2, r3
 80065d0:	f005 fb72 	bl	800bcb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695a      	ldr	r2, [r3, #20]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80065e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f005 fa9f 	bl	800bb2c <USB_ReadInterrupts>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f8:	d124      	bne.n	8006644 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f005 fb36 	bl	800bc70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f004 fade 	bl	800abca <USB_GetDevSpeed>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681c      	ldr	r4, [r3, #0]
 800661a:	f001 facd 	bl	8007bb8 <HAL_RCC_GetHCLKFreq>
 800661e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	4620      	mov	r0, r4
 800662a:	f003 ffe3 	bl	800a5f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f00a fc35 	bl	8010e9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006642:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f005 fa6f 	bl	800bb2c <USB_ReadInterrupts>
 800664e:	4603      	mov	r3, r0
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d10a      	bne.n	800666e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f00a fc12 	bl	8010e82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f002 0208 	and.w	r2, r2, #8
 800666c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f005 fa5a 	bl	800bb2c <USB_ReadInterrupts>
 8006678:	4603      	mov	r3, r0
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b80      	cmp	r3, #128	; 0x80
 8006680:	d122      	bne.n	80066c8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800668e:	2301      	movs	r3, #1
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
 8006692:	e014      	b.n	80066be <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006698:	4613      	mov	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d105      	bne.n	80066b8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fb27 	bl	8006d06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	3301      	adds	r3, #1
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3e5      	bcc.n	8006694 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f005 fa2d 	bl	800bb2c <USB_ReadInterrupts>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066dc:	d13b      	bne.n	8006756 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066de:	2301      	movs	r3, #1
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
 80066e2:	e02b      	b.n	800673c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	4613      	mov	r3, r2
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	440b      	add	r3, r1
 8006702:	3340      	adds	r3, #64	; 0x40
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d115      	bne.n	8006736 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800670a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800670c:	2b00      	cmp	r3, #0
 800670e:	da12      	bge.n	8006736 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006714:	4613      	mov	r3, r2
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	333f      	adds	r3, #63	; 0x3f
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800672c:	b2db      	uxtb	r3, r3
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fae8 	bl	8006d06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	3301      	adds	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	429a      	cmp	r2, r3
 8006744:	d3ce      	bcc.n	80066e4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695a      	ldr	r2, [r3, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f005 f9e6 	bl	800bb2c <USB_ReadInterrupts>
 8006760:	4603      	mov	r3, r0
 8006762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676a:	d155      	bne.n	8006818 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800676c:	2301      	movs	r3, #1
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
 8006770:	e045      	b.n	80067fe <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006786:	4613      	mov	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d12e      	bne.n	80067f8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800679a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800679c:	2b00      	cmp	r3, #0
 800679e:	da2b      	bge.n	80067f8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80067ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d121      	bne.n	80067f8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b8:	4613      	mov	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80067c6:	2201      	movs	r2, #1
 80067c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067f4:	6053      	str	r3, [r2, #4]
            break;
 80067f6:	e007      	b.n	8006808 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	3301      	adds	r3, #1
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	429a      	cmp	r2, r3
 8006806:	d3b4      	bcc.n	8006772 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f005 f985 	bl	800bb2c <USB_ReadInterrupts>
 8006822:	4603      	mov	r3, r0
 8006824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682c:	d10a      	bne.n	8006844 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f00a fbb6 	bl	8010fa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4618      	mov	r0, r3
 800684a:	f005 f96f 	bl	800bb2c <USB_ReadInterrupts>
 800684e:	4603      	mov	r3, r0
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b04      	cmp	r3, #4
 8006856:	d115      	bne.n	8006884 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f00a fba6 	bl	8010fbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	e000      	b.n	8006884 <HAL_PCD_IRQHandler+0x992>
      return;
 8006882:	bf00      	nop
    }
  }
}
 8006884:	3734      	adds	r7, #52	; 0x34
 8006886:	46bd      	mov	sp, r7
 8006888:	bd90      	pop	{r4, r7, pc}

0800688a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_PCD_SetAddress+0x1a>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e013      	b.n	80068cc <HAL_PCD_SetAddress+0x42>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	78fa      	ldrb	r2, [r7, #3]
 80068b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	4611      	mov	r1, r2
 80068bc:	4618      	mov	r0, r3
 80068be:	f005 f8cd 	bl	800ba5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	4608      	mov	r0, r1
 80068de:	4611      	mov	r1, r2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	70fb      	strb	r3, [r7, #3]
 80068e6:	460b      	mov	r3, r1
 80068e8:	803b      	strh	r3, [r7, #0]
 80068ea:	4613      	mov	r3, r2
 80068ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da0f      	bge.n	800691a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	f003 020f 	and.w	r2, r3, #15
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	3338      	adds	r3, #56	; 0x38
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	3304      	adds	r3, #4
 8006910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	705a      	strb	r2, [r3, #1]
 8006918:	e00f      	b.n	800693a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	4613      	mov	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	b2da      	uxtb	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006946:	883a      	ldrh	r2, [r7, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	78ba      	ldrb	r2, [r7, #2]
 8006950:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	785b      	ldrb	r3, [r3, #1]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006964:	78bb      	ldrb	r3, [r7, #2]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d102      	bne.n	8006970 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_PCD_EP_Open+0xaa>
 800697a:	2302      	movs	r3, #2
 800697c:	e00e      	b.n	800699c <HAL_PCD_EP_Open+0xc8>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	4618      	mov	r0, r3
 800698e:	f004 f941 	bl	800ac14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800699a:	7afb      	ldrb	r3, [r7, #11]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da0f      	bge.n	80069d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	4613      	mov	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	3338      	adds	r3, #56	; 0x38
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4413      	add	r3, r2
 80069cc:	3304      	adds	r3, #4
 80069ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	705a      	strb	r2, [r3, #1]
 80069d6:	e00f      	b.n	80069f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	f003 020f 	and.w	r2, r3, #15
 80069de:	4613      	mov	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_PCD_EP_Close+0x6e>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e00e      	b.n	8006a30 <HAL_PCD_EP_Close+0x8c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f004 f97f 	bl	800ad24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	460b      	mov	r3, r1
 8006a46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	f003 020f 	and.w	r2, r3, #15
 8006a4e:	4613      	mov	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3304      	adds	r3, #4
 8006a60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2200      	movs	r2, #0
 8006a72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2200      	movs	r2, #0
 8006a78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d102      	bne.n	8006a94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a94:	7afb      	ldrb	r3, [r7, #11]
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6979      	ldr	r1, [r7, #20]
 8006aac:	f004 fc66 	bl	800b37c <USB_EP0StartXfer>
 8006ab0:	e008      	b.n	8006ac4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	6979      	ldr	r1, [r7, #20]
 8006ac0:	f004 fa0c 	bl	800aedc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006af0:	681b      	ldr	r3, [r3, #0]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b0e:	7afb      	ldrb	r3, [r7, #11]
 8006b10:	f003 020f 	and.w	r2, r3, #15
 8006b14:	4613      	mov	r3, r2
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	3338      	adds	r3, #56	; 0x38
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	3304      	adds	r3, #4
 8006b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2200      	movs	r2, #0
 8006b36:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d102      	bne.n	8006b58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6979      	ldr	r1, [r7, #20]
 8006b70:	f004 fc04 	bl	800b37c <USB_EP0StartXfer>
 8006b74:	e008      	b.n	8006b88 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	6979      	ldr	r1, [r7, #20]
 8006b84:	f004 f9aa 	bl	800aedc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	f003 020f 	and.w	r2, r3, #15
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d901      	bls.n	8006bb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e050      	b.n	8006c52 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	da0f      	bge.n	8006bd8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	f003 020f 	and.w	r2, r3, #15
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	3338      	adds	r3, #56	; 0x38
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4413      	add	r3, r2
 8006bcc:	3304      	adds	r3, #4
 8006bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	705a      	strb	r2, [r3, #1]
 8006bd6:	e00d      	b.n	8006bf4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4413      	add	r3, r2
 8006bea:	3304      	adds	r3, #4
 8006bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_PCD_EP_SetStall+0x82>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e01e      	b.n	8006c52 <HAL_PCD_EP_SetStall+0xc0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68f9      	ldr	r1, [r7, #12]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f004 fe46 	bl	800b8b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	b2d9      	uxtb	r1, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c42:	461a      	mov	r2, r3
 8006c44:	f005 f838 	bl	800bcb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	f003 020f 	and.w	r2, r3, #15
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d901      	bls.n	8006c78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e042      	b.n	8006cfe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	da0f      	bge.n	8006ca0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	f003 020f 	and.w	r2, r3, #15
 8006c86:	4613      	mov	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	3338      	adds	r3, #56	; 0x38
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	3304      	adds	r3, #4
 8006c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	705a      	strb	r2, [r3, #1]
 8006c9e:	e00f      	b.n	8006cc0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_PCD_EP_ClrStall+0x86>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e00e      	b.n	8006cfe <HAL_PCD_EP_ClrStall+0xa4>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68f9      	ldr	r1, [r7, #12]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f004 fe4e 	bl	800b990 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da0c      	bge.n	8006d34 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	f003 020f 	and.w	r2, r3, #15
 8006d20:	4613      	mov	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	3338      	adds	r3, #56	; 0x38
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3304      	adds	r3, #4
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e00c      	b.n	8006d4e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	f003 020f 	and.w	r2, r3, #15
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4413      	add	r3, r2
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f004 fc6d 	bl	800b634 <USB_EPStopXfer>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	; 0x28
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	3338      	adds	r3, #56	; 0x38
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a1a      	ldr	r2, [r3, #32]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d901      	bls.n	8006da0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e06c      	b.n	8006e7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	699a      	ldr	r2, [r3, #24]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d902      	bls.n	8006dbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3303      	adds	r3, #3
 8006dc0:	089b      	lsrs	r3, r3, #2
 8006dc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dc4:	e02b      	b.n	8006e1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d902      	bls.n	8006de2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	3303      	adds	r3, #3
 8006de6:	089b      	lsrs	r3, r3, #2
 8006de8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6919      	ldr	r1, [r3, #16]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4603      	mov	r3, r0
 8006e00:	6978      	ldr	r0, [r7, #20]
 8006e02:	f004 fcc1 	bl	800b788 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	441a      	add	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d809      	bhi.n	8006e48 <PCD_WriteEmptyTxFifo+0xe0>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1a      	ldr	r2, [r3, #32]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d203      	bcs.n	8006e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1be      	bne.n	8006dc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d811      	bhi.n	8006e78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	6939      	ldr	r1, [r7, #16]
 8006e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e74:	4013      	ands	r3, r2
 8006e76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	333c      	adds	r3, #60	; 0x3c
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d17b      	bne.n	8006fb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d015      	beq.n	8006ef0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4a61      	ldr	r2, [pc, #388]	; (800704c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	f240 80b9 	bls.w	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80b3 	beq.w	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eec:	6093      	str	r3, [r2, #8]
 8006eee:	e0a7      	b.n	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d009      	beq.n	8006f0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	461a      	mov	r2, r3
 8006f08:	2320      	movs	r3, #32
 8006f0a:	6093      	str	r3, [r2, #8]
 8006f0c:	e098      	b.n	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f040 8093 	bne.w	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	4a4b      	ldr	r2, [pc, #300]	; (800704c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d90f      	bls.n	8006f42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3e:	6093      	str	r3, [r2, #8]
 8006f40:	e07e      	b.n	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4413      	add	r3, r2
 8006f54:	3304      	adds	r3, #4
 8006f56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	0159      	lsls	r1, r3, #5
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	440b      	add	r3, r1
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d114      	bne.n	8006fa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2101      	movs	r1, #1
 8006f90:	f004 fe92 	bl	800bcb8 <USB_EP0_OutStart>
 8006f94:	e006      	b.n	8006fa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	441a      	add	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f009 ff34 	bl	8010e18 <HAL_PCD_DataOutStageCallback>
 8006fb0:	e046      	b.n	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4a26      	ldr	r2, [pc, #152]	; (8007050 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d124      	bne.n	8007004 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd6:	6093      	str	r3, [r2, #8]
 8006fd8:	e032      	b.n	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2320      	movs	r3, #32
 8006ff4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f009 ff0b 	bl	8010e18 <HAL_PCD_DataOutStageCallback>
 8007002:	e01d      	b.n	8007040 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d114      	bne.n	8007034 <PCD_EP_OutXfrComplete_int+0x1b0>
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	4613      	mov	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d108      	bne.n	8007034 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800702c:	461a      	mov	r2, r3
 800702e:	2100      	movs	r1, #0
 8007030:	f004 fe42 	bl	800bcb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f009 feec 	bl	8010e18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	4f54300a 	.word	0x4f54300a
 8007050:	4f54310a 	.word	0x4f54310a

08007054 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	333c      	adds	r3, #60	; 0x3c
 800706c:	3304      	adds	r3, #4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4a15      	ldr	r2, [pc, #84]	; (80070dc <PCD_EP_OutSetupPacket_int+0x88>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d90e      	bls.n	80070a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a0:	461a      	mov	r2, r3
 80070a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f009 fea3 	bl	8010df4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4a0a      	ldr	r2, [pc, #40]	; (80070dc <PCD_EP_OutSetupPacket_int+0x88>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d90c      	bls.n	80070d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d108      	bne.n	80070d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80070c8:	461a      	mov	r2, r3
 80070ca:	2101      	movs	r1, #1
 80070cc:	f004 fdf4 	bl	800bcb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	4f54300a 	.word	0x4f54300a

080070e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
 80070ec:	4613      	mov	r3, r2
 80070ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d107      	bne.n	800710e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80070fe:	883b      	ldrh	r3, [r7, #0]
 8007100:	0419      	lsls	r1, r3, #16
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	430a      	orrs	r2, r1
 800710a:	629a      	str	r2, [r3, #40]	; 0x28
 800710c:	e028      	b.n	8007160 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	0c1b      	lsrs	r3, r3, #16
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4413      	add	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]
 8007120:	e00d      	b.n	800713e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	3340      	adds	r3, #64	; 0x40
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	4413      	add	r3, r2
 8007136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	3301      	adds	r3, #1
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	7bfa      	ldrb	r2, [r7, #15]
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	3b01      	subs	r3, #1
 8007144:	429a      	cmp	r2, r3
 8007146:	d3ec      	bcc.n	8007122 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007148:	883b      	ldrh	r3, [r7, #0]
 800714a:	0418      	lsls	r0, r3, #16
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6819      	ldr	r1, [r3, #0]
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	3b01      	subs	r3, #1
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	4302      	orrs	r2, r0
 8007158:	3340      	adds	r3, #64	; 0x40
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	460b      	mov	r3, r1
 8007178:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	887a      	ldrh	r2, [r7, #2]
 8007180:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	10000003 	.word	0x10000003

080071d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80071e2:	4b23      	ldr	r3, [pc, #140]	; (8007270 <HAL_PWREx_EnableOverDrive+0x98>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a22      	ldr	r2, [pc, #136]	; (8007270 <HAL_PWREx_EnableOverDrive+0x98>)
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
 80071ee:	4b20      	ldr	r3, [pc, #128]	; (8007270 <HAL_PWREx_EnableOverDrive+0x98>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80071fa:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <HAL_PWREx_EnableOverDrive+0x9c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007204:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007206:	f7fc ffcb 	bl	80041a0 <HAL_GetTick>
 800720a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800720c:	e009      	b.n	8007222 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800720e:	f7fc ffc7 	bl	80041a0 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800721c:	d901      	bls.n	8007222 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e022      	b.n	8007268 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007222:	4b14      	ldr	r3, [pc, #80]	; (8007274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722e:	d1ee      	bne.n	800720e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007230:	4b10      	ldr	r3, [pc, #64]	; (8007274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a0f      	ldr	r2, [pc, #60]	; (8007274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800723c:	f7fc ffb0 	bl	80041a0 <HAL_GetTick>
 8007240:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007242:	e009      	b.n	8007258 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007244:	f7fc ffac 	bl	80041a0 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007252:	d901      	bls.n	8007258 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e007      	b.n	8007268 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007258:	4b06      	ldr	r3, [pc, #24]	; (8007274 <HAL_PWREx_EnableOverDrive+0x9c>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007264:	d1ee      	bne.n	8007244 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40023800 	.word	0x40023800
 8007274:	40007000 	.word	0x40007000

08007278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007280:	2300      	movs	r3, #0
 8007282:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e29b      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 8087 	beq.w	80073aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800729c:	4b96      	ldr	r3, [pc, #600]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d00c      	beq.n	80072c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072a8:	4b93      	ldr	r3, [pc, #588]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 030c 	and.w	r3, r3, #12
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d112      	bne.n	80072da <HAL_RCC_OscConfig+0x62>
 80072b4:	4b90      	ldr	r3, [pc, #576]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c0:	d10b      	bne.n	80072da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c2:	4b8d      	ldr	r3, [pc, #564]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d06c      	beq.n	80073a8 <HAL_RCC_OscConfig+0x130>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d168      	bne.n	80073a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e275      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e2:	d106      	bne.n	80072f2 <HAL_RCC_OscConfig+0x7a>
 80072e4:	4b84      	ldr	r3, [pc, #528]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a83      	ldr	r2, [pc, #524]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	e02e      	b.n	8007350 <HAL_RCC_OscConfig+0xd8>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10c      	bne.n	8007314 <HAL_RCC_OscConfig+0x9c>
 80072fa:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a7e      	ldr	r2, [pc, #504]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	4b7c      	ldr	r3, [pc, #496]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7b      	ldr	r2, [pc, #492]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800730c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	e01d      	b.n	8007350 <HAL_RCC_OscConfig+0xd8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800731c:	d10c      	bne.n	8007338 <HAL_RCC_OscConfig+0xc0>
 800731e:	4b76      	ldr	r3, [pc, #472]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a75      	ldr	r2, [pc, #468]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	4b73      	ldr	r3, [pc, #460]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a72      	ldr	r2, [pc, #456]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e00b      	b.n	8007350 <HAL_RCC_OscConfig+0xd8>
 8007338:	4b6f      	ldr	r3, [pc, #444]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a6e      	ldr	r2, [pc, #440]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800733e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	4b6c      	ldr	r3, [pc, #432]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a6b      	ldr	r2, [pc, #428]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800734a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800734e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d013      	beq.n	8007380 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fc ff22 	bl	80041a0 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007360:	f7fc ff1e 	bl	80041a0 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b64      	cmp	r3, #100	; 0x64
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e229      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007372:	4b61      	ldr	r3, [pc, #388]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCC_OscConfig+0xe8>
 800737e:	e014      	b.n	80073aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7fc ff0e 	bl	80041a0 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007388:	f7fc ff0a 	bl	80041a0 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b64      	cmp	r3, #100	; 0x64
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e215      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800739a:	4b57      	ldr	r3, [pc, #348]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0x110>
 80073a6:	e000      	b.n	80073aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d069      	beq.n	800748a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073b6:	4b50      	ldr	r3, [pc, #320]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073c2:	4b4d      	ldr	r3, [pc, #308]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 030c 	and.w	r3, r3, #12
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d11c      	bne.n	8007408 <HAL_RCC_OscConfig+0x190>
 80073ce:	4b4a      	ldr	r3, [pc, #296]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d116      	bne.n	8007408 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073da:	4b47      	ldr	r3, [pc, #284]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_RCC_OscConfig+0x17a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d001      	beq.n	80073f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e1e9      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f2:	4b41      	ldr	r3, [pc, #260]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	493d      	ldr	r1, [pc, #244]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007406:	e040      	b.n	800748a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d023      	beq.n	8007458 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007410:	4b39      	ldr	r3, [pc, #228]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a38      	ldr	r2, [pc, #224]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007416:	f043 0301 	orr.w	r3, r3, #1
 800741a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fc fec0 	bl	80041a0 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007424:	f7fc febc 	bl	80041a0 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e1c7      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007436:	4b30      	ldr	r3, [pc, #192]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0f0      	beq.n	8007424 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007442:	4b2d      	ldr	r3, [pc, #180]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	4929      	ldr	r1, [pc, #164]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007452:	4313      	orrs	r3, r2
 8007454:	600b      	str	r3, [r1, #0]
 8007456:	e018      	b.n	800748a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007458:	4b27      	ldr	r3, [pc, #156]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a26      	ldr	r2, [pc, #152]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fc fe9c 	bl	80041a0 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800746c:	f7fc fe98 	bl	80041a0 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e1a3      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800747e:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d038      	beq.n	8007508 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d019      	beq.n	80074d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800749e:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a2:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074aa:	f7fc fe79 	bl	80041a0 <HAL_GetTick>
 80074ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074b2:	f7fc fe75 	bl	80041a0 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e180      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c4:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0f0      	beq.n	80074b2 <HAL_RCC_OscConfig+0x23a>
 80074d0:	e01a      	b.n	8007508 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d6:	4a08      	ldr	r2, [pc, #32]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074d8:	f023 0301 	bic.w	r3, r3, #1
 80074dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074de:	f7fc fe5f 	bl	80041a0 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e4:	e00a      	b.n	80074fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074e6:	f7fc fe5b 	bl	80041a0 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d903      	bls.n	80074fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e166      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
 80074f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074fc:	4b92      	ldr	r3, [pc, #584]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80074fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1ee      	bne.n	80074e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80a4 	beq.w	800765e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007516:	4b8c      	ldr	r3, [pc, #560]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10d      	bne.n	800753e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007522:	4b89      	ldr	r3, [pc, #548]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	4a88      	ldr	r2, [pc, #544]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800752c:	6413      	str	r3, [r2, #64]	; 0x40
 800752e:	4b86      	ldr	r3, [pc, #536]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800753e:	4b83      	ldr	r3, [pc, #524]	; (800774c <HAL_RCC_OscConfig+0x4d4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d118      	bne.n	800757c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800754a:	4b80      	ldr	r3, [pc, #512]	; (800774c <HAL_RCC_OscConfig+0x4d4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a7f      	ldr	r2, [pc, #508]	; (800774c <HAL_RCC_OscConfig+0x4d4>)
 8007550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007556:	f7fc fe23 	bl	80041a0 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755e:	f7fc fe1f 	bl	80041a0 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b64      	cmp	r3, #100	; 0x64
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e12a      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007570:	4b76      	ldr	r3, [pc, #472]	; (800774c <HAL_RCC_OscConfig+0x4d4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0f0      	beq.n	800755e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d106      	bne.n	8007592 <HAL_RCC_OscConfig+0x31a>
 8007584:	4b70      	ldr	r3, [pc, #448]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007588:	4a6f      	ldr	r2, [pc, #444]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	6713      	str	r3, [r2, #112]	; 0x70
 8007590:	e02d      	b.n	80075ee <HAL_RCC_OscConfig+0x376>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10c      	bne.n	80075b4 <HAL_RCC_OscConfig+0x33c>
 800759a:	4b6b      	ldr	r3, [pc, #428]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 800759c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759e:	4a6a      	ldr	r2, [pc, #424]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	6713      	str	r3, [r2, #112]	; 0x70
 80075a6:	4b68      	ldr	r3, [pc, #416]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075aa:	4a67      	ldr	r2, [pc, #412]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	6713      	str	r3, [r2, #112]	; 0x70
 80075b2:	e01c      	b.n	80075ee <HAL_RCC_OscConfig+0x376>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b05      	cmp	r3, #5
 80075ba:	d10c      	bne.n	80075d6 <HAL_RCC_OscConfig+0x35e>
 80075bc:	4b62      	ldr	r3, [pc, #392]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	4a61      	ldr	r2, [pc, #388]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075c2:	f043 0304 	orr.w	r3, r3, #4
 80075c6:	6713      	str	r3, [r2, #112]	; 0x70
 80075c8:	4b5f      	ldr	r3, [pc, #380]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075cc:	4a5e      	ldr	r2, [pc, #376]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6713      	str	r3, [r2, #112]	; 0x70
 80075d4:	e00b      	b.n	80075ee <HAL_RCC_OscConfig+0x376>
 80075d6:	4b5c      	ldr	r3, [pc, #368]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	4a5b      	ldr	r2, [pc, #364]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	6713      	str	r3, [r2, #112]	; 0x70
 80075e2:	4b59      	ldr	r3, [pc, #356]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e6:	4a58      	ldr	r2, [pc, #352]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80075e8:	f023 0304 	bic.w	r3, r3, #4
 80075ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d015      	beq.n	8007622 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f6:	f7fc fdd3 	bl	80041a0 <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075fc:	e00a      	b.n	8007614 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075fe:	f7fc fdcf 	bl	80041a0 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	f241 3288 	movw	r2, #5000	; 0x1388
 800760c:	4293      	cmp	r3, r2
 800760e:	d901      	bls.n	8007614 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e0d8      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007614:	4b4c      	ldr	r3, [pc, #304]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0ee      	beq.n	80075fe <HAL_RCC_OscConfig+0x386>
 8007620:	e014      	b.n	800764c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007622:	f7fc fdbd 	bl	80041a0 <HAL_GetTick>
 8007626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007628:	e00a      	b.n	8007640 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800762a:	f7fc fdb9 	bl	80041a0 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f241 3288 	movw	r2, #5000	; 0x1388
 8007638:	4293      	cmp	r3, r2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e0c2      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007640:	4b41      	ldr	r3, [pc, #260]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1ee      	bne.n	800762a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007652:	4b3d      	ldr	r3, [pc, #244]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	4a3c      	ldr	r2, [pc, #240]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800765c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80ae 	beq.w	80077c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007668:	4b37      	ldr	r3, [pc, #220]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 030c 	and.w	r3, r3, #12
 8007670:	2b08      	cmp	r3, #8
 8007672:	d06d      	beq.n	8007750 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d14b      	bne.n	8007714 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767c:	4b32      	ldr	r3, [pc, #200]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a31      	ldr	r2, [pc, #196]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007688:	f7fc fd8a 	bl	80041a0 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007690:	f7fc fd86 	bl	80041a0 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e091      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a2:	4b29      	ldr	r3, [pc, #164]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f0      	bne.n	8007690 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	019b      	lsls	r3, r3, #6
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	3b01      	subs	r3, #1
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	061b      	lsls	r3, r3, #24
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	071b      	lsls	r3, r3, #28
 80076da:	491b      	ldr	r1, [pc, #108]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076e0:	4b19      	ldr	r3, [pc, #100]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a18      	ldr	r2, [pc, #96]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 80076e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fc fd58 	bl	80041a0 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f4:	f7fc fd54 	bl	80041a0 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e05f      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f0      	beq.n	80076f4 <HAL_RCC_OscConfig+0x47c>
 8007712:	e057      	b.n	80077c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a0b      	ldr	r2, [pc, #44]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 800771a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800771e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007720:	f7fc fd3e 	bl	80041a0 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	e008      	b.n	800773a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007728:	f7fc fd3a 	bl	80041a0 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b02      	cmp	r3, #2
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e045      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800773a:	4b03      	ldr	r3, [pc, #12]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f0      	bne.n	8007728 <HAL_RCC_OscConfig+0x4b0>
 8007746:	e03d      	b.n	80077c4 <HAL_RCC_OscConfig+0x54c>
 8007748:	40023800 	.word	0x40023800
 800774c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007750:	4b1f      	ldr	r3, [pc, #124]	; (80077d0 <HAL_RCC_OscConfig+0x558>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d030      	beq.n	80077c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007768:	429a      	cmp	r2, r3
 800776a:	d129      	bne.n	80077c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007776:	429a      	cmp	r2, r3
 8007778:	d122      	bne.n	80077c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007780:	4013      	ands	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007786:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007788:	4293      	cmp	r3, r2
 800778a:	d119      	bne.n	80077c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	3b01      	subs	r3, #1
 800779a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800779c:	429a      	cmp	r2, r3
 800779e:	d10f      	bne.n	80077c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d107      	bne.n	80077c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077bc:	429a      	cmp	r2, r3
 80077be:	d001      	beq.n	80077c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40023800 	.word	0x40023800

080077d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0d0      	b.n	800798e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077ec:	4b6a      	ldr	r3, [pc, #424]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d910      	bls.n	800781c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fa:	4b67      	ldr	r3, [pc, #412]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f023 020f 	bic.w	r2, r3, #15
 8007802:	4965      	ldr	r1, [pc, #404]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	4313      	orrs	r3, r2
 8007808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800780a:	4b63      	ldr	r3, [pc, #396]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d001      	beq.n	800781c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e0b8      	b.n	800798e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d020      	beq.n	800786a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007834:	4b59      	ldr	r3, [pc, #356]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	4a58      	ldr	r2, [pc, #352]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 800783a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800783e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0308 	and.w	r3, r3, #8
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800784c:	4b53      	ldr	r3, [pc, #332]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4a52      	ldr	r2, [pc, #328]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007856:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007858:	4b50      	ldr	r3, [pc, #320]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	494d      	ldr	r1, [pc, #308]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007866:	4313      	orrs	r3, r2
 8007868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d040      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d107      	bne.n	800788e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787e:	4b47      	ldr	r3, [pc, #284]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d115      	bne.n	80078b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e07f      	b.n	800798e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d107      	bne.n	80078a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007896:	4b41      	ldr	r3, [pc, #260]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e073      	b.n	800798e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078a6:	4b3d      	ldr	r3, [pc, #244]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e06b      	b.n	800798e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078b6:	4b39      	ldr	r3, [pc, #228]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f023 0203 	bic.w	r2, r3, #3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	4936      	ldr	r1, [pc, #216]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c8:	f7fc fc6a 	bl	80041a0 <HAL_GetTick>
 80078cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ce:	e00a      	b.n	80078e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d0:	f7fc fc66 	bl	80041a0 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	; 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e053      	b.n	800798e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e6:	4b2d      	ldr	r3, [pc, #180]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 020c 	and.w	r2, r3, #12
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d1eb      	bne.n	80078d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078f8:	4b27      	ldr	r3, [pc, #156]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d210      	bcs.n	8007928 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007906:	4b24      	ldr	r3, [pc, #144]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f023 020f 	bic.w	r2, r3, #15
 800790e:	4922      	ldr	r1, [pc, #136]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	4313      	orrs	r3, r2
 8007914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007916:	4b20      	ldr	r3, [pc, #128]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d001      	beq.n	8007928 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e032      	b.n	800798e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007934:	4b19      	ldr	r3, [pc, #100]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	4916      	ldr	r1, [pc, #88]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007942:	4313      	orrs	r3, r2
 8007944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007952:	4b12      	ldr	r3, [pc, #72]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	490e      	ldr	r1, [pc, #56]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007962:	4313      	orrs	r3, r2
 8007964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007966:	f000 f821 	bl	80079ac <HAL_RCC_GetSysClockFreq>
 800796a:	4602      	mov	r2, r0
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	091b      	lsrs	r3, r3, #4
 8007972:	f003 030f 	and.w	r3, r3, #15
 8007976:	490a      	ldr	r1, [pc, #40]	; (80079a0 <HAL_RCC_ClockConfig+0x1cc>)
 8007978:	5ccb      	ldrb	r3, [r1, r3]
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	4a09      	ldr	r2, [pc, #36]	; (80079a4 <HAL_RCC_ClockConfig+0x1d0>)
 8007980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007982:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <HAL_RCC_ClockConfig+0x1d4>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f7fb ffde 	bl	8003948 <HAL_InitTick>

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	40023c00 	.word	0x40023c00
 800799c:	40023800 	.word	0x40023800
 80079a0:	080245c8 	.word	0x080245c8
 80079a4:	20000004 	.word	0x20000004
 80079a8:	20000008 	.word	0x20000008

080079ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b0:	b094      	sub	sp, #80	; 0x50
 80079b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	647b      	str	r3, [r7, #68]	; 0x44
 80079b8:	2300      	movs	r3, #0
 80079ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079bc:	2300      	movs	r3, #0
 80079be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079c4:	4b79      	ldr	r3, [pc, #484]	; (8007bac <HAL_RCC_GetSysClockFreq+0x200>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 030c 	and.w	r3, r3, #12
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d00d      	beq.n	80079ec <HAL_RCC_GetSysClockFreq+0x40>
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	f200 80e1 	bhi.w	8007b98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x34>
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d003      	beq.n	80079e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079de:	e0db      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079e0:	4b73      	ldr	r3, [pc, #460]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x204>)
 80079e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079e4:	e0db      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079e6:	4b73      	ldr	r3, [pc, #460]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x208>)
 80079e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079ea:	e0d8      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079ec:	4b6f      	ldr	r3, [pc, #444]	; (8007bac <HAL_RCC_GetSysClockFreq+0x200>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079f6:	4b6d      	ldr	r3, [pc, #436]	; (8007bac <HAL_RCC_GetSysClockFreq+0x200>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d063      	beq.n	8007aca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a02:	4b6a      	ldr	r3, [pc, #424]	; (8007bac <HAL_RCC_GetSysClockFreq+0x200>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	099b      	lsrs	r3, r3, #6
 8007a08:	2200      	movs	r2, #0
 8007a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a14:	633b      	str	r3, [r7, #48]	; 0x30
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a1e:	4622      	mov	r2, r4
 8007a20:	462b      	mov	r3, r5
 8007a22:	f04f 0000 	mov.w	r0, #0
 8007a26:	f04f 0100 	mov.w	r1, #0
 8007a2a:	0159      	lsls	r1, r3, #5
 8007a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a30:	0150      	lsls	r0, r2, #5
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4621      	mov	r1, r4
 8007a38:	1a51      	subs	r1, r2, r1
 8007a3a:	6139      	str	r1, [r7, #16]
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	f04f 0300 	mov.w	r3, #0
 8007a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a50:	4659      	mov	r1, fp
 8007a52:	018b      	lsls	r3, r1, #6
 8007a54:	4651      	mov	r1, sl
 8007a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a5a:	4651      	mov	r1, sl
 8007a5c:	018a      	lsls	r2, r1, #6
 8007a5e:	4651      	mov	r1, sl
 8007a60:	ebb2 0801 	subs.w	r8, r2, r1
 8007a64:	4659      	mov	r1, fp
 8007a66:	eb63 0901 	sbc.w	r9, r3, r1
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a7e:	4690      	mov	r8, r2
 8007a80:	4699      	mov	r9, r3
 8007a82:	4623      	mov	r3, r4
 8007a84:	eb18 0303 	adds.w	r3, r8, r3
 8007a88:	60bb      	str	r3, [r7, #8]
 8007a8a:	462b      	mov	r3, r5
 8007a8c:	eb49 0303 	adc.w	r3, r9, r3
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	024b      	lsls	r3, r1, #9
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	024a      	lsls	r2, r1, #9
 8007aac:	4610      	mov	r0, r2
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ab8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007abc:	f7f8 fe34 	bl	8000728 <__aeabi_uldivmod>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac8:	e058      	b.n	8007b7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aca:	4b38      	ldr	r3, [pc, #224]	; (8007bac <HAL_RCC_GetSysClockFreq+0x200>)
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	099b      	lsrs	r3, r3, #6
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ada:	623b      	str	r3, [r7, #32]
 8007adc:	2300      	movs	r3, #0
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	f04f 0000 	mov.w	r0, #0
 8007aec:	f04f 0100 	mov.w	r1, #0
 8007af0:	0159      	lsls	r1, r3, #5
 8007af2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007af6:	0150      	lsls	r0, r2, #5
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4641      	mov	r1, r8
 8007afe:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b02:	4649      	mov	r1, r9
 8007b04:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b1c:	ebb2 040a 	subs.w	r4, r2, sl
 8007b20:	eb63 050b 	sbc.w	r5, r3, fp
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	00eb      	lsls	r3, r5, #3
 8007b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b32:	00e2      	lsls	r2, r4, #3
 8007b34:	4614      	mov	r4, r2
 8007b36:	461d      	mov	r5, r3
 8007b38:	4643      	mov	r3, r8
 8007b3a:	18e3      	adds	r3, r4, r3
 8007b3c:	603b      	str	r3, [r7, #0]
 8007b3e:	464b      	mov	r3, r9
 8007b40:	eb45 0303 	adc.w	r3, r5, r3
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	f04f 0300 	mov.w	r3, #0
 8007b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b52:	4629      	mov	r1, r5
 8007b54:	028b      	lsls	r3, r1, #10
 8007b56:	4621      	mov	r1, r4
 8007b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	028a      	lsls	r2, r1, #10
 8007b60:	4610      	mov	r0, r2
 8007b62:	4619      	mov	r1, r3
 8007b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b66:	2200      	movs	r2, #0
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	61fa      	str	r2, [r7, #28]
 8007b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b70:	f7f8 fdda 	bl	8000728 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4613      	mov	r3, r2
 8007b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <HAL_RCC_GetSysClockFreq+0x200>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	3301      	adds	r3, #1
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007b8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b96:	e002      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3750      	adds	r7, #80	; 0x50
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007baa:	bf00      	nop
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	00f42400 	.word	0x00f42400
 8007bb4:	007a1200 	.word	0x007a1200

08007bb8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bbc:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20000004 	.word	0x20000004

08007bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bd4:	f7ff fff0 	bl	8007bb8 <HAL_RCC_GetHCLKFreq>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	0a9b      	lsrs	r3, r3, #10
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	4903      	ldr	r1, [pc, #12]	; (8007bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007be6:	5ccb      	ldrb	r3, [r1, r3]
 8007be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	080245d8 	.word	0x080245d8

08007bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bfc:	f7ff ffdc 	bl	8007bb8 <HAL_RCC_GetHCLKFreq>
 8007c00:	4602      	mov	r2, r0
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	0b5b      	lsrs	r3, r3, #13
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	4903      	ldr	r1, [pc, #12]	; (8007c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c0e:	5ccb      	ldrb	r3, [r1, r3]
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	080245d8 	.word	0x080245d8

08007c20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	220f      	movs	r2, #15
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c30:	4b12      	ldr	r3, [pc, #72]	; (8007c7c <HAL_RCC_GetClockConfig+0x5c>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 0203 	and.w	r2, r3, #3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <HAL_RCC_GetClockConfig+0x5c>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c48:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <HAL_RCC_GetClockConfig+0x5c>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007c54:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <HAL_RCC_GetClockConfig+0x5c>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	08db      	lsrs	r3, r3, #3
 8007c5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <HAL_RCC_GetClockConfig+0x60>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 020f 	and.w	r2, r3, #15
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	601a      	str	r2, [r3, #0]
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	40023c00 	.word	0x40023c00

08007c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d012      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cac:	4b69      	ldr	r3, [pc, #420]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	4a68      	ldr	r2, [pc, #416]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007cb6:	6093      	str	r3, [r2, #8]
 8007cb8:	4b66      	ldr	r3, [pc, #408]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc0:	4964      	ldr	r1, [pc, #400]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d017      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cde:	4b5d      	ldr	r3, [pc, #372]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cec:	4959      	ldr	r1, [pc, #356]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cfc:	d101      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d017      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007d1a:	4b4e      	ldr	r3, [pc, #312]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	494a      	ldr	r1, [pc, #296]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d38:	d101      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007d56:	2301      	movs	r3, #1
 8007d58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 808b 	beq.w	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d68:	4b3a      	ldr	r3, [pc, #232]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	4a39      	ldr	r2, [pc, #228]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d72:	6413      	str	r3, [r2, #64]	; 0x40
 8007d74:	4b37      	ldr	r3, [pc, #220]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d7c:	60bb      	str	r3, [r7, #8]
 8007d7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d80:	4b35      	ldr	r3, [pc, #212]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a34      	ldr	r2, [pc, #208]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d8c:	f7fc fa08 	bl	80041a0 <HAL_GetTick>
 8007d90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d92:	e008      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d94:	f7fc fa04 	bl	80041a0 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b64      	cmp	r3, #100	; 0x64
 8007da0:	d901      	bls.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e38f      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007da6:	4b2c      	ldr	r3, [pc, #176]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0f0      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007db2:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d035      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d02e      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007dd0:	4b20      	ldr	r3, [pc, #128]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007dda:	4b1e      	ldr	r3, [pc, #120]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	4a1d      	ldr	r2, [pc, #116]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007de4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007de6:	4b1b      	ldr	r3, [pc, #108]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dea:	4a1a      	ldr	r2, [pc, #104]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007df0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007df2:	4a18      	ldr	r2, [pc, #96]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007df8:	4b16      	ldr	r3, [pc, #88]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d114      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e04:	f7fc f9cc 	bl	80041a0 <HAL_GetTick>
 8007e08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e0a:	e00a      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e0c:	f7fc f9c8 	bl	80041a0 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e351      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e22:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0ee      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e3a:	d111      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007e4a:	400b      	ands	r3, r1
 8007e4c:	4901      	ldr	r1, [pc, #4]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	608b      	str	r3, [r1, #8]
 8007e52:	e00b      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007e54:	40023800 	.word	0x40023800
 8007e58:	40007000 	.word	0x40007000
 8007e5c:	0ffffcff 	.word	0x0ffffcff
 8007e60:	4bac      	ldr	r3, [pc, #688]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	4aab      	ldr	r2, [pc, #684]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e6a:	6093      	str	r3, [r2, #8]
 8007e6c:	4ba9      	ldr	r3, [pc, #676]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e78:	49a6      	ldr	r1, [pc, #664]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d010      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e8a:	4ba2      	ldr	r3, [pc, #648]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e90:	4aa0      	ldr	r2, [pc, #640]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e9a:	4b9e      	ldr	r3, [pc, #632]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	499b      	ldr	r1, [pc, #620]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007eb8:	4b96      	ldr	r3, [pc, #600]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ec6:	4993      	ldr	r1, [pc, #588]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007eda:	4b8e      	ldr	r3, [pc, #568]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee8:	498a      	ldr	r1, [pc, #552]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007efc:	4b85      	ldr	r3, [pc, #532]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f0a:	4982      	ldr	r1, [pc, #520]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f1e:	4b7d      	ldr	r3, [pc, #500]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2c:	4979      	ldr	r1, [pc, #484]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00a      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f40:	4b74      	ldr	r3, [pc, #464]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f46:	f023 0203 	bic.w	r2, r3, #3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4e:	4971      	ldr	r1, [pc, #452]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f62:	4b6c      	ldr	r3, [pc, #432]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f68:	f023 020c 	bic.w	r2, r3, #12
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f70:	4968      	ldr	r1, [pc, #416]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f84:	4b63      	ldr	r3, [pc, #396]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f92:	4960      	ldr	r1, [pc, #384]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fa6:	4b5b      	ldr	r3, [pc, #364]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb4:	4957      	ldr	r1, [pc, #348]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00a      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007fc8:	4b52      	ldr	r3, [pc, #328]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd6:	494f      	ldr	r1, [pc, #316]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007fea:	4b4a      	ldr	r3, [pc, #296]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff8:	4946      	ldr	r1, [pc, #280]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800800c:	4b41      	ldr	r3, [pc, #260]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800800e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008012:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801a:	493e      	ldr	r1, [pc, #248]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800801c:	4313      	orrs	r3, r2
 800801e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800802e:	4b39      	ldr	r3, [pc, #228]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008034:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803c:	4935      	ldr	r1, [pc, #212]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008050:	4b30      	ldr	r3, [pc, #192]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008056:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800805e:	492d      	ldr	r1, [pc, #180]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d011      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008072:	4b28      	ldr	r3, [pc, #160]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008078:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008080:	4924      	ldr	r1, [pc, #144]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800808c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008090:	d101      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008092:	2301      	movs	r3, #1
 8008094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0308 	and.w	r3, r3, #8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080b2:	4b18      	ldr	r3, [pc, #96]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c0:	4914      	ldr	r1, [pc, #80]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00b      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80080d4:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e4:	490b      	ldr	r1, [pc, #44]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00f      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80080f8:	4b06      	ldr	r3, [pc, #24]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008108:	4902      	ldr	r1, [pc, #8]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008110:	e002      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8008112:	bf00      	nop
 8008114:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008124:	4b8a      	ldr	r3, [pc, #552]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008134:	4986      	ldr	r1, [pc, #536]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008136:	4313      	orrs	r3, r2
 8008138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008148:	4b81      	ldr	r3, [pc, #516]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800814a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800814e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008158:	497d      	ldr	r1, [pc, #500]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800815a:	4313      	orrs	r3, r2
 800815c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d006      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 80d6 	beq.w	8008320 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008174:	4b76      	ldr	r3, [pc, #472]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a75      	ldr	r2, [pc, #468]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800817a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800817e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008180:	f7fc f80e 	bl	80041a0 <HAL_GetTick>
 8008184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008186:	e008      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008188:	f7fc f80a 	bl	80041a0 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b64      	cmp	r3, #100	; 0x64
 8008194:	d901      	bls.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e195      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800819a:	4b6d      	ldr	r3, [pc, #436]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f0      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d021      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d11d      	bne.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80081ba:	4b65      	ldr	r3, [pc, #404]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80081c8:	4b61      	ldr	r3, [pc, #388]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ce:	0e1b      	lsrs	r3, r3, #24
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	019a      	lsls	r2, r3, #6
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	431a      	orrs	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	061b      	lsls	r3, r3, #24
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	071b      	lsls	r3, r3, #28
 80081ee:	4958      	ldr	r1, [pc, #352]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800820a:	d00a      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008214:	2b00      	cmp	r3, #0
 8008216:	d02e      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008220:	d129      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008222:	4b4b      	ldr	r3, [pc, #300]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008228:	0c1b      	lsrs	r3, r3, #16
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008230:	4b47      	ldr	r3, [pc, #284]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008236:	0f1b      	lsrs	r3, r3, #28
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	019a      	lsls	r2, r3, #6
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	041b      	lsls	r3, r3, #16
 8008248:	431a      	orrs	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	061b      	lsls	r3, r3, #24
 8008250:	431a      	orrs	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	071b      	lsls	r3, r3, #28
 8008256:	493e      	ldr	r1, [pc, #248]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008258:	4313      	orrs	r3, r2
 800825a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800825e:	4b3c      	ldr	r3, [pc, #240]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008264:	f023 021f 	bic.w	r2, r3, #31
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	3b01      	subs	r3, #1
 800826e:	4938      	ldr	r1, [pc, #224]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008270:	4313      	orrs	r3, r2
 8008272:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01d      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008282:	4b33      	ldr	r3, [pc, #204]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008288:	0e1b      	lsrs	r3, r3, #24
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008290:	4b2f      	ldr	r3, [pc, #188]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008296:	0f1b      	lsrs	r3, r3, #28
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	019a      	lsls	r2, r3, #6
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	041b      	lsls	r3, r3, #16
 80082aa:	431a      	orrs	r2, r3
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	061b      	lsls	r3, r3, #24
 80082b0:	431a      	orrs	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	071b      	lsls	r3, r3, #28
 80082b6:	4926      	ldr	r1, [pc, #152]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d011      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	019a      	lsls	r2, r3, #6
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	061b      	lsls	r3, r3, #24
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	071b      	lsls	r3, r3, #28
 80082e6:	491a      	ldr	r1, [pc, #104]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80082ee:	4b18      	ldr	r3, [pc, #96]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a17      	ldr	r2, [pc, #92]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082fa:	f7fb ff51 	bl	80041a0 <HAL_GetTick>
 80082fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008300:	e008      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008302:	f7fb ff4d 	bl	80041a0 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b64      	cmp	r3, #100	; 0x64
 800830e:	d901      	bls.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e0d8      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008314:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d0f0      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	2b01      	cmp	r3, #1
 8008324:	f040 80ce 	bne.w	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008328:	4b09      	ldr	r3, [pc, #36]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a08      	ldr	r2, [pc, #32]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800832e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008334:	f7fb ff34 	bl	80041a0 <HAL_GetTick>
 8008338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800833a:	e00b      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800833c:	f7fb ff30 	bl	80041a0 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	2b64      	cmp	r3, #100	; 0x64
 8008348:	d904      	bls.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e0bb      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800834e:	bf00      	nop
 8008350:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008354:	4b5e      	ldr	r3, [pc, #376]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800835c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008360:	d0ec      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800837e:	2b00      	cmp	r3, #0
 8008380:	d02e      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d12a      	bne.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800838a:	4b51      	ldr	r3, [pc, #324]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800838c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008390:	0c1b      	lsrs	r3, r3, #16
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008398:	4b4d      	ldr	r3, [pc, #308]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839e:	0f1b      	lsrs	r3, r3, #28
 80083a0:	f003 0307 	and.w	r3, r3, #7
 80083a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	019a      	lsls	r2, r3, #6
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	061b      	lsls	r3, r3, #24
 80083b8:	431a      	orrs	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	071b      	lsls	r3, r3, #28
 80083be:	4944      	ldr	r1, [pc, #272]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80083c6:	4b42      	ldr	r3, [pc, #264]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	3b01      	subs	r3, #1
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	493d      	ldr	r1, [pc, #244]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d022      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083f4:	d11d      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083f6:	4b36      	ldr	r3, [pc, #216]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fc:	0e1b      	lsrs	r3, r3, #24
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008404:	4b32      	ldr	r3, [pc, #200]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	0f1b      	lsrs	r3, r3, #28
 800840c:	f003 0307 	and.w	r3, r3, #7
 8008410:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	019a      	lsls	r2, r3, #6
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	431a      	orrs	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	061b      	lsls	r3, r3, #24
 8008424:	431a      	orrs	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	071b      	lsls	r3, r3, #28
 800842a:	4929      	ldr	r1, [pc, #164]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800842c:	4313      	orrs	r3, r2
 800842e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d028      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800843e:	4b24      	ldr	r3, [pc, #144]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008444:	0e1b      	lsrs	r3, r3, #24
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800844c:	4b20      	ldr	r3, [pc, #128]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800844e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	f003 0303 	and.w	r3, r3, #3
 8008458:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	019a      	lsls	r2, r3, #6
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	431a      	orrs	r2, r3
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	061b      	lsls	r3, r3, #24
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	071b      	lsls	r3, r3, #28
 8008472:	4917      	ldr	r1, [pc, #92]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008474:	4313      	orrs	r3, r2
 8008476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800847a:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800847c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	4911      	ldr	r1, [pc, #68]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800848a:	4313      	orrs	r3, r2
 800848c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008490:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a0e      	ldr	r2, [pc, #56]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800849a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800849c:	f7fb fe80 	bl	80041a0 <HAL_GetTick>
 80084a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084a2:	e008      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084a4:	f7fb fe7c 	bl	80041a0 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b64      	cmp	r3, #100	; 0x64
 80084b0:	d901      	bls.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e007      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084b6:	4b06      	ldr	r3, [pc, #24]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084c2:	d1ef      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40023800 	.word	0x40023800

080084d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e049      	b.n	800857a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f841 	bl	8008582 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f000 faa6 	bl	8008a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
	...

08008598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d001      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e054      	b.n	800865a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a26      	ldr	r2, [pc, #152]	; (8008668 <HAL_TIM_Base_Start_IT+0xd0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d022      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x80>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085da:	d01d      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x80>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a22      	ldr	r2, [pc, #136]	; (800866c <HAL_TIM_Base_Start_IT+0xd4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d018      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x80>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a21      	ldr	r2, [pc, #132]	; (8008670 <HAL_TIM_Base_Start_IT+0xd8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x80>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1f      	ldr	r2, [pc, #124]	; (8008674 <HAL_TIM_Base_Start_IT+0xdc>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00e      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x80>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <HAL_TIM_Base_Start_IT+0xe0>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d009      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x80>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a1c      	ldr	r2, [pc, #112]	; (800867c <HAL_TIM_Base_Start_IT+0xe4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x80>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <HAL_TIM_Base_Start_IT+0xe8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d115      	bne.n	8008644 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	4b19      	ldr	r3, [pc, #100]	; (8008684 <HAL_TIM_Base_Start_IT+0xec>)
 8008620:	4013      	ands	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b06      	cmp	r3, #6
 8008628:	d015      	beq.n	8008656 <HAL_TIM_Base_Start_IT+0xbe>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008630:	d011      	beq.n	8008656 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0201 	orr.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008642:	e008      	b.n	8008656 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0201 	orr.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e000      	b.n	8008658 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008656:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	40010000 	.word	0x40010000
 800866c:	40000400 	.word	0x40000400
 8008670:	40000800 	.word	0x40000800
 8008674:	40000c00 	.word	0x40000c00
 8008678:	40010400 	.word	0x40010400
 800867c:	40014000 	.word	0x40014000
 8008680:	40001800 	.word	0x40001800
 8008684:	00010007 	.word	0x00010007

08008688 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e08f      	b.n	80087bc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fb fbb5 	bl	8003e20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6899      	ldr	r1, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	4b3e      	ldr	r3, [pc, #248]	; (80087c4 <HAL_TIM_Encoder_Init+0x13c>)
 80086ca:	400b      	ands	r3, r1
 80086cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3304      	adds	r3, #4
 80086d6:	4619      	mov	r1, r3
 80086d8:	4610      	mov	r0, r2
 80086da:	f000 f9c3 	bl	8008a64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4b31      	ldr	r3, [pc, #196]	; (80087c8 <HAL_TIM_Encoder_Init+0x140>)
 8008704:	4013      	ands	r3, r2
 8008706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	4313      	orrs	r3, r2
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4b2b      	ldr	r3, [pc, #172]	; (80087cc <HAL_TIM_Encoder_Init+0x144>)
 800871e:	4013      	ands	r3, r2
 8008720:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <HAL_TIM_Encoder_Init+0x148>)
 8008726:	4013      	ands	r3, r2
 8008728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	4313      	orrs	r3, r2
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	011a      	lsls	r2, r3, #4
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	031b      	lsls	r3, r3, #12
 8008748:	4313      	orrs	r3, r2
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	4313      	orrs	r3, r2
 800874e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008756:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800875e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	4313      	orrs	r3, r2
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	fffebff8 	.word	0xfffebff8
 80087c8:	fffffcfc 	.word	0xfffffcfc
 80087cc:	fffff3f3 	.word	0xfffff3f3
 80087d0:	ffff0f0f 	.word	0xffff0f0f

080087d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d122      	bne.n	8008830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d11b      	bne.n	8008830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0202 	mvn.w	r2, #2
 8008800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f905 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 800881c:	e005      	b.n	800882a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f8f7 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f908 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b04      	cmp	r3, #4
 800883c:	d122      	bne.n	8008884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b04      	cmp	r3, #4
 800884a:	d11b      	bne.n	8008884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0204 	mvn.w	r2, #4
 8008854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f8db 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 8008870:	e005      	b.n	800887e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f8cd 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f8de 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b08      	cmp	r3, #8
 8008890:	d122      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d11b      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0208 	mvn.w	r2, #8
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2204      	movs	r2, #4
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f8b1 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f8a3 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f8b4 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d122      	bne.n	800892c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b10      	cmp	r3, #16
 80088f2:	d11b      	bne.n	800892c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0210 	mvn.w	r2, #16
 80088fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2208      	movs	r2, #8
 8008902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f887 	bl	8008a26 <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f879 	bl	8008a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f88a 	bl	8008a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b01      	cmp	r3, #1
 8008938:	d10e      	bne.n	8008958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b01      	cmp	r3, #1
 8008946:	d107      	bne.n	8008958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0201 	mvn.w	r2, #1
 8008950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7fa fe58 	bl	8003608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d10e      	bne.n	8008984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d107      	bne.n	8008984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800897c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f9a8 	bl	8008cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008992:	d10e      	bne.n	80089b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899e:	2b80      	cmp	r3, #128	; 0x80
 80089a0:	d107      	bne.n	80089b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f99b 	bl	8008ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d10e      	bne.n	80089de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d107      	bne.n	80089de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f838 	bl	8008a4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	f003 0320 	and.w	r3, r3, #32
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d10e      	bne.n	8008a0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d107      	bne.n	8008a0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f06f 0220 	mvn.w	r2, #32
 8008a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f95b 	bl	8008cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a40      	ldr	r2, [pc, #256]	; (8008b78 <TIM_Base_SetConfig+0x114>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d013      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a82:	d00f      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a3d      	ldr	r2, [pc, #244]	; (8008b7c <TIM_Base_SetConfig+0x118>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00b      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a3c      	ldr	r2, [pc, #240]	; (8008b80 <TIM_Base_SetConfig+0x11c>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d007      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a3b      	ldr	r2, [pc, #236]	; (8008b84 <TIM_Base_SetConfig+0x120>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d003      	beq.n	8008aa4 <TIM_Base_SetConfig+0x40>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a3a      	ldr	r2, [pc, #232]	; (8008b88 <TIM_Base_SetConfig+0x124>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d108      	bne.n	8008ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a2f      	ldr	r2, [pc, #188]	; (8008b78 <TIM_Base_SetConfig+0x114>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d02b      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac4:	d027      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a2c      	ldr	r2, [pc, #176]	; (8008b7c <TIM_Base_SetConfig+0x118>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d023      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a2b      	ldr	r2, [pc, #172]	; (8008b80 <TIM_Base_SetConfig+0x11c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d01f      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a2a      	ldr	r2, [pc, #168]	; (8008b84 <TIM_Base_SetConfig+0x120>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d01b      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a29      	ldr	r2, [pc, #164]	; (8008b88 <TIM_Base_SetConfig+0x124>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d017      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a28      	ldr	r2, [pc, #160]	; (8008b8c <TIM_Base_SetConfig+0x128>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d013      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a27      	ldr	r2, [pc, #156]	; (8008b90 <TIM_Base_SetConfig+0x12c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00f      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a26      	ldr	r2, [pc, #152]	; (8008b94 <TIM_Base_SetConfig+0x130>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d00b      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a25      	ldr	r2, [pc, #148]	; (8008b98 <TIM_Base_SetConfig+0x134>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d007      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a24      	ldr	r2, [pc, #144]	; (8008b9c <TIM_Base_SetConfig+0x138>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d003      	beq.n	8008b16 <TIM_Base_SetConfig+0xb2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a23      	ldr	r2, [pc, #140]	; (8008ba0 <TIM_Base_SetConfig+0x13c>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d108      	bne.n	8008b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a0a      	ldr	r2, [pc, #40]	; (8008b78 <TIM_Base_SetConfig+0x114>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d003      	beq.n	8008b5c <TIM_Base_SetConfig+0xf8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a0c      	ldr	r2, [pc, #48]	; (8008b88 <TIM_Base_SetConfig+0x124>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d103      	bne.n	8008b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	615a      	str	r2, [r3, #20]
}
 8008b6a:	bf00      	nop
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40000400 	.word	0x40000400
 8008b80:	40000800 	.word	0x40000800
 8008b84:	40000c00 	.word	0x40000c00
 8008b88:	40010400 	.word	0x40010400
 8008b8c:	40014000 	.word	0x40014000
 8008b90:	40014400 	.word	0x40014400
 8008b94:	40014800 	.word	0x40014800
 8008b98:	40001800 	.word	0x40001800
 8008b9c:	40001c00 	.word	0x40001c00
 8008ba0:	40002000 	.word	0x40002000

08008ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e06d      	b.n	8008c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a30      	ldr	r2, [pc, #192]	; (8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d004      	beq.n	8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a2f      	ldr	r2, [pc, #188]	; (8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d108      	bne.n	8008c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a20      	ldr	r2, [pc, #128]	; (8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d022      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2e:	d01d      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1d      	ldr	r2, [pc, #116]	; (8008cac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d018      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d013      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a1a      	ldr	r2, [pc, #104]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00e      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d009      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a16      	ldr	r2, [pc, #88]	; (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d004      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a15      	ldr	r2, [pc, #84]	; (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d10c      	bne.n	8008c86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	40010000 	.word	0x40010000
 8008ca8:	40010400 	.word	0x40010400
 8008cac:	40000400 	.word	0x40000400
 8008cb0:	40000800 	.word	0x40000800
 8008cb4:	40000c00 	.word	0x40000c00
 8008cb8:	40014000 	.word	0x40014000
 8008cbc:	40001800 	.word	0x40001800

08008cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e040      	b.n	8008d90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d106      	bne.n	8008d24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7fb f924 	bl	8003f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2224      	movs	r2, #36	; 0x24
 8008d28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f022 0201 	bic.w	r2, r2, #1
 8008d38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fd32 	bl	80097a4 <UART_SetConfig>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d101      	bne.n	8008d4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e022      	b.n	8008d90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d002      	beq.n	8008d58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 ff8a 	bl	8009c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689a      	ldr	r2, [r3, #8]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0201 	orr.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 f811 	bl	8009db0 <UART_CheckIdleState>
 8008d8e:	4603      	mov	r3, r0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	; 0x28
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	4613      	mov	r3, r2
 8008da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dac:	2b20      	cmp	r3, #32
 8008dae:	d171      	bne.n	8008e94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <HAL_UART_Transmit+0x24>
 8008db6:	88fb      	ldrh	r3, [r7, #6]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d101      	bne.n	8008dc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e06a      	b.n	8008e96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2221      	movs	r2, #33	; 0x21
 8008dcc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dce:	f7fb f9e7 	bl	80041a0 <HAL_GetTick>
 8008dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	88fa      	ldrh	r2, [r7, #6]
 8008dd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	88fa      	ldrh	r2, [r7, #6]
 8008de0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dec:	d108      	bne.n	8008e00 <HAL_UART_Transmit+0x68>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	e003      	b.n	8008e08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e08:	e02c      	b.n	8008e64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2200      	movs	r2, #0
 8008e12:	2180      	movs	r1, #128	; 0x80
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f001 f818 	bl	8009e4a <UART_WaitOnFlagUntilTimeout>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e038      	b.n	8008e96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10b      	bne.n	8008e42 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	61bb      	str	r3, [r7, #24]
 8008e40:	e007      	b.n	8008e52 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1cc      	bne.n	8008e0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2200      	movs	r2, #0
 8008e78:	2140      	movs	r1, #64	; 0x40
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 ffe5 	bl	8009e4a <UART_WaitOnFlagUntilTimeout>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e005      	b.n	8008e96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	e000      	b.n	8008e96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008e94:	2302      	movs	r3, #2
  }
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3720      	adds	r7, #32
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	; 0x28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d165      	bne.n	8008f82 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <HAL_UART_Transmit_DMA+0x22>
 8008ebc:	88fb      	ldrh	r3, [r7, #6]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e05e      	b.n	8008f84 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	88fa      	ldrh	r2, [r7, #6]
 8008ed0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	88fa      	ldrh	r2, [r7, #6]
 8008ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2221      	movs	r2, #33	; 0x21
 8008ee8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d027      	beq.n	8008f42 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef6:	4a25      	ldr	r2, [pc, #148]	; (8008f8c <HAL_UART_Transmit_DMA+0xec>)
 8008ef8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efe:	4a24      	ldr	r2, [pc, #144]	; (8008f90 <HAL_UART_Transmit_DMA+0xf0>)
 8008f00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	4a23      	ldr	r2, [pc, #140]	; (8008f94 <HAL_UART_Transmit_DMA+0xf4>)
 8008f08:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0e:	2200      	movs	r2, #0
 8008f10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3328      	adds	r3, #40	; 0x28
 8008f22:	461a      	mov	r2, r3
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	f7fc f957 	bl	80051d8 <HAL_DMA_Start_IT>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2210      	movs	r2, #16
 8008f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e020      	b.n	8008f84 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2240      	movs	r2, #64	; 0x40
 8008f48:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f6a:	623a      	str	r2, [r7, #32]
 8008f6c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	69f9      	ldr	r1, [r7, #28]
 8008f70:	6a3a      	ldr	r2, [r7, #32]
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e5      	bne.n	8008f4a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e000      	b.n	8008f84 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008f82:	2302      	movs	r3, #2
  }
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3728      	adds	r7, #40	; 0x28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	0800a22d 	.word	0x0800a22d
 8008f90:	0800a2c3 	.word	0x0800a2c3
 8008f94:	0800a445 	.word	0x0800a445

08008f98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08a      	sub	sp, #40	; 0x28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d132      	bne.n	8009016 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <HAL_UART_Receive_DMA+0x24>
 8008fb6:	88fb      	ldrh	r3, [r7, #6]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e02b      	b.n	8009018 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d018      	beq.n	8009006 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	623b      	str	r3, [r7, #32]
 8008ff4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	69f9      	ldr	r1, [r7, #28]
 8008ff8:	6a3a      	ldr	r2, [r7, #32]
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e6      	bne.n	8008fd4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009006:	88fb      	ldrh	r3, [r7, #6]
 8009008:	461a      	mov	r2, r3
 800900a:	68b9      	ldr	r1, [r7, #8]
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 ffe3 	bl	8009fd8 <UART_Start_Receive_DMA>
 8009012:	4603      	mov	r3, r0
 8009014:	e000      	b.n	8009018 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009016:	2302      	movs	r3, #2
  }
}
 8009018:	4618      	mov	r0, r3
 800901a:	3728      	adds	r7, #40	; 0x28
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b090      	sub	sp, #64	; 0x40
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009034:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009040:	2b80      	cmp	r3, #128	; 0x80
 8009042:	d139      	bne.n	80090b8 <HAL_UART_DMAStop+0x98>
 8009044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009046:	2b21      	cmp	r3, #33	; 0x21
 8009048:	d136      	bne.n	80090b8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	61fb      	str	r3, [r7, #28]
   return(result);
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009060:	637b      	str	r3, [r7, #52]	; 0x34
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800906a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e5      	bne.n	800904a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009082:	2b00      	cmp	r3, #0
 8009084:	d015      	beq.n	80090b2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	4618      	mov	r0, r3
 800908c:	f7fc f904 	bl	8005298 <HAL_DMA_Abort>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00d      	beq.n	80090b2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909a:	4618      	mov	r0, r3
 800909c:	f7fc fb18 	bl	80056d0 <HAL_DMA_GetError>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b20      	cmp	r3, #32
 80090a4:	d105      	bne.n	80090b2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2210      	movs	r2, #16
 80090aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e044      	b.n	800913c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 f830 	bl	800a118 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c2:	2b40      	cmp	r3, #64	; 0x40
 80090c4:	d139      	bne.n	800913a <HAL_UART_DMAStop+0x11a>
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	2b22      	cmp	r3, #34	; 0x22
 80090ca:	d136      	bne.n	800913a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	60bb      	str	r3, [r7, #8]
   return(result);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090e2:	633b      	str	r3, [r7, #48]	; 0x30
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3308      	adds	r3, #8
 80090ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ec:	61ba      	str	r2, [r7, #24]
 80090ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	6979      	ldr	r1, [r7, #20]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	613b      	str	r3, [r7, #16]
   return(result);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e5      	bne.n	80090cc <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009104:	2b00      	cmp	r3, #0
 8009106:	d015      	beq.n	8009134 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800910c:	4618      	mov	r0, r3
 800910e:	f7fc f8c3 	bl	8005298 <HAL_DMA_Abort>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00d      	beq.n	8009134 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800911c:	4618      	mov	r0, r3
 800911e:	f7fc fad7 	bl	80056d0 <HAL_DMA_GetError>
 8009122:	4603      	mov	r3, r0
 8009124:	2b20      	cmp	r3, #32
 8009126:	d105      	bne.n	8009134 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2210      	movs	r2, #16
 800912c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e003      	b.n	800913c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 f815 	bl	800a164 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3740      	adds	r7, #64	; 0x40
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b0ba      	sub	sp, #232	; 0xe8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800916a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800916e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009172:	4013      	ands	r3, r2
 8009174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800917c:	2b00      	cmp	r3, #0
 800917e:	d115      	bne.n	80091ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00f      	beq.n	80091ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800918c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d009      	beq.n	80091ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 82ac 	beq.w	80096fa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
      }
      return;
 80091aa:	e2a6      	b.n	80096fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8117 	beq.w	80093e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80091b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80091c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80091c6:	4b85      	ldr	r3, [pc, #532]	; (80093dc <HAL_UART_IRQHandler+0x298>)
 80091c8:	4013      	ands	r3, r2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 810a 	beq.w	80093e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d011      	beq.n	8009200 <HAL_UART_IRQHandler+0xbc>
 80091dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2201      	movs	r2, #1
 80091ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f6:	f043 0201 	orr.w	r2, r3, #1
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b00      	cmp	r3, #0
 800920a:	d011      	beq.n	8009230 <HAL_UART_IRQHandler+0xec>
 800920c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2202      	movs	r2, #2
 800921e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009226:	f043 0204 	orr.w	r2, r3, #4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b00      	cmp	r3, #0
 800923a:	d011      	beq.n	8009260 <HAL_UART_IRQHandler+0x11c>
 800923c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2204      	movs	r2, #4
 800924e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009256:	f043 0202 	orr.w	r2, r3, #2
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d017      	beq.n	800929c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800926c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d105      	bne.n	8009284 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800927c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2208      	movs	r2, #8
 800928a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009292:	f043 0208 	orr.w	r2, r3, #8
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800929c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d012      	beq.n	80092ce <HAL_UART_IRQHandler+0x18a>
 80092a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00c      	beq.n	80092ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092c4:	f043 0220 	orr.w	r2, r3, #32
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 8212 	beq.w	80096fe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80092da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092de:	f003 0320 	and.w	r3, r3, #32
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00d      	beq.n	8009302 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80092e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d007      	beq.n	8009302 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009308:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009316:	2b40      	cmp	r3, #64	; 0x40
 8009318:	d005      	beq.n	8009326 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800931a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800931e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009322:	2b00      	cmp	r3, #0
 8009324:	d04f      	beq.n	80093c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 ff1c 	bl	800a164 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009336:	2b40      	cmp	r3, #64	; 0x40
 8009338:	d141      	bne.n	80093be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3308      	adds	r3, #8
 8009362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009366:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800936a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800937e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1d9      	bne.n	800933a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800938a:	2b00      	cmp	r3, #0
 800938c:	d013      	beq.n	80093b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009392:	4a13      	ldr	r2, [pc, #76]	; (80093e0 <HAL_UART_IRQHandler+0x29c>)
 8009394:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800939a:	4618      	mov	r0, r3
 800939c:	f7fb ffec 	bl	8005378 <HAL_DMA_Abort_IT>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d017      	beq.n	80093d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b4:	e00f      	b.n	80093d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f9d4 	bl	8009764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093bc:	e00b      	b.n	80093d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f9d0 	bl	8009764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c4:	e007      	b.n	80093d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9cc 	bl	8009764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80093d4:	e193      	b.n	80096fe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d6:	bf00      	nop
    return;
 80093d8:	e191      	b.n	80096fe <HAL_UART_IRQHandler+0x5ba>
 80093da:	bf00      	nop
 80093dc:	04000120 	.word	0x04000120
 80093e0:	0800a4c3 	.word	0x0800a4c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	f040 814c 	bne.w	8009686 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f2:	f003 0310 	and.w	r3, r3, #16
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 8145 	beq.w	8009686 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009400:	f003 0310 	and.w	r3, r3, #16
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 813e 	beq.w	8009686 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2210      	movs	r2, #16
 8009410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	f040 80b6 	bne.w	800958e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800942e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 8165 	beq.w	8009702 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800943e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009442:	429a      	cmp	r2, r3
 8009444:	f080 815d 	bcs.w	8009702 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800944e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945c:	f000 8086 	beq.w	800956c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800947c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	461a      	mov	r2, r3
 8009486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800948a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800948e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1da      	bne.n	8009460 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3308      	adds	r3, #8
 80094b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094bc:	f023 0301 	bic.w	r3, r3, #1
 80094c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3308      	adds	r3, #8
 80094ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e1      	bne.n	80094aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3308      	adds	r3, #8
 80094ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3308      	adds	r3, #8
 8009506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800950a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800950c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e3      	bne.n	80094e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2220      	movs	r2, #32
 8009522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800953a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800953c:	f023 0310 	bic.w	r3, r3, #16
 8009540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800954e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009550:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800955c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e4      	bne.n	800952c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009566:	4618      	mov	r0, r3
 8009568:	f7fb fe96 	bl	8005298 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800957e:	b29b      	uxth	r3, r3
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	b29b      	uxth	r3, r3
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f8f6 	bl	8009778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800958c:	e0b9      	b.n	8009702 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800959a:	b29b      	uxth	r3, r3
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 80ab 	beq.w	8009706 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80095b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 80a6 	beq.w	8009706 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095dc:	647b      	str	r3, [r7, #68]	; 0x44
 80095de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e4      	bne.n	80095ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3308      	adds	r3, #8
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	623b      	str	r3, [r7, #32]
   return(result);
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	f023 0301 	bic.w	r3, r3, #1
 8009606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009614:	633a      	str	r2, [r7, #48]	; 0x30
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800961a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e3      	bne.n	80095f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	60fb      	str	r3, [r7, #12]
   return(result);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f023 0310 	bic.w	r3, r3, #16
 8009650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	461a      	mov	r2, r3
 800965a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	69b9      	ldr	r1, [r7, #24]
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	617b      	str	r3, [r7, #20]
   return(result);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e4      	bne.n	800963c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2202      	movs	r2, #2
 8009676:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f87a 	bl	8009778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009684:	e03f      	b.n	8009706 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00e      	beq.n	80096b0 <HAL_UART_IRQHandler+0x56c>
 8009692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d008      	beq.n	80096b0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f871 	bl	8009790 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ae:	e02d      	b.n	800970c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00e      	beq.n	80096da <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d008      	beq.n	80096da <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01c      	beq.n	800970a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
    }
    return;
 80096d8:	e017      	b.n	800970a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d012      	beq.n	800970c <HAL_UART_IRQHandler+0x5c8>
 80096e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00c      	beq.n	800970c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fefb 	bl	800a4ee <UART_EndTransmit_IT>
    return;
 80096f8:	e008      	b.n	800970c <HAL_UART_IRQHandler+0x5c8>
      return;
 80096fa:	bf00      	nop
 80096fc:	e006      	b.n	800970c <HAL_UART_IRQHandler+0x5c8>
    return;
 80096fe:	bf00      	nop
 8009700:	e004      	b.n	800970c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009702:	bf00      	nop
 8009704:	e002      	b.n	800970c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009706:	bf00      	nop
 8009708:	e000      	b.n	800970c <HAL_UART_IRQHandler+0x5c8>
    return;
 800970a:	bf00      	nop
  }

}
 800970c:	37e8      	adds	r7, #232	; 0xe8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop

08009714 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4ba6      	ldr	r3, [pc, #664]	; (8009a68 <UART_SetConfig+0x2c4>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	6812      	ldr	r2, [r2, #0]
 80097d6:	6979      	ldr	r1, [r7, #20]
 80097d8:	430b      	orrs	r3, r1
 80097da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	430a      	orrs	r2, r1
 8009814:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a94      	ldr	r2, [pc, #592]	; (8009a6c <UART_SetConfig+0x2c8>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d120      	bne.n	8009862 <UART_SetConfig+0xbe>
 8009820:	4b93      	ldr	r3, [pc, #588]	; (8009a70 <UART_SetConfig+0x2cc>)
 8009822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	2b03      	cmp	r3, #3
 800982c:	d816      	bhi.n	800985c <UART_SetConfig+0xb8>
 800982e:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <UART_SetConfig+0x90>)
 8009830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009834:	08009845 	.word	0x08009845
 8009838:	08009851 	.word	0x08009851
 800983c:	0800984b 	.word	0x0800984b
 8009840:	08009857 	.word	0x08009857
 8009844:	2301      	movs	r3, #1
 8009846:	77fb      	strb	r3, [r7, #31]
 8009848:	e150      	b.n	8009aec <UART_SetConfig+0x348>
 800984a:	2302      	movs	r3, #2
 800984c:	77fb      	strb	r3, [r7, #31]
 800984e:	e14d      	b.n	8009aec <UART_SetConfig+0x348>
 8009850:	2304      	movs	r3, #4
 8009852:	77fb      	strb	r3, [r7, #31]
 8009854:	e14a      	b.n	8009aec <UART_SetConfig+0x348>
 8009856:	2308      	movs	r3, #8
 8009858:	77fb      	strb	r3, [r7, #31]
 800985a:	e147      	b.n	8009aec <UART_SetConfig+0x348>
 800985c:	2310      	movs	r3, #16
 800985e:	77fb      	strb	r3, [r7, #31]
 8009860:	e144      	b.n	8009aec <UART_SetConfig+0x348>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a83      	ldr	r2, [pc, #524]	; (8009a74 <UART_SetConfig+0x2d0>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d132      	bne.n	80098d2 <UART_SetConfig+0x12e>
 800986c:	4b80      	ldr	r3, [pc, #512]	; (8009a70 <UART_SetConfig+0x2cc>)
 800986e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009872:	f003 030c 	and.w	r3, r3, #12
 8009876:	2b0c      	cmp	r3, #12
 8009878:	d828      	bhi.n	80098cc <UART_SetConfig+0x128>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <UART_SetConfig+0xdc>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	080098b5 	.word	0x080098b5
 8009884:	080098cd 	.word	0x080098cd
 8009888:	080098cd 	.word	0x080098cd
 800988c:	080098cd 	.word	0x080098cd
 8009890:	080098c1 	.word	0x080098c1
 8009894:	080098cd 	.word	0x080098cd
 8009898:	080098cd 	.word	0x080098cd
 800989c:	080098cd 	.word	0x080098cd
 80098a0:	080098bb 	.word	0x080098bb
 80098a4:	080098cd 	.word	0x080098cd
 80098a8:	080098cd 	.word	0x080098cd
 80098ac:	080098cd 	.word	0x080098cd
 80098b0:	080098c7 	.word	0x080098c7
 80098b4:	2300      	movs	r3, #0
 80098b6:	77fb      	strb	r3, [r7, #31]
 80098b8:	e118      	b.n	8009aec <UART_SetConfig+0x348>
 80098ba:	2302      	movs	r3, #2
 80098bc:	77fb      	strb	r3, [r7, #31]
 80098be:	e115      	b.n	8009aec <UART_SetConfig+0x348>
 80098c0:	2304      	movs	r3, #4
 80098c2:	77fb      	strb	r3, [r7, #31]
 80098c4:	e112      	b.n	8009aec <UART_SetConfig+0x348>
 80098c6:	2308      	movs	r3, #8
 80098c8:	77fb      	strb	r3, [r7, #31]
 80098ca:	e10f      	b.n	8009aec <UART_SetConfig+0x348>
 80098cc:	2310      	movs	r3, #16
 80098ce:	77fb      	strb	r3, [r7, #31]
 80098d0:	e10c      	b.n	8009aec <UART_SetConfig+0x348>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a68      	ldr	r2, [pc, #416]	; (8009a78 <UART_SetConfig+0x2d4>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d120      	bne.n	800991e <UART_SetConfig+0x17a>
 80098dc:	4b64      	ldr	r3, [pc, #400]	; (8009a70 <UART_SetConfig+0x2cc>)
 80098de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098e6:	2b30      	cmp	r3, #48	; 0x30
 80098e8:	d013      	beq.n	8009912 <UART_SetConfig+0x16e>
 80098ea:	2b30      	cmp	r3, #48	; 0x30
 80098ec:	d814      	bhi.n	8009918 <UART_SetConfig+0x174>
 80098ee:	2b20      	cmp	r3, #32
 80098f0:	d009      	beq.n	8009906 <UART_SetConfig+0x162>
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	d810      	bhi.n	8009918 <UART_SetConfig+0x174>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <UART_SetConfig+0x15c>
 80098fa:	2b10      	cmp	r3, #16
 80098fc:	d006      	beq.n	800990c <UART_SetConfig+0x168>
 80098fe:	e00b      	b.n	8009918 <UART_SetConfig+0x174>
 8009900:	2300      	movs	r3, #0
 8009902:	77fb      	strb	r3, [r7, #31]
 8009904:	e0f2      	b.n	8009aec <UART_SetConfig+0x348>
 8009906:	2302      	movs	r3, #2
 8009908:	77fb      	strb	r3, [r7, #31]
 800990a:	e0ef      	b.n	8009aec <UART_SetConfig+0x348>
 800990c:	2304      	movs	r3, #4
 800990e:	77fb      	strb	r3, [r7, #31]
 8009910:	e0ec      	b.n	8009aec <UART_SetConfig+0x348>
 8009912:	2308      	movs	r3, #8
 8009914:	77fb      	strb	r3, [r7, #31]
 8009916:	e0e9      	b.n	8009aec <UART_SetConfig+0x348>
 8009918:	2310      	movs	r3, #16
 800991a:	77fb      	strb	r3, [r7, #31]
 800991c:	e0e6      	b.n	8009aec <UART_SetConfig+0x348>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a56      	ldr	r2, [pc, #344]	; (8009a7c <UART_SetConfig+0x2d8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d120      	bne.n	800996a <UART_SetConfig+0x1c6>
 8009928:	4b51      	ldr	r3, [pc, #324]	; (8009a70 <UART_SetConfig+0x2cc>)
 800992a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009932:	2bc0      	cmp	r3, #192	; 0xc0
 8009934:	d013      	beq.n	800995e <UART_SetConfig+0x1ba>
 8009936:	2bc0      	cmp	r3, #192	; 0xc0
 8009938:	d814      	bhi.n	8009964 <UART_SetConfig+0x1c0>
 800993a:	2b80      	cmp	r3, #128	; 0x80
 800993c:	d009      	beq.n	8009952 <UART_SetConfig+0x1ae>
 800993e:	2b80      	cmp	r3, #128	; 0x80
 8009940:	d810      	bhi.n	8009964 <UART_SetConfig+0x1c0>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <UART_SetConfig+0x1a8>
 8009946:	2b40      	cmp	r3, #64	; 0x40
 8009948:	d006      	beq.n	8009958 <UART_SetConfig+0x1b4>
 800994a:	e00b      	b.n	8009964 <UART_SetConfig+0x1c0>
 800994c:	2300      	movs	r3, #0
 800994e:	77fb      	strb	r3, [r7, #31]
 8009950:	e0cc      	b.n	8009aec <UART_SetConfig+0x348>
 8009952:	2302      	movs	r3, #2
 8009954:	77fb      	strb	r3, [r7, #31]
 8009956:	e0c9      	b.n	8009aec <UART_SetConfig+0x348>
 8009958:	2304      	movs	r3, #4
 800995a:	77fb      	strb	r3, [r7, #31]
 800995c:	e0c6      	b.n	8009aec <UART_SetConfig+0x348>
 800995e:	2308      	movs	r3, #8
 8009960:	77fb      	strb	r3, [r7, #31]
 8009962:	e0c3      	b.n	8009aec <UART_SetConfig+0x348>
 8009964:	2310      	movs	r3, #16
 8009966:	77fb      	strb	r3, [r7, #31]
 8009968:	e0c0      	b.n	8009aec <UART_SetConfig+0x348>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a44      	ldr	r2, [pc, #272]	; (8009a80 <UART_SetConfig+0x2dc>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d125      	bne.n	80099c0 <UART_SetConfig+0x21c>
 8009974:	4b3e      	ldr	r3, [pc, #248]	; (8009a70 <UART_SetConfig+0x2cc>)
 8009976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800997e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009982:	d017      	beq.n	80099b4 <UART_SetConfig+0x210>
 8009984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009988:	d817      	bhi.n	80099ba <UART_SetConfig+0x216>
 800998a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800998e:	d00b      	beq.n	80099a8 <UART_SetConfig+0x204>
 8009990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009994:	d811      	bhi.n	80099ba <UART_SetConfig+0x216>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <UART_SetConfig+0x1fe>
 800999a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800999e:	d006      	beq.n	80099ae <UART_SetConfig+0x20a>
 80099a0:	e00b      	b.n	80099ba <UART_SetConfig+0x216>
 80099a2:	2300      	movs	r3, #0
 80099a4:	77fb      	strb	r3, [r7, #31]
 80099a6:	e0a1      	b.n	8009aec <UART_SetConfig+0x348>
 80099a8:	2302      	movs	r3, #2
 80099aa:	77fb      	strb	r3, [r7, #31]
 80099ac:	e09e      	b.n	8009aec <UART_SetConfig+0x348>
 80099ae:	2304      	movs	r3, #4
 80099b0:	77fb      	strb	r3, [r7, #31]
 80099b2:	e09b      	b.n	8009aec <UART_SetConfig+0x348>
 80099b4:	2308      	movs	r3, #8
 80099b6:	77fb      	strb	r3, [r7, #31]
 80099b8:	e098      	b.n	8009aec <UART_SetConfig+0x348>
 80099ba:	2310      	movs	r3, #16
 80099bc:	77fb      	strb	r3, [r7, #31]
 80099be:	e095      	b.n	8009aec <UART_SetConfig+0x348>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a2f      	ldr	r2, [pc, #188]	; (8009a84 <UART_SetConfig+0x2e0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d125      	bne.n	8009a16 <UART_SetConfig+0x272>
 80099ca:	4b29      	ldr	r3, [pc, #164]	; (8009a70 <UART_SetConfig+0x2cc>)
 80099cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80099d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099d8:	d017      	beq.n	8009a0a <UART_SetConfig+0x266>
 80099da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099de:	d817      	bhi.n	8009a10 <UART_SetConfig+0x26c>
 80099e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099e4:	d00b      	beq.n	80099fe <UART_SetConfig+0x25a>
 80099e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099ea:	d811      	bhi.n	8009a10 <UART_SetConfig+0x26c>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <UART_SetConfig+0x254>
 80099f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099f4:	d006      	beq.n	8009a04 <UART_SetConfig+0x260>
 80099f6:	e00b      	b.n	8009a10 <UART_SetConfig+0x26c>
 80099f8:	2301      	movs	r3, #1
 80099fa:	77fb      	strb	r3, [r7, #31]
 80099fc:	e076      	b.n	8009aec <UART_SetConfig+0x348>
 80099fe:	2302      	movs	r3, #2
 8009a00:	77fb      	strb	r3, [r7, #31]
 8009a02:	e073      	b.n	8009aec <UART_SetConfig+0x348>
 8009a04:	2304      	movs	r3, #4
 8009a06:	77fb      	strb	r3, [r7, #31]
 8009a08:	e070      	b.n	8009aec <UART_SetConfig+0x348>
 8009a0a:	2308      	movs	r3, #8
 8009a0c:	77fb      	strb	r3, [r7, #31]
 8009a0e:	e06d      	b.n	8009aec <UART_SetConfig+0x348>
 8009a10:	2310      	movs	r3, #16
 8009a12:	77fb      	strb	r3, [r7, #31]
 8009a14:	e06a      	b.n	8009aec <UART_SetConfig+0x348>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1b      	ldr	r2, [pc, #108]	; (8009a88 <UART_SetConfig+0x2e4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d138      	bne.n	8009a92 <UART_SetConfig+0x2ee>
 8009a20:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <UART_SetConfig+0x2cc>)
 8009a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009a2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a2e:	d017      	beq.n	8009a60 <UART_SetConfig+0x2bc>
 8009a30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a34:	d82a      	bhi.n	8009a8c <UART_SetConfig+0x2e8>
 8009a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a3a:	d00b      	beq.n	8009a54 <UART_SetConfig+0x2b0>
 8009a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a40:	d824      	bhi.n	8009a8c <UART_SetConfig+0x2e8>
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <UART_SetConfig+0x2aa>
 8009a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4a:	d006      	beq.n	8009a5a <UART_SetConfig+0x2b6>
 8009a4c:	e01e      	b.n	8009a8c <UART_SetConfig+0x2e8>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	77fb      	strb	r3, [r7, #31]
 8009a52:	e04b      	b.n	8009aec <UART_SetConfig+0x348>
 8009a54:	2302      	movs	r3, #2
 8009a56:	77fb      	strb	r3, [r7, #31]
 8009a58:	e048      	b.n	8009aec <UART_SetConfig+0x348>
 8009a5a:	2304      	movs	r3, #4
 8009a5c:	77fb      	strb	r3, [r7, #31]
 8009a5e:	e045      	b.n	8009aec <UART_SetConfig+0x348>
 8009a60:	2308      	movs	r3, #8
 8009a62:	77fb      	strb	r3, [r7, #31]
 8009a64:	e042      	b.n	8009aec <UART_SetConfig+0x348>
 8009a66:	bf00      	nop
 8009a68:	efff69f3 	.word	0xefff69f3
 8009a6c:	40011000 	.word	0x40011000
 8009a70:	40023800 	.word	0x40023800
 8009a74:	40004400 	.word	0x40004400
 8009a78:	40004800 	.word	0x40004800
 8009a7c:	40004c00 	.word	0x40004c00
 8009a80:	40005000 	.word	0x40005000
 8009a84:	40011400 	.word	0x40011400
 8009a88:	40007800 	.word	0x40007800
 8009a8c:	2310      	movs	r3, #16
 8009a8e:	77fb      	strb	r3, [r7, #31]
 8009a90:	e02c      	b.n	8009aec <UART_SetConfig+0x348>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a72      	ldr	r2, [pc, #456]	; (8009c60 <UART_SetConfig+0x4bc>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d125      	bne.n	8009ae8 <UART_SetConfig+0x344>
 8009a9c:	4b71      	ldr	r3, [pc, #452]	; (8009c64 <UART_SetConfig+0x4c0>)
 8009a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009aa6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009aaa:	d017      	beq.n	8009adc <UART_SetConfig+0x338>
 8009aac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009ab0:	d817      	bhi.n	8009ae2 <UART_SetConfig+0x33e>
 8009ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ab6:	d00b      	beq.n	8009ad0 <UART_SetConfig+0x32c>
 8009ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009abc:	d811      	bhi.n	8009ae2 <UART_SetConfig+0x33e>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <UART_SetConfig+0x326>
 8009ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ac6:	d006      	beq.n	8009ad6 <UART_SetConfig+0x332>
 8009ac8:	e00b      	b.n	8009ae2 <UART_SetConfig+0x33e>
 8009aca:	2300      	movs	r3, #0
 8009acc:	77fb      	strb	r3, [r7, #31]
 8009ace:	e00d      	b.n	8009aec <UART_SetConfig+0x348>
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	77fb      	strb	r3, [r7, #31]
 8009ad4:	e00a      	b.n	8009aec <UART_SetConfig+0x348>
 8009ad6:	2304      	movs	r3, #4
 8009ad8:	77fb      	strb	r3, [r7, #31]
 8009ada:	e007      	b.n	8009aec <UART_SetConfig+0x348>
 8009adc:	2308      	movs	r3, #8
 8009ade:	77fb      	strb	r3, [r7, #31]
 8009ae0:	e004      	b.n	8009aec <UART_SetConfig+0x348>
 8009ae2:	2310      	movs	r3, #16
 8009ae4:	77fb      	strb	r3, [r7, #31]
 8009ae6:	e001      	b.n	8009aec <UART_SetConfig+0x348>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af4:	d15b      	bne.n	8009bae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009af6:	7ffb      	ldrb	r3, [r7, #31]
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d828      	bhi.n	8009b4e <UART_SetConfig+0x3aa>
 8009afc:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0x360>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b29 	.word	0x08009b29
 8009b08:	08009b31 	.word	0x08009b31
 8009b0c:	08009b39 	.word	0x08009b39
 8009b10:	08009b4f 	.word	0x08009b4f
 8009b14:	08009b3f 	.word	0x08009b3f
 8009b18:	08009b4f 	.word	0x08009b4f
 8009b1c:	08009b4f 	.word	0x08009b4f
 8009b20:	08009b4f 	.word	0x08009b4f
 8009b24:	08009b47 	.word	0x08009b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b28:	f7fe f852 	bl	8007bd0 <HAL_RCC_GetPCLK1Freq>
 8009b2c:	61b8      	str	r0, [r7, #24]
        break;
 8009b2e:	e013      	b.n	8009b58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b30:	f7fe f862 	bl	8007bf8 <HAL_RCC_GetPCLK2Freq>
 8009b34:	61b8      	str	r0, [r7, #24]
        break;
 8009b36:	e00f      	b.n	8009b58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b38:	4b4b      	ldr	r3, [pc, #300]	; (8009c68 <UART_SetConfig+0x4c4>)
 8009b3a:	61bb      	str	r3, [r7, #24]
        break;
 8009b3c:	e00c      	b.n	8009b58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b3e:	f7fd ff35 	bl	80079ac <HAL_RCC_GetSysClockFreq>
 8009b42:	61b8      	str	r0, [r7, #24]
        break;
 8009b44:	e008      	b.n	8009b58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b4a:	61bb      	str	r3, [r7, #24]
        break;
 8009b4c:	e004      	b.n	8009b58 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	77bb      	strb	r3, [r7, #30]
        break;
 8009b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d074      	beq.n	8009c48 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	005a      	lsls	r2, r3, #1
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	441a      	add	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d916      	bls.n	8009ba8 <UART_SetConfig+0x404>
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b80:	d212      	bcs.n	8009ba8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	f023 030f 	bic.w	r3, r3, #15
 8009b8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	085b      	lsrs	r3, r3, #1
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f003 0307 	and.w	r3, r3, #7
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	89fb      	ldrh	r3, [r7, #14]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	89fa      	ldrh	r2, [r7, #14]
 8009ba4:	60da      	str	r2, [r3, #12]
 8009ba6:	e04f      	b.n	8009c48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	77bb      	strb	r3, [r7, #30]
 8009bac:	e04c      	b.n	8009c48 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bae:	7ffb      	ldrb	r3, [r7, #31]
 8009bb0:	2b08      	cmp	r3, #8
 8009bb2:	d828      	bhi.n	8009c06 <UART_SetConfig+0x462>
 8009bb4:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <UART_SetConfig+0x418>)
 8009bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bba:	bf00      	nop
 8009bbc:	08009be1 	.word	0x08009be1
 8009bc0:	08009be9 	.word	0x08009be9
 8009bc4:	08009bf1 	.word	0x08009bf1
 8009bc8:	08009c07 	.word	0x08009c07
 8009bcc:	08009bf7 	.word	0x08009bf7
 8009bd0:	08009c07 	.word	0x08009c07
 8009bd4:	08009c07 	.word	0x08009c07
 8009bd8:	08009c07 	.word	0x08009c07
 8009bdc:	08009bff 	.word	0x08009bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009be0:	f7fd fff6 	bl	8007bd0 <HAL_RCC_GetPCLK1Freq>
 8009be4:	61b8      	str	r0, [r7, #24]
        break;
 8009be6:	e013      	b.n	8009c10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be8:	f7fe f806 	bl	8007bf8 <HAL_RCC_GetPCLK2Freq>
 8009bec:	61b8      	str	r0, [r7, #24]
        break;
 8009bee:	e00f      	b.n	8009c10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bf0:	4b1d      	ldr	r3, [pc, #116]	; (8009c68 <UART_SetConfig+0x4c4>)
 8009bf2:	61bb      	str	r3, [r7, #24]
        break;
 8009bf4:	e00c      	b.n	8009c10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bf6:	f7fd fed9 	bl	80079ac <HAL_RCC_GetSysClockFreq>
 8009bfa:	61b8      	str	r0, [r7, #24]
        break;
 8009bfc:	e008      	b.n	8009c10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c02:	61bb      	str	r3, [r7, #24]
        break;
 8009c04:	e004      	b.n	8009c10 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8009c0e:	bf00      	nop
    }

    if (pclk != 0U)
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d018      	beq.n	8009c48 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	085a      	lsrs	r2, r3, #1
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	441a      	add	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b0f      	cmp	r3, #15
 8009c2e:	d909      	bls.n	8009c44 <UART_SetConfig+0x4a0>
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c36:	d205      	bcs.n	8009c44 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	60da      	str	r2, [r3, #12]
 8009c42:	e001      	b.n	8009c48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009c54:	7fbb      	ldrb	r3, [r7, #30]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	40007c00 	.word	0x40007c00
 8009c64:	40023800 	.word	0x40023800
 8009c68:	00f42400 	.word	0x00f42400

08009c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00a      	beq.n	8009cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cde:	f003 0308 	and.w	r3, r3, #8
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	f003 0310 	and.w	r3, r3, #16
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00a      	beq.n	8009d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	f003 0320 	and.w	r3, r3, #32
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01a      	beq.n	8009d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d6a:	d10a      	bne.n	8009d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	605a      	str	r2, [r3, #4]
  }
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dc0:	f7fa f9ee 	bl	80041a0 <HAL_GetTick>
 8009dc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 0308 	and.w	r3, r3, #8
 8009dd0:	2b08      	cmp	r3, #8
 8009dd2:	d10e      	bne.n	8009df2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f831 	bl	8009e4a <UART_WaitOnFlagUntilTimeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e027      	b.n	8009e42 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	d10e      	bne.n	8009e1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f81b 	bl	8009e4a <UART_WaitOnFlagUntilTimeout>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e011      	b.n	8009e42 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2220      	movs	r2, #32
 8009e22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b09c      	sub	sp, #112	; 0x70
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	603b      	str	r3, [r7, #0]
 8009e56:	4613      	mov	r3, r2
 8009e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e5a:	e0a7      	b.n	8009fac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e62:	f000 80a3 	beq.w	8009fac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e66:	f7fa f99b 	bl	80041a0 <HAL_GetTick>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d302      	bcc.n	8009e7c <UART_WaitOnFlagUntilTimeout+0x32>
 8009e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d13f      	bne.n	8009efc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e84:	e853 3f00 	ldrex	r3, [r3]
 8009e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e90:	667b      	str	r3, [r7, #100]	; 0x64
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ea0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e6      	bne.n	8009e7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	f023 0301 	bic.w	r3, r3, #1
 8009ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3308      	adds	r3, #8
 8009ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ece:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ed0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e5      	bne.n	8009eae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e068      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0304 	and.w	r3, r3, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d050      	beq.n	8009fac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f18:	d148      	bne.n	8009fac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f42:	637b      	str	r3, [r7, #52]	; 0x34
 8009f44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e6      	bne.n	8009f24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	613b      	str	r3, [r7, #16]
   return(result);
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f023 0301 	bic.w	r3, r3, #1
 8009f6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f76:	623a      	str	r2, [r7, #32]
 8009f78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	69f9      	ldr	r1, [r7, #28]
 8009f7c:	6a3a      	ldr	r2, [r7, #32]
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e5      	bne.n	8009f56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e010      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	69da      	ldr	r2, [r3, #28]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	bf0c      	ite	eq
 8009fbc:	2301      	moveq	r3, #1
 8009fbe:	2300      	movne	r3, #0
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	f43f af48 	beq.w	8009e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3770      	adds	r7, #112	; 0x70
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b096      	sub	sp, #88	; 0x58
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	88fa      	ldrh	r2, [r7, #6]
 8009ff0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2222      	movs	r2, #34	; 0x22
 800a000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d028      	beq.n	800a05e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a010:	4a3e      	ldr	r2, [pc, #248]	; (800a10c <UART_Start_Receive_DMA+0x134>)
 800a012:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a018:	4a3d      	ldr	r2, [pc, #244]	; (800a110 <UART_Start_Receive_DMA+0x138>)
 800a01a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a020:	4a3c      	ldr	r2, [pc, #240]	; (800a114 <UART_Start_Receive_DMA+0x13c>)
 800a022:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a028:	2200      	movs	r2, #0
 800a02a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3324      	adds	r3, #36	; 0x24
 800a036:	4619      	mov	r1, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03c:	461a      	mov	r2, r3
 800a03e:	88fb      	ldrh	r3, [r7, #6]
 800a040:	f7fb f8ca 	bl	80051d8 <HAL_DMA_Start_IT>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d009      	beq.n	800a05e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2210      	movs	r2, #16
 800a04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e051      	b.n	800a102 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d018      	beq.n	800a098 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a07a:	657b      	str	r3, [r7, #84]	; 0x54
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a084:	64bb      	str	r3, [r7, #72]	; 0x48
 800a086:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a08a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e6      	bne.n	800a066 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3308      	adds	r3, #8
 800a09e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	f043 0301 	orr.w	r3, r3, #1
 800a0ae:	653b      	str	r3, [r7, #80]	; 0x50
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0b8:	637a      	str	r2, [r7, #52]	; 0x34
 800a0ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e5      	bne.n	800a098 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	e853 3f00 	ldrex	r3, [r3]
 800a0da:	613b      	str	r3, [r7, #16]
   return(result);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0ec:	623a      	str	r2, [r7, #32]
 800a0ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f0:	69f9      	ldr	r1, [r7, #28]
 800a0f2:	6a3a      	ldr	r2, [r7, #32]
 800a0f4:	e841 2300 	strex	r3, r2, [r1]
 800a0f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e5      	bne.n	800a0cc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3758      	adds	r7, #88	; 0x58
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	0800a2df 	.word	0x0800a2df
 800a110:	0800a407 	.word	0x0800a407
 800a114:	0800a445 	.word	0x0800a445

0800a118 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a118:	b480      	push	{r7}
 800a11a:	b089      	sub	sp, #36	; 0x24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	e853 3f00 	ldrex	r3, [r3]
 800a12c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	61bb      	str	r3, [r7, #24]
 800a140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6979      	ldr	r1, [r7, #20]
 800a144:	69ba      	ldr	r2, [r7, #24]
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	613b      	str	r3, [r7, #16]
   return(result);
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e6      	bne.n	800a120 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a158:	bf00      	nop
 800a15a:	3724      	adds	r7, #36	; 0x24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a164:	b480      	push	{r7}
 800a166:	b095      	sub	sp, #84	; 0x54
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a180:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a18a:	643b      	str	r3, [r7, #64]	; 0x40
 800a18c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e6      	bne.n	800a16c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e5      	bne.n	800a19e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d118      	bne.n	800a20c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	e853 3f00 	ldrex	r3, [r3]
 800a1e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f023 0310 	bic.w	r3, r3, #16
 800a1ee:	647b      	str	r3, [r7, #68]	; 0x44
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1f8:	61bb      	str	r3, [r7, #24]
 800a1fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	6979      	ldr	r1, [r7, #20]
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	e841 2300 	strex	r3, r2, [r1]
 800a204:	613b      	str	r3, [r7, #16]
   return(result);
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e6      	bne.n	800a1da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a220:	bf00      	nop
 800a222:	3754      	adds	r7, #84	; 0x54
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b090      	sub	sp, #64	; 0x40
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a242:	d037      	beq.n	800a2b4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a246:	2200      	movs	r2, #0
 800a248:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3308      	adds	r3, #8
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	e853 3f00 	ldrex	r3, [r3]
 800a25a:	623b      	str	r3, [r7, #32]
   return(result);
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a262:	63bb      	str	r3, [r7, #56]	; 0x38
 800a264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3308      	adds	r3, #8
 800a26a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a26c:	633a      	str	r2, [r7, #48]	; 0x30
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a274:	e841 2300 	strex	r3, r2, [r1]
 800a278:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1e5      	bne.n	800a24c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
 800a296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	69b9      	ldr	r1, [r7, #24]
 800a2a4:	69fa      	ldr	r2, [r7, #28]
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e6      	bne.n	800a280 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2b2:	e002      	b.n	800a2ba <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a2b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a2b6:	f7ff fa2d 	bl	8009714 <HAL_UART_TxCpltCallback>
}
 800a2ba:	bf00      	nop
 800a2bc:	3740      	adds	r7, #64	; 0x40
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f7ff fa29 	bl	8009728 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b09c      	sub	sp, #112	; 0x70
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f4:	d071      	beq.n	800a3da <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a30c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a30e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a312:	66bb      	str	r3, [r7, #104]	; 0x68
 800a314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	461a      	mov	r2, r3
 800a31a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a31c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a31e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a32a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e6      	bne.n	800a2fe <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	e853 3f00 	ldrex	r3, [r3]
 800a33e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a342:	f023 0301 	bic.w	r3, r3, #1
 800a346:	667b      	str	r3, [r7, #100]	; 0x64
 800a348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3308      	adds	r3, #8
 800a34e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a350:	647a      	str	r2, [r7, #68]	; 0x44
 800a352:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a354:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a358:	e841 2300 	strex	r3, r2, [r1]
 800a35c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a35e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1e5      	bne.n	800a330 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	623b      	str	r3, [r7, #32]
   return(result);
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a37a:	663b      	str	r3, [r7, #96]	; 0x60
 800a37c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3308      	adds	r3, #8
 800a382:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a384:	633a      	str	r2, [r7, #48]	; 0x30
 800a386:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e5      	bne.n	800a364 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39a:	2220      	movs	r2, #32
 800a39c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d118      	bne.n	800a3da <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	e853 3f00 	ldrex	r3, [r3]
 800a3b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f023 0310 	bic.w	r3, r3, #16
 800a3bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3c6:	61fb      	str	r3, [r7, #28]
 800a3c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ca:	69b9      	ldr	r1, [r7, #24]
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	e841 2300 	strex	r3, r2, [r1]
 800a3d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1e6      	bne.n	800a3a8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3dc:	2200      	movs	r2, #0
 800a3de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d107      	bne.n	800a3f8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3f2:	f7ff f9c1 	bl	8009778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3f6:	e002      	b.n	800a3fe <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a3f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3fa:	f7ff f99f 	bl	800973c <HAL_UART_RxCpltCallback>
}
 800a3fe:	bf00      	nop
 800a400:	3770      	adds	r7, #112	; 0x70
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a412:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d109      	bne.n	800a436 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a428:	085b      	lsrs	r3, r3, #1
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	4619      	mov	r1, r3
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff f9a2 	bl	8009778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a434:	e002      	b.n	800a43c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7ff f98a 	bl	8009750 <HAL_UART_RxHalfCpltCallback>
}
 800a43c:	bf00      	nop
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a450:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a456:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46a:	2b80      	cmp	r3, #128	; 0x80
 800a46c:	d109      	bne.n	800a482 <UART_DMAError+0x3e>
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	2b21      	cmp	r3, #33	; 0x21
 800a472:	d106      	bne.n	800a482 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2200      	movs	r2, #0
 800a478:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a47c:	6978      	ldr	r0, [r7, #20]
 800a47e:	f7ff fe4b 	bl	800a118 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48c:	2b40      	cmp	r3, #64	; 0x40
 800a48e:	d109      	bne.n	800a4a4 <UART_DMAError+0x60>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b22      	cmp	r3, #34	; 0x22
 800a494:	d106      	bne.n	800a4a4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2200      	movs	r2, #0
 800a49a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a49e:	6978      	ldr	r0, [r7, #20]
 800a4a0:	f7ff fe60 	bl	800a164 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4aa:	f043 0210 	orr.w	r2, r3, #16
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4b4:	6978      	ldr	r0, [r7, #20]
 800a4b6:	f7ff f955 	bl	8009764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ba:	bf00      	nop
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff f93f 	bl	8009764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b088      	sub	sp, #32
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	e853 3f00 	ldrex	r3, [r3]
 800a502:	60bb      	str	r3, [r7, #8]
   return(result);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a50a:	61fb      	str	r3, [r7, #28]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	461a      	mov	r2, r3
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	61bb      	str	r3, [r7, #24]
 800a516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a518:	6979      	ldr	r1, [r7, #20]
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	e841 2300 	strex	r3, r2, [r1]
 800a520:	613b      	str	r3, [r7, #16]
   return(result);
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1e6      	bne.n	800a4f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2220      	movs	r2, #32
 800a52c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff f8ed 	bl	8009714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a53a:	bf00      	nop
 800a53c:	3720      	adds	r7, #32
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a544:	b084      	sub	sp, #16
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	f107 001c 	add.w	r0, r7, #28
 800a552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d120      	bne.n	800a59e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68da      	ldr	r2, [r3, #12]
 800a56c:	4b20      	ldr	r3, [pc, #128]	; (800a5f0 <USB_CoreInit+0xac>)
 800a56e:	4013      	ands	r3, r2
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a582:	2b01      	cmp	r3, #1
 800a584:	d105      	bne.n	800a592 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f001 fbee 	bl	800bd74 <USB_CoreReset>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]
 800a59c:	e010      	b.n	800a5c0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fbe2 	bl	800bd74 <USB_CoreReset>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d10b      	bne.n	800a5de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f043 0206 	orr.w	r2, r3, #6
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f043 0220 	orr.w	r2, r3, #32
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5ea:	b004      	add	sp, #16
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	ffbdffbf 	.word	0xffbdffbf

0800a5f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a602:	79fb      	ldrb	r3, [r7, #7]
 800a604:	2b02      	cmp	r3, #2
 800a606:	d165      	bne.n	800a6d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	4a41      	ldr	r2, [pc, #260]	; (800a710 <USB_SetTurnaroundTime+0x11c>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d906      	bls.n	800a61e <USB_SetTurnaroundTime+0x2a>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	4a40      	ldr	r2, [pc, #256]	; (800a714 <USB_SetTurnaroundTime+0x120>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d202      	bcs.n	800a61e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a618:	230f      	movs	r3, #15
 800a61a:	617b      	str	r3, [r7, #20]
 800a61c:	e062      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4a3c      	ldr	r2, [pc, #240]	; (800a714 <USB_SetTurnaroundTime+0x120>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d306      	bcc.n	800a634 <USB_SetTurnaroundTime+0x40>
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	4a3b      	ldr	r2, [pc, #236]	; (800a718 <USB_SetTurnaroundTime+0x124>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d202      	bcs.n	800a634 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a62e:	230e      	movs	r3, #14
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	e057      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	4a38      	ldr	r2, [pc, #224]	; (800a718 <USB_SetTurnaroundTime+0x124>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d306      	bcc.n	800a64a <USB_SetTurnaroundTime+0x56>
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	4a37      	ldr	r2, [pc, #220]	; (800a71c <USB_SetTurnaroundTime+0x128>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d202      	bcs.n	800a64a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a644:	230d      	movs	r3, #13
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e04c      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	4a33      	ldr	r2, [pc, #204]	; (800a71c <USB_SetTurnaroundTime+0x128>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d306      	bcc.n	800a660 <USB_SetTurnaroundTime+0x6c>
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	4a32      	ldr	r2, [pc, #200]	; (800a720 <USB_SetTurnaroundTime+0x12c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d802      	bhi.n	800a660 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a65a:	230c      	movs	r3, #12
 800a65c:	617b      	str	r3, [r7, #20]
 800a65e:	e041      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	4a2f      	ldr	r2, [pc, #188]	; (800a720 <USB_SetTurnaroundTime+0x12c>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d906      	bls.n	800a676 <USB_SetTurnaroundTime+0x82>
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	4a2e      	ldr	r2, [pc, #184]	; (800a724 <USB_SetTurnaroundTime+0x130>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d802      	bhi.n	800a676 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a670:	230b      	movs	r3, #11
 800a672:	617b      	str	r3, [r7, #20]
 800a674:	e036      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	4a2a      	ldr	r2, [pc, #168]	; (800a724 <USB_SetTurnaroundTime+0x130>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d906      	bls.n	800a68c <USB_SetTurnaroundTime+0x98>
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	4a29      	ldr	r2, [pc, #164]	; (800a728 <USB_SetTurnaroundTime+0x134>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d802      	bhi.n	800a68c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a686:	230a      	movs	r3, #10
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	e02b      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	4a26      	ldr	r2, [pc, #152]	; (800a728 <USB_SetTurnaroundTime+0x134>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d906      	bls.n	800a6a2 <USB_SetTurnaroundTime+0xae>
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	4a25      	ldr	r2, [pc, #148]	; (800a72c <USB_SetTurnaroundTime+0x138>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d202      	bcs.n	800a6a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a69c:	2309      	movs	r3, #9
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	e020      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	4a21      	ldr	r2, [pc, #132]	; (800a72c <USB_SetTurnaroundTime+0x138>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d306      	bcc.n	800a6b8 <USB_SetTurnaroundTime+0xc4>
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	4a20      	ldr	r2, [pc, #128]	; (800a730 <USB_SetTurnaroundTime+0x13c>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d802      	bhi.n	800a6b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a6b2:	2308      	movs	r3, #8
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	e015      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	4a1d      	ldr	r2, [pc, #116]	; (800a730 <USB_SetTurnaroundTime+0x13c>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d906      	bls.n	800a6ce <USB_SetTurnaroundTime+0xda>
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	4a1c      	ldr	r2, [pc, #112]	; (800a734 <USB_SetTurnaroundTime+0x140>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d202      	bcs.n	800a6ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a6c8:	2307      	movs	r3, #7
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	e00a      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a6ce:	2306      	movs	r3, #6
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	e007      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d102      	bne.n	800a6e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a6da:	2309      	movs	r3, #9
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	e001      	b.n	800a6e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a6e0:	2309      	movs	r3, #9
 800a6e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	68da      	ldr	r2, [r3, #12]
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	029b      	lsls	r3, r3, #10
 800a6f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a6fc:	431a      	orrs	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	00d8acbf 	.word	0x00d8acbf
 800a714:	00e4e1c0 	.word	0x00e4e1c0
 800a718:	00f42400 	.word	0x00f42400
 800a71c:	01067380 	.word	0x01067380
 800a720:	011a499f 	.word	0x011a499f
 800a724:	01312cff 	.word	0x01312cff
 800a728:	014ca43f 	.word	0x014ca43f
 800a72c:	016e3600 	.word	0x016e3600
 800a730:	01a6ab1f 	.word	0x01a6ab1f
 800a734:	01e84800 	.word	0x01e84800

0800a738 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f043 0201 	orr.w	r2, r3, #1
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f023 0201 	bic.w	r2, r3, #1
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d115      	bne.n	800a7ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	f7f9 fd04 	bl	80041b8 <HAL_Delay>
      ms++;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 fa4b 	bl	800bc52 <USB_GetMode>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d01e      	beq.n	800a800 <USB_SetCurrentMode+0x84>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b31      	cmp	r3, #49	; 0x31
 800a7c6:	d9f0      	bls.n	800a7aa <USB_SetCurrentMode+0x2e>
 800a7c8:	e01a      	b.n	800a800 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d115      	bne.n	800a7fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a7dc:	2001      	movs	r0, #1
 800a7de:	f7f9 fceb 	bl	80041b8 <HAL_Delay>
      ms++;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f001 fa32 	bl	800bc52 <USB_GetMode>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d005      	beq.n	800a800 <USB_SetCurrentMode+0x84>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b31      	cmp	r3, #49	; 0x31
 800a7f8:	d9f0      	bls.n	800a7dc <USB_SetCurrentMode+0x60>
 800a7fa:	e001      	b.n	800a800 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e005      	b.n	800a80c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b32      	cmp	r3, #50	; 0x32
 800a804:	d101      	bne.n	800a80a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e000      	b.n	800a80c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a814:	b084      	sub	sp, #16
 800a816:	b580      	push	{r7, lr}
 800a818:	b086      	sub	sp, #24
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a82e:	2300      	movs	r3, #0
 800a830:	613b      	str	r3, [r7, #16]
 800a832:	e009      	b.n	800a848 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	3340      	adds	r3, #64	; 0x40
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4413      	add	r3, r2
 800a83e:	2200      	movs	r2, #0
 800a840:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	3301      	adds	r3, #1
 800a846:	613b      	str	r3, [r7, #16]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	2b0e      	cmp	r3, #14
 800a84c:	d9f2      	bls.n	800a834 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a84e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a850:	2b00      	cmp	r3, #0
 800a852:	d11c      	bne.n	800a88e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a862:	f043 0302 	orr.w	r3, r3, #2
 800a866:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	e005      	b.n	800a89a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	680b      	ldr	r3, [r1, #0]
 800a8b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d10c      	bne.n	800a8da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d104      	bne.n	800a8d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f965 	bl	800ab98 <USB_SetDevSpeed>
 800a8ce:	e008      	b.n	800a8e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f960 	bl	800ab98 <USB_SetDevSpeed>
 800a8d8:	e003      	b.n	800a8e2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a8da:	2103      	movs	r1, #3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f95b 	bl	800ab98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8e2:	2110      	movs	r1, #16
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f8f3 	bl	800aad0 <USB_FlushTxFifo>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f91f 	bl	800ab38 <USB_FlushRxFifo>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90a:	461a      	mov	r2, r3
 800a90c:	2300      	movs	r3, #0
 800a90e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a916:	461a      	mov	r2, r3
 800a918:	2300      	movs	r3, #0
 800a91a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a922:	461a      	mov	r2, r3
 800a924:	2300      	movs	r3, #0
 800a926:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a928:	2300      	movs	r3, #0
 800a92a:	613b      	str	r3, [r7, #16]
 800a92c:	e043      	b.n	800a9b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	4413      	add	r3, r2
 800a936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a944:	d118      	bne.n	800a978 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a958:	461a      	mov	r2, r3
 800a95a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	e013      	b.n	800a98a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96e:	461a      	mov	r2, r3
 800a970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	e008      	b.n	800a98a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a984:	461a      	mov	r2, r3
 800a986:	2300      	movs	r3, #0
 800a988:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	461a      	mov	r2, r3
 800a998:	2300      	movs	r3, #0
 800a99a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	613b      	str	r3, [r7, #16]
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d3b7      	bcc.n	800a92e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9be:	2300      	movs	r3, #0
 800a9c0:	613b      	str	r3, [r7, #16]
 800a9c2:	e043      	b.n	800aa4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9da:	d118      	bne.n	800aa0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10a      	bne.n	800a9f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	e013      	b.n	800aa20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa04:	461a      	mov	r2, r3
 800aa06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	e008      	b.n	800aa20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	2300      	movs	r3, #0
 800aa30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	613b      	str	r3, [r7, #16]
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d3b7      	bcc.n	800a9c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d105      	bne.n	800aa88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f043 0210 	orr.w	r2, r3, #16
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	699a      	ldr	r2, [r3, #24]
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <USB_DevInit+0x2b4>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d005      	beq.n	800aaa6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	f043 0208 	orr.w	r2, r3, #8
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aaa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d105      	bne.n	800aab8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <USB_DevInit+0x2b8>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aac4:	b004      	add	sp, #16
 800aac6:	4770      	bx	lr
 800aac8:	803c3800 	.word	0x803c3800
 800aacc:	40000004 	.word	0x40000004

0800aad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3301      	adds	r3, #1
 800aae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	4a13      	ldr	r2, [pc, #76]	; (800ab34 <USB_FlushTxFifo+0x64>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d901      	bls.n	800aaf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e01b      	b.n	800ab28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	daf2      	bge.n	800aade <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	019b      	lsls	r3, r3, #6
 800ab00:	f043 0220 	orr.w	r2, r3, #32
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4a08      	ldr	r2, [pc, #32]	; (800ab34 <USB_FlushTxFifo+0x64>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d901      	bls.n	800ab1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e006      	b.n	800ab28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	f003 0320 	and.w	r3, r3, #32
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d0f0      	beq.n	800ab08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	00030d40 	.word	0x00030d40

0800ab38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	3301      	adds	r3, #1
 800ab48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4a11      	ldr	r2, [pc, #68]	; (800ab94 <USB_FlushRxFifo+0x5c>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d901      	bls.n	800ab56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e018      	b.n	800ab88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	daf2      	bge.n	800ab44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2210      	movs	r2, #16
 800ab66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4a08      	ldr	r2, [pc, #32]	; (800ab94 <USB_FlushRxFifo+0x5c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d901      	bls.n	800ab7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e006      	b.n	800ab88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f003 0310 	and.w	r3, r3, #16
 800ab82:	2b10      	cmp	r3, #16
 800ab84:	d0f0      	beq.n	800ab68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3714      	adds	r7, #20
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	00030d40 	.word	0x00030d40

0800ab98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	68f9      	ldr	r1, [r7, #12]
 800abb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abb8:	4313      	orrs	r3, r2
 800abba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800abca:	b480      	push	{r7}
 800abcc:	b087      	sub	sp, #28
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 0306 	and.w	r3, r3, #6
 800abe2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d102      	bne.n	800abf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800abea:	2300      	movs	r3, #0
 800abec:	75fb      	strb	r3, [r7, #23]
 800abee:	e00a      	b.n	800ac06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d002      	beq.n	800abfc <USB_GetDevSpeed+0x32>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b06      	cmp	r3, #6
 800abfa:	d102      	bne.n	800ac02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800abfc:	2302      	movs	r3, #2
 800abfe:	75fb      	strb	r3, [r7, #23]
 800ac00:	e001      	b.n	800ac06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac02:	230f      	movs	r3, #15
 800ac04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	371c      	adds	r7, #28
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	785b      	ldrb	r3, [r3, #1]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d139      	bne.n	800aca4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac36:	69da      	ldr	r2, [r3, #28]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	f003 030f 	and.w	r3, r3, #15
 800ac40:	2101      	movs	r1, #1
 800ac42:	fa01 f303 	lsl.w	r3, r1, r3
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	68f9      	ldr	r1, [r7, #12]
 800ac4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d153      	bne.n	800ad10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	015a      	lsls	r2, r3, #5
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4413      	add	r3, r2
 800ac70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	791b      	ldrb	r3, [r3, #4]
 800ac82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	059b      	lsls	r3, r3, #22
 800ac8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	0159      	lsls	r1, r3, #5
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	440b      	add	r3, r1
 800ac96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4b20      	ldr	r3, [pc, #128]	; (800ad20 <USB_ActivateEndpoint+0x10c>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	600b      	str	r3, [r1, #0]
 800aca2:	e035      	b.n	800ad10 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acaa:	69da      	ldr	r2, [r3, #28]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	f003 030f 	and.w	r3, r3, #15
 800acb4:	2101      	movs	r1, #1
 800acb6:	fa01 f303 	lsl.w	r3, r1, r3
 800acba:	041b      	lsls	r3, r3, #16
 800acbc:	68f9      	ldr	r1, [r7, #12]
 800acbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acc2:	4313      	orrs	r3, r2
 800acc4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d119      	bne.n	800ad10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acf8:	430b      	orrs	r3, r1
 800acfa:	431a      	orrs	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	0159      	lsls	r1, r3, #5
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	440b      	add	r3, r1
 800ad04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <USB_ActivateEndpoint+0x10c>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	10008000 	.word	0x10008000

0800ad24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d161      	bne.n	800ae04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad56:	d11f      	bne.n	800ad98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	0151      	lsls	r1, r2, #5
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	440a      	add	r2, r1
 800ad8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	f003 030f 	and.w	r3, r3, #15
 800ada8:	2101      	movs	r1, #1
 800adaa:	fa01 f303 	lsl.w	r3, r1, r3
 800adae:	b29b      	uxth	r3, r3
 800adb0:	43db      	mvns	r3, r3
 800adb2:	68f9      	ldr	r1, [r7, #12]
 800adb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adb8:	4013      	ands	r3, r2
 800adba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc2:	69da      	ldr	r2, [r3, #28]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	f003 030f 	and.w	r3, r3, #15
 800adcc:	2101      	movs	r1, #1
 800adce:	fa01 f303 	lsl.w	r3, r1, r3
 800add2:	b29b      	uxth	r3, r3
 800add4:	43db      	mvns	r3, r3
 800add6:	68f9      	ldr	r1, [r7, #12]
 800add8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800addc:	4013      	ands	r3, r2
 800adde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	0159      	lsls	r1, r3, #5
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	440b      	add	r3, r1
 800adf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfa:	4619      	mov	r1, r3
 800adfc:	4b35      	ldr	r3, [pc, #212]	; (800aed4 <USB_DeactivateEndpoint+0x1b0>)
 800adfe:	4013      	ands	r3, r2
 800ae00:	600b      	str	r3, [r1, #0]
 800ae02:	e060      	b.n	800aec6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae1a:	d11f      	bne.n	800ae5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	0151      	lsls	r1, r2, #5
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	440a      	add	r2, r1
 800ae32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	0151      	lsls	r1, r2, #5
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	440a      	add	r2, r1
 800ae52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	f003 030f 	and.w	r3, r3, #15
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae72:	041b      	lsls	r3, r3, #16
 800ae74:	43db      	mvns	r3, r3
 800ae76:	68f9      	ldr	r1, [r7, #12]
 800ae78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae86:	69da      	ldr	r2, [r3, #28]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	f003 030f 	and.w	r3, r3, #15
 800ae90:	2101      	movs	r1, #1
 800ae92:	fa01 f303 	lsl.w	r3, r1, r3
 800ae96:	041b      	lsls	r3, r3, #16
 800ae98:	43db      	mvns	r3, r3
 800ae9a:	68f9      	ldr	r1, [r7, #12]
 800ae9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aea0:	4013      	ands	r3, r2
 800aea2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	0159      	lsls	r1, r3, #5
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	440b      	add	r3, r1
 800aeba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aebe:	4619      	mov	r1, r3
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <USB_DeactivateEndpoint+0x1b4>)
 800aec2:	4013      	ands	r3, r2
 800aec4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr
 800aed4:	ec337800 	.word	0xec337800
 800aed8:	eff37800 	.word	0xeff37800

0800aedc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08a      	sub	sp, #40	; 0x28
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	4613      	mov	r3, r2
 800aee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	785b      	ldrb	r3, [r3, #1]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	f040 8163 	bne.w	800b1c4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d132      	bne.n	800af6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	015a      	lsls	r2, r3, #5
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	4413      	add	r3, r2
 800af0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af12:	691a      	ldr	r2, [r3, #16]
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	0159      	lsls	r1, r3, #5
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	440b      	add	r3, r1
 800af1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af20:	4619      	mov	r1, r3
 800af22:	4ba5      	ldr	r3, [pc, #660]	; (800b1b8 <USB_EPStartXfer+0x2dc>)
 800af24:	4013      	ands	r3, r2
 800af26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	0151      	lsls	r1, r2, #5
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	440a      	add	r2, r1
 800af3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af54:	691a      	ldr	r2, [r3, #16]
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	0159      	lsls	r1, r3, #5
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	440b      	add	r3, r1
 800af5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af62:	4619      	mov	r1, r3
 800af64:	4b95      	ldr	r3, [pc, #596]	; (800b1bc <USB_EPStartXfer+0x2e0>)
 800af66:	4013      	ands	r3, r2
 800af68:	610b      	str	r3, [r1, #16]
 800af6a:	e074      	b.n	800b056 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	4413      	add	r3, r2
 800af74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af78:	691a      	ldr	r2, [r3, #16]
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	0159      	lsls	r1, r3, #5
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	440b      	add	r3, r1
 800af82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af86:	4619      	mov	r1, r3
 800af88:	4b8c      	ldr	r3, [pc, #560]	; (800b1bc <USB_EPStartXfer+0x2e0>)
 800af8a:	4013      	ands	r3, r2
 800af8c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	0159      	lsls	r1, r3, #5
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	440b      	add	r3, r1
 800afa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa8:	4619      	mov	r1, r3
 800afaa:	4b83      	ldr	r3, [pc, #524]	; (800b1b8 <USB_EPStartXfer+0x2dc>)
 800afac:	4013      	ands	r3, r2
 800afae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afbc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	6999      	ldr	r1, [r3, #24]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	440b      	add	r3, r1
 800afc8:	1e59      	subs	r1, r3, #1
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	fbb1 f3f3 	udiv	r3, r1, r3
 800afd2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800afd4:	4b7a      	ldr	r3, [pc, #488]	; (800b1c0 <USB_EPStartXfer+0x2e4>)
 800afd6:	400b      	ands	r3, r1
 800afd8:	69b9      	ldr	r1, [r7, #24]
 800afda:	0148      	lsls	r0, r1, #5
 800afdc:	69f9      	ldr	r1, [r7, #28]
 800afde:	4401      	add	r1, r0
 800afe0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afe4:	4313      	orrs	r3, r2
 800afe6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff4:	691a      	ldr	r2, [r3, #16]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800affe:	69b9      	ldr	r1, [r7, #24]
 800b000:	0148      	lsls	r0, r1, #5
 800b002:	69f9      	ldr	r1, [r7, #28]
 800b004:	4401      	add	r1, r0
 800b006:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b00a:	4313      	orrs	r3, r2
 800b00c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	791b      	ldrb	r3, [r3, #4]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d11f      	bne.n	800b056 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	0151      	lsls	r1, r2, #5
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	440a      	add	r2, r1
 800b02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b030:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b034:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	015a      	lsls	r2, r3, #5
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	4413      	add	r3, r2
 800b03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	0151      	lsls	r1, r2, #5
 800b048:	69fa      	ldr	r2, [r7, #28]
 800b04a:	440a      	add	r2, r1
 800b04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b054:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d14b      	bne.n	800b0f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b070:	461a      	mov	r2, r3
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	791b      	ldrb	r3, [r3, #4]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d128      	bne.n	800b0d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d110      	bne.n	800b0b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	4413      	add	r3, r2
 800b098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	0151      	lsls	r1, r2, #5
 800b0a2:	69fa      	ldr	r2, [r7, #28]
 800b0a4:	440a      	add	r2, r1
 800b0a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	e00f      	b.n	800b0d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	0151      	lsls	r1, r2, #5
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	440a      	add	r2, r1
 800b0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	0151      	lsls	r1, r2, #5
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	440a      	add	r2, r1
 800b0e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	e137      	b.n	800b364 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	0151      	lsls	r1, r2, #5
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	440a      	add	r2, r1
 800b10a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b10e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b112:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	791b      	ldrb	r3, [r3, #4]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d015      	beq.n	800b148 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 811f 	beq.w	800b364 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	2101      	movs	r1, #1
 800b138:	fa01 f303 	lsl.w	r3, r1, r3
 800b13c:	69f9      	ldr	r1, [r7, #28]
 800b13e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b142:	4313      	orrs	r3, r2
 800b144:	634b      	str	r3, [r1, #52]	; 0x34
 800b146:	e10d      	b.n	800b364 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b154:	2b00      	cmp	r3, #0
 800b156:	d110      	bne.n	800b17a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	e00f      	b.n	800b19a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	0151      	lsls	r1, r2, #5
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	440a      	add	r2, r1
 800b190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b198:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	6919      	ldr	r1, [r3, #16]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	781a      	ldrb	r2, [r3, #0]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	b298      	uxth	r0, r3
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f000 faea 	bl	800b788 <USB_WritePacket>
 800b1b4:	e0d6      	b.n	800b364 <USB_EPStartXfer+0x488>
 800b1b6:	bf00      	nop
 800b1b8:	e007ffff 	.word	0xe007ffff
 800b1bc:	fff80000 	.word	0xfff80000
 800b1c0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d0:	691a      	ldr	r2, [r3, #16]
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	0159      	lsls	r1, r3, #5
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	440b      	add	r3, r1
 800b1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4b63      	ldr	r3, [pc, #396]	; (800b370 <USB_EPStartXfer+0x494>)
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	0159      	lsls	r1, r3, #5
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	440b      	add	r3, r1
 800b1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b200:	4619      	mov	r1, r3
 800b202:	4b5c      	ldr	r3, [pc, #368]	; (800b374 <USB_EPStartXfer+0x498>)
 800b204:	4013      	ands	r3, r2
 800b206:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d123      	bne.n	800b258 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21c:	691a      	ldr	r2, [r3, #16]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b226:	69b9      	ldr	r1, [r7, #24]
 800b228:	0148      	lsls	r0, r1, #5
 800b22a:	69f9      	ldr	r1, [r7, #28]
 800b22c:	4401      	add	r1, r0
 800b22e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b232:	4313      	orrs	r3, r2
 800b234:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	015a      	lsls	r2, r3, #5
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	4413      	add	r3, r2
 800b23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	0151      	lsls	r1, r2, #5
 800b248:	69fa      	ldr	r2, [r7, #28]
 800b24a:	440a      	add	r2, r1
 800b24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b254:	6113      	str	r3, [r2, #16]
 800b256:	e037      	b.n	800b2c8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	699a      	ldr	r2, [r3, #24]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	4413      	add	r3, r2
 800b262:	1e5a      	subs	r2, r3, #1
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	8afa      	ldrh	r2, [r7, #22]
 800b274:	fb03 f202 	mul.w	r2, r3, r2
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	4413      	add	r3, r2
 800b284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b288:	691a      	ldr	r2, [r3, #16]
 800b28a:	8afb      	ldrh	r3, [r7, #22]
 800b28c:	04d9      	lsls	r1, r3, #19
 800b28e:	4b3a      	ldr	r3, [pc, #232]	; (800b378 <USB_EPStartXfer+0x49c>)
 800b290:	400b      	ands	r3, r1
 800b292:	69b9      	ldr	r1, [r7, #24]
 800b294:	0148      	lsls	r0, r1, #5
 800b296:	69f9      	ldr	r1, [r7, #28]
 800b298:	4401      	add	r1, r0
 800b29a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ae:	691a      	ldr	r2, [r3, #16]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2b8:	69b9      	ldr	r1, [r7, #24]
 800b2ba:	0148      	lsls	r0, r1, #5
 800b2bc:	69f9      	ldr	r1, [r7, #28]
 800b2be:	4401      	add	r1, r0
 800b2c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d10d      	bne.n	800b2ea <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d009      	beq.n	800b2ea <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	6919      	ldr	r1, [r3, #16]
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e6:	460a      	mov	r2, r1
 800b2e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	791b      	ldrb	r3, [r3, #4]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d128      	bne.n	800b344 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d110      	bne.n	800b324 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	015a      	lsls	r2, r3, #5
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	4413      	add	r3, r2
 800b30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	0151      	lsls	r1, r2, #5
 800b314:	69fa      	ldr	r2, [r7, #28]
 800b316:	440a      	add	r2, r1
 800b318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	e00f      	b.n	800b344 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	0151      	lsls	r1, r2, #5
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	440a      	add	r2, r1
 800b33a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b33e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b342:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	0151      	lsls	r1, r2, #5
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	440a      	add	r2, r1
 800b35a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b35e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3720      	adds	r7, #32
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	fff80000 	.word	0xfff80000
 800b374:	e007ffff 	.word	0xe007ffff
 800b378:	1ff80000 	.word	0x1ff80000

0800b37c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	4613      	mov	r3, r2
 800b388:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	785b      	ldrb	r3, [r3, #1]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	f040 80ce 	bne.w	800b53a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d132      	bne.n	800b40c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	015a      	lsls	r2, r3, #5
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b2:	691a      	ldr	r2, [r3, #16]
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	0159      	lsls	r1, r3, #5
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	440b      	add	r3, r1
 800b3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4b9a      	ldr	r3, [pc, #616]	; (800b62c <USB_EP0StartXfer+0x2b0>)
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	015a      	lsls	r2, r3, #5
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	0151      	lsls	r1, r2, #5
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	440a      	add	r2, r1
 800b3de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f4:	691a      	ldr	r2, [r3, #16]
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	0159      	lsls	r1, r3, #5
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	440b      	add	r3, r1
 800b3fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b402:	4619      	mov	r1, r3
 800b404:	4b8a      	ldr	r3, [pc, #552]	; (800b630 <USB_EP0StartXfer+0x2b4>)
 800b406:	4013      	ands	r3, r2
 800b408:	610b      	str	r3, [r1, #16]
 800b40a:	e04e      	b.n	800b4aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	4413      	add	r3, r2
 800b414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b418:	691a      	ldr	r2, [r3, #16]
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	0159      	lsls	r1, r3, #5
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	440b      	add	r3, r1
 800b422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b426:	4619      	mov	r1, r3
 800b428:	4b81      	ldr	r3, [pc, #516]	; (800b630 <USB_EP0StartXfer+0x2b4>)
 800b42a:	4013      	ands	r3, r2
 800b42c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	4413      	add	r3, r2
 800b436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43a:	691a      	ldr	r2, [r3, #16]
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	0159      	lsls	r1, r3, #5
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	440b      	add	r3, r1
 800b444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b448:	4619      	mov	r1, r3
 800b44a:	4b78      	ldr	r3, [pc, #480]	; (800b62c <USB_EP0StartXfer+0x2b0>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	699a      	ldr	r2, [r3, #24]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d903      	bls.n	800b464 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	0151      	lsls	r1, r2, #5
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	440a      	add	r2, r1
 800b47a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b47e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b482:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b490:	691a      	ldr	r2, [r3, #16]
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b49a:	6939      	ldr	r1, [r7, #16]
 800b49c:	0148      	lsls	r0, r1, #5
 800b49e:	6979      	ldr	r1, [r7, #20]
 800b4a0:	4401      	add	r1, r0
 800b4a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d11e      	bne.n	800b4ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d009      	beq.n	800b4cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	0151      	lsls	r1, r2, #5
 800b4de:	697a      	ldr	r2, [r7, #20]
 800b4e0:	440a      	add	r2, r1
 800b4e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	e097      	b.n	800b61e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	0151      	lsls	r1, r2, #5
 800b500:	697a      	ldr	r2, [r7, #20]
 800b502:	440a      	add	r2, r1
 800b504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b508:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b50c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 8083 	beq.w	800b61e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b51e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	f003 030f 	and.w	r3, r3, #15
 800b528:	2101      	movs	r1, #1
 800b52a:	fa01 f303 	lsl.w	r3, r1, r3
 800b52e:	6979      	ldr	r1, [r7, #20]
 800b530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b534:	4313      	orrs	r3, r2
 800b536:	634b      	str	r3, [r1, #52]	; 0x34
 800b538:	e071      	b.n	800b61e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	015a      	lsls	r2, r3, #5
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	4413      	add	r3, r2
 800b542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b546:	691a      	ldr	r2, [r3, #16]
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	0159      	lsls	r1, r3, #5
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	440b      	add	r3, r1
 800b550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b554:	4619      	mov	r1, r3
 800b556:	4b36      	ldr	r3, [pc, #216]	; (800b630 <USB_EP0StartXfer+0x2b4>)
 800b558:	4013      	ands	r3, r2
 800b55a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	4413      	add	r3, r2
 800b564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b568:	691a      	ldr	r2, [r3, #16]
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	0159      	lsls	r1, r3, #5
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	440b      	add	r3, r1
 800b572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b576:	4619      	mov	r1, r3
 800b578:	4b2c      	ldr	r3, [pc, #176]	; (800b62c <USB_EP0StartXfer+0x2b0>)
 800b57a:	4013      	ands	r3, r2
 800b57c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	68da      	ldr	r2, [r3, #12]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	68da      	ldr	r2, [r3, #12]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	693a      	ldr	r2, [r7, #16]
 800b5a6:	0151      	lsls	r1, r2, #5
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	440a      	add	r2, r1
 800b5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	015a      	lsls	r2, r3, #5
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	4413      	add	r3, r2
 800b5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c2:	691a      	ldr	r2, [r3, #16]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	69db      	ldr	r3, [r3, #28]
 800b5c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5cc:	6939      	ldr	r1, [r7, #16]
 800b5ce:	0148      	lsls	r0, r1, #5
 800b5d0:	6979      	ldr	r1, [r7, #20]
 800b5d2:	4401      	add	r1, r0
 800b5d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b5dc:	79fb      	ldrb	r3, [r7, #7]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d10d      	bne.n	800b5fe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6919      	ldr	r1, [r3, #16]
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	015a      	lsls	r2, r3, #5
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5fa:	460a      	mov	r2, r1
 800b5fc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	4413      	add	r3, r2
 800b606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	0151      	lsls	r1, r2, #5
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	440a      	add	r2, r1
 800b614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b618:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b61c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	e007ffff 	.word	0xe007ffff
 800b630:	fff80000 	.word	0xfff80000

0800b634 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d14a      	bne.n	800b6e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b66a:	f040 8086 	bne.w	800b77a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	7812      	ldrb	r2, [r2, #0]
 800b682:	0151      	lsls	r1, r2, #5
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	440a      	add	r2, r1
 800b688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b68c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b690:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	7812      	ldrb	r2, [r2, #0]
 800b6a6:	0151      	lsls	r1, r2, #5
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	440a      	add	r2, r1
 800b6ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f242 7210 	movw	r2, #10000	; 0x2710
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d902      	bls.n	800b6cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	75fb      	strb	r3, [r7, #23]
          break;
 800b6ca:	e056      	b.n	800b77a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6e4:	d0e7      	beq.n	800b6b6 <USB_EPStopXfer+0x82>
 800b6e6:	e048      	b.n	800b77a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b700:	d13b      	bne.n	800b77a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	7812      	ldrb	r2, [r2, #0]
 800b716:	0151      	lsls	r1, r2, #5
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	440a      	add	r2, r1
 800b71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b720:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b724:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	015a      	lsls	r2, r3, #5
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	4413      	add	r3, r2
 800b730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	7812      	ldrb	r2, [r2, #0]
 800b73a:	0151      	lsls	r1, r2, #5
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	440a      	add	r2, r1
 800b740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b748:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f242 7210 	movw	r2, #10000	; 0x2710
 800b756:	4293      	cmp	r3, r2
 800b758:	d902      	bls.n	800b760 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	75fb      	strb	r3, [r7, #23]
          break;
 800b75e:	e00c      	b.n	800b77a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b778:	d0e7      	beq.n	800b74a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	371c      	adds	r7, #28
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b788:	b480      	push	{r7}
 800b78a:	b089      	sub	sp, #36	; 0x24
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	4611      	mov	r1, r2
 800b794:	461a      	mov	r2, r3
 800b796:	460b      	mov	r3, r1
 800b798:	71fb      	strb	r3, [r7, #7]
 800b79a:	4613      	mov	r3, r2
 800b79c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b7a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d123      	bne.n	800b7f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b7ae:	88bb      	ldrh	r3, [r7, #4]
 800b7b0:	3303      	adds	r3, #3
 800b7b2:	089b      	lsrs	r3, r3, #2
 800b7b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	61bb      	str	r3, [r7, #24]
 800b7ba:	e018      	b.n	800b7ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b7bc:	79fb      	ldrb	r3, [r7, #7]
 800b7be:	031a      	lsls	r2, r3, #12
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	61bb      	str	r3, [r7, #24]
 800b7ee:	69ba      	ldr	r2, [r7, #24]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d3e2      	bcc.n	800b7bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3724      	adds	r7, #36	; 0x24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b804:	b480      	push	{r7}
 800b806:	b08b      	sub	sp, #44	; 0x2c
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4613      	mov	r3, r2
 800b810:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b81a:	88fb      	ldrh	r3, [r7, #6]
 800b81c:	089b      	lsrs	r3, r3, #2
 800b81e:	b29b      	uxth	r3, r3
 800b820:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b822:	88fb      	ldrh	r3, [r7, #6]
 800b824:	f003 0303 	and.w	r3, r3, #3
 800b828:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b82a:	2300      	movs	r3, #0
 800b82c:	623b      	str	r3, [r7, #32]
 800b82e:	e014      	b.n	800b85a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	3301      	adds	r3, #1
 800b840:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b844:	3301      	adds	r3, #1
 800b846:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	3301      	adds	r3, #1
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	3301      	adds	r3, #1
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	3301      	adds	r3, #1
 800b858:	623b      	str	r3, [r7, #32]
 800b85a:	6a3a      	ldr	r2, [r7, #32]
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d3e6      	bcc.n	800b830 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b862:	8bfb      	ldrh	r3, [r7, #30]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d01e      	beq.n	800b8a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b868:	2300      	movs	r3, #0
 800b86a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b872:	461a      	mov	r2, r3
 800b874:	f107 0310 	add.w	r3, r7, #16
 800b878:	6812      	ldr	r2, [r2, #0]
 800b87a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	fa22 f303 	lsr.w	r3, r2, r3
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	701a      	strb	r2, [r3, #0]
      i++;
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	3301      	adds	r3, #1
 800b892:	623b      	str	r3, [r7, #32]
      pDest++;
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	3301      	adds	r3, #1
 800b898:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b89a:	8bfb      	ldrh	r3, [r7, #30]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b8a0:	8bfb      	ldrh	r3, [r7, #30]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1ea      	bne.n	800b87c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	372c      	adds	r7, #44	; 0x2c
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	785b      	ldrb	r3, [r3, #1]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d12c      	bne.n	800b92a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	015a      	lsls	r2, r3, #5
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	db12      	blt.n	800b908 <USB_EPSetStall+0x54>
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00f      	beq.n	800b908 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	0151      	lsls	r1, r2, #5
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	440a      	add	r2, r1
 800b8fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b902:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b906:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	0151      	lsls	r1, r2, #5
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	440a      	add	r2, r1
 800b91e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	e02b      	b.n	800b982 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	db12      	blt.n	800b962 <USB_EPSetStall+0xae>
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00f      	beq.n	800b962 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	015a      	lsls	r2, r3, #5
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4413      	add	r3, r2
 800b94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	0151      	lsls	r1, r2, #5
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	440a      	add	r2, r1
 800b958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b95c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b960:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	015a      	lsls	r2, r3, #5
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	4413      	add	r3, r2
 800b96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	0151      	lsls	r1, r2, #5
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	440a      	add	r2, r1
 800b978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b97c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b980:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d128      	bne.n	800b9fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	015a      	lsls	r2, r3, #5
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	0151      	lsls	r1, r2, #5
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	440a      	add	r2, r1
 800b9c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	791b      	ldrb	r3, [r3, #4]
 800b9d0:	2b03      	cmp	r3, #3
 800b9d2:	d003      	beq.n	800b9dc <USB_EPClearStall+0x4c>
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	791b      	ldrb	r3, [r3, #4]
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d138      	bne.n	800ba4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	0151      	lsls	r1, r2, #5
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	440a      	add	r2, r1
 800b9f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	e027      	b.n	800ba4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	015a      	lsls	r2, r3, #5
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	4413      	add	r3, r2
 800ba06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	0151      	lsls	r1, r2, #5
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	440a      	add	r2, r1
 800ba14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	791b      	ldrb	r3, [r3, #4]
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d003      	beq.n	800ba2e <USB_EPClearStall+0x9e>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	791b      	ldrb	r3, [r3, #4]
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d10f      	bne.n	800ba4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	015a      	lsls	r2, r3, #5
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	4413      	add	r3, r2
 800ba36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	0151      	lsls	r1, r2, #5
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	440a      	add	r2, r1
 800ba44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ba7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	011b      	lsls	r3, r3, #4
 800ba8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ba90:	68f9      	ldr	r1, [r7, #12]
 800ba92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba96:	4313      	orrs	r3, r2
 800ba98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bac2:	f023 0303 	bic.w	r3, r3, #3
 800bac6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bad6:	f023 0302 	bic.w	r3, r3, #2
 800bada:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800baea:	b480      	push	{r7}
 800baec:	b085      	sub	sp, #20
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb04:	f023 0303 	bic.w	r3, r3, #3
 800bb08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb18:	f043 0302 	orr.w	r3, r3, #2
 800bb1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	695b      	ldr	r3, [r3, #20]
 800bb38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	4013      	ands	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bb44:	68fb      	ldr	r3, [r7, #12]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b085      	sub	sp, #20
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb6e:	69db      	ldr	r3, [r3, #28]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	4013      	ands	r3, r2
 800bb74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	0c1b      	lsrs	r3, r3, #16
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb86:	b480      	push	{r7}
 800bb88:	b085      	sub	sp, #20
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba2:	69db      	ldr	r3, [r3, #28]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	4013      	ands	r3, r2
 800bba8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	b29b      	uxth	r3, r3
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b085      	sub	sp, #20
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bbca:	78fb      	ldrb	r3, [r7, #3]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbe8:	68bb      	ldr	r3, [r7, #8]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b087      	sub	sp, #28
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc18:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bc1a:	78fb      	ldrb	r3, [r7, #3]
 800bc1c:	f003 030f 	and.w	r3, r3, #15
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	fa22 f303 	lsr.w	r3, r2, r3
 800bc26:	01db      	lsls	r3, r3, #7
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	015a      	lsls	r2, r3, #5
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	4413      	add	r3, r2
 800bc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	4013      	ands	r3, r2
 800bc42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc44:	68bb      	ldr	r3, [r7, #8]
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	371c      	adds	r7, #28
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	f003 0301 	and.w	r3, r3, #1
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
	...

0800bc70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <USB_ActivateSetup+0x44>)
 800bc8e:	4013      	ands	r3, r2
 800bc90:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bca4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	fffff800 	.word	0xfffff800

0800bcb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	333c      	adds	r3, #60	; 0x3c
 800bcce:	3304      	adds	r3, #4
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	4a26      	ldr	r2, [pc, #152]	; (800bd70 <USB_EP0_OutStart+0xb8>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d90a      	bls.n	800bcf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcec:	d101      	bne.n	800bcf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	e037      	b.n	800bd62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd20:	f043 0318 	orr.w	r3, r3, #24
 800bd24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bd38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bd3a:	7afb      	ldrb	r3, [r7, #11]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d10f      	bne.n	800bd60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd46:	461a      	mov	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bd5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	371c      	adds	r7, #28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	4f54300a 	.word	0x4f54300a

0800bd74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3301      	adds	r3, #1
 800bd84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4a13      	ldr	r2, [pc, #76]	; (800bdd8 <USB_CoreReset+0x64>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d901      	bls.n	800bd92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e01b      	b.n	800bdca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	daf2      	bge.n	800bd80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	f043 0201 	orr.w	r2, r3, #1
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3301      	adds	r3, #1
 800bdae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	4a09      	ldr	r2, [pc, #36]	; (800bdd8 <USB_CoreReset+0x64>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d901      	bls.n	800bdbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	e006      	b.n	800bdca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d0f0      	beq.n	800bdaa <USB_CoreReset+0x36>

  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	00030d40 	.word	0x00030d40

0800bddc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bde8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bdec:	f013 fbea 	bl	801f5c4 <malloc>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d109      	bne.n	800be0e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	32b0      	adds	r2, #176	; 0xb0
 800be04:	2100      	movs	r1, #0
 800be06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be0a:	2302      	movs	r3, #2
 800be0c:	e0d4      	b.n	800bfb8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800be0e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800be12:	2100      	movs	r1, #0
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f014 ffb9 	bl	8020d8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	32b0      	adds	r2, #176	; 0xb0
 800be24:	68f9      	ldr	r1, [r7, #12]
 800be26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	32b0      	adds	r2, #176	; 0xb0
 800be34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7c1b      	ldrb	r3, [r3, #16]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d138      	bne.n	800beb8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be46:	4b5e      	ldr	r3, [pc, #376]	; (800bfc0 <USBD_CDC_Init+0x1e4>)
 800be48:	7819      	ldrb	r1, [r3, #0]
 800be4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be4e:	2202      	movs	r2, #2
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f005 f928 	bl	80110a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be56:	4b5a      	ldr	r3, [pc, #360]	; (800bfc0 <USBD_CDC_Init+0x1e4>)
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	f003 020f 	and.w	r2, r3, #15
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	4613      	mov	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	440b      	add	r3, r1
 800be6a:	3324      	adds	r3, #36	; 0x24
 800be6c:	2201      	movs	r2, #1
 800be6e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be70:	4b54      	ldr	r3, [pc, #336]	; (800bfc4 <USBD_CDC_Init+0x1e8>)
 800be72:	7819      	ldrb	r1, [r3, #0]
 800be74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be78:	2202      	movs	r2, #2
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f005 f913 	bl	80110a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be80:	4b50      	ldr	r3, [pc, #320]	; (800bfc4 <USBD_CDC_Init+0x1e8>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	f003 020f 	and.w	r2, r3, #15
 800be88:	6879      	ldr	r1, [r7, #4]
 800be8a:	4613      	mov	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4413      	add	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	440b      	add	r3, r1
 800be94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be98:	2201      	movs	r2, #1
 800be9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be9c:	4b4a      	ldr	r3, [pc, #296]	; (800bfc8 <USBD_CDC_Init+0x1ec>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	f003 020f 	and.w	r2, r3, #15
 800bea4:	6879      	ldr	r1, [r7, #4]
 800bea6:	4613      	mov	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	440b      	add	r3, r1
 800beb0:	3326      	adds	r3, #38	; 0x26
 800beb2:	2210      	movs	r2, #16
 800beb4:	801a      	strh	r2, [r3, #0]
 800beb6:	e035      	b.n	800bf24 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800beb8:	4b41      	ldr	r3, [pc, #260]	; (800bfc0 <USBD_CDC_Init+0x1e4>)
 800beba:	7819      	ldrb	r1, [r3, #0]
 800bebc:	2340      	movs	r3, #64	; 0x40
 800bebe:	2202      	movs	r2, #2
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f005 f8f0 	bl	80110a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bec6:	4b3e      	ldr	r3, [pc, #248]	; (800bfc0 <USBD_CDC_Init+0x1e4>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	f003 020f 	and.w	r2, r3, #15
 800bece:	6879      	ldr	r1, [r7, #4]
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	440b      	add	r3, r1
 800beda:	3324      	adds	r3, #36	; 0x24
 800bedc:	2201      	movs	r2, #1
 800bede:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bee0:	4b38      	ldr	r3, [pc, #224]	; (800bfc4 <USBD_CDC_Init+0x1e8>)
 800bee2:	7819      	ldrb	r1, [r3, #0]
 800bee4:	2340      	movs	r3, #64	; 0x40
 800bee6:	2202      	movs	r2, #2
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f005 f8dc 	bl	80110a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800beee:	4b35      	ldr	r3, [pc, #212]	; (800bfc4 <USBD_CDC_Init+0x1e8>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	f003 020f 	and.w	r2, r3, #15
 800bef6:	6879      	ldr	r1, [r7, #4]
 800bef8:	4613      	mov	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	440b      	add	r3, r1
 800bf02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf06:	2201      	movs	r2, #1
 800bf08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf0a:	4b2f      	ldr	r3, [pc, #188]	; (800bfc8 <USBD_CDC_Init+0x1ec>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	f003 020f 	and.w	r2, r3, #15
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	4613      	mov	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4413      	add	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	440b      	add	r3, r1
 800bf1e:	3326      	adds	r3, #38	; 0x26
 800bf20:	2210      	movs	r2, #16
 800bf22:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf24:	4b28      	ldr	r3, [pc, #160]	; (800bfc8 <USBD_CDC_Init+0x1ec>)
 800bf26:	7819      	ldrb	r1, [r3, #0]
 800bf28:	2308      	movs	r3, #8
 800bf2a:	2203      	movs	r2, #3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f005 f8ba 	bl	80110a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf32:	4b25      	ldr	r3, [pc, #148]	; (800bfc8 <USBD_CDC_Init+0x1ec>)
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	f003 020f 	and.w	r2, r3, #15
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	440b      	add	r3, r1
 800bf46:	3324      	adds	r3, #36	; 0x24
 800bf48:	2201      	movs	r2, #1
 800bf4a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	33b0      	adds	r3, #176	; 0xb0
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d101      	bne.n	800bf86 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800bf82:	2302      	movs	r3, #2
 800bf84:	e018      	b.n	800bfb8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	7c1b      	ldrb	r3, [r3, #16]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10a      	bne.n	800bfa4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	; (800bfc4 <USBD_CDC_Init+0x1e8>)
 800bf90:	7819      	ldrb	r1, [r3, #0]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f005 f971 	bl	8011284 <USBD_LL_PrepareReceive>
 800bfa2:	e008      	b.n	800bfb6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfa4:	4b07      	ldr	r3, [pc, #28]	; (800bfc4 <USBD_CDC_Init+0x1e8>)
 800bfa6:	7819      	ldrb	r1, [r3, #0]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfae:	2340      	movs	r3, #64	; 0x40
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f005 f967 	bl	8011284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	20000097 	.word	0x20000097
 800bfc4:	20000098 	.word	0x20000098
 800bfc8:	20000099 	.word	0x20000099

0800bfcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bfd8:	4b3a      	ldr	r3, [pc, #232]	; (800c0c4 <USBD_CDC_DeInit+0xf8>)
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f005 f887 	bl	80110f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bfe4:	4b37      	ldr	r3, [pc, #220]	; (800c0c4 <USBD_CDC_DeInit+0xf8>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	f003 020f 	and.w	r2, r3, #15
 800bfec:	6879      	ldr	r1, [r7, #4]
 800bfee:	4613      	mov	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	440b      	add	r3, r1
 800bff8:	3324      	adds	r3, #36	; 0x24
 800bffa:	2200      	movs	r2, #0
 800bffc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bffe:	4b32      	ldr	r3, [pc, #200]	; (800c0c8 <USBD_CDC_DeInit+0xfc>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f005 f874 	bl	80110f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c00a:	4b2f      	ldr	r3, [pc, #188]	; (800c0c8 <USBD_CDC_DeInit+0xfc>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	f003 020f 	and.w	r2, r3, #15
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	440b      	add	r3, r1
 800c01e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c022:	2200      	movs	r2, #0
 800c024:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c026:	4b29      	ldr	r3, [pc, #164]	; (800c0cc <USBD_CDC_DeInit+0x100>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f005 f860 	bl	80110f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c032:	4b26      	ldr	r3, [pc, #152]	; (800c0cc <USBD_CDC_DeInit+0x100>)
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	f003 020f 	and.w	r2, r3, #15
 800c03a:	6879      	ldr	r1, [r7, #4]
 800c03c:	4613      	mov	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	440b      	add	r3, r1
 800c046:	3324      	adds	r3, #36	; 0x24
 800c048:	2200      	movs	r2, #0
 800c04a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c04c:	4b1f      	ldr	r3, [pc, #124]	; (800c0cc <USBD_CDC_DeInit+0x100>)
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	f003 020f 	and.w	r2, r3, #15
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	440b      	add	r3, r1
 800c060:	3326      	adds	r3, #38	; 0x26
 800c062:	2200      	movs	r2, #0
 800c064:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	32b0      	adds	r2, #176	; 0xb0
 800c070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01f      	beq.n	800c0b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	33b0      	adds	r3, #176	; 0xb0
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	32b0      	adds	r2, #176	; 0xb0
 800c096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f013 fa9a 	bl	801f5d4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	32b0      	adds	r2, #176	; 0xb0
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	20000097 	.word	0x20000097
 800c0c8:	20000098 	.word	0x20000098
 800c0cc:	20000099 	.word	0x20000099

0800c0d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	32b0      	adds	r2, #176	; 0xb0
 800c0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e0bf      	b.n	800c280 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d050      	beq.n	800c1ae <USBD_CDC_Setup+0xde>
 800c10c:	2b20      	cmp	r3, #32
 800c10e:	f040 80af 	bne.w	800c270 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	88db      	ldrh	r3, [r3, #6]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d03a      	beq.n	800c190 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	b25b      	sxtb	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	da1b      	bge.n	800c15c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	33b0      	adds	r3, #176	; 0xb0
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c13a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	88d2      	ldrh	r2, [r2, #6]
 800c140:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	88db      	ldrh	r3, [r3, #6]
 800c146:	2b07      	cmp	r3, #7
 800c148:	bf28      	it	cs
 800c14a:	2307      	movcs	r3, #7
 800c14c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	89fa      	ldrh	r2, [r7, #14]
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 fd6d 	bl	800dc34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c15a:	e090      	b.n	800c27e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	785a      	ldrb	r2, [r3, #1]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	88db      	ldrh	r3, [r3, #6]
 800c16a:	2b3f      	cmp	r3, #63	; 0x3f
 800c16c:	d803      	bhi.n	800c176 <USBD_CDC_Setup+0xa6>
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	88db      	ldrh	r3, [r3, #6]
 800c172:	b2da      	uxtb	r2, r3
 800c174:	e000      	b.n	800c178 <USBD_CDC_Setup+0xa8>
 800c176:	2240      	movs	r2, #64	; 0x40
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c17e:	6939      	ldr	r1, [r7, #16]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c186:	461a      	mov	r2, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f001 fd7f 	bl	800dc8c <USBD_CtlPrepareRx>
      break;
 800c18e:	e076      	b.n	800c27e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	33b0      	adds	r3, #176	; 0xb0
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	7850      	ldrb	r0, [r2, #1]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	4798      	blx	r3
      break;
 800c1ac:	e067      	b.n	800c27e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	785b      	ldrb	r3, [r3, #1]
 800c1b2:	2b0b      	cmp	r3, #11
 800c1b4:	d851      	bhi.n	800c25a <USBD_CDC_Setup+0x18a>
 800c1b6:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <USBD_CDC_Setup+0xec>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1ed 	.word	0x0800c1ed
 800c1c0:	0800c269 	.word	0x0800c269
 800c1c4:	0800c25b 	.word	0x0800c25b
 800c1c8:	0800c25b 	.word	0x0800c25b
 800c1cc:	0800c25b 	.word	0x0800c25b
 800c1d0:	0800c25b 	.word	0x0800c25b
 800c1d4:	0800c25b 	.word	0x0800c25b
 800c1d8:	0800c25b 	.word	0x0800c25b
 800c1dc:	0800c25b 	.word	0x0800c25b
 800c1e0:	0800c25b 	.word	0x0800c25b
 800c1e4:	0800c217 	.word	0x0800c217
 800c1e8:	0800c241 	.word	0x0800c241
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d107      	bne.n	800c208 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c1f8:	f107 030a 	add.w	r3, r7, #10
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 fd17 	bl	800dc34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c206:	e032      	b.n	800c26e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f001 fca1 	bl	800db52 <USBD_CtlError>
            ret = USBD_FAIL;
 800c210:	2303      	movs	r3, #3
 800c212:	75fb      	strb	r3, [r7, #23]
          break;
 800c214:	e02b      	b.n	800c26e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d107      	bne.n	800c232 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c222:	f107 030d 	add.w	r3, r7, #13
 800c226:	2201      	movs	r2, #1
 800c228:	4619      	mov	r1, r3
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f001 fd02 	bl	800dc34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c230:	e01d      	b.n	800c26e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f001 fc8c 	bl	800db52 <USBD_CtlError>
            ret = USBD_FAIL;
 800c23a:	2303      	movs	r3, #3
 800c23c:	75fb      	strb	r3, [r7, #23]
          break;
 800c23e:	e016      	b.n	800c26e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b03      	cmp	r3, #3
 800c24a:	d00f      	beq.n	800c26c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f001 fc7f 	bl	800db52 <USBD_CtlError>
            ret = USBD_FAIL;
 800c254:	2303      	movs	r3, #3
 800c256:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c258:	e008      	b.n	800c26c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f001 fc78 	bl	800db52 <USBD_CtlError>
          ret = USBD_FAIL;
 800c262:	2303      	movs	r3, #3
 800c264:	75fb      	strb	r3, [r7, #23]
          break;
 800c266:	e002      	b.n	800c26e <USBD_CDC_Setup+0x19e>
          break;
 800c268:	bf00      	nop
 800c26a:	e008      	b.n	800c27e <USBD_CDC_Setup+0x1ae>
          break;
 800c26c:	bf00      	nop
      }
      break;
 800c26e:	e006      	b.n	800c27e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f001 fc6d 	bl	800db52 <USBD_CtlError>
      ret = USBD_FAIL;
 800c278:	2303      	movs	r3, #3
 800c27a:	75fb      	strb	r3, [r7, #23]
      break;
 800c27c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3718      	adds	r7, #24
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c29a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	32b0      	adds	r2, #176	; 0xb0
 800c2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	e065      	b.n	800c37e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	32b0      	adds	r2, #176	; 0xb0
 800c2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2c2:	78fb      	ldrb	r3, [r7, #3]
 800c2c4:	f003 020f 	and.w	r2, r3, #15
 800c2c8:	6879      	ldr	r1, [r7, #4]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	440b      	add	r3, r1
 800c2d4:	3318      	adds	r3, #24
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d02f      	beq.n	800c33c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c2dc:	78fb      	ldrb	r3, [r7, #3]
 800c2de:	f003 020f 	and.w	r2, r3, #15
 800c2e2:	6879      	ldr	r1, [r7, #4]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	440b      	add	r3, r1
 800c2ee:	3318      	adds	r3, #24
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	78fb      	ldrb	r3, [r7, #3]
 800c2f4:	f003 010f 	and.w	r1, r3, #15
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	440b      	add	r3, r1
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4403      	add	r3, r0
 800c304:	3348      	adds	r3, #72	; 0x48
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	fbb2 f1f3 	udiv	r1, r2, r3
 800c30c:	fb01 f303 	mul.w	r3, r1, r3
 800c310:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c312:	2b00      	cmp	r3, #0
 800c314:	d112      	bne.n	800c33c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c316:	78fb      	ldrb	r3, [r7, #3]
 800c318:	f003 020f 	and.w	r2, r3, #15
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	4613      	mov	r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	440b      	add	r3, r1
 800c328:	3318      	adds	r3, #24
 800c32a:	2200      	movs	r2, #0
 800c32c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c32e:	78f9      	ldrb	r1, [r7, #3]
 800c330:	2300      	movs	r3, #0
 800c332:	2200      	movs	r2, #0
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f004 ff84 	bl	8011242 <USBD_LL_Transmit>
 800c33a:	e01f      	b.n	800c37c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2200      	movs	r2, #0
 800c340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	33b0      	adds	r3, #176	; 0xb0
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d010      	beq.n	800c37c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	33b0      	adds	r3, #176	; 0xb0
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c378:	78fa      	ldrb	r2, [r7, #3]
 800c37a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b084      	sub	sp, #16
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	460b      	mov	r3, r1
 800c390:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	32b0      	adds	r2, #176	; 0xb0
 800c39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	32b0      	adds	r2, #176	; 0xb0
 800c3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	e01a      	b.n	800c3ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c3b8:	78fb      	ldrb	r3, [r7, #3]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f004 ff82 	bl	80112c6 <USBD_LL_GetRxDataSize>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	33b0      	adds	r3, #176	; 0xb0
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	32b0      	adds	r2, #176	; 0xb0
 800c408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c414:	2303      	movs	r3, #3
 800c416:	e025      	b.n	800c464 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	33b0      	adds	r3, #176	; 0xb0
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01a      	beq.n	800c462 <USBD_CDC_EP0_RxReady+0x6c>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c432:	2bff      	cmp	r3, #255	; 0xff
 800c434:	d015      	beq.n	800c462 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	33b0      	adds	r3, #176	; 0xb0
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c44e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c456:	b292      	uxth	r2, r2
 800c458:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	22ff      	movs	r2, #255	; 0xff
 800c45e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c474:	2182      	movs	r1, #130	; 0x82
 800c476:	4818      	ldr	r0, [pc, #96]	; (800c4d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c478:	f000 fd09 	bl	800ce8e <USBD_GetEpDesc>
 800c47c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c47e:	2101      	movs	r1, #1
 800c480:	4815      	ldr	r0, [pc, #84]	; (800c4d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c482:	f000 fd04 	bl	800ce8e <USBD_GetEpDesc>
 800c486:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c488:	2181      	movs	r1, #129	; 0x81
 800c48a:	4813      	ldr	r0, [pc, #76]	; (800c4d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c48c:	f000 fcff 	bl	800ce8e <USBD_GetEpDesc>
 800c490:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2210      	movs	r2, #16
 800c49c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d006      	beq.n	800c4b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4ac:	711a      	strb	r2, [r3, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d006      	beq.n	800c4c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4c0:	711a      	strb	r2, [r3, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2243      	movs	r2, #67	; 0x43
 800c4ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c4cc:	4b02      	ldr	r3, [pc, #8]	; (800c4d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3718      	adds	r7, #24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20000054 	.word	0x20000054

0800c4dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4e4:	2182      	movs	r1, #130	; 0x82
 800c4e6:	4818      	ldr	r0, [pc, #96]	; (800c548 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4e8:	f000 fcd1 	bl	800ce8e <USBD_GetEpDesc>
 800c4ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	4815      	ldr	r0, [pc, #84]	; (800c548 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4f2:	f000 fccc 	bl	800ce8e <USBD_GetEpDesc>
 800c4f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4f8:	2181      	movs	r1, #129	; 0x81
 800c4fa:	4813      	ldr	r0, [pc, #76]	; (800c548 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4fc:	f000 fcc7 	bl	800ce8e <USBD_GetEpDesc>
 800c500:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2210      	movs	r2, #16
 800c50c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d006      	beq.n	800c522 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	2200      	movs	r2, #0
 800c518:	711a      	strb	r2, [r3, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f042 0202 	orr.w	r2, r2, #2
 800c520:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2200      	movs	r2, #0
 800c52c:	711a      	strb	r2, [r3, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f042 0202 	orr.w	r2, r2, #2
 800c534:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2243      	movs	r2, #67	; 0x43
 800c53a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c53c:	4b02      	ldr	r3, [pc, #8]	; (800c548 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	20000054 	.word	0x20000054

0800c54c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c554:	2182      	movs	r1, #130	; 0x82
 800c556:	4818      	ldr	r0, [pc, #96]	; (800c5b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c558:	f000 fc99 	bl	800ce8e <USBD_GetEpDesc>
 800c55c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c55e:	2101      	movs	r1, #1
 800c560:	4815      	ldr	r0, [pc, #84]	; (800c5b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c562:	f000 fc94 	bl	800ce8e <USBD_GetEpDesc>
 800c566:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c568:	2181      	movs	r1, #129	; 0x81
 800c56a:	4813      	ldr	r0, [pc, #76]	; (800c5b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c56c:	f000 fc8f 	bl	800ce8e <USBD_GetEpDesc>
 800c570:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2210      	movs	r2, #16
 800c57c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	2200      	movs	r2, #0
 800c588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c58c:	711a      	strb	r2, [r3, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d006      	beq.n	800c5a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5a0:	711a      	strb	r2, [r3, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2243      	movs	r2, #67	; 0x43
 800c5aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5ac:	4b02      	ldr	r3, [pc, #8]	; (800c5b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20000054 	.word	0x20000054

0800c5bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	220a      	movs	r2, #10
 800c5c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c5ca:	4b03      	ldr	r3, [pc, #12]	; (800c5d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	20000010 	.word	0x20000010

0800c5dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	e009      	b.n	800c604 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	33b0      	adds	r3, #176	; 0xb0
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	4413      	add	r3, r2
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c610:	b480      	push	{r7}
 800c612:	b087      	sub	sp, #28
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	32b0      	adds	r2, #176	; 0xb0
 800c626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c62a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c632:	2303      	movs	r3, #3
 800c634:	e008      	b.n	800c648 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	371c      	adds	r7, #28
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	32b0      	adds	r2, #176	; 0xb0
 800c668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c674:	2303      	movs	r3, #3
 800c676:	e004      	b.n	800c682 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
	...

0800c690 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	32b0      	adds	r2, #176	; 0xb0
 800c6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	32b0      	adds	r2, #176	; 0xb0
 800c6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	e018      	b.n	800c6f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	7c1b      	ldrb	r3, [r3, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10a      	bne.n	800c6dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6c6:	4b0c      	ldr	r3, [pc, #48]	; (800c6f8 <USBD_CDC_ReceivePacket+0x68>)
 800c6c8:	7819      	ldrb	r1, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f004 fdd5 	bl	8011284 <USBD_LL_PrepareReceive>
 800c6da:	e008      	b.n	800c6ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <USBD_CDC_ReceivePacket+0x68>)
 800c6de:	7819      	ldrb	r1, [r3, #0]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6e6:	2340      	movs	r3, #64	; 0x40
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f004 fdcb 	bl	8011284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20000098 	.word	0x20000098

0800c6fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	4613      	mov	r3, r2
 800c708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d101      	bne.n	800c714 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c710:	2303      	movs	r3, #3
 800c712:	e01f      	b.n	800c754 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2200      	movs	r2, #0
 800c720:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	79fa      	ldrb	r2, [r7, #7]
 800c746:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f004 fc45 	bl	8010fd8 <USBD_LL_Init>
 800c74e:	4603      	mov	r3, r0
 800c750:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c752:	7dfb      	ldrb	r3, [r7, #23]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3718      	adds	r7, #24
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c766:	2300      	movs	r3, #0
 800c768:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c770:	2303      	movs	r3, #3
 800c772:	e025      	b.n	800c7c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	32ae      	adds	r2, #174	; 0xae
 800c786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00f      	beq.n	800c7b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	32ae      	adds	r2, #174	; 0xae
 800c79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a0:	f107 020e 	add.w	r2, r7, #14
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4798      	blx	r3
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c7b6:	1c5a      	adds	r2, r3, #1
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f004 fc4d 	bl	8011070 <USBD_LL_Start>
 800c7d6:	4603      	mov	r3, r0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c7e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	370c      	adds	r7, #12
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr

0800c7f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	460b      	mov	r3, r1
 800c800:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d009      	beq.n	800c824 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	78fa      	ldrb	r2, [r7, #3]
 800c81a:	4611      	mov	r1, r2
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	4798      	blx	r3
 800c820:	4603      	mov	r3, r0
 800c822:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c824:	7bfb      	ldrb	r3, [r7, #15]
}
 800c826:	4618      	mov	r0, r3
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b084      	sub	sp, #16
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	460b      	mov	r3, r1
 800c838:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	78fa      	ldrb	r2, [r7, #3]
 800c848:	4611      	mov	r1, r2
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	4798      	blx	r3
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c854:	2303      	movs	r3, #3
 800c856:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c858:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	4618      	mov	r0, r3
 800c876:	f001 f932 	bl	800dade <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c888:	461a      	mov	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c896:	f003 031f 	and.w	r3, r3, #31
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d01a      	beq.n	800c8d4 <USBD_LL_SetupStage+0x72>
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d822      	bhi.n	800c8e8 <USBD_LL_SetupStage+0x86>
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d002      	beq.n	800c8ac <USBD_LL_SetupStage+0x4a>
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d00a      	beq.n	800c8c0 <USBD_LL_SetupStage+0x5e>
 800c8aa:	e01d      	b.n	800c8e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fb5f 	bl	800cf78 <USBD_StdDevReq>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c8be:	e020      	b.n	800c902 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fbc7 	bl	800d05c <USBD_StdItfReq>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c8d2:	e016      	b.n	800c902 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8da:	4619      	mov	r1, r3
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fc29 	bl	800d134 <USBD_StdEPReq>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c8e6:	e00c      	b.n	800c902 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f004 fc1a 	bl	8011130 <USBD_LL_StallEP>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c900:	bf00      	nop
  }

  return ret;
 800c902:	7bfb      	ldrb	r3, [r7, #15]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	460b      	mov	r3, r1
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c91e:	7afb      	ldrb	r3, [r7, #11]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d16e      	bne.n	800ca02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c92a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c932:	2b03      	cmp	r3, #3
 800c934:	f040 8098 	bne.w	800ca68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	689a      	ldr	r2, [r3, #8]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	429a      	cmp	r2, r3
 800c942:	d913      	bls.n	800c96c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	689a      	ldr	r2, [r3, #8]
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	1ad2      	subs	r2, r2, r3
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	68da      	ldr	r2, [r3, #12]
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	4293      	cmp	r3, r2
 800c95c:	bf28      	it	cs
 800c95e:	4613      	movcs	r3, r2
 800c960:	461a      	mov	r2, r3
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f001 f9ae 	bl	800dcc6 <USBD_CtlContinueRx>
 800c96a:	e07d      	b.n	800ca68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c972:	f003 031f 	and.w	r3, r3, #31
 800c976:	2b02      	cmp	r3, #2
 800c978:	d014      	beq.n	800c9a4 <USBD_LL_DataOutStage+0x98>
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d81d      	bhi.n	800c9ba <USBD_LL_DataOutStage+0xae>
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d002      	beq.n	800c988 <USBD_LL_DataOutStage+0x7c>
 800c982:	2b01      	cmp	r3, #1
 800c984:	d003      	beq.n	800c98e <USBD_LL_DataOutStage+0x82>
 800c986:	e018      	b.n	800c9ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c988:	2300      	movs	r3, #0
 800c98a:	75bb      	strb	r3, [r7, #22]
            break;
 800c98c:	e018      	b.n	800c9c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c994:	b2db      	uxtb	r3, r3
 800c996:	4619      	mov	r1, r3
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f000 fa5e 	bl	800ce5a <USBD_CoreFindIF>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	75bb      	strb	r3, [r7, #22]
            break;
 800c9a2:	e00d      	b.n	800c9c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f000 fa60 	bl	800ce74 <USBD_CoreFindEP>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	75bb      	strb	r3, [r7, #22]
            break;
 800c9b8:	e002      	b.n	800c9c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	75bb      	strb	r3, [r7, #22]
            break;
 800c9be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c9c0:	7dbb      	ldrb	r3, [r7, #22]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d119      	bne.n	800c9fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d113      	bne.n	800c9fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c9d2:	7dba      	ldrb	r2, [r7, #22]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	32ae      	adds	r2, #174	; 0xae
 800c9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9dc:	691b      	ldr	r3, [r3, #16]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00b      	beq.n	800c9fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c9e2:	7dba      	ldrb	r2, [r7, #22]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c9ea:	7dba      	ldrb	r2, [r7, #22]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	32ae      	adds	r2, #174	; 0xae
 800c9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f001 f974 	bl	800dce8 <USBD_CtlSendStatus>
 800ca00:	e032      	b.n	800ca68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ca02:	7afb      	ldrb	r3, [r7, #11]
 800ca04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f000 fa31 	bl	800ce74 <USBD_CoreFindEP>
 800ca12:	4603      	mov	r3, r0
 800ca14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca16:	7dbb      	ldrb	r3, [r7, #22]
 800ca18:	2bff      	cmp	r3, #255	; 0xff
 800ca1a:	d025      	beq.n	800ca68 <USBD_LL_DataOutStage+0x15c>
 800ca1c:	7dbb      	ldrb	r3, [r7, #22]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d122      	bne.n	800ca68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d117      	bne.n	800ca5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca2e:	7dba      	ldrb	r2, [r7, #22]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	32ae      	adds	r2, #174	; 0xae
 800ca34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca38:	699b      	ldr	r3, [r3, #24]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00f      	beq.n	800ca5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ca3e:	7dba      	ldrb	r2, [r7, #22]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ca46:	7dba      	ldrb	r2, [r7, #22]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	32ae      	adds	r2, #174	; 0xae
 800ca4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	7afa      	ldrb	r2, [r7, #11]
 800ca54:	4611      	mov	r1, r2
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	4798      	blx	r3
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	e000      	b.n	800ca6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3718      	adds	r7, #24
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b086      	sub	sp, #24
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	60f8      	str	r0, [r7, #12]
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	607a      	str	r2, [r7, #4]
 800ca7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ca80:	7afb      	ldrb	r3, [r7, #11]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d16f      	bne.n	800cb66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3314      	adds	r3, #20
 800ca8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d15a      	bne.n	800cb4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	689a      	ldr	r2, [r3, #8]
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d914      	bls.n	800cacc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	689a      	ldr	r2, [r3, #8]
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	1ad2      	subs	r2, r2, r3
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	461a      	mov	r2, r3
 800cab6:	6879      	ldr	r1, [r7, #4]
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f001 f8d6 	bl	800dc6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cabe:	2300      	movs	r3, #0
 800cac0:	2200      	movs	r2, #0
 800cac2:	2100      	movs	r1, #0
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f004 fbdd 	bl	8011284 <USBD_LL_PrepareReceive>
 800caca:	e03f      	b.n	800cb4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	68da      	ldr	r2, [r3, #12]
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d11c      	bne.n	800cb12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	685a      	ldr	r2, [r3, #4]
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d316      	bcc.n	800cb12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800caee:	429a      	cmp	r2, r3
 800caf0:	d20f      	bcs.n	800cb12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800caf2:	2200      	movs	r2, #0
 800caf4:	2100      	movs	r1, #0
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f001 f8b7 	bl	800dc6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb04:	2300      	movs	r3, #0
 800cb06:	2200      	movs	r2, #0
 800cb08:	2100      	movs	r1, #0
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f004 fbba 	bl	8011284 <USBD_LL_PrepareReceive>
 800cb10:	e01c      	b.n	800cb4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b03      	cmp	r3, #3
 800cb1c:	d10f      	bne.n	800cb3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d009      	beq.n	800cb3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb3e:	2180      	movs	r1, #128	; 0x80
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f004 faf5 	bl	8011130 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f001 f8e1 	bl	800dd0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d03a      	beq.n	800cbcc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f7ff fe42 	bl	800c7e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cb64:	e032      	b.n	800cbcc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cb66:	7afb      	ldrb	r3, [r7, #11]
 800cb68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 f97f 	bl	800ce74 <USBD_CoreFindEP>
 800cb76:	4603      	mov	r3, r0
 800cb78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	2bff      	cmp	r3, #255	; 0xff
 800cb7e:	d025      	beq.n	800cbcc <USBD_LL_DataInStage+0x15a>
 800cb80:	7dfb      	ldrb	r3, [r7, #23]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d122      	bne.n	800cbcc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d11c      	bne.n	800cbcc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cb92:	7dfa      	ldrb	r2, [r7, #23]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	32ae      	adds	r2, #174	; 0xae
 800cb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d014      	beq.n	800cbcc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cba2:	7dfa      	ldrb	r2, [r7, #23]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cbaa:	7dfa      	ldrb	r2, [r7, #23]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	32ae      	adds	r2, #174	; 0xae
 800cbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	7afa      	ldrb	r2, [r7, #11]
 800cbb8:	4611      	mov	r1, r2
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	4798      	blx	r3
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cbc2:	7dbb      	ldrb	r3, [r7, #22]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cbc8:	7dbb      	ldrb	r3, [r7, #22]
 800cbca:	e000      	b.n	800cbce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b084      	sub	sp, #16
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d014      	beq.n	800cc3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00e      	beq.n	800cc3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	6852      	ldr	r2, [r2, #4]
 800cc2a:	b2d2      	uxtb	r2, r2
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	4798      	blx	r3
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d001      	beq.n	800cc3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc3c:	2340      	movs	r3, #64	; 0x40
 800cc3e:	2200      	movs	r2, #0
 800cc40:	2100      	movs	r1, #0
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f004 fa2f 	bl	80110a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2240      	movs	r2, #64	; 0x40
 800cc54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc58:	2340      	movs	r3, #64	; 0x40
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	2180      	movs	r1, #128	; 0x80
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f004 fa21 	bl	80110a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2240      	movs	r2, #64	; 0x40
 800cc6e:	621a      	str	r2, [r3, #32]

  return ret;
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b083      	sub	sp, #12
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	460b      	mov	r3, r1
 800cc84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	78fa      	ldrb	r2, [r7, #3]
 800cc8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	370c      	adds	r7, #12
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b083      	sub	sp, #12
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cca8:	b2da      	uxtb	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2204      	movs	r2, #4
 800ccb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b083      	sub	sp, #12
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	d106      	bne.n	800cce8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b082      	sub	sp, #8
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d110      	bne.n	800cd2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00b      	beq.n	800cd2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd1a:	69db      	ldr	r3, [r3, #28]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d005      	beq.n	800cd2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b082      	sub	sp, #8
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	460b      	mov	r3, r1
 800cd40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	32ae      	adds	r2, #174	; 0xae
 800cd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd54:	2303      	movs	r3, #3
 800cd56:	e01c      	b.n	800cd92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	2b03      	cmp	r3, #3
 800cd62:	d115      	bne.n	800cd90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	32ae      	adds	r2, #174	; 0xae
 800cd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00b      	beq.n	800cd90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	32ae      	adds	r2, #174	; 0xae
 800cd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd86:	6a1b      	ldr	r3, [r3, #32]
 800cd88:	78fa      	ldrb	r2, [r7, #3]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b082      	sub	sp, #8
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	32ae      	adds	r2, #174	; 0xae
 800cdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d101      	bne.n	800cdbc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	e01c      	b.n	800cdf6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d115      	bne.n	800cdf4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	32ae      	adds	r2, #174	; 0xae
 800cdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00b      	beq.n	800cdf4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	32ae      	adds	r2, #174	; 0xae
 800cde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	78fa      	ldrb	r2, [r7, #3]
 800cdee:	4611      	mov	r1, r2
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cdfe:	b480      	push	{r7}
 800ce00:	b083      	sub	sp, #12
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00e      	beq.n	800ce50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	6852      	ldr	r2, [r2, #4]
 800ce3e:	b2d2      	uxtb	r2, r2
 800ce40:	4611      	mov	r1, r2
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	4798      	blx	r3
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ce4c:	2303      	movs	r3, #3
 800ce4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b083      	sub	sp, #12
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	460b      	mov	r3, r1
 800ce64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	370c      	adds	r7, #12
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b086      	sub	sp, #24
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	460b      	mov	r3, r1
 800ce98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	885b      	ldrh	r3, [r3, #2]
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d920      	bls.n	800cef8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cebe:	e013      	b.n	800cee8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cec0:	f107 030a 	add.w	r3, r7, #10
 800cec4:	4619      	mov	r1, r3
 800cec6:	6978      	ldr	r0, [r7, #20]
 800cec8:	f000 f81b 	bl	800cf02 <USBD_GetNextDesc>
 800cecc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	785b      	ldrb	r3, [r3, #1]
 800ced2:	2b05      	cmp	r3, #5
 800ced4:	d108      	bne.n	800cee8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	789b      	ldrb	r3, [r3, #2]
 800cede:	78fa      	ldrb	r2, [r7, #3]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d008      	beq.n	800cef6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cee4:	2300      	movs	r3, #0
 800cee6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	885b      	ldrh	r3, [r3, #2]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	897b      	ldrh	r3, [r7, #10]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d8e5      	bhi.n	800cec0 <USBD_GetEpDesc+0x32>
 800cef4:	e000      	b.n	800cef8 <USBD_GetEpDesc+0x6a>
          break;
 800cef6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cef8:	693b      	ldr	r3, [r7, #16]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	881a      	ldrh	r2, [r3, #0]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	4413      	add	r3, r2
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b087      	sub	sp, #28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	3301      	adds	r3, #1
 800cf52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cf5a:	8a3b      	ldrh	r3, [r7, #16]
 800cf5c:	021b      	lsls	r3, r3, #8
 800cf5e:	b21a      	sxth	r2, r3
 800cf60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	b21b      	sxth	r3, r3
 800cf68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cf6a:	89fb      	ldrh	r3, [r7, #14]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	371c      	adds	r7, #28
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf8e:	2b40      	cmp	r3, #64	; 0x40
 800cf90:	d005      	beq.n	800cf9e <USBD_StdDevReq+0x26>
 800cf92:	2b40      	cmp	r3, #64	; 0x40
 800cf94:	d857      	bhi.n	800d046 <USBD_StdDevReq+0xce>
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00f      	beq.n	800cfba <USBD_StdDevReq+0x42>
 800cf9a:	2b20      	cmp	r3, #32
 800cf9c:	d153      	bne.n	800d046 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	32ae      	adds	r2, #174	; 0xae
 800cfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	4798      	blx	r3
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]
      break;
 800cfb8:	e04a      	b.n	800d050 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	785b      	ldrb	r3, [r3, #1]
 800cfbe:	2b09      	cmp	r3, #9
 800cfc0:	d83b      	bhi.n	800d03a <USBD_StdDevReq+0xc2>
 800cfc2:	a201      	add	r2, pc, #4	; (adr r2, 800cfc8 <USBD_StdDevReq+0x50>)
 800cfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc8:	0800d01d 	.word	0x0800d01d
 800cfcc:	0800d031 	.word	0x0800d031
 800cfd0:	0800d03b 	.word	0x0800d03b
 800cfd4:	0800d027 	.word	0x0800d027
 800cfd8:	0800d03b 	.word	0x0800d03b
 800cfdc:	0800cffb 	.word	0x0800cffb
 800cfe0:	0800cff1 	.word	0x0800cff1
 800cfe4:	0800d03b 	.word	0x0800d03b
 800cfe8:	0800d013 	.word	0x0800d013
 800cfec:	0800d005 	.word	0x0800d005
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fa3c 	bl	800d470 <USBD_GetDescriptor>
          break;
 800cff8:	e024      	b.n	800d044 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 fbcb 	bl	800d798 <USBD_SetAddress>
          break;
 800d002:	e01f      	b.n	800d044 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d004:	6839      	ldr	r1, [r7, #0]
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 fc0a 	bl	800d820 <USBD_SetConfig>
 800d00c:	4603      	mov	r3, r0
 800d00e:	73fb      	strb	r3, [r7, #15]
          break;
 800d010:	e018      	b.n	800d044 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fcad 	bl	800d974 <USBD_GetConfig>
          break;
 800d01a:	e013      	b.n	800d044 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fcde 	bl	800d9e0 <USBD_GetStatus>
          break;
 800d024:	e00e      	b.n	800d044 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fd0d 	bl	800da48 <USBD_SetFeature>
          break;
 800d02e:	e009      	b.n	800d044 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fd31 	bl	800da9a <USBD_ClrFeature>
          break;
 800d038:	e004      	b.n	800d044 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d03a:	6839      	ldr	r1, [r7, #0]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fd88 	bl	800db52 <USBD_CtlError>
          break;
 800d042:	bf00      	nop
      }
      break;
 800d044:	e004      	b.n	800d050 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d046:	6839      	ldr	r1, [r7, #0]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fd82 	bl	800db52 <USBD_CtlError>
      break;
 800d04e:	bf00      	nop
  }

  return ret;
 800d050:	7bfb      	ldrb	r3, [r7, #15]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop

0800d05c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d072:	2b40      	cmp	r3, #64	; 0x40
 800d074:	d005      	beq.n	800d082 <USBD_StdItfReq+0x26>
 800d076:	2b40      	cmp	r3, #64	; 0x40
 800d078:	d852      	bhi.n	800d120 <USBD_StdItfReq+0xc4>
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <USBD_StdItfReq+0x26>
 800d07e:	2b20      	cmp	r3, #32
 800d080:	d14e      	bne.n	800d120 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	3b01      	subs	r3, #1
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d840      	bhi.n	800d112 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	889b      	ldrh	r3, [r3, #4]
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b01      	cmp	r3, #1
 800d098:	d836      	bhi.n	800d108 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	889b      	ldrh	r3, [r3, #4]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff fed9 	bl	800ce5a <USBD_CoreFindIF>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	2bff      	cmp	r3, #255	; 0xff
 800d0b0:	d01d      	beq.n	800d0ee <USBD_StdItfReq+0x92>
 800d0b2:	7bbb      	ldrb	r3, [r7, #14]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d11a      	bne.n	800d0ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d0b8:	7bba      	ldrb	r2, [r7, #14]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	32ae      	adds	r2, #174	; 0xae
 800d0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00f      	beq.n	800d0e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d0c8:	7bba      	ldrb	r2, [r7, #14]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d0d0:	7bba      	ldrb	r2, [r7, #14]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	32ae      	adds	r2, #174	; 0xae
 800d0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	4798      	blx	r3
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0e6:	e004      	b.n	800d0f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0ec:	e001      	b.n	800d0f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	88db      	ldrh	r3, [r3, #6]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d110      	bne.n	800d11c <USBD_StdItfReq+0xc0>
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10d      	bne.n	800d11c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 fdf1 	bl	800dce8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d106:	e009      	b.n	800d11c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fd21 	bl	800db52 <USBD_CtlError>
          break;
 800d110:	e004      	b.n	800d11c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fd1c 	bl	800db52 <USBD_CtlError>
          break;
 800d11a:	e000      	b.n	800d11e <USBD_StdItfReq+0xc2>
          break;
 800d11c:	bf00      	nop
      }
      break;
 800d11e:	e004      	b.n	800d12a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d120:	6839      	ldr	r1, [r7, #0]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fd15 	bl	800db52 <USBD_CtlError>
      break;
 800d128:	bf00      	nop
  }

  return ret;
 800d12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	889b      	ldrh	r3, [r3, #4]
 800d146:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d150:	2b40      	cmp	r3, #64	; 0x40
 800d152:	d007      	beq.n	800d164 <USBD_StdEPReq+0x30>
 800d154:	2b40      	cmp	r3, #64	; 0x40
 800d156:	f200 817f 	bhi.w	800d458 <USBD_StdEPReq+0x324>
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d02a      	beq.n	800d1b4 <USBD_StdEPReq+0x80>
 800d15e:	2b20      	cmp	r3, #32
 800d160:	f040 817a 	bne.w	800d458 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	4619      	mov	r1, r3
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f7ff fe83 	bl	800ce74 <USBD_CoreFindEP>
 800d16e:	4603      	mov	r3, r0
 800d170:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d172:	7b7b      	ldrb	r3, [r7, #13]
 800d174:	2bff      	cmp	r3, #255	; 0xff
 800d176:	f000 8174 	beq.w	800d462 <USBD_StdEPReq+0x32e>
 800d17a:	7b7b      	ldrb	r3, [r7, #13]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f040 8170 	bne.w	800d462 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d182:	7b7a      	ldrb	r2, [r7, #13]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d18a:	7b7a      	ldrb	r2, [r7, #13]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	32ae      	adds	r2, #174	; 0xae
 800d190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 8163 	beq.w	800d462 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d19c:	7b7a      	ldrb	r2, [r7, #13]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	32ae      	adds	r2, #174	; 0xae
 800d1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	4798      	blx	r3
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d1b2:	e156      	b.n	800d462 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	785b      	ldrb	r3, [r3, #1]
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d008      	beq.n	800d1ce <USBD_StdEPReq+0x9a>
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	f300 8145 	bgt.w	800d44c <USBD_StdEPReq+0x318>
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f000 809b 	beq.w	800d2fe <USBD_StdEPReq+0x1ca>
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d03c      	beq.n	800d246 <USBD_StdEPReq+0x112>
 800d1cc:	e13e      	b.n	800d44c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d002      	beq.n	800d1e0 <USBD_StdEPReq+0xac>
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d016      	beq.n	800d20c <USBD_StdEPReq+0xd8>
 800d1de:	e02c      	b.n	800d23a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00d      	beq.n	800d202 <USBD_StdEPReq+0xce>
 800d1e6:	7bbb      	ldrb	r3, [r7, #14]
 800d1e8:	2b80      	cmp	r3, #128	; 0x80
 800d1ea:	d00a      	beq.n	800d202 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1ec:	7bbb      	ldrb	r3, [r7, #14]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f003 ff9d 	bl	8011130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1f6:	2180      	movs	r1, #128	; 0x80
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f003 ff99 	bl	8011130 <USBD_LL_StallEP>
 800d1fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d200:	e020      	b.n	800d244 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 fca4 	bl	800db52 <USBD_CtlError>
              break;
 800d20a:	e01b      	b.n	800d244 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	885b      	ldrh	r3, [r3, #2]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10e      	bne.n	800d232 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d214:	7bbb      	ldrb	r3, [r7, #14]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00b      	beq.n	800d232 <USBD_StdEPReq+0xfe>
 800d21a:	7bbb      	ldrb	r3, [r7, #14]
 800d21c:	2b80      	cmp	r3, #128	; 0x80
 800d21e:	d008      	beq.n	800d232 <USBD_StdEPReq+0xfe>
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	88db      	ldrh	r3, [r3, #6]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d104      	bne.n	800d232 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d228:	7bbb      	ldrb	r3, [r7, #14]
 800d22a:	4619      	mov	r1, r3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f003 ff7f 	bl	8011130 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fd58 	bl	800dce8 <USBD_CtlSendStatus>

              break;
 800d238:	e004      	b.n	800d244 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fc88 	bl	800db52 <USBD_CtlError>
              break;
 800d242:	bf00      	nop
          }
          break;
 800d244:	e107      	b.n	800d456 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d002      	beq.n	800d258 <USBD_StdEPReq+0x124>
 800d252:	2b03      	cmp	r3, #3
 800d254:	d016      	beq.n	800d284 <USBD_StdEPReq+0x150>
 800d256:	e04b      	b.n	800d2f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d258:	7bbb      	ldrb	r3, [r7, #14]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00d      	beq.n	800d27a <USBD_StdEPReq+0x146>
 800d25e:	7bbb      	ldrb	r3, [r7, #14]
 800d260:	2b80      	cmp	r3, #128	; 0x80
 800d262:	d00a      	beq.n	800d27a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d264:	7bbb      	ldrb	r3, [r7, #14]
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f003 ff61 	bl	8011130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d26e:	2180      	movs	r1, #128	; 0x80
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f003 ff5d 	bl	8011130 <USBD_LL_StallEP>
 800d276:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d278:	e040      	b.n	800d2fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fc68 	bl	800db52 <USBD_CtlError>
              break;
 800d282:	e03b      	b.n	800d2fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	885b      	ldrh	r3, [r3, #2]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d136      	bne.n	800d2fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d28c:	7bbb      	ldrb	r3, [r7, #14]
 800d28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d292:	2b00      	cmp	r3, #0
 800d294:	d004      	beq.n	800d2a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d296:	7bbb      	ldrb	r3, [r7, #14]
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f003 ff67 	bl	801116e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fd21 	bl	800dce8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d2a6:	7bbb      	ldrb	r3, [r7, #14]
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff fde2 	bl	800ce74 <USBD_CoreFindEP>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2b4:	7b7b      	ldrb	r3, [r7, #13]
 800d2b6:	2bff      	cmp	r3, #255	; 0xff
 800d2b8:	d01f      	beq.n	800d2fa <USBD_StdEPReq+0x1c6>
 800d2ba:	7b7b      	ldrb	r3, [r7, #13]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d11c      	bne.n	800d2fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d2c0:	7b7a      	ldrb	r2, [r7, #13]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d2c8:	7b7a      	ldrb	r2, [r7, #13]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	32ae      	adds	r2, #174	; 0xae
 800d2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d010      	beq.n	800d2fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d2d8:	7b7a      	ldrb	r2, [r7, #13]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	32ae      	adds	r2, #174	; 0xae
 800d2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	4798      	blx	r3
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d2ee:	e004      	b.n	800d2fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fc2d 	bl	800db52 <USBD_CtlError>
              break;
 800d2f8:	e000      	b.n	800d2fc <USBD_StdEPReq+0x1c8>
              break;
 800d2fa:	bf00      	nop
          }
          break;
 800d2fc:	e0ab      	b.n	800d456 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b02      	cmp	r3, #2
 800d308:	d002      	beq.n	800d310 <USBD_StdEPReq+0x1dc>
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d032      	beq.n	800d374 <USBD_StdEPReq+0x240>
 800d30e:	e097      	b.n	800d440 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d310:	7bbb      	ldrb	r3, [r7, #14]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d007      	beq.n	800d326 <USBD_StdEPReq+0x1f2>
 800d316:	7bbb      	ldrb	r3, [r7, #14]
 800d318:	2b80      	cmp	r3, #128	; 0x80
 800d31a:	d004      	beq.n	800d326 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fc17 	bl	800db52 <USBD_CtlError>
                break;
 800d324:	e091      	b.n	800d44a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	da0b      	bge.n	800d346 <USBD_StdEPReq+0x212>
 800d32e:	7bbb      	ldrb	r3, [r7, #14]
 800d330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d334:	4613      	mov	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	3310      	adds	r3, #16
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	4413      	add	r3, r2
 800d342:	3304      	adds	r3, #4
 800d344:	e00b      	b.n	800d35e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d346:	7bbb      	ldrb	r3, [r7, #14]
 800d348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d34c:	4613      	mov	r3, r2
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	4413      	add	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	4413      	add	r3, r2
 800d35c:	3304      	adds	r3, #4
 800d35e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2200      	movs	r2, #0
 800d364:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2202      	movs	r2, #2
 800d36a:	4619      	mov	r1, r3
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 fc61 	bl	800dc34 <USBD_CtlSendData>
              break;
 800d372:	e06a      	b.n	800d44a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	da11      	bge.n	800d3a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d37c:	7bbb      	ldrb	r3, [r7, #14]
 800d37e:	f003 020f 	and.w	r2, r3, #15
 800d382:	6879      	ldr	r1, [r7, #4]
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	440b      	add	r3, r1
 800d38e:	3324      	adds	r3, #36	; 0x24
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d117      	bne.n	800d3c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d396:	6839      	ldr	r1, [r7, #0]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 fbda 	bl	800db52 <USBD_CtlError>
                  break;
 800d39e:	e054      	b.n	800d44a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d3a0:	7bbb      	ldrb	r3, [r7, #14]
 800d3a2:	f003 020f 	and.w	r2, r3, #15
 800d3a6:	6879      	ldr	r1, [r7, #4]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	440b      	add	r3, r1
 800d3b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d104      	bne.n	800d3c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d3bc:	6839      	ldr	r1, [r7, #0]
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 fbc7 	bl	800db52 <USBD_CtlError>
                  break;
 800d3c4:	e041      	b.n	800d44a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	da0b      	bge.n	800d3e6 <USBD_StdEPReq+0x2b2>
 800d3ce:	7bbb      	ldrb	r3, [r7, #14]
 800d3d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	3310      	adds	r3, #16
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	3304      	adds	r3, #4
 800d3e4:	e00b      	b.n	800d3fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3e6:	7bbb      	ldrb	r3, [r7, #14]
 800d3e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4413      	add	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <USBD_StdEPReq+0x2d8>
 800d406:	7bbb      	ldrb	r3, [r7, #14]
 800d408:	2b80      	cmp	r3, #128	; 0x80
 800d40a:	d103      	bne.n	800d414 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2200      	movs	r2, #0
 800d410:	601a      	str	r2, [r3, #0]
 800d412:	e00e      	b.n	800d432 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d414:	7bbb      	ldrb	r3, [r7, #14]
 800d416:	4619      	mov	r1, r3
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f003 fec7 	bl	80111ac <USBD_LL_IsStallEP>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d003      	beq.n	800d42c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2201      	movs	r2, #1
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	e002      	b.n	800d432 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	2200      	movs	r2, #0
 800d430:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2202      	movs	r2, #2
 800d436:	4619      	mov	r1, r3
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 fbfb 	bl	800dc34 <USBD_CtlSendData>
              break;
 800d43e:	e004      	b.n	800d44a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d440:	6839      	ldr	r1, [r7, #0]
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 fb85 	bl	800db52 <USBD_CtlError>
              break;
 800d448:	bf00      	nop
          }
          break;
 800d44a:	e004      	b.n	800d456 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d44c:	6839      	ldr	r1, [r7, #0]
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 fb7f 	bl	800db52 <USBD_CtlError>
          break;
 800d454:	bf00      	nop
      }
      break;
 800d456:	e005      	b.n	800d464 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fb79 	bl	800db52 <USBD_CtlError>
      break;
 800d460:	e000      	b.n	800d464 <USBD_StdEPReq+0x330>
      break;
 800d462:	bf00      	nop
  }

  return ret;
 800d464:	7bfb      	ldrb	r3, [r7, #15]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
	...

0800d470 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d47a:	2300      	movs	r3, #0
 800d47c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d482:	2300      	movs	r3, #0
 800d484:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	885b      	ldrh	r3, [r3, #2]
 800d48a:	0a1b      	lsrs	r3, r3, #8
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	2b0e      	cmp	r3, #14
 800d492:	f200 8152 	bhi.w	800d73a <USBD_GetDescriptor+0x2ca>
 800d496:	a201      	add	r2, pc, #4	; (adr r2, 800d49c <USBD_GetDescriptor+0x2c>)
 800d498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49c:	0800d50d 	.word	0x0800d50d
 800d4a0:	0800d525 	.word	0x0800d525
 800d4a4:	0800d565 	.word	0x0800d565
 800d4a8:	0800d73b 	.word	0x0800d73b
 800d4ac:	0800d73b 	.word	0x0800d73b
 800d4b0:	0800d6db 	.word	0x0800d6db
 800d4b4:	0800d707 	.word	0x0800d707
 800d4b8:	0800d73b 	.word	0x0800d73b
 800d4bc:	0800d73b 	.word	0x0800d73b
 800d4c0:	0800d73b 	.word	0x0800d73b
 800d4c4:	0800d73b 	.word	0x0800d73b
 800d4c8:	0800d73b 	.word	0x0800d73b
 800d4cc:	0800d73b 	.word	0x0800d73b
 800d4d0:	0800d73b 	.word	0x0800d73b
 800d4d4:	0800d4d9 	.word	0x0800d4d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4de:	69db      	ldr	r3, [r3, #28]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00b      	beq.n	800d4fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	7c12      	ldrb	r2, [r2, #16]
 800d4f0:	f107 0108 	add.w	r1, r7, #8
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	4798      	blx	r3
 800d4f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4fa:	e126      	b.n	800d74a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fb27 	bl	800db52 <USBD_CtlError>
        err++;
 800d504:	7afb      	ldrb	r3, [r7, #11]
 800d506:	3301      	adds	r3, #1
 800d508:	72fb      	strb	r3, [r7, #11]
      break;
 800d50a:	e11e      	b.n	800d74a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	7c12      	ldrb	r2, [r2, #16]
 800d518:	f107 0108 	add.w	r1, r7, #8
 800d51c:	4610      	mov	r0, r2
 800d51e:	4798      	blx	r3
 800d520:	60f8      	str	r0, [r7, #12]
      break;
 800d522:	e112      	b.n	800d74a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	7c1b      	ldrb	r3, [r3, #16]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d10d      	bne.n	800d548 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d534:	f107 0208 	add.w	r2, r7, #8
 800d538:	4610      	mov	r0, r2
 800d53a:	4798      	blx	r3
 800d53c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3301      	adds	r3, #1
 800d542:	2202      	movs	r2, #2
 800d544:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d546:	e100      	b.n	800d74a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d550:	f107 0208 	add.w	r2, r7, #8
 800d554:	4610      	mov	r0, r2
 800d556:	4798      	blx	r3
 800d558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3301      	adds	r3, #1
 800d55e:	2202      	movs	r2, #2
 800d560:	701a      	strb	r2, [r3, #0]
      break;
 800d562:	e0f2      	b.n	800d74a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	885b      	ldrh	r3, [r3, #2]
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	2b05      	cmp	r3, #5
 800d56c:	f200 80ac 	bhi.w	800d6c8 <USBD_GetDescriptor+0x258>
 800d570:	a201      	add	r2, pc, #4	; (adr r2, 800d578 <USBD_GetDescriptor+0x108>)
 800d572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d576:	bf00      	nop
 800d578:	0800d591 	.word	0x0800d591
 800d57c:	0800d5c5 	.word	0x0800d5c5
 800d580:	0800d5f9 	.word	0x0800d5f9
 800d584:	0800d62d 	.word	0x0800d62d
 800d588:	0800d661 	.word	0x0800d661
 800d58c:	0800d695 	.word	0x0800d695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00b      	beq.n	800d5b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	7c12      	ldrb	r2, [r2, #16]
 800d5a8:	f107 0108 	add.w	r1, r7, #8
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5b2:	e091      	b.n	800d6d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 facb 	bl	800db52 <USBD_CtlError>
            err++;
 800d5bc:	7afb      	ldrb	r3, [r7, #11]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5c2:	e089      	b.n	800d6d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00b      	beq.n	800d5e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	7c12      	ldrb	r2, [r2, #16]
 800d5dc:	f107 0108 	add.w	r1, r7, #8
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	4798      	blx	r3
 800d5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5e6:	e077      	b.n	800d6d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fab1 	bl	800db52 <USBD_CtlError>
            err++;
 800d5f0:	7afb      	ldrb	r3, [r7, #11]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d5f6:	e06f      	b.n	800d6d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00b      	beq.n	800d61c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	7c12      	ldrb	r2, [r2, #16]
 800d610:	f107 0108 	add.w	r1, r7, #8
 800d614:	4610      	mov	r0, r2
 800d616:	4798      	blx	r3
 800d618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d61a:	e05d      	b.n	800d6d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fa97 	bl	800db52 <USBD_CtlError>
            err++;
 800d624:	7afb      	ldrb	r3, [r7, #11]
 800d626:	3301      	adds	r3, #1
 800d628:	72fb      	strb	r3, [r7, #11]
          break;
 800d62a:	e055      	b.n	800d6d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d632:	691b      	ldr	r3, [r3, #16]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00b      	beq.n	800d650 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	7c12      	ldrb	r2, [r2, #16]
 800d644:	f107 0108 	add.w	r1, r7, #8
 800d648:	4610      	mov	r0, r2
 800d64a:	4798      	blx	r3
 800d64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d64e:	e043      	b.n	800d6d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 fa7d 	bl	800db52 <USBD_CtlError>
            err++;
 800d658:	7afb      	ldrb	r3, [r7, #11]
 800d65a:	3301      	adds	r3, #1
 800d65c:	72fb      	strb	r3, [r7, #11]
          break;
 800d65e:	e03b      	b.n	800d6d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d666:	695b      	ldr	r3, [r3, #20]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00b      	beq.n	800d684 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d672:	695b      	ldr	r3, [r3, #20]
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	7c12      	ldrb	r2, [r2, #16]
 800d678:	f107 0108 	add.w	r1, r7, #8
 800d67c:	4610      	mov	r0, r2
 800d67e:	4798      	blx	r3
 800d680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d682:	e029      	b.n	800d6d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fa63 	bl	800db52 <USBD_CtlError>
            err++;
 800d68c:	7afb      	ldrb	r3, [r7, #11]
 800d68e:	3301      	adds	r3, #1
 800d690:	72fb      	strb	r3, [r7, #11]
          break;
 800d692:	e021      	b.n	800d6d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00b      	beq.n	800d6b8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6a6:	699b      	ldr	r3, [r3, #24]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	7c12      	ldrb	r2, [r2, #16]
 800d6ac:	f107 0108 	add.w	r1, r7, #8
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	4798      	blx	r3
 800d6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6b6:	e00f      	b.n	800d6d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d6b8:	6839      	ldr	r1, [r7, #0]
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 fa49 	bl	800db52 <USBD_CtlError>
            err++;
 800d6c0:	7afb      	ldrb	r3, [r7, #11]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800d6c6:	e007      	b.n	800d6d8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fa41 	bl	800db52 <USBD_CtlError>
          err++;
 800d6d0:	7afb      	ldrb	r3, [r7, #11]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d6d6:	bf00      	nop
      }
      break;
 800d6d8:	e037      	b.n	800d74a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7c1b      	ldrb	r3, [r3, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d109      	bne.n	800d6f6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ea:	f107 0208 	add.w	r2, r7, #8
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	4798      	blx	r3
 800d6f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6f4:	e029      	b.n	800d74a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 fa2a 	bl	800db52 <USBD_CtlError>
        err++;
 800d6fe:	7afb      	ldrb	r3, [r7, #11]
 800d700:	3301      	adds	r3, #1
 800d702:	72fb      	strb	r3, [r7, #11]
      break;
 800d704:	e021      	b.n	800d74a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	7c1b      	ldrb	r3, [r3, #16]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10d      	bne.n	800d72a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d716:	f107 0208 	add.w	r2, r7, #8
 800d71a:	4610      	mov	r0, r2
 800d71c:	4798      	blx	r3
 800d71e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3301      	adds	r3, #1
 800d724:	2207      	movs	r2, #7
 800d726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d728:	e00f      	b.n	800d74a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 fa10 	bl	800db52 <USBD_CtlError>
        err++;
 800d732:	7afb      	ldrb	r3, [r7, #11]
 800d734:	3301      	adds	r3, #1
 800d736:	72fb      	strb	r3, [r7, #11]
      break;
 800d738:	e007      	b.n	800d74a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 fa08 	bl	800db52 <USBD_CtlError>
      err++;
 800d742:	7afb      	ldrb	r3, [r7, #11]
 800d744:	3301      	adds	r3, #1
 800d746:	72fb      	strb	r3, [r7, #11]
      break;
 800d748:	bf00      	nop
  }

  if (err != 0U)
 800d74a:	7afb      	ldrb	r3, [r7, #11]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d11e      	bne.n	800d78e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	88db      	ldrh	r3, [r3, #6]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d016      	beq.n	800d786 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d758:	893b      	ldrh	r3, [r7, #8]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00e      	beq.n	800d77c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	88da      	ldrh	r2, [r3, #6]
 800d762:	893b      	ldrh	r3, [r7, #8]
 800d764:	4293      	cmp	r3, r2
 800d766:	bf28      	it	cs
 800d768:	4613      	movcs	r3, r2
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d76e:	893b      	ldrh	r3, [r7, #8]
 800d770:	461a      	mov	r2, r3
 800d772:	68f9      	ldr	r1, [r7, #12]
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 fa5d 	bl	800dc34 <USBD_CtlSendData>
 800d77a:	e009      	b.n	800d790 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d77c:	6839      	ldr	r1, [r7, #0]
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 f9e7 	bl	800db52 <USBD_CtlError>
 800d784:	e004      	b.n	800d790 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 faae 	bl	800dce8 <USBD_CtlSendStatus>
 800d78c:	e000      	b.n	800d790 <USBD_GetDescriptor+0x320>
    return;
 800d78e:	bf00      	nop
  }
}
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop

0800d798 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	889b      	ldrh	r3, [r3, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d131      	bne.n	800d80e <USBD_SetAddress+0x76>
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	88db      	ldrh	r3, [r3, #6]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d12d      	bne.n	800d80e <USBD_SetAddress+0x76>
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	885b      	ldrh	r3, [r3, #2]
 800d7b6:	2b7f      	cmp	r3, #127	; 0x7f
 800d7b8:	d829      	bhi.n	800d80e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	885b      	ldrh	r3, [r3, #2]
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d104      	bne.n	800d7dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d7d2:	6839      	ldr	r1, [r7, #0]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 f9bc 	bl	800db52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7da:	e01d      	b.n	800d818 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7bfa      	ldrb	r2, [r7, #15]
 800d7e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f003 fd0b 	bl	8011204 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fa7a 	bl	800dce8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d004      	beq.n	800d804 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d802:	e009      	b.n	800d818 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d80c:	e004      	b.n	800d818 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f99e 	bl	800db52 <USBD_CtlError>
  }
}
 800d816:	bf00      	nop
 800d818:	bf00      	nop
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d82a:	2300      	movs	r3, #0
 800d82c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	885b      	ldrh	r3, [r3, #2]
 800d832:	b2da      	uxtb	r2, r3
 800d834:	4b4e      	ldr	r3, [pc, #312]	; (800d970 <USBD_SetConfig+0x150>)
 800d836:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d838:	4b4d      	ldr	r3, [pc, #308]	; (800d970 <USBD_SetConfig+0x150>)
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d905      	bls.n	800d84c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d840:	6839      	ldr	r1, [r7, #0]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f985 	bl	800db52 <USBD_CtlError>
    return USBD_FAIL;
 800d848:	2303      	movs	r3, #3
 800d84a:	e08c      	b.n	800d966 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b02      	cmp	r3, #2
 800d856:	d002      	beq.n	800d85e <USBD_SetConfig+0x3e>
 800d858:	2b03      	cmp	r3, #3
 800d85a:	d029      	beq.n	800d8b0 <USBD_SetConfig+0x90>
 800d85c:	e075      	b.n	800d94a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d85e:	4b44      	ldr	r3, [pc, #272]	; (800d970 <USBD_SetConfig+0x150>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d020      	beq.n	800d8a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d866:	4b42      	ldr	r3, [pc, #264]	; (800d970 <USBD_SetConfig+0x150>)
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	461a      	mov	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d870:	4b3f      	ldr	r3, [pc, #252]	; (800d970 <USBD_SetConfig+0x150>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7fe ffbd 	bl	800c7f6 <USBD_SetClassConfig>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d008      	beq.n	800d898 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d886:	6839      	ldr	r1, [r7, #0]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f962 	bl	800db52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2202      	movs	r2, #2
 800d892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d896:	e065      	b.n	800d964 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 fa25 	bl	800dce8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2203      	movs	r2, #3
 800d8a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d8a6:	e05d      	b.n	800d964 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fa1d 	bl	800dce8 <USBD_CtlSendStatus>
      break;
 800d8ae:	e059      	b.n	800d964 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d8b0:	4b2f      	ldr	r3, [pc, #188]	; (800d970 <USBD_SetConfig+0x150>)
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d112      	bne.n	800d8de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2202      	movs	r2, #2
 800d8bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d8c0:	4b2b      	ldr	r3, [pc, #172]	; (800d970 <USBD_SetConfig+0x150>)
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8ca:	4b29      	ldr	r3, [pc, #164]	; (800d970 <USBD_SetConfig+0x150>)
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7fe ffac 	bl	800c82e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa06 	bl	800dce8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8dc:	e042      	b.n	800d964 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d8de:	4b24      	ldr	r3, [pc, #144]	; (800d970 <USBD_SetConfig+0x150>)
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d02a      	beq.n	800d942 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7fe ff9a 	bl	800c82e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d8fa:	4b1d      	ldr	r3, [pc, #116]	; (800d970 <USBD_SetConfig+0x150>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d904:	4b1a      	ldr	r3, [pc, #104]	; (800d970 <USBD_SetConfig+0x150>)
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	4619      	mov	r1, r3
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7fe ff73 	bl	800c7f6 <USBD_SetClassConfig>
 800d910:	4603      	mov	r3, r0
 800d912:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d914:	7bfb      	ldrb	r3, [r7, #15]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00f      	beq.n	800d93a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f918 	bl	800db52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	b2db      	uxtb	r3, r3
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7fe ff7f 	bl	800c82e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2202      	movs	r2, #2
 800d934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d938:	e014      	b.n	800d964 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f9d4 	bl	800dce8 <USBD_CtlSendStatus>
      break;
 800d940:	e010      	b.n	800d964 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 f9d0 	bl	800dce8 <USBD_CtlSendStatus>
      break;
 800d948:	e00c      	b.n	800d964 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d94a:	6839      	ldr	r1, [r7, #0]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 f900 	bl	800db52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d952:	4b07      	ldr	r3, [pc, #28]	; (800d970 <USBD_SetConfig+0x150>)
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	4619      	mov	r1, r3
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7fe ff68 	bl	800c82e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d95e:	2303      	movs	r3, #3
 800d960:	73fb      	strb	r3, [r7, #15]
      break;
 800d962:	bf00      	nop
  }

  return ret;
 800d964:	7bfb      	ldrb	r3, [r7, #15]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	2000c010 	.word	0x2000c010

0800d974 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	88db      	ldrh	r3, [r3, #6]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d004      	beq.n	800d990 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d986:	6839      	ldr	r1, [r7, #0]
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f8e2 	bl	800db52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d98e:	e023      	b.n	800d9d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b02      	cmp	r3, #2
 800d99a:	dc02      	bgt.n	800d9a2 <USBD_GetConfig+0x2e>
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dc03      	bgt.n	800d9a8 <USBD_GetConfig+0x34>
 800d9a0:	e015      	b.n	800d9ce <USBD_GetConfig+0x5a>
 800d9a2:	2b03      	cmp	r3, #3
 800d9a4:	d00b      	beq.n	800d9be <USBD_GetConfig+0x4a>
 800d9a6:	e012      	b.n	800d9ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	3308      	adds	r3, #8
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 f93c 	bl	800dc34 <USBD_CtlSendData>
        break;
 800d9bc:	e00c      	b.n	800d9d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f934 	bl	800dc34 <USBD_CtlSendData>
        break;
 800d9cc:	e004      	b.n	800d9d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f8be 	bl	800db52 <USBD_CtlError>
        break;
 800d9d6:	bf00      	nop
}
 800d9d8:	bf00      	nop
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d81e      	bhi.n	800da36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	88db      	ldrh	r3, [r3, #6]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d004      	beq.n	800da0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f8a5 	bl	800db52 <USBD_CtlError>
        break;
 800da08:	e01a      	b.n	800da40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2201      	movs	r2, #1
 800da0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800da16:	2b00      	cmp	r3, #0
 800da18:	d005      	beq.n	800da26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	f043 0202 	orr.w	r2, r3, #2
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	330c      	adds	r3, #12
 800da2a:	2202      	movs	r2, #2
 800da2c:	4619      	mov	r1, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f900 	bl	800dc34 <USBD_CtlSendData>
      break;
 800da34:	e004      	b.n	800da40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f88a 	bl	800db52 <USBD_CtlError>
      break;
 800da3e:	bf00      	nop
  }
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	885b      	ldrh	r3, [r3, #2]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d107      	bne.n	800da6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 f940 	bl	800dce8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da68:	e013      	b.n	800da92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	885b      	ldrh	r3, [r3, #2]
 800da6e:	2b02      	cmp	r3, #2
 800da70:	d10b      	bne.n	800da8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	889b      	ldrh	r3, [r3, #4]
 800da76:	0a1b      	lsrs	r3, r3, #8
 800da78:	b29b      	uxth	r3, r3
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f930 	bl	800dce8 <USBD_CtlSendStatus>
}
 800da88:	e003      	b.n	800da92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da8a:	6839      	ldr	r1, [r7, #0]
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f860 	bl	800db52 <USBD_CtlError>
}
 800da92:	bf00      	nop
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	3b01      	subs	r3, #1
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d80b      	bhi.n	800daca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	885b      	ldrh	r3, [r3, #2]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d10c      	bne.n	800dad4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f910 	bl	800dce8 <USBD_CtlSendStatus>
      }
      break;
 800dac8:	e004      	b.n	800dad4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 f840 	bl	800db52 <USBD_CtlError>
      break;
 800dad2:	e000      	b.n	800dad6 <USBD_ClrFeature+0x3c>
      break;
 800dad4:	bf00      	nop
  }
}
 800dad6:	bf00      	nop
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b084      	sub	sp, #16
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	781a      	ldrb	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3301      	adds	r3, #1
 800daf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	781a      	ldrb	r2, [r3, #0]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3301      	adds	r3, #1
 800db06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7ff fa17 	bl	800cf3c <SWAPBYTE>
 800db0e:	4603      	mov	r3, r0
 800db10:	461a      	mov	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3301      	adds	r3, #1
 800db1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3301      	adds	r3, #1
 800db20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f7ff fa0a 	bl	800cf3c <SWAPBYTE>
 800db28:	4603      	mov	r3, r0
 800db2a:	461a      	mov	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	3301      	adds	r3, #1
 800db34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	3301      	adds	r3, #1
 800db3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7ff f9fd 	bl	800cf3c <SWAPBYTE>
 800db42:	4603      	mov	r3, r0
 800db44:	461a      	mov	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	80da      	strh	r2, [r3, #6]
}
 800db4a:	bf00      	nop
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b082      	sub	sp, #8
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db5c:	2180      	movs	r1, #128	; 0x80
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f003 fae6 	bl	8011130 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db64:	2100      	movs	r1, #0
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f003 fae2 	bl	8011130 <USBD_LL_StallEP>
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db80:	2300      	movs	r3, #0
 800db82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d036      	beq.n	800dbf8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db8e:	6938      	ldr	r0, [r7, #16]
 800db90:	f000 f836 	bl	800dc00 <USBD_GetLen>
 800db94:	4603      	mov	r3, r0
 800db96:	3301      	adds	r3, #1
 800db98:	b29b      	uxth	r3, r3
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	4413      	add	r3, r2
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	7812      	ldrb	r2, [r2, #0]
 800dbac:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dbb4:	7dfb      	ldrb	r3, [r7, #23]
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	4413      	add	r3, r2
 800dbba:	2203      	movs	r2, #3
 800dbbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbbe:	7dfb      	ldrb	r3, [r7, #23]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dbc4:	e013      	b.n	800dbee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dbc6:	7dfb      	ldrb	r3, [r7, #23]
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	4413      	add	r3, r2
 800dbcc:	693a      	ldr	r2, [r7, #16]
 800dbce:	7812      	ldrb	r2, [r2, #0]
 800dbd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	613b      	str	r3, [r7, #16]
    idx++;
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbde:	7dfb      	ldrb	r3, [r7, #23]
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbe8:	7dfb      	ldrb	r3, [r7, #23]
 800dbea:	3301      	adds	r3, #1
 800dbec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1e7      	bne.n	800dbc6 <USBD_GetString+0x52>
 800dbf6:	e000      	b.n	800dbfa <USBD_GetString+0x86>
    return;
 800dbf8:	bf00      	nop
  }
}
 800dbfa:	3718      	adds	r7, #24
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dc10:	e005      	b.n	800dc1e <USBD_GetLen+0x1e>
  {
    len++;
 800dc12:	7bfb      	ldrb	r3, [r7, #15]
 800dc14:	3301      	adds	r3, #1
 800dc16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1f5      	bne.n	800dc12 <USBD_GetLen+0x12>
  }

  return len;
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2202      	movs	r2, #2
 800dc44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	2100      	movs	r1, #0
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f003 faf1 	bl	8011242 <USBD_LL_Transmit>

  return USBD_OK;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f003 fae0 	bl	8011242 <USBD_LL_Transmit>

  return USBD_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2203      	movs	r2, #3
 800dc9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f003 fae4 	bl	8011284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b084      	sub	sp, #16
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	60f8      	str	r0, [r7, #12]
 800dcce:	60b9      	str	r1, [r7, #8]
 800dcd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f003 fad3 	bl	8011284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2204      	movs	r2, #4
 800dcf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f003 fa9f 	bl	8011242 <USBD_LL_Transmit>

  return USBD_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b082      	sub	sp, #8
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2205      	movs	r2, #5
 800dd1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd1e:	2300      	movs	r3, #0
 800dd20:	2200      	movs	r2, #0
 800dd22:	2100      	movs	r1, #0
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f003 faad 	bl	8011284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dd34:	b480      	push	{r7}
 800dd36:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800dd38:	bf00      	nop
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
	...

0800dd44 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd4a:	f3ef 8305 	mrs	r3, IPSR
 800dd4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10f      	bne.n	800dd76 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd56:	f3ef 8310 	mrs	r3, PRIMASK
 800dd5a:	607b      	str	r3, [r7, #4]
  return(result);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d105      	bne.n	800dd6e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd62:	f3ef 8311 	mrs	r3, BASEPRI
 800dd66:	603b      	str	r3, [r7, #0]
  return(result);
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d007      	beq.n	800dd7e <osKernelInitialize+0x3a>
 800dd6e:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <osKernelInitialize+0x64>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	d103      	bne.n	800dd7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800dd76:	f06f 0305 	mvn.w	r3, #5
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	e00c      	b.n	800dd98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dd7e:	4b0a      	ldr	r3, [pc, #40]	; (800dda8 <osKernelInitialize+0x64>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d105      	bne.n	800dd92 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dd86:	4b08      	ldr	r3, [pc, #32]	; (800dda8 <osKernelInitialize+0x64>)
 800dd88:	2201      	movs	r2, #1
 800dd8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	60fb      	str	r3, [r7, #12]
 800dd90:	e002      	b.n	800dd98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dd92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dd98:	68fb      	ldr	r3, [r7, #12]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	2000c014 	.word	0x2000c014

0800ddac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddb2:	f3ef 8305 	mrs	r3, IPSR
 800ddb6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d10f      	bne.n	800ddde <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddbe:	f3ef 8310 	mrs	r3, PRIMASK
 800ddc2:	607b      	str	r3, [r7, #4]
  return(result);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d105      	bne.n	800ddd6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ddca:	f3ef 8311 	mrs	r3, BASEPRI
 800ddce:	603b      	str	r3, [r7, #0]
  return(result);
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d007      	beq.n	800dde6 <osKernelStart+0x3a>
 800ddd6:	4b0f      	ldr	r3, [pc, #60]	; (800de14 <osKernelStart+0x68>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d103      	bne.n	800dde6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ddde:	f06f 0305 	mvn.w	r3, #5
 800dde2:	60fb      	str	r3, [r7, #12]
 800dde4:	e010      	b.n	800de08 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dde6:	4b0b      	ldr	r3, [pc, #44]	; (800de14 <osKernelStart+0x68>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d109      	bne.n	800de02 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ddee:	f7ff ffa1 	bl	800dd34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ddf2:	4b08      	ldr	r3, [pc, #32]	; (800de14 <osKernelStart+0x68>)
 800ddf4:	2202      	movs	r2, #2
 800ddf6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ddf8:	f001 f8b4 	bl	800ef64 <vTaskStartScheduler>
      stat = osOK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	e002      	b.n	800de08 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800de02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800de08:	68fb      	ldr	r3, [r7, #12]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	2000c014 	.word	0x2000c014

0800de18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b090      	sub	sp, #64	; 0x40
 800de1c:	af04      	add	r7, sp, #16
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800de24:	2300      	movs	r3, #0
 800de26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de28:	f3ef 8305 	mrs	r3, IPSR
 800de2c:	61fb      	str	r3, [r7, #28]
  return(result);
 800de2e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800de30:	2b00      	cmp	r3, #0
 800de32:	f040 808f 	bne.w	800df54 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de36:	f3ef 8310 	mrs	r3, PRIMASK
 800de3a:	61bb      	str	r3, [r7, #24]
  return(result);
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d105      	bne.n	800de4e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de42:	f3ef 8311 	mrs	r3, BASEPRI
 800de46:	617b      	str	r3, [r7, #20]
  return(result);
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d003      	beq.n	800de56 <osThreadNew+0x3e>
 800de4e:	4b44      	ldr	r3, [pc, #272]	; (800df60 <osThreadNew+0x148>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b02      	cmp	r3, #2
 800de54:	d07e      	beq.n	800df54 <osThreadNew+0x13c>
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d07b      	beq.n	800df54 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800de5c:	2380      	movs	r3, #128	; 0x80
 800de5e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800de60:	2318      	movs	r3, #24
 800de62:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800de64:	2300      	movs	r3, #0
 800de66:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800de68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d045      	beq.n	800df00 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d002      	beq.n	800de82 <osThreadNew+0x6a>
        name = attr->name;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	699b      	ldr	r3, [r3, #24]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d002      	beq.n	800de90 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	2b00      	cmp	r3, #0
 800de94:	d008      	beq.n	800dea8 <osThreadNew+0x90>
 800de96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de98:	2b38      	cmp	r3, #56	; 0x38
 800de9a:	d805      	bhi.n	800dea8 <osThreadNew+0x90>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	f003 0301 	and.w	r3, r3, #1
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <osThreadNew+0x94>
        return (NULL);
 800dea8:	2300      	movs	r3, #0
 800deaa:	e054      	b.n	800df56 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d003      	beq.n	800debc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	695b      	ldr	r3, [r3, #20]
 800deb8:	089b      	lsrs	r3, r3, #2
 800deba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00e      	beq.n	800dee2 <osThreadNew+0xca>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	2b5b      	cmp	r3, #91	; 0x5b
 800deca:	d90a      	bls.n	800dee2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d006      	beq.n	800dee2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <osThreadNew+0xca>
        mem = 1;
 800dedc:	2301      	movs	r3, #1
 800dede:	623b      	str	r3, [r7, #32]
 800dee0:	e010      	b.n	800df04 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10c      	bne.n	800df04 <osThreadNew+0xec>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d108      	bne.n	800df04 <osThreadNew+0xec>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d104      	bne.n	800df04 <osThreadNew+0xec>
          mem = 0;
 800defa:	2300      	movs	r3, #0
 800defc:	623b      	str	r3, [r7, #32]
 800defe:	e001      	b.n	800df04 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d110      	bne.n	800df2c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df12:	9202      	str	r2, [sp, #8]
 800df14:	9301      	str	r3, [sp, #4]
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f000 fe3f 	bl	800eba4 <xTaskCreateStatic>
 800df26:	4603      	mov	r3, r0
 800df28:	613b      	str	r3, [r7, #16]
 800df2a:	e013      	b.n	800df54 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d110      	bne.n	800df54 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df34:	b29a      	uxth	r2, r3
 800df36:	f107 0310 	add.w	r3, r7, #16
 800df3a:	9301      	str	r3, [sp, #4]
 800df3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f000 fe90 	bl	800ec6a <xTaskCreate>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d001      	beq.n	800df54 <osThreadNew+0x13c>
          hTask = NULL;
 800df50:	2300      	movs	r3, #0
 800df52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800df54:	693b      	ldr	r3, [r7, #16]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3730      	adds	r7, #48	; 0x30
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	2000c014 	.word	0x2000c014

0800df64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800df64:	b580      	push	{r7, lr}
 800df66:	b086      	sub	sp, #24
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df6c:	f3ef 8305 	mrs	r3, IPSR
 800df70:	613b      	str	r3, [r7, #16]
  return(result);
 800df72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df74:	2b00      	cmp	r3, #0
 800df76:	d10f      	bne.n	800df98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df78:	f3ef 8310 	mrs	r3, PRIMASK
 800df7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d105      	bne.n	800df90 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df84:	f3ef 8311 	mrs	r3, BASEPRI
 800df88:	60bb      	str	r3, [r7, #8]
  return(result);
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d007      	beq.n	800dfa0 <osDelay+0x3c>
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <osDelay+0x58>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2b02      	cmp	r3, #2
 800df96:	d103      	bne.n	800dfa0 <osDelay+0x3c>
    stat = osErrorISR;
 800df98:	f06f 0305 	mvn.w	r3, #5
 800df9c:	617b      	str	r3, [r7, #20]
 800df9e:	e007      	b.n	800dfb0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d002      	beq.n	800dfb0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 ffa4 	bl	800eef8 <vTaskDelay>
    }
  }

  return (stat);
 800dfb0:	697b      	ldr	r3, [r7, #20]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3718      	adds	r7, #24
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	2000c014 	.word	0x2000c014

0800dfc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	4a07      	ldr	r2, [pc, #28]	; (800dfec <vApplicationGetIdleTaskMemory+0x2c>)
 800dfd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	4a06      	ldr	r2, [pc, #24]	; (800dff0 <vApplicationGetIdleTaskMemory+0x30>)
 800dfd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2280      	movs	r2, #128	; 0x80
 800dfdc:	601a      	str	r2, [r3, #0]
}
 800dfde:	bf00      	nop
 800dfe0:	3714      	adds	r7, #20
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	2000c018 	.word	0x2000c018
 800dff0:	2000c074 	.word	0x2000c074

0800dff4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	4a07      	ldr	r2, [pc, #28]	; (800e020 <vApplicationGetTimerTaskMemory+0x2c>)
 800e004:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	4a06      	ldr	r2, [pc, #24]	; (800e024 <vApplicationGetTimerTaskMemory+0x30>)
 800e00a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e012:	601a      	str	r2, [r3, #0]
}
 800e014:	bf00      	nop
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	2000c274 	.word	0x2000c274
 800e024:	2000c2d0 	.word	0x2000c2d0

0800e028 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f103 0208 	add.w	r2, r3, #8
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e040:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f103 0208 	add.w	r2, r3, #8
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f103 0208 	add.w	r2, r3, #8
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e05c:	bf00      	nop
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e076:	bf00      	nop
 800e078:	370c      	adds	r7, #12
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e082:	b480      	push	{r7}
 800e084:	b085      	sub	sp, #20
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	689a      	ldr	r2, [r3, #8]
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	1c5a      	adds	r2, r3, #1
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	601a      	str	r2, [r3, #0]
}
 800e0be:	bf00      	nop
 800e0c0:	3714      	adds	r7, #20
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr

0800e0ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0ca:	b480      	push	{r7}
 800e0cc:	b085      	sub	sp, #20
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0e0:	d103      	bne.n	800e0ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	691b      	ldr	r3, [r3, #16]
 800e0e6:	60fb      	str	r3, [r7, #12]
 800e0e8:	e00c      	b.n	800e104 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	3308      	adds	r3, #8
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	e002      	b.n	800e0f8 <vListInsert+0x2e>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	60fb      	str	r3, [r7, #12]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	429a      	cmp	r2, r3
 800e102:	d2f6      	bcs.n	800e0f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	685a      	ldr	r2, [r3, #4]
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	683a      	ldr	r2, [r7, #0]
 800e112:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	1c5a      	adds	r2, r3, #1
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	601a      	str	r2, [r3, #0]
}
 800e130:	bf00      	nop
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	6892      	ldr	r2, [r2, #8]
 800e152:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	6852      	ldr	r2, [r2, #4]
 800e15c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	429a      	cmp	r2, r3
 800e166:	d103      	bne.n	800e170 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	689a      	ldr	r2, [r3, #8]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	1e5a      	subs	r2, r3, #1
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10c      	bne.n	800e1be <xQueueGenericReset+0x2e>
	__asm volatile
 800e1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a8:	b672      	cpsid	i
 800e1aa:	f383 8811 	msr	BASEPRI, r3
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	b662      	cpsie	i
 800e1b8:	60bb      	str	r3, [r7, #8]
}
 800e1ba:	bf00      	nop
 800e1bc:	e7fe      	b.n	800e1bc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e1be:	f002 f8a5 	bl	801030c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ca:	68f9      	ldr	r1, [r7, #12]
 800e1cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e1ce:	fb01 f303 	mul.w	r3, r1, r3
 800e1d2:	441a      	add	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	68f9      	ldr	r1, [r7, #12]
 800e1f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e1f4:	fb01 f303 	mul.w	r3, r1, r3
 800e1f8:	441a      	add	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	22ff      	movs	r2, #255	; 0xff
 800e202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	22ff      	movs	r2, #255	; 0xff
 800e20a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d114      	bne.n	800e23e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	691b      	ldr	r3, [r3, #16]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d01a      	beq.n	800e252 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	3310      	adds	r3, #16
 800e220:	4618      	mov	r0, r3
 800e222:	f001 f937 	bl	800f494 <xTaskRemoveFromEventList>
 800e226:	4603      	mov	r3, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d012      	beq.n	800e252 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e22c:	4b0c      	ldr	r3, [pc, #48]	; (800e260 <xQueueGenericReset+0xd0>)
 800e22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	e009      	b.n	800e252 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3310      	adds	r3, #16
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff fef0 	bl	800e028 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	3324      	adds	r3, #36	; 0x24
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7ff feeb 	bl	800e028 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e252:	f002 f88f 	bl	8010374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e256:	2301      	movs	r3, #1
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3710      	adds	r7, #16
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	e000ed04 	.word	0xe000ed04

0800e264 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08e      	sub	sp, #56	; 0x38
 800e268:	af02      	add	r7, sp, #8
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d10c      	bne.n	800e292 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27c:	b672      	cpsid	i
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	b662      	cpsie	i
 800e28c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e28e:	bf00      	nop
 800e290:	e7fe      	b.n	800e290 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10c      	bne.n	800e2b2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	b672      	cpsid	i
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	b662      	cpsie	i
 800e2ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e2ae:	bf00      	nop
 800e2b0:	e7fe      	b.n	800e2b0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d002      	beq.n	800e2be <xQueueGenericCreateStatic+0x5a>
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d001      	beq.n	800e2c2 <xQueueGenericCreateStatic+0x5e>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e000      	b.n	800e2c4 <xQueueGenericCreateStatic+0x60>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10c      	bne.n	800e2e2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	b672      	cpsid	i
 800e2ce:	f383 8811 	msr	BASEPRI, r3
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	b662      	cpsie	i
 800e2dc:	623b      	str	r3, [r7, #32]
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <xQueueGenericCreateStatic+0x8a>
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <xQueueGenericCreateStatic+0x8e>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <xQueueGenericCreateStatic+0x90>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10c      	bne.n	800e312 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fc:	b672      	cpsid	i
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	b662      	cpsie	i
 800e30c:	61fb      	str	r3, [r7, #28]
}
 800e30e:	bf00      	nop
 800e310:	e7fe      	b.n	800e310 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e312:	2350      	movs	r3, #80	; 0x50
 800e314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2b50      	cmp	r3, #80	; 0x50
 800e31a:	d00c      	beq.n	800e336 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e320:	b672      	cpsid	i
 800e322:	f383 8811 	msr	BASEPRI, r3
 800e326:	f3bf 8f6f 	isb	sy
 800e32a:	f3bf 8f4f 	dsb	sy
 800e32e:	b662      	cpsie	i
 800e330:	61bb      	str	r3, [r7, #24]
}
 800e332:	bf00      	nop
 800e334:	e7fe      	b.n	800e334 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e336:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00d      	beq.n	800e35e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	2201      	movs	r2, #1
 800e346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e34a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	4613      	mov	r3, r2
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	68b9      	ldr	r1, [r7, #8]
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f000 f805 	bl	800e368 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e360:	4618      	mov	r0, r3
 800e362:	3730      	adds	r7, #48	; 0x30
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d103      	bne.n	800e384 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	69ba      	ldr	r2, [r7, #24]
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	e002      	b.n	800e38a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e396:	2101      	movs	r1, #1
 800e398:	69b8      	ldr	r0, [r7, #24]
 800e39a:	f7ff fef9 	bl	800e190 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	78fa      	ldrb	r2, [r7, #3]
 800e3a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e3a6:	bf00      	nop
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
	...

0800e3b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b08e      	sub	sp, #56	; 0x38
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d10c      	bne.n	800e3e6 <xQueueGenericSend+0x36>
	__asm volatile
 800e3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d0:	b672      	cpsid	i
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	b662      	cpsie	i
 800e3e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d103      	bne.n	800e3f4 <xQueueGenericSend+0x44>
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <xQueueGenericSend+0x48>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e000      	b.n	800e3fa <xQueueGenericSend+0x4a>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10c      	bne.n	800e418 <xQueueGenericSend+0x68>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e402:	b672      	cpsid	i
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	b662      	cpsie	i
 800e412:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e414:	bf00      	nop
 800e416:	e7fe      	b.n	800e416 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	d103      	bne.n	800e426 <xQueueGenericSend+0x76>
 800e41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e422:	2b01      	cmp	r3, #1
 800e424:	d101      	bne.n	800e42a <xQueueGenericSend+0x7a>
 800e426:	2301      	movs	r3, #1
 800e428:	e000      	b.n	800e42c <xQueueGenericSend+0x7c>
 800e42a:	2300      	movs	r3, #0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10c      	bne.n	800e44a <xQueueGenericSend+0x9a>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	b672      	cpsid	i
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	b662      	cpsie	i
 800e444:	623b      	str	r3, [r7, #32]
}
 800e446:	bf00      	nop
 800e448:	e7fe      	b.n	800e448 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e44a:	f001 fa11 	bl	800f870 <xTaskGetSchedulerState>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <xQueueGenericSend+0xaa>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d101      	bne.n	800e45e <xQueueGenericSend+0xae>
 800e45a:	2301      	movs	r3, #1
 800e45c:	e000      	b.n	800e460 <xQueueGenericSend+0xb0>
 800e45e:	2300      	movs	r3, #0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10c      	bne.n	800e47e <xQueueGenericSend+0xce>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	b672      	cpsid	i
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	b662      	cpsie	i
 800e478:	61fb      	str	r3, [r7, #28]
}
 800e47a:	bf00      	nop
 800e47c:	e7fe      	b.n	800e47c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e47e:	f001 ff45 	bl	801030c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d302      	bcc.n	800e494 <xQueueGenericSend+0xe4>
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	2b02      	cmp	r3, #2
 800e492:	d129      	bne.n	800e4e8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e494:	683a      	ldr	r2, [r7, #0]
 800e496:	68b9      	ldr	r1, [r7, #8]
 800e498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e49a:	f000 fa15 	bl	800e8c8 <prvCopyDataToQueue>
 800e49e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d010      	beq.n	800e4ca <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4aa:	3324      	adds	r3, #36	; 0x24
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 fff1 	bl	800f494 <xTaskRemoveFromEventList>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d013      	beq.n	800e4e0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4b8:	4b3f      	ldr	r3, [pc, #252]	; (800e5b8 <xQueueGenericSend+0x208>)
 800e4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	e00a      	b.n	800e4e0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d007      	beq.n	800e4e0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e4d0:	4b39      	ldr	r3, [pc, #228]	; (800e5b8 <xQueueGenericSend+0x208>)
 800e4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e4e0:	f001 ff48 	bl	8010374 <vPortExitCritical>
				return pdPASS;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e063      	b.n	800e5b0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d103      	bne.n	800e4f6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4ee:	f001 ff41 	bl	8010374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e05c      	b.n	800e5b0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d106      	bne.n	800e50a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4fc:	f107 0314 	add.w	r3, r7, #20
 800e500:	4618      	mov	r0, r3
 800e502:	f001 f855 	bl	800f5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e506:	2301      	movs	r3, #1
 800e508:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e50a:	f001 ff33 	bl	8010374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e50e:	f000 fd93 	bl	800f038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e512:	f001 fefb 	bl	801030c <vPortEnterCritical>
 800e516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e51c:	b25b      	sxtb	r3, r3
 800e51e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e522:	d103      	bne.n	800e52c <xQueueGenericSend+0x17c>
 800e524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e526:	2200      	movs	r2, #0
 800e528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e532:	b25b      	sxtb	r3, r3
 800e534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e538:	d103      	bne.n	800e542 <xQueueGenericSend+0x192>
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	2200      	movs	r2, #0
 800e53e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e542:	f001 ff17 	bl	8010374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e546:	1d3a      	adds	r2, r7, #4
 800e548:	f107 0314 	add.w	r3, r7, #20
 800e54c:	4611      	mov	r1, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f001 f844 	bl	800f5dc <xTaskCheckForTimeOut>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d124      	bne.n	800e5a4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e55a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e55c:	f000 faac 	bl	800eab8 <prvIsQueueFull>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d018      	beq.n	800e598 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e568:	3310      	adds	r3, #16
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f000 ff3c 	bl	800f3ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e576:	f000 fa37 	bl	800e9e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e57a:	f000 fd6b 	bl	800f054 <xTaskResumeAll>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	f47f af7c 	bne.w	800e47e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e586:	4b0c      	ldr	r3, [pc, #48]	; (800e5b8 <xQueueGenericSend+0x208>)
 800e588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	e772      	b.n	800e47e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e59a:	f000 fa25 	bl	800e9e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e59e:	f000 fd59 	bl	800f054 <xTaskResumeAll>
 800e5a2:	e76c      	b.n	800e47e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5a6:	f000 fa1f 	bl	800e9e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5aa:	f000 fd53 	bl	800f054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3738      	adds	r7, #56	; 0x38
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	e000ed04 	.word	0xe000ed04

0800e5bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b08e      	sub	sp, #56	; 0x38
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d10c      	bne.n	800e5ee <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d8:	b672      	cpsid	i
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	b662      	cpsie	i
 800e5e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5ea:	bf00      	nop
 800e5ec:	e7fe      	b.n	800e5ec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d103      	bne.n	800e5fc <xQueueGenericSendFromISR+0x40>
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d101      	bne.n	800e600 <xQueueGenericSendFromISR+0x44>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e000      	b.n	800e602 <xQueueGenericSendFromISR+0x46>
 800e600:	2300      	movs	r3, #0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10c      	bne.n	800e620 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60a:	b672      	cpsid	i
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	b662      	cpsie	i
 800e61a:	623b      	str	r3, [r7, #32]
}
 800e61c:	bf00      	nop
 800e61e:	e7fe      	b.n	800e61e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	2b02      	cmp	r3, #2
 800e624:	d103      	bne.n	800e62e <xQueueGenericSendFromISR+0x72>
 800e626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d101      	bne.n	800e632 <xQueueGenericSendFromISR+0x76>
 800e62e:	2301      	movs	r3, #1
 800e630:	e000      	b.n	800e634 <xQueueGenericSendFromISR+0x78>
 800e632:	2300      	movs	r3, #0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10c      	bne.n	800e652 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	b672      	cpsid	i
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	b662      	cpsie	i
 800e64c:	61fb      	str	r3, [r7, #28]
}
 800e64e:	bf00      	nop
 800e650:	e7fe      	b.n	800e650 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e652:	f001 ff43 	bl	80104dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e656:	f3ef 8211 	mrs	r2, BASEPRI
 800e65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65e:	b672      	cpsid	i
 800e660:	f383 8811 	msr	BASEPRI, r3
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	b662      	cpsie	i
 800e66e:	61ba      	str	r2, [r7, #24]
 800e670:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e672:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e674:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e67e:	429a      	cmp	r2, r3
 800e680:	d302      	bcc.n	800e688 <xQueueGenericSendFromISR+0xcc>
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	2b02      	cmp	r3, #2
 800e686:	d12c      	bne.n	800e6e2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e692:	683a      	ldr	r2, [r7, #0]
 800e694:	68b9      	ldr	r1, [r7, #8]
 800e696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e698:	f000 f916 	bl	800e8c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e69c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6a4:	d112      	bne.n	800e6cc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d016      	beq.n	800e6dc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	3324      	adds	r3, #36	; 0x24
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f000 feee 	bl	800f494 <xTaskRemoveFromEventList>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00e      	beq.n	800e6dc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00b      	beq.n	800e6dc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	601a      	str	r2, [r3, #0]
 800e6ca:	e007      	b.n	800e6dc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	b25a      	sxtb	r2, r3
 800e6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e6e0:	e001      	b.n	800e6e6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e6f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3738      	adds	r7, #56	; 0x38
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08c      	sub	sp, #48	; 0x30
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e708:	2300      	movs	r3, #0
 800e70a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10c      	bne.n	800e730 <xQueueReceive+0x34>
	__asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71a:	b672      	cpsid	i
 800e71c:	f383 8811 	msr	BASEPRI, r3
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	b662      	cpsie	i
 800e72a:	623b      	str	r3, [r7, #32]
}
 800e72c:	bf00      	nop
 800e72e:	e7fe      	b.n	800e72e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d103      	bne.n	800e73e <xQueueReceive+0x42>
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d101      	bne.n	800e742 <xQueueReceive+0x46>
 800e73e:	2301      	movs	r3, #1
 800e740:	e000      	b.n	800e744 <xQueueReceive+0x48>
 800e742:	2300      	movs	r3, #0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d10c      	bne.n	800e762 <xQueueReceive+0x66>
	__asm volatile
 800e748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74c:	b672      	cpsid	i
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	b662      	cpsie	i
 800e75c:	61fb      	str	r3, [r7, #28]
}
 800e75e:	bf00      	nop
 800e760:	e7fe      	b.n	800e760 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e762:	f001 f885 	bl	800f870 <xTaskGetSchedulerState>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d102      	bne.n	800e772 <xQueueReceive+0x76>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <xQueueReceive+0x7a>
 800e772:	2301      	movs	r3, #1
 800e774:	e000      	b.n	800e778 <xQueueReceive+0x7c>
 800e776:	2300      	movs	r3, #0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10c      	bne.n	800e796 <xQueueReceive+0x9a>
	__asm volatile
 800e77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e780:	b672      	cpsid	i
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	b662      	cpsie	i
 800e790:	61bb      	str	r3, [r7, #24]
}
 800e792:	bf00      	nop
 800e794:	e7fe      	b.n	800e794 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e796:	f001 fdb9 	bl	801030c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d01f      	beq.n	800e7e6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7a6:	68b9      	ldr	r1, [r7, #8]
 800e7a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7aa:	f000 f8f7 	bl	800e99c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b0:	1e5a      	subs	r2, r3, #1
 800e7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00f      	beq.n	800e7de <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c0:	3310      	adds	r3, #16
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f000 fe66 	bl	800f494 <xTaskRemoveFromEventList>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d007      	beq.n	800e7de <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7ce:	4b3d      	ldr	r3, [pc, #244]	; (800e8c4 <xQueueReceive+0x1c8>)
 800e7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e7de:	f001 fdc9 	bl	8010374 <vPortExitCritical>
				return pdPASS;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e069      	b.n	800e8ba <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d103      	bne.n	800e7f4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e7ec:	f001 fdc2 	bl	8010374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	e062      	b.n	800e8ba <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d106      	bne.n	800e808 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e7fa:	f107 0310 	add.w	r3, r7, #16
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 fed6 	bl	800f5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e804:	2301      	movs	r3, #1
 800e806:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e808:	f001 fdb4 	bl	8010374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e80c:	f000 fc14 	bl	800f038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e810:	f001 fd7c 	bl	801030c <vPortEnterCritical>
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e81a:	b25b      	sxtb	r3, r3
 800e81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e820:	d103      	bne.n	800e82a <xQueueReceive+0x12e>
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	2200      	movs	r2, #0
 800e826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e830:	b25b      	sxtb	r3, r3
 800e832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e836:	d103      	bne.n	800e840 <xQueueReceive+0x144>
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e840:	f001 fd98 	bl	8010374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e844:	1d3a      	adds	r2, r7, #4
 800e846:	f107 0310 	add.w	r3, r7, #16
 800e84a:	4611      	mov	r1, r2
 800e84c:	4618      	mov	r0, r3
 800e84e:	f000 fec5 	bl	800f5dc <xTaskCheckForTimeOut>
 800e852:	4603      	mov	r3, r0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d123      	bne.n	800e8a0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e85a:	f000 f917 	bl	800ea8c <prvIsQueueEmpty>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d017      	beq.n	800e894 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	3324      	adds	r3, #36	; 0x24
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	4611      	mov	r1, r2
 800e86c:	4618      	mov	r0, r3
 800e86e:	f000 fdbd 	bl	800f3ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e874:	f000 f8b8 	bl	800e9e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e878:	f000 fbec 	bl	800f054 <xTaskResumeAll>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d189      	bne.n	800e796 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e882:	4b10      	ldr	r3, [pc, #64]	; (800e8c4 <xQueueReceive+0x1c8>)
 800e884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e888:	601a      	str	r2, [r3, #0]
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	e780      	b.n	800e796 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e896:	f000 f8a7 	bl	800e9e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e89a:	f000 fbdb 	bl	800f054 <xTaskResumeAll>
 800e89e:	e77a      	b.n	800e796 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e8a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8a2:	f000 f8a1 	bl	800e9e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8a6:	f000 fbd5 	bl	800f054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ac:	f000 f8ee 	bl	800ea8c <prvIsQueueEmpty>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f43f af6f 	beq.w	800e796 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e8b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3730      	adds	r7, #48	; 0x30
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	e000ed04 	.word	0xe000ed04

0800e8c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b086      	sub	sp, #24
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10d      	bne.n	800e902 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d14d      	bne.n	800e98a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f000 ffda 	bl	800f8ac <xTaskPriorityDisinherit>
 800e8f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	609a      	str	r2, [r3, #8]
 800e900:	e043      	b.n	800e98a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d119      	bne.n	800e93c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6858      	ldr	r0, [r3, #4]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e910:	461a      	mov	r2, r3
 800e912:	68b9      	ldr	r1, [r7, #8]
 800e914:	f012 fb07 	bl	8020f26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e920:	441a      	add	r2, r3
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d32b      	bcc.n	800e98a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	605a      	str	r2, [r3, #4]
 800e93a:	e026      	b.n	800e98a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	68d8      	ldr	r0, [r3, #12]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e944:	461a      	mov	r2, r3
 800e946:	68b9      	ldr	r1, [r7, #8]
 800e948:	f012 faed 	bl	8020f26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	68da      	ldr	r2, [r3, #12]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e954:	425b      	negs	r3, r3
 800e956:	441a      	add	r2, r3
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68da      	ldr	r2, [r3, #12]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d207      	bcs.n	800e978 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	689a      	ldr	r2, [r3, #8]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e970:	425b      	negs	r3, r3
 800e972:	441a      	add	r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d105      	bne.n	800e98a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d002      	beq.n	800e98a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	3b01      	subs	r3, #1
 800e988:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	1c5a      	adds	r2, r3, #1
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e992:	697b      	ldr	r3, [r7, #20]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d018      	beq.n	800e9e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	68da      	ldr	r2, [r3, #12]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b6:	441a      	add	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	68da      	ldr	r2, [r3, #12]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d303      	bcc.n	800e9d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	68d9      	ldr	r1, [r3, #12]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9d8:	461a      	mov	r2, r3
 800e9da:	6838      	ldr	r0, [r7, #0]
 800e9dc:	f012 faa3 	bl	8020f26 <memcpy>
	}
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9f0:	f001 fc8c 	bl	801030c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9fc:	e011      	b.n	800ea22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d012      	beq.n	800ea2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	3324      	adds	r3, #36	; 0x24
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f000 fd42 	bl	800f494 <xTaskRemoveFromEventList>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d001      	beq.n	800ea1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ea16:	f000 fe47 	bl	800f6a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	dce9      	bgt.n	800e9fe <prvUnlockQueue+0x16>
 800ea2a:	e000      	b.n	800ea2e <prvUnlockQueue+0x46>
					break;
 800ea2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	22ff      	movs	r2, #255	; 0xff
 800ea32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ea36:	f001 fc9d 	bl	8010374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea3a:	f001 fc67 	bl	801030c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea46:	e011      	b.n	800ea6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	691b      	ldr	r3, [r3, #16]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d012      	beq.n	800ea76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	3310      	adds	r3, #16
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 fd1d 	bl	800f494 <xTaskRemoveFromEventList>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d001      	beq.n	800ea64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea60:	f000 fe22 	bl	800f6a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea64:	7bbb      	ldrb	r3, [r7, #14]
 800ea66:	3b01      	subs	r3, #1
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	dce9      	bgt.n	800ea48 <prvUnlockQueue+0x60>
 800ea74:	e000      	b.n	800ea78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	22ff      	movs	r2, #255	; 0xff
 800ea7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea80:	f001 fc78 	bl	8010374 <vPortExitCritical>
}
 800ea84:	bf00      	nop
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea94:	f001 fc3a 	bl	801030c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d102      	bne.n	800eaa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	e001      	b.n	800eaaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eaaa:	f001 fc63 	bl	8010374 <vPortExitCritical>

	return xReturn;
 800eaae:	68fb      	ldr	r3, [r7, #12]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eac0:	f001 fc24 	bl	801030c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eacc:	429a      	cmp	r2, r3
 800eace:	d102      	bne.n	800ead6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ead0:	2301      	movs	r3, #1
 800ead2:	60fb      	str	r3, [r7, #12]
 800ead4:	e001      	b.n	800eada <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ead6:	2300      	movs	r3, #0
 800ead8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eada:	f001 fc4b 	bl	8010374 <vPortExitCritical>

	return xReturn;
 800eade:	68fb      	ldr	r3, [r7, #12]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3710      	adds	r7, #16
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	60fb      	str	r3, [r7, #12]
 800eaf6:	e014      	b.n	800eb22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eaf8:	4a0f      	ldr	r2, [pc, #60]	; (800eb38 <vQueueAddToRegistry+0x50>)
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10b      	bne.n	800eb1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb04:	490c      	ldr	r1, [pc, #48]	; (800eb38 <vQueueAddToRegistry+0x50>)
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	683a      	ldr	r2, [r7, #0]
 800eb0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eb0e:	4a0a      	ldr	r2, [pc, #40]	; (800eb38 <vQueueAddToRegistry+0x50>)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	00db      	lsls	r3, r3, #3
 800eb14:	4413      	add	r3, r2
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eb1a:	e006      	b.n	800eb2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	60fb      	str	r3, [r7, #12]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2b07      	cmp	r3, #7
 800eb26:	d9e7      	bls.n	800eaf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb28:	bf00      	nop
 800eb2a:	bf00      	nop
 800eb2c:	3714      	adds	r7, #20
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	2000c6d0 	.word	0x2000c6d0

0800eb3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb4c:	f001 fbde 	bl	801030c <vPortEnterCritical>
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb56:	b25b      	sxtb	r3, r3
 800eb58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb5c:	d103      	bne.n	800eb66 <vQueueWaitForMessageRestricted+0x2a>
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb6c:	b25b      	sxtb	r3, r3
 800eb6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb72:	d103      	bne.n	800eb7c <vQueueWaitForMessageRestricted+0x40>
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb7c:	f001 fbfa 	bl	8010374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d106      	bne.n	800eb96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	3324      	adds	r3, #36	; 0x24
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	68b9      	ldr	r1, [r7, #8]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f000 fc51 	bl	800f438 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb96:	6978      	ldr	r0, [r7, #20]
 800eb98:	f7ff ff26 	bl	800e9e8 <prvUnlockQueue>
	}
 800eb9c:	bf00      	nop
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b08e      	sub	sp, #56	; 0x38
 800eba8:	af04      	add	r7, sp, #16
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
 800ebb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10c      	bne.n	800ebd2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ebb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbc:	b672      	cpsid	i
 800ebbe:	f383 8811 	msr	BASEPRI, r3
 800ebc2:	f3bf 8f6f 	isb	sy
 800ebc6:	f3bf 8f4f 	dsb	sy
 800ebca:	b662      	cpsie	i
 800ebcc:	623b      	str	r3, [r7, #32]
}
 800ebce:	bf00      	nop
 800ebd0:	e7fe      	b.n	800ebd0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ebd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10c      	bne.n	800ebf2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ebd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebdc:	b672      	cpsid	i
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	b662      	cpsie	i
 800ebec:	61fb      	str	r3, [r7, #28]
}
 800ebee:	bf00      	nop
 800ebf0:	e7fe      	b.n	800ebf0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ebf2:	235c      	movs	r3, #92	; 0x5c
 800ebf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	2b5c      	cmp	r3, #92	; 0x5c
 800ebfa:	d00c      	beq.n	800ec16 <xTaskCreateStatic+0x72>
	__asm volatile
 800ebfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec00:	b672      	cpsid	i
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	b662      	cpsie	i
 800ec10:	61bb      	str	r3, [r7, #24]
}
 800ec12:	bf00      	nop
 800ec14:	e7fe      	b.n	800ec14 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d01e      	beq.n	800ec5c <xTaskCreateStatic+0xb8>
 800ec1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d01b      	beq.n	800ec5c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec30:	2202      	movs	r2, #2
 800ec32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec36:	2300      	movs	r3, #0
 800ec38:	9303      	str	r3, [sp, #12]
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	9302      	str	r3, [sp, #8]
 800ec3e:	f107 0314 	add.w	r3, r7, #20
 800ec42:	9301      	str	r3, [sp, #4]
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	68b9      	ldr	r1, [r7, #8]
 800ec4e:	68f8      	ldr	r0, [r7, #12]
 800ec50:	f000 f850 	bl	800ecf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec56:	f000 f8df 	bl	800ee18 <prvAddNewTaskToReadyList>
 800ec5a:	e001      	b.n	800ec60 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec60:	697b      	ldr	r3, [r7, #20]
	}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3728      	adds	r7, #40	; 0x28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b08c      	sub	sp, #48	; 0x30
 800ec6e:	af04      	add	r7, sp, #16
 800ec70:	60f8      	str	r0, [r7, #12]
 800ec72:	60b9      	str	r1, [r7, #8]
 800ec74:	603b      	str	r3, [r7, #0]
 800ec76:	4613      	mov	r3, r2
 800ec78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec7a:	88fb      	ldrh	r3, [r7, #6]
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f001 fc70 	bl	8010564 <pvPortMalloc>
 800ec84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00e      	beq.n	800ecaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec8c:	205c      	movs	r0, #92	; 0x5c
 800ec8e:	f001 fc69 	bl	8010564 <pvPortMalloc>
 800ec92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d003      	beq.n	800eca2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	631a      	str	r2, [r3, #48]	; 0x30
 800eca0:	e005      	b.n	800ecae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eca2:	6978      	ldr	r0, [r7, #20]
 800eca4:	f001 fd28 	bl	80106f8 <vPortFree>
 800eca8:	e001      	b.n	800ecae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d017      	beq.n	800ece4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ecbc:	88fa      	ldrh	r2, [r7, #6]
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	9303      	str	r3, [sp, #12]
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	9302      	str	r3, [sp, #8]
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	9301      	str	r3, [sp, #4]
 800ecca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	68b9      	ldr	r1, [r7, #8]
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f000 f80e 	bl	800ecf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecd8:	69f8      	ldr	r0, [r7, #28]
 800ecda:	f000 f89d 	bl	800ee18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ecde:	2301      	movs	r3, #1
 800ece0:	61bb      	str	r3, [r7, #24]
 800ece2:	e002      	b.n	800ecea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ece4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ece8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ecea:	69bb      	ldr	r3, [r7, #24]
	}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3720      	adds	r7, #32
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b088      	sub	sp, #32
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	21a5      	movs	r1, #165	; 0xa5
 800ed0e:	f012 f83d 	bl	8020d8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ed1c:	440b      	add	r3, r1
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	4413      	add	r3, r2
 800ed22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	f023 0307 	bic.w	r3, r3, #7
 800ed2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	f003 0307 	and.w	r3, r3, #7
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00c      	beq.n	800ed50 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ed36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3a:	b672      	cpsid	i
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	b662      	cpsie	i
 800ed4a:	617b      	str	r3, [r7, #20]
}
 800ed4c:	bf00      	nop
 800ed4e:	e7fe      	b.n	800ed4e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d01f      	beq.n	800ed96 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed56:	2300      	movs	r3, #0
 800ed58:	61fb      	str	r3, [r7, #28]
 800ed5a:	e012      	b.n	800ed82 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	4413      	add	r3, r2
 800ed62:	7819      	ldrb	r1, [r3, #0]
 800ed64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	4413      	add	r3, r2
 800ed6a:	3334      	adds	r3, #52	; 0x34
 800ed6c:	460a      	mov	r2, r1
 800ed6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	4413      	add	r3, r2
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d006      	beq.n	800ed8a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	61fb      	str	r3, [r7, #28]
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	2b0f      	cmp	r3, #15
 800ed86:	d9e9      	bls.n	800ed5c <prvInitialiseNewTask+0x68>
 800ed88:	e000      	b.n	800ed8c <prvInitialiseNewTask+0x98>
			{
				break;
 800ed8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed94:	e003      	b.n	800ed9e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda0:	2b37      	cmp	r3, #55	; 0x37
 800eda2:	d901      	bls.n	800eda8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eda4:	2337      	movs	r3, #55	; 0x37
 800eda6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800edb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb6:	2200      	movs	r2, #0
 800edb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	3304      	adds	r3, #4
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff f952 	bl	800e068 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800edc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc6:	3318      	adds	r3, #24
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff f94d 	bl	800e068 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800edda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eddc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ede4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede6:	2200      	movs	r2, #0
 800ede8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edec:	2200      	movs	r2, #0
 800edee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800edf2:	683a      	ldr	r2, [r7, #0]
 800edf4:	68f9      	ldr	r1, [r7, #12]
 800edf6:	69b8      	ldr	r0, [r7, #24]
 800edf8:	f001 f97a 	bl	80100f0 <pxPortInitialiseStack>
 800edfc:	4602      	mov	r2, r0
 800edfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee0e:	bf00      	nop
 800ee10:	3720      	adds	r7, #32
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
	...

0800ee18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee20:	f001 fa74 	bl	801030c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee24:	4b2d      	ldr	r3, [pc, #180]	; (800eedc <prvAddNewTaskToReadyList+0xc4>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	4a2c      	ldr	r2, [pc, #176]	; (800eedc <prvAddNewTaskToReadyList+0xc4>)
 800ee2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee2e:	4b2c      	ldr	r3, [pc, #176]	; (800eee0 <prvAddNewTaskToReadyList+0xc8>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d109      	bne.n	800ee4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee36:	4a2a      	ldr	r2, [pc, #168]	; (800eee0 <prvAddNewTaskToReadyList+0xc8>)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee3c:	4b27      	ldr	r3, [pc, #156]	; (800eedc <prvAddNewTaskToReadyList+0xc4>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d110      	bne.n	800ee66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee44:	f000 fc54 	bl	800f6f0 <prvInitialiseTaskLists>
 800ee48:	e00d      	b.n	800ee66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee4a:	4b26      	ldr	r3, [pc, #152]	; (800eee4 <prvAddNewTaskToReadyList+0xcc>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d109      	bne.n	800ee66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee52:	4b23      	ldr	r3, [pc, #140]	; (800eee0 <prvAddNewTaskToReadyList+0xc8>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d802      	bhi.n	800ee66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee60:	4a1f      	ldr	r2, [pc, #124]	; (800eee0 <prvAddNewTaskToReadyList+0xc8>)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee66:	4b20      	ldr	r3, [pc, #128]	; (800eee8 <prvAddNewTaskToReadyList+0xd0>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	4a1e      	ldr	r2, [pc, #120]	; (800eee8 <prvAddNewTaskToReadyList+0xd0>)
 800ee6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee70:	4b1d      	ldr	r3, [pc, #116]	; (800eee8 <prvAddNewTaskToReadyList+0xd0>)
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee7c:	4b1b      	ldr	r3, [pc, #108]	; (800eeec <prvAddNewTaskToReadyList+0xd4>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d903      	bls.n	800ee8c <prvAddNewTaskToReadyList+0x74>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee88:	4a18      	ldr	r2, [pc, #96]	; (800eeec <prvAddNewTaskToReadyList+0xd4>)
 800ee8a:	6013      	str	r3, [r2, #0]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee90:	4613      	mov	r3, r2
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	4413      	add	r3, r2
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	4a15      	ldr	r2, [pc, #84]	; (800eef0 <prvAddNewTaskToReadyList+0xd8>)
 800ee9a:	441a      	add	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	3304      	adds	r3, #4
 800eea0:	4619      	mov	r1, r3
 800eea2:	4610      	mov	r0, r2
 800eea4:	f7ff f8ed 	bl	800e082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eea8:	f001 fa64 	bl	8010374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eeac:	4b0d      	ldr	r3, [pc, #52]	; (800eee4 <prvAddNewTaskToReadyList+0xcc>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00e      	beq.n	800eed2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eeb4:	4b0a      	ldr	r3, [pc, #40]	; (800eee0 <prvAddNewTaskToReadyList+0xc8>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d207      	bcs.n	800eed2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eec2:	4b0c      	ldr	r3, [pc, #48]	; (800eef4 <prvAddNewTaskToReadyList+0xdc>)
 800eec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eec8:	601a      	str	r2, [r3, #0]
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eed2:	bf00      	nop
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	2000cbe4 	.word	0x2000cbe4
 800eee0:	2000c710 	.word	0x2000c710
 800eee4:	2000cbf0 	.word	0x2000cbf0
 800eee8:	2000cc00 	.word	0x2000cc00
 800eeec:	2000cbec 	.word	0x2000cbec
 800eef0:	2000c714 	.word	0x2000c714
 800eef4:	e000ed04 	.word	0xe000ed04

0800eef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef00:	2300      	movs	r3, #0
 800ef02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d019      	beq.n	800ef3e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef0a:	4b14      	ldr	r3, [pc, #80]	; (800ef5c <vTaskDelay+0x64>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d00c      	beq.n	800ef2c <vTaskDelay+0x34>
	__asm volatile
 800ef12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef16:	b672      	cpsid	i
 800ef18:	f383 8811 	msr	BASEPRI, r3
 800ef1c:	f3bf 8f6f 	isb	sy
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	b662      	cpsie	i
 800ef26:	60bb      	str	r3, [r7, #8]
}
 800ef28:	bf00      	nop
 800ef2a:	e7fe      	b.n	800ef2a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ef2c:	f000 f884 	bl	800f038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef30:	2100      	movs	r1, #0
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 fd2c 	bl	800f990 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef38:	f000 f88c 	bl	800f054 <xTaskResumeAll>
 800ef3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d107      	bne.n	800ef54 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ef44:	4b06      	ldr	r3, [pc, #24]	; (800ef60 <vTaskDelay+0x68>)
 800ef46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef54:	bf00      	nop
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	2000cc0c 	.word	0x2000cc0c
 800ef60:	e000ed04 	.word	0xe000ed04

0800ef64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b08a      	sub	sp, #40	; 0x28
 800ef68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef72:	463a      	mov	r2, r7
 800ef74:	1d39      	adds	r1, r7, #4
 800ef76:	f107 0308 	add.w	r3, r7, #8
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7ff f820 	bl	800dfc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef80:	6839      	ldr	r1, [r7, #0]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	9202      	str	r2, [sp, #8]
 800ef88:	9301      	str	r3, [sp, #4]
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	460a      	mov	r2, r1
 800ef92:	4923      	ldr	r1, [pc, #140]	; (800f020 <vTaskStartScheduler+0xbc>)
 800ef94:	4823      	ldr	r0, [pc, #140]	; (800f024 <vTaskStartScheduler+0xc0>)
 800ef96:	f7ff fe05 	bl	800eba4 <xTaskCreateStatic>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	4a22      	ldr	r2, [pc, #136]	; (800f028 <vTaskStartScheduler+0xc4>)
 800ef9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800efa0:	4b21      	ldr	r3, [pc, #132]	; (800f028 <vTaskStartScheduler+0xc4>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d002      	beq.n	800efae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800efa8:	2301      	movs	r3, #1
 800efaa:	617b      	str	r3, [r7, #20]
 800efac:	e001      	b.n	800efb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800efae:	2300      	movs	r3, #0
 800efb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d102      	bne.n	800efbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800efb8:	f000 fd3e 	bl	800fa38 <xTimerCreateTimerTask>
 800efbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d118      	bne.n	800eff6 <vTaskStartScheduler+0x92>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc8:	b672      	cpsid	i
 800efca:	f383 8811 	msr	BASEPRI, r3
 800efce:	f3bf 8f6f 	isb	sy
 800efd2:	f3bf 8f4f 	dsb	sy
 800efd6:	b662      	cpsie	i
 800efd8:	613b      	str	r3, [r7, #16]
}
 800efda:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800efdc:	4b13      	ldr	r3, [pc, #76]	; (800f02c <vTaskStartScheduler+0xc8>)
 800efde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800efe4:	4b12      	ldr	r3, [pc, #72]	; (800f030 <vTaskStartScheduler+0xcc>)
 800efe6:	2201      	movs	r2, #1
 800efe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800efea:	4b12      	ldr	r3, [pc, #72]	; (800f034 <vTaskStartScheduler+0xd0>)
 800efec:	2200      	movs	r2, #0
 800efee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eff0:	f001 f90e 	bl	8010210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eff4:	e010      	b.n	800f018 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800effc:	d10c      	bne.n	800f018 <vTaskStartScheduler+0xb4>
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f002:	b672      	cpsid	i
 800f004:	f383 8811 	msr	BASEPRI, r3
 800f008:	f3bf 8f6f 	isb	sy
 800f00c:	f3bf 8f4f 	dsb	sy
 800f010:	b662      	cpsie	i
 800f012:	60fb      	str	r3, [r7, #12]
}
 800f014:	bf00      	nop
 800f016:	e7fe      	b.n	800f016 <vTaskStartScheduler+0xb2>
}
 800f018:	bf00      	nop
 800f01a:	3718      	adds	r7, #24
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	080244b8 	.word	0x080244b8
 800f024:	0800f6c1 	.word	0x0800f6c1
 800f028:	2000cc08 	.word	0x2000cc08
 800f02c:	2000cc04 	.word	0x2000cc04
 800f030:	2000cbf0 	.word	0x2000cbf0
 800f034:	2000cbe8 	.word	0x2000cbe8

0800f038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f038:	b480      	push	{r7}
 800f03a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f03c:	4b04      	ldr	r3, [pc, #16]	; (800f050 <vTaskSuspendAll+0x18>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	3301      	adds	r3, #1
 800f042:	4a03      	ldr	r2, [pc, #12]	; (800f050 <vTaskSuspendAll+0x18>)
 800f044:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f046:	bf00      	nop
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	2000cc0c 	.word	0x2000cc0c

0800f054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f05e:	2300      	movs	r3, #0
 800f060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f062:	4b43      	ldr	r3, [pc, #268]	; (800f170 <xTaskResumeAll+0x11c>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d10c      	bne.n	800f084 <xTaskResumeAll+0x30>
	__asm volatile
 800f06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06e:	b672      	cpsid	i
 800f070:	f383 8811 	msr	BASEPRI, r3
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	b662      	cpsie	i
 800f07e:	603b      	str	r3, [r7, #0]
}
 800f080:	bf00      	nop
 800f082:	e7fe      	b.n	800f082 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f084:	f001 f942 	bl	801030c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f088:	4b39      	ldr	r3, [pc, #228]	; (800f170 <xTaskResumeAll+0x11c>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	4a38      	ldr	r2, [pc, #224]	; (800f170 <xTaskResumeAll+0x11c>)
 800f090:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f092:	4b37      	ldr	r3, [pc, #220]	; (800f170 <xTaskResumeAll+0x11c>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d162      	bne.n	800f160 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f09a:	4b36      	ldr	r3, [pc, #216]	; (800f174 <xTaskResumeAll+0x120>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d05e      	beq.n	800f160 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0a2:	e02f      	b.n	800f104 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0a4:	4b34      	ldr	r3, [pc, #208]	; (800f178 <xTaskResumeAll+0x124>)
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3318      	adds	r3, #24
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7ff f843 	bl	800e13c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff f83e 	bl	800e13c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0c4:	4b2d      	ldr	r3, [pc, #180]	; (800f17c <xTaskResumeAll+0x128>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d903      	bls.n	800f0d4 <xTaskResumeAll+0x80>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d0:	4a2a      	ldr	r2, [pc, #168]	; (800f17c <xTaskResumeAll+0x128>)
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d8:	4613      	mov	r3, r2
 800f0da:	009b      	lsls	r3, r3, #2
 800f0dc:	4413      	add	r3, r2
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	4a27      	ldr	r2, [pc, #156]	; (800f180 <xTaskResumeAll+0x12c>)
 800f0e2:	441a      	add	r2, r3
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	4610      	mov	r0, r2
 800f0ec:	f7fe ffc9 	bl	800e082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f4:	4b23      	ldr	r3, [pc, #140]	; (800f184 <xTaskResumeAll+0x130>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d302      	bcc.n	800f104 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f0fe:	4b22      	ldr	r3, [pc, #136]	; (800f188 <xTaskResumeAll+0x134>)
 800f100:	2201      	movs	r2, #1
 800f102:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f104:	4b1c      	ldr	r3, [pc, #112]	; (800f178 <xTaskResumeAll+0x124>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d1cb      	bne.n	800f0a4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f112:	f000 fb8d 	bl	800f830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f116:	4b1d      	ldr	r3, [pc, #116]	; (800f18c <xTaskResumeAll+0x138>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d010      	beq.n	800f144 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f122:	f000 f847 	bl	800f1b4 <xTaskIncrementTick>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d002      	beq.n	800f132 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f12c:	4b16      	ldr	r3, [pc, #88]	; (800f188 <xTaskResumeAll+0x134>)
 800f12e:	2201      	movs	r2, #1
 800f130:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	3b01      	subs	r3, #1
 800f136:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1f1      	bne.n	800f122 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f13e:	4b13      	ldr	r3, [pc, #76]	; (800f18c <xTaskResumeAll+0x138>)
 800f140:	2200      	movs	r2, #0
 800f142:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f144:	4b10      	ldr	r3, [pc, #64]	; (800f188 <xTaskResumeAll+0x134>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d009      	beq.n	800f160 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f14c:	2301      	movs	r3, #1
 800f14e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f150:	4b0f      	ldr	r3, [pc, #60]	; (800f190 <xTaskResumeAll+0x13c>)
 800f152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f160:	f001 f908 	bl	8010374 <vPortExitCritical>

	return xAlreadyYielded;
 800f164:	68bb      	ldr	r3, [r7, #8]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	2000cc0c 	.word	0x2000cc0c
 800f174:	2000cbe4 	.word	0x2000cbe4
 800f178:	2000cba4 	.word	0x2000cba4
 800f17c:	2000cbec 	.word	0x2000cbec
 800f180:	2000c714 	.word	0x2000c714
 800f184:	2000c710 	.word	0x2000c710
 800f188:	2000cbf8 	.word	0x2000cbf8
 800f18c:	2000cbf4 	.word	0x2000cbf4
 800f190:	e000ed04 	.word	0xe000ed04

0800f194 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f19a:	4b05      	ldr	r3, [pc, #20]	; (800f1b0 <xTaskGetTickCount+0x1c>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f1a0:	687b      	ldr	r3, [r7, #4]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	370c      	adds	r7, #12
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	2000cbe8 	.word	0x2000cbe8

0800f1b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b086      	sub	sp, #24
 800f1b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1be:	4b50      	ldr	r3, [pc, #320]	; (800f300 <xTaskIncrementTick+0x14c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f040 808b 	bne.w	800f2de <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f1c8:	4b4e      	ldr	r3, [pc, #312]	; (800f304 <xTaskIncrementTick+0x150>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f1d0:	4a4c      	ldr	r2, [pc, #304]	; (800f304 <xTaskIncrementTick+0x150>)
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d122      	bne.n	800f222 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f1dc:	4b4a      	ldr	r3, [pc, #296]	; (800f308 <xTaskIncrementTick+0x154>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00c      	beq.n	800f200 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ea:	b672      	cpsid	i
 800f1ec:	f383 8811 	msr	BASEPRI, r3
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	b662      	cpsie	i
 800f1fa:	603b      	str	r3, [r7, #0]
}
 800f1fc:	bf00      	nop
 800f1fe:	e7fe      	b.n	800f1fe <xTaskIncrementTick+0x4a>
 800f200:	4b41      	ldr	r3, [pc, #260]	; (800f308 <xTaskIncrementTick+0x154>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	60fb      	str	r3, [r7, #12]
 800f206:	4b41      	ldr	r3, [pc, #260]	; (800f30c <xTaskIncrementTick+0x158>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4a3f      	ldr	r2, [pc, #252]	; (800f308 <xTaskIncrementTick+0x154>)
 800f20c:	6013      	str	r3, [r2, #0]
 800f20e:	4a3f      	ldr	r2, [pc, #252]	; (800f30c <xTaskIncrementTick+0x158>)
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6013      	str	r3, [r2, #0]
 800f214:	4b3e      	ldr	r3, [pc, #248]	; (800f310 <xTaskIncrementTick+0x15c>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	3301      	adds	r3, #1
 800f21a:	4a3d      	ldr	r2, [pc, #244]	; (800f310 <xTaskIncrementTick+0x15c>)
 800f21c:	6013      	str	r3, [r2, #0]
 800f21e:	f000 fb07 	bl	800f830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f222:	4b3c      	ldr	r3, [pc, #240]	; (800f314 <xTaskIncrementTick+0x160>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	693a      	ldr	r2, [r7, #16]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d349      	bcc.n	800f2c0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f22c:	4b36      	ldr	r3, [pc, #216]	; (800f308 <xTaskIncrementTick+0x154>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d104      	bne.n	800f240 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f236:	4b37      	ldr	r3, [pc, #220]	; (800f314 <xTaskIncrementTick+0x160>)
 800f238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f23c:	601a      	str	r2, [r3, #0]
					break;
 800f23e:	e03f      	b.n	800f2c0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f240:	4b31      	ldr	r3, [pc, #196]	; (800f308 <xTaskIncrementTick+0x154>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f250:	693a      	ldr	r2, [r7, #16]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	429a      	cmp	r2, r3
 800f256:	d203      	bcs.n	800f260 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f258:	4a2e      	ldr	r2, [pc, #184]	; (800f314 <xTaskIncrementTick+0x160>)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f25e:	e02f      	b.n	800f2c0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	3304      	adds	r3, #4
 800f264:	4618      	mov	r0, r3
 800f266:	f7fe ff69 	bl	800e13c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d004      	beq.n	800f27c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	3318      	adds	r3, #24
 800f276:	4618      	mov	r0, r3
 800f278:	f7fe ff60 	bl	800e13c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f280:	4b25      	ldr	r3, [pc, #148]	; (800f318 <xTaskIncrementTick+0x164>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	429a      	cmp	r2, r3
 800f286:	d903      	bls.n	800f290 <xTaskIncrementTick+0xdc>
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28c:	4a22      	ldr	r2, [pc, #136]	; (800f318 <xTaskIncrementTick+0x164>)
 800f28e:	6013      	str	r3, [r2, #0]
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f294:	4613      	mov	r3, r2
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4413      	add	r3, r2
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4a1f      	ldr	r2, [pc, #124]	; (800f31c <xTaskIncrementTick+0x168>)
 800f29e:	441a      	add	r2, r3
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	3304      	adds	r3, #4
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4610      	mov	r0, r2
 800f2a8:	f7fe feeb 	bl	800e082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b0:	4b1b      	ldr	r3, [pc, #108]	; (800f320 <xTaskIncrementTick+0x16c>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d3b8      	bcc.n	800f22c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2be:	e7b5      	b.n	800f22c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f2c0:	4b17      	ldr	r3, [pc, #92]	; (800f320 <xTaskIncrementTick+0x16c>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c6:	4915      	ldr	r1, [pc, #84]	; (800f31c <xTaskIncrementTick+0x168>)
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	440b      	add	r3, r1
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d907      	bls.n	800f2e8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	617b      	str	r3, [r7, #20]
 800f2dc:	e004      	b.n	800f2e8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f2de:	4b11      	ldr	r3, [pc, #68]	; (800f324 <xTaskIncrementTick+0x170>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	4a0f      	ldr	r2, [pc, #60]	; (800f324 <xTaskIncrementTick+0x170>)
 800f2e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f2e8:	4b0f      	ldr	r3, [pc, #60]	; (800f328 <xTaskIncrementTick+0x174>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d001      	beq.n	800f2f4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f2f4:	697b      	ldr	r3, [r7, #20]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3718      	adds	r7, #24
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	2000cc0c 	.word	0x2000cc0c
 800f304:	2000cbe8 	.word	0x2000cbe8
 800f308:	2000cb9c 	.word	0x2000cb9c
 800f30c:	2000cba0 	.word	0x2000cba0
 800f310:	2000cbfc 	.word	0x2000cbfc
 800f314:	2000cc04 	.word	0x2000cc04
 800f318:	2000cbec 	.word	0x2000cbec
 800f31c:	2000c714 	.word	0x2000c714
 800f320:	2000c710 	.word	0x2000c710
 800f324:	2000cbf4 	.word	0x2000cbf4
 800f328:	2000cbf8 	.word	0x2000cbf8

0800f32c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f332:	4b29      	ldr	r3, [pc, #164]	; (800f3d8 <vTaskSwitchContext+0xac>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d003      	beq.n	800f342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f33a:	4b28      	ldr	r3, [pc, #160]	; (800f3dc <vTaskSwitchContext+0xb0>)
 800f33c:	2201      	movs	r2, #1
 800f33e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f340:	e043      	b.n	800f3ca <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800f342:	4b26      	ldr	r3, [pc, #152]	; (800f3dc <vTaskSwitchContext+0xb0>)
 800f344:	2200      	movs	r2, #0
 800f346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f348:	4b25      	ldr	r3, [pc, #148]	; (800f3e0 <vTaskSwitchContext+0xb4>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	60fb      	str	r3, [r7, #12]
 800f34e:	e012      	b.n	800f376 <vTaskSwitchContext+0x4a>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d10c      	bne.n	800f370 <vTaskSwitchContext+0x44>
	__asm volatile
 800f356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35a:	b672      	cpsid	i
 800f35c:	f383 8811 	msr	BASEPRI, r3
 800f360:	f3bf 8f6f 	isb	sy
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	b662      	cpsie	i
 800f36a:	607b      	str	r3, [r7, #4]
}
 800f36c:	bf00      	nop
 800f36e:	e7fe      	b.n	800f36e <vTaskSwitchContext+0x42>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	3b01      	subs	r3, #1
 800f374:	60fb      	str	r3, [r7, #12]
 800f376:	491b      	ldr	r1, [pc, #108]	; (800f3e4 <vTaskSwitchContext+0xb8>)
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	4613      	mov	r3, r2
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	4413      	add	r3, r2
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	440b      	add	r3, r1
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d0e2      	beq.n	800f350 <vTaskSwitchContext+0x24>
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	4613      	mov	r3, r2
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	4413      	add	r3, r2
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	4a13      	ldr	r2, [pc, #76]	; (800f3e4 <vTaskSwitchContext+0xb8>)
 800f396:	4413      	add	r3, r2
 800f398:	60bb      	str	r3, [r7, #8]
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	685a      	ldr	r2, [r3, #4]
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	605a      	str	r2, [r3, #4]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	3308      	adds	r3, #8
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d104      	bne.n	800f3ba <vTaskSwitchContext+0x8e>
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	685a      	ldr	r2, [r3, #4]
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	605a      	str	r2, [r3, #4]
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	4a09      	ldr	r2, [pc, #36]	; (800f3e8 <vTaskSwitchContext+0xbc>)
 800f3c2:	6013      	str	r3, [r2, #0]
 800f3c4:	4a06      	ldr	r2, [pc, #24]	; (800f3e0 <vTaskSwitchContext+0xb4>)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6013      	str	r3, [r2, #0]
}
 800f3ca:	bf00      	nop
 800f3cc:	3714      	adds	r7, #20
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	2000cc0c 	.word	0x2000cc0c
 800f3dc:	2000cbf8 	.word	0x2000cbf8
 800f3e0:	2000cbec 	.word	0x2000cbec
 800f3e4:	2000c714 	.word	0x2000c714
 800f3e8:	2000c710 	.word	0x2000c710

0800f3ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d10c      	bne.n	800f416 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f400:	b672      	cpsid	i
 800f402:	f383 8811 	msr	BASEPRI, r3
 800f406:	f3bf 8f6f 	isb	sy
 800f40a:	f3bf 8f4f 	dsb	sy
 800f40e:	b662      	cpsie	i
 800f410:	60fb      	str	r3, [r7, #12]
}
 800f412:	bf00      	nop
 800f414:	e7fe      	b.n	800f414 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f416:	4b07      	ldr	r3, [pc, #28]	; (800f434 <vTaskPlaceOnEventList+0x48>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3318      	adds	r3, #24
 800f41c:	4619      	mov	r1, r3
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7fe fe53 	bl	800e0ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f424:	2101      	movs	r1, #1
 800f426:	6838      	ldr	r0, [r7, #0]
 800f428:	f000 fab2 	bl	800f990 <prvAddCurrentTaskToDelayedList>
}
 800f42c:	bf00      	nop
 800f42e:	3710      	adds	r7, #16
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	2000c710 	.word	0x2000c710

0800f438 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b086      	sub	sp, #24
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d10c      	bne.n	800f464 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800f44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44e:	b672      	cpsid	i
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	b662      	cpsie	i
 800f45e:	617b      	str	r3, [r7, #20]
}
 800f460:	bf00      	nop
 800f462:	e7fe      	b.n	800f462 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f464:	4b0a      	ldr	r3, [pc, #40]	; (800f490 <vTaskPlaceOnEventListRestricted+0x58>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	3318      	adds	r3, #24
 800f46a:	4619      	mov	r1, r3
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f7fe fe08 	bl	800e082 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d002      	beq.n	800f47e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800f478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f47c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f47e:	6879      	ldr	r1, [r7, #4]
 800f480:	68b8      	ldr	r0, [r7, #8]
 800f482:	f000 fa85 	bl	800f990 <prvAddCurrentTaskToDelayedList>
	}
 800f486:	bf00      	nop
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	2000c710 	.word	0x2000c710

0800f494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10c      	bne.n	800f4c4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ae:	b672      	cpsid	i
 800f4b0:	f383 8811 	msr	BASEPRI, r3
 800f4b4:	f3bf 8f6f 	isb	sy
 800f4b8:	f3bf 8f4f 	dsb	sy
 800f4bc:	b662      	cpsie	i
 800f4be:	60fb      	str	r3, [r7, #12]
}
 800f4c0:	bf00      	nop
 800f4c2:	e7fe      	b.n	800f4c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	3318      	adds	r3, #24
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fe fe37 	bl	800e13c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4ce:	4b1e      	ldr	r3, [pc, #120]	; (800f548 <xTaskRemoveFromEventList+0xb4>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d11d      	bne.n	800f512 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	3304      	adds	r3, #4
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fe2e 	bl	800e13c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e4:	4b19      	ldr	r3, [pc, #100]	; (800f54c <xTaskRemoveFromEventList+0xb8>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d903      	bls.n	800f4f4 <xTaskRemoveFromEventList+0x60>
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f0:	4a16      	ldr	r2, [pc, #88]	; (800f54c <xTaskRemoveFromEventList+0xb8>)
 800f4f2:	6013      	str	r3, [r2, #0]
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	4413      	add	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	4a13      	ldr	r2, [pc, #76]	; (800f550 <xTaskRemoveFromEventList+0xbc>)
 800f502:	441a      	add	r2, r3
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	3304      	adds	r3, #4
 800f508:	4619      	mov	r1, r3
 800f50a:	4610      	mov	r0, r2
 800f50c:	f7fe fdb9 	bl	800e082 <vListInsertEnd>
 800f510:	e005      	b.n	800f51e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	3318      	adds	r3, #24
 800f516:	4619      	mov	r1, r3
 800f518:	480e      	ldr	r0, [pc, #56]	; (800f554 <xTaskRemoveFromEventList+0xc0>)
 800f51a:	f7fe fdb2 	bl	800e082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f522:	4b0d      	ldr	r3, [pc, #52]	; (800f558 <xTaskRemoveFromEventList+0xc4>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f528:	429a      	cmp	r2, r3
 800f52a:	d905      	bls.n	800f538 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f52c:	2301      	movs	r3, #1
 800f52e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f530:	4b0a      	ldr	r3, [pc, #40]	; (800f55c <xTaskRemoveFromEventList+0xc8>)
 800f532:	2201      	movs	r2, #1
 800f534:	601a      	str	r2, [r3, #0]
 800f536:	e001      	b.n	800f53c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f538:	2300      	movs	r3, #0
 800f53a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f53c:	697b      	ldr	r3, [r7, #20]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3718      	adds	r7, #24
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	2000cc0c 	.word	0x2000cc0c
 800f54c:	2000cbec 	.word	0x2000cbec
 800f550:	2000c714 	.word	0x2000c714
 800f554:	2000cba4 	.word	0x2000cba4
 800f558:	2000c710 	.word	0x2000c710
 800f55c:	2000cbf8 	.word	0x2000cbf8

0800f560 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d10c      	bne.n	800f588 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800f56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f572:	b672      	cpsid	i
 800f574:	f383 8811 	msr	BASEPRI, r3
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	f3bf 8f4f 	dsb	sy
 800f580:	b662      	cpsie	i
 800f582:	60fb      	str	r3, [r7, #12]
}
 800f584:	bf00      	nop
 800f586:	e7fe      	b.n	800f586 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800f588:	f000 fec0 	bl	801030c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f58c:	4b06      	ldr	r3, [pc, #24]	; (800f5a8 <vTaskSetTimeOutState+0x48>)
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f594:	4b05      	ldr	r3, [pc, #20]	; (800f5ac <vTaskSetTimeOutState+0x4c>)
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f59c:	f000 feea 	bl	8010374 <vPortExitCritical>
}
 800f5a0:	bf00      	nop
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	2000cbfc 	.word	0x2000cbfc
 800f5ac:	2000cbe8 	.word	0x2000cbe8

0800f5b0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5b8:	4b06      	ldr	r3, [pc, #24]	; (800f5d4 <vTaskInternalSetTimeOutState+0x24>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f5c0:	4b05      	ldr	r3, [pc, #20]	; (800f5d8 <vTaskInternalSetTimeOutState+0x28>)
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	605a      	str	r2, [r3, #4]
}
 800f5c8:	bf00      	nop
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr
 800f5d4:	2000cbfc 	.word	0x2000cbfc
 800f5d8:	2000cbe8 	.word	0x2000cbe8

0800f5dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b088      	sub	sp, #32
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d10c      	bne.n	800f606 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f0:	b672      	cpsid	i
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	b662      	cpsie	i
 800f600:	613b      	str	r3, [r7, #16]
}
 800f602:	bf00      	nop
 800f604:	e7fe      	b.n	800f604 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d10c      	bne.n	800f626 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f610:	b672      	cpsid	i
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	b662      	cpsie	i
 800f620:	60fb      	str	r3, [r7, #12]
}
 800f622:	bf00      	nop
 800f624:	e7fe      	b.n	800f624 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f626:	f000 fe71 	bl	801030c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f62a:	4b1d      	ldr	r3, [pc, #116]	; (800f6a0 <xTaskCheckForTimeOut+0xc4>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	69ba      	ldr	r2, [r7, #24]
 800f636:	1ad3      	subs	r3, r2, r3
 800f638:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f642:	d102      	bne.n	800f64a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f644:	2300      	movs	r3, #0
 800f646:	61fb      	str	r3, [r7, #28]
 800f648:	e023      	b.n	800f692 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	4b15      	ldr	r3, [pc, #84]	; (800f6a4 <xTaskCheckForTimeOut+0xc8>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	429a      	cmp	r2, r3
 800f654:	d007      	beq.n	800f666 <xTaskCheckForTimeOut+0x8a>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	69ba      	ldr	r2, [r7, #24]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d302      	bcc.n	800f666 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f660:	2301      	movs	r3, #1
 800f662:	61fb      	str	r3, [r7, #28]
 800f664:	e015      	b.n	800f692 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	697a      	ldr	r2, [r7, #20]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d20b      	bcs.n	800f688 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	1ad2      	subs	r2, r2, r3
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7ff ff97 	bl	800f5b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f682:	2300      	movs	r3, #0
 800f684:	61fb      	str	r3, [r7, #28]
 800f686:	e004      	b.n	800f692 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f68e:	2301      	movs	r3, #1
 800f690:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f692:	f000 fe6f 	bl	8010374 <vPortExitCritical>

	return xReturn;
 800f696:	69fb      	ldr	r3, [r7, #28]
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3720      	adds	r7, #32
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	2000cbe8 	.word	0x2000cbe8
 800f6a4:	2000cbfc 	.word	0x2000cbfc

0800f6a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f6ac:	4b03      	ldr	r3, [pc, #12]	; (800f6bc <vTaskMissedYield+0x14>)
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	601a      	str	r2, [r3, #0]
}
 800f6b2:	bf00      	nop
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr
 800f6bc:	2000cbf8 	.word	0x2000cbf8

0800f6c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f6c8:	f000 f852 	bl	800f770 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f6cc:	4b06      	ldr	r3, [pc, #24]	; (800f6e8 <prvIdleTask+0x28>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d9f9      	bls.n	800f6c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f6d4:	4b05      	ldr	r3, [pc, #20]	; (800f6ec <prvIdleTask+0x2c>)
 800f6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6da:	601a      	str	r2, [r3, #0]
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f6e4:	e7f0      	b.n	800f6c8 <prvIdleTask+0x8>
 800f6e6:	bf00      	nop
 800f6e8:	2000c714 	.word	0x2000c714
 800f6ec:	e000ed04 	.word	0xe000ed04

0800f6f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	607b      	str	r3, [r7, #4]
 800f6fa:	e00c      	b.n	800f716 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	4613      	mov	r3, r2
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	4413      	add	r3, r2
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4a12      	ldr	r2, [pc, #72]	; (800f750 <prvInitialiseTaskLists+0x60>)
 800f708:	4413      	add	r3, r2
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fe fc8c 	bl	800e028 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	3301      	adds	r3, #1
 800f714:	607b      	str	r3, [r7, #4]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2b37      	cmp	r3, #55	; 0x37
 800f71a:	d9ef      	bls.n	800f6fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f71c:	480d      	ldr	r0, [pc, #52]	; (800f754 <prvInitialiseTaskLists+0x64>)
 800f71e:	f7fe fc83 	bl	800e028 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f722:	480d      	ldr	r0, [pc, #52]	; (800f758 <prvInitialiseTaskLists+0x68>)
 800f724:	f7fe fc80 	bl	800e028 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f728:	480c      	ldr	r0, [pc, #48]	; (800f75c <prvInitialiseTaskLists+0x6c>)
 800f72a:	f7fe fc7d 	bl	800e028 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f72e:	480c      	ldr	r0, [pc, #48]	; (800f760 <prvInitialiseTaskLists+0x70>)
 800f730:	f7fe fc7a 	bl	800e028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f734:	480b      	ldr	r0, [pc, #44]	; (800f764 <prvInitialiseTaskLists+0x74>)
 800f736:	f7fe fc77 	bl	800e028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f73a:	4b0b      	ldr	r3, [pc, #44]	; (800f768 <prvInitialiseTaskLists+0x78>)
 800f73c:	4a05      	ldr	r2, [pc, #20]	; (800f754 <prvInitialiseTaskLists+0x64>)
 800f73e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f740:	4b0a      	ldr	r3, [pc, #40]	; (800f76c <prvInitialiseTaskLists+0x7c>)
 800f742:	4a05      	ldr	r2, [pc, #20]	; (800f758 <prvInitialiseTaskLists+0x68>)
 800f744:	601a      	str	r2, [r3, #0]
}
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	2000c714 	.word	0x2000c714
 800f754:	2000cb74 	.word	0x2000cb74
 800f758:	2000cb88 	.word	0x2000cb88
 800f75c:	2000cba4 	.word	0x2000cba4
 800f760:	2000cbb8 	.word	0x2000cbb8
 800f764:	2000cbd0 	.word	0x2000cbd0
 800f768:	2000cb9c 	.word	0x2000cb9c
 800f76c:	2000cba0 	.word	0x2000cba0

0800f770 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f776:	e019      	b.n	800f7ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f778:	f000 fdc8 	bl	801030c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f77c:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <prvCheckTasksWaitingTermination+0x50>)
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	3304      	adds	r3, #4
 800f788:	4618      	mov	r0, r3
 800f78a:	f7fe fcd7 	bl	800e13c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f78e:	4b0d      	ldr	r3, [pc, #52]	; (800f7c4 <prvCheckTasksWaitingTermination+0x54>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	3b01      	subs	r3, #1
 800f794:	4a0b      	ldr	r2, [pc, #44]	; (800f7c4 <prvCheckTasksWaitingTermination+0x54>)
 800f796:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f798:	4b0b      	ldr	r3, [pc, #44]	; (800f7c8 <prvCheckTasksWaitingTermination+0x58>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	3b01      	subs	r3, #1
 800f79e:	4a0a      	ldr	r2, [pc, #40]	; (800f7c8 <prvCheckTasksWaitingTermination+0x58>)
 800f7a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f7a2:	f000 fde7 	bl	8010374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f810 	bl	800f7cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7ac:	4b06      	ldr	r3, [pc, #24]	; (800f7c8 <prvCheckTasksWaitingTermination+0x58>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1e1      	bne.n	800f778 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop
 800f7b8:	3708      	adds	r7, #8
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	2000cbb8 	.word	0x2000cbb8
 800f7c4:	2000cbe4 	.word	0x2000cbe4
 800f7c8:	2000cbcc 	.word	0x2000cbcc

0800f7cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d108      	bne.n	800f7f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 ff88 	bl	80106f8 <vPortFree>
				vPortFree( pxTCB );
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 ff85 	bl	80106f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f7ee:	e01a      	b.n	800f826 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d103      	bne.n	800f802 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 ff7c 	bl	80106f8 <vPortFree>
	}
 800f800:	e011      	b.n	800f826 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f808:	2b02      	cmp	r3, #2
 800f80a:	d00c      	beq.n	800f826 <prvDeleteTCB+0x5a>
	__asm volatile
 800f80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f810:	b672      	cpsid	i
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	b662      	cpsie	i
 800f820:	60fb      	str	r3, [r7, #12]
}
 800f822:	bf00      	nop
 800f824:	e7fe      	b.n	800f824 <prvDeleteTCB+0x58>
	}
 800f826:	bf00      	nop
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
	...

0800f830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f836:	4b0c      	ldr	r3, [pc, #48]	; (800f868 <prvResetNextTaskUnblockTime+0x38>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d104      	bne.n	800f84a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f840:	4b0a      	ldr	r3, [pc, #40]	; (800f86c <prvResetNextTaskUnblockTime+0x3c>)
 800f842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f846:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f848:	e008      	b.n	800f85c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f84a:	4b07      	ldr	r3, [pc, #28]	; (800f868 <prvResetNextTaskUnblockTime+0x38>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	4a04      	ldr	r2, [pc, #16]	; (800f86c <prvResetNextTaskUnblockTime+0x3c>)
 800f85a:	6013      	str	r3, [r2, #0]
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr
 800f868:	2000cb9c 	.word	0x2000cb9c
 800f86c:	2000cc04 	.word	0x2000cc04

0800f870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f876:	4b0b      	ldr	r3, [pc, #44]	; (800f8a4 <xTaskGetSchedulerState+0x34>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d102      	bne.n	800f884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f87e:	2301      	movs	r3, #1
 800f880:	607b      	str	r3, [r7, #4]
 800f882:	e008      	b.n	800f896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f884:	4b08      	ldr	r3, [pc, #32]	; (800f8a8 <xTaskGetSchedulerState+0x38>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d102      	bne.n	800f892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f88c:	2302      	movs	r3, #2
 800f88e:	607b      	str	r3, [r7, #4]
 800f890:	e001      	b.n	800f896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f892:	2300      	movs	r3, #0
 800f894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f896:	687b      	ldr	r3, [r7, #4]
	}
 800f898:	4618      	mov	r0, r3
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr
 800f8a4:	2000cbf0 	.word	0x2000cbf0
 800f8a8:	2000cc0c 	.word	0x2000cc0c

0800f8ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b086      	sub	sp, #24
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d05a      	beq.n	800f978 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f8c2:	4b30      	ldr	r3, [pc, #192]	; (800f984 <xTaskPriorityDisinherit+0xd8>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	693a      	ldr	r2, [r7, #16]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d00c      	beq.n	800f8e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800f8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d0:	b672      	cpsid	i
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	b662      	cpsie	i
 800f8e0:	60fb      	str	r3, [r7, #12]
}
 800f8e2:	bf00      	nop
 800f8e4:	e7fe      	b.n	800f8e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d10c      	bne.n	800f908 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800f8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f2:	b672      	cpsid	i
 800f8f4:	f383 8811 	msr	BASEPRI, r3
 800f8f8:	f3bf 8f6f 	isb	sy
 800f8fc:	f3bf 8f4f 	dsb	sy
 800f900:	b662      	cpsie	i
 800f902:	60bb      	str	r3, [r7, #8]
}
 800f904:	bf00      	nop
 800f906:	e7fe      	b.n	800f906 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f90c:	1e5a      	subs	r2, r3, #1
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d02c      	beq.n	800f978 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f922:	2b00      	cmp	r3, #0
 800f924:	d128      	bne.n	800f978 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	3304      	adds	r3, #4
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fe fc06 	bl	800e13c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f93c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f948:	4b0f      	ldr	r3, [pc, #60]	; (800f988 <xTaskPriorityDisinherit+0xdc>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d903      	bls.n	800f958 <xTaskPriorityDisinherit+0xac>
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f954:	4a0c      	ldr	r2, [pc, #48]	; (800f988 <xTaskPriorityDisinherit+0xdc>)
 800f956:	6013      	str	r3, [r2, #0]
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95c:	4613      	mov	r3, r2
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4413      	add	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	4a09      	ldr	r2, [pc, #36]	; (800f98c <xTaskPriorityDisinherit+0xe0>)
 800f966:	441a      	add	r2, r3
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	3304      	adds	r3, #4
 800f96c:	4619      	mov	r1, r3
 800f96e:	4610      	mov	r0, r2
 800f970:	f7fe fb87 	bl	800e082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f974:	2301      	movs	r3, #1
 800f976:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f978:	697b      	ldr	r3, [r7, #20]
	}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3718      	adds	r7, #24
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	2000c710 	.word	0x2000c710
 800f988:	2000cbec 	.word	0x2000cbec
 800f98c:	2000c714 	.word	0x2000c714

0800f990 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f99a:	4b21      	ldr	r3, [pc, #132]	; (800fa20 <prvAddCurrentTaskToDelayedList+0x90>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9a0:	4b20      	ldr	r3, [pc, #128]	; (800fa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3304      	adds	r3, #4
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fe fbc8 	bl	800e13c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9b2:	d10a      	bne.n	800f9ca <prvAddCurrentTaskToDelayedList+0x3a>
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d007      	beq.n	800f9ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9ba:	4b1a      	ldr	r3, [pc, #104]	; (800fa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	3304      	adds	r3, #4
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	4819      	ldr	r0, [pc, #100]	; (800fa28 <prvAddCurrentTaskToDelayedList+0x98>)
 800f9c4:	f7fe fb5d 	bl	800e082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f9c8:	e026      	b.n	800fa18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f9d2:	4b14      	ldr	r3, [pc, #80]	; (800fa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f9da:	68ba      	ldr	r2, [r7, #8]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d209      	bcs.n	800f9f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9e2:	4b12      	ldr	r3, [pc, #72]	; (800fa2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f9e4:	681a      	ldr	r2, [r3, #0]
 800f9e6:	4b0f      	ldr	r3, [pc, #60]	; (800fa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3304      	adds	r3, #4
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4610      	mov	r0, r2
 800f9f0:	f7fe fb6b 	bl	800e0ca <vListInsert>
}
 800f9f4:	e010      	b.n	800fa18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9f6:	4b0e      	ldr	r3, [pc, #56]	; (800fa30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	4b0a      	ldr	r3, [pc, #40]	; (800fa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	3304      	adds	r3, #4
 800fa00:	4619      	mov	r1, r3
 800fa02:	4610      	mov	r0, r2
 800fa04:	f7fe fb61 	bl	800e0ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa08:	4b0a      	ldr	r3, [pc, #40]	; (800fa34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d202      	bcs.n	800fa18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fa12:	4a08      	ldr	r2, [pc, #32]	; (800fa34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	6013      	str	r3, [r2, #0]
}
 800fa18:	bf00      	nop
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	2000cbe8 	.word	0x2000cbe8
 800fa24:	2000c710 	.word	0x2000c710
 800fa28:	2000cbd0 	.word	0x2000cbd0
 800fa2c:	2000cba0 	.word	0x2000cba0
 800fa30:	2000cb9c 	.word	0x2000cb9c
 800fa34:	2000cc04 	.word	0x2000cc04

0800fa38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b08a      	sub	sp, #40	; 0x28
 800fa3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fa42:	f000 fb15 	bl	8010070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fa46:	4b1d      	ldr	r3, [pc, #116]	; (800fabc <xTimerCreateTimerTask+0x84>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d021      	beq.n	800fa92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fa52:	2300      	movs	r3, #0
 800fa54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fa56:	1d3a      	adds	r2, r7, #4
 800fa58:	f107 0108 	add.w	r1, r7, #8
 800fa5c:	f107 030c 	add.w	r3, r7, #12
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fe fac7 	bl	800dff4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fa66:	6879      	ldr	r1, [r7, #4]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	9202      	str	r2, [sp, #8]
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	2302      	movs	r3, #2
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	2300      	movs	r3, #0
 800fa76:	460a      	mov	r2, r1
 800fa78:	4911      	ldr	r1, [pc, #68]	; (800fac0 <xTimerCreateTimerTask+0x88>)
 800fa7a:	4812      	ldr	r0, [pc, #72]	; (800fac4 <xTimerCreateTimerTask+0x8c>)
 800fa7c:	f7ff f892 	bl	800eba4 <xTaskCreateStatic>
 800fa80:	4603      	mov	r3, r0
 800fa82:	4a11      	ldr	r2, [pc, #68]	; (800fac8 <xTimerCreateTimerTask+0x90>)
 800fa84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fa86:	4b10      	ldr	r3, [pc, #64]	; (800fac8 <xTimerCreateTimerTask+0x90>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d001      	beq.n	800fa92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d10c      	bne.n	800fab2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800fa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9c:	b672      	cpsid	i
 800fa9e:	f383 8811 	msr	BASEPRI, r3
 800faa2:	f3bf 8f6f 	isb	sy
 800faa6:	f3bf 8f4f 	dsb	sy
 800faaa:	b662      	cpsie	i
 800faac:	613b      	str	r3, [r7, #16]
}
 800faae:	bf00      	nop
 800fab0:	e7fe      	b.n	800fab0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fab2:	697b      	ldr	r3, [r7, #20]
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3718      	adds	r7, #24
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	2000cc40 	.word	0x2000cc40
 800fac0:	080244c0 	.word	0x080244c0
 800fac4:	0800fc09 	.word	0x0800fc09
 800fac8:	2000cc44 	.word	0x2000cc44

0800facc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b08a      	sub	sp, #40	; 0x28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
 800fad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fada:	2300      	movs	r3, #0
 800fadc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d10c      	bne.n	800fafe <xTimerGenericCommand+0x32>
	__asm volatile
 800fae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae8:	b672      	cpsid	i
 800faea:	f383 8811 	msr	BASEPRI, r3
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	f3bf 8f4f 	dsb	sy
 800faf6:	b662      	cpsie	i
 800faf8:	623b      	str	r3, [r7, #32]
}
 800fafa:	bf00      	nop
 800fafc:	e7fe      	b.n	800fafc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fafe:	4b1a      	ldr	r3, [pc, #104]	; (800fb68 <xTimerGenericCommand+0x9c>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d02a      	beq.n	800fb5c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	2b05      	cmp	r3, #5
 800fb16:	dc18      	bgt.n	800fb4a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fb18:	f7ff feaa 	bl	800f870 <xTaskGetSchedulerState>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	d109      	bne.n	800fb36 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fb22:	4b11      	ldr	r3, [pc, #68]	; (800fb68 <xTimerGenericCommand+0x9c>)
 800fb24:	6818      	ldr	r0, [r3, #0]
 800fb26:	f107 0110 	add.w	r1, r7, #16
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb2e:	f7fe fc3f 	bl	800e3b0 <xQueueGenericSend>
 800fb32:	6278      	str	r0, [r7, #36]	; 0x24
 800fb34:	e012      	b.n	800fb5c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fb36:	4b0c      	ldr	r3, [pc, #48]	; (800fb68 <xTimerGenericCommand+0x9c>)
 800fb38:	6818      	ldr	r0, [r3, #0]
 800fb3a:	f107 0110 	add.w	r1, r7, #16
 800fb3e:	2300      	movs	r3, #0
 800fb40:	2200      	movs	r2, #0
 800fb42:	f7fe fc35 	bl	800e3b0 <xQueueGenericSend>
 800fb46:	6278      	str	r0, [r7, #36]	; 0x24
 800fb48:	e008      	b.n	800fb5c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb4a:	4b07      	ldr	r3, [pc, #28]	; (800fb68 <xTimerGenericCommand+0x9c>)
 800fb4c:	6818      	ldr	r0, [r3, #0]
 800fb4e:	f107 0110 	add.w	r1, r7, #16
 800fb52:	2300      	movs	r3, #0
 800fb54:	683a      	ldr	r2, [r7, #0]
 800fb56:	f7fe fd31 	bl	800e5bc <xQueueGenericSendFromISR>
 800fb5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3728      	adds	r7, #40	; 0x28
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	2000cc40 	.word	0x2000cc40

0800fb6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b088      	sub	sp, #32
 800fb70:	af02      	add	r7, sp, #8
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb76:	4b23      	ldr	r3, [pc, #140]	; (800fc04 <prvProcessExpiredTimer+0x98>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	3304      	adds	r3, #4
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fe fad9 	bl	800e13c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb90:	f003 0304 	and.w	r3, r3, #4
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d024      	beq.n	800fbe2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	699a      	ldr	r2, [r3, #24]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	18d1      	adds	r1, r2, r3
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	6978      	ldr	r0, [r7, #20]
 800fba6:	f000 f8d3 	bl	800fd50 <prvInsertTimerInActiveList>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d021      	beq.n	800fbf4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	2100      	movs	r1, #0
 800fbba:	6978      	ldr	r0, [r7, #20]
 800fbbc:	f7ff ff86 	bl	800facc <xTimerGenericCommand>
 800fbc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d115      	bne.n	800fbf4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800fbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbcc:	b672      	cpsid	i
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
 800fbda:	b662      	cpsie	i
 800fbdc:	60fb      	str	r3, [r7, #12]
}
 800fbde:	bf00      	nop
 800fbe0:	e7fe      	b.n	800fbe0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbe8:	f023 0301 	bic.w	r3, r3, #1
 800fbec:	b2da      	uxtb	r2, r3
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	6a1b      	ldr	r3, [r3, #32]
 800fbf8:	6978      	ldr	r0, [r7, #20]
 800fbfa:	4798      	blx	r3
}
 800fbfc:	bf00      	nop
 800fbfe:	3718      	adds	r7, #24
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	2000cc38 	.word	0x2000cc38

0800fc08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc10:	f107 0308 	add.w	r3, r7, #8
 800fc14:	4618      	mov	r0, r3
 800fc16:	f000 f857 	bl	800fcc8 <prvGetNextExpireTime>
 800fc1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	4619      	mov	r1, r3
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f000 f803 	bl	800fc2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fc26:	f000 f8d5 	bl	800fdd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc2a:	e7f1      	b.n	800fc10 <prvTimerTask+0x8>

0800fc2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fc36:	f7ff f9ff 	bl	800f038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc3a:	f107 0308 	add.w	r3, r7, #8
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f000 f866 	bl	800fd10 <prvSampleTimeNow>
 800fc44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d130      	bne.n	800fcae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d10a      	bne.n	800fc68 <prvProcessTimerOrBlockTask+0x3c>
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d806      	bhi.n	800fc68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fc5a:	f7ff f9fb 	bl	800f054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fc5e:	68f9      	ldr	r1, [r7, #12]
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7ff ff83 	bl	800fb6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fc66:	e024      	b.n	800fcb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d008      	beq.n	800fc80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fc6e:	4b13      	ldr	r3, [pc, #76]	; (800fcbc <prvProcessTimerOrBlockTask+0x90>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d101      	bne.n	800fc7c <prvProcessTimerOrBlockTask+0x50>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e000      	b.n	800fc7e <prvProcessTimerOrBlockTask+0x52>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc80:	4b0f      	ldr	r3, [pc, #60]	; (800fcc0 <prvProcessTimerOrBlockTask+0x94>)
 800fc82:	6818      	ldr	r0, [r3, #0]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	1ad3      	subs	r3, r2, r3
 800fc8a:	683a      	ldr	r2, [r7, #0]
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	f7fe ff55 	bl	800eb3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc92:	f7ff f9df 	bl	800f054 <xTaskResumeAll>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10a      	bne.n	800fcb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fc9c:	4b09      	ldr	r3, [pc, #36]	; (800fcc4 <prvProcessTimerOrBlockTask+0x98>)
 800fc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	f3bf 8f6f 	isb	sy
}
 800fcac:	e001      	b.n	800fcb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fcae:	f7ff f9d1 	bl	800f054 <xTaskResumeAll>
}
 800fcb2:	bf00      	nop
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	2000cc3c 	.word	0x2000cc3c
 800fcc0:	2000cc40 	.word	0x2000cc40
 800fcc4:	e000ed04 	.word	0xe000ed04

0800fcc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b085      	sub	sp, #20
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fcd0:	4b0e      	ldr	r3, [pc, #56]	; (800fd0c <prvGetNextExpireTime+0x44>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <prvGetNextExpireTime+0x16>
 800fcda:	2201      	movs	r2, #1
 800fcdc:	e000      	b.n	800fce0 <prvGetNextExpireTime+0x18>
 800fcde:	2200      	movs	r2, #0
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d105      	bne.n	800fcf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fcec:	4b07      	ldr	r3, [pc, #28]	; (800fd0c <prvGetNextExpireTime+0x44>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	68db      	ldr	r3, [r3, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	60fb      	str	r3, [r7, #12]
 800fcf6:	e001      	b.n	800fcfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	2000cc38 	.word	0x2000cc38

0800fd10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fd18:	f7ff fa3c 	bl	800f194 <xTaskGetTickCount>
 800fd1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fd1e:	4b0b      	ldr	r3, [pc, #44]	; (800fd4c <prvSampleTimeNow+0x3c>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d205      	bcs.n	800fd34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fd28:	f000 f93c 	bl	800ffa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	601a      	str	r2, [r3, #0]
 800fd32:	e002      	b.n	800fd3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fd3a:	4a04      	ldr	r2, [pc, #16]	; (800fd4c <prvSampleTimeNow+0x3c>)
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fd40:	68fb      	ldr	r3, [r7, #12]
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	2000cc48 	.word	0x2000cc48

0800fd50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	68ba      	ldr	r2, [r7, #8]
 800fd66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fd6e:	68ba      	ldr	r2, [r7, #8]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d812      	bhi.n	800fd9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	1ad2      	subs	r2, r2, r3
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	699b      	ldr	r3, [r3, #24]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d302      	bcc.n	800fd8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd84:	2301      	movs	r3, #1
 800fd86:	617b      	str	r3, [r7, #20]
 800fd88:	e01b      	b.n	800fdc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd8a:	4b10      	ldr	r3, [pc, #64]	; (800fdcc <prvInsertTimerInActiveList+0x7c>)
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	3304      	adds	r3, #4
 800fd92:	4619      	mov	r1, r3
 800fd94:	4610      	mov	r0, r2
 800fd96:	f7fe f998 	bl	800e0ca <vListInsert>
 800fd9a:	e012      	b.n	800fdc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d206      	bcs.n	800fdb2 <prvInsertTimerInActiveList+0x62>
 800fda4:	68ba      	ldr	r2, [r7, #8]
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d302      	bcc.n	800fdb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fdac:	2301      	movs	r3, #1
 800fdae:	617b      	str	r3, [r7, #20]
 800fdb0:	e007      	b.n	800fdc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdb2:	4b07      	ldr	r3, [pc, #28]	; (800fdd0 <prvInsertTimerInActiveList+0x80>)
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	3304      	adds	r3, #4
 800fdba:	4619      	mov	r1, r3
 800fdbc:	4610      	mov	r0, r2
 800fdbe:	f7fe f984 	bl	800e0ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fdc2:	697b      	ldr	r3, [r7, #20]
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3718      	adds	r7, #24
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	2000cc3c 	.word	0x2000cc3c
 800fdd0:	2000cc38 	.word	0x2000cc38

0800fdd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b08e      	sub	sp, #56	; 0x38
 800fdd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fdda:	e0d0      	b.n	800ff7e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	da1a      	bge.n	800fe18 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fde2:	1d3b      	adds	r3, r7, #4
 800fde4:	3304      	adds	r3, #4
 800fde6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d10c      	bne.n	800fe08 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf2:	b672      	cpsid	i
 800fdf4:	f383 8811 	msr	BASEPRI, r3
 800fdf8:	f3bf 8f6f 	isb	sy
 800fdfc:	f3bf 8f4f 	dsb	sy
 800fe00:	b662      	cpsie	i
 800fe02:	61fb      	str	r3, [r7, #28]
}
 800fe04:	bf00      	nop
 800fe06:	e7fe      	b.n	800fe06 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe0e:	6850      	ldr	r0, [r2, #4]
 800fe10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe12:	6892      	ldr	r2, [r2, #8]
 800fe14:	4611      	mov	r1, r2
 800fe16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	f2c0 80af 	blt.w	800ff7e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fe24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe26:	695b      	ldr	r3, [r3, #20]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d004      	beq.n	800fe36 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2e:	3304      	adds	r3, #4
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fe f983 	bl	800e13c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe36:	463b      	mov	r3, r7
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7ff ff69 	bl	800fd10 <prvSampleTimeNow>
 800fe3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b09      	cmp	r3, #9
 800fe44:	f200 809a 	bhi.w	800ff7c <prvProcessReceivedCommands+0x1a8>
 800fe48:	a201      	add	r2, pc, #4	; (adr r2, 800fe50 <prvProcessReceivedCommands+0x7c>)
 800fe4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe4e:	bf00      	nop
 800fe50:	0800fe79 	.word	0x0800fe79
 800fe54:	0800fe79 	.word	0x0800fe79
 800fe58:	0800fe79 	.word	0x0800fe79
 800fe5c:	0800fef1 	.word	0x0800fef1
 800fe60:	0800ff05 	.word	0x0800ff05
 800fe64:	0800ff53 	.word	0x0800ff53
 800fe68:	0800fe79 	.word	0x0800fe79
 800fe6c:	0800fe79 	.word	0x0800fe79
 800fe70:	0800fef1 	.word	0x0800fef1
 800fe74:	0800ff05 	.word	0x0800ff05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe7e:	f043 0301 	orr.w	r3, r3, #1
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8e:	699b      	ldr	r3, [r3, #24]
 800fe90:	18d1      	adds	r1, r2, r3
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe98:	f7ff ff5a 	bl	800fd50 <prvInsertTimerInActiveList>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d06d      	beq.n	800ff7e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea4:	6a1b      	ldr	r3, [r3, #32]
 800fea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feb0:	f003 0304 	and.w	r3, r3, #4
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d062      	beq.n	800ff7e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febc:	699b      	ldr	r3, [r3, #24]
 800febe:	441a      	add	r2, r3
 800fec0:	2300      	movs	r3, #0
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	2300      	movs	r3, #0
 800fec6:	2100      	movs	r1, #0
 800fec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feca:	f7ff fdff 	bl	800facc <xTimerGenericCommand>
 800fece:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fed0:	6a3b      	ldr	r3, [r7, #32]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d153      	bne.n	800ff7e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800fed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feda:	b672      	cpsid	i
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	b662      	cpsie	i
 800feea:	61bb      	str	r3, [r7, #24]
}
 800feec:	bf00      	nop
 800feee:	e7fe      	b.n	800feee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fef6:	f023 0301 	bic.w	r3, r3, #1
 800fefa:	b2da      	uxtb	r2, r3
 800fefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ff02:	e03c      	b.n	800ff7e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff0a:	f043 0301 	orr.w	r3, r3, #1
 800ff0e:	b2da      	uxtb	r2, r3
 800ff10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ff16:	68ba      	ldr	r2, [r7, #8]
 800ff18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ff1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1e:	699b      	ldr	r3, [r3, #24]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d10c      	bne.n	800ff3e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ff24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff28:	b672      	cpsid	i
 800ff2a:	f383 8811 	msr	BASEPRI, r3
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	b662      	cpsie	i
 800ff38:	617b      	str	r3, [r7, #20]
}
 800ff3a:	bf00      	nop
 800ff3c:	e7fe      	b.n	800ff3c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ff3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff40:	699a      	ldr	r2, [r3, #24]
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	18d1      	adds	r1, r2, r3
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff4c:	f7ff ff00 	bl	800fd50 <prvInsertTimerInActiveList>
					break;
 800ff50:	e015      	b.n	800ff7e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ff52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff58:	f003 0302 	and.w	r3, r3, #2
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d103      	bne.n	800ff68 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ff60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff62:	f000 fbc9 	bl	80106f8 <vPortFree>
 800ff66:	e00a      	b.n	800ff7e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff6e:	f023 0301 	bic.w	r3, r3, #1
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ff7a:	e000      	b.n	800ff7e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800ff7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff7e:	4b08      	ldr	r3, [pc, #32]	; (800ffa0 <prvProcessReceivedCommands+0x1cc>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	1d39      	adds	r1, r7, #4
 800ff84:	2200      	movs	r2, #0
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fe fbb8 	bl	800e6fc <xQueueReceive>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f47f af24 	bne.w	800fddc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ff94:	bf00      	nop
 800ff96:	bf00      	nop
 800ff98:	3730      	adds	r7, #48	; 0x30
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	2000cc40 	.word	0x2000cc40

0800ffa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b088      	sub	sp, #32
 800ffa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ffaa:	e04a      	b.n	8010042 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffac:	4b2e      	ldr	r3, [pc, #184]	; (8010068 <prvSwitchTimerLists+0xc4>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffb6:	4b2c      	ldr	r3, [pc, #176]	; (8010068 <prvSwitchTimerLists+0xc4>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7fe f8b9 	bl	800e13c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6a1b      	ldr	r3, [r3, #32]
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffd8:	f003 0304 	and.w	r3, r3, #4
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d030      	beq.n	8010042 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	699b      	ldr	r3, [r3, #24]
 800ffe4:	693a      	ldr	r2, [r7, #16]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ffea:	68ba      	ldr	r2, [r7, #8]
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d90e      	bls.n	8010010 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fffe:	4b1a      	ldr	r3, [pc, #104]	; (8010068 <prvSwitchTimerLists+0xc4>)
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	3304      	adds	r3, #4
 8010006:	4619      	mov	r1, r3
 8010008:	4610      	mov	r0, r2
 801000a:	f7fe f85e 	bl	800e0ca <vListInsert>
 801000e:	e018      	b.n	8010042 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010010:	2300      	movs	r3, #0
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	2300      	movs	r3, #0
 8010016:	693a      	ldr	r2, [r7, #16]
 8010018:	2100      	movs	r1, #0
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f7ff fd56 	bl	800facc <xTimerGenericCommand>
 8010020:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d10c      	bne.n	8010042 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002c:	b672      	cpsid	i
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	b662      	cpsie	i
 801003c:	603b      	str	r3, [r7, #0]
}
 801003e:	bf00      	nop
 8010040:	e7fe      	b.n	8010040 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010042:	4b09      	ldr	r3, [pc, #36]	; (8010068 <prvSwitchTimerLists+0xc4>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1af      	bne.n	800ffac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801004c:	4b06      	ldr	r3, [pc, #24]	; (8010068 <prvSwitchTimerLists+0xc4>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010052:	4b06      	ldr	r3, [pc, #24]	; (801006c <prvSwitchTimerLists+0xc8>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a04      	ldr	r2, [pc, #16]	; (8010068 <prvSwitchTimerLists+0xc4>)
 8010058:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801005a:	4a04      	ldr	r2, [pc, #16]	; (801006c <prvSwitchTimerLists+0xc8>)
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	6013      	str	r3, [r2, #0]
}
 8010060:	bf00      	nop
 8010062:	3718      	adds	r7, #24
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	2000cc38 	.word	0x2000cc38
 801006c:	2000cc3c 	.word	0x2000cc3c

08010070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010076:	f000 f949 	bl	801030c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801007a:	4b15      	ldr	r3, [pc, #84]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d120      	bne.n	80100c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010082:	4814      	ldr	r0, [pc, #80]	; (80100d4 <prvCheckForValidListAndQueue+0x64>)
 8010084:	f7fd ffd0 	bl	800e028 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010088:	4813      	ldr	r0, [pc, #76]	; (80100d8 <prvCheckForValidListAndQueue+0x68>)
 801008a:	f7fd ffcd 	bl	800e028 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801008e:	4b13      	ldr	r3, [pc, #76]	; (80100dc <prvCheckForValidListAndQueue+0x6c>)
 8010090:	4a10      	ldr	r2, [pc, #64]	; (80100d4 <prvCheckForValidListAndQueue+0x64>)
 8010092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010094:	4b12      	ldr	r3, [pc, #72]	; (80100e0 <prvCheckForValidListAndQueue+0x70>)
 8010096:	4a10      	ldr	r2, [pc, #64]	; (80100d8 <prvCheckForValidListAndQueue+0x68>)
 8010098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801009a:	2300      	movs	r3, #0
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	4b11      	ldr	r3, [pc, #68]	; (80100e4 <prvCheckForValidListAndQueue+0x74>)
 80100a0:	4a11      	ldr	r2, [pc, #68]	; (80100e8 <prvCheckForValidListAndQueue+0x78>)
 80100a2:	2110      	movs	r1, #16
 80100a4:	200a      	movs	r0, #10
 80100a6:	f7fe f8dd 	bl	800e264 <xQueueGenericCreateStatic>
 80100aa:	4603      	mov	r3, r0
 80100ac:	4a08      	ldr	r2, [pc, #32]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80100b0:	4b07      	ldr	r3, [pc, #28]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d005      	beq.n	80100c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80100b8:	4b05      	ldr	r3, [pc, #20]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	490b      	ldr	r1, [pc, #44]	; (80100ec <prvCheckForValidListAndQueue+0x7c>)
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fe fd12 	bl	800eae8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100c4:	f000 f956 	bl	8010374 <vPortExitCritical>
}
 80100c8:	bf00      	nop
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	2000cc40 	.word	0x2000cc40
 80100d4:	2000cc10 	.word	0x2000cc10
 80100d8:	2000cc24 	.word	0x2000cc24
 80100dc:	2000cc38 	.word	0x2000cc38
 80100e0:	2000cc3c 	.word	0x2000cc3c
 80100e4:	2000ccec 	.word	0x2000ccec
 80100e8:	2000cc4c 	.word	0x2000cc4c
 80100ec:	080244c8 	.word	0x080244c8

080100f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80100f0:	b480      	push	{r7}
 80100f2:	b085      	sub	sp, #20
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3b04      	subs	r3, #4
 8010100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	3b04      	subs	r3, #4
 801010e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	f023 0201 	bic.w	r2, r3, #1
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	3b04      	subs	r3, #4
 801011e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010120:	4a0c      	ldr	r2, [pc, #48]	; (8010154 <pxPortInitialiseStack+0x64>)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3b14      	subs	r3, #20
 801012a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	3b04      	subs	r3, #4
 8010136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f06f 0202 	mvn.w	r2, #2
 801013e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	3b20      	subs	r3, #32
 8010144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010146:	68fb      	ldr	r3, [r7, #12]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3714      	adds	r7, #20
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr
 8010154:	08010159 	.word	0x08010159

08010158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010158:	b480      	push	{r7}
 801015a:	b085      	sub	sp, #20
 801015c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801015e:	2300      	movs	r3, #0
 8010160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010162:	4b14      	ldr	r3, [pc, #80]	; (80101b4 <prvTaskExitError+0x5c>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801016a:	d00c      	beq.n	8010186 <prvTaskExitError+0x2e>
	__asm volatile
 801016c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010170:	b672      	cpsid	i
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	b662      	cpsie	i
 8010180:	60fb      	str	r3, [r7, #12]
}
 8010182:	bf00      	nop
 8010184:	e7fe      	b.n	8010184 <prvTaskExitError+0x2c>
	__asm volatile
 8010186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018a:	b672      	cpsid	i
 801018c:	f383 8811 	msr	BASEPRI, r3
 8010190:	f3bf 8f6f 	isb	sy
 8010194:	f3bf 8f4f 	dsb	sy
 8010198:	b662      	cpsie	i
 801019a:	60bb      	str	r3, [r7, #8]
}
 801019c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801019e:	bf00      	nop
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d0fc      	beq.n	80101a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80101a6:	bf00      	nop
 80101a8:	bf00      	nop
 80101aa:	3714      	adds	r7, #20
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr
 80101b4:	2000009c 	.word	0x2000009c
	...

080101c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80101c0:	4b07      	ldr	r3, [pc, #28]	; (80101e0 <pxCurrentTCBConst2>)
 80101c2:	6819      	ldr	r1, [r3, #0]
 80101c4:	6808      	ldr	r0, [r1, #0]
 80101c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ca:	f380 8809 	msr	PSP, r0
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f04f 0000 	mov.w	r0, #0
 80101d6:	f380 8811 	msr	BASEPRI, r0
 80101da:	4770      	bx	lr
 80101dc:	f3af 8000 	nop.w

080101e0 <pxCurrentTCBConst2>:
 80101e0:	2000c710 	.word	0x2000c710
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop

080101e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80101e8:	4808      	ldr	r0, [pc, #32]	; (801020c <prvPortStartFirstTask+0x24>)
 80101ea:	6800      	ldr	r0, [r0, #0]
 80101ec:	6800      	ldr	r0, [r0, #0]
 80101ee:	f380 8808 	msr	MSP, r0
 80101f2:	f04f 0000 	mov.w	r0, #0
 80101f6:	f380 8814 	msr	CONTROL, r0
 80101fa:	b662      	cpsie	i
 80101fc:	b661      	cpsie	f
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	df00      	svc	0
 8010208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801020a:	bf00      	nop
 801020c:	e000ed08 	.word	0xe000ed08

08010210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010216:	4b37      	ldr	r3, [pc, #220]	; (80102f4 <xPortStartScheduler+0xe4>)
 8010218:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	b2db      	uxtb	r3, r3
 8010220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	22ff      	movs	r2, #255	; 0xff
 8010226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	b2db      	uxtb	r3, r3
 801022e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010230:	78fb      	ldrb	r3, [r7, #3]
 8010232:	b2db      	uxtb	r3, r3
 8010234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010238:	b2da      	uxtb	r2, r3
 801023a:	4b2f      	ldr	r3, [pc, #188]	; (80102f8 <xPortStartScheduler+0xe8>)
 801023c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801023e:	4b2f      	ldr	r3, [pc, #188]	; (80102fc <xPortStartScheduler+0xec>)
 8010240:	2207      	movs	r2, #7
 8010242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010244:	e009      	b.n	801025a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010246:	4b2d      	ldr	r3, [pc, #180]	; (80102fc <xPortStartScheduler+0xec>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	3b01      	subs	r3, #1
 801024c:	4a2b      	ldr	r2, [pc, #172]	; (80102fc <xPortStartScheduler+0xec>)
 801024e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010250:	78fb      	ldrb	r3, [r7, #3]
 8010252:	b2db      	uxtb	r3, r3
 8010254:	005b      	lsls	r3, r3, #1
 8010256:	b2db      	uxtb	r3, r3
 8010258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801025a:	78fb      	ldrb	r3, [r7, #3]
 801025c:	b2db      	uxtb	r3, r3
 801025e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010262:	2b80      	cmp	r3, #128	; 0x80
 8010264:	d0ef      	beq.n	8010246 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010266:	4b25      	ldr	r3, [pc, #148]	; (80102fc <xPortStartScheduler+0xec>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	f1c3 0307 	rsb	r3, r3, #7
 801026e:	2b04      	cmp	r3, #4
 8010270:	d00c      	beq.n	801028c <xPortStartScheduler+0x7c>
	__asm volatile
 8010272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010276:	b672      	cpsid	i
 8010278:	f383 8811 	msr	BASEPRI, r3
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	f3bf 8f4f 	dsb	sy
 8010284:	b662      	cpsie	i
 8010286:	60bb      	str	r3, [r7, #8]
}
 8010288:	bf00      	nop
 801028a:	e7fe      	b.n	801028a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801028c:	4b1b      	ldr	r3, [pc, #108]	; (80102fc <xPortStartScheduler+0xec>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	021b      	lsls	r3, r3, #8
 8010292:	4a1a      	ldr	r2, [pc, #104]	; (80102fc <xPortStartScheduler+0xec>)
 8010294:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010296:	4b19      	ldr	r3, [pc, #100]	; (80102fc <xPortStartScheduler+0xec>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801029e:	4a17      	ldr	r2, [pc, #92]	; (80102fc <xPortStartScheduler+0xec>)
 80102a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	b2da      	uxtb	r2, r3
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80102aa:	4b15      	ldr	r3, [pc, #84]	; (8010300 <xPortStartScheduler+0xf0>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a14      	ldr	r2, [pc, #80]	; (8010300 <xPortStartScheduler+0xf0>)
 80102b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80102b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80102b6:	4b12      	ldr	r3, [pc, #72]	; (8010300 <xPortStartScheduler+0xf0>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a11      	ldr	r2, [pc, #68]	; (8010300 <xPortStartScheduler+0xf0>)
 80102bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80102c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80102c2:	f000 f8dd 	bl	8010480 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80102c6:	4b0f      	ldr	r3, [pc, #60]	; (8010304 <xPortStartScheduler+0xf4>)
 80102c8:	2200      	movs	r2, #0
 80102ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80102cc:	f000 f8fc 	bl	80104c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80102d0:	4b0d      	ldr	r3, [pc, #52]	; (8010308 <xPortStartScheduler+0xf8>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4a0c      	ldr	r2, [pc, #48]	; (8010308 <xPortStartScheduler+0xf8>)
 80102d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80102da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80102dc:	f7ff ff84 	bl	80101e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80102e0:	f7ff f824 	bl	800f32c <vTaskSwitchContext>
	prvTaskExitError();
 80102e4:	f7ff ff38 	bl	8010158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3710      	adds	r7, #16
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	e000e400 	.word	0xe000e400
 80102f8:	2000cd3c 	.word	0x2000cd3c
 80102fc:	2000cd40 	.word	0x2000cd40
 8010300:	e000ed20 	.word	0xe000ed20
 8010304:	2000009c 	.word	0x2000009c
 8010308:	e000ef34 	.word	0xe000ef34

0801030c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
	__asm volatile
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	b672      	cpsid	i
 8010318:	f383 8811 	msr	BASEPRI, r3
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f3bf 8f4f 	dsb	sy
 8010324:	b662      	cpsie	i
 8010326:	607b      	str	r3, [r7, #4]
}
 8010328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801032a:	4b10      	ldr	r3, [pc, #64]	; (801036c <vPortEnterCritical+0x60>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	3301      	adds	r3, #1
 8010330:	4a0e      	ldr	r2, [pc, #56]	; (801036c <vPortEnterCritical+0x60>)
 8010332:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010334:	4b0d      	ldr	r3, [pc, #52]	; (801036c <vPortEnterCritical+0x60>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b01      	cmp	r3, #1
 801033a:	d111      	bne.n	8010360 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801033c:	4b0c      	ldr	r3, [pc, #48]	; (8010370 <vPortEnterCritical+0x64>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00c      	beq.n	8010360 <vPortEnterCritical+0x54>
	__asm volatile
 8010346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034a:	b672      	cpsid	i
 801034c:	f383 8811 	msr	BASEPRI, r3
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	f3bf 8f4f 	dsb	sy
 8010358:	b662      	cpsie	i
 801035a:	603b      	str	r3, [r7, #0]
}
 801035c:	bf00      	nop
 801035e:	e7fe      	b.n	801035e <vPortEnterCritical+0x52>
	}
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr
 801036c:	2000009c 	.word	0x2000009c
 8010370:	e000ed04 	.word	0xe000ed04

08010374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801037a:	4b13      	ldr	r3, [pc, #76]	; (80103c8 <vPortExitCritical+0x54>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d10c      	bne.n	801039c <vPortExitCritical+0x28>
	__asm volatile
 8010382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010386:	b672      	cpsid	i
 8010388:	f383 8811 	msr	BASEPRI, r3
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f3bf 8f4f 	dsb	sy
 8010394:	b662      	cpsie	i
 8010396:	607b      	str	r3, [r7, #4]
}
 8010398:	bf00      	nop
 801039a:	e7fe      	b.n	801039a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801039c:	4b0a      	ldr	r3, [pc, #40]	; (80103c8 <vPortExitCritical+0x54>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3b01      	subs	r3, #1
 80103a2:	4a09      	ldr	r2, [pc, #36]	; (80103c8 <vPortExitCritical+0x54>)
 80103a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80103a6:	4b08      	ldr	r3, [pc, #32]	; (80103c8 <vPortExitCritical+0x54>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d105      	bne.n	80103ba <vPortExitCritical+0x46>
 80103ae:	2300      	movs	r3, #0
 80103b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	f383 8811 	msr	BASEPRI, r3
}
 80103b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80103ba:	bf00      	nop
 80103bc:	370c      	adds	r7, #12
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	2000009c 	.word	0x2000009c
 80103cc:	00000000 	.word	0x00000000

080103d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80103d0:	f3ef 8009 	mrs	r0, PSP
 80103d4:	f3bf 8f6f 	isb	sy
 80103d8:	4b15      	ldr	r3, [pc, #84]	; (8010430 <pxCurrentTCBConst>)
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	f01e 0f10 	tst.w	lr, #16
 80103e0:	bf08      	it	eq
 80103e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80103e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ea:	6010      	str	r0, [r2, #0]
 80103ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80103f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80103f4:	b672      	cpsid	i
 80103f6:	f380 8811 	msr	BASEPRI, r0
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	f3bf 8f6f 	isb	sy
 8010402:	b662      	cpsie	i
 8010404:	f7fe ff92 	bl	800f32c <vTaskSwitchContext>
 8010408:	f04f 0000 	mov.w	r0, #0
 801040c:	f380 8811 	msr	BASEPRI, r0
 8010410:	bc09      	pop	{r0, r3}
 8010412:	6819      	ldr	r1, [r3, #0]
 8010414:	6808      	ldr	r0, [r1, #0]
 8010416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801041a:	f01e 0f10 	tst.w	lr, #16
 801041e:	bf08      	it	eq
 8010420:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010424:	f380 8809 	msr	PSP, r0
 8010428:	f3bf 8f6f 	isb	sy
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop

08010430 <pxCurrentTCBConst>:
 8010430:	2000c710 	.word	0x2000c710
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010434:	bf00      	nop
 8010436:	bf00      	nop

08010438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
	__asm volatile
 801043e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010442:	b672      	cpsid	i
 8010444:	f383 8811 	msr	BASEPRI, r3
 8010448:	f3bf 8f6f 	isb	sy
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	b662      	cpsie	i
 8010452:	607b      	str	r3, [r7, #4]
}
 8010454:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010456:	f7fe fead 	bl	800f1b4 <xTaskIncrementTick>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d003      	beq.n	8010468 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010460:	4b06      	ldr	r3, [pc, #24]	; (801047c <SysTick_Handler+0x44>)
 8010462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010466:	601a      	str	r2, [r3, #0]
 8010468:	2300      	movs	r3, #0
 801046a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	f383 8811 	msr	BASEPRI, r3
}
 8010472:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010474:	bf00      	nop
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	e000ed04 	.word	0xe000ed04

08010480 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010480:	b480      	push	{r7}
 8010482:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010484:	4b0b      	ldr	r3, [pc, #44]	; (80104b4 <vPortSetupTimerInterrupt+0x34>)
 8010486:	2200      	movs	r2, #0
 8010488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801048a:	4b0b      	ldr	r3, [pc, #44]	; (80104b8 <vPortSetupTimerInterrupt+0x38>)
 801048c:	2200      	movs	r2, #0
 801048e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010490:	4b0a      	ldr	r3, [pc, #40]	; (80104bc <vPortSetupTimerInterrupt+0x3c>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4a0a      	ldr	r2, [pc, #40]	; (80104c0 <vPortSetupTimerInterrupt+0x40>)
 8010496:	fba2 2303 	umull	r2, r3, r2, r3
 801049a:	099b      	lsrs	r3, r3, #6
 801049c:	4a09      	ldr	r2, [pc, #36]	; (80104c4 <vPortSetupTimerInterrupt+0x44>)
 801049e:	3b01      	subs	r3, #1
 80104a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80104a2:	4b04      	ldr	r3, [pc, #16]	; (80104b4 <vPortSetupTimerInterrupt+0x34>)
 80104a4:	2207      	movs	r2, #7
 80104a6:	601a      	str	r2, [r3, #0]
}
 80104a8:	bf00      	nop
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	e000e010 	.word	0xe000e010
 80104b8:	e000e018 	.word	0xe000e018
 80104bc:	20000004 	.word	0x20000004
 80104c0:	10624dd3 	.word	0x10624dd3
 80104c4:	e000e014 	.word	0xe000e014

080104c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80104c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80104d8 <vPortEnableVFP+0x10>
 80104cc:	6801      	ldr	r1, [r0, #0]
 80104ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104d2:	6001      	str	r1, [r0, #0]
 80104d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80104d6:	bf00      	nop
 80104d8:	e000ed88 	.word	0xe000ed88

080104dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80104dc:	b480      	push	{r7}
 80104de:	b085      	sub	sp, #20
 80104e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80104e2:	f3ef 8305 	mrs	r3, IPSR
 80104e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2b0f      	cmp	r3, #15
 80104ec:	d916      	bls.n	801051c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80104ee:	4a19      	ldr	r2, [pc, #100]	; (8010554 <vPortValidateInterruptPriority+0x78>)
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	4413      	add	r3, r2
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80104f8:	4b17      	ldr	r3, [pc, #92]	; (8010558 <vPortValidateInterruptPriority+0x7c>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	7afa      	ldrb	r2, [r7, #11]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d20c      	bcs.n	801051c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010506:	b672      	cpsid	i
 8010508:	f383 8811 	msr	BASEPRI, r3
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	b662      	cpsie	i
 8010516:	607b      	str	r3, [r7, #4]
}
 8010518:	bf00      	nop
 801051a:	e7fe      	b.n	801051a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801051c:	4b0f      	ldr	r3, [pc, #60]	; (801055c <vPortValidateInterruptPriority+0x80>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010524:	4b0e      	ldr	r3, [pc, #56]	; (8010560 <vPortValidateInterruptPriority+0x84>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	429a      	cmp	r2, r3
 801052a:	d90c      	bls.n	8010546 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801052c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010530:	b672      	cpsid	i
 8010532:	f383 8811 	msr	BASEPRI, r3
 8010536:	f3bf 8f6f 	isb	sy
 801053a:	f3bf 8f4f 	dsb	sy
 801053e:	b662      	cpsie	i
 8010540:	603b      	str	r3, [r7, #0]
}
 8010542:	bf00      	nop
 8010544:	e7fe      	b.n	8010544 <vPortValidateInterruptPriority+0x68>
	}
 8010546:	bf00      	nop
 8010548:	3714      	adds	r7, #20
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	e000e3f0 	.word	0xe000e3f0
 8010558:	2000cd3c 	.word	0x2000cd3c
 801055c:	e000ed0c 	.word	0xe000ed0c
 8010560:	2000cd40 	.word	0x2000cd40

08010564 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b08a      	sub	sp, #40	; 0x28
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801056c:	2300      	movs	r3, #0
 801056e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010570:	f7fe fd62 	bl	800f038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010574:	4b5b      	ldr	r3, [pc, #364]	; (80106e4 <pvPortMalloc+0x180>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d101      	bne.n	8010580 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801057c:	f000 f91a 	bl	80107b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010580:	4b59      	ldr	r3, [pc, #356]	; (80106e8 <pvPortMalloc+0x184>)
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	4013      	ands	r3, r2
 8010588:	2b00      	cmp	r3, #0
 801058a:	f040 8092 	bne.w	80106b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d01f      	beq.n	80105d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010594:	2208      	movs	r2, #8
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4413      	add	r3, r2
 801059a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f003 0307 	and.w	r3, r3, #7
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d016      	beq.n	80105d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f023 0307 	bic.w	r3, r3, #7
 80105ac:	3308      	adds	r3, #8
 80105ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f003 0307 	and.w	r3, r3, #7
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00c      	beq.n	80105d4 <pvPortMalloc+0x70>
	__asm volatile
 80105ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105be:	b672      	cpsid	i
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	b662      	cpsie	i
 80105ce:	617b      	str	r3, [r7, #20]
}
 80105d0:	bf00      	nop
 80105d2:	e7fe      	b.n	80105d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d06b      	beq.n	80106b2 <pvPortMalloc+0x14e>
 80105da:	4b44      	ldr	r3, [pc, #272]	; (80106ec <pvPortMalloc+0x188>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d866      	bhi.n	80106b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80105e4:	4b42      	ldr	r3, [pc, #264]	; (80106f0 <pvPortMalloc+0x18c>)
 80105e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80105e8:	4b41      	ldr	r3, [pc, #260]	; (80106f0 <pvPortMalloc+0x18c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105ee:	e004      	b.n	80105fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	429a      	cmp	r2, r3
 8010602:	d903      	bls.n	801060c <pvPortMalloc+0xa8>
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1f1      	bne.n	80105f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801060c:	4b35      	ldr	r3, [pc, #212]	; (80106e4 <pvPortMalloc+0x180>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010612:	429a      	cmp	r2, r3
 8010614:	d04d      	beq.n	80106b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2208      	movs	r2, #8
 801061c:	4413      	add	r3, r2
 801061e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062a:	685a      	ldr	r2, [r3, #4]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	1ad2      	subs	r2, r2, r3
 8010630:	2308      	movs	r3, #8
 8010632:	005b      	lsls	r3, r3, #1
 8010634:	429a      	cmp	r2, r3
 8010636:	d921      	bls.n	801067c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	4413      	add	r3, r2
 801063e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	f003 0307 	and.w	r3, r3, #7
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00c      	beq.n	8010664 <pvPortMalloc+0x100>
	__asm volatile
 801064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064e:	b672      	cpsid	i
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	b662      	cpsie	i
 801065e:	613b      	str	r3, [r7, #16]
}
 8010660:	bf00      	nop
 8010662:	e7fe      	b.n	8010662 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	685a      	ldr	r2, [r3, #4]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	1ad2      	subs	r2, r2, r3
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010676:	69b8      	ldr	r0, [r7, #24]
 8010678:	f000 f8fe 	bl	8010878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801067c:	4b1b      	ldr	r3, [pc, #108]	; (80106ec <pvPortMalloc+0x188>)
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	1ad3      	subs	r3, r2, r3
 8010686:	4a19      	ldr	r2, [pc, #100]	; (80106ec <pvPortMalloc+0x188>)
 8010688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801068a:	4b18      	ldr	r3, [pc, #96]	; (80106ec <pvPortMalloc+0x188>)
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	4b19      	ldr	r3, [pc, #100]	; (80106f4 <pvPortMalloc+0x190>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	429a      	cmp	r2, r3
 8010694:	d203      	bcs.n	801069e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010696:	4b15      	ldr	r3, [pc, #84]	; (80106ec <pvPortMalloc+0x188>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	4a16      	ldr	r2, [pc, #88]	; (80106f4 <pvPortMalloc+0x190>)
 801069c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a0:	685a      	ldr	r2, [r3, #4]
 80106a2:	4b11      	ldr	r3, [pc, #68]	; (80106e8 <pvPortMalloc+0x184>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	431a      	orrs	r2, r3
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80106ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ae:	2200      	movs	r2, #0
 80106b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80106b2:	f7fe fccf 	bl	800f054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	f003 0307 	and.w	r3, r3, #7
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d00c      	beq.n	80106da <pvPortMalloc+0x176>
	__asm volatile
 80106c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c4:	b672      	cpsid	i
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	b662      	cpsie	i
 80106d4:	60fb      	str	r3, [r7, #12]
}
 80106d6:	bf00      	nop
 80106d8:	e7fe      	b.n	80106d8 <pvPortMalloc+0x174>
	return pvReturn;
 80106da:	69fb      	ldr	r3, [r7, #28]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3728      	adds	r7, #40	; 0x28
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	2001094c 	.word	0x2001094c
 80106e8:	20010958 	.word	0x20010958
 80106ec:	20010950 	.word	0x20010950
 80106f0:	20010944 	.word	0x20010944
 80106f4:	20010954 	.word	0x20010954

080106f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b086      	sub	sp, #24
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d04c      	beq.n	80107a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801070a:	2308      	movs	r3, #8
 801070c:	425b      	negs	r3, r3
 801070e:	697a      	ldr	r2, [r7, #20]
 8010710:	4413      	add	r3, r2
 8010712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	685a      	ldr	r2, [r3, #4]
 801071c:	4b23      	ldr	r3, [pc, #140]	; (80107ac <vPortFree+0xb4>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4013      	ands	r3, r2
 8010722:	2b00      	cmp	r3, #0
 8010724:	d10c      	bne.n	8010740 <vPortFree+0x48>
	__asm volatile
 8010726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072a:	b672      	cpsid	i
 801072c:	f383 8811 	msr	BASEPRI, r3
 8010730:	f3bf 8f6f 	isb	sy
 8010734:	f3bf 8f4f 	dsb	sy
 8010738:	b662      	cpsie	i
 801073a:	60fb      	str	r3, [r7, #12]
}
 801073c:	bf00      	nop
 801073e:	e7fe      	b.n	801073e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00c      	beq.n	8010762 <vPortFree+0x6a>
	__asm volatile
 8010748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801074c:	b672      	cpsid	i
 801074e:	f383 8811 	msr	BASEPRI, r3
 8010752:	f3bf 8f6f 	isb	sy
 8010756:	f3bf 8f4f 	dsb	sy
 801075a:	b662      	cpsie	i
 801075c:	60bb      	str	r3, [r7, #8]
}
 801075e:	bf00      	nop
 8010760:	e7fe      	b.n	8010760 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	685a      	ldr	r2, [r3, #4]
 8010766:	4b11      	ldr	r3, [pc, #68]	; (80107ac <vPortFree+0xb4>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4013      	ands	r3, r2
 801076c:	2b00      	cmp	r3, #0
 801076e:	d019      	beq.n	80107a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d115      	bne.n	80107a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	685a      	ldr	r2, [r3, #4]
 801077c:	4b0b      	ldr	r3, [pc, #44]	; (80107ac <vPortFree+0xb4>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	43db      	mvns	r3, r3
 8010782:	401a      	ands	r2, r3
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010788:	f7fe fc56 	bl	800f038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	685a      	ldr	r2, [r3, #4]
 8010790:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <vPortFree+0xb8>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4413      	add	r3, r2
 8010796:	4a06      	ldr	r2, [pc, #24]	; (80107b0 <vPortFree+0xb8>)
 8010798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801079a:	6938      	ldr	r0, [r7, #16]
 801079c:	f000 f86c 	bl	8010878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80107a0:	f7fe fc58 	bl	800f054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80107a4:	bf00      	nop
 80107a6:	3718      	adds	r7, #24
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	20010958 	.word	0x20010958
 80107b0:	20010950 	.word	0x20010950

080107b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80107b4:	b480      	push	{r7}
 80107b6:	b085      	sub	sp, #20
 80107b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80107ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80107be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80107c0:	4b27      	ldr	r3, [pc, #156]	; (8010860 <prvHeapInit+0xac>)
 80107c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f003 0307 	and.w	r3, r3, #7
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00c      	beq.n	80107e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3307      	adds	r3, #7
 80107d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f023 0307 	bic.w	r3, r3, #7
 80107da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107dc:	68ba      	ldr	r2, [r7, #8]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	1ad3      	subs	r3, r2, r3
 80107e2:	4a1f      	ldr	r2, [pc, #124]	; (8010860 <prvHeapInit+0xac>)
 80107e4:	4413      	add	r3, r2
 80107e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107ec:	4a1d      	ldr	r2, [pc, #116]	; (8010864 <prvHeapInit+0xb0>)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107f2:	4b1c      	ldr	r3, [pc, #112]	; (8010864 <prvHeapInit+0xb0>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	68ba      	ldr	r2, [r7, #8]
 80107fc:	4413      	add	r3, r2
 80107fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010800:	2208      	movs	r2, #8
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	1a9b      	subs	r3, r3, r2
 8010806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f023 0307 	bic.w	r3, r3, #7
 801080e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	4a15      	ldr	r2, [pc, #84]	; (8010868 <prvHeapInit+0xb4>)
 8010814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010816:	4b14      	ldr	r3, [pc, #80]	; (8010868 <prvHeapInit+0xb4>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	2200      	movs	r2, #0
 801081c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801081e:	4b12      	ldr	r3, [pc, #72]	; (8010868 <prvHeapInit+0xb4>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2200      	movs	r2, #0
 8010824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	1ad2      	subs	r2, r2, r3
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010834:	4b0c      	ldr	r3, [pc, #48]	; (8010868 <prvHeapInit+0xb4>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	4a0a      	ldr	r2, [pc, #40]	; (801086c <prvHeapInit+0xb8>)
 8010842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	4a09      	ldr	r2, [pc, #36]	; (8010870 <prvHeapInit+0xbc>)
 801084a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801084c:	4b09      	ldr	r3, [pc, #36]	; (8010874 <prvHeapInit+0xc0>)
 801084e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010852:	601a      	str	r2, [r3, #0]
}
 8010854:	bf00      	nop
 8010856:	3714      	adds	r7, #20
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr
 8010860:	2000cd44 	.word	0x2000cd44
 8010864:	20010944 	.word	0x20010944
 8010868:	2001094c 	.word	0x2001094c
 801086c:	20010954 	.word	0x20010954
 8010870:	20010950 	.word	0x20010950
 8010874:	20010958 	.word	0x20010958

08010878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010880:	4b28      	ldr	r3, [pc, #160]	; (8010924 <prvInsertBlockIntoFreeList+0xac>)
 8010882:	60fb      	str	r3, [r7, #12]
 8010884:	e002      	b.n	801088c <prvInsertBlockIntoFreeList+0x14>
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	60fb      	str	r3, [r7, #12]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	429a      	cmp	r2, r3
 8010894:	d8f7      	bhi.n	8010886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	68ba      	ldr	r2, [r7, #8]
 80108a0:	4413      	add	r3, r2
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d108      	bne.n	80108ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	685a      	ldr	r2, [r3, #4]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	441a      	add	r2, r3
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	441a      	add	r2, r3
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d118      	bne.n	8010900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	4b15      	ldr	r3, [pc, #84]	; (8010928 <prvInsertBlockIntoFreeList+0xb0>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d00d      	beq.n	80108f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	685a      	ldr	r2, [r3, #4]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	441a      	add	r2, r3
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	e008      	b.n	8010908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108f6:	4b0c      	ldr	r3, [pc, #48]	; (8010928 <prvInsertBlockIntoFreeList+0xb0>)
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	e003      	b.n	8010908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	429a      	cmp	r2, r3
 801090e:	d002      	beq.n	8010916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010916:	bf00      	nop
 8010918:	3714      	adds	r7, #20
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	20010944 	.word	0x20010944
 8010928:	2001094c 	.word	0x2001094c

0801092c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010930:	2200      	movs	r2, #0
 8010932:	4912      	ldr	r1, [pc, #72]	; (801097c <MX_USB_DEVICE_Init+0x50>)
 8010934:	4812      	ldr	r0, [pc, #72]	; (8010980 <MX_USB_DEVICE_Init+0x54>)
 8010936:	f7fb fee1 	bl	800c6fc <USBD_Init>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010940:	f7f2 fe71 	bl	8003626 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010944:	490f      	ldr	r1, [pc, #60]	; (8010984 <MX_USB_DEVICE_Init+0x58>)
 8010946:	480e      	ldr	r0, [pc, #56]	; (8010980 <MX_USB_DEVICE_Init+0x54>)
 8010948:	f7fb ff08 	bl	800c75c <USBD_RegisterClass>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010952:	f7f2 fe68 	bl	8003626 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010956:	490c      	ldr	r1, [pc, #48]	; (8010988 <MX_USB_DEVICE_Init+0x5c>)
 8010958:	4809      	ldr	r0, [pc, #36]	; (8010980 <MX_USB_DEVICE_Init+0x54>)
 801095a:	f7fb fe3f 	bl	800c5dc <USBD_CDC_RegisterInterface>
 801095e:	4603      	mov	r3, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	d001      	beq.n	8010968 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010964:	f7f2 fe5f 	bl	8003626 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010968:	4805      	ldr	r0, [pc, #20]	; (8010980 <MX_USB_DEVICE_Init+0x54>)
 801096a:	f7fb ff2d 	bl	800c7c8 <USBD_Start>
 801096e:	4603      	mov	r3, r0
 8010970:	2b00      	cmp	r3, #0
 8010972:	d001      	beq.n	8010978 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010974:	f7f2 fe57 	bl	8003626 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010978:	bf00      	nop
 801097a:	bd80      	pop	{r7, pc}
 801097c:	200000b4 	.word	0x200000b4
 8010980:	2001095c 	.word	0x2001095c
 8010984:	2000001c 	.word	0x2000001c
 8010988:	200000a0 	.word	0x200000a0

0801098c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010990:	2200      	movs	r2, #0
 8010992:	4905      	ldr	r1, [pc, #20]	; (80109a8 <CDC_Init_FS+0x1c>)
 8010994:	4805      	ldr	r0, [pc, #20]	; (80109ac <CDC_Init_FS+0x20>)
 8010996:	f7fb fe3b 	bl	800c610 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801099a:	4905      	ldr	r1, [pc, #20]	; (80109b0 <CDC_Init_FS+0x24>)
 801099c:	4803      	ldr	r0, [pc, #12]	; (80109ac <CDC_Init_FS+0x20>)
 801099e:	f7fb fe59 	bl	800c654 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80109a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	20011438 	.word	0x20011438
 80109ac:	2001095c 	.word	0x2001095c
 80109b0:	20010c38 	.word	0x20010c38

080109b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80109b4:	b480      	push	{r7}
 80109b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80109b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b083      	sub	sp, #12
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	4603      	mov	r3, r0
 80109cc:	6039      	str	r1, [r7, #0]
 80109ce:	71fb      	strb	r3, [r7, #7]
 80109d0:	4613      	mov	r3, r2
 80109d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80109d4:	79fb      	ldrb	r3, [r7, #7]
 80109d6:	2b23      	cmp	r3, #35	; 0x23
 80109d8:	d84a      	bhi.n	8010a70 <CDC_Control_FS+0xac>
 80109da:	a201      	add	r2, pc, #4	; (adr r2, 80109e0 <CDC_Control_FS+0x1c>)
 80109dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e0:	08010a71 	.word	0x08010a71
 80109e4:	08010a71 	.word	0x08010a71
 80109e8:	08010a71 	.word	0x08010a71
 80109ec:	08010a71 	.word	0x08010a71
 80109f0:	08010a71 	.word	0x08010a71
 80109f4:	08010a71 	.word	0x08010a71
 80109f8:	08010a71 	.word	0x08010a71
 80109fc:	08010a71 	.word	0x08010a71
 8010a00:	08010a71 	.word	0x08010a71
 8010a04:	08010a71 	.word	0x08010a71
 8010a08:	08010a71 	.word	0x08010a71
 8010a0c:	08010a71 	.word	0x08010a71
 8010a10:	08010a71 	.word	0x08010a71
 8010a14:	08010a71 	.word	0x08010a71
 8010a18:	08010a71 	.word	0x08010a71
 8010a1c:	08010a71 	.word	0x08010a71
 8010a20:	08010a71 	.word	0x08010a71
 8010a24:	08010a71 	.word	0x08010a71
 8010a28:	08010a71 	.word	0x08010a71
 8010a2c:	08010a71 	.word	0x08010a71
 8010a30:	08010a71 	.word	0x08010a71
 8010a34:	08010a71 	.word	0x08010a71
 8010a38:	08010a71 	.word	0x08010a71
 8010a3c:	08010a71 	.word	0x08010a71
 8010a40:	08010a71 	.word	0x08010a71
 8010a44:	08010a71 	.word	0x08010a71
 8010a48:	08010a71 	.word	0x08010a71
 8010a4c:	08010a71 	.word	0x08010a71
 8010a50:	08010a71 	.word	0x08010a71
 8010a54:	08010a71 	.word	0x08010a71
 8010a58:	08010a71 	.word	0x08010a71
 8010a5c:	08010a71 	.word	0x08010a71
 8010a60:	08010a71 	.word	0x08010a71
 8010a64:	08010a71 	.word	0x08010a71
 8010a68:	08010a71 	.word	0x08010a71
 8010a6c:	08010a71 	.word	0x08010a71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010a70:	bf00      	nop
  }

  return (USBD_OK);
 8010a72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010a8a:	6879      	ldr	r1, [r7, #4]
 8010a8c:	4805      	ldr	r0, [pc, #20]	; (8010aa4 <CDC_Receive_FS+0x24>)
 8010a8e:	f7fb fde1 	bl	800c654 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a92:	4804      	ldr	r0, [pc, #16]	; (8010aa4 <CDC_Receive_FS+0x24>)
 8010a94:	f7fb fdfc 	bl	800c690 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010a98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3708      	adds	r7, #8
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	2001095c 	.word	0x2001095c

08010aa8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b087      	sub	sp, #28
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	371c      	adds	r7, #28
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
	...

08010acc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	6039      	str	r1, [r7, #0]
 8010ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	2212      	movs	r2, #18
 8010adc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010ade:	4b03      	ldr	r3, [pc, #12]	; (8010aec <USBD_FS_DeviceDescriptor+0x20>)
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	370c      	adds	r7, #12
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aea:	4770      	bx	lr
 8010aec:	200000d4 	.word	0x200000d4

08010af0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	4603      	mov	r3, r0
 8010af8:	6039      	str	r1, [r7, #0]
 8010afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	2204      	movs	r2, #4
 8010b00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010b02:	4b03      	ldr	r3, [pc, #12]	; (8010b10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr
 8010b10:	200000f4 	.word	0x200000f4

08010b14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	6039      	str	r1, [r7, #0]
 8010b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b20:	79fb      	ldrb	r3, [r7, #7]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d105      	bne.n	8010b32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010b26:	683a      	ldr	r2, [r7, #0]
 8010b28:	4907      	ldr	r1, [pc, #28]	; (8010b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8010b2a:	4808      	ldr	r0, [pc, #32]	; (8010b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8010b2c:	f7fd f822 	bl	800db74 <USBD_GetString>
 8010b30:	e004      	b.n	8010b3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010b32:	683a      	ldr	r2, [r7, #0]
 8010b34:	4904      	ldr	r1, [pc, #16]	; (8010b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8010b36:	4805      	ldr	r0, [pc, #20]	; (8010b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8010b38:	f7fd f81c 	bl	800db74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b3c:	4b02      	ldr	r3, [pc, #8]	; (8010b48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20011c38 	.word	0x20011c38
 8010b4c:	080244d0 	.word	0x080244d0

08010b50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	4603      	mov	r3, r0
 8010b58:	6039      	str	r1, [r7, #0]
 8010b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010b5c:	683a      	ldr	r2, [r7, #0]
 8010b5e:	4904      	ldr	r1, [pc, #16]	; (8010b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010b60:	4804      	ldr	r0, [pc, #16]	; (8010b74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010b62:	f7fd f807 	bl	800db74 <USBD_GetString>
  return USBD_StrDesc;
 8010b66:	4b02      	ldr	r3, [pc, #8]	; (8010b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	20011c38 	.word	0x20011c38
 8010b74:	080244e8 	.word	0x080244e8

08010b78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	6039      	str	r1, [r7, #0]
 8010b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	221a      	movs	r2, #26
 8010b88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010b8a:	f000 f855 	bl	8010c38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010b8e:	4b02      	ldr	r3, [pc, #8]	; (8010b98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	200000f8 	.word	0x200000f8

08010b9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	6039      	str	r1, [r7, #0]
 8010ba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010ba8:	79fb      	ldrb	r3, [r7, #7]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d105      	bne.n	8010bba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010bae:	683a      	ldr	r2, [r7, #0]
 8010bb0:	4907      	ldr	r1, [pc, #28]	; (8010bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010bb2:	4808      	ldr	r0, [pc, #32]	; (8010bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010bb4:	f7fc ffde 	bl	800db74 <USBD_GetString>
 8010bb8:	e004      	b.n	8010bc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010bba:	683a      	ldr	r2, [r7, #0]
 8010bbc:	4904      	ldr	r1, [pc, #16]	; (8010bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010bbe:	4805      	ldr	r0, [pc, #20]	; (8010bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010bc0:	f7fc ffd8 	bl	800db74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bc4:	4b02      	ldr	r3, [pc, #8]	; (8010bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	20011c38 	.word	0x20011c38
 8010bd4:	080244fc 	.word	0x080244fc

08010bd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	4603      	mov	r3, r0
 8010be0:	6039      	str	r1, [r7, #0]
 8010be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010be4:	79fb      	ldrb	r3, [r7, #7]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d105      	bne.n	8010bf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010bea:	683a      	ldr	r2, [r7, #0]
 8010bec:	4907      	ldr	r1, [pc, #28]	; (8010c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010bee:	4808      	ldr	r0, [pc, #32]	; (8010c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010bf0:	f7fc ffc0 	bl	800db74 <USBD_GetString>
 8010bf4:	e004      	b.n	8010c00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010bf6:	683a      	ldr	r2, [r7, #0]
 8010bf8:	4904      	ldr	r1, [pc, #16]	; (8010c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010bfa:	4805      	ldr	r0, [pc, #20]	; (8010c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010bfc:	f7fc ffba 	bl	800db74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c00:	4b02      	ldr	r3, [pc, #8]	; (8010c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20011c38 	.word	0x20011c38
 8010c10:	08024508 	.word	0x08024508

08010c14 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	6039      	str	r1, [r7, #0]
 8010c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	220c      	movs	r2, #12
 8010c24:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010c26:	4b03      	ldr	r3, [pc, #12]	; (8010c34 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr
 8010c34:	200000e8 	.word	0x200000e8

08010c38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010c3e:	4b0f      	ldr	r3, [pc, #60]	; (8010c7c <Get_SerialNum+0x44>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010c44:	4b0e      	ldr	r3, [pc, #56]	; (8010c80 <Get_SerialNum+0x48>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010c4a:	4b0e      	ldr	r3, [pc, #56]	; (8010c84 <Get_SerialNum+0x4c>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4413      	add	r3, r2
 8010c56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d009      	beq.n	8010c72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010c5e:	2208      	movs	r2, #8
 8010c60:	4909      	ldr	r1, [pc, #36]	; (8010c88 <Get_SerialNum+0x50>)
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f000 f814 	bl	8010c90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010c68:	2204      	movs	r2, #4
 8010c6a:	4908      	ldr	r1, [pc, #32]	; (8010c8c <Get_SerialNum+0x54>)
 8010c6c:	68b8      	ldr	r0, [r7, #8]
 8010c6e:	f000 f80f 	bl	8010c90 <IntToUnicode>
  }
}
 8010c72:	bf00      	nop
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	1ff0f420 	.word	0x1ff0f420
 8010c80:	1ff0f424 	.word	0x1ff0f424
 8010c84:	1ff0f428 	.word	0x1ff0f428
 8010c88:	200000fa 	.word	0x200000fa
 8010c8c:	2000010a 	.word	0x2000010a

08010c90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b087      	sub	sp, #28
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	75fb      	strb	r3, [r7, #23]
 8010ca6:	e027      	b.n	8010cf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	0f1b      	lsrs	r3, r3, #28
 8010cac:	2b09      	cmp	r3, #9
 8010cae:	d80b      	bhi.n	8010cc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	0f1b      	lsrs	r3, r3, #28
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	7dfb      	ldrb	r3, [r7, #23]
 8010cb8:	005b      	lsls	r3, r3, #1
 8010cba:	4619      	mov	r1, r3
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	440b      	add	r3, r1
 8010cc0:	3230      	adds	r2, #48	; 0x30
 8010cc2:	b2d2      	uxtb	r2, r2
 8010cc4:	701a      	strb	r2, [r3, #0]
 8010cc6:	e00a      	b.n	8010cde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	0f1b      	lsrs	r3, r3, #28
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	7dfb      	ldrb	r3, [r7, #23]
 8010cd0:	005b      	lsls	r3, r3, #1
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	440b      	add	r3, r1
 8010cd8:	3237      	adds	r2, #55	; 0x37
 8010cda:	b2d2      	uxtb	r2, r2
 8010cdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	011b      	lsls	r3, r3, #4
 8010ce2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010ce4:	7dfb      	ldrb	r3, [r7, #23]
 8010ce6:	005b      	lsls	r3, r3, #1
 8010ce8:	3301      	adds	r3, #1
 8010cea:	68ba      	ldr	r2, [r7, #8]
 8010cec:	4413      	add	r3, r2
 8010cee:	2200      	movs	r2, #0
 8010cf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010cf2:	7dfb      	ldrb	r3, [r7, #23]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	75fb      	strb	r3, [r7, #23]
 8010cf8:	7dfa      	ldrb	r2, [r7, #23]
 8010cfa:	79fb      	ldrb	r3, [r7, #7]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d3d3      	bcc.n	8010ca8 <IntToUnicode+0x18>
  }
}
 8010d00:	bf00      	nop
 8010d02:	bf00      	nop
 8010d04:	371c      	adds	r7, #28
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
	...

08010d10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b0ae      	sub	sp, #184	; 0xb8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	601a      	str	r2, [r3, #0]
 8010d20:	605a      	str	r2, [r3, #4]
 8010d22:	609a      	str	r2, [r3, #8]
 8010d24:	60da      	str	r2, [r3, #12]
 8010d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010d28:	f107 0314 	add.w	r3, r7, #20
 8010d2c:	2290      	movs	r2, #144	; 0x90
 8010d2e:	2100      	movs	r1, #0
 8010d30:	4618      	mov	r0, r3
 8010d32:	f010 f82b 	bl	8020d8c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d3e:	d151      	bne.n	8010de4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010d44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010d46:	2300      	movs	r3, #0
 8010d48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010d4c:	f107 0314 	add.w	r3, r7, #20
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7f6 ff97 	bl	8007c84 <HAL_RCCEx_PeriphCLKConfig>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d001      	beq.n	8010d60 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010d5c:	f7f2 fc63 	bl	8003626 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d60:	4b22      	ldr	r3, [pc, #136]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d64:	4a21      	ldr	r2, [pc, #132]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010d66:	f043 0301 	orr.w	r3, r3, #1
 8010d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8010d6c:	4b1f      	ldr	r3, [pc, #124]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d70:	f003 0301 	and.w	r3, r3, #1
 8010d74:	613b      	str	r3, [r7, #16]
 8010d76:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010d78:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d80:	2302      	movs	r3, #2
 8010d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d86:	2300      	movs	r3, #0
 8010d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d8c:	2303      	movs	r3, #3
 8010d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010d92:	230a      	movs	r3, #10
 8010d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4814      	ldr	r0, [pc, #80]	; (8010df0 <HAL_PCD_MspInit+0xe0>)
 8010da0:	f7f4 fd82 	bl	80058a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010da4:	4b11      	ldr	r3, [pc, #68]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010da8:	4a10      	ldr	r2, [pc, #64]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dae:	6353      	str	r3, [r2, #52]	; 0x34
 8010db0:	4b0e      	ldr	r3, [pc, #56]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010db8:	60fb      	str	r3, [r7, #12]
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	4b0b      	ldr	r3, [pc, #44]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dc0:	4a0a      	ldr	r2, [pc, #40]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8010dc8:	4b08      	ldr	r3, [pc, #32]	; (8010dec <HAL_PCD_MspInit+0xdc>)
 8010dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010dd0:	60bb      	str	r3, [r7, #8]
 8010dd2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	2105      	movs	r1, #5
 8010dd8:	2043      	movs	r0, #67	; 0x43
 8010dda:	f7f4 f925 	bl	8005028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010dde:	2043      	movs	r0, #67	; 0x43
 8010de0:	f7f4 f93e 	bl	8005060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010de4:	bf00      	nop
 8010de6:	37b8      	adds	r7, #184	; 0xb8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	40023800 	.word	0x40023800
 8010df0:	40020000 	.word	0x40020000

08010df4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010e08:	4619      	mov	r1, r3
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	f7fb fd29 	bl	800c862 <USBD_LL_SetupStage>
}
 8010e10:	bf00      	nop
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	460b      	mov	r3, r1
 8010e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010e2a:	78fa      	ldrb	r2, [r7, #3]
 8010e2c:	6879      	ldr	r1, [r7, #4]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	00db      	lsls	r3, r3, #3
 8010e32:	4413      	add	r3, r2
 8010e34:	009b      	lsls	r3, r3, #2
 8010e36:	440b      	add	r3, r1
 8010e38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	78fb      	ldrb	r3, [r7, #3]
 8010e40:	4619      	mov	r1, r3
 8010e42:	f7fb fd63 	bl	800c90c <USBD_LL_DataOutStage>
}
 8010e46:	bf00      	nop
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b082      	sub	sp, #8
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
 8010e56:	460b      	mov	r3, r1
 8010e58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010e60:	78fa      	ldrb	r2, [r7, #3]
 8010e62:	6879      	ldr	r1, [r7, #4]
 8010e64:	4613      	mov	r3, r2
 8010e66:	00db      	lsls	r3, r3, #3
 8010e68:	4413      	add	r3, r2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	440b      	add	r3, r1
 8010e6e:	334c      	adds	r3, #76	; 0x4c
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	78fb      	ldrb	r3, [r7, #3]
 8010e74:	4619      	mov	r1, r3
 8010e76:	f7fb fdfc 	bl	800ca72 <USBD_LL_DataInStage>
}
 8010e7a:	bf00      	nop
 8010e7c:	3708      	adds	r7, #8
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e82:	b580      	push	{r7, lr}
 8010e84:	b082      	sub	sp, #8
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7fb ff30 	bl	800ccf6 <USBD_LL_SOF>
}
 8010e96:	bf00      	nop
 8010e98:	3708      	adds	r7, #8
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b084      	sub	sp, #16
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d102      	bne.n	8010eb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	73fb      	strb	r3, [r7, #15]
 8010eb6:	e008      	b.n	8010eca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	2b02      	cmp	r3, #2
 8010ebe:	d102      	bne.n	8010ec6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	73fb      	strb	r3, [r7, #15]
 8010ec4:	e001      	b.n	8010eca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010ec6:	f7f2 fbae 	bl	8003626 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010ed0:	7bfa      	ldrb	r2, [r7, #15]
 8010ed2:	4611      	mov	r1, r2
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7fb fed0 	bl	800cc7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fb fe78 	bl	800cbd6 <USBD_LL_Reset>
}
 8010ee6:	bf00      	nop
 8010ee8:	3710      	adds	r7, #16
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
	...

08010ef0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fb fecb 	bl	800cc9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	6812      	ldr	r2, [r2, #0]
 8010f12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010f16:	f043 0301 	orr.w	r3, r3, #1
 8010f1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6a1b      	ldr	r3, [r3, #32]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d005      	beq.n	8010f30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010f24:	4b04      	ldr	r3, [pc, #16]	; (8010f38 <HAL_PCD_SuspendCallback+0x48>)
 8010f26:	691b      	ldr	r3, [r3, #16]
 8010f28:	4a03      	ldr	r2, [pc, #12]	; (8010f38 <HAL_PCD_SuspendCallback+0x48>)
 8010f2a:	f043 0306 	orr.w	r3, r3, #6
 8010f2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	e000ed00 	.word	0xe000ed00

08010f3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fb febb 	bl	800ccc6 <USBD_LL_Resume>
}
 8010f50:	bf00      	nop
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	460b      	mov	r3, r1
 8010f62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f6a:	78fa      	ldrb	r2, [r7, #3]
 8010f6c:	4611      	mov	r1, r2
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7fb ff13 	bl	800cd9a <USBD_LL_IsoOUTIncomplete>
}
 8010f74:	bf00      	nop
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	460b      	mov	r3, r1
 8010f86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010f8e:	78fa      	ldrb	r2, [r7, #3]
 8010f90:	4611      	mov	r1, r2
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fb fecf 	bl	800cd36 <USBD_LL_IsoINIncomplete>
}
 8010f98:	bf00      	nop
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fb ff25 	bl	800cdfe <USBD_LL_DevConnected>
}
 8010fb4:	bf00      	nop
 8010fb6:	3708      	adds	r7, #8
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fb ff22 	bl	800ce14 <USBD_LL_DevDisconnected>
}
 8010fd0:	bf00      	nop
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d13c      	bne.n	8011062 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010fe8:	4a20      	ldr	r2, [pc, #128]	; (801106c <USBD_LL_Init+0x94>)
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	4a1e      	ldr	r2, [pc, #120]	; (801106c <USBD_LL_Init+0x94>)
 8010ff4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010ff8:	4b1c      	ldr	r3, [pc, #112]	; (801106c <USBD_LL_Init+0x94>)
 8010ffa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010ffe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011000:	4b1a      	ldr	r3, [pc, #104]	; (801106c <USBD_LL_Init+0x94>)
 8011002:	2206      	movs	r2, #6
 8011004:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011006:	4b19      	ldr	r3, [pc, #100]	; (801106c <USBD_LL_Init+0x94>)
 8011008:	2202      	movs	r2, #2
 801100a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801100c:	4b17      	ldr	r3, [pc, #92]	; (801106c <USBD_LL_Init+0x94>)
 801100e:	2200      	movs	r2, #0
 8011010:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011012:	4b16      	ldr	r3, [pc, #88]	; (801106c <USBD_LL_Init+0x94>)
 8011014:	2202      	movs	r2, #2
 8011016:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011018:	4b14      	ldr	r3, [pc, #80]	; (801106c <USBD_LL_Init+0x94>)
 801101a:	2200      	movs	r2, #0
 801101c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801101e:	4b13      	ldr	r3, [pc, #76]	; (801106c <USBD_LL_Init+0x94>)
 8011020:	2200      	movs	r2, #0
 8011022:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011024:	4b11      	ldr	r3, [pc, #68]	; (801106c <USBD_LL_Init+0x94>)
 8011026:	2200      	movs	r2, #0
 8011028:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801102a:	4b10      	ldr	r3, [pc, #64]	; (801106c <USBD_LL_Init+0x94>)
 801102c:	2200      	movs	r2, #0
 801102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011030:	4b0e      	ldr	r3, [pc, #56]	; (801106c <USBD_LL_Init+0x94>)
 8011032:	2200      	movs	r2, #0
 8011034:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011036:	480d      	ldr	r0, [pc, #52]	; (801106c <USBD_LL_Init+0x94>)
 8011038:	f7f4 fe15 	bl	8005c66 <HAL_PCD_Init>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d001      	beq.n	8011046 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011042:	f7f2 faf0 	bl	8003626 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011046:	2180      	movs	r1, #128	; 0x80
 8011048:	4808      	ldr	r0, [pc, #32]	; (801106c <USBD_LL_Init+0x94>)
 801104a:	f7f6 f890 	bl	800716e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801104e:	2240      	movs	r2, #64	; 0x40
 8011050:	2100      	movs	r1, #0
 8011052:	4806      	ldr	r0, [pc, #24]	; (801106c <USBD_LL_Init+0x94>)
 8011054:	f7f6 f844 	bl	80070e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011058:	2280      	movs	r2, #128	; 0x80
 801105a:	2101      	movs	r1, #1
 801105c:	4803      	ldr	r0, [pc, #12]	; (801106c <USBD_LL_Init+0x94>)
 801105e:	f7f6 f83f 	bl	80070e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011062:	2300      	movs	r3, #0
}
 8011064:	4618      	mov	r0, r3
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}
 801106c:	20011e38 	.word	0x20011e38

08011070 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011078:	2300      	movs	r3, #0
 801107a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011086:	4618      	mov	r0, r3
 8011088:	f7f4 ff11 	bl	8005eae <HAL_PCD_Start>
 801108c:	4603      	mov	r3, r0
 801108e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011090:	7bfb      	ldrb	r3, [r7, #15]
 8011092:	4618      	mov	r0, r3
 8011094:	f000 f97e 	bl	8011394 <USBD_Get_USB_Status>
 8011098:	4603      	mov	r3, r0
 801109a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801109c:	7bbb      	ldrb	r3, [r7, #14]
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b084      	sub	sp, #16
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	6078      	str	r0, [r7, #4]
 80110ae:	4608      	mov	r0, r1
 80110b0:	4611      	mov	r1, r2
 80110b2:	461a      	mov	r2, r3
 80110b4:	4603      	mov	r3, r0
 80110b6:	70fb      	strb	r3, [r7, #3]
 80110b8:	460b      	mov	r3, r1
 80110ba:	70bb      	strb	r3, [r7, #2]
 80110bc:	4613      	mov	r3, r2
 80110be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110c0:	2300      	movs	r3, #0
 80110c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80110ce:	78bb      	ldrb	r3, [r7, #2]
 80110d0:	883a      	ldrh	r2, [r7, #0]
 80110d2:	78f9      	ldrb	r1, [r7, #3]
 80110d4:	f7f5 fbfe 	bl	80068d4 <HAL_PCD_EP_Open>
 80110d8:	4603      	mov	r3, r0
 80110da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110dc:	7bfb      	ldrb	r3, [r7, #15]
 80110de:	4618      	mov	r0, r3
 80110e0:	f000 f958 	bl	8011394 <USBD_Get_USB_Status>
 80110e4:	4603      	mov	r3, r0
 80110e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3710      	adds	r7, #16
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}

080110f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b084      	sub	sp, #16
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
 80110fa:	460b      	mov	r3, r1
 80110fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110fe:	2300      	movs	r3, #0
 8011100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011102:	2300      	movs	r3, #0
 8011104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801110c:	78fa      	ldrb	r2, [r7, #3]
 801110e:	4611      	mov	r1, r2
 8011110:	4618      	mov	r0, r3
 8011112:	f7f5 fc47 	bl	80069a4 <HAL_PCD_EP_Close>
 8011116:	4603      	mov	r3, r0
 8011118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801111a:	7bfb      	ldrb	r3, [r7, #15]
 801111c:	4618      	mov	r0, r3
 801111e:	f000 f939 	bl	8011394 <USBD_Get_USB_Status>
 8011122:	4603      	mov	r3, r0
 8011124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011126:	7bbb      	ldrb	r3, [r7, #14]
}
 8011128:	4618      	mov	r0, r3
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	460b      	mov	r3, r1
 801113a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801113c:	2300      	movs	r3, #0
 801113e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011140:	2300      	movs	r3, #0
 8011142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801114a:	78fa      	ldrb	r2, [r7, #3]
 801114c:	4611      	mov	r1, r2
 801114e:	4618      	mov	r0, r3
 8011150:	f7f5 fd1f 	bl	8006b92 <HAL_PCD_EP_SetStall>
 8011154:	4603      	mov	r3, r0
 8011156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011158:	7bfb      	ldrb	r3, [r7, #15]
 801115a:	4618      	mov	r0, r3
 801115c:	f000 f91a 	bl	8011394 <USBD_Get_USB_Status>
 8011160:	4603      	mov	r3, r0
 8011162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011164:	7bbb      	ldrb	r3, [r7, #14]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3710      	adds	r7, #16
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}

0801116e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b084      	sub	sp, #16
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
 8011176:	460b      	mov	r3, r1
 8011178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801117a:	2300      	movs	r3, #0
 801117c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801117e:	2300      	movs	r3, #0
 8011180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011188:	78fa      	ldrb	r2, [r7, #3]
 801118a:	4611      	mov	r1, r2
 801118c:	4618      	mov	r0, r3
 801118e:	f7f5 fd64 	bl	8006c5a <HAL_PCD_EP_ClrStall>
 8011192:	4603      	mov	r3, r0
 8011194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011196:	7bfb      	ldrb	r3, [r7, #15]
 8011198:	4618      	mov	r0, r3
 801119a:	f000 f8fb 	bl	8011394 <USBD_Get_USB_Status>
 801119e:	4603      	mov	r3, r0
 80111a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	460b      	mov	r3, r1
 80111b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80111be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80111c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	da0b      	bge.n	80111e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80111c8:	78fb      	ldrb	r3, [r7, #3]
 80111ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111ce:	68f9      	ldr	r1, [r7, #12]
 80111d0:	4613      	mov	r3, r2
 80111d2:	00db      	lsls	r3, r3, #3
 80111d4:	4413      	add	r3, r2
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	440b      	add	r3, r1
 80111da:	333e      	adds	r3, #62	; 0x3e
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	e00b      	b.n	80111f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80111e0:	78fb      	ldrb	r3, [r7, #3]
 80111e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111e6:	68f9      	ldr	r1, [r7, #12]
 80111e8:	4613      	mov	r3, r2
 80111ea:	00db      	lsls	r3, r3, #3
 80111ec:	4413      	add	r3, r2
 80111ee:	009b      	lsls	r3, r3, #2
 80111f0:	440b      	add	r3, r1
 80111f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80111f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3714      	adds	r7, #20
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	460b      	mov	r3, r1
 801120e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011210:	2300      	movs	r3, #0
 8011212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011214:	2300      	movs	r3, #0
 8011216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801121e:	78fa      	ldrb	r2, [r7, #3]
 8011220:	4611      	mov	r1, r2
 8011222:	4618      	mov	r0, r3
 8011224:	f7f5 fb31 	bl	800688a <HAL_PCD_SetAddress>
 8011228:	4603      	mov	r3, r0
 801122a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801122c:	7bfb      	ldrb	r3, [r7, #15]
 801122e:	4618      	mov	r0, r3
 8011230:	f000 f8b0 	bl	8011394 <USBD_Get_USB_Status>
 8011234:	4603      	mov	r3, r0
 8011236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011238:	7bbb      	ldrb	r3, [r7, #14]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b086      	sub	sp, #24
 8011246:	af00      	add	r7, sp, #0
 8011248:	60f8      	str	r0, [r7, #12]
 801124a:	607a      	str	r2, [r7, #4]
 801124c:	603b      	str	r3, [r7, #0]
 801124e:	460b      	mov	r3, r1
 8011250:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011252:	2300      	movs	r3, #0
 8011254:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011256:	2300      	movs	r3, #0
 8011258:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011260:	7af9      	ldrb	r1, [r7, #11]
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	f7f5 fc4a 	bl	8006afe <HAL_PCD_EP_Transmit>
 801126a:	4603      	mov	r3, r0
 801126c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801126e:	7dfb      	ldrb	r3, [r7, #23]
 8011270:	4618      	mov	r0, r3
 8011272:	f000 f88f 	bl	8011394 <USBD_Get_USB_Status>
 8011276:	4603      	mov	r3, r0
 8011278:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801127a:	7dbb      	ldrb	r3, [r7, #22]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3718      	adds	r7, #24
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b086      	sub	sp, #24
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	607a      	str	r2, [r7, #4]
 801128e:	603b      	str	r3, [r7, #0]
 8011290:	460b      	mov	r3, r1
 8011292:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011294:	2300      	movs	r3, #0
 8011296:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011298:	2300      	movs	r3, #0
 801129a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80112a2:	7af9      	ldrb	r1, [r7, #11]
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	f7f5 fbc6 	bl	8006a38 <HAL_PCD_EP_Receive>
 80112ac:	4603      	mov	r3, r0
 80112ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112b0:	7dfb      	ldrb	r3, [r7, #23]
 80112b2:	4618      	mov	r0, r3
 80112b4:	f000 f86e 	bl	8011394 <USBD_Get_USB_Status>
 80112b8:	4603      	mov	r3, r0
 80112ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80112bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3718      	adds	r7, #24
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}

080112c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b082      	sub	sp, #8
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
 80112ce:	460b      	mov	r3, r1
 80112d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112d8:	78fa      	ldrb	r2, [r7, #3]
 80112da:	4611      	mov	r1, r2
 80112dc:	4618      	mov	r0, r3
 80112de:	f7f5 fbf6 	bl	8006ace <HAL_PCD_EP_GetRxCount>
 80112e2:	4603      	mov	r3, r0
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3708      	adds	r7, #8
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	460b      	mov	r3, r1
 80112f6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80112f8:	78fb      	ldrb	r3, [r7, #3]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d002      	beq.n	8011304 <HAL_PCDEx_LPM_Callback+0x18>
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d01f      	beq.n	8011342 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011302:	e03b      	b.n	801137c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6a1b      	ldr	r3, [r3, #32]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d007      	beq.n	801131c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801130c:	f000 f83c 	bl	8011388 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011310:	4b1c      	ldr	r3, [pc, #112]	; (8011384 <HAL_PCDEx_LPM_Callback+0x98>)
 8011312:	691b      	ldr	r3, [r3, #16]
 8011314:	4a1b      	ldr	r2, [pc, #108]	; (8011384 <HAL_PCDEx_LPM_Callback+0x98>)
 8011316:	f023 0306 	bic.w	r3, r3, #6
 801131a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	6812      	ldr	r2, [r2, #0]
 801132a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801132e:	f023 0301 	bic.w	r3, r3, #1
 8011332:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801133a:	4618      	mov	r0, r3
 801133c:	f7fb fcc3 	bl	800ccc6 <USBD_LL_Resume>
    break;
 8011340:	e01c      	b.n	801137c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	6812      	ldr	r2, [r2, #0]
 8011350:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011354:	f043 0301 	orr.w	r3, r3, #1
 8011358:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011360:	4618      	mov	r0, r3
 8011362:	f7fb fc9a 	bl	800cc9a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6a1b      	ldr	r3, [r3, #32]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d005      	beq.n	801137a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801136e:	4b05      	ldr	r3, [pc, #20]	; (8011384 <HAL_PCDEx_LPM_Callback+0x98>)
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	4a04      	ldr	r2, [pc, #16]	; (8011384 <HAL_PCDEx_LPM_Callback+0x98>)
 8011374:	f043 0306 	orr.w	r3, r3, #6
 8011378:	6113      	str	r3, [r2, #16]
    break;
 801137a:	bf00      	nop
}
 801137c:	bf00      	nop
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	e000ed00 	.word	0xe000ed00

08011388 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801138c:	f7f2 f8cc 	bl	8003528 <SystemClock_Config>
}
 8011390:	bf00      	nop
 8011392:	bd80      	pop	{r7, pc}

08011394 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
 801139a:	4603      	mov	r3, r0
 801139c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801139e:	2300      	movs	r3, #0
 80113a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80113a2:	79fb      	ldrb	r3, [r7, #7]
 80113a4:	2b03      	cmp	r3, #3
 80113a6:	d817      	bhi.n	80113d8 <USBD_Get_USB_Status+0x44>
 80113a8:	a201      	add	r2, pc, #4	; (adr r2, 80113b0 <USBD_Get_USB_Status+0x1c>)
 80113aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ae:	bf00      	nop
 80113b0:	080113c1 	.word	0x080113c1
 80113b4:	080113c7 	.word	0x080113c7
 80113b8:	080113cd 	.word	0x080113cd
 80113bc:	080113d3 	.word	0x080113d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80113c0:	2300      	movs	r3, #0
 80113c2:	73fb      	strb	r3, [r7, #15]
    break;
 80113c4:	e00b      	b.n	80113de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80113c6:	2303      	movs	r3, #3
 80113c8:	73fb      	strb	r3, [r7, #15]
    break;
 80113ca:	e008      	b.n	80113de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80113cc:	2301      	movs	r3, #1
 80113ce:	73fb      	strb	r3, [r7, #15]
    break;
 80113d0:	e005      	b.n	80113de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80113d2:	2303      	movs	r3, #3
 80113d4:	73fb      	strb	r3, [r7, #15]
    break;
 80113d6:	e002      	b.n	80113de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80113d8:	2303      	movs	r3, #3
 80113da:	73fb      	strb	r3, [r7, #15]
    break;
 80113dc:	bf00      	nop
  }
  return usb_status;
 80113de:	7bfb      	ldrb	r3, [r7, #15]
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3714      	adds	r7, #20
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr

080113ec <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80113ec:	4b04      	ldr	r3, [pc, #16]	; (8011400 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	b10a      	cbz	r2, 80113f6 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 80113f2:	4803      	ldr	r0, [pc, #12]	; (8011400 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80113f4:	4770      	bx	lr
 80113f6:	4a03      	ldr	r2, [pc, #12]	; (8011404 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 80113f8:	4801      	ldr	r0, [pc, #4]	; (8011400 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80113fa:	6812      	ldr	r2, [r2, #0]
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	4770      	bx	lr
 8011400:	2000011c 	.word	0x2000011c
 8011404:	200008f4 	.word	0x200008f4

08011408 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011408:	4b04      	ldr	r3, [pc, #16]	; (801141c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801140a:	4805      	ldr	r0, [pc, #20]	; (8011420 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4905      	ldr	r1, [pc, #20]	; (8011424 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 8011410:	4a05      	ldr	r2, [pc, #20]	; (8011428 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 8011412:	6003      	str	r3, [r0, #0]
 8011414:	600b      	str	r3, [r1, #0]
 8011416:	6013      	str	r3, [r2, #0]
 8011418:	4770      	bx	lr
 801141a:	bf00      	nop
 801141c:	200008f4 	.word	0x200008f4
 8011420:	20000138 	.word	0x20000138
 8011424:	20000144 	.word	0x20000144
 8011428:	2000011c 	.word	0x2000011c

0801142c <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 801142c:	f006 b894 	b.w	8017558 <custom_test_msgs__srv__AddThreeInts_Request__init>

08011430 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 8011430:	f006 b896 	b.w	8017560 <custom_test_msgs__srv__AddThreeInts_Request__fini>

08011434 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 8011434:	f006 b896 	b.w	8017564 <custom_test_msgs__srv__AddThreeInts_Response__init>

08011438 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 8011438:	f006 b898 	b.w	801756c <custom_test_msgs__srv__AddThreeInts_Response__fini>

0801143c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 801143c:	4b04      	ldr	r3, [pc, #16]	; (8011450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	b10a      	cbz	r2, 8011446 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 8011442:	4803      	ldr	r0, [pc, #12]	; (8011450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8011444:	4770      	bx	lr
 8011446:	4a03      	ldr	r2, [pc, #12]	; (8011454 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8011448:	4801      	ldr	r0, [pc, #4]	; (8011450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801144a:	6812      	ldr	r2, [r2, #0]
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	4770      	bx	lr
 8011450:	20000204 	.word	0x20000204
 8011454:	200008f8 	.word	0x200008f8

08011458 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8011458:	4b04      	ldr	r3, [pc, #16]	; (801146c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	b10a      	cbz	r2, 8011462 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 801145e:	4803      	ldr	r0, [pc, #12]	; (801146c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8011460:	4770      	bx	lr
 8011462:	4a03      	ldr	r2, [pc, #12]	; (8011470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 8011464:	4801      	ldr	r0, [pc, #4]	; (801146c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8011466:	6812      	ldr	r2, [r2, #0]
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	4770      	bx	lr
 801146c:	2000024c 	.word	0x2000024c
 8011470:	200008f8 	.word	0x200008f8

08011474 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8011474:	4b13      	ldr	r3, [pc, #76]	; (80114c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	b132      	cbz	r2, 8011488 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	689a      	ldr	r2, [r3, #8]
 801147e:	b152      	cbz	r2, 8011496 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8011480:	68da      	ldr	r2, [r3, #12]
 8011482:	b182      	cbz	r2, 80114a6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8011484:	480f      	ldr	r0, [pc, #60]	; (80114c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011486:	4770      	bx	lr
 8011488:	4a0f      	ldr	r2, [pc, #60]	; (80114c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801148a:	6812      	ldr	r2, [r2, #0]
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	689a      	ldr	r2, [r3, #8]
 8011492:	2a00      	cmp	r2, #0
 8011494:	d1f4      	bne.n	8011480 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8011496:	4a0d      	ldr	r2, [pc, #52]	; (80114cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8011498:	6811      	ldr	r1, [r2, #0]
 801149a:	b179      	cbz	r1, 80114bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 801149c:	6852      	ldr	r2, [r2, #4]
 801149e:	609a      	str	r2, [r3, #8]
 80114a0:	68da      	ldr	r2, [r3, #12]
 80114a2:	2a00      	cmp	r2, #0
 80114a4:	d1ee      	bne.n	8011484 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 80114a6:	4a0a      	ldr	r2, [pc, #40]	; (80114d0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 80114a8:	6811      	ldr	r1, [r2, #0]
 80114aa:	b119      	cbz	r1, 80114b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 80114ac:	6852      	ldr	r2, [r2, #4]
 80114ae:	4805      	ldr	r0, [pc, #20]	; (80114c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80114b0:	60da      	str	r2, [r3, #12]
 80114b2:	4770      	bx	lr
 80114b4:	4904      	ldr	r1, [pc, #16]	; (80114c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80114b6:	6809      	ldr	r1, [r1, #0]
 80114b8:	6011      	str	r1, [r2, #0]
 80114ba:	e7f7      	b.n	80114ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 80114bc:	4902      	ldr	r1, [pc, #8]	; (80114c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 80114be:	6809      	ldr	r1, [r1, #0]
 80114c0:	6011      	str	r1, [r2, #0]
 80114c2:	e7eb      	b.n	801149c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 80114c4:	20000268 	.word	0x20000268
 80114c8:	200008f8 	.word	0x200008f8
 80114cc:	20000204 	.word	0x20000204
 80114d0:	2000024c 	.word	0x2000024c

080114d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80114d4:	4800      	ldr	r0, [pc, #0]	; (80114d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 80114d6:	4770      	bx	lr
 80114d8:	20000290 	.word	0x20000290

080114dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 80114dc:	4800      	ldr	r0, [pc, #0]	; (80114e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 80114de:	4770      	bx	lr
 80114e0:	2000029c 	.word	0x2000029c

080114e4 <_AddThreeInts_Response__max_serialized_size>:
 80114e4:	2108      	movs	r1, #8
 80114e6:	2000      	movs	r0, #0
 80114e8:	b508      	push	{r3, lr}
 80114ea:	f001 fee9 	bl	80132c0 <ucdr_alignment>
 80114ee:	3008      	adds	r0, #8
 80114f0:	bd08      	pop	{r3, pc}
 80114f2:	bf00      	nop

080114f4 <_AddThreeInts_Response__cdr_deserialize>:
 80114f4:	b109      	cbz	r1, 80114fa <_AddThreeInts_Response__cdr_deserialize+0x6>
 80114f6:	f001 bc2f 	b.w	8012d58 <ucdr_deserialize_int64_t>
 80114fa:	4608      	mov	r0, r1
 80114fc:	4770      	bx	lr
 80114fe:	bf00      	nop

08011500 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8011500:	b1b8      	cbz	r0, 8011532 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8011502:	b538      	push	{r3, r4, r5, lr}
 8011504:	460d      	mov	r5, r1
 8011506:	2108      	movs	r1, #8
 8011508:	4628      	mov	r0, r5
 801150a:	f001 fed9 	bl	80132c0 <ucdr_alignment>
 801150e:	f105 0308 	add.w	r3, r5, #8
 8011512:	2108      	movs	r1, #8
 8011514:	f1c5 0508 	rsb	r5, r5, #8
 8011518:	181c      	adds	r4, r3, r0
 801151a:	4620      	mov	r0, r4
 801151c:	f001 fed0 	bl	80132c0 <ucdr_alignment>
 8011520:	2108      	movs	r1, #8
 8011522:	4408      	add	r0, r1
 8011524:	4404      	add	r4, r0
 8011526:	4620      	mov	r0, r4
 8011528:	f001 feca 	bl	80132c0 <ucdr_alignment>
 801152c:	4428      	add	r0, r5
 801152e:	4420      	add	r0, r4
 8011530:	bd38      	pop	{r3, r4, r5, pc}
 8011532:	4770      	bx	lr

08011534 <_AddThreeInts_Response__get_serialized_size>:
 8011534:	b130      	cbz	r0, 8011544 <_AddThreeInts_Response__get_serialized_size+0x10>
 8011536:	2108      	movs	r1, #8
 8011538:	2000      	movs	r0, #0
 801153a:	b508      	push	{r3, lr}
 801153c:	f001 fec0 	bl	80132c0 <ucdr_alignment>
 8011540:	3008      	adds	r0, #8
 8011542:	bd08      	pop	{r3, pc}
 8011544:	4770      	bx	lr
 8011546:	bf00      	nop

08011548 <_AddThreeInts_Request__cdr_deserialize>:
 8011548:	b538      	push	{r3, r4, r5, lr}
 801154a:	460c      	mov	r4, r1
 801154c:	b171      	cbz	r1, 801156c <_AddThreeInts_Request__cdr_deserialize+0x24>
 801154e:	4605      	mov	r5, r0
 8011550:	f001 fc02 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011554:	f104 0108 	add.w	r1, r4, #8
 8011558:	4628      	mov	r0, r5
 801155a:	f001 fbfd 	bl	8012d58 <ucdr_deserialize_int64_t>
 801155e:	f104 0110 	add.w	r1, r4, #16
 8011562:	4628      	mov	r0, r5
 8011564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011568:	f001 bbf6 	b.w	8012d58 <ucdr_deserialize_int64_t>
 801156c:	4608      	mov	r0, r1
 801156e:	bd38      	pop	{r3, r4, r5, pc}

08011570 <_AddThreeInts_Request__cdr_serialize>:
 8011570:	b198      	cbz	r0, 801159a <_AddThreeInts_Request__cdr_serialize+0x2a>
 8011572:	b570      	push	{r4, r5, r6, lr}
 8011574:	460d      	mov	r5, r1
 8011576:	4604      	mov	r4, r0
 8011578:	e9d0 2300 	ldrd	r2, r3, [r0]
 801157c:	4608      	mov	r0, r1
 801157e:	f001 fb1b 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011582:	4628      	mov	r0, r5
 8011584:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011588:	f001 fb16 	bl	8012bb8 <ucdr_serialize_int64_t>
 801158c:	4628      	mov	r0, r5
 801158e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011596:	f001 bb0f 	b.w	8012bb8 <ucdr_serialize_int64_t>
 801159a:	4770      	bx	lr

0801159c <_AddThreeInts_Response__cdr_serialize>:
 801159c:	b120      	cbz	r0, 80115a8 <_AddThreeInts_Response__cdr_serialize+0xc>
 801159e:	e9d0 2300 	ldrd	r2, r3, [r0]
 80115a2:	4608      	mov	r0, r1
 80115a4:	f001 bb08 	b.w	8012bb8 <ucdr_serialize_int64_t>
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop

080115ac <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 80115ac:	b138      	cbz	r0, 80115be <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 80115ae:	b508      	push	{r3, lr}
 80115b0:	460b      	mov	r3, r1
 80115b2:	2108      	movs	r1, #8
 80115b4:	4618      	mov	r0, r3
 80115b6:	f001 fe83 	bl	80132c0 <ucdr_alignment>
 80115ba:	3008      	adds	r0, #8
 80115bc:	bd08      	pop	{r3, pc}
 80115be:	4770      	bx	lr

080115c0 <_AddThreeInts_Request__get_serialized_size>:
 80115c0:	b190      	cbz	r0, 80115e8 <_AddThreeInts_Request__get_serialized_size+0x28>
 80115c2:	2108      	movs	r1, #8
 80115c4:	2000      	movs	r0, #0
 80115c6:	b510      	push	{r4, lr}
 80115c8:	f001 fe7a 	bl	80132c0 <ucdr_alignment>
 80115cc:	2108      	movs	r1, #8
 80115ce:	1844      	adds	r4, r0, r1
 80115d0:	4620      	mov	r0, r4
 80115d2:	f001 fe75 	bl	80132c0 <ucdr_alignment>
 80115d6:	2108      	movs	r1, #8
 80115d8:	4408      	add	r0, r1
 80115da:	4404      	add	r4, r0
 80115dc:	4620      	mov	r0, r4
 80115de:	f001 fe6f 	bl	80132c0 <ucdr_alignment>
 80115e2:	3008      	adds	r0, #8
 80115e4:	4420      	add	r0, r4
 80115e6:	bd10      	pop	{r4, pc}
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop

080115ec <_AddThreeInts_Request__max_serialized_size>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	2108      	movs	r1, #8
 80115f0:	2000      	movs	r0, #0
 80115f2:	f001 fe65 	bl	80132c0 <ucdr_alignment>
 80115f6:	2108      	movs	r1, #8
 80115f8:	1845      	adds	r5, r0, r1
 80115fa:	4628      	mov	r0, r5
 80115fc:	f001 fe60 	bl	80132c0 <ucdr_alignment>
 8011600:	2108      	movs	r1, #8
 8011602:	1844      	adds	r4, r0, r1
 8011604:	442c      	add	r4, r5
 8011606:	4620      	mov	r0, r4
 8011608:	f001 fe5a 	bl	80132c0 <ucdr_alignment>
 801160c:	3008      	adds	r0, #8
 801160e:	4420      	add	r0, r4
 8011610:	bd38      	pop	{r3, r4, r5, pc}
 8011612:	bf00      	nop

08011614 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8011614:	4800      	ldr	r0, [pc, #0]	; (8011618 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 8011616:	4770      	bx	lr
 8011618:	20000284 	.word	0x20000284

0801161c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 801161c:	4b04      	ldr	r3, [pc, #16]	; (8011630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	b10a      	cbz	r2, 8011626 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 8011622:	4803      	ldr	r0, [pc, #12]	; (8011630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011624:	4770      	bx	lr
 8011626:	4a03      	ldr	r2, [pc, #12]	; (8011634 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8011628:	4801      	ldr	r0, [pc, #4]	; (8011630 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801162a:	6812      	ldr	r2, [r2, #0]
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	4770      	bx	lr
 8011630:	200002e8 	.word	0x200002e8
 8011634:	200008f4 	.word	0x200008f4

08011638 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011638:	4a02      	ldr	r2, [pc, #8]	; (8011644 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 801163a:	4b03      	ldr	r3, [pc, #12]	; (8011648 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 801163c:	6812      	ldr	r2, [r2, #0]
 801163e:	601a      	str	r2, [r3, #0]
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	200008f4 	.word	0x200008f4
 8011648:	200002e8 	.word	0x200002e8

0801164c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 801164c:	4b04      	ldr	r3, [pc, #16]	; (8011660 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801164e:	681a      	ldr	r2, [r3, #0]
 8011650:	b10a      	cbz	r2, 8011656 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 8011652:	4803      	ldr	r0, [pc, #12]	; (8011660 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011654:	4770      	bx	lr
 8011656:	4a03      	ldr	r2, [pc, #12]	; (8011664 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011658:	4801      	ldr	r0, [pc, #4]	; (8011660 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801165a:	6812      	ldr	r2, [r2, #0]
 801165c:	601a      	str	r2, [r3, #0]
 801165e:	4770      	bx	lr
 8011660:	200002fc 	.word	0x200002fc
 8011664:	200008f4 	.word	0x200008f4

08011668 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011668:	4a02      	ldr	r2, [pc, #8]	; (8011674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 801166a:	4b03      	ldr	r3, [pc, #12]	; (8011678 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 801166c:	6812      	ldr	r2, [r2, #0]
 801166e:	601a      	str	r2, [r3, #0]
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop
 8011674:	200008f4 	.word	0x200008f4
 8011678:	200002fc 	.word	0x200002fc

0801167c <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 801167c:	f005 bf78 	b.w	8017570 <drive_msgs__msg__Omni__init>

08011680 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 8011680:	f005 bf88 	b.w	8017594 <drive_msgs__msg__Omni__fini>

08011684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011684:	4b04      	ldr	r3, [pc, #16]	; (8011698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	b10a      	cbz	r2, 801168e <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 801168a:	4803      	ldr	r0, [pc, #12]	; (8011698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801168c:	4770      	bx	lr
 801168e:	4a03      	ldr	r2, [pc, #12]	; (801169c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8011690:	4801      	ldr	r0, [pc, #4]	; (8011698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011692:	6812      	ldr	r2, [r2, #0]
 8011694:	601a      	str	r2, [r3, #0]
 8011696:	4770      	bx	lr
 8011698:	20000434 	.word	0x20000434
 801169c:	200008f8 	.word	0x200008f8

080116a0 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 80116a0:	f005 bf7c 	b.w	801759c <drive_msgs__msg__OmniEnc__init>

080116a4 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 80116a4:	f005 bf8c 	b.w	80175c0 <drive_msgs__msg__OmniEnc__fini>

080116a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80116a8:	4b04      	ldr	r3, [pc, #16]	; (80116bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	b10a      	cbz	r2, 80116b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 80116ae:	4803      	ldr	r0, [pc, #12]	; (80116bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80116b0:	4770      	bx	lr
 80116b2:	4a03      	ldr	r2, [pc, #12]	; (80116c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 80116b4:	4801      	ldr	r0, [pc, #4]	; (80116bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80116b6:	6812      	ldr	r2, [r2, #0]
 80116b8:	601a      	str	r2, [r3, #0]
 80116ba:	4770      	bx	lr
 80116bc:	20000620 	.word	0x20000620
 80116c0:	200008f8 	.word	0x200008f8

080116c4 <_Omni__cdr_serialize>:
 80116c4:	b330      	cbz	r0, 8011714 <_Omni__cdr_serialize+0x50>
 80116c6:	b570      	push	{r4, r5, r6, lr}
 80116c8:	6806      	ldr	r6, [r0, #0]
 80116ca:	4604      	mov	r4, r0
 80116cc:	460d      	mov	r5, r1
 80116ce:	b1f6      	cbz	r6, 801170e <_Omni__cdr_serialize+0x4a>
 80116d0:	4630      	mov	r0, r6
 80116d2:	f7ee fe15 	bl	8000300 <strlen>
 80116d6:	1c42      	adds	r2, r0, #1
 80116d8:	4631      	mov	r1, r6
 80116da:	6060      	str	r0, [r4, #4]
 80116dc:	4628      	mov	r0, r5
 80116de:	f001 fe5f 	bl	80133a0 <ucdr_serialize_sequence_char>
 80116e2:	4628      	mov	r0, r5
 80116e4:	ed94 0b04 	vldr	d0, [r4, #16]
 80116e8:	f001 fbfc 	bl	8012ee4 <ucdr_serialize_double>
 80116ec:	4628      	mov	r0, r5
 80116ee:	ed94 0b06 	vldr	d0, [r4, #24]
 80116f2:	f001 fbf7 	bl	8012ee4 <ucdr_serialize_double>
 80116f6:	4628      	mov	r0, r5
 80116f8:	ed94 0b08 	vldr	d0, [r4, #32]
 80116fc:	f001 fbf2 	bl	8012ee4 <ucdr_serialize_double>
 8011700:	4628      	mov	r0, r5
 8011702:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801170a:	f001 bbeb 	b.w	8012ee4 <ucdr_serialize_double>
 801170e:	4632      	mov	r2, r6
 8011710:	4630      	mov	r0, r6
 8011712:	e7e1      	b.n	80116d8 <_Omni__cdr_serialize+0x14>
 8011714:	4770      	bx	lr
 8011716:	bf00      	nop

08011718 <get_serialized_size_drive_msgs__msg__Omni>:
 8011718:	b570      	push	{r4, r5, r6, lr}
 801171a:	4604      	mov	r4, r0
 801171c:	b310      	cbz	r0, 8011764 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 801171e:	460d      	mov	r5, r1
 8011720:	2104      	movs	r1, #4
 8011722:	4628      	mov	r0, r5
 8011724:	f001 fdcc 	bl	80132c0 <ucdr_alignment>
 8011728:	6866      	ldr	r6, [r4, #4]
 801172a:	1d6b      	adds	r3, r5, #5
 801172c:	2108      	movs	r1, #8
 801172e:	f1c5 0508 	rsb	r5, r5, #8
 8011732:	4433      	add	r3, r6
 8011734:	181e      	adds	r6, r3, r0
 8011736:	4630      	mov	r0, r6
 8011738:	f001 fdc2 	bl	80132c0 <ucdr_alignment>
 801173c:	2108      	movs	r1, #8
 801173e:	1844      	adds	r4, r0, r1
 8011740:	4426      	add	r6, r4
 8011742:	4630      	mov	r0, r6
 8011744:	f001 fdbc 	bl	80132c0 <ucdr_alignment>
 8011748:	2108      	movs	r1, #8
 801174a:	1844      	adds	r4, r0, r1
 801174c:	4434      	add	r4, r6
 801174e:	4620      	mov	r0, r4
 8011750:	f001 fdb6 	bl	80132c0 <ucdr_alignment>
 8011754:	2108      	movs	r1, #8
 8011756:	4408      	add	r0, r1
 8011758:	4404      	add	r4, r0
 801175a:	4620      	mov	r0, r4
 801175c:	f001 fdb0 	bl	80132c0 <ucdr_alignment>
 8011760:	4428      	add	r0, r5
 8011762:	4420      	add	r0, r4
 8011764:	bd70      	pop	{r4, r5, r6, pc}
 8011766:	bf00      	nop

08011768 <_Omni__cdr_deserialize>:
 8011768:	b570      	push	{r4, r5, r6, lr}
 801176a:	460c      	mov	r4, r1
 801176c:	b082      	sub	sp, #8
 801176e:	b329      	cbz	r1, 80117bc <_Omni__cdr_deserialize+0x54>
 8011770:	688e      	ldr	r6, [r1, #8]
 8011772:	ab01      	add	r3, sp, #4
 8011774:	6809      	ldr	r1, [r1, #0]
 8011776:	4605      	mov	r5, r0
 8011778:	4632      	mov	r2, r6
 801177a:	f001 fe23 	bl	80133c4 <ucdr_deserialize_sequence_char>
 801177e:	9b01      	ldr	r3, [sp, #4]
 8011780:	b9c0      	cbnz	r0, 80117b4 <_Omni__cdr_deserialize+0x4c>
 8011782:	429e      	cmp	r6, r3
 8011784:	d31d      	bcc.n	80117c2 <_Omni__cdr_deserialize+0x5a>
 8011786:	f104 0110 	add.w	r1, r4, #16
 801178a:	4628      	mov	r0, r5
 801178c:	f001 fc7a 	bl	8013084 <ucdr_deserialize_double>
 8011790:	f104 0118 	add.w	r1, r4, #24
 8011794:	4628      	mov	r0, r5
 8011796:	f001 fc75 	bl	8013084 <ucdr_deserialize_double>
 801179a:	f104 0120 	add.w	r1, r4, #32
 801179e:	4628      	mov	r0, r5
 80117a0:	f001 fc70 	bl	8013084 <ucdr_deserialize_double>
 80117a4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80117a8:	4628      	mov	r0, r5
 80117aa:	b002      	add	sp, #8
 80117ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117b0:	f001 bc68 	b.w	8013084 <ucdr_deserialize_double>
 80117b4:	b103      	cbz	r3, 80117b8 <_Omni__cdr_deserialize+0x50>
 80117b6:	3b01      	subs	r3, #1
 80117b8:	6063      	str	r3, [r4, #4]
 80117ba:	e7e4      	b.n	8011786 <_Omni__cdr_deserialize+0x1e>
 80117bc:	4608      	mov	r0, r1
 80117be:	b002      	add	sp, #8
 80117c0:	bd70      	pop	{r4, r5, r6, pc}
 80117c2:	2101      	movs	r1, #1
 80117c4:	75a8      	strb	r0, [r5, #22]
 80117c6:	7569      	strb	r1, [r5, #21]
 80117c8:	6060      	str	r0, [r4, #4]
 80117ca:	4628      	mov	r0, r5
 80117cc:	f001 fd90 	bl	80132f0 <ucdr_align_to>
 80117d0:	9901      	ldr	r1, [sp, #4]
 80117d2:	4628      	mov	r0, r5
 80117d4:	f001 fdc4 	bl	8013360 <ucdr_advance_buffer>
 80117d8:	e7d5      	b.n	8011786 <_Omni__cdr_deserialize+0x1e>
 80117da:	bf00      	nop

080117dc <_Omni__max_serialized_size>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	2108      	movs	r1, #8
 80117e0:	2000      	movs	r0, #0
 80117e2:	f001 fd6d 	bl	80132c0 <ucdr_alignment>
 80117e6:	2108      	movs	r1, #8
 80117e8:	1845      	adds	r5, r0, r1
 80117ea:	4628      	mov	r0, r5
 80117ec:	f001 fd68 	bl	80132c0 <ucdr_alignment>
 80117f0:	2108      	movs	r1, #8
 80117f2:	1844      	adds	r4, r0, r1
 80117f4:	442c      	add	r4, r5
 80117f6:	4620      	mov	r0, r4
 80117f8:	f001 fd62 	bl	80132c0 <ucdr_alignment>
 80117fc:	2108      	movs	r1, #8
 80117fe:	4408      	add	r0, r1
 8011800:	4404      	add	r4, r0
 8011802:	4620      	mov	r0, r4
 8011804:	f001 fd5c 	bl	80132c0 <ucdr_alignment>
 8011808:	3008      	adds	r0, #8
 801180a:	4420      	add	r0, r4
 801180c:	bd38      	pop	{r3, r4, r5, pc}
 801180e:	bf00      	nop

08011810 <_Omni__get_serialized_size>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	4604      	mov	r4, r0
 8011814:	b1f0      	cbz	r0, 8011854 <_Omni__get_serialized_size+0x44>
 8011816:	2104      	movs	r1, #4
 8011818:	2000      	movs	r0, #0
 801181a:	f001 fd51 	bl	80132c0 <ucdr_alignment>
 801181e:	6863      	ldr	r3, [r4, #4]
 8011820:	2108      	movs	r1, #8
 8011822:	3305      	adds	r3, #5
 8011824:	181d      	adds	r5, r3, r0
 8011826:	4628      	mov	r0, r5
 8011828:	f001 fd4a 	bl	80132c0 <ucdr_alignment>
 801182c:	2108      	movs	r1, #8
 801182e:	1844      	adds	r4, r0, r1
 8011830:	4425      	add	r5, r4
 8011832:	4628      	mov	r0, r5
 8011834:	f001 fd44 	bl	80132c0 <ucdr_alignment>
 8011838:	2108      	movs	r1, #8
 801183a:	1844      	adds	r4, r0, r1
 801183c:	442c      	add	r4, r5
 801183e:	4620      	mov	r0, r4
 8011840:	f001 fd3e 	bl	80132c0 <ucdr_alignment>
 8011844:	2108      	movs	r1, #8
 8011846:	4408      	add	r0, r1
 8011848:	4404      	add	r4, r0
 801184a:	4620      	mov	r0, r4
 801184c:	f001 fd38 	bl	80132c0 <ucdr_alignment>
 8011850:	3008      	adds	r0, #8
 8011852:	4420      	add	r0, r4
 8011854:	bd38      	pop	{r3, r4, r5, pc}
 8011856:	bf00      	nop

08011858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011858:	4800      	ldr	r0, [pc, #0]	; (801185c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 801185a:	4770      	bx	lr
 801185c:	2000062c 	.word	0x2000062c

08011860 <_OmniEnc__cdr_serialize>:
 8011860:	b3a8      	cbz	r0, 80118ce <_OmniEnc__cdr_serialize+0x6e>
 8011862:	b570      	push	{r4, r5, r6, lr}
 8011864:	6806      	ldr	r6, [r0, #0]
 8011866:	4604      	mov	r4, r0
 8011868:	460d      	mov	r5, r1
 801186a:	b36e      	cbz	r6, 80118c8 <_OmniEnc__cdr_serialize+0x68>
 801186c:	4630      	mov	r0, r6
 801186e:	f7ee fd47 	bl	8000300 <strlen>
 8011872:	1c42      	adds	r2, r0, #1
 8011874:	4631      	mov	r1, r6
 8011876:	6060      	str	r0, [r4, #4]
 8011878:	4628      	mov	r0, r5
 801187a:	f001 fd91 	bl	80133a0 <ucdr_serialize_sequence_char>
 801187e:	4628      	mov	r0, r5
 8011880:	ed94 0b04 	vldr	d0, [r4, #16]
 8011884:	f001 fb2e 	bl	8012ee4 <ucdr_serialize_double>
 8011888:	4628      	mov	r0, r5
 801188a:	ed94 0b06 	vldr	d0, [r4, #24]
 801188e:	f001 fb29 	bl	8012ee4 <ucdr_serialize_double>
 8011892:	4628      	mov	r0, r5
 8011894:	ed94 0b08 	vldr	d0, [r4, #32]
 8011898:	f001 fb24 	bl	8012ee4 <ucdr_serialize_double>
 801189c:	4628      	mov	r0, r5
 801189e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 80118a2:	f001 fb1f 	bl	8012ee4 <ucdr_serialize_double>
 80118a6:	4628      	mov	r0, r5
 80118a8:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 80118ac:	f001 fb1a 	bl	8012ee4 <ucdr_serialize_double>
 80118b0:	4628      	mov	r0, r5
 80118b2:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 80118b6:	f001 fb15 	bl	8012ee4 <ucdr_serialize_double>
 80118ba:	4628      	mov	r0, r5
 80118bc:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 80118c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118c4:	f001 bb0e 	b.w	8012ee4 <ucdr_serialize_double>
 80118c8:	4632      	mov	r2, r6
 80118ca:	4630      	mov	r0, r6
 80118cc:	e7d2      	b.n	8011874 <_OmniEnc__cdr_serialize+0x14>
 80118ce:	4770      	bx	lr

080118d0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 80118d0:	b570      	push	{r4, r5, r6, lr}
 80118d2:	460c      	mov	r4, r1
 80118d4:	4605      	mov	r5, r0
 80118d6:	2104      	movs	r1, #4
 80118d8:	4620      	mov	r0, r4
 80118da:	f001 fcf1 	bl	80132c0 <ucdr_alignment>
 80118de:	686b      	ldr	r3, [r5, #4]
 80118e0:	2108      	movs	r1, #8
 80118e2:	4423      	add	r3, r4
 80118e4:	f1c4 0408 	rsb	r4, r4, #8
 80118e8:	3305      	adds	r3, #5
 80118ea:	18c6      	adds	r6, r0, r3
 80118ec:	4630      	mov	r0, r6
 80118ee:	f001 fce7 	bl	80132c0 <ucdr_alignment>
 80118f2:	2108      	movs	r1, #8
 80118f4:	1845      	adds	r5, r0, r1
 80118f6:	442e      	add	r6, r5
 80118f8:	4630      	mov	r0, r6
 80118fa:	f001 fce1 	bl	80132c0 <ucdr_alignment>
 80118fe:	2108      	movs	r1, #8
 8011900:	1845      	adds	r5, r0, r1
 8011902:	4435      	add	r5, r6
 8011904:	4628      	mov	r0, r5
 8011906:	f001 fcdb 	bl	80132c0 <ucdr_alignment>
 801190a:	2108      	movs	r1, #8
 801190c:	4408      	add	r0, r1
 801190e:	4405      	add	r5, r0
 8011910:	4628      	mov	r0, r5
 8011912:	f001 fcd5 	bl	80132c0 <ucdr_alignment>
 8011916:	2108      	movs	r1, #8
 8011918:	4408      	add	r0, r1
 801191a:	1946      	adds	r6, r0, r5
 801191c:	4630      	mov	r0, r6
 801191e:	f001 fccf 	bl	80132c0 <ucdr_alignment>
 8011922:	2108      	movs	r1, #8
 8011924:	1845      	adds	r5, r0, r1
 8011926:	4435      	add	r5, r6
 8011928:	4628      	mov	r0, r5
 801192a:	f001 fcc9 	bl	80132c0 <ucdr_alignment>
 801192e:	2108      	movs	r1, #8
 8011930:	4408      	add	r0, r1
 8011932:	4405      	add	r5, r0
 8011934:	4628      	mov	r0, r5
 8011936:	f001 fcc3 	bl	80132c0 <ucdr_alignment>
 801193a:	4420      	add	r0, r4
 801193c:	4428      	add	r0, r5
 801193e:	bd70      	pop	{r4, r5, r6, pc}

08011940 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 8011940:	b108      	cbz	r0, 8011946 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 8011942:	f7ff bfc5 	b.w	80118d0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011946:	4770      	bx	lr

08011948 <_OmniEnc__get_serialized_size>:
 8011948:	b110      	cbz	r0, 8011950 <_OmniEnc__get_serialized_size+0x8>
 801194a:	2100      	movs	r1, #0
 801194c:	f7ff bfc0 	b.w	80118d0 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop

08011954 <_OmniEnc__cdr_deserialize>:
 8011954:	b570      	push	{r4, r5, r6, lr}
 8011956:	460c      	mov	r4, r1
 8011958:	b082      	sub	sp, #8
 801195a:	b3a1      	cbz	r1, 80119c6 <_OmniEnc__cdr_deserialize+0x72>
 801195c:	688e      	ldr	r6, [r1, #8]
 801195e:	ab01      	add	r3, sp, #4
 8011960:	6809      	ldr	r1, [r1, #0]
 8011962:	4605      	mov	r5, r0
 8011964:	4632      	mov	r2, r6
 8011966:	f001 fd2d 	bl	80133c4 <ucdr_deserialize_sequence_char>
 801196a:	9b01      	ldr	r3, [sp, #4]
 801196c:	bb38      	cbnz	r0, 80119be <_OmniEnc__cdr_deserialize+0x6a>
 801196e:	429e      	cmp	r6, r3
 8011970:	d32c      	bcc.n	80119cc <_OmniEnc__cdr_deserialize+0x78>
 8011972:	f104 0110 	add.w	r1, r4, #16
 8011976:	4628      	mov	r0, r5
 8011978:	f001 fb84 	bl	8013084 <ucdr_deserialize_double>
 801197c:	f104 0118 	add.w	r1, r4, #24
 8011980:	4628      	mov	r0, r5
 8011982:	f001 fb7f 	bl	8013084 <ucdr_deserialize_double>
 8011986:	f104 0120 	add.w	r1, r4, #32
 801198a:	4628      	mov	r0, r5
 801198c:	f001 fb7a 	bl	8013084 <ucdr_deserialize_double>
 8011990:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011994:	4628      	mov	r0, r5
 8011996:	f001 fb75 	bl	8013084 <ucdr_deserialize_double>
 801199a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801199e:	4628      	mov	r0, r5
 80119a0:	f001 fb70 	bl	8013084 <ucdr_deserialize_double>
 80119a4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80119a8:	4628      	mov	r0, r5
 80119aa:	f001 fb6b 	bl	8013084 <ucdr_deserialize_double>
 80119ae:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80119b2:	4628      	mov	r0, r5
 80119b4:	b002      	add	sp, #8
 80119b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119ba:	f001 bb63 	b.w	8013084 <ucdr_deserialize_double>
 80119be:	b103      	cbz	r3, 80119c2 <_OmniEnc__cdr_deserialize+0x6e>
 80119c0:	3b01      	subs	r3, #1
 80119c2:	6063      	str	r3, [r4, #4]
 80119c4:	e7d5      	b.n	8011972 <_OmniEnc__cdr_deserialize+0x1e>
 80119c6:	4608      	mov	r0, r1
 80119c8:	b002      	add	sp, #8
 80119ca:	bd70      	pop	{r4, r5, r6, pc}
 80119cc:	2101      	movs	r1, #1
 80119ce:	75a8      	strb	r0, [r5, #22]
 80119d0:	7569      	strb	r1, [r5, #21]
 80119d2:	6060      	str	r0, [r4, #4]
 80119d4:	4628      	mov	r0, r5
 80119d6:	f001 fc8b 	bl	80132f0 <ucdr_align_to>
 80119da:	9901      	ldr	r1, [sp, #4]
 80119dc:	4628      	mov	r0, r5
 80119de:	f001 fcbf 	bl	8013360 <ucdr_advance_buffer>
 80119e2:	e7c6      	b.n	8011972 <_OmniEnc__cdr_deserialize+0x1e>

080119e4 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	460c      	mov	r4, r1
 80119e8:	4603      	mov	r3, r0
 80119ea:	2200      	movs	r2, #0
 80119ec:	2108      	movs	r1, #8
 80119ee:	f104 0508 	add.w	r5, r4, #8
 80119f2:	4620      	mov	r0, r4
 80119f4:	701a      	strb	r2, [r3, #0]
 80119f6:	f1c4 0408 	rsb	r4, r4, #8
 80119fa:	f001 fc61 	bl	80132c0 <ucdr_alignment>
 80119fe:	4405      	add	r5, r0
 8011a00:	2108      	movs	r1, #8
 8011a02:	4628      	mov	r0, r5
 8011a04:	f001 fc5c 	bl	80132c0 <ucdr_alignment>
 8011a08:	2108      	movs	r1, #8
 8011a0a:	1846      	adds	r6, r0, r1
 8011a0c:	442e      	add	r6, r5
 8011a0e:	4630      	mov	r0, r6
 8011a10:	f001 fc56 	bl	80132c0 <ucdr_alignment>
 8011a14:	2108      	movs	r1, #8
 8011a16:	1845      	adds	r5, r0, r1
 8011a18:	442e      	add	r6, r5
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f001 fc50 	bl	80132c0 <ucdr_alignment>
 8011a20:	2108      	movs	r1, #8
 8011a22:	4408      	add	r0, r1
 8011a24:	4406      	add	r6, r0
 8011a26:	4630      	mov	r0, r6
 8011a28:	f001 fc4a 	bl	80132c0 <ucdr_alignment>
 8011a2c:	2108      	movs	r1, #8
 8011a2e:	1845      	adds	r5, r0, r1
 8011a30:	4435      	add	r5, r6
 8011a32:	4628      	mov	r0, r5
 8011a34:	f001 fc44 	bl	80132c0 <ucdr_alignment>
 8011a38:	2108      	movs	r1, #8
 8011a3a:	4408      	add	r0, r1
 8011a3c:	4405      	add	r5, r0
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f001 fc3e 	bl	80132c0 <ucdr_alignment>
 8011a44:	4420      	add	r0, r4
 8011a46:	4428      	add	r0, r5
 8011a48:	bd70      	pop	{r4, r5, r6, pc}
 8011a4a:	bf00      	nop

08011a4c <_OmniEnc__max_serialized_size>:
 8011a4c:	b500      	push	{lr}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	2100      	movs	r1, #0
 8011a52:	f10d 0007 	add.w	r0, sp, #7
 8011a56:	f7ff ffc5 	bl	80119e4 <max_serialized_size_drive_msgs__msg__OmniEnc>
 8011a5a:	b003      	add	sp, #12
 8011a5c:	f85d fb04 	ldr.w	pc, [sp], #4

08011a60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011a60:	4800      	ldr	r0, [pc, #0]	; (8011a64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 8011a62:	4770      	bx	lr
 8011a64:	20000654 	.word	0x20000654

08011a68 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011a68:	4b04      	ldr	r3, [pc, #16]	; (8011a7c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	b10a      	cbz	r2, 8011a72 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011a6e:	4803      	ldr	r0, [pc, #12]	; (8011a7c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a70:	4770      	bx	lr
 8011a72:	4a03      	ldr	r2, [pc, #12]	; (8011a80 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011a74:	4801      	ldr	r0, [pc, #4]	; (8011a7c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011a76:	6812      	ldr	r2, [r2, #0]
 8011a78:	601a      	str	r2, [r3, #0]
 8011a7a:	4770      	bx	lr
 8011a7c:	20000684 	.word	0x20000684
 8011a80:	200008f4 	.word	0x200008f4

08011a84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011a84:	4a02      	ldr	r2, [pc, #8]	; (8011a90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xc>)
 8011a86:	4b03      	ldr	r3, [pc, #12]	; (8011a94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x10>)
 8011a88:	6812      	ldr	r2, [r2, #0]
 8011a8a:	601a      	str	r2, [r3, #0]
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	200008f4 	.word	0x200008f4
 8011a94:	20000684 	.word	0x20000684

08011a98 <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_init_function>:
 8011a98:	f005 bd96 	b.w	80175c8 <manip_msgs__msg__Cmd__init>

08011a9c <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_fini_function>:
 8011a9c:	f005 bd98 	b.w	80175d0 <manip_msgs__msg__Cmd__fini>

08011aa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011aa0:	4b04      	ldr	r3, [pc, #16]	; (8011ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011aa2:	681a      	ldr	r2, [r3, #0]
 8011aa4:	b10a      	cbz	r2, 8011aaa <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011aa6:	4803      	ldr	r0, [pc, #12]	; (8011ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011aa8:	4770      	bx	lr
 8011aaa:	4a03      	ldr	r2, [pc, #12]	; (8011ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011aac:	4801      	ldr	r0, [pc, #4]	; (8011ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011aae:	6812      	ldr	r2, [r2, #0]
 8011ab0:	601a      	str	r2, [r3, #0]
 8011ab2:	4770      	bx	lr
 8011ab4:	200008ac 	.word	0x200008ac
 8011ab8:	200008f8 	.word	0x200008f8

08011abc <get_serialized_size_manip_msgs__msg__Cmd.part.0>:
 8011abc:	b570      	push	{r4, r5, r6, lr}
 8011abe:	2108      	movs	r1, #8
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	f001 fbfd 	bl	80132c0 <ucdr_alignment>
 8011ac6:	2108      	movs	r1, #8
 8011ac8:	1866      	adds	r6, r4, r1
 8011aca:	f1c4 0408 	rsb	r4, r4, #8
 8011ace:	1985      	adds	r5, r0, r6
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	f001 fbf5 	bl	80132c0 <ucdr_alignment>
 8011ad6:	2108      	movs	r1, #8
 8011ad8:	1846      	adds	r6, r0, r1
 8011ada:	442e      	add	r6, r5
 8011adc:	4630      	mov	r0, r6
 8011ade:	f001 fbef 	bl	80132c0 <ucdr_alignment>
 8011ae2:	2108      	movs	r1, #8
 8011ae4:	1845      	adds	r5, r0, r1
 8011ae6:	442e      	add	r6, r5
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f001 fbe9 	bl	80132c0 <ucdr_alignment>
 8011aee:	2108      	movs	r1, #8
 8011af0:	1845      	adds	r5, r0, r1
 8011af2:	4435      	add	r5, r6
 8011af4:	4628      	mov	r0, r5
 8011af6:	f001 fbe3 	bl	80132c0 <ucdr_alignment>
 8011afa:	2108      	movs	r1, #8
 8011afc:	4408      	add	r0, r1
 8011afe:	4405      	add	r5, r0
 8011b00:	4628      	mov	r0, r5
 8011b02:	f001 fbdd 	bl	80132c0 <ucdr_alignment>
 8011b06:	2108      	movs	r1, #8
 8011b08:	4408      	add	r0, r1
 8011b0a:	1946      	adds	r6, r0, r5
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f001 fbd7 	bl	80132c0 <ucdr_alignment>
 8011b12:	2108      	movs	r1, #8
 8011b14:	1845      	adds	r5, r0, r1
 8011b16:	4435      	add	r5, r6
 8011b18:	4628      	mov	r0, r5
 8011b1a:	f001 fbd1 	bl	80132c0 <ucdr_alignment>
 8011b1e:	2108      	movs	r1, #8
 8011b20:	4408      	add	r0, r1
 8011b22:	4405      	add	r5, r0
 8011b24:	4628      	mov	r0, r5
 8011b26:	f001 fbcb 	bl	80132c0 <ucdr_alignment>
 8011b2a:	4420      	add	r0, r4
 8011b2c:	4428      	add	r0, r5
 8011b2e:	bd70      	pop	{r4, r5, r6, pc}

08011b30 <get_serialized_size_manip_msgs__msg__Cmd>:
 8011b30:	b110      	cbz	r0, 8011b38 <get_serialized_size_manip_msgs__msg__Cmd+0x8>
 8011b32:	4608      	mov	r0, r1
 8011b34:	f7ff bfc2 	b.w	8011abc <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop

08011b3c <_Cmd__get_serialized_size>:
 8011b3c:	b110      	cbz	r0, 8011b44 <_Cmd__get_serialized_size+0x8>
 8011b3e:	2000      	movs	r0, #0
 8011b40:	f7ff bfbc 	b.w	8011abc <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop

08011b48 <_Cmd__cdr_deserialize>:
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	460c      	mov	r4, r1
 8011b4c:	b361      	cbz	r1, 8011ba8 <_Cmd__cdr_deserialize+0x60>
 8011b4e:	4605      	mov	r5, r0
 8011b50:	f001 f902 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011b54:	f104 0108 	add.w	r1, r4, #8
 8011b58:	4628      	mov	r0, r5
 8011b5a:	f001 f8fd 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011b5e:	f104 0110 	add.w	r1, r4, #16
 8011b62:	4628      	mov	r0, r5
 8011b64:	f001 f8f8 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011b68:	f104 0118 	add.w	r1, r4, #24
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f001 f8f3 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011b72:	f104 0120 	add.w	r1, r4, #32
 8011b76:	4628      	mov	r0, r5
 8011b78:	f001 f8ee 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011b7c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011b80:	4628      	mov	r0, r5
 8011b82:	f001 f8e9 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011b86:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f001 f8e4 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011b90:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011b94:	4628      	mov	r0, r5
 8011b96:	f001 f8df 	bl	8012d58 <ucdr_deserialize_int64_t>
 8011b9a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ba4:	f001 b8d8 	b.w	8012d58 <ucdr_deserialize_int64_t>
 8011ba8:	4608      	mov	r0, r1
 8011baa:	bd38      	pop	{r3, r4, r5, pc}

08011bac <_Cmd__cdr_serialize>:
 8011bac:	b388      	cbz	r0, 8011c12 <_Cmd__cdr_serialize+0x66>
 8011bae:	b570      	push	{r4, r5, r6, lr}
 8011bb0:	460d      	mov	r5, r1
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011bb8:	4608      	mov	r0, r1
 8011bba:	f000 fffd 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011bc4:	f000 fff8 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011bc8:	4628      	mov	r0, r5
 8011bca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011bce:	f000 fff3 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011bd8:	f000 ffee 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011bdc:	4628      	mov	r0, r5
 8011bde:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011be2:	f000 ffe9 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011be6:	4628      	mov	r0, r5
 8011be8:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8011bec:	f000 ffe4 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8011bf6:	f000 ffdf 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011bfa:	4628      	mov	r0, r5
 8011bfc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8011c00:	f000 ffda 	bl	8012bb8 <ucdr_serialize_int64_t>
 8011c04:	4628      	mov	r0, r5
 8011c06:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8011c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c0e:	f000 bfd3 	b.w	8012bb8 <ucdr_serialize_int64_t>
 8011c12:	4770      	bx	lr

08011c14 <max_serialized_size_manip_msgs__msg__Cmd>:
 8011c14:	b570      	push	{r4, r5, r6, lr}
 8011c16:	460c      	mov	r4, r1
 8011c18:	2301      	movs	r3, #1
 8011c1a:	2108      	movs	r1, #8
 8011c1c:	f104 0608 	add.w	r6, r4, #8
 8011c20:	7003      	strb	r3, [r0, #0]
 8011c22:	4620      	mov	r0, r4
 8011c24:	f1c4 0408 	rsb	r4, r4, #8
 8011c28:	f001 fb4a 	bl	80132c0 <ucdr_alignment>
 8011c2c:	1985      	adds	r5, r0, r6
 8011c2e:	2108      	movs	r1, #8
 8011c30:	4628      	mov	r0, r5
 8011c32:	f001 fb45 	bl	80132c0 <ucdr_alignment>
 8011c36:	2108      	movs	r1, #8
 8011c38:	1846      	adds	r6, r0, r1
 8011c3a:	442e      	add	r6, r5
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	f001 fb3f 	bl	80132c0 <ucdr_alignment>
 8011c42:	2108      	movs	r1, #8
 8011c44:	1845      	adds	r5, r0, r1
 8011c46:	442e      	add	r6, r5
 8011c48:	4630      	mov	r0, r6
 8011c4a:	f001 fb39 	bl	80132c0 <ucdr_alignment>
 8011c4e:	2108      	movs	r1, #8
 8011c50:	1845      	adds	r5, r0, r1
 8011c52:	4435      	add	r5, r6
 8011c54:	4628      	mov	r0, r5
 8011c56:	f001 fb33 	bl	80132c0 <ucdr_alignment>
 8011c5a:	2108      	movs	r1, #8
 8011c5c:	4408      	add	r0, r1
 8011c5e:	4405      	add	r5, r0
 8011c60:	4628      	mov	r0, r5
 8011c62:	f001 fb2d 	bl	80132c0 <ucdr_alignment>
 8011c66:	2108      	movs	r1, #8
 8011c68:	4408      	add	r0, r1
 8011c6a:	1946      	adds	r6, r0, r5
 8011c6c:	4630      	mov	r0, r6
 8011c6e:	f001 fb27 	bl	80132c0 <ucdr_alignment>
 8011c72:	2108      	movs	r1, #8
 8011c74:	1845      	adds	r5, r0, r1
 8011c76:	4435      	add	r5, r6
 8011c78:	4628      	mov	r0, r5
 8011c7a:	f001 fb21 	bl	80132c0 <ucdr_alignment>
 8011c7e:	2108      	movs	r1, #8
 8011c80:	4408      	add	r0, r1
 8011c82:	4405      	add	r5, r0
 8011c84:	4628      	mov	r0, r5
 8011c86:	f001 fb1b 	bl	80132c0 <ucdr_alignment>
 8011c8a:	4420      	add	r0, r4
 8011c8c:	4428      	add	r0, r5
 8011c8e:	bd70      	pop	{r4, r5, r6, pc}

08011c90 <_Cmd__max_serialized_size>:
 8011c90:	b500      	push	{lr}
 8011c92:	b083      	sub	sp, #12
 8011c94:	2100      	movs	r1, #0
 8011c96:	f10d 0007 	add.w	r0, sp, #7
 8011c9a:	f7ff ffbb 	bl	8011c14 <max_serialized_size_manip_msgs__msg__Cmd>
 8011c9e:	b003      	add	sp, #12
 8011ca0:	f85d fb04 	ldr.w	pc, [sp], #4

08011ca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011ca4:	4800      	ldr	r0, [pc, #0]	; (8011ca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x4>)
 8011ca6:	4770      	bx	lr
 8011ca8:	200008b8 	.word	0x200008b8

08011cac <ucdr_serialize_bool>:
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	460d      	mov	r5, r1
 8011cb0:	2101      	movs	r1, #1
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	f001 fab8 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011cb8:	b148      	cbz	r0, 8011cce <ucdr_serialize_bool+0x22>
 8011cba:	68a3      	ldr	r3, [r4, #8]
 8011cbc:	2101      	movs	r1, #1
 8011cbe:	701d      	strb	r5, [r3, #0]
 8011cc0:	68a2      	ldr	r2, [r4, #8]
 8011cc2:	6923      	ldr	r3, [r4, #16]
 8011cc4:	440a      	add	r2, r1
 8011cc6:	7561      	strb	r1, [r4, #21]
 8011cc8:	440b      	add	r3, r1
 8011cca:	60a2      	str	r2, [r4, #8]
 8011ccc:	6123      	str	r3, [r4, #16]
 8011cce:	7da0      	ldrb	r0, [r4, #22]
 8011cd0:	f080 0001 	eor.w	r0, r0, #1
 8011cd4:	bd38      	pop	{r3, r4, r5, pc}
 8011cd6:	bf00      	nop

08011cd8 <ucdr_deserialize_bool>:
 8011cd8:	b538      	push	{r3, r4, r5, lr}
 8011cda:	460d      	mov	r5, r1
 8011cdc:	2101      	movs	r1, #1
 8011cde:	4604      	mov	r4, r0
 8011ce0:	f001 faa2 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011ce4:	b160      	cbz	r0, 8011d00 <ucdr_deserialize_bool+0x28>
 8011ce6:	68a2      	ldr	r2, [r4, #8]
 8011ce8:	2101      	movs	r1, #1
 8011cea:	6923      	ldr	r3, [r4, #16]
 8011cec:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011cf0:	440b      	add	r3, r1
 8011cf2:	3800      	subs	r0, #0
 8011cf4:	bf18      	it	ne
 8011cf6:	2001      	movne	r0, #1
 8011cf8:	7028      	strb	r0, [r5, #0]
 8011cfa:	60a2      	str	r2, [r4, #8]
 8011cfc:	6123      	str	r3, [r4, #16]
 8011cfe:	7561      	strb	r1, [r4, #21]
 8011d00:	7da0      	ldrb	r0, [r4, #22]
 8011d02:	f080 0001 	eor.w	r0, r0, #1
 8011d06:	bd38      	pop	{r3, r4, r5, pc}

08011d08 <ucdr_serialize_uint8_t>:
 8011d08:	b538      	push	{r3, r4, r5, lr}
 8011d0a:	460d      	mov	r5, r1
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	4604      	mov	r4, r0
 8011d10:	f001 fa8a 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011d14:	b148      	cbz	r0, 8011d2a <ucdr_serialize_uint8_t+0x22>
 8011d16:	68a3      	ldr	r3, [r4, #8]
 8011d18:	2101      	movs	r1, #1
 8011d1a:	701d      	strb	r5, [r3, #0]
 8011d1c:	68a2      	ldr	r2, [r4, #8]
 8011d1e:	6923      	ldr	r3, [r4, #16]
 8011d20:	440a      	add	r2, r1
 8011d22:	7561      	strb	r1, [r4, #21]
 8011d24:	440b      	add	r3, r1
 8011d26:	60a2      	str	r2, [r4, #8]
 8011d28:	6123      	str	r3, [r4, #16]
 8011d2a:	7da0      	ldrb	r0, [r4, #22]
 8011d2c:	f080 0001 	eor.w	r0, r0, #1
 8011d30:	bd38      	pop	{r3, r4, r5, pc}
 8011d32:	bf00      	nop

08011d34 <ucdr_deserialize_uint8_t>:
 8011d34:	b538      	push	{r3, r4, r5, lr}
 8011d36:	460d      	mov	r5, r1
 8011d38:	2101      	movs	r1, #1
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	f001 fa74 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011d40:	b150      	cbz	r0, 8011d58 <ucdr_deserialize_uint8_t+0x24>
 8011d42:	68a3      	ldr	r3, [r4, #8]
 8011d44:	2101      	movs	r1, #1
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	702b      	strb	r3, [r5, #0]
 8011d4a:	68a2      	ldr	r2, [r4, #8]
 8011d4c:	6923      	ldr	r3, [r4, #16]
 8011d4e:	440a      	add	r2, r1
 8011d50:	7561      	strb	r1, [r4, #21]
 8011d52:	440b      	add	r3, r1
 8011d54:	60a2      	str	r2, [r4, #8]
 8011d56:	6123      	str	r3, [r4, #16]
 8011d58:	7da0      	ldrb	r0, [r4, #22]
 8011d5a:	f080 0001 	eor.w	r0, r0, #1
 8011d5e:	bd38      	pop	{r3, r4, r5, pc}

08011d60 <ucdr_serialize_uint16_t>:
 8011d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d64:	460b      	mov	r3, r1
 8011d66:	b082      	sub	sp, #8
 8011d68:	4604      	mov	r4, r0
 8011d6a:	2102      	movs	r1, #2
 8011d6c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011d70:	f001 faae 	bl	80132d0 <ucdr_buffer_alignment>
 8011d74:	4601      	mov	r1, r0
 8011d76:	4620      	mov	r0, r4
 8011d78:	7d67      	ldrb	r7, [r4, #21]
 8011d7a:	f001 faf1 	bl	8013360 <ucdr_advance_buffer>
 8011d7e:	2102      	movs	r1, #2
 8011d80:	4620      	mov	r0, r4
 8011d82:	f001 fa45 	bl	8013210 <ucdr_check_buffer_available_for>
 8011d86:	bb78      	cbnz	r0, 8011de8 <ucdr_serialize_uint16_t+0x88>
 8011d88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011d8c:	42ab      	cmp	r3, r5
 8011d8e:	d926      	bls.n	8011dde <ucdr_serialize_uint16_t+0x7e>
 8011d90:	1b5e      	subs	r6, r3, r5
 8011d92:	60a3      	str	r3, [r4, #8]
 8011d94:	6923      	ldr	r3, [r4, #16]
 8011d96:	4620      	mov	r0, r4
 8011d98:	f1c6 0802 	rsb	r8, r6, #2
 8011d9c:	4433      	add	r3, r6
 8011d9e:	4641      	mov	r1, r8
 8011da0:	6123      	str	r3, [r4, #16]
 8011da2:	f001 fa41 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d03b      	beq.n	8011e22 <ucdr_serialize_uint16_t+0xc2>
 8011daa:	7d23      	ldrb	r3, [r4, #20]
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d04a      	beq.n	8011e46 <ucdr_serialize_uint16_t+0xe6>
 8011db0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011db4:	702b      	strb	r3, [r5, #0]
 8011db6:	2e00      	cmp	r6, #0
 8011db8:	d040      	beq.n	8011e3c <ucdr_serialize_uint16_t+0xdc>
 8011dba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011dbe:	706b      	strb	r3, [r5, #1]
 8011dc0:	6923      	ldr	r3, [r4, #16]
 8011dc2:	2102      	movs	r1, #2
 8011dc4:	68a2      	ldr	r2, [r4, #8]
 8011dc6:	3302      	adds	r3, #2
 8011dc8:	7da0      	ldrb	r0, [r4, #22]
 8011dca:	4442      	add	r2, r8
 8011dcc:	7561      	strb	r1, [r4, #21]
 8011dce:	1b9e      	subs	r6, r3, r6
 8011dd0:	f080 0001 	eor.w	r0, r0, #1
 8011dd4:	60a2      	str	r2, [r4, #8]
 8011dd6:	6126      	str	r6, [r4, #16]
 8011dd8:	b002      	add	sp, #8
 8011dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dde:	2102      	movs	r1, #2
 8011de0:	4620      	mov	r0, r4
 8011de2:	f001 fa21 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011de6:	b190      	cbz	r0, 8011e0e <ucdr_serialize_uint16_t+0xae>
 8011de8:	7d23      	ldrb	r3, [r4, #20]
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	68a3      	ldr	r3, [r4, #8]
 8011dee:	d014      	beq.n	8011e1a <ucdr_serialize_uint16_t+0xba>
 8011df0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011df4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011df8:	7019      	strb	r1, [r3, #0]
 8011dfa:	68a3      	ldr	r3, [r4, #8]
 8011dfc:	705a      	strb	r2, [r3, #1]
 8011dfe:	2102      	movs	r1, #2
 8011e00:	68a2      	ldr	r2, [r4, #8]
 8011e02:	6923      	ldr	r3, [r4, #16]
 8011e04:	440a      	add	r2, r1
 8011e06:	7561      	strb	r1, [r4, #21]
 8011e08:	440b      	add	r3, r1
 8011e0a:	60a2      	str	r2, [r4, #8]
 8011e0c:	6123      	str	r3, [r4, #16]
 8011e0e:	7da0      	ldrb	r0, [r4, #22]
 8011e10:	f080 0001 	eor.w	r0, r0, #1
 8011e14:	b002      	add	sp, #8
 8011e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011e1e:	801a      	strh	r2, [r3, #0]
 8011e20:	e7ed      	b.n	8011dfe <ucdr_serialize_uint16_t+0x9e>
 8011e22:	68a2      	ldr	r2, [r4, #8]
 8011e24:	6923      	ldr	r3, [r4, #16]
 8011e26:	7da0      	ldrb	r0, [r4, #22]
 8011e28:	1b92      	subs	r2, r2, r6
 8011e2a:	1b9b      	subs	r3, r3, r6
 8011e2c:	7567      	strb	r7, [r4, #21]
 8011e2e:	f080 0001 	eor.w	r0, r0, #1
 8011e32:	60a2      	str	r2, [r4, #8]
 8011e34:	6123      	str	r3, [r4, #16]
 8011e36:	b002      	add	sp, #8
 8011e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e3c:	68a3      	ldr	r3, [r4, #8]
 8011e3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e42:	701a      	strb	r2, [r3, #0]
 8011e44:	e7bc      	b.n	8011dc0 <ucdr_serialize_uint16_t+0x60>
 8011e46:	4628      	mov	r0, r5
 8011e48:	f10d 0506 	add.w	r5, sp, #6
 8011e4c:	4632      	mov	r2, r6
 8011e4e:	4629      	mov	r1, r5
 8011e50:	f00f f869 	bl	8020f26 <memcpy>
 8011e54:	4642      	mov	r2, r8
 8011e56:	19a9      	adds	r1, r5, r6
 8011e58:	68a0      	ldr	r0, [r4, #8]
 8011e5a:	f00f f864 	bl	8020f26 <memcpy>
 8011e5e:	e7af      	b.n	8011dc0 <ucdr_serialize_uint16_t+0x60>

08011e60 <ucdr_serialize_endian_uint16_t>:
 8011e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e64:	4604      	mov	r4, r0
 8011e66:	b083      	sub	sp, #12
 8011e68:	460d      	mov	r5, r1
 8011e6a:	2102      	movs	r1, #2
 8011e6c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011e70:	f001 fa2e 	bl	80132d0 <ucdr_buffer_alignment>
 8011e74:	4601      	mov	r1, r0
 8011e76:	4620      	mov	r0, r4
 8011e78:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011e7c:	f001 fa70 	bl	8013360 <ucdr_advance_buffer>
 8011e80:	2102      	movs	r1, #2
 8011e82:	4620      	mov	r0, r4
 8011e84:	f001 f9c4 	bl	8013210 <ucdr_check_buffer_available_for>
 8011e88:	bb70      	cbnz	r0, 8011ee8 <ucdr_serialize_endian_uint16_t+0x88>
 8011e8a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011e8e:	42be      	cmp	r6, r7
 8011e90:	d925      	bls.n	8011ede <ucdr_serialize_endian_uint16_t+0x7e>
 8011e92:	6923      	ldr	r3, [r4, #16]
 8011e94:	4620      	mov	r0, r4
 8011e96:	60a6      	str	r6, [r4, #8]
 8011e98:	1bf6      	subs	r6, r6, r7
 8011e9a:	4433      	add	r3, r6
 8011e9c:	f1c6 0902 	rsb	r9, r6, #2
 8011ea0:	6123      	str	r3, [r4, #16]
 8011ea2:	4649      	mov	r1, r9
 8011ea4:	f001 f9c0 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d039      	beq.n	8011f20 <ucdr_serialize_endian_uint16_t+0xc0>
 8011eac:	2d01      	cmp	r5, #1
 8011eae:	d04a      	beq.n	8011f46 <ucdr_serialize_endian_uint16_t+0xe6>
 8011eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011eb4:	703b      	strb	r3, [r7, #0]
 8011eb6:	2e00      	cmp	r6, #0
 8011eb8:	d040      	beq.n	8011f3c <ucdr_serialize_endian_uint16_t+0xdc>
 8011eba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ebe:	707b      	strb	r3, [r7, #1]
 8011ec0:	6923      	ldr	r3, [r4, #16]
 8011ec2:	2102      	movs	r1, #2
 8011ec4:	68a2      	ldr	r2, [r4, #8]
 8011ec6:	7da0      	ldrb	r0, [r4, #22]
 8011ec8:	3302      	adds	r3, #2
 8011eca:	444a      	add	r2, r9
 8011ecc:	7561      	strb	r1, [r4, #21]
 8011ece:	1b9b      	subs	r3, r3, r6
 8011ed0:	f080 0001 	eor.w	r0, r0, #1
 8011ed4:	60a2      	str	r2, [r4, #8]
 8011ed6:	6123      	str	r3, [r4, #16]
 8011ed8:	b003      	add	sp, #12
 8011eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ede:	2102      	movs	r1, #2
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f001 f9a1 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011ee6:	b188      	cbz	r0, 8011f0c <ucdr_serialize_endian_uint16_t+0xac>
 8011ee8:	2d01      	cmp	r5, #1
 8011eea:	68a3      	ldr	r3, [r4, #8]
 8011eec:	d014      	beq.n	8011f18 <ucdr_serialize_endian_uint16_t+0xb8>
 8011eee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011ef2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011ef6:	7019      	strb	r1, [r3, #0]
 8011ef8:	68a3      	ldr	r3, [r4, #8]
 8011efa:	705a      	strb	r2, [r3, #1]
 8011efc:	2102      	movs	r1, #2
 8011efe:	68a2      	ldr	r2, [r4, #8]
 8011f00:	6923      	ldr	r3, [r4, #16]
 8011f02:	440a      	add	r2, r1
 8011f04:	7561      	strb	r1, [r4, #21]
 8011f06:	440b      	add	r3, r1
 8011f08:	60a2      	str	r2, [r4, #8]
 8011f0a:	6123      	str	r3, [r4, #16]
 8011f0c:	7da0      	ldrb	r0, [r4, #22]
 8011f0e:	f080 0001 	eor.w	r0, r0, #1
 8011f12:	b003      	add	sp, #12
 8011f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011f1c:	801a      	strh	r2, [r3, #0]
 8011f1e:	e7ed      	b.n	8011efc <ucdr_serialize_endian_uint16_t+0x9c>
 8011f20:	68a2      	ldr	r2, [r4, #8]
 8011f22:	6923      	ldr	r3, [r4, #16]
 8011f24:	7da0      	ldrb	r0, [r4, #22]
 8011f26:	1b92      	subs	r2, r2, r6
 8011f28:	1b9b      	subs	r3, r3, r6
 8011f2a:	f884 8015 	strb.w	r8, [r4, #21]
 8011f2e:	f080 0001 	eor.w	r0, r0, #1
 8011f32:	60a2      	str	r2, [r4, #8]
 8011f34:	6123      	str	r3, [r4, #16]
 8011f36:	b003      	add	sp, #12
 8011f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f3c:	68a3      	ldr	r3, [r4, #8]
 8011f3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f42:	701a      	strb	r2, [r3, #0]
 8011f44:	e7bc      	b.n	8011ec0 <ucdr_serialize_endian_uint16_t+0x60>
 8011f46:	f10d 0506 	add.w	r5, sp, #6
 8011f4a:	4632      	mov	r2, r6
 8011f4c:	4638      	mov	r0, r7
 8011f4e:	4629      	mov	r1, r5
 8011f50:	f00e ffe9 	bl	8020f26 <memcpy>
 8011f54:	464a      	mov	r2, r9
 8011f56:	19a9      	adds	r1, r5, r6
 8011f58:	68a0      	ldr	r0, [r4, #8]
 8011f5a:	f00e ffe4 	bl	8020f26 <memcpy>
 8011f5e:	e7af      	b.n	8011ec0 <ucdr_serialize_endian_uint16_t+0x60>

08011f60 <ucdr_deserialize_uint16_t>:
 8011f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f64:	4604      	mov	r4, r0
 8011f66:	460d      	mov	r5, r1
 8011f68:	2102      	movs	r1, #2
 8011f6a:	f001 f9b1 	bl	80132d0 <ucdr_buffer_alignment>
 8011f6e:	4601      	mov	r1, r0
 8011f70:	4620      	mov	r0, r4
 8011f72:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011f76:	f001 f9f3 	bl	8013360 <ucdr_advance_buffer>
 8011f7a:	2102      	movs	r1, #2
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f001 f947 	bl	8013210 <ucdr_check_buffer_available_for>
 8011f82:	bb60      	cbnz	r0, 8011fde <ucdr_deserialize_uint16_t+0x7e>
 8011f84:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011f88:	42be      	cmp	r6, r7
 8011f8a:	d923      	bls.n	8011fd4 <ucdr_deserialize_uint16_t+0x74>
 8011f8c:	6923      	ldr	r3, [r4, #16]
 8011f8e:	4620      	mov	r0, r4
 8011f90:	60a6      	str	r6, [r4, #8]
 8011f92:	1bf6      	subs	r6, r6, r7
 8011f94:	4433      	add	r3, r6
 8011f96:	f1c6 0902 	rsb	r9, r6, #2
 8011f9a:	6123      	str	r3, [r4, #16]
 8011f9c:	4649      	mov	r1, r9
 8011f9e:	f001 f943 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	d034      	beq.n	8012010 <ucdr_deserialize_uint16_t+0xb0>
 8011fa6:	7d23      	ldrb	r3, [r4, #20]
 8011fa8:	2b01      	cmp	r3, #1
 8011faa:	d042      	beq.n	8012032 <ucdr_deserialize_uint16_t+0xd2>
 8011fac:	787b      	ldrb	r3, [r7, #1]
 8011fae:	702b      	strb	r3, [r5, #0]
 8011fb0:	2e00      	cmp	r6, #0
 8011fb2:	d03a      	beq.n	801202a <ucdr_deserialize_uint16_t+0xca>
 8011fb4:	783b      	ldrb	r3, [r7, #0]
 8011fb6:	706b      	strb	r3, [r5, #1]
 8011fb8:	6923      	ldr	r3, [r4, #16]
 8011fba:	2102      	movs	r1, #2
 8011fbc:	68a2      	ldr	r2, [r4, #8]
 8011fbe:	3302      	adds	r3, #2
 8011fc0:	7da0      	ldrb	r0, [r4, #22]
 8011fc2:	444a      	add	r2, r9
 8011fc4:	7561      	strb	r1, [r4, #21]
 8011fc6:	1b9b      	subs	r3, r3, r6
 8011fc8:	f080 0001 	eor.w	r0, r0, #1
 8011fcc:	60a2      	str	r2, [r4, #8]
 8011fce:	6123      	str	r3, [r4, #16]
 8011fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fd4:	2102      	movs	r1, #2
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f001 f926 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8011fdc:	b180      	cbz	r0, 8012000 <ucdr_deserialize_uint16_t+0xa0>
 8011fde:	7d23      	ldrb	r3, [r4, #20]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	68a3      	ldr	r3, [r4, #8]
 8011fe4:	d011      	beq.n	801200a <ucdr_deserialize_uint16_t+0xaa>
 8011fe6:	785b      	ldrb	r3, [r3, #1]
 8011fe8:	702b      	strb	r3, [r5, #0]
 8011fea:	68a3      	ldr	r3, [r4, #8]
 8011fec:	781b      	ldrb	r3, [r3, #0]
 8011fee:	706b      	strb	r3, [r5, #1]
 8011ff0:	2102      	movs	r1, #2
 8011ff2:	68a2      	ldr	r2, [r4, #8]
 8011ff4:	6923      	ldr	r3, [r4, #16]
 8011ff6:	440a      	add	r2, r1
 8011ff8:	7561      	strb	r1, [r4, #21]
 8011ffa:	440b      	add	r3, r1
 8011ffc:	60a2      	str	r2, [r4, #8]
 8011ffe:	6123      	str	r3, [r4, #16]
 8012000:	7da0      	ldrb	r0, [r4, #22]
 8012002:	f080 0001 	eor.w	r0, r0, #1
 8012006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801200a:	881b      	ldrh	r3, [r3, #0]
 801200c:	802b      	strh	r3, [r5, #0]
 801200e:	e7ef      	b.n	8011ff0 <ucdr_deserialize_uint16_t+0x90>
 8012010:	68a2      	ldr	r2, [r4, #8]
 8012012:	6923      	ldr	r3, [r4, #16]
 8012014:	1b92      	subs	r2, r2, r6
 8012016:	7da0      	ldrb	r0, [r4, #22]
 8012018:	1b9b      	subs	r3, r3, r6
 801201a:	f884 8015 	strb.w	r8, [r4, #21]
 801201e:	f080 0001 	eor.w	r0, r0, #1
 8012022:	60a2      	str	r2, [r4, #8]
 8012024:	6123      	str	r3, [r4, #16]
 8012026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801202a:	68a3      	ldr	r3, [r4, #8]
 801202c:	781b      	ldrb	r3, [r3, #0]
 801202e:	706b      	strb	r3, [r5, #1]
 8012030:	e7c2      	b.n	8011fb8 <ucdr_deserialize_uint16_t+0x58>
 8012032:	4639      	mov	r1, r7
 8012034:	4632      	mov	r2, r6
 8012036:	4628      	mov	r0, r5
 8012038:	f00e ff75 	bl	8020f26 <memcpy>
 801203c:	464a      	mov	r2, r9
 801203e:	19a8      	adds	r0, r5, r6
 8012040:	68a1      	ldr	r1, [r4, #8]
 8012042:	f00e ff70 	bl	8020f26 <memcpy>
 8012046:	e7b7      	b.n	8011fb8 <ucdr_deserialize_uint16_t+0x58>

08012048 <ucdr_deserialize_endian_uint16_t>:
 8012048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801204c:	4604      	mov	r4, r0
 801204e:	460e      	mov	r6, r1
 8012050:	2102      	movs	r1, #2
 8012052:	4615      	mov	r5, r2
 8012054:	f001 f93c 	bl	80132d0 <ucdr_buffer_alignment>
 8012058:	4601      	mov	r1, r0
 801205a:	4620      	mov	r0, r4
 801205c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012060:	f001 f97e 	bl	8013360 <ucdr_advance_buffer>
 8012064:	2102      	movs	r1, #2
 8012066:	4620      	mov	r0, r4
 8012068:	f001 f8d2 	bl	8013210 <ucdr_check_buffer_available_for>
 801206c:	bb70      	cbnz	r0, 80120cc <ucdr_deserialize_endian_uint16_t+0x84>
 801206e:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8012072:	454f      	cmp	r7, r9
 8012074:	d925      	bls.n	80120c2 <ucdr_deserialize_endian_uint16_t+0x7a>
 8012076:	6923      	ldr	r3, [r4, #16]
 8012078:	4620      	mov	r0, r4
 801207a:	60a7      	str	r7, [r4, #8]
 801207c:	eba7 0709 	sub.w	r7, r7, r9
 8012080:	443b      	add	r3, r7
 8012082:	f1c7 0a02 	rsb	sl, r7, #2
 8012086:	6123      	str	r3, [r4, #16]
 8012088:	4651      	mov	r1, sl
 801208a:	f001 f8cd 	bl	8013228 <ucdr_check_final_buffer_behavior>
 801208e:	2800      	cmp	r0, #0
 8012090:	d034      	beq.n	80120fc <ucdr_deserialize_endian_uint16_t+0xb4>
 8012092:	2e01      	cmp	r6, #1
 8012094:	d043      	beq.n	801211e <ucdr_deserialize_endian_uint16_t+0xd6>
 8012096:	f899 3001 	ldrb.w	r3, [r9, #1]
 801209a:	702b      	strb	r3, [r5, #0]
 801209c:	2f00      	cmp	r7, #0
 801209e:	d03a      	beq.n	8012116 <ucdr_deserialize_endian_uint16_t+0xce>
 80120a0:	f899 3000 	ldrb.w	r3, [r9]
 80120a4:	706b      	strb	r3, [r5, #1]
 80120a6:	6923      	ldr	r3, [r4, #16]
 80120a8:	2102      	movs	r1, #2
 80120aa:	68a2      	ldr	r2, [r4, #8]
 80120ac:	3302      	adds	r3, #2
 80120ae:	7da0      	ldrb	r0, [r4, #22]
 80120b0:	4452      	add	r2, sl
 80120b2:	7561      	strb	r1, [r4, #21]
 80120b4:	1bdb      	subs	r3, r3, r7
 80120b6:	f080 0001 	eor.w	r0, r0, #1
 80120ba:	60a2      	str	r2, [r4, #8]
 80120bc:	6123      	str	r3, [r4, #16]
 80120be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120c2:	2102      	movs	r1, #2
 80120c4:	4620      	mov	r0, r4
 80120c6:	f001 f8af 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80120ca:	b178      	cbz	r0, 80120ec <ucdr_deserialize_endian_uint16_t+0xa4>
 80120cc:	2e01      	cmp	r6, #1
 80120ce:	68a3      	ldr	r3, [r4, #8]
 80120d0:	d011      	beq.n	80120f6 <ucdr_deserialize_endian_uint16_t+0xae>
 80120d2:	785b      	ldrb	r3, [r3, #1]
 80120d4:	702b      	strb	r3, [r5, #0]
 80120d6:	68a3      	ldr	r3, [r4, #8]
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	706b      	strb	r3, [r5, #1]
 80120dc:	2102      	movs	r1, #2
 80120de:	68a2      	ldr	r2, [r4, #8]
 80120e0:	6923      	ldr	r3, [r4, #16]
 80120e2:	440a      	add	r2, r1
 80120e4:	7561      	strb	r1, [r4, #21]
 80120e6:	440b      	add	r3, r1
 80120e8:	60a2      	str	r2, [r4, #8]
 80120ea:	6123      	str	r3, [r4, #16]
 80120ec:	7da0      	ldrb	r0, [r4, #22]
 80120ee:	f080 0001 	eor.w	r0, r0, #1
 80120f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	802b      	strh	r3, [r5, #0]
 80120fa:	e7ef      	b.n	80120dc <ucdr_deserialize_endian_uint16_t+0x94>
 80120fc:	68a2      	ldr	r2, [r4, #8]
 80120fe:	6923      	ldr	r3, [r4, #16]
 8012100:	1bd2      	subs	r2, r2, r7
 8012102:	7da0      	ldrb	r0, [r4, #22]
 8012104:	1bdb      	subs	r3, r3, r7
 8012106:	f884 8015 	strb.w	r8, [r4, #21]
 801210a:	f080 0001 	eor.w	r0, r0, #1
 801210e:	60a2      	str	r2, [r4, #8]
 8012110:	6123      	str	r3, [r4, #16]
 8012112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012116:	68a3      	ldr	r3, [r4, #8]
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	706b      	strb	r3, [r5, #1]
 801211c:	e7c3      	b.n	80120a6 <ucdr_deserialize_endian_uint16_t+0x5e>
 801211e:	4649      	mov	r1, r9
 8012120:	463a      	mov	r2, r7
 8012122:	4628      	mov	r0, r5
 8012124:	f00e feff 	bl	8020f26 <memcpy>
 8012128:	4652      	mov	r2, sl
 801212a:	19e8      	adds	r0, r5, r7
 801212c:	68a1      	ldr	r1, [r4, #8]
 801212e:	f00e fefa 	bl	8020f26 <memcpy>
 8012132:	e7b8      	b.n	80120a6 <ucdr_deserialize_endian_uint16_t+0x5e>

08012134 <ucdr_serialize_uint32_t>:
 8012134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012138:	b082      	sub	sp, #8
 801213a:	4604      	mov	r4, r0
 801213c:	9101      	str	r1, [sp, #4]
 801213e:	2104      	movs	r1, #4
 8012140:	f001 f8c6 	bl	80132d0 <ucdr_buffer_alignment>
 8012144:	4601      	mov	r1, r0
 8012146:	4620      	mov	r0, r4
 8012148:	7d67      	ldrb	r7, [r4, #21]
 801214a:	f001 f909 	bl	8013360 <ucdr_advance_buffer>
 801214e:	2104      	movs	r1, #4
 8012150:	4620      	mov	r0, r4
 8012152:	f001 f85d 	bl	8013210 <ucdr_check_buffer_available_for>
 8012156:	2800      	cmp	r0, #0
 8012158:	d139      	bne.n	80121ce <ucdr_serialize_uint32_t+0x9a>
 801215a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801215e:	42ab      	cmp	r3, r5
 8012160:	d930      	bls.n	80121c4 <ucdr_serialize_uint32_t+0x90>
 8012162:	1b5e      	subs	r6, r3, r5
 8012164:	60a3      	str	r3, [r4, #8]
 8012166:	6923      	ldr	r3, [r4, #16]
 8012168:	4620      	mov	r0, r4
 801216a:	f1c6 0804 	rsb	r8, r6, #4
 801216e:	4433      	add	r3, r6
 8012170:	4641      	mov	r1, r8
 8012172:	6123      	str	r3, [r4, #16]
 8012174:	f001 f858 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012178:	2800      	cmp	r0, #0
 801217a:	d04c      	beq.n	8012216 <ucdr_serialize_uint32_t+0xe2>
 801217c:	7d23      	ldrb	r3, [r4, #20]
 801217e:	2b01      	cmp	r3, #1
 8012180:	d063      	beq.n	801224a <ucdr_serialize_uint32_t+0x116>
 8012182:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012186:	702b      	strb	r3, [r5, #0]
 8012188:	2e00      	cmp	r6, #0
 801218a:	d051      	beq.n	8012230 <ucdr_serialize_uint32_t+0xfc>
 801218c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012190:	2e01      	cmp	r6, #1
 8012192:	706b      	strb	r3, [r5, #1]
 8012194:	d050      	beq.n	8012238 <ucdr_serialize_uint32_t+0x104>
 8012196:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801219a:	2e02      	cmp	r6, #2
 801219c:	70ab      	strb	r3, [r5, #2]
 801219e:	d04f      	beq.n	8012240 <ucdr_serialize_uint32_t+0x10c>
 80121a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80121a4:	70eb      	strb	r3, [r5, #3]
 80121a6:	6923      	ldr	r3, [r4, #16]
 80121a8:	2104      	movs	r1, #4
 80121aa:	68a2      	ldr	r2, [r4, #8]
 80121ac:	3304      	adds	r3, #4
 80121ae:	7da0      	ldrb	r0, [r4, #22]
 80121b0:	4442      	add	r2, r8
 80121b2:	7561      	strb	r1, [r4, #21]
 80121b4:	1b9e      	subs	r6, r3, r6
 80121b6:	f080 0001 	eor.w	r0, r0, #1
 80121ba:	60a2      	str	r2, [r4, #8]
 80121bc:	6126      	str	r6, [r4, #16]
 80121be:	b002      	add	sp, #8
 80121c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c4:	2104      	movs	r1, #4
 80121c6:	4620      	mov	r0, r4
 80121c8:	f001 f82e 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80121cc:	b1d0      	cbz	r0, 8012204 <ucdr_serialize_uint32_t+0xd0>
 80121ce:	7d23      	ldrb	r3, [r4, #20]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	68a3      	ldr	r3, [r4, #8]
 80121d4:	d01c      	beq.n	8012210 <ucdr_serialize_uint32_t+0xdc>
 80121d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80121da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121de:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80121e2:	7018      	strb	r0, [r3, #0]
 80121e4:	68a3      	ldr	r3, [r4, #8]
 80121e6:	705a      	strb	r2, [r3, #1]
 80121e8:	68a3      	ldr	r3, [r4, #8]
 80121ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80121ee:	7099      	strb	r1, [r3, #2]
 80121f0:	68a3      	ldr	r3, [r4, #8]
 80121f2:	70da      	strb	r2, [r3, #3]
 80121f4:	2104      	movs	r1, #4
 80121f6:	68a2      	ldr	r2, [r4, #8]
 80121f8:	6923      	ldr	r3, [r4, #16]
 80121fa:	440a      	add	r2, r1
 80121fc:	7561      	strb	r1, [r4, #21]
 80121fe:	440b      	add	r3, r1
 8012200:	60a2      	str	r2, [r4, #8]
 8012202:	6123      	str	r3, [r4, #16]
 8012204:	7da0      	ldrb	r0, [r4, #22]
 8012206:	f080 0001 	eor.w	r0, r0, #1
 801220a:	b002      	add	sp, #8
 801220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012210:	9a01      	ldr	r2, [sp, #4]
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	e7ee      	b.n	80121f4 <ucdr_serialize_uint32_t+0xc0>
 8012216:	68a2      	ldr	r2, [r4, #8]
 8012218:	6923      	ldr	r3, [r4, #16]
 801221a:	7da0      	ldrb	r0, [r4, #22]
 801221c:	1b92      	subs	r2, r2, r6
 801221e:	1b9b      	subs	r3, r3, r6
 8012220:	7567      	strb	r7, [r4, #21]
 8012222:	f080 0001 	eor.w	r0, r0, #1
 8012226:	60a2      	str	r2, [r4, #8]
 8012228:	6123      	str	r3, [r4, #16]
 801222a:	b002      	add	sp, #8
 801222c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012230:	68a3      	ldr	r3, [r4, #8]
 8012232:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012236:	701a      	strb	r2, [r3, #0]
 8012238:	68a3      	ldr	r3, [r4, #8]
 801223a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801223e:	701a      	strb	r2, [r3, #0]
 8012240:	68a3      	ldr	r3, [r4, #8]
 8012242:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012246:	701a      	strb	r2, [r3, #0]
 8012248:	e7ad      	b.n	80121a6 <ucdr_serialize_uint32_t+0x72>
 801224a:	4628      	mov	r0, r5
 801224c:	ad01      	add	r5, sp, #4
 801224e:	4632      	mov	r2, r6
 8012250:	4629      	mov	r1, r5
 8012252:	f00e fe68 	bl	8020f26 <memcpy>
 8012256:	4642      	mov	r2, r8
 8012258:	19a9      	adds	r1, r5, r6
 801225a:	68a0      	ldr	r0, [r4, #8]
 801225c:	f00e fe63 	bl	8020f26 <memcpy>
 8012260:	e7a1      	b.n	80121a6 <ucdr_serialize_uint32_t+0x72>
 8012262:	bf00      	nop

08012264 <ucdr_serialize_endian_uint32_t>:
 8012264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012268:	4604      	mov	r4, r0
 801226a:	b083      	sub	sp, #12
 801226c:	460d      	mov	r5, r1
 801226e:	2104      	movs	r1, #4
 8012270:	9201      	str	r2, [sp, #4]
 8012272:	f001 f82d 	bl	80132d0 <ucdr_buffer_alignment>
 8012276:	4601      	mov	r1, r0
 8012278:	4620      	mov	r0, r4
 801227a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801227e:	f001 f86f 	bl	8013360 <ucdr_advance_buffer>
 8012282:	2104      	movs	r1, #4
 8012284:	4620      	mov	r0, r4
 8012286:	f000 ffc3 	bl	8013210 <ucdr_check_buffer_available_for>
 801228a:	2800      	cmp	r0, #0
 801228c:	d138      	bne.n	8012300 <ucdr_serialize_endian_uint32_t+0x9c>
 801228e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012292:	42b7      	cmp	r7, r6
 8012294:	d92f      	bls.n	80122f6 <ucdr_serialize_endian_uint32_t+0x92>
 8012296:	6923      	ldr	r3, [r4, #16]
 8012298:	4620      	mov	r0, r4
 801229a:	60a7      	str	r7, [r4, #8]
 801229c:	1bbf      	subs	r7, r7, r6
 801229e:	443b      	add	r3, r7
 80122a0:	f1c7 0904 	rsb	r9, r7, #4
 80122a4:	6123      	str	r3, [r4, #16]
 80122a6:	4649      	mov	r1, r9
 80122a8:	f000 ffbe 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80122ac:	2800      	cmp	r0, #0
 80122ae:	d04a      	beq.n	8012346 <ucdr_serialize_endian_uint32_t+0xe2>
 80122b0:	2d01      	cmp	r5, #1
 80122b2:	d063      	beq.n	801237c <ucdr_serialize_endian_uint32_t+0x118>
 80122b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80122b8:	7033      	strb	r3, [r6, #0]
 80122ba:	2f00      	cmp	r7, #0
 80122bc:	d051      	beq.n	8012362 <ucdr_serialize_endian_uint32_t+0xfe>
 80122be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80122c2:	2f01      	cmp	r7, #1
 80122c4:	7073      	strb	r3, [r6, #1]
 80122c6:	d050      	beq.n	801236a <ucdr_serialize_endian_uint32_t+0x106>
 80122c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80122cc:	2f02      	cmp	r7, #2
 80122ce:	70b3      	strb	r3, [r6, #2]
 80122d0:	d04f      	beq.n	8012372 <ucdr_serialize_endian_uint32_t+0x10e>
 80122d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80122d6:	70f3      	strb	r3, [r6, #3]
 80122d8:	6923      	ldr	r3, [r4, #16]
 80122da:	2104      	movs	r1, #4
 80122dc:	68a2      	ldr	r2, [r4, #8]
 80122de:	7da0      	ldrb	r0, [r4, #22]
 80122e0:	3304      	adds	r3, #4
 80122e2:	444a      	add	r2, r9
 80122e4:	7561      	strb	r1, [r4, #21]
 80122e6:	1bdb      	subs	r3, r3, r7
 80122e8:	f080 0001 	eor.w	r0, r0, #1
 80122ec:	60a2      	str	r2, [r4, #8]
 80122ee:	6123      	str	r3, [r4, #16]
 80122f0:	b003      	add	sp, #12
 80122f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122f6:	2104      	movs	r1, #4
 80122f8:	4620      	mov	r0, r4
 80122fa:	f000 ff95 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80122fe:	b1c8      	cbz	r0, 8012334 <ucdr_serialize_endian_uint32_t+0xd0>
 8012300:	2d01      	cmp	r5, #1
 8012302:	68a3      	ldr	r3, [r4, #8]
 8012304:	d01c      	beq.n	8012340 <ucdr_serialize_endian_uint32_t+0xdc>
 8012306:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801230a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801230e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012312:	7018      	strb	r0, [r3, #0]
 8012314:	68a3      	ldr	r3, [r4, #8]
 8012316:	705a      	strb	r2, [r3, #1]
 8012318:	68a3      	ldr	r3, [r4, #8]
 801231a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801231e:	7099      	strb	r1, [r3, #2]
 8012320:	68a3      	ldr	r3, [r4, #8]
 8012322:	70da      	strb	r2, [r3, #3]
 8012324:	2104      	movs	r1, #4
 8012326:	68a2      	ldr	r2, [r4, #8]
 8012328:	6923      	ldr	r3, [r4, #16]
 801232a:	440a      	add	r2, r1
 801232c:	7561      	strb	r1, [r4, #21]
 801232e:	440b      	add	r3, r1
 8012330:	60a2      	str	r2, [r4, #8]
 8012332:	6123      	str	r3, [r4, #16]
 8012334:	7da0      	ldrb	r0, [r4, #22]
 8012336:	f080 0001 	eor.w	r0, r0, #1
 801233a:	b003      	add	sp, #12
 801233c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012340:	9a01      	ldr	r2, [sp, #4]
 8012342:	601a      	str	r2, [r3, #0]
 8012344:	e7ee      	b.n	8012324 <ucdr_serialize_endian_uint32_t+0xc0>
 8012346:	68a2      	ldr	r2, [r4, #8]
 8012348:	6923      	ldr	r3, [r4, #16]
 801234a:	7da0      	ldrb	r0, [r4, #22]
 801234c:	1bd2      	subs	r2, r2, r7
 801234e:	1bdb      	subs	r3, r3, r7
 8012350:	f884 8015 	strb.w	r8, [r4, #21]
 8012354:	f080 0001 	eor.w	r0, r0, #1
 8012358:	60a2      	str	r2, [r4, #8]
 801235a:	6123      	str	r3, [r4, #16]
 801235c:	b003      	add	sp, #12
 801235e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012362:	68a3      	ldr	r3, [r4, #8]
 8012364:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012368:	701a      	strb	r2, [r3, #0]
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012370:	701a      	strb	r2, [r3, #0]
 8012372:	68a3      	ldr	r3, [r4, #8]
 8012374:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012378:	701a      	strb	r2, [r3, #0]
 801237a:	e7ad      	b.n	80122d8 <ucdr_serialize_endian_uint32_t+0x74>
 801237c:	ad01      	add	r5, sp, #4
 801237e:	463a      	mov	r2, r7
 8012380:	4630      	mov	r0, r6
 8012382:	4629      	mov	r1, r5
 8012384:	f00e fdcf 	bl	8020f26 <memcpy>
 8012388:	464a      	mov	r2, r9
 801238a:	19e9      	adds	r1, r5, r7
 801238c:	68a0      	ldr	r0, [r4, #8]
 801238e:	f00e fdca 	bl	8020f26 <memcpy>
 8012392:	e7a1      	b.n	80122d8 <ucdr_serialize_endian_uint32_t+0x74>

08012394 <ucdr_deserialize_uint32_t>:
 8012394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012398:	4604      	mov	r4, r0
 801239a:	460d      	mov	r5, r1
 801239c:	2104      	movs	r1, #4
 801239e:	f000 ff97 	bl	80132d0 <ucdr_buffer_alignment>
 80123a2:	4601      	mov	r1, r0
 80123a4:	4620      	mov	r0, r4
 80123a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80123aa:	f000 ffd9 	bl	8013360 <ucdr_advance_buffer>
 80123ae:	2104      	movs	r1, #4
 80123b0:	4620      	mov	r0, r4
 80123b2:	f000 ff2d 	bl	8013210 <ucdr_check_buffer_available_for>
 80123b6:	2800      	cmp	r0, #0
 80123b8:	d138      	bne.n	801242c <ucdr_deserialize_uint32_t+0x98>
 80123ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80123be:	42b7      	cmp	r7, r6
 80123c0:	d92f      	bls.n	8012422 <ucdr_deserialize_uint32_t+0x8e>
 80123c2:	6923      	ldr	r3, [r4, #16]
 80123c4:	4620      	mov	r0, r4
 80123c6:	60a7      	str	r7, [r4, #8]
 80123c8:	1bbf      	subs	r7, r7, r6
 80123ca:	443b      	add	r3, r7
 80123cc:	f1c7 0904 	rsb	r9, r7, #4
 80123d0:	6123      	str	r3, [r4, #16]
 80123d2:	4649      	mov	r1, r9
 80123d4:	f000 ff28 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80123d8:	2800      	cmp	r0, #0
 80123da:	d046      	beq.n	801246a <ucdr_deserialize_uint32_t+0xd6>
 80123dc:	7d23      	ldrb	r3, [r4, #20]
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d05c      	beq.n	801249c <ucdr_deserialize_uint32_t+0x108>
 80123e2:	78f3      	ldrb	r3, [r6, #3]
 80123e4:	702b      	strb	r3, [r5, #0]
 80123e6:	2f00      	cmp	r7, #0
 80123e8:	d04c      	beq.n	8012484 <ucdr_deserialize_uint32_t+0xf0>
 80123ea:	78b3      	ldrb	r3, [r6, #2]
 80123ec:	2f01      	cmp	r7, #1
 80123ee:	706b      	strb	r3, [r5, #1]
 80123f0:	f105 0302 	add.w	r3, r5, #2
 80123f4:	d04a      	beq.n	801248c <ucdr_deserialize_uint32_t+0xf8>
 80123f6:	7873      	ldrb	r3, [r6, #1]
 80123f8:	2f02      	cmp	r7, #2
 80123fa:	70ab      	strb	r3, [r5, #2]
 80123fc:	f105 0303 	add.w	r3, r5, #3
 8012400:	d048      	beq.n	8012494 <ucdr_deserialize_uint32_t+0x100>
 8012402:	7833      	ldrb	r3, [r6, #0]
 8012404:	70eb      	strb	r3, [r5, #3]
 8012406:	6923      	ldr	r3, [r4, #16]
 8012408:	2104      	movs	r1, #4
 801240a:	68a2      	ldr	r2, [r4, #8]
 801240c:	3304      	adds	r3, #4
 801240e:	7da0      	ldrb	r0, [r4, #22]
 8012410:	444a      	add	r2, r9
 8012412:	7561      	strb	r1, [r4, #21]
 8012414:	1bdb      	subs	r3, r3, r7
 8012416:	f080 0001 	eor.w	r0, r0, #1
 801241a:	60a2      	str	r2, [r4, #8]
 801241c:	6123      	str	r3, [r4, #16]
 801241e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012422:	2104      	movs	r1, #4
 8012424:	4620      	mov	r0, r4
 8012426:	f000 feff 	bl	8013228 <ucdr_check_final_buffer_behavior>
 801242a:	b1b0      	cbz	r0, 801245a <ucdr_deserialize_uint32_t+0xc6>
 801242c:	7d23      	ldrb	r3, [r4, #20]
 801242e:	2b01      	cmp	r3, #1
 8012430:	68a3      	ldr	r3, [r4, #8]
 8012432:	d017      	beq.n	8012464 <ucdr_deserialize_uint32_t+0xd0>
 8012434:	78db      	ldrb	r3, [r3, #3]
 8012436:	702b      	strb	r3, [r5, #0]
 8012438:	68a3      	ldr	r3, [r4, #8]
 801243a:	789b      	ldrb	r3, [r3, #2]
 801243c:	706b      	strb	r3, [r5, #1]
 801243e:	68a3      	ldr	r3, [r4, #8]
 8012440:	785b      	ldrb	r3, [r3, #1]
 8012442:	70ab      	strb	r3, [r5, #2]
 8012444:	68a3      	ldr	r3, [r4, #8]
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	70eb      	strb	r3, [r5, #3]
 801244a:	2104      	movs	r1, #4
 801244c:	68a2      	ldr	r2, [r4, #8]
 801244e:	6923      	ldr	r3, [r4, #16]
 8012450:	440a      	add	r2, r1
 8012452:	7561      	strb	r1, [r4, #21]
 8012454:	440b      	add	r3, r1
 8012456:	60a2      	str	r2, [r4, #8]
 8012458:	6123      	str	r3, [r4, #16]
 801245a:	7da0      	ldrb	r0, [r4, #22]
 801245c:	f080 0001 	eor.w	r0, r0, #1
 8012460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	602b      	str	r3, [r5, #0]
 8012468:	e7ef      	b.n	801244a <ucdr_deserialize_uint32_t+0xb6>
 801246a:	68a2      	ldr	r2, [r4, #8]
 801246c:	6923      	ldr	r3, [r4, #16]
 801246e:	1bd2      	subs	r2, r2, r7
 8012470:	7da0      	ldrb	r0, [r4, #22]
 8012472:	1bdb      	subs	r3, r3, r7
 8012474:	f884 8015 	strb.w	r8, [r4, #21]
 8012478:	f080 0001 	eor.w	r0, r0, #1
 801247c:	60a2      	str	r2, [r4, #8]
 801247e:	6123      	str	r3, [r4, #16]
 8012480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012484:	68a3      	ldr	r3, [r4, #8]
 8012486:	789b      	ldrb	r3, [r3, #2]
 8012488:	706b      	strb	r3, [r5, #1]
 801248a:	1cab      	adds	r3, r5, #2
 801248c:	68a2      	ldr	r2, [r4, #8]
 801248e:	7852      	ldrb	r2, [r2, #1]
 8012490:	f803 2b01 	strb.w	r2, [r3], #1
 8012494:	68a2      	ldr	r2, [r4, #8]
 8012496:	7812      	ldrb	r2, [r2, #0]
 8012498:	701a      	strb	r2, [r3, #0]
 801249a:	e7b4      	b.n	8012406 <ucdr_deserialize_uint32_t+0x72>
 801249c:	4631      	mov	r1, r6
 801249e:	463a      	mov	r2, r7
 80124a0:	4628      	mov	r0, r5
 80124a2:	f00e fd40 	bl	8020f26 <memcpy>
 80124a6:	464a      	mov	r2, r9
 80124a8:	19e8      	adds	r0, r5, r7
 80124aa:	68a1      	ldr	r1, [r4, #8]
 80124ac:	f00e fd3b 	bl	8020f26 <memcpy>
 80124b0:	e7a9      	b.n	8012406 <ucdr_deserialize_uint32_t+0x72>
 80124b2:	bf00      	nop

080124b4 <ucdr_deserialize_endian_uint32_t>:
 80124b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124b8:	4604      	mov	r4, r0
 80124ba:	460e      	mov	r6, r1
 80124bc:	2104      	movs	r1, #4
 80124be:	4615      	mov	r5, r2
 80124c0:	f000 ff06 	bl	80132d0 <ucdr_buffer_alignment>
 80124c4:	4601      	mov	r1, r0
 80124c6:	4620      	mov	r0, r4
 80124c8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80124cc:	f000 ff48 	bl	8013360 <ucdr_advance_buffer>
 80124d0:	2104      	movs	r1, #4
 80124d2:	4620      	mov	r0, r4
 80124d4:	f000 fe9c 	bl	8013210 <ucdr_check_buffer_available_for>
 80124d8:	2800      	cmp	r0, #0
 80124da:	d13c      	bne.n	8012556 <ucdr_deserialize_endian_uint32_t+0xa2>
 80124dc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80124e0:	42bb      	cmp	r3, r7
 80124e2:	d933      	bls.n	801254c <ucdr_deserialize_endian_uint32_t+0x98>
 80124e4:	eba3 0907 	sub.w	r9, r3, r7
 80124e8:	60a3      	str	r3, [r4, #8]
 80124ea:	6923      	ldr	r3, [r4, #16]
 80124ec:	4620      	mov	r0, r4
 80124ee:	f1c9 0a04 	rsb	sl, r9, #4
 80124f2:	444b      	add	r3, r9
 80124f4:	4651      	mov	r1, sl
 80124f6:	6123      	str	r3, [r4, #16]
 80124f8:	f000 fe96 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80124fc:	2800      	cmp	r0, #0
 80124fe:	d048      	beq.n	8012592 <ucdr_deserialize_endian_uint32_t+0xde>
 8012500:	2e01      	cmp	r6, #1
 8012502:	d061      	beq.n	80125c8 <ucdr_deserialize_endian_uint32_t+0x114>
 8012504:	78fb      	ldrb	r3, [r7, #3]
 8012506:	702b      	strb	r3, [r5, #0]
 8012508:	f1b9 0f00 	cmp.w	r9, #0
 801250c:	d050      	beq.n	80125b0 <ucdr_deserialize_endian_uint32_t+0xfc>
 801250e:	78bb      	ldrb	r3, [r7, #2]
 8012510:	f1b9 0f01 	cmp.w	r9, #1
 8012514:	706b      	strb	r3, [r5, #1]
 8012516:	f105 0302 	add.w	r3, r5, #2
 801251a:	d04d      	beq.n	80125b8 <ucdr_deserialize_endian_uint32_t+0x104>
 801251c:	787b      	ldrb	r3, [r7, #1]
 801251e:	f1b9 0f02 	cmp.w	r9, #2
 8012522:	70ab      	strb	r3, [r5, #2]
 8012524:	f105 0303 	add.w	r3, r5, #3
 8012528:	d04a      	beq.n	80125c0 <ucdr_deserialize_endian_uint32_t+0x10c>
 801252a:	783b      	ldrb	r3, [r7, #0]
 801252c:	70eb      	strb	r3, [r5, #3]
 801252e:	6923      	ldr	r3, [r4, #16]
 8012530:	2104      	movs	r1, #4
 8012532:	68a2      	ldr	r2, [r4, #8]
 8012534:	3304      	adds	r3, #4
 8012536:	7da0      	ldrb	r0, [r4, #22]
 8012538:	4452      	add	r2, sl
 801253a:	7561      	strb	r1, [r4, #21]
 801253c:	eba3 0309 	sub.w	r3, r3, r9
 8012540:	f080 0001 	eor.w	r0, r0, #1
 8012544:	60a2      	str	r2, [r4, #8]
 8012546:	6123      	str	r3, [r4, #16]
 8012548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801254c:	2104      	movs	r1, #4
 801254e:	4620      	mov	r0, r4
 8012550:	f000 fe6a 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012554:	b1a8      	cbz	r0, 8012582 <ucdr_deserialize_endian_uint32_t+0xce>
 8012556:	2e01      	cmp	r6, #1
 8012558:	68a3      	ldr	r3, [r4, #8]
 801255a:	d017      	beq.n	801258c <ucdr_deserialize_endian_uint32_t+0xd8>
 801255c:	78db      	ldrb	r3, [r3, #3]
 801255e:	702b      	strb	r3, [r5, #0]
 8012560:	68a3      	ldr	r3, [r4, #8]
 8012562:	789b      	ldrb	r3, [r3, #2]
 8012564:	706b      	strb	r3, [r5, #1]
 8012566:	68a3      	ldr	r3, [r4, #8]
 8012568:	785b      	ldrb	r3, [r3, #1]
 801256a:	70ab      	strb	r3, [r5, #2]
 801256c:	68a3      	ldr	r3, [r4, #8]
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	70eb      	strb	r3, [r5, #3]
 8012572:	2104      	movs	r1, #4
 8012574:	68a2      	ldr	r2, [r4, #8]
 8012576:	6923      	ldr	r3, [r4, #16]
 8012578:	440a      	add	r2, r1
 801257a:	7561      	strb	r1, [r4, #21]
 801257c:	440b      	add	r3, r1
 801257e:	60a2      	str	r2, [r4, #8]
 8012580:	6123      	str	r3, [r4, #16]
 8012582:	7da0      	ldrb	r0, [r4, #22]
 8012584:	f080 0001 	eor.w	r0, r0, #1
 8012588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	602b      	str	r3, [r5, #0]
 8012590:	e7ef      	b.n	8012572 <ucdr_deserialize_endian_uint32_t+0xbe>
 8012592:	68a2      	ldr	r2, [r4, #8]
 8012594:	6923      	ldr	r3, [r4, #16]
 8012596:	eba2 0209 	sub.w	r2, r2, r9
 801259a:	7da0      	ldrb	r0, [r4, #22]
 801259c:	eba3 0309 	sub.w	r3, r3, r9
 80125a0:	f884 8015 	strb.w	r8, [r4, #21]
 80125a4:	f080 0001 	eor.w	r0, r0, #1
 80125a8:	60a2      	str	r2, [r4, #8]
 80125aa:	6123      	str	r3, [r4, #16]
 80125ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b0:	68a3      	ldr	r3, [r4, #8]
 80125b2:	789b      	ldrb	r3, [r3, #2]
 80125b4:	706b      	strb	r3, [r5, #1]
 80125b6:	1cab      	adds	r3, r5, #2
 80125b8:	68a2      	ldr	r2, [r4, #8]
 80125ba:	7852      	ldrb	r2, [r2, #1]
 80125bc:	f803 2b01 	strb.w	r2, [r3], #1
 80125c0:	68a2      	ldr	r2, [r4, #8]
 80125c2:	7812      	ldrb	r2, [r2, #0]
 80125c4:	701a      	strb	r2, [r3, #0]
 80125c6:	e7b2      	b.n	801252e <ucdr_deserialize_endian_uint32_t+0x7a>
 80125c8:	4639      	mov	r1, r7
 80125ca:	464a      	mov	r2, r9
 80125cc:	4628      	mov	r0, r5
 80125ce:	f00e fcaa 	bl	8020f26 <memcpy>
 80125d2:	4652      	mov	r2, sl
 80125d4:	eb05 0009 	add.w	r0, r5, r9
 80125d8:	68a1      	ldr	r1, [r4, #8]
 80125da:	f00e fca4 	bl	8020f26 <memcpy>
 80125de:	e7a6      	b.n	801252e <ucdr_deserialize_endian_uint32_t+0x7a>

080125e0 <ucdr_serialize_uint64_t>:
 80125e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125e4:	4604      	mov	r4, r0
 80125e6:	b082      	sub	sp, #8
 80125e8:	2108      	movs	r1, #8
 80125ea:	e9cd 2300 	strd	r2, r3, [sp]
 80125ee:	f000 fe6f 	bl	80132d0 <ucdr_buffer_alignment>
 80125f2:	4601      	mov	r1, r0
 80125f4:	4620      	mov	r0, r4
 80125f6:	7d67      	ldrb	r7, [r4, #21]
 80125f8:	f000 feb2 	bl	8013360 <ucdr_advance_buffer>
 80125fc:	2108      	movs	r1, #8
 80125fe:	4620      	mov	r0, r4
 8012600:	f000 fe06 	bl	8013210 <ucdr_check_buffer_available_for>
 8012604:	2800      	cmp	r0, #0
 8012606:	d14e      	bne.n	80126a6 <ucdr_serialize_uint64_t+0xc6>
 8012608:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801260c:	42ab      	cmp	r3, r5
 801260e:	d945      	bls.n	801269c <ucdr_serialize_uint64_t+0xbc>
 8012610:	1b5e      	subs	r6, r3, r5
 8012612:	60a3      	str	r3, [r4, #8]
 8012614:	6923      	ldr	r3, [r4, #16]
 8012616:	4620      	mov	r0, r4
 8012618:	f1c6 0808 	rsb	r8, r6, #8
 801261c:	4433      	add	r3, r6
 801261e:	4641      	mov	r1, r8
 8012620:	6123      	str	r3, [r4, #16]
 8012622:	f000 fe01 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012626:	2800      	cmp	r0, #0
 8012628:	d074      	beq.n	8012714 <ucdr_serialize_uint64_t+0x134>
 801262a:	7d23      	ldrb	r3, [r4, #20]
 801262c:	2b01      	cmp	r3, #1
 801262e:	f000 809b 	beq.w	8012768 <ucdr_serialize_uint64_t+0x188>
 8012632:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012636:	702b      	strb	r3, [r5, #0]
 8012638:	2e00      	cmp	r6, #0
 801263a:	d078      	beq.n	801272e <ucdr_serialize_uint64_t+0x14e>
 801263c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012640:	2e01      	cmp	r6, #1
 8012642:	706b      	strb	r3, [r5, #1]
 8012644:	d077      	beq.n	8012736 <ucdr_serialize_uint64_t+0x156>
 8012646:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801264a:	2e02      	cmp	r6, #2
 801264c:	70ab      	strb	r3, [r5, #2]
 801264e:	d076      	beq.n	801273e <ucdr_serialize_uint64_t+0x15e>
 8012650:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012654:	2e03      	cmp	r6, #3
 8012656:	70eb      	strb	r3, [r5, #3]
 8012658:	d075      	beq.n	8012746 <ucdr_serialize_uint64_t+0x166>
 801265a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801265e:	2e04      	cmp	r6, #4
 8012660:	712b      	strb	r3, [r5, #4]
 8012662:	d074      	beq.n	801274e <ucdr_serialize_uint64_t+0x16e>
 8012664:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012668:	2e05      	cmp	r6, #5
 801266a:	716b      	strb	r3, [r5, #5]
 801266c:	d073      	beq.n	8012756 <ucdr_serialize_uint64_t+0x176>
 801266e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012672:	2e06      	cmp	r6, #6
 8012674:	71ab      	strb	r3, [r5, #6]
 8012676:	d072      	beq.n	801275e <ucdr_serialize_uint64_t+0x17e>
 8012678:	f89d 3000 	ldrb.w	r3, [sp]
 801267c:	71eb      	strb	r3, [r5, #7]
 801267e:	6923      	ldr	r3, [r4, #16]
 8012680:	2108      	movs	r1, #8
 8012682:	68a2      	ldr	r2, [r4, #8]
 8012684:	3308      	adds	r3, #8
 8012686:	7da0      	ldrb	r0, [r4, #22]
 8012688:	4442      	add	r2, r8
 801268a:	7561      	strb	r1, [r4, #21]
 801268c:	1b9e      	subs	r6, r3, r6
 801268e:	f080 0001 	eor.w	r0, r0, #1
 8012692:	60a2      	str	r2, [r4, #8]
 8012694:	6126      	str	r6, [r4, #16]
 8012696:	b002      	add	sp, #8
 8012698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801269c:	2108      	movs	r1, #8
 801269e:	4620      	mov	r0, r4
 80126a0:	f000 fdc2 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80126a4:	b350      	cbz	r0, 80126fc <ucdr_serialize_uint64_t+0x11c>
 80126a6:	7d23      	ldrb	r3, [r4, #20]
 80126a8:	2b01      	cmp	r3, #1
 80126aa:	d02d      	beq.n	8012708 <ucdr_serialize_uint64_t+0x128>
 80126ac:	68a3      	ldr	r3, [r4, #8]
 80126ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80126b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80126b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80126ba:	7018      	strb	r0, [r3, #0]
 80126bc:	68a3      	ldr	r3, [r4, #8]
 80126be:	705a      	strb	r2, [r3, #1]
 80126c0:	68a3      	ldr	r3, [r4, #8]
 80126c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80126c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80126ca:	7099      	strb	r1, [r3, #2]
 80126cc:	68a3      	ldr	r3, [r4, #8]
 80126ce:	70da      	strb	r2, [r3, #3]
 80126d0:	68a3      	ldr	r3, [r4, #8]
 80126d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80126d6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80126da:	7118      	strb	r0, [r3, #4]
 80126dc:	68a3      	ldr	r3, [r4, #8]
 80126de:	715a      	strb	r2, [r3, #5]
 80126e0:	68a3      	ldr	r3, [r4, #8]
 80126e2:	f89d 2000 	ldrb.w	r2, [sp]
 80126e6:	7199      	strb	r1, [r3, #6]
 80126e8:	68a3      	ldr	r3, [r4, #8]
 80126ea:	71da      	strb	r2, [r3, #7]
 80126ec:	2108      	movs	r1, #8
 80126ee:	68a2      	ldr	r2, [r4, #8]
 80126f0:	6923      	ldr	r3, [r4, #16]
 80126f2:	440a      	add	r2, r1
 80126f4:	7561      	strb	r1, [r4, #21]
 80126f6:	440b      	add	r3, r1
 80126f8:	60a2      	str	r2, [r4, #8]
 80126fa:	6123      	str	r3, [r4, #16]
 80126fc:	7da0      	ldrb	r0, [r4, #22]
 80126fe:	f080 0001 	eor.w	r0, r0, #1
 8012702:	b002      	add	sp, #8
 8012704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012708:	466b      	mov	r3, sp
 801270a:	68a2      	ldr	r2, [r4, #8]
 801270c:	cb03      	ldmia	r3!, {r0, r1}
 801270e:	6010      	str	r0, [r2, #0]
 8012710:	6051      	str	r1, [r2, #4]
 8012712:	e7eb      	b.n	80126ec <ucdr_serialize_uint64_t+0x10c>
 8012714:	68a2      	ldr	r2, [r4, #8]
 8012716:	6923      	ldr	r3, [r4, #16]
 8012718:	7da0      	ldrb	r0, [r4, #22]
 801271a:	1b92      	subs	r2, r2, r6
 801271c:	1b9b      	subs	r3, r3, r6
 801271e:	7567      	strb	r7, [r4, #21]
 8012720:	f080 0001 	eor.w	r0, r0, #1
 8012724:	60a2      	str	r2, [r4, #8]
 8012726:	6123      	str	r3, [r4, #16]
 8012728:	b002      	add	sp, #8
 801272a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801272e:	68a3      	ldr	r3, [r4, #8]
 8012730:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012734:	701a      	strb	r2, [r3, #0]
 8012736:	68a3      	ldr	r3, [r4, #8]
 8012738:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801273c:	701a      	strb	r2, [r3, #0]
 801273e:	68a3      	ldr	r3, [r4, #8]
 8012740:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012744:	701a      	strb	r2, [r3, #0]
 8012746:	68a3      	ldr	r3, [r4, #8]
 8012748:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801274c:	701a      	strb	r2, [r3, #0]
 801274e:	68a3      	ldr	r3, [r4, #8]
 8012750:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012754:	701a      	strb	r2, [r3, #0]
 8012756:	68a3      	ldr	r3, [r4, #8]
 8012758:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801275c:	701a      	strb	r2, [r3, #0]
 801275e:	68a3      	ldr	r3, [r4, #8]
 8012760:	f89d 2000 	ldrb.w	r2, [sp]
 8012764:	701a      	strb	r2, [r3, #0]
 8012766:	e78a      	b.n	801267e <ucdr_serialize_uint64_t+0x9e>
 8012768:	4628      	mov	r0, r5
 801276a:	466d      	mov	r5, sp
 801276c:	4632      	mov	r2, r6
 801276e:	4629      	mov	r1, r5
 8012770:	f00e fbd9 	bl	8020f26 <memcpy>
 8012774:	4642      	mov	r2, r8
 8012776:	19a9      	adds	r1, r5, r6
 8012778:	68a0      	ldr	r0, [r4, #8]
 801277a:	f00e fbd4 	bl	8020f26 <memcpy>
 801277e:	e77e      	b.n	801267e <ucdr_serialize_uint64_t+0x9e>

08012780 <ucdr_serialize_int16_t>:
 8012780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012784:	460b      	mov	r3, r1
 8012786:	b082      	sub	sp, #8
 8012788:	4604      	mov	r4, r0
 801278a:	2102      	movs	r1, #2
 801278c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012790:	f000 fd9e 	bl	80132d0 <ucdr_buffer_alignment>
 8012794:	4601      	mov	r1, r0
 8012796:	4620      	mov	r0, r4
 8012798:	7d67      	ldrb	r7, [r4, #21]
 801279a:	f000 fde1 	bl	8013360 <ucdr_advance_buffer>
 801279e:	2102      	movs	r1, #2
 80127a0:	4620      	mov	r0, r4
 80127a2:	f000 fd35 	bl	8013210 <ucdr_check_buffer_available_for>
 80127a6:	bb78      	cbnz	r0, 8012808 <ucdr_serialize_int16_t+0x88>
 80127a8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80127ac:	42ab      	cmp	r3, r5
 80127ae:	d926      	bls.n	80127fe <ucdr_serialize_int16_t+0x7e>
 80127b0:	1b5e      	subs	r6, r3, r5
 80127b2:	60a3      	str	r3, [r4, #8]
 80127b4:	6923      	ldr	r3, [r4, #16]
 80127b6:	4620      	mov	r0, r4
 80127b8:	f1c6 0802 	rsb	r8, r6, #2
 80127bc:	4433      	add	r3, r6
 80127be:	4641      	mov	r1, r8
 80127c0:	6123      	str	r3, [r4, #16]
 80127c2:	f000 fd31 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80127c6:	2800      	cmp	r0, #0
 80127c8:	d03b      	beq.n	8012842 <ucdr_serialize_int16_t+0xc2>
 80127ca:	7d23      	ldrb	r3, [r4, #20]
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d04a      	beq.n	8012866 <ucdr_serialize_int16_t+0xe6>
 80127d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80127d4:	702b      	strb	r3, [r5, #0]
 80127d6:	2e00      	cmp	r6, #0
 80127d8:	d040      	beq.n	801285c <ucdr_serialize_int16_t+0xdc>
 80127da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80127de:	706b      	strb	r3, [r5, #1]
 80127e0:	6923      	ldr	r3, [r4, #16]
 80127e2:	2102      	movs	r1, #2
 80127e4:	68a2      	ldr	r2, [r4, #8]
 80127e6:	3302      	adds	r3, #2
 80127e8:	7da0      	ldrb	r0, [r4, #22]
 80127ea:	4442      	add	r2, r8
 80127ec:	7561      	strb	r1, [r4, #21]
 80127ee:	1b9e      	subs	r6, r3, r6
 80127f0:	f080 0001 	eor.w	r0, r0, #1
 80127f4:	60a2      	str	r2, [r4, #8]
 80127f6:	6126      	str	r6, [r4, #16]
 80127f8:	b002      	add	sp, #8
 80127fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127fe:	2102      	movs	r1, #2
 8012800:	4620      	mov	r0, r4
 8012802:	f000 fd11 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012806:	b190      	cbz	r0, 801282e <ucdr_serialize_int16_t+0xae>
 8012808:	7d23      	ldrb	r3, [r4, #20]
 801280a:	2b01      	cmp	r3, #1
 801280c:	68a3      	ldr	r3, [r4, #8]
 801280e:	d014      	beq.n	801283a <ucdr_serialize_int16_t+0xba>
 8012810:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012814:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012818:	7019      	strb	r1, [r3, #0]
 801281a:	68a3      	ldr	r3, [r4, #8]
 801281c:	705a      	strb	r2, [r3, #1]
 801281e:	2102      	movs	r1, #2
 8012820:	68a2      	ldr	r2, [r4, #8]
 8012822:	6923      	ldr	r3, [r4, #16]
 8012824:	440a      	add	r2, r1
 8012826:	7561      	strb	r1, [r4, #21]
 8012828:	440b      	add	r3, r1
 801282a:	60a2      	str	r2, [r4, #8]
 801282c:	6123      	str	r3, [r4, #16]
 801282e:	7da0      	ldrb	r0, [r4, #22]
 8012830:	f080 0001 	eor.w	r0, r0, #1
 8012834:	b002      	add	sp, #8
 8012836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801283a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801283e:	801a      	strh	r2, [r3, #0]
 8012840:	e7ed      	b.n	801281e <ucdr_serialize_int16_t+0x9e>
 8012842:	68a2      	ldr	r2, [r4, #8]
 8012844:	6923      	ldr	r3, [r4, #16]
 8012846:	7da0      	ldrb	r0, [r4, #22]
 8012848:	1b92      	subs	r2, r2, r6
 801284a:	1b9b      	subs	r3, r3, r6
 801284c:	7567      	strb	r7, [r4, #21]
 801284e:	f080 0001 	eor.w	r0, r0, #1
 8012852:	60a2      	str	r2, [r4, #8]
 8012854:	6123      	str	r3, [r4, #16]
 8012856:	b002      	add	sp, #8
 8012858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801285c:	68a3      	ldr	r3, [r4, #8]
 801285e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012862:	701a      	strb	r2, [r3, #0]
 8012864:	e7bc      	b.n	80127e0 <ucdr_serialize_int16_t+0x60>
 8012866:	4628      	mov	r0, r5
 8012868:	f10d 0506 	add.w	r5, sp, #6
 801286c:	4632      	mov	r2, r6
 801286e:	4629      	mov	r1, r5
 8012870:	f00e fb59 	bl	8020f26 <memcpy>
 8012874:	4642      	mov	r2, r8
 8012876:	19a9      	adds	r1, r5, r6
 8012878:	68a0      	ldr	r0, [r4, #8]
 801287a:	f00e fb54 	bl	8020f26 <memcpy>
 801287e:	e7af      	b.n	80127e0 <ucdr_serialize_int16_t+0x60>

08012880 <ucdr_deserialize_int16_t>:
 8012880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012884:	4604      	mov	r4, r0
 8012886:	460d      	mov	r5, r1
 8012888:	2102      	movs	r1, #2
 801288a:	f000 fd21 	bl	80132d0 <ucdr_buffer_alignment>
 801288e:	4601      	mov	r1, r0
 8012890:	4620      	mov	r0, r4
 8012892:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012896:	f000 fd63 	bl	8013360 <ucdr_advance_buffer>
 801289a:	2102      	movs	r1, #2
 801289c:	4620      	mov	r0, r4
 801289e:	f000 fcb7 	bl	8013210 <ucdr_check_buffer_available_for>
 80128a2:	bb60      	cbnz	r0, 80128fe <ucdr_deserialize_int16_t+0x7e>
 80128a4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80128a8:	42be      	cmp	r6, r7
 80128aa:	d923      	bls.n	80128f4 <ucdr_deserialize_int16_t+0x74>
 80128ac:	6923      	ldr	r3, [r4, #16]
 80128ae:	4620      	mov	r0, r4
 80128b0:	60a6      	str	r6, [r4, #8]
 80128b2:	1bf6      	subs	r6, r6, r7
 80128b4:	4433      	add	r3, r6
 80128b6:	f1c6 0902 	rsb	r9, r6, #2
 80128ba:	6123      	str	r3, [r4, #16]
 80128bc:	4649      	mov	r1, r9
 80128be:	f000 fcb3 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d034      	beq.n	8012930 <ucdr_deserialize_int16_t+0xb0>
 80128c6:	7d23      	ldrb	r3, [r4, #20]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d042      	beq.n	8012952 <ucdr_deserialize_int16_t+0xd2>
 80128cc:	787b      	ldrb	r3, [r7, #1]
 80128ce:	702b      	strb	r3, [r5, #0]
 80128d0:	2e00      	cmp	r6, #0
 80128d2:	d03a      	beq.n	801294a <ucdr_deserialize_int16_t+0xca>
 80128d4:	783b      	ldrb	r3, [r7, #0]
 80128d6:	706b      	strb	r3, [r5, #1]
 80128d8:	6923      	ldr	r3, [r4, #16]
 80128da:	2102      	movs	r1, #2
 80128dc:	68a2      	ldr	r2, [r4, #8]
 80128de:	3302      	adds	r3, #2
 80128e0:	7da0      	ldrb	r0, [r4, #22]
 80128e2:	444a      	add	r2, r9
 80128e4:	7561      	strb	r1, [r4, #21]
 80128e6:	1b9b      	subs	r3, r3, r6
 80128e8:	f080 0001 	eor.w	r0, r0, #1
 80128ec:	60a2      	str	r2, [r4, #8]
 80128ee:	6123      	str	r3, [r4, #16]
 80128f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128f4:	2102      	movs	r1, #2
 80128f6:	4620      	mov	r0, r4
 80128f8:	f000 fc96 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80128fc:	b180      	cbz	r0, 8012920 <ucdr_deserialize_int16_t+0xa0>
 80128fe:	7d23      	ldrb	r3, [r4, #20]
 8012900:	2b01      	cmp	r3, #1
 8012902:	68a3      	ldr	r3, [r4, #8]
 8012904:	d011      	beq.n	801292a <ucdr_deserialize_int16_t+0xaa>
 8012906:	785b      	ldrb	r3, [r3, #1]
 8012908:	702b      	strb	r3, [r5, #0]
 801290a:	68a3      	ldr	r3, [r4, #8]
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	706b      	strb	r3, [r5, #1]
 8012910:	2102      	movs	r1, #2
 8012912:	68a2      	ldr	r2, [r4, #8]
 8012914:	6923      	ldr	r3, [r4, #16]
 8012916:	440a      	add	r2, r1
 8012918:	7561      	strb	r1, [r4, #21]
 801291a:	440b      	add	r3, r1
 801291c:	60a2      	str	r2, [r4, #8]
 801291e:	6123      	str	r3, [r4, #16]
 8012920:	7da0      	ldrb	r0, [r4, #22]
 8012922:	f080 0001 	eor.w	r0, r0, #1
 8012926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801292a:	881b      	ldrh	r3, [r3, #0]
 801292c:	802b      	strh	r3, [r5, #0]
 801292e:	e7ef      	b.n	8012910 <ucdr_deserialize_int16_t+0x90>
 8012930:	68a2      	ldr	r2, [r4, #8]
 8012932:	6923      	ldr	r3, [r4, #16]
 8012934:	1b92      	subs	r2, r2, r6
 8012936:	7da0      	ldrb	r0, [r4, #22]
 8012938:	1b9b      	subs	r3, r3, r6
 801293a:	f884 8015 	strb.w	r8, [r4, #21]
 801293e:	f080 0001 	eor.w	r0, r0, #1
 8012942:	60a2      	str	r2, [r4, #8]
 8012944:	6123      	str	r3, [r4, #16]
 8012946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801294a:	68a3      	ldr	r3, [r4, #8]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	706b      	strb	r3, [r5, #1]
 8012950:	e7c2      	b.n	80128d8 <ucdr_deserialize_int16_t+0x58>
 8012952:	4639      	mov	r1, r7
 8012954:	4632      	mov	r2, r6
 8012956:	4628      	mov	r0, r5
 8012958:	f00e fae5 	bl	8020f26 <memcpy>
 801295c:	464a      	mov	r2, r9
 801295e:	19a8      	adds	r0, r5, r6
 8012960:	68a1      	ldr	r1, [r4, #8]
 8012962:	f00e fae0 	bl	8020f26 <memcpy>
 8012966:	e7b7      	b.n	80128d8 <ucdr_deserialize_int16_t+0x58>

08012968 <ucdr_serialize_int32_t>:
 8012968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801296c:	b082      	sub	sp, #8
 801296e:	4604      	mov	r4, r0
 8012970:	9101      	str	r1, [sp, #4]
 8012972:	2104      	movs	r1, #4
 8012974:	f000 fcac 	bl	80132d0 <ucdr_buffer_alignment>
 8012978:	4601      	mov	r1, r0
 801297a:	4620      	mov	r0, r4
 801297c:	7d67      	ldrb	r7, [r4, #21]
 801297e:	f000 fcef 	bl	8013360 <ucdr_advance_buffer>
 8012982:	2104      	movs	r1, #4
 8012984:	4620      	mov	r0, r4
 8012986:	f000 fc43 	bl	8013210 <ucdr_check_buffer_available_for>
 801298a:	2800      	cmp	r0, #0
 801298c:	d139      	bne.n	8012a02 <ucdr_serialize_int32_t+0x9a>
 801298e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012992:	42ab      	cmp	r3, r5
 8012994:	d930      	bls.n	80129f8 <ucdr_serialize_int32_t+0x90>
 8012996:	1b5e      	subs	r6, r3, r5
 8012998:	60a3      	str	r3, [r4, #8]
 801299a:	6923      	ldr	r3, [r4, #16]
 801299c:	4620      	mov	r0, r4
 801299e:	f1c6 0804 	rsb	r8, r6, #4
 80129a2:	4433      	add	r3, r6
 80129a4:	4641      	mov	r1, r8
 80129a6:	6123      	str	r3, [r4, #16]
 80129a8:	f000 fc3e 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d04c      	beq.n	8012a4a <ucdr_serialize_int32_t+0xe2>
 80129b0:	7d23      	ldrb	r3, [r4, #20]
 80129b2:	2b01      	cmp	r3, #1
 80129b4:	d063      	beq.n	8012a7e <ucdr_serialize_int32_t+0x116>
 80129b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129ba:	702b      	strb	r3, [r5, #0]
 80129bc:	2e00      	cmp	r6, #0
 80129be:	d051      	beq.n	8012a64 <ucdr_serialize_int32_t+0xfc>
 80129c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80129c4:	2e01      	cmp	r6, #1
 80129c6:	706b      	strb	r3, [r5, #1]
 80129c8:	d050      	beq.n	8012a6c <ucdr_serialize_int32_t+0x104>
 80129ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129ce:	2e02      	cmp	r6, #2
 80129d0:	70ab      	strb	r3, [r5, #2]
 80129d2:	d04f      	beq.n	8012a74 <ucdr_serialize_int32_t+0x10c>
 80129d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129d8:	70eb      	strb	r3, [r5, #3]
 80129da:	6923      	ldr	r3, [r4, #16]
 80129dc:	2104      	movs	r1, #4
 80129de:	68a2      	ldr	r2, [r4, #8]
 80129e0:	3304      	adds	r3, #4
 80129e2:	7da0      	ldrb	r0, [r4, #22]
 80129e4:	4442      	add	r2, r8
 80129e6:	7561      	strb	r1, [r4, #21]
 80129e8:	1b9e      	subs	r6, r3, r6
 80129ea:	f080 0001 	eor.w	r0, r0, #1
 80129ee:	60a2      	str	r2, [r4, #8]
 80129f0:	6126      	str	r6, [r4, #16]
 80129f2:	b002      	add	sp, #8
 80129f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f8:	2104      	movs	r1, #4
 80129fa:	4620      	mov	r0, r4
 80129fc:	f000 fc14 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012a00:	b1d0      	cbz	r0, 8012a38 <ucdr_serialize_int32_t+0xd0>
 8012a02:	7d23      	ldrb	r3, [r4, #20]
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	68a3      	ldr	r3, [r4, #8]
 8012a08:	d01c      	beq.n	8012a44 <ucdr_serialize_int32_t+0xdc>
 8012a0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012a0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a12:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012a16:	7018      	strb	r0, [r3, #0]
 8012a18:	68a3      	ldr	r3, [r4, #8]
 8012a1a:	705a      	strb	r2, [r3, #1]
 8012a1c:	68a3      	ldr	r3, [r4, #8]
 8012a1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a22:	7099      	strb	r1, [r3, #2]
 8012a24:	68a3      	ldr	r3, [r4, #8]
 8012a26:	70da      	strb	r2, [r3, #3]
 8012a28:	2104      	movs	r1, #4
 8012a2a:	68a2      	ldr	r2, [r4, #8]
 8012a2c:	6923      	ldr	r3, [r4, #16]
 8012a2e:	440a      	add	r2, r1
 8012a30:	7561      	strb	r1, [r4, #21]
 8012a32:	440b      	add	r3, r1
 8012a34:	60a2      	str	r2, [r4, #8]
 8012a36:	6123      	str	r3, [r4, #16]
 8012a38:	7da0      	ldrb	r0, [r4, #22]
 8012a3a:	f080 0001 	eor.w	r0, r0, #1
 8012a3e:	b002      	add	sp, #8
 8012a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a44:	9a01      	ldr	r2, [sp, #4]
 8012a46:	601a      	str	r2, [r3, #0]
 8012a48:	e7ee      	b.n	8012a28 <ucdr_serialize_int32_t+0xc0>
 8012a4a:	68a2      	ldr	r2, [r4, #8]
 8012a4c:	6923      	ldr	r3, [r4, #16]
 8012a4e:	7da0      	ldrb	r0, [r4, #22]
 8012a50:	1b92      	subs	r2, r2, r6
 8012a52:	1b9b      	subs	r3, r3, r6
 8012a54:	7567      	strb	r7, [r4, #21]
 8012a56:	f080 0001 	eor.w	r0, r0, #1
 8012a5a:	60a2      	str	r2, [r4, #8]
 8012a5c:	6123      	str	r3, [r4, #16]
 8012a5e:	b002      	add	sp, #8
 8012a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a64:	68a3      	ldr	r3, [r4, #8]
 8012a66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a6a:	701a      	strb	r2, [r3, #0]
 8012a6c:	68a3      	ldr	r3, [r4, #8]
 8012a6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a72:	701a      	strb	r2, [r3, #0]
 8012a74:	68a3      	ldr	r3, [r4, #8]
 8012a76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a7a:	701a      	strb	r2, [r3, #0]
 8012a7c:	e7ad      	b.n	80129da <ucdr_serialize_int32_t+0x72>
 8012a7e:	4628      	mov	r0, r5
 8012a80:	ad01      	add	r5, sp, #4
 8012a82:	4632      	mov	r2, r6
 8012a84:	4629      	mov	r1, r5
 8012a86:	f00e fa4e 	bl	8020f26 <memcpy>
 8012a8a:	4642      	mov	r2, r8
 8012a8c:	19a9      	adds	r1, r5, r6
 8012a8e:	68a0      	ldr	r0, [r4, #8]
 8012a90:	f00e fa49 	bl	8020f26 <memcpy>
 8012a94:	e7a1      	b.n	80129da <ucdr_serialize_int32_t+0x72>
 8012a96:	bf00      	nop

08012a98 <ucdr_deserialize_int32_t>:
 8012a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	460d      	mov	r5, r1
 8012aa0:	2104      	movs	r1, #4
 8012aa2:	f000 fc15 	bl	80132d0 <ucdr_buffer_alignment>
 8012aa6:	4601      	mov	r1, r0
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012aae:	f000 fc57 	bl	8013360 <ucdr_advance_buffer>
 8012ab2:	2104      	movs	r1, #4
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f000 fbab 	bl	8013210 <ucdr_check_buffer_available_for>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d138      	bne.n	8012b30 <ucdr_deserialize_int32_t+0x98>
 8012abe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012ac2:	42b7      	cmp	r7, r6
 8012ac4:	d92f      	bls.n	8012b26 <ucdr_deserialize_int32_t+0x8e>
 8012ac6:	6923      	ldr	r3, [r4, #16]
 8012ac8:	4620      	mov	r0, r4
 8012aca:	60a7      	str	r7, [r4, #8]
 8012acc:	1bbf      	subs	r7, r7, r6
 8012ace:	443b      	add	r3, r7
 8012ad0:	f1c7 0904 	rsb	r9, r7, #4
 8012ad4:	6123      	str	r3, [r4, #16]
 8012ad6:	4649      	mov	r1, r9
 8012ad8:	f000 fba6 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d046      	beq.n	8012b6e <ucdr_deserialize_int32_t+0xd6>
 8012ae0:	7d23      	ldrb	r3, [r4, #20]
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d05c      	beq.n	8012ba0 <ucdr_deserialize_int32_t+0x108>
 8012ae6:	78f3      	ldrb	r3, [r6, #3]
 8012ae8:	702b      	strb	r3, [r5, #0]
 8012aea:	2f00      	cmp	r7, #0
 8012aec:	d04c      	beq.n	8012b88 <ucdr_deserialize_int32_t+0xf0>
 8012aee:	78b3      	ldrb	r3, [r6, #2]
 8012af0:	2f01      	cmp	r7, #1
 8012af2:	706b      	strb	r3, [r5, #1]
 8012af4:	f105 0302 	add.w	r3, r5, #2
 8012af8:	d04a      	beq.n	8012b90 <ucdr_deserialize_int32_t+0xf8>
 8012afa:	7873      	ldrb	r3, [r6, #1]
 8012afc:	2f02      	cmp	r7, #2
 8012afe:	70ab      	strb	r3, [r5, #2]
 8012b00:	f105 0303 	add.w	r3, r5, #3
 8012b04:	d048      	beq.n	8012b98 <ucdr_deserialize_int32_t+0x100>
 8012b06:	7833      	ldrb	r3, [r6, #0]
 8012b08:	70eb      	strb	r3, [r5, #3]
 8012b0a:	6923      	ldr	r3, [r4, #16]
 8012b0c:	2104      	movs	r1, #4
 8012b0e:	68a2      	ldr	r2, [r4, #8]
 8012b10:	3304      	adds	r3, #4
 8012b12:	7da0      	ldrb	r0, [r4, #22]
 8012b14:	444a      	add	r2, r9
 8012b16:	7561      	strb	r1, [r4, #21]
 8012b18:	1bdb      	subs	r3, r3, r7
 8012b1a:	f080 0001 	eor.w	r0, r0, #1
 8012b1e:	60a2      	str	r2, [r4, #8]
 8012b20:	6123      	str	r3, [r4, #16]
 8012b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b26:	2104      	movs	r1, #4
 8012b28:	4620      	mov	r0, r4
 8012b2a:	f000 fb7d 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012b2e:	b1b0      	cbz	r0, 8012b5e <ucdr_deserialize_int32_t+0xc6>
 8012b30:	7d23      	ldrb	r3, [r4, #20]
 8012b32:	2b01      	cmp	r3, #1
 8012b34:	68a3      	ldr	r3, [r4, #8]
 8012b36:	d017      	beq.n	8012b68 <ucdr_deserialize_int32_t+0xd0>
 8012b38:	78db      	ldrb	r3, [r3, #3]
 8012b3a:	702b      	strb	r3, [r5, #0]
 8012b3c:	68a3      	ldr	r3, [r4, #8]
 8012b3e:	789b      	ldrb	r3, [r3, #2]
 8012b40:	706b      	strb	r3, [r5, #1]
 8012b42:	68a3      	ldr	r3, [r4, #8]
 8012b44:	785b      	ldrb	r3, [r3, #1]
 8012b46:	70ab      	strb	r3, [r5, #2]
 8012b48:	68a3      	ldr	r3, [r4, #8]
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	70eb      	strb	r3, [r5, #3]
 8012b4e:	2104      	movs	r1, #4
 8012b50:	68a2      	ldr	r2, [r4, #8]
 8012b52:	6923      	ldr	r3, [r4, #16]
 8012b54:	440a      	add	r2, r1
 8012b56:	7561      	strb	r1, [r4, #21]
 8012b58:	440b      	add	r3, r1
 8012b5a:	60a2      	str	r2, [r4, #8]
 8012b5c:	6123      	str	r3, [r4, #16]
 8012b5e:	7da0      	ldrb	r0, [r4, #22]
 8012b60:	f080 0001 	eor.w	r0, r0, #1
 8012b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	602b      	str	r3, [r5, #0]
 8012b6c:	e7ef      	b.n	8012b4e <ucdr_deserialize_int32_t+0xb6>
 8012b6e:	68a2      	ldr	r2, [r4, #8]
 8012b70:	6923      	ldr	r3, [r4, #16]
 8012b72:	1bd2      	subs	r2, r2, r7
 8012b74:	7da0      	ldrb	r0, [r4, #22]
 8012b76:	1bdb      	subs	r3, r3, r7
 8012b78:	f884 8015 	strb.w	r8, [r4, #21]
 8012b7c:	f080 0001 	eor.w	r0, r0, #1
 8012b80:	60a2      	str	r2, [r4, #8]
 8012b82:	6123      	str	r3, [r4, #16]
 8012b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b88:	68a3      	ldr	r3, [r4, #8]
 8012b8a:	789b      	ldrb	r3, [r3, #2]
 8012b8c:	706b      	strb	r3, [r5, #1]
 8012b8e:	1cab      	adds	r3, r5, #2
 8012b90:	68a2      	ldr	r2, [r4, #8]
 8012b92:	7852      	ldrb	r2, [r2, #1]
 8012b94:	f803 2b01 	strb.w	r2, [r3], #1
 8012b98:	68a2      	ldr	r2, [r4, #8]
 8012b9a:	7812      	ldrb	r2, [r2, #0]
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	e7b4      	b.n	8012b0a <ucdr_deserialize_int32_t+0x72>
 8012ba0:	4631      	mov	r1, r6
 8012ba2:	463a      	mov	r2, r7
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	f00e f9be 	bl	8020f26 <memcpy>
 8012baa:	464a      	mov	r2, r9
 8012bac:	19e8      	adds	r0, r5, r7
 8012bae:	68a1      	ldr	r1, [r4, #8]
 8012bb0:	f00e f9b9 	bl	8020f26 <memcpy>
 8012bb4:	e7a9      	b.n	8012b0a <ucdr_deserialize_int32_t+0x72>
 8012bb6:	bf00      	nop

08012bb8 <ucdr_serialize_int64_t>:
 8012bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	2108      	movs	r1, #8
 8012bc2:	e9cd 2300 	strd	r2, r3, [sp]
 8012bc6:	f000 fb83 	bl	80132d0 <ucdr_buffer_alignment>
 8012bca:	4601      	mov	r1, r0
 8012bcc:	4620      	mov	r0, r4
 8012bce:	7d67      	ldrb	r7, [r4, #21]
 8012bd0:	f000 fbc6 	bl	8013360 <ucdr_advance_buffer>
 8012bd4:	2108      	movs	r1, #8
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f000 fb1a 	bl	8013210 <ucdr_check_buffer_available_for>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d14e      	bne.n	8012c7e <ucdr_serialize_int64_t+0xc6>
 8012be0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012be4:	42ab      	cmp	r3, r5
 8012be6:	d945      	bls.n	8012c74 <ucdr_serialize_int64_t+0xbc>
 8012be8:	1b5e      	subs	r6, r3, r5
 8012bea:	60a3      	str	r3, [r4, #8]
 8012bec:	6923      	ldr	r3, [r4, #16]
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f1c6 0808 	rsb	r8, r6, #8
 8012bf4:	4433      	add	r3, r6
 8012bf6:	4641      	mov	r1, r8
 8012bf8:	6123      	str	r3, [r4, #16]
 8012bfa:	f000 fb15 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	d074      	beq.n	8012cec <ucdr_serialize_int64_t+0x134>
 8012c02:	7d23      	ldrb	r3, [r4, #20]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	f000 809b 	beq.w	8012d40 <ucdr_serialize_int64_t+0x188>
 8012c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c0e:	702b      	strb	r3, [r5, #0]
 8012c10:	2e00      	cmp	r6, #0
 8012c12:	d078      	beq.n	8012d06 <ucdr_serialize_int64_t+0x14e>
 8012c14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012c18:	2e01      	cmp	r6, #1
 8012c1a:	706b      	strb	r3, [r5, #1]
 8012c1c:	d077      	beq.n	8012d0e <ucdr_serialize_int64_t+0x156>
 8012c1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c22:	2e02      	cmp	r6, #2
 8012c24:	70ab      	strb	r3, [r5, #2]
 8012c26:	d076      	beq.n	8012d16 <ucdr_serialize_int64_t+0x15e>
 8012c28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012c2c:	2e03      	cmp	r6, #3
 8012c2e:	70eb      	strb	r3, [r5, #3]
 8012c30:	d075      	beq.n	8012d1e <ucdr_serialize_int64_t+0x166>
 8012c32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012c36:	2e04      	cmp	r6, #4
 8012c38:	712b      	strb	r3, [r5, #4]
 8012c3a:	d074      	beq.n	8012d26 <ucdr_serialize_int64_t+0x16e>
 8012c3c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012c40:	2e05      	cmp	r6, #5
 8012c42:	716b      	strb	r3, [r5, #5]
 8012c44:	d073      	beq.n	8012d2e <ucdr_serialize_int64_t+0x176>
 8012c46:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012c4a:	2e06      	cmp	r6, #6
 8012c4c:	71ab      	strb	r3, [r5, #6]
 8012c4e:	d072      	beq.n	8012d36 <ucdr_serialize_int64_t+0x17e>
 8012c50:	f89d 3000 	ldrb.w	r3, [sp]
 8012c54:	71eb      	strb	r3, [r5, #7]
 8012c56:	6923      	ldr	r3, [r4, #16]
 8012c58:	2108      	movs	r1, #8
 8012c5a:	68a2      	ldr	r2, [r4, #8]
 8012c5c:	3308      	adds	r3, #8
 8012c5e:	7da0      	ldrb	r0, [r4, #22]
 8012c60:	4442      	add	r2, r8
 8012c62:	7561      	strb	r1, [r4, #21]
 8012c64:	1b9e      	subs	r6, r3, r6
 8012c66:	f080 0001 	eor.w	r0, r0, #1
 8012c6a:	60a2      	str	r2, [r4, #8]
 8012c6c:	6126      	str	r6, [r4, #16]
 8012c6e:	b002      	add	sp, #8
 8012c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c74:	2108      	movs	r1, #8
 8012c76:	4620      	mov	r0, r4
 8012c78:	f000 fad6 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012c7c:	b350      	cbz	r0, 8012cd4 <ucdr_serialize_int64_t+0x11c>
 8012c7e:	7d23      	ldrb	r3, [r4, #20]
 8012c80:	2b01      	cmp	r3, #1
 8012c82:	d02d      	beq.n	8012ce0 <ucdr_serialize_int64_t+0x128>
 8012c84:	68a3      	ldr	r3, [r4, #8]
 8012c86:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012c8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c8e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012c92:	7018      	strb	r0, [r3, #0]
 8012c94:	68a3      	ldr	r3, [r4, #8]
 8012c96:	705a      	strb	r2, [r3, #1]
 8012c98:	68a3      	ldr	r3, [r4, #8]
 8012c9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012c9e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012ca2:	7099      	strb	r1, [r3, #2]
 8012ca4:	68a3      	ldr	r3, [r4, #8]
 8012ca6:	70da      	strb	r2, [r3, #3]
 8012ca8:	68a3      	ldr	r3, [r4, #8]
 8012caa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012cae:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012cb2:	7118      	strb	r0, [r3, #4]
 8012cb4:	68a3      	ldr	r3, [r4, #8]
 8012cb6:	715a      	strb	r2, [r3, #5]
 8012cb8:	68a3      	ldr	r3, [r4, #8]
 8012cba:	f89d 2000 	ldrb.w	r2, [sp]
 8012cbe:	7199      	strb	r1, [r3, #6]
 8012cc0:	68a3      	ldr	r3, [r4, #8]
 8012cc2:	71da      	strb	r2, [r3, #7]
 8012cc4:	2108      	movs	r1, #8
 8012cc6:	68a2      	ldr	r2, [r4, #8]
 8012cc8:	6923      	ldr	r3, [r4, #16]
 8012cca:	440a      	add	r2, r1
 8012ccc:	7561      	strb	r1, [r4, #21]
 8012cce:	440b      	add	r3, r1
 8012cd0:	60a2      	str	r2, [r4, #8]
 8012cd2:	6123      	str	r3, [r4, #16]
 8012cd4:	7da0      	ldrb	r0, [r4, #22]
 8012cd6:	f080 0001 	eor.w	r0, r0, #1
 8012cda:	b002      	add	sp, #8
 8012cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce0:	466b      	mov	r3, sp
 8012ce2:	68a2      	ldr	r2, [r4, #8]
 8012ce4:	cb03      	ldmia	r3!, {r0, r1}
 8012ce6:	6010      	str	r0, [r2, #0]
 8012ce8:	6051      	str	r1, [r2, #4]
 8012cea:	e7eb      	b.n	8012cc4 <ucdr_serialize_int64_t+0x10c>
 8012cec:	68a2      	ldr	r2, [r4, #8]
 8012cee:	6923      	ldr	r3, [r4, #16]
 8012cf0:	7da0      	ldrb	r0, [r4, #22]
 8012cf2:	1b92      	subs	r2, r2, r6
 8012cf4:	1b9b      	subs	r3, r3, r6
 8012cf6:	7567      	strb	r7, [r4, #21]
 8012cf8:	f080 0001 	eor.w	r0, r0, #1
 8012cfc:	60a2      	str	r2, [r4, #8]
 8012cfe:	6123      	str	r3, [r4, #16]
 8012d00:	b002      	add	sp, #8
 8012d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d06:	68a3      	ldr	r3, [r4, #8]
 8012d08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d0c:	701a      	strb	r2, [r3, #0]
 8012d0e:	68a3      	ldr	r3, [r4, #8]
 8012d10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012d14:	701a      	strb	r2, [r3, #0]
 8012d16:	68a3      	ldr	r3, [r4, #8]
 8012d18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d1c:	701a      	strb	r2, [r3, #0]
 8012d1e:	68a3      	ldr	r3, [r4, #8]
 8012d20:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012d24:	701a      	strb	r2, [r3, #0]
 8012d26:	68a3      	ldr	r3, [r4, #8]
 8012d28:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012d2c:	701a      	strb	r2, [r3, #0]
 8012d2e:	68a3      	ldr	r3, [r4, #8]
 8012d30:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012d34:	701a      	strb	r2, [r3, #0]
 8012d36:	68a3      	ldr	r3, [r4, #8]
 8012d38:	f89d 2000 	ldrb.w	r2, [sp]
 8012d3c:	701a      	strb	r2, [r3, #0]
 8012d3e:	e78a      	b.n	8012c56 <ucdr_serialize_int64_t+0x9e>
 8012d40:	4628      	mov	r0, r5
 8012d42:	466d      	mov	r5, sp
 8012d44:	4632      	mov	r2, r6
 8012d46:	4629      	mov	r1, r5
 8012d48:	f00e f8ed 	bl	8020f26 <memcpy>
 8012d4c:	4642      	mov	r2, r8
 8012d4e:	19a9      	adds	r1, r5, r6
 8012d50:	68a0      	ldr	r0, [r4, #8]
 8012d52:	f00e f8e8 	bl	8020f26 <memcpy>
 8012d56:	e77e      	b.n	8012c56 <ucdr_serialize_int64_t+0x9e>

08012d58 <ucdr_deserialize_int64_t>:
 8012d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	460d      	mov	r5, r1
 8012d60:	2108      	movs	r1, #8
 8012d62:	f000 fab5 	bl	80132d0 <ucdr_buffer_alignment>
 8012d66:	4601      	mov	r1, r0
 8012d68:	4620      	mov	r0, r4
 8012d6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d6e:	f000 faf7 	bl	8013360 <ucdr_advance_buffer>
 8012d72:	2108      	movs	r1, #8
 8012d74:	4620      	mov	r0, r4
 8012d76:	f000 fa4b 	bl	8013210 <ucdr_check_buffer_available_for>
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	d151      	bne.n	8012e22 <ucdr_deserialize_int64_t+0xca>
 8012d7e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012d82:	42be      	cmp	r6, r7
 8012d84:	d948      	bls.n	8012e18 <ucdr_deserialize_int64_t+0xc0>
 8012d86:	6923      	ldr	r3, [r4, #16]
 8012d88:	4620      	mov	r0, r4
 8012d8a:	60a6      	str	r6, [r4, #8]
 8012d8c:	1bf6      	subs	r6, r6, r7
 8012d8e:	4433      	add	r3, r6
 8012d90:	f1c6 0908 	rsb	r9, r6, #8
 8012d94:	6123      	str	r3, [r4, #16]
 8012d96:	4649      	mov	r1, r9
 8012d98:	f000 fa46 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	d06d      	beq.n	8012e7c <ucdr_deserialize_int64_t+0x124>
 8012da0:	7d23      	ldrb	r3, [r4, #20]
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	f000 8093 	beq.w	8012ece <ucdr_deserialize_int64_t+0x176>
 8012da8:	79fb      	ldrb	r3, [r7, #7]
 8012daa:	702b      	strb	r3, [r5, #0]
 8012dac:	2e00      	cmp	r6, #0
 8012dae:	d072      	beq.n	8012e96 <ucdr_deserialize_int64_t+0x13e>
 8012db0:	79bb      	ldrb	r3, [r7, #6]
 8012db2:	2e01      	cmp	r6, #1
 8012db4:	706b      	strb	r3, [r5, #1]
 8012db6:	f105 0302 	add.w	r3, r5, #2
 8012dba:	d070      	beq.n	8012e9e <ucdr_deserialize_int64_t+0x146>
 8012dbc:	797b      	ldrb	r3, [r7, #5]
 8012dbe:	2e02      	cmp	r6, #2
 8012dc0:	70ab      	strb	r3, [r5, #2]
 8012dc2:	f105 0303 	add.w	r3, r5, #3
 8012dc6:	d06e      	beq.n	8012ea6 <ucdr_deserialize_int64_t+0x14e>
 8012dc8:	793b      	ldrb	r3, [r7, #4]
 8012dca:	2e03      	cmp	r6, #3
 8012dcc:	70eb      	strb	r3, [r5, #3]
 8012dce:	f105 0304 	add.w	r3, r5, #4
 8012dd2:	d06c      	beq.n	8012eae <ucdr_deserialize_int64_t+0x156>
 8012dd4:	78fb      	ldrb	r3, [r7, #3]
 8012dd6:	2e04      	cmp	r6, #4
 8012dd8:	712b      	strb	r3, [r5, #4]
 8012dda:	f105 0305 	add.w	r3, r5, #5
 8012dde:	d06a      	beq.n	8012eb6 <ucdr_deserialize_int64_t+0x15e>
 8012de0:	78bb      	ldrb	r3, [r7, #2]
 8012de2:	2e05      	cmp	r6, #5
 8012de4:	716b      	strb	r3, [r5, #5]
 8012de6:	f105 0306 	add.w	r3, r5, #6
 8012dea:	d068      	beq.n	8012ebe <ucdr_deserialize_int64_t+0x166>
 8012dec:	787b      	ldrb	r3, [r7, #1]
 8012dee:	2e06      	cmp	r6, #6
 8012df0:	71ab      	strb	r3, [r5, #6]
 8012df2:	f105 0307 	add.w	r3, r5, #7
 8012df6:	d066      	beq.n	8012ec6 <ucdr_deserialize_int64_t+0x16e>
 8012df8:	783b      	ldrb	r3, [r7, #0]
 8012dfa:	71eb      	strb	r3, [r5, #7]
 8012dfc:	6923      	ldr	r3, [r4, #16]
 8012dfe:	2108      	movs	r1, #8
 8012e00:	68a2      	ldr	r2, [r4, #8]
 8012e02:	3308      	adds	r3, #8
 8012e04:	7da0      	ldrb	r0, [r4, #22]
 8012e06:	444a      	add	r2, r9
 8012e08:	7561      	strb	r1, [r4, #21]
 8012e0a:	1b9e      	subs	r6, r3, r6
 8012e0c:	f080 0001 	eor.w	r0, r0, #1
 8012e10:	60a2      	str	r2, [r4, #8]
 8012e12:	6126      	str	r6, [r4, #16]
 8012e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e18:	2108      	movs	r1, #8
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f000 fa04 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012e20:	b310      	cbz	r0, 8012e68 <ucdr_deserialize_int64_t+0x110>
 8012e22:	7d23      	ldrb	r3, [r4, #20]
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	68a3      	ldr	r3, [r4, #8]
 8012e28:	d023      	beq.n	8012e72 <ucdr_deserialize_int64_t+0x11a>
 8012e2a:	79db      	ldrb	r3, [r3, #7]
 8012e2c:	702b      	strb	r3, [r5, #0]
 8012e2e:	68a3      	ldr	r3, [r4, #8]
 8012e30:	799b      	ldrb	r3, [r3, #6]
 8012e32:	706b      	strb	r3, [r5, #1]
 8012e34:	68a3      	ldr	r3, [r4, #8]
 8012e36:	795b      	ldrb	r3, [r3, #5]
 8012e38:	70ab      	strb	r3, [r5, #2]
 8012e3a:	68a3      	ldr	r3, [r4, #8]
 8012e3c:	791b      	ldrb	r3, [r3, #4]
 8012e3e:	70eb      	strb	r3, [r5, #3]
 8012e40:	68a3      	ldr	r3, [r4, #8]
 8012e42:	78db      	ldrb	r3, [r3, #3]
 8012e44:	712b      	strb	r3, [r5, #4]
 8012e46:	68a3      	ldr	r3, [r4, #8]
 8012e48:	789b      	ldrb	r3, [r3, #2]
 8012e4a:	716b      	strb	r3, [r5, #5]
 8012e4c:	68a3      	ldr	r3, [r4, #8]
 8012e4e:	785b      	ldrb	r3, [r3, #1]
 8012e50:	71ab      	strb	r3, [r5, #6]
 8012e52:	68a3      	ldr	r3, [r4, #8]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	71eb      	strb	r3, [r5, #7]
 8012e58:	2108      	movs	r1, #8
 8012e5a:	68a2      	ldr	r2, [r4, #8]
 8012e5c:	6923      	ldr	r3, [r4, #16]
 8012e5e:	440a      	add	r2, r1
 8012e60:	7561      	strb	r1, [r4, #21]
 8012e62:	440b      	add	r3, r1
 8012e64:	60a2      	str	r2, [r4, #8]
 8012e66:	6123      	str	r3, [r4, #16]
 8012e68:	7da0      	ldrb	r0, [r4, #22]
 8012e6a:	f080 0001 	eor.w	r0, r0, #1
 8012e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e72:	681a      	ldr	r2, [r3, #0]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	602a      	str	r2, [r5, #0]
 8012e78:	606b      	str	r3, [r5, #4]
 8012e7a:	e7ed      	b.n	8012e58 <ucdr_deserialize_int64_t+0x100>
 8012e7c:	68a2      	ldr	r2, [r4, #8]
 8012e7e:	6923      	ldr	r3, [r4, #16]
 8012e80:	1b92      	subs	r2, r2, r6
 8012e82:	7da0      	ldrb	r0, [r4, #22]
 8012e84:	1b9b      	subs	r3, r3, r6
 8012e86:	f884 8015 	strb.w	r8, [r4, #21]
 8012e8a:	f080 0001 	eor.w	r0, r0, #1
 8012e8e:	60a2      	str	r2, [r4, #8]
 8012e90:	6123      	str	r3, [r4, #16]
 8012e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e96:	68a3      	ldr	r3, [r4, #8]
 8012e98:	799b      	ldrb	r3, [r3, #6]
 8012e9a:	706b      	strb	r3, [r5, #1]
 8012e9c:	1cab      	adds	r3, r5, #2
 8012e9e:	68a2      	ldr	r2, [r4, #8]
 8012ea0:	7952      	ldrb	r2, [r2, #5]
 8012ea2:	f803 2b01 	strb.w	r2, [r3], #1
 8012ea6:	68a2      	ldr	r2, [r4, #8]
 8012ea8:	7912      	ldrb	r2, [r2, #4]
 8012eaa:	f803 2b01 	strb.w	r2, [r3], #1
 8012eae:	68a2      	ldr	r2, [r4, #8]
 8012eb0:	78d2      	ldrb	r2, [r2, #3]
 8012eb2:	f803 2b01 	strb.w	r2, [r3], #1
 8012eb6:	68a2      	ldr	r2, [r4, #8]
 8012eb8:	7892      	ldrb	r2, [r2, #2]
 8012eba:	f803 2b01 	strb.w	r2, [r3], #1
 8012ebe:	68a2      	ldr	r2, [r4, #8]
 8012ec0:	7852      	ldrb	r2, [r2, #1]
 8012ec2:	f803 2b01 	strb.w	r2, [r3], #1
 8012ec6:	68a2      	ldr	r2, [r4, #8]
 8012ec8:	7812      	ldrb	r2, [r2, #0]
 8012eca:	701a      	strb	r2, [r3, #0]
 8012ecc:	e796      	b.n	8012dfc <ucdr_deserialize_int64_t+0xa4>
 8012ece:	4639      	mov	r1, r7
 8012ed0:	4632      	mov	r2, r6
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	f00e f827 	bl	8020f26 <memcpy>
 8012ed8:	464a      	mov	r2, r9
 8012eda:	19a8      	adds	r0, r5, r6
 8012edc:	68a1      	ldr	r1, [r4, #8]
 8012ede:	f00e f822 	bl	8020f26 <memcpy>
 8012ee2:	e78b      	b.n	8012dfc <ucdr_deserialize_int64_t+0xa4>

08012ee4 <ucdr_serialize_double>:
 8012ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee8:	4604      	mov	r4, r0
 8012eea:	b082      	sub	sp, #8
 8012eec:	2108      	movs	r1, #8
 8012eee:	ed8d 0b00 	vstr	d0, [sp]
 8012ef2:	f000 f9ed 	bl	80132d0 <ucdr_buffer_alignment>
 8012ef6:	4601      	mov	r1, r0
 8012ef8:	4620      	mov	r0, r4
 8012efa:	7d67      	ldrb	r7, [r4, #21]
 8012efc:	f000 fa30 	bl	8013360 <ucdr_advance_buffer>
 8012f00:	2108      	movs	r1, #8
 8012f02:	4620      	mov	r0, r4
 8012f04:	f000 f984 	bl	8013210 <ucdr_check_buffer_available_for>
 8012f08:	2800      	cmp	r0, #0
 8012f0a:	d14e      	bne.n	8012faa <ucdr_serialize_double+0xc6>
 8012f0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012f10:	42ab      	cmp	r3, r5
 8012f12:	d945      	bls.n	8012fa0 <ucdr_serialize_double+0xbc>
 8012f14:	1b5e      	subs	r6, r3, r5
 8012f16:	60a3      	str	r3, [r4, #8]
 8012f18:	6923      	ldr	r3, [r4, #16]
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	f1c6 0808 	rsb	r8, r6, #8
 8012f20:	4433      	add	r3, r6
 8012f22:	4641      	mov	r1, r8
 8012f24:	6123      	str	r3, [r4, #16]
 8012f26:	f000 f97f 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	d074      	beq.n	8013018 <ucdr_serialize_double+0x134>
 8012f2e:	7d23      	ldrb	r3, [r4, #20]
 8012f30:	2b01      	cmp	r3, #1
 8012f32:	f000 809b 	beq.w	801306c <ucdr_serialize_double+0x188>
 8012f36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012f3a:	702b      	strb	r3, [r5, #0]
 8012f3c:	2e00      	cmp	r6, #0
 8012f3e:	d078      	beq.n	8013032 <ucdr_serialize_double+0x14e>
 8012f40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012f44:	2e01      	cmp	r6, #1
 8012f46:	706b      	strb	r3, [r5, #1]
 8012f48:	d077      	beq.n	801303a <ucdr_serialize_double+0x156>
 8012f4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012f4e:	2e02      	cmp	r6, #2
 8012f50:	70ab      	strb	r3, [r5, #2]
 8012f52:	d076      	beq.n	8013042 <ucdr_serialize_double+0x15e>
 8012f54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012f58:	2e03      	cmp	r6, #3
 8012f5a:	70eb      	strb	r3, [r5, #3]
 8012f5c:	d075      	beq.n	801304a <ucdr_serialize_double+0x166>
 8012f5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012f62:	2e04      	cmp	r6, #4
 8012f64:	712b      	strb	r3, [r5, #4]
 8012f66:	d074      	beq.n	8013052 <ucdr_serialize_double+0x16e>
 8012f68:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012f6c:	2e05      	cmp	r6, #5
 8012f6e:	716b      	strb	r3, [r5, #5]
 8012f70:	d073      	beq.n	801305a <ucdr_serialize_double+0x176>
 8012f72:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012f76:	2e06      	cmp	r6, #6
 8012f78:	71ab      	strb	r3, [r5, #6]
 8012f7a:	d072      	beq.n	8013062 <ucdr_serialize_double+0x17e>
 8012f7c:	f89d 3000 	ldrb.w	r3, [sp]
 8012f80:	71eb      	strb	r3, [r5, #7]
 8012f82:	6923      	ldr	r3, [r4, #16]
 8012f84:	2108      	movs	r1, #8
 8012f86:	68a2      	ldr	r2, [r4, #8]
 8012f88:	3308      	adds	r3, #8
 8012f8a:	7da0      	ldrb	r0, [r4, #22]
 8012f8c:	4442      	add	r2, r8
 8012f8e:	7561      	strb	r1, [r4, #21]
 8012f90:	1b9e      	subs	r6, r3, r6
 8012f92:	f080 0001 	eor.w	r0, r0, #1
 8012f96:	60a2      	str	r2, [r4, #8]
 8012f98:	6126      	str	r6, [r4, #16]
 8012f9a:	b002      	add	sp, #8
 8012f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa0:	2108      	movs	r1, #8
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f000 f940 	bl	8013228 <ucdr_check_final_buffer_behavior>
 8012fa8:	b350      	cbz	r0, 8013000 <ucdr_serialize_double+0x11c>
 8012faa:	7d23      	ldrb	r3, [r4, #20]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d02d      	beq.n	801300c <ucdr_serialize_double+0x128>
 8012fb0:	68a3      	ldr	r3, [r4, #8]
 8012fb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012fb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012fba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012fbe:	7018      	strb	r0, [r3, #0]
 8012fc0:	68a3      	ldr	r3, [r4, #8]
 8012fc2:	705a      	strb	r2, [r3, #1]
 8012fc4:	68a3      	ldr	r3, [r4, #8]
 8012fc6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012fca:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012fce:	7099      	strb	r1, [r3, #2]
 8012fd0:	68a3      	ldr	r3, [r4, #8]
 8012fd2:	70da      	strb	r2, [r3, #3]
 8012fd4:	68a3      	ldr	r3, [r4, #8]
 8012fd6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012fda:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012fde:	7118      	strb	r0, [r3, #4]
 8012fe0:	68a3      	ldr	r3, [r4, #8]
 8012fe2:	715a      	strb	r2, [r3, #5]
 8012fe4:	68a3      	ldr	r3, [r4, #8]
 8012fe6:	f89d 2000 	ldrb.w	r2, [sp]
 8012fea:	7199      	strb	r1, [r3, #6]
 8012fec:	68a3      	ldr	r3, [r4, #8]
 8012fee:	71da      	strb	r2, [r3, #7]
 8012ff0:	2108      	movs	r1, #8
 8012ff2:	68a2      	ldr	r2, [r4, #8]
 8012ff4:	6923      	ldr	r3, [r4, #16]
 8012ff6:	440a      	add	r2, r1
 8012ff8:	7561      	strb	r1, [r4, #21]
 8012ffa:	440b      	add	r3, r1
 8012ffc:	60a2      	str	r2, [r4, #8]
 8012ffe:	6123      	str	r3, [r4, #16]
 8013000:	7da0      	ldrb	r0, [r4, #22]
 8013002:	f080 0001 	eor.w	r0, r0, #1
 8013006:	b002      	add	sp, #8
 8013008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300c:	466b      	mov	r3, sp
 801300e:	68a2      	ldr	r2, [r4, #8]
 8013010:	cb03      	ldmia	r3!, {r0, r1}
 8013012:	6010      	str	r0, [r2, #0]
 8013014:	6051      	str	r1, [r2, #4]
 8013016:	e7eb      	b.n	8012ff0 <ucdr_serialize_double+0x10c>
 8013018:	68a2      	ldr	r2, [r4, #8]
 801301a:	6923      	ldr	r3, [r4, #16]
 801301c:	7da0      	ldrb	r0, [r4, #22]
 801301e:	1b92      	subs	r2, r2, r6
 8013020:	1b9b      	subs	r3, r3, r6
 8013022:	7567      	strb	r7, [r4, #21]
 8013024:	f080 0001 	eor.w	r0, r0, #1
 8013028:	60a2      	str	r2, [r4, #8]
 801302a:	6123      	str	r3, [r4, #16]
 801302c:	b002      	add	sp, #8
 801302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013032:	68a3      	ldr	r3, [r4, #8]
 8013034:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013038:	701a      	strb	r2, [r3, #0]
 801303a:	68a3      	ldr	r3, [r4, #8]
 801303c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013040:	701a      	strb	r2, [r3, #0]
 8013042:	68a3      	ldr	r3, [r4, #8]
 8013044:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013048:	701a      	strb	r2, [r3, #0]
 801304a:	68a3      	ldr	r3, [r4, #8]
 801304c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013050:	701a      	strb	r2, [r3, #0]
 8013052:	68a3      	ldr	r3, [r4, #8]
 8013054:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013058:	701a      	strb	r2, [r3, #0]
 801305a:	68a3      	ldr	r3, [r4, #8]
 801305c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013060:	701a      	strb	r2, [r3, #0]
 8013062:	68a3      	ldr	r3, [r4, #8]
 8013064:	f89d 2000 	ldrb.w	r2, [sp]
 8013068:	701a      	strb	r2, [r3, #0]
 801306a:	e78a      	b.n	8012f82 <ucdr_serialize_double+0x9e>
 801306c:	4628      	mov	r0, r5
 801306e:	466d      	mov	r5, sp
 8013070:	4632      	mov	r2, r6
 8013072:	4629      	mov	r1, r5
 8013074:	f00d ff57 	bl	8020f26 <memcpy>
 8013078:	4642      	mov	r2, r8
 801307a:	19a9      	adds	r1, r5, r6
 801307c:	68a0      	ldr	r0, [r4, #8]
 801307e:	f00d ff52 	bl	8020f26 <memcpy>
 8013082:	e77e      	b.n	8012f82 <ucdr_serialize_double+0x9e>

08013084 <ucdr_deserialize_double>:
 8013084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013088:	4604      	mov	r4, r0
 801308a:	460d      	mov	r5, r1
 801308c:	2108      	movs	r1, #8
 801308e:	f000 f91f 	bl	80132d0 <ucdr_buffer_alignment>
 8013092:	4601      	mov	r1, r0
 8013094:	4620      	mov	r0, r4
 8013096:	f894 8015 	ldrb.w	r8, [r4, #21]
 801309a:	f000 f961 	bl	8013360 <ucdr_advance_buffer>
 801309e:	2108      	movs	r1, #8
 80130a0:	4620      	mov	r0, r4
 80130a2:	f000 f8b5 	bl	8013210 <ucdr_check_buffer_available_for>
 80130a6:	2800      	cmp	r0, #0
 80130a8:	d151      	bne.n	801314e <ucdr_deserialize_double+0xca>
 80130aa:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80130ae:	42be      	cmp	r6, r7
 80130b0:	d948      	bls.n	8013144 <ucdr_deserialize_double+0xc0>
 80130b2:	6923      	ldr	r3, [r4, #16]
 80130b4:	4620      	mov	r0, r4
 80130b6:	60a6      	str	r6, [r4, #8]
 80130b8:	1bf6      	subs	r6, r6, r7
 80130ba:	4433      	add	r3, r6
 80130bc:	f1c6 0908 	rsb	r9, r6, #8
 80130c0:	6123      	str	r3, [r4, #16]
 80130c2:	4649      	mov	r1, r9
 80130c4:	f000 f8b0 	bl	8013228 <ucdr_check_final_buffer_behavior>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d06d      	beq.n	80131a8 <ucdr_deserialize_double+0x124>
 80130cc:	7d23      	ldrb	r3, [r4, #20]
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	f000 8093 	beq.w	80131fa <ucdr_deserialize_double+0x176>
 80130d4:	79fb      	ldrb	r3, [r7, #7]
 80130d6:	702b      	strb	r3, [r5, #0]
 80130d8:	2e00      	cmp	r6, #0
 80130da:	d072      	beq.n	80131c2 <ucdr_deserialize_double+0x13e>
 80130dc:	79bb      	ldrb	r3, [r7, #6]
 80130de:	2e01      	cmp	r6, #1
 80130e0:	706b      	strb	r3, [r5, #1]
 80130e2:	f105 0302 	add.w	r3, r5, #2
 80130e6:	d070      	beq.n	80131ca <ucdr_deserialize_double+0x146>
 80130e8:	797b      	ldrb	r3, [r7, #5]
 80130ea:	2e02      	cmp	r6, #2
 80130ec:	70ab      	strb	r3, [r5, #2]
 80130ee:	f105 0303 	add.w	r3, r5, #3
 80130f2:	d06e      	beq.n	80131d2 <ucdr_deserialize_double+0x14e>
 80130f4:	793b      	ldrb	r3, [r7, #4]
 80130f6:	2e03      	cmp	r6, #3
 80130f8:	70eb      	strb	r3, [r5, #3]
 80130fa:	f105 0304 	add.w	r3, r5, #4
 80130fe:	d06c      	beq.n	80131da <ucdr_deserialize_double+0x156>
 8013100:	78fb      	ldrb	r3, [r7, #3]
 8013102:	2e04      	cmp	r6, #4
 8013104:	712b      	strb	r3, [r5, #4]
 8013106:	f105 0305 	add.w	r3, r5, #5
 801310a:	d06a      	beq.n	80131e2 <ucdr_deserialize_double+0x15e>
 801310c:	78bb      	ldrb	r3, [r7, #2]
 801310e:	2e05      	cmp	r6, #5
 8013110:	716b      	strb	r3, [r5, #5]
 8013112:	f105 0306 	add.w	r3, r5, #6
 8013116:	d068      	beq.n	80131ea <ucdr_deserialize_double+0x166>
 8013118:	787b      	ldrb	r3, [r7, #1]
 801311a:	2e06      	cmp	r6, #6
 801311c:	71ab      	strb	r3, [r5, #6]
 801311e:	f105 0307 	add.w	r3, r5, #7
 8013122:	d066      	beq.n	80131f2 <ucdr_deserialize_double+0x16e>
 8013124:	783b      	ldrb	r3, [r7, #0]
 8013126:	71eb      	strb	r3, [r5, #7]
 8013128:	6923      	ldr	r3, [r4, #16]
 801312a:	2108      	movs	r1, #8
 801312c:	68a2      	ldr	r2, [r4, #8]
 801312e:	3308      	adds	r3, #8
 8013130:	7da0      	ldrb	r0, [r4, #22]
 8013132:	444a      	add	r2, r9
 8013134:	7561      	strb	r1, [r4, #21]
 8013136:	1b9e      	subs	r6, r3, r6
 8013138:	f080 0001 	eor.w	r0, r0, #1
 801313c:	60a2      	str	r2, [r4, #8]
 801313e:	6126      	str	r6, [r4, #16]
 8013140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013144:	2108      	movs	r1, #8
 8013146:	4620      	mov	r0, r4
 8013148:	f000 f86e 	bl	8013228 <ucdr_check_final_buffer_behavior>
 801314c:	b310      	cbz	r0, 8013194 <ucdr_deserialize_double+0x110>
 801314e:	7d23      	ldrb	r3, [r4, #20]
 8013150:	2b01      	cmp	r3, #1
 8013152:	68a3      	ldr	r3, [r4, #8]
 8013154:	d023      	beq.n	801319e <ucdr_deserialize_double+0x11a>
 8013156:	79db      	ldrb	r3, [r3, #7]
 8013158:	702b      	strb	r3, [r5, #0]
 801315a:	68a3      	ldr	r3, [r4, #8]
 801315c:	799b      	ldrb	r3, [r3, #6]
 801315e:	706b      	strb	r3, [r5, #1]
 8013160:	68a3      	ldr	r3, [r4, #8]
 8013162:	795b      	ldrb	r3, [r3, #5]
 8013164:	70ab      	strb	r3, [r5, #2]
 8013166:	68a3      	ldr	r3, [r4, #8]
 8013168:	791b      	ldrb	r3, [r3, #4]
 801316a:	70eb      	strb	r3, [r5, #3]
 801316c:	68a3      	ldr	r3, [r4, #8]
 801316e:	78db      	ldrb	r3, [r3, #3]
 8013170:	712b      	strb	r3, [r5, #4]
 8013172:	68a3      	ldr	r3, [r4, #8]
 8013174:	789b      	ldrb	r3, [r3, #2]
 8013176:	716b      	strb	r3, [r5, #5]
 8013178:	68a3      	ldr	r3, [r4, #8]
 801317a:	785b      	ldrb	r3, [r3, #1]
 801317c:	71ab      	strb	r3, [r5, #6]
 801317e:	68a3      	ldr	r3, [r4, #8]
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	71eb      	strb	r3, [r5, #7]
 8013184:	2108      	movs	r1, #8
 8013186:	68a2      	ldr	r2, [r4, #8]
 8013188:	6923      	ldr	r3, [r4, #16]
 801318a:	440a      	add	r2, r1
 801318c:	7561      	strb	r1, [r4, #21]
 801318e:	440b      	add	r3, r1
 8013190:	60a2      	str	r2, [r4, #8]
 8013192:	6123      	str	r3, [r4, #16]
 8013194:	7da0      	ldrb	r0, [r4, #22]
 8013196:	f080 0001 	eor.w	r0, r0, #1
 801319a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801319e:	681a      	ldr	r2, [r3, #0]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	602a      	str	r2, [r5, #0]
 80131a4:	606b      	str	r3, [r5, #4]
 80131a6:	e7ed      	b.n	8013184 <ucdr_deserialize_double+0x100>
 80131a8:	68a2      	ldr	r2, [r4, #8]
 80131aa:	6923      	ldr	r3, [r4, #16]
 80131ac:	1b92      	subs	r2, r2, r6
 80131ae:	7da0      	ldrb	r0, [r4, #22]
 80131b0:	1b9b      	subs	r3, r3, r6
 80131b2:	f884 8015 	strb.w	r8, [r4, #21]
 80131b6:	f080 0001 	eor.w	r0, r0, #1
 80131ba:	60a2      	str	r2, [r4, #8]
 80131bc:	6123      	str	r3, [r4, #16]
 80131be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131c2:	68a3      	ldr	r3, [r4, #8]
 80131c4:	799b      	ldrb	r3, [r3, #6]
 80131c6:	706b      	strb	r3, [r5, #1]
 80131c8:	1cab      	adds	r3, r5, #2
 80131ca:	68a2      	ldr	r2, [r4, #8]
 80131cc:	7952      	ldrb	r2, [r2, #5]
 80131ce:	f803 2b01 	strb.w	r2, [r3], #1
 80131d2:	68a2      	ldr	r2, [r4, #8]
 80131d4:	7912      	ldrb	r2, [r2, #4]
 80131d6:	f803 2b01 	strb.w	r2, [r3], #1
 80131da:	68a2      	ldr	r2, [r4, #8]
 80131dc:	78d2      	ldrb	r2, [r2, #3]
 80131de:	f803 2b01 	strb.w	r2, [r3], #1
 80131e2:	68a2      	ldr	r2, [r4, #8]
 80131e4:	7892      	ldrb	r2, [r2, #2]
 80131e6:	f803 2b01 	strb.w	r2, [r3], #1
 80131ea:	68a2      	ldr	r2, [r4, #8]
 80131ec:	7852      	ldrb	r2, [r2, #1]
 80131ee:	f803 2b01 	strb.w	r2, [r3], #1
 80131f2:	68a2      	ldr	r2, [r4, #8]
 80131f4:	7812      	ldrb	r2, [r2, #0]
 80131f6:	701a      	strb	r2, [r3, #0]
 80131f8:	e796      	b.n	8013128 <ucdr_deserialize_double+0xa4>
 80131fa:	4639      	mov	r1, r7
 80131fc:	4632      	mov	r2, r6
 80131fe:	4628      	mov	r0, r5
 8013200:	f00d fe91 	bl	8020f26 <memcpy>
 8013204:	464a      	mov	r2, r9
 8013206:	19a8      	adds	r0, r5, r6
 8013208:	68a1      	ldr	r1, [r4, #8]
 801320a:	f00d fe8c 	bl	8020f26 <memcpy>
 801320e:	e78b      	b.n	8013128 <ucdr_deserialize_double+0xa4>

08013210 <ucdr_check_buffer_available_for>:
 8013210:	7d83      	ldrb	r3, [r0, #22]
 8013212:	b93b      	cbnz	r3, 8013224 <ucdr_check_buffer_available_for+0x14>
 8013214:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013218:	4419      	add	r1, r3
 801321a:	4288      	cmp	r0, r1
 801321c:	bf34      	ite	cc
 801321e:	2000      	movcc	r0, #0
 8013220:	2001      	movcs	r0, #1
 8013222:	4770      	bx	lr
 8013224:	2000      	movs	r0, #0
 8013226:	4770      	bx	lr

08013228 <ucdr_check_final_buffer_behavior>:
 8013228:	7d83      	ldrb	r3, [r0, #22]
 801322a:	b943      	cbnz	r3, 801323e <ucdr_check_final_buffer_behavior+0x16>
 801322c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013230:	b510      	push	{r4, lr}
 8013232:	4291      	cmp	r1, r2
 8013234:	4604      	mov	r4, r0
 8013236:	d205      	bcs.n	8013244 <ucdr_check_final_buffer_behavior+0x1c>
 8013238:	2301      	movs	r3, #1
 801323a:	4618      	mov	r0, r3
 801323c:	bd10      	pop	{r4, pc}
 801323e:	2300      	movs	r3, #0
 8013240:	4618      	mov	r0, r3
 8013242:	4770      	bx	lr
 8013244:	6982      	ldr	r2, [r0, #24]
 8013246:	b13a      	cbz	r2, 8013258 <ucdr_check_final_buffer_behavior+0x30>
 8013248:	69c1      	ldr	r1, [r0, #28]
 801324a:	4790      	blx	r2
 801324c:	f080 0301 	eor.w	r3, r0, #1
 8013250:	75a0      	strb	r0, [r4, #22]
 8013252:	b2db      	uxtb	r3, r3
 8013254:	4618      	mov	r0, r3
 8013256:	bd10      	pop	{r4, pc}
 8013258:	2001      	movs	r0, #1
 801325a:	75a0      	strb	r0, [r4, #22]
 801325c:	e7fa      	b.n	8013254 <ucdr_check_final_buffer_behavior+0x2c>
 801325e:	bf00      	nop

08013260 <ucdr_set_on_full_buffer_callback>:
 8013260:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8013264:	4770      	bx	lr
 8013266:	bf00      	nop

08013268 <ucdr_init_buffer_origin_offset_endian>:
 8013268:	b410      	push	{r4}
 801326a:	9c01      	ldr	r4, [sp, #4]
 801326c:	440a      	add	r2, r1
 801326e:	6001      	str	r1, [r0, #0]
 8013270:	6042      	str	r2, [r0, #4]
 8013272:	190a      	adds	r2, r1, r4
 8013274:	441c      	add	r4, r3
 8013276:	6082      	str	r2, [r0, #8]
 8013278:	2200      	movs	r2, #0
 801327a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801327e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013282:	7542      	strb	r2, [r0, #21]
 8013284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013288:	7582      	strb	r2, [r0, #22]
 801328a:	7503      	strb	r3, [r0, #20]
 801328c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop

08013294 <ucdr_init_buffer_origin_offset>:
 8013294:	b510      	push	{r4, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	9c04      	ldr	r4, [sp, #16]
 801329a:	9400      	str	r4, [sp, #0]
 801329c:	2401      	movs	r4, #1
 801329e:	9401      	str	r4, [sp, #4]
 80132a0:	f7ff ffe2 	bl	8013268 <ucdr_init_buffer_origin_offset_endian>
 80132a4:	b002      	add	sp, #8
 80132a6:	bd10      	pop	{r4, pc}

080132a8 <ucdr_init_buffer_origin>:
 80132a8:	b510      	push	{r4, lr}
 80132aa:	2400      	movs	r4, #0
 80132ac:	b082      	sub	sp, #8
 80132ae:	9400      	str	r4, [sp, #0]
 80132b0:	f7ff fff0 	bl	8013294 <ucdr_init_buffer_origin_offset>
 80132b4:	b002      	add	sp, #8
 80132b6:	bd10      	pop	{r4, pc}

080132b8 <ucdr_init_buffer>:
 80132b8:	2300      	movs	r3, #0
 80132ba:	f7ff bff5 	b.w	80132a8 <ucdr_init_buffer_origin>
 80132be:	bf00      	nop

080132c0 <ucdr_alignment>:
 80132c0:	fbb0 f2f1 	udiv	r2, r0, r1
 80132c4:	fb02 0011 	mls	r0, r2, r1, r0
 80132c8:	1e4b      	subs	r3, r1, #1
 80132ca:	1a08      	subs	r0, r1, r0
 80132cc:	4018      	ands	r0, r3
 80132ce:	4770      	bx	lr

080132d0 <ucdr_buffer_alignment>:
 80132d0:	7d43      	ldrb	r3, [r0, #21]
 80132d2:	428b      	cmp	r3, r1
 80132d4:	d209      	bcs.n	80132ea <ucdr_buffer_alignment+0x1a>
 80132d6:	6903      	ldr	r3, [r0, #16]
 80132d8:	1e4a      	subs	r2, r1, #1
 80132da:	fbb3 f0f1 	udiv	r0, r3, r1
 80132de:	fb01 3010 	mls	r0, r1, r0, r3
 80132e2:	1a09      	subs	r1, r1, r0
 80132e4:	ea01 0002 	and.w	r0, r1, r2
 80132e8:	4770      	bx	lr
 80132ea:	2000      	movs	r0, #0
 80132ec:	4770      	bx	lr
 80132ee:	bf00      	nop

080132f0 <ucdr_align_to>:
 80132f0:	b538      	push	{r3, r4, r5, lr}
 80132f2:	4604      	mov	r4, r0
 80132f4:	460d      	mov	r5, r1
 80132f6:	f7ff ffeb 	bl	80132d0 <ucdr_buffer_alignment>
 80132fa:	68a3      	ldr	r3, [r4, #8]
 80132fc:	7565      	strb	r5, [r4, #21]
 80132fe:	181a      	adds	r2, r3, r0
 8013300:	6923      	ldr	r3, [r4, #16]
 8013302:	4418      	add	r0, r3
 8013304:	6863      	ldr	r3, [r4, #4]
 8013306:	4293      	cmp	r3, r2
 8013308:	6120      	str	r0, [r4, #16]
 801330a:	bf28      	it	cs
 801330c:	4613      	movcs	r3, r2
 801330e:	60a3      	str	r3, [r4, #8]
 8013310:	bd38      	pop	{r3, r4, r5, pc}
 8013312:	bf00      	nop

08013314 <ucdr_buffer_length>:
 8013314:	6882      	ldr	r2, [r0, #8]
 8013316:	6800      	ldr	r0, [r0, #0]
 8013318:	1a10      	subs	r0, r2, r0
 801331a:	4770      	bx	lr

0801331c <ucdr_buffer_remaining>:
 801331c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013320:	1a10      	subs	r0, r2, r0
 8013322:	4770      	bx	lr

08013324 <ucdr_check_final_buffer_behavior_array>:
 8013324:	b538      	push	{r3, r4, r5, lr}
 8013326:	7d83      	ldrb	r3, [r0, #22]
 8013328:	b9a3      	cbnz	r3, 8013354 <ucdr_check_final_buffer_behavior_array+0x30>
 801332a:	4604      	mov	r4, r0
 801332c:	460d      	mov	r5, r1
 801332e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013332:	429a      	cmp	r2, r3
 8013334:	d300      	bcc.n	8013338 <ucdr_check_final_buffer_behavior_array+0x14>
 8013336:	b931      	cbnz	r1, 8013346 <ucdr_check_final_buffer_behavior_array+0x22>
 8013338:	4620      	mov	r0, r4
 801333a:	f7ff ffef 	bl	801331c <ucdr_buffer_remaining>
 801333e:	42a8      	cmp	r0, r5
 8013340:	bf28      	it	cs
 8013342:	4628      	movcs	r0, r5
 8013344:	bd38      	pop	{r3, r4, r5, pc}
 8013346:	6983      	ldr	r3, [r0, #24]
 8013348:	b133      	cbz	r3, 8013358 <ucdr_check_final_buffer_behavior_array+0x34>
 801334a:	69c1      	ldr	r1, [r0, #28]
 801334c:	4798      	blx	r3
 801334e:	75a0      	strb	r0, [r4, #22]
 8013350:	2800      	cmp	r0, #0
 8013352:	d0f1      	beq.n	8013338 <ucdr_check_final_buffer_behavior_array+0x14>
 8013354:	2000      	movs	r0, #0
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	2301      	movs	r3, #1
 801335a:	7583      	strb	r3, [r0, #22]
 801335c:	e7fa      	b.n	8013354 <ucdr_check_final_buffer_behavior_array+0x30>
 801335e:	bf00      	nop

08013360 <ucdr_advance_buffer>:
 8013360:	b538      	push	{r3, r4, r5, lr}
 8013362:	4604      	mov	r4, r0
 8013364:	460d      	mov	r5, r1
 8013366:	f7ff ff53 	bl	8013210 <ucdr_check_buffer_available_for>
 801336a:	b178      	cbz	r0, 801338c <ucdr_advance_buffer+0x2c>
 801336c:	6923      	ldr	r3, [r4, #16]
 801336e:	68a2      	ldr	r2, [r4, #8]
 8013370:	442b      	add	r3, r5
 8013372:	442a      	add	r2, r5
 8013374:	6123      	str	r3, [r4, #16]
 8013376:	2301      	movs	r3, #1
 8013378:	60a2      	str	r2, [r4, #8]
 801337a:	7563      	strb	r3, [r4, #21]
 801337c:	bd38      	pop	{r3, r4, r5, pc}
 801337e:	68a2      	ldr	r2, [r4, #8]
 8013380:	1a2d      	subs	r5, r5, r0
 8013382:	6923      	ldr	r3, [r4, #16]
 8013384:	4402      	add	r2, r0
 8013386:	4418      	add	r0, r3
 8013388:	60a2      	str	r2, [r4, #8]
 801338a:	6120      	str	r0, [r4, #16]
 801338c:	4629      	mov	r1, r5
 801338e:	2201      	movs	r2, #1
 8013390:	4620      	mov	r0, r4
 8013392:	f7ff ffc7 	bl	8013324 <ucdr_check_final_buffer_behavior_array>
 8013396:	2800      	cmp	r0, #0
 8013398:	d1f1      	bne.n	801337e <ucdr_advance_buffer+0x1e>
 801339a:	2301      	movs	r3, #1
 801339c:	7563      	strb	r3, [r4, #21]
 801339e:	bd38      	pop	{r3, r4, r5, pc}

080133a0 <ucdr_serialize_sequence_char>:
 80133a0:	b570      	push	{r4, r5, r6, lr}
 80133a2:	4615      	mov	r5, r2
 80133a4:	460e      	mov	r6, r1
 80133a6:	7d01      	ldrb	r1, [r0, #20]
 80133a8:	4604      	mov	r4, r0
 80133aa:	f7fe ff5b 	bl	8012264 <ucdr_serialize_endian_uint32_t>
 80133ae:	b90d      	cbnz	r5, 80133b4 <ucdr_serialize_sequence_char+0x14>
 80133b0:	2001      	movs	r0, #1
 80133b2:	bd70      	pop	{r4, r5, r6, pc}
 80133b4:	462b      	mov	r3, r5
 80133b6:	4632      	mov	r2, r6
 80133b8:	7d21      	ldrb	r1, [r4, #20]
 80133ba:	4620      	mov	r0, r4
 80133bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133c0:	f004 b908 	b.w	80175d4 <ucdr_serialize_endian_array_char>

080133c4 <ucdr_deserialize_sequence_char>:
 80133c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c8:	461d      	mov	r5, r3
 80133ca:	4616      	mov	r6, r2
 80133cc:	460f      	mov	r7, r1
 80133ce:	461a      	mov	r2, r3
 80133d0:	7d01      	ldrb	r1, [r0, #20]
 80133d2:	4604      	mov	r4, r0
 80133d4:	f7ff f86e 	bl	80124b4 <ucdr_deserialize_endian_uint32_t>
 80133d8:	682b      	ldr	r3, [r5, #0]
 80133da:	429e      	cmp	r6, r3
 80133dc:	d201      	bcs.n	80133e2 <ucdr_deserialize_sequence_char+0x1e>
 80133de:	2201      	movs	r2, #1
 80133e0:	75a2      	strb	r2, [r4, #22]
 80133e2:	b913      	cbnz	r3, 80133ea <ucdr_deserialize_sequence_char+0x26>
 80133e4:	2001      	movs	r0, #1
 80133e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ea:	463a      	mov	r2, r7
 80133ec:	7d21      	ldrb	r1, [r4, #20]
 80133ee:	4620      	mov	r0, r4
 80133f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133f4:	f004 b920 	b.w	8017638 <ucdr_deserialize_endian_array_char>

080133f8 <ucdr_serialize_sequence_uint8_t>:
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	4615      	mov	r5, r2
 80133fc:	460e      	mov	r6, r1
 80133fe:	7d01      	ldrb	r1, [r0, #20]
 8013400:	4604      	mov	r4, r0
 8013402:	f7fe ff2f 	bl	8012264 <ucdr_serialize_endian_uint32_t>
 8013406:	b90d      	cbnz	r5, 801340c <ucdr_serialize_sequence_uint8_t+0x14>
 8013408:	2001      	movs	r0, #1
 801340a:	bd70      	pop	{r4, r5, r6, pc}
 801340c:	462b      	mov	r3, r5
 801340e:	4632      	mov	r2, r6
 8013410:	7d21      	ldrb	r1, [r4, #20]
 8013412:	4620      	mov	r0, r4
 8013414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013418:	f004 b974 	b.w	8017704 <ucdr_serialize_endian_array_uint8_t>

0801341c <ucdr_deserialize_sequence_uint8_t>:
 801341c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013420:	461d      	mov	r5, r3
 8013422:	4616      	mov	r6, r2
 8013424:	460f      	mov	r7, r1
 8013426:	461a      	mov	r2, r3
 8013428:	7d01      	ldrb	r1, [r0, #20]
 801342a:	4604      	mov	r4, r0
 801342c:	f7ff f842 	bl	80124b4 <ucdr_deserialize_endian_uint32_t>
 8013430:	682b      	ldr	r3, [r5, #0]
 8013432:	429e      	cmp	r6, r3
 8013434:	d201      	bcs.n	801343a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8013436:	2201      	movs	r2, #1
 8013438:	75a2      	strb	r2, [r4, #22]
 801343a:	b913      	cbnz	r3, 8013442 <ucdr_deserialize_sequence_uint8_t+0x26>
 801343c:	2001      	movs	r0, #1
 801343e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013442:	463a      	mov	r2, r7
 8013444:	7d21      	ldrb	r1, [r4, #20]
 8013446:	4620      	mov	r0, r4
 8013448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801344c:	f004 b9c0 	b.w	80177d0 <ucdr_deserialize_endian_array_uint8_t>

08013450 <rcl_get_zero_initialized_init_options>:
 8013450:	2000      	movs	r0, #0
 8013452:	4770      	bx	lr

08013454 <rcl_init_options_init>:
 8013454:	b084      	sub	sp, #16
 8013456:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013458:	b097      	sub	sp, #92	; 0x5c
 801345a:	ae1d      	add	r6, sp, #116	; 0x74
 801345c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013460:	2800      	cmp	r0, #0
 8013462:	d058      	beq.n	8013516 <rcl_init_options_init+0xc2>
 8013464:	6803      	ldr	r3, [r0, #0]
 8013466:	4605      	mov	r5, r0
 8013468:	b133      	cbz	r3, 8013478 <rcl_init_options_init+0x24>
 801346a:	2464      	movs	r4, #100	; 0x64
 801346c:	4620      	mov	r0, r4
 801346e:	b017      	add	sp, #92	; 0x5c
 8013470:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013474:	b004      	add	sp, #16
 8013476:	4770      	bx	lr
 8013478:	4630      	mov	r0, r6
 801347a:	f001 fdf3 	bl	8015064 <rcutils_allocator_is_valid>
 801347e:	2800      	cmp	r0, #0
 8013480:	d049      	beq.n	8013516 <rcl_init_options_init+0xc2>
 8013482:	46b4      	mov	ip, r6
 8013484:	ac11      	add	r4, sp, #68	; 0x44
 8013486:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801348a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801348c:	f8dc 3000 	ldr.w	r3, [ip]
 8013490:	2050      	movs	r0, #80	; 0x50
 8013492:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013494:	6023      	str	r3, [r4, #0]
 8013496:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013498:	4798      	blx	r3
 801349a:	4604      	mov	r4, r0
 801349c:	6028      	str	r0, [r5, #0]
 801349e:	2800      	cmp	r0, #0
 80134a0:	d03b      	beq.n	801351a <rcl_init_options_init+0xc6>
 80134a2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80134a6:	4686      	mov	lr, r0
 80134a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134b0:	f8dc 3000 	ldr.w	r3, [ip]
 80134b4:	a802      	add	r0, sp, #8
 80134b6:	f8ce 3000 	str.w	r3, [lr]
 80134ba:	f001 fff1 	bl	80154a0 <rmw_get_zero_initialized_init_options>
 80134be:	f10d 0e08 	add.w	lr, sp, #8
 80134c2:	f104 0c18 	add.w	ip, r4, #24
 80134c6:	682f      	ldr	r7, [r5, #0]
 80134c8:	ac20      	add	r4, sp, #128	; 0x80
 80134ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134e2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80134e6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80134ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80134ee:	e88d 0003 	stmia.w	sp, {r0, r1}
 80134f2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80134f6:	f107 0018 	add.w	r0, r7, #24
 80134fa:	f002 f8f9 	bl	80156f0 <rmw_init_options_init>
 80134fe:	4604      	mov	r4, r0
 8013500:	2800      	cmp	r0, #0
 8013502:	d0b3      	beq.n	801346c <rcl_init_options_init+0x18>
 8013504:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013506:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013508:	6828      	ldr	r0, [r5, #0]
 801350a:	4798      	blx	r3
 801350c:	4620      	mov	r0, r4
 801350e:	f007 ff8d 	bl	801b42c <rcl_convert_rmw_ret_to_rcl_ret>
 8013512:	4604      	mov	r4, r0
 8013514:	e7aa      	b.n	801346c <rcl_init_options_init+0x18>
 8013516:	240b      	movs	r4, #11
 8013518:	e7a8      	b.n	801346c <rcl_init_options_init+0x18>
 801351a:	240a      	movs	r4, #10
 801351c:	e7a6      	b.n	801346c <rcl_init_options_init+0x18>
 801351e:	bf00      	nop

08013520 <rcl_init_options_fini>:
 8013520:	b530      	push	{r4, r5, lr}
 8013522:	b087      	sub	sp, #28
 8013524:	b1f0      	cbz	r0, 8013564 <rcl_init_options_fini+0x44>
 8013526:	6803      	ldr	r3, [r0, #0]
 8013528:	4604      	mov	r4, r0
 801352a:	b1db      	cbz	r3, 8013564 <rcl_init_options_fini+0x44>
 801352c:	469c      	mov	ip, r3
 801352e:	f10d 0e04 	add.w	lr, sp, #4
 8013532:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013536:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801353a:	f8dc 3000 	ldr.w	r3, [ip]
 801353e:	a801      	add	r0, sp, #4
 8013540:	f8ce 3000 	str.w	r3, [lr]
 8013544:	f001 fd8e 	bl	8015064 <rcutils_allocator_is_valid>
 8013548:	b160      	cbz	r0, 8013564 <rcl_init_options_fini+0x44>
 801354a:	6820      	ldr	r0, [r4, #0]
 801354c:	3018      	adds	r0, #24
 801354e:	f002 f989 	bl	8015864 <rmw_init_options_fini>
 8013552:	4605      	mov	r5, r0
 8013554:	b950      	cbnz	r0, 801356c <rcl_init_options_fini+0x4c>
 8013556:	6820      	ldr	r0, [r4, #0]
 8013558:	9b02      	ldr	r3, [sp, #8]
 801355a:	9905      	ldr	r1, [sp, #20]
 801355c:	4798      	blx	r3
 801355e:	4628      	mov	r0, r5
 8013560:	b007      	add	sp, #28
 8013562:	bd30      	pop	{r4, r5, pc}
 8013564:	250b      	movs	r5, #11
 8013566:	4628      	mov	r0, r5
 8013568:	b007      	add	sp, #28
 801356a:	bd30      	pop	{r4, r5, pc}
 801356c:	f007 ff5e 	bl	801b42c <rcl_convert_rmw_ret_to_rcl_ret>
 8013570:	4605      	mov	r5, r0
 8013572:	e7f8      	b.n	8013566 <rcl_init_options_fini+0x46>

08013574 <rcl_init_options_copy>:
 8013574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013578:	b094      	sub	sp, #80	; 0x50
 801357a:	2800      	cmp	r0, #0
 801357c:	d05b      	beq.n	8013636 <rcl_init_options_copy+0xc2>
 801357e:	4604      	mov	r4, r0
 8013580:	6800      	ldr	r0, [r0, #0]
 8013582:	2800      	cmp	r0, #0
 8013584:	d057      	beq.n	8013636 <rcl_init_options_copy+0xc2>
 8013586:	460e      	mov	r6, r1
 8013588:	f001 fd6c 	bl	8015064 <rcutils_allocator_is_valid>
 801358c:	2e00      	cmp	r6, #0
 801358e:	d052      	beq.n	8013636 <rcl_init_options_copy+0xc2>
 8013590:	f080 0001 	eor.w	r0, r0, #1
 8013594:	b2c0      	uxtb	r0, r0
 8013596:	2800      	cmp	r0, #0
 8013598:	d14d      	bne.n	8013636 <rcl_init_options_copy+0xc2>
 801359a:	6833      	ldr	r3, [r6, #0]
 801359c:	b123      	cbz	r3, 80135a8 <rcl_init_options_copy+0x34>
 801359e:	2464      	movs	r4, #100	; 0x64
 80135a0:	4620      	mov	r0, r4
 80135a2:	b014      	add	sp, #80	; 0x50
 80135a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a8:	6827      	ldr	r7, [r4, #0]
 80135aa:	ad0f      	add	r5, sp, #60	; 0x3c
 80135ac:	46bc      	mov	ip, r7
 80135ae:	f8d7 8000 	ldr.w	r8, [r7]
 80135b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80135b8:	f8dc 3000 	ldr.w	r3, [ip]
 80135bc:	2050      	movs	r0, #80	; 0x50
 80135be:	4619      	mov	r1, r3
 80135c0:	602b      	str	r3, [r5, #0]
 80135c2:	47c0      	blx	r8
 80135c4:	4605      	mov	r5, r0
 80135c6:	6030      	str	r0, [r6, #0]
 80135c8:	b3d0      	cbz	r0, 8013640 <rcl_init_options_copy+0xcc>
 80135ca:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 80135ce:	4686      	mov	lr, r0
 80135d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135d8:	f8dc 3000 	ldr.w	r3, [ip]
 80135dc:	4668      	mov	r0, sp
 80135de:	f8ce 3000 	str.w	r3, [lr]
 80135e2:	f001 ff5d 	bl	80154a0 <rmw_get_zero_initialized_init_options>
 80135e6:	46ee      	mov	lr, sp
 80135e8:	f105 0c18 	add.w	ip, r5, #24
 80135ec:	6824      	ldr	r4, [r4, #0]
 80135ee:	6835      	ldr	r5, [r6, #0]
 80135f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013600:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013604:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013608:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801360c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013610:	f104 0018 	add.w	r0, r4, #24
 8013614:	f105 0118 	add.w	r1, r5, #24
 8013618:	f002 f8d2 	bl	80157c0 <rmw_init_options_copy>
 801361c:	4604      	mov	r4, r0
 801361e:	2800      	cmp	r0, #0
 8013620:	d0be      	beq.n	80135a0 <rcl_init_options_copy+0x2c>
 8013622:	f001 fd45 	bl	80150b0 <rcutils_get_error_string>
 8013626:	f001 fd5b 	bl	80150e0 <rcutils_reset_error>
 801362a:	4630      	mov	r0, r6
 801362c:	f7ff ff78 	bl	8013520 <rcl_init_options_fini>
 8013630:	b140      	cbz	r0, 8013644 <rcl_init_options_copy+0xd0>
 8013632:	4604      	mov	r4, r0
 8013634:	e7b4      	b.n	80135a0 <rcl_init_options_copy+0x2c>
 8013636:	240b      	movs	r4, #11
 8013638:	4620      	mov	r0, r4
 801363a:	b014      	add	sp, #80	; 0x50
 801363c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013640:	240a      	movs	r4, #10
 8013642:	e7ad      	b.n	80135a0 <rcl_init_options_copy+0x2c>
 8013644:	4620      	mov	r0, r4
 8013646:	b014      	add	sp, #80	; 0x50
 8013648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801364c:	f007 beee 	b.w	801b42c <rcl_convert_rmw_ret_to_rcl_ret>

08013650 <rcl_init_options_set_domain_id>:
 8013650:	b120      	cbz	r0, 801365c <rcl_init_options_set_domain_id+0xc>
 8013652:	6803      	ldr	r3, [r0, #0]
 8013654:	b113      	cbz	r3, 801365c <rcl_init_options_set_domain_id+0xc>
 8013656:	2000      	movs	r0, #0
 8013658:	6259      	str	r1, [r3, #36]	; 0x24
 801365a:	4770      	bx	lr
 801365c:	200b      	movs	r0, #11
 801365e:	4770      	bx	lr

08013660 <rcl_get_zero_initialized_node>:
 8013660:	4a03      	ldr	r2, [pc, #12]	; (8013670 <rcl_get_zero_initialized_node+0x10>)
 8013662:	4603      	mov	r3, r0
 8013664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013668:	e883 0003 	stmia.w	r3, {r0, r1}
 801366c:	4618      	mov	r0, r3
 801366e:	4770      	bx	lr
 8013670:	08024e50 	.word	0x08024e50

08013674 <rcl_node_init>:
 8013674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013678:	b0a9      	sub	sp, #164	; 0xa4
 801367a:	4604      	mov	r4, r0
 801367c:	460e      	mov	r6, r1
 801367e:	4615      	mov	r5, r2
 8013680:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8013684:	a823      	add	r0, sp, #140	; 0x8c
 8013686:	461f      	mov	r7, r3
 8013688:	f007 ffe0 	bl	801b64c <rcl_guard_condition_get_default_options>
 801368c:	f1b8 0f00 	cmp.w	r8, #0
 8013690:	f000 80f3 	beq.w	801387a <rcl_node_init+0x206>
 8013694:	4640      	mov	r0, r8
 8013696:	f001 fce5 	bl	8015064 <rcutils_allocator_is_valid>
 801369a:	2d00      	cmp	r5, #0
 801369c:	bf18      	it	ne
 801369e:	2c00      	cmpne	r4, #0
 80136a0:	f080 0001 	eor.w	r0, r0, #1
 80136a4:	bf0c      	ite	eq
 80136a6:	f04f 0c01 	moveq.w	ip, #1
 80136aa:	f04f 0c00 	movne.w	ip, #0
 80136ae:	2e00      	cmp	r6, #0
 80136b0:	bf08      	it	eq
 80136b2:	f04c 0c01 	orreq.w	ip, ip, #1
 80136b6:	ea4c 0c00 	orr.w	ip, ip, r0
 80136ba:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80136be:	f040 80dc 	bne.w	801387a <rcl_node_init+0x206>
 80136c2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80136c6:	f1ba 0f00 	cmp.w	sl, #0
 80136ca:	f040 80fc 	bne.w	80138c6 <rcl_node_init+0x252>
 80136ce:	2f00      	cmp	r7, #0
 80136d0:	f000 80d3 	beq.w	801387a <rcl_node_init+0x206>
 80136d4:	4638      	mov	r0, r7
 80136d6:	f007 fec7 	bl	801b468 <rcl_context_is_valid>
 80136da:	4683      	mov	fp, r0
 80136dc:	2800      	cmp	r0, #0
 80136de:	f000 80d2 	beq.w	8013886 <rcl_node_init+0x212>
 80136e2:	4652      	mov	r2, sl
 80136e4:	4630      	mov	r0, r6
 80136e6:	a922      	add	r1, sp, #136	; 0x88
 80136e8:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 80136ec:	f001 ff8a 	bl	8015604 <rmw_validate_node_name>
 80136f0:	4682      	mov	sl, r0
 80136f2:	2800      	cmp	r0, #0
 80136f4:	f040 80c3 	bne.w	801387e <rcl_node_init+0x20a>
 80136f8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80136fa:	2800      	cmp	r0, #0
 80136fc:	f040 80f1 	bne.w	80138e2 <rcl_node_init+0x26e>
 8013700:	4628      	mov	r0, r5
 8013702:	f7ec fdfd 	bl	8000300 <strlen>
 8013706:	2800      	cmp	r0, #0
 8013708:	f040 80c0 	bne.w	801388c <rcl_node_init+0x218>
 801370c:	4d79      	ldr	r5, [pc, #484]	; (80138f4 <rcl_node_init+0x280>)
 801370e:	a922      	add	r1, sp, #136	; 0x88
 8013710:	2200      	movs	r2, #0
 8013712:	4628      	mov	r0, r5
 8013714:	f001 ff58 	bl	80155c8 <rmw_validate_namespace>
 8013718:	4682      	mov	sl, r0
 801371a:	2800      	cmp	r0, #0
 801371c:	f040 80af 	bne.w	801387e <rcl_node_init+0x20a>
 8013720:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013722:	2800      	cmp	r0, #0
 8013724:	f040 80d5 	bne.w	80138d2 <rcl_node_init+0x25e>
 8013728:	f8d8 3000 	ldr.w	r3, [r8]
 801372c:	2078      	movs	r0, #120	; 0x78
 801372e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013732:	4798      	blx	r3
 8013734:	4682      	mov	sl, r0
 8013736:	6060      	str	r0, [r4, #4]
 8013738:	2800      	cmp	r0, #0
 801373a:	f000 80cf 	beq.w	80138dc <rcl_node_init+0x268>
 801373e:	2200      	movs	r2, #0
 8013740:	2300      	movs	r3, #0
 8013742:	a808      	add	r0, sp, #32
 8013744:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8013748:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 801374c:	f000 f902 	bl	8013954 <rcl_node_get_default_options>
 8013750:	a908      	add	r1, sp, #32
 8013752:	4650      	mov	r0, sl
 8013754:	2268      	movs	r2, #104	; 0x68
 8013756:	f00d fbe6 	bl	8020f26 <memcpy>
 801375a:	6861      	ldr	r1, [r4, #4]
 801375c:	4640      	mov	r0, r8
 801375e:	6027      	str	r7, [r4, #0]
 8013760:	f000 f906 	bl	8013970 <rcl_node_options_copy>
 8013764:	2800      	cmp	r0, #0
 8013766:	d158      	bne.n	801381a <rcl_node_init+0x1a6>
 8013768:	4628      	mov	r0, r5
 801376a:	f7ec fdc9 	bl	8000300 <strlen>
 801376e:	4428      	add	r0, r5
 8013770:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013774:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013778:	2b2f      	cmp	r3, #47	; 0x2f
 801377a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	bf0c      	ite	eq
 8013782:	4b5d      	ldreq	r3, [pc, #372]	; (80138f8 <rcl_node_init+0x284>)
 8013784:	4b5d      	ldrne	r3, [pc, #372]	; (80138fc <rcl_node_init+0x288>)
 8013786:	9302      	str	r3, [sp, #8]
 8013788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801378c:	9301      	str	r3, [sp, #4]
 801378e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013792:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013796:	f001 fcbf 	bl	8015118 <rcutils_format_string_limit>
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 80137a0:	4631      	mov	r1, r6
 80137a2:	6818      	ldr	r0, [r3, #0]
 80137a4:	462a      	mov	r2, r5
 80137a6:	6866      	ldr	r6, [r4, #4]
 80137a8:	3028      	adds	r0, #40	; 0x28
 80137aa:	f002 fa87 	bl	8015cbc <rmw_create_node>
 80137ae:	6863      	ldr	r3, [r4, #4]
 80137b0:	66b0      	str	r0, [r6, #104]	; 0x68
 80137b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80137b4:	2800      	cmp	r0, #0
 80137b6:	d032      	beq.n	801381e <rcl_node_init+0x1aa>
 80137b8:	f002 fb10 	bl	8015ddc <rmw_node_get_graph_guard_condition>
 80137bc:	4682      	mov	sl, r0
 80137be:	b360      	cbz	r0, 801381a <rcl_node_init+0x1a6>
 80137c0:	f8d8 3000 	ldr.w	r3, [r8]
 80137c4:	2008      	movs	r0, #8
 80137c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137ca:	6866      	ldr	r6, [r4, #4]
 80137cc:	4798      	blx	r3
 80137ce:	6863      	ldr	r3, [r4, #4]
 80137d0:	66f0      	str	r0, [r6, #108]	; 0x6c
 80137d2:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 80137d6:	f1bb 0f00 	cmp.w	fp, #0
 80137da:	d020      	beq.n	801381e <rcl_node_init+0x1aa>
 80137dc:	a806      	add	r0, sp, #24
 80137de:	ae23      	add	r6, sp, #140	; 0x8c
 80137e0:	f007 fea8 	bl	801b534 <rcl_get_zero_initialized_guard_condition>
 80137e4:	a806      	add	r0, sp, #24
 80137e6:	6863      	ldr	r3, [r4, #4]
 80137e8:	46c4      	mov	ip, r8
 80137ea:	c803      	ldmia	r0, {r0, r1}
 80137ec:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 80137f0:	e88b 0003 	stmia.w	fp, {r0, r1}
 80137f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80137fa:	f8dc 3000 	ldr.w	r3, [ip]
 80137fe:	6033      	str	r3, [r6, #0]
 8013800:	ab28      	add	r3, sp, #160	; 0xa0
 8013802:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013806:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801380a:	4651      	mov	r1, sl
 801380c:	463a      	mov	r2, r7
 801380e:	4670      	mov	r0, lr
 8013810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013812:	f007 fe99 	bl	801b548 <rcl_guard_condition_init_from_rmw>
 8013816:	4682      	mov	sl, r0
 8013818:	b328      	cbz	r0, 8013866 <rcl_node_init+0x1f2>
 801381a:	6863      	ldr	r3, [r4, #4]
 801381c:	b1f3      	cbz	r3, 801385c <rcl_node_init+0x1e8>
 801381e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8013820:	b128      	cbz	r0, 801382e <rcl_node_init+0x1ba>
 8013822:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013826:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801382a:	4798      	blx	r3
 801382c:	6863      	ldr	r3, [r4, #4]
 801382e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013830:	b110      	cbz	r0, 8013838 <rcl_node_init+0x1c4>
 8013832:	f002 fa55 	bl	8015ce0 <rmw_destroy_node>
 8013836:	6863      	ldr	r3, [r4, #4]
 8013838:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801383a:	b148      	cbz	r0, 8013850 <rcl_node_init+0x1dc>
 801383c:	f007 fee0 	bl	801b600 <rcl_guard_condition_fini>
 8013840:	6863      	ldr	r3, [r4, #4]
 8013842:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013846:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013848:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801384c:	4798      	blx	r3
 801384e:	6863      	ldr	r3, [r4, #4]
 8013850:	4618      	mov	r0, r3
 8013852:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013856:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801385a:	4798      	blx	r3
 801385c:	2300      	movs	r3, #0
 801385e:	f04f 0a01 	mov.w	sl, #1
 8013862:	e9c4 3300 	strd	r3, r3, [r4]
 8013866:	f1b9 0f00 	cmp.w	r9, #0
 801386a:	d008      	beq.n	801387e <rcl_node_init+0x20a>
 801386c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013870:	4628      	mov	r0, r5
 8013872:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013876:	4798      	blx	r3
 8013878:	e001      	b.n	801387e <rcl_node_init+0x20a>
 801387a:	f04f 0a0b 	mov.w	sl, #11
 801387e:	4650      	mov	r0, sl
 8013880:	b029      	add	sp, #164	; 0xa4
 8013882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013886:	f04f 0a65 	mov.w	sl, #101	; 0x65
 801388a:	e7f8      	b.n	801387e <rcl_node_init+0x20a>
 801388c:	782b      	ldrb	r3, [r5, #0]
 801388e:	2b2f      	cmp	r3, #47	; 0x2f
 8013890:	f43f af3d 	beq.w	801370e <rcl_node_init+0x9a>
 8013894:	9503      	str	r5, [sp, #12]
 8013896:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	4b18      	ldr	r3, [pc, #96]	; (8013900 <rcl_node_init+0x28c>)
 801389e:	9302      	str	r3, [sp, #8]
 80138a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138a4:	9301      	str	r3, [sp, #4]
 80138a6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80138aa:	f001 fc35 	bl	8015118 <rcutils_format_string_limit>
 80138ae:	4605      	mov	r5, r0
 80138b0:	b1e0      	cbz	r0, 80138ec <rcl_node_init+0x278>
 80138b2:	2200      	movs	r2, #0
 80138b4:	a922      	add	r1, sp, #136	; 0x88
 80138b6:	9222      	str	r2, [sp, #136]	; 0x88
 80138b8:	f001 fe86 	bl	80155c8 <rmw_validate_namespace>
 80138bc:	4682      	mov	sl, r0
 80138be:	2800      	cmp	r0, #0
 80138c0:	d1d4      	bne.n	801386c <rcl_node_init+0x1f8>
 80138c2:	46d9      	mov	r9, fp
 80138c4:	e72c      	b.n	8013720 <rcl_node_init+0xac>
 80138c6:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80138ca:	4650      	mov	r0, sl
 80138cc:	b029      	add	sp, #164	; 0xa4
 80138ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138d2:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80138d6:	f001 fe89 	bl	80155ec <rmw_namespace_validation_result_string>
 80138da:	e7c4      	b.n	8013866 <rcl_node_init+0x1f2>
 80138dc:	f04f 0a0a 	mov.w	sl, #10
 80138e0:	e7c1      	b.n	8013866 <rcl_node_init+0x1f2>
 80138e2:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 80138e6:	f001 fee1 	bl	80156ac <rmw_node_name_validation_result_string>
 80138ea:	e7c8      	b.n	801387e <rcl_node_init+0x20a>
 80138ec:	f04f 0a0a 	mov.w	sl, #10
 80138f0:	e7c5      	b.n	801387e <rcl_node_init+0x20a>
 80138f2:	bf00      	nop
 80138f4:	08024e38 	.word	0x08024e38
 80138f8:	08024e40 	.word	0x08024e40
 80138fc:	08024e48 	.word	0x08024e48
 8013900:	08024e3c 	.word	0x08024e3c

08013904 <rcl_node_is_valid>:
 8013904:	b130      	cbz	r0, 8013914 <rcl_node_is_valid+0x10>
 8013906:	6843      	ldr	r3, [r0, #4]
 8013908:	b123      	cbz	r3, 8013914 <rcl_node_is_valid+0x10>
 801390a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801390c:	b113      	cbz	r3, 8013914 <rcl_node_is_valid+0x10>
 801390e:	6800      	ldr	r0, [r0, #0]
 8013910:	f007 bdaa 	b.w	801b468 <rcl_context_is_valid>
 8013914:	2000      	movs	r0, #0
 8013916:	4770      	bx	lr

08013918 <rcl_node_get_name>:
 8013918:	b120      	cbz	r0, 8013924 <rcl_node_get_name+0xc>
 801391a:	6840      	ldr	r0, [r0, #4]
 801391c:	b110      	cbz	r0, 8013924 <rcl_node_get_name+0xc>
 801391e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013920:	b100      	cbz	r0, 8013924 <rcl_node_get_name+0xc>
 8013922:	6880      	ldr	r0, [r0, #8]
 8013924:	4770      	bx	lr
 8013926:	bf00      	nop

08013928 <rcl_node_get_namespace>:
 8013928:	b120      	cbz	r0, 8013934 <rcl_node_get_namespace+0xc>
 801392a:	6840      	ldr	r0, [r0, #4]
 801392c:	b110      	cbz	r0, 8013934 <rcl_node_get_namespace+0xc>
 801392e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013930:	b100      	cbz	r0, 8013934 <rcl_node_get_namespace+0xc>
 8013932:	68c0      	ldr	r0, [r0, #12]
 8013934:	4770      	bx	lr
 8013936:	bf00      	nop

08013938 <rcl_node_get_options>:
 8013938:	b128      	cbz	r0, 8013946 <rcl_node_get_options+0xe>
 801393a:	6840      	ldr	r0, [r0, #4]
 801393c:	b118      	cbz	r0, 8013946 <rcl_node_get_options+0xe>
 801393e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8013940:	2b00      	cmp	r3, #0
 8013942:	bf08      	it	eq
 8013944:	2000      	moveq	r0, #0
 8013946:	4770      	bx	lr

08013948 <rcl_node_get_rmw_handle>:
 8013948:	b110      	cbz	r0, 8013950 <rcl_node_get_rmw_handle+0x8>
 801394a:	6840      	ldr	r0, [r0, #4]
 801394c:	b100      	cbz	r0, 8013950 <rcl_node_get_rmw_handle+0x8>
 801394e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop

08013954 <rcl_node_get_default_options>:
 8013954:	b510      	push	{r4, lr}
 8013956:	4604      	mov	r4, r0
 8013958:	2268      	movs	r2, #104	; 0x68
 801395a:	2100      	movs	r1, #0
 801395c:	f00d fa16 	bl	8020d8c <memset>
 8013960:	4620      	mov	r0, r4
 8013962:	f001 fb71 	bl	8015048 <rcutils_get_default_allocator>
 8013966:	2301      	movs	r3, #1
 8013968:	4620      	mov	r0, r4
 801396a:	7523      	strb	r3, [r4, #20]
 801396c:	bd10      	pop	{r4, pc}
 801396e:	bf00      	nop

08013970 <rcl_node_options_copy>:
 8013970:	2800      	cmp	r0, #0
 8013972:	bf18      	it	ne
 8013974:	4288      	cmpne	r0, r1
 8013976:	d01b      	beq.n	80139b0 <rcl_node_options_copy+0x40>
 8013978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801397a:	fab1 f681 	clz	r6, r1
 801397e:	460c      	mov	r4, r1
 8013980:	0976      	lsrs	r6, r6, #5
 8013982:	b199      	cbz	r1, 80139ac <rcl_node_options_copy+0x3c>
 8013984:	4605      	mov	r5, r0
 8013986:	8a87      	ldrh	r7, [r0, #20]
 8013988:	4684      	mov	ip, r0
 801398a:	468e      	mov	lr, r1
 801398c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801398e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013992:	682b      	ldr	r3, [r5, #0]
 8013994:	2250      	movs	r2, #80	; 0x50
 8013996:	f10c 0118 	add.w	r1, ip, #24
 801399a:	f104 0018 	add.w	r0, r4, #24
 801399e:	f8ce 3000 	str.w	r3, [lr]
 80139a2:	82a7      	strh	r7, [r4, #20]
 80139a4:	f00d fabf 	bl	8020f26 <memcpy>
 80139a8:	4630      	mov	r0, r6
 80139aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139ac:	200b      	movs	r0, #11
 80139ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139b0:	200b      	movs	r0, #11
 80139b2:	4770      	bx	lr

080139b4 <rcl_get_zero_initialized_publisher>:
 80139b4:	4b01      	ldr	r3, [pc, #4]	; (80139bc <rcl_get_zero_initialized_publisher+0x8>)
 80139b6:	6818      	ldr	r0, [r3, #0]
 80139b8:	4770      	bx	lr
 80139ba:	bf00      	nop
 80139bc:	08024e58 	.word	0x08024e58

080139c0 <rcl_publisher_init>:
 80139c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139c4:	b088      	sub	sp, #32
 80139c6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80139c8:	2e00      	cmp	r6, #0
 80139ca:	d06b      	beq.n	8013aa4 <rcl_publisher_init+0xe4>
 80139cc:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 80139d0:	4605      	mov	r5, r0
 80139d2:	460f      	mov	r7, r1
 80139d4:	4690      	mov	r8, r2
 80139d6:	4650      	mov	r0, sl
 80139d8:	4699      	mov	r9, r3
 80139da:	f001 fb43 	bl	8015064 <rcutils_allocator_is_valid>
 80139de:	f080 0401 	eor.w	r4, r0, #1
 80139e2:	b2e4      	uxtb	r4, r4
 80139e4:	2c00      	cmp	r4, #0
 80139e6:	d15d      	bne.n	8013aa4 <rcl_publisher_init+0xe4>
 80139e8:	2d00      	cmp	r5, #0
 80139ea:	d05b      	beq.n	8013aa4 <rcl_publisher_init+0xe4>
 80139ec:	682b      	ldr	r3, [r5, #0]
 80139ee:	b123      	cbz	r3, 80139fa <rcl_publisher_init+0x3a>
 80139f0:	2464      	movs	r4, #100	; 0x64
 80139f2:	4620      	mov	r0, r4
 80139f4:	b008      	add	sp, #32
 80139f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139fa:	4638      	mov	r0, r7
 80139fc:	f7ff ff82 	bl	8013904 <rcl_node_is_valid>
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d054      	beq.n	8013aae <rcl_publisher_init+0xee>
 8013a04:	f1b8 0f00 	cmp.w	r8, #0
 8013a08:	d04c      	beq.n	8013aa4 <rcl_publisher_init+0xe4>
 8013a0a:	fab9 f389 	clz	r3, r9
 8013a0e:	095b      	lsrs	r3, r3, #5
 8013a10:	f1b9 0f00 	cmp.w	r9, #0
 8013a14:	d046      	beq.n	8013aa4 <rcl_publisher_init+0xe4>
 8013a16:	aa07      	add	r2, sp, #28
 8013a18:	9307      	str	r3, [sp, #28]
 8013a1a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013a1e:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8013a22:	9205      	str	r2, [sp, #20]
 8013a24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013a28:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a2c:	4649      	mov	r1, r9
 8013a2e:	4638      	mov	r0, r7
 8013a30:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013a34:	f007 ff54 	bl	801b8e0 <rcl_node_resolve_name>
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	d14f      	bne.n	8013adc <rcl_publisher_init+0x11c>
 8013a3c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013a3e:	20c8      	movs	r0, #200	; 0xc8
 8013a40:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013a42:	4798      	blx	r3
 8013a44:	6028      	str	r0, [r5, #0]
 8013a46:	2800      	cmp	r0, #0
 8013a48:	d050      	beq.n	8013aec <rcl_publisher_init+0x12c>
 8013a4a:	4638      	mov	r0, r7
 8013a4c:	f7ff ff7c 	bl	8013948 <rcl_node_get_rmw_handle>
 8013a50:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8013a54:	4641      	mov	r1, r8
 8013a56:	9a07      	ldr	r2, [sp, #28]
 8013a58:	9300      	str	r3, [sp, #0]
 8013a5a:	4633      	mov	r3, r6
 8013a5c:	682c      	ldr	r4, [r5, #0]
 8013a5e:	f002 fa27 	bl	8015eb0 <rmw_create_publisher>
 8013a62:	682b      	ldr	r3, [r5, #0]
 8013a64:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013a68:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013a6c:	b370      	cbz	r0, 8013acc <rcl_publisher_init+0x10c>
 8013a6e:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8013a72:	f002 fb01 	bl	8016078 <rmw_publisher_get_actual_qos>
 8013a76:	682b      	ldr	r3, [r5, #0]
 8013a78:	4604      	mov	r4, r0
 8013a7a:	b9d0      	cbnz	r0, 8013ab2 <rcl_publisher_init+0xf2>
 8013a7c:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8013a80:	4631      	mov	r1, r6
 8013a82:	4618      	mov	r0, r3
 8013a84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8013a88:	2270      	movs	r2, #112	; 0x70
 8013a8a:	f00d fa4c 	bl	8020f26 <memcpy>
 8013a8e:	683a      	ldr	r2, [r7, #0]
 8013a90:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8013a94:	9807      	ldr	r0, [sp, #28]
 8013a96:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013a98:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013a9a:	4798      	blx	r3
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	b008      	add	sp, #32
 8013aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aa4:	240b      	movs	r4, #11
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	b008      	add	sp, #32
 8013aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aae:	24c8      	movs	r4, #200	; 0xc8
 8013ab0:	e79f      	b.n	80139f2 <rcl_publisher_init+0x32>
 8013ab2:	b1cb      	cbz	r3, 8013ae8 <rcl_publisher_init+0x128>
 8013ab4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013ab8:	b142      	cbz	r2, 8013acc <rcl_publisher_init+0x10c>
 8013aba:	4638      	mov	r0, r7
 8013abc:	f7ff ff44 	bl	8013948 <rcl_node_get_rmw_handle>
 8013ac0:	682b      	ldr	r3, [r5, #0]
 8013ac2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8013ac6:	f002 faeb 	bl	80160a0 <rmw_destroy_publisher>
 8013aca:	682b      	ldr	r3, [r5, #0]
 8013acc:	4618      	mov	r0, r3
 8013ace:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8013ad0:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013ad2:	2401      	movs	r4, #1
 8013ad4:	4790      	blx	r2
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	602b      	str	r3, [r5, #0]
 8013ada:	e7db      	b.n	8013a94 <rcl_publisher_init+0xd4>
 8013adc:	2867      	cmp	r0, #103	; 0x67
 8013ade:	d007      	beq.n	8013af0 <rcl_publisher_init+0x130>
 8013ae0:	2869      	cmp	r0, #105	; 0x69
 8013ae2:	d005      	beq.n	8013af0 <rcl_publisher_init+0x130>
 8013ae4:	280a      	cmp	r0, #10
 8013ae6:	d001      	beq.n	8013aec <rcl_publisher_init+0x12c>
 8013ae8:	2401      	movs	r4, #1
 8013aea:	e7d3      	b.n	8013a94 <rcl_publisher_init+0xd4>
 8013aec:	240a      	movs	r4, #10
 8013aee:	e7d1      	b.n	8013a94 <rcl_publisher_init+0xd4>
 8013af0:	2467      	movs	r4, #103	; 0x67
 8013af2:	e7cf      	b.n	8013a94 <rcl_publisher_init+0xd4>

08013af4 <rcl_publisher_get_default_options>:
 8013af4:	b570      	push	{r4, r5, r6, lr}
 8013af6:	4d14      	ldr	r5, [pc, #80]	; (8013b48 <rcl_publisher_get_default_options+0x54>)
 8013af8:	b088      	sub	sp, #32
 8013afa:	4604      	mov	r4, r0
 8013afc:	2250      	movs	r2, #80	; 0x50
 8013afe:	4913      	ldr	r1, [pc, #76]	; (8013b4c <rcl_publisher_get_default_options+0x58>)
 8013b00:	4628      	mov	r0, r5
 8013b02:	f00d fa10 	bl	8020f26 <memcpy>
 8013b06:	a802      	add	r0, sp, #8
 8013b08:	f001 fa9e 	bl	8015048 <rcutils_get_default_allocator>
 8013b0c:	f10d 0c08 	add.w	ip, sp, #8
 8013b10:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013b14:	466e      	mov	r6, sp
 8013b16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8013b22:	4630      	mov	r0, r6
 8013b24:	f8ce 3000 	str.w	r3, [lr]
 8013b28:	f001 fcca 	bl	80154c0 <rmw_get_default_publisher_options>
 8013b2c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013b30:	2270      	movs	r2, #112	; 0x70
 8013b32:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b36:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b3a:	4629      	mov	r1, r5
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	f00d f9f2 	bl	8020f26 <memcpy>
 8013b42:	4620      	mov	r0, r4
 8013b44:	b008      	add	sp, #32
 8013b46:	bd70      	pop	{r4, r5, r6, pc}
 8013b48:	20012340 	.word	0x20012340
 8013b4c:	08024e60 	.word	0x08024e60

08013b50 <rcl_publish>:
 8013b50:	b1f8      	cbz	r0, 8013b92 <rcl_publish+0x42>
 8013b52:	6803      	ldr	r3, [r0, #0]
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	4604      	mov	r4, r0
 8013b58:	b1b3      	cbz	r3, 8013b88 <rcl_publish+0x38>
 8013b5a:	4616      	mov	r6, r2
 8013b5c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013b60:	b192      	cbz	r2, 8013b88 <rcl_publish+0x38>
 8013b62:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013b66:	460d      	mov	r5, r1
 8013b68:	f007 fc7e 	bl	801b468 <rcl_context_is_valid>
 8013b6c:	b160      	cbz	r0, 8013b88 <rcl_publish+0x38>
 8013b6e:	6823      	ldr	r3, [r4, #0]
 8013b70:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013b74:	b140      	cbz	r0, 8013b88 <rcl_publish+0x38>
 8013b76:	b155      	cbz	r5, 8013b8e <rcl_publish+0x3e>
 8013b78:	4632      	mov	r2, r6
 8013b7a:	4629      	mov	r1, r5
 8013b7c:	f002 f938 	bl	8015df0 <rmw_publish>
 8013b80:	3800      	subs	r0, #0
 8013b82:	bf18      	it	ne
 8013b84:	2001      	movne	r0, #1
 8013b86:	bd70      	pop	{r4, r5, r6, pc}
 8013b88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013b8c:	bd70      	pop	{r4, r5, r6, pc}
 8013b8e:	200b      	movs	r0, #11
 8013b90:	bd70      	pop	{r4, r5, r6, pc}
 8013b92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013b96:	4770      	bx	lr

08013b98 <rcl_publisher_is_valid>:
 8013b98:	b1a0      	cbz	r0, 8013bc4 <rcl_publisher_is_valid+0x2c>
 8013b9a:	6803      	ldr	r3, [r0, #0]
 8013b9c:	b510      	push	{r4, lr}
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	b173      	cbz	r3, 8013bc0 <rcl_publisher_is_valid+0x28>
 8013ba2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013ba6:	b15a      	cbz	r2, 8013bc0 <rcl_publisher_is_valid+0x28>
 8013ba8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013bac:	f007 fc5c 	bl	801b468 <rcl_context_is_valid>
 8013bb0:	b130      	cbz	r0, 8013bc0 <rcl_publisher_is_valid+0x28>
 8013bb2:	6823      	ldr	r3, [r4, #0]
 8013bb4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013bb8:	3800      	subs	r0, #0
 8013bba:	bf18      	it	ne
 8013bbc:	2001      	movne	r0, #1
 8013bbe:	bd10      	pop	{r4, pc}
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	bd10      	pop	{r4, pc}
 8013bc4:	2000      	movs	r0, #0
 8013bc6:	4770      	bx	lr

08013bc8 <rcl_publisher_is_valid_except_context>:
 8013bc8:	b130      	cbz	r0, 8013bd8 <rcl_publisher_is_valid_except_context+0x10>
 8013bca:	6800      	ldr	r0, [r0, #0]
 8013bcc:	b120      	cbz	r0, 8013bd8 <rcl_publisher_is_valid_except_context+0x10>
 8013bce:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013bd2:	3800      	subs	r0, #0
 8013bd4:	bf18      	it	ne
 8013bd6:	2001      	movne	r0, #1
 8013bd8:	4770      	bx	lr
 8013bda:	bf00      	nop

08013bdc <rcl_get_zero_initialized_service>:
 8013bdc:	4b01      	ldr	r3, [pc, #4]	; (8013be4 <rcl_get_zero_initialized_service+0x8>)
 8013bde:	6818      	ldr	r0, [r3, #0]
 8013be0:	4770      	bx	lr
 8013be2:	bf00      	nop
 8013be4:	08024eb0 	.word	0x08024eb0

08013be8 <rcl_service_init>:
 8013be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bec:	b088      	sub	sp, #32
 8013bee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013bf0:	b1ff      	cbz	r7, 8013c32 <rcl_service_init+0x4a>
 8013bf2:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013bf6:	4605      	mov	r5, r0
 8013bf8:	460e      	mov	r6, r1
 8013bfa:	4691      	mov	r9, r2
 8013bfc:	4650      	mov	r0, sl
 8013bfe:	4698      	mov	r8, r3
 8013c00:	f001 fa30 	bl	8015064 <rcutils_allocator_is_valid>
 8013c04:	f080 0401 	eor.w	r4, r0, #1
 8013c08:	b2e4      	uxtb	r4, r4
 8013c0a:	b994      	cbnz	r4, 8013c32 <rcl_service_init+0x4a>
 8013c0c:	b18d      	cbz	r5, 8013c32 <rcl_service_init+0x4a>
 8013c0e:	4630      	mov	r0, r6
 8013c10:	f7ff fe78 	bl	8013904 <rcl_node_is_valid>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d05d      	beq.n	8013cd4 <rcl_service_init+0xec>
 8013c18:	f1b8 0f00 	cmp.w	r8, #0
 8013c1c:	d009      	beq.n	8013c32 <rcl_service_init+0x4a>
 8013c1e:	f1b9 0f00 	cmp.w	r9, #0
 8013c22:	d006      	beq.n	8013c32 <rcl_service_init+0x4a>
 8013c24:	682b      	ldr	r3, [r5, #0]
 8013c26:	b14b      	cbz	r3, 8013c3c <rcl_service_init+0x54>
 8013c28:	2464      	movs	r4, #100	; 0x64
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	b008      	add	sp, #32
 8013c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c32:	240b      	movs	r4, #11
 8013c34:	4620      	mov	r0, r4
 8013c36:	b008      	add	sp, #32
 8013c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c3c:	aa07      	add	r2, sp, #28
 8013c3e:	9304      	str	r3, [sp, #16]
 8013c40:	9307      	str	r3, [sp, #28]
 8013c42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013c46:	9205      	str	r2, [sp, #20]
 8013c48:	2201      	movs	r2, #1
 8013c4a:	9203      	str	r2, [sp, #12]
 8013c4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013c50:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013c54:	4641      	mov	r1, r8
 8013c56:	4630      	mov	r0, r6
 8013c58:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013c5c:	f007 fe40 	bl	801b8e0 <rcl_node_resolve_name>
 8013c60:	2800      	cmp	r0, #0
 8013c62:	d146      	bne.n	8013cf2 <rcl_service_init+0x10a>
 8013c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c66:	f44f 7088 	mov.w	r0, #272	; 0x110
 8013c6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013c6c:	4798      	blx	r3
 8013c6e:	6028      	str	r0, [r5, #0]
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d046      	beq.n	8013d02 <rcl_service_init+0x11a>
 8013c74:	4630      	mov	r0, r6
 8013c76:	f7ff fe67 	bl	8013948 <rcl_node_get_rmw_handle>
 8013c7a:	463b      	mov	r3, r7
 8013c7c:	4649      	mov	r1, r9
 8013c7e:	9a07      	ldr	r2, [sp, #28]
 8013c80:	682c      	ldr	r4, [r5, #0]
 8013c82:	f002 fbb1 	bl	80163e8 <rmw_create_service>
 8013c86:	682b      	ldr	r3, [r5, #0]
 8013c88:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8013c8c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013c90:	b338      	cbz	r0, 8013ce2 <rcl_service_init+0xfa>
 8013c92:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8013c96:	f002 fcd9 	bl	801664c <rmw_service_request_subscription_get_actual_qos>
 8013c9a:	bb00      	cbnz	r0, 8013cde <rcl_service_init+0xf6>
 8013c9c:	682b      	ldr	r3, [r5, #0]
 8013c9e:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8013ca2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013ca6:	f002 fcbd 	bl	8016624 <rmw_service_response_publisher_get_actual_qos>
 8013caa:	4604      	mov	r4, r0
 8013cac:	b9b8      	cbnz	r0, 8013cde <rcl_service_init+0xf6>
 8013cae:	6828      	ldr	r0, [r5, #0]
 8013cb0:	2268      	movs	r2, #104	; 0x68
 8013cb2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013cb6:	4639      	mov	r1, r7
 8013cb8:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8013cbc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8013cc0:	f00d f931 	bl	8020f26 <memcpy>
 8013cc4:	9807      	ldr	r0, [sp, #28]
 8013cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cc8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013cca:	4798      	blx	r3
 8013ccc:	4620      	mov	r0, r4
 8013cce:	b008      	add	sp, #32
 8013cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd4:	24c8      	movs	r4, #200	; 0xc8
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	b008      	add	sp, #32
 8013cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cde:	682b      	ldr	r3, [r5, #0]
 8013ce0:	b16b      	cbz	r3, 8013cfe <rcl_service_init+0x116>
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ce6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013ce8:	2401      	movs	r4, #1
 8013cea:	4790      	blx	r2
 8013cec:	2300      	movs	r3, #0
 8013cee:	602b      	str	r3, [r5, #0]
 8013cf0:	e7e8      	b.n	8013cc4 <rcl_service_init+0xdc>
 8013cf2:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8013cf6:	2b01      	cmp	r3, #1
 8013cf8:	d905      	bls.n	8013d06 <rcl_service_init+0x11e>
 8013cfa:	280a      	cmp	r0, #10
 8013cfc:	d001      	beq.n	8013d02 <rcl_service_init+0x11a>
 8013cfe:	2401      	movs	r4, #1
 8013d00:	e7e0      	b.n	8013cc4 <rcl_service_init+0xdc>
 8013d02:	240a      	movs	r4, #10
 8013d04:	e7de      	b.n	8013cc4 <rcl_service_init+0xdc>
 8013d06:	2468      	movs	r4, #104	; 0x68
 8013d08:	e7dc      	b.n	8013cc4 <rcl_service_init+0xdc>
 8013d0a:	bf00      	nop

08013d0c <rcl_service_get_default_options>:
 8013d0c:	b530      	push	{r4, r5, lr}
 8013d0e:	4d0f      	ldr	r5, [pc, #60]	; (8013d4c <rcl_service_get_default_options+0x40>)
 8013d10:	b087      	sub	sp, #28
 8013d12:	4604      	mov	r4, r0
 8013d14:	2250      	movs	r2, #80	; 0x50
 8013d16:	490e      	ldr	r1, [pc, #56]	; (8013d50 <rcl_service_get_default_options+0x44>)
 8013d18:	4628      	mov	r0, r5
 8013d1a:	f00d f904 	bl	8020f26 <memcpy>
 8013d1e:	4668      	mov	r0, sp
 8013d20:	f001 f992 	bl	8015048 <rcutils_get_default_allocator>
 8013d24:	46ec      	mov	ip, sp
 8013d26:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013d2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d32:	f8dc 3000 	ldr.w	r3, [ip]
 8013d36:	2268      	movs	r2, #104	; 0x68
 8013d38:	4629      	mov	r1, r5
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f8ce 3000 	str.w	r3, [lr]
 8013d40:	f00d f8f1 	bl	8020f26 <memcpy>
 8013d44:	4620      	mov	r0, r4
 8013d46:	b007      	add	sp, #28
 8013d48:	bd30      	pop	{r4, r5, pc}
 8013d4a:	bf00      	nop
 8013d4c:	200123b0 	.word	0x200123b0
 8013d50:	08024eb8 	.word	0x08024eb8

08013d54 <rcl_service_get_rmw_handle>:
 8013d54:	b118      	cbz	r0, 8013d5e <rcl_service_get_rmw_handle+0xa>
 8013d56:	6800      	ldr	r0, [r0, #0]
 8013d58:	b108      	cbz	r0, 8013d5e <rcl_service_get_rmw_handle+0xa>
 8013d5a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013d5e:	4770      	bx	lr

08013d60 <rcl_take_request>:
 8013d60:	b570      	push	{r4, r5, r6, lr}
 8013d62:	468e      	mov	lr, r1
 8013d64:	b08c      	sub	sp, #48	; 0x30
 8013d66:	460c      	mov	r4, r1
 8013d68:	4616      	mov	r6, r2
 8013d6a:	f10d 0c18 	add.w	ip, sp, #24
 8013d6e:	4605      	mov	r5, r0
 8013d70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d78:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013d7c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d80:	b30d      	cbz	r5, 8013dc6 <rcl_take_request+0x66>
 8013d82:	682b      	ldr	r3, [r5, #0]
 8013d84:	b1fb      	cbz	r3, 8013dc6 <rcl_take_request+0x66>
 8013d86:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013d8a:	b1e0      	cbz	r0, 8013dc6 <rcl_take_request+0x66>
 8013d8c:	b336      	cbz	r6, 8013ddc <rcl_take_request+0x7c>
 8013d8e:	2300      	movs	r3, #0
 8013d90:	4632      	mov	r2, r6
 8013d92:	a902      	add	r1, sp, #8
 8013d94:	f88d 3007 	strb.w	r3, [sp, #7]
 8013d98:	f10d 0307 	add.w	r3, sp, #7
 8013d9c:	f002 fa22 	bl	80161e4 <rmw_take_request>
 8013da0:	4605      	mov	r5, r0
 8013da2:	b198      	cbz	r0, 8013dcc <rcl_take_request+0x6c>
 8013da4:	280a      	cmp	r0, #10
 8013da6:	bf18      	it	ne
 8013da8:	2501      	movne	r5, #1
 8013daa:	f10d 0e18 	add.w	lr, sp, #24
 8013dae:	46a4      	mov	ip, r4
 8013db0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013db8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013dbc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	b00c      	add	sp, #48	; 0x30
 8013dc4:	bd70      	pop	{r4, r5, r6, pc}
 8013dc6:	f44f 7516 	mov.w	r5, #600	; 0x258
 8013dca:	e7ee      	b.n	8013daa <rcl_take_request+0x4a>
 8013dcc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013dd0:	f240 2359 	movw	r3, #601	; 0x259
 8013dd4:	2a00      	cmp	r2, #0
 8013dd6:	bf08      	it	eq
 8013dd8:	461d      	moveq	r5, r3
 8013dda:	e7e6      	b.n	8013daa <rcl_take_request+0x4a>
 8013ddc:	250b      	movs	r5, #11
 8013dde:	e7e4      	b.n	8013daa <rcl_take_request+0x4a>

08013de0 <rcl_send_response>:
 8013de0:	b170      	cbz	r0, 8013e00 <rcl_send_response+0x20>
 8013de2:	6800      	ldr	r0, [r0, #0]
 8013de4:	b160      	cbz	r0, 8013e00 <rcl_send_response+0x20>
 8013de6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013dea:	b148      	cbz	r0, 8013e00 <rcl_send_response+0x20>
 8013dec:	b169      	cbz	r1, 8013e0a <rcl_send_response+0x2a>
 8013dee:	b510      	push	{r4, lr}
 8013df0:	b14a      	cbz	r2, 8013e06 <rcl_send_response+0x26>
 8013df2:	f002 fa55 	bl	80162a0 <rmw_send_response>
 8013df6:	b110      	cbz	r0, 8013dfe <rcl_send_response+0x1e>
 8013df8:	2802      	cmp	r0, #2
 8013dfa:	bf18      	it	ne
 8013dfc:	2001      	movne	r0, #1
 8013dfe:	bd10      	pop	{r4, pc}
 8013e00:	f44f 7016 	mov.w	r0, #600	; 0x258
 8013e04:	4770      	bx	lr
 8013e06:	200b      	movs	r0, #11
 8013e08:	bd10      	pop	{r4, pc}
 8013e0a:	200b      	movs	r0, #11
 8013e0c:	4770      	bx	lr
 8013e0e:	bf00      	nop

08013e10 <rcl_service_is_valid>:
 8013e10:	b130      	cbz	r0, 8013e20 <rcl_service_is_valid+0x10>
 8013e12:	6800      	ldr	r0, [r0, #0]
 8013e14:	b120      	cbz	r0, 8013e20 <rcl_service_is_valid+0x10>
 8013e16:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013e1a:	3800      	subs	r0, #0
 8013e1c:	bf18      	it	ne
 8013e1e:	2001      	movne	r0, #1
 8013e20:	4770      	bx	lr
 8013e22:	bf00      	nop

08013e24 <rcl_get_zero_initialized_subscription>:
 8013e24:	4b01      	ldr	r3, [pc, #4]	; (8013e2c <rcl_get_zero_initialized_subscription+0x8>)
 8013e26:	6818      	ldr	r0, [r3, #0]
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	08024f08 	.word	0x08024f08

08013e30 <rcl_subscription_init>:
 8013e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e34:	b088      	sub	sp, #32
 8013e36:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013e38:	b1ff      	cbz	r7, 8013e7a <rcl_subscription_init+0x4a>
 8013e3a:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013e3e:	4605      	mov	r5, r0
 8013e40:	460e      	mov	r6, r1
 8013e42:	4691      	mov	r9, r2
 8013e44:	4650      	mov	r0, sl
 8013e46:	4698      	mov	r8, r3
 8013e48:	f001 f90c 	bl	8015064 <rcutils_allocator_is_valid>
 8013e4c:	f080 0401 	eor.w	r4, r0, #1
 8013e50:	b2e4      	uxtb	r4, r4
 8013e52:	b994      	cbnz	r4, 8013e7a <rcl_subscription_init+0x4a>
 8013e54:	b18d      	cbz	r5, 8013e7a <rcl_subscription_init+0x4a>
 8013e56:	4630      	mov	r0, r6
 8013e58:	f7ff fd54 	bl	8013904 <rcl_node_is_valid>
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	d055      	beq.n	8013f0c <rcl_subscription_init+0xdc>
 8013e60:	f1b9 0f00 	cmp.w	r9, #0
 8013e64:	d009      	beq.n	8013e7a <rcl_subscription_init+0x4a>
 8013e66:	f1b8 0f00 	cmp.w	r8, #0
 8013e6a:	d006      	beq.n	8013e7a <rcl_subscription_init+0x4a>
 8013e6c:	682b      	ldr	r3, [r5, #0]
 8013e6e:	b14b      	cbz	r3, 8013e84 <rcl_subscription_init+0x54>
 8013e70:	2464      	movs	r4, #100	; 0x64
 8013e72:	4620      	mov	r0, r4
 8013e74:	b008      	add	sp, #32
 8013e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e7a:	240b      	movs	r4, #11
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	b008      	add	sp, #32
 8013e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e84:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013e88:	aa07      	add	r2, sp, #28
 8013e8a:	9307      	str	r3, [sp, #28]
 8013e8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e90:	9205      	str	r2, [sp, #20]
 8013e92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013e9a:	4641      	mov	r1, r8
 8013e9c:	4630      	mov	r0, r6
 8013e9e:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013ea2:	f007 fd1d 	bl	801b8e0 <rcl_node_resolve_name>
 8013ea6:	2800      	cmp	r0, #0
 8013ea8:	d15f      	bne.n	8013f6a <rcl_subscription_init+0x13a>
 8013eaa:	21c8      	movs	r1, #200	; 0xc8
 8013eac:	2001      	movs	r0, #1
 8013eae:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8013eb2:	4798      	blx	r3
 8013eb4:	6028      	str	r0, [r5, #0]
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d05f      	beq.n	8013f7a <rcl_subscription_init+0x14a>
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f7ff fd44 	bl	8013948 <rcl_node_get_rmw_handle>
 8013ec0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013ec4:	4649      	mov	r1, r9
 8013ec6:	9a07      	ldr	r2, [sp, #28]
 8013ec8:	9300      	str	r3, [sp, #0]
 8013eca:	463b      	mov	r3, r7
 8013ecc:	682c      	ldr	r4, [r5, #0]
 8013ece:	f002 fbd1 	bl	8016674 <rmw_create_subscription>
 8013ed2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8013ed6:	682c      	ldr	r4, [r5, #0]
 8013ed8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8013edc:	b348      	cbz	r0, 8013f32 <rcl_subscription_init+0x102>
 8013ede:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8013ee2:	f002 fcbd 	bl	8016860 <rmw_subscription_get_actual_qos>
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	b9a8      	cbnz	r0, 8013f16 <rcl_subscription_init+0xe6>
 8013eea:	6828      	ldr	r0, [r5, #0]
 8013eec:	2270      	movs	r2, #112	; 0x70
 8013eee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013ef2:	4639      	mov	r1, r7
 8013ef4:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8013ef8:	f00d f815 	bl	8020f26 <memcpy>
 8013efc:	9807      	ldr	r0, [sp, #28]
 8013efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013f02:	4798      	blx	r3
 8013f04:	4620      	mov	r0, r4
 8013f06:	b008      	add	sp, #32
 8013f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f0c:	24c8      	movs	r4, #200	; 0xc8
 8013f0e:	4620      	mov	r0, r4
 8013f10:	b008      	add	sp, #32
 8013f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f16:	682c      	ldr	r4, [r5, #0]
 8013f18:	b36c      	cbz	r4, 8013f76 <rcl_subscription_init+0x146>
 8013f1a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8013f1e:	b14b      	cbz	r3, 8013f34 <rcl_subscription_init+0x104>
 8013f20:	4630      	mov	r0, r6
 8013f22:	f7ff fd11 	bl	8013948 <rcl_node_get_rmw_handle>
 8013f26:	682b      	ldr	r3, [r5, #0]
 8013f28:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8013f2c:	f002 fcac 	bl	8016888 <rmw_destroy_subscription>
 8013f30:	682c      	ldr	r4, [r5, #0]
 8013f32:	b194      	cbz	r4, 8013f5a <rcl_subscription_init+0x12a>
 8013f34:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8013f38:	4630      	mov	r0, r6
 8013f3a:	f001 f893 	bl	8015064 <rcutils_allocator_is_valid>
 8013f3e:	b158      	cbz	r0, 8013f58 <rcl_subscription_init+0x128>
 8013f40:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013f42:	b148      	cbz	r0, 8013f58 <rcl_subscription_init+0x128>
 8013f44:	4631      	mov	r1, r6
 8013f46:	f001 fac3 	bl	80154d0 <rmw_subscription_content_filter_options_fini>
 8013f4a:	4606      	mov	r6, r0
 8013f4c:	b9c8      	cbnz	r0, 8013f82 <rcl_subscription_init+0x152>
 8013f4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013f50:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8013f52:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013f54:	4798      	blx	r3
 8013f56:	66e6      	str	r6, [r4, #108]	; 0x6c
 8013f58:	682c      	ldr	r4, [r5, #0]
 8013f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013f60:	2401      	movs	r4, #1
 8013f62:	4798      	blx	r3
 8013f64:	2300      	movs	r3, #0
 8013f66:	602b      	str	r3, [r5, #0]
 8013f68:	e7c8      	b.n	8013efc <rcl_subscription_init+0xcc>
 8013f6a:	2867      	cmp	r0, #103	; 0x67
 8013f6c:	d007      	beq.n	8013f7e <rcl_subscription_init+0x14e>
 8013f6e:	2869      	cmp	r0, #105	; 0x69
 8013f70:	d005      	beq.n	8013f7e <rcl_subscription_init+0x14e>
 8013f72:	280a      	cmp	r0, #10
 8013f74:	d001      	beq.n	8013f7a <rcl_subscription_init+0x14a>
 8013f76:	2401      	movs	r4, #1
 8013f78:	e7c0      	b.n	8013efc <rcl_subscription_init+0xcc>
 8013f7a:	240a      	movs	r4, #10
 8013f7c:	e7be      	b.n	8013efc <rcl_subscription_init+0xcc>
 8013f7e:	2467      	movs	r4, #103	; 0x67
 8013f80:	e7bc      	b.n	8013efc <rcl_subscription_init+0xcc>
 8013f82:	f007 fa53 	bl	801b42c <rcl_convert_rmw_ret_to_rcl_ret>
 8013f86:	682c      	ldr	r4, [r5, #0]
 8013f88:	e7e7      	b.n	8013f5a <rcl_subscription_init+0x12a>
 8013f8a:	bf00      	nop

08013f8c <rcl_subscription_get_default_options>:
 8013f8c:	b570      	push	{r4, r5, r6, lr}
 8013f8e:	4d14      	ldr	r5, [pc, #80]	; (8013fe0 <rcl_subscription_get_default_options+0x54>)
 8013f90:	b08a      	sub	sp, #40	; 0x28
 8013f92:	4604      	mov	r4, r0
 8013f94:	2250      	movs	r2, #80	; 0x50
 8013f96:	4913      	ldr	r1, [pc, #76]	; (8013fe4 <rcl_subscription_get_default_options+0x58>)
 8013f98:	4628      	mov	r0, r5
 8013f9a:	f00c ffc4 	bl	8020f26 <memcpy>
 8013f9e:	a804      	add	r0, sp, #16
 8013fa0:	f001 f852 	bl	8015048 <rcutils_get_default_allocator>
 8013fa4:	f10d 0c10 	add.w	ip, sp, #16
 8013fa8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013fac:	466e      	mov	r6, sp
 8013fae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013fb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013fb6:	f8dc 3000 	ldr.w	r3, [ip]
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f8ce 3000 	str.w	r3, [lr]
 8013fc0:	f001 faa0 	bl	8015504 <rmw_get_default_subscription_options>
 8013fc4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013fc8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013fd0:	2270      	movs	r2, #112	; 0x70
 8013fd2:	4629      	mov	r1, r5
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	f00c ffa6 	bl	8020f26 <memcpy>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	b00a      	add	sp, #40	; 0x28
 8013fde:	bd70      	pop	{r4, r5, r6, pc}
 8013fe0:	20012418 	.word	0x20012418
 8013fe4:	08024f10 	.word	0x08024f10

08013fe8 <rcl_take>:
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d049      	beq.n	8014080 <rcl_take+0x98>
 8013fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff0:	4615      	mov	r5, r2
 8013ff2:	6802      	ldr	r2, [r0, #0]
 8013ff4:	b0a4      	sub	sp, #144	; 0x90
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	2a00      	cmp	r2, #0
 8013ffa:	d039      	beq.n	8014070 <rcl_take+0x88>
 8013ffc:	461f      	mov	r7, r3
 8013ffe:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8014002:	b3ab      	cbz	r3, 8014070 <rcl_take+0x88>
 8014004:	460e      	mov	r6, r1
 8014006:	2900      	cmp	r1, #0
 8014008:	d038      	beq.n	801407c <rcl_take+0x94>
 801400a:	2d00      	cmp	r5, #0
 801400c:	d03c      	beq.n	8014088 <rcl_take+0xa0>
 801400e:	a802      	add	r0, sp, #8
 8014010:	f04f 0800 	mov.w	r8, #0
 8014014:	f001 fa7c 	bl	8015510 <rmw_get_zero_initialized_message_info>
 8014018:	f10d 0c08 	add.w	ip, sp, #8
 801401c:	46ae      	mov	lr, r5
 801401e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014022:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014026:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801402a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801402e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014032:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014036:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801403a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801403e:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8014042:	462b      	mov	r3, r5
 8014044:	6820      	ldr	r0, [r4, #0]
 8014046:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 801404a:	4631      	mov	r1, r6
 801404c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014050:	9700      	str	r7, [sp, #0]
 8014052:	f002 fc7b 	bl	801694c <rmw_take_with_info>
 8014056:	4603      	mov	r3, r0
 8014058:	b9c0      	cbnz	r0, 801408c <rcl_take+0xa4>
 801405a:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801405e:	f240 1291 	movw	r2, #401	; 0x191
 8014062:	2900      	cmp	r1, #0
 8014064:	bf08      	it	eq
 8014066:	4613      	moveq	r3, r2
 8014068:	4618      	mov	r0, r3
 801406a:	b024      	add	sp, #144	; 0x90
 801406c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014070:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014074:	4618      	mov	r0, r3
 8014076:	b024      	add	sp, #144	; 0x90
 8014078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801407c:	230b      	movs	r3, #11
 801407e:	e7f3      	b.n	8014068 <rcl_take+0x80>
 8014080:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014084:	4618      	mov	r0, r3
 8014086:	4770      	bx	lr
 8014088:	ad14      	add	r5, sp, #80	; 0x50
 801408a:	e7c0      	b.n	801400e <rcl_take+0x26>
 801408c:	f007 f9ce 	bl	801b42c <rcl_convert_rmw_ret_to_rcl_ret>
 8014090:	4603      	mov	r3, r0
 8014092:	e7e9      	b.n	8014068 <rcl_take+0x80>

08014094 <rcl_subscription_get_rmw_handle>:
 8014094:	b118      	cbz	r0, 801409e <rcl_subscription_get_rmw_handle+0xa>
 8014096:	6800      	ldr	r0, [r0, #0]
 8014098:	b108      	cbz	r0, 801409e <rcl_subscription_get_rmw_handle+0xa>
 801409a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 801409e:	4770      	bx	lr

080140a0 <rcl_subscription_is_valid>:
 80140a0:	b130      	cbz	r0, 80140b0 <rcl_subscription_is_valid+0x10>
 80140a2:	6800      	ldr	r0, [r0, #0]
 80140a4:	b120      	cbz	r0, 80140b0 <rcl_subscription_is_valid+0x10>
 80140a6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80140aa:	3800      	subs	r0, #0
 80140ac:	bf18      	it	ne
 80140ae:	2001      	movne	r0, #1
 80140b0:	4770      	bx	lr
 80140b2:	bf00      	nop

080140b4 <_rclc_check_for_new_data>:
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d046      	beq.n	8014146 <_rclc_check_for_new_data+0x92>
 80140b8:	4603      	mov	r3, r0
 80140ba:	b530      	push	{r4, r5, lr}
 80140bc:	7802      	ldrb	r2, [r0, #0]
 80140be:	b085      	sub	sp, #20
 80140c0:	2a0a      	cmp	r2, #10
 80140c2:	d842      	bhi.n	801414a <_rclc_check_for_new_data+0x96>
 80140c4:	e8df f002 	tbb	[pc, r2]
 80140c8:	14181212 	.word	0x14181212
 80140cc:	06060614 	.word	0x06060614
 80140d0:	2e1a      	.short	0x2e1a
 80140d2:	16          	.byte	0x16
 80140d3:	00          	.byte	0x00
 80140d4:	6a0a      	ldr	r2, [r1, #32]
 80140d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80140d8:	2000      	movs	r0, #0
 80140da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80140de:	1a12      	subs	r2, r2, r0
 80140e0:	bf18      	it	ne
 80140e2:	2201      	movne	r2, #1
 80140e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80140e8:	b005      	add	sp, #20
 80140ea:	bd30      	pop	{r4, r5, pc}
 80140ec:	680a      	ldr	r2, [r1, #0]
 80140ee:	e7f2      	b.n	80140d6 <_rclc_check_for_new_data+0x22>
 80140f0:	698a      	ldr	r2, [r1, #24]
 80140f2:	e7f0      	b.n	80140d6 <_rclc_check_for_new_data+0x22>
 80140f4:	688a      	ldr	r2, [r1, #8]
 80140f6:	e7ee      	b.n	80140d6 <_rclc_check_for_new_data+0x22>
 80140f8:	690a      	ldr	r2, [r1, #16]
 80140fa:	e7ec      	b.n	80140d6 <_rclc_check_for_new_data+0x22>
 80140fc:	685c      	ldr	r4, [r3, #4]
 80140fe:	4608      	mov	r0, r1
 8014100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801410c:	f104 0110 	add.w	r1, r4, #16
 8014110:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014114:	9500      	str	r5, [sp, #0]
 8014116:	f104 0341 	add.w	r3, r4, #65	; 0x41
 801411a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801411e:	f008 ff4b 	bl	801cfb8 <rcl_action_client_wait_set_get_entities_ready>
 8014122:	e7e1      	b.n	80140e8 <_rclc_check_for_new_data+0x34>
 8014124:	685c      	ldr	r4, [r3, #4]
 8014126:	4608      	mov	r0, r1
 8014128:	f104 0222 	add.w	r2, r4, #34	; 0x22
 801412c:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8014130:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8014134:	e9cd 2100 	strd	r2, r1, [sp]
 8014138:	f104 0220 	add.w	r2, r4, #32
 801413c:	f104 0110 	add.w	r1, r4, #16
 8014140:	f009 f952 	bl	801d3e8 <rcl_action_server_wait_set_get_entities_ready>
 8014144:	e7d0      	b.n	80140e8 <_rclc_check_for_new_data+0x34>
 8014146:	200b      	movs	r0, #11
 8014148:	4770      	bx	lr
 801414a:	2001      	movs	r0, #1
 801414c:	e7cc      	b.n	80140e8 <_rclc_check_for_new_data+0x34>
 801414e:	bf00      	nop

08014150 <_rclc_take_new_data>:
 8014150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014152:	b09b      	sub	sp, #108	; 0x6c
 8014154:	2800      	cmp	r0, #0
 8014156:	f000 8088 	beq.w	801426a <_rclc_take_new_data+0x11a>
 801415a:	7803      	ldrb	r3, [r0, #0]
 801415c:	4604      	mov	r4, r0
 801415e:	2b0a      	cmp	r3, #10
 8014160:	f200 8167 	bhi.w	8014432 <_rclc_take_new_data+0x2e2>
 8014164:	e8df f003 	tbb	[pc, r3]
 8014168:	44152d2d 	.word	0x44152d2d
 801416c:	19191944 	.word	0x19191944
 8014170:	065a      	.short	0x065a
 8014172:	15          	.byte	0x15
 8014173:	00          	.byte	0x00
 8014174:	6840      	ldr	r0, [r0, #4]
 8014176:	f890 3020 	ldrb.w	r3, [r0, #32]
 801417a:	2b00      	cmp	r3, #0
 801417c:	f040 80b2 	bne.w	80142e4 <_rclc_take_new_data+0x194>
 8014180:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8014184:	2b00      	cmp	r3, #0
 8014186:	f040 80e4 	bne.w	8014352 <_rclc_take_new_data+0x202>
 801418a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801418e:	2b00      	cmp	r3, #0
 8014190:	d16f      	bne.n	8014272 <_rclc_take_new_data+0x122>
 8014192:	2500      	movs	r5, #0
 8014194:	4628      	mov	r0, r5
 8014196:	b01b      	add	sp, #108	; 0x6c
 8014198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801419a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801419c:	6a0b      	ldr	r3, [r1, #32]
 801419e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d0f5      	beq.n	8014192 <_rclc_take_new_data+0x42>
 80141a6:	6882      	ldr	r2, [r0, #8]
 80141a8:	f100 0110 	add.w	r1, r0, #16
 80141ac:	6840      	ldr	r0, [r0, #4]
 80141ae:	f7ff fdd7 	bl	8013d60 <rcl_take_request>
 80141b2:	4605      	mov	r5, r0
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d0ec      	beq.n	8014192 <_rclc_take_new_data+0x42>
 80141b8:	f240 2359 	movw	r3, #601	; 0x259
 80141bc:	4298      	cmp	r0, r3
 80141be:	d013      	beq.n	80141e8 <_rclc_take_new_data+0x98>
 80141c0:	e029      	b.n	8014216 <_rclc_take_new_data+0xc6>
 80141c2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80141c4:	680b      	ldr	r3, [r1, #0]
 80141c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d0e1      	beq.n	8014192 <_rclc_take_new_data+0x42>
 80141ce:	2300      	movs	r3, #0
 80141d0:	aa0a      	add	r2, sp, #40	; 0x28
 80141d2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80141d6:	f7ff ff07 	bl	8013fe8 <rcl_take>
 80141da:	4605      	mov	r5, r0
 80141dc:	2800      	cmp	r0, #0
 80141de:	d0d9      	beq.n	8014194 <_rclc_take_new_data+0x44>
 80141e0:	f240 1391 	movw	r3, #401	; 0x191
 80141e4:	4298      	cmp	r0, r3
 80141e6:	d116      	bne.n	8014216 <_rclc_take_new_data+0xc6>
 80141e8:	2300      	movs	r3, #0
 80141ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80141ee:	e7d1      	b.n	8014194 <_rclc_take_new_data+0x44>
 80141f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80141f2:	698b      	ldr	r3, [r1, #24]
 80141f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d0ca      	beq.n	8014192 <_rclc_take_new_data+0x42>
 80141fc:	6882      	ldr	r2, [r0, #8]
 80141fe:	f100 0110 	add.w	r1, r0, #16
 8014202:	6840      	ldr	r0, [r0, #4]
 8014204:	f007 f8c0 	bl	801b388 <rcl_take_response>
 8014208:	4605      	mov	r5, r0
 801420a:	2800      	cmp	r0, #0
 801420c:	d0c1      	beq.n	8014192 <_rclc_take_new_data+0x42>
 801420e:	f240 13f5 	movw	r3, #501	; 0x1f5
 8014212:	4298      	cmp	r0, r3
 8014214:	d0be      	beq.n	8014194 <_rclc_take_new_data+0x44>
 8014216:	f000 ff63 	bl	80150e0 <rcutils_reset_error>
 801421a:	e7bb      	b.n	8014194 <_rclc_take_new_data+0x44>
 801421c:	6840      	ldr	r0, [r0, #4]
 801421e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8014222:	2b00      	cmp	r3, #0
 8014224:	d17d      	bne.n	8014322 <_rclc_take_new_data+0x1d2>
 8014226:	69c3      	ldr	r3, [r0, #28]
 8014228:	b11b      	cbz	r3, 8014232 <_rclc_take_new_data+0xe2>
 801422a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801422e:	2b00      	cmp	r3, #0
 8014230:	d144      	bne.n	80142bc <_rclc_take_new_data+0x16c>
 8014232:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014236:	2b00      	cmp	r3, #0
 8014238:	f040 80ac 	bne.w	8014394 <_rclc_take_new_data+0x244>
 801423c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8014240:	2b00      	cmp	r3, #0
 8014242:	d0a6      	beq.n	8014192 <_rclc_take_new_data+0x42>
 8014244:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014246:	a90a      	add	r1, sp, #40	; 0x28
 8014248:	3010      	adds	r0, #16
 801424a:	f008 fd8d 	bl	801cd68 <rcl_action_take_result_response>
 801424e:	4605      	mov	r5, r0
 8014250:	2800      	cmp	r0, #0
 8014252:	d1e0      	bne.n	8014216 <_rclc_take_new_data+0xc6>
 8014254:	6860      	ldr	r0, [r4, #4]
 8014256:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801425a:	f009 f9f5 	bl	801d648 <rclc_action_find_handle_by_result_request_sequence_number>
 801425e:	2800      	cmp	r0, #0
 8014260:	d098      	beq.n	8014194 <_rclc_take_new_data+0x44>
 8014262:	2301      	movs	r3, #1
 8014264:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8014268:	e794      	b.n	8014194 <_rclc_take_new_data+0x44>
 801426a:	250b      	movs	r5, #11
 801426c:	4628      	mov	r0, r5
 801426e:	b01b      	add	sp, #108	; 0x6c
 8014270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014272:	ae04      	add	r6, sp, #16
 8014274:	3010      	adds	r0, #16
 8014276:	aa0a      	add	r2, sp, #40	; 0x28
 8014278:	4631      	mov	r1, r6
 801427a:	f008 ffe9 	bl	801d250 <rcl_action_take_cancel_request>
 801427e:	4605      	mov	r5, r0
 8014280:	2800      	cmp	r0, #0
 8014282:	d1c8      	bne.n	8014216 <_rclc_take_new_data+0xc6>
 8014284:	a90a      	add	r1, sp, #40	; 0x28
 8014286:	6860      	ldr	r0, [r4, #4]
 8014288:	f009 f99e 	bl	801d5c8 <rclc_action_find_goal_handle_by_uuid>
 801428c:	4607      	mov	r7, r0
 801428e:	2800      	cmp	r0, #0
 8014290:	f000 80bb 	beq.w	801440a <_rclc_take_new_data+0x2ba>
 8014294:	2101      	movs	r1, #1
 8014296:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801429a:	f009 f91f 	bl	801d4dc <rcl_action_transition_goal_state>
 801429e:	2803      	cmp	r0, #3
 80142a0:	4684      	mov	ip, r0
 80142a2:	f040 80a7 	bne.w	80143f4 <_rclc_take_new_data+0x2a4>
 80142a6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80142aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80142ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80142b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80142b6:	f887 c008 	strb.w	ip, [r7, #8]
 80142ba:	e76b      	b.n	8014194 <_rclc_take_new_data+0x44>
 80142bc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80142be:	3010      	adds	r0, #16
 80142c0:	f008 fdd2 	bl	801ce68 <rcl_action_take_feedback>
 80142c4:	4605      	mov	r5, r0
 80142c6:	2800      	cmp	r0, #0
 80142c8:	d1a5      	bne.n	8014216 <_rclc_take_new_data+0xc6>
 80142ca:	6860      	ldr	r0, [r4, #4]
 80142cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80142ce:	f009 f97b 	bl	801d5c8 <rclc_action_find_goal_handle_by_uuid>
 80142d2:	4603      	mov	r3, r0
 80142d4:	2800      	cmp	r0, #0
 80142d6:	f000 80a3 	beq.w	8014420 <_rclc_take_new_data+0x2d0>
 80142da:	2201      	movs	r2, #1
 80142dc:	6860      	ldr	r0, [r4, #4]
 80142de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80142e2:	e7a6      	b.n	8014232 <_rclc_take_new_data+0xe2>
 80142e4:	f009 f94a 	bl	801d57c <rclc_action_take_goal_handle>
 80142e8:	4606      	mov	r6, r0
 80142ea:	6860      	ldr	r0, [r4, #4]
 80142ec:	2e00      	cmp	r6, #0
 80142ee:	f43f af47 	beq.w	8014180 <_rclc_take_new_data+0x30>
 80142f2:	6070      	str	r0, [r6, #4]
 80142f4:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80142f8:	69f2      	ldr	r2, [r6, #28]
 80142fa:	3010      	adds	r0, #16
 80142fc:	f008 fef2 	bl	801d0e4 <rcl_action_take_goal_request>
 8014300:	4605      	mov	r5, r0
 8014302:	2800      	cmp	r0, #0
 8014304:	f040 808e 	bne.w	8014424 <_rclc_take_new_data+0x2d4>
 8014308:	69f7      	ldr	r7, [r6, #28]
 801430a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801430c:	7235      	strb	r5, [r6, #8]
 801430e:	f8c6 0009 	str.w	r0, [r6, #9]
 8014312:	f8c6 100d 	str.w	r1, [r6, #13]
 8014316:	6860      	ldr	r0, [r4, #4]
 8014318:	f8c6 2011 	str.w	r2, [r6, #17]
 801431c:	f8c6 3015 	str.w	r3, [r6, #21]
 8014320:	e72e      	b.n	8014180 <_rclc_take_new_data+0x30>
 8014322:	aa04      	add	r2, sp, #16
 8014324:	a90a      	add	r1, sp, #40	; 0x28
 8014326:	3010      	adds	r0, #16
 8014328:	f008 fca6 	bl	801cc78 <rcl_action_take_goal_response>
 801432c:	4605      	mov	r5, r0
 801432e:	2800      	cmp	r0, #0
 8014330:	f47f af71 	bne.w	8014216 <_rclc_take_new_data+0xc6>
 8014334:	6860      	ldr	r0, [r4, #4]
 8014336:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801433a:	f009 f973 	bl	801d624 <rclc_action_find_handle_by_goal_request_sequence_number>
 801433e:	b130      	cbz	r0, 801434e <_rclc_take_new_data+0x1fe>
 8014340:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014344:	2201      	movs	r2, #1
 8014346:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 801434a:	f880 2020 	strb.w	r2, [r0, #32]
 801434e:	6860      	ldr	r0, [r4, #4]
 8014350:	e769      	b.n	8014226 <_rclc_take_new_data+0xd6>
 8014352:	3010      	adds	r0, #16
 8014354:	aa04      	add	r2, sp, #16
 8014356:	a90a      	add	r1, sp, #40	; 0x28
 8014358:	f008 ff3a 	bl	801d1d0 <rcl_action_take_result_request>
 801435c:	4605      	mov	r5, r0
 801435e:	2800      	cmp	r0, #0
 8014360:	f47f af59 	bne.w	8014216 <_rclc_take_new_data+0xc6>
 8014364:	a904      	add	r1, sp, #16
 8014366:	6860      	ldr	r0, [r4, #4]
 8014368:	f009 f92e 	bl	801d5c8 <rclc_action_find_goal_handle_by_uuid>
 801436c:	4607      	mov	r7, r0
 801436e:	b160      	cbz	r0, 801438a <_rclc_take_new_data+0x23a>
 8014370:	ad0a      	add	r5, sp, #40	; 0x28
 8014372:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8014376:	f04f 0c02 	mov.w	ip, #2
 801437a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801437c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801437e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014382:	e886 0003 	stmia.w	r6, {r0, r1}
 8014386:	f887 c008 	strb.w	ip, [r7, #8]
 801438a:	6860      	ldr	r0, [r4, #4]
 801438c:	2300      	movs	r3, #0
 801438e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8014392:	e6fa      	b.n	801418a <_rclc_take_new_data+0x3a>
 8014394:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8014398:	a90a      	add	r1, sp, #40	; 0x28
 801439a:	3010      	adds	r0, #16
 801439c:	f008 fd24 	bl	801cde8 <rcl_action_take_cancel_response>
 80143a0:	4605      	mov	r5, r0
 80143a2:	2800      	cmp	r0, #0
 80143a4:	f47f af37 	bne.w	8014216 <_rclc_take_new_data+0xc6>
 80143a8:	6860      	ldr	r0, [r4, #4]
 80143aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80143ae:	f009 f95d 	bl	801d66c <rclc_action_find_handle_by_cancel_request_sequence_number>
 80143b2:	4606      	mov	r6, r0
 80143b4:	6860      	ldr	r0, [r4, #4]
 80143b6:	2e00      	cmp	r6, #0
 80143b8:	f43f af40 	beq.w	801423c <_rclc_take_new_data+0xec>
 80143bc:	2701      	movs	r7, #1
 80143be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80143c0:	84b7      	strh	r7, [r6, #36]	; 0x24
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	f43f af3a 	beq.w	801423c <_rclc_take_new_data+0xec>
 80143c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80143ca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80143ce:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80143d2:	f009 f8f9 	bl	801d5c8 <rclc_action_find_goal_handle_by_uuid>
 80143d6:	b138      	cbz	r0, 80143e8 <_rclc_take_new_data+0x298>
 80143d8:	6860      	ldr	r0, [r4, #4]
 80143da:	3501      	adds	r5, #1
 80143dc:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 80143e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80143e2:	42ab      	cmp	r3, r5
 80143e4:	d8f0      	bhi.n	80143c8 <_rclc_take_new_data+0x278>
 80143e6:	e729      	b.n	801423c <_rclc_take_new_data+0xec>
 80143e8:	6860      	ldr	r0, [r4, #4]
 80143ea:	3501      	adds	r5, #1
 80143ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80143ee:	42ab      	cmp	r3, r5
 80143f0:	d8ea      	bhi.n	80143c8 <_rclc_take_new_data+0x278>
 80143f2:	e723      	b.n	801423c <_rclc_take_new_data+0xec>
 80143f4:	ab06      	add	r3, sp, #24
 80143f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80143fc:	2103      	movs	r1, #3
 80143fe:	6860      	ldr	r0, [r4, #4]
 8014400:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014404:	f009 f9a8 	bl	801d758 <rclc_action_server_goal_cancel_reject>
 8014408:	e6c4      	b.n	8014194 <_rclc_take_new_data+0x44>
 801440a:	ab06      	add	r3, sp, #24
 801440c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801440e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014412:	2102      	movs	r1, #2
 8014414:	6860      	ldr	r0, [r4, #4]
 8014416:	e896 000c 	ldmia.w	r6, {r2, r3}
 801441a:	f009 f99d 	bl	801d758 <rclc_action_server_goal_cancel_reject>
 801441e:	e6b9      	b.n	8014194 <_rclc_take_new_data+0x44>
 8014420:	6860      	ldr	r0, [r4, #4]
 8014422:	e706      	b.n	8014232 <_rclc_take_new_data+0xe2>
 8014424:	4631      	mov	r1, r6
 8014426:	6860      	ldr	r0, [r4, #4]
 8014428:	f009 f8b8 	bl	801d59c <rclc_action_remove_used_goal_handle>
 801442c:	f000 fe58 	bl	80150e0 <rcutils_reset_error>
 8014430:	e6b0      	b.n	8014194 <_rclc_take_new_data+0x44>
 8014432:	2501      	movs	r5, #1
 8014434:	e6ae      	b.n	8014194 <_rclc_take_new_data+0x44>
 8014436:	bf00      	nop

08014438 <_rclc_execute.part.0>:
 8014438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801443a:	7803      	ldrb	r3, [r0, #0]
 801443c:	b085      	sub	sp, #20
 801443e:	4604      	mov	r4, r0
 8014440:	2b0a      	cmp	r3, #10
 8014442:	f200 8139 	bhi.w	80146b8 <_rclc_execute.part.0+0x280>
 8014446:	e8df f003 	tbb	[pc, r3]
 801444a:	4268      	.short	0x4268
 801444c:	06a75b4d 	.word	0x06a75b4d
 8014450:	721d0606 	.word	0x721d0606
 8014454:	62          	.byte	0x62
 8014455:	00          	.byte	0x00
 8014456:	2b06      	cmp	r3, #6
 8014458:	f000 8126 	beq.w	80146a8 <_rclc_execute.part.0+0x270>
 801445c:	2b07      	cmp	r3, #7
 801445e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014460:	f040 811c 	bne.w	801469c <_rclc_execute.part.0+0x264>
 8014464:	f104 0510 	add.w	r5, r4, #16
 8014468:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 801446c:	6880      	ldr	r0, [r0, #8]
 801446e:	4798      	blx	r3
 8014470:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014472:	4629      	mov	r1, r5
 8014474:	6860      	ldr	r0, [r4, #4]
 8014476:	f7ff fcb3 	bl	8013de0 <rcl_send_response>
 801447a:	4604      	mov	r4, r0
 801447c:	b378      	cbz	r0, 80144de <_rclc_execute.part.0+0xa6>
 801447e:	f000 fe2f 	bl	80150e0 <rcutils_reset_error>
 8014482:	e02c      	b.n	80144de <_rclc_execute.part.0+0xa6>
 8014484:	6840      	ldr	r0, [r0, #4]
 8014486:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801448a:	2b00      	cmp	r3, #0
 801448c:	f000 808e 	beq.w	80145ac <_rclc_execute.part.0+0x174>
 8014490:	2600      	movs	r6, #0
 8014492:	2701      	movs	r7, #1
 8014494:	e004      	b.n	80144a0 <_rclc_execute.part.0+0x68>
 8014496:	f009 f84b 	bl	801d530 <rclc_action_send_result_request>
 801449a:	b998      	cbnz	r0, 80144c4 <_rclc_execute.part.0+0x8c>
 801449c:	722f      	strb	r7, [r5, #8]
 801449e:	6860      	ldr	r0, [r4, #4]
 80144a0:	f009 f8f6 	bl	801d690 <rclc_action_find_first_handle_with_goal_response>
 80144a4:	4605      	mov	r5, r0
 80144a6:	2800      	cmp	r0, #0
 80144a8:	d07f      	beq.n	80145aa <_rclc_execute.part.0+0x172>
 80144aa:	6863      	ldr	r3, [r4, #4]
 80144ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80144ae:	699b      	ldr	r3, [r3, #24]
 80144b0:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 80144b4:	f885 6020 	strb.w	r6, [r5, #32]
 80144b8:	4798      	blx	r3
 80144ba:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80144be:	4628      	mov	r0, r5
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d1e8      	bne.n	8014496 <_rclc_execute.part.0+0x5e>
 80144c4:	6860      	ldr	r0, [r4, #4]
 80144c6:	4629      	mov	r1, r5
 80144c8:	f009 f868 	bl	801d59c <rclc_action_remove_used_goal_handle>
 80144cc:	e7e7      	b.n	801449e <_rclc_execute.part.0+0x66>
 80144ce:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80144d2:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 80144d6:	b100      	cbz	r0, 80144da <_rclc_execute.part.0+0xa2>
 80144d8:	68a0      	ldr	r0, [r4, #8]
 80144da:	2400      	movs	r4, #0
 80144dc:	4798      	blx	r3
 80144de:	4620      	mov	r0, r4
 80144e0:	b005      	add	sp, #20
 80144e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144e4:	6840      	ldr	r0, [r0, #4]
 80144e6:	f007 fc7d 	bl	801bde4 <rcl_timer_call>
 80144ea:	f240 3321 	movw	r3, #801	; 0x321
 80144ee:	4604      	mov	r4, r0
 80144f0:	4298      	cmp	r0, r3
 80144f2:	d001      	beq.n	80144f8 <_rclc_execute.part.0+0xc0>
 80144f4:	2800      	cmp	r0, #0
 80144f6:	d1c2      	bne.n	801447e <_rclc_execute.part.0+0x46>
 80144f8:	2400      	movs	r4, #0
 80144fa:	4620      	mov	r0, r4
 80144fc:	b005      	add	sp, #20
 80144fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014500:	2400      	movs	r4, #0
 8014502:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014504:	6880      	ldr	r0, [r0, #8]
 8014506:	4798      	blx	r3
 8014508:	4620      	mov	r0, r4
 801450a:	b005      	add	sp, #20
 801450c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801450e:	2400      	movs	r4, #0
 8014510:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014512:	4798      	blx	r3
 8014514:	4620      	mov	r0, r4
 8014516:	b005      	add	sp, #20
 8014518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801451a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801451e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014520:	b100      	cbz	r0, 8014524 <_rclc_execute.part.0+0xec>
 8014522:	68a0      	ldr	r0, [r4, #8]
 8014524:	2400      	movs	r4, #0
 8014526:	4798      	blx	r3
 8014528:	4620      	mov	r0, r4
 801452a:	b005      	add	sp, #20
 801452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801452e:	6840      	ldr	r0, [r0, #4]
 8014530:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014534:	bb3b      	cbnz	r3, 8014586 <_rclc_execute.part.0+0x14e>
 8014536:	f890 3020 	ldrb.w	r3, [r0, #32]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d07d      	beq.n	801463a <_rclc_execute.part.0+0x202>
 801453e:	f640 0634 	movw	r6, #2100	; 0x834
 8014542:	2701      	movs	r7, #1
 8014544:	e007      	b.n	8014556 <_rclc_execute.part.0+0x11e>
 8014546:	4628      	mov	r0, r5
 8014548:	f009 f8ba 	bl	801d6c0 <rclc_action_server_response_goal_request>
 801454c:	4629      	mov	r1, r5
 801454e:	6860      	ldr	r0, [r4, #4]
 8014550:	f009 f824 	bl	801d59c <rclc_action_remove_used_goal_handle>
 8014554:	6860      	ldr	r0, [r4, #4]
 8014556:	2100      	movs	r1, #0
 8014558:	f009 f84c 	bl	801d5f4 <rclc_action_find_first_handle_by_status>
 801455c:	4605      	mov	r5, r0
 801455e:	2800      	cmp	r0, #0
 8014560:	d068      	beq.n	8014634 <_rclc_execute.part.0+0x1fc>
 8014562:	6863      	ldr	r3, [r4, #4]
 8014564:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014566:	699b      	ldr	r3, [r3, #24]
 8014568:	4798      	blx	r3
 801456a:	42b0      	cmp	r0, r6
 801456c:	f04f 0100 	mov.w	r1, #0
 8014570:	d1e9      	bne.n	8014546 <_rclc_execute.part.0+0x10e>
 8014572:	2101      	movs	r1, #1
 8014574:	4628      	mov	r0, r5
 8014576:	f009 f8a3 	bl	801d6c0 <rclc_action_server_response_goal_request>
 801457a:	722f      	strb	r7, [r5, #8]
 801457c:	e7ea      	b.n	8014554 <_rclc_execute.part.0+0x11c>
 801457e:	6848      	ldr	r0, [r1, #4]
 8014580:	f009 f80c 	bl	801d59c <rclc_action_remove_used_goal_handle>
 8014584:	6860      	ldr	r0, [r4, #4]
 8014586:	f009 f841 	bl	801d60c <rclc_action_find_first_terminated_handle>
 801458a:	4601      	mov	r1, r0
 801458c:	2800      	cmp	r0, #0
 801458e:	d1f6      	bne.n	801457e <_rclc_execute.part.0+0x146>
 8014590:	6860      	ldr	r0, [r4, #4]
 8014592:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8014596:	e7ce      	b.n	8014536 <_rclc_execute.part.0+0xfe>
 8014598:	2400      	movs	r4, #0
 801459a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801459c:	f100 0110 	add.w	r1, r0, #16
 80145a0:	6880      	ldr	r0, [r0, #8]
 80145a2:	4798      	blx	r3
 80145a4:	4620      	mov	r0, r4
 80145a6:	b005      	add	sp, #20
 80145a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145aa:	6860      	ldr	r0, [r4, #4]
 80145ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80145b0:	b18b      	cbz	r3, 80145d6 <_rclc_execute.part.0+0x19e>
 80145b2:	68c5      	ldr	r5, [r0, #12]
 80145b4:	b32d      	cbz	r5, 8014602 <_rclc_execute.part.0+0x1ca>
 80145b6:	2600      	movs	r6, #0
 80145b8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80145bc:	b143      	cbz	r3, 80145d0 <_rclc_execute.part.0+0x198>
 80145be:	69c3      	ldr	r3, [r0, #28]
 80145c0:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 80145c4:	b123      	cbz	r3, 80145d0 <_rclc_execute.part.0+0x198>
 80145c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80145c8:	4628      	mov	r0, r5
 80145ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80145cc:	4798      	blx	r3
 80145ce:	6860      	ldr	r0, [r4, #4]
 80145d0:	682d      	ldr	r5, [r5, #0]
 80145d2:	2d00      	cmp	r5, #0
 80145d4:	d1f0      	bne.n	80145b8 <_rclc_execute.part.0+0x180>
 80145d6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80145da:	b193      	cbz	r3, 8014602 <_rclc_execute.part.0+0x1ca>
 80145dc:	68c5      	ldr	r5, [r0, #12]
 80145de:	b185      	cbz	r5, 8014602 <_rclc_execute.part.0+0x1ca>
 80145e0:	2600      	movs	r6, #0
 80145e2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80145e6:	b14b      	cbz	r3, 80145fc <_rclc_execute.part.0+0x1c4>
 80145e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80145ea:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 80145ee:	b12b      	cbz	r3, 80145fc <_rclc_execute.part.0+0x1c4>
 80145f0:	4628      	mov	r0, r5
 80145f2:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 80145f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80145f8:	4798      	blx	r3
 80145fa:	6860      	ldr	r0, [r4, #4]
 80145fc:	682d      	ldr	r5, [r5, #0]
 80145fe:	2d00      	cmp	r5, #0
 8014600:	d1ef      	bne.n	80145e2 <_rclc_execute.part.0+0x1aa>
 8014602:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8014606:	2b00      	cmp	r3, #0
 8014608:	f43f af76 	beq.w	80144f8 <_rclc_execute.part.0+0xc0>
 801460c:	2700      	movs	r7, #0
 801460e:	e00b      	b.n	8014628 <_rclc_execute.part.0+0x1f0>
 8014610:	6863      	ldr	r3, [r4, #4]
 8014612:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014616:	6a1e      	ldr	r6, [r3, #32]
 8014618:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 801461c:	47b0      	blx	r6
 801461e:	6860      	ldr	r0, [r4, #4]
 8014620:	4629      	mov	r1, r5
 8014622:	f008 ffbb 	bl	801d59c <rclc_action_remove_used_goal_handle>
 8014626:	6860      	ldr	r0, [r4, #4]
 8014628:	f009 f83e 	bl	801d6a8 <rclc_action_find_first_handle_with_result_response>
 801462c:	4605      	mov	r5, r0
 801462e:	2800      	cmp	r0, #0
 8014630:	d1ee      	bne.n	8014610 <_rclc_execute.part.0+0x1d8>
 8014632:	e761      	b.n	80144f8 <_rclc_execute.part.0+0xc0>
 8014634:	6860      	ldr	r0, [r4, #4]
 8014636:	f880 5020 	strb.w	r5, [r0, #32]
 801463a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801463e:	2b00      	cmp	r3, #0
 8014640:	f43f af5a 	beq.w	80144f8 <_rclc_execute.part.0+0xc0>
 8014644:	68c5      	ldr	r5, [r0, #12]
 8014646:	b1b5      	cbz	r5, 8014676 <_rclc_execute.part.0+0x23e>
 8014648:	2602      	movs	r6, #2
 801464a:	e001      	b.n	8014650 <_rclc_execute.part.0+0x218>
 801464c:	682d      	ldr	r5, [r5, #0]
 801464e:	b195      	cbz	r5, 8014676 <_rclc_execute.part.0+0x23e>
 8014650:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014654:	2b03      	cmp	r3, #3
 8014656:	d1f9      	bne.n	801464c <_rclc_execute.part.0+0x214>
 8014658:	69c3      	ldr	r3, [r0, #28]
 801465a:	4628      	mov	r0, r5
 801465c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801465e:	4798      	blx	r3
 8014660:	4603      	mov	r3, r0
 8014662:	f105 0260 	add.w	r2, r5, #96	; 0x60
 8014666:	4628      	mov	r0, r5
 8014668:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801466c:	b143      	cbz	r3, 8014680 <_rclc_execute.part.0+0x248>
 801466e:	f009 f847 	bl	801d700 <rclc_action_server_goal_cancel_accept>
 8014672:	6860      	ldr	r0, [r4, #4]
 8014674:	e7ea      	b.n	801464c <_rclc_execute.part.0+0x214>
 8014676:	2300      	movs	r3, #0
 8014678:	461c      	mov	r4, r3
 801467a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 801467e:	e72e      	b.n	80144de <_rclc_execute.part.0+0xa6>
 8014680:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014682:	f105 0758 	add.w	r7, r5, #88	; 0x58
 8014686:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801468a:	2101      	movs	r1, #1
 801468c:	6860      	ldr	r0, [r4, #4]
 801468e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014692:	f009 f861 	bl	801d758 <rclc_action_server_goal_cancel_reject>
 8014696:	722e      	strb	r6, [r5, #8]
 8014698:	6860      	ldr	r0, [r4, #4]
 801469a:	e7d7      	b.n	801464c <_rclc_execute.part.0+0x214>
 801469c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801469e:	f104 0510 	add.w	r5, r4, #16
 80146a2:	6880      	ldr	r0, [r0, #8]
 80146a4:	4798      	blx	r3
 80146a6:	e6e3      	b.n	8014470 <_rclc_execute.part.0+0x38>
 80146a8:	f100 0510 	add.w	r5, r0, #16
 80146ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80146ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80146b0:	4629      	mov	r1, r5
 80146b2:	6880      	ldr	r0, [r0, #8]
 80146b4:	4798      	blx	r3
 80146b6:	e6db      	b.n	8014470 <_rclc_execute.part.0+0x38>
 80146b8:	2401      	movs	r4, #1
 80146ba:	e710      	b.n	80144de <_rclc_execute.part.0+0xa6>

080146bc <rclc_executor_trigger_any>:
 80146bc:	2800      	cmp	r0, #0
 80146be:	d03d      	beq.n	801473c <rclc_executor_trigger_any+0x80>
 80146c0:	2900      	cmp	r1, #0
 80146c2:	d03c      	beq.n	801473e <rclc_executor_trigger_any+0x82>
 80146c4:	4603      	mov	r3, r0
 80146c6:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 80146ca:	2200      	movs	r2, #0
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d035      	beq.n	801473c <rclc_executor_trigger_any+0x80>
 80146d0:	b430      	push	{r4, r5}
 80146d2:	f893 c000 	ldrb.w	ip, [r3]
 80146d6:	f1bc 0f08 	cmp.w	ip, #8
 80146da:	d11d      	bne.n	8014718 <rclc_executor_trigger_any+0x5c>
 80146dc:	685c      	ldr	r4, [r3, #4]
 80146de:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80146e0:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80146e4:	d105      	bne.n	80146f2 <rclc_executor_trigger_any+0x36>
 80146e6:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80146ea:	b910      	cbnz	r0, 80146f2 <rclc_executor_trigger_any+0x36>
 80146ec:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 80146f0:	b128      	cbz	r0, 80146fe <rclc_executor_trigger_any+0x42>
 80146f2:	bc30      	pop	{r4, r5}
 80146f4:	4770      	bx	lr
 80146f6:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 80146fa:	2800      	cmp	r0, #0
 80146fc:	d1f9      	bne.n	80146f2 <rclc_executor_trigger_any+0x36>
 80146fe:	3201      	adds	r2, #1
 8014700:	3340      	adds	r3, #64	; 0x40
 8014702:	4291      	cmp	r1, r2
 8014704:	d017      	beq.n	8014736 <rclc_executor_trigger_any+0x7a>
 8014706:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 801470a:	2800      	cmp	r0, #0
 801470c:	d0f1      	beq.n	80146f2 <rclc_executor_trigger_any+0x36>
 801470e:	f893 c000 	ldrb.w	ip, [r3]
 8014712:	f1bc 0f08 	cmp.w	ip, #8
 8014716:	d0e1      	beq.n	80146dc <rclc_executor_trigger_any+0x20>
 8014718:	f1bc 0f09 	cmp.w	ip, #9
 801471c:	d1eb      	bne.n	80146f6 <rclc_executor_trigger_any+0x3a>
 801471e:	685c      	ldr	r4, [r3, #4]
 8014720:	6a25      	ldr	r5, [r4, #32]
 8014722:	2d00      	cmp	r5, #0
 8014724:	d1e5      	bne.n	80146f2 <rclc_executor_trigger_any+0x36>
 8014726:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 801472a:	2800      	cmp	r0, #0
 801472c:	d1e1      	bne.n	80146f2 <rclc_executor_trigger_any+0x36>
 801472e:	3201      	adds	r2, #1
 8014730:	3340      	adds	r3, #64	; 0x40
 8014732:	4291      	cmp	r1, r2
 8014734:	d1e7      	bne.n	8014706 <rclc_executor_trigger_any+0x4a>
 8014736:	2000      	movs	r0, #0
 8014738:	bc30      	pop	{r4, r5}
 801473a:	4770      	bx	lr
 801473c:	4770      	bx	lr
 801473e:	4608      	mov	r0, r1
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop

08014744 <rclc_executor_get_zero_initialized_executor>:
 8014744:	b510      	push	{r4, lr}
 8014746:	4604      	mov	r4, r0
 8014748:	2288      	movs	r2, #136	; 0x88
 801474a:	4902      	ldr	r1, [pc, #8]	; (8014754 <rclc_executor_get_zero_initialized_executor+0x10>)
 801474c:	f00c fbeb 	bl	8020f26 <memcpy>
 8014750:	4620      	mov	r0, r4
 8014752:	bd10      	pop	{r4, pc}
 8014754:	08024f60 	.word	0x08024f60

08014758 <rclc_executor_init>:
 8014758:	2900      	cmp	r1, #0
 801475a:	d06a      	beq.n	8014832 <rclc_executor_init+0xda>
 801475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014760:	4605      	mov	r5, r0
 8014762:	b0b0      	sub	sp, #192	; 0xc0
 8014764:	2800      	cmp	r0, #0
 8014766:	d05c      	beq.n	8014822 <rclc_executor_init+0xca>
 8014768:	4616      	mov	r6, r2
 801476a:	4618      	mov	r0, r3
 801476c:	4688      	mov	r8, r1
 801476e:	461f      	mov	r7, r3
 8014770:	f000 fc78 	bl	8015064 <rcutils_allocator_is_valid>
 8014774:	2e00      	cmp	r6, #0
 8014776:	d054      	beq.n	8014822 <rclc_executor_init+0xca>
 8014778:	f080 0401 	eor.w	r4, r0, #1
 801477c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8014780:	d14f      	bne.n	8014822 <rclc_executor_init+0xca>
 8014782:	2288      	movs	r2, #136	; 0x88
 8014784:	4930      	ldr	r1, [pc, #192]	; (8014848 <rclc_executor_init+0xf0>)
 8014786:	a80e      	add	r0, sp, #56	; 0x38
 8014788:	f00c fbcd 	bl	8020f26 <memcpy>
 801478c:	a90e      	add	r1, sp, #56	; 0x38
 801478e:	2288      	movs	r2, #136	; 0x88
 8014790:	4628      	mov	r0, r5
 8014792:	f00c fbc8 	bl	8020f26 <memcpy>
 8014796:	4668      	mov	r0, sp
 8014798:	f8c5 8000 	str.w	r8, [r5]
 801479c:	60ae      	str	r6, [r5, #8]
 801479e:	f007 fc97 	bl	801c0d0 <rcl_get_zero_initialized_wait_set>
 80147a2:	46ec      	mov	ip, sp
 80147a4:	f105 0e14 	add.w	lr, r5, #20
 80147a8:	f8d7 8000 	ldr.w	r8, [r7]
 80147ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80147b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80147bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147c0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014840 <rclc_executor_init+0xe8>
 80147c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80147c8:	f8dc 3000 	ldr.w	r3, [ip]
 80147cc:	01b0      	lsls	r0, r6, #6
 80147ce:	6939      	ldr	r1, [r7, #16]
 80147d0:	f8ce 3000 	str.w	r3, [lr]
 80147d4:	612f      	str	r7, [r5, #16]
 80147d6:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 80147da:	47c0      	blx	r8
 80147dc:	6068      	str	r0, [r5, #4]
 80147de:	b908      	cbnz	r0, 80147e4 <rclc_executor_init+0x8c>
 80147e0:	e029      	b.n	8014836 <rclc_executor_init+0xde>
 80147e2:	6868      	ldr	r0, [r5, #4]
 80147e4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80147e8:	3401      	adds	r4, #1
 80147ea:	4631      	mov	r1, r6
 80147ec:	f000 fac0 	bl	8014d70 <rclc_executor_handle_init>
 80147f0:	42a6      	cmp	r6, r4
 80147f2:	d8f6      	bhi.n	80147e2 <rclc_executor_init+0x8a>
 80147f4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80147f8:	f000 faae 	bl	8014d58 <rclc_executor_handle_counters_zero_init>
 80147fc:	4a13      	ldr	r2, [pc, #76]	; (801484c <rclc_executor_init+0xf4>)
 80147fe:	2300      	movs	r3, #0
 8014800:	6868      	ldr	r0, [r5, #4]
 8014802:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 8014806:	b168      	cbz	r0, 8014824 <rclc_executor_init+0xcc>
 8014808:	68ab      	ldr	r3, [r5, #8]
 801480a:	b173      	cbz	r3, 801482a <rclc_executor_init+0xd2>
 801480c:	692a      	ldr	r2, [r5, #16]
 801480e:	fab2 f382 	clz	r3, r2
 8014812:	095b      	lsrs	r3, r3, #5
 8014814:	b14a      	cbz	r2, 801482a <rclc_executor_init+0xd2>
 8014816:	4618      	mov	r0, r3
 8014818:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 801481c:	b030      	add	sp, #192	; 0xc0
 801481e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014822:	200b      	movs	r0, #11
 8014824:	b030      	add	sp, #192	; 0xc0
 8014826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801482a:	2000      	movs	r0, #0
 801482c:	b030      	add	sp, #192	; 0xc0
 801482e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014832:	200b      	movs	r0, #11
 8014834:	4770      	bx	lr
 8014836:	200a      	movs	r0, #10
 8014838:	e7f4      	b.n	8014824 <rclc_executor_init+0xcc>
 801483a:	bf00      	nop
 801483c:	f3af 8000 	nop.w
 8014840:	3b9aca00 	.word	0x3b9aca00
 8014844:	00000000 	.word	0x00000000
 8014848:	08024f60 	.word	0x08024f60
 801484c:	080146bd 	.word	0x080146bd

08014850 <rclc_executor_add_subscription>:
 8014850:	2b00      	cmp	r3, #0
 8014852:	bf18      	it	ne
 8014854:	2a00      	cmpne	r2, #0
 8014856:	b570      	push	{r4, r5, r6, lr}
 8014858:	4604      	mov	r4, r0
 801485a:	bf0c      	ite	eq
 801485c:	2001      	moveq	r0, #1
 801485e:	2000      	movne	r0, #0
 8014860:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014864:	2900      	cmp	r1, #0
 8014866:	bf08      	it	eq
 8014868:	f040 0001 	orreq.w	r0, r0, #1
 801486c:	bb28      	cbnz	r0, 80148ba <rclc_executor_add_subscription+0x6a>
 801486e:	fab4 f584 	clz	r5, r4
 8014872:	096d      	lsrs	r5, r5, #5
 8014874:	b30c      	cbz	r4, 80148ba <rclc_executor_add_subscription+0x6a>
 8014876:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 801487a:	4286      	cmp	r6, r0
 801487c:	d301      	bcc.n	8014882 <rclc_executor_add_subscription+0x32>
 801487e:	2001      	movs	r0, #1
 8014880:	bd70      	pop	{r4, r5, r6, pc}
 8014882:	6860      	ldr	r0, [r4, #4]
 8014884:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014888:	f800 500e 	strb.w	r5, [r0, lr]
 801488c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014890:	3601      	adds	r6, #1
 8014892:	6303      	str	r3, [r0, #48]	; 0x30
 8014894:	2301      	movs	r3, #1
 8014896:	62c5      	str	r5, [r0, #44]	; 0x2c
 8014898:	f104 0514 	add.w	r5, r4, #20
 801489c:	f880 c001 	strb.w	ip, [r0, #1]
 80148a0:	8703      	strh	r3, [r0, #56]	; 0x38
 80148a2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80148a6:	4628      	mov	r0, r5
 80148a8:	60e6      	str	r6, [r4, #12]
 80148aa:	f007 fc25 	bl	801c0f8 <rcl_wait_set_is_valid>
 80148ae:	b930      	cbnz	r0, 80148be <rclc_executor_add_subscription+0x6e>
 80148b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80148b2:	2000      	movs	r0, #0
 80148b4:	3301      	adds	r3, #1
 80148b6:	64a3      	str	r3, [r4, #72]	; 0x48
 80148b8:	bd70      	pop	{r4, r5, r6, pc}
 80148ba:	200b      	movs	r0, #11
 80148bc:	bd70      	pop	{r4, r5, r6, pc}
 80148be:	4628      	mov	r0, r5
 80148c0:	f007 fc20 	bl	801c104 <rcl_wait_set_fini>
 80148c4:	2800      	cmp	r0, #0
 80148c6:	d0f3      	beq.n	80148b0 <rclc_executor_add_subscription+0x60>
 80148c8:	bd70      	pop	{r4, r5, r6, pc}
 80148ca:	bf00      	nop

080148cc <rclc_executor_add_service>:
 80148cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ce:	9d06      	ldr	r5, [sp, #24]
 80148d0:	4604      	mov	r4, r0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	bf18      	it	ne
 80148d6:	2d00      	cmpne	r5, #0
 80148d8:	bf0c      	ite	eq
 80148da:	2001      	moveq	r0, #1
 80148dc:	2000      	movne	r0, #0
 80148de:	2a00      	cmp	r2, #0
 80148e0:	bf08      	it	eq
 80148e2:	f040 0001 	orreq.w	r0, r0, #1
 80148e6:	2900      	cmp	r1, #0
 80148e8:	bf08      	it	eq
 80148ea:	f040 0001 	orreq.w	r0, r0, #1
 80148ee:	bb40      	cbnz	r0, 8014942 <rclc_executor_add_service+0x76>
 80148f0:	fab4 f684 	clz	r6, r4
 80148f4:	0976      	lsrs	r6, r6, #5
 80148f6:	b324      	cbz	r4, 8014942 <rclc_executor_add_service+0x76>
 80148f8:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 80148fc:	42b8      	cmp	r0, r7
 80148fe:	d301      	bcc.n	8014904 <rclc_executor_add_service+0x38>
 8014900:	2001      	movs	r0, #1
 8014902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014904:	6867      	ldr	r7, [r4, #4]
 8014906:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 801490a:	f100 0c01 	add.w	ip, r0, #1
 801490e:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014912:	6283      	str	r3, [r0, #40]	; 0x28
 8014914:	2305      	movs	r3, #5
 8014916:	6305      	str	r5, [r0, #48]	; 0x30
 8014918:	f104 0514 	add.w	r5, r4, #20
 801491c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014920:	f827 300e 	strh.w	r3, [r7, lr]
 8014924:	2301      	movs	r3, #1
 8014926:	62c6      	str	r6, [r0, #44]	; 0x2c
 8014928:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801492c:	4628      	mov	r0, r5
 801492e:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014932:	f007 fbe1 	bl	801c0f8 <rcl_wait_set_is_valid>
 8014936:	b930      	cbnz	r0, 8014946 <rclc_executor_add_service+0x7a>
 8014938:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801493a:	2000      	movs	r0, #0
 801493c:	3301      	adds	r3, #1
 801493e:	6563      	str	r3, [r4, #84]	; 0x54
 8014940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014942:	200b      	movs	r0, #11
 8014944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014946:	4628      	mov	r0, r5
 8014948:	f007 fbdc 	bl	801c104 <rcl_wait_set_fini>
 801494c:	2800      	cmp	r0, #0
 801494e:	d0f3      	beq.n	8014938 <rclc_executor_add_service+0x6c>
 8014950:	e7d7      	b.n	8014902 <rclc_executor_add_service+0x36>
 8014952:	bf00      	nop

08014954 <rclc_executor_prepare>:
 8014954:	2800      	cmp	r0, #0
 8014956:	d044      	beq.n	80149e2 <rclc_executor_prepare+0x8e>
 8014958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801495a:	f100 0514 	add.w	r5, r0, #20
 801495e:	b09b      	sub	sp, #108	; 0x6c
 8014960:	4604      	mov	r4, r0
 8014962:	4628      	mov	r0, r5
 8014964:	f007 fbc8 	bl	801c0f8 <rcl_wait_set_is_valid>
 8014968:	b110      	cbz	r0, 8014970 <rclc_executor_prepare+0x1c>
 801496a:	2000      	movs	r0, #0
 801496c:	b01b      	add	sp, #108	; 0x6c
 801496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014970:	4628      	mov	r0, r5
 8014972:	f007 fbc7 	bl	801c104 <rcl_wait_set_fini>
 8014976:	2800      	cmp	r0, #0
 8014978:	d130      	bne.n	80149dc <rclc_executor_prepare+0x88>
 801497a:	a80c      	add	r0, sp, #48	; 0x30
 801497c:	ae04      	add	r6, sp, #16
 801497e:	f007 fba7 	bl	801c0d0 <rcl_get_zero_initialized_wait_set>
 8014982:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014986:	46ae      	mov	lr, r5
 8014988:	6927      	ldr	r7, [r4, #16]
 801498a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801498e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014992:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014996:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801499a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801499e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149a2:	f8dc 3000 	ldr.w	r3, [ip]
 80149a6:	f8ce 3000 	str.w	r3, [lr]
 80149aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80149ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	4628      	mov	r0, r5
 80149b2:	6822      	ldr	r2, [r4, #0]
 80149b4:	6033      	str	r3, [r6, #0]
 80149b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80149ba:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80149be:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 80149c2:	e9cd 2100 	strd	r2, r1, [sp]
 80149c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80149c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80149ca:	f007 fe9b 	bl	801c704 <rcl_wait_set_init>
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d0cc      	beq.n	801496c <rclc_executor_prepare+0x18>
 80149d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80149d4:	f000 fb84 	bl	80150e0 <rcutils_reset_error>
 80149d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80149da:	e7c7      	b.n	801496c <rclc_executor_prepare+0x18>
 80149dc:	f000 fb80 	bl	80150e0 <rcutils_reset_error>
 80149e0:	e7cb      	b.n	801497a <rclc_executor_prepare+0x26>
 80149e2:	200b      	movs	r0, #11
 80149e4:	4770      	bx	lr
 80149e6:	bf00      	nop

080149e8 <rclc_executor_spin_some.part.0>:
 80149e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ec:	4605      	mov	r5, r0
 80149ee:	4691      	mov	r9, r2
 80149f0:	4698      	mov	r8, r3
 80149f2:	f7ff ffaf 	bl	8014954 <rclc_executor_prepare>
 80149f6:	f105 0614 	add.w	r6, r5, #20
 80149fa:	4630      	mov	r0, r6
 80149fc:	f007 fc4e 	bl	801c29c <rcl_wait_set_clear>
 8014a00:	4607      	mov	r7, r0
 8014a02:	2800      	cmp	r0, #0
 8014a04:	f040 80a8 	bne.w	8014b58 <rclc_executor_spin_some.part.0+0x170>
 8014a08:	68ab      	ldr	r3, [r5, #8]
 8014a0a:	b30b      	cbz	r3, 8014a50 <rclc_executor_spin_some.part.0+0x68>
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	6869      	ldr	r1, [r5, #4]
 8014a10:	01a2      	lsls	r2, r4, #6
 8014a12:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014a16:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8014a1a:	b1cb      	cbz	r3, 8014a50 <rclc_executor_spin_some.part.0+0x68>
 8014a1c:	5c8b      	ldrb	r3, [r1, r2]
 8014a1e:	2b0a      	cmp	r3, #10
 8014a20:	f200 80de 	bhi.w	8014be0 <rclc_executor_spin_some.part.0+0x1f8>
 8014a24:	e8df f003 	tbb	[pc, r3]
 8014a28:	8da99d9d 	.word	0x8da99d9d
 8014a2c:	0606068d 	.word	0x0606068d
 8014a30:	c1ce      	.short	0xc1ce
 8014a32:	b5          	.byte	0xb5
 8014a33:	00          	.byte	0x00
 8014a34:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014a38:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014a3c:	4630      	mov	r0, r6
 8014a3e:	f007 ff7d 	bl	801c93c <rcl_wait_set_add_service>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	f040 8087 	bne.w	8014b56 <rclc_executor_spin_some.part.0+0x16e>
 8014a48:	3401      	adds	r4, #1
 8014a4a:	68ab      	ldr	r3, [r5, #8]
 8014a4c:	429c      	cmp	r4, r3
 8014a4e:	d3de      	bcc.n	8014a0e <rclc_executor_spin_some.part.0+0x26>
 8014a50:	4643      	mov	r3, r8
 8014a52:	464a      	mov	r2, r9
 8014a54:	4630      	mov	r0, r6
 8014a56:	f007 ff9f 	bl	801c998 <rcl_wait>
 8014a5a:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	f000 80c6 	beq.w	8014bf0 <rclc_executor_spin_some.part.0+0x208>
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	f040 80bb 	bne.w	8014be0 <rclc_executor_spin_some.part.0+0x1f8>
 8014a6a:	68ab      	ldr	r3, [r5, #8]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	f000 8159 	beq.w	8014d24 <rclc_executor_spin_some.part.0+0x33c>
 8014a72:	2400      	movs	r4, #0
 8014a74:	f240 1991 	movw	r9, #401	; 0x191
 8014a78:	46a0      	mov	r8, r4
 8014a7a:	e00a      	b.n	8014a92 <rclc_executor_spin_some.part.0+0xaa>
 8014a7c:	f7ff fb1a 	bl	80140b4 <_rclc_check_for_new_data>
 8014a80:	4604      	mov	r4, r0
 8014a82:	b110      	cbz	r0, 8014a8a <rclc_executor_spin_some.part.0+0xa2>
 8014a84:	4548      	cmp	r0, r9
 8014a86:	f040 80b1 	bne.w	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014a8a:	68ab      	ldr	r3, [r5, #8]
 8014a8c:	4598      	cmp	r8, r3
 8014a8e:	f080 8126 	bcs.w	8014cde <rclc_executor_spin_some.part.0+0x2f6>
 8014a92:	686a      	ldr	r2, [r5, #4]
 8014a94:	4631      	mov	r1, r6
 8014a96:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014a9a:	f108 0801 	add.w	r8, r8, #1
 8014a9e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014aa2:	f1bc 0f00 	cmp.w	ip, #0
 8014aa6:	d1e9      	bne.n	8014a7c <rclc_executor_spin_some.part.0+0x94>
 8014aa8:	4619      	mov	r1, r3
 8014aaa:	4610      	mov	r0, r2
 8014aac:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014ab0:	4798      	blx	r3
 8014ab2:	2800      	cmp	r0, #0
 8014ab4:	f000 809a 	beq.w	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014ab8:	68ab      	ldr	r3, [r5, #8]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	f000 8096 	beq.w	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014ac0:	f04f 0800 	mov.w	r8, #0
 8014ac4:	f240 1991 	movw	r9, #401	; 0x191
 8014ac8:	e009      	b.n	8014ade <rclc_executor_spin_some.part.0+0xf6>
 8014aca:	f7ff fb41 	bl	8014150 <_rclc_take_new_data>
 8014ace:	4604      	mov	r4, r0
 8014ad0:	b110      	cbz	r0, 8014ad8 <rclc_executor_spin_some.part.0+0xf0>
 8014ad2:	4548      	cmp	r0, r9
 8014ad4:	f040 808a 	bne.w	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014ad8:	68ab      	ldr	r3, [r5, #8]
 8014ada:	4598      	cmp	r8, r3
 8014adc:	d209      	bcs.n	8014af2 <rclc_executor_spin_some.part.0+0x10a>
 8014ade:	6868      	ldr	r0, [r5, #4]
 8014ae0:	4631      	mov	r1, r6
 8014ae2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014ae6:	f108 0801 	add.w	r8, r8, #1
 8014aea:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8014aee:	2a00      	cmp	r2, #0
 8014af0:	d1eb      	bne.n	8014aca <rclc_executor_spin_some.part.0+0xe2>
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d07a      	beq.n	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014af6:	2600      	movs	r6, #0
 8014af8:	e00e      	b.n	8014b18 <rclc_executor_spin_some.part.0+0x130>
 8014afa:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014afe:	2a08      	cmp	r2, #8
 8014b00:	f000 80fc 	beq.w	8014cfc <rclc_executor_spin_some.part.0+0x314>
 8014b04:	2a09      	cmp	r2, #9
 8014b06:	f000 80ee 	beq.w	8014ce6 <rclc_executor_spin_some.part.0+0x2fe>
 8014b0a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8014b0e:	b98a      	cbnz	r2, 8014b34 <rclc_executor_spin_some.part.0+0x14c>
 8014b10:	3601      	adds	r6, #1
 8014b12:	429e      	cmp	r6, r3
 8014b14:	d267      	bcs.n	8014be6 <rclc_executor_spin_some.part.0+0x1fe>
 8014b16:	2400      	movs	r4, #0
 8014b18:	686a      	ldr	r2, [r5, #4]
 8014b1a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014b1e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014b22:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8014b26:	2900      	cmp	r1, #0
 8014b28:	d060      	beq.n	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014b2a:	7841      	ldrb	r1, [r0, #1]
 8014b2c:	2900      	cmp	r1, #0
 8014b2e:	d0e4      	beq.n	8014afa <rclc_executor_spin_some.part.0+0x112>
 8014b30:	2901      	cmp	r1, #1
 8014b32:	d1ed      	bne.n	8014b10 <rclc_executor_spin_some.part.0+0x128>
 8014b34:	f7ff fc80 	bl	8014438 <_rclc_execute.part.0>
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	f040 80b5 	bne.w	8014ca8 <rclc_executor_spin_some.part.0+0x2c0>
 8014b3e:	68ab      	ldr	r3, [r5, #8]
 8014b40:	e7e6      	b.n	8014b10 <rclc_executor_spin_some.part.0+0x128>
 8014b42:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b46:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b4a:	4630      	mov	r0, r6
 8014b4c:	f007 feca 	bl	801c8e4 <rcl_wait_set_add_client>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	f43f af79 	beq.w	8014a48 <rclc_executor_spin_some.part.0+0x60>
 8014b56:	4607      	mov	r7, r0
 8014b58:	f000 fac2 	bl	80150e0 <rcutils_reset_error>
 8014b5c:	4638      	mov	r0, r7
 8014b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b62:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	f007 fb6a 	bl	801c244 <rcl_wait_set_add_subscription>
 8014b70:	2800      	cmp	r0, #0
 8014b72:	f43f af69 	beq.w	8014a48 <rclc_executor_spin_some.part.0+0x60>
 8014b76:	4607      	mov	r7, r0
 8014b78:	e7ee      	b.n	8014b58 <rclc_executor_spin_some.part.0+0x170>
 8014b7a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b7e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b82:	4630      	mov	r0, r6
 8014b84:	f007 fe7e 	bl	801c884 <rcl_wait_set_add_timer>
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	f43f af5d 	beq.w	8014a48 <rclc_executor_spin_some.part.0+0x60>
 8014b8e:	4607      	mov	r7, r0
 8014b90:	e7e2      	b.n	8014b58 <rclc_executor_spin_some.part.0+0x170>
 8014b92:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	f007 fe46 	bl	801c82c <rcl_wait_set_add_guard_condition>
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	f43f af51 	beq.w	8014a48 <rclc_executor_spin_some.part.0+0x60>
 8014ba6:	4607      	mov	r7, r0
 8014ba8:	e7d6      	b.n	8014b58 <rclc_executor_spin_some.part.0+0x170>
 8014baa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014bae:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014bb2:	4630      	mov	r0, r6
 8014bb4:	3110      	adds	r1, #16
 8014bb6:	f008 fbc3 	bl	801d340 <rcl_action_wait_set_add_action_server>
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	f43f af44 	beq.w	8014a48 <rclc_executor_spin_some.part.0+0x60>
 8014bc0:	4607      	mov	r7, r0
 8014bc2:	e7c9      	b.n	8014b58 <rclc_executor_spin_some.part.0+0x170>
 8014bc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014bc8:	2300      	movs	r3, #0
 8014bca:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014bce:	4630      	mov	r0, r6
 8014bd0:	3110      	adds	r1, #16
 8014bd2:	f008 f98d 	bl	801cef0 <rcl_action_wait_set_add_action_client>
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	f43f af36 	beq.w	8014a48 <rclc_executor_spin_some.part.0+0x60>
 8014bdc:	4607      	mov	r7, r0
 8014bde:	e7bb      	b.n	8014b58 <rclc_executor_spin_some.part.0+0x170>
 8014be0:	2701      	movs	r7, #1
 8014be2:	f000 fa7d 	bl	80150e0 <rcutils_reset_error>
 8014be6:	4638      	mov	r0, r7
 8014be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bec:	4627      	mov	r7, r4
 8014bee:	e7fa      	b.n	8014be6 <rclc_executor_spin_some.part.0+0x1fe>
 8014bf0:	68ab      	ldr	r3, [r5, #8]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	f000 8093 	beq.w	8014d1e <rclc_executor_spin_some.part.0+0x336>
 8014bf8:	2400      	movs	r4, #0
 8014bfa:	f240 1991 	movw	r9, #401	; 0x191
 8014bfe:	46a0      	mov	r8, r4
 8014c00:	e008      	b.n	8014c14 <rclc_executor_spin_some.part.0+0x22c>
 8014c02:	f7ff fa57 	bl	80140b4 <_rclc_check_for_new_data>
 8014c06:	4604      	mov	r4, r0
 8014c08:	b108      	cbz	r0, 8014c0e <rclc_executor_spin_some.part.0+0x226>
 8014c0a:	4548      	cmp	r0, r9
 8014c0c:	d1ee      	bne.n	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014c0e:	68ab      	ldr	r3, [r5, #8]
 8014c10:	4598      	cmp	r8, r3
 8014c12:	d266      	bcs.n	8014ce2 <rclc_executor_spin_some.part.0+0x2fa>
 8014c14:	686a      	ldr	r2, [r5, #4]
 8014c16:	4631      	mov	r1, r6
 8014c18:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014c1c:	f108 0801 	add.w	r8, r8, #1
 8014c20:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014c24:	f1bc 0f00 	cmp.w	ip, #0
 8014c28:	d1eb      	bne.n	8014c02 <rclc_executor_spin_some.part.0+0x21a>
 8014c2a:	4619      	mov	r1, r3
 8014c2c:	4610      	mov	r0, r2
 8014c2e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014c32:	4798      	blx	r3
 8014c34:	2800      	cmp	r0, #0
 8014c36:	d0d9      	beq.n	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014c38:	68ab      	ldr	r3, [r5, #8]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d0d6      	beq.n	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014c3e:	f04f 0a00 	mov.w	sl, #0
 8014c42:	f240 1891 	movw	r8, #401	; 0x191
 8014c46:	f240 2959 	movw	r9, #601	; 0x259
 8014c4a:	e00e      	b.n	8014c6a <rclc_executor_spin_some.part.0+0x282>
 8014c4c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8014c50:	2b08      	cmp	r3, #8
 8014c52:	d034      	beq.n	8014cbe <rclc_executor_spin_some.part.0+0x2d6>
 8014c54:	2b09      	cmp	r3, #9
 8014c56:	d029      	beq.n	8014cac <rclc_executor_spin_some.part.0+0x2c4>
 8014c58:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8014c5c:	bb03      	cbnz	r3, 8014ca0 <rclc_executor_spin_some.part.0+0x2b8>
 8014c5e:	f10a 0a01 	add.w	sl, sl, #1
 8014c62:	68ab      	ldr	r3, [r5, #8]
 8014c64:	459a      	cmp	sl, r3
 8014c66:	d2be      	bcs.n	8014be6 <rclc_executor_spin_some.part.0+0x1fe>
 8014c68:	2400      	movs	r4, #0
 8014c6a:	6868      	ldr	r0, [r5, #4]
 8014c6c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8014c70:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8014c74:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d0b7      	beq.n	8014bec <rclc_executor_spin_some.part.0+0x204>
 8014c7c:	4631      	mov	r1, r6
 8014c7e:	f7ff fa67 	bl	8014150 <_rclc_take_new_data>
 8014c82:	2800      	cmp	r0, #0
 8014c84:	bf18      	it	ne
 8014c86:	4540      	cmpne	r0, r8
 8014c88:	d001      	beq.n	8014c8e <rclc_executor_spin_some.part.0+0x2a6>
 8014c8a:	4548      	cmp	r0, r9
 8014c8c:	d10c      	bne.n	8014ca8 <rclc_executor_spin_some.part.0+0x2c0>
 8014c8e:	686b      	ldr	r3, [r5, #4]
 8014c90:	eb13 000b 	adds.w	r0, r3, fp
 8014c94:	d021      	beq.n	8014cda <rclc_executor_spin_some.part.0+0x2f2>
 8014c96:	7842      	ldrb	r2, [r0, #1]
 8014c98:	2a00      	cmp	r2, #0
 8014c9a:	d0d7      	beq.n	8014c4c <rclc_executor_spin_some.part.0+0x264>
 8014c9c:	2a01      	cmp	r2, #1
 8014c9e:	d1de      	bne.n	8014c5e <rclc_executor_spin_some.part.0+0x276>
 8014ca0:	f7ff fbca 	bl	8014438 <_rclc_execute.part.0>
 8014ca4:	2800      	cmp	r0, #0
 8014ca6:	d0da      	beq.n	8014c5e <rclc_executor_spin_some.part.0+0x276>
 8014ca8:	4607      	mov	r7, r0
 8014caa:	e79c      	b.n	8014be6 <rclc_executor_spin_some.part.0+0x1fe>
 8014cac:	6843      	ldr	r3, [r0, #4]
 8014cae:	6a1a      	ldr	r2, [r3, #32]
 8014cb0:	2a00      	cmp	r2, #0
 8014cb2:	d1f5      	bne.n	8014ca0 <rclc_executor_spin_some.part.0+0x2b8>
 8014cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d0d0      	beq.n	8014c5e <rclc_executor_spin_some.part.0+0x276>
 8014cbc:	e7f0      	b.n	8014ca0 <rclc_executor_spin_some.part.0+0x2b8>
 8014cbe:	6843      	ldr	r3, [r0, #4]
 8014cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014cc2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8014cc6:	d1eb      	bne.n	8014ca0 <rclc_executor_spin_some.part.0+0x2b8>
 8014cc8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014ccc:	2a00      	cmp	r2, #0
 8014cce:	d1e7      	bne.n	8014ca0 <rclc_executor_spin_some.part.0+0x2b8>
 8014cd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d0c2      	beq.n	8014c5e <rclc_executor_spin_some.part.0+0x276>
 8014cd8:	e7e2      	b.n	8014ca0 <rclc_executor_spin_some.part.0+0x2b8>
 8014cda:	270b      	movs	r7, #11
 8014cdc:	e783      	b.n	8014be6 <rclc_executor_spin_some.part.0+0x1fe>
 8014cde:	686a      	ldr	r2, [r5, #4]
 8014ce0:	e6e2      	b.n	8014aa8 <rclc_executor_spin_some.part.0+0xc0>
 8014ce2:	686a      	ldr	r2, [r5, #4]
 8014ce4:	e7a1      	b.n	8014c2a <rclc_executor_spin_some.part.0+0x242>
 8014ce6:	6842      	ldr	r2, [r0, #4]
 8014ce8:	6a11      	ldr	r1, [r2, #32]
 8014cea:	2900      	cmp	r1, #0
 8014cec:	f47f af22 	bne.w	8014b34 <rclc_executor_spin_some.part.0+0x14c>
 8014cf0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8014cf4:	2a00      	cmp	r2, #0
 8014cf6:	f43f af0b 	beq.w	8014b10 <rclc_executor_spin_some.part.0+0x128>
 8014cfa:	e71b      	b.n	8014b34 <rclc_executor_spin_some.part.0+0x14c>
 8014cfc:	6842      	ldr	r2, [r0, #4]
 8014cfe:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8014d00:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8014d04:	f47f af16 	bne.w	8014b34 <rclc_executor_spin_some.part.0+0x14c>
 8014d08:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8014d0c:	2900      	cmp	r1, #0
 8014d0e:	f47f af11 	bne.w	8014b34 <rclc_executor_spin_some.part.0+0x14c>
 8014d12:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8014d16:	2a00      	cmp	r2, #0
 8014d18:	f43f aefa 	beq.w	8014b10 <rclc_executor_spin_some.part.0+0x128>
 8014d1c:	e70a      	b.n	8014b34 <rclc_executor_spin_some.part.0+0x14c>
 8014d1e:	686a      	ldr	r2, [r5, #4]
 8014d20:	461c      	mov	r4, r3
 8014d22:	e782      	b.n	8014c2a <rclc_executor_spin_some.part.0+0x242>
 8014d24:	686a      	ldr	r2, [r5, #4]
 8014d26:	461c      	mov	r4, r3
 8014d28:	e6be      	b.n	8014aa8 <rclc_executor_spin_some.part.0+0xc0>
 8014d2a:	bf00      	nop

08014d2c <rclc_executor_spin_some>:
 8014d2c:	b190      	cbz	r0, 8014d54 <rclc_executor_spin_some+0x28>
 8014d2e:	b570      	push	{r4, r5, r6, lr}
 8014d30:	4604      	mov	r4, r0
 8014d32:	6800      	ldr	r0, [r0, #0]
 8014d34:	4616      	mov	r6, r2
 8014d36:	461d      	mov	r5, r3
 8014d38:	f006 fb96 	bl	801b468 <rcl_context_is_valid>
 8014d3c:	b130      	cbz	r0, 8014d4c <rclc_executor_spin_some+0x20>
 8014d3e:	4632      	mov	r2, r6
 8014d40:	462b      	mov	r3, r5
 8014d42:	4620      	mov	r0, r4
 8014d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d48:	f7ff be4e 	b.w	80149e8 <rclc_executor_spin_some.part.0>
 8014d4c:	f000 f9c8 	bl	80150e0 <rcutils_reset_error>
 8014d50:	2001      	movs	r0, #1
 8014d52:	bd70      	pop	{r4, r5, r6, pc}
 8014d54:	200b      	movs	r0, #11
 8014d56:	4770      	bx	lr

08014d58 <rclc_executor_handle_counters_zero_init>:
 8014d58:	b130      	cbz	r0, 8014d68 <rclc_executor_handle_counters_zero_init+0x10>
 8014d5a:	2220      	movs	r2, #32
 8014d5c:	2100      	movs	r1, #0
 8014d5e:	b508      	push	{r3, lr}
 8014d60:	f00c f814 	bl	8020d8c <memset>
 8014d64:	2000      	movs	r0, #0
 8014d66:	bd08      	pop	{r3, pc}
 8014d68:	200b      	movs	r0, #11
 8014d6a:	4770      	bx	lr
 8014d6c:	0000      	movs	r0, r0
	...

08014d70 <rclc_executor_handle_init>:
 8014d70:	4603      	mov	r3, r0
 8014d72:	b178      	cbz	r0, 8014d94 <rclc_executor_handle_init+0x24>
 8014d74:	2200      	movs	r2, #0
 8014d76:	f04f 0c0b 	mov.w	ip, #11
 8014d7a:	6341      	str	r1, [r0, #52]	; 0x34
 8014d7c:	4610      	mov	r0, r2
 8014d7e:	f8a3 c000 	strh.w	ip, [r3]
 8014d82:	631a      	str	r2, [r3, #48]	; 0x30
 8014d84:	871a      	strh	r2, [r3, #56]	; 0x38
 8014d86:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8014d98 <rclc_executor_handle_init+0x28>
 8014d8a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014d8e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8014d92:	4770      	bx	lr
 8014d94:	200b      	movs	r0, #11
 8014d96:	4770      	bx	lr
	...

08014da0 <rclc_support_init_with_options>:
 8014da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014da4:	b083      	sub	sp, #12
 8014da6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	bf18      	it	ne
 8014dac:	2f00      	cmpne	r7, #0
 8014dae:	d027      	beq.n	8014e00 <rclc_support_init_with_options+0x60>
 8014db0:	4604      	mov	r4, r0
 8014db2:	b328      	cbz	r0, 8014e00 <rclc_support_init_with_options+0x60>
 8014db4:	46e9      	mov	r9, sp
 8014db6:	461d      	mov	r5, r3
 8014db8:	460e      	mov	r6, r1
 8014dba:	4690      	mov	r8, r2
 8014dbc:	4648      	mov	r0, r9
 8014dbe:	f006 fb49 	bl	801b454 <rcl_get_zero_initialized_context>
 8014dc2:	462a      	mov	r2, r5
 8014dc4:	4623      	mov	r3, r4
 8014dc6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014dca:	e884 0003 	stmia.w	r4, {r0, r1}
 8014dce:	4641      	mov	r1, r8
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	f006 fc5d 	bl	801b690 <rcl_init>
 8014dd6:	4605      	mov	r5, r0
 8014dd8:	b960      	cbnz	r0, 8014df4 <rclc_support_init_with_options+0x54>
 8014dda:	463a      	mov	r2, r7
 8014ddc:	f104 010c 	add.w	r1, r4, #12
 8014de0:	2003      	movs	r0, #3
 8014de2:	60a7      	str	r7, [r4, #8]
 8014de4:	f006 ff6a 	bl	801bcbc <rcl_clock_init>
 8014de8:	4605      	mov	r5, r0
 8014dea:	b918      	cbnz	r0, 8014df4 <rclc_support_init_with_options+0x54>
 8014dec:	4628      	mov	r0, r5
 8014dee:	b003      	add	sp, #12
 8014df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014df4:	f000 f974 	bl	80150e0 <rcutils_reset_error>
 8014df8:	4628      	mov	r0, r5
 8014dfa:	b003      	add	sp, #12
 8014dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e00:	250b      	movs	r5, #11
 8014e02:	4628      	mov	r0, r5
 8014e04:	b003      	add	sp, #12
 8014e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e0a:	bf00      	nop

08014e0c <rclc_node_init_with_options>:
 8014e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e10:	b087      	sub	sp, #28
 8014e12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014e14:	2e00      	cmp	r6, #0
 8014e16:	bf18      	it	ne
 8014e18:	2b00      	cmpne	r3, #0
 8014e1a:	bf0c      	ite	eq
 8014e1c:	f04f 0c01 	moveq.w	ip, #1
 8014e20:	f04f 0c00 	movne.w	ip, #0
 8014e24:	2a00      	cmp	r2, #0
 8014e26:	bf08      	it	eq
 8014e28:	f04c 0c01 	orreq.w	ip, ip, #1
 8014e2c:	2900      	cmp	r1, #0
 8014e2e:	bf08      	it	eq
 8014e30:	f04c 0c01 	orreq.w	ip, ip, #1
 8014e34:	f1bc 0f00 	cmp.w	ip, #0
 8014e38:	d118      	bne.n	8014e6c <rclc_node_init_with_options+0x60>
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	b1b0      	cbz	r0, 8014e6c <rclc_node_init_with_options+0x60>
 8014e3e:	f10d 0910 	add.w	r9, sp, #16
 8014e42:	460d      	mov	r5, r1
 8014e44:	4698      	mov	r8, r3
 8014e46:	4617      	mov	r7, r2
 8014e48:	4648      	mov	r0, r9
 8014e4a:	f7fe fc09 	bl	8013660 <rcl_get_zero_initialized_node>
 8014e4e:	9600      	str	r6, [sp, #0]
 8014e50:	4643      	mov	r3, r8
 8014e52:	463a      	mov	r2, r7
 8014e54:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014e58:	e884 0003 	stmia.w	r4, {r0, r1}
 8014e5c:	4629      	mov	r1, r5
 8014e5e:	4620      	mov	r0, r4
 8014e60:	f7fe fc08 	bl	8013674 <rcl_node_init>
 8014e64:	b930      	cbnz	r0, 8014e74 <rclc_node_init_with_options+0x68>
 8014e66:	b007      	add	sp, #28
 8014e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e6c:	200b      	movs	r0, #11
 8014e6e:	b007      	add	sp, #28
 8014e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e74:	9003      	str	r0, [sp, #12]
 8014e76:	f000 f933 	bl	80150e0 <rcutils_reset_error>
 8014e7a:	9803      	ldr	r0, [sp, #12]
 8014e7c:	b007      	add	sp, #28
 8014e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e82:	bf00      	nop

08014e84 <rclc_publisher_init_default>:
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	bf18      	it	ne
 8014e88:	2a00      	cmpne	r2, #0
 8014e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e8e:	4616      	mov	r6, r2
 8014e90:	bf0c      	ite	eq
 8014e92:	2201      	moveq	r2, #1
 8014e94:	2200      	movne	r2, #0
 8014e96:	b0a0      	sub	sp, #128	; 0x80
 8014e98:	2900      	cmp	r1, #0
 8014e9a:	bf08      	it	eq
 8014e9c:	f042 0201 	orreq.w	r2, r2, #1
 8014ea0:	bb1a      	cbnz	r2, 8014eea <rclc_publisher_init_default+0x66>
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	b308      	cbz	r0, 8014eea <rclc_publisher_init_default+0x66>
 8014ea6:	f10d 0810 	add.w	r8, sp, #16
 8014eaa:	461f      	mov	r7, r3
 8014eac:	460d      	mov	r5, r1
 8014eae:	f7fe fd81 	bl	80139b4 <rcl_get_zero_initialized_publisher>
 8014eb2:	6020      	str	r0, [r4, #0]
 8014eb4:	4640      	mov	r0, r8
 8014eb6:	f7fe fe1d 	bl	8013af4 <rcl_publisher_get_default_options>
 8014eba:	2250      	movs	r2, #80	; 0x50
 8014ebc:	490d      	ldr	r1, [pc, #52]	; (8014ef4 <rclc_publisher_init_default+0x70>)
 8014ebe:	4640      	mov	r0, r8
 8014ec0:	f00c f831 	bl	8020f26 <memcpy>
 8014ec4:	463b      	mov	r3, r7
 8014ec6:	4632      	mov	r2, r6
 8014ec8:	4629      	mov	r1, r5
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f8cd 8000 	str.w	r8, [sp]
 8014ed0:	f7fe fd76 	bl	80139c0 <rcl_publisher_init>
 8014ed4:	b910      	cbnz	r0, 8014edc <rclc_publisher_init_default+0x58>
 8014ed6:	b020      	add	sp, #128	; 0x80
 8014ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014edc:	9003      	str	r0, [sp, #12]
 8014ede:	f000 f8ff 	bl	80150e0 <rcutils_reset_error>
 8014ee2:	9803      	ldr	r0, [sp, #12]
 8014ee4:	b020      	add	sp, #128	; 0x80
 8014ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eea:	200b      	movs	r0, #11
 8014eec:	b020      	add	sp, #128	; 0x80
 8014eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef2:	bf00      	nop
 8014ef4:	08024fe8 	.word	0x08024fe8

08014ef8 <rclc_service_init_default>:
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	bf18      	it	ne
 8014efc:	2a00      	cmpne	r2, #0
 8014efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f02:	4616      	mov	r6, r2
 8014f04:	bf0c      	ite	eq
 8014f06:	2201      	moveq	r2, #1
 8014f08:	2200      	movne	r2, #0
 8014f0a:	b09e      	sub	sp, #120	; 0x78
 8014f0c:	2900      	cmp	r1, #0
 8014f0e:	bf08      	it	eq
 8014f10:	f042 0201 	orreq.w	r2, r2, #1
 8014f14:	bb1a      	cbnz	r2, 8014f5e <rclc_service_init_default+0x66>
 8014f16:	4604      	mov	r4, r0
 8014f18:	b308      	cbz	r0, 8014f5e <rclc_service_init_default+0x66>
 8014f1a:	f10d 0810 	add.w	r8, sp, #16
 8014f1e:	461f      	mov	r7, r3
 8014f20:	460d      	mov	r5, r1
 8014f22:	f7fe fe5b 	bl	8013bdc <rcl_get_zero_initialized_service>
 8014f26:	6020      	str	r0, [r4, #0]
 8014f28:	4640      	mov	r0, r8
 8014f2a:	f7fe feef 	bl	8013d0c <rcl_service_get_default_options>
 8014f2e:	2250      	movs	r2, #80	; 0x50
 8014f30:	490d      	ldr	r1, [pc, #52]	; (8014f68 <rclc_service_init_default+0x70>)
 8014f32:	4640      	mov	r0, r8
 8014f34:	f00b fff7 	bl	8020f26 <memcpy>
 8014f38:	463b      	mov	r3, r7
 8014f3a:	4632      	mov	r2, r6
 8014f3c:	4629      	mov	r1, r5
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f8cd 8000 	str.w	r8, [sp]
 8014f44:	f7fe fe50 	bl	8013be8 <rcl_service_init>
 8014f48:	b910      	cbnz	r0, 8014f50 <rclc_service_init_default+0x58>
 8014f4a:	b01e      	add	sp, #120	; 0x78
 8014f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f50:	9003      	str	r0, [sp, #12]
 8014f52:	f000 f8c5 	bl	80150e0 <rcutils_reset_error>
 8014f56:	9803      	ldr	r0, [sp, #12]
 8014f58:	b01e      	add	sp, #120	; 0x78
 8014f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f5e:	200b      	movs	r0, #11
 8014f60:	b01e      	add	sp, #120	; 0x78
 8014f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f66:	bf00      	nop
 8014f68:	08025038 	.word	0x08025038

08014f6c <rclc_subscription_init_default>:
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	bf18      	it	ne
 8014f70:	2a00      	cmpne	r2, #0
 8014f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f76:	4616      	mov	r6, r2
 8014f78:	bf0c      	ite	eq
 8014f7a:	2201      	moveq	r2, #1
 8014f7c:	2200      	movne	r2, #0
 8014f7e:	b0a0      	sub	sp, #128	; 0x80
 8014f80:	2900      	cmp	r1, #0
 8014f82:	bf08      	it	eq
 8014f84:	f042 0201 	orreq.w	r2, r2, #1
 8014f88:	bb1a      	cbnz	r2, 8014fd2 <rclc_subscription_init_default+0x66>
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	b308      	cbz	r0, 8014fd2 <rclc_subscription_init_default+0x66>
 8014f8e:	f10d 0810 	add.w	r8, sp, #16
 8014f92:	461f      	mov	r7, r3
 8014f94:	460d      	mov	r5, r1
 8014f96:	f7fe ff45 	bl	8013e24 <rcl_get_zero_initialized_subscription>
 8014f9a:	6020      	str	r0, [r4, #0]
 8014f9c:	4640      	mov	r0, r8
 8014f9e:	f7fe fff5 	bl	8013f8c <rcl_subscription_get_default_options>
 8014fa2:	2250      	movs	r2, #80	; 0x50
 8014fa4:	490d      	ldr	r1, [pc, #52]	; (8014fdc <rclc_subscription_init_default+0x70>)
 8014fa6:	4640      	mov	r0, r8
 8014fa8:	f00b ffbd 	bl	8020f26 <memcpy>
 8014fac:	463b      	mov	r3, r7
 8014fae:	4632      	mov	r2, r6
 8014fb0:	4629      	mov	r1, r5
 8014fb2:	4620      	mov	r0, r4
 8014fb4:	f8cd 8000 	str.w	r8, [sp]
 8014fb8:	f7fe ff3a 	bl	8013e30 <rcl_subscription_init>
 8014fbc:	b910      	cbnz	r0, 8014fc4 <rclc_subscription_init_default+0x58>
 8014fbe:	b020      	add	sp, #128	; 0x80
 8014fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fc4:	9003      	str	r0, [sp, #12]
 8014fc6:	f000 f88b 	bl	80150e0 <rcutils_reset_error>
 8014fca:	9803      	ldr	r0, [sp, #12]
 8014fcc:	b020      	add	sp, #128	; 0x80
 8014fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fd2:	200b      	movs	r0, #11
 8014fd4:	b020      	add	sp, #128	; 0x80
 8014fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fda:	bf00      	nop
 8014fdc:	08025088 	.word	0x08025088

08014fe0 <__default_zero_allocate>:
 8014fe0:	f00a ba78 	b.w	801f4d4 <calloc>

08014fe4 <__default_reallocate>:
 8014fe4:	f00a bc16 	b.w	801f814 <realloc>

08014fe8 <__default_deallocate>:
 8014fe8:	f00a baf4 	b.w	801f5d4 <free>

08014fec <__default_allocate>:
 8014fec:	f00a baea 	b.w	801f5c4 <malloc>

08014ff0 <rcutils_get_zero_initialized_allocator>:
 8014ff0:	b510      	push	{r4, lr}
 8014ff2:	4c05      	ldr	r4, [pc, #20]	; (8015008 <rcutils_get_zero_initialized_allocator+0x18>)
 8014ff4:	4686      	mov	lr, r0
 8014ff6:	4684      	mov	ip, r0
 8014ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ffa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ffe:	6823      	ldr	r3, [r4, #0]
 8015000:	4670      	mov	r0, lr
 8015002:	f8cc 3000 	str.w	r3, [ip]
 8015006:	bd10      	pop	{r4, pc}
 8015008:	080250d8 	.word	0x080250d8

0801500c <rcutils_set_default_allocator>:
 801500c:	b1a8      	cbz	r0, 801503a <rcutils_set_default_allocator+0x2e>
 801500e:	6802      	ldr	r2, [r0, #0]
 8015010:	b1a2      	cbz	r2, 801503c <rcutils_set_default_allocator+0x30>
 8015012:	6841      	ldr	r1, [r0, #4]
 8015014:	b1a1      	cbz	r1, 8015040 <rcutils_set_default_allocator+0x34>
 8015016:	b410      	push	{r4}
 8015018:	68c4      	ldr	r4, [r0, #12]
 801501a:	b164      	cbz	r4, 8015036 <rcutils_set_default_allocator+0x2a>
 801501c:	6880      	ldr	r0, [r0, #8]
 801501e:	b138      	cbz	r0, 8015030 <rcutils_set_default_allocator+0x24>
 8015020:	4b08      	ldr	r3, [pc, #32]	; (8015044 <rcutils_set_default_allocator+0x38>)
 8015022:	601a      	str	r2, [r3, #0]
 8015024:	2200      	movs	r2, #0
 8015026:	e9c3 1001 	strd	r1, r0, [r3, #4]
 801502a:	2001      	movs	r0, #1
 801502c:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8015030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015034:	4770      	bx	lr
 8015036:	4620      	mov	r0, r4
 8015038:	e7fa      	b.n	8015030 <rcutils_set_default_allocator+0x24>
 801503a:	4770      	bx	lr
 801503c:	4610      	mov	r0, r2
 801503e:	4770      	bx	lr
 8015040:	4608      	mov	r0, r1
 8015042:	4770      	bx	lr
 8015044:	200008e0 	.word	0x200008e0

08015048 <rcutils_get_default_allocator>:
 8015048:	b510      	push	{r4, lr}
 801504a:	4c05      	ldr	r4, [pc, #20]	; (8015060 <rcutils_get_default_allocator+0x18>)
 801504c:	4686      	mov	lr, r0
 801504e:	4684      	mov	ip, r0
 8015050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015056:	6823      	ldr	r3, [r4, #0]
 8015058:	4670      	mov	r0, lr
 801505a:	f8cc 3000 	str.w	r3, [ip]
 801505e:	bd10      	pop	{r4, pc}
 8015060:	200008e0 	.word	0x200008e0

08015064 <rcutils_allocator_is_valid>:
 8015064:	b158      	cbz	r0, 801507e <rcutils_allocator_is_valid+0x1a>
 8015066:	6803      	ldr	r3, [r0, #0]
 8015068:	b143      	cbz	r3, 801507c <rcutils_allocator_is_valid+0x18>
 801506a:	6843      	ldr	r3, [r0, #4]
 801506c:	b133      	cbz	r3, 801507c <rcutils_allocator_is_valid+0x18>
 801506e:	68c3      	ldr	r3, [r0, #12]
 8015070:	b123      	cbz	r3, 801507c <rcutils_allocator_is_valid+0x18>
 8015072:	6880      	ldr	r0, [r0, #8]
 8015074:	3800      	subs	r0, #0
 8015076:	bf18      	it	ne
 8015078:	2001      	movne	r0, #1
 801507a:	4770      	bx	lr
 801507c:	4618      	mov	r0, r3
 801507e:	4770      	bx	lr

08015080 <rcutils_get_env>:
 8015080:	b168      	cbz	r0, 801509e <rcutils_get_env+0x1e>
 8015082:	b510      	push	{r4, lr}
 8015084:	460c      	mov	r4, r1
 8015086:	b129      	cbz	r1, 8015094 <rcutils_get_env+0x14>
 8015088:	f00a fa54 	bl	801f534 <getenv>
 801508c:	b120      	cbz	r0, 8015098 <rcutils_get_env+0x18>
 801508e:	6020      	str	r0, [r4, #0]
 8015090:	2000      	movs	r0, #0
 8015092:	bd10      	pop	{r4, pc}
 8015094:	4803      	ldr	r0, [pc, #12]	; (80150a4 <rcutils_get_env+0x24>)
 8015096:	bd10      	pop	{r4, pc}
 8015098:	4b03      	ldr	r3, [pc, #12]	; (80150a8 <rcutils_get_env+0x28>)
 801509a:	6023      	str	r3, [r4, #0]
 801509c:	bd10      	pop	{r4, pc}
 801509e:	4803      	ldr	r0, [pc, #12]	; (80150ac <rcutils_get_env+0x2c>)
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop
 80150a4:	08025108 	.word	0x08025108
 80150a8:	080254c0 	.word	0x080254c0
 80150ac:	080250ec 	.word	0x080250ec

080150b0 <rcutils_get_error_string>:
 80150b0:	4b06      	ldr	r3, [pc, #24]	; (80150cc <rcutils_get_error_string+0x1c>)
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	b13b      	cbz	r3, 80150c6 <rcutils_get_error_string+0x16>
 80150b6:	4b06      	ldr	r3, [pc, #24]	; (80150d0 <rcutils_get_error_string+0x20>)
 80150b8:	781a      	ldrb	r2, [r3, #0]
 80150ba:	b90a      	cbnz	r2, 80150c0 <rcutils_get_error_string+0x10>
 80150bc:	2201      	movs	r2, #1
 80150be:	701a      	strb	r2, [r3, #0]
 80150c0:	4b04      	ldr	r3, [pc, #16]	; (80150d4 <rcutils_get_error_string+0x24>)
 80150c2:	7818      	ldrb	r0, [r3, #0]
 80150c4:	4770      	bx	lr
 80150c6:	4b04      	ldr	r3, [pc, #16]	; (80150d8 <rcutils_get_error_string+0x28>)
 80150c8:	7818      	ldrb	r0, [r3, #0]
 80150ca:	4770      	bx	lr
 80150cc:	20012488 	.word	0x20012488
 80150d0:	200124a1 	.word	0x200124a1
 80150d4:	200124a0 	.word	0x200124a0
 80150d8:	08024788 	.word	0x08024788
 80150dc:	00000000 	.word	0x00000000

080150e0 <rcutils_reset_error>:
 80150e0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8015100 <rcutils_reset_error+0x20>
 80150e4:	2300      	movs	r3, #0
 80150e6:	4a08      	ldr	r2, [pc, #32]	; (8015108 <rcutils_reset_error+0x28>)
 80150e8:	4808      	ldr	r0, [pc, #32]	; (801510c <rcutils_reset_error+0x2c>)
 80150ea:	8013      	strh	r3, [r2, #0]
 80150ec:	4908      	ldr	r1, [pc, #32]	; (8015110 <rcutils_reset_error+0x30>)
 80150ee:	7003      	strb	r3, [r0, #0]
 80150f0:	700b      	strb	r3, [r1, #0]
 80150f2:	ed82 7b02 	vstr	d7, [r2, #8]
 80150f6:	4a07      	ldr	r2, [pc, #28]	; (8015114 <rcutils_reset_error+0x34>)
 80150f8:	7013      	strb	r3, [r2, #0]
 80150fa:	4770      	bx	lr
 80150fc:	f3af 8000 	nop.w
	...
 8015108:	20012490 	.word	0x20012490
 801510c:	200124a1 	.word	0x200124a1
 8015110:	200124a0 	.word	0x200124a0
 8015114:	20012488 	.word	0x20012488

08015118 <rcutils_format_string_limit>:
 8015118:	b40f      	push	{r0, r1, r2, r3}
 801511a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801511c:	b083      	sub	sp, #12
 801511e:	ac08      	add	r4, sp, #32
 8015120:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015126:	b326      	cbz	r6, 8015172 <rcutils_format_string_limit+0x5a>
 8015128:	a808      	add	r0, sp, #32
 801512a:	f7ff ff9b 	bl	8015064 <rcutils_allocator_is_valid>
 801512e:	b300      	cbz	r0, 8015172 <rcutils_format_string_limit+0x5a>
 8015130:	2100      	movs	r1, #0
 8015132:	ab0f      	add	r3, sp, #60	; 0x3c
 8015134:	4632      	mov	r2, r6
 8015136:	4608      	mov	r0, r1
 8015138:	e9cd 3300 	strd	r3, r3, [sp]
 801513c:	f000 f906 	bl	801534c <rcutils_vsnprintf>
 8015140:	1c43      	adds	r3, r0, #1
 8015142:	4605      	mov	r5, r0
 8015144:	d015      	beq.n	8015172 <rcutils_format_string_limit+0x5a>
 8015146:	1c47      	adds	r7, r0, #1
 8015148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801514a:	429f      	cmp	r7, r3
 801514c:	d901      	bls.n	8015152 <rcutils_format_string_limit+0x3a>
 801514e:	1e5d      	subs	r5, r3, #1
 8015150:	461f      	mov	r7, r3
 8015152:	9b08      	ldr	r3, [sp, #32]
 8015154:	4638      	mov	r0, r7
 8015156:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015158:	4798      	blx	r3
 801515a:	4604      	mov	r4, r0
 801515c:	b148      	cbz	r0, 8015172 <rcutils_format_string_limit+0x5a>
 801515e:	4632      	mov	r2, r6
 8015160:	4639      	mov	r1, r7
 8015162:	9b01      	ldr	r3, [sp, #4]
 8015164:	f000 f8f2 	bl	801534c <rcutils_vsnprintf>
 8015168:	2800      	cmp	r0, #0
 801516a:	db09      	blt.n	8015180 <rcutils_format_string_limit+0x68>
 801516c:	2300      	movs	r3, #0
 801516e:	5563      	strb	r3, [r4, r5]
 8015170:	e000      	b.n	8015174 <rcutils_format_string_limit+0x5c>
 8015172:	2400      	movs	r4, #0
 8015174:	4620      	mov	r0, r4
 8015176:	b003      	add	sp, #12
 8015178:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801517c:	b004      	add	sp, #16
 801517e:	4770      	bx	lr
 8015180:	4620      	mov	r0, r4
 8015182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015184:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015186:	2400      	movs	r4, #0
 8015188:	4798      	blx	r3
 801518a:	e7f3      	b.n	8015174 <rcutils_format_string_limit+0x5c>

0801518c <rcutils_repl_str>:
 801518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015190:	ed2d 8b02 	vpush	{d8}
 8015194:	b087      	sub	sp, #28
 8015196:	2600      	movs	r6, #0
 8015198:	4680      	mov	r8, r0
 801519a:	468a      	mov	sl, r1
 801519c:	9000      	str	r0, [sp, #0]
 801519e:	4608      	mov	r0, r1
 80151a0:	ee08 2a10 	vmov	s16, r2
 80151a4:	4699      	mov	r9, r3
 80151a6:	2510      	movs	r5, #16
 80151a8:	f7eb f8aa 	bl	8000300 <strlen>
 80151ac:	4637      	mov	r7, r6
 80151ae:	46b3      	mov	fp, r6
 80151b0:	9001      	str	r0, [sp, #4]
 80151b2:	e01e      	b.n	80151f2 <rcutils_repl_str+0x66>
 80151b4:	f10b 0b01 	add.w	fp, fp, #1
 80151b8:	9b01      	ldr	r3, [sp, #4]
 80151ba:	455e      	cmp	r6, fp
 80151bc:	eb04 0803 	add.w	r8, r4, r3
 80151c0:	d211      	bcs.n	80151e6 <rcutils_repl_str+0x5a>
 80151c2:	442e      	add	r6, r5
 80151c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80151c8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80151cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151d0:	00b1      	lsls	r1, r6, #2
 80151d2:	4798      	blx	r3
 80151d4:	2800      	cmp	r0, #0
 80151d6:	f000 8088 	beq.w	80152ea <rcutils_repl_str+0x15e>
 80151da:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80151de:	4607      	mov	r7, r0
 80151e0:	bf28      	it	cs
 80151e2:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80151e6:	9a00      	ldr	r2, [sp, #0]
 80151e8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80151ec:	1aa4      	subs	r4, r4, r2
 80151ee:	f843 4c04 	str.w	r4, [r3, #-4]
 80151f2:	4651      	mov	r1, sl
 80151f4:	4640      	mov	r0, r8
 80151f6:	f00b fdf0 	bl	8020dda <strstr>
 80151fa:	4604      	mov	r4, r0
 80151fc:	4638      	mov	r0, r7
 80151fe:	2c00      	cmp	r4, #0
 8015200:	d1d8      	bne.n	80151b4 <rcutils_repl_str+0x28>
 8015202:	4640      	mov	r0, r8
 8015204:	f7eb f87c 	bl	8000300 <strlen>
 8015208:	9b00      	ldr	r3, [sp, #0]
 801520a:	eba8 0803 	sub.w	r8, r8, r3
 801520e:	eb08 0400 	add.w	r4, r8, r0
 8015212:	9402      	str	r4, [sp, #8]
 8015214:	f1bb 0f00 	cmp.w	fp, #0
 8015218:	d045      	beq.n	80152a6 <rcutils_repl_str+0x11a>
 801521a:	ee18 0a10 	vmov	r0, s16
 801521e:	f7eb f86f 	bl	8000300 <strlen>
 8015222:	9a01      	ldr	r2, [sp, #4]
 8015224:	4606      	mov	r6, r0
 8015226:	f8d9 3000 	ldr.w	r3, [r9]
 801522a:	1a82      	subs	r2, r0, r2
 801522c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015230:	fb0b 4202 	mla	r2, fp, r2, r4
 8015234:	1c50      	adds	r0, r2, #1
 8015236:	9205      	str	r2, [sp, #20]
 8015238:	4798      	blx	r3
 801523a:	4682      	mov	sl, r0
 801523c:	2800      	cmp	r0, #0
 801523e:	d054      	beq.n	80152ea <rcutils_repl_str+0x15e>
 8015240:	683a      	ldr	r2, [r7, #0]
 8015242:	463d      	mov	r5, r7
 8015244:	9900      	ldr	r1, [sp, #0]
 8015246:	2401      	movs	r4, #1
 8015248:	f00b fe6d 	bl	8020f26 <memcpy>
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8015252:	eb0a 0803 	add.w	r8, sl, r3
 8015256:	ee18 7a10 	vmov	r7, s16
 801525a:	f8dd a000 	ldr.w	sl, [sp]
 801525e:	f8cd 9000 	str.w	r9, [sp]
 8015262:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015266:	4632      	mov	r2, r6
 8015268:	4639      	mov	r1, r7
 801526a:	4640      	mov	r0, r8
 801526c:	44b0      	add	r8, r6
 801526e:	f00b fe5a 	bl	8020f26 <memcpy>
 8015272:	f855 2b04 	ldr.w	r2, [r5], #4
 8015276:	45a3      	cmp	fp, r4
 8015278:	444a      	add	r2, r9
 801527a:	eb0a 0102 	add.w	r1, sl, r2
 801527e:	d02a      	beq.n	80152d6 <rcutils_repl_str+0x14a>
 8015280:	6828      	ldr	r0, [r5, #0]
 8015282:	1a82      	subs	r2, r0, r2
 8015284:	4640      	mov	r0, r8
 8015286:	4490      	add	r8, r2
 8015288:	f00b fe4d 	bl	8020f26 <memcpy>
 801528c:	1c62      	adds	r2, r4, #1
 801528e:	45a3      	cmp	fp, r4
 8015290:	4614      	mov	r4, r2
 8015292:	d8e8      	bhi.n	8015266 <rcutils_repl_str+0xda>
 8015294:	f8dd 9000 	ldr.w	r9, [sp]
 8015298:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801529c:	2300      	movs	r3, #0
 801529e:	9a05      	ldr	r2, [sp, #20]
 80152a0:	f80a 3002 	strb.w	r3, [sl, r2]
 80152a4:	e00b      	b.n	80152be <rcutils_repl_str+0x132>
 80152a6:	4620      	mov	r0, r4
 80152a8:	f8d9 3000 	ldr.w	r3, [r9]
 80152ac:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80152b0:	3001      	adds	r0, #1
 80152b2:	4798      	blx	r3
 80152b4:	4682      	mov	sl, r0
 80152b6:	b110      	cbz	r0, 80152be <rcutils_repl_str+0x132>
 80152b8:	9900      	ldr	r1, [sp, #0]
 80152ba:	f00b fe2c 	bl	8020f16 <strcpy>
 80152be:	4638      	mov	r0, r7
 80152c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80152c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80152c8:	4798      	blx	r3
 80152ca:	4650      	mov	r0, sl
 80152cc:	b007      	add	sp, #28
 80152ce:	ecbd 8b02 	vpop	{d8}
 80152d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d6:	9b02      	ldr	r3, [sp, #8]
 80152d8:	4640      	mov	r0, r8
 80152da:	f8dd 9000 	ldr.w	r9, [sp]
 80152de:	1a9a      	subs	r2, r3, r2
 80152e0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80152e4:	f00b fe1f 	bl	8020f26 <memcpy>
 80152e8:	e7d8      	b.n	801529c <rcutils_repl_str+0x110>
 80152ea:	f04f 0a00 	mov.w	sl, #0
 80152ee:	e7e6      	b.n	80152be <rcutils_repl_str+0x132>

080152f0 <rcutils_snprintf>:
 80152f0:	b40c      	push	{r2, r3}
 80152f2:	b530      	push	{r4, r5, lr}
 80152f4:	b083      	sub	sp, #12
 80152f6:	ab06      	add	r3, sp, #24
 80152f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80152fc:	9301      	str	r3, [sp, #4]
 80152fe:	b1e2      	cbz	r2, 801533a <rcutils_snprintf+0x4a>
 8015300:	fab0 f480 	clz	r4, r0
 8015304:	fab1 f581 	clz	r5, r1
 8015308:	ea50 0c01 	orrs.w	ip, r0, r1
 801530c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015310:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8015314:	d008      	beq.n	8015328 <rcutils_snprintf+0x38>
 8015316:	b984      	cbnz	r4, 801533a <rcutils_snprintf+0x4a>
 8015318:	b97d      	cbnz	r5, 801533a <rcutils_snprintf+0x4a>
 801531a:	f00b fc69 	bl	8020bf0 <vsniprintf>
 801531e:	b003      	add	sp, #12
 8015320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015324:	b002      	add	sp, #8
 8015326:	4770      	bx	lr
 8015328:	4661      	mov	r1, ip
 801532a:	4660      	mov	r0, ip
 801532c:	f00b fc60 	bl	8020bf0 <vsniprintf>
 8015330:	b003      	add	sp, #12
 8015332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015336:	b002      	add	sp, #8
 8015338:	4770      	bx	lr
 801533a:	f00b fdbf 	bl	8020ebc <__errno>
 801533e:	2216      	movs	r2, #22
 8015340:	4603      	mov	r3, r0
 8015342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015346:	601a      	str	r2, [r3, #0]
 8015348:	e7e9      	b.n	801531e <rcutils_snprintf+0x2e>
 801534a:	bf00      	nop

0801534c <rcutils_vsnprintf>:
 801534c:	b570      	push	{r4, r5, r6, lr}
 801534e:	b1b2      	cbz	r2, 801537e <rcutils_vsnprintf+0x32>
 8015350:	fab0 f480 	clz	r4, r0
 8015354:	fab1 f581 	clz	r5, r1
 8015358:	ea50 0c01 	orrs.w	ip, r0, r1
 801535c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015360:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8015364:	d005      	beq.n	8015372 <rcutils_vsnprintf+0x26>
 8015366:	b954      	cbnz	r4, 801537e <rcutils_vsnprintf+0x32>
 8015368:	b94d      	cbnz	r5, 801537e <rcutils_vsnprintf+0x32>
 801536a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801536e:	f00b bc3f 	b.w	8020bf0 <vsniprintf>
 8015372:	4661      	mov	r1, ip
 8015374:	4660      	mov	r0, ip
 8015376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801537a:	f00b bc39 	b.w	8020bf0 <vsniprintf>
 801537e:	f00b fd9d 	bl	8020ebc <__errno>
 8015382:	2316      	movs	r3, #22
 8015384:	6003      	str	r3, [r0, #0]
 8015386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801538a:	bd70      	pop	{r4, r5, r6, pc}

0801538c <rcutils_strdup>:
 801538c:	b084      	sub	sp, #16
 801538e:	b570      	push	{r4, r5, r6, lr}
 8015390:	b082      	sub	sp, #8
 8015392:	4605      	mov	r5, r0
 8015394:	ac07      	add	r4, sp, #28
 8015396:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801539a:	b1b0      	cbz	r0, 80153ca <rcutils_strdup+0x3e>
 801539c:	f7ea ffb0 	bl	8000300 <strlen>
 80153a0:	1c42      	adds	r2, r0, #1
 80153a2:	9b07      	ldr	r3, [sp, #28]
 80153a4:	4606      	mov	r6, r0
 80153a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153a8:	4610      	mov	r0, r2
 80153aa:	9201      	str	r2, [sp, #4]
 80153ac:	4798      	blx	r3
 80153ae:	4604      	mov	r4, r0
 80153b0:	b128      	cbz	r0, 80153be <rcutils_strdup+0x32>
 80153b2:	9a01      	ldr	r2, [sp, #4]
 80153b4:	4629      	mov	r1, r5
 80153b6:	f00b fdb6 	bl	8020f26 <memcpy>
 80153ba:	2300      	movs	r3, #0
 80153bc:	55a3      	strb	r3, [r4, r6]
 80153be:	4620      	mov	r0, r4
 80153c0:	b002      	add	sp, #8
 80153c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153c6:	b004      	add	sp, #16
 80153c8:	4770      	bx	lr
 80153ca:	4604      	mov	r4, r0
 80153cc:	e7f7      	b.n	80153be <rcutils_strdup+0x32>
 80153ce:	bf00      	nop

080153d0 <rcutils_strndup>:
 80153d0:	b082      	sub	sp, #8
 80153d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153d4:	ac06      	add	r4, sp, #24
 80153d6:	4605      	mov	r5, r0
 80153d8:	e884 000c 	stmia.w	r4, {r2, r3}
 80153dc:	b188      	cbz	r0, 8015402 <rcutils_strndup+0x32>
 80153de:	1c4f      	adds	r7, r1, #1
 80153e0:	460e      	mov	r6, r1
 80153e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80153e4:	4638      	mov	r0, r7
 80153e6:	4790      	blx	r2
 80153e8:	4604      	mov	r4, r0
 80153ea:	b128      	cbz	r0, 80153f8 <rcutils_strndup+0x28>
 80153ec:	463a      	mov	r2, r7
 80153ee:	4629      	mov	r1, r5
 80153f0:	f00b fd99 	bl	8020f26 <memcpy>
 80153f4:	2300      	movs	r3, #0
 80153f6:	55a3      	strb	r3, [r4, r6]
 80153f8:	4620      	mov	r0, r4
 80153fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80153fe:	b002      	add	sp, #8
 8015400:	4770      	bx	lr
 8015402:	4604      	mov	r4, r0
 8015404:	e7f8      	b.n	80153f8 <rcutils_strndup+0x28>
 8015406:	bf00      	nop

08015408 <rcutils_system_time_now>:
 8015408:	b300      	cbz	r0, 801544c <rcutils_system_time_now+0x44>
 801540a:	b570      	push	{r4, r5, r6, lr}
 801540c:	b084      	sub	sp, #16
 801540e:	4604      	mov	r4, r0
 8015410:	2001      	movs	r0, #1
 8015412:	4669      	mov	r1, sp
 8015414:	f7ee f9f8 	bl	8003808 <clock_gettime>
 8015418:	e9dd 3100 	ldrd	r3, r1, [sp]
 801541c:	2900      	cmp	r1, #0
 801541e:	db12      	blt.n	8015446 <rcutils_system_time_now+0x3e>
 8015420:	ea53 0201 	orrs.w	r2, r3, r1
 8015424:	9d02      	ldr	r5, [sp, #8]
 8015426:	d101      	bne.n	801542c <rcutils_system_time_now+0x24>
 8015428:	2d00      	cmp	r5, #0
 801542a:	db0c      	blt.n	8015446 <rcutils_system_time_now+0x3e>
 801542c:	4e08      	ldr	r6, [pc, #32]	; (8015450 <rcutils_system_time_now+0x48>)
 801542e:	2000      	movs	r0, #0
 8015430:	fba3 3206 	umull	r3, r2, r3, r6
 8015434:	195b      	adds	r3, r3, r5
 8015436:	fb06 2201 	mla	r2, r6, r1, r2
 801543a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801543e:	e9c4 3200 	strd	r3, r2, [r4]
 8015442:	b004      	add	sp, #16
 8015444:	bd70      	pop	{r4, r5, r6, pc}
 8015446:	2002      	movs	r0, #2
 8015448:	b004      	add	sp, #16
 801544a:	bd70      	pop	{r4, r5, r6, pc}
 801544c:	200b      	movs	r0, #11
 801544e:	4770      	bx	lr
 8015450:	3b9aca00 	.word	0x3b9aca00

08015454 <rcutils_steady_time_now>:
 8015454:	b300      	cbz	r0, 8015498 <rcutils_steady_time_now+0x44>
 8015456:	b570      	push	{r4, r5, r6, lr}
 8015458:	b084      	sub	sp, #16
 801545a:	4604      	mov	r4, r0
 801545c:	2000      	movs	r0, #0
 801545e:	4669      	mov	r1, sp
 8015460:	f7ee f9d2 	bl	8003808 <clock_gettime>
 8015464:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015468:	2900      	cmp	r1, #0
 801546a:	db12      	blt.n	8015492 <rcutils_steady_time_now+0x3e>
 801546c:	ea53 0201 	orrs.w	r2, r3, r1
 8015470:	9d02      	ldr	r5, [sp, #8]
 8015472:	d101      	bne.n	8015478 <rcutils_steady_time_now+0x24>
 8015474:	2d00      	cmp	r5, #0
 8015476:	db0c      	blt.n	8015492 <rcutils_steady_time_now+0x3e>
 8015478:	4e08      	ldr	r6, [pc, #32]	; (801549c <rcutils_steady_time_now+0x48>)
 801547a:	2000      	movs	r0, #0
 801547c:	fba3 3206 	umull	r3, r2, r3, r6
 8015480:	195b      	adds	r3, r3, r5
 8015482:	fb06 2201 	mla	r2, r6, r1, r2
 8015486:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801548a:	e9c4 3200 	strd	r3, r2, [r4]
 801548e:	b004      	add	sp, #16
 8015490:	bd70      	pop	{r4, r5, r6, pc}
 8015492:	2002      	movs	r0, #2
 8015494:	b004      	add	sp, #16
 8015496:	bd70      	pop	{r4, r5, r6, pc}
 8015498:	200b      	movs	r0, #11
 801549a:	4770      	bx	lr
 801549c:	3b9aca00 	.word	0x3b9aca00

080154a0 <rmw_get_zero_initialized_init_options>:
 80154a0:	b510      	push	{r4, lr}
 80154a2:	4604      	mov	r4, r0
 80154a4:	2238      	movs	r2, #56	; 0x38
 80154a6:	2100      	movs	r1, #0
 80154a8:	f00b fc70 	bl	8020d8c <memset>
 80154ac:	f104 0010 	add.w	r0, r4, #16
 80154b0:	f000 f80a 	bl	80154c8 <rmw_get_default_security_options>
 80154b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80154b8:	4620      	mov	r0, r4
 80154ba:	60e3      	str	r3, [r4, #12]
 80154bc:	bd10      	pop	{r4, pc}
 80154be:	bf00      	nop

080154c0 <rmw_get_default_publisher_options>:
 80154c0:	2200      	movs	r2, #0
 80154c2:	6002      	str	r2, [r0, #0]
 80154c4:	7102      	strb	r2, [r0, #4]
 80154c6:	4770      	bx	lr

080154c8 <rmw_get_default_security_options>:
 80154c8:	2200      	movs	r2, #0
 80154ca:	7002      	strb	r2, [r0, #0]
 80154cc:	6042      	str	r2, [r0, #4]
 80154ce:	4770      	bx	lr

080154d0 <rmw_subscription_content_filter_options_fini>:
 80154d0:	b1b0      	cbz	r0, 8015500 <rmw_subscription_content_filter_options_fini+0x30>
 80154d2:	b538      	push	{r3, r4, r5, lr}
 80154d4:	4604      	mov	r4, r0
 80154d6:	4608      	mov	r0, r1
 80154d8:	460d      	mov	r5, r1
 80154da:	f7ff fdc3 	bl	8015064 <rcutils_allocator_is_valid>
 80154de:	b168      	cbz	r0, 80154fc <rmw_subscription_content_filter_options_fini+0x2c>
 80154e0:	6820      	ldr	r0, [r4, #0]
 80154e2:	b120      	cbz	r0, 80154ee <rmw_subscription_content_filter_options_fini+0x1e>
 80154e4:	686b      	ldr	r3, [r5, #4]
 80154e6:	6929      	ldr	r1, [r5, #16]
 80154e8:	4798      	blx	r3
 80154ea:	2300      	movs	r3, #0
 80154ec:	6023      	str	r3, [r4, #0]
 80154ee:	1d20      	adds	r0, r4, #4
 80154f0:	f008 fa06 	bl	801d900 <rcutils_string_array_fini>
 80154f4:	3800      	subs	r0, #0
 80154f6:	bf18      	it	ne
 80154f8:	2001      	movne	r0, #1
 80154fa:	bd38      	pop	{r3, r4, r5, pc}
 80154fc:	200b      	movs	r0, #11
 80154fe:	bd38      	pop	{r3, r4, r5, pc}
 8015500:	200b      	movs	r0, #11
 8015502:	4770      	bx	lr

08015504 <rmw_get_default_subscription_options>:
 8015504:	2200      	movs	r2, #0
 8015506:	e9c0 2200 	strd	r2, r2, [r0]
 801550a:	6082      	str	r2, [r0, #8]
 801550c:	4770      	bx	lr
 801550e:	bf00      	nop

08015510 <rmw_get_zero_initialized_message_info>:
 8015510:	b510      	push	{r4, lr}
 8015512:	4604      	mov	r4, r0
 8015514:	2240      	movs	r2, #64	; 0x40
 8015516:	2100      	movs	r1, #0
 8015518:	f00b fc38 	bl	8020d8c <memset>
 801551c:	4620      	mov	r0, r4
 801551e:	bd10      	pop	{r4, pc}

08015520 <rmw_validate_namespace_with_size>:
 8015520:	2800      	cmp	r0, #0
 8015522:	d043      	beq.n	80155ac <rmw_validate_namespace_with_size+0x8c>
 8015524:	b570      	push	{r4, r5, r6, lr}
 8015526:	4614      	mov	r4, r2
 8015528:	b0c2      	sub	sp, #264	; 0x108
 801552a:	b32a      	cbz	r2, 8015578 <rmw_validate_namespace_with_size+0x58>
 801552c:	2901      	cmp	r1, #1
 801552e:	460d      	mov	r5, r1
 8015530:	461e      	mov	r6, r3
 8015532:	d102      	bne.n	801553a <rmw_validate_namespace_with_size+0x1a>
 8015534:	7803      	ldrb	r3, [r0, #0]
 8015536:	2b2f      	cmp	r3, #47	; 0x2f
 8015538:	d012      	beq.n	8015560 <rmw_validate_namespace_with_size+0x40>
 801553a:	aa01      	add	r2, sp, #4
 801553c:	4669      	mov	r1, sp
 801553e:	f008 fbd3 	bl	801dce8 <rmw_validate_full_topic_name>
 8015542:	b980      	cbnz	r0, 8015566 <rmw_validate_namespace_with_size+0x46>
 8015544:	9a00      	ldr	r2, [sp, #0]
 8015546:	b14a      	cbz	r2, 801555c <rmw_validate_namespace_with_size+0x3c>
 8015548:	2a07      	cmp	r2, #7
 801554a:	d007      	beq.n	801555c <rmw_validate_namespace_with_size+0x3c>
 801554c:	1e53      	subs	r3, r2, #1
 801554e:	2b05      	cmp	r3, #5
 8015550:	d82e      	bhi.n	80155b0 <rmw_validate_namespace_with_size+0x90>
 8015552:	e8df f003 	tbb	[pc, r3]
 8015556:	1f1c      	.short	0x1f1c
 8015558:	14282522 	.word	0x14282522
 801555c:	2df5      	cmp	r5, #245	; 0xf5
 801555e:	d804      	bhi.n	801556a <rmw_validate_namespace_with_size+0x4a>
 8015560:	2300      	movs	r3, #0
 8015562:	4618      	mov	r0, r3
 8015564:	6023      	str	r3, [r4, #0]
 8015566:	b042      	add	sp, #264	; 0x108
 8015568:	bd70      	pop	{r4, r5, r6, pc}
 801556a:	2307      	movs	r3, #7
 801556c:	6023      	str	r3, [r4, #0]
 801556e:	2e00      	cmp	r6, #0
 8015570:	d0f9      	beq.n	8015566 <rmw_validate_namespace_with_size+0x46>
 8015572:	23f4      	movs	r3, #244	; 0xf4
 8015574:	6033      	str	r3, [r6, #0]
 8015576:	e7f6      	b.n	8015566 <rmw_validate_namespace_with_size+0x46>
 8015578:	200b      	movs	r0, #11
 801557a:	b042      	add	sp, #264	; 0x108
 801557c:	bd70      	pop	{r4, r5, r6, pc}
 801557e:	2306      	movs	r3, #6
 8015580:	6023      	str	r3, [r4, #0]
 8015582:	2e00      	cmp	r6, #0
 8015584:	d0ef      	beq.n	8015566 <rmw_validate_namespace_with_size+0x46>
 8015586:	9b01      	ldr	r3, [sp, #4]
 8015588:	6033      	str	r3, [r6, #0]
 801558a:	b042      	add	sp, #264	; 0x108
 801558c:	bd70      	pop	{r4, r5, r6, pc}
 801558e:	2301      	movs	r3, #1
 8015590:	6023      	str	r3, [r4, #0]
 8015592:	e7f6      	b.n	8015582 <rmw_validate_namespace_with_size+0x62>
 8015594:	2302      	movs	r3, #2
 8015596:	6023      	str	r3, [r4, #0]
 8015598:	e7f3      	b.n	8015582 <rmw_validate_namespace_with_size+0x62>
 801559a:	2303      	movs	r3, #3
 801559c:	6023      	str	r3, [r4, #0]
 801559e:	e7f0      	b.n	8015582 <rmw_validate_namespace_with_size+0x62>
 80155a0:	2304      	movs	r3, #4
 80155a2:	6023      	str	r3, [r4, #0]
 80155a4:	e7ed      	b.n	8015582 <rmw_validate_namespace_with_size+0x62>
 80155a6:	2305      	movs	r3, #5
 80155a8:	6023      	str	r3, [r4, #0]
 80155aa:	e7ea      	b.n	8015582 <rmw_validate_namespace_with_size+0x62>
 80155ac:	200b      	movs	r0, #11
 80155ae:	4770      	bx	lr
 80155b0:	4613      	mov	r3, r2
 80155b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80155b6:	4a03      	ldr	r2, [pc, #12]	; (80155c4 <rmw_validate_namespace_with_size+0xa4>)
 80155b8:	a802      	add	r0, sp, #8
 80155ba:	f7ff fe99 	bl	80152f0 <rcutils_snprintf>
 80155be:	2001      	movs	r0, #1
 80155c0:	e7d1      	b.n	8015566 <rmw_validate_namespace_with_size+0x46>
 80155c2:	bf00      	nop
 80155c4:	08025124 	.word	0x08025124

080155c8 <rmw_validate_namespace>:
 80155c8:	b168      	cbz	r0, 80155e6 <rmw_validate_namespace+0x1e>
 80155ca:	b570      	push	{r4, r5, r6, lr}
 80155cc:	460d      	mov	r5, r1
 80155ce:	4616      	mov	r6, r2
 80155d0:	4604      	mov	r4, r0
 80155d2:	f7ea fe95 	bl	8000300 <strlen>
 80155d6:	4633      	mov	r3, r6
 80155d8:	4601      	mov	r1, r0
 80155da:	462a      	mov	r2, r5
 80155dc:	4620      	mov	r0, r4
 80155de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155e2:	f7ff bf9d 	b.w	8015520 <rmw_validate_namespace_with_size>
 80155e6:	200b      	movs	r0, #11
 80155e8:	4770      	bx	lr
 80155ea:	bf00      	nop

080155ec <rmw_namespace_validation_result_string>:
 80155ec:	2807      	cmp	r0, #7
 80155ee:	d803      	bhi.n	80155f8 <rmw_namespace_validation_result_string+0xc>
 80155f0:	4b02      	ldr	r3, [pc, #8]	; (80155fc <rmw_namespace_validation_result_string+0x10>)
 80155f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80155f6:	4770      	bx	lr
 80155f8:	4801      	ldr	r0, [pc, #4]	; (8015600 <rmw_namespace_validation_result_string+0x14>)
 80155fa:	4770      	bx	lr
 80155fc:	0802531c 	.word	0x0802531c
 8015600:	08025174 	.word	0x08025174

08015604 <rmw_validate_node_name>:
 8015604:	2800      	cmp	r0, #0
 8015606:	d042      	beq.n	801568e <rmw_validate_node_name+0x8a>
 8015608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801560c:	460d      	mov	r5, r1
 801560e:	2900      	cmp	r1, #0
 8015610:	d03f      	beq.n	8015692 <rmw_validate_node_name+0x8e>
 8015612:	4604      	mov	r4, r0
 8015614:	4616      	mov	r6, r2
 8015616:	f7ea fe73 	bl	8000300 <strlen>
 801561a:	b310      	cbz	r0, 8015662 <rmw_validate_node_name+0x5e>
 801561c:	1e63      	subs	r3, r4, #1
 801561e:	f1c4 0101 	rsb	r1, r4, #1
 8015622:	eb03 0800 	add.w	r8, r3, r0
 8015626:	18cf      	adds	r7, r1, r3
 8015628:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801562c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8015630:	f02e 0c20 	bic.w	ip, lr, #32
 8015634:	2a09      	cmp	r2, #9
 8015636:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801563a:	d905      	bls.n	8015648 <rmw_validate_node_name+0x44>
 801563c:	f1bc 0f19 	cmp.w	ip, #25
 8015640:	d902      	bls.n	8015648 <rmw_validate_node_name+0x44>
 8015642:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8015646:	d114      	bne.n	8015672 <rmw_validate_node_name+0x6e>
 8015648:	4598      	cmp	r8, r3
 801564a:	d1ec      	bne.n	8015626 <rmw_validate_node_name+0x22>
 801564c:	7822      	ldrb	r2, [r4, #0]
 801564e:	4b16      	ldr	r3, [pc, #88]	; (80156a8 <rmw_validate_node_name+0xa4>)
 8015650:	5cd3      	ldrb	r3, [r2, r3]
 8015652:	f013 0304 	ands.w	r3, r3, #4
 8015656:	d113      	bne.n	8015680 <rmw_validate_node_name+0x7c>
 8015658:	28ff      	cmp	r0, #255	; 0xff
 801565a:	d81c      	bhi.n	8015696 <rmw_validate_node_name+0x92>
 801565c:	4618      	mov	r0, r3
 801565e:	602b      	str	r3, [r5, #0]
 8015660:	e00c      	b.n	801567c <rmw_validate_node_name+0x78>
 8015662:	2301      	movs	r3, #1
 8015664:	602b      	str	r3, [r5, #0]
 8015666:	b17e      	cbz	r6, 8015688 <rmw_validate_node_name+0x84>
 8015668:	2300      	movs	r3, #0
 801566a:	4618      	mov	r0, r3
 801566c:	6033      	str	r3, [r6, #0]
 801566e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015672:	2302      	movs	r3, #2
 8015674:	602b      	str	r3, [r5, #0]
 8015676:	b13e      	cbz	r6, 8015688 <rmw_validate_node_name+0x84>
 8015678:	2000      	movs	r0, #0
 801567a:	6037      	str	r7, [r6, #0]
 801567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015680:	2303      	movs	r3, #3
 8015682:	602b      	str	r3, [r5, #0]
 8015684:	2e00      	cmp	r6, #0
 8015686:	d1ef      	bne.n	8015668 <rmw_validate_node_name+0x64>
 8015688:	2000      	movs	r0, #0
 801568a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801568e:	200b      	movs	r0, #11
 8015690:	4770      	bx	lr
 8015692:	200b      	movs	r0, #11
 8015694:	e7f2      	b.n	801567c <rmw_validate_node_name+0x78>
 8015696:	2204      	movs	r2, #4
 8015698:	602a      	str	r2, [r5, #0]
 801569a:	2e00      	cmp	r6, #0
 801569c:	d0f4      	beq.n	8015688 <rmw_validate_node_name+0x84>
 801569e:	22fe      	movs	r2, #254	; 0xfe
 80156a0:	4618      	mov	r0, r3
 80156a2:	6032      	str	r2, [r6, #0]
 80156a4:	e7ea      	b.n	801567c <rmw_validate_node_name+0x78>
 80156a6:	bf00      	nop
 80156a8:	08025b54 	.word	0x08025b54

080156ac <rmw_node_name_validation_result_string>:
 80156ac:	2804      	cmp	r0, #4
 80156ae:	d803      	bhi.n	80156b8 <rmw_node_name_validation_result_string+0xc>
 80156b0:	4b02      	ldr	r3, [pc, #8]	; (80156bc <rmw_node_name_validation_result_string+0x10>)
 80156b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80156b6:	4770      	bx	lr
 80156b8:	4801      	ldr	r0, [pc, #4]	; (80156c0 <rmw_node_name_validation_result_string+0x14>)
 80156ba:	4770      	bx	lr
 80156bc:	08025428 	.word	0x08025428
 80156c0:	0802533c 	.word	0x0802533c

080156c4 <rmw_uros_set_custom_transport>:
 80156c4:	b470      	push	{r4, r5, r6}
 80156c6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80156ca:	b162      	cbz	r2, 80156e6 <rmw_uros_set_custom_transport+0x22>
 80156cc:	b15b      	cbz	r3, 80156e6 <rmw_uros_set_custom_transport+0x22>
 80156ce:	b155      	cbz	r5, 80156e6 <rmw_uros_set_custom_transport+0x22>
 80156d0:	b14e      	cbz	r6, 80156e6 <rmw_uros_set_custom_transport+0x22>
 80156d2:	4c06      	ldr	r4, [pc, #24]	; (80156ec <rmw_uros_set_custom_transport+0x28>)
 80156d4:	7020      	strb	r0, [r4, #0]
 80156d6:	2000      	movs	r0, #0
 80156d8:	6166      	str	r6, [r4, #20]
 80156da:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80156de:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80156e2:	bc70      	pop	{r4, r5, r6}
 80156e4:	4770      	bx	lr
 80156e6:	200b      	movs	r0, #11
 80156e8:	bc70      	pop	{r4, r5, r6}
 80156ea:	4770      	bx	lr
 80156ec:	200124a4 	.word	0x200124a4

080156f0 <rmw_init_options_init>:
 80156f0:	b084      	sub	sp, #16
 80156f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156f4:	b083      	sub	sp, #12
 80156f6:	ad09      	add	r5, sp, #36	; 0x24
 80156f8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80156fc:	b130      	cbz	r0, 801570c <rmw_init_options_init+0x1c>
 80156fe:	4604      	mov	r4, r0
 8015700:	4628      	mov	r0, r5
 8015702:	f7ff fcaf 	bl	8015064 <rcutils_allocator_is_valid>
 8015706:	b108      	cbz	r0, 801570c <rmw_init_options_init+0x1c>
 8015708:	68a6      	ldr	r6, [r4, #8]
 801570a:	b12e      	cbz	r6, 8015718 <rmw_init_options_init+0x28>
 801570c:	200b      	movs	r0, #11
 801570e:	b003      	add	sp, #12
 8015710:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015714:	b004      	add	sp, #16
 8015716:	4770      	bx	lr
 8015718:	2200      	movs	r2, #0
 801571a:	2300      	movs	r3, #0
 801571c:	f104 0c20 	add.w	ip, r4, #32
 8015720:	f8df e098 	ldr.w	lr, [pc, #152]	; 80157bc <rmw_init_options_init+0xcc>
 8015724:	466f      	mov	r7, sp
 8015726:	e9c4 2300 	strd	r2, r3, [r4]
 801572a:	4b20      	ldr	r3, [pc, #128]	; (80157ac <rmw_init_options_init+0xbc>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	60a3      	str	r3, [r4, #8]
 8015730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015732:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015736:	682b      	ldr	r3, [r5, #0]
 8015738:	4638      	mov	r0, r7
 801573a:	f8cc 3000 	str.w	r3, [ip]
 801573e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8015742:	60e6      	str	r6, [r4, #12]
 8015744:	f7ff fec0 	bl	80154c8 <rmw_get_default_security_options>
 8015748:	f104 0310 	add.w	r3, r4, #16
 801574c:	2203      	movs	r2, #3
 801574e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015752:	e883 0003 	stmia.w	r3, {r0, r1}
 8015756:	4816      	ldr	r0, [pc, #88]	; (80157b0 <rmw_init_options_init+0xc0>)
 8015758:	4916      	ldr	r1, [pc, #88]	; (80157b4 <rmw_init_options_init+0xc4>)
 801575a:	7626      	strb	r6, [r4, #24]
 801575c:	f001 fa62 	bl	8016c24 <rmw_uxrce_init_init_options_impl_memory>
 8015760:	4813      	ldr	r0, [pc, #76]	; (80157b0 <rmw_init_options_init+0xc0>)
 8015762:	f008 fc25 	bl	801dfb0 <get_memory>
 8015766:	b1f0      	cbz	r0, 80157a6 <rmw_init_options_init+0xb6>
 8015768:	4a13      	ldr	r2, [pc, #76]	; (80157b8 <rmw_init_options_init+0xc8>)
 801576a:	6883      	ldr	r3, [r0, #8]
 801576c:	6851      	ldr	r1, [r2, #4]
 801576e:	6363      	str	r3, [r4, #52]	; 0x34
 8015770:	7810      	ldrb	r0, [r2, #0]
 8015772:	6159      	str	r1, [r3, #20]
 8015774:	68d1      	ldr	r1, [r2, #12]
 8015776:	7418      	strb	r0, [r3, #16]
 8015778:	61d9      	str	r1, [r3, #28]
 801577a:	6911      	ldr	r1, [r2, #16]
 801577c:	6219      	str	r1, [r3, #32]
 801577e:	6951      	ldr	r1, [r2, #20]
 8015780:	6892      	ldr	r2, [r2, #8]
 8015782:	6259      	str	r1, [r3, #36]	; 0x24
 8015784:	619a      	str	r2, [r3, #24]
 8015786:	f004 fb65 	bl	8019e54 <uxr_nanos>
 801578a:	f009 ffd7 	bl	801f73c <srand>
 801578e:	f00a f803 	bl	801f798 <rand>
 8015792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015794:	6298      	str	r0, [r3, #40]	; 0x28
 8015796:	2800      	cmp	r0, #0
 8015798:	d0f9      	beq.n	801578e <rmw_init_options_init+0x9e>
 801579a:	2000      	movs	r0, #0
 801579c:	b003      	add	sp, #12
 801579e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80157a2:	b004      	add	sp, #16
 80157a4:	4770      	bx	lr
 80157a6:	2001      	movs	r0, #1
 80157a8:	e7b1      	b.n	801570e <rmw_init_options_init+0x1e>
 80157aa:	bf00      	nop
 80157ac:	08025aac 	.word	0x08025aac
 80157b0:	20016efc 	.word	0x20016efc
 80157b4:	20012798 	.word	0x20012798
 80157b8:	200124a4 	.word	0x200124a4
 80157bc:	08024e38 	.word	0x08024e38

080157c0 <rmw_init_options_copy>:
 80157c0:	2800      	cmp	r0, #0
 80157c2:	d047      	beq.n	8015854 <rmw_init_options_copy+0x94>
 80157c4:	b570      	push	{r4, r5, r6, lr}
 80157c6:	460d      	mov	r5, r1
 80157c8:	b149      	cbz	r1, 80157de <rmw_init_options_copy+0x1e>
 80157ca:	4604      	mov	r4, r0
 80157cc:	6880      	ldr	r0, [r0, #8]
 80157ce:	b120      	cbz	r0, 80157da <rmw_init_options_copy+0x1a>
 80157d0:	4b22      	ldr	r3, [pc, #136]	; (801585c <rmw_init_options_copy+0x9c>)
 80157d2:	6819      	ldr	r1, [r3, #0]
 80157d4:	f7ea fd34 	bl	8000240 <strcmp>
 80157d8:	bba8      	cbnz	r0, 8015846 <rmw_init_options_copy+0x86>
 80157da:	68ab      	ldr	r3, [r5, #8]
 80157dc:	b11b      	cbz	r3, 80157e6 <rmw_init_options_copy+0x26>
 80157de:	f04f 0c0b 	mov.w	ip, #11
 80157e2:	4660      	mov	r0, ip
 80157e4:	bd70      	pop	{r4, r5, r6, pc}
 80157e6:	4623      	mov	r3, r4
 80157e8:	462a      	mov	r2, r5
 80157ea:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80157ee:	f8d3 e000 	ldr.w	lr, [r3]
 80157f2:	3310      	adds	r3, #16
 80157f4:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80157f8:	3210      	adds	r2, #16
 80157fa:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80157fe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015802:	42b3      	cmp	r3, r6
 8015804:	f842 ec10 	str.w	lr, [r2, #-16]
 8015808:	f842 cc0c 	str.w	ip, [r2, #-12]
 801580c:	f842 0c08 	str.w	r0, [r2, #-8]
 8015810:	f842 1c04 	str.w	r1, [r2, #-4]
 8015814:	d1eb      	bne.n	80157ee <rmw_init_options_copy+0x2e>
 8015816:	6819      	ldr	r1, [r3, #0]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	4811      	ldr	r0, [pc, #68]	; (8015860 <rmw_init_options_copy+0xa0>)
 801581c:	6011      	str	r1, [r2, #0]
 801581e:	6053      	str	r3, [r2, #4]
 8015820:	f008 fbc6 	bl	801dfb0 <get_memory>
 8015824:	b198      	cbz	r0, 801584e <rmw_init_options_copy+0x8e>
 8015826:	6883      	ldr	r3, [r0, #8]
 8015828:	f04f 0c00 	mov.w	ip, #0
 801582c:	636b      	str	r3, [r5, #52]	; 0x34
 801582e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8015830:	f103 0410 	add.w	r4, r3, #16
 8015834:	3510      	adds	r5, #16
 8015836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801583a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801583e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015842:	4660      	mov	r0, ip
 8015844:	bd70      	pop	{r4, r5, r6, pc}
 8015846:	f04f 0c0c 	mov.w	ip, #12
 801584a:	4660      	mov	r0, ip
 801584c:	bd70      	pop	{r4, r5, r6, pc}
 801584e:	f04f 0c01 	mov.w	ip, #1
 8015852:	e7c6      	b.n	80157e2 <rmw_init_options_copy+0x22>
 8015854:	f04f 0c0b 	mov.w	ip, #11
 8015858:	4660      	mov	r0, ip
 801585a:	4770      	bx	lr
 801585c:	08025aac 	.word	0x08025aac
 8015860:	20016efc 	.word	0x20016efc

08015864 <rmw_init_options_fini>:
 8015864:	b510      	push	{r4, lr}
 8015866:	b08e      	sub	sp, #56	; 0x38
 8015868:	b388      	cbz	r0, 80158ce <rmw_init_options_fini+0x6a>
 801586a:	4604      	mov	r4, r0
 801586c:	3020      	adds	r0, #32
 801586e:	f7ff fbf9 	bl	8015064 <rcutils_allocator_is_valid>
 8015872:	b360      	cbz	r0, 80158ce <rmw_init_options_fini+0x6a>
 8015874:	68a0      	ldr	r0, [r4, #8]
 8015876:	b120      	cbz	r0, 8015882 <rmw_init_options_fini+0x1e>
 8015878:	4b1a      	ldr	r3, [pc, #104]	; (80158e4 <rmw_init_options_fini+0x80>)
 801587a:	6819      	ldr	r1, [r3, #0]
 801587c:	f7ea fce0 	bl	8000240 <strcmp>
 8015880:	bb68      	cbnz	r0, 80158de <rmw_init_options_fini+0x7a>
 8015882:	4b19      	ldr	r3, [pc, #100]	; (80158e8 <rmw_init_options_fini+0x84>)
 8015884:	6819      	ldr	r1, [r3, #0]
 8015886:	b331      	cbz	r1, 80158d6 <rmw_init_options_fini+0x72>
 8015888:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801588a:	e001      	b.n	8015890 <rmw_init_options_fini+0x2c>
 801588c:	6849      	ldr	r1, [r1, #4]
 801588e:	b311      	cbz	r1, 80158d6 <rmw_init_options_fini+0x72>
 8015890:	688b      	ldr	r3, [r1, #8]
 8015892:	429a      	cmp	r2, r3
 8015894:	d1fa      	bne.n	801588c <rmw_init_options_fini+0x28>
 8015896:	4814      	ldr	r0, [pc, #80]	; (80158e8 <rmw_init_options_fini+0x84>)
 8015898:	f008 fb9a 	bl	801dfd0 <put_memory>
 801589c:	4668      	mov	r0, sp
 801589e:	f7ff fdff 	bl	80154a0 <rmw_get_zero_initialized_init_options>
 80158a2:	46ee      	mov	lr, sp
 80158a4:	46a4      	mov	ip, r4
 80158a6:	2400      	movs	r4, #0
 80158a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80158c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80158c8:	4620      	mov	r0, r4
 80158ca:	b00e      	add	sp, #56	; 0x38
 80158cc:	bd10      	pop	{r4, pc}
 80158ce:	240b      	movs	r4, #11
 80158d0:	4620      	mov	r0, r4
 80158d2:	b00e      	add	sp, #56	; 0x38
 80158d4:	bd10      	pop	{r4, pc}
 80158d6:	2401      	movs	r4, #1
 80158d8:	4620      	mov	r0, r4
 80158da:	b00e      	add	sp, #56	; 0x38
 80158dc:	bd10      	pop	{r4, pc}
 80158de:	240c      	movs	r4, #12
 80158e0:	e7f2      	b.n	80158c8 <rmw_init_options_fini+0x64>
 80158e2:	bf00      	nop
 80158e4:	08025aac 	.word	0x08025aac
 80158e8:	20016efc 	.word	0x20016efc

080158ec <rmw_init>:
 80158ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158f0:	b083      	sub	sp, #12
 80158f2:	2800      	cmp	r0, #0
 80158f4:	f000 80d3 	beq.w	8015a9e <rmw_init+0x1b2>
 80158f8:	460e      	mov	r6, r1
 80158fa:	2900      	cmp	r1, #0
 80158fc:	f000 80cf 	beq.w	8015a9e <rmw_init+0x1b2>
 8015900:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015902:	4605      	mov	r5, r0
 8015904:	2b00      	cmp	r3, #0
 8015906:	f000 80ca 	beq.w	8015a9e <rmw_init+0x1b2>
 801590a:	4b78      	ldr	r3, [pc, #480]	; (8015aec <rmw_init+0x200>)
 801590c:	6880      	ldr	r0, [r0, #8]
 801590e:	681f      	ldr	r7, [r3, #0]
 8015910:	b128      	cbz	r0, 801591e <rmw_init+0x32>
 8015912:	4639      	mov	r1, r7
 8015914:	f7ea fc94 	bl	8000240 <strcmp>
 8015918:	2800      	cmp	r0, #0
 801591a:	f040 80ca 	bne.w	8015ab2 <rmw_init+0x1c6>
 801591e:	4c74      	ldr	r4, [pc, #464]	; (8015af0 <rmw_init+0x204>)
 8015920:	f04f 0800 	mov.w	r8, #0
 8015924:	4973      	ldr	r1, [pc, #460]	; (8015af4 <rmw_init+0x208>)
 8015926:	4874      	ldr	r0, [pc, #464]	; (8015af8 <rmw_init+0x20c>)
 8015928:	e9d5 2300 	ldrd	r2, r3, [r5]
 801592c:	60b7      	str	r7, [r6, #8]
 801592e:	e9c6 2300 	strd	r2, r3, [r6]
 8015932:	68eb      	ldr	r3, [r5, #12]
 8015934:	2201      	movs	r2, #1
 8015936:	64b3      	str	r3, [r6, #72]	; 0x48
 8015938:	f001 f914 	bl	8016b64 <rmw_uxrce_init_session_memory>
 801593c:	4620      	mov	r0, r4
 801593e:	2204      	movs	r2, #4
 8015940:	496e      	ldr	r1, [pc, #440]	; (8015afc <rmw_init+0x210>)
 8015942:	f001 f94f 	bl	8016be4 <rmw_uxrce_init_static_input_buffer_memory>
 8015946:	486c      	ldr	r0, [pc, #432]	; (8015af8 <rmw_init+0x20c>)
 8015948:	f884 800d 	strb.w	r8, [r4, #13]
 801594c:	f008 fb30 	bl	801dfb0 <get_memory>
 8015950:	2800      	cmp	r0, #0
 8015952:	f000 80a9 	beq.w	8015aa8 <rmw_init+0x1bc>
 8015956:	6884      	ldr	r4, [r0, #8]
 8015958:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801595a:	f104 0910 	add.w	r9, r4, #16
 801595e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015960:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015964:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015968:	9101      	str	r1, [sp, #4]
 801596a:	4661      	mov	r1, ip
 801596c:	6a00      	ldr	r0, [r0, #32]
 801596e:	9000      	str	r0, [sp, #0]
 8015970:	4648      	mov	r0, r9
 8015972:	f002 fa19 	bl	8017da8 <uxr_set_custom_transport_callbacks>
 8015976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801597a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801597e:	4960      	ldr	r1, [pc, #384]	; (8015b00 <rmw_init+0x214>)
 8015980:	4860      	ldr	r0, [pc, #384]	; (8015b04 <rmw_init+0x218>)
 8015982:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015986:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801598a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801598e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8015992:	2201      	movs	r2, #1
 8015994:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8015998:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801599c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80159a0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80159a4:	64f4      	str	r4, [r6, #76]	; 0x4c
 80159a6:	f001 f8bd 	bl	8016b24 <rmw_uxrce_init_node_memory>
 80159aa:	2205      	movs	r2, #5
 80159ac:	4956      	ldr	r1, [pc, #344]	; (8015b08 <rmw_init+0x21c>)
 80159ae:	4857      	ldr	r0, [pc, #348]	; (8015b0c <rmw_init+0x220>)
 80159b0:	f001 f898 	bl	8016ae4 <rmw_uxrce_init_subscription_memory>
 80159b4:	220a      	movs	r2, #10
 80159b6:	4956      	ldr	r1, [pc, #344]	; (8015b10 <rmw_init+0x224>)
 80159b8:	4856      	ldr	r0, [pc, #344]	; (8015b14 <rmw_init+0x228>)
 80159ba:	f001 f873 	bl	8016aa4 <rmw_uxrce_init_publisher_memory>
 80159be:	2201      	movs	r2, #1
 80159c0:	4955      	ldr	r1, [pc, #340]	; (8015b18 <rmw_init+0x22c>)
 80159c2:	4856      	ldr	r0, [pc, #344]	; (8015b1c <rmw_init+0x230>)
 80159c4:	f001 f82e 	bl	8016a24 <rmw_uxrce_init_service_memory>
 80159c8:	2201      	movs	r2, #1
 80159ca:	4955      	ldr	r1, [pc, #340]	; (8015b20 <rmw_init+0x234>)
 80159cc:	4855      	ldr	r0, [pc, #340]	; (8015b24 <rmw_init+0x238>)
 80159ce:	f001 f849 	bl	8016a64 <rmw_uxrce_init_client_memory>
 80159d2:	220f      	movs	r2, #15
 80159d4:	4954      	ldr	r1, [pc, #336]	; (8015b28 <rmw_init+0x23c>)
 80159d6:	4855      	ldr	r0, [pc, #340]	; (8015b2c <rmw_init+0x240>)
 80159d8:	f001 f8e4 	bl	8016ba4 <rmw_uxrce_init_topic_memory>
 80159dc:	2203      	movs	r2, #3
 80159de:	4954      	ldr	r1, [pc, #336]	; (8015b30 <rmw_init+0x244>)
 80159e0:	4854      	ldr	r0, [pc, #336]	; (8015b34 <rmw_init+0x248>)
 80159e2:	f001 f91f 	bl	8016c24 <rmw_uxrce_init_init_options_impl_memory>
 80159e6:	2204      	movs	r2, #4
 80159e8:	4953      	ldr	r1, [pc, #332]	; (8015b38 <rmw_init+0x24c>)
 80159ea:	4854      	ldr	r0, [pc, #336]	; (8015b3c <rmw_init+0x250>)
 80159ec:	f001 f93a 	bl	8016c64 <rmw_uxrce_init_wait_set_memory>
 80159f0:	4953      	ldr	r1, [pc, #332]	; (8015b40 <rmw_init+0x254>)
 80159f2:	4854      	ldr	r0, [pc, #336]	; (8015b44 <rmw_init+0x258>)
 80159f4:	2204      	movs	r2, #4
 80159f6:	f001 f955 	bl	8016ca4 <rmw_uxrce_init_guard_condition_memory>
 80159fa:	4642      	mov	r2, r8
 80159fc:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80159fe:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015a00:	f000 fff8 	bl	80169f4 <rmw_uxrce_transport_init>
 8015a04:	4607      	mov	r7, r0
 8015a06:	2800      	cmp	r0, #0
 8015a08:	d158      	bne.n	8015abc <rmw_init+0x1d0>
 8015a0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015a0c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8015a10:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a16:	4628      	mov	r0, r5
 8015a18:	f002 fbf6 	bl	8018208 <uxr_init_session>
 8015a1c:	4622      	mov	r2, r4
 8015a1e:	494a      	ldr	r1, [pc, #296]	; (8015b48 <rmw_init+0x25c>)
 8015a20:	4628      	mov	r0, r5
 8015a22:	f002 fc15 	bl	8018250 <uxr_set_topic_callback>
 8015a26:	463a      	mov	r2, r7
 8015a28:	4948      	ldr	r1, [pc, #288]	; (8015b4c <rmw_init+0x260>)
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	f002 fc0c 	bl	8018248 <uxr_set_status_callback>
 8015a30:	463a      	mov	r2, r7
 8015a32:	4947      	ldr	r1, [pc, #284]	; (8015b50 <rmw_init+0x264>)
 8015a34:	4628      	mov	r0, r5
 8015a36:	f002 fc0f 	bl	8018258 <uxr_set_request_callback>
 8015a3a:	463a      	mov	r2, r7
 8015a3c:	4945      	ldr	r1, [pc, #276]	; (8015b54 <rmw_init+0x268>)
 8015a3e:	4628      	mov	r0, r5
 8015a40:	f002 fc0e 	bl	8018260 <uxr_set_reply_callback>
 8015a44:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015a48:	2304      	movs	r3, #4
 8015a4a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8015a4e:	0092      	lsls	r2, r2, #2
 8015a50:	4628      	mov	r0, r5
 8015a52:	f002 fc45 	bl	80182e0 <uxr_create_input_reliable_stream>
 8015a56:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015a5a:	2304      	movs	r3, #4
 8015a5c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015a60:	0092      	lsls	r2, r2, #2
 8015a62:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015a66:	4628      	mov	r0, r5
 8015a68:	f002 fc10 	bl	801828c <uxr_create_output_reliable_stream>
 8015a6c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015a70:	4628      	mov	r0, r5
 8015a72:	f002 fc2f 	bl	80182d4 <uxr_create_input_best_effort_stream>
 8015a76:	f241 3194 	movw	r1, #5012	; 0x1394
 8015a7a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015a7e:	4628      	mov	r0, r5
 8015a80:	4421      	add	r1, r4
 8015a82:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015a86:	f002 fbef 	bl	8018268 <uxr_create_output_best_effort_stream>
 8015a8a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015a8e:	4628      	mov	r0, r5
 8015a90:	f003 f978 	bl	8018d84 <uxr_create_session>
 8015a94:	b1f8      	cbz	r0, 8015ad6 <rmw_init+0x1ea>
 8015a96:	4638      	mov	r0, r7
 8015a98:	b003      	add	sp, #12
 8015a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a9e:	270b      	movs	r7, #11
 8015aa0:	4638      	mov	r0, r7
 8015aa2:	b003      	add	sp, #12
 8015aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015aa8:	2701      	movs	r7, #1
 8015aaa:	4638      	mov	r0, r7
 8015aac:	b003      	add	sp, #12
 8015aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ab2:	270c      	movs	r7, #12
 8015ab4:	4638      	mov	r0, r7
 8015ab6:	b003      	add	sp, #12
 8015ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015abc:	4648      	mov	r0, r9
 8015abe:	f002 f9b1 	bl	8017e24 <uxr_close_custom_transport>
 8015ac2:	4621      	mov	r1, r4
 8015ac4:	480c      	ldr	r0, [pc, #48]	; (8015af8 <rmw_init+0x20c>)
 8015ac6:	f008 fa83 	bl	801dfd0 <put_memory>
 8015aca:	4638      	mov	r0, r7
 8015acc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015ad0:	b003      	add	sp, #12
 8015ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ad6:	4648      	mov	r0, r9
 8015ad8:	f002 f9a4 	bl	8017e24 <uxr_close_custom_transport>
 8015adc:	4621      	mov	r1, r4
 8015ade:	4806      	ldr	r0, [pc, #24]	; (8015af8 <rmw_init+0x20c>)
 8015ae0:	f008 fa76 	bl	801dfd0 <put_memory>
 8015ae4:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015ae6:	2701      	movs	r7, #1
 8015ae8:	e7d5      	b.n	8015a96 <rmw_init+0x1aa>
 8015aea:	bf00      	nop
 8015aec:	08025aac 	.word	0x08025aac
 8015af0:	20016f4c 	.word	0x20016f4c
 8015af4:	200131f8 	.word	0x200131f8
 8015af8:	20016f3c 	.word	0x20016f3c
 8015afc:	200147a0 	.word	0x200147a0
 8015b00:	2001281c 	.word	0x2001281c
 8015b04:	20016f0c 	.word	0x20016f0c
 8015b08:	200168a0 	.word	0x200168a0
 8015b0c:	20016f5c 	.word	0x20016f5c
 8015b10:	200128c0 	.word	0x200128c0
 8015b14:	20016f1c 	.word	0x20016f1c
 8015b18:	20013130 	.word	0x20013130
 8015b1c:	20016f2c 	.word	0x20016f2c
 8015b20:	20012650 	.word	0x20012650
 8015b24:	2001263c 	.word	0x2001263c
 8015b28:	20016cd8 	.word	0x20016cd8
 8015b2c:	20016f6c 	.word	0x20016f6c
 8015b30:	20012798 	.word	0x20012798
 8015b34:	20016efc 	.word	0x20016efc
 8015b38:	20016e7c 	.word	0x20016e7c
 8015b3c:	20016f7c 	.word	0x20016f7c
 8015b40:	20012718 	.word	0x20012718
 8015b44:	20016eec 	.word	0x20016eec
 8015b48:	0801dde9 	.word	0x0801dde9
 8015b4c:	0801dde1 	.word	0x0801dde1
 8015b50:	0801de81 	.word	0x0801de81
 8015b54:	0801df1d 	.word	0x0801df1d

08015b58 <rmw_context_fini>:
 8015b58:	4b17      	ldr	r3, [pc, #92]	; (8015bb8 <rmw_context_fini+0x60>)
 8015b5a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015b5c:	b570      	push	{r4, r5, r6, lr}
 8015b5e:	681c      	ldr	r4, [r3, #0]
 8015b60:	4605      	mov	r5, r0
 8015b62:	b334      	cbz	r4, 8015bb2 <rmw_context_fini+0x5a>
 8015b64:	2600      	movs	r6, #0
 8015b66:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015b6a:	6902      	ldr	r2, [r0, #16]
 8015b6c:	428a      	cmp	r2, r1
 8015b6e:	d018      	beq.n	8015ba2 <rmw_context_fini+0x4a>
 8015b70:	2c00      	cmp	r4, #0
 8015b72:	d1f8      	bne.n	8015b66 <rmw_context_fini+0xe>
 8015b74:	b189      	cbz	r1, 8015b9a <rmw_context_fini+0x42>
 8015b76:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015b7a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8015b7e:	789b      	ldrb	r3, [r3, #2]
 8015b80:	2b01      	cmp	r3, #1
 8015b82:	bf14      	ite	ne
 8015b84:	210a      	movne	r1, #10
 8015b86:	2100      	moveq	r1, #0
 8015b88:	f003 f8d4 	bl	8018d34 <uxr_delete_session_retries>
 8015b8c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015b8e:	f001 f8a9 	bl	8016ce4 <rmw_uxrce_fini_session_memory>
 8015b92:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015b94:	3010      	adds	r0, #16
 8015b96:	f002 f945 	bl	8017e24 <uxr_close_custom_transport>
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	4630      	mov	r0, r6
 8015b9e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015ba0:	bd70      	pop	{r4, r5, r6, pc}
 8015ba2:	3018      	adds	r0, #24
 8015ba4:	f000 f89c 	bl	8015ce0 <rmw_destroy_node>
 8015ba8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015baa:	4606      	mov	r6, r0
 8015bac:	2c00      	cmp	r4, #0
 8015bae:	d1da      	bne.n	8015b66 <rmw_context_fini+0xe>
 8015bb0:	e7e0      	b.n	8015b74 <rmw_context_fini+0x1c>
 8015bb2:	4626      	mov	r6, r4
 8015bb4:	e7de      	b.n	8015b74 <rmw_context_fini+0x1c>
 8015bb6:	bf00      	nop
 8015bb8:	20016f0c 	.word	0x20016f0c

08015bbc <create_node>:
 8015bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bc0:	b083      	sub	sp, #12
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d064      	beq.n	8015c90 <create_node+0xd4>
 8015bc6:	4606      	mov	r6, r0
 8015bc8:	4838      	ldr	r0, [pc, #224]	; (8015cac <create_node+0xf0>)
 8015bca:	460f      	mov	r7, r1
 8015bcc:	4690      	mov	r8, r2
 8015bce:	461d      	mov	r5, r3
 8015bd0:	f008 f9ee 	bl	801dfb0 <get_memory>
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	d05b      	beq.n	8015c90 <create_node+0xd4>
 8015bd8:	6884      	ldr	r4, [r0, #8]
 8015bda:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015bdc:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015be0:	f104 0518 	add.w	r5, r4, #24
 8015be4:	6123      	str	r3, [r4, #16]
 8015be6:	f008 fa4b 	bl	801e080 <rmw_get_implementation_identifier>
 8015bea:	f8c4 9020 	str.w	r9, [r4, #32]
 8015bee:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015bf2:	4630      	mov	r0, r6
 8015bf4:	f7ea fb84 	bl	8000300 <strlen>
 8015bf8:	1c42      	adds	r2, r0, #1
 8015bfa:	2a3c      	cmp	r2, #60	; 0x3c
 8015bfc:	d840      	bhi.n	8015c80 <create_node+0xc4>
 8015bfe:	4648      	mov	r0, r9
 8015c00:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015c04:	4631      	mov	r1, r6
 8015c06:	f00b f98e 	bl	8020f26 <memcpy>
 8015c0a:	4638      	mov	r0, r7
 8015c0c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015c10:	f7ea fb76 	bl	8000300 <strlen>
 8015c14:	1c42      	adds	r2, r0, #1
 8015c16:	2a3c      	cmp	r2, #60	; 0x3c
 8015c18:	d832      	bhi.n	8015c80 <create_node+0xc4>
 8015c1a:	4639      	mov	r1, r7
 8015c1c:	4648      	mov	r0, r9
 8015c1e:	f00b f982 	bl	8020f26 <memcpy>
 8015c22:	6923      	ldr	r3, [r4, #16]
 8015c24:	2101      	movs	r1, #1
 8015c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c2a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015c2e:	1842      	adds	r2, r0, r1
 8015c30:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015c34:	f002 f8fa 	bl	8017e2c <uxr_object_id>
 8015c38:	6160      	str	r0, [r4, #20]
 8015c3a:	783b      	ldrb	r3, [r7, #0]
 8015c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8015c3e:	d12c      	bne.n	8015c9a <create_node+0xde>
 8015c40:	787b      	ldrb	r3, [r7, #1]
 8015c42:	bb53      	cbnz	r3, 8015c9a <create_node+0xde>
 8015c44:	4633      	mov	r3, r6
 8015c46:	4a1a      	ldr	r2, [pc, #104]	; (8015cb0 <create_node+0xf4>)
 8015c48:	213c      	movs	r1, #60	; 0x3c
 8015c4a:	481a      	ldr	r0, [pc, #104]	; (8015cb4 <create_node+0xf8>)
 8015c4c:	f00a ff0e 	bl	8020a6c <sniprintf>
 8015c50:	6920      	ldr	r0, [r4, #16]
 8015c52:	2106      	movs	r1, #6
 8015c54:	fa1f f388 	uxth.w	r3, r8
 8015c58:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015c5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c60:	9101      	str	r1, [sp, #4]
 8015c62:	4914      	ldr	r1, [pc, #80]	; (8015cb4 <create_node+0xf8>)
 8015c64:	9100      	str	r1, [sp, #0]
 8015c66:	6811      	ldr	r1, [r2, #0]
 8015c68:	6962      	ldr	r2, [r4, #20]
 8015c6a:	f001 fe31 	bl	80178d0 <uxr_buffer_create_participant_bin>
 8015c6e:	4602      	mov	r2, r0
 8015c70:	6920      	ldr	r0, [r4, #16]
 8015c72:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015c76:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015c7a:	f001 f9b7 	bl	8016fec <run_xrce_session>
 8015c7e:	b918      	cbnz	r0, 8015c88 <create_node+0xcc>
 8015c80:	4628      	mov	r0, r5
 8015c82:	2500      	movs	r5, #0
 8015c84:	f001 f834 	bl	8016cf0 <rmw_uxrce_fini_node_memory>
 8015c88:	4628      	mov	r0, r5
 8015c8a:	b003      	add	sp, #12
 8015c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c90:	2500      	movs	r5, #0
 8015c92:	4628      	mov	r0, r5
 8015c94:	b003      	add	sp, #12
 8015c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c9a:	463b      	mov	r3, r7
 8015c9c:	4a06      	ldr	r2, [pc, #24]	; (8015cb8 <create_node+0xfc>)
 8015c9e:	213c      	movs	r1, #60	; 0x3c
 8015ca0:	9600      	str	r6, [sp, #0]
 8015ca2:	4804      	ldr	r0, [pc, #16]	; (8015cb4 <create_node+0xf8>)
 8015ca4:	f00a fee2 	bl	8020a6c <sniprintf>
 8015ca8:	e7d2      	b.n	8015c50 <create_node+0x94>
 8015caa:	bf00      	nop
 8015cac:	20016f0c 	.word	0x20016f0c
 8015cb0:	0802544c 	.word	0x0802544c
 8015cb4:	200124c0 	.word	0x200124c0
 8015cb8:	08024e48 	.word	0x08024e48

08015cbc <rmw_create_node>:
 8015cbc:	468c      	mov	ip, r1
 8015cbe:	4611      	mov	r1, r2
 8015cc0:	f1bc 0f00 	cmp.w	ip, #0
 8015cc4:	d00a      	beq.n	8015cdc <rmw_create_node+0x20>
 8015cc6:	f89c 3000 	ldrb.w	r3, [ip]
 8015cca:	b13b      	cbz	r3, 8015cdc <rmw_create_node+0x20>
 8015ccc:	b132      	cbz	r2, 8015cdc <rmw_create_node+0x20>
 8015cce:	7813      	ldrb	r3, [r2, #0]
 8015cd0:	b123      	cbz	r3, 8015cdc <rmw_create_node+0x20>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015cd6:	4660      	mov	r0, ip
 8015cd8:	f7ff bf70 	b.w	8015bbc <create_node>
 8015cdc:	2000      	movs	r0, #0
 8015cde:	4770      	bx	lr

08015ce0 <rmw_destroy_node>:
 8015ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ce2:	b328      	cbz	r0, 8015d30 <rmw_destroy_node+0x50>
 8015ce4:	4607      	mov	r7, r0
 8015ce6:	6800      	ldr	r0, [r0, #0]
 8015ce8:	b120      	cbz	r0, 8015cf4 <rmw_destroy_node+0x14>
 8015cea:	4b37      	ldr	r3, [pc, #220]	; (8015dc8 <rmw_destroy_node+0xe8>)
 8015cec:	6819      	ldr	r1, [r3, #0]
 8015cee:	f7ea faa7 	bl	8000240 <strcmp>
 8015cf2:	b9e8      	cbnz	r0, 8015d30 <rmw_destroy_node+0x50>
 8015cf4:	687d      	ldr	r5, [r7, #4]
 8015cf6:	b1dd      	cbz	r5, 8015d30 <rmw_destroy_node+0x50>
 8015cf8:	4b34      	ldr	r3, [pc, #208]	; (8015dcc <rmw_destroy_node+0xec>)
 8015cfa:	681c      	ldr	r4, [r3, #0]
 8015cfc:	2c00      	cmp	r4, #0
 8015cfe:	d060      	beq.n	8015dc2 <rmw_destroy_node+0xe2>
 8015d00:	2600      	movs	r6, #0
 8015d02:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d06:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015d0a:	429d      	cmp	r5, r3
 8015d0c:	d013      	beq.n	8015d36 <rmw_destroy_node+0x56>
 8015d0e:	2c00      	cmp	r4, #0
 8015d10:	d1f7      	bne.n	8015d02 <rmw_destroy_node+0x22>
 8015d12:	4b2f      	ldr	r3, [pc, #188]	; (8015dd0 <rmw_destroy_node+0xf0>)
 8015d14:	681c      	ldr	r4, [r3, #0]
 8015d16:	b1c4      	cbz	r4, 8015d4a <rmw_destroy_node+0x6a>
 8015d18:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d1c:	6a0b      	ldr	r3, [r1, #32]
 8015d1e:	429d      	cmp	r5, r3
 8015d20:	d1f9      	bne.n	8015d16 <rmw_destroy_node+0x36>
 8015d22:	317c      	adds	r1, #124	; 0x7c
 8015d24:	4638      	mov	r0, r7
 8015d26:	f000 fdaf 	bl	8016888 <rmw_destroy_subscription>
 8015d2a:	2801      	cmp	r0, #1
 8015d2c:	4606      	mov	r6, r0
 8015d2e:	d1f2      	bne.n	8015d16 <rmw_destroy_node+0x36>
 8015d30:	2601      	movs	r6, #1
 8015d32:	4630      	mov	r0, r6
 8015d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d36:	3184      	adds	r1, #132	; 0x84
 8015d38:	4638      	mov	r0, r7
 8015d3a:	f000 f9b1 	bl	80160a0 <rmw_destroy_publisher>
 8015d3e:	2801      	cmp	r0, #1
 8015d40:	4606      	mov	r6, r0
 8015d42:	d0f5      	beq.n	8015d30 <rmw_destroy_node+0x50>
 8015d44:	2c00      	cmp	r4, #0
 8015d46:	d1dc      	bne.n	8015d02 <rmw_destroy_node+0x22>
 8015d48:	e7e3      	b.n	8015d12 <rmw_destroy_node+0x32>
 8015d4a:	4b22      	ldr	r3, [pc, #136]	; (8015dd4 <rmw_destroy_node+0xf4>)
 8015d4c:	681c      	ldr	r4, [r3, #0]
 8015d4e:	b16c      	cbz	r4, 8015d6c <rmw_destroy_node+0x8c>
 8015d50:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d54:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015d56:	429d      	cmp	r5, r3
 8015d58:	d1f9      	bne.n	8015d4e <rmw_destroy_node+0x6e>
 8015d5a:	317c      	adds	r1, #124	; 0x7c
 8015d5c:	4638      	mov	r0, r7
 8015d5e:	f000 fc1d 	bl	801659c <rmw_destroy_service>
 8015d62:	2801      	cmp	r0, #1
 8015d64:	4606      	mov	r6, r0
 8015d66:	d0e3      	beq.n	8015d30 <rmw_destroy_node+0x50>
 8015d68:	2c00      	cmp	r4, #0
 8015d6a:	d1f1      	bne.n	8015d50 <rmw_destroy_node+0x70>
 8015d6c:	4b1a      	ldr	r3, [pc, #104]	; (8015dd8 <rmw_destroy_node+0xf8>)
 8015d6e:	681c      	ldr	r4, [r3, #0]
 8015d70:	b16c      	cbz	r4, 8015d8e <rmw_destroy_node+0xae>
 8015d72:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d76:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015d78:	429d      	cmp	r5, r3
 8015d7a:	d1f9      	bne.n	8015d70 <rmw_destroy_node+0x90>
 8015d7c:	317c      	adds	r1, #124	; 0x7c
 8015d7e:	4638      	mov	r0, r7
 8015d80:	f008 f93a 	bl	801dff8 <rmw_destroy_client>
 8015d84:	2801      	cmp	r0, #1
 8015d86:	4606      	mov	r6, r0
 8015d88:	d0d2      	beq.n	8015d30 <rmw_destroy_node+0x50>
 8015d8a:	2c00      	cmp	r4, #0
 8015d8c:	d1f1      	bne.n	8015d72 <rmw_destroy_node+0x92>
 8015d8e:	6928      	ldr	r0, [r5, #16]
 8015d90:	696a      	ldr	r2, [r5, #20]
 8015d92:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015d96:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015d9a:	6819      	ldr	r1, [r3, #0]
 8015d9c:	f001 fd4c 	bl	8017838 <uxr_buffer_delete_entity>
 8015da0:	4602      	mov	r2, r0
 8015da2:	6928      	ldr	r0, [r5, #16]
 8015da4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015da8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015dac:	f001 f91e 	bl	8016fec <run_xrce_session>
 8015db0:	4603      	mov	r3, r0
 8015db2:	4638      	mov	r0, r7
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	bf08      	it	eq
 8015db8:	2602      	moveq	r6, #2
 8015dba:	f000 ff99 	bl	8016cf0 <rmw_uxrce_fini_node_memory>
 8015dbe:	4630      	mov	r0, r6
 8015dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dc2:	4626      	mov	r6, r4
 8015dc4:	e7a5      	b.n	8015d12 <rmw_destroy_node+0x32>
 8015dc6:	bf00      	nop
 8015dc8:	08025aac 	.word	0x08025aac
 8015dcc:	20016f1c 	.word	0x20016f1c
 8015dd0:	20016f5c 	.word	0x20016f5c
 8015dd4:	20016f2c 	.word	0x20016f2c
 8015dd8:	2001263c 	.word	0x2001263c

08015ddc <rmw_node_get_graph_guard_condition>:
 8015ddc:	6843      	ldr	r3, [r0, #4]
 8015dde:	6918      	ldr	r0, [r3, #16]
 8015de0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015de4:	4770      	bx	lr
 8015de6:	bf00      	nop

08015de8 <flush_session>:
 8015de8:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8015dea:	f002 be59 	b.w	8018aa0 <uxr_run_session_until_confirm_delivery>
 8015dee:	bf00      	nop

08015df0 <rmw_publish>:
 8015df0:	2800      	cmp	r0, #0
 8015df2:	d053      	beq.n	8015e9c <rmw_publish+0xac>
 8015df4:	b570      	push	{r4, r5, r6, lr}
 8015df6:	460d      	mov	r5, r1
 8015df8:	b08e      	sub	sp, #56	; 0x38
 8015dfa:	2900      	cmp	r1, #0
 8015dfc:	d04b      	beq.n	8015e96 <rmw_publish+0xa6>
 8015dfe:	4604      	mov	r4, r0
 8015e00:	6800      	ldr	r0, [r0, #0]
 8015e02:	f001 fa05 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d045      	beq.n	8015e96 <rmw_publish+0xa6>
 8015e0a:	6866      	ldr	r6, [r4, #4]
 8015e0c:	2e00      	cmp	r6, #0
 8015e0e:	d042      	beq.n	8015e96 <rmw_publish+0xa6>
 8015e10:	69b4      	ldr	r4, [r6, #24]
 8015e12:	4628      	mov	r0, r5
 8015e14:	6923      	ldr	r3, [r4, #16]
 8015e16:	4798      	blx	r3
 8015e18:	69f3      	ldr	r3, [r6, #28]
 8015e1a:	9005      	str	r0, [sp, #20]
 8015e1c:	b113      	cbz	r3, 8015e24 <rmw_publish+0x34>
 8015e1e:	a805      	add	r0, sp, #20
 8015e20:	4798      	blx	r3
 8015e22:	9805      	ldr	r0, [sp, #20]
 8015e24:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015e28:	691b      	ldr	r3, [r3, #16]
 8015e2a:	9000      	str	r0, [sp, #0]
 8015e2c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015e30:	6972      	ldr	r2, [r6, #20]
 8015e32:	ab06      	add	r3, sp, #24
 8015e34:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015e36:	f004 f8ad 	bl	8019f94 <uxr_prepare_output_stream>
 8015e3a:	b1d8      	cbz	r0, 8015e74 <rmw_publish+0x84>
 8015e3c:	68a3      	ldr	r3, [r4, #8]
 8015e3e:	a906      	add	r1, sp, #24
 8015e40:	4628      	mov	r0, r5
 8015e42:	4798      	blx	r3
 8015e44:	6a33      	ldr	r3, [r6, #32]
 8015e46:	4604      	mov	r4, r0
 8015e48:	b10b      	cbz	r3, 8015e4e <rmw_publish+0x5e>
 8015e4a:	a806      	add	r0, sp, #24
 8015e4c:	4798      	blx	r3
 8015e4e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8015e52:	2b01      	cmp	r3, #1
 8015e54:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015e58:	d022      	beq.n	8015ea0 <rmw_publish+0xb0>
 8015e5a:	6918      	ldr	r0, [r3, #16]
 8015e5c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8015e5e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e62:	f002 fe1d 	bl	8018aa0 <uxr_run_session_until_confirm_delivery>
 8015e66:	4020      	ands	r0, r4
 8015e68:	b2c4      	uxtb	r4, r0
 8015e6a:	f084 0001 	eor.w	r0, r4, #1
 8015e6e:	b2c0      	uxtb	r0, r0
 8015e70:	b00e      	add	sp, #56	; 0x38
 8015e72:	bd70      	pop	{r4, r5, r6, pc}
 8015e74:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015e78:	6918      	ldr	r0, [r3, #16]
 8015e7a:	9b05      	ldr	r3, [sp, #20]
 8015e7c:	9602      	str	r6, [sp, #8]
 8015e7e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e82:	9300      	str	r3, [sp, #0]
 8015e84:	4b09      	ldr	r3, [pc, #36]	; (8015eac <rmw_publish+0xbc>)
 8015e86:	9301      	str	r3, [sp, #4]
 8015e88:	ab06      	add	r3, sp, #24
 8015e8a:	6972      	ldr	r2, [r6, #20]
 8015e8c:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015e8e:	f004 f8b1 	bl	8019ff4 <uxr_prepare_output_stream_fragmented>
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d1d2      	bne.n	8015e3c <rmw_publish+0x4c>
 8015e96:	2001      	movs	r0, #1
 8015e98:	b00e      	add	sp, #56	; 0x38
 8015e9a:	bd70      	pop	{r4, r5, r6, pc}
 8015e9c:	2001      	movs	r0, #1
 8015e9e:	4770      	bx	lr
 8015ea0:	6918      	ldr	r0, [r3, #16]
 8015ea2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ea6:	f002 fa41 	bl	801832c <uxr_flash_output_streams>
 8015eaa:	e7de      	b.n	8015e6a <rmw_publish+0x7a>
 8015eac:	08015de9 	.word	0x08015de9

08015eb0 <rmw_create_publisher>:
 8015eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb4:	b087      	sub	sp, #28
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	f000 80d2 	beq.w	8016060 <rmw_create_publisher+0x1b0>
 8015ebc:	460e      	mov	r6, r1
 8015ebe:	2900      	cmp	r1, #0
 8015ec0:	f000 80ce 	beq.w	8016060 <rmw_create_publisher+0x1b0>
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	6800      	ldr	r0, [r0, #0]
 8015ec8:	4615      	mov	r5, r2
 8015eca:	461f      	mov	r7, r3
 8015ecc:	f001 f9a0 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 8015ed0:	f080 0001 	eor.w	r0, r0, #1
 8015ed4:	b2c0      	uxtb	r0, r0
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	f040 80c2 	bne.w	8016060 <rmw_create_publisher+0x1b0>
 8015edc:	2d00      	cmp	r5, #0
 8015ede:	f000 80bf 	beq.w	8016060 <rmw_create_publisher+0x1b0>
 8015ee2:	782b      	ldrb	r3, [r5, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f000 80bb 	beq.w	8016060 <rmw_create_publisher+0x1b0>
 8015eea:	2f00      	cmp	r7, #0
 8015eec:	f000 80b8 	beq.w	8016060 <rmw_create_publisher+0x1b0>
 8015ef0:	485e      	ldr	r0, [pc, #376]	; (801606c <rmw_create_publisher+0x1bc>)
 8015ef2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015ef6:	f008 f85b 	bl	801dfb0 <get_memory>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	f000 80b0 	beq.w	8016060 <rmw_create_publisher+0x1b0>
 8015f00:	6884      	ldr	r4, [r0, #8]
 8015f02:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8015f06:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8015f0a:	f008 f8b9 	bl	801e080 <rmw_get_implementation_identifier>
 8015f0e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8015f12:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8015f16:	4628      	mov	r0, r5
 8015f18:	f7ea f9f2 	bl	8000300 <strlen>
 8015f1c:	3001      	adds	r0, #1
 8015f1e:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8015f22:	283c      	cmp	r0, #60	; 0x3c
 8015f24:	f200 808f 	bhi.w	8016046 <rmw_create_publisher+0x196>
 8015f28:	462b      	mov	r3, r5
 8015f2a:	4a51      	ldr	r2, [pc, #324]	; (8016070 <rmw_create_publisher+0x1c0>)
 8015f2c:	213c      	movs	r1, #60	; 0x3c
 8015f2e:	4650      	mov	r0, sl
 8015f30:	f00a fd9c 	bl	8020a6c <sniprintf>
 8015f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015f38:	4639      	mov	r1, r7
 8015f3a:	2250      	movs	r2, #80	; 0x50
 8015f3c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8015f3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015f42:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8015f46:	f00a ffee 	bl	8020f26 <memcpy>
 8015f4a:	7a3b      	ldrb	r3, [r7, #8]
 8015f4c:	4630      	mov	r0, r6
 8015f4e:	4949      	ldr	r1, [pc, #292]	; (8016074 <rmw_create_publisher+0x1c4>)
 8015f50:	2b02      	cmp	r3, #2
 8015f52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f56:	bf0c      	ite	eq
 8015f58:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8015f5c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8015f60:	67a3      	str	r3, [r4, #120]	; 0x78
 8015f62:	2300      	movs	r3, #0
 8015f64:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015f68:	f001 f960 	bl	801722c <get_message_typesupport_handle>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	d06a      	beq.n	8016046 <rmw_create_publisher+0x196>
 8015f70:	6842      	ldr	r2, [r0, #4]
 8015f72:	61a2      	str	r2, [r4, #24]
 8015f74:	2a00      	cmp	r2, #0
 8015f76:	d066      	beq.n	8016046 <rmw_create_publisher+0x196>
 8015f78:	4629      	mov	r1, r5
 8015f7a:	463b      	mov	r3, r7
 8015f7c:	4648      	mov	r0, r9
 8015f7e:	f008 f8af 	bl	801e0e0 <create_topic>
 8015f82:	6260      	str	r0, [r4, #36]	; 0x24
 8015f84:	2800      	cmp	r0, #0
 8015f86:	d062      	beq.n	801604e <rmw_create_publisher+0x19e>
 8015f88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f8c:	2103      	movs	r1, #3
 8015f8e:	2506      	movs	r5, #6
 8015f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f94:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8015f98:	1c42      	adds	r2, r0, #1
 8015f9a:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8015f9e:	f001 ff45 	bl	8017e2c <uxr_object_id>
 8015fa2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015fa6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015faa:	6120      	str	r0, [r4, #16]
 8015fac:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8015fb0:	6910      	ldr	r0, [r2, #16]
 8015fb2:	9500      	str	r5, [sp, #0]
 8015fb4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fb8:	6819      	ldr	r1, [r3, #0]
 8015fba:	6922      	ldr	r2, [r4, #16]
 8015fbc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015fc0:	f001 fcee 	bl	80179a0 <uxr_buffer_create_publisher_bin>
 8015fc4:	4602      	mov	r2, r0
 8015fc6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015fca:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015fce:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015fd2:	f001 f80b 	bl	8016fec <run_xrce_session>
 8015fd6:	b3b0      	cbz	r0, 8016046 <rmw_create_publisher+0x196>
 8015fd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fdc:	2105      	movs	r1, #5
 8015fde:	f10d 0a10 	add.w	sl, sp, #16
 8015fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015fe6:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8015fea:	1c42      	adds	r2, r0, #1
 8015fec:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8015ff0:	f001 ff1c 	bl	8017e2c <uxr_object_id>
 8015ff4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015ff8:	4639      	mov	r1, r7
 8015ffa:	6160      	str	r0, [r4, #20]
 8015ffc:	691e      	ldr	r6, [r3, #16]
 8015ffe:	4650      	mov	r0, sl
 8016000:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016004:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8016008:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 801600c:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8016010:	f001 f808 	bl	8017024 <convert_qos_profile>
 8016014:	9503      	str	r5, [sp, #12]
 8016016:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801601a:	9001      	str	r0, [sp, #4]
 801601c:	4630      	mov	r0, r6
 801601e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016022:	f8db 3010 	ldr.w	r3, [fp, #16]
 8016026:	9300      	str	r3, [sp, #0]
 8016028:	6839      	ldr	r1, [r7, #0]
 801602a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801602e:	f001 fd17 	bl	8017a60 <uxr_buffer_create_datawriter_bin>
 8016032:	4602      	mov	r2, r0
 8016034:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016038:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801603c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016040:	f000 ffd4 	bl	8016fec <run_xrce_session>
 8016044:	b970      	cbnz	r0, 8016064 <rmw_create_publisher+0x1b4>
 8016046:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016048:	b108      	cbz	r0, 801604e <rmw_create_publisher+0x19e>
 801604a:	f000 fec1 	bl	8016dd0 <rmw_uxrce_fini_topic_memory>
 801604e:	4640      	mov	r0, r8
 8016050:	f04f 0800 	mov.w	r8, #0
 8016054:	f000 fe64 	bl	8016d20 <rmw_uxrce_fini_publisher_memory>
 8016058:	4640      	mov	r0, r8
 801605a:	b007      	add	sp, #28
 801605c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016060:	f04f 0800 	mov.w	r8, #0
 8016064:	4640      	mov	r0, r8
 8016066:	b007      	add	sp, #28
 8016068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606c:	20016f1c 	.word	0x20016f1c
 8016070:	0802544c 	.word	0x0802544c
 8016074:	080246f4 	.word	0x080246f4

08016078 <rmw_publisher_get_actual_qos>:
 8016078:	b178      	cbz	r0, 801609a <rmw_publisher_get_actual_qos+0x22>
 801607a:	b510      	push	{r4, lr}
 801607c:	fab1 f481 	clz	r4, r1
 8016080:	0964      	lsrs	r4, r4, #5
 8016082:	b141      	cbz	r1, 8016096 <rmw_publisher_get_actual_qos+0x1e>
 8016084:	6843      	ldr	r3, [r0, #4]
 8016086:	2250      	movs	r2, #80	; 0x50
 8016088:	4608      	mov	r0, r1
 801608a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801608e:	f00a ff4a 	bl	8020f26 <memcpy>
 8016092:	4620      	mov	r0, r4
 8016094:	bd10      	pop	{r4, pc}
 8016096:	200b      	movs	r0, #11
 8016098:	bd10      	pop	{r4, pc}
 801609a:	200b      	movs	r0, #11
 801609c:	4770      	bx	lr
 801609e:	bf00      	nop

080160a0 <rmw_destroy_publisher>:
 80160a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160a4:	b128      	cbz	r0, 80160b2 <rmw_destroy_publisher+0x12>
 80160a6:	4604      	mov	r4, r0
 80160a8:	6800      	ldr	r0, [r0, #0]
 80160aa:	460d      	mov	r5, r1
 80160ac:	f001 f8b0 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 80160b0:	b918      	cbnz	r0, 80160ba <rmw_destroy_publisher+0x1a>
 80160b2:	2401      	movs	r4, #1
 80160b4:	4620      	mov	r0, r4
 80160b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ba:	6863      	ldr	r3, [r4, #4]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d0f8      	beq.n	80160b2 <rmw_destroy_publisher+0x12>
 80160c0:	fab5 f485 	clz	r4, r5
 80160c4:	0964      	lsrs	r4, r4, #5
 80160c6:	2d00      	cmp	r5, #0
 80160c8:	d0f3      	beq.n	80160b2 <rmw_destroy_publisher+0x12>
 80160ca:	6828      	ldr	r0, [r5, #0]
 80160cc:	f001 f8a0 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	d0ee      	beq.n	80160b2 <rmw_destroy_publisher+0x12>
 80160d4:	686e      	ldr	r6, [r5, #4]
 80160d6:	2e00      	cmp	r6, #0
 80160d8:	d0eb      	beq.n	80160b2 <rmw_destroy_publisher+0x12>
 80160da:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80160dc:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 80160e0:	f008 f84e 	bl	801e180 <destroy_topic>
 80160e4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80160e8:	6972      	ldr	r2, [r6, #20]
 80160ea:	6918      	ldr	r0, [r3, #16]
 80160ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80160f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160f4:	6819      	ldr	r1, [r3, #0]
 80160f6:	f001 fb9f 	bl	8017838 <uxr_buffer_delete_entity>
 80160fa:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80160fe:	4680      	mov	r8, r0
 8016100:	6932      	ldr	r2, [r6, #16]
 8016102:	6918      	ldr	r0, [r3, #16]
 8016104:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016108:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801610c:	6819      	ldr	r1, [r3, #0]
 801610e:	f001 fb93 	bl	8017838 <uxr_buffer_delete_entity>
 8016112:	4606      	mov	r6, r0
 8016114:	6938      	ldr	r0, [r7, #16]
 8016116:	4642      	mov	r2, r8
 8016118:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801611c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016120:	f000 ff64 	bl	8016fec <run_xrce_session>
 8016124:	693f      	ldr	r7, [r7, #16]
 8016126:	4632      	mov	r2, r6
 8016128:	4606      	mov	r6, r0
 801612a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801612e:	4638      	mov	r0, r7
 8016130:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016134:	f000 ff5a 	bl	8016fec <run_xrce_session>
 8016138:	b126      	cbz	r6, 8016144 <rmw_destroy_publisher+0xa4>
 801613a:	b118      	cbz	r0, 8016144 <rmw_destroy_publisher+0xa4>
 801613c:	4628      	mov	r0, r5
 801613e:	f000 fdef 	bl	8016d20 <rmw_uxrce_fini_publisher_memory>
 8016142:	e7b7      	b.n	80160b4 <rmw_destroy_publisher+0x14>
 8016144:	2402      	movs	r4, #2
 8016146:	e7f9      	b.n	801613c <rmw_destroy_publisher+0x9c>

08016148 <rmw_send_request>:
 8016148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801614c:	4604      	mov	r4, r0
 801614e:	6800      	ldr	r0, [r0, #0]
 8016150:	b08b      	sub	sp, #44	; 0x2c
 8016152:	460e      	mov	r6, r1
 8016154:	4615      	mov	r5, r2
 8016156:	b128      	cbz	r0, 8016164 <rmw_send_request+0x1c>
 8016158:	4b21      	ldr	r3, [pc, #132]	; (80161e0 <rmw_send_request+0x98>)
 801615a:	6819      	ldr	r1, [r3, #0]
 801615c:	f7ea f870 	bl	8000240 <strcmp>
 8016160:	2800      	cmp	r0, #0
 8016162:	d139      	bne.n	80161d8 <rmw_send_request+0x90>
 8016164:	6864      	ldr	r4, [r4, #4]
 8016166:	2700      	movs	r7, #0
 8016168:	6963      	ldr	r3, [r4, #20]
 801616a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	4798      	blx	r3
 8016172:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016176:	4630      	mov	r0, r6
 8016178:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801617c:	4798      	blx	r3
 801617e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016182:	9000      	str	r0, [sp, #0]
 8016184:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016188:	6922      	ldr	r2, [r4, #16]
 801618a:	ab02      	add	r3, sp, #8
 801618c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801618e:	f003 ff01 	bl	8019f94 <uxr_prepare_output_stream>
 8016192:	e9c5 0700 	strd	r0, r7, [r5]
 8016196:	b198      	cbz	r0, 80161c0 <rmw_send_request+0x78>
 8016198:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801619c:	a902      	add	r1, sp, #8
 801619e:	4630      	mov	r0, r6
 80161a0:	4798      	blx	r3
 80161a2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80161a6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80161aa:	2b01      	cmp	r3, #1
 80161ac:	d00c      	beq.n	80161c8 <rmw_send_request+0x80>
 80161ae:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80161b0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80161b4:	f002 fc74 	bl	8018aa0 <uxr_run_session_until_confirm_delivery>
 80161b8:	4638      	mov	r0, r7
 80161ba:	b00b      	add	sp, #44	; 0x2c
 80161bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161c0:	2001      	movs	r0, #1
 80161c2:	b00b      	add	sp, #44	; 0x2c
 80161c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80161cc:	f002 f8ae 	bl	801832c <uxr_flash_output_streams>
 80161d0:	4638      	mov	r0, r7
 80161d2:	b00b      	add	sp, #44	; 0x2c
 80161d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161d8:	200c      	movs	r0, #12
 80161da:	b00b      	add	sp, #44	; 0x2c
 80161dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161e0:	08025aac 	.word	0x08025aac

080161e4 <rmw_take_request>:
 80161e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161e8:	4605      	mov	r5, r0
 80161ea:	6800      	ldr	r0, [r0, #0]
 80161ec:	b089      	sub	sp, #36	; 0x24
 80161ee:	460c      	mov	r4, r1
 80161f0:	4690      	mov	r8, r2
 80161f2:	461e      	mov	r6, r3
 80161f4:	b128      	cbz	r0, 8016202 <rmw_take_request+0x1e>
 80161f6:	4b28      	ldr	r3, [pc, #160]	; (8016298 <rmw_take_request+0xb4>)
 80161f8:	6819      	ldr	r1, [r3, #0]
 80161fa:	f7ea f821 	bl	8000240 <strcmp>
 80161fe:	2800      	cmp	r0, #0
 8016200:	d146      	bne.n	8016290 <rmw_take_request+0xac>
 8016202:	b10e      	cbz	r6, 8016208 <rmw_take_request+0x24>
 8016204:	2300      	movs	r3, #0
 8016206:	7033      	strb	r3, [r6, #0]
 8016208:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801620c:	f000 fe70 	bl	8016ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016210:	4648      	mov	r0, r9
 8016212:	f000 fe43 	bl	8016e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016216:	4607      	mov	r7, r0
 8016218:	b3b0      	cbz	r0, 8016288 <rmw_take_request+0xa4>
 801621a:	6885      	ldr	r5, [r0, #8]
 801621c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8016220:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8016224:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8016228:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801622c:	7423      	strb	r3, [r4, #16]
 801622e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8016232:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8016236:	f8a4 2011 	strh.w	r2, [r4, #17]
 801623a:	74e3      	strb	r3, [r4, #19]
 801623c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8016240:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8016244:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8016248:	6161      	str	r1, [r4, #20]
 801624a:	61a2      	str	r2, [r4, #24]
 801624c:	61e3      	str	r3, [r4, #28]
 801624e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016252:	689b      	ldr	r3, [r3, #8]
 8016254:	4798      	blx	r3
 8016256:	6844      	ldr	r4, [r0, #4]
 8016258:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801625c:	f105 0110 	add.w	r1, r5, #16
 8016260:	4668      	mov	r0, sp
 8016262:	f7fd f829 	bl	80132b8 <ucdr_init_buffer>
 8016266:	4641      	mov	r1, r8
 8016268:	68e3      	ldr	r3, [r4, #12]
 801626a:	4668      	mov	r0, sp
 801626c:	4798      	blx	r3
 801626e:	4639      	mov	r1, r7
 8016270:	4604      	mov	r4, r0
 8016272:	480a      	ldr	r0, [pc, #40]	; (801629c <rmw_take_request+0xb8>)
 8016274:	f007 feac 	bl	801dfd0 <put_memory>
 8016278:	b106      	cbz	r6, 801627c <rmw_take_request+0x98>
 801627a:	7034      	strb	r4, [r6, #0]
 801627c:	f084 0001 	eor.w	r0, r4, #1
 8016280:	b2c0      	uxtb	r0, r0
 8016282:	b009      	add	sp, #36	; 0x24
 8016284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016288:	2001      	movs	r0, #1
 801628a:	b009      	add	sp, #36	; 0x24
 801628c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016290:	200c      	movs	r0, #12
 8016292:	b009      	add	sp, #36	; 0x24
 8016294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016298:	08025aac 	.word	0x08025aac
 801629c:	20016f4c 	.word	0x20016f4c

080162a0 <rmw_send_response>:
 80162a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162a2:	4605      	mov	r5, r0
 80162a4:	6800      	ldr	r0, [r0, #0]
 80162a6:	b091      	sub	sp, #68	; 0x44
 80162a8:	460c      	mov	r4, r1
 80162aa:	4616      	mov	r6, r2
 80162ac:	b128      	cbz	r0, 80162ba <rmw_send_response+0x1a>
 80162ae:	4b29      	ldr	r3, [pc, #164]	; (8016354 <rmw_send_response+0xb4>)
 80162b0:	6819      	ldr	r1, [r3, #0]
 80162b2:	f7e9 ffc5 	bl	8000240 <strcmp>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	d141      	bne.n	801633e <rmw_send_response+0x9e>
 80162ba:	686d      	ldr	r5, [r5, #4]
 80162bc:	68a1      	ldr	r1, [r4, #8]
 80162be:	6860      	ldr	r0, [r4, #4]
 80162c0:	6faf      	ldr	r7, [r5, #120]	; 0x78
 80162c2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80162c6:	9307      	str	r3, [sp, #28]
 80162c8:	4623      	mov	r3, r4
 80162ca:	9206      	str	r2, [sp, #24]
 80162cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162d0:	789b      	ldrb	r3, [r3, #2]
 80162d2:	f88d 2017 	strb.w	r2, [sp, #23]
 80162d6:	f88d 3016 	strb.w	r3, [sp, #22]
 80162da:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80162de:	68e2      	ldr	r2, [r4, #12]
 80162e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80162e4:	ab02      	add	r3, sp, #8
 80162e6:	696c      	ldr	r4, [r5, #20]
 80162e8:	c307      	stmia	r3!, {r0, r1, r2}
 80162ea:	68e3      	ldr	r3, [r4, #12]
 80162ec:	4798      	blx	r3
 80162ee:	6844      	ldr	r4, [r0, #4]
 80162f0:	4630      	mov	r0, r6
 80162f2:	6923      	ldr	r3, [r4, #16]
 80162f4:	4798      	blx	r3
 80162f6:	f100 0318 	add.w	r3, r0, #24
 80162fa:	6938      	ldr	r0, [r7, #16]
 80162fc:	9300      	str	r3, [sp, #0]
 80162fe:	ab08      	add	r3, sp, #32
 8016300:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016304:	692a      	ldr	r2, [r5, #16]
 8016306:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8016308:	f003 fe44 	bl	8019f94 <uxr_prepare_output_stream>
 801630c:	b910      	cbnz	r0, 8016314 <rmw_send_response+0x74>
 801630e:	2001      	movs	r0, #1
 8016310:	b011      	add	sp, #68	; 0x44
 8016312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016314:	a902      	add	r1, sp, #8
 8016316:	a808      	add	r0, sp, #32
 8016318:	f004 ffa8 	bl	801b26c <uxr_serialize_SampleIdentity>
 801631c:	68a3      	ldr	r3, [r4, #8]
 801631e:	a908      	add	r1, sp, #32
 8016320:	4630      	mov	r0, r6
 8016322:	4798      	blx	r3
 8016324:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8016328:	6938      	ldr	r0, [r7, #16]
 801632a:	2b01      	cmp	r3, #1
 801632c:	d00a      	beq.n	8016344 <rmw_send_response+0xa4>
 801632e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8016330:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016334:	f002 fbb4 	bl	8018aa0 <uxr_run_session_until_confirm_delivery>
 8016338:	2000      	movs	r0, #0
 801633a:	b011      	add	sp, #68	; 0x44
 801633c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801633e:	200c      	movs	r0, #12
 8016340:	b011      	add	sp, #68	; 0x44
 8016342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016344:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016348:	f001 fff0 	bl	801832c <uxr_flash_output_streams>
 801634c:	2000      	movs	r0, #0
 801634e:	b011      	add	sp, #68	; 0x44
 8016350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016352:	bf00      	nop
 8016354:	08025aac 	.word	0x08025aac

08016358 <rmw_take_response>:
 8016358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801635c:	4604      	mov	r4, r0
 801635e:	6800      	ldr	r0, [r0, #0]
 8016360:	b088      	sub	sp, #32
 8016362:	460f      	mov	r7, r1
 8016364:	4690      	mov	r8, r2
 8016366:	461d      	mov	r5, r3
 8016368:	b120      	cbz	r0, 8016374 <rmw_take_response+0x1c>
 801636a:	4b1d      	ldr	r3, [pc, #116]	; (80163e0 <rmw_take_response+0x88>)
 801636c:	6819      	ldr	r1, [r3, #0]
 801636e:	f7e9 ff67 	bl	8000240 <strcmp>
 8016372:	bb68      	cbnz	r0, 80163d0 <rmw_take_response+0x78>
 8016374:	b10d      	cbz	r5, 801637a <rmw_take_response+0x22>
 8016376:	2300      	movs	r3, #0
 8016378:	702b      	strb	r3, [r5, #0]
 801637a:	6864      	ldr	r4, [r4, #4]
 801637c:	f000 fdb8 	bl	8016ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016380:	4620      	mov	r0, r4
 8016382:	f000 fd8b 	bl	8016e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016386:	4606      	mov	r6, r0
 8016388:	b330      	cbz	r0, 80163d8 <rmw_take_response+0x80>
 801638a:	6963      	ldr	r3, [r4, #20]
 801638c:	6884      	ldr	r4, [r0, #8]
 801638e:	68db      	ldr	r3, [r3, #12]
 8016390:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8016394:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016398:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801639c:	4798      	blx	r3
 801639e:	6847      	ldr	r7, [r0, #4]
 80163a0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80163a4:	f104 0110 	add.w	r1, r4, #16
 80163a8:	4668      	mov	r0, sp
 80163aa:	f7fc ff85 	bl	80132b8 <ucdr_init_buffer>
 80163ae:	4641      	mov	r1, r8
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	4668      	mov	r0, sp
 80163b4:	4798      	blx	r3
 80163b6:	4631      	mov	r1, r6
 80163b8:	4604      	mov	r4, r0
 80163ba:	480a      	ldr	r0, [pc, #40]	; (80163e4 <rmw_take_response+0x8c>)
 80163bc:	f007 fe08 	bl	801dfd0 <put_memory>
 80163c0:	b105      	cbz	r5, 80163c4 <rmw_take_response+0x6c>
 80163c2:	702c      	strb	r4, [r5, #0]
 80163c4:	f084 0001 	eor.w	r0, r4, #1
 80163c8:	b2c0      	uxtb	r0, r0
 80163ca:	b008      	add	sp, #32
 80163cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163d0:	200c      	movs	r0, #12
 80163d2:	b008      	add	sp, #32
 80163d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163d8:	2001      	movs	r0, #1
 80163da:	b008      	add	sp, #32
 80163dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163e0:	08025aac 	.word	0x08025aac
 80163e4:	20016f4c 	.word	0x20016f4c

080163e8 <rmw_create_service>:
 80163e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ec:	b091      	sub	sp, #68	; 0x44
 80163ee:	2900      	cmp	r1, #0
 80163f0:	f000 80bb 	beq.w	801656a <rmw_create_service+0x182>
 80163f4:	4606      	mov	r6, r0
 80163f6:	2800      	cmp	r0, #0
 80163f8:	f000 80b7 	beq.w	801656a <rmw_create_service+0x182>
 80163fc:	4614      	mov	r4, r2
 80163fe:	6800      	ldr	r0, [r0, #0]
 8016400:	4689      	mov	r9, r1
 8016402:	461d      	mov	r5, r3
 8016404:	f000 ff04 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 8016408:	2c00      	cmp	r4, #0
 801640a:	f000 80ae 	beq.w	801656a <rmw_create_service+0x182>
 801640e:	f080 0001 	eor.w	r0, r0, #1
 8016412:	b2c0      	uxtb	r0, r0
 8016414:	2800      	cmp	r0, #0
 8016416:	f040 80a8 	bne.w	801656a <rmw_create_service+0x182>
 801641a:	7823      	ldrb	r3, [r4, #0]
 801641c:	2b00      	cmp	r3, #0
 801641e:	f000 80a4 	beq.w	801656a <rmw_create_service+0x182>
 8016422:	2d00      	cmp	r5, #0
 8016424:	f000 80a1 	beq.w	801656a <rmw_create_service+0x182>
 8016428:	4856      	ldr	r0, [pc, #344]	; (8016584 <rmw_create_service+0x19c>)
 801642a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801642e:	f007 fdbf 	bl	801dfb0 <get_memory>
 8016432:	4606      	mov	r6, r0
 8016434:	2800      	cmp	r0, #0
 8016436:	f000 8099 	beq.w	801656c <rmw_create_service+0x184>
 801643a:	6887      	ldr	r7, [r0, #8]
 801643c:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8016440:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8016444:	f007 fe1c 	bl	801e080 <rmw_get_implementation_identifier>
 8016448:	67f8      	str	r0, [r7, #124]	; 0x7c
 801644a:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801644e:	4620      	mov	r0, r4
 8016450:	f7e9 ff56 	bl	8000300 <strlen>
 8016454:	1c42      	adds	r2, r0, #1
 8016456:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801645a:	2a3c      	cmp	r2, #60	; 0x3c
 801645c:	f200 808a 	bhi.w	8016574 <rmw_create_service+0x18c>
 8016460:	4621      	mov	r1, r4
 8016462:	4650      	mov	r0, sl
 8016464:	f00a fd5f 	bl	8020f26 <memcpy>
 8016468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801646c:	4629      	mov	r1, r5
 801646e:	2250      	movs	r2, #80	; 0x50
 8016470:	f107 0020 	add.w	r0, r7, #32
 8016474:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8016478:	677b      	str	r3, [r7, #116]	; 0x74
 801647a:	f00a fd54 	bl	8020f26 <memcpy>
 801647e:	4648      	mov	r0, r9
 8016480:	4941      	ldr	r1, [pc, #260]	; (8016588 <rmw_create_service+0x1a0>)
 8016482:	f000 fedf 	bl	8017244 <get_service_typesupport_handle>
 8016486:	2800      	cmp	r0, #0
 8016488:	d074      	beq.n	8016574 <rmw_create_service+0x18c>
 801648a:	6843      	ldr	r3, [r0, #4]
 801648c:	617b      	str	r3, [r7, #20]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d070      	beq.n	8016574 <rmw_create_service+0x18c>
 8016492:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016496:	2108      	movs	r1, #8
 8016498:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8016590 <rmw_create_service+0x1a8>
 801649c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164a0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8016594 <rmw_create_service+0x1ac>
 80164a4:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 80164a8:	1c42      	adds	r2, r0, #1
 80164aa:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 80164ae:	f001 fcbd 	bl	8017e2c <uxr_object_id>
 80164b2:	2364      	movs	r3, #100	; 0x64
 80164b4:	6138      	str	r0, [r7, #16]
 80164b6:	4652      	mov	r2, sl
 80164b8:	4649      	mov	r1, r9
 80164ba:	6978      	ldr	r0, [r7, #20]
 80164bc:	f000 fdfc 	bl	80170b8 <generate_service_types>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d057      	beq.n	8016574 <rmw_create_service+0x18c>
 80164c4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8016598 <rmw_create_service+0x1b0>
 80164c8:	233c      	movs	r3, #60	; 0x3c
 80164ca:	4a30      	ldr	r2, [pc, #192]	; (801658c <rmw_create_service+0x1a4>)
 80164cc:	4620      	mov	r0, r4
 80164ce:	4659      	mov	r1, fp
 80164d0:	f000 fdc0 	bl	8017054 <generate_service_topics>
 80164d4:	2800      	cmp	r0, #0
 80164d6:	d04d      	beq.n	8016574 <rmw_create_service+0x18c>
 80164d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80164dc:	a80c      	add	r0, sp, #48	; 0x30
 80164de:	4629      	mov	r1, r5
 80164e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80164e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80164e8:	f000 fd9c 	bl	8017024 <convert_qos_profile>
 80164ec:	4a27      	ldr	r2, [pc, #156]	; (801658c <rmw_create_service+0x1a4>)
 80164ee:	a80c      	add	r0, sp, #48	; 0x30
 80164f0:	9400      	str	r4, [sp, #0]
 80164f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164f4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80164f8:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80164fc:	c803      	ldmia	r0, {r0, r1}
 80164fe:	9a08      	ldr	r2, [sp, #32]
 8016500:	9005      	str	r0, [sp, #20]
 8016502:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016506:	2306      	movs	r3, #6
 8016508:	f8ad 1018 	strh.w	r1, [sp, #24]
 801650c:	9307      	str	r3, [sp, #28]
 801650e:	6811      	ldr	r1, [r2, #0]
 8016510:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016514:	693a      	ldr	r2, [r7, #16]
 8016516:	f001 fb91 	bl	8017c3c <uxr_buffer_create_replier_bin>
 801651a:	4602      	mov	r2, r0
 801651c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016520:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016524:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016528:	f000 fd60 	bl	8016fec <run_xrce_session>
 801652c:	b310      	cbz	r0, 8016574 <rmw_create_service+0x18c>
 801652e:	7a2b      	ldrb	r3, [r5, #8]
 8016530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016534:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016538:	2b02      	cmp	r3, #2
 801653a:	920e      	str	r2, [sp, #56]	; 0x38
 801653c:	f04f 0200 	mov.w	r2, #0
 8016540:	920f      	str	r2, [sp, #60]	; 0x3c
 8016542:	bf0c      	ite	eq
 8016544:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8016548:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801654c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016550:	930b      	str	r3, [sp, #44]	; 0x2c
 8016552:	ab0e      	add	r3, sp, #56	; 0x38
 8016554:	673a      	str	r2, [r7, #112]	; 0x70
 8016556:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801655a:	9300      	str	r3, [sp, #0]
 801655c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801655e:	6811      	ldr	r1, [r2, #0]
 8016560:	693a      	ldr	r2, [r7, #16]
 8016562:	f001 fc93 	bl	8017e8c <uxr_buffer_request_data>
 8016566:	8338      	strh	r0, [r7, #24]
 8016568:	e000      	b.n	801656c <rmw_create_service+0x184>
 801656a:	2600      	movs	r6, #0
 801656c:	4630      	mov	r0, r6
 801656e:	b011      	add	sp, #68	; 0x44
 8016570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016574:	4630      	mov	r0, r6
 8016576:	2600      	movs	r6, #0
 8016578:	f000 fbfe 	bl	8016d78 <rmw_uxrce_fini_service_memory>
 801657c:	4630      	mov	r0, r6
 801657e:	b011      	add	sp, #68	; 0x44
 8016580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016584:	20016f2c 	.word	0x20016f2c
 8016588:	080246f4 	.word	0x080246f4
 801658c:	2001259c 	.word	0x2001259c
 8016590:	200125d8 	.word	0x200125d8
 8016594:	20012538 	.word	0x20012538
 8016598:	200124fc 	.word	0x200124fc

0801659c <rmw_destroy_service>:
 801659c:	b570      	push	{r4, r5, r6, lr}
 801659e:	b128      	cbz	r0, 80165ac <rmw_destroy_service+0x10>
 80165a0:	4604      	mov	r4, r0
 80165a2:	6800      	ldr	r0, [r0, #0]
 80165a4:	460d      	mov	r5, r1
 80165a6:	f000 fe33 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 80165aa:	b910      	cbnz	r0, 80165b2 <rmw_destroy_service+0x16>
 80165ac:	2401      	movs	r4, #1
 80165ae:	4620      	mov	r0, r4
 80165b0:	bd70      	pop	{r4, r5, r6, pc}
 80165b2:	6863      	ldr	r3, [r4, #4]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d0f9      	beq.n	80165ac <rmw_destroy_service+0x10>
 80165b8:	2d00      	cmp	r5, #0
 80165ba:	d0f7      	beq.n	80165ac <rmw_destroy_service+0x10>
 80165bc:	6828      	ldr	r0, [r5, #0]
 80165be:	f000 fe27 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 80165c2:	2800      	cmp	r0, #0
 80165c4:	d0f2      	beq.n	80165ac <rmw_destroy_service+0x10>
 80165c6:	686e      	ldr	r6, [r5, #4]
 80165c8:	2e00      	cmp	r6, #0
 80165ca:	d0ef      	beq.n	80165ac <rmw_destroy_service+0x10>
 80165cc:	6864      	ldr	r4, [r4, #4]
 80165ce:	6932      	ldr	r2, [r6, #16]
 80165d0:	6920      	ldr	r0, [r4, #16]
 80165d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80165d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165da:	6819      	ldr	r1, [r3, #0]
 80165dc:	f001 fc90 	bl	8017f00 <uxr_buffer_cancel_data>
 80165e0:	4602      	mov	r2, r0
 80165e2:	6920      	ldr	r0, [r4, #16]
 80165e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80165e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80165ec:	f000 fcfe 	bl	8016fec <run_xrce_session>
 80165f0:	6920      	ldr	r0, [r4, #16]
 80165f2:	6932      	ldr	r2, [r6, #16]
 80165f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80165f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165fc:	6819      	ldr	r1, [r3, #0]
 80165fe:	f001 f91b 	bl	8017838 <uxr_buffer_delete_entity>
 8016602:	4602      	mov	r2, r0
 8016604:	6920      	ldr	r0, [r4, #16]
 8016606:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801660a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801660e:	f000 fced 	bl	8016fec <run_xrce_session>
 8016612:	4603      	mov	r3, r0
 8016614:	4628      	mov	r0, r5
 8016616:	2b00      	cmp	r3, #0
 8016618:	bf14      	ite	ne
 801661a:	2400      	movne	r4, #0
 801661c:	2402      	moveq	r4, #2
 801661e:	f000 fbab 	bl	8016d78 <rmw_uxrce_fini_service_memory>
 8016622:	e7c4      	b.n	80165ae <rmw_destroy_service+0x12>

08016624 <rmw_service_response_publisher_get_actual_qos>:
 8016624:	b181      	cbz	r1, 8016648 <rmw_service_response_publisher_get_actual_qos+0x24>
 8016626:	4603      	mov	r3, r0
 8016628:	b510      	push	{r4, lr}
 801662a:	fab0 f480 	clz	r4, r0
 801662e:	0964      	lsrs	r4, r4, #5
 8016630:	b140      	cbz	r0, 8016644 <rmw_service_response_publisher_get_actual_qos+0x20>
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	4608      	mov	r0, r1
 8016636:	2250      	movs	r2, #80	; 0x50
 8016638:	f103 0120 	add.w	r1, r3, #32
 801663c:	f00a fc73 	bl	8020f26 <memcpy>
 8016640:	4620      	mov	r0, r4
 8016642:	bd10      	pop	{r4, pc}
 8016644:	200b      	movs	r0, #11
 8016646:	bd10      	pop	{r4, pc}
 8016648:	200b      	movs	r0, #11
 801664a:	4770      	bx	lr

0801664c <rmw_service_request_subscription_get_actual_qos>:
 801664c:	b178      	cbz	r0, 801666e <rmw_service_request_subscription_get_actual_qos+0x22>
 801664e:	b510      	push	{r4, lr}
 8016650:	fab1 f481 	clz	r4, r1
 8016654:	0964      	lsrs	r4, r4, #5
 8016656:	b141      	cbz	r1, 801666a <rmw_service_request_subscription_get_actual_qos+0x1e>
 8016658:	6843      	ldr	r3, [r0, #4]
 801665a:	2250      	movs	r2, #80	; 0x50
 801665c:	4608      	mov	r0, r1
 801665e:	f103 0120 	add.w	r1, r3, #32
 8016662:	f00a fc60 	bl	8020f26 <memcpy>
 8016666:	4620      	mov	r0, r4
 8016668:	bd10      	pop	{r4, pc}
 801666a:	200b      	movs	r0, #11
 801666c:	bd10      	pop	{r4, pc}
 801666e:	200b      	movs	r0, #11
 8016670:	4770      	bx	lr
 8016672:	bf00      	nop

08016674 <rmw_create_subscription>:
 8016674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016678:	b08d      	sub	sp, #52	; 0x34
 801667a:	2900      	cmp	r1, #0
 801667c:	f000 80d8 	beq.w	8016830 <rmw_create_subscription+0x1bc>
 8016680:	4604      	mov	r4, r0
 8016682:	2800      	cmp	r0, #0
 8016684:	f000 80d4 	beq.w	8016830 <rmw_create_subscription+0x1bc>
 8016688:	6800      	ldr	r0, [r0, #0]
 801668a:	460e      	mov	r6, r1
 801668c:	4615      	mov	r5, r2
 801668e:	461f      	mov	r7, r3
 8016690:	f000 fdbe 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 8016694:	f080 0001 	eor.w	r0, r0, #1
 8016698:	b2c0      	uxtb	r0, r0
 801669a:	2800      	cmp	r0, #0
 801669c:	f040 80c8 	bne.w	8016830 <rmw_create_subscription+0x1bc>
 80166a0:	2d00      	cmp	r5, #0
 80166a2:	f000 80c5 	beq.w	8016830 <rmw_create_subscription+0x1bc>
 80166a6:	782b      	ldrb	r3, [r5, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	f000 80c1 	beq.w	8016830 <rmw_create_subscription+0x1bc>
 80166ae:	2f00      	cmp	r7, #0
 80166b0:	f000 80be 	beq.w	8016830 <rmw_create_subscription+0x1bc>
 80166b4:	4867      	ldr	r0, [pc, #412]	; (8016854 <rmw_create_subscription+0x1e0>)
 80166b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80166ba:	f007 fc79 	bl	801dfb0 <get_memory>
 80166be:	4604      	mov	r4, r0
 80166c0:	2800      	cmp	r0, #0
 80166c2:	f000 80b6 	beq.w	8016832 <rmw_create_subscription+0x1be>
 80166c6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80166ca:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 80166ce:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 80166d2:	f007 fcd5 	bl	801e080 <rmw_get_implementation_identifier>
 80166d6:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 80166da:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 80166de:	4628      	mov	r0, r5
 80166e0:	f7e9 fe0e 	bl	8000300 <strlen>
 80166e4:	3001      	adds	r0, #1
 80166e6:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 80166ea:	283c      	cmp	r0, #60	; 0x3c
 80166ec:	f200 80a5 	bhi.w	801683a <rmw_create_subscription+0x1c6>
 80166f0:	462b      	mov	r3, r5
 80166f2:	4a59      	ldr	r2, [pc, #356]	; (8016858 <rmw_create_subscription+0x1e4>)
 80166f4:	213c      	movs	r1, #60	; 0x3c
 80166f6:	4650      	mov	r0, sl
 80166f8:	f00a f9b8 	bl	8020a6c <sniprintf>
 80166fc:	4639      	mov	r1, r7
 80166fe:	2250      	movs	r2, #80	; 0x50
 8016700:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8016704:	f8c8 9020 	str.w	r9, [r8, #32]
 8016708:	f00a fc0d 	bl	8020f26 <memcpy>
 801670c:	4630      	mov	r0, r6
 801670e:	4953      	ldr	r1, [pc, #332]	; (801685c <rmw_create_subscription+0x1e8>)
 8016710:	f000 fd8c 	bl	801722c <get_message_typesupport_handle>
 8016714:	2800      	cmp	r0, #0
 8016716:	f000 8090 	beq.w	801683a <rmw_create_subscription+0x1c6>
 801671a:	6842      	ldr	r2, [r0, #4]
 801671c:	f8c8 2018 	str.w	r2, [r8, #24]
 8016720:	2a00      	cmp	r2, #0
 8016722:	f000 808a 	beq.w	801683a <rmw_create_subscription+0x1c6>
 8016726:	4629      	mov	r1, r5
 8016728:	463b      	mov	r3, r7
 801672a:	4648      	mov	r0, r9
 801672c:	f007 fcd8 	bl	801e0e0 <create_topic>
 8016730:	f8c8 001c 	str.w	r0, [r8, #28]
 8016734:	2800      	cmp	r0, #0
 8016736:	f000 8085 	beq.w	8016844 <rmw_create_subscription+0x1d0>
 801673a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801673e:	2104      	movs	r1, #4
 8016740:	2506      	movs	r5, #6
 8016742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016746:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801674a:	1c42      	adds	r2, r0, #1
 801674c:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8016750:	f001 fb6c 	bl	8017e2c <uxr_object_id>
 8016754:	f8c8 0010 	str.w	r0, [r8, #16]
 8016758:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801675c:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8016760:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016764:	9500      	str	r5, [sp, #0]
 8016766:	6819      	ldr	r1, [r3, #0]
 8016768:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801676c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016770:	f001 f946 	bl	8017a00 <uxr_buffer_create_subscriber_bin>
 8016774:	4602      	mov	r2, r0
 8016776:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801677a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801677e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016782:	f000 fc33 	bl	8016fec <run_xrce_session>
 8016786:	2800      	cmp	r0, #0
 8016788:	d057      	beq.n	801683a <rmw_create_subscription+0x1c6>
 801678a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801678e:	4629      	mov	r1, r5
 8016790:	ae08      	add	r6, sp, #32
 8016792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016796:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 801679a:	1c42      	adds	r2, r0, #1
 801679c:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 80167a0:	f001 fb44 	bl	8017e2c <uxr_object_id>
 80167a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80167a8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80167ac:	4639      	mov	r1, r7
 80167ae:	f8c8 0014 	str.w	r0, [r8, #20]
 80167b2:	4630      	mov	r0, r6
 80167b4:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 80167b8:	9305      	str	r3, [sp, #20]
 80167ba:	f000 fc33 	bl	8017024 <convert_qos_profile>
 80167be:	9503      	str	r5, [sp, #12]
 80167c0:	9b05      	ldr	r3, [sp, #20]
 80167c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80167c6:	9001      	str	r0, [sp, #4]
 80167c8:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80167cc:	f8ad 1008 	strh.w	r1, [sp, #8]
 80167d0:	691b      	ldr	r3, [r3, #16]
 80167d2:	9300      	str	r3, [sp, #0]
 80167d4:	f8db 1000 	ldr.w	r1, [fp]
 80167d8:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 80167dc:	f001 f9b6 	bl	8017b4c <uxr_buffer_create_datareader_bin>
 80167e0:	4602      	mov	r2, r0
 80167e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80167e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80167ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80167ee:	f000 fbfd 	bl	8016fec <run_xrce_session>
 80167f2:	b310      	cbz	r0, 801683a <rmw_create_subscription+0x1c6>
 80167f4:	7a3b      	ldrb	r3, [r7, #8]
 80167f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80167fe:	2b02      	cmp	r3, #2
 8016800:	920a      	str	r2, [sp, #40]	; 0x28
 8016802:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016806:	f04f 0200 	mov.w	r2, #0
 801680a:	bf08      	it	eq
 801680c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8016810:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016814:	bf18      	it	ne
 8016816:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 801681a:	920b      	str	r2, [sp, #44]	; 0x2c
 801681c:	9307      	str	r3, [sp, #28]
 801681e:	ab0a      	add	r3, sp, #40	; 0x28
 8016820:	9300      	str	r3, [sp, #0]
 8016822:	9b07      	ldr	r3, [sp, #28]
 8016824:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016828:	6809      	ldr	r1, [r1, #0]
 801682a:	f001 fb2f 	bl	8017e8c <uxr_buffer_request_data>
 801682e:	e000      	b.n	8016832 <rmw_create_subscription+0x1be>
 8016830:	2400      	movs	r4, #0
 8016832:	4620      	mov	r0, r4
 8016834:	b00d      	add	sp, #52	; 0x34
 8016836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801683a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801683e:	b108      	cbz	r0, 8016844 <rmw_create_subscription+0x1d0>
 8016840:	f000 fac6 	bl	8016dd0 <rmw_uxrce_fini_topic_memory>
 8016844:	4620      	mov	r0, r4
 8016846:	2400      	movs	r4, #0
 8016848:	f000 fa80 	bl	8016d4c <rmw_uxrce_fini_subscription_memory>
 801684c:	4620      	mov	r0, r4
 801684e:	b00d      	add	sp, #52	; 0x34
 8016850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016854:	20016f5c 	.word	0x20016f5c
 8016858:	0802544c 	.word	0x0802544c
 801685c:	080246f4 	.word	0x080246f4

08016860 <rmw_subscription_get_actual_qos>:
 8016860:	b178      	cbz	r0, 8016882 <rmw_subscription_get_actual_qos+0x22>
 8016862:	b510      	push	{r4, lr}
 8016864:	fab1 f481 	clz	r4, r1
 8016868:	0964      	lsrs	r4, r4, #5
 801686a:	b141      	cbz	r1, 801687e <rmw_subscription_get_actual_qos+0x1e>
 801686c:	6843      	ldr	r3, [r0, #4]
 801686e:	2250      	movs	r2, #80	; 0x50
 8016870:	4608      	mov	r0, r1
 8016872:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016876:	f00a fb56 	bl	8020f26 <memcpy>
 801687a:	4620      	mov	r0, r4
 801687c:	bd10      	pop	{r4, pc}
 801687e:	200b      	movs	r0, #11
 8016880:	bd10      	pop	{r4, pc}
 8016882:	200b      	movs	r0, #11
 8016884:	4770      	bx	lr
 8016886:	bf00      	nop

08016888 <rmw_destroy_subscription>:
 8016888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801688c:	b128      	cbz	r0, 801689a <rmw_destroy_subscription+0x12>
 801688e:	4604      	mov	r4, r0
 8016890:	6800      	ldr	r0, [r0, #0]
 8016892:	460d      	mov	r5, r1
 8016894:	f000 fcbc 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 8016898:	b918      	cbnz	r0, 80168a2 <rmw_destroy_subscription+0x1a>
 801689a:	2401      	movs	r4, #1
 801689c:	4620      	mov	r0, r4
 801689e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a2:	6863      	ldr	r3, [r4, #4]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d0f8      	beq.n	801689a <rmw_destroy_subscription+0x12>
 80168a8:	fab5 f485 	clz	r4, r5
 80168ac:	0964      	lsrs	r4, r4, #5
 80168ae:	2d00      	cmp	r5, #0
 80168b0:	d0f3      	beq.n	801689a <rmw_destroy_subscription+0x12>
 80168b2:	6828      	ldr	r0, [r5, #0]
 80168b4:	f000 fcac 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 80168b8:	2800      	cmp	r0, #0
 80168ba:	d0ee      	beq.n	801689a <rmw_destroy_subscription+0x12>
 80168bc:	686e      	ldr	r6, [r5, #4]
 80168be:	2e00      	cmp	r6, #0
 80168c0:	d0eb      	beq.n	801689a <rmw_destroy_subscription+0x12>
 80168c2:	6a37      	ldr	r7, [r6, #32]
 80168c4:	6972      	ldr	r2, [r6, #20]
 80168c6:	6938      	ldr	r0, [r7, #16]
 80168c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80168cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80168d0:	6819      	ldr	r1, [r3, #0]
 80168d2:	f001 fb15 	bl	8017f00 <uxr_buffer_cancel_data>
 80168d6:	4602      	mov	r2, r0
 80168d8:	6938      	ldr	r0, [r7, #16]
 80168da:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80168de:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80168e2:	f000 fb83 	bl	8016fec <run_xrce_session>
 80168e6:	69f0      	ldr	r0, [r6, #28]
 80168e8:	f007 fc4a 	bl	801e180 <destroy_topic>
 80168ec:	6a33      	ldr	r3, [r6, #32]
 80168ee:	6972      	ldr	r2, [r6, #20]
 80168f0:	6918      	ldr	r0, [r3, #16]
 80168f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80168f6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80168fa:	6819      	ldr	r1, [r3, #0]
 80168fc:	f000 ff9c 	bl	8017838 <uxr_buffer_delete_entity>
 8016900:	6a33      	ldr	r3, [r6, #32]
 8016902:	4680      	mov	r8, r0
 8016904:	6932      	ldr	r2, [r6, #16]
 8016906:	6918      	ldr	r0, [r3, #16]
 8016908:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801690c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016910:	6819      	ldr	r1, [r3, #0]
 8016912:	f000 ff91 	bl	8017838 <uxr_buffer_delete_entity>
 8016916:	4606      	mov	r6, r0
 8016918:	6938      	ldr	r0, [r7, #16]
 801691a:	4642      	mov	r2, r8
 801691c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016920:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016924:	f000 fb62 	bl	8016fec <run_xrce_session>
 8016928:	693f      	ldr	r7, [r7, #16]
 801692a:	4632      	mov	r2, r6
 801692c:	4606      	mov	r6, r0
 801692e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8016932:	4638      	mov	r0, r7
 8016934:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016938:	f000 fb58 	bl	8016fec <run_xrce_session>
 801693c:	b126      	cbz	r6, 8016948 <rmw_destroy_subscription+0xc0>
 801693e:	b118      	cbz	r0, 8016948 <rmw_destroy_subscription+0xc0>
 8016940:	4628      	mov	r0, r5
 8016942:	f000 fa03 	bl	8016d4c <rmw_uxrce_fini_subscription_memory>
 8016946:	e7a9      	b.n	801689c <rmw_destroy_subscription+0x14>
 8016948:	2402      	movs	r4, #2
 801694a:	e7f9      	b.n	8016940 <rmw_destroy_subscription+0xb8>

0801694c <rmw_take_with_info>:
 801694c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801694e:	4604      	mov	r4, r0
 8016950:	6800      	ldr	r0, [r0, #0]
 8016952:	b089      	sub	sp, #36	; 0x24
 8016954:	460f      	mov	r7, r1
 8016956:	4615      	mov	r5, r2
 8016958:	b128      	cbz	r0, 8016966 <rmw_take_with_info+0x1a>
 801695a:	4b24      	ldr	r3, [pc, #144]	; (80169ec <rmw_take_with_info+0xa0>)
 801695c:	6819      	ldr	r1, [r3, #0]
 801695e:	f7e9 fc6f 	bl	8000240 <strcmp>
 8016962:	2800      	cmp	r0, #0
 8016964:	d13e      	bne.n	80169e4 <rmw_take_with_info+0x98>
 8016966:	b305      	cbz	r5, 80169aa <rmw_take_with_info+0x5e>
 8016968:	2300      	movs	r3, #0
 801696a:	6864      	ldr	r4, [r4, #4]
 801696c:	702b      	strb	r3, [r5, #0]
 801696e:	f000 fabf 	bl	8016ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016972:	4620      	mov	r0, r4
 8016974:	f000 fa92 	bl	8016e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016978:	4606      	mov	r6, r0
 801697a:	b1f0      	cbz	r0, 80169ba <rmw_take_with_info+0x6e>
 801697c:	6881      	ldr	r1, [r0, #8]
 801697e:	4668      	mov	r0, sp
 8016980:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016984:	3110      	adds	r1, #16
 8016986:	f7fc fc97 	bl	80132b8 <ucdr_init_buffer>
 801698a:	69a3      	ldr	r3, [r4, #24]
 801698c:	4639      	mov	r1, r7
 801698e:	4668      	mov	r0, sp
 8016990:	68db      	ldr	r3, [r3, #12]
 8016992:	4798      	blx	r3
 8016994:	4604      	mov	r4, r0
 8016996:	4631      	mov	r1, r6
 8016998:	4815      	ldr	r0, [pc, #84]	; (80169f0 <rmw_take_with_info+0xa4>)
 801699a:	f007 fb19 	bl	801dfd0 <put_memory>
 801699e:	702c      	strb	r4, [r5, #0]
 80169a0:	f084 0001 	eor.w	r0, r4, #1
 80169a4:	b2c0      	uxtb	r0, r0
 80169a6:	b009      	add	sp, #36	; 0x24
 80169a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169aa:	6864      	ldr	r4, [r4, #4]
 80169ac:	f000 faa0 	bl	8016ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 80169b0:	4620      	mov	r0, r4
 80169b2:	f000 fa73 	bl	8016e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 80169b6:	4605      	mov	r5, r0
 80169b8:	b910      	cbnz	r0, 80169c0 <rmw_take_with_info+0x74>
 80169ba:	2001      	movs	r0, #1
 80169bc:	b009      	add	sp, #36	; 0x24
 80169be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169c0:	68a9      	ldr	r1, [r5, #8]
 80169c2:	4668      	mov	r0, sp
 80169c4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80169c8:	3110      	adds	r1, #16
 80169ca:	f7fc fc75 	bl	80132b8 <ucdr_init_buffer>
 80169ce:	69a3      	ldr	r3, [r4, #24]
 80169d0:	4639      	mov	r1, r7
 80169d2:	4668      	mov	r0, sp
 80169d4:	68db      	ldr	r3, [r3, #12]
 80169d6:	4798      	blx	r3
 80169d8:	4629      	mov	r1, r5
 80169da:	4604      	mov	r4, r0
 80169dc:	4804      	ldr	r0, [pc, #16]	; (80169f0 <rmw_take_with_info+0xa4>)
 80169de:	f007 faf7 	bl	801dfd0 <put_memory>
 80169e2:	e7dd      	b.n	80169a0 <rmw_take_with_info+0x54>
 80169e4:	200c      	movs	r0, #12
 80169e6:	b009      	add	sp, #36	; 0x24
 80169e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169ea:	bf00      	nop
 80169ec:	08025aac 	.word	0x08025aac
 80169f0:	20016f4c 	.word	0x20016f4c

080169f4 <rmw_uxrce_transport_init>:
 80169f4:	b508      	push	{r3, lr}
 80169f6:	b108      	cbz	r0, 80169fc <rmw_uxrce_transport_init+0x8>
 80169f8:	f100 0210 	add.w	r2, r0, #16
 80169fc:	b139      	cbz	r1, 8016a0e <rmw_uxrce_transport_init+0x1a>
 80169fe:	6949      	ldr	r1, [r1, #20]
 8016a00:	4610      	mov	r0, r2
 8016a02:	f001 f9db 	bl	8017dbc <uxr_init_custom_transport>
 8016a06:	f080 0001 	eor.w	r0, r0, #1
 8016a0a:	b2c0      	uxtb	r0, r0
 8016a0c:	bd08      	pop	{r3, pc}
 8016a0e:	4b04      	ldr	r3, [pc, #16]	; (8016a20 <rmw_uxrce_transport_init+0x2c>)
 8016a10:	4610      	mov	r0, r2
 8016a12:	6859      	ldr	r1, [r3, #4]
 8016a14:	f001 f9d2 	bl	8017dbc <uxr_init_custom_transport>
 8016a18:	f080 0001 	eor.w	r0, r0, #1
 8016a1c:	b2c0      	uxtb	r0, r0
 8016a1e:	bd08      	pop	{r3, pc}
 8016a20:	200124a4 	.word	0x200124a4

08016a24 <rmw_uxrce_init_service_memory>:
 8016a24:	b1e2      	cbz	r2, 8016a60 <rmw_uxrce_init_service_memory+0x3c>
 8016a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a2a:	7b05      	ldrb	r5, [r0, #12]
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	b9ad      	cbnz	r5, 8016a5c <rmw_uxrce_init_service_memory+0x38>
 8016a30:	23c8      	movs	r3, #200	; 0xc8
 8016a32:	4617      	mov	r7, r2
 8016a34:	460c      	mov	r4, r1
 8016a36:	46a8      	mov	r8, r5
 8016a38:	6083      	str	r3, [r0, #8]
 8016a3a:	f240 1301 	movw	r3, #257	; 0x101
 8016a3e:	e9c0 5500 	strd	r5, r5, [r0]
 8016a42:	8183      	strh	r3, [r0, #12]
 8016a44:	3501      	adds	r5, #1
 8016a46:	4621      	mov	r1, r4
 8016a48:	4630      	mov	r0, r6
 8016a4a:	f007 fac1 	bl	801dfd0 <put_memory>
 8016a4e:	42af      	cmp	r7, r5
 8016a50:	60a4      	str	r4, [r4, #8]
 8016a52:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016a56:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016a5a:	d1f3      	bne.n	8016a44 <rmw_uxrce_init_service_memory+0x20>
 8016a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a60:	4770      	bx	lr
 8016a62:	bf00      	nop

08016a64 <rmw_uxrce_init_client_memory>:
 8016a64:	b1e2      	cbz	r2, 8016aa0 <rmw_uxrce_init_client_memory+0x3c>
 8016a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a6a:	7b05      	ldrb	r5, [r0, #12]
 8016a6c:	4606      	mov	r6, r0
 8016a6e:	b9ad      	cbnz	r5, 8016a9c <rmw_uxrce_init_client_memory+0x38>
 8016a70:	23c8      	movs	r3, #200	; 0xc8
 8016a72:	4617      	mov	r7, r2
 8016a74:	460c      	mov	r4, r1
 8016a76:	46a8      	mov	r8, r5
 8016a78:	6083      	str	r3, [r0, #8]
 8016a7a:	f240 1301 	movw	r3, #257	; 0x101
 8016a7e:	e9c0 5500 	strd	r5, r5, [r0]
 8016a82:	8183      	strh	r3, [r0, #12]
 8016a84:	3501      	adds	r5, #1
 8016a86:	4621      	mov	r1, r4
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f007 faa1 	bl	801dfd0 <put_memory>
 8016a8e:	42af      	cmp	r7, r5
 8016a90:	60a4      	str	r4, [r4, #8]
 8016a92:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016a96:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016a9a:	d1f3      	bne.n	8016a84 <rmw_uxrce_init_client_memory+0x20>
 8016a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aa0:	4770      	bx	lr
 8016aa2:	bf00      	nop

08016aa4 <rmw_uxrce_init_publisher_memory>:
 8016aa4:	b1e2      	cbz	r2, 8016ae0 <rmw_uxrce_init_publisher_memory+0x3c>
 8016aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aaa:	7b05      	ldrb	r5, [r0, #12]
 8016aac:	4606      	mov	r6, r0
 8016aae:	b9ad      	cbnz	r5, 8016adc <rmw_uxrce_init_publisher_memory+0x38>
 8016ab0:	23d8      	movs	r3, #216	; 0xd8
 8016ab2:	4617      	mov	r7, r2
 8016ab4:	460c      	mov	r4, r1
 8016ab6:	46a8      	mov	r8, r5
 8016ab8:	6083      	str	r3, [r0, #8]
 8016aba:	f240 1301 	movw	r3, #257	; 0x101
 8016abe:	e9c0 5500 	strd	r5, r5, [r0]
 8016ac2:	8183      	strh	r3, [r0, #12]
 8016ac4:	3501      	adds	r5, #1
 8016ac6:	4621      	mov	r1, r4
 8016ac8:	4630      	mov	r0, r6
 8016aca:	f007 fa81 	bl	801dfd0 <put_memory>
 8016ace:	42af      	cmp	r7, r5
 8016ad0:	60a4      	str	r4, [r4, #8]
 8016ad2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016ad6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016ada:	d1f3      	bne.n	8016ac4 <rmw_uxrce_init_publisher_memory+0x20>
 8016adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ae0:	4770      	bx	lr
 8016ae2:	bf00      	nop

08016ae4 <rmw_uxrce_init_subscription_memory>:
 8016ae4:	b1e2      	cbz	r2, 8016b20 <rmw_uxrce_init_subscription_memory+0x3c>
 8016ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aea:	7b05      	ldrb	r5, [r0, #12]
 8016aec:	4606      	mov	r6, r0
 8016aee:	b9ad      	cbnz	r5, 8016b1c <rmw_uxrce_init_subscription_memory+0x38>
 8016af0:	23d8      	movs	r3, #216	; 0xd8
 8016af2:	4617      	mov	r7, r2
 8016af4:	460c      	mov	r4, r1
 8016af6:	46a8      	mov	r8, r5
 8016af8:	6083      	str	r3, [r0, #8]
 8016afa:	f240 1301 	movw	r3, #257	; 0x101
 8016afe:	e9c0 5500 	strd	r5, r5, [r0]
 8016b02:	8183      	strh	r3, [r0, #12]
 8016b04:	3501      	adds	r5, #1
 8016b06:	4621      	mov	r1, r4
 8016b08:	4630      	mov	r0, r6
 8016b0a:	f007 fa61 	bl	801dfd0 <put_memory>
 8016b0e:	42af      	cmp	r7, r5
 8016b10:	60a4      	str	r4, [r4, #8]
 8016b12:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016b16:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016b1a:	d1f3      	bne.n	8016b04 <rmw_uxrce_init_subscription_memory+0x20>
 8016b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b20:	4770      	bx	lr
 8016b22:	bf00      	nop

08016b24 <rmw_uxrce_init_node_memory>:
 8016b24:	b1e2      	cbz	r2, 8016b60 <rmw_uxrce_init_node_memory+0x3c>
 8016b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b2a:	7b05      	ldrb	r5, [r0, #12]
 8016b2c:	4606      	mov	r6, r0
 8016b2e:	b9ad      	cbnz	r5, 8016b5c <rmw_uxrce_init_node_memory+0x38>
 8016b30:	23a4      	movs	r3, #164	; 0xa4
 8016b32:	4617      	mov	r7, r2
 8016b34:	460c      	mov	r4, r1
 8016b36:	46a8      	mov	r8, r5
 8016b38:	6083      	str	r3, [r0, #8]
 8016b3a:	f240 1301 	movw	r3, #257	; 0x101
 8016b3e:	e9c0 5500 	strd	r5, r5, [r0]
 8016b42:	8183      	strh	r3, [r0, #12]
 8016b44:	3501      	adds	r5, #1
 8016b46:	4621      	mov	r1, r4
 8016b48:	4630      	mov	r0, r6
 8016b4a:	f007 fa41 	bl	801dfd0 <put_memory>
 8016b4e:	42af      	cmp	r7, r5
 8016b50:	60a4      	str	r4, [r4, #8]
 8016b52:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8016b56:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016b5a:	d1f3      	bne.n	8016b44 <rmw_uxrce_init_node_memory+0x20>
 8016b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b60:	4770      	bx	lr
 8016b62:	bf00      	nop

08016b64 <rmw_uxrce_init_session_memory>:
 8016b64:	b1ea      	cbz	r2, 8016ba2 <rmw_uxrce_init_session_memory+0x3e>
 8016b66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b6a:	7b05      	ldrb	r5, [r0, #12]
 8016b6c:	4606      	mov	r6, r0
 8016b6e:	b9b5      	cbnz	r5, 8016b9e <rmw_uxrce_init_session_memory+0x3a>
 8016b70:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8016b74:	f240 1301 	movw	r3, #257	; 0x101
 8016b78:	4617      	mov	r7, r2
 8016b7a:	460c      	mov	r4, r1
 8016b7c:	46a9      	mov	r9, r5
 8016b7e:	f8c0 8008 	str.w	r8, [r0, #8]
 8016b82:	8183      	strh	r3, [r0, #12]
 8016b84:	e9c0 5500 	strd	r5, r5, [r0]
 8016b88:	3501      	adds	r5, #1
 8016b8a:	4621      	mov	r1, r4
 8016b8c:	4630      	mov	r0, r6
 8016b8e:	f007 fa1f 	bl	801dfd0 <put_memory>
 8016b92:	42af      	cmp	r7, r5
 8016b94:	60a4      	str	r4, [r4, #8]
 8016b96:	f884 900c 	strb.w	r9, [r4, #12]
 8016b9a:	4444      	add	r4, r8
 8016b9c:	d1f4      	bne.n	8016b88 <rmw_uxrce_init_session_memory+0x24>
 8016b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ba2:	4770      	bx	lr

08016ba4 <rmw_uxrce_init_topic_memory>:
 8016ba4:	b1e2      	cbz	r2, 8016be0 <rmw_uxrce_init_topic_memory+0x3c>
 8016ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016baa:	7b05      	ldrb	r5, [r0, #12]
 8016bac:	4606      	mov	r6, r0
 8016bae:	b9ad      	cbnz	r5, 8016bdc <rmw_uxrce_init_topic_memory+0x38>
 8016bb0:	231c      	movs	r3, #28
 8016bb2:	4617      	mov	r7, r2
 8016bb4:	460c      	mov	r4, r1
 8016bb6:	46a8      	mov	r8, r5
 8016bb8:	6083      	str	r3, [r0, #8]
 8016bba:	f240 1301 	movw	r3, #257	; 0x101
 8016bbe:	e9c0 5500 	strd	r5, r5, [r0]
 8016bc2:	8183      	strh	r3, [r0, #12]
 8016bc4:	3501      	adds	r5, #1
 8016bc6:	4621      	mov	r1, r4
 8016bc8:	4630      	mov	r0, r6
 8016bca:	f007 fa01 	bl	801dfd0 <put_memory>
 8016bce:	42af      	cmp	r7, r5
 8016bd0:	60a4      	str	r4, [r4, #8]
 8016bd2:	f104 041c 	add.w	r4, r4, #28
 8016bd6:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016bda:	d1f3      	bne.n	8016bc4 <rmw_uxrce_init_topic_memory+0x20>
 8016bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be0:	4770      	bx	lr
 8016be2:	bf00      	nop

08016be4 <rmw_uxrce_init_static_input_buffer_memory>:
 8016be4:	b1ea      	cbz	r2, 8016c22 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bea:	7b05      	ldrb	r5, [r0, #12]
 8016bec:	4606      	mov	r6, r0
 8016bee:	b9b5      	cbnz	r5, 8016c1e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016bf0:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8016bf4:	4617      	mov	r7, r2
 8016bf6:	460c      	mov	r4, r1
 8016bf8:	46a8      	mov	r8, r5
 8016bfa:	6083      	str	r3, [r0, #8]
 8016bfc:	f240 1301 	movw	r3, #257	; 0x101
 8016c00:	e9c0 5500 	strd	r5, r5, [r0]
 8016c04:	8183      	strh	r3, [r0, #12]
 8016c06:	3501      	adds	r5, #1
 8016c08:	4621      	mov	r1, r4
 8016c0a:	4630      	mov	r0, r6
 8016c0c:	f007 f9e0 	bl	801dfd0 <put_memory>
 8016c10:	42af      	cmp	r7, r5
 8016c12:	60a4      	str	r4, [r4, #8]
 8016c14:	f884 800c 	strb.w	r8, [r4, #12]
 8016c18:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8016c1c:	d1f3      	bne.n	8016c06 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c22:	4770      	bx	lr

08016c24 <rmw_uxrce_init_init_options_impl_memory>:
 8016c24:	b1e2      	cbz	r2, 8016c60 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8016c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c2a:	7b05      	ldrb	r5, [r0, #12]
 8016c2c:	4606      	mov	r6, r0
 8016c2e:	b9ad      	cbnz	r5, 8016c5c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016c30:	232c      	movs	r3, #44	; 0x2c
 8016c32:	4617      	mov	r7, r2
 8016c34:	460c      	mov	r4, r1
 8016c36:	46a8      	mov	r8, r5
 8016c38:	6083      	str	r3, [r0, #8]
 8016c3a:	f240 1301 	movw	r3, #257	; 0x101
 8016c3e:	e9c0 5500 	strd	r5, r5, [r0]
 8016c42:	8183      	strh	r3, [r0, #12]
 8016c44:	3501      	adds	r5, #1
 8016c46:	4621      	mov	r1, r4
 8016c48:	4630      	mov	r0, r6
 8016c4a:	f007 f9c1 	bl	801dfd0 <put_memory>
 8016c4e:	42af      	cmp	r7, r5
 8016c50:	60a4      	str	r4, [r4, #8]
 8016c52:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8016c56:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016c5a:	d1f3      	bne.n	8016c44 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c60:	4770      	bx	lr
 8016c62:	bf00      	nop

08016c64 <rmw_uxrce_init_wait_set_memory>:
 8016c64:	b1e2      	cbz	r2, 8016ca0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8016c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c6a:	7b05      	ldrb	r5, [r0, #12]
 8016c6c:	4606      	mov	r6, r0
 8016c6e:	b9ad      	cbnz	r5, 8016c9c <rmw_uxrce_init_wait_set_memory+0x38>
 8016c70:	231c      	movs	r3, #28
 8016c72:	4617      	mov	r7, r2
 8016c74:	460c      	mov	r4, r1
 8016c76:	46a8      	mov	r8, r5
 8016c78:	6083      	str	r3, [r0, #8]
 8016c7a:	f240 1301 	movw	r3, #257	; 0x101
 8016c7e:	e9c0 5500 	strd	r5, r5, [r0]
 8016c82:	8183      	strh	r3, [r0, #12]
 8016c84:	3501      	adds	r5, #1
 8016c86:	4621      	mov	r1, r4
 8016c88:	4630      	mov	r0, r6
 8016c8a:	f007 f9a1 	bl	801dfd0 <put_memory>
 8016c8e:	42af      	cmp	r7, r5
 8016c90:	60a4      	str	r4, [r4, #8]
 8016c92:	f104 041c 	add.w	r4, r4, #28
 8016c96:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016c9a:	d1f3      	bne.n	8016c84 <rmw_uxrce_init_wait_set_memory+0x20>
 8016c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ca0:	4770      	bx	lr
 8016ca2:	bf00      	nop

08016ca4 <rmw_uxrce_init_guard_condition_memory>:
 8016ca4:	b1e2      	cbz	r2, 8016ce0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8016ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016caa:	7b05      	ldrb	r5, [r0, #12]
 8016cac:	4606      	mov	r6, r0
 8016cae:	b9ad      	cbnz	r5, 8016cdc <rmw_uxrce_init_guard_condition_memory+0x38>
 8016cb0:	2320      	movs	r3, #32
 8016cb2:	4617      	mov	r7, r2
 8016cb4:	460c      	mov	r4, r1
 8016cb6:	46a8      	mov	r8, r5
 8016cb8:	6083      	str	r3, [r0, #8]
 8016cba:	f240 1301 	movw	r3, #257	; 0x101
 8016cbe:	e9c0 5500 	strd	r5, r5, [r0]
 8016cc2:	8183      	strh	r3, [r0, #12]
 8016cc4:	3501      	adds	r5, #1
 8016cc6:	4621      	mov	r1, r4
 8016cc8:	4630      	mov	r0, r6
 8016cca:	f007 f981 	bl	801dfd0 <put_memory>
 8016cce:	42af      	cmp	r7, r5
 8016cd0:	60a4      	str	r4, [r4, #8]
 8016cd2:	f104 0420 	add.w	r4, r4, #32
 8016cd6:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016cda:	d1f3      	bne.n	8016cc4 <rmw_uxrce_init_guard_condition_memory+0x20>
 8016cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ce0:	4770      	bx	lr
 8016ce2:	bf00      	nop

08016ce4 <rmw_uxrce_fini_session_memory>:
 8016ce4:	4601      	mov	r1, r0
 8016ce6:	4801      	ldr	r0, [pc, #4]	; (8016cec <rmw_uxrce_fini_session_memory+0x8>)
 8016ce8:	f007 b972 	b.w	801dfd0 <put_memory>
 8016cec:	20016f3c 	.word	0x20016f3c

08016cf0 <rmw_uxrce_fini_node_memory>:
 8016cf0:	b538      	push	{r3, r4, r5, lr}
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	6800      	ldr	r0, [r0, #0]
 8016cf6:	b128      	cbz	r0, 8016d04 <rmw_uxrce_fini_node_memory+0x14>
 8016cf8:	4b07      	ldr	r3, [pc, #28]	; (8016d18 <rmw_uxrce_fini_node_memory+0x28>)
 8016cfa:	6819      	ldr	r1, [r3, #0]
 8016cfc:	f7e9 faa0 	bl	8000240 <strcmp>
 8016d00:	b940      	cbnz	r0, 8016d14 <rmw_uxrce_fini_node_memory+0x24>
 8016d02:	6020      	str	r0, [r4, #0]
 8016d04:	6861      	ldr	r1, [r4, #4]
 8016d06:	b129      	cbz	r1, 8016d14 <rmw_uxrce_fini_node_memory+0x24>
 8016d08:	2500      	movs	r5, #0
 8016d0a:	4804      	ldr	r0, [pc, #16]	; (8016d1c <rmw_uxrce_fini_node_memory+0x2c>)
 8016d0c:	610d      	str	r5, [r1, #16]
 8016d0e:	f007 f95f 	bl	801dfd0 <put_memory>
 8016d12:	6065      	str	r5, [r4, #4]
 8016d14:	bd38      	pop	{r3, r4, r5, pc}
 8016d16:	bf00      	nop
 8016d18:	08025aac 	.word	0x08025aac
 8016d1c:	20016f0c 	.word	0x20016f0c

08016d20 <rmw_uxrce_fini_publisher_memory>:
 8016d20:	b510      	push	{r4, lr}
 8016d22:	4604      	mov	r4, r0
 8016d24:	6800      	ldr	r0, [r0, #0]
 8016d26:	b128      	cbz	r0, 8016d34 <rmw_uxrce_fini_publisher_memory+0x14>
 8016d28:	4b06      	ldr	r3, [pc, #24]	; (8016d44 <rmw_uxrce_fini_publisher_memory+0x24>)
 8016d2a:	6819      	ldr	r1, [r3, #0]
 8016d2c:	f7e9 fa88 	bl	8000240 <strcmp>
 8016d30:	b938      	cbnz	r0, 8016d42 <rmw_uxrce_fini_publisher_memory+0x22>
 8016d32:	6020      	str	r0, [r4, #0]
 8016d34:	6861      	ldr	r1, [r4, #4]
 8016d36:	b121      	cbz	r1, 8016d42 <rmw_uxrce_fini_publisher_memory+0x22>
 8016d38:	4803      	ldr	r0, [pc, #12]	; (8016d48 <rmw_uxrce_fini_publisher_memory+0x28>)
 8016d3a:	f007 f949 	bl	801dfd0 <put_memory>
 8016d3e:	2300      	movs	r3, #0
 8016d40:	6063      	str	r3, [r4, #4]
 8016d42:	bd10      	pop	{r4, pc}
 8016d44:	08025aac 	.word	0x08025aac
 8016d48:	20016f1c 	.word	0x20016f1c

08016d4c <rmw_uxrce_fini_subscription_memory>:
 8016d4c:	b510      	push	{r4, lr}
 8016d4e:	4604      	mov	r4, r0
 8016d50:	6800      	ldr	r0, [r0, #0]
 8016d52:	b128      	cbz	r0, 8016d60 <rmw_uxrce_fini_subscription_memory+0x14>
 8016d54:	4b06      	ldr	r3, [pc, #24]	; (8016d70 <rmw_uxrce_fini_subscription_memory+0x24>)
 8016d56:	6819      	ldr	r1, [r3, #0]
 8016d58:	f7e9 fa72 	bl	8000240 <strcmp>
 8016d5c:	b938      	cbnz	r0, 8016d6e <rmw_uxrce_fini_subscription_memory+0x22>
 8016d5e:	6020      	str	r0, [r4, #0]
 8016d60:	6861      	ldr	r1, [r4, #4]
 8016d62:	b121      	cbz	r1, 8016d6e <rmw_uxrce_fini_subscription_memory+0x22>
 8016d64:	4803      	ldr	r0, [pc, #12]	; (8016d74 <rmw_uxrce_fini_subscription_memory+0x28>)
 8016d66:	f007 f933 	bl	801dfd0 <put_memory>
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	6063      	str	r3, [r4, #4]
 8016d6e:	bd10      	pop	{r4, pc}
 8016d70:	08025aac 	.word	0x08025aac
 8016d74:	20016f5c 	.word	0x20016f5c

08016d78 <rmw_uxrce_fini_service_memory>:
 8016d78:	b510      	push	{r4, lr}
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	6800      	ldr	r0, [r0, #0]
 8016d7e:	b128      	cbz	r0, 8016d8c <rmw_uxrce_fini_service_memory+0x14>
 8016d80:	4b06      	ldr	r3, [pc, #24]	; (8016d9c <rmw_uxrce_fini_service_memory+0x24>)
 8016d82:	6819      	ldr	r1, [r3, #0]
 8016d84:	f7e9 fa5c 	bl	8000240 <strcmp>
 8016d88:	b938      	cbnz	r0, 8016d9a <rmw_uxrce_fini_service_memory+0x22>
 8016d8a:	6020      	str	r0, [r4, #0]
 8016d8c:	6861      	ldr	r1, [r4, #4]
 8016d8e:	b121      	cbz	r1, 8016d9a <rmw_uxrce_fini_service_memory+0x22>
 8016d90:	4803      	ldr	r0, [pc, #12]	; (8016da0 <rmw_uxrce_fini_service_memory+0x28>)
 8016d92:	f007 f91d 	bl	801dfd0 <put_memory>
 8016d96:	2300      	movs	r3, #0
 8016d98:	6063      	str	r3, [r4, #4]
 8016d9a:	bd10      	pop	{r4, pc}
 8016d9c:	08025aac 	.word	0x08025aac
 8016da0:	20016f2c 	.word	0x20016f2c

08016da4 <rmw_uxrce_fini_client_memory>:
 8016da4:	b510      	push	{r4, lr}
 8016da6:	4604      	mov	r4, r0
 8016da8:	6800      	ldr	r0, [r0, #0]
 8016daa:	b128      	cbz	r0, 8016db8 <rmw_uxrce_fini_client_memory+0x14>
 8016dac:	4b06      	ldr	r3, [pc, #24]	; (8016dc8 <rmw_uxrce_fini_client_memory+0x24>)
 8016dae:	6819      	ldr	r1, [r3, #0]
 8016db0:	f7e9 fa46 	bl	8000240 <strcmp>
 8016db4:	b938      	cbnz	r0, 8016dc6 <rmw_uxrce_fini_client_memory+0x22>
 8016db6:	6020      	str	r0, [r4, #0]
 8016db8:	6861      	ldr	r1, [r4, #4]
 8016dba:	b121      	cbz	r1, 8016dc6 <rmw_uxrce_fini_client_memory+0x22>
 8016dbc:	4803      	ldr	r0, [pc, #12]	; (8016dcc <rmw_uxrce_fini_client_memory+0x28>)
 8016dbe:	f007 f907 	bl	801dfd0 <put_memory>
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	6063      	str	r3, [r4, #4]
 8016dc6:	bd10      	pop	{r4, pc}
 8016dc8:	08025aac 	.word	0x08025aac
 8016dcc:	2001263c 	.word	0x2001263c

08016dd0 <rmw_uxrce_fini_topic_memory>:
 8016dd0:	b510      	push	{r4, lr}
 8016dd2:	4604      	mov	r4, r0
 8016dd4:	4803      	ldr	r0, [pc, #12]	; (8016de4 <rmw_uxrce_fini_topic_memory+0x14>)
 8016dd6:	4621      	mov	r1, r4
 8016dd8:	f007 f8fa 	bl	801dfd0 <put_memory>
 8016ddc:	2300      	movs	r3, #0
 8016dde:	61a3      	str	r3, [r4, #24]
 8016de0:	bd10      	pop	{r4, pc}
 8016de2:	bf00      	nop
 8016de4:	20016f6c 	.word	0x20016f6c

08016de8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8016de8:	b082      	sub	sp, #8
 8016dea:	492b      	ldr	r1, [pc, #172]	; (8016e98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016dec:	b530      	push	{r4, r5, lr}
 8016dee:	680d      	ldr	r5, [r1, #0]
 8016df0:	ac03      	add	r4, sp, #12
 8016df2:	e884 000c 	stmia.w	r4, {r2, r3}
 8016df6:	461c      	mov	r4, r3
 8016df8:	2d00      	cmp	r5, #0
 8016dfa:	d04b      	beq.n	8016e94 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8016dfc:	462b      	mov	r3, r5
 8016dfe:	2100      	movs	r1, #0
 8016e00:	689a      	ldr	r2, [r3, #8]
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8016e08:	4290      	cmp	r0, r2
 8016e0a:	bf08      	it	eq
 8016e0c:	3101      	addeq	r1, #1
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d1f6      	bne.n	8016e00 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8016e12:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016e16:	2b02      	cmp	r3, #2
 8016e18:	d029      	beq.n	8016e6e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8016e1a:	d820      	bhi.n	8016e5e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8016e1c:	428c      	cmp	r4, r1
 8016e1e:	d828      	bhi.n	8016e72 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016e20:	fab4 f284 	clz	r2, r4
 8016e24:	0952      	lsrs	r2, r2, #5
 8016e26:	b324      	cbz	r4, 8016e72 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016e28:	b1dd      	cbz	r5, 8016e62 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8016e2a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8016e2e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8016e32:	e001      	b.n	8016e38 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8016e34:	686d      	ldr	r5, [r5, #4]
 8016e36:	b1ad      	cbz	r5, 8016e64 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016e38:	68ab      	ldr	r3, [r5, #8]
 8016e3a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8016e3e:	4288      	cmp	r0, r1
 8016e40:	d1f8      	bne.n	8016e34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016e42:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8016e46:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8016e4a:	4561      	cmp	r1, ip
 8016e4c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016e50:	eb73 0e04 	sbcs.w	lr, r3, r4
 8016e54:	daee      	bge.n	8016e34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016e56:	468c      	mov	ip, r1
 8016e58:	461c      	mov	r4, r3
 8016e5a:	462a      	mov	r2, r5
 8016e5c:	e7ea      	b.n	8016e34 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016e5e:	2b03      	cmp	r3, #3
 8016e60:	d0dc      	beq.n	8016e1c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8016e62:	2200      	movs	r2, #0
 8016e64:	4610      	mov	r0, r2
 8016e66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e6a:	b002      	add	sp, #8
 8016e6c:	4770      	bx	lr
 8016e6e:	428c      	cmp	r4, r1
 8016e70:	d905      	bls.n	8016e7e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8016e72:	4809      	ldr	r0, [pc, #36]	; (8016e98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e78:	b002      	add	sp, #8
 8016e7a:	f007 b899 	b.w	801dfb0 <get_memory>
 8016e7e:	fab4 f284 	clz	r2, r4
 8016e82:	0952      	lsrs	r2, r2, #5
 8016e84:	2c00      	cmp	r4, #0
 8016e86:	d1ed      	bne.n	8016e64 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016e88:	4803      	ldr	r0, [pc, #12]	; (8016e98 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e8e:	b002      	add	sp, #8
 8016e90:	f007 b88e 	b.w	801dfb0 <get_memory>
 8016e94:	4629      	mov	r1, r5
 8016e96:	e7bc      	b.n	8016e12 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8016e98:	20016f4c 	.word	0x20016f4c

08016e9c <rmw_uxrce_find_static_input_buffer_by_owner>:
 8016e9c:	4b12      	ldr	r3, [pc, #72]	; (8016ee8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	b530      	push	{r4, r5, lr}
 8016ea2:	b1f3      	cbz	r3, 8016ee2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8016ea4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8016ea8:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8016eac:	2400      	movs	r4, #0
 8016eae:	e001      	b.n	8016eb4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016eb0:	685b      	ldr	r3, [r3, #4]
 8016eb2:	b1a3      	cbz	r3, 8016ede <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8016eb4:	689a      	ldr	r2, [r3, #8]
 8016eb6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8016eba:	4288      	cmp	r0, r1
 8016ebc:	d1f8      	bne.n	8016eb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016ebe:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8016ec2:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8016ec6:	4571      	cmp	r1, lr
 8016ec8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8016ecc:	eb72 050c 	sbcs.w	r5, r2, ip
 8016ed0:	daee      	bge.n	8016eb0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016ed2:	461c      	mov	r4, r3
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	468e      	mov	lr, r1
 8016ed8:	4694      	mov	ip, r2
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d1ea      	bne.n	8016eb4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016ede:	4620      	mov	r0, r4
 8016ee0:	bd30      	pop	{r4, r5, pc}
 8016ee2:	461c      	mov	r4, r3
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	bd30      	pop	{r4, r5, pc}
 8016ee8:	20016f4c 	.word	0x20016f4c
 8016eec:	00000000 	.word	0x00000000

08016ef0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8016ef0:	4b3d      	ldr	r3, [pc, #244]	; (8016fe8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef6:	681f      	ldr	r7, [r3, #0]
 8016ef8:	ed2d 8b06 	vpush	{d8-d10}
 8016efc:	b08d      	sub	sp, #52	; 0x34
 8016efe:	f007 fae3 	bl	801e4c8 <rmw_uros_epoch_nanos>
 8016f02:	2f00      	cmp	r7, #0
 8016f04:	d05d      	beq.n	8016fc2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016f06:	46b8      	mov	r8, r7
 8016f08:	4681      	mov	r9, r0
 8016f0a:	468a      	mov	sl, r1
 8016f0c:	ac04      	add	r4, sp, #16
 8016f0e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016f12:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016f16:	2b04      	cmp	r3, #4
 8016f18:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8016fd0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8016f1c:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8016fd8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8016f20:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8016fe0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8016f24:	d03f      	beq.n	8016fa6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016f26:	2b05      	cmp	r3, #5
 8016f28:	d044      	beq.n	8016fb4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8016f2a:	2b03      	cmp	r3, #3
 8016f2c:	d03b      	beq.n	8016fa6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016f2e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016f32:	ed8d ab06 	vstr	d10, [sp, #24]
 8016f36:	ab08      	add	r3, sp, #32
 8016f38:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016f3c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8016f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f42:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016f46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f4a:	f006 fe45 	bl	801dbd8 <rmw_time_equal>
 8016f4e:	b118      	cbz	r0, 8016f58 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8016f50:	ed8d 9b04 	vstr	d9, [sp, #16]
 8016f54:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016f58:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8016f5c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8016f60:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016f64:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8016f68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016f6c:	f006 fe8a 	bl	801dc84 <rmw_time_total_nsec>
 8016f70:	1830      	adds	r0, r6, r0
 8016f72:	eb47 0101 	adc.w	r1, r7, r1
 8016f76:	4548      	cmp	r0, r9
 8016f78:	eb71 030a 	sbcs.w	r3, r1, sl
 8016f7c:	db05      	blt.n	8016f8a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8016f7e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8016f82:	4591      	cmp	r9, r2
 8016f84:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016f88:	da03      	bge.n	8016f92 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8016f8a:	4641      	mov	r1, r8
 8016f8c:	4816      	ldr	r0, [pc, #88]	; (8016fe8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016f8e:	f007 f81f 	bl	801dfd0 <put_memory>
 8016f92:	f1bb 0f00 	cmp.w	fp, #0
 8016f96:	d014      	beq.n	8016fc2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016f98:	46d8      	mov	r8, fp
 8016f9a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016f9e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016fa2:	2b04      	cmp	r3, #4
 8016fa4:	d1bf      	bne.n	8016f26 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8016fa6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016faa:	3340      	adds	r3, #64	; 0x40
 8016fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016fb2:	e7c0      	b.n	8016f36 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016fb4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016fb8:	3348      	adds	r3, #72	; 0x48
 8016fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016fc0:	e7b9      	b.n	8016f36 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016fc2:	b00d      	add	sp, #52	; 0x34
 8016fc4:	ecbd 8b06 	vpop	{d8-d10}
 8016fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fcc:	f3af 8000 	nop.w
	...
 8016fd8:	00000001 	.word	0x00000001
 8016fdc:	00000000 	.word	0x00000000
 8016fe0:	0000001e 	.word	0x0000001e
 8016fe4:	00000000 	.word	0x00000000
 8016fe8:	20016f4c 	.word	0x20016f4c

08016fec <run_xrce_session>:
 8016fec:	b510      	push	{r4, lr}
 8016fee:	788c      	ldrb	r4, [r1, #2]
 8016ff0:	b086      	sub	sp, #24
 8016ff2:	2c01      	cmp	r4, #1
 8016ff4:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016ff8:	d00c      	beq.n	8017014 <run_xrce_session+0x28>
 8016ffa:	2401      	movs	r4, #1
 8016ffc:	4619      	mov	r1, r3
 8016ffe:	f10d 020e 	add.w	r2, sp, #14
 8017002:	f10d 0317 	add.w	r3, sp, #23
 8017006:	9400      	str	r4, [sp, #0]
 8017008:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801700c:	f001 fd6c 	bl	8018ae8 <uxr_run_session_until_all_status>
 8017010:	b006      	add	sp, #24
 8017012:	bd10      	pop	{r4, pc}
 8017014:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017018:	f001 f988 	bl	801832c <uxr_flash_output_streams>
 801701c:	4620      	mov	r0, r4
 801701e:	b006      	add	sp, #24
 8017020:	bd10      	pop	{r4, pc}
 8017022:	bf00      	nop

08017024 <convert_qos_profile>:
 8017024:	7a4a      	ldrb	r2, [r1, #9]
 8017026:	f891 c008 	ldrb.w	ip, [r1, #8]
 801702a:	2a02      	cmp	r2, #2
 801702c:	bf18      	it	ne
 801702e:	2200      	movne	r2, #0
 8017030:	7002      	strb	r2, [r0, #0]
 8017032:	f1ac 0202 	sub.w	r2, ip, #2
 8017036:	fab2 f282 	clz	r2, r2
 801703a:	0952      	lsrs	r2, r2, #5
 801703c:	7042      	strb	r2, [r0, #1]
 801703e:	780a      	ldrb	r2, [r1, #0]
 8017040:	8889      	ldrh	r1, [r1, #4]
 8017042:	f1a2 0202 	sub.w	r2, r2, #2
 8017046:	8081      	strh	r1, [r0, #4]
 8017048:	fab2 f282 	clz	r2, r2
 801704c:	0952      	lsrs	r2, r2, #5
 801704e:	7082      	strb	r2, [r0, #2]
 8017050:	4770      	bx	lr
 8017052:	bf00      	nop

08017054 <generate_service_topics>:
 8017054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017056:	461d      	mov	r5, r3
 8017058:	b083      	sub	sp, #12
 801705a:	4606      	mov	r6, r0
 801705c:	4c11      	ldr	r4, [pc, #68]	; (80170a4 <generate_service_topics+0x50>)
 801705e:	4608      	mov	r0, r1
 8017060:	4b11      	ldr	r3, [pc, #68]	; (80170a8 <generate_service_topics+0x54>)
 8017062:	4617      	mov	r7, r2
 8017064:	4629      	mov	r1, r5
 8017066:	4a11      	ldr	r2, [pc, #68]	; (80170ac <generate_service_topics+0x58>)
 8017068:	9401      	str	r4, [sp, #4]
 801706a:	9600      	str	r6, [sp, #0]
 801706c:	f009 fcfe 	bl	8020a6c <sniprintf>
 8017070:	4a0f      	ldr	r2, [pc, #60]	; (80170b0 <generate_service_topics+0x5c>)
 8017072:	4604      	mov	r4, r0
 8017074:	4b0f      	ldr	r3, [pc, #60]	; (80170b4 <generate_service_topics+0x60>)
 8017076:	9201      	str	r2, [sp, #4]
 8017078:	4638      	mov	r0, r7
 801707a:	4a0c      	ldr	r2, [pc, #48]	; (80170ac <generate_service_topics+0x58>)
 801707c:	4629      	mov	r1, r5
 801707e:	9600      	str	r6, [sp, #0]
 8017080:	f009 fcf4 	bl	8020a6c <sniprintf>
 8017084:	2c00      	cmp	r4, #0
 8017086:	bfa8      	it	ge
 8017088:	42a5      	cmpge	r5, r4
 801708a:	bfcc      	ite	gt
 801708c:	2401      	movgt	r4, #1
 801708e:	2400      	movle	r4, #0
 8017090:	dd05      	ble.n	801709e <generate_service_topics+0x4a>
 8017092:	2800      	cmp	r0, #0
 8017094:	bfa8      	it	ge
 8017096:	4285      	cmpge	r5, r0
 8017098:	bfcc      	ite	gt
 801709a:	2401      	movgt	r4, #1
 801709c:	2400      	movle	r4, #0
 801709e:	4620      	mov	r0, r4
 80170a0:	b003      	add	sp, #12
 80170a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170a4:	08025468 	.word	0x08025468
 80170a8:	08025464 	.word	0x08025464
 80170ac:	08025448 	.word	0x08025448
 80170b0:	0802545c 	.word	0x0802545c
 80170b4:	08025458 	.word	0x08025458

080170b8 <generate_service_types>:
 80170b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170bc:	4606      	mov	r6, r0
 80170be:	b087      	sub	sp, #28
 80170c0:	461c      	mov	r4, r3
 80170c2:	6883      	ldr	r3, [r0, #8]
 80170c4:	460d      	mov	r5, r1
 80170c6:	4617      	mov	r7, r2
 80170c8:	4798      	blx	r3
 80170ca:	68f3      	ldr	r3, [r6, #12]
 80170cc:	4606      	mov	r6, r0
 80170ce:	4798      	blx	r3
 80170d0:	2300      	movs	r3, #0
 80170d2:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80170d6:	6872      	ldr	r2, [r6, #4]
 80170d8:	702b      	strb	r3, [r5, #0]
 80170da:	6813      	ldr	r3, [r2, #0]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d03f      	beq.n	8017160 <generate_service_types+0xa8>
 80170e0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017174 <generate_service_types+0xbc>
 80170e4:	4649      	mov	r1, r9
 80170e6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 801717c <generate_service_types+0xc4>
 80170ea:	4628      	mov	r0, r5
 80170ec:	f8df a090 	ldr.w	sl, [pc, #144]	; 8017180 <generate_service_types+0xc8>
 80170f0:	f8cd 8014 	str.w	r8, [sp, #20]
 80170f4:	6852      	ldr	r2, [r2, #4]
 80170f6:	9100      	str	r1, [sp, #0]
 80170f8:	4621      	mov	r1, r4
 80170fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80170fe:	f8cd a004 	str.w	sl, [sp, #4]
 8017102:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8017106:	4a1a      	ldr	r2, [pc, #104]	; (8017170 <generate_service_types+0xb8>)
 8017108:	f009 fcb0 	bl	8020a6c <sniprintf>
 801710c:	2300      	movs	r3, #0
 801710e:	42a0      	cmp	r0, r4
 8017110:	ea6f 0600 	mvn.w	r6, r0
 8017114:	703b      	strb	r3, [r7, #0]
 8017116:	f8db 3000 	ldr.w	r3, [fp]
 801711a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801711e:	bfac      	ite	ge
 8017120:	2500      	movge	r5, #0
 8017122:	2501      	movlt	r5, #1
 8017124:	b30b      	cbz	r3, 801716a <generate_service_types+0xb2>
 8017126:	4a13      	ldr	r2, [pc, #76]	; (8017174 <generate_service_types+0xbc>)
 8017128:	f8cd 8014 	str.w	r8, [sp, #20]
 801712c:	402e      	ands	r6, r5
 801712e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8017132:	4638      	mov	r0, r7
 8017134:	9104      	str	r1, [sp, #16]
 8017136:	4621      	mov	r1, r4
 8017138:	e9cd 2a00 	strd	r2, sl, [sp]
 801713c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017140:	4a0b      	ldr	r2, [pc, #44]	; (8017170 <generate_service_types+0xb8>)
 8017142:	f009 fc93 	bl	8020a6c <sniprintf>
 8017146:	2800      	cmp	r0, #0
 8017148:	bfb4      	ite	lt
 801714a:	2600      	movlt	r6, #0
 801714c:	f006 0601 	andge.w	r6, r6, #1
 8017150:	42a0      	cmp	r0, r4
 8017152:	bfac      	ite	ge
 8017154:	2000      	movge	r0, #0
 8017156:	f006 0001 	andlt.w	r0, r6, #1
 801715a:	b007      	add	sp, #28
 801715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017160:	4b05      	ldr	r3, [pc, #20]	; (8017178 <generate_service_types+0xc0>)
 8017162:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8017174 <generate_service_types+0xbc>
 8017166:	4619      	mov	r1, r3
 8017168:	e7bd      	b.n	80170e6 <generate_service_types+0x2e>
 801716a:	4b03      	ldr	r3, [pc, #12]	; (8017178 <generate_service_types+0xc0>)
 801716c:	461a      	mov	r2, r3
 801716e:	e7db      	b.n	8017128 <generate_service_types+0x70>
 8017170:	08025440 	.word	0x08025440
 8017174:	0802543c 	.word	0x0802543c
 8017178:	080254c0 	.word	0x080254c0
 801717c:	08025450 	.word	0x08025450
 8017180:	08025454 	.word	0x08025454

08017184 <generate_type_name>:
 8017184:	2300      	movs	r3, #0
 8017186:	b530      	push	{r4, r5, lr}
 8017188:	700b      	strb	r3, [r1, #0]
 801718a:	b087      	sub	sp, #28
 801718c:	6803      	ldr	r3, [r0, #0]
 801718e:	4614      	mov	r4, r2
 8017190:	b1bb      	cbz	r3, 80171c2 <generate_type_name+0x3e>
 8017192:	4a0e      	ldr	r2, [pc, #56]	; (80171cc <generate_type_name+0x48>)
 8017194:	4615      	mov	r5, r2
 8017196:	9500      	str	r5, [sp, #0]
 8017198:	9203      	str	r2, [sp, #12]
 801719a:	4d0d      	ldr	r5, [pc, #52]	; (80171d0 <generate_type_name+0x4c>)
 801719c:	6842      	ldr	r2, [r0, #4]
 801719e:	4608      	mov	r0, r1
 80171a0:	490c      	ldr	r1, [pc, #48]	; (80171d4 <generate_type_name+0x50>)
 80171a2:	9204      	str	r2, [sp, #16]
 80171a4:	9105      	str	r1, [sp, #20]
 80171a6:	9102      	str	r1, [sp, #8]
 80171a8:	4621      	mov	r1, r4
 80171aa:	4a0b      	ldr	r2, [pc, #44]	; (80171d8 <generate_type_name+0x54>)
 80171ac:	9501      	str	r5, [sp, #4]
 80171ae:	f009 fc5d 	bl	8020a6c <sniprintf>
 80171b2:	2800      	cmp	r0, #0
 80171b4:	bfa8      	it	ge
 80171b6:	4284      	cmpge	r4, r0
 80171b8:	bfcc      	ite	gt
 80171ba:	2001      	movgt	r0, #1
 80171bc:	2000      	movle	r0, #0
 80171be:	b007      	add	sp, #28
 80171c0:	bd30      	pop	{r4, r5, pc}
 80171c2:	4b06      	ldr	r3, [pc, #24]	; (80171dc <generate_type_name+0x58>)
 80171c4:	4a01      	ldr	r2, [pc, #4]	; (80171cc <generate_type_name+0x48>)
 80171c6:	461d      	mov	r5, r3
 80171c8:	e7e5      	b.n	8017196 <generate_type_name+0x12>
 80171ca:	bf00      	nop
 80171cc:	0802543c 	.word	0x0802543c
 80171d0:	08025454 	.word	0x08025454
 80171d4:	08025450 	.word	0x08025450
 80171d8:	08025440 	.word	0x08025440
 80171dc:	080254c0 	.word	0x080254c0

080171e0 <generate_topic_name>:
 80171e0:	b530      	push	{r4, r5, lr}
 80171e2:	4614      	mov	r4, r2
 80171e4:	b083      	sub	sp, #12
 80171e6:	4605      	mov	r5, r0
 80171e8:	4b07      	ldr	r3, [pc, #28]	; (8017208 <generate_topic_name+0x28>)
 80171ea:	4a08      	ldr	r2, [pc, #32]	; (801720c <generate_topic_name+0x2c>)
 80171ec:	4608      	mov	r0, r1
 80171ee:	9500      	str	r5, [sp, #0]
 80171f0:	4621      	mov	r1, r4
 80171f2:	f009 fc3b 	bl	8020a6c <sniprintf>
 80171f6:	2800      	cmp	r0, #0
 80171f8:	bfa8      	it	ge
 80171fa:	4284      	cmpge	r4, r0
 80171fc:	bfcc      	ite	gt
 80171fe:	2001      	movgt	r0, #1
 8017200:	2000      	movle	r0, #0
 8017202:	b003      	add	sp, #12
 8017204:	bd30      	pop	{r4, r5, pc}
 8017206:	bf00      	nop
 8017208:	08025470 	.word	0x08025470
 801720c:	08024e40 	.word	0x08024e40

08017210 <is_uxrce_rmw_identifier_valid>:
 8017210:	b510      	push	{r4, lr}
 8017212:	4604      	mov	r4, r0
 8017214:	b140      	cbz	r0, 8017228 <is_uxrce_rmw_identifier_valid+0x18>
 8017216:	f006 ff33 	bl	801e080 <rmw_get_implementation_identifier>
 801721a:	4601      	mov	r1, r0
 801721c:	4620      	mov	r0, r4
 801721e:	f7e9 f80f 	bl	8000240 <strcmp>
 8017222:	fab0 f080 	clz	r0, r0
 8017226:	0940      	lsrs	r0, r0, #5
 8017228:	bd10      	pop	{r4, pc}
 801722a:	bf00      	nop

0801722c <get_message_typesupport_handle>:
 801722c:	6883      	ldr	r3, [r0, #8]
 801722e:	4718      	bx	r3

08017230 <get_message_typesupport_handle_function>:
 8017230:	b510      	push	{r4, lr}
 8017232:	4604      	mov	r4, r0
 8017234:	6800      	ldr	r0, [r0, #0]
 8017236:	f7e9 f803 	bl	8000240 <strcmp>
 801723a:	2800      	cmp	r0, #0
 801723c:	bf0c      	ite	eq
 801723e:	4620      	moveq	r0, r4
 8017240:	2000      	movne	r0, #0
 8017242:	bd10      	pop	{r4, pc}

08017244 <get_service_typesupport_handle>:
 8017244:	6883      	ldr	r3, [r0, #8]
 8017246:	4718      	bx	r3

08017248 <get_service_typesupport_handle_function>:
 8017248:	b510      	push	{r4, lr}
 801724a:	4604      	mov	r4, r0
 801724c:	6800      	ldr	r0, [r0, #0]
 801724e:	f7e8 fff7 	bl	8000240 <strcmp>
 8017252:	2800      	cmp	r0, #0
 8017254:	bf0c      	ite	eq
 8017256:	4620      	moveq	r0, r4
 8017258:	2000      	movne	r0, #0
 801725a:	bd10      	pop	{r4, pc}

0801725c <rosidl_runtime_c__String__init>:
 801725c:	b510      	push	{r4, lr}
 801725e:	4604      	mov	r4, r0
 8017260:	b086      	sub	sp, #24
 8017262:	b170      	cbz	r0, 8017282 <rosidl_runtime_c__String__init+0x26>
 8017264:	a801      	add	r0, sp, #4
 8017266:	f7fd feef 	bl	8015048 <rcutils_get_default_allocator>
 801726a:	9b01      	ldr	r3, [sp, #4]
 801726c:	9905      	ldr	r1, [sp, #20]
 801726e:	2001      	movs	r0, #1
 8017270:	4798      	blx	r3
 8017272:	6020      	str	r0, [r4, #0]
 8017274:	b128      	cbz	r0, 8017282 <rosidl_runtime_c__String__init+0x26>
 8017276:	2100      	movs	r1, #0
 8017278:	2201      	movs	r2, #1
 801727a:	7001      	strb	r1, [r0, #0]
 801727c:	4610      	mov	r0, r2
 801727e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017282:	b006      	add	sp, #24
 8017284:	bd10      	pop	{r4, pc}
 8017286:	bf00      	nop

08017288 <rosidl_runtime_c__String__fini>:
 8017288:	b320      	cbz	r0, 80172d4 <rosidl_runtime_c__String__fini+0x4c>
 801728a:	6803      	ldr	r3, [r0, #0]
 801728c:	b510      	push	{r4, lr}
 801728e:	4604      	mov	r4, r0
 8017290:	b086      	sub	sp, #24
 8017292:	b173      	cbz	r3, 80172b2 <rosidl_runtime_c__String__fini+0x2a>
 8017294:	6883      	ldr	r3, [r0, #8]
 8017296:	b1f3      	cbz	r3, 80172d6 <rosidl_runtime_c__String__fini+0x4e>
 8017298:	a801      	add	r0, sp, #4
 801729a:	f7fd fed5 	bl	8015048 <rcutils_get_default_allocator>
 801729e:	9b02      	ldr	r3, [sp, #8]
 80172a0:	9905      	ldr	r1, [sp, #20]
 80172a2:	6820      	ldr	r0, [r4, #0]
 80172a4:	4798      	blx	r3
 80172a6:	2300      	movs	r3, #0
 80172a8:	e9c4 3300 	strd	r3, r3, [r4]
 80172ac:	60a3      	str	r3, [r4, #8]
 80172ae:	b006      	add	sp, #24
 80172b0:	bd10      	pop	{r4, pc}
 80172b2:	6843      	ldr	r3, [r0, #4]
 80172b4:	b9db      	cbnz	r3, 80172ee <rosidl_runtime_c__String__fini+0x66>
 80172b6:	6883      	ldr	r3, [r0, #8]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d0f8      	beq.n	80172ae <rosidl_runtime_c__String__fini+0x26>
 80172bc:	4b12      	ldr	r3, [pc, #72]	; (8017308 <rosidl_runtime_c__String__fini+0x80>)
 80172be:	2251      	movs	r2, #81	; 0x51
 80172c0:	2101      	movs	r1, #1
 80172c2:	4812      	ldr	r0, [pc, #72]	; (801730c <rosidl_runtime_c__String__fini+0x84>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	68db      	ldr	r3, [r3, #12]
 80172c8:	f009 faa6 	bl	8020818 <fwrite>
 80172cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172d0:	f008 f91e 	bl	801f510 <exit>
 80172d4:	4770      	bx	lr
 80172d6:	4b0c      	ldr	r3, [pc, #48]	; (8017308 <rosidl_runtime_c__String__fini+0x80>)
 80172d8:	224c      	movs	r2, #76	; 0x4c
 80172da:	2101      	movs	r1, #1
 80172dc:	480c      	ldr	r0, [pc, #48]	; (8017310 <rosidl_runtime_c__String__fini+0x88>)
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	68db      	ldr	r3, [r3, #12]
 80172e2:	f009 fa99 	bl	8020818 <fwrite>
 80172e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172ea:	f008 f911 	bl	801f510 <exit>
 80172ee:	4b06      	ldr	r3, [pc, #24]	; (8017308 <rosidl_runtime_c__String__fini+0x80>)
 80172f0:	224e      	movs	r2, #78	; 0x4e
 80172f2:	2101      	movs	r1, #1
 80172f4:	4807      	ldr	r0, [pc, #28]	; (8017314 <rosidl_runtime_c__String__fini+0x8c>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	68db      	ldr	r3, [r3, #12]
 80172fa:	f009 fa8d 	bl	8020818 <fwrite>
 80172fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017302:	f008 f905 	bl	801f510 <exit>
 8017306:	bf00      	nop
 8017308:	200009d8 	.word	0x200009d8
 801730c:	08025514 	.word	0x08025514
 8017310:	08025474 	.word	0x08025474
 8017314:	080254c4 	.word	0x080254c4

08017318 <rosidl_runtime_c__String__assignn>:
 8017318:	2900      	cmp	r1, #0
 801731a:	bf18      	it	ne
 801731c:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 8017320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017324:	bf0c      	ite	eq
 8017326:	2401      	moveq	r4, #1
 8017328:	2400      	movne	r4, #0
 801732a:	b087      	sub	sp, #28
 801732c:	2800      	cmp	r0, #0
 801732e:	bf08      	it	eq
 8017330:	f044 0401 	orreq.w	r4, r4, #1
 8017334:	b124      	cbz	r4, 8017340 <rosidl_runtime_c__String__assignn+0x28>
 8017336:	2400      	movs	r4, #0
 8017338:	4620      	mov	r0, r4
 801733a:	b007      	add	sp, #28
 801733c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017340:	4616      	mov	r6, r2
 8017342:	4605      	mov	r5, r0
 8017344:	a801      	add	r0, sp, #4
 8017346:	460f      	mov	r7, r1
 8017348:	f106 0901 	add.w	r9, r6, #1
 801734c:	f7fd fe7c 	bl	8015048 <rcutils_get_default_allocator>
 8017350:	9b03      	ldr	r3, [sp, #12]
 8017352:	9a05      	ldr	r2, [sp, #20]
 8017354:	4649      	mov	r1, r9
 8017356:	6828      	ldr	r0, [r5, #0]
 8017358:	4798      	blx	r3
 801735a:	4680      	mov	r8, r0
 801735c:	2800      	cmp	r0, #0
 801735e:	d0eb      	beq.n	8017338 <rosidl_runtime_c__String__assignn+0x20>
 8017360:	4639      	mov	r1, r7
 8017362:	4632      	mov	r2, r6
 8017364:	f009 fddf 	bl	8020f26 <memcpy>
 8017368:	f808 4006 	strb.w	r4, [r8, r6]
 801736c:	2401      	movs	r4, #1
 801736e:	f8c5 9008 	str.w	r9, [r5, #8]
 8017372:	4620      	mov	r0, r4
 8017374:	e9c5 8600 	strd	r8, r6, [r5]
 8017378:	b007      	add	sp, #28
 801737a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801737e:	bf00      	nop

08017380 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017384:	6805      	ldr	r5, [r0, #0]
 8017386:	4604      	mov	r4, r0
 8017388:	460e      	mov	r6, r1
 801738a:	4628      	mov	r0, r5
 801738c:	f7e8 ff58 	bl	8000240 <strcmp>
 8017390:	b1c8      	cbz	r0, 80173c6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8017392:	4b11      	ldr	r3, [pc, #68]	; (80173d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	429d      	cmp	r5, r3
 8017398:	d112      	bne.n	80173c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801739a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801739e:	f8d8 4000 	ldr.w	r4, [r8]
 80173a2:	b16c      	cbz	r4, 80173c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80173a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80173a8:	2700      	movs	r7, #0
 80173aa:	3d04      	subs	r5, #4
 80173ac:	4631      	mov	r1, r6
 80173ae:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80173b2:	f7e8 ff45 	bl	8000240 <strcmp>
 80173b6:	00bb      	lsls	r3, r7, #2
 80173b8:	b140      	cbz	r0, 80173cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80173ba:	3701      	adds	r7, #1
 80173bc:	42bc      	cmp	r4, r7
 80173be:	d1f5      	bne.n	80173ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80173c0:	2000      	movs	r0, #0
 80173c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c6:	4620      	mov	r0, r4
 80173c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80173d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173d4:	58d3      	ldr	r3, [r2, r3]
 80173d6:	4718      	bx	r3
 80173d8:	200008f4 	.word	0x200008f4

080173dc <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80173dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173e0:	6805      	ldr	r5, [r0, #0]
 80173e2:	4604      	mov	r4, r0
 80173e4:	460e      	mov	r6, r1
 80173e6:	4628      	mov	r0, r5
 80173e8:	f7e8 ff2a 	bl	8000240 <strcmp>
 80173ec:	b1c8      	cbz	r0, 8017422 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80173ee:	4b11      	ldr	r3, [pc, #68]	; (8017434 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	429d      	cmp	r5, r3
 80173f4:	d112      	bne.n	801741c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80173f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80173fa:	f8d8 4000 	ldr.w	r4, [r8]
 80173fe:	b16c      	cbz	r4, 801741c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017400:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017404:	2700      	movs	r7, #0
 8017406:	3d04      	subs	r5, #4
 8017408:	4631      	mov	r1, r6
 801740a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801740e:	f7e8 ff17 	bl	8000240 <strcmp>
 8017412:	00bb      	lsls	r3, r7, #2
 8017414:	b140      	cbz	r0, 8017428 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8017416:	3701      	adds	r7, #1
 8017418:	42bc      	cmp	r4, r7
 801741a:	d1f5      	bne.n	8017408 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 801741c:	2000      	movs	r0, #0
 801741e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017422:	4620      	mov	r0, r4
 8017424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017428:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801742c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017430:	58d3      	ldr	r3, [r2, r3]
 8017432:	4718      	bx	r3
 8017434:	200008f4 	.word	0x200008f4

08017438 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017438:	4b04      	ldr	r3, [pc, #16]	; (801744c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801743a:	681a      	ldr	r2, [r3, #0]
 801743c:	b10a      	cbz	r2, 8017442 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801743e:	4803      	ldr	r0, [pc, #12]	; (801744c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017440:	4770      	bx	lr
 8017442:	4a03      	ldr	r2, [pc, #12]	; (8017450 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8017444:	4801      	ldr	r0, [pc, #4]	; (801744c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017446:	6812      	ldr	r2, [r2, #0]
 8017448:	601a      	str	r2, [r3, #0]
 801744a:	4770      	bx	lr
 801744c:	20000904 	.word	0x20000904
 8017450:	200008f4 	.word	0x200008f4

08017454 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017454:	4a02      	ldr	r2, [pc, #8]	; (8017460 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 8017456:	4b03      	ldr	r3, [pc, #12]	; (8017464 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8017458:	6812      	ldr	r2, [r2, #0]
 801745a:	601a      	str	r2, [r3, #0]
 801745c:	4770      	bx	lr
 801745e:	bf00      	nop
 8017460:	200008f4 	.word	0x200008f4
 8017464:	20000904 	.word	0x20000904

08017468 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8017468:	f007 b83c 	b.w	801e4e4 <std_msgs__msg__String__init>

0801746c <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 801746c:	f007 b84c 	b.w	801e508 <std_msgs__msg__String__fini>

08017470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017470:	4b04      	ldr	r3, [pc, #16]	; (8017484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017472:	681a      	ldr	r2, [r3, #0]
 8017474:	b10a      	cbz	r2, 801747a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 8017476:	4803      	ldr	r0, [pc, #12]	; (8017484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017478:	4770      	bx	lr
 801747a:	4a03      	ldr	r2, [pc, #12]	; (8017488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 801747c:	4801      	ldr	r0, [pc, #4]	; (8017484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801747e:	6812      	ldr	r2, [r2, #0]
 8017480:	601a      	str	r2, [r3, #0]
 8017482:	4770      	bx	lr
 8017484:	2000094c 	.word	0x2000094c
 8017488:	200008f8 	.word	0x200008f8

0801748c <_String__max_serialized_size>:
 801748c:	2000      	movs	r0, #0
 801748e:	4770      	bx	lr

08017490 <_String__cdr_serialize>:
 8017490:	b1c8      	cbz	r0, 80174c6 <_String__cdr_serialize+0x36>
 8017492:	b570      	push	{r4, r5, r6, lr}
 8017494:	6806      	ldr	r6, [r0, #0]
 8017496:	4604      	mov	r4, r0
 8017498:	460d      	mov	r5, r1
 801749a:	b15e      	cbz	r6, 80174b4 <_String__cdr_serialize+0x24>
 801749c:	4630      	mov	r0, r6
 801749e:	f7e8 ff2f 	bl	8000300 <strlen>
 80174a2:	4603      	mov	r3, r0
 80174a4:	1c42      	adds	r2, r0, #1
 80174a6:	4631      	mov	r1, r6
 80174a8:	4628      	mov	r0, r5
 80174aa:	6063      	str	r3, [r4, #4]
 80174ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174b0:	f7fb bf76 	b.w	80133a0 <ucdr_serialize_sequence_char>
 80174b4:	4633      	mov	r3, r6
 80174b6:	4632      	mov	r2, r6
 80174b8:	4631      	mov	r1, r6
 80174ba:	4628      	mov	r0, r5
 80174bc:	6063      	str	r3, [r4, #4]
 80174be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174c2:	f7fb bf6d 	b.w	80133a0 <ucdr_serialize_sequence_char>
 80174c6:	4770      	bx	lr

080174c8 <get_serialized_size_std_msgs__msg__String>:
 80174c8:	b510      	push	{r4, lr}
 80174ca:	4604      	mov	r4, r0
 80174cc:	b130      	cbz	r0, 80174dc <get_serialized_size_std_msgs__msg__String+0x14>
 80174ce:	4608      	mov	r0, r1
 80174d0:	2104      	movs	r1, #4
 80174d2:	f7fb fef5 	bl	80132c0 <ucdr_alignment>
 80174d6:	6863      	ldr	r3, [r4, #4]
 80174d8:	3305      	adds	r3, #5
 80174da:	4418      	add	r0, r3
 80174dc:	bd10      	pop	{r4, pc}
 80174de:	bf00      	nop

080174e0 <_String__cdr_deserialize>:
 80174e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174e2:	460c      	mov	r4, r1
 80174e4:	b083      	sub	sp, #12
 80174e6:	b1a1      	cbz	r1, 8017512 <_String__cdr_deserialize+0x32>
 80174e8:	688f      	ldr	r7, [r1, #8]
 80174ea:	ab01      	add	r3, sp, #4
 80174ec:	6809      	ldr	r1, [r1, #0]
 80174ee:	4606      	mov	r6, r0
 80174f0:	463a      	mov	r2, r7
 80174f2:	f7fb ff67 	bl	80133c4 <ucdr_deserialize_sequence_char>
 80174f6:	9b01      	ldr	r3, [sp, #4]
 80174f8:	4605      	mov	r5, r0
 80174fa:	b920      	cbnz	r0, 8017506 <_String__cdr_deserialize+0x26>
 80174fc:	429f      	cmp	r7, r3
 80174fe:	d30c      	bcc.n	801751a <_String__cdr_deserialize+0x3a>
 8017500:	4628      	mov	r0, r5
 8017502:	b003      	add	sp, #12
 8017504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017506:	b103      	cbz	r3, 801750a <_String__cdr_deserialize+0x2a>
 8017508:	3b01      	subs	r3, #1
 801750a:	4628      	mov	r0, r5
 801750c:	6063      	str	r3, [r4, #4]
 801750e:	b003      	add	sp, #12
 8017510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017512:	460d      	mov	r5, r1
 8017514:	4628      	mov	r0, r5
 8017516:	b003      	add	sp, #12
 8017518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801751a:	2101      	movs	r1, #1
 801751c:	4630      	mov	r0, r6
 801751e:	75b5      	strb	r5, [r6, #22]
 8017520:	7571      	strb	r1, [r6, #21]
 8017522:	6065      	str	r5, [r4, #4]
 8017524:	f7fb fee4 	bl	80132f0 <ucdr_align_to>
 8017528:	4630      	mov	r0, r6
 801752a:	9901      	ldr	r1, [sp, #4]
 801752c:	f7fb ff18 	bl	8013360 <ucdr_advance_buffer>
 8017530:	4628      	mov	r0, r5
 8017532:	b003      	add	sp, #12
 8017534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017536:	bf00      	nop

08017538 <_String__get_serialized_size>:
 8017538:	b510      	push	{r4, lr}
 801753a:	4604      	mov	r4, r0
 801753c:	b130      	cbz	r0, 801754c <_String__get_serialized_size+0x14>
 801753e:	2104      	movs	r1, #4
 8017540:	2000      	movs	r0, #0
 8017542:	f7fb febd 	bl	80132c0 <ucdr_alignment>
 8017546:	6863      	ldr	r3, [r4, #4]
 8017548:	3305      	adds	r3, #5
 801754a:	4418      	add	r0, r3
 801754c:	bd10      	pop	{r4, pc}
 801754e:	bf00      	nop

08017550 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017550:	4800      	ldr	r0, [pc, #0]	; (8017554 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8017552:	4770      	bx	lr
 8017554:	20000958 	.word	0x20000958

08017558 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 8017558:	3800      	subs	r0, #0
 801755a:	bf18      	it	ne
 801755c:	2001      	movne	r0, #1
 801755e:	4770      	bx	lr

08017560 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 8017560:	4770      	bx	lr
 8017562:	bf00      	nop

08017564 <custom_test_msgs__srv__AddThreeInts_Response__init>:
 8017564:	3800      	subs	r0, #0
 8017566:	bf18      	it	ne
 8017568:	2001      	movne	r0, #1
 801756a:	4770      	bx	lr

0801756c <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 801756c:	4770      	bx	lr
 801756e:	bf00      	nop

08017570 <drive_msgs__msg__Omni__init>:
 8017570:	b538      	push	{r3, r4, r5, lr}
 8017572:	4604      	mov	r4, r0
 8017574:	b128      	cbz	r0, 8017582 <drive_msgs__msg__Omni__init+0x12>
 8017576:	f7ff fe71 	bl	801725c <rosidl_runtime_c__String__init>
 801757a:	4605      	mov	r5, r0
 801757c:	b120      	cbz	r0, 8017588 <drive_msgs__msg__Omni__init+0x18>
 801757e:	4628      	mov	r0, r5
 8017580:	bd38      	pop	{r3, r4, r5, pc}
 8017582:	4605      	mov	r5, r0
 8017584:	4628      	mov	r0, r5
 8017586:	bd38      	pop	{r3, r4, r5, pc}
 8017588:	4620      	mov	r0, r4
 801758a:	f7ff fe7d 	bl	8017288 <rosidl_runtime_c__String__fini>
 801758e:	4628      	mov	r0, r5
 8017590:	bd38      	pop	{r3, r4, r5, pc}
 8017592:	bf00      	nop

08017594 <drive_msgs__msg__Omni__fini>:
 8017594:	b108      	cbz	r0, 801759a <drive_msgs__msg__Omni__fini+0x6>
 8017596:	f7ff be77 	b.w	8017288 <rosidl_runtime_c__String__fini>
 801759a:	4770      	bx	lr

0801759c <drive_msgs__msg__OmniEnc__init>:
 801759c:	b538      	push	{r3, r4, r5, lr}
 801759e:	4604      	mov	r4, r0
 80175a0:	b128      	cbz	r0, 80175ae <drive_msgs__msg__OmniEnc__init+0x12>
 80175a2:	f7ff fe5b 	bl	801725c <rosidl_runtime_c__String__init>
 80175a6:	4605      	mov	r5, r0
 80175a8:	b120      	cbz	r0, 80175b4 <drive_msgs__msg__OmniEnc__init+0x18>
 80175aa:	4628      	mov	r0, r5
 80175ac:	bd38      	pop	{r3, r4, r5, pc}
 80175ae:	4605      	mov	r5, r0
 80175b0:	4628      	mov	r0, r5
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	4620      	mov	r0, r4
 80175b6:	f7ff fe67 	bl	8017288 <rosidl_runtime_c__String__fini>
 80175ba:	4628      	mov	r0, r5
 80175bc:	bd38      	pop	{r3, r4, r5, pc}
 80175be:	bf00      	nop

080175c0 <drive_msgs__msg__OmniEnc__fini>:
 80175c0:	b108      	cbz	r0, 80175c6 <drive_msgs__msg__OmniEnc__fini+0x6>
 80175c2:	f7ff be61 	b.w	8017288 <rosidl_runtime_c__String__fini>
 80175c6:	4770      	bx	lr

080175c8 <manip_msgs__msg__Cmd__init>:
 80175c8:	3800      	subs	r0, #0
 80175ca:	bf18      	it	ne
 80175cc:	2001      	movne	r0, #1
 80175ce:	4770      	bx	lr

080175d0 <manip_msgs__msg__Cmd__fini>:
 80175d0:	4770      	bx	lr
 80175d2:	bf00      	nop

080175d4 <ucdr_serialize_endian_array_char>:
 80175d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175d8:	4619      	mov	r1, r3
 80175da:	461f      	mov	r7, r3
 80175dc:	4605      	mov	r5, r0
 80175de:	4690      	mov	r8, r2
 80175e0:	f7fb fe16 	bl	8013210 <ucdr_check_buffer_available_for>
 80175e4:	b9e0      	cbnz	r0, 8017620 <ucdr_serialize_endian_array_char+0x4c>
 80175e6:	463e      	mov	r6, r7
 80175e8:	e00b      	b.n	8017602 <ucdr_serialize_endian_array_char+0x2e>
 80175ea:	4441      	add	r1, r8
 80175ec:	68a8      	ldr	r0, [r5, #8]
 80175ee:	4622      	mov	r2, r4
 80175f0:	1b36      	subs	r6, r6, r4
 80175f2:	f009 fc98 	bl	8020f26 <memcpy>
 80175f6:	68ab      	ldr	r3, [r5, #8]
 80175f8:	6928      	ldr	r0, [r5, #16]
 80175fa:	4423      	add	r3, r4
 80175fc:	4420      	add	r0, r4
 80175fe:	60ab      	str	r3, [r5, #8]
 8017600:	6128      	str	r0, [r5, #16]
 8017602:	4631      	mov	r1, r6
 8017604:	2201      	movs	r2, #1
 8017606:	4628      	mov	r0, r5
 8017608:	f7fb fe8c 	bl	8013324 <ucdr_check_final_buffer_behavior_array>
 801760c:	1bb9      	subs	r1, r7, r6
 801760e:	4604      	mov	r4, r0
 8017610:	2800      	cmp	r0, #0
 8017612:	d1ea      	bne.n	80175ea <ucdr_serialize_endian_array_char+0x16>
 8017614:	2301      	movs	r3, #1
 8017616:	7da8      	ldrb	r0, [r5, #22]
 8017618:	756b      	strb	r3, [r5, #21]
 801761a:	4058      	eors	r0, r3
 801761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017620:	463a      	mov	r2, r7
 8017622:	4641      	mov	r1, r8
 8017624:	68a8      	ldr	r0, [r5, #8]
 8017626:	f009 fc7e 	bl	8020f26 <memcpy>
 801762a:	68aa      	ldr	r2, [r5, #8]
 801762c:	692b      	ldr	r3, [r5, #16]
 801762e:	443a      	add	r2, r7
 8017630:	443b      	add	r3, r7
 8017632:	60aa      	str	r2, [r5, #8]
 8017634:	612b      	str	r3, [r5, #16]
 8017636:	e7ed      	b.n	8017614 <ucdr_serialize_endian_array_char+0x40>

08017638 <ucdr_deserialize_endian_array_char>:
 8017638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801763c:	4619      	mov	r1, r3
 801763e:	461f      	mov	r7, r3
 8017640:	4605      	mov	r5, r0
 8017642:	4690      	mov	r8, r2
 8017644:	f7fb fde4 	bl	8013210 <ucdr_check_buffer_available_for>
 8017648:	b9e8      	cbnz	r0, 8017686 <ucdr_deserialize_endian_array_char+0x4e>
 801764a:	463e      	mov	r6, r7
 801764c:	e00c      	b.n	8017668 <ucdr_deserialize_endian_array_char+0x30>
 801764e:	eb08 0003 	add.w	r0, r8, r3
 8017652:	68a9      	ldr	r1, [r5, #8]
 8017654:	4622      	mov	r2, r4
 8017656:	1b36      	subs	r6, r6, r4
 8017658:	f009 fc65 	bl	8020f26 <memcpy>
 801765c:	68ab      	ldr	r3, [r5, #8]
 801765e:	6928      	ldr	r0, [r5, #16]
 8017660:	4423      	add	r3, r4
 8017662:	4420      	add	r0, r4
 8017664:	60ab      	str	r3, [r5, #8]
 8017666:	6128      	str	r0, [r5, #16]
 8017668:	4631      	mov	r1, r6
 801766a:	2201      	movs	r2, #1
 801766c:	4628      	mov	r0, r5
 801766e:	f7fb fe59 	bl	8013324 <ucdr_check_final_buffer_behavior_array>
 8017672:	1bbb      	subs	r3, r7, r6
 8017674:	4604      	mov	r4, r0
 8017676:	2800      	cmp	r0, #0
 8017678:	d1e9      	bne.n	801764e <ucdr_deserialize_endian_array_char+0x16>
 801767a:	2301      	movs	r3, #1
 801767c:	7da8      	ldrb	r0, [r5, #22]
 801767e:	756b      	strb	r3, [r5, #21]
 8017680:	4058      	eors	r0, r3
 8017682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017686:	463a      	mov	r2, r7
 8017688:	68a9      	ldr	r1, [r5, #8]
 801768a:	4640      	mov	r0, r8
 801768c:	f009 fc4b 	bl	8020f26 <memcpy>
 8017690:	68aa      	ldr	r2, [r5, #8]
 8017692:	692b      	ldr	r3, [r5, #16]
 8017694:	443a      	add	r2, r7
 8017696:	443b      	add	r3, r7
 8017698:	60aa      	str	r2, [r5, #8]
 801769a:	612b      	str	r3, [r5, #16]
 801769c:	e7ed      	b.n	801767a <ucdr_deserialize_endian_array_char+0x42>
 801769e:	bf00      	nop

080176a0 <ucdr_serialize_array_uint8_t>:
 80176a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176a4:	4688      	mov	r8, r1
 80176a6:	4611      	mov	r1, r2
 80176a8:	4617      	mov	r7, r2
 80176aa:	4605      	mov	r5, r0
 80176ac:	f7fb fdb0 	bl	8013210 <ucdr_check_buffer_available_for>
 80176b0:	b9e0      	cbnz	r0, 80176ec <ucdr_serialize_array_uint8_t+0x4c>
 80176b2:	463e      	mov	r6, r7
 80176b4:	e00b      	b.n	80176ce <ucdr_serialize_array_uint8_t+0x2e>
 80176b6:	4441      	add	r1, r8
 80176b8:	68a8      	ldr	r0, [r5, #8]
 80176ba:	4622      	mov	r2, r4
 80176bc:	1b36      	subs	r6, r6, r4
 80176be:	f009 fc32 	bl	8020f26 <memcpy>
 80176c2:	68ab      	ldr	r3, [r5, #8]
 80176c4:	6928      	ldr	r0, [r5, #16]
 80176c6:	4423      	add	r3, r4
 80176c8:	4420      	add	r0, r4
 80176ca:	60ab      	str	r3, [r5, #8]
 80176cc:	6128      	str	r0, [r5, #16]
 80176ce:	4631      	mov	r1, r6
 80176d0:	2201      	movs	r2, #1
 80176d2:	4628      	mov	r0, r5
 80176d4:	f7fb fe26 	bl	8013324 <ucdr_check_final_buffer_behavior_array>
 80176d8:	1bb9      	subs	r1, r7, r6
 80176da:	4604      	mov	r4, r0
 80176dc:	2800      	cmp	r0, #0
 80176de:	d1ea      	bne.n	80176b6 <ucdr_serialize_array_uint8_t+0x16>
 80176e0:	2301      	movs	r3, #1
 80176e2:	7da8      	ldrb	r0, [r5, #22]
 80176e4:	756b      	strb	r3, [r5, #21]
 80176e6:	4058      	eors	r0, r3
 80176e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ec:	463a      	mov	r2, r7
 80176ee:	4641      	mov	r1, r8
 80176f0:	68a8      	ldr	r0, [r5, #8]
 80176f2:	f009 fc18 	bl	8020f26 <memcpy>
 80176f6:	68aa      	ldr	r2, [r5, #8]
 80176f8:	692b      	ldr	r3, [r5, #16]
 80176fa:	443a      	add	r2, r7
 80176fc:	443b      	add	r3, r7
 80176fe:	60aa      	str	r2, [r5, #8]
 8017700:	612b      	str	r3, [r5, #16]
 8017702:	e7ed      	b.n	80176e0 <ucdr_serialize_array_uint8_t+0x40>

08017704 <ucdr_serialize_endian_array_uint8_t>:
 8017704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017708:	4619      	mov	r1, r3
 801770a:	461f      	mov	r7, r3
 801770c:	4605      	mov	r5, r0
 801770e:	4690      	mov	r8, r2
 8017710:	f7fb fd7e 	bl	8013210 <ucdr_check_buffer_available_for>
 8017714:	b9e0      	cbnz	r0, 8017750 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017716:	463e      	mov	r6, r7
 8017718:	e00b      	b.n	8017732 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801771a:	4441      	add	r1, r8
 801771c:	68a8      	ldr	r0, [r5, #8]
 801771e:	4622      	mov	r2, r4
 8017720:	1b36      	subs	r6, r6, r4
 8017722:	f009 fc00 	bl	8020f26 <memcpy>
 8017726:	68ab      	ldr	r3, [r5, #8]
 8017728:	6928      	ldr	r0, [r5, #16]
 801772a:	4423      	add	r3, r4
 801772c:	4420      	add	r0, r4
 801772e:	60ab      	str	r3, [r5, #8]
 8017730:	6128      	str	r0, [r5, #16]
 8017732:	4631      	mov	r1, r6
 8017734:	2201      	movs	r2, #1
 8017736:	4628      	mov	r0, r5
 8017738:	f7fb fdf4 	bl	8013324 <ucdr_check_final_buffer_behavior_array>
 801773c:	1bb9      	subs	r1, r7, r6
 801773e:	4604      	mov	r4, r0
 8017740:	2800      	cmp	r0, #0
 8017742:	d1ea      	bne.n	801771a <ucdr_serialize_endian_array_uint8_t+0x16>
 8017744:	2301      	movs	r3, #1
 8017746:	7da8      	ldrb	r0, [r5, #22]
 8017748:	756b      	strb	r3, [r5, #21]
 801774a:	4058      	eors	r0, r3
 801774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017750:	463a      	mov	r2, r7
 8017752:	4641      	mov	r1, r8
 8017754:	68a8      	ldr	r0, [r5, #8]
 8017756:	f009 fbe6 	bl	8020f26 <memcpy>
 801775a:	68aa      	ldr	r2, [r5, #8]
 801775c:	692b      	ldr	r3, [r5, #16]
 801775e:	443a      	add	r2, r7
 8017760:	443b      	add	r3, r7
 8017762:	60aa      	str	r2, [r5, #8]
 8017764:	612b      	str	r3, [r5, #16]
 8017766:	e7ed      	b.n	8017744 <ucdr_serialize_endian_array_uint8_t+0x40>

08017768 <ucdr_deserialize_array_uint8_t>:
 8017768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801776c:	4688      	mov	r8, r1
 801776e:	4611      	mov	r1, r2
 8017770:	4617      	mov	r7, r2
 8017772:	4605      	mov	r5, r0
 8017774:	f7fb fd4c 	bl	8013210 <ucdr_check_buffer_available_for>
 8017778:	b9e8      	cbnz	r0, 80177b6 <ucdr_deserialize_array_uint8_t+0x4e>
 801777a:	463e      	mov	r6, r7
 801777c:	e00c      	b.n	8017798 <ucdr_deserialize_array_uint8_t+0x30>
 801777e:	eb08 0003 	add.w	r0, r8, r3
 8017782:	68a9      	ldr	r1, [r5, #8]
 8017784:	4622      	mov	r2, r4
 8017786:	1b36      	subs	r6, r6, r4
 8017788:	f009 fbcd 	bl	8020f26 <memcpy>
 801778c:	68ab      	ldr	r3, [r5, #8]
 801778e:	6928      	ldr	r0, [r5, #16]
 8017790:	4423      	add	r3, r4
 8017792:	4420      	add	r0, r4
 8017794:	60ab      	str	r3, [r5, #8]
 8017796:	6128      	str	r0, [r5, #16]
 8017798:	4631      	mov	r1, r6
 801779a:	2201      	movs	r2, #1
 801779c:	4628      	mov	r0, r5
 801779e:	f7fb fdc1 	bl	8013324 <ucdr_check_final_buffer_behavior_array>
 80177a2:	1bbb      	subs	r3, r7, r6
 80177a4:	4604      	mov	r4, r0
 80177a6:	2800      	cmp	r0, #0
 80177a8:	d1e9      	bne.n	801777e <ucdr_deserialize_array_uint8_t+0x16>
 80177aa:	2301      	movs	r3, #1
 80177ac:	7da8      	ldrb	r0, [r5, #22]
 80177ae:	756b      	strb	r3, [r5, #21]
 80177b0:	4058      	eors	r0, r3
 80177b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177b6:	463a      	mov	r2, r7
 80177b8:	68a9      	ldr	r1, [r5, #8]
 80177ba:	4640      	mov	r0, r8
 80177bc:	f009 fbb3 	bl	8020f26 <memcpy>
 80177c0:	68aa      	ldr	r2, [r5, #8]
 80177c2:	692b      	ldr	r3, [r5, #16]
 80177c4:	443a      	add	r2, r7
 80177c6:	443b      	add	r3, r7
 80177c8:	60aa      	str	r2, [r5, #8]
 80177ca:	612b      	str	r3, [r5, #16]
 80177cc:	e7ed      	b.n	80177aa <ucdr_deserialize_array_uint8_t+0x42>
 80177ce:	bf00      	nop

080177d0 <ucdr_deserialize_endian_array_uint8_t>:
 80177d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d4:	4619      	mov	r1, r3
 80177d6:	461f      	mov	r7, r3
 80177d8:	4605      	mov	r5, r0
 80177da:	4690      	mov	r8, r2
 80177dc:	f7fb fd18 	bl	8013210 <ucdr_check_buffer_available_for>
 80177e0:	b9e8      	cbnz	r0, 801781e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 80177e2:	463e      	mov	r6, r7
 80177e4:	e00c      	b.n	8017800 <ucdr_deserialize_endian_array_uint8_t+0x30>
 80177e6:	eb08 0003 	add.w	r0, r8, r3
 80177ea:	68a9      	ldr	r1, [r5, #8]
 80177ec:	4622      	mov	r2, r4
 80177ee:	1b36      	subs	r6, r6, r4
 80177f0:	f009 fb99 	bl	8020f26 <memcpy>
 80177f4:	68ab      	ldr	r3, [r5, #8]
 80177f6:	6928      	ldr	r0, [r5, #16]
 80177f8:	4423      	add	r3, r4
 80177fa:	4420      	add	r0, r4
 80177fc:	60ab      	str	r3, [r5, #8]
 80177fe:	6128      	str	r0, [r5, #16]
 8017800:	4631      	mov	r1, r6
 8017802:	2201      	movs	r2, #1
 8017804:	4628      	mov	r0, r5
 8017806:	f7fb fd8d 	bl	8013324 <ucdr_check_final_buffer_behavior_array>
 801780a:	1bbb      	subs	r3, r7, r6
 801780c:	4604      	mov	r4, r0
 801780e:	2800      	cmp	r0, #0
 8017810:	d1e9      	bne.n	80177e6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017812:	2301      	movs	r3, #1
 8017814:	7da8      	ldrb	r0, [r5, #22]
 8017816:	756b      	strb	r3, [r5, #21]
 8017818:	4058      	eors	r0, r3
 801781a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801781e:	463a      	mov	r2, r7
 8017820:	68a9      	ldr	r1, [r5, #8]
 8017822:	4640      	mov	r0, r8
 8017824:	f009 fb7f 	bl	8020f26 <memcpy>
 8017828:	68aa      	ldr	r2, [r5, #8]
 801782a:	692b      	ldr	r3, [r5, #16]
 801782c:	443a      	add	r2, r7
 801782e:	443b      	add	r3, r7
 8017830:	60aa      	str	r2, [r5, #8]
 8017832:	612b      	str	r3, [r5, #16]
 8017834:	e7ed      	b.n	8017812 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8017836:	bf00      	nop

08017838 <uxr_buffer_delete_entity>:
 8017838:	b510      	push	{r4, lr}
 801783a:	2300      	movs	r3, #0
 801783c:	b08e      	sub	sp, #56	; 0x38
 801783e:	4604      	mov	r4, r0
 8017840:	9103      	str	r1, [sp, #12]
 8017842:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017846:	2303      	movs	r3, #3
 8017848:	2204      	movs	r2, #4
 801784a:	9300      	str	r3, [sp, #0]
 801784c:	ab06      	add	r3, sp, #24
 801784e:	f001 fb77 	bl	8018f40 <uxr_prepare_stream_to_write_submessage>
 8017852:	b918      	cbnz	r0, 801785c <uxr_buffer_delete_entity+0x24>
 8017854:	4604      	mov	r4, r0
 8017856:	4620      	mov	r0, r4
 8017858:	b00e      	add	sp, #56	; 0x38
 801785a:	bd10      	pop	{r4, pc}
 801785c:	9902      	ldr	r1, [sp, #8]
 801785e:	aa05      	add	r2, sp, #20
 8017860:	4620      	mov	r0, r4
 8017862:	f001 fca9 	bl	80191b8 <uxr_init_base_object_request>
 8017866:	4604      	mov	r4, r0
 8017868:	a905      	add	r1, sp, #20
 801786a:	a806      	add	r0, sp, #24
 801786c:	f003 fbae 	bl	801afcc <uxr_serialize_DELETE_Payload>
 8017870:	4620      	mov	r0, r4
 8017872:	b00e      	add	sp, #56	; 0x38
 8017874:	bd10      	pop	{r4, pc}
 8017876:	bf00      	nop

08017878 <uxr_common_create_entity>:
 8017878:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801787c:	b510      	push	{r4, lr}
 801787e:	f1bc 0f01 	cmp.w	ip, #1
 8017882:	b08c      	sub	sp, #48	; 0x30
 8017884:	4604      	mov	r4, r0
 8017886:	9202      	str	r2, [sp, #8]
 8017888:	bf0c      	ite	eq
 801788a:	f003 0201 	andeq.w	r2, r3, #1
 801788e:	2200      	movne	r2, #0
 8017890:	330e      	adds	r3, #14
 8017892:	9103      	str	r1, [sp, #12]
 8017894:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8017898:	441a      	add	r2, r3
 801789a:	ab04      	add	r3, sp, #16
 801789c:	9101      	str	r1, [sp, #4]
 801789e:	2101      	movs	r1, #1
 80178a0:	b292      	uxth	r2, r2
 80178a2:	9100      	str	r1, [sp, #0]
 80178a4:	9903      	ldr	r1, [sp, #12]
 80178a6:	f001 fb4b 	bl	8018f40 <uxr_prepare_stream_to_write_submessage>
 80178aa:	b918      	cbnz	r0, 80178b4 <uxr_common_create_entity+0x3c>
 80178ac:	4604      	mov	r4, r0
 80178ae:	4620      	mov	r0, r4
 80178b0:	b00c      	add	sp, #48	; 0x30
 80178b2:	bd10      	pop	{r4, pc}
 80178b4:	9902      	ldr	r1, [sp, #8]
 80178b6:	4620      	mov	r0, r4
 80178b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178ba:	f001 fc7d 	bl	80191b8 <uxr_init_base_object_request>
 80178be:	4604      	mov	r4, r0
 80178c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80178c2:	a804      	add	r0, sp, #16
 80178c4:	f003 fadc 	bl	801ae80 <uxr_serialize_CREATE_Payload>
 80178c8:	4620      	mov	r0, r4
 80178ca:	b00c      	add	sp, #48	; 0x30
 80178cc:	bd10      	pop	{r4, pc}
 80178ce:	bf00      	nop

080178d0 <uxr_buffer_create_participant_bin>:
 80178d0:	b570      	push	{r4, r5, r6, lr}
 80178d2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80178d6:	4605      	mov	r5, r0
 80178d8:	ac11      	add	r4, sp, #68	; 0x44
 80178da:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 80178de:	2303      	movs	r3, #3
 80178e0:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 80178e4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80178e8:	7223      	strb	r3, [r4, #8]
 80178ea:	2300      	movs	r3, #0
 80178ec:	2201      	movs	r2, #1
 80178ee:	f88d 3014 	strb.w	r3, [sp, #20]
 80178f2:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 80178f4:	7122      	strb	r2, [r4, #4]
 80178f6:	b1cb      	cbz	r3, 801792c <uxr_buffer_create_participant_bin+0x5c>
 80178f8:	f88d 201c 	strb.w	r2, [sp, #28]
 80178fc:	9308      	str	r3, [sp, #32]
 80178fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017902:	a915      	add	r1, sp, #84	; 0x54
 8017904:	a809      	add	r0, sp, #36	; 0x24
 8017906:	f7fb fcd7 	bl	80132b8 <ucdr_init_buffer>
 801790a:	a905      	add	r1, sp, #20
 801790c:	a809      	add	r0, sp, #36	; 0x24
 801790e:	f002 fe6d 	bl	801a5ec <uxr_serialize_OBJK_DomainParticipant_Binary>
 8017912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017914:	9600      	str	r6, [sp, #0]
 8017916:	4628      	mov	r0, r5
 8017918:	9401      	str	r4, [sp, #4]
 801791a:	60e3      	str	r3, [r4, #12]
 801791c:	b29b      	uxth	r3, r3
 801791e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017922:	f7ff ffa9 	bl	8017878 <uxr_common_create_entity>
 8017926:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 801792a:	bd70      	pop	{r4, r5, r6, pc}
 801792c:	f88d 301c 	strb.w	r3, [sp, #28]
 8017930:	e7e5      	b.n	80178fe <uxr_buffer_create_participant_bin+0x2e>
 8017932:	bf00      	nop

08017934 <uxr_buffer_create_topic_bin>:
 8017934:	b570      	push	{r4, r5, r6, lr}
 8017936:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801793a:	4605      	mov	r5, r0
 801793c:	4618      	mov	r0, r3
 801793e:	9105      	str	r1, [sp, #20]
 8017940:	a997      	add	r1, sp, #604	; 0x25c
 8017942:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8017946:	ac13      	add	r4, sp, #76	; 0x4c
 8017948:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801794c:	2302      	movs	r3, #2
 801794e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8017952:	f000 fa8d 	bl	8017e70 <uxr_object_id_to_raw>
 8017956:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8017958:	f44f 7200 	mov.w	r2, #512	; 0x200
 801795c:	a917      	add	r1, sp, #92	; 0x5c
 801795e:	a80b      	add	r0, sp, #44	; 0x2c
 8017960:	9306      	str	r3, [sp, #24]
 8017962:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8017964:	930a      	str	r3, [sp, #40]	; 0x28
 8017966:	2303      	movs	r3, #3
 8017968:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801796c:	2301      	movs	r3, #1
 801796e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017972:	2300      	movs	r3, #0
 8017974:	f88d 301c 	strb.w	r3, [sp, #28]
 8017978:	f7fb fc9e 	bl	80132b8 <ucdr_init_buffer>
 801797c:	a906      	add	r1, sp, #24
 801797e:	a80b      	add	r0, sp, #44	; 0x2c
 8017980:	f002 fe56 	bl	801a630 <uxr_serialize_OBJK_Topic_Binary>
 8017984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017986:	4628      	mov	r0, r5
 8017988:	9600      	str	r6, [sp, #0]
 801798a:	9316      	str	r3, [sp, #88]	; 0x58
 801798c:	b29b      	uxth	r3, r3
 801798e:	9401      	str	r4, [sp, #4]
 8017990:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017994:	f7ff ff70 	bl	8017878 <uxr_common_create_entity>
 8017998:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 801799c:	bd70      	pop	{r4, r5, r6, pc}
 801799e:	bf00      	nop

080179a0 <uxr_buffer_create_publisher_bin>:
 80179a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179a2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80179a6:	2603      	movs	r6, #3
 80179a8:	4605      	mov	r5, r0
 80179aa:	4618      	mov	r0, r3
 80179ac:	9105      	str	r1, [sp, #20]
 80179ae:	a992      	add	r1, sp, #584	; 0x248
 80179b0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80179b4:	ac0e      	add	r4, sp, #56	; 0x38
 80179b6:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80179ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80179be:	f000 fa57 	bl	8017e70 <uxr_object_id_to_raw>
 80179c2:	2300      	movs	r3, #0
 80179c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80179c8:	a912      	add	r1, sp, #72	; 0x48
 80179ca:	a806      	add	r0, sp, #24
 80179cc:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80179d0:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80179d4:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 80179d8:	f7fb fc6e 	bl	80132b8 <ucdr_init_buffer>
 80179dc:	a993      	add	r1, sp, #588	; 0x24c
 80179de:	a806      	add	r0, sp, #24
 80179e0:	f002 feda 	bl	801a798 <uxr_serialize_OBJK_Publisher_Binary>
 80179e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179e6:	4628      	mov	r0, r5
 80179e8:	9700      	str	r7, [sp, #0]
 80179ea:	9311      	str	r3, [sp, #68]	; 0x44
 80179ec:	b29b      	uxth	r3, r3
 80179ee:	9401      	str	r4, [sp, #4]
 80179f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80179f4:	f7ff ff40 	bl	8017878 <uxr_common_create_entity>
 80179f8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80179fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179fe:	bf00      	nop

08017a00 <uxr_buffer_create_subscriber_bin>:
 8017a00:	b570      	push	{r4, r5, r6, lr}
 8017a02:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8017a06:	4605      	mov	r5, r0
 8017a08:	4618      	mov	r0, r3
 8017a0a:	9105      	str	r1, [sp, #20]
 8017a0c:	a992      	add	r1, sp, #584	; 0x248
 8017a0e:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8017a12:	ac0e      	add	r4, sp, #56	; 0x38
 8017a14:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017a18:	2304      	movs	r3, #4
 8017a1a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8017a1e:	f000 fa27 	bl	8017e70 <uxr_object_id_to_raw>
 8017a22:	2300      	movs	r3, #0
 8017a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a28:	a912      	add	r1, sp, #72	; 0x48
 8017a2a:	a806      	add	r0, sp, #24
 8017a2c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017a30:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017a34:	2303      	movs	r3, #3
 8017a36:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8017a3a:	f7fb fc3d 	bl	80132b8 <ucdr_init_buffer>
 8017a3e:	a993      	add	r1, sp, #588	; 0x24c
 8017a40:	a806      	add	r0, sp, #24
 8017a42:	f002 ff59 	bl	801a8f8 <uxr_serialize_OBJK_Subscriber_Binary>
 8017a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a48:	4628      	mov	r0, r5
 8017a4a:	9600      	str	r6, [sp, #0]
 8017a4c:	9311      	str	r3, [sp, #68]	; 0x44
 8017a4e:	b29b      	uxth	r3, r3
 8017a50:	9401      	str	r4, [sp, #4]
 8017a52:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017a56:	f7ff ff0f 	bl	8017878 <uxr_common_create_entity>
 8017a5a:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8017a5e:	bd70      	pop	{r4, r5, r6, pc}

08017a60 <uxr_buffer_create_datawriter_bin>:
 8017a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a64:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017a68:	4606      	mov	r6, r0
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	2703      	movs	r7, #3
 8017a6e:	ac1d      	add	r4, sp, #116	; 0x74
 8017a70:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8017a74:	9105      	str	r1, [sp, #20]
 8017a76:	a9a1      	add	r1, sp, #644	; 0x284
 8017a78:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8017a7c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017a80:	2305      	movs	r3, #5
 8017a82:	7123      	strb	r3, [r4, #4]
 8017a84:	f000 f9f4 	bl	8017e70 <uxr_object_id_to_raw>
 8017a88:	a90e      	add	r1, sp, #56	; 0x38
 8017a8a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8017a8c:	7227      	strb	r7, [r4, #8]
 8017a8e:	f000 f9ef 	bl	8017e70 <uxr_object_id_to_raw>
 8017a92:	2300      	movs	r3, #0
 8017a94:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017a98:	3d00      	subs	r5, #0
 8017a9a:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8017a9e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017aa2:	bf18      	it	ne
 8017aa4:	2501      	movne	r5, #1
 8017aa6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017aaa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017aae:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017ab2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017ab6:	2301      	movs	r3, #1
 8017ab8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017abc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017ac0:	bb8a      	cbnz	r2, 8017b26 <uxr_buffer_create_datawriter_bin+0xc6>
 8017ac2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017ac6:	f04f 0c13 	mov.w	ip, #19
 8017aca:	250b      	movs	r5, #11
 8017acc:	2221      	movs	r2, #33	; 0x21
 8017ace:	2111      	movs	r1, #17
 8017ad0:	2009      	movs	r0, #9
 8017ad2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017ad6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8017ada:	b923      	cbnz	r3, 8017ae6 <uxr_buffer_create_datawriter_bin+0x86>
 8017adc:	4672      	mov	r2, lr
 8017ade:	4661      	mov	r1, ip
 8017ae0:	4628      	mov	r0, r5
 8017ae2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017ae6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8017aea:	2b01      	cmp	r3, #1
 8017aec:	d025      	beq.n	8017b3a <uxr_buffer_create_datawriter_bin+0xda>
 8017aee:	2b03      	cmp	r3, #3
 8017af0:	d029      	beq.n	8017b46 <uxr_buffer_create_datawriter_bin+0xe6>
 8017af2:	b32b      	cbz	r3, 8017b40 <uxr_buffer_create_datawriter_bin+0xe0>
 8017af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017af8:	a921      	add	r1, sp, #132	; 0x84
 8017afa:	a806      	add	r0, sp, #24
 8017afc:	f7fb fbdc 	bl	80132b8 <ucdr_init_buffer>
 8017b00:	a90e      	add	r1, sp, #56	; 0x38
 8017b02:	a806      	add	r0, sp, #24
 8017b04:	f002 ffaa 	bl	801aa5c <uxr_serialize_OBJK_DataWriter_Binary>
 8017b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b0a:	f8cd 8000 	str.w	r8, [sp]
 8017b0e:	4630      	mov	r0, r6
 8017b10:	9401      	str	r4, [sp, #4]
 8017b12:	60e3      	str	r3, [r4, #12]
 8017b14:	b29b      	uxth	r3, r3
 8017b16:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017b1a:	f7ff fead 	bl	8017878 <uxr_common_create_entity>
 8017b1e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b26:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017b2a:	f04f 0c12 	mov.w	ip, #18
 8017b2e:	250a      	movs	r5, #10
 8017b30:	2220      	movs	r2, #32
 8017b32:	2110      	movs	r1, #16
 8017b34:	2008      	movs	r0, #8
 8017b36:	2702      	movs	r7, #2
 8017b38:	e7cd      	b.n	8017ad6 <uxr_buffer_create_datawriter_bin+0x76>
 8017b3a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017b3e:	e7d9      	b.n	8017af4 <uxr_buffer_create_datawriter_bin+0x94>
 8017b40:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017b44:	e7d6      	b.n	8017af4 <uxr_buffer_create_datawriter_bin+0x94>
 8017b46:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017b4a:	e7d3      	b.n	8017af4 <uxr_buffer_create_datawriter_bin+0x94>

08017b4c <uxr_buffer_create_datareader_bin>:
 8017b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b50:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8017b54:	4606      	mov	r6, r0
 8017b56:	4618      	mov	r0, r3
 8017b58:	2703      	movs	r7, #3
 8017b5a:	ac1f      	add	r4, sp, #124	; 0x7c
 8017b5c:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8017b60:	9105      	str	r1, [sp, #20]
 8017b62:	a9a3      	add	r1, sp, #652	; 0x28c
 8017b64:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8017b68:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017b6c:	2306      	movs	r3, #6
 8017b6e:	7123      	strb	r3, [r4, #4]
 8017b70:	f000 f97e 	bl	8017e70 <uxr_object_id_to_raw>
 8017b74:	a90e      	add	r1, sp, #56	; 0x38
 8017b76:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8017b78:	7227      	strb	r7, [r4, #8]
 8017b7a:	f000 f979 	bl	8017e70 <uxr_object_id_to_raw>
 8017b7e:	2300      	movs	r3, #0
 8017b80:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017b84:	3d00      	subs	r5, #0
 8017b86:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8017b8a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8017b8e:	bf18      	it	ne
 8017b90:	2501      	movne	r5, #1
 8017b92:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017b96:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017b9a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017b9e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017ba2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017bac:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017bb0:	bb8a      	cbnz	r2, 8017c16 <uxr_buffer_create_datareader_bin+0xca>
 8017bb2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017bb6:	f04f 0c13 	mov.w	ip, #19
 8017bba:	250b      	movs	r5, #11
 8017bbc:	2221      	movs	r2, #33	; 0x21
 8017bbe:	2111      	movs	r1, #17
 8017bc0:	2009      	movs	r0, #9
 8017bc2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017bc6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8017bca:	b923      	cbnz	r3, 8017bd6 <uxr_buffer_create_datareader_bin+0x8a>
 8017bcc:	4672      	mov	r2, lr
 8017bce:	4661      	mov	r1, ip
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017bd6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8017bda:	2b01      	cmp	r3, #1
 8017bdc:	d025      	beq.n	8017c2a <uxr_buffer_create_datareader_bin+0xde>
 8017bde:	2b03      	cmp	r3, #3
 8017be0:	d029      	beq.n	8017c36 <uxr_buffer_create_datareader_bin+0xea>
 8017be2:	b32b      	cbz	r3, 8017c30 <uxr_buffer_create_datareader_bin+0xe4>
 8017be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017be8:	a923      	add	r1, sp, #140	; 0x8c
 8017bea:	a806      	add	r0, sp, #24
 8017bec:	f7fb fb64 	bl	80132b8 <ucdr_init_buffer>
 8017bf0:	a90e      	add	r1, sp, #56	; 0x38
 8017bf2:	a806      	add	r0, sp, #24
 8017bf4:	f002 fef6 	bl	801a9e4 <uxr_serialize_OBJK_DataReader_Binary>
 8017bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bfa:	f8cd 8000 	str.w	r8, [sp]
 8017bfe:	4630      	mov	r0, r6
 8017c00:	9401      	str	r4, [sp, #4]
 8017c02:	60e3      	str	r3, [r4, #12]
 8017c04:	b29b      	uxth	r3, r3
 8017c06:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c0a:	f7ff fe35 	bl	8017878 <uxr_common_create_entity>
 8017c0e:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8017c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c16:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017c1a:	f04f 0c12 	mov.w	ip, #18
 8017c1e:	250a      	movs	r5, #10
 8017c20:	2220      	movs	r2, #32
 8017c22:	2110      	movs	r1, #16
 8017c24:	2008      	movs	r0, #8
 8017c26:	2702      	movs	r7, #2
 8017c28:	e7cd      	b.n	8017bc6 <uxr_buffer_create_datareader_bin+0x7a>
 8017c2a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017c2e:	e7d9      	b.n	8017be4 <uxr_buffer_create_datareader_bin+0x98>
 8017c30:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017c34:	e7d6      	b.n	8017be4 <uxr_buffer_create_datareader_bin+0x98>
 8017c36:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017c3a:	e7d3      	b.n	8017be4 <uxr_buffer_create_datareader_bin+0x98>

08017c3c <uxr_buffer_create_replier_bin>:
 8017c3c:	b570      	push	{r4, r5, r6, lr}
 8017c3e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8017c42:	4605      	mov	r5, r0
 8017c44:	4618      	mov	r0, r3
 8017c46:	9105      	str	r1, [sp, #20]
 8017c48:	a999      	add	r1, sp, #612	; 0x264
 8017c4a:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8017c4e:	ac15      	add	r4, sp, #84	; 0x54
 8017c50:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017c54:	2308      	movs	r3, #8
 8017c56:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8017c5a:	f000 f909 	bl	8017e70 <uxr_object_id_to_raw>
 8017c5e:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8017c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c64:	a919      	add	r1, sp, #100	; 0x64
 8017c66:	a80d      	add	r0, sp, #52	; 0x34
 8017c68:	9306      	str	r3, [sp, #24]
 8017c6a:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8017c6c:	9307      	str	r3, [sp, #28]
 8017c6e:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8017c70:	9308      	str	r3, [sp, #32]
 8017c72:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8017c74:	930c      	str	r3, [sp, #48]	; 0x30
 8017c76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017c78:	930a      	str	r3, [sp, #40]	; 0x28
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017c80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017c84:	2303      	movs	r3, #3
 8017c86:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8017c8a:	f7fb fb15 	bl	80132b8 <ucdr_init_buffer>
 8017c8e:	a906      	add	r1, sp, #24
 8017c90:	a80d      	add	r0, sp, #52	; 0x34
 8017c92:	f002 ff0f 	bl	801aab4 <uxr_serialize_OBJK_Replier_Binary>
 8017c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c98:	4628      	mov	r0, r5
 8017c9a:	9600      	str	r6, [sp, #0]
 8017c9c:	9318      	str	r3, [sp, #96]	; 0x60
 8017c9e:	b29b      	uxth	r3, r3
 8017ca0:	9401      	str	r4, [sp, #4]
 8017ca2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017ca6:	f7ff fde7 	bl	8017878 <uxr_common_create_entity>
 8017caa:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8017cae:	bd70      	pop	{r4, r5, r6, pc}

08017cb0 <get_custom_error>:
 8017cb0:	4b01      	ldr	r3, [pc, #4]	; (8017cb8 <get_custom_error+0x8>)
 8017cb2:	7818      	ldrb	r0, [r3, #0]
 8017cb4:	4770      	bx	lr
 8017cb6:	bf00      	nop
 8017cb8:	20016f8c 	.word	0x20016f8c

08017cbc <recv_custom_msg>:
 8017cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc0:	4693      	mov	fp, r2
 8017cc2:	b089      	sub	sp, #36	; 0x24
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	4604      	mov	r4, r0
 8017cc8:	468a      	mov	sl, r1
 8017cca:	9305      	str	r3, [sp, #20]
 8017ccc:	f88d 201e 	strb.w	r2, [sp, #30]
 8017cd0:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8017cd4:	b322      	cbz	r2, 8017d20 <recv_custom_msg+0x64>
 8017cd6:	f200 2902 	addw	r9, r0, #514	; 0x202
 8017cda:	f10d 081f 	add.w	r8, sp, #31
 8017cde:	af05      	add	r7, sp, #20
 8017ce0:	f10d 061e 	add.w	r6, sp, #30
 8017ce4:	f44f 7500 	mov.w	r5, #512	; 0x200
 8017ce8:	e002      	b.n	8017cf0 <recv_custom_msg+0x34>
 8017cea:	9b05      	ldr	r3, [sp, #20]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	dd0f      	ble.n	8017d10 <recv_custom_msg+0x54>
 8017cf0:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8017cf4:	4623      	mov	r3, r4
 8017cf6:	4622      	mov	r2, r4
 8017cf8:	4648      	mov	r0, r9
 8017cfa:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017cfe:	e9cd 5600 	strd	r5, r6, [sp]
 8017d02:	f001 fc6f 	bl	80195e4 <uxr_read_framed_msg>
 8017d06:	2800      	cmp	r0, #0
 8017d08:	d0ef      	beq.n	8017cea <recv_custom_msg+0x2e>
 8017d0a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017d0e:	b1b3      	cbz	r3, 8017d3e <recv_custom_msg+0x82>
 8017d10:	4b0f      	ldr	r3, [pc, #60]	; (8017d50 <recv_custom_msg+0x94>)
 8017d12:	2000      	movs	r0, #0
 8017d14:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017d18:	701a      	strb	r2, [r3, #0]
 8017d1a:	b009      	add	sp, #36	; 0x24
 8017d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d20:	f10d 021f 	add.w	r2, sp, #31
 8017d24:	4601      	mov	r1, r0
 8017d26:	9200      	str	r2, [sp, #0]
 8017d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017d2c:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8017d30:	47a8      	blx	r5
 8017d32:	2800      	cmp	r0, #0
 8017d34:	d0ec      	beq.n	8017d10 <recv_custom_msg+0x54>
 8017d36:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d1e8      	bne.n	8017d10 <recv_custom_msg+0x54>
 8017d3e:	f8cb 0000 	str.w	r0, [fp]
 8017d42:	2001      	movs	r0, #1
 8017d44:	f8ca 4000 	str.w	r4, [sl]
 8017d48:	b009      	add	sp, #36	; 0x24
 8017d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d4e:	bf00      	nop
 8017d50:	20016f8c 	.word	0x20016f8c

08017d54 <send_custom_msg>:
 8017d54:	b530      	push	{r4, r5, lr}
 8017d56:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8017d5a:	b087      	sub	sp, #28
 8017d5c:	4614      	mov	r4, r2
 8017d5e:	b995      	cbnz	r5, 8017d86 <send_custom_msg+0x32>
 8017d60:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8017d64:	f10d 0317 	add.w	r3, sp, #23
 8017d68:	47a8      	blx	r5
 8017d6a:	1e03      	subs	r3, r0, #0
 8017d6c:	bf18      	it	ne
 8017d6e:	2301      	movne	r3, #1
 8017d70:	42a0      	cmp	r0, r4
 8017d72:	bf18      	it	ne
 8017d74:	2300      	movne	r3, #0
 8017d76:	b91b      	cbnz	r3, 8017d80 <send_custom_msg+0x2c>
 8017d78:	4a0a      	ldr	r2, [pc, #40]	; (8017da4 <send_custom_msg+0x50>)
 8017d7a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017d7e:	7011      	strb	r1, [r2, #0]
 8017d80:	4618      	mov	r0, r3
 8017d82:	b007      	add	sp, #28
 8017d84:	bd30      	pop	{r4, r5, pc}
 8017d86:	460b      	mov	r3, r1
 8017d88:	2200      	movs	r2, #0
 8017d8a:	f10d 0117 	add.w	r1, sp, #23
 8017d8e:	9400      	str	r4, [sp, #0]
 8017d90:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017d94:	4602      	mov	r2, r0
 8017d96:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8017d9a:	f200 2002 	addw	r0, r0, #514	; 0x202
 8017d9e:	f001 fa43 	bl	8019228 <uxr_write_framed_msg>
 8017da2:	e7e2      	b.n	8017d6a <send_custom_msg+0x16>
 8017da4:	20016f8c 	.word	0x20016f8c

08017da8 <uxr_set_custom_transport_callbacks>:
 8017da8:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8017dac:	9901      	ldr	r1, [sp, #4]
 8017dae:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8017db2:	9b00      	ldr	r3, [sp, #0]
 8017db4:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8017db8:	4770      	bx	lr
 8017dba:	bf00      	nop

08017dbc <uxr_init_custom_transport>:
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8017dc2:	b303      	cbz	r3, 8017e06 <uxr_init_custom_transport+0x4a>
 8017dc4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8017dc8:	4604      	mov	r4, r0
 8017dca:	b1e2      	cbz	r2, 8017e06 <uxr_init_custom_transport+0x4a>
 8017dcc:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8017dd0:	b1ca      	cbz	r2, 8017e06 <uxr_init_custom_transport+0x4a>
 8017dd2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8017dd6:	b1b2      	cbz	r2, 8017e06 <uxr_init_custom_transport+0x4a>
 8017dd8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8017ddc:	4798      	blx	r3
 8017dde:	4605      	mov	r5, r0
 8017de0:	b188      	cbz	r0, 8017e06 <uxr_init_custom_transport+0x4a>
 8017de2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8017de6:	b98b      	cbnz	r3, 8017e0c <uxr_init_custom_transport+0x50>
 8017de8:	4b0b      	ldr	r3, [pc, #44]	; (8017e18 <uxr_init_custom_transport+0x5c>)
 8017dea:	4628      	mov	r0, r5
 8017dec:	490b      	ldr	r1, [pc, #44]	; (8017e1c <uxr_init_custom_transport+0x60>)
 8017dee:	4a0c      	ldr	r2, [pc, #48]	; (8017e20 <uxr_init_custom_transport+0x64>)
 8017df0:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8017df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017df8:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8017dfc:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8017e00:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8017e04:	bd38      	pop	{r3, r4, r5, pc}
 8017e06:	2500      	movs	r5, #0
 8017e08:	4628      	mov	r0, r5
 8017e0a:	bd38      	pop	{r3, r4, r5, pc}
 8017e0c:	2100      	movs	r1, #0
 8017e0e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8017e12:	f001 fa03 	bl	801921c <uxr_init_framing_io>
 8017e16:	e7e7      	b.n	8017de8 <uxr_init_custom_transport+0x2c>
 8017e18:	08017cbd 	.word	0x08017cbd
 8017e1c:	08017d55 	.word	0x08017d55
 8017e20:	08017cb1 	.word	0x08017cb1

08017e24 <uxr_close_custom_transport>:
 8017e24:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8017e28:	4718      	bx	r3
 8017e2a:	bf00      	nop

08017e2c <uxr_object_id>:
 8017e2c:	b082      	sub	sp, #8
 8017e2e:	2300      	movs	r3, #0
 8017e30:	f88d 1006 	strb.w	r1, [sp, #6]
 8017e34:	f360 030f 	bfi	r3, r0, #0, #16
 8017e38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017e3c:	f362 431f 	bfi	r3, r2, #16, #16
 8017e40:	4618      	mov	r0, r3
 8017e42:	b002      	add	sp, #8
 8017e44:	4770      	bx	lr
 8017e46:	bf00      	nop

08017e48 <uxr_object_id_from_raw>:
 8017e48:	7843      	ldrb	r3, [r0, #1]
 8017e4a:	b082      	sub	sp, #8
 8017e4c:	7801      	ldrb	r1, [r0, #0]
 8017e4e:	2000      	movs	r0, #0
 8017e50:	091a      	lsrs	r2, r3, #4
 8017e52:	f003 030f 	and.w	r3, r3, #15
 8017e56:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017e5a:	f88d 3006 	strb.w	r3, [sp, #6]
 8017e5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017e62:	f362 000f 	bfi	r0, r2, #0, #16
 8017e66:	f363 401f 	bfi	r0, r3, #16, #16
 8017e6a:	b002      	add	sp, #8
 8017e6c:	4770      	bx	lr
 8017e6e:	bf00      	nop

08017e70 <uxr_object_id_to_raw>:
 8017e70:	4602      	mov	r2, r0
 8017e72:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8017e76:	b082      	sub	sp, #8
 8017e78:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017e7c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017e80:	f881 c000 	strb.w	ip, [r1]
 8017e84:	7048      	strb	r0, [r1, #1]
 8017e86:	b002      	add	sp, #8
 8017e88:	4770      	bx	lr
 8017e8a:	bf00      	nop

08017e8c <uxr_buffer_request_data>:
 8017e8c:	b530      	push	{r4, r5, lr}
 8017e8e:	b095      	sub	sp, #84	; 0x54
 8017e90:	4604      	mov	r4, r0
 8017e92:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017e94:	9303      	str	r3, [sp, #12]
 8017e96:	2d00      	cmp	r5, #0
 8017e98:	f88d 301c 	strb.w	r3, [sp, #28]
 8017e9c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017ea0:	f04f 0200 	mov.w	r2, #0
 8017ea4:	bf14      	ite	ne
 8017ea6:	2101      	movne	r1, #1
 8017ea8:	4611      	moveq	r1, r2
 8017eaa:	f88d 201d 	strb.w	r2, [sp, #29]
 8017eae:	f88d 201e 	strb.w	r2, [sp, #30]
 8017eb2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017eb6:	d021      	beq.n	8017efc <uxr_buffer_request_data+0x70>
 8017eb8:	686b      	ldr	r3, [r5, #4]
 8017eba:	2210      	movs	r2, #16
 8017ebc:	6829      	ldr	r1, [r5, #0]
 8017ebe:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017ec2:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8017ec6:	2308      	movs	r3, #8
 8017ec8:	2100      	movs	r1, #0
 8017eca:	4620      	mov	r0, r4
 8017ecc:	e9cd 3100 	strd	r3, r1, [sp]
 8017ed0:	ab0c      	add	r3, sp, #48	; 0x30
 8017ed2:	9905      	ldr	r1, [sp, #20]
 8017ed4:	f001 f834 	bl	8018f40 <uxr_prepare_stream_to_write_submessage>
 8017ed8:	b918      	cbnz	r0, 8017ee2 <uxr_buffer_request_data+0x56>
 8017eda:	4604      	mov	r4, r0
 8017edc:	4620      	mov	r0, r4
 8017ede:	b015      	add	sp, #84	; 0x54
 8017ee0:	bd30      	pop	{r4, r5, pc}
 8017ee2:	9904      	ldr	r1, [sp, #16]
 8017ee4:	aa06      	add	r2, sp, #24
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	f001 f966 	bl	80191b8 <uxr_init_base_object_request>
 8017eec:	4604      	mov	r4, r0
 8017eee:	a906      	add	r1, sp, #24
 8017ef0:	a80c      	add	r0, sp, #48	; 0x30
 8017ef2:	f003 f915 	bl	801b120 <uxr_serialize_READ_DATA_Payload>
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	b015      	add	sp, #84	; 0x54
 8017efa:	bd30      	pop	{r4, r5, pc}
 8017efc:	2208      	movs	r2, #8
 8017efe:	e7e2      	b.n	8017ec6 <uxr_buffer_request_data+0x3a>

08017f00 <uxr_buffer_cancel_data>:
 8017f00:	b510      	push	{r4, lr}
 8017f02:	2300      	movs	r3, #0
 8017f04:	b094      	sub	sp, #80	; 0x50
 8017f06:	4604      	mov	r4, r0
 8017f08:	9205      	str	r2, [sp, #20]
 8017f0a:	9301      	str	r3, [sp, #4]
 8017f0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017f10:	f88d 301e 	strb.w	r3, [sp, #30]
 8017f14:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8017f18:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017f1c:	2308      	movs	r3, #8
 8017f1e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017f22:	2201      	movs	r2, #1
 8017f24:	9300      	str	r3, [sp, #0]
 8017f26:	ab0c      	add	r3, sp, #48	; 0x30
 8017f28:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8017f2c:	2210      	movs	r2, #16
 8017f2e:	f001 f807 	bl	8018f40 <uxr_prepare_stream_to_write_submessage>
 8017f32:	b918      	cbnz	r0, 8017f3c <uxr_buffer_cancel_data+0x3c>
 8017f34:	4604      	mov	r4, r0
 8017f36:	4620      	mov	r0, r4
 8017f38:	b014      	add	sp, #80	; 0x50
 8017f3a:	bd10      	pop	{r4, pc}
 8017f3c:	9905      	ldr	r1, [sp, #20]
 8017f3e:	aa06      	add	r2, sp, #24
 8017f40:	4620      	mov	r0, r4
 8017f42:	f001 f939 	bl	80191b8 <uxr_init_base_object_request>
 8017f46:	4604      	mov	r4, r0
 8017f48:	a906      	add	r1, sp, #24
 8017f4a:	a80c      	add	r0, sp, #48	; 0x30
 8017f4c:	f003 f8e8 	bl	801b120 <uxr_serialize_READ_DATA_Payload>
 8017f50:	4620      	mov	r0, r4
 8017f52:	b014      	add	sp, #80	; 0x50
 8017f54:	bd10      	pop	{r4, pc}
 8017f56:	bf00      	nop

08017f58 <read_submessage_format>:
 8017f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f5c:	b095      	sub	sp, #84	; 0x54
 8017f5e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8017f62:	b113      	cbz	r3, 8017f6a <read_submessage_format+0x12>
 8017f64:	b015      	add	sp, #84	; 0x54
 8017f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f6a:	4606      	mov	r6, r0
 8017f6c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017f6e:	460c      	mov	r4, r1
 8017f70:	4615      	mov	r5, r2
 8017f72:	9004      	str	r0, [sp, #16]
 8017f74:	4699      	mov	r9, r3
 8017f76:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017f78:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8017f7c:	9005      	str	r0, [sp, #20]
 8017f7e:	a80c      	add	r0, sp, #48	; 0x30
 8017f80:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017f84:	1a52      	subs	r2, r2, r1
 8017f86:	f7fb f997 	bl	80132b8 <ucdr_init_buffer>
 8017f8a:	a80c      	add	r0, sp, #48	; 0x30
 8017f8c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017f90:	f7fb f966 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 8017f94:	69e2      	ldr	r2, [r4, #28]
 8017f96:	b19a      	cbz	r2, 8017fc0 <read_submessage_format+0x68>
 8017f98:	f1b8 0f07 	cmp.w	r8, #7
 8017f9c:	f882 9014 	strb.w	r9, [r2, #20]
 8017fa0:	d040      	beq.n	8018024 <read_submessage_format+0xcc>
 8017fa2:	f1b8 0f08 	cmp.w	r8, #8
 8017fa6:	d02e      	beq.n	8018006 <read_submessage_format+0xae>
 8017fa8:	f1b8 0f06 	cmp.w	r8, #6
 8017fac:	d011      	beq.n	8017fd2 <read_submessage_format+0x7a>
 8017fae:	2301      	movs	r3, #1
 8017fb0:	7513      	strb	r3, [r2, #20]
 8017fb2:	4629      	mov	r1, r5
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	f7fb f9d3 	bl	8013360 <ucdr_advance_buffer>
 8017fba:	b015      	add	sp, #84	; 0x54
 8017fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fc0:	f1b8 0f07 	cmp.w	r8, #7
 8017fc4:	d02e      	beq.n	8018024 <read_submessage_format+0xcc>
 8017fc6:	f1b8 0f08 	cmp.w	r8, #8
 8017fca:	d01c      	beq.n	8018006 <read_submessage_format+0xae>
 8017fcc:	f1b8 0f06 	cmp.w	r8, #6
 8017fd0:	d1ef      	bne.n	8017fb2 <read_submessage_format+0x5a>
 8017fd2:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8017fd6:	f1b8 0f00 	cmp.w	r8, #0
 8017fda:	d011      	beq.n	8018000 <read_submessage_format+0xa8>
 8017fdc:	ab0c      	add	r3, sp, #48	; 0x30
 8017fde:	9501      	str	r5, [sp, #4]
 8017fe0:	463a      	mov	r2, r7
 8017fe2:	4630      	mov	r0, r6
 8017fe4:	9300      	str	r3, [sp, #0]
 8017fe6:	2306      	movs	r3, #6
 8017fe8:	f88d 3016 	strb.w	r3, [sp, #22]
 8017fec:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8017ff0:	9302      	str	r3, [sp, #8]
 8017ff2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017ff6:	47c0      	blx	r8
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	69e2      	ldr	r2, [r4, #28]
 8017ffc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018000:	2a00      	cmp	r2, #0
 8018002:	d1d4      	bne.n	8017fae <read_submessage_format+0x56>
 8018004:	e7d5      	b.n	8017fb2 <read_submessage_format+0x5a>
 8018006:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801800a:	2b00      	cmp	r3, #0
 801800c:	d0f8      	beq.n	8018000 <read_submessage_format+0xa8>
 801800e:	a80c      	add	r0, sp, #48	; 0x30
 8018010:	a906      	add	r1, sp, #24
 8018012:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018016:	f003 f94f 	bl	801b2b8 <uxr_deserialize_SampleIdentity>
 801801a:	b9a0      	cbnz	r0, 8018046 <read_submessage_format+0xee>
 801801c:	69e2      	ldr	r2, [r4, #28]
 801801e:	2a00      	cmp	r2, #0
 8018020:	d1c5      	bne.n	8017fae <read_submessage_format+0x56>
 8018022:	e7c6      	b.n	8017fb2 <read_submessage_format+0x5a>
 8018024:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8018028:	b13b      	cbz	r3, 801803a <read_submessage_format+0xe2>
 801802a:	a906      	add	r1, sp, #24
 801802c:	a80c      	add	r0, sp, #48	; 0x30
 801802e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018032:	f002 fe15 	bl	801ac60 <uxr_deserialize_BaseObjectRequest>
 8018036:	bb60      	cbnz	r0, 8018092 <read_submessage_format+0x13a>
 8018038:	69e2      	ldr	r2, [r4, #28]
 801803a:	68a3      	ldr	r3, [r4, #8]
 801803c:	442b      	add	r3, r5
 801803e:	60a3      	str	r3, [r4, #8]
 8018040:	2a00      	cmp	r2, #0
 8018042:	d1b4      	bne.n	8017fae <read_submessage_format+0x56>
 8018044:	e7b5      	b.n	8017fb2 <read_submessage_format+0x5a>
 8018046:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018048:	a80c      	add	r0, sp, #48	; 0x30
 801804a:	eba8 0803 	sub.w	r8, r8, r3
 801804e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8018052:	44a8      	add	r8, r5
 8018054:	1a52      	subs	r2, r2, r1
 8018056:	f7fb f92f 	bl	80132b8 <ucdr_init_buffer>
 801805a:	a80c      	add	r0, sp, #48	; 0x30
 801805c:	fa1f f888 	uxth.w	r8, r8
 8018060:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018064:	f7fb f8fc 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 8018068:	ab0c      	add	r3, sp, #48	; 0x30
 801806a:	2108      	movs	r1, #8
 801806c:	f8cd 8004 	str.w	r8, [sp, #4]
 8018070:	9300      	str	r3, [sp, #0]
 8018072:	463a      	mov	r2, r7
 8018074:	f88d 1016 	strb.w	r1, [sp, #22]
 8018078:	ab06      	add	r3, sp, #24
 801807a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801807e:	4630      	mov	r0, r6
 8018080:	9102      	str	r1, [sp, #8]
 8018082:	9905      	ldr	r1, [sp, #20]
 8018084:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8018088:	47b8      	blx	r7
 801808a:	2301      	movs	r3, #1
 801808c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018090:	e7c4      	b.n	801801c <read_submessage_format+0xc4>
 8018092:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8018096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018098:	a80c      	add	r0, sp, #48	; 0x30
 801809a:	1a52      	subs	r2, r2, r1
 801809c:	eba8 0803 	sub.w	r8, r8, r3
 80180a0:	f7fb f90a 	bl	80132b8 <ucdr_init_buffer>
 80180a4:	a80c      	add	r0, sp, #48	; 0x30
 80180a6:	44a8      	add	r8, r5
 80180a8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80180ac:	f7fb f8d8 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 80180b0:	ab0c      	add	r3, sp, #48	; 0x30
 80180b2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80180b6:	fa1f f888 	uxth.w	r8, r8
 80180ba:	9300      	str	r3, [sp, #0]
 80180bc:	463a      	mov	r2, r7
 80180be:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80180c2:	4630      	mov	r0, r6
 80180c4:	f8cd 8004 	str.w	r8, [sp, #4]
 80180c8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80180cc:	2107      	movs	r1, #7
 80180ce:	f88d 1016 	strb.w	r1, [sp, #22]
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80180d8:	9102      	str	r1, [sp, #8]
 80180da:	9905      	ldr	r1, [sp, #20]
 80180dc:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80180e0:	47b8      	blx	r7
 80180e2:	2301      	movs	r3, #1
 80180e4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80180e8:	e7a6      	b.n	8018038 <read_submessage_format+0xe0>
 80180ea:	bf00      	nop

080180ec <on_get_fragmentation_info>:
 80180ec:	b500      	push	{lr}
 80180ee:	b08b      	sub	sp, #44	; 0x2c
 80180f0:	4601      	mov	r1, r0
 80180f2:	2204      	movs	r2, #4
 80180f4:	a802      	add	r0, sp, #8
 80180f6:	f7fb f8df 	bl	80132b8 <ucdr_init_buffer>
 80180fa:	f10d 0305 	add.w	r3, sp, #5
 80180fe:	f10d 0206 	add.w	r2, sp, #6
 8018102:	a901      	add	r1, sp, #4
 8018104:	a802      	add	r0, sp, #8
 8018106:	f001 fe5d 	bl	8019dc4 <uxr_read_submessage_header>
 801810a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801810e:	2b0d      	cmp	r3, #13
 8018110:	d003      	beq.n	801811a <on_get_fragmentation_info+0x2e>
 8018112:	2000      	movs	r0, #0
 8018114:	b00b      	add	sp, #44	; 0x2c
 8018116:	f85d fb04 	ldr.w	pc, [sp], #4
 801811a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801811e:	f013 0f02 	tst.w	r3, #2
 8018122:	bf14      	ite	ne
 8018124:	2002      	movne	r0, #2
 8018126:	2001      	moveq	r0, #1
 8018128:	b00b      	add	sp, #44	; 0x2c
 801812a:	f85d fb04 	ldr.w	pc, [sp], #4
 801812e:	bf00      	nop

08018130 <read_submessage_get_info>:
 8018130:	b570      	push	{r4, r5, r6, lr}
 8018132:	2500      	movs	r5, #0
 8018134:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8018138:	460e      	mov	r6, r1
 801813a:	4604      	mov	r4, r0
 801813c:	f44f 7224 	mov.w	r2, #656	; 0x290
 8018140:	4629      	mov	r1, r5
 8018142:	a810      	add	r0, sp, #64	; 0x40
 8018144:	9503      	str	r5, [sp, #12]
 8018146:	9504      	str	r5, [sp, #16]
 8018148:	f008 fe20 	bl	8020d8c <memset>
 801814c:	a903      	add	r1, sp, #12
 801814e:	4630      	mov	r0, r6
 8018150:	f002 ff26 	bl	801afa0 <uxr_deserialize_GET_INFO_Payload>
 8018154:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018158:	4620      	mov	r0, r4
 801815a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801815e:	f001 f823 	bl	80191a8 <uxr_session_header_offset>
 8018162:	462b      	mov	r3, r5
 8018164:	220c      	movs	r2, #12
 8018166:	a905      	add	r1, sp, #20
 8018168:	9000      	str	r0, [sp, #0]
 801816a:	a808      	add	r0, sp, #32
 801816c:	f7fb f892 	bl	8013294 <ucdr_init_buffer_origin_offset>
 8018170:	a910      	add	r1, sp, #64	; 0x40
 8018172:	a808      	add	r0, sp, #32
 8018174:	f002 ff88 	bl	801b088 <uxr_serialize_INFO_Payload>
 8018178:	9b08      	ldr	r3, [sp, #32]
 801817a:	462a      	mov	r2, r5
 801817c:	4629      	mov	r1, r5
 801817e:	4620      	mov	r0, r4
 8018180:	f000 ffbe 	bl	8019100 <uxr_stamp_session_header>
 8018184:	a808      	add	r0, sp, #32
 8018186:	f7fb f8c5 	bl	8013314 <ucdr_buffer_length>
 801818a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801818c:	4602      	mov	r2, r0
 801818e:	a905      	add	r1, sp, #20
 8018190:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018194:	47a0      	blx	r4
 8018196:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 801819a:	bd70      	pop	{r4, r5, r6, pc}

0801819c <write_submessage_acknack.isra.0>:
 801819c:	b570      	push	{r4, r5, r6, lr}
 801819e:	b092      	sub	sp, #72	; 0x48
 80181a0:	4605      	mov	r5, r0
 80181a2:	460e      	mov	r6, r1
 80181a4:	4614      	mov	r4, r2
 80181a6:	f000 ffff 	bl	80191a8 <uxr_session_header_offset>
 80181aa:	a905      	add	r1, sp, #20
 80181ac:	9000      	str	r0, [sp, #0]
 80181ae:	2300      	movs	r3, #0
 80181b0:	a80a      	add	r0, sp, #40	; 0x28
 80181b2:	2211      	movs	r2, #17
 80181b4:	f7fb f86e 	bl	8013294 <ucdr_init_buffer_origin_offset>
 80181b8:	2218      	movs	r2, #24
 80181ba:	2300      	movs	r3, #0
 80181bc:	210a      	movs	r1, #10
 80181be:	fb02 5404 	mla	r4, r2, r4, r5
 80181c2:	a80a      	add	r0, sp, #40	; 0x28
 80181c4:	2205      	movs	r2, #5
 80181c6:	3450      	adds	r4, #80	; 0x50
 80181c8:	f001 fde2 	bl	8019d90 <uxr_buffer_submessage_header>
 80181cc:	a903      	add	r1, sp, #12
 80181ce:	4620      	mov	r0, r4
 80181d0:	f006 fb50 	bl	801e874 <uxr_compute_acknack>
 80181d4:	ba40      	rev16	r0, r0
 80181d6:	a903      	add	r1, sp, #12
 80181d8:	f88d 6010 	strb.w	r6, [sp, #16]
 80181dc:	f8ad 000e 	strh.w	r0, [sp, #14]
 80181e0:	a80a      	add	r0, sp, #40	; 0x28
 80181e2:	f002 ffc3 	bl	801b16c <uxr_serialize_ACKNACK_Payload>
 80181e6:	2200      	movs	r2, #0
 80181e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181ea:	4628      	mov	r0, r5
 80181ec:	4611      	mov	r1, r2
 80181ee:	f000 ff87 	bl	8019100 <uxr_stamp_session_header>
 80181f2:	a80a      	add	r0, sp, #40	; 0x28
 80181f4:	f7fb f88e 	bl	8013314 <ucdr_buffer_length>
 80181f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80181fa:	4602      	mov	r2, r0
 80181fc:	a905      	add	r1, sp, #20
 80181fe:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018202:	47a0      	blx	r4
 8018204:	b012      	add	sp, #72	; 0x48
 8018206:	bd70      	pop	{r4, r5, r6, pc}

08018208 <uxr_init_session>:
 8018208:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8018240 <uxr_init_session+0x38>
 801820c:	2300      	movs	r3, #0
 801820e:	b510      	push	{r4, lr}
 8018210:	4604      	mov	r4, r0
 8018212:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8018216:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 801821a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 801821e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8018222:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8018226:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 801822a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 801822e:	2181      	movs	r1, #129	; 0x81
 8018230:	f000 feca 	bl	8018fc8 <uxr_init_session_info>
 8018234:	f104 0008 	add.w	r0, r4, #8
 8018238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801823c:	f001 bcc4 	b.w	8019bc8 <uxr_init_stream_storage>
	...

08018248 <uxr_set_status_callback>:
 8018248:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801824c:	4770      	bx	lr
 801824e:	bf00      	nop

08018250 <uxr_set_topic_callback>:
 8018250:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8018254:	4770      	bx	lr
 8018256:	bf00      	nop

08018258 <uxr_set_request_callback>:
 8018258:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801825c:	4770      	bx	lr
 801825e:	bf00      	nop

08018260 <uxr_set_reply_callback>:
 8018260:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8018264:	4770      	bx	lr
 8018266:	bf00      	nop

08018268 <uxr_create_output_best_effort_stream>:
 8018268:	b510      	push	{r4, lr}
 801826a:	4604      	mov	r4, r0
 801826c:	b084      	sub	sp, #16
 801826e:	e9cd 2100 	strd	r2, r1, [sp]
 8018272:	f000 ff99 	bl	80191a8 <uxr_session_header_offset>
 8018276:	4603      	mov	r3, r0
 8018278:	f104 0008 	add.w	r0, r4, #8
 801827c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8018280:	b004      	add	sp, #16
 8018282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018286:	f001 bce5 	b.w	8019c54 <uxr_add_output_best_effort_buffer>
 801828a:	bf00      	nop

0801828c <uxr_create_output_reliable_stream>:
 801828c:	b530      	push	{r4, r5, lr}
 801828e:	b089      	sub	sp, #36	; 0x24
 8018290:	4604      	mov	r4, r0
 8018292:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018296:	9303      	str	r3, [sp, #12]
 8018298:	f000 ff86 	bl	80191a8 <uxr_session_header_offset>
 801829c:	4605      	mov	r5, r0
 801829e:	9905      	ldr	r1, [sp, #20]
 80182a0:	f104 0008 	add.w	r0, r4, #8
 80182a4:	9500      	str	r5, [sp, #0]
 80182a6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80182aa:	f001 fce7 	bl	8019c7c <uxr_add_output_reliable_buffer>
 80182ae:	2200      	movs	r2, #0
 80182b0:	fa5f fc80 	uxtb.w	ip, r0
 80182b4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80182b8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80182bc:	0e03      	lsrs	r3, r0, #24
 80182be:	f36c 0207 	bfi	r2, ip, #0, #8
 80182c2:	f364 220f 	bfi	r2, r4, #8, #8
 80182c6:	f361 4217 	bfi	r2, r1, #16, #8
 80182ca:	f363 621f 	bfi	r2, r3, #24, #8
 80182ce:	4610      	mov	r0, r2
 80182d0:	b009      	add	sp, #36	; 0x24
 80182d2:	bd30      	pop	{r4, r5, pc}

080182d4 <uxr_create_input_best_effort_stream>:
 80182d4:	b082      	sub	sp, #8
 80182d6:	3008      	adds	r0, #8
 80182d8:	b002      	add	sp, #8
 80182da:	f001 bce9 	b.w	8019cb0 <uxr_add_input_best_effort_buffer>
 80182de:	bf00      	nop

080182e0 <uxr_create_input_reliable_stream>:
 80182e0:	b510      	push	{r4, lr}
 80182e2:	4c0c      	ldr	r4, [pc, #48]	; (8018314 <uxr_create_input_reliable_stream+0x34>)
 80182e4:	b084      	sub	sp, #16
 80182e6:	3008      	adds	r0, #8
 80182e8:	9400      	str	r4, [sp, #0]
 80182ea:	f001 fcf7 	bl	8019cdc <uxr_add_input_reliable_buffer>
 80182ee:	2200      	movs	r2, #0
 80182f0:	fa5f fe80 	uxtb.w	lr, r0
 80182f4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80182f8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80182fc:	0e03      	lsrs	r3, r0, #24
 80182fe:	f36e 0207 	bfi	r2, lr, #0, #8
 8018302:	f36c 220f 	bfi	r2, ip, #8, #8
 8018306:	f361 4217 	bfi	r2, r1, #16, #8
 801830a:	f363 621f 	bfi	r2, r3, #24, #8
 801830e:	4610      	mov	r0, r2
 8018310:	b004      	add	sp, #16
 8018312:	bd10      	pop	{r4, pc}
 8018314:	080180ed 	.word	0x080180ed

08018318 <uxr_epoch_nanos>:
 8018318:	b510      	push	{r4, lr}
 801831a:	4604      	mov	r4, r0
 801831c:	f001 fd9a 	bl	8019e54 <uxr_nanos>
 8018320:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8018324:	1ac0      	subs	r0, r0, r3
 8018326:	eb61 0102 	sbc.w	r1, r1, r2
 801832a:	bd10      	pop	{r4, pc}

0801832c <uxr_flash_output_streams>:
 801832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018330:	7e03      	ldrb	r3, [r0, #24]
 8018332:	b084      	sub	sp, #16
 8018334:	4604      	mov	r4, r0
 8018336:	b1fb      	cbz	r3, 8018378 <uxr_flash_output_streams+0x4c>
 8018338:	f04f 0900 	mov.w	r9, #0
 801833c:	f10d 0802 	add.w	r8, sp, #2
 8018340:	af03      	add	r7, sp, #12
 8018342:	ae02      	add	r6, sp, #8
 8018344:	4648      	mov	r0, r9
 8018346:	2201      	movs	r2, #1
 8018348:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801834c:	4611      	mov	r1, r2
 801834e:	3508      	adds	r5, #8
 8018350:	f001 fbe0 	bl	8019b14 <uxr_stream_id>
 8018354:	4684      	mov	ip, r0
 8018356:	4643      	mov	r3, r8
 8018358:	463a      	mov	r2, r7
 801835a:	4631      	mov	r1, r6
 801835c:	4628      	mov	r0, r5
 801835e:	f8cd c004 	str.w	ip, [sp, #4]
 8018362:	f006 fb11 	bl	801e988 <uxr_prepare_best_effort_buffer_to_send>
 8018366:	2800      	cmp	r0, #0
 8018368:	d13d      	bne.n	80183e6 <uxr_flash_output_streams+0xba>
 801836a:	f109 0901 	add.w	r9, r9, #1
 801836e:	7e23      	ldrb	r3, [r4, #24]
 8018370:	fa5f f089 	uxtb.w	r0, r9
 8018374:	4283      	cmp	r3, r0
 8018376:	d8e6      	bhi.n	8018346 <uxr_flash_output_streams+0x1a>
 8018378:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801837c:	b383      	cbz	r3, 80183e0 <uxr_flash_output_streams+0xb4>
 801837e:	f04f 0900 	mov.w	r9, #0
 8018382:	f10d 0802 	add.w	r8, sp, #2
 8018386:	af03      	add	r7, sp, #12
 8018388:	ae02      	add	r6, sp, #8
 801838a:	4648      	mov	r0, r9
 801838c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8018390:	2201      	movs	r2, #1
 8018392:	2102      	movs	r1, #2
 8018394:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8018398:	f001 fbbc 	bl	8019b14 <uxr_stream_id>
 801839c:	9001      	str	r0, [sp, #4]
 801839e:	3520      	adds	r5, #32
 80183a0:	e00c      	b.n	80183bc <uxr_flash_output_streams+0x90>
 80183a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80183a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80183aa:	9b02      	ldr	r3, [sp, #8]
 80183ac:	f000 fea8 	bl	8019100 <uxr_stamp_session_header>
 80183b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80183b2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80183b6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80183ba:	47d0      	blx	sl
 80183bc:	4643      	mov	r3, r8
 80183be:	463a      	mov	r2, r7
 80183c0:	4631      	mov	r1, r6
 80183c2:	4628      	mov	r0, r5
 80183c4:	f006 fd04 	bl	801edd0 <uxr_prepare_next_reliable_buffer_to_send>
 80183c8:	4603      	mov	r3, r0
 80183ca:	4620      	mov	r0, r4
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d1e8      	bne.n	80183a2 <uxr_flash_output_streams+0x76>
 80183d0:	f109 0901 	add.w	r9, r9, #1
 80183d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80183d8:	fa5f f089 	uxtb.w	r0, r9
 80183dc:	4283      	cmp	r3, r0
 80183de:	d8d5      	bhi.n	801838c <uxr_flash_output_streams+0x60>
 80183e0:	b004      	add	sp, #16
 80183e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183e6:	9b02      	ldr	r3, [sp, #8]
 80183e8:	4620      	mov	r0, r4
 80183ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80183ee:	f109 0901 	add.w	r9, r9, #1
 80183f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80183f6:	f000 fe83 	bl	8019100 <uxr_stamp_session_header>
 80183fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80183fc:	9a03      	ldr	r2, [sp, #12]
 80183fe:	685d      	ldr	r5, [r3, #4]
 8018400:	6818      	ldr	r0, [r3, #0]
 8018402:	9902      	ldr	r1, [sp, #8]
 8018404:	47a8      	blx	r5
 8018406:	7e23      	ldrb	r3, [r4, #24]
 8018408:	fa5f f089 	uxtb.w	r0, r9
 801840c:	4283      	cmp	r3, r0
 801840e:	d89a      	bhi.n	8018346 <uxr_flash_output_streams+0x1a>
 8018410:	e7b2      	b.n	8018378 <uxr_flash_output_streams+0x4c>
 8018412:	bf00      	nop

08018414 <read_submessage_info>:
 8018414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018418:	460d      	mov	r5, r1
 801841a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801841e:	4606      	mov	r6, r0
 8018420:	4669      	mov	r1, sp
 8018422:	4628      	mov	r0, r5
 8018424:	f002 fcce 	bl	801adc4 <uxr_deserialize_BaseObjectReply>
 8018428:	4604      	mov	r4, r0
 801842a:	a902      	add	r1, sp, #8
 801842c:	4628      	mov	r0, r5
 801842e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8018432:	f7f9 fc51 	bl	8011cd8 <ucdr_deserialize_bool>
 8018436:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801843a:	4004      	ands	r4, r0
 801843c:	b2e4      	uxtb	r4, r4
 801843e:	b95b      	cbnz	r3, 8018458 <read_submessage_info+0x44>
 8018440:	a987      	add	r1, sp, #540	; 0x21c
 8018442:	4628      	mov	r0, r5
 8018444:	f7f9 fc48 	bl	8011cd8 <ucdr_deserialize_bool>
 8018448:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801844c:	4680      	mov	r8, r0
 801844e:	b94b      	cbnz	r3, 8018464 <read_submessage_info+0x50>
 8018450:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8018454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018458:	a903      	add	r1, sp, #12
 801845a:	4628      	mov	r0, r5
 801845c:	f002 fb5e 	bl	801ab1c <uxr_deserialize_ObjectVariant>
 8018460:	4004      	ands	r4, r0
 8018462:	e7ed      	b.n	8018440 <read_submessage_info+0x2c>
 8018464:	a988      	add	r1, sp, #544	; 0x220
 8018466:	4628      	mov	r0, r5
 8018468:	f7f9 fc64 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801846c:	ea14 0f08 	tst.w	r4, r8
 8018470:	d0ee      	beq.n	8018450 <read_submessage_info+0x3c>
 8018472:	2800      	cmp	r0, #0
 8018474:	d0ec      	beq.n	8018450 <read_submessage_info+0x3c>
 8018476:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 801847a:	2b0d      	cmp	r3, #13
 801847c:	d1e8      	bne.n	8018450 <read_submessage_info+0x3c>
 801847e:	a98a      	add	r1, sp, #552	; 0x228
 8018480:	4628      	mov	r0, r5
 8018482:	f7fa f9fd 	bl	8012880 <ucdr_deserialize_int16_t>
 8018486:	b138      	cbz	r0, 8018498 <read_submessage_info+0x84>
 8018488:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801848c:	2b00      	cmp	r3, #0
 801848e:	dd06      	ble.n	801849e <read_submessage_info+0x8a>
 8018490:	2f00      	cmp	r7, #0
 8018492:	bf14      	ite	ne
 8018494:	2001      	movne	r0, #1
 8018496:	2002      	moveq	r0, #2
 8018498:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 801849c:	e7d8      	b.n	8018450 <read_submessage_info+0x3c>
 801849e:	2000      	movs	r0, #0
 80184a0:	e7fa      	b.n	8018498 <read_submessage_info+0x84>
 80184a2:	bf00      	nop

080184a4 <read_submessage_list>:
 80184a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184a8:	4604      	mov	r4, r0
 80184aa:	b097      	sub	sp, #92	; 0x5c
 80184ac:	460d      	mov	r5, r1
 80184ae:	4ec1      	ldr	r6, [pc, #772]	; (80187b4 <read_submessage_list+0x310>)
 80184b0:	9209      	str	r2, [sp, #36]	; 0x24
 80184b2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80184b6:	aa0c      	add	r2, sp, #48	; 0x30
 80184b8:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80184bc:	4628      	mov	r0, r5
 80184be:	f001 fc81 	bl	8019dc4 <uxr_read_submessage_header>
 80184c2:	2800      	cmp	r0, #0
 80184c4:	f000 8142 	beq.w	801874c <read_submessage_list+0x2a8>
 80184c8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80184cc:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80184d0:	3b02      	subs	r3, #2
 80184d2:	2b0d      	cmp	r3, #13
 80184d4:	d8ed      	bhi.n	80184b2 <read_submessage_list+0xe>
 80184d6:	a101      	add	r1, pc, #4	; (adr r1, 80184dc <read_submessage_list+0x38>)
 80184d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184dc:	08018743 	.word	0x08018743
 80184e0:	080184b3 	.word	0x080184b3
 80184e4:	08018733 	.word	0x08018733
 80184e8:	080186d1 	.word	0x080186d1
 80184ec:	080186c7 	.word	0x080186c7
 80184f0:	080184b3 	.word	0x080184b3
 80184f4:	080184b3 	.word	0x080184b3
 80184f8:	0801861d 	.word	0x0801861d
 80184fc:	080185af 	.word	0x080185af
 8018500:	0801856f 	.word	0x0801856f
 8018504:	080184b3 	.word	0x080184b3
 8018508:	080184b3 	.word	0x080184b3
 801850c:	080184b3 	.word	0x080184b3
 8018510:	08018515 	.word	0x08018515
 8018514:	a910      	add	r1, sp, #64	; 0x40
 8018516:	4628      	mov	r0, r5
 8018518:	f002 fe7c 	bl	801b214 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801851c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8018520:	f1b8 0f00 	cmp.w	r8, #0
 8018524:	f000 811a 	beq.w	801875c <read_submessage_list+0x2b8>
 8018528:	f001 fc94 	bl	8019e54 <uxr_nanos>
 801852c:	4602      	mov	r2, r0
 801852e:	460b      	mov	r3, r1
 8018530:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8018534:	2100      	movs	r1, #0
 8018536:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018538:	9006      	str	r0, [sp, #24]
 801853a:	468c      	mov	ip, r1
 801853c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801853e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018542:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018544:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8018548:	468c      	mov	ip, r1
 801854a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801854c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018550:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8018554:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8018558:	fbc7 0106 	smlal	r0, r1, r7, r6
 801855c:	e9cd 0100 	strd	r0, r1, [sp]
 8018560:	4620      	mov	r0, r4
 8018562:	47c0      	blx	r8
 8018564:	f04f 0301 	mov.w	r3, #1
 8018568:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 801856c:	e7a1      	b.n	80184b2 <read_submessage_list+0xe>
 801856e:	a910      	add	r1, sp, #64	; 0x40
 8018570:	4628      	mov	r0, r5
 8018572:	f002 fe3b 	bl	801b1ec <uxr_deserialize_HEARTBEAT_Payload>
 8018576:	2100      	movs	r1, #0
 8018578:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801857c:	f001 faf8 	bl	8019b70 <uxr_stream_id_from_raw>
 8018580:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018584:	900f      	str	r0, [sp, #60]	; 0x3c
 8018586:	f104 0008 	add.w	r0, r4, #8
 801858a:	4641      	mov	r1, r8
 801858c:	f001 fbde 	bl	8019d4c <uxr_get_input_reliable_stream>
 8018590:	2800      	cmp	r0, #0
 8018592:	d08e      	beq.n	80184b2 <read_submessage_list+0xe>
 8018594:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8018598:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801859c:	f006 f95e 	bl	801e85c <uxr_process_heartbeat>
 80185a0:	4642      	mov	r2, r8
 80185a2:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80185a6:	4620      	mov	r0, r4
 80185a8:	f7ff fdf8 	bl	801819c <write_submessage_acknack.isra.0>
 80185ac:	e781      	b.n	80184b2 <read_submessage_list+0xe>
 80185ae:	a910      	add	r1, sp, #64	; 0x40
 80185b0:	4628      	mov	r0, r5
 80185b2:	f002 fdf3 	bl	801b19c <uxr_deserialize_ACKNACK_Payload>
 80185b6:	2100      	movs	r1, #0
 80185b8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80185bc:	f001 fad8 	bl	8019b70 <uxr_stream_id_from_raw>
 80185c0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80185c4:	900d      	str	r0, [sp, #52]	; 0x34
 80185c6:	f104 0008 	add.w	r0, r4, #8
 80185ca:	f001 fba9 	bl	8019d20 <uxr_get_output_reliable_stream>
 80185ce:	4680      	mov	r8, r0
 80185d0:	2800      	cmp	r0, #0
 80185d2:	f43f af6e 	beq.w	80184b2 <read_submessage_list+0xe>
 80185d6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80185da:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80185de:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80185e2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80185e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80185ea:	b289      	uxth	r1, r1
 80185ec:	f006 fc98 	bl	801ef20 <uxr_process_acknack>
 80185f0:	4640      	mov	r0, r8
 80185f2:	f006 fc59 	bl	801eea8 <uxr_begin_output_nack_buffer_it>
 80185f6:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80185fa:	e005      	b.n	8018608 <read_submessage_list+0x164>
 80185fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80185fe:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8018602:	e9d3 0900 	ldrd	r0, r9, [r3]
 8018606:	47c8      	blx	r9
 8018608:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 801860c:	aa0f      	add	r2, sp, #60	; 0x3c
 801860e:	4651      	mov	r1, sl
 8018610:	4640      	mov	r0, r8
 8018612:	f006 fc4b 	bl	801eeac <uxr_next_reliable_nack_buffer_to_send>
 8018616:	2800      	cmp	r0, #0
 8018618:	d1f0      	bne.n	80185fc <read_submessage_list+0x158>
 801861a:	e74a      	b.n	80184b2 <read_submessage_list+0xe>
 801861c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8018620:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8018624:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8018628:	4628      	mov	r0, r5
 801862a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801862e:	4651      	mov	r1, sl
 8018630:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8018634:	f1a8 0804 	sub.w	r8, r8, #4
 8018638:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 801863c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8018640:	fa1f f888 	uxth.w	r8, r8
 8018644:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018648:	f009 090e 	and.w	r9, r9, #14
 801864c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8018650:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8018654:	f002 fb04 	bl	801ac60 <uxr_deserialize_BaseObjectRequest>
 8018658:	4650      	mov	r0, sl
 801865a:	a90f      	add	r1, sp, #60	; 0x3c
 801865c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018660:	f000 fdca 	bl	80191f8 <uxr_parse_base_object_request>
 8018664:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018666:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 801866a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 801866e:	9110      	str	r1, [sp, #64]	; 0x40
 8018670:	f1bb 0f00 	cmp.w	fp, #0
 8018674:	d006      	beq.n	8018684 <read_submessage_list+0x1e0>
 8018676:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801867a:	4652      	mov	r2, sl
 801867c:	4620      	mov	r0, r4
 801867e:	9300      	str	r3, [sp, #0]
 8018680:	2300      	movs	r3, #0
 8018682:	47d8      	blx	fp
 8018684:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018686:	b182      	cbz	r2, 80186aa <read_submessage_list+0x206>
 8018688:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801868a:	f04f 0c00 	mov.w	ip, #0
 801868e:	3902      	subs	r1, #2
 8018690:	e003      	b.n	801869a <read_submessage_list+0x1f6>
 8018692:	f10c 0c01 	add.w	ip, ip, #1
 8018696:	4594      	cmp	ip, r2
 8018698:	d007      	beq.n	80186aa <read_submessage_list+0x206>
 801869a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801869e:	4553      	cmp	r3, sl
 80186a0:	d1f7      	bne.n	8018692 <read_submessage_list+0x1ee>
 80186a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80186a4:	2200      	movs	r2, #0
 80186a6:	f803 200c 	strb.w	r2, [r3, ip]
 80186aa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80186ae:	464b      	mov	r3, r9
 80186b0:	4642      	mov	r2, r8
 80186b2:	4620      	mov	r0, r4
 80186b4:	9102      	str	r1, [sp, #8]
 80186b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80186b8:	9101      	str	r1, [sp, #4]
 80186ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80186bc:	9100      	str	r1, [sp, #0]
 80186be:	4629      	mov	r1, r5
 80186c0:	f7ff fc4a 	bl	8017f58 <read_submessage_format>
 80186c4:	e6f5      	b.n	80184b2 <read_submessage_list+0xe>
 80186c6:	4629      	mov	r1, r5
 80186c8:	4620      	mov	r0, r4
 80186ca:	f7ff fea3 	bl	8018414 <read_submessage_info>
 80186ce:	e6f0      	b.n	80184b2 <read_submessage_list+0xe>
 80186d0:	2a00      	cmp	r2, #0
 80186d2:	d03e      	beq.n	8018752 <read_submessage_list+0x2ae>
 80186d4:	a910      	add	r1, sp, #64	; 0x40
 80186d6:	4628      	mov	r0, r5
 80186d8:	f002 fcb8 	bl	801b04c <uxr_deserialize_STATUS_Payload>
 80186dc:	a90e      	add	r1, sp, #56	; 0x38
 80186de:	aa0d      	add	r2, sp, #52	; 0x34
 80186e0:	a810      	add	r0, sp, #64	; 0x40
 80186e2:	f000 fd89 	bl	80191f8 <uxr_parse_base_object_request>
 80186e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80186e8:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80186ec:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80186f0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 80186f4:	910f      	str	r1, [sp, #60]	; 0x3c
 80186f6:	f1ba 0f00 	cmp.w	sl, #0
 80186fa:	d006      	beq.n	801870a <read_submessage_list+0x266>
 80186fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018700:	4642      	mov	r2, r8
 8018702:	4620      	mov	r0, r4
 8018704:	9300      	str	r3, [sp, #0]
 8018706:	464b      	mov	r3, r9
 8018708:	47d0      	blx	sl
 801870a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801870c:	2a00      	cmp	r2, #0
 801870e:	f43f aed0 	beq.w	80184b2 <read_submessage_list+0xe>
 8018712:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8018714:	2100      	movs	r1, #0
 8018716:	3802      	subs	r0, #2
 8018718:	e003      	b.n	8018722 <read_submessage_list+0x27e>
 801871a:	3101      	adds	r1, #1
 801871c:	4291      	cmp	r1, r2
 801871e:	f43f aec8 	beq.w	80184b2 <read_submessage_list+0xe>
 8018722:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8018726:	4543      	cmp	r3, r8
 8018728:	d1f7      	bne.n	801871a <read_submessage_list+0x276>
 801872a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801872c:	f803 9001 	strb.w	r9, [r3, r1]
 8018730:	e6bf      	b.n	80184b2 <read_submessage_list+0xe>
 8018732:	2a00      	cmp	r2, #0
 8018734:	f47f aebd 	bne.w	80184b2 <read_submessage_list+0xe>
 8018738:	4629      	mov	r1, r5
 801873a:	4620      	mov	r0, r4
 801873c:	f000 fca0 	bl	8019080 <uxr_read_create_session_status>
 8018740:	e6b7      	b.n	80184b2 <read_submessage_list+0xe>
 8018742:	4629      	mov	r1, r5
 8018744:	4620      	mov	r0, r4
 8018746:	f7ff fcf3 	bl	8018130 <read_submessage_get_info>
 801874a:	e6b2      	b.n	80184b2 <read_submessage_list+0xe>
 801874c:	b017      	add	sp, #92	; 0x5c
 801874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018752:	4629      	mov	r1, r5
 8018754:	4620      	mov	r0, r4
 8018756:	f000 fca1 	bl	801909c <uxr_read_delete_session_status>
 801875a:	e6aa      	b.n	80184b2 <read_submessage_list+0xe>
 801875c:	f001 fb7a 	bl	8019e54 <uxr_nanos>
 8018760:	4642      	mov	r2, r8
 8018762:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018766:	fbc7 3206 	smlal	r3, r2, r7, r6
 801876a:	1818      	adds	r0, r3, r0
 801876c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801876e:	eb42 0101 	adc.w	r1, r2, r1
 8018772:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018774:	4642      	mov	r2, r8
 8018776:	fbc7 3206 	smlal	r3, r2, r7, r6
 801877a:	469c      	mov	ip, r3
 801877c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8018780:	fbc3 7806 	smlal	r7, r8, r3, r6
 8018784:	4643      	mov	r3, r8
 8018786:	eb1c 0c07 	adds.w	ip, ip, r7
 801878a:	eb42 0203 	adc.w	r2, r2, r3
 801878e:	ebb0 030c 	subs.w	r3, r0, ip
 8018792:	eb61 0202 	sbc.w	r2, r1, r2
 8018796:	2a00      	cmp	r2, #0
 8018798:	db08      	blt.n	80187ac <read_submessage_list+0x308>
 801879a:	085b      	lsrs	r3, r3, #1
 801879c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80187a0:	1052      	asrs	r2, r2, #1
 80187a2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80187a6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 80187aa:	e6db      	b.n	8018564 <read_submessage_list+0xc0>
 80187ac:	3301      	adds	r3, #1
 80187ae:	f142 0200 	adc.w	r2, r2, #0
 80187b2:	e7f2      	b.n	801879a <read_submessage_list+0x2f6>
 80187b4:	3b9aca00 	.word	0x3b9aca00

080187b8 <listen_message_reliably>:
 80187b8:	1e0b      	subs	r3, r1, #0
 80187ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187be:	bfb8      	it	lt
 80187c0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80187c4:	b09d      	sub	sp, #116	; 0x74
 80187c6:	4680      	mov	r8, r0
 80187c8:	9305      	str	r3, [sp, #20]
 80187ca:	f001 fb27 	bl	8019e1c <uxr_millis>
 80187ce:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80187d2:	4681      	mov	r9, r0
 80187d4:	2a00      	cmp	r2, #0
 80187d6:	f000 809a 	beq.w	801890e <listen_message_reliably+0x156>
 80187da:	2600      	movs	r6, #0
 80187dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80187e0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80187e4:	460f      	mov	r7, r1
 80187e6:	4630      	mov	r0, r6
 80187e8:	9303      	str	r3, [sp, #12]
 80187ea:	e00e      	b.n	801880a <listen_message_reliably+0x52>
 80187ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80187ee:	3601      	adds	r6, #1
 80187f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80187f2:	455a      	cmp	r2, fp
 80187f4:	9903      	ldr	r1, [sp, #12]
 80187f6:	b2f0      	uxtb	r0, r6
 80187f8:	eb73 0101 	sbcs.w	r1, r3, r1
 80187fc:	da01      	bge.n	8018802 <listen_message_reliably+0x4a>
 80187fe:	4693      	mov	fp, r2
 8018800:	9303      	str	r3, [sp, #12]
 8018802:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8018806:	4283      	cmp	r3, r0
 8018808:	d95f      	bls.n	80188ca <listen_message_reliably+0x112>
 801880a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801880e:	2102      	movs	r1, #2
 8018810:	2201      	movs	r2, #1
 8018812:	00e4      	lsls	r4, r4, #3
 8018814:	f001 f97e 	bl	8019b14 <uxr_stream_id>
 8018818:	4601      	mov	r1, r0
 801881a:	f104 0520 	add.w	r5, r4, #32
 801881e:	463b      	mov	r3, r7
 8018820:	464a      	mov	r2, r9
 8018822:	9109      	str	r1, [sp, #36]	; 0x24
 8018824:	4445      	add	r5, r8
 8018826:	4628      	mov	r0, r5
 8018828:	f006 fb12 	bl	801ee50 <uxr_update_output_stream_heartbeat_timestamp>
 801882c:	eb08 0304 	add.w	r3, r8, r4
 8018830:	2800      	cmp	r0, #0
 8018832:	d0db      	beq.n	80187ec <listen_message_reliably+0x34>
 8018834:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8018838:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 801883c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018840:	4640      	mov	r0, r8
 8018842:	3501      	adds	r5, #1
 8018844:	4444      	add	r4, r8
 8018846:	9304      	str	r3, [sp, #16]
 8018848:	f000 fcae 	bl	80191a8 <uxr_session_header_offset>
 801884c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8018850:	2300      	movs	r3, #0
 8018852:	2211      	movs	r2, #17
 8018854:	a90c      	add	r1, sp, #48	; 0x30
 8018856:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801885a:	9000      	str	r0, [sp, #0]
 801885c:	4650      	mov	r0, sl
 801885e:	3601      	adds	r6, #1
 8018860:	f7fa fd18 	bl	8013294 <ucdr_init_buffer_origin_offset>
 8018864:	2300      	movs	r3, #0
 8018866:	2205      	movs	r2, #5
 8018868:	210b      	movs	r1, #11
 801886a:	4650      	mov	r0, sl
 801886c:	f001 fa90 	bl	8019d90 <uxr_buffer_submessage_header>
 8018870:	2101      	movs	r1, #1
 8018872:	8968      	ldrh	r0, [r5, #10]
 8018874:	f006 fbb0 	bl	801efd8 <uxr_seq_num_add>
 8018878:	892b      	ldrh	r3, [r5, #8]
 801887a:	4602      	mov	r2, r0
 801887c:	a90a      	add	r1, sp, #40	; 0x28
 801887e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018882:	4650      	mov	r0, sl
 8018884:	9b04      	ldr	r3, [sp, #16]
 8018886:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801888a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801888e:	f002 fc99 	bl	801b1c4 <uxr_serialize_HEARTBEAT_Payload>
 8018892:	2200      	movs	r2, #0
 8018894:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018896:	4640      	mov	r0, r8
 8018898:	4611      	mov	r1, r2
 801889a:	f000 fc31 	bl	8019100 <uxr_stamp_session_header>
 801889e:	4650      	mov	r0, sl
 80188a0:	f7fa fd38 	bl	8013314 <ucdr_buffer_length>
 80188a4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80188a8:	4602      	mov	r2, r0
 80188aa:	a90c      	add	r1, sp, #48	; 0x30
 80188ac:	e9d3 0500 	ldrd	r0, r5, [r3]
 80188b0:	47a8      	blx	r5
 80188b2:	9903      	ldr	r1, [sp, #12]
 80188b4:	b2f0      	uxtb	r0, r6
 80188b6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80188ba:	455a      	cmp	r2, fp
 80188bc:	eb73 0101 	sbcs.w	r1, r3, r1
 80188c0:	db9d      	blt.n	80187fe <listen_message_reliably+0x46>
 80188c2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80188c6:	4283      	cmp	r3, r0
 80188c8:	d89f      	bhi.n	801880a <listen_message_reliably+0x52>
 80188ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80188ce:	9a03      	ldr	r2, [sp, #12]
 80188d0:	429a      	cmp	r2, r3
 80188d2:	bf08      	it	eq
 80188d4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80188d8:	d019      	beq.n	801890e <listen_message_reliably+0x156>
 80188da:	ebab 0309 	sub.w	r3, fp, r9
 80188de:	2b00      	cmp	r3, #0
 80188e0:	9d05      	ldr	r5, [sp, #20]
 80188e2:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80188e6:	aa08      	add	r2, sp, #32
 80188e8:	bf08      	it	eq
 80188ea:	2301      	moveq	r3, #1
 80188ec:	a907      	add	r1, sp, #28
 80188ee:	6884      	ldr	r4, [r0, #8]
 80188f0:	429d      	cmp	r5, r3
 80188f2:	6800      	ldr	r0, [r0, #0]
 80188f4:	bfa8      	it	ge
 80188f6:	461d      	movge	r5, r3
 80188f8:	462b      	mov	r3, r5
 80188fa:	47a0      	blx	r4
 80188fc:	b948      	cbnz	r0, 8018912 <listen_message_reliably+0x15a>
 80188fe:	9b05      	ldr	r3, [sp, #20]
 8018900:	1b5b      	subs	r3, r3, r5
 8018902:	2b00      	cmp	r3, #0
 8018904:	9305      	str	r3, [sp, #20]
 8018906:	f73f af60 	bgt.w	80187ca <listen_message_reliably+0x12>
 801890a:	4604      	mov	r4, r0
 801890c:	e012      	b.n	8018934 <listen_message_reliably+0x17c>
 801890e:	9b05      	ldr	r3, [sp, #20]
 8018910:	e7e5      	b.n	80188de <listen_message_reliably+0x126>
 8018912:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018916:	4604      	mov	r4, r0
 8018918:	2500      	movs	r5, #0
 801891a:	a80c      	add	r0, sp, #48	; 0x30
 801891c:	f7fa fccc 	bl	80132b8 <ucdr_init_buffer>
 8018920:	f10d 031a 	add.w	r3, sp, #26
 8018924:	aa06      	add	r2, sp, #24
 8018926:	a90c      	add	r1, sp, #48	; 0x30
 8018928:	4640      	mov	r0, r8
 801892a:	f88d 5018 	strb.w	r5, [sp, #24]
 801892e:	f000 fbfb 	bl	8019128 <uxr_read_session_header>
 8018932:	b918      	cbnz	r0, 801893c <listen_message_reliably+0x184>
 8018934:	4620      	mov	r0, r4
 8018936:	b01d      	add	sp, #116	; 0x74
 8018938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801893c:	4629      	mov	r1, r5
 801893e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018942:	f001 f915 	bl	8019b70 <uxr_stream_id_from_raw>
 8018946:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801894a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801894e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8018952:	2e01      	cmp	r6, #1
 8018954:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018958:	d04b      	beq.n	80189f2 <listen_message_reliably+0x23a>
 801895a:	2e02      	cmp	r6, #2
 801895c:	d00f      	beq.n	801897e <listen_message_reliably+0x1c6>
 801895e:	2e00      	cmp	r6, #0
 8018960:	d1e8      	bne.n	8018934 <listen_message_reliably+0x17c>
 8018962:	4631      	mov	r1, r6
 8018964:	4630      	mov	r0, r6
 8018966:	f001 f903 	bl	8019b70 <uxr_stream_id_from_raw>
 801896a:	4602      	mov	r2, r0
 801896c:	a90c      	add	r1, sp, #48	; 0x30
 801896e:	4640      	mov	r0, r8
 8018970:	920a      	str	r2, [sp, #40]	; 0x28
 8018972:	f7ff fd97 	bl	80184a4 <read_submessage_list>
 8018976:	4620      	mov	r0, r4
 8018978:	b01d      	add	sp, #116	; 0x74
 801897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801897e:	4629      	mov	r1, r5
 8018980:	f108 0008 	add.w	r0, r8, #8
 8018984:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8018988:	f001 f9e0 	bl	8019d4c <uxr_get_input_reliable_stream>
 801898c:	4607      	mov	r7, r0
 801898e:	b338      	cbz	r0, 80189e0 <listen_message_reliably+0x228>
 8018990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018992:	a80c      	add	r0, sp, #48	; 0x30
 8018994:	9203      	str	r2, [sp, #12]
 8018996:	f7fa fcc1 	bl	801331c <ucdr_buffer_remaining>
 801899a:	4603      	mov	r3, r0
 801899c:	f10d 0019 	add.w	r0, sp, #25
 80189a0:	9a03      	ldr	r2, [sp, #12]
 80189a2:	4651      	mov	r1, sl
 80189a4:	9000      	str	r0, [sp, #0]
 80189a6:	4638      	mov	r0, r7
 80189a8:	f005 fe5c 	bl	801e664 <uxr_receive_reliable_message>
 80189ac:	b1c0      	cbz	r0, 80189e0 <listen_message_reliably+0x228>
 80189ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80189b2:	b393      	cbz	r3, 8018a1a <listen_message_reliably+0x262>
 80189b4:	ae14      	add	r6, sp, #80	; 0x50
 80189b6:	f04f 0a02 	mov.w	sl, #2
 80189ba:	e00a      	b.n	80189d2 <listen_message_reliably+0x21a>
 80189bc:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80189c0:	4631      	mov	r1, r6
 80189c2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80189c6:	4640      	mov	r0, r8
 80189c8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80189cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80189ce:	f7ff fd69 	bl	80184a4 <read_submessage_list>
 80189d2:	2204      	movs	r2, #4
 80189d4:	4631      	mov	r1, r6
 80189d6:	4638      	mov	r0, r7
 80189d8:	f005 fec6 	bl	801e768 <uxr_next_input_reliable_buffer_available>
 80189dc:	2800      	cmp	r0, #0
 80189de:	d1ed      	bne.n	80189bc <listen_message_reliably+0x204>
 80189e0:	4640      	mov	r0, r8
 80189e2:	462a      	mov	r2, r5
 80189e4:	4649      	mov	r1, r9
 80189e6:	f7ff fbd9 	bl	801819c <write_submessage_acknack.isra.0>
 80189ea:	4620      	mov	r0, r4
 80189ec:	b01d      	add	sp, #116	; 0x74
 80189ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189f2:	4629      	mov	r1, r5
 80189f4:	f108 0008 	add.w	r0, r8, #8
 80189f8:	f001 f99e 	bl	8019d38 <uxr_get_input_best_effort_stream>
 80189fc:	2800      	cmp	r0, #0
 80189fe:	d099      	beq.n	8018934 <listen_message_reliably+0x17c>
 8018a00:	4651      	mov	r1, sl
 8018a02:	f005 fda5 	bl	801e550 <uxr_receive_best_effort_message>
 8018a06:	2800      	cmp	r0, #0
 8018a08:	d094      	beq.n	8018934 <listen_message_reliably+0x17c>
 8018a0a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018a0e:	a90c      	add	r1, sp, #48	; 0x30
 8018a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a12:	4640      	mov	r0, r8
 8018a14:	f7ff fd46 	bl	80184a4 <read_submessage_list>
 8018a18:	e78c      	b.n	8018934 <listen_message_reliably+0x17c>
 8018a1a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018a1e:	a90c      	add	r1, sp, #48	; 0x30
 8018a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a22:	4640      	mov	r0, r8
 8018a24:	f7ff fd3e 	bl	80184a4 <read_submessage_list>
 8018a28:	e7c4      	b.n	80189b4 <listen_message_reliably+0x1fc>
 8018a2a:	bf00      	nop

08018a2c <uxr_run_session_timeout>:
 8018a2c:	b570      	push	{r4, r5, r6, lr}
 8018a2e:	4604      	mov	r4, r0
 8018a30:	460d      	mov	r5, r1
 8018a32:	f001 f9f3 	bl	8019e1c <uxr_millis>
 8018a36:	4606      	mov	r6, r0
 8018a38:	4620      	mov	r0, r4
 8018a3a:	f7ff fc77 	bl	801832c <uxr_flash_output_streams>
 8018a3e:	4629      	mov	r1, r5
 8018a40:	4620      	mov	r0, r4
 8018a42:	f7ff feb9 	bl	80187b8 <listen_message_reliably>
 8018a46:	f001 f9e9 	bl	8019e1c <uxr_millis>
 8018a4a:	1b83      	subs	r3, r0, r6
 8018a4c:	1ae9      	subs	r1, r5, r3
 8018a4e:	2900      	cmp	r1, #0
 8018a50:	dcf6      	bgt.n	8018a40 <uxr_run_session_timeout+0x14>
 8018a52:	f104 0008 	add.w	r0, r4, #8
 8018a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a5a:	f001 b983 	b.w	8019d64 <uxr_output_streams_confirmed>
 8018a5e:	bf00      	nop

08018a60 <uxr_run_session_until_data>:
 8018a60:	b570      	push	{r4, r5, r6, lr}
 8018a62:	4604      	mov	r4, r0
 8018a64:	460d      	mov	r5, r1
 8018a66:	f001 f9d9 	bl	8019e1c <uxr_millis>
 8018a6a:	4606      	mov	r6, r0
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	f7ff fc5d 	bl	801832c <uxr_flash_output_streams>
 8018a72:	2300      	movs	r3, #0
 8018a74:	4629      	mov	r1, r5
 8018a76:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8018a7a:	e005      	b.n	8018a88 <uxr_run_session_until_data+0x28>
 8018a7c:	f001 f9ce 	bl	8019e1c <uxr_millis>
 8018a80:	1b83      	subs	r3, r0, r6
 8018a82:	1ae9      	subs	r1, r5, r3
 8018a84:	2900      	cmp	r1, #0
 8018a86:	dd07      	ble.n	8018a98 <uxr_run_session_until_data+0x38>
 8018a88:	4620      	mov	r0, r4
 8018a8a:	f7ff fe95 	bl	80187b8 <listen_message_reliably>
 8018a8e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018a92:	2800      	cmp	r0, #0
 8018a94:	d0f2      	beq.n	8018a7c <uxr_run_session_until_data+0x1c>
 8018a96:	bd70      	pop	{r4, r5, r6, pc}
 8018a98:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018a9c:	bd70      	pop	{r4, r5, r6, pc}
 8018a9e:	bf00      	nop

08018aa0 <uxr_run_session_until_confirm_delivery>:
 8018aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018aa4:	4606      	mov	r6, r0
 8018aa6:	460d      	mov	r5, r1
 8018aa8:	f001 f9b8 	bl	8019e1c <uxr_millis>
 8018aac:	4607      	mov	r7, r0
 8018aae:	4630      	mov	r0, r6
 8018ab0:	f106 0808 	add.w	r8, r6, #8
 8018ab4:	f7ff fc3a 	bl	801832c <uxr_flash_output_streams>
 8018ab8:	2d00      	cmp	r5, #0
 8018aba:	db10      	blt.n	8018ade <uxr_run_session_until_confirm_delivery+0x3e>
 8018abc:	462c      	mov	r4, r5
 8018abe:	e006      	b.n	8018ace <uxr_run_session_until_confirm_delivery+0x2e>
 8018ac0:	f7ff fe7a 	bl	80187b8 <listen_message_reliably>
 8018ac4:	f001 f9aa 	bl	8019e1c <uxr_millis>
 8018ac8:	1bc3      	subs	r3, r0, r7
 8018aca:	1aec      	subs	r4, r5, r3
 8018acc:	d407      	bmi.n	8018ade <uxr_run_session_until_confirm_delivery+0x3e>
 8018ace:	4640      	mov	r0, r8
 8018ad0:	f001 f948 	bl	8019d64 <uxr_output_streams_confirmed>
 8018ad4:	4603      	mov	r3, r0
 8018ad6:	4621      	mov	r1, r4
 8018ad8:	4630      	mov	r0, r6
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d0f0      	beq.n	8018ac0 <uxr_run_session_until_confirm_delivery+0x20>
 8018ade:	4640      	mov	r0, r8
 8018ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ae4:	f001 b93e 	b.w	8019d64 <uxr_output_streams_confirmed>

08018ae8 <uxr_run_session_until_all_status>:
 8018ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018af0:	4606      	mov	r6, r0
 8018af2:	4688      	mov	r8, r1
 8018af4:	4692      	mov	sl, r2
 8018af6:	461f      	mov	r7, r3
 8018af8:	f7ff fc18 	bl	801832c <uxr_flash_output_streams>
 8018afc:	f1bb 0f00 	cmp.w	fp, #0
 8018b00:	d004      	beq.n	8018b0c <uxr_run_session_until_all_status+0x24>
 8018b02:	465a      	mov	r2, fp
 8018b04:	21ff      	movs	r1, #255	; 0xff
 8018b06:	4638      	mov	r0, r7
 8018b08:	f008 f940 	bl	8020d8c <memset>
 8018b0c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018b10:	1e7d      	subs	r5, r7, #1
 8018b12:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8018b16:	f001 f981 	bl	8019e1c <uxr_millis>
 8018b1a:	4641      	mov	r1, r8
 8018b1c:	4681      	mov	r9, r0
 8018b1e:	4630      	mov	r0, r6
 8018b20:	f7ff fe4a 	bl	80187b8 <listen_message_reliably>
 8018b24:	f001 f97a 	bl	8019e1c <uxr_millis>
 8018b28:	eba0 0009 	sub.w	r0, r0, r9
 8018b2c:	eba8 0100 	sub.w	r1, r8, r0
 8018b30:	f1bb 0f00 	cmp.w	fp, #0
 8018b34:	d029      	beq.n	8018b8a <uxr_run_session_until_all_status+0xa2>
 8018b36:	46ae      	mov	lr, r5
 8018b38:	f04f 0c00 	mov.w	ip, #0
 8018b3c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018b40:	2cff      	cmp	r4, #255	; 0xff
 8018b42:	d015      	beq.n	8018b70 <uxr_run_session_until_all_status+0x88>
 8018b44:	f10c 0c01 	add.w	ip, ip, #1
 8018b48:	45e3      	cmp	fp, ip
 8018b4a:	d8f7      	bhi.n	8018b3c <uxr_run_session_until_all_status+0x54>
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8018b50:	e000      	b.n	8018b54 <uxr_run_session_until_all_status+0x6c>
 8018b52:	b158      	cbz	r0, 8018b6c <uxr_run_session_until_all_status+0x84>
 8018b54:	462b      	mov	r3, r5
 8018b56:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018b5a:	3302      	adds	r3, #2
 8018b5c:	2801      	cmp	r0, #1
 8018b5e:	eba3 0307 	sub.w	r3, r3, r7
 8018b62:	bf8c      	ite	hi
 8018b64:	2000      	movhi	r0, #0
 8018b66:	2001      	movls	r0, #1
 8018b68:	459b      	cmp	fp, r3
 8018b6a:	d8f2      	bhi.n	8018b52 <uxr_run_session_until_all_status+0x6a>
 8018b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b70:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018b74:	f10c 0c01 	add.w	ip, ip, #1
 8018b78:	45dc      	cmp	ip, fp
 8018b7a:	d201      	bcs.n	8018b80 <uxr_run_session_until_all_status+0x98>
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d0dd      	beq.n	8018b3c <uxr_run_session_until_all_status+0x54>
 8018b80:	2900      	cmp	r1, #0
 8018b82:	dde3      	ble.n	8018b4c <uxr_run_session_until_all_status+0x64>
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d1ca      	bne.n	8018b1e <uxr_run_session_until_all_status+0x36>
 8018b88:	e7e0      	b.n	8018b4c <uxr_run_session_until_all_status+0x64>
 8018b8a:	2001      	movs	r0, #1
 8018b8c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b94 <wait_session_status>:
 8018b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b98:	4604      	mov	r4, r0
 8018b9a:	b09d      	sub	sp, #116	; 0x74
 8018b9c:	20ff      	movs	r0, #255	; 0xff
 8018b9e:	9303      	str	r3, [sp, #12]
 8018ba0:	7160      	strb	r0, [r4, #5]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	f000 80b6 	beq.w	8018d14 <wait_session_status+0x180>
 8018ba8:	4689      	mov	r9, r1
 8018baa:	4692      	mov	sl, r2
 8018bac:	f04f 0b00 	mov.w	fp, #0
 8018bb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018bb2:	4652      	mov	r2, sl
 8018bb4:	4649      	mov	r1, r9
 8018bb6:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018bba:	47a8      	blx	r5
 8018bbc:	f001 f92e 	bl	8019e1c <uxr_millis>
 8018bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018bc4:	4605      	mov	r5, r0
 8018bc6:	e009      	b.n	8018bdc <wait_session_status+0x48>
 8018bc8:	f001 f928 	bl	8019e1c <uxr_millis>
 8018bcc:	1b40      	subs	r0, r0, r5
 8018bce:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	dd40      	ble.n	8018c58 <wait_session_status+0xc4>
 8018bd6:	7960      	ldrb	r0, [r4, #5]
 8018bd8:	28ff      	cmp	r0, #255	; 0xff
 8018bda:	d145      	bne.n	8018c68 <wait_session_status+0xd4>
 8018bdc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018bde:	a908      	add	r1, sp, #32
 8018be0:	6896      	ldr	r6, [r2, #8]
 8018be2:	6810      	ldr	r0, [r2, #0]
 8018be4:	aa09      	add	r2, sp, #36	; 0x24
 8018be6:	47b0      	blx	r6
 8018be8:	2800      	cmp	r0, #0
 8018bea:	d0ed      	beq.n	8018bc8 <wait_session_status+0x34>
 8018bec:	a80c      	add	r0, sp, #48	; 0x30
 8018bee:	2600      	movs	r6, #0
 8018bf0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018bf4:	f7fa fb60 	bl	80132b8 <ucdr_init_buffer>
 8018bf8:	f10d 031e 	add.w	r3, sp, #30
 8018bfc:	aa07      	add	r2, sp, #28
 8018bfe:	a90c      	add	r1, sp, #48	; 0x30
 8018c00:	4620      	mov	r0, r4
 8018c02:	f88d 601c 	strb.w	r6, [sp, #28]
 8018c06:	f000 fa8f 	bl	8019128 <uxr_read_session_header>
 8018c0a:	2800      	cmp	r0, #0
 8018c0c:	d0dc      	beq.n	8018bc8 <wait_session_status+0x34>
 8018c0e:	4631      	mov	r1, r6
 8018c10:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018c14:	f000 ffac 	bl	8019b70 <uxr_stream_id_from_raw>
 8018c18:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018c1c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018c20:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018c24:	2f01      	cmp	r7, #1
 8018c26:	9302      	str	r3, [sp, #8]
 8018c28:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8018c2c:	d05c      	beq.n	8018ce8 <wait_session_status+0x154>
 8018c2e:	2f02      	cmp	r7, #2
 8018c30:	d020      	beq.n	8018c74 <wait_session_status+0xe0>
 8018c32:	2f00      	cmp	r7, #0
 8018c34:	d1c8      	bne.n	8018bc8 <wait_session_status+0x34>
 8018c36:	4639      	mov	r1, r7
 8018c38:	4638      	mov	r0, r7
 8018c3a:	f000 ff99 	bl	8019b70 <uxr_stream_id_from_raw>
 8018c3e:	a90c      	add	r1, sp, #48	; 0x30
 8018c40:	4602      	mov	r2, r0
 8018c42:	900b      	str	r0, [sp, #44]	; 0x2c
 8018c44:	4620      	mov	r0, r4
 8018c46:	f7ff fc2d 	bl	80184a4 <read_submessage_list>
 8018c4a:	f001 f8e7 	bl	8019e1c <uxr_millis>
 8018c4e:	1b40      	subs	r0, r0, r5
 8018c50:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	dcbe      	bgt.n	8018bd6 <wait_session_status+0x42>
 8018c58:	f10b 0b01 	add.w	fp, fp, #1
 8018c5c:	9b03      	ldr	r3, [sp, #12]
 8018c5e:	7960      	ldrb	r0, [r4, #5]
 8018c60:	455b      	cmp	r3, fp
 8018c62:	d001      	beq.n	8018c68 <wait_session_status+0xd4>
 8018c64:	28ff      	cmp	r0, #255	; 0xff
 8018c66:	d0a3      	beq.n	8018bb0 <wait_session_status+0x1c>
 8018c68:	38ff      	subs	r0, #255	; 0xff
 8018c6a:	bf18      	it	ne
 8018c6c:	2001      	movne	r0, #1
 8018c6e:	b01d      	add	sp, #116	; 0x74
 8018c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c74:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8018c78:	4631      	mov	r1, r6
 8018c7a:	f104 0008 	add.w	r0, r4, #8
 8018c7e:	9304      	str	r3, [sp, #16]
 8018c80:	f001 f864 	bl	8019d4c <uxr_get_input_reliable_stream>
 8018c84:	4680      	mov	r8, r0
 8018c86:	b348      	cbz	r0, 8018cdc <wait_session_status+0x148>
 8018c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018c8a:	a80c      	add	r0, sp, #48	; 0x30
 8018c8c:	9205      	str	r2, [sp, #20]
 8018c8e:	f7fa fb45 	bl	801331c <ucdr_buffer_remaining>
 8018c92:	4603      	mov	r3, r0
 8018c94:	f10d 001d 	add.w	r0, sp, #29
 8018c98:	9a05      	ldr	r2, [sp, #20]
 8018c9a:	9000      	str	r0, [sp, #0]
 8018c9c:	4640      	mov	r0, r8
 8018c9e:	9902      	ldr	r1, [sp, #8]
 8018ca0:	f005 fce0 	bl	801e664 <uxr_receive_reliable_message>
 8018ca4:	b1d0      	cbz	r0, 8018cdc <wait_session_status+0x148>
 8018ca6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d03a      	beq.n	8018d24 <wait_session_status+0x190>
 8018cae:	9f04      	ldr	r7, [sp, #16]
 8018cb0:	e00a      	b.n	8018cc8 <wait_session_status+0x134>
 8018cb2:	f04f 0302 	mov.w	r3, #2
 8018cb6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8018cba:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018cbe:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8018cc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018cc4:	f7ff fbee 	bl	80184a4 <read_submessage_list>
 8018cc8:	a914      	add	r1, sp, #80	; 0x50
 8018cca:	2204      	movs	r2, #4
 8018ccc:	4640      	mov	r0, r8
 8018cce:	f005 fd4b 	bl	801e768 <uxr_next_input_reliable_buffer_available>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	a914      	add	r1, sp, #80	; 0x50
 8018cd6:	4620      	mov	r0, r4
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d1ea      	bne.n	8018cb2 <wait_session_status+0x11e>
 8018cdc:	4632      	mov	r2, r6
 8018cde:	9904      	ldr	r1, [sp, #16]
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	f7ff fa5b 	bl	801819c <write_submessage_acknack.isra.0>
 8018ce6:	e76f      	b.n	8018bc8 <wait_session_status+0x34>
 8018ce8:	4631      	mov	r1, r6
 8018cea:	f104 0008 	add.w	r0, r4, #8
 8018cee:	f001 f823 	bl	8019d38 <uxr_get_input_best_effort_stream>
 8018cf2:	2800      	cmp	r0, #0
 8018cf4:	f43f af68 	beq.w	8018bc8 <wait_session_status+0x34>
 8018cf8:	9902      	ldr	r1, [sp, #8]
 8018cfa:	f005 fc29 	bl	801e550 <uxr_receive_best_effort_message>
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	f43f af62 	beq.w	8018bc8 <wait_session_status+0x34>
 8018d04:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018d08:	a90c      	add	r1, sp, #48	; 0x30
 8018d0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d0c:	4620      	mov	r0, r4
 8018d0e:	f7ff fbc9 	bl	80184a4 <read_submessage_list>
 8018d12:	e759      	b.n	8018bc8 <wait_session_status+0x34>
 8018d14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d16:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018d1a:	47a0      	blx	r4
 8018d1c:	2001      	movs	r0, #1
 8018d1e:	b01d      	add	sp, #116	; 0x74
 8018d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d24:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018d28:	a90c      	add	r1, sp, #48	; 0x30
 8018d2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d2c:	4620      	mov	r0, r4
 8018d2e:	f7ff fbb9 	bl	80184a4 <read_submessage_list>
 8018d32:	e7bc      	b.n	8018cae <wait_session_status+0x11a>

08018d34 <uxr_delete_session_retries>:
 8018d34:	b530      	push	{r4, r5, lr}
 8018d36:	b08f      	sub	sp, #60	; 0x3c
 8018d38:	4604      	mov	r4, r0
 8018d3a:	460d      	mov	r5, r1
 8018d3c:	f000 fa34 	bl	80191a8 <uxr_session_header_offset>
 8018d40:	2300      	movs	r3, #0
 8018d42:	2210      	movs	r2, #16
 8018d44:	a902      	add	r1, sp, #8
 8018d46:	9000      	str	r0, [sp, #0]
 8018d48:	a806      	add	r0, sp, #24
 8018d4a:	f7fa faa3 	bl	8013294 <ucdr_init_buffer_origin_offset>
 8018d4e:	a906      	add	r1, sp, #24
 8018d50:	4620      	mov	r0, r4
 8018d52:	f000 f979 	bl	8019048 <uxr_buffer_delete_session>
 8018d56:	2200      	movs	r2, #0
 8018d58:	9b06      	ldr	r3, [sp, #24]
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	4611      	mov	r1, r2
 8018d5e:	f000 f9cf 	bl	8019100 <uxr_stamp_session_header>
 8018d62:	a806      	add	r0, sp, #24
 8018d64:	f7fa fad6 	bl	8013314 <ucdr_buffer_length>
 8018d68:	462b      	mov	r3, r5
 8018d6a:	4602      	mov	r2, r0
 8018d6c:	a902      	add	r1, sp, #8
 8018d6e:	4620      	mov	r0, r4
 8018d70:	f7ff ff10 	bl	8018b94 <wait_session_status>
 8018d74:	b118      	cbz	r0, 8018d7e <uxr_delete_session_retries+0x4a>
 8018d76:	7960      	ldrb	r0, [r4, #5]
 8018d78:	fab0 f080 	clz	r0, r0
 8018d7c:	0940      	lsrs	r0, r0, #5
 8018d7e:	b00f      	add	sp, #60	; 0x3c
 8018d80:	bd30      	pop	{r4, r5, pc}
 8018d82:	bf00      	nop

08018d84 <uxr_create_session>:
 8018d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d88:	f100 0b08 	add.w	fp, r0, #8
 8018d8c:	4604      	mov	r4, r0
 8018d8e:	b0ab      	sub	sp, #172	; 0xac
 8018d90:	4658      	mov	r0, fp
 8018d92:	465e      	mov	r6, fp
 8018d94:	f000 ff22 	bl	8019bdc <uxr_reset_stream_storage>
 8018d98:	4620      	mov	r0, r4
 8018d9a:	f000 fa05 	bl	80191a8 <uxr_session_header_offset>
 8018d9e:	2300      	movs	r3, #0
 8018da0:	221c      	movs	r2, #28
 8018da2:	a90b      	add	r1, sp, #44	; 0x2c
 8018da4:	9000      	str	r0, [sp, #0]
 8018da6:	a812      	add	r0, sp, #72	; 0x48
 8018da8:	f7fa fa74 	bl	8013294 <ucdr_init_buffer_origin_offset>
 8018dac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018dae:	a912      	add	r1, sp, #72	; 0x48
 8018db0:	4620      	mov	r0, r4
 8018db2:	8a1a      	ldrh	r2, [r3, #16]
 8018db4:	3a04      	subs	r2, #4
 8018db6:	b292      	uxth	r2, r2
 8018db8:	f000 f91c 	bl	8018ff4 <uxr_buffer_create_session>
 8018dbc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018dbe:	4620      	mov	r0, r4
 8018dc0:	f000 f98a 	bl	80190d8 <uxr_stamp_create_session_header>
 8018dc4:	a812      	add	r0, sp, #72	; 0x48
 8018dc6:	f7fa faa5 	bl	8013314 <ucdr_buffer_length>
 8018dca:	23ff      	movs	r3, #255	; 0xff
 8018dcc:	4681      	mov	r9, r0
 8018dce:	7163      	strb	r3, [r4, #5]
 8018dd0:	230a      	movs	r3, #10
 8018dd2:	9303      	str	r3, [sp, #12]
 8018dd4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018dd6:	464a      	mov	r2, r9
 8018dd8:	a90b      	add	r1, sp, #44	; 0x2c
 8018dda:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018dde:	47a8      	blx	r5
 8018de0:	f001 f81c 	bl	8019e1c <uxr_millis>
 8018de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018de8:	4605      	mov	r5, r0
 8018dea:	e009      	b.n	8018e00 <uxr_create_session+0x7c>
 8018dec:	f001 f816 	bl	8019e1c <uxr_millis>
 8018df0:	1b40      	subs	r0, r0, r5
 8018df2:	7962      	ldrb	r2, [r4, #5]
 8018df4:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	dd38      	ble.n	8018e6e <uxr_create_session+0xea>
 8018dfc:	2aff      	cmp	r2, #255	; 0xff
 8018dfe:	d13c      	bne.n	8018e7a <uxr_create_session+0xf6>
 8018e00:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018e02:	a907      	add	r1, sp, #28
 8018e04:	6897      	ldr	r7, [r2, #8]
 8018e06:	6810      	ldr	r0, [r2, #0]
 8018e08:	aa08      	add	r2, sp, #32
 8018e0a:	47b8      	blx	r7
 8018e0c:	2800      	cmp	r0, #0
 8018e0e:	d0ed      	beq.n	8018dec <uxr_create_session+0x68>
 8018e10:	a81a      	add	r0, sp, #104	; 0x68
 8018e12:	2700      	movs	r7, #0
 8018e14:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018e18:	f7fa fa4e 	bl	80132b8 <ucdr_init_buffer>
 8018e1c:	f10d 031a 	add.w	r3, sp, #26
 8018e20:	aa06      	add	r2, sp, #24
 8018e22:	a91a      	add	r1, sp, #104	; 0x68
 8018e24:	4620      	mov	r0, r4
 8018e26:	f88d 7018 	strb.w	r7, [sp, #24]
 8018e2a:	f000 f97d 	bl	8019128 <uxr_read_session_header>
 8018e2e:	2800      	cmp	r0, #0
 8018e30:	d0dc      	beq.n	8018dec <uxr_create_session+0x68>
 8018e32:	4639      	mov	r1, r7
 8018e34:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018e38:	f000 fe9a 	bl	8019b70 <uxr_stream_id_from_raw>
 8018e3c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018e40:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8018e44:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018e48:	2f01      	cmp	r7, #1
 8018e4a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018e4e:	d053      	beq.n	8018ef8 <uxr_create_session+0x174>
 8018e50:	2f02      	cmp	r7, #2
 8018e52:	d018      	beq.n	8018e86 <uxr_create_session+0x102>
 8018e54:	2f00      	cmp	r7, #0
 8018e56:	d1c9      	bne.n	8018dec <uxr_create_session+0x68>
 8018e58:	4639      	mov	r1, r7
 8018e5a:	4638      	mov	r0, r7
 8018e5c:	f000 fe88 	bl	8019b70 <uxr_stream_id_from_raw>
 8018e60:	a91a      	add	r1, sp, #104	; 0x68
 8018e62:	4602      	mov	r2, r0
 8018e64:	900a      	str	r0, [sp, #40]	; 0x28
 8018e66:	4620      	mov	r0, r4
 8018e68:	f7ff fb1c 	bl	80184a4 <read_submessage_list>
 8018e6c:	e7be      	b.n	8018dec <uxr_create_session+0x68>
 8018e6e:	9b03      	ldr	r3, [sp, #12]
 8018e70:	3b01      	subs	r3, #1
 8018e72:	9303      	str	r3, [sp, #12]
 8018e74:	d001      	beq.n	8018e7a <uxr_create_session+0xf6>
 8018e76:	2aff      	cmp	r2, #255	; 0xff
 8018e78:	d0ac      	beq.n	8018dd4 <uxr_create_session+0x50>
 8018e7a:	2a00      	cmp	r2, #0
 8018e7c:	d051      	beq.n	8018f22 <uxr_create_session+0x19e>
 8018e7e:	2000      	movs	r0, #0
 8018e80:	b02b      	add	sp, #172	; 0xac
 8018e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e86:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018e8a:	4641      	mov	r1, r8
 8018e8c:	4630      	mov	r0, r6
 8018e8e:	9304      	str	r3, [sp, #16]
 8018e90:	f000 ff5c 	bl	8019d4c <uxr_get_input_reliable_stream>
 8018e94:	4682      	mov	sl, r0
 8018e96:	b348      	cbz	r0, 8018eec <uxr_create_session+0x168>
 8018e98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018e9a:	a81a      	add	r0, sp, #104	; 0x68
 8018e9c:	9205      	str	r2, [sp, #20]
 8018e9e:	f7fa fa3d 	bl	801331c <ucdr_buffer_remaining>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	f10d 0019 	add.w	r0, sp, #25
 8018ea8:	9a05      	ldr	r2, [sp, #20]
 8018eaa:	4659      	mov	r1, fp
 8018eac:	9000      	str	r0, [sp, #0]
 8018eae:	4650      	mov	r0, sl
 8018eb0:	f005 fbd8 	bl	801e664 <uxr_receive_reliable_message>
 8018eb4:	b1d0      	cbz	r0, 8018eec <uxr_create_session+0x168>
 8018eb6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d038      	beq.n	8018f30 <uxr_create_session+0x1ac>
 8018ebe:	9f04      	ldr	r7, [sp, #16]
 8018ec0:	e00a      	b.n	8018ed8 <uxr_create_session+0x154>
 8018ec2:	f04f 0302 	mov.w	r3, #2
 8018ec6:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8018eca:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8018ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ed4:	f7ff fae6 	bl	80184a4 <read_submessage_list>
 8018ed8:	a922      	add	r1, sp, #136	; 0x88
 8018eda:	2204      	movs	r2, #4
 8018edc:	4650      	mov	r0, sl
 8018ede:	f005 fc43 	bl	801e768 <uxr_next_input_reliable_buffer_available>
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	a922      	add	r1, sp, #136	; 0x88
 8018ee6:	4620      	mov	r0, r4
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d1ea      	bne.n	8018ec2 <uxr_create_session+0x13e>
 8018eec:	4642      	mov	r2, r8
 8018eee:	9904      	ldr	r1, [sp, #16]
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	f7ff f953 	bl	801819c <write_submessage_acknack.isra.0>
 8018ef6:	e779      	b.n	8018dec <uxr_create_session+0x68>
 8018ef8:	4641      	mov	r1, r8
 8018efa:	4630      	mov	r0, r6
 8018efc:	f000 ff1c 	bl	8019d38 <uxr_get_input_best_effort_stream>
 8018f00:	2800      	cmp	r0, #0
 8018f02:	f43f af73 	beq.w	8018dec <uxr_create_session+0x68>
 8018f06:	4659      	mov	r1, fp
 8018f08:	f005 fb22 	bl	801e550 <uxr_receive_best_effort_message>
 8018f0c:	2800      	cmp	r0, #0
 8018f0e:	f43f af6d 	beq.w	8018dec <uxr_create_session+0x68>
 8018f12:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018f16:	a91a      	add	r1, sp, #104	; 0x68
 8018f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f1a:	4620      	mov	r0, r4
 8018f1c:	f7ff fac2 	bl	80184a4 <read_submessage_list>
 8018f20:	e764      	b.n	8018dec <uxr_create_session+0x68>
 8018f22:	4630      	mov	r0, r6
 8018f24:	f000 fe5a 	bl	8019bdc <uxr_reset_stream_storage>
 8018f28:	2001      	movs	r0, #1
 8018f2a:	b02b      	add	sp, #172	; 0xac
 8018f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f30:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018f34:	a91a      	add	r1, sp, #104	; 0x68
 8018f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f38:	4620      	mov	r0, r4
 8018f3a:	f7ff fab3 	bl	80184a4 <read_submessage_list>
 8018f3e:	e7be      	b.n	8018ebe <uxr_create_session+0x13a>

08018f40 <uxr_prepare_stream_to_write_submessage>:
 8018f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f44:	b082      	sub	sp, #8
 8018f46:	4604      	mov	r4, r0
 8018f48:	4610      	mov	r0, r2
 8018f4a:	4615      	mov	r5, r2
 8018f4c:	461e      	mov	r6, r3
 8018f4e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8018f52:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8018f56:	f105 0904 	add.w	r9, r5, #4
 8018f5a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8018f5e:	9101      	str	r1, [sp, #4]
 8018f60:	f000 ff56 	bl	8019e10 <uxr_submessage_padding>
 8018f64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018f68:	4481      	add	r9, r0
 8018f6a:	2b01      	cmp	r3, #1
 8018f6c:	d01d      	beq.n	8018faa <uxr_prepare_stream_to_write_submessage+0x6a>
 8018f6e:	2b02      	cmp	r3, #2
 8018f70:	d116      	bne.n	8018fa0 <uxr_prepare_stream_to_write_submessage+0x60>
 8018f72:	f104 0008 	add.w	r0, r4, #8
 8018f76:	4651      	mov	r1, sl
 8018f78:	f000 fed2 	bl	8019d20 <uxr_get_output_reliable_stream>
 8018f7c:	4604      	mov	r4, r0
 8018f7e:	b158      	cbz	r0, 8018f98 <uxr_prepare_stream_to_write_submessage+0x58>
 8018f80:	4649      	mov	r1, r9
 8018f82:	4632      	mov	r2, r6
 8018f84:	f005 fdb6 	bl	801eaf4 <uxr_prepare_reliable_buffer_to_write>
 8018f88:	4604      	mov	r4, r0
 8018f8a:	b12c      	cbz	r4, 8018f98 <uxr_prepare_stream_to_write_submessage+0x58>
 8018f8c:	4643      	mov	r3, r8
 8018f8e:	b2aa      	uxth	r2, r5
 8018f90:	4639      	mov	r1, r7
 8018f92:	4630      	mov	r0, r6
 8018f94:	f000 fefc 	bl	8019d90 <uxr_buffer_submessage_header>
 8018f98:	4620      	mov	r0, r4
 8018f9a:	b002      	add	sp, #8
 8018f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fa0:	2400      	movs	r4, #0
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	b002      	add	sp, #8
 8018fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018faa:	f104 0008 	add.w	r0, r4, #8
 8018fae:	4651      	mov	r1, sl
 8018fb0:	f000 feae 	bl	8019d10 <uxr_get_output_best_effort_stream>
 8018fb4:	4604      	mov	r4, r0
 8018fb6:	2800      	cmp	r0, #0
 8018fb8:	d0ee      	beq.n	8018f98 <uxr_prepare_stream_to_write_submessage+0x58>
 8018fba:	4649      	mov	r1, r9
 8018fbc:	4632      	mov	r2, r6
 8018fbe:	f005 fcc3 	bl	801e948 <uxr_prepare_best_effort_buffer_to_write>
 8018fc2:	4604      	mov	r4, r0
 8018fc4:	e7e1      	b.n	8018f8a <uxr_prepare_stream_to_write_submessage+0x4a>
 8018fc6:	bf00      	nop

08018fc8 <uxr_init_session_info>:
 8018fc8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8018fcc:	23ff      	movs	r3, #255	; 0xff
 8018fce:	7102      	strb	r2, [r0, #4]
 8018fd0:	f880 c001 	strb.w	ip, [r0, #1]
 8018fd4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018fd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018fdc:	7001      	strb	r1, [r0, #0]
 8018fde:	f880 c002 	strb.w	ip, [r0, #2]
 8018fe2:	7143      	strb	r3, [r0, #5]
 8018fe4:	70c2      	strb	r2, [r0, #3]
 8018fe6:	b500      	push	{lr}
 8018fe8:	f04f 0e09 	mov.w	lr, #9
 8018fec:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018ff0:	f85d fb04 	ldr.w	pc, [sp], #4

08018ff4 <uxr_buffer_create_session>:
 8018ff4:	b530      	push	{r4, r5, lr}
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	b089      	sub	sp, #36	; 0x24
 8018ffa:	4d12      	ldr	r5, [pc, #72]	; (8019044 <uxr_buffer_create_session+0x50>)
 8018ffc:	460c      	mov	r4, r1
 8018ffe:	9307      	str	r3, [sp, #28]
 8019000:	4619      	mov	r1, r3
 8019002:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019006:	2201      	movs	r2, #1
 8019008:	9301      	str	r3, [sp, #4]
 801900a:	80c2      	strh	r2, [r0, #6]
 801900c:	f88d 2004 	strb.w	r2, [sp, #4]
 8019010:	682a      	ldr	r2, [r5, #0]
 8019012:	9303      	str	r3, [sp, #12]
 8019014:	9200      	str	r2, [sp, #0]
 8019016:	88aa      	ldrh	r2, [r5, #4]
 8019018:	9306      	str	r3, [sp, #24]
 801901a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801901e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8019022:	9202      	str	r2, [sp, #8]
 8019024:	7802      	ldrb	r2, [r0, #0]
 8019026:	4620      	mov	r0, r4
 8019028:	f88d 200c 	strb.w	r2, [sp, #12]
 801902c:	2210      	movs	r2, #16
 801902e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8019032:	f000 fead 	bl	8019d90 <uxr_buffer_submessage_header>
 8019036:	4669      	mov	r1, sp
 8019038:	4620      	mov	r0, r4
 801903a:	f001 ff1f 	bl	801ae7c <uxr_serialize_CREATE_CLIENT_Payload>
 801903e:	b009      	add	sp, #36	; 0x24
 8019040:	bd30      	pop	{r4, r5, pc}
 8019042:	bf00      	nop
 8019044:	08024518 	.word	0x08024518

08019048 <uxr_buffer_delete_session>:
 8019048:	4a0c      	ldr	r2, [pc, #48]	; (801907c <uxr_buffer_delete_session+0x34>)
 801904a:	2302      	movs	r3, #2
 801904c:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8019050:	b510      	push	{r4, lr}
 8019052:	460c      	mov	r4, r1
 8019054:	b082      	sub	sp, #8
 8019056:	8911      	ldrh	r1, [r2, #8]
 8019058:	2204      	movs	r2, #4
 801905a:	80c3      	strh	r3, [r0, #6]
 801905c:	2300      	movs	r3, #0
 801905e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8019062:	4620      	mov	r0, r4
 8019064:	2103      	movs	r1, #3
 8019066:	f8ad c004 	strh.w	ip, [sp, #4]
 801906a:	f000 fe91 	bl	8019d90 <uxr_buffer_submessage_header>
 801906e:	a901      	add	r1, sp, #4
 8019070:	4620      	mov	r0, r4
 8019072:	f001 ffab 	bl	801afcc <uxr_serialize_DELETE_Payload>
 8019076:	b002      	add	sp, #8
 8019078:	bd10      	pop	{r4, pc}
 801907a:	bf00      	nop
 801907c:	08024518 	.word	0x08024518

08019080 <uxr_read_create_session_status>:
 8019080:	b510      	push	{r4, lr}
 8019082:	460b      	mov	r3, r1
 8019084:	b088      	sub	sp, #32
 8019086:	4604      	mov	r4, r0
 8019088:	a901      	add	r1, sp, #4
 801908a:	4618      	mov	r0, r3
 801908c:	f001 ffae 	bl	801afec <uxr_deserialize_STATUS_AGENT_Payload>
 8019090:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019094:	7163      	strb	r3, [r4, #5]
 8019096:	b008      	add	sp, #32
 8019098:	bd10      	pop	{r4, pc}
 801909a:	bf00      	nop

0801909c <uxr_read_delete_session_status>:
 801909c:	b510      	push	{r4, lr}
 801909e:	b084      	sub	sp, #16
 80190a0:	4604      	mov	r4, r0
 80190a2:	4608      	mov	r0, r1
 80190a4:	a902      	add	r1, sp, #8
 80190a6:	f001 ffd1 	bl	801b04c <uxr_deserialize_STATUS_Payload>
 80190aa:	88e3      	ldrh	r3, [r4, #6]
 80190ac:	2b02      	cmp	r3, #2
 80190ae:	d001      	beq.n	80190b4 <uxr_read_delete_session_status+0x18>
 80190b0:	b004      	add	sp, #16
 80190b2:	bd10      	pop	{r4, pc}
 80190b4:	f10d 000a 	add.w	r0, sp, #10
 80190b8:	f7fe fec6 	bl	8017e48 <uxr_object_id_from_raw>
 80190bc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80190c0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80190c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	2b02      	cmp	r3, #2
 80190cc:	d1f0      	bne.n	80190b0 <uxr_read_delete_session_status+0x14>
 80190ce:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80190d2:	7163      	strb	r3, [r4, #5]
 80190d4:	e7ec      	b.n	80190b0 <uxr_read_delete_session_status+0x14>
 80190d6:	bf00      	nop

080190d8 <uxr_stamp_create_session_header>:
 80190d8:	b510      	push	{r4, lr}
 80190da:	2208      	movs	r2, #8
 80190dc:	b08a      	sub	sp, #40	; 0x28
 80190de:	4604      	mov	r4, r0
 80190e0:	eb0d 0002 	add.w	r0, sp, r2
 80190e4:	f7fa f8e8 	bl	80132b8 <ucdr_init_buffer>
 80190e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190ec:	2300      	movs	r3, #0
 80190ee:	a802      	add	r0, sp, #8
 80190f0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80190f4:	9400      	str	r4, [sp, #0]
 80190f6:	461a      	mov	r2, r3
 80190f8:	f001 f846 	bl	801a188 <uxr_serialize_message_header>
 80190fc:	b00a      	add	sp, #40	; 0x28
 80190fe:	bd10      	pop	{r4, pc}

08019100 <uxr_stamp_session_header>:
 8019100:	b530      	push	{r4, r5, lr}
 8019102:	b08d      	sub	sp, #52	; 0x34
 8019104:	4604      	mov	r4, r0
 8019106:	460d      	mov	r5, r1
 8019108:	4619      	mov	r1, r3
 801910a:	a804      	add	r0, sp, #16
 801910c:	9203      	str	r2, [sp, #12]
 801910e:	2208      	movs	r2, #8
 8019110:	f7fa f8d2 	bl	80132b8 <ucdr_init_buffer>
 8019114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019118:	9b03      	ldr	r3, [sp, #12]
 801911a:	462a      	mov	r2, r5
 801911c:	a804      	add	r0, sp, #16
 801911e:	9400      	str	r4, [sp, #0]
 8019120:	f001 f832 	bl	801a188 <uxr_serialize_message_header>
 8019124:	b00d      	add	sp, #52	; 0x34
 8019126:	bd30      	pop	{r4, r5, pc}

08019128 <uxr_read_session_header>:
 8019128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801912c:	4607      	mov	r7, r0
 801912e:	b084      	sub	sp, #16
 8019130:	4608      	mov	r0, r1
 8019132:	460c      	mov	r4, r1
 8019134:	4615      	mov	r5, r2
 8019136:	461e      	mov	r6, r3
 8019138:	f7fa f8f0 	bl	801331c <ucdr_buffer_remaining>
 801913c:	2808      	cmp	r0, #8
 801913e:	d803      	bhi.n	8019148 <uxr_read_session_header+0x20>
 8019140:	2000      	movs	r0, #0
 8019142:	b004      	add	sp, #16
 8019144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019148:	f10d 080c 	add.w	r8, sp, #12
 801914c:	4633      	mov	r3, r6
 801914e:	462a      	mov	r2, r5
 8019150:	4620      	mov	r0, r4
 8019152:	f10d 010b 	add.w	r1, sp, #11
 8019156:	f8cd 8000 	str.w	r8, [sp]
 801915a:	f001 f833 	bl	801a1c4 <uxr_deserialize_message_header>
 801915e:	783a      	ldrb	r2, [r7, #0]
 8019160:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8019164:	4293      	cmp	r3, r2
 8019166:	d1eb      	bne.n	8019140 <uxr_read_session_header+0x18>
 8019168:	061b      	lsls	r3, r3, #24
 801916a:	d41b      	bmi.n	80191a4 <uxr_read_session_header+0x7c>
 801916c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019170:	787b      	ldrb	r3, [r7, #1]
 8019172:	429a      	cmp	r2, r3
 8019174:	d003      	beq.n	801917e <uxr_read_session_header+0x56>
 8019176:	2001      	movs	r0, #1
 8019178:	f080 0001 	eor.w	r0, r0, #1
 801917c:	e7e1      	b.n	8019142 <uxr_read_session_header+0x1a>
 801917e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8019182:	1cb8      	adds	r0, r7, #2
 8019184:	78bb      	ldrb	r3, [r7, #2]
 8019186:	429a      	cmp	r2, r3
 8019188:	d1f5      	bne.n	8019176 <uxr_read_session_header+0x4e>
 801918a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801918e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8019192:	429a      	cmp	r2, r3
 8019194:	d1ef      	bne.n	8019176 <uxr_read_session_header+0x4e>
 8019196:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801919a:	7843      	ldrb	r3, [r0, #1]
 801919c:	429a      	cmp	r2, r3
 801919e:	d1ea      	bne.n	8019176 <uxr_read_session_header+0x4e>
 80191a0:	2000      	movs	r0, #0
 80191a2:	e7e9      	b.n	8019178 <uxr_read_session_header+0x50>
 80191a4:	2001      	movs	r0, #1
 80191a6:	e7cc      	b.n	8019142 <uxr_read_session_header+0x1a>

080191a8 <uxr_session_header_offset>:
 80191a8:	f990 3000 	ldrsb.w	r3, [r0]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	bfac      	ite	ge
 80191b0:	2008      	movge	r0, #8
 80191b2:	2004      	movlt	r0, #4
 80191b4:	4770      	bx	lr
 80191b6:	bf00      	nop

080191b8 <uxr_init_base_object_request>:
 80191b8:	b510      	push	{r4, lr}
 80191ba:	b082      	sub	sp, #8
 80191bc:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80191c0:	9101      	str	r1, [sp, #4]
 80191c2:	88c3      	ldrh	r3, [r0, #6]
 80191c4:	f1a3 010a 	sub.w	r1, r3, #10
 80191c8:	b289      	uxth	r1, r1
 80191ca:	42a1      	cmp	r1, r4
 80191cc:	d80f      	bhi.n	80191ee <uxr_init_base_object_request+0x36>
 80191ce:	3301      	adds	r3, #1
 80191d0:	b29c      	uxth	r4, r3
 80191d2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80191d6:	b2db      	uxtb	r3, r3
 80191d8:	80c4      	strh	r4, [r0, #6]
 80191da:	1c91      	adds	r1, r2, #2
 80191dc:	9801      	ldr	r0, [sp, #4]
 80191de:	f882 c000 	strb.w	ip, [r2]
 80191e2:	7053      	strb	r3, [r2, #1]
 80191e4:	f7fe fe44 	bl	8017e70 <uxr_object_id_to_raw>
 80191e8:	4620      	mov	r0, r4
 80191ea:	b002      	add	sp, #8
 80191ec:	bd10      	pop	{r4, pc}
 80191ee:	230a      	movs	r3, #10
 80191f0:	f04f 0c00 	mov.w	ip, #0
 80191f4:	461c      	mov	r4, r3
 80191f6:	e7ef      	b.n	80191d8 <uxr_init_base_object_request+0x20>

080191f8 <uxr_parse_base_object_request>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	4604      	mov	r4, r0
 80191fc:	3002      	adds	r0, #2
 80191fe:	460d      	mov	r5, r1
 8019200:	4616      	mov	r6, r2
 8019202:	f7fe fe21 	bl	8017e48 <uxr_object_id_from_raw>
 8019206:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801920a:	8028      	strh	r0, [r5, #0]
 801920c:	806b      	strh	r3, [r5, #2]
 801920e:	7822      	ldrb	r2, [r4, #0]
 8019210:	7863      	ldrb	r3, [r4, #1]
 8019212:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019216:	8033      	strh	r3, [r6, #0]
 8019218:	bd70      	pop	{r4, r5, r6, pc}
 801921a:	bf00      	nop

0801921c <uxr_init_framing_io>:
 801921c:	2300      	movs	r3, #0
 801921e:	7041      	strb	r1, [r0, #1]
 8019220:	7003      	strb	r3, [r0, #0]
 8019222:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019224:	4770      	bx	lr
 8019226:	bf00      	nop

08019228 <uxr_write_framed_msg>:
 8019228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801922c:	4617      	mov	r7, r2
 801922e:	7842      	ldrb	r2, [r0, #1]
 8019230:	460e      	mov	r6, r1
 8019232:	b083      	sub	sp, #12
 8019234:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8019238:	469b      	mov	fp, r3
 801923a:	237e      	movs	r3, #126	; 0x7e
 801923c:	4604      	mov	r4, r0
 801923e:	2901      	cmp	r1, #1
 8019240:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8019244:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019248:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801924c:	f240 8115 	bls.w	801947a <uxr_write_framed_msg+0x252>
 8019250:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019254:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8019258:	2202      	movs	r2, #2
 801925a:	2901      	cmp	r1, #1
 801925c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019260:	d952      	bls.n	8019308 <uxr_write_framed_msg+0xe0>
 8019262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019264:	2103      	movs	r1, #3
 8019266:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801926a:	b2dd      	uxtb	r5, r3
 801926c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019270:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019274:	2a01      	cmp	r2, #1
 8019276:	d95c      	bls.n	8019332 <uxr_write_framed_msg+0x10a>
 8019278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801927a:	1862      	adds	r2, r4, r1
 801927c:	3101      	adds	r1, #1
 801927e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019282:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 8019286:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801928a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801928e:	2a01      	cmp	r2, #1
 8019290:	d961      	bls.n	8019356 <uxr_write_framed_msg+0x12e>
 8019292:	1c4a      	adds	r2, r1, #1
 8019294:	4421      	add	r1, r4
 8019296:	b2d2      	uxtb	r2, r2
 8019298:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801929c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d06a      	beq.n	801937a <uxr_write_framed_msg+0x152>
 80192a4:	f04f 0800 	mov.w	r8, #0
 80192a8:	46c1      	mov	r9, r8
 80192aa:	e016      	b.n	80192da <uxr_write_framed_msg+0xb2>
 80192ac:	2a29      	cmp	r2, #41	; 0x29
 80192ae:	d868      	bhi.n	8019382 <uxr_write_framed_msg+0x15a>
 80192b0:	18a0      	adds	r0, r4, r2
 80192b2:	3201      	adds	r2, #1
 80192b4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80192b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192bc:	ea88 0101 	eor.w	r1, r8, r1
 80192c0:	4b7d      	ldr	r3, [pc, #500]	; (80194b8 <uxr_write_framed_msg+0x290>)
 80192c2:	f109 0901 	add.w	r9, r9, #1
 80192c6:	b2c9      	uxtb	r1, r1
 80192c8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80192cc:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80192d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192d2:	454b      	cmp	r3, r9
 80192d4:	d969      	bls.n	80193aa <uxr_write_framed_msg+0x182>
 80192d6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80192da:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80192de:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80192e2:	2801      	cmp	r0, #1
 80192e4:	d8e2      	bhi.n	80192ac <uxr_write_framed_msg+0x84>
 80192e6:	1c50      	adds	r0, r2, #1
 80192e8:	b2c0      	uxtb	r0, r0
 80192ea:	2829      	cmp	r0, #41	; 0x29
 80192ec:	d849      	bhi.n	8019382 <uxr_write_framed_msg+0x15a>
 80192ee:	18a0      	adds	r0, r4, r2
 80192f0:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80192f4:	3202      	adds	r2, #2
 80192f6:	f081 0520 	eor.w	r5, r1, #32
 80192fa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80192fe:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8019302:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019306:	e7d9      	b.n	80192bc <uxr_write_framed_msg+0x94>
 8019308:	2104      	movs	r1, #4
 801930a:	f04f 0c03 	mov.w	ip, #3
 801930e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019310:	4422      	add	r2, r4
 8019312:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8019316:	44a4      	add	ip, r4
 8019318:	b2dd      	uxtb	r5, r3
 801931a:	f080 0020 	eor.w	r0, r0, #32
 801931e:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8019322:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019326:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801932a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801932e:	2a01      	cmp	r2, #1
 8019330:	d8a2      	bhi.n	8019278 <uxr_write_framed_msg+0x50>
 8019332:	1862      	adds	r2, r4, r1
 8019334:	207d      	movs	r0, #125	; 0x7d
 8019336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019338:	f085 0520 	eor.w	r5, r5, #32
 801933c:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8019340:	3102      	adds	r1, #2
 8019342:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019346:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801934a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801934e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019352:	2a01      	cmp	r2, #1
 8019354:	d89d      	bhi.n	8019292 <uxr_write_framed_msg+0x6a>
 8019356:	1c4d      	adds	r5, r1, #1
 8019358:	1c8a      	adds	r2, r1, #2
 801935a:	f080 0020 	eor.w	r0, r0, #32
 801935e:	4421      	add	r1, r4
 8019360:	fa54 f585 	uxtab	r5, r4, r5
 8019364:	b2d2      	uxtb	r2, r2
 8019366:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801936a:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801936e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8019372:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019376:	2b00      	cmp	r3, #0
 8019378:	d194      	bne.n	80192a4 <uxr_write_framed_msg+0x7c>
 801937a:	4619      	mov	r1, r3
 801937c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019380:	e019      	b.n	80193b6 <uxr_write_framed_msg+0x18e>
 8019382:	2500      	movs	r5, #0
 8019384:	e000      	b.n	8019388 <uxr_write_framed_msg+0x160>
 8019386:	b160      	cbz	r0, 80193a2 <uxr_write_framed_msg+0x17a>
 8019388:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801938c:	1b52      	subs	r2, r2, r5
 801938e:	4653      	mov	r3, sl
 8019390:	4638      	mov	r0, r7
 8019392:	4421      	add	r1, r4
 8019394:	47b0      	blx	r6
 8019396:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801939a:	4405      	add	r5, r0
 801939c:	4295      	cmp	r5, r2
 801939e:	d3f2      	bcc.n	8019386 <uxr_write_framed_msg+0x15e>
 80193a0:	d066      	beq.n	8019470 <uxr_write_framed_msg+0x248>
 80193a2:	2000      	movs	r0, #0
 80193a4:	b003      	add	sp, #12
 80193a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193aa:	fa5f f188 	uxtb.w	r1, r8
 80193ae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80193b2:	f8ad 8004 	strh.w	r8, [sp, #4]
 80193b6:	f04f 0900 	mov.w	r9, #0
 80193ba:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80193be:	46c8      	mov	r8, r9
 80193c0:	e013      	b.n	80193ea <uxr_write_framed_msg+0x1c2>
 80193c2:	2a29      	cmp	r2, #41	; 0x29
 80193c4:	d824      	bhi.n	8019410 <uxr_write_framed_msg+0x1e8>
 80193c6:	18a3      	adds	r3, r4, r2
 80193c8:	3201      	adds	r2, #1
 80193ca:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80193ce:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80193d2:	f109 0901 	add.w	r9, r9, #1
 80193d6:	f1b9 0f02 	cmp.w	r9, #2
 80193da:	d02d      	beq.n	8019438 <uxr_write_framed_msg+0x210>
 80193dc:	f109 0308 	add.w	r3, r9, #8
 80193e0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80193e4:	446b      	add	r3, sp
 80193e6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80193ea:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80193ee:	2b01      	cmp	r3, #1
 80193f0:	d8e7      	bhi.n	80193c2 <uxr_write_framed_msg+0x19a>
 80193f2:	1c53      	adds	r3, r2, #1
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	2b29      	cmp	r3, #41	; 0x29
 80193f8:	d80a      	bhi.n	8019410 <uxr_write_framed_msg+0x1e8>
 80193fa:	18a3      	adds	r3, r4, r2
 80193fc:	f081 0120 	eor.w	r1, r1, #32
 8019400:	3202      	adds	r2, #2
 8019402:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8019406:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801940a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801940e:	e7e0      	b.n	80193d2 <uxr_write_framed_msg+0x1aa>
 8019410:	2500      	movs	r5, #0
 8019412:	e001      	b.n	8019418 <uxr_write_framed_msg+0x1f0>
 8019414:	2800      	cmp	r0, #0
 8019416:	d0c4      	beq.n	80193a2 <uxr_write_framed_msg+0x17a>
 8019418:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801941c:	1b52      	subs	r2, r2, r5
 801941e:	4653      	mov	r3, sl
 8019420:	4638      	mov	r0, r7
 8019422:	4421      	add	r1, r4
 8019424:	47b0      	blx	r6
 8019426:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801942a:	4405      	add	r5, r0
 801942c:	4295      	cmp	r5, r2
 801942e:	d3f1      	bcc.n	8019414 <uxr_write_framed_msg+0x1ec>
 8019430:	d1b7      	bne.n	80193a2 <uxr_write_framed_msg+0x17a>
 8019432:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8019436:	e7d1      	b.n	80193dc <uxr_write_framed_msg+0x1b4>
 8019438:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801943c:	b19a      	cbz	r2, 8019466 <uxr_write_framed_msg+0x23e>
 801943e:	2500      	movs	r5, #0
 8019440:	e001      	b.n	8019446 <uxr_write_framed_msg+0x21e>
 8019442:	2800      	cmp	r0, #0
 8019444:	d0ad      	beq.n	80193a2 <uxr_write_framed_msg+0x17a>
 8019446:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801944a:	1b52      	subs	r2, r2, r5
 801944c:	4653      	mov	r3, sl
 801944e:	4638      	mov	r0, r7
 8019450:	4421      	add	r1, r4
 8019452:	47b0      	blx	r6
 8019454:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019458:	4405      	add	r5, r0
 801945a:	4295      	cmp	r5, r2
 801945c:	d3f1      	bcc.n	8019442 <uxr_write_framed_msg+0x21a>
 801945e:	d1a0      	bne.n	80193a2 <uxr_write_framed_msg+0x17a>
 8019460:	2300      	movs	r3, #0
 8019462:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019468:	b298      	uxth	r0, r3
 801946a:	b003      	add	sp, #12
 801946c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019470:	f04f 0300 	mov.w	r3, #0
 8019474:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019478:	e72a      	b.n	80192d0 <uxr_write_framed_msg+0xa8>
 801947a:	217d      	movs	r1, #125	; 0x7d
 801947c:	f082 0220 	eor.w	r2, r2, #32
 8019480:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8019484:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019488:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801948c:	2203      	movs	r2, #3
 801948e:	2901      	cmp	r1, #1
 8019490:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019494:	d803      	bhi.n	801949e <uxr_write_framed_msg+0x276>
 8019496:	2105      	movs	r1, #5
 8019498:	f04f 0c04 	mov.w	ip, #4
 801949c:	e737      	b.n	801930e <uxr_write_framed_msg+0xe6>
 801949e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194a0:	2104      	movs	r1, #4
 80194a2:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80194a6:	b2dd      	uxtb	r5, r3
 80194a8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80194ac:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80194b0:	2a01      	cmp	r2, #1
 80194b2:	f63f aee1 	bhi.w	8019278 <uxr_write_framed_msg+0x50>
 80194b6:	e73c      	b.n	8019332 <uxr_write_framed_msg+0x10a>
 80194b8:	080256ac 	.word	0x080256ac

080194bc <uxr_framing_read_transport>:
 80194bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194c0:	4604      	mov	r4, r0
 80194c2:	b085      	sub	sp, #20
 80194c4:	4692      	mov	sl, r2
 80194c6:	4689      	mov	r9, r1
 80194c8:	461d      	mov	r5, r3
 80194ca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80194cc:	f000 fca6 	bl	8019e1c <uxr_millis>
 80194d0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80194d4:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 80194d8:	4680      	mov	r8, r0
 80194da:	42ba      	cmp	r2, r7
 80194dc:	d05f      	beq.n	801959e <uxr_framing_read_transport+0xe2>
 80194de:	d817      	bhi.n	8019510 <uxr_framing_read_transport+0x54>
 80194e0:	3f01      	subs	r7, #1
 80194e2:	1aba      	subs	r2, r7, r2
 80194e4:	2700      	movs	r7, #0
 80194e6:	b2d2      	uxtb	r2, r2
 80194e8:	42b2      	cmp	r2, r6
 80194ea:	d81a      	bhi.n	8019522 <uxr_framing_read_transport+0x66>
 80194ec:	19d3      	adds	r3, r2, r7
 80194ee:	42b3      	cmp	r3, r6
 80194f0:	d852      	bhi.n	8019598 <uxr_framing_read_transport+0xdc>
 80194f2:	b9d2      	cbnz	r2, 801952a <uxr_framing_read_transport+0x6e>
 80194f4:	2600      	movs	r6, #0
 80194f6:	f000 fc91 	bl	8019e1c <uxr_millis>
 80194fa:	682b      	ldr	r3, [r5, #0]
 80194fc:	eba0 0008 	sub.w	r0, r0, r8
 8019500:	1a1b      	subs	r3, r3, r0
 8019502:	4630      	mov	r0, r6
 8019504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019508:	602b      	str	r3, [r5, #0]
 801950a:	b005      	add	sp, #20
 801950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019510:	2f00      	cmp	r7, #0
 8019512:	d060      	beq.n	80195d6 <uxr_framing_read_transport+0x11a>
 8019514:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8019518:	3f01      	subs	r7, #1
 801951a:	b2d2      	uxtb	r2, r2
 801951c:	b2ff      	uxtb	r7, r7
 801951e:	42b2      	cmp	r2, r6
 8019520:	d9e4      	bls.n	80194ec <uxr_framing_read_transport+0x30>
 8019522:	b2f2      	uxtb	r2, r6
 8019524:	2700      	movs	r7, #0
 8019526:	2a00      	cmp	r2, #0
 8019528:	d0e4      	beq.n	80194f4 <uxr_framing_read_transport+0x38>
 801952a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801952c:	4650      	mov	r0, sl
 801952e:	9203      	str	r2, [sp, #12]
 8019530:	9300      	str	r3, [sp, #0]
 8019532:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019536:	682b      	ldr	r3, [r5, #0]
 8019538:	3102      	adds	r1, #2
 801953a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80195e0 <uxr_framing_read_transport+0x124>
 801953e:	4421      	add	r1, r4
 8019540:	47c8      	blx	r9
 8019542:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019546:	4606      	mov	r6, r0
 8019548:	4403      	add	r3, r0
 801954a:	0859      	lsrs	r1, r3, #1
 801954c:	fbab 2101 	umull	r2, r1, fp, r1
 8019550:	222a      	movs	r2, #42	; 0x2a
 8019552:	0889      	lsrs	r1, r1, #2
 8019554:	fb02 3111 	mls	r1, r2, r1, r3
 8019558:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801955c:	2800      	cmp	r0, #0
 801955e:	d0c9      	beq.n	80194f4 <uxr_framing_read_transport+0x38>
 8019560:	9a03      	ldr	r2, [sp, #12]
 8019562:	4290      	cmp	r0, r2
 8019564:	d1c7      	bne.n	80194f6 <uxr_framing_read_transport+0x3a>
 8019566:	2f00      	cmp	r7, #0
 8019568:	d0c5      	beq.n	80194f6 <uxr_framing_read_transport+0x3a>
 801956a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801956c:	3102      	adds	r1, #2
 801956e:	463a      	mov	r2, r7
 8019570:	4650      	mov	r0, sl
 8019572:	4421      	add	r1, r4
 8019574:	9300      	str	r3, [sp, #0]
 8019576:	2300      	movs	r3, #0
 8019578:	47c8      	blx	r9
 801957a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801957e:	4406      	add	r6, r0
 8019580:	1813      	adds	r3, r2, r0
 8019582:	085a      	lsrs	r2, r3, #1
 8019584:	fbab 1b02 	umull	r1, fp, fp, r2
 8019588:	222a      	movs	r2, #42	; 0x2a
 801958a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801958e:	fb02 331b 	mls	r3, r2, fp, r3
 8019592:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019596:	e7ae      	b.n	80194f6 <uxr_framing_read_transport+0x3a>
 8019598:	1ab6      	subs	r6, r6, r2
 801959a:	b2f7      	uxtb	r7, r6
 801959c:	e7a9      	b.n	80194f2 <uxr_framing_read_transport+0x36>
 801959e:	2300      	movs	r3, #0
 80195a0:	2e28      	cmp	r6, #40	; 0x28
 80195a2:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80195a4:	d9bd      	bls.n	8019522 <uxr_framing_read_transport+0x66>
 80195a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195a8:	2229      	movs	r2, #41	; 0x29
 80195aa:	1ca1      	adds	r1, r4, #2
 80195ac:	4650      	mov	r0, sl
 80195ae:	9300      	str	r3, [sp, #0]
 80195b0:	682b      	ldr	r3, [r5, #0]
 80195b2:	47c8      	blx	r9
 80195b4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80195b8:	4606      	mov	r6, r0
 80195ba:	212a      	movs	r1, #42	; 0x2a
 80195bc:	4403      	add	r3, r0
 80195be:	4808      	ldr	r0, [pc, #32]	; (80195e0 <uxr_framing_read_transport+0x124>)
 80195c0:	085a      	lsrs	r2, r3, #1
 80195c2:	fba0 0202 	umull	r0, r2, r0, r2
 80195c6:	0892      	lsrs	r2, r2, #2
 80195c8:	fb01 3312 	mls	r3, r1, r2, r3
 80195cc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80195d0:	2e00      	cmp	r6, #0
 80195d2:	d08f      	beq.n	80194f4 <uxr_framing_read_transport+0x38>
 80195d4:	e78f      	b.n	80194f6 <uxr_framing_read_transport+0x3a>
 80195d6:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 80195da:	b2d2      	uxtb	r2, r2
 80195dc:	e784      	b.n	80194e8 <uxr_framing_read_transport+0x2c>
 80195de:	bf00      	nop
 80195e0:	30c30c31 	.word	0x30c30c31

080195e4 <uxr_read_framed_msg>:
 80195e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195e8:	461e      	mov	r6, r3
 80195ea:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80195ee:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80195f2:	b083      	sub	sp, #12
 80195f4:	4604      	mov	r4, r0
 80195f6:	4688      	mov	r8, r1
 80195f8:	429d      	cmp	r5, r3
 80195fa:	4691      	mov	r9, r2
 80195fc:	f000 818c 	beq.w	8019918 <uxr_read_framed_msg+0x334>
 8019600:	7823      	ldrb	r3, [r4, #0]
 8019602:	4dc3      	ldr	r5, [pc, #780]	; (8019910 <uxr_read_framed_msg+0x32c>)
 8019604:	4fc3      	ldr	r7, [pc, #780]	; (8019914 <uxr_read_framed_msg+0x330>)
 8019606:	2b07      	cmp	r3, #7
 8019608:	d8fd      	bhi.n	8019606 <uxr_read_framed_msg+0x22>
 801960a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801960e:	011c      	.short	0x011c
 8019610:	00d900fb 	.word	0x00d900fb
 8019614:	008f00ba 	.word	0x008f00ba
 8019618:	00320051 	.word	0x00320051
 801961c:	0008      	.short	0x0008
 801961e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019622:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019626:	4299      	cmp	r1, r3
 8019628:	f000 814d 	beq.w	80198c6 <uxr_read_framed_msg+0x2e2>
 801962c:	18e2      	adds	r2, r4, r3
 801962e:	7892      	ldrb	r2, [r2, #2]
 8019630:	2a7d      	cmp	r2, #125	; 0x7d
 8019632:	f000 81b8 	beq.w	80199a6 <uxr_read_framed_msg+0x3c2>
 8019636:	3301      	adds	r3, #1
 8019638:	212a      	movs	r1, #42	; 0x2a
 801963a:	2a7e      	cmp	r2, #126	; 0x7e
 801963c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8019640:	fba5 c000 	umull	ip, r0, r5, r0
 8019644:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019648:	fb01 3310 	mls	r3, r1, r0, r3
 801964c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019650:	f000 8257 	beq.w	8019b02 <uxr_read_framed_msg+0x51e>
 8019654:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019656:	2000      	movs	r0, #0
 8019658:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801965a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801965e:	7020      	strb	r0, [r4, #0]
 8019660:	b29b      	uxth	r3, r3
 8019662:	4299      	cmp	r1, r3
 8019664:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019666:	f000 8178 	beq.w	801995a <uxr_read_framed_msg+0x376>
 801966a:	2000      	movs	r0, #0
 801966c:	b003      	add	sp, #12
 801966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019672:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019676:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801967a:	4298      	cmp	r0, r3
 801967c:	f000 8132 	beq.w	80198e4 <uxr_read_framed_msg+0x300>
 8019680:	18e2      	adds	r2, r4, r3
 8019682:	7891      	ldrb	r1, [r2, #2]
 8019684:	297d      	cmp	r1, #125	; 0x7d
 8019686:	f000 8170 	beq.w	801996a <uxr_read_framed_msg+0x386>
 801968a:	3301      	adds	r3, #1
 801968c:	202a      	movs	r0, #42	; 0x2a
 801968e:	297e      	cmp	r1, #126	; 0x7e
 8019690:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019694:	fba5 c202 	umull	ip, r2, r5, r2
 8019698:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801969c:	fb00 3312 	mls	r3, r0, r2, r3
 80196a0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80196a4:	f000 821d 	beq.w	8019ae2 <uxr_read_framed_msg+0x4fe>
 80196a8:	2307      	movs	r3, #7
 80196aa:	86a1      	strh	r1, [r4, #52]	; 0x34
 80196ac:	7023      	strb	r3, [r4, #0]
 80196ae:	e7aa      	b.n	8019606 <uxr_read_framed_msg+0x22>
 80196b0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80196b2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80196b6:	459e      	cmp	lr, r3
 80196b8:	d827      	bhi.n	801970a <uxr_read_framed_msg+0x126>
 80196ba:	e032      	b.n	8019722 <uxr_read_framed_msg+0x13e>
 80196bc:	fba5 b101 	umull	fp, r1, r5, r1
 80196c0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80196c4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80196c8:	0889      	lsrs	r1, r1, #2
 80196ca:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80196ce:	fb0b 0111 	mls	r1, fp, r1, r0
 80196d2:	f000 80d4 	beq.w	801987e <uxr_read_framed_msg+0x29a>
 80196d6:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80196da:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80196de:	f000 80cb 	beq.w	8019878 <uxr_read_framed_msg+0x294>
 80196e2:	f806 c003 	strb.w	ip, [r6, r3]
 80196e6:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80196e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80196ea:	ea80 010c 	eor.w	r1, r0, ip
 80196ee:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80196f2:	3301      	adds	r3, #1
 80196f4:	b2c9      	uxtb	r1, r1
 80196f6:	b29b      	uxth	r3, r3
 80196f8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 80196fc:	4573      	cmp	r3, lr
 80196fe:	8663      	strh	r3, [r4, #50]	; 0x32
 8019700:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8019704:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019706:	f080 811d 	bcs.w	8019944 <uxr_read_framed_msg+0x360>
 801970a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801970e:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019712:	1c50      	adds	r0, r2, #1
 8019714:	eb04 0c02 	add.w	ip, r4, r2
 8019718:	4592      	cmp	sl, r2
 801971a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801971e:	d1cd      	bne.n	80196bc <uxr_read_framed_msg+0xd8>
 8019720:	459e      	cmp	lr, r3
 8019722:	f040 8114 	bne.w	801994e <uxr_read_framed_msg+0x36a>
 8019726:	2306      	movs	r3, #6
 8019728:	7023      	strb	r3, [r4, #0]
 801972a:	e76c      	b.n	8019606 <uxr_read_framed_msg+0x22>
 801972c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019730:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019734:	4298      	cmp	r0, r3
 8019736:	f000 80c6 	beq.w	80198c6 <uxr_read_framed_msg+0x2e2>
 801973a:	18e2      	adds	r2, r4, r3
 801973c:	7891      	ldrb	r1, [r2, #2]
 801973e:	297d      	cmp	r1, #125	; 0x7d
 8019740:	f000 8193 	beq.w	8019a6a <uxr_read_framed_msg+0x486>
 8019744:	3301      	adds	r3, #1
 8019746:	202a      	movs	r0, #42	; 0x2a
 8019748:	297e      	cmp	r1, #126	; 0x7e
 801974a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801974e:	fba5 c202 	umull	ip, r2, r5, r2
 8019752:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019756:	fb00 3312 	mls	r3, r0, r2, r3
 801975a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801975e:	f000 81d0 	beq.w	8019b02 <uxr_read_framed_msg+0x51e>
 8019762:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019764:	2000      	movs	r0, #0
 8019766:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801976a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801976c:	8660      	strh	r0, [r4, #50]	; 0x32
 801976e:	b29b      	uxth	r3, r3
 8019770:	86e0      	strh	r0, [r4, #54]	; 0x36
 8019772:	428b      	cmp	r3, r1
 8019774:	8623      	strh	r3, [r4, #48]	; 0x30
 8019776:	f240 80e2 	bls.w	801993e <uxr_read_framed_msg+0x35a>
 801977a:	7020      	strb	r0, [r4, #0]
 801977c:	b003      	add	sp, #12
 801977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019782:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019786:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801978a:	4298      	cmp	r0, r3
 801978c:	f000 80aa 	beq.w	80198e4 <uxr_read_framed_msg+0x300>
 8019790:	18e2      	adds	r2, r4, r3
 8019792:	7891      	ldrb	r1, [r2, #2]
 8019794:	297d      	cmp	r1, #125	; 0x7d
 8019796:	f000 8186 	beq.w	8019aa6 <uxr_read_framed_msg+0x4c2>
 801979a:	3301      	adds	r3, #1
 801979c:	202a      	movs	r0, #42	; 0x2a
 801979e:	297e      	cmp	r1, #126	; 0x7e
 80197a0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80197a4:	fba5 c202 	umull	ip, r2, r5, r2
 80197a8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80197ac:	fb00 3312 	mls	r3, r0, r2, r3
 80197b0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80197b4:	f000 8195 	beq.w	8019ae2 <uxr_read_framed_msg+0x4fe>
 80197b8:	2304      	movs	r3, #4
 80197ba:	8621      	strh	r1, [r4, #48]	; 0x30
 80197bc:	7023      	strb	r3, [r4, #0]
 80197be:	e722      	b.n	8019606 <uxr_read_framed_msg+0x22>
 80197c0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80197c4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80197c8:	4290      	cmp	r0, r2
 80197ca:	f000 80b4 	beq.w	8019936 <uxr_read_framed_msg+0x352>
 80197ce:	18a3      	adds	r3, r4, r2
 80197d0:	7899      	ldrb	r1, [r3, #2]
 80197d2:	297d      	cmp	r1, #125	; 0x7d
 80197d4:	f000 8107 	beq.w	80199e6 <uxr_read_framed_msg+0x402>
 80197d8:	3201      	adds	r2, #1
 80197da:	232a      	movs	r3, #42	; 0x2a
 80197dc:	297e      	cmp	r1, #126	; 0x7e
 80197de:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80197e2:	fba5 c000 	umull	ip, r0, r5, r0
 80197e6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80197ea:	fb03 2210 	mls	r2, r3, r0, r2
 80197ee:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80197f2:	f000 818a 	beq.w	8019b0a <uxr_read_framed_msg+0x526>
 80197f6:	7863      	ldrb	r3, [r4, #1]
 80197f8:	428b      	cmp	r3, r1
 80197fa:	bf0c      	ite	eq
 80197fc:	2303      	moveq	r3, #3
 80197fe:	2300      	movne	r3, #0
 8019800:	7023      	strb	r3, [r4, #0]
 8019802:	e700      	b.n	8019606 <uxr_read_framed_msg+0x22>
 8019804:	2300      	movs	r3, #0
 8019806:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801980a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801980e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019812:	4299      	cmp	r1, r3
 8019814:	d06a      	beq.n	80198ec <uxr_read_framed_msg+0x308>
 8019816:	18e2      	adds	r2, r4, r3
 8019818:	7890      	ldrb	r0, [r2, #2]
 801981a:	287d      	cmp	r0, #125	; 0x7d
 801981c:	f000 8100 	beq.w	8019a20 <uxr_read_framed_msg+0x43c>
 8019820:	3301      	adds	r3, #1
 8019822:	212a      	movs	r1, #42	; 0x2a
 8019824:	287e      	cmp	r0, #126	; 0x7e
 8019826:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801982a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801982e:	fba5 c202 	umull	ip, r2, r5, r2
 8019832:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019836:	fb01 3312 	mls	r3, r1, r2, r3
 801983a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801983e:	d055      	beq.n	80198ec <uxr_read_framed_msg+0x308>
 8019840:	2302      	movs	r3, #2
 8019842:	7023      	strb	r3, [r4, #0]
 8019844:	e6df      	b.n	8019606 <uxr_read_framed_msg+0x22>
 8019846:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801984a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801984e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019852:	1c5a      	adds	r2, r3, #1
 8019854:	459c      	cmp	ip, r3
 8019856:	eb04 0103 	add.w	r1, r4, r3
 801985a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801985e:	f43f af04 	beq.w	801966a <uxr_read_framed_msg+0x86>
 8019862:	fba5 0303 	umull	r0, r3, r5, r3
 8019866:	7889      	ldrb	r1, [r1, #2]
 8019868:	089b      	lsrs	r3, r3, #2
 801986a:	297e      	cmp	r1, #126	; 0x7e
 801986c:	fb0e 2313 	mls	r3, lr, r3, r2
 8019870:	b2db      	uxtb	r3, r3
 8019872:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019876:	d1ec      	bne.n	8019852 <uxr_read_framed_msg+0x26e>
 8019878:	2301      	movs	r3, #1
 801987a:	7023      	strb	r3, [r4, #0]
 801987c:	e6c3      	b.n	8019606 <uxr_read_framed_msg+0x22>
 801987e:	1c50      	adds	r0, r2, #1
 8019880:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019884:	3202      	adds	r2, #2
 8019886:	0841      	lsrs	r1, r0, #1
 8019888:	fba5 c101 	umull	ip, r1, r5, r1
 801988c:	0889      	lsrs	r1, r1, #2
 801988e:	fb0b 0111 	mls	r1, fp, r1, r0
 8019892:	1860      	adds	r0, r4, r1
 8019894:	b2c9      	uxtb	r1, r1
 8019896:	458a      	cmp	sl, r1
 8019898:	f43f af42 	beq.w	8019720 <uxr_read_framed_msg+0x13c>
 801989c:	0851      	lsrs	r1, r2, #1
 801989e:	7880      	ldrb	r0, [r0, #2]
 80198a0:	fba5 a101 	umull	sl, r1, r5, r1
 80198a4:	287e      	cmp	r0, #126	; 0x7e
 80198a6:	f080 0c20 	eor.w	ip, r0, #32
 80198aa:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80198ae:	fb0b 2211 	mls	r2, fp, r1, r2
 80198b2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80198b6:	f47f af14 	bne.w	80196e2 <uxr_read_framed_msg+0xfe>
 80198ba:	459e      	cmp	lr, r3
 80198bc:	f43f af33 	beq.w	8019726 <uxr_read_framed_msg+0x142>
 80198c0:	2301      	movs	r3, #1
 80198c2:	7023      	strb	r3, [r4, #0]
 80198c4:	e69f      	b.n	8019606 <uxr_read_framed_msg+0x22>
 80198c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80198c8:	9300      	str	r3, [sp, #0]
 80198ca:	2301      	movs	r3, #1
 80198cc:	9301      	str	r3, [sp, #4]
 80198ce:	464a      	mov	r2, r9
 80198d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198d2:	4641      	mov	r1, r8
 80198d4:	4620      	mov	r0, r4
 80198d6:	f7ff fdf1 	bl	80194bc <uxr_framing_read_transport>
 80198da:	2800      	cmp	r0, #0
 80198dc:	f43f aec5 	beq.w	801966a <uxr_read_framed_msg+0x86>
 80198e0:	7823      	ldrb	r3, [r4, #0]
 80198e2:	e690      	b.n	8019606 <uxr_read_framed_msg+0x22>
 80198e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80198e6:	9300      	str	r3, [sp, #0]
 80198e8:	2302      	movs	r3, #2
 80198ea:	e7ef      	b.n	80198cc <uxr_read_framed_msg+0x2e8>
 80198ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80198ee:	464a      	mov	r2, r9
 80198f0:	4641      	mov	r1, r8
 80198f2:	4620      	mov	r0, r4
 80198f4:	9300      	str	r3, [sp, #0]
 80198f6:	2304      	movs	r3, #4
 80198f8:	9301      	str	r3, [sp, #4]
 80198fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198fc:	f7ff fdde 	bl	80194bc <uxr_framing_read_transport>
 8019900:	2800      	cmp	r0, #0
 8019902:	d1ed      	bne.n	80198e0 <uxr_read_framed_msg+0x2fc>
 8019904:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019908:	2b7e      	cmp	r3, #126	; 0x7e
 801990a:	d0e9      	beq.n	80198e0 <uxr_read_framed_msg+0x2fc>
 801990c:	e6ad      	b.n	801966a <uxr_read_framed_msg+0x86>
 801990e:	bf00      	nop
 8019910:	30c30c31 	.word	0x30c30c31
 8019914:	080256ac 	.word	0x080256ac
 8019918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801991a:	9300      	str	r3, [sp, #0]
 801991c:	2305      	movs	r3, #5
 801991e:	9301      	str	r3, [sp, #4]
 8019920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019922:	f7ff fdcb 	bl	80194bc <uxr_framing_read_transport>
 8019926:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801992a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801992e:	429a      	cmp	r2, r3
 8019930:	f43f ae9b 	beq.w	801966a <uxr_read_framed_msg+0x86>
 8019934:	e664      	b.n	8019600 <uxr_read_framed_msg+0x1c>
 8019936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019938:	9300      	str	r3, [sp, #0]
 801993a:	2303      	movs	r3, #3
 801993c:	e7c6      	b.n	80198cc <uxr_read_framed_msg+0x2e8>
 801993e:	2305      	movs	r3, #5
 8019940:	7023      	strb	r3, [r4, #0]
 8019942:	e660      	b.n	8019606 <uxr_read_framed_msg+0x22>
 8019944:	f43f aeef 	beq.w	8019726 <uxr_read_framed_msg+0x142>
 8019948:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801994c:	d094      	beq.n	8019878 <uxr_read_framed_msg+0x294>
 801994e:	ebae 0303 	sub.w	r3, lr, r3
 8019952:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019954:	3302      	adds	r3, #2
 8019956:	9200      	str	r2, [sp, #0]
 8019958:	e7b8      	b.n	80198cc <uxr_read_framed_msg+0x2e8>
 801995a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801995e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019960:	7013      	strb	r3, [r2, #0]
 8019962:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019964:	b003      	add	sp, #12
 8019966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801996a:	1c59      	adds	r1, r3, #1
 801996c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019970:	084a      	lsrs	r2, r1, #1
 8019972:	fba5 e202 	umull	lr, r2, r5, r2
 8019976:	0892      	lsrs	r2, r2, #2
 8019978:	fb0c 1212 	mls	r2, ip, r2, r1
 801997c:	b2d1      	uxtb	r1, r2
 801997e:	4288      	cmp	r0, r1
 8019980:	d0b0      	beq.n	80198e4 <uxr_read_framed_msg+0x300>
 8019982:	3302      	adds	r3, #2
 8019984:	4422      	add	r2, r4
 8019986:	7891      	ldrb	r1, [r2, #2]
 8019988:	085a      	lsrs	r2, r3, #1
 801998a:	fba5 0202 	umull	r0, r2, r5, r2
 801998e:	297e      	cmp	r1, #126	; 0x7e
 8019990:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019994:	fb0c 3312 	mls	r3, ip, r2, r3
 8019998:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801999c:	f000 80a1 	beq.w	8019ae2 <uxr_read_framed_msg+0x4fe>
 80199a0:	f081 0120 	eor.w	r1, r1, #32
 80199a4:	e680      	b.n	80196a8 <uxr_read_framed_msg+0xc4>
 80199a6:	f103 0c01 	add.w	ip, r3, #1
 80199aa:	202a      	movs	r0, #42	; 0x2a
 80199ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80199b0:	fba5 e202 	umull	lr, r2, r5, r2
 80199b4:	0892      	lsrs	r2, r2, #2
 80199b6:	fb00 c212 	mls	r2, r0, r2, ip
 80199ba:	fa5f fc82 	uxtb.w	ip, r2
 80199be:	4561      	cmp	r1, ip
 80199c0:	d081      	beq.n	80198c6 <uxr_read_framed_msg+0x2e2>
 80199c2:	3302      	adds	r3, #2
 80199c4:	4422      	add	r2, r4
 80199c6:	0859      	lsrs	r1, r3, #1
 80199c8:	7892      	ldrb	r2, [r2, #2]
 80199ca:	fba5 c101 	umull	ip, r1, r5, r1
 80199ce:	2a7e      	cmp	r2, #126	; 0x7e
 80199d0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80199d4:	fb00 3311 	mls	r3, r0, r1, r3
 80199d8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80199dc:	f000 8091 	beq.w	8019b02 <uxr_read_framed_msg+0x51e>
 80199e0:	f082 0220 	eor.w	r2, r2, #32
 80199e4:	e636      	b.n	8019654 <uxr_read_framed_msg+0x70>
 80199e6:	1c51      	adds	r1, r2, #1
 80199e8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80199ec:	084b      	lsrs	r3, r1, #1
 80199ee:	fba5 e303 	umull	lr, r3, r5, r3
 80199f2:	089b      	lsrs	r3, r3, #2
 80199f4:	fb0c 1313 	mls	r3, ip, r3, r1
 80199f8:	b2d9      	uxtb	r1, r3
 80199fa:	4288      	cmp	r0, r1
 80199fc:	d09b      	beq.n	8019936 <uxr_read_framed_msg+0x352>
 80199fe:	3202      	adds	r2, #2
 8019a00:	4423      	add	r3, r4
 8019a02:	0850      	lsrs	r0, r2, #1
 8019a04:	789b      	ldrb	r3, [r3, #2]
 8019a06:	fba5 1000 	umull	r1, r0, r5, r0
 8019a0a:	2b7e      	cmp	r3, #126	; 0x7e
 8019a0c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019a10:	fb0c 2210 	mls	r2, ip, r0, r2
 8019a14:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019a18:	d077      	beq.n	8019b0a <uxr_read_framed_msg+0x526>
 8019a1a:	f083 0120 	eor.w	r1, r3, #32
 8019a1e:	e6ea      	b.n	80197f6 <uxr_read_framed_msg+0x212>
 8019a20:	f103 0c01 	add.w	ip, r3, #1
 8019a24:	202a      	movs	r0, #42	; 0x2a
 8019a26:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019a2a:	fba5 e202 	umull	lr, r2, r5, r2
 8019a2e:	0892      	lsrs	r2, r2, #2
 8019a30:	fb00 c212 	mls	r2, r0, r2, ip
 8019a34:	fa5f fc82 	uxtb.w	ip, r2
 8019a38:	4561      	cmp	r1, ip
 8019a3a:	f43f af57 	beq.w	80198ec <uxr_read_framed_msg+0x308>
 8019a3e:	3302      	adds	r3, #2
 8019a40:	4422      	add	r2, r4
 8019a42:	7891      	ldrb	r1, [r2, #2]
 8019a44:	085a      	lsrs	r2, r3, #1
 8019a46:	fba5 c202 	umull	ip, r2, r5, r2
 8019a4a:	297e      	cmp	r1, #126	; 0x7e
 8019a4c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019a50:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a54:	fb00 3312 	mls	r3, r0, r2, r3
 8019a58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a5c:	f43f af46 	beq.w	80198ec <uxr_read_framed_msg+0x308>
 8019a60:	f081 0120 	eor.w	r1, r1, #32
 8019a64:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019a68:	e6ea      	b.n	8019840 <uxr_read_framed_msg+0x25c>
 8019a6a:	1c59      	adds	r1, r3, #1
 8019a6c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019a70:	084a      	lsrs	r2, r1, #1
 8019a72:	fba5 e202 	umull	lr, r2, r5, r2
 8019a76:	0892      	lsrs	r2, r2, #2
 8019a78:	fb0c 1212 	mls	r2, ip, r2, r1
 8019a7c:	b2d1      	uxtb	r1, r2
 8019a7e:	4288      	cmp	r0, r1
 8019a80:	f43f af21 	beq.w	80198c6 <uxr_read_framed_msg+0x2e2>
 8019a84:	3302      	adds	r3, #2
 8019a86:	4422      	add	r2, r4
 8019a88:	7891      	ldrb	r1, [r2, #2]
 8019a8a:	085a      	lsrs	r2, r3, #1
 8019a8c:	fba5 0202 	umull	r0, r2, r5, r2
 8019a90:	297e      	cmp	r1, #126	; 0x7e
 8019a92:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a96:	fb0c 3312 	mls	r3, ip, r2, r3
 8019a9a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a9e:	d030      	beq.n	8019b02 <uxr_read_framed_msg+0x51e>
 8019aa0:	f081 0120 	eor.w	r1, r1, #32
 8019aa4:	e65d      	b.n	8019762 <uxr_read_framed_msg+0x17e>
 8019aa6:	1c59      	adds	r1, r3, #1
 8019aa8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019aac:	084a      	lsrs	r2, r1, #1
 8019aae:	fba5 e202 	umull	lr, r2, r5, r2
 8019ab2:	0892      	lsrs	r2, r2, #2
 8019ab4:	fb0c 1212 	mls	r2, ip, r2, r1
 8019ab8:	b2d1      	uxtb	r1, r2
 8019aba:	4288      	cmp	r0, r1
 8019abc:	f43f af12 	beq.w	80198e4 <uxr_read_framed_msg+0x300>
 8019ac0:	3302      	adds	r3, #2
 8019ac2:	4422      	add	r2, r4
 8019ac4:	7891      	ldrb	r1, [r2, #2]
 8019ac6:	085a      	lsrs	r2, r3, #1
 8019ac8:	fba5 0202 	umull	r0, r2, r5, r2
 8019acc:	297e      	cmp	r1, #126	; 0x7e
 8019ace:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019ad2:	fb0c 3312 	mls	r3, ip, r2, r3
 8019ad6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019ada:	d002      	beq.n	8019ae2 <uxr_read_framed_msg+0x4fe>
 8019adc:	f081 0120 	eor.w	r1, r1, #32
 8019ae0:	e66a      	b.n	80197b8 <uxr_read_framed_msg+0x1d4>
 8019ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ae4:	9300      	str	r3, [sp, #0]
 8019ae6:	2302      	movs	r3, #2
 8019ae8:	9301      	str	r3, [sp, #4]
 8019aea:	464a      	mov	r2, r9
 8019aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019aee:	4641      	mov	r1, r8
 8019af0:	4620      	mov	r0, r4
 8019af2:	f7ff fce3 	bl	80194bc <uxr_framing_read_transport>
 8019af6:	2800      	cmp	r0, #0
 8019af8:	f47f aef2 	bne.w	80198e0 <uxr_read_framed_msg+0x2fc>
 8019afc:	2301      	movs	r3, #1
 8019afe:	7023      	strb	r3, [r4, #0]
 8019b00:	e581      	b.n	8019606 <uxr_read_framed_msg+0x22>
 8019b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b04:	9300      	str	r3, [sp, #0]
 8019b06:	2301      	movs	r3, #1
 8019b08:	e7ee      	b.n	8019ae8 <uxr_read_framed_msg+0x504>
 8019b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b0c:	9300      	str	r3, [sp, #0]
 8019b0e:	2303      	movs	r3, #3
 8019b10:	e7ea      	b.n	8019ae8 <uxr_read_framed_msg+0x504>
 8019b12:	bf00      	nop

08019b14 <uxr_stream_id>:
 8019b14:	2901      	cmp	r1, #1
 8019b16:	4684      	mov	ip, r0
 8019b18:	b500      	push	{lr}
 8019b1a:	b083      	sub	sp, #12
 8019b1c:	d01f      	beq.n	8019b5e <uxr_stream_id+0x4a>
 8019b1e:	2902      	cmp	r1, #2
 8019b20:	f04f 0e00 	mov.w	lr, #0
 8019b24:	d020      	beq.n	8019b68 <uxr_stream_id+0x54>
 8019b26:	2300      	movs	r3, #0
 8019b28:	2000      	movs	r0, #0
 8019b2a:	f36e 0307 	bfi	r3, lr, #0, #8
 8019b2e:	f36c 230f 	bfi	r3, ip, #8, #8
 8019b32:	f361 4317 	bfi	r3, r1, #16, #8
 8019b36:	f362 631f 	bfi	r3, r2, #24, #8
 8019b3a:	fa5f fc83 	uxtb.w	ip, r3
 8019b3e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019b42:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019b46:	0e1b      	lsrs	r3, r3, #24
 8019b48:	f36c 0007 	bfi	r0, ip, #0, #8
 8019b4c:	f361 200f 	bfi	r0, r1, #8, #8
 8019b50:	f362 4017 	bfi	r0, r2, #16, #8
 8019b54:	f363 601f 	bfi	r0, r3, #24, #8
 8019b58:	b003      	add	sp, #12
 8019b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b5e:	f100 0e01 	add.w	lr, r0, #1
 8019b62:	fa5f fe8e 	uxtb.w	lr, lr
 8019b66:	e7de      	b.n	8019b26 <uxr_stream_id+0x12>
 8019b68:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8019b6c:	e7db      	b.n	8019b26 <uxr_stream_id+0x12>
 8019b6e:	bf00      	nop

08019b70 <uxr_stream_id_from_raw>:
 8019b70:	b082      	sub	sp, #8
 8019b72:	b130      	cbz	r0, 8019b82 <uxr_stream_id_from_raw+0x12>
 8019b74:	0603      	lsls	r3, r0, #24
 8019b76:	d421      	bmi.n	8019bbc <uxr_stream_id_from_raw+0x4c>
 8019b78:	1e42      	subs	r2, r0, #1
 8019b7a:	f04f 0c01 	mov.w	ip, #1
 8019b7e:	b2d2      	uxtb	r2, r2
 8019b80:	e001      	b.n	8019b86 <uxr_stream_id_from_raw+0x16>
 8019b82:	4684      	mov	ip, r0
 8019b84:	4602      	mov	r2, r0
 8019b86:	2300      	movs	r3, #0
 8019b88:	f360 0307 	bfi	r3, r0, #0, #8
 8019b8c:	2000      	movs	r0, #0
 8019b8e:	f362 230f 	bfi	r3, r2, #8, #8
 8019b92:	f36c 4317 	bfi	r3, ip, #16, #8
 8019b96:	f361 631f 	bfi	r3, r1, #24, #8
 8019b9a:	fa5f fc83 	uxtb.w	ip, r3
 8019b9e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019ba2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019ba6:	0e1b      	lsrs	r3, r3, #24
 8019ba8:	f36c 0007 	bfi	r0, ip, #0, #8
 8019bac:	f361 200f 	bfi	r0, r1, #8, #8
 8019bb0:	f362 4017 	bfi	r0, r2, #16, #8
 8019bb4:	f363 601f 	bfi	r0, r3, #24, #8
 8019bb8:	b002      	add	sp, #8
 8019bba:	4770      	bx	lr
 8019bbc:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8019bc0:	f04f 0c02 	mov.w	ip, #2
 8019bc4:	e7df      	b.n	8019b86 <uxr_stream_id_from_raw+0x16>
 8019bc6:	bf00      	nop

08019bc8 <uxr_init_stream_storage>:
 8019bc8:	2300      	movs	r3, #0
 8019bca:	7403      	strb	r3, [r0, #16]
 8019bcc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8019bd0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8019bd4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8019bd8:	4770      	bx	lr
 8019bda:	bf00      	nop

08019bdc <uxr_reset_stream_storage>:
 8019bdc:	b570      	push	{r4, r5, r6, lr}
 8019bde:	7c03      	ldrb	r3, [r0, #16]
 8019be0:	4604      	mov	r4, r0
 8019be2:	b14b      	cbz	r3, 8019bf8 <uxr_reset_stream_storage+0x1c>
 8019be4:	4606      	mov	r6, r0
 8019be6:	2500      	movs	r5, #0
 8019be8:	4630      	mov	r0, r6
 8019bea:	3501      	adds	r5, #1
 8019bec:	f004 fea6 	bl	801e93c <uxr_reset_output_best_effort_stream>
 8019bf0:	7c23      	ldrb	r3, [r4, #16]
 8019bf2:	3610      	adds	r6, #16
 8019bf4:	42ab      	cmp	r3, r5
 8019bf6:	d8f7      	bhi.n	8019be8 <uxr_reset_stream_storage+0xc>
 8019bf8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019bfc:	b15b      	cbz	r3, 8019c16 <uxr_reset_stream_storage+0x3a>
 8019bfe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019c02:	2500      	movs	r5, #0
 8019c04:	4630      	mov	r0, r6
 8019c06:	3501      	adds	r5, #1
 8019c08:	f004 fc9e 	bl	801e548 <uxr_reset_input_best_effort_stream>
 8019c0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019c10:	3602      	adds	r6, #2
 8019c12:	42ab      	cmp	r3, r5
 8019c14:	d8f6      	bhi.n	8019c04 <uxr_reset_stream_storage+0x28>
 8019c16:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019c1a:	b15b      	cbz	r3, 8019c34 <uxr_reset_stream_storage+0x58>
 8019c1c:	f104 0618 	add.w	r6, r4, #24
 8019c20:	2500      	movs	r5, #0
 8019c22:	4630      	mov	r0, r6
 8019c24:	3501      	adds	r5, #1
 8019c26:	f004 ff37 	bl	801ea98 <uxr_reset_output_reliable_stream>
 8019c2a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019c2e:	3628      	adds	r6, #40	; 0x28
 8019c30:	42ab      	cmp	r3, r5
 8019c32:	d8f6      	bhi.n	8019c22 <uxr_reset_stream_storage+0x46>
 8019c34:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019c38:	b15b      	cbz	r3, 8019c52 <uxr_reset_stream_storage+0x76>
 8019c3a:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8019c3e:	2500      	movs	r5, #0
 8019c40:	4630      	mov	r0, r6
 8019c42:	3501      	adds	r5, #1
 8019c44:	f004 fcec 	bl	801e620 <uxr_reset_input_reliable_stream>
 8019c48:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019c4c:	3618      	adds	r6, #24
 8019c4e:	42ab      	cmp	r3, r5
 8019c50:	d8f6      	bhi.n	8019c40 <uxr_reset_stream_storage+0x64>
 8019c52:	bd70      	pop	{r4, r5, r6, pc}

08019c54 <uxr_add_output_best_effort_buffer>:
 8019c54:	b510      	push	{r4, lr}
 8019c56:	7c04      	ldrb	r4, [r0, #16]
 8019c58:	b082      	sub	sp, #8
 8019c5a:	f104 0c01 	add.w	ip, r4, #1
 8019c5e:	f880 c010 	strb.w	ip, [r0, #16]
 8019c62:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019c66:	f004 fe5f 	bl	801e928 <uxr_init_output_best_effort_stream>
 8019c6a:	2201      	movs	r2, #1
 8019c6c:	4620      	mov	r0, r4
 8019c6e:	4611      	mov	r1, r2
 8019c70:	b002      	add	sp, #8
 8019c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c76:	f7ff bf4d 	b.w	8019b14 <uxr_stream_id>
 8019c7a:	bf00      	nop

08019c7c <uxr_add_output_reliable_buffer>:
 8019c7c:	b510      	push	{r4, lr}
 8019c7e:	b084      	sub	sp, #16
 8019c80:	4684      	mov	ip, r0
 8019c82:	2028      	movs	r0, #40	; 0x28
 8019c84:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019c88:	9400      	str	r4, [sp, #0]
 8019c8a:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8019c8e:	fb00 c004 	mla	r0, r0, r4, ip
 8019c92:	f104 0e01 	add.w	lr, r4, #1
 8019c96:	3018      	adds	r0, #24
 8019c98:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8019c9c:	f004 fec4 	bl	801ea28 <uxr_init_output_reliable_stream>
 8019ca0:	2201      	movs	r2, #1
 8019ca2:	2102      	movs	r1, #2
 8019ca4:	4620      	mov	r0, r4
 8019ca6:	b004      	add	sp, #16
 8019ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cac:	f7ff bf32 	b.w	8019b14 <uxr_stream_id>

08019cb0 <uxr_add_input_best_effort_buffer>:
 8019cb0:	b510      	push	{r4, lr}
 8019cb2:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8019cb6:	b082      	sub	sp, #8
 8019cb8:	1c62      	adds	r2, r4, #1
 8019cba:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8019cbe:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8019cc2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019cc6:	f004 fc3b 	bl	801e540 <uxr_init_input_best_effort_stream>
 8019cca:	2200      	movs	r2, #0
 8019ccc:	2101      	movs	r1, #1
 8019cce:	4620      	mov	r0, r4
 8019cd0:	b002      	add	sp, #8
 8019cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cd6:	f7ff bf1d 	b.w	8019b14 <uxr_stream_id>
 8019cda:	bf00      	nop

08019cdc <uxr_add_input_reliable_buffer>:
 8019cdc:	b510      	push	{r4, lr}
 8019cde:	b084      	sub	sp, #16
 8019ce0:	4684      	mov	ip, r0
 8019ce2:	2018      	movs	r0, #24
 8019ce4:	9c06      	ldr	r4, [sp, #24]
 8019ce6:	9400      	str	r4, [sp, #0]
 8019ce8:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8019cec:	fb00 c004 	mla	r0, r0, r4, ip
 8019cf0:	f104 0e01 	add.w	lr, r4, #1
 8019cf4:	3048      	adds	r0, #72	; 0x48
 8019cf6:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8019cfa:	f004 fc6b 	bl	801e5d4 <uxr_init_input_reliable_stream>
 8019cfe:	2200      	movs	r2, #0
 8019d00:	2102      	movs	r1, #2
 8019d02:	4620      	mov	r0, r4
 8019d04:	b004      	add	sp, #16
 8019d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d0a:	f7ff bf03 	b.w	8019b14 <uxr_stream_id>
 8019d0e:	bf00      	nop

08019d10 <uxr_get_output_best_effort_stream>:
 8019d10:	7c03      	ldrb	r3, [r0, #16]
 8019d12:	428b      	cmp	r3, r1
 8019d14:	bf8c      	ite	hi
 8019d16:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8019d1a:	2000      	movls	r0, #0
 8019d1c:	4770      	bx	lr
 8019d1e:	bf00      	nop

08019d20 <uxr_get_output_reliable_stream>:
 8019d20:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019d24:	428b      	cmp	r3, r1
 8019d26:	d904      	bls.n	8019d32 <uxr_get_output_reliable_stream+0x12>
 8019d28:	2328      	movs	r3, #40	; 0x28
 8019d2a:	fb03 0001 	mla	r0, r3, r1, r0
 8019d2e:	3018      	adds	r0, #24
 8019d30:	4770      	bx	lr
 8019d32:	2000      	movs	r0, #0
 8019d34:	4770      	bx	lr
 8019d36:	bf00      	nop

08019d38 <uxr_get_input_best_effort_stream>:
 8019d38:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019d3c:	428b      	cmp	r3, r1
 8019d3e:	d903      	bls.n	8019d48 <uxr_get_input_best_effort_stream+0x10>
 8019d40:	3121      	adds	r1, #33	; 0x21
 8019d42:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019d46:	4770      	bx	lr
 8019d48:	2000      	movs	r0, #0
 8019d4a:	4770      	bx	lr

08019d4c <uxr_get_input_reliable_stream>:
 8019d4c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8019d50:	428b      	cmp	r3, r1
 8019d52:	d904      	bls.n	8019d5e <uxr_get_input_reliable_stream+0x12>
 8019d54:	2318      	movs	r3, #24
 8019d56:	fb03 0001 	mla	r0, r3, r1, r0
 8019d5a:	3048      	adds	r0, #72	; 0x48
 8019d5c:	4770      	bx	lr
 8019d5e:	2000      	movs	r0, #0
 8019d60:	4770      	bx	lr
 8019d62:	bf00      	nop

08019d64 <uxr_output_streams_confirmed>:
 8019d64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019d68:	b183      	cbz	r3, 8019d8c <uxr_output_streams_confirmed+0x28>
 8019d6a:	b570      	push	{r4, r5, r6, lr}
 8019d6c:	4606      	mov	r6, r0
 8019d6e:	f100 0518 	add.w	r5, r0, #24
 8019d72:	2400      	movs	r4, #0
 8019d74:	e000      	b.n	8019d78 <uxr_output_streams_confirmed+0x14>
 8019d76:	b140      	cbz	r0, 8019d8a <uxr_output_streams_confirmed+0x26>
 8019d78:	4628      	mov	r0, r5
 8019d7a:	3401      	adds	r4, #1
 8019d7c:	f005 f900 	bl	801ef80 <uxr_is_output_up_to_date>
 8019d80:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8019d84:	3528      	adds	r5, #40	; 0x28
 8019d86:	42a3      	cmp	r3, r4
 8019d88:	d8f5      	bhi.n	8019d76 <uxr_output_streams_confirmed+0x12>
 8019d8a:	bd70      	pop	{r4, r5, r6, pc}
 8019d8c:	2001      	movs	r0, #1
 8019d8e:	4770      	bx	lr

08019d90 <uxr_buffer_submessage_header>:
 8019d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d92:	460e      	mov	r6, r1
 8019d94:	2104      	movs	r1, #4
 8019d96:	4604      	mov	r4, r0
 8019d98:	4615      	mov	r5, r2
 8019d9a:	461f      	mov	r7, r3
 8019d9c:	f7f9 faa8 	bl	80132f0 <ucdr_align_to>
 8019da0:	2301      	movs	r3, #1
 8019da2:	4631      	mov	r1, r6
 8019da4:	4620      	mov	r0, r4
 8019da6:	ea47 0203 	orr.w	r2, r7, r3
 8019daa:	7523      	strb	r3, [r4, #20]
 8019dac:	462b      	mov	r3, r5
 8019dae:	f000 fa29 	bl	801a204 <uxr_serialize_submessage_header>
 8019db2:	4620      	mov	r0, r4
 8019db4:	f7f9 fab2 	bl	801331c <ucdr_buffer_remaining>
 8019db8:	42a8      	cmp	r0, r5
 8019dba:	bf34      	ite	cc
 8019dbc:	2000      	movcc	r0, #0
 8019dbe:	2001      	movcs	r0, #1
 8019dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dc2:	bf00      	nop

08019dc4 <uxr_read_submessage_header>:
 8019dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc8:	4604      	mov	r4, r0
 8019dca:	460d      	mov	r5, r1
 8019dcc:	2104      	movs	r1, #4
 8019dce:	4616      	mov	r6, r2
 8019dd0:	4698      	mov	r8, r3
 8019dd2:	f7f9 fa8d 	bl	80132f0 <ucdr_align_to>
 8019dd6:	4620      	mov	r0, r4
 8019dd8:	f7f9 faa0 	bl	801331c <ucdr_buffer_remaining>
 8019ddc:	2803      	cmp	r0, #3
 8019dde:	bf8c      	ite	hi
 8019de0:	2701      	movhi	r7, #1
 8019de2:	2700      	movls	r7, #0
 8019de4:	d802      	bhi.n	8019dec <uxr_read_submessage_header+0x28>
 8019de6:	4638      	mov	r0, r7
 8019de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dec:	4633      	mov	r3, r6
 8019dee:	4642      	mov	r2, r8
 8019df0:	4620      	mov	r0, r4
 8019df2:	4629      	mov	r1, r5
 8019df4:	f000 fa1a 	bl	801a22c <uxr_deserialize_submessage_header>
 8019df8:	f898 3000 	ldrb.w	r3, [r8]
 8019dfc:	4638      	mov	r0, r7
 8019dfe:	f003 0201 	and.w	r2, r3, #1
 8019e02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019e06:	f888 3000 	strb.w	r3, [r8]
 8019e0a:	7522      	strb	r2, [r4, #20]
 8019e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e10 <uxr_submessage_padding>:
 8019e10:	f010 0003 	ands.w	r0, r0, #3
 8019e14:	bf18      	it	ne
 8019e16:	f1c0 0004 	rsbne	r0, r0, #4
 8019e1a:	4770      	bx	lr

08019e1c <uxr_millis>:
 8019e1c:	b510      	push	{r4, lr}
 8019e1e:	b084      	sub	sp, #16
 8019e20:	2001      	movs	r0, #1
 8019e22:	4669      	mov	r1, sp
 8019e24:	f7e9 fcf0 	bl	8003808 <clock_gettime>
 8019e28:	4908      	ldr	r1, [pc, #32]	; (8019e4c <uxr_millis+0x30>)
 8019e2a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8019e2e:	fba0 0301 	umull	r0, r3, r0, r1
 8019e32:	1900      	adds	r0, r0, r4
 8019e34:	fb01 3102 	mla	r1, r1, r2, r3
 8019e38:	4a05      	ldr	r2, [pc, #20]	; (8019e50 <uxr_millis+0x34>)
 8019e3a:	f04f 0300 	mov.w	r3, #0
 8019e3e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8019e42:	f7e6 fc21 	bl	8000688 <__aeabi_ldivmod>
 8019e46:	b004      	add	sp, #16
 8019e48:	bd10      	pop	{r4, pc}
 8019e4a:	bf00      	nop
 8019e4c:	3b9aca00 	.word	0x3b9aca00
 8019e50:	000f4240 	.word	0x000f4240

08019e54 <uxr_nanos>:
 8019e54:	b510      	push	{r4, lr}
 8019e56:	b084      	sub	sp, #16
 8019e58:	2001      	movs	r0, #1
 8019e5a:	4669      	mov	r1, sp
 8019e5c:	f7e9 fcd4 	bl	8003808 <clock_gettime>
 8019e60:	4a06      	ldr	r2, [pc, #24]	; (8019e7c <uxr_nanos+0x28>)
 8019e62:	9800      	ldr	r0, [sp, #0]
 8019e64:	9902      	ldr	r1, [sp, #8]
 8019e66:	fba0 0302 	umull	r0, r3, r0, r2
 8019e6a:	9c01      	ldr	r4, [sp, #4]
 8019e6c:	1840      	adds	r0, r0, r1
 8019e6e:	fb02 3304 	mla	r3, r2, r4, r3
 8019e72:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8019e76:	b004      	add	sp, #16
 8019e78:	bd10      	pop	{r4, pc}
 8019e7a:	bf00      	nop
 8019e7c:	3b9aca00 	.word	0x3b9aca00

08019e80 <on_full_output_buffer_fragmented>:
 8019e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e84:	460c      	mov	r4, r1
 8019e86:	b08a      	sub	sp, #40	; 0x28
 8019e88:	4606      	mov	r6, r0
 8019e8a:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8019e8e:	f104 0008 	add.w	r0, r4, #8
 8019e92:	f7ff ff45 	bl	8019d20 <uxr_get_output_reliable_stream>
 8019e96:	4605      	mov	r5, r0
 8019e98:	f005 f87c 	bl	801ef94 <get_available_free_slots>
 8019e9c:	b968      	cbnz	r0, 8019eba <on_full_output_buffer_fragmented+0x3a>
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8019ea4:	4798      	blx	r3
 8019ea6:	b918      	cbnz	r0, 8019eb0 <on_full_output_buffer_fragmented+0x30>
 8019ea8:	2001      	movs	r0, #1
 8019eaa:	b00a      	add	sp, #40	; 0x28
 8019eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019eb0:	4628      	mov	r0, r5
 8019eb2:	f005 f86f 	bl	801ef94 <get_available_free_slots>
 8019eb6:	2800      	cmp	r0, #0
 8019eb8:	d0f6      	beq.n	8019ea8 <on_full_output_buffer_fragmented+0x28>
 8019eba:	8929      	ldrh	r1, [r5, #8]
 8019ebc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8019ec0:	89eb      	ldrh	r3, [r5, #14]
 8019ec2:	7b28      	ldrb	r0, [r5, #12]
 8019ec4:	686f      	ldr	r7, [r5, #4]
 8019ec6:	1a12      	subs	r2, r2, r0
 8019ec8:	fbb3 f0f1 	udiv	r0, r3, r1
 8019ecc:	fbb7 f7f1 	udiv	r7, r7, r1
 8019ed0:	fb01 3110 	mls	r1, r1, r0, r3
 8019ed4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8019ed8:	b289      	uxth	r1, r1
 8019eda:	fb07 f101 	mul.w	r1, r7, r1
 8019ede:	3f04      	subs	r7, #4
 8019ee0:	443a      	add	r2, r7
 8019ee2:	3104      	adds	r1, #4
 8019ee4:	fa1f f882 	uxth.w	r8, r2
 8019ee8:	463a      	mov	r2, r7
 8019eea:	eba3 0308 	sub.w	r3, r3, r8
 8019eee:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8019ef2:	682b      	ldr	r3, [r5, #0]
 8019ef4:	4419      	add	r1, r3
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019efc:	9000      	str	r0, [sp, #0]
 8019efe:	a802      	add	r0, sp, #8
 8019f00:	f7f9 f9c8 	bl	8013294 <ucdr_init_buffer_origin_offset>
 8019f04:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019f08:	f102 0308 	add.w	r3, r2, #8
 8019f0c:	42bb      	cmp	r3, r7
 8019f0e:	d927      	bls.n	8019f60 <on_full_output_buffer_fragmented+0xe0>
 8019f10:	4642      	mov	r2, r8
 8019f12:	2300      	movs	r3, #0
 8019f14:	210d      	movs	r1, #13
 8019f16:	a802      	add	r0, sp, #8
 8019f18:	f7ff ff3a 	bl	8019d90 <uxr_buffer_submessage_header>
 8019f1c:	8929      	ldrh	r1, [r5, #8]
 8019f1e:	89eb      	ldrh	r3, [r5, #14]
 8019f20:	686a      	ldr	r2, [r5, #4]
 8019f22:	fbb3 f0f1 	udiv	r0, r3, r1
 8019f26:	fbb2 f2f1 	udiv	r2, r2, r1
 8019f2a:	fb01 3310 	mls	r3, r1, r0, r3
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	fb02 f303 	mul.w	r3, r2, r3
 8019f34:	682a      	ldr	r2, [r5, #0]
 8019f36:	50d7      	str	r7, [r2, r3]
 8019f38:	2101      	movs	r1, #1
 8019f3a:	89e8      	ldrh	r0, [r5, #14]
 8019f3c:	f005 f84c 	bl	801efd8 <uxr_seq_num_add>
 8019f40:	9904      	ldr	r1, [sp, #16]
 8019f42:	9a03      	ldr	r2, [sp, #12]
 8019f44:	81e8      	strh	r0, [r5, #14]
 8019f46:	4630      	mov	r0, r6
 8019f48:	1a52      	subs	r2, r2, r1
 8019f4a:	f7f9 f9b5 	bl	80132b8 <ucdr_init_buffer>
 8019f4e:	4630      	mov	r0, r6
 8019f50:	4622      	mov	r2, r4
 8019f52:	490f      	ldr	r1, [pc, #60]	; (8019f90 <on_full_output_buffer_fragmented+0x110>)
 8019f54:	f7f9 f984 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 8019f58:	2000      	movs	r0, #0
 8019f5a:	b00a      	add	sp, #40	; 0x28
 8019f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f60:	b292      	uxth	r2, r2
 8019f62:	2302      	movs	r3, #2
 8019f64:	210d      	movs	r1, #13
 8019f66:	a802      	add	r0, sp, #8
 8019f68:	f7ff ff12 	bl	8019d90 <uxr_buffer_submessage_header>
 8019f6c:	8928      	ldrh	r0, [r5, #8]
 8019f6e:	89eb      	ldrh	r3, [r5, #14]
 8019f70:	6869      	ldr	r1, [r5, #4]
 8019f72:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019f76:	fbb3 f7f0 	udiv	r7, r3, r0
 8019f7a:	fbb1 f1f0 	udiv	r1, r1, r0
 8019f7e:	fb00 3317 	mls	r3, r0, r7, r3
 8019f82:	3208      	adds	r2, #8
 8019f84:	b29b      	uxth	r3, r3
 8019f86:	fb01 f303 	mul.w	r3, r1, r3
 8019f8a:	6829      	ldr	r1, [r5, #0]
 8019f8c:	50ca      	str	r2, [r1, r3]
 8019f8e:	e7d3      	b.n	8019f38 <on_full_output_buffer_fragmented+0xb8>
 8019f90:	08019e81 	.word	0x08019e81

08019f94 <uxr_prepare_output_stream>:
 8019f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f96:	b087      	sub	sp, #28
 8019f98:	2707      	movs	r7, #7
 8019f9a:	2500      	movs	r5, #0
 8019f9c:	461c      	mov	r4, r3
 8019f9e:	4606      	mov	r6, r0
 8019fa0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019fa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019fa6:	e9cd 7500 	strd	r7, r5, [sp]
 8019faa:	3204      	adds	r2, #4
 8019fac:	f7fe ffc8 	bl	8018f40 <uxr_prepare_stream_to_write_submessage>
 8019fb0:	f080 0201 	eor.w	r2, r0, #1
 8019fb4:	b2d2      	uxtb	r2, r2
 8019fb6:	75a2      	strb	r2, [r4, #22]
 8019fb8:	b112      	cbz	r2, 8019fc0 <uxr_prepare_output_stream+0x2c>
 8019fba:	4628      	mov	r0, r5
 8019fbc:	b007      	add	sp, #28
 8019fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fc0:	aa05      	add	r2, sp, #20
 8019fc2:	9902      	ldr	r1, [sp, #8]
 8019fc4:	4630      	mov	r0, r6
 8019fc6:	f7ff f8f7 	bl	80191b8 <uxr_init_base_object_request>
 8019fca:	a905      	add	r1, sp, #20
 8019fcc:	4605      	mov	r5, r0
 8019fce:	4620      	mov	r0, r4
 8019fd0:	f001 f8bc 	bl	801b14c <uxr_serialize_WRITE_DATA_Payload_Data>
 8019fd4:	69a6      	ldr	r6, [r4, #24]
 8019fd6:	69e7      	ldr	r7, [r4, #28]
 8019fd8:	4620      	mov	r0, r4
 8019fda:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8019fde:	1a52      	subs	r2, r2, r1
 8019fe0:	f7f9 f96a 	bl	80132b8 <ucdr_init_buffer>
 8019fe4:	4620      	mov	r0, r4
 8019fe6:	463a      	mov	r2, r7
 8019fe8:	4631      	mov	r1, r6
 8019fea:	f7f9 f939 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 8019fee:	4628      	mov	r0, r5
 8019ff0:	b007      	add	sp, #28
 8019ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ff4 <uxr_prepare_output_stream_fragmented>:
 8019ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ff8:	b091      	sub	sp, #68	; 0x44
 8019ffa:	4605      	mov	r5, r0
 8019ffc:	3008      	adds	r0, #8
 8019ffe:	461e      	mov	r6, r3
 801a000:	9105      	str	r1, [sp, #20]
 801a002:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a006:	9204      	str	r2, [sp, #16]
 801a008:	f7ff fe8a 	bl	8019d20 <uxr_get_output_reliable_stream>
 801a00c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801a010:	2b01      	cmp	r3, #1
 801a012:	f000 8093 	beq.w	801a13c <uxr_prepare_output_stream_fragmented+0x148>
 801a016:	4604      	mov	r4, r0
 801a018:	2800      	cmp	r0, #0
 801a01a:	f000 808f 	beq.w	801a13c <uxr_prepare_output_stream_fragmented+0x148>
 801a01e:	f004 ffb9 	bl	801ef94 <get_available_free_slots>
 801a022:	2800      	cmp	r0, #0
 801a024:	f000 8085 	beq.w	801a132 <uxr_prepare_output_stream_fragmented+0x13e>
 801a028:	8923      	ldrh	r3, [r4, #8]
 801a02a:	89e7      	ldrh	r7, [r4, #14]
 801a02c:	6862      	ldr	r2, [r4, #4]
 801a02e:	fbb7 f9f3 	udiv	r9, r7, r3
 801a032:	fbb2 f2f3 	udiv	r2, r2, r3
 801a036:	fb03 7919 	mls	r9, r3, r9, r7
 801a03a:	6823      	ldr	r3, [r4, #0]
 801a03c:	f1a2 0b04 	sub.w	fp, r2, #4
 801a040:	9203      	str	r2, [sp, #12]
 801a042:	fa1f f989 	uxth.w	r9, r9
 801a046:	fb02 f909 	mul.w	r9, r2, r9
 801a04a:	f109 0904 	add.w	r9, r9, #4
 801a04e:	4499      	add	r9, r3
 801a050:	7b23      	ldrb	r3, [r4, #12]
 801a052:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a056:	4543      	cmp	r3, r8
 801a058:	d37c      	bcc.n	801a154 <uxr_prepare_output_stream_fragmented+0x160>
 801a05a:	f1ab 0a04 	sub.w	sl, fp, #4
 801a05e:	465a      	mov	r2, fp
 801a060:	4649      	mov	r1, r9
 801a062:	a808      	add	r0, sp, #32
 801a064:	ebaa 0a03 	sub.w	sl, sl, r3
 801a068:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a06a:	f8cd 8000 	str.w	r8, [sp]
 801a06e:	3308      	adds	r3, #8
 801a070:	fa1f fa8a 	uxth.w	sl, sl
 801a074:	9302      	str	r3, [sp, #8]
 801a076:	2300      	movs	r3, #0
 801a078:	f7f9 f90c 	bl	8013294 <ucdr_init_buffer_origin_offset>
 801a07c:	9b02      	ldr	r3, [sp, #8]
 801a07e:	4652      	mov	r2, sl
 801a080:	210d      	movs	r1, #13
 801a082:	455b      	cmp	r3, fp
 801a084:	bf34      	ite	cc
 801a086:	2302      	movcc	r3, #2
 801a088:	2300      	movcs	r3, #0
 801a08a:	a808      	add	r0, sp, #32
 801a08c:	f7ff fe80 	bl	8019d90 <uxr_buffer_submessage_header>
 801a090:	8921      	ldrh	r1, [r4, #8]
 801a092:	6863      	ldr	r3, [r4, #4]
 801a094:	4638      	mov	r0, r7
 801a096:	fbb7 f2f1 	udiv	r2, r7, r1
 801a09a:	fbb3 f3f1 	udiv	r3, r3, r1
 801a09e:	fb01 7212 	mls	r2, r1, r2, r7
 801a0a2:	2101      	movs	r1, #1
 801a0a4:	b292      	uxth	r2, r2
 801a0a6:	fb02 f303 	mul.w	r3, r2, r3
 801a0aa:	6822      	ldr	r2, [r4, #0]
 801a0ac:	f842 b003 	str.w	fp, [r2, r3]
 801a0b0:	f004 ff92 	bl	801efd8 <uxr_seq_num_add>
 801a0b4:	9b03      	ldr	r3, [sp, #12]
 801a0b6:	f108 0104 	add.w	r1, r8, #4
 801a0ba:	4607      	mov	r7, r0
 801a0bc:	f1a3 0208 	sub.w	r2, r3, #8
 801a0c0:	4630      	mov	r0, r6
 801a0c2:	4449      	add	r1, r9
 801a0c4:	eba2 0208 	sub.w	r2, r2, r8
 801a0c8:	f7f9 f8f6 	bl	80132b8 <ucdr_init_buffer>
 801a0cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a0ce:	2107      	movs	r1, #7
 801a0d0:	81e7      	strh	r7, [r4, #14]
 801a0d2:	1d1a      	adds	r2, r3, #4
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	4630      	mov	r0, r6
 801a0d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801a0dc:	bf28      	it	cs
 801a0de:	461a      	movcs	r2, r3
 801a0e0:	b292      	uxth	r2, r2
 801a0e2:	f7ff fe55 	bl	8019d90 <uxr_buffer_submessage_header>
 801a0e6:	aa07      	add	r2, sp, #28
 801a0e8:	9904      	ldr	r1, [sp, #16]
 801a0ea:	4628      	mov	r0, r5
 801a0ec:	f7ff f864 	bl	80191b8 <uxr_init_base_object_request>
 801a0f0:	4604      	mov	r4, r0
 801a0f2:	b320      	cbz	r0, 801a13e <uxr_prepare_output_stream_fragmented+0x14a>
 801a0f4:	a907      	add	r1, sp, #28
 801a0f6:	4630      	mov	r0, r6
 801a0f8:	f001 f828 	bl	801b14c <uxr_serialize_WRITE_DATA_Payload_Data>
 801a0fc:	4630      	mov	r0, r6
 801a0fe:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801a102:	1a52      	subs	r2, r2, r1
 801a104:	f7f9 f8d8 	bl	80132b8 <ucdr_init_buffer>
 801a108:	9b05      	ldr	r3, [sp, #20]
 801a10a:	9a02      	ldr	r2, [sp, #8]
 801a10c:	4630      	mov	r0, r6
 801a10e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801a112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a114:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801a118:	462a      	mov	r2, r5
 801a11a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801a11e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a120:	4918      	ldr	r1, [pc, #96]	; (801a184 <uxr_prepare_output_stream_fragmented+0x190>)
 801a122:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801a126:	f7f9 f89b 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 801a12a:	4620      	mov	r0, r4
 801a12c:	b011      	add	sp, #68	; 0x44
 801a12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a132:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a134:	4628      	mov	r0, r5
 801a136:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a138:	4798      	blx	r3
 801a13a:	b920      	cbnz	r0, 801a146 <uxr_prepare_output_stream_fragmented+0x152>
 801a13c:	2400      	movs	r4, #0
 801a13e:	4620      	mov	r0, r4
 801a140:	b011      	add	sp, #68	; 0x44
 801a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a146:	4620      	mov	r0, r4
 801a148:	f004 ff24 	bl	801ef94 <get_available_free_slots>
 801a14c:	2800      	cmp	r0, #0
 801a14e:	f47f af6b 	bne.w	801a028 <uxr_prepare_output_stream_fragmented+0x34>
 801a152:	e7f3      	b.n	801a13c <uxr_prepare_output_stream_fragmented+0x148>
 801a154:	4638      	mov	r0, r7
 801a156:	2101      	movs	r1, #1
 801a158:	f004 ff3e 	bl	801efd8 <uxr_seq_num_add>
 801a15c:	8922      	ldrh	r2, [r4, #8]
 801a15e:	6863      	ldr	r3, [r4, #4]
 801a160:	4607      	mov	r7, r0
 801a162:	fbb3 f9f2 	udiv	r9, r3, r2
 801a166:	fbb0 f3f2 	udiv	r3, r0, r2
 801a16a:	fb02 0313 	mls	r3, r2, r3, r0
 801a16e:	b29b      	uxth	r3, r3
 801a170:	fb03 f909 	mul.w	r9, r3, r9
 801a174:	6823      	ldr	r3, [r4, #0]
 801a176:	f109 0904 	add.w	r9, r9, #4
 801a17a:	4499      	add	r9, r3
 801a17c:	7b23      	ldrb	r3, [r4, #12]
 801a17e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a182:	e76a      	b.n	801a05a <uxr_prepare_output_stream_fragmented+0x66>
 801a184:	08019e81 	.word	0x08019e81

0801a188 <uxr_serialize_message_header>:
 801a188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a18a:	4616      	mov	r6, r2
 801a18c:	b083      	sub	sp, #12
 801a18e:	4604      	mov	r4, r0
 801a190:	460d      	mov	r5, r1
 801a192:	9301      	str	r3, [sp, #4]
 801a194:	9f08      	ldr	r7, [sp, #32]
 801a196:	f7f7 fdb7 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a19a:	4631      	mov	r1, r6
 801a19c:	4620      	mov	r0, r4
 801a19e:	f7f7 fdb3 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a1a2:	9a01      	ldr	r2, [sp, #4]
 801a1a4:	2101      	movs	r1, #1
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f7f7 fe5a 	bl	8011e60 <ucdr_serialize_endian_uint16_t>
 801a1ac:	062b      	lsls	r3, r5, #24
 801a1ae:	d501      	bpl.n	801a1b4 <uxr_serialize_message_header+0x2c>
 801a1b0:	b003      	add	sp, #12
 801a1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1b4:	2204      	movs	r2, #4
 801a1b6:	4639      	mov	r1, r7
 801a1b8:	4620      	mov	r0, r4
 801a1ba:	b003      	add	sp, #12
 801a1bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a1c0:	f7fd ba6e 	b.w	80176a0 <ucdr_serialize_array_uint8_t>

0801a1c4 <uxr_deserialize_message_header>:
 801a1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1c6:	4616      	mov	r6, r2
 801a1c8:	b083      	sub	sp, #12
 801a1ca:	4604      	mov	r4, r0
 801a1cc:	460d      	mov	r5, r1
 801a1ce:	9301      	str	r3, [sp, #4]
 801a1d0:	9f08      	ldr	r7, [sp, #32]
 801a1d2:	f7f7 fdaf 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801a1d6:	4631      	mov	r1, r6
 801a1d8:	4620      	mov	r0, r4
 801a1da:	f7f7 fdab 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801a1de:	9a01      	ldr	r2, [sp, #4]
 801a1e0:	2101      	movs	r1, #1
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	f7f7 ff30 	bl	8012048 <ucdr_deserialize_endian_uint16_t>
 801a1e8:	f995 3000 	ldrsb.w	r3, [r5]
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	da01      	bge.n	801a1f4 <uxr_deserialize_message_header+0x30>
 801a1f0:	b003      	add	sp, #12
 801a1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1f4:	2204      	movs	r2, #4
 801a1f6:	4639      	mov	r1, r7
 801a1f8:	4620      	mov	r0, r4
 801a1fa:	b003      	add	sp, #12
 801a1fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a200:	f7fd bab2 	b.w	8017768 <ucdr_deserialize_array_uint8_t>

0801a204 <uxr_serialize_submessage_header>:
 801a204:	b530      	push	{r4, r5, lr}
 801a206:	4615      	mov	r5, r2
 801a208:	b083      	sub	sp, #12
 801a20a:	4604      	mov	r4, r0
 801a20c:	9301      	str	r3, [sp, #4]
 801a20e:	f7f7 fd7b 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a212:	4629      	mov	r1, r5
 801a214:	4620      	mov	r0, r4
 801a216:	f7f7 fd77 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a21a:	9a01      	ldr	r2, [sp, #4]
 801a21c:	2101      	movs	r1, #1
 801a21e:	4620      	mov	r0, r4
 801a220:	b003      	add	sp, #12
 801a222:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a226:	f7f7 be1b 	b.w	8011e60 <ucdr_serialize_endian_uint16_t>
 801a22a:	bf00      	nop

0801a22c <uxr_deserialize_submessage_header>:
 801a22c:	b530      	push	{r4, r5, lr}
 801a22e:	4615      	mov	r5, r2
 801a230:	b083      	sub	sp, #12
 801a232:	4604      	mov	r4, r0
 801a234:	9301      	str	r3, [sp, #4]
 801a236:	f7f7 fd7d 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801a23a:	4629      	mov	r1, r5
 801a23c:	4620      	mov	r0, r4
 801a23e:	f7f7 fd79 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801a242:	9a01      	ldr	r2, [sp, #4]
 801a244:	2101      	movs	r1, #1
 801a246:	4620      	mov	r0, r4
 801a248:	b003      	add	sp, #12
 801a24a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a24e:	f7f7 befb 	b.w	8012048 <ucdr_deserialize_endian_uint16_t>
 801a252:	bf00      	nop

0801a254 <uxr_serialize_CLIENT_Representation>:
 801a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a258:	2204      	movs	r2, #4
 801a25a:	460e      	mov	r6, r1
 801a25c:	4605      	mov	r5, r0
 801a25e:	f7fd fa1f 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a262:	4607      	mov	r7, r0
 801a264:	2202      	movs	r2, #2
 801a266:	1d31      	adds	r1, r6, #4
 801a268:	4628      	mov	r0, r5
 801a26a:	f7fd fa19 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a26e:	4038      	ands	r0, r7
 801a270:	2202      	movs	r2, #2
 801a272:	1db1      	adds	r1, r6, #6
 801a274:	b2c7      	uxtb	r7, r0
 801a276:	4628      	mov	r0, r5
 801a278:	f7fd fa12 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a27c:	2204      	movs	r2, #4
 801a27e:	4007      	ands	r7, r0
 801a280:	f106 0108 	add.w	r1, r6, #8
 801a284:	4628      	mov	r0, r5
 801a286:	f7fd fa0b 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a28a:	4007      	ands	r7, r0
 801a28c:	7b31      	ldrb	r1, [r6, #12]
 801a28e:	4628      	mov	r0, r5
 801a290:	f7f7 fd3a 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a294:	7b71      	ldrb	r1, [r6, #13]
 801a296:	4007      	ands	r7, r0
 801a298:	4628      	mov	r0, r5
 801a29a:	f7f7 fd07 	bl	8011cac <ucdr_serialize_bool>
 801a29e:	7b73      	ldrb	r3, [r6, #13]
 801a2a0:	ea07 0800 	and.w	r8, r7, r0
 801a2a4:	b93b      	cbnz	r3, 801a2b6 <uxr_serialize_CLIENT_Representation+0x62>
 801a2a6:	8bb1      	ldrh	r1, [r6, #28]
 801a2a8:	4628      	mov	r0, r5
 801a2aa:	f7f7 fd59 	bl	8011d60 <ucdr_serialize_uint16_t>
 801a2ae:	ea08 0000 	and.w	r0, r8, r0
 801a2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2b6:	6931      	ldr	r1, [r6, #16]
 801a2b8:	4628      	mov	r0, r5
 801a2ba:	f7f7 ff3b 	bl	8012134 <ucdr_serialize_uint32_t>
 801a2be:	6933      	ldr	r3, [r6, #16]
 801a2c0:	b1e3      	cbz	r3, 801a2fc <uxr_serialize_CLIENT_Representation+0xa8>
 801a2c2:	b1c0      	cbz	r0, 801a2f6 <uxr_serialize_CLIENT_Representation+0xa2>
 801a2c4:	4637      	mov	r7, r6
 801a2c6:	f04f 0900 	mov.w	r9, #0
 801a2ca:	e000      	b.n	801a2ce <uxr_serialize_CLIENT_Representation+0x7a>
 801a2cc:	b19c      	cbz	r4, 801a2f6 <uxr_serialize_CLIENT_Representation+0xa2>
 801a2ce:	6979      	ldr	r1, [r7, #20]
 801a2d0:	4628      	mov	r0, r5
 801a2d2:	f004 f91d 	bl	801e510 <ucdr_serialize_string>
 801a2d6:	69b9      	ldr	r1, [r7, #24]
 801a2d8:	4604      	mov	r4, r0
 801a2da:	4628      	mov	r0, r5
 801a2dc:	f004 f918 	bl	801e510 <ucdr_serialize_string>
 801a2e0:	f109 0901 	add.w	r9, r9, #1
 801a2e4:	6933      	ldr	r3, [r6, #16]
 801a2e6:	4004      	ands	r4, r0
 801a2e8:	3708      	adds	r7, #8
 801a2ea:	4599      	cmp	r9, r3
 801a2ec:	b2e4      	uxtb	r4, r4
 801a2ee:	d3ed      	bcc.n	801a2cc <uxr_serialize_CLIENT_Representation+0x78>
 801a2f0:	ea08 0804 	and.w	r8, r8, r4
 801a2f4:	e7d7      	b.n	801a2a6 <uxr_serialize_CLIENT_Representation+0x52>
 801a2f6:	f04f 0800 	mov.w	r8, #0
 801a2fa:	e7d4      	b.n	801a2a6 <uxr_serialize_CLIENT_Representation+0x52>
 801a2fc:	ea08 0800 	and.w	r8, r8, r0
 801a300:	e7d1      	b.n	801a2a6 <uxr_serialize_CLIENT_Representation+0x52>
 801a302:	bf00      	nop

0801a304 <uxr_deserialize_CLIENT_Representation>:
 801a304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a308:	2204      	movs	r2, #4
 801a30a:	460c      	mov	r4, r1
 801a30c:	4605      	mov	r5, r0
 801a30e:	f7fd fa2b 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801a312:	4607      	mov	r7, r0
 801a314:	2202      	movs	r2, #2
 801a316:	1d21      	adds	r1, r4, #4
 801a318:	4628      	mov	r0, r5
 801a31a:	f7fd fa25 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801a31e:	4038      	ands	r0, r7
 801a320:	2202      	movs	r2, #2
 801a322:	1da1      	adds	r1, r4, #6
 801a324:	b2c6      	uxtb	r6, r0
 801a326:	4628      	mov	r0, r5
 801a328:	f7fd fa1e 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801a32c:	2204      	movs	r2, #4
 801a32e:	4006      	ands	r6, r0
 801a330:	f104 0108 	add.w	r1, r4, #8
 801a334:	4628      	mov	r0, r5
 801a336:	f7fd fa17 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801a33a:	4006      	ands	r6, r0
 801a33c:	f104 010c 	add.w	r1, r4, #12
 801a340:	4628      	mov	r0, r5
 801a342:	f7f7 fcf7 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801a346:	f104 010d 	add.w	r1, r4, #13
 801a34a:	ea06 0700 	and.w	r7, r6, r0
 801a34e:	4628      	mov	r0, r5
 801a350:	f7f7 fcc2 	bl	8011cd8 <ucdr_deserialize_bool>
 801a354:	7b63      	ldrb	r3, [r4, #13]
 801a356:	4007      	ands	r7, r0
 801a358:	b93b      	cbnz	r3, 801a36a <uxr_deserialize_CLIENT_Representation+0x66>
 801a35a:	f104 011c 	add.w	r1, r4, #28
 801a35e:	4628      	mov	r0, r5
 801a360:	f7f7 fdfe 	bl	8011f60 <ucdr_deserialize_uint16_t>
 801a364:	4038      	ands	r0, r7
 801a366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a36a:	f104 0110 	add.w	r1, r4, #16
 801a36e:	4628      	mov	r0, r5
 801a370:	f7f8 f810 	bl	8012394 <ucdr_deserialize_uint32_t>
 801a374:	6923      	ldr	r3, [r4, #16]
 801a376:	2b01      	cmp	r3, #1
 801a378:	d903      	bls.n	801a382 <uxr_deserialize_CLIENT_Representation+0x7e>
 801a37a:	2301      	movs	r3, #1
 801a37c:	2700      	movs	r7, #0
 801a37e:	75ab      	strb	r3, [r5, #22]
 801a380:	e7eb      	b.n	801a35a <uxr_deserialize_CLIENT_Representation+0x56>
 801a382:	b30b      	cbz	r3, 801a3c8 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a384:	b1f0      	cbz	r0, 801a3c4 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a386:	46a0      	mov	r8, r4
 801a388:	f04f 0900 	mov.w	r9, #0
 801a38c:	e000      	b.n	801a390 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a38e:	b1ce      	cbz	r6, 801a3c4 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a390:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a394:	f108 0808 	add.w	r8, r8, #8
 801a398:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a39c:	4628      	mov	r0, r5
 801a39e:	f004 f8c7 	bl	801e530 <ucdr_deserialize_string>
 801a3a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a3a6:	4606      	mov	r6, r0
 801a3a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a3ac:	4628      	mov	r0, r5
 801a3ae:	f109 0901 	add.w	r9, r9, #1
 801a3b2:	f004 f8bd 	bl	801e530 <ucdr_deserialize_string>
 801a3b6:	6923      	ldr	r3, [r4, #16]
 801a3b8:	4006      	ands	r6, r0
 801a3ba:	4599      	cmp	r9, r3
 801a3bc:	b2f6      	uxtb	r6, r6
 801a3be:	d3e6      	bcc.n	801a38e <uxr_deserialize_CLIENT_Representation+0x8a>
 801a3c0:	4037      	ands	r7, r6
 801a3c2:	e7ca      	b.n	801a35a <uxr_deserialize_CLIENT_Representation+0x56>
 801a3c4:	2700      	movs	r7, #0
 801a3c6:	e7c8      	b.n	801a35a <uxr_deserialize_CLIENT_Representation+0x56>
 801a3c8:	4007      	ands	r7, r0
 801a3ca:	e7c6      	b.n	801a35a <uxr_deserialize_CLIENT_Representation+0x56>

0801a3cc <uxr_serialize_AGENT_Representation>:
 801a3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3d0:	2204      	movs	r2, #4
 801a3d2:	460f      	mov	r7, r1
 801a3d4:	4605      	mov	r5, r0
 801a3d6:	f7fd f963 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a3da:	4604      	mov	r4, r0
 801a3dc:	2202      	movs	r2, #2
 801a3de:	1d39      	adds	r1, r7, #4
 801a3e0:	4628      	mov	r0, r5
 801a3e2:	f7fd f95d 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a3e6:	4020      	ands	r0, r4
 801a3e8:	2202      	movs	r2, #2
 801a3ea:	1db9      	adds	r1, r7, #6
 801a3ec:	b2c4      	uxtb	r4, r0
 801a3ee:	4628      	mov	r0, r5
 801a3f0:	f7fd f956 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a3f4:	7a39      	ldrb	r1, [r7, #8]
 801a3f6:	4004      	ands	r4, r0
 801a3f8:	4628      	mov	r0, r5
 801a3fa:	f7f7 fc57 	bl	8011cac <ucdr_serialize_bool>
 801a3fe:	7a3b      	ldrb	r3, [r7, #8]
 801a400:	ea00 0804 	and.w	r8, r0, r4
 801a404:	b913      	cbnz	r3, 801a40c <uxr_serialize_AGENT_Representation+0x40>
 801a406:	4640      	mov	r0, r8
 801a408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a40c:	68f9      	ldr	r1, [r7, #12]
 801a40e:	4628      	mov	r0, r5
 801a410:	f7f7 fe90 	bl	8012134 <ucdr_serialize_uint32_t>
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	b303      	cbz	r3, 801a45a <uxr_serialize_AGENT_Representation+0x8e>
 801a418:	b1d0      	cbz	r0, 801a450 <uxr_serialize_AGENT_Representation+0x84>
 801a41a:	463e      	mov	r6, r7
 801a41c:	f04f 0900 	mov.w	r9, #0
 801a420:	e000      	b.n	801a424 <uxr_serialize_AGENT_Representation+0x58>
 801a422:	b1ac      	cbz	r4, 801a450 <uxr_serialize_AGENT_Representation+0x84>
 801a424:	6931      	ldr	r1, [r6, #16]
 801a426:	4628      	mov	r0, r5
 801a428:	f004 f872 	bl	801e510 <ucdr_serialize_string>
 801a42c:	6971      	ldr	r1, [r6, #20]
 801a42e:	4604      	mov	r4, r0
 801a430:	4628      	mov	r0, r5
 801a432:	f004 f86d 	bl	801e510 <ucdr_serialize_string>
 801a436:	f109 0901 	add.w	r9, r9, #1
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	4004      	ands	r4, r0
 801a43e:	3608      	adds	r6, #8
 801a440:	4599      	cmp	r9, r3
 801a442:	b2e4      	uxtb	r4, r4
 801a444:	d3ed      	bcc.n	801a422 <uxr_serialize_AGENT_Representation+0x56>
 801a446:	ea08 0804 	and.w	r8, r8, r4
 801a44a:	4640      	mov	r0, r8
 801a44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a450:	f04f 0800 	mov.w	r8, #0
 801a454:	4640      	mov	r0, r8
 801a456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a45a:	ea08 0800 	and.w	r8, r8, r0
 801a45e:	e7d2      	b.n	801a406 <uxr_serialize_AGENT_Representation+0x3a>

0801a460 <uxr_serialize_DATAWRITER_Representation>:
 801a460:	b570      	push	{r4, r5, r6, lr}
 801a462:	460d      	mov	r5, r1
 801a464:	7809      	ldrb	r1, [r1, #0]
 801a466:	4606      	mov	r6, r0
 801a468:	f7f7 fc4e 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a46c:	4604      	mov	r4, r0
 801a46e:	b130      	cbz	r0, 801a47e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a470:	782b      	ldrb	r3, [r5, #0]
 801a472:	2b02      	cmp	r3, #2
 801a474:	d00c      	beq.n	801a490 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a476:	2b03      	cmp	r3, #3
 801a478:	d010      	beq.n	801a49c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a47a:	2b01      	cmp	r3, #1
 801a47c:	d008      	beq.n	801a490 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a47e:	2202      	movs	r2, #2
 801a480:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a484:	4630      	mov	r0, r6
 801a486:	f7fd f90b 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a48a:	4020      	ands	r0, r4
 801a48c:	b2c0      	uxtb	r0, r0
 801a48e:	bd70      	pop	{r4, r5, r6, pc}
 801a490:	6869      	ldr	r1, [r5, #4]
 801a492:	4630      	mov	r0, r6
 801a494:	f004 f83c 	bl	801e510 <ucdr_serialize_string>
 801a498:	4604      	mov	r4, r0
 801a49a:	e7f0      	b.n	801a47e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a49c:	4629      	mov	r1, r5
 801a49e:	4630      	mov	r0, r6
 801a4a0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a4a4:	3104      	adds	r1, #4
 801a4a6:	f7f8 ffa7 	bl	80133f8 <ucdr_serialize_sequence_uint8_t>
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	e7e7      	b.n	801a47e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a4ae:	bf00      	nop

0801a4b0 <uxr_serialize_ObjectVariant.part.0>:
 801a4b0:	b570      	push	{r4, r5, r6, lr}
 801a4b2:	780b      	ldrb	r3, [r1, #0]
 801a4b4:	460c      	mov	r4, r1
 801a4b6:	4605      	mov	r5, r0
 801a4b8:	3b01      	subs	r3, #1
 801a4ba:	2b0d      	cmp	r3, #13
 801a4bc:	d854      	bhi.n	801a568 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a4be:	e8df f003 	tbb	[pc, r3]
 801a4c2:	0730      	.short	0x0730
 801a4c4:	07071b1b 	.word	0x07071b1b
 801a4c8:	0c530707 	.word	0x0c530707
 801a4cc:	494e0c0c 	.word	0x494e0c0c
 801a4d0:	3104      	adds	r1, #4
 801a4d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4d6:	f7ff bfc3 	b.w	801a460 <uxr_serialize_DATAWRITER_Representation>
 801a4da:	7909      	ldrb	r1, [r1, #4]
 801a4dc:	f7f7 fc14 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a4e0:	b1e8      	cbz	r0, 801a51e <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a4e2:	7923      	ldrb	r3, [r4, #4]
 801a4e4:	2b01      	cmp	r3, #1
 801a4e6:	d001      	beq.n	801a4ec <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a4e8:	2b02      	cmp	r3, #2
 801a4ea:	d13d      	bne.n	801a568 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a4ec:	68a1      	ldr	r1, [r4, #8]
 801a4ee:	4628      	mov	r0, r5
 801a4f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4f4:	f004 b80c 	b.w	801e510 <ucdr_serialize_string>
 801a4f8:	7909      	ldrb	r1, [r1, #4]
 801a4fa:	f7f7 fc05 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a4fe:	4606      	mov	r6, r0
 801a500:	b120      	cbz	r0, 801a50c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a502:	7923      	ldrb	r3, [r4, #4]
 801a504:	2b02      	cmp	r3, #2
 801a506:	d039      	beq.n	801a57c <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a508:	2b03      	cmp	r3, #3
 801a50a:	d02f      	beq.n	801a56c <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a50c:	2202      	movs	r2, #2
 801a50e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801a512:	4628      	mov	r0, r5
 801a514:	f7fd f8c4 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a518:	4030      	ands	r0, r6
 801a51a:	b2c0      	uxtb	r0, r0
 801a51c:	bd70      	pop	{r4, r5, r6, pc}
 801a51e:	2000      	movs	r0, #0
 801a520:	bd70      	pop	{r4, r5, r6, pc}
 801a522:	7909      	ldrb	r1, [r1, #4]
 801a524:	f7f7 fbf0 	bl	8011d08 <ucdr_serialize_uint8_t>
 801a528:	4606      	mov	r6, r0
 801a52a:	b158      	cbz	r0, 801a544 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a52c:	7923      	ldrb	r3, [r4, #4]
 801a52e:	2b02      	cmp	r3, #2
 801a530:	d003      	beq.n	801a53a <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a532:	2b03      	cmp	r3, #3
 801a534:	d028      	beq.n	801a588 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a536:	2b01      	cmp	r3, #1
 801a538:	d104      	bne.n	801a544 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a53a:	68a1      	ldr	r1, [r4, #8]
 801a53c:	4628      	mov	r0, r5
 801a53e:	f003 ffe7 	bl	801e510 <ucdr_serialize_string>
 801a542:	4606      	mov	r6, r0
 801a544:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801a548:	4628      	mov	r0, r5
 801a54a:	f7f8 f919 	bl	8012780 <ucdr_serialize_int16_t>
 801a54e:	4030      	ands	r0, r6
 801a550:	b2c0      	uxtb	r0, r0
 801a552:	bd70      	pop	{r4, r5, r6, pc}
 801a554:	3104      	adds	r1, #4
 801a556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a55a:	f7ff be7b 	b.w	801a254 <uxr_serialize_CLIENT_Representation>
 801a55e:	3104      	adds	r1, #4
 801a560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a564:	f7ff bf32 	b.w	801a3cc <uxr_serialize_AGENT_Representation>
 801a568:	2001      	movs	r0, #1
 801a56a:	bd70      	pop	{r4, r5, r6, pc}
 801a56c:	68a2      	ldr	r2, [r4, #8]
 801a56e:	f104 010c 	add.w	r1, r4, #12
 801a572:	4628      	mov	r0, r5
 801a574:	f7f8 ff40 	bl	80133f8 <ucdr_serialize_sequence_uint8_t>
 801a578:	4606      	mov	r6, r0
 801a57a:	e7c7      	b.n	801a50c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a57c:	68a1      	ldr	r1, [r4, #8]
 801a57e:	4628      	mov	r0, r5
 801a580:	f003 ffc6 	bl	801e510 <ucdr_serialize_string>
 801a584:	4606      	mov	r6, r0
 801a586:	e7c1      	b.n	801a50c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a588:	68a2      	ldr	r2, [r4, #8]
 801a58a:	f104 010c 	add.w	r1, r4, #12
 801a58e:	4628      	mov	r0, r5
 801a590:	f7f8 ff32 	bl	80133f8 <ucdr_serialize_sequence_uint8_t>
 801a594:	4606      	mov	r6, r0
 801a596:	e7d5      	b.n	801a544 <uxr_serialize_ObjectVariant.part.0+0x94>

0801a598 <uxr_deserialize_DATAWRITER_Representation>:
 801a598:	b570      	push	{r4, r5, r6, lr}
 801a59a:	4606      	mov	r6, r0
 801a59c:	460d      	mov	r5, r1
 801a59e:	f7f7 fbc9 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801a5a2:	4604      	mov	r4, r0
 801a5a4:	b130      	cbz	r0, 801a5b4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a5a6:	782b      	ldrb	r3, [r5, #0]
 801a5a8:	2b02      	cmp	r3, #2
 801a5aa:	d00c      	beq.n	801a5c6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a5ac:	2b03      	cmp	r3, #3
 801a5ae:	d012      	beq.n	801a5d6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a5b0:	2b01      	cmp	r3, #1
 801a5b2:	d008      	beq.n	801a5c6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a5b4:	2202      	movs	r2, #2
 801a5b6:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a5ba:	4630      	mov	r0, r6
 801a5bc:	f7fd f8d4 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801a5c0:	4020      	ands	r0, r4
 801a5c2:	b2c0      	uxtb	r0, r0
 801a5c4:	bd70      	pop	{r4, r5, r6, pc}
 801a5c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a5ca:	6869      	ldr	r1, [r5, #4]
 801a5cc:	4630      	mov	r0, r6
 801a5ce:	f003 ffaf 	bl	801e530 <ucdr_deserialize_string>
 801a5d2:	4604      	mov	r4, r0
 801a5d4:	e7ee      	b.n	801a5b4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a5d6:	1d2b      	adds	r3, r5, #4
 801a5d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a5dc:	f105 0108 	add.w	r1, r5, #8
 801a5e0:	4630      	mov	r0, r6
 801a5e2:	f7f8 ff1b 	bl	801341c <ucdr_deserialize_sequence_uint8_t>
 801a5e6:	4604      	mov	r4, r0
 801a5e8:	e7e4      	b.n	801a5b4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a5ea:	bf00      	nop

0801a5ec <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a5ec:	b570      	push	{r4, r5, r6, lr}
 801a5ee:	460d      	mov	r5, r1
 801a5f0:	7809      	ldrb	r1, [r1, #0]
 801a5f2:	4606      	mov	r6, r0
 801a5f4:	f7f7 fb5a 	bl	8011cac <ucdr_serialize_bool>
 801a5f8:	782b      	ldrb	r3, [r5, #0]
 801a5fa:	4604      	mov	r4, r0
 801a5fc:	b94b      	cbnz	r3, 801a612 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a5fe:	7a29      	ldrb	r1, [r5, #8]
 801a600:	4630      	mov	r0, r6
 801a602:	f7f7 fb53 	bl	8011cac <ucdr_serialize_bool>
 801a606:	7a2b      	ldrb	r3, [r5, #8]
 801a608:	4004      	ands	r4, r0
 801a60a:	b2e4      	uxtb	r4, r4
 801a60c:	b943      	cbnz	r3, 801a620 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a60e:	4620      	mov	r0, r4
 801a610:	bd70      	pop	{r4, r5, r6, pc}
 801a612:	6869      	ldr	r1, [r5, #4]
 801a614:	4630      	mov	r0, r6
 801a616:	f003 ff7b 	bl	801e510 <ucdr_serialize_string>
 801a61a:	4004      	ands	r4, r0
 801a61c:	b2e4      	uxtb	r4, r4
 801a61e:	e7ee      	b.n	801a5fe <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a620:	68e9      	ldr	r1, [r5, #12]
 801a622:	4630      	mov	r0, r6
 801a624:	f003 ff74 	bl	801e510 <ucdr_serialize_string>
 801a628:	4004      	ands	r4, r0
 801a62a:	4620      	mov	r0, r4
 801a62c:	bd70      	pop	{r4, r5, r6, pc}
 801a62e:	bf00      	nop

0801a630 <uxr_serialize_OBJK_Topic_Binary>:
 801a630:	b570      	push	{r4, r5, r6, lr}
 801a632:	460d      	mov	r5, r1
 801a634:	4606      	mov	r6, r0
 801a636:	6809      	ldr	r1, [r1, #0]
 801a638:	f003 ff6a 	bl	801e510 <ucdr_serialize_string>
 801a63c:	4604      	mov	r4, r0
 801a63e:	7929      	ldrb	r1, [r5, #4]
 801a640:	4630      	mov	r0, r6
 801a642:	f7f7 fb33 	bl	8011cac <ucdr_serialize_bool>
 801a646:	792b      	ldrb	r3, [r5, #4]
 801a648:	4004      	ands	r4, r0
 801a64a:	b2e4      	uxtb	r4, r4
 801a64c:	b943      	cbnz	r3, 801a660 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a64e:	7b29      	ldrb	r1, [r5, #12]
 801a650:	4630      	mov	r0, r6
 801a652:	f7f7 fb2b 	bl	8011cac <ucdr_serialize_bool>
 801a656:	7b2b      	ldrb	r3, [r5, #12]
 801a658:	4004      	ands	r4, r0
 801a65a:	b93b      	cbnz	r3, 801a66c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a65c:	4620      	mov	r0, r4
 801a65e:	bd70      	pop	{r4, r5, r6, pc}
 801a660:	68a9      	ldr	r1, [r5, #8]
 801a662:	4630      	mov	r0, r6
 801a664:	f003 ff54 	bl	801e510 <ucdr_serialize_string>
 801a668:	4004      	ands	r4, r0
 801a66a:	e7f0      	b.n	801a64e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801a66c:	6929      	ldr	r1, [r5, #16]
 801a66e:	4630      	mov	r0, r6
 801a670:	f003 ff4e 	bl	801e510 <ucdr_serialize_string>
 801a674:	4004      	ands	r4, r0
 801a676:	b2e4      	uxtb	r4, r4
 801a678:	4620      	mov	r0, r4
 801a67a:	bd70      	pop	{r4, r5, r6, pc}

0801a67c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801a67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a680:	460c      	mov	r4, r1
 801a682:	7809      	ldrb	r1, [r1, #0]
 801a684:	4606      	mov	r6, r0
 801a686:	f7f7 fb11 	bl	8011cac <ucdr_serialize_bool>
 801a68a:	7823      	ldrb	r3, [r4, #0]
 801a68c:	4605      	mov	r5, r0
 801a68e:	b96b      	cbnz	r3, 801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801a690:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a694:	4630      	mov	r0, r6
 801a696:	f7f7 fb09 	bl	8011cac <ucdr_serialize_bool>
 801a69a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a69e:	4005      	ands	r5, r0
 801a6a0:	b2ed      	uxtb	r5, r5
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d169      	bne.n	801a77a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801a6a6:	4628      	mov	r0, r5
 801a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6ac:	6861      	ldr	r1, [r4, #4]
 801a6ae:	4630      	mov	r0, r6
 801a6b0:	f7f7 fd40 	bl	8012134 <ucdr_serialize_uint32_t>
 801a6b4:	6863      	ldr	r3, [r4, #4]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d06b      	beq.n	801a792 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801a6ba:	2800      	cmp	r0, #0
 801a6bc:	d067      	beq.n	801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6be:	68a1      	ldr	r1, [r4, #8]
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	f003 ff25 	bl	801e510 <ucdr_serialize_string>
 801a6c6:	6863      	ldr	r3, [r4, #4]
 801a6c8:	2b01      	cmp	r3, #1
 801a6ca:	d953      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6cc:	2800      	cmp	r0, #0
 801a6ce:	d05e      	beq.n	801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6d0:	68e1      	ldr	r1, [r4, #12]
 801a6d2:	4630      	mov	r0, r6
 801a6d4:	f003 ff1c 	bl	801e510 <ucdr_serialize_string>
 801a6d8:	6863      	ldr	r3, [r4, #4]
 801a6da:	2b02      	cmp	r3, #2
 801a6dc:	d94a      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6de:	2800      	cmp	r0, #0
 801a6e0:	d055      	beq.n	801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6e2:	6921      	ldr	r1, [r4, #16]
 801a6e4:	4630      	mov	r0, r6
 801a6e6:	f003 ff13 	bl	801e510 <ucdr_serialize_string>
 801a6ea:	6863      	ldr	r3, [r4, #4]
 801a6ec:	2b03      	cmp	r3, #3
 801a6ee:	d941      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6f0:	2800      	cmp	r0, #0
 801a6f2:	d04c      	beq.n	801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6f4:	6961      	ldr	r1, [r4, #20]
 801a6f6:	4630      	mov	r0, r6
 801a6f8:	f003 ff0a 	bl	801e510 <ucdr_serialize_string>
 801a6fc:	6863      	ldr	r3, [r4, #4]
 801a6fe:	2b04      	cmp	r3, #4
 801a700:	d938      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a702:	2800      	cmp	r0, #0
 801a704:	d043      	beq.n	801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a706:	69a1      	ldr	r1, [r4, #24]
 801a708:	4630      	mov	r0, r6
 801a70a:	f003 ff01 	bl	801e510 <ucdr_serialize_string>
 801a70e:	6863      	ldr	r3, [r4, #4]
 801a710:	2b05      	cmp	r3, #5
 801a712:	d92f      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a714:	2800      	cmp	r0, #0
 801a716:	d03a      	beq.n	801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a718:	69e1      	ldr	r1, [r4, #28]
 801a71a:	4630      	mov	r0, r6
 801a71c:	f003 fef8 	bl	801e510 <ucdr_serialize_string>
 801a720:	6863      	ldr	r3, [r4, #4]
 801a722:	2b06      	cmp	r3, #6
 801a724:	d926      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a726:	b390      	cbz	r0, 801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a728:	6a21      	ldr	r1, [r4, #32]
 801a72a:	4630      	mov	r0, r6
 801a72c:	f003 fef0 	bl	801e510 <ucdr_serialize_string>
 801a730:	6863      	ldr	r3, [r4, #4]
 801a732:	2b07      	cmp	r3, #7
 801a734:	d91e      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a736:	b350      	cbz	r0, 801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a738:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a73a:	4630      	mov	r0, r6
 801a73c:	f003 fee8 	bl	801e510 <ucdr_serialize_string>
 801a740:	6863      	ldr	r3, [r4, #4]
 801a742:	2b08      	cmp	r3, #8
 801a744:	d916      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a746:	b310      	cbz	r0, 801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a748:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a74a:	4630      	mov	r0, r6
 801a74c:	f003 fee0 	bl	801e510 <ucdr_serialize_string>
 801a750:	6863      	ldr	r3, [r4, #4]
 801a752:	2b09      	cmp	r3, #9
 801a754:	d90e      	bls.n	801a774 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a756:	b1d0      	cbz	r0, 801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a758:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a75c:	2709      	movs	r7, #9
 801a75e:	e000      	b.n	801a762 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a760:	b1a8      	cbz	r0, 801a78e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a762:	f858 1b04 	ldr.w	r1, [r8], #4
 801a766:	4630      	mov	r0, r6
 801a768:	f003 fed2 	bl	801e510 <ucdr_serialize_string>
 801a76c:	3701      	adds	r7, #1
 801a76e:	6862      	ldr	r2, [r4, #4]
 801a770:	4297      	cmp	r7, r2
 801a772:	d3f5      	bcc.n	801a760 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a774:	4005      	ands	r5, r0
 801a776:	b2ed      	uxtb	r5, r5
 801a778:	e78a      	b.n	801a690 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a77a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a77c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a780:	4630      	mov	r0, r6
 801a782:	f7f8 fe39 	bl	80133f8 <ucdr_serialize_sequence_uint8_t>
 801a786:	4005      	ands	r5, r0
 801a788:	4628      	mov	r0, r5
 801a78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a78e:	2500      	movs	r5, #0
 801a790:	e77e      	b.n	801a690 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a792:	4028      	ands	r0, r5
 801a794:	b2c5      	uxtb	r5, r0
 801a796:	e77b      	b.n	801a690 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a798 <uxr_serialize_OBJK_Publisher_Binary>:
 801a798:	b570      	push	{r4, r5, r6, lr}
 801a79a:	460d      	mov	r5, r1
 801a79c:	7809      	ldrb	r1, [r1, #0]
 801a79e:	4606      	mov	r6, r0
 801a7a0:	f7f7 fa84 	bl	8011cac <ucdr_serialize_bool>
 801a7a4:	782b      	ldrb	r3, [r5, #0]
 801a7a6:	4604      	mov	r4, r0
 801a7a8:	b94b      	cbnz	r3, 801a7be <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a7aa:	7a29      	ldrb	r1, [r5, #8]
 801a7ac:	4630      	mov	r0, r6
 801a7ae:	f7f7 fa7d 	bl	8011cac <ucdr_serialize_bool>
 801a7b2:	7a2b      	ldrb	r3, [r5, #8]
 801a7b4:	4004      	ands	r4, r0
 801a7b6:	b2e4      	uxtb	r4, r4
 801a7b8:	b943      	cbnz	r3, 801a7cc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a7ba:	4620      	mov	r0, r4
 801a7bc:	bd70      	pop	{r4, r5, r6, pc}
 801a7be:	6869      	ldr	r1, [r5, #4]
 801a7c0:	4630      	mov	r0, r6
 801a7c2:	f003 fea5 	bl	801e510 <ucdr_serialize_string>
 801a7c6:	4004      	ands	r4, r0
 801a7c8:	b2e4      	uxtb	r4, r4
 801a7ca:	e7ee      	b.n	801a7aa <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a7cc:	f105 010c 	add.w	r1, r5, #12
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	f7ff ff53 	bl	801a67c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801a7d6:	4004      	ands	r4, r0
 801a7d8:	4620      	mov	r0, r4
 801a7da:	bd70      	pop	{r4, r5, r6, pc}

0801a7dc <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7e0:	460c      	mov	r4, r1
 801a7e2:	7809      	ldrb	r1, [r1, #0]
 801a7e4:	4606      	mov	r6, r0
 801a7e6:	f7f7 fa61 	bl	8011cac <ucdr_serialize_bool>
 801a7ea:	7823      	ldrb	r3, [r4, #0]
 801a7ec:	4605      	mov	r5, r0
 801a7ee:	b96b      	cbnz	r3, 801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801a7f0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a7f4:	4630      	mov	r0, r6
 801a7f6:	f7f7 fa59 	bl	8011cac <ucdr_serialize_bool>
 801a7fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a7fe:	4005      	ands	r5, r0
 801a800:	b2ed      	uxtb	r5, r5
 801a802:	2b00      	cmp	r3, #0
 801a804:	d169      	bne.n	801a8da <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801a806:	4628      	mov	r0, r5
 801a808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a80c:	6861      	ldr	r1, [r4, #4]
 801a80e:	4630      	mov	r0, r6
 801a810:	f7f7 fc90 	bl	8012134 <ucdr_serialize_uint32_t>
 801a814:	6863      	ldr	r3, [r4, #4]
 801a816:	2b00      	cmp	r3, #0
 801a818:	d06b      	beq.n	801a8f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801a81a:	2800      	cmp	r0, #0
 801a81c:	d067      	beq.n	801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a81e:	68a1      	ldr	r1, [r4, #8]
 801a820:	4630      	mov	r0, r6
 801a822:	f003 fe75 	bl	801e510 <ucdr_serialize_string>
 801a826:	6863      	ldr	r3, [r4, #4]
 801a828:	2b01      	cmp	r3, #1
 801a82a:	d953      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a82c:	2800      	cmp	r0, #0
 801a82e:	d05e      	beq.n	801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a830:	68e1      	ldr	r1, [r4, #12]
 801a832:	4630      	mov	r0, r6
 801a834:	f003 fe6c 	bl	801e510 <ucdr_serialize_string>
 801a838:	6863      	ldr	r3, [r4, #4]
 801a83a:	2b02      	cmp	r3, #2
 801a83c:	d94a      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a83e:	2800      	cmp	r0, #0
 801a840:	d055      	beq.n	801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a842:	6921      	ldr	r1, [r4, #16]
 801a844:	4630      	mov	r0, r6
 801a846:	f003 fe63 	bl	801e510 <ucdr_serialize_string>
 801a84a:	6863      	ldr	r3, [r4, #4]
 801a84c:	2b03      	cmp	r3, #3
 801a84e:	d941      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a850:	2800      	cmp	r0, #0
 801a852:	d04c      	beq.n	801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a854:	6961      	ldr	r1, [r4, #20]
 801a856:	4630      	mov	r0, r6
 801a858:	f003 fe5a 	bl	801e510 <ucdr_serialize_string>
 801a85c:	6863      	ldr	r3, [r4, #4]
 801a85e:	2b04      	cmp	r3, #4
 801a860:	d938      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a862:	2800      	cmp	r0, #0
 801a864:	d043      	beq.n	801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a866:	69a1      	ldr	r1, [r4, #24]
 801a868:	4630      	mov	r0, r6
 801a86a:	f003 fe51 	bl	801e510 <ucdr_serialize_string>
 801a86e:	6863      	ldr	r3, [r4, #4]
 801a870:	2b05      	cmp	r3, #5
 801a872:	d92f      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a874:	2800      	cmp	r0, #0
 801a876:	d03a      	beq.n	801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a878:	69e1      	ldr	r1, [r4, #28]
 801a87a:	4630      	mov	r0, r6
 801a87c:	f003 fe48 	bl	801e510 <ucdr_serialize_string>
 801a880:	6863      	ldr	r3, [r4, #4]
 801a882:	2b06      	cmp	r3, #6
 801a884:	d926      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a886:	b390      	cbz	r0, 801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a888:	6a21      	ldr	r1, [r4, #32]
 801a88a:	4630      	mov	r0, r6
 801a88c:	f003 fe40 	bl	801e510 <ucdr_serialize_string>
 801a890:	6863      	ldr	r3, [r4, #4]
 801a892:	2b07      	cmp	r3, #7
 801a894:	d91e      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a896:	b350      	cbz	r0, 801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a898:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a89a:	4630      	mov	r0, r6
 801a89c:	f003 fe38 	bl	801e510 <ucdr_serialize_string>
 801a8a0:	6863      	ldr	r3, [r4, #4]
 801a8a2:	2b08      	cmp	r3, #8
 801a8a4:	d916      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a8a6:	b310      	cbz	r0, 801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a8a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a8aa:	4630      	mov	r0, r6
 801a8ac:	f003 fe30 	bl	801e510 <ucdr_serialize_string>
 801a8b0:	6863      	ldr	r3, [r4, #4]
 801a8b2:	2b09      	cmp	r3, #9
 801a8b4:	d90e      	bls.n	801a8d4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a8b6:	b1d0      	cbz	r0, 801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a8b8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a8bc:	2709      	movs	r7, #9
 801a8be:	e000      	b.n	801a8c2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a8c0:	b1a8      	cbz	r0, 801a8ee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a8c2:	f858 1b04 	ldr.w	r1, [r8], #4
 801a8c6:	4630      	mov	r0, r6
 801a8c8:	f003 fe22 	bl	801e510 <ucdr_serialize_string>
 801a8cc:	3701      	adds	r7, #1
 801a8ce:	6862      	ldr	r2, [r4, #4]
 801a8d0:	4297      	cmp	r7, r2
 801a8d2:	d3f5      	bcc.n	801a8c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a8d4:	4005      	ands	r5, r0
 801a8d6:	b2ed      	uxtb	r5, r5
 801a8d8:	e78a      	b.n	801a7f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a8da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a8dc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a8e0:	4630      	mov	r0, r6
 801a8e2:	f7f8 fd89 	bl	80133f8 <ucdr_serialize_sequence_uint8_t>
 801a8e6:	4005      	ands	r5, r0
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8ee:	2500      	movs	r5, #0
 801a8f0:	e77e      	b.n	801a7f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a8f2:	4028      	ands	r0, r5
 801a8f4:	b2c5      	uxtb	r5, r0
 801a8f6:	e77b      	b.n	801a7f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a8f8 <uxr_serialize_OBJK_Subscriber_Binary>:
 801a8f8:	b570      	push	{r4, r5, r6, lr}
 801a8fa:	460d      	mov	r5, r1
 801a8fc:	7809      	ldrb	r1, [r1, #0]
 801a8fe:	4606      	mov	r6, r0
 801a900:	f7f7 f9d4 	bl	8011cac <ucdr_serialize_bool>
 801a904:	782b      	ldrb	r3, [r5, #0]
 801a906:	4604      	mov	r4, r0
 801a908:	b94b      	cbnz	r3, 801a91e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a90a:	7a29      	ldrb	r1, [r5, #8]
 801a90c:	4630      	mov	r0, r6
 801a90e:	f7f7 f9cd 	bl	8011cac <ucdr_serialize_bool>
 801a912:	7a2b      	ldrb	r3, [r5, #8]
 801a914:	4004      	ands	r4, r0
 801a916:	b2e4      	uxtb	r4, r4
 801a918:	b943      	cbnz	r3, 801a92c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a91a:	4620      	mov	r0, r4
 801a91c:	bd70      	pop	{r4, r5, r6, pc}
 801a91e:	6869      	ldr	r1, [r5, #4]
 801a920:	4630      	mov	r0, r6
 801a922:	f003 fdf5 	bl	801e510 <ucdr_serialize_string>
 801a926:	4004      	ands	r4, r0
 801a928:	b2e4      	uxtb	r4, r4
 801a92a:	e7ee      	b.n	801a90a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a92c:	f105 010c 	add.w	r1, r5, #12
 801a930:	4630      	mov	r0, r6
 801a932:	f7ff ff53 	bl	801a7dc <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a936:	4004      	ands	r4, r0
 801a938:	4620      	mov	r0, r4
 801a93a:	bd70      	pop	{r4, r5, r6, pc}

0801a93c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a93c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a940:	4688      	mov	r8, r1
 801a942:	4681      	mov	r9, r0
 801a944:	8809      	ldrh	r1, [r1, #0]
 801a946:	f7f7 fa0b 	bl	8011d60 <ucdr_serialize_uint16_t>
 801a94a:	4606      	mov	r6, r0
 801a94c:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a950:	4648      	mov	r0, r9
 801a952:	f7f7 f9ab 	bl	8011cac <ucdr_serialize_bool>
 801a956:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a95a:	4006      	ands	r6, r0
 801a95c:	b2f5      	uxtb	r5, r6
 801a95e:	b9eb      	cbnz	r3, 801a99c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a960:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a964:	4648      	mov	r0, r9
 801a966:	f7f7 f9a1 	bl	8011cac <ucdr_serialize_bool>
 801a96a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a96e:	4005      	ands	r5, r0
 801a970:	bb7b      	cbnz	r3, 801a9d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a972:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a976:	4648      	mov	r0, r9
 801a978:	f7f7 f998 	bl	8011cac <ucdr_serialize_bool>
 801a97c:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a980:	4005      	ands	r5, r0
 801a982:	b9f3      	cbnz	r3, 801a9c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a984:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a988:	4648      	mov	r0, r9
 801a98a:	f7f7 f98f 	bl	8011cac <ucdr_serialize_bool>
 801a98e:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a992:	4005      	ands	r5, r0
 801a994:	b94b      	cbnz	r3, 801a9aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a996:	4628      	mov	r0, r5
 801a998:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a99c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a9a0:	4648      	mov	r0, r9
 801a9a2:	f7f7 f9dd 	bl	8011d60 <ucdr_serialize_uint16_t>
 801a9a6:	4005      	ands	r5, r0
 801a9a8:	e7da      	b.n	801a960 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a9aa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a9ae:	f108 011c 	add.w	r1, r8, #28
 801a9b2:	4648      	mov	r0, r9
 801a9b4:	f7f8 fd20 	bl	80133f8 <ucdr_serialize_sequence_uint8_t>
 801a9b8:	4028      	ands	r0, r5
 801a9ba:	b2c5      	uxtb	r5, r0
 801a9bc:	4628      	mov	r0, r5
 801a9be:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a9c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a9c6:	4648      	mov	r0, r9
 801a9c8:	f7f7 fbb4 	bl	8012134 <ucdr_serialize_uint32_t>
 801a9cc:	4028      	ands	r0, r5
 801a9ce:	b2c5      	uxtb	r5, r0
 801a9d0:	e7d8      	b.n	801a984 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a9d2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a9d6:	4648      	mov	r0, r9
 801a9d8:	f7f7 fbac 	bl	8012134 <ucdr_serialize_uint32_t>
 801a9dc:	4028      	ands	r0, r5
 801a9de:	b2c5      	uxtb	r5, r0
 801a9e0:	e7c7      	b.n	801a972 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a9e2:	bf00      	nop

0801a9e4 <uxr_serialize_OBJK_DataReader_Binary>:
 801a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9e6:	2202      	movs	r2, #2
 801a9e8:	460c      	mov	r4, r1
 801a9ea:	4606      	mov	r6, r0
 801a9ec:	f7fc fe58 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801a9f0:	4605      	mov	r5, r0
 801a9f2:	78a1      	ldrb	r1, [r4, #2]
 801a9f4:	4630      	mov	r0, r6
 801a9f6:	f7f7 f959 	bl	8011cac <ucdr_serialize_bool>
 801a9fa:	78a3      	ldrb	r3, [r4, #2]
 801a9fc:	4005      	ands	r5, r0
 801a9fe:	b2ed      	uxtb	r5, r5
 801aa00:	b90b      	cbnz	r3, 801aa06 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801aa02:	4628      	mov	r0, r5
 801aa04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa06:	f104 0108 	add.w	r1, r4, #8
 801aa0a:	4630      	mov	r0, r6
 801aa0c:	f7ff ff96 	bl	801a93c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801aa10:	4607      	mov	r7, r0
 801aa12:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801aa16:	4630      	mov	r0, r6
 801aa18:	f7f7 f948 	bl	8011cac <ucdr_serialize_bool>
 801aa1c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801aa20:	4038      	ands	r0, r7
 801aa22:	b2c7      	uxtb	r7, r0
 801aa24:	b95b      	cbnz	r3, 801aa3e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801aa26:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801aa2a:	4630      	mov	r0, r6
 801aa2c:	f7f7 f93e 	bl	8011cac <ucdr_serialize_bool>
 801aa30:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801aa34:	4007      	ands	r7, r0
 801aa36:	b94b      	cbnz	r3, 801aa4c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801aa38:	403d      	ands	r5, r7
 801aa3a:	4628      	mov	r0, r5
 801aa3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa3e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801aa42:	4630      	mov	r0, r6
 801aa44:	f7f7 fdcc 	bl	80125e0 <ucdr_serialize_uint64_t>
 801aa48:	4007      	ands	r7, r0
 801aa4a:	e7ec      	b.n	801aa26 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801aa4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801aa4e:	4630      	mov	r0, r6
 801aa50:	f003 fd5e 	bl	801e510 <ucdr_serialize_string>
 801aa54:	4007      	ands	r7, r0
 801aa56:	b2ff      	uxtb	r7, r7
 801aa58:	e7ee      	b.n	801aa38 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801aa5a:	bf00      	nop

0801aa5c <uxr_serialize_OBJK_DataWriter_Binary>:
 801aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa5e:	2202      	movs	r2, #2
 801aa60:	460d      	mov	r5, r1
 801aa62:	4606      	mov	r6, r0
 801aa64:	f7fc fe1c 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801aa68:	4604      	mov	r4, r0
 801aa6a:	78a9      	ldrb	r1, [r5, #2]
 801aa6c:	4630      	mov	r0, r6
 801aa6e:	f7f7 f91d 	bl	8011cac <ucdr_serialize_bool>
 801aa72:	78ab      	ldrb	r3, [r5, #2]
 801aa74:	4004      	ands	r4, r0
 801aa76:	b2e4      	uxtb	r4, r4
 801aa78:	b90b      	cbnz	r3, 801aa7e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801aa7a:	4620      	mov	r0, r4
 801aa7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa7e:	f105 0108 	add.w	r1, r5, #8
 801aa82:	4630      	mov	r0, r6
 801aa84:	f7ff ff5a 	bl	801a93c <uxr_serialize_OBJK_Endpoint_QosBinary>
 801aa88:	4607      	mov	r7, r0
 801aa8a:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801aa8e:	4630      	mov	r0, r6
 801aa90:	f7f7 f90c 	bl	8011cac <ucdr_serialize_bool>
 801aa94:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801aa98:	4038      	ands	r0, r7
 801aa9a:	b2c7      	uxtb	r7, r0
 801aa9c:	b913      	cbnz	r3, 801aaa4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801aa9e:	403c      	ands	r4, r7
 801aaa0:	4620      	mov	r0, r4
 801aaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aaa4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801aaa8:	4630      	mov	r0, r6
 801aaaa:	f7f7 fd99 	bl	80125e0 <ucdr_serialize_uint64_t>
 801aaae:	4007      	ands	r7, r0
 801aab0:	e7f5      	b.n	801aa9e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801aab2:	bf00      	nop

0801aab4 <uxr_serialize_OBJK_Replier_Binary>:
 801aab4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801aab8:	460f      	mov	r7, r1
 801aaba:	4680      	mov	r8, r0
 801aabc:	6809      	ldr	r1, [r1, #0]
 801aabe:	f003 fd27 	bl	801e510 <ucdr_serialize_string>
 801aac2:	4605      	mov	r5, r0
 801aac4:	6879      	ldr	r1, [r7, #4]
 801aac6:	4640      	mov	r0, r8
 801aac8:	f003 fd22 	bl	801e510 <ucdr_serialize_string>
 801aacc:	4005      	ands	r5, r0
 801aace:	68b9      	ldr	r1, [r7, #8]
 801aad0:	4640      	mov	r0, r8
 801aad2:	b2ec      	uxtb	r4, r5
 801aad4:	f003 fd1c 	bl	801e510 <ucdr_serialize_string>
 801aad8:	7b39      	ldrb	r1, [r7, #12]
 801aada:	4004      	ands	r4, r0
 801aadc:	4640      	mov	r0, r8
 801aade:	f7f7 f8e5 	bl	8011cac <ucdr_serialize_bool>
 801aae2:	7b3b      	ldrb	r3, [r7, #12]
 801aae4:	4004      	ands	r4, r0
 801aae6:	b94b      	cbnz	r3, 801aafc <uxr_serialize_OBJK_Replier_Binary+0x48>
 801aae8:	7d39      	ldrb	r1, [r7, #20]
 801aaea:	4640      	mov	r0, r8
 801aaec:	f7f7 f8de 	bl	8011cac <ucdr_serialize_bool>
 801aaf0:	7d3b      	ldrb	r3, [r7, #20]
 801aaf2:	4004      	ands	r4, r0
 801aaf4:	b943      	cbnz	r3, 801ab08 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801aafc:	6939      	ldr	r1, [r7, #16]
 801aafe:	4640      	mov	r0, r8
 801ab00:	f003 fd06 	bl	801e510 <ucdr_serialize_string>
 801ab04:	4004      	ands	r4, r0
 801ab06:	e7ef      	b.n	801aae8 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801ab08:	69b9      	ldr	r1, [r7, #24]
 801ab0a:	4640      	mov	r0, r8
 801ab0c:	f003 fd00 	bl	801e510 <ucdr_serialize_string>
 801ab10:	4004      	ands	r4, r0
 801ab12:	b2e4      	uxtb	r4, r4
 801ab14:	4620      	mov	r0, r4
 801ab16:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801ab1a:	bf00      	nop

0801ab1c <uxr_deserialize_ObjectVariant>:
 801ab1c:	b570      	push	{r4, r5, r6, lr}
 801ab1e:	4605      	mov	r5, r0
 801ab20:	460e      	mov	r6, r1
 801ab22:	f7f7 f907 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801ab26:	b168      	cbz	r0, 801ab44 <uxr_deserialize_ObjectVariant+0x28>
 801ab28:	7833      	ldrb	r3, [r6, #0]
 801ab2a:	4604      	mov	r4, r0
 801ab2c:	3b01      	subs	r3, #1
 801ab2e:	2b0d      	cmp	r3, #13
 801ab30:	d809      	bhi.n	801ab46 <uxr_deserialize_ObjectVariant+0x2a>
 801ab32:	e8df f003 	tbb	[pc, r3]
 801ab36:	0a41      	.short	0x0a41
 801ab38:	0a0a2323 	.word	0x0a0a2323
 801ab3c:	10080a0a 	.word	0x10080a0a
 801ab40:	565c1010 	.word	0x565c1010
 801ab44:	2400      	movs	r4, #0
 801ab46:	4620      	mov	r0, r4
 801ab48:	bd70      	pop	{r4, r5, r6, pc}
 801ab4a:	1d31      	adds	r1, r6, #4
 801ab4c:	4628      	mov	r0, r5
 801ab4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab52:	f7ff bd21 	b.w	801a598 <uxr_deserialize_DATAWRITER_Representation>
 801ab56:	1d31      	adds	r1, r6, #4
 801ab58:	4628      	mov	r0, r5
 801ab5a:	f7f7 f8eb 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801ab5e:	2800      	cmp	r0, #0
 801ab60:	d0f0      	beq.n	801ab44 <uxr_deserialize_ObjectVariant+0x28>
 801ab62:	7933      	ldrb	r3, [r6, #4]
 801ab64:	2b01      	cmp	r3, #1
 801ab66:	d001      	beq.n	801ab6c <uxr_deserialize_ObjectVariant+0x50>
 801ab68:	2b02      	cmp	r3, #2
 801ab6a:	d1ec      	bne.n	801ab46 <uxr_deserialize_ObjectVariant+0x2a>
 801ab6c:	68b1      	ldr	r1, [r6, #8]
 801ab6e:	4628      	mov	r0, r5
 801ab70:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab78:	f003 bcda 	b.w	801e530 <ucdr_deserialize_string>
 801ab7c:	1d31      	adds	r1, r6, #4
 801ab7e:	4628      	mov	r0, r5
 801ab80:	f7f7 f8d8 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801ab84:	4604      	mov	r4, r0
 801ab86:	b170      	cbz	r0, 801aba6 <uxr_deserialize_ObjectVariant+0x8a>
 801ab88:	7933      	ldrb	r3, [r6, #4]
 801ab8a:	2b02      	cmp	r3, #2
 801ab8c:	d04c      	beq.n	801ac28 <uxr_deserialize_ObjectVariant+0x10c>
 801ab8e:	2b03      	cmp	r3, #3
 801ab90:	d109      	bne.n	801aba6 <uxr_deserialize_ObjectVariant+0x8a>
 801ab92:	f106 0308 	add.w	r3, r6, #8
 801ab96:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab9a:	f106 010c 	add.w	r1, r6, #12
 801ab9e:	4628      	mov	r0, r5
 801aba0:	f7f8 fc3c 	bl	801341c <ucdr_deserialize_sequence_uint8_t>
 801aba4:	4604      	mov	r4, r0
 801aba6:	2202      	movs	r2, #2
 801aba8:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801abac:	4628      	mov	r0, r5
 801abae:	f7fc fddb 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801abb2:	4020      	ands	r0, r4
 801abb4:	b2c4      	uxtb	r4, r0
 801abb6:	e7c6      	b.n	801ab46 <uxr_deserialize_ObjectVariant+0x2a>
 801abb8:	1d31      	adds	r1, r6, #4
 801abba:	4628      	mov	r0, r5
 801abbc:	f7f7 f8ba 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801abc0:	4604      	mov	r4, r0
 801abc2:	b130      	cbz	r0, 801abd2 <uxr_deserialize_ObjectVariant+0xb6>
 801abc4:	7933      	ldrb	r3, [r6, #4]
 801abc6:	2b02      	cmp	r3, #2
 801abc8:	d036      	beq.n	801ac38 <uxr_deserialize_ObjectVariant+0x11c>
 801abca:	2b03      	cmp	r3, #3
 801abcc:	d03c      	beq.n	801ac48 <uxr_deserialize_ObjectVariant+0x12c>
 801abce:	2b01      	cmp	r3, #1
 801abd0:	d032      	beq.n	801ac38 <uxr_deserialize_ObjectVariant+0x11c>
 801abd2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801abd6:	4628      	mov	r0, r5
 801abd8:	f7f7 fe52 	bl	8012880 <ucdr_deserialize_int16_t>
 801abdc:	4020      	ands	r0, r4
 801abde:	b2c4      	uxtb	r4, r0
 801abe0:	e7b1      	b.n	801ab46 <uxr_deserialize_ObjectVariant+0x2a>
 801abe2:	1d31      	adds	r1, r6, #4
 801abe4:	4628      	mov	r0, r5
 801abe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abea:	f7ff bb8b 	b.w	801a304 <uxr_deserialize_CLIENT_Representation>
 801abee:	2204      	movs	r2, #4
 801abf0:	4628      	mov	r0, r5
 801abf2:	18b1      	adds	r1, r6, r2
 801abf4:	f7fc fdb8 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801abf8:	4604      	mov	r4, r0
 801abfa:	2202      	movs	r2, #2
 801abfc:	f106 0108 	add.w	r1, r6, #8
 801ac00:	4628      	mov	r0, r5
 801ac02:	f7fc fdb1 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801ac06:	4004      	ands	r4, r0
 801ac08:	2202      	movs	r2, #2
 801ac0a:	f106 010a 	add.w	r1, r6, #10
 801ac0e:	4628      	mov	r0, r5
 801ac10:	b2e4      	uxtb	r4, r4
 801ac12:	f7fc fda9 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801ac16:	4603      	mov	r3, r0
 801ac18:	f106 010c 	add.w	r1, r6, #12
 801ac1c:	4628      	mov	r0, r5
 801ac1e:	401c      	ands	r4, r3
 801ac20:	f7f7 f85a 	bl	8011cd8 <ucdr_deserialize_bool>
 801ac24:	4004      	ands	r4, r0
 801ac26:	e78e      	b.n	801ab46 <uxr_deserialize_ObjectVariant+0x2a>
 801ac28:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ac2c:	68b1      	ldr	r1, [r6, #8]
 801ac2e:	4628      	mov	r0, r5
 801ac30:	f003 fc7e 	bl	801e530 <ucdr_deserialize_string>
 801ac34:	4604      	mov	r4, r0
 801ac36:	e7b6      	b.n	801aba6 <uxr_deserialize_ObjectVariant+0x8a>
 801ac38:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ac3c:	68b1      	ldr	r1, [r6, #8]
 801ac3e:	4628      	mov	r0, r5
 801ac40:	f003 fc76 	bl	801e530 <ucdr_deserialize_string>
 801ac44:	4604      	mov	r4, r0
 801ac46:	e7c4      	b.n	801abd2 <uxr_deserialize_ObjectVariant+0xb6>
 801ac48:	f106 0308 	add.w	r3, r6, #8
 801ac4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ac50:	f106 010c 	add.w	r1, r6, #12
 801ac54:	4628      	mov	r0, r5
 801ac56:	f7f8 fbe1 	bl	801341c <ucdr_deserialize_sequence_uint8_t>
 801ac5a:	4604      	mov	r4, r0
 801ac5c:	e7b9      	b.n	801abd2 <uxr_deserialize_ObjectVariant+0xb6>
 801ac5e:	bf00      	nop

0801ac60 <uxr_deserialize_BaseObjectRequest>:
 801ac60:	b570      	push	{r4, r5, r6, lr}
 801ac62:	2202      	movs	r2, #2
 801ac64:	4605      	mov	r5, r0
 801ac66:	460e      	mov	r6, r1
 801ac68:	f7fc fd7e 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801ac6c:	2202      	movs	r2, #2
 801ac6e:	4604      	mov	r4, r0
 801ac70:	4628      	mov	r0, r5
 801ac72:	18b1      	adds	r1, r6, r2
 801ac74:	f7fc fd78 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801ac78:	4020      	ands	r0, r4
 801ac7a:	b2c0      	uxtb	r0, r0
 801ac7c:	bd70      	pop	{r4, r5, r6, pc}
 801ac7e:	bf00      	nop

0801ac80 <uxr_serialize_ActivityInfoVariant>:
 801ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac84:	460e      	mov	r6, r1
 801ac86:	7809      	ldrb	r1, [r1, #0]
 801ac88:	4680      	mov	r8, r0
 801ac8a:	f7f7 f83d 	bl	8011d08 <ucdr_serialize_uint8_t>
 801ac8e:	4607      	mov	r7, r0
 801ac90:	b138      	cbz	r0, 801aca2 <uxr_serialize_ActivityInfoVariant+0x22>
 801ac92:	7833      	ldrb	r3, [r6, #0]
 801ac94:	2b06      	cmp	r3, #6
 801ac96:	f000 8081 	beq.w	801ad9c <uxr_serialize_ActivityInfoVariant+0x11c>
 801ac9a:	2b0d      	cmp	r3, #13
 801ac9c:	d014      	beq.n	801acc8 <uxr_serialize_ActivityInfoVariant+0x48>
 801ac9e:	2b05      	cmp	r3, #5
 801aca0:	d002      	beq.n	801aca8 <uxr_serialize_ActivityInfoVariant+0x28>
 801aca2:	4638      	mov	r0, r7
 801aca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aca8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801acac:	4640      	mov	r0, r8
 801acae:	f7f7 fd67 	bl	8012780 <ucdr_serialize_int16_t>
 801acb2:	4607      	mov	r7, r0
 801acb4:	4640      	mov	r0, r8
 801acb6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801acba:	f7f7 fc91 	bl	80125e0 <ucdr_serialize_uint64_t>
 801acbe:	4038      	ands	r0, r7
 801acc0:	b2c7      	uxtb	r7, r0
 801acc2:	4638      	mov	r0, r7
 801acc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acc8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801accc:	4640      	mov	r0, r8
 801acce:	f7f7 fd57 	bl	8012780 <ucdr_serialize_int16_t>
 801acd2:	68f1      	ldr	r1, [r6, #12]
 801acd4:	4607      	mov	r7, r0
 801acd6:	4640      	mov	r0, r8
 801acd8:	f7f7 fa2c 	bl	8012134 <ucdr_serialize_uint32_t>
 801acdc:	68f3      	ldr	r3, [r6, #12]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d0ed      	beq.n	801acbe <uxr_serialize_ActivityInfoVariant+0x3e>
 801ace2:	b318      	cbz	r0, 801ad2c <uxr_serialize_ActivityInfoVariant+0xac>
 801ace4:	f106 090c 	add.w	r9, r6, #12
 801ace8:	2400      	movs	r4, #0
 801acea:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801acee:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801acf2:	7c29      	ldrb	r1, [r5, #16]
 801acf4:	4640      	mov	r0, r8
 801acf6:	f7f7 f807 	bl	8011d08 <ucdr_serialize_uint8_t>
 801acfa:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801acfe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801ad02:	2800      	cmp	r0, #0
 801ad04:	d051      	beq.n	801adaa <uxr_serialize_ActivityInfoVariant+0x12a>
 801ad06:	7c2b      	ldrb	r3, [r5, #16]
 801ad08:	00c9      	lsls	r1, r1, #3
 801ad0a:	2b03      	cmp	r3, #3
 801ad0c:	d854      	bhi.n	801adb8 <uxr_serialize_ActivityInfoVariant+0x138>
 801ad0e:	e8df f003 	tbb	[pc, r3]
 801ad12:	2133      	.short	0x2133
 801ad14:	020f      	.short	0x020f
 801ad16:	4449      	add	r1, r9
 801ad18:	4640      	mov	r0, r8
 801ad1a:	6889      	ldr	r1, [r1, #8]
 801ad1c:	f003 fbf8 	bl	801e510 <ucdr_serialize_string>
 801ad20:	3401      	adds	r4, #1
 801ad22:	68f2      	ldr	r2, [r6, #12]
 801ad24:	4294      	cmp	r4, r2
 801ad26:	d244      	bcs.n	801adb2 <uxr_serialize_ActivityInfoVariant+0x132>
 801ad28:	2800      	cmp	r0, #0
 801ad2a:	d1de      	bne.n	801acea <uxr_serialize_ActivityInfoVariant+0x6a>
 801ad2c:	2700      	movs	r7, #0
 801ad2e:	e7b8      	b.n	801aca2 <uxr_serialize_ActivityInfoVariant+0x22>
 801ad30:	3108      	adds	r1, #8
 801ad32:	44a2      	add	sl, r4
 801ad34:	2210      	movs	r2, #16
 801ad36:	4640      	mov	r0, r8
 801ad38:	4449      	add	r1, r9
 801ad3a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ad3e:	f7fc fcaf 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801ad42:	4605      	mov	r5, r0
 801ad44:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801ad48:	4640      	mov	r0, r8
 801ad4a:	f7f7 f9f3 	bl	8012134 <ucdr_serialize_uint32_t>
 801ad4e:	4028      	ands	r0, r5
 801ad50:	b2c0      	uxtb	r0, r0
 801ad52:	e7e5      	b.n	801ad20 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ad54:	3108      	adds	r1, #8
 801ad56:	44a2      	add	sl, r4
 801ad58:	2204      	movs	r2, #4
 801ad5a:	4640      	mov	r0, r8
 801ad5c:	4449      	add	r1, r9
 801ad5e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ad62:	f7fc fc9d 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801ad66:	4605      	mov	r5, r0
 801ad68:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801ad6c:	4640      	mov	r0, r8
 801ad6e:	f7f6 fff7 	bl	8011d60 <ucdr_serialize_uint16_t>
 801ad72:	4028      	ands	r0, r5
 801ad74:	b2c0      	uxtb	r0, r0
 801ad76:	e7d3      	b.n	801ad20 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ad78:	3108      	adds	r1, #8
 801ad7a:	44a2      	add	sl, r4
 801ad7c:	2202      	movs	r2, #2
 801ad7e:	4640      	mov	r0, r8
 801ad80:	4449      	add	r1, r9
 801ad82:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ad86:	f7fc fc8b 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801ad8a:	4605      	mov	r5, r0
 801ad8c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801ad90:	4640      	mov	r0, r8
 801ad92:	f7f6 ffb9 	bl	8011d08 <ucdr_serialize_uint8_t>
 801ad96:	4028      	ands	r0, r5
 801ad98:	b2c0      	uxtb	r0, r0
 801ad9a:	e7c1      	b.n	801ad20 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ad9c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ada0:	4640      	mov	r0, r8
 801ada2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ada6:	f7f7 bceb 	b.w	8012780 <ucdr_serialize_int16_t>
 801adaa:	3401      	adds	r4, #1
 801adac:	68f2      	ldr	r2, [r6, #12]
 801adae:	42a2      	cmp	r2, r4
 801adb0:	d8bc      	bhi.n	801ad2c <uxr_serialize_ActivityInfoVariant+0xac>
 801adb2:	4007      	ands	r7, r0
 801adb4:	b2ff      	uxtb	r7, r7
 801adb6:	e774      	b.n	801aca2 <uxr_serialize_ActivityInfoVariant+0x22>
 801adb8:	3401      	adds	r4, #1
 801adba:	68f3      	ldr	r3, [r6, #12]
 801adbc:	3518      	adds	r5, #24
 801adbe:	429c      	cmp	r4, r3
 801adc0:	d397      	bcc.n	801acf2 <uxr_serialize_ActivityInfoVariant+0x72>
 801adc2:	e76e      	b.n	801aca2 <uxr_serialize_ActivityInfoVariant+0x22>

0801adc4 <uxr_deserialize_BaseObjectReply>:
 801adc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adc8:	2202      	movs	r2, #2
 801adca:	4606      	mov	r6, r0
 801adcc:	460f      	mov	r7, r1
 801adce:	f7fc fccb 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801add2:	2202      	movs	r2, #2
 801add4:	4605      	mov	r5, r0
 801add6:	4630      	mov	r0, r6
 801add8:	18b9      	adds	r1, r7, r2
 801adda:	f7fc fcc5 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801adde:	4680      	mov	r8, r0
 801ade0:	1d39      	adds	r1, r7, #4
 801ade2:	4630      	mov	r0, r6
 801ade4:	f7f6 ffa6 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801ade8:	ea05 0508 	and.w	r5, r5, r8
 801adec:	4604      	mov	r4, r0
 801adee:	1d79      	adds	r1, r7, #5
 801adf0:	4630      	mov	r0, r6
 801adf2:	402c      	ands	r4, r5
 801adf4:	f7f6 ff9e 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801adf8:	4020      	ands	r0, r4
 801adfa:	b2c0      	uxtb	r0, r0
 801adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ae00 <uxr_serialize_ReadSpecification>:
 801ae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae02:	460e      	mov	r6, r1
 801ae04:	4607      	mov	r7, r0
 801ae06:	7809      	ldrb	r1, [r1, #0]
 801ae08:	f7f6 ff7e 	bl	8011d08 <ucdr_serialize_uint8_t>
 801ae0c:	4604      	mov	r4, r0
 801ae0e:	7871      	ldrb	r1, [r6, #1]
 801ae10:	4638      	mov	r0, r7
 801ae12:	f7f6 ff79 	bl	8011d08 <ucdr_serialize_uint8_t>
 801ae16:	4004      	ands	r4, r0
 801ae18:	78b1      	ldrb	r1, [r6, #2]
 801ae1a:	4638      	mov	r0, r7
 801ae1c:	f7f6 ff46 	bl	8011cac <ucdr_serialize_bool>
 801ae20:	78b3      	ldrb	r3, [r6, #2]
 801ae22:	b2e4      	uxtb	r4, r4
 801ae24:	4004      	ands	r4, r0
 801ae26:	b943      	cbnz	r3, 801ae3a <uxr_serialize_ReadSpecification+0x3a>
 801ae28:	7a31      	ldrb	r1, [r6, #8]
 801ae2a:	4638      	mov	r0, r7
 801ae2c:	f7f6 ff3e 	bl	8011cac <ucdr_serialize_bool>
 801ae30:	7a33      	ldrb	r3, [r6, #8]
 801ae32:	4004      	ands	r4, r0
 801ae34:	b93b      	cbnz	r3, 801ae46 <uxr_serialize_ReadSpecification+0x46>
 801ae36:	4620      	mov	r0, r4
 801ae38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae3a:	6871      	ldr	r1, [r6, #4]
 801ae3c:	4638      	mov	r0, r7
 801ae3e:	f003 fb67 	bl	801e510 <ucdr_serialize_string>
 801ae42:	4004      	ands	r4, r0
 801ae44:	e7f0      	b.n	801ae28 <uxr_serialize_ReadSpecification+0x28>
 801ae46:	8971      	ldrh	r1, [r6, #10]
 801ae48:	4638      	mov	r0, r7
 801ae4a:	f7f6 ff89 	bl	8011d60 <ucdr_serialize_uint16_t>
 801ae4e:	4605      	mov	r5, r0
 801ae50:	89b1      	ldrh	r1, [r6, #12]
 801ae52:	4638      	mov	r0, r7
 801ae54:	f7f6 ff84 	bl	8011d60 <ucdr_serialize_uint16_t>
 801ae58:	4005      	ands	r5, r0
 801ae5a:	89f1      	ldrh	r1, [r6, #14]
 801ae5c:	4638      	mov	r0, r7
 801ae5e:	b2ed      	uxtb	r5, r5
 801ae60:	f7f6 ff7e 	bl	8011d60 <ucdr_serialize_uint16_t>
 801ae64:	8a31      	ldrh	r1, [r6, #16]
 801ae66:	4025      	ands	r5, r4
 801ae68:	4604      	mov	r4, r0
 801ae6a:	4638      	mov	r0, r7
 801ae6c:	4025      	ands	r5, r4
 801ae6e:	f7f6 ff77 	bl	8011d60 <ucdr_serialize_uint16_t>
 801ae72:	ea00 0405 	and.w	r4, r0, r5
 801ae76:	4620      	mov	r0, r4
 801ae78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae7a:	bf00      	nop

0801ae7c <uxr_serialize_CREATE_CLIENT_Payload>:
 801ae7c:	f7ff b9ea 	b.w	801a254 <uxr_serialize_CLIENT_Representation>

0801ae80 <uxr_serialize_CREATE_Payload>:
 801ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae82:	2202      	movs	r2, #2
 801ae84:	4607      	mov	r7, r0
 801ae86:	460e      	mov	r6, r1
 801ae88:	f7fc fc0a 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801ae8c:	2202      	movs	r2, #2
 801ae8e:	4605      	mov	r5, r0
 801ae90:	4638      	mov	r0, r7
 801ae92:	18b1      	adds	r1, r6, r2
 801ae94:	f7fc fc04 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801ae98:	7931      	ldrb	r1, [r6, #4]
 801ae9a:	4604      	mov	r4, r0
 801ae9c:	4638      	mov	r0, r7
 801ae9e:	f7f6 ff33 	bl	8011d08 <ucdr_serialize_uint8_t>
 801aea2:	b170      	cbz	r0, 801aec2 <uxr_serialize_CREATE_Payload+0x42>
 801aea4:	7933      	ldrb	r3, [r6, #4]
 801aea6:	402c      	ands	r4, r5
 801aea8:	3b01      	subs	r3, #1
 801aeaa:	b2e4      	uxtb	r4, r4
 801aeac:	2b0d      	cmp	r3, #13
 801aeae:	d809      	bhi.n	801aec4 <uxr_serialize_CREATE_Payload+0x44>
 801aeb0:	e8df f003 	tbb	[pc, r3]
 801aeb4:	23230a4c 	.word	0x23230a4c
 801aeb8:	0a0a0a0a 	.word	0x0a0a0a0a
 801aebc:	12121208 	.word	0x12121208
 801aec0:	3e45      	.short	0x3e45
 801aec2:	2400      	movs	r4, #0
 801aec4:	4620      	mov	r0, r4
 801aec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aec8:	f106 0108 	add.w	r1, r6, #8
 801aecc:	4638      	mov	r0, r7
 801aece:	f7ff fac7 	bl	801a460 <uxr_serialize_DATAWRITER_Representation>
 801aed2:	4004      	ands	r4, r0
 801aed4:	4620      	mov	r0, r4
 801aed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aed8:	7a31      	ldrb	r1, [r6, #8]
 801aeda:	4638      	mov	r0, r7
 801aedc:	f7f6 ff14 	bl	8011d08 <ucdr_serialize_uint8_t>
 801aee0:	2800      	cmp	r0, #0
 801aee2:	d0ee      	beq.n	801aec2 <uxr_serialize_CREATE_Payload+0x42>
 801aee4:	7a33      	ldrb	r3, [r6, #8]
 801aee6:	2b01      	cmp	r3, #1
 801aee8:	d001      	beq.n	801aeee <uxr_serialize_CREATE_Payload+0x6e>
 801aeea:	2b02      	cmp	r3, #2
 801aeec:	d1ea      	bne.n	801aec4 <uxr_serialize_CREATE_Payload+0x44>
 801aeee:	68f1      	ldr	r1, [r6, #12]
 801aef0:	4638      	mov	r0, r7
 801aef2:	f003 fb0d 	bl	801e510 <ucdr_serialize_string>
 801aef6:	4004      	ands	r4, r0
 801aef8:	e7e4      	b.n	801aec4 <uxr_serialize_CREATE_Payload+0x44>
 801aefa:	7a31      	ldrb	r1, [r6, #8]
 801aefc:	4638      	mov	r0, r7
 801aefe:	f7f6 ff03 	bl	8011d08 <ucdr_serialize_uint8_t>
 801af02:	4605      	mov	r5, r0
 801af04:	b158      	cbz	r0, 801af1e <uxr_serialize_CREATE_Payload+0x9e>
 801af06:	7a33      	ldrb	r3, [r6, #8]
 801af08:	2b02      	cmp	r3, #2
 801af0a:	d034      	beq.n	801af76 <uxr_serialize_CREATE_Payload+0xf6>
 801af0c:	2b03      	cmp	r3, #3
 801af0e:	d106      	bne.n	801af1e <uxr_serialize_CREATE_Payload+0x9e>
 801af10:	68f2      	ldr	r2, [r6, #12]
 801af12:	f106 0110 	add.w	r1, r6, #16
 801af16:	4638      	mov	r0, r7
 801af18:	f7f8 fa6e 	bl	80133f8 <ucdr_serialize_sequence_uint8_t>
 801af1c:	4605      	mov	r5, r0
 801af1e:	2202      	movs	r2, #2
 801af20:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801af24:	4638      	mov	r0, r7
 801af26:	f7fc fbbb 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801af2a:	4028      	ands	r0, r5
 801af2c:	4004      	ands	r4, r0
 801af2e:	e7c9      	b.n	801aec4 <uxr_serialize_CREATE_Payload+0x44>
 801af30:	f106 0108 	add.w	r1, r6, #8
 801af34:	4638      	mov	r0, r7
 801af36:	f7ff f98d 	bl	801a254 <uxr_serialize_CLIENT_Representation>
 801af3a:	4004      	ands	r4, r0
 801af3c:	e7c2      	b.n	801aec4 <uxr_serialize_CREATE_Payload+0x44>
 801af3e:	f106 0108 	add.w	r1, r6, #8
 801af42:	4638      	mov	r0, r7
 801af44:	f7ff fa42 	bl	801a3cc <uxr_serialize_AGENT_Representation>
 801af48:	4004      	ands	r4, r0
 801af4a:	e7bb      	b.n	801aec4 <uxr_serialize_CREATE_Payload+0x44>
 801af4c:	7a31      	ldrb	r1, [r6, #8]
 801af4e:	4638      	mov	r0, r7
 801af50:	f7f6 feda 	bl	8011d08 <ucdr_serialize_uint8_t>
 801af54:	4605      	mov	r5, r0
 801af56:	b130      	cbz	r0, 801af66 <uxr_serialize_CREATE_Payload+0xe6>
 801af58:	7a33      	ldrb	r3, [r6, #8]
 801af5a:	2b02      	cmp	r3, #2
 801af5c:	d011      	beq.n	801af82 <uxr_serialize_CREATE_Payload+0x102>
 801af5e:	2b03      	cmp	r3, #3
 801af60:	d015      	beq.n	801af8e <uxr_serialize_CREATE_Payload+0x10e>
 801af62:	2b01      	cmp	r3, #1
 801af64:	d00d      	beq.n	801af82 <uxr_serialize_CREATE_Payload+0x102>
 801af66:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801af6a:	4638      	mov	r0, r7
 801af6c:	f7f7 fc08 	bl	8012780 <ucdr_serialize_int16_t>
 801af70:	4028      	ands	r0, r5
 801af72:	4004      	ands	r4, r0
 801af74:	e7a6      	b.n	801aec4 <uxr_serialize_CREATE_Payload+0x44>
 801af76:	68f1      	ldr	r1, [r6, #12]
 801af78:	4638      	mov	r0, r7
 801af7a:	f003 fac9 	bl	801e510 <ucdr_serialize_string>
 801af7e:	4605      	mov	r5, r0
 801af80:	e7cd      	b.n	801af1e <uxr_serialize_CREATE_Payload+0x9e>
 801af82:	68f1      	ldr	r1, [r6, #12]
 801af84:	4638      	mov	r0, r7
 801af86:	f003 fac3 	bl	801e510 <ucdr_serialize_string>
 801af8a:	4605      	mov	r5, r0
 801af8c:	e7eb      	b.n	801af66 <uxr_serialize_CREATE_Payload+0xe6>
 801af8e:	68f2      	ldr	r2, [r6, #12]
 801af90:	f106 0110 	add.w	r1, r6, #16
 801af94:	4638      	mov	r0, r7
 801af96:	f7f8 fa2f 	bl	80133f8 <ucdr_serialize_sequence_uint8_t>
 801af9a:	4605      	mov	r5, r0
 801af9c:	e7e3      	b.n	801af66 <uxr_serialize_CREATE_Payload+0xe6>
 801af9e:	bf00      	nop

0801afa0 <uxr_deserialize_GET_INFO_Payload>:
 801afa0:	b570      	push	{r4, r5, r6, lr}
 801afa2:	2202      	movs	r2, #2
 801afa4:	4605      	mov	r5, r0
 801afa6:	460e      	mov	r6, r1
 801afa8:	f7fc fbde 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801afac:	2202      	movs	r2, #2
 801afae:	4604      	mov	r4, r0
 801afb0:	4628      	mov	r0, r5
 801afb2:	18b1      	adds	r1, r6, r2
 801afb4:	f7fc fbd8 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801afb8:	4603      	mov	r3, r0
 801afba:	1d31      	adds	r1, r6, #4
 801afbc:	4628      	mov	r0, r5
 801afbe:	401c      	ands	r4, r3
 801afc0:	f7f7 f9e8 	bl	8012394 <ucdr_deserialize_uint32_t>
 801afc4:	b2e4      	uxtb	r4, r4
 801afc6:	4020      	ands	r0, r4
 801afc8:	bd70      	pop	{r4, r5, r6, pc}
 801afca:	bf00      	nop

0801afcc <uxr_serialize_DELETE_Payload>:
 801afcc:	b570      	push	{r4, r5, r6, lr}
 801afce:	2202      	movs	r2, #2
 801afd0:	4605      	mov	r5, r0
 801afd2:	460e      	mov	r6, r1
 801afd4:	f7fc fb64 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801afd8:	2202      	movs	r2, #2
 801afda:	4604      	mov	r4, r0
 801afdc:	4628      	mov	r0, r5
 801afde:	18b1      	adds	r1, r6, r2
 801afe0:	f7fc fb5e 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801afe4:	4020      	ands	r0, r4
 801afe6:	b2c0      	uxtb	r0, r0
 801afe8:	bd70      	pop	{r4, r5, r6, pc}
 801afea:	bf00      	nop

0801afec <uxr_deserialize_STATUS_AGENT_Payload>:
 801afec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aff0:	460e      	mov	r6, r1
 801aff2:	4605      	mov	r5, r0
 801aff4:	f7f6 fe9e 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801aff8:	4604      	mov	r4, r0
 801affa:	1c71      	adds	r1, r6, #1
 801affc:	4628      	mov	r0, r5
 801affe:	f7f6 fe99 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801b002:	2204      	movs	r2, #4
 801b004:	4681      	mov	r9, r0
 801b006:	4628      	mov	r0, r5
 801b008:	18b1      	adds	r1, r6, r2
 801b00a:	f7fc fbad 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801b00e:	f106 0108 	add.w	r1, r6, #8
 801b012:	4680      	mov	r8, r0
 801b014:	2202      	movs	r2, #2
 801b016:	4628      	mov	r0, r5
 801b018:	f7fc fba6 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801b01c:	ea04 0309 	and.w	r3, r4, r9
 801b020:	4607      	mov	r7, r0
 801b022:	2202      	movs	r2, #2
 801b024:	b2db      	uxtb	r3, r3
 801b026:	f106 010a 	add.w	r1, r6, #10
 801b02a:	4628      	mov	r0, r5
 801b02c:	ea03 0408 	and.w	r4, r3, r8
 801b030:	f7fc fb9a 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801b034:	4603      	mov	r3, r0
 801b036:	4628      	mov	r0, r5
 801b038:	403c      	ands	r4, r7
 801b03a:	f106 010c 	add.w	r1, r6, #12
 801b03e:	461d      	mov	r5, r3
 801b040:	f7f6 fe4a 	bl	8011cd8 <ucdr_deserialize_bool>
 801b044:	4025      	ands	r5, r4
 801b046:	4028      	ands	r0, r5
 801b048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b04c <uxr_deserialize_STATUS_Payload>:
 801b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b050:	2202      	movs	r2, #2
 801b052:	4606      	mov	r6, r0
 801b054:	460f      	mov	r7, r1
 801b056:	f7fc fb87 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801b05a:	2202      	movs	r2, #2
 801b05c:	4605      	mov	r5, r0
 801b05e:	4630      	mov	r0, r6
 801b060:	18b9      	adds	r1, r7, r2
 801b062:	f7fc fb81 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801b066:	4680      	mov	r8, r0
 801b068:	1d39      	adds	r1, r7, #4
 801b06a:	4630      	mov	r0, r6
 801b06c:	f7f6 fe62 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801b070:	ea05 0508 	and.w	r5, r5, r8
 801b074:	4604      	mov	r4, r0
 801b076:	1d79      	adds	r1, r7, #5
 801b078:	4630      	mov	r0, r6
 801b07a:	402c      	ands	r4, r5
 801b07c:	f7f6 fe5a 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801b080:	4020      	ands	r0, r4
 801b082:	b2c0      	uxtb	r0, r0
 801b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b088 <uxr_serialize_INFO_Payload>:
 801b088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b08c:	2202      	movs	r2, #2
 801b08e:	460c      	mov	r4, r1
 801b090:	4605      	mov	r5, r0
 801b092:	f7fc fb05 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b096:	2202      	movs	r2, #2
 801b098:	4680      	mov	r8, r0
 801b09a:	4628      	mov	r0, r5
 801b09c:	18a1      	adds	r1, r4, r2
 801b09e:	f7fc faff 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b0a2:	4607      	mov	r7, r0
 801b0a4:	7921      	ldrb	r1, [r4, #4]
 801b0a6:	4628      	mov	r0, r5
 801b0a8:	f7f6 fe2e 	bl	8011d08 <ucdr_serialize_uint8_t>
 801b0ac:	ea08 0807 	and.w	r8, r8, r7
 801b0b0:	4606      	mov	r6, r0
 801b0b2:	7961      	ldrb	r1, [r4, #5]
 801b0b4:	4628      	mov	r0, r5
 801b0b6:	ea06 0608 	and.w	r6, r6, r8
 801b0ba:	f7f6 fe25 	bl	8011d08 <ucdr_serialize_uint8_t>
 801b0be:	7a21      	ldrb	r1, [r4, #8]
 801b0c0:	4030      	ands	r0, r6
 801b0c2:	b2c7      	uxtb	r7, r0
 801b0c4:	4628      	mov	r0, r5
 801b0c6:	f7f6 fdf1 	bl	8011cac <ucdr_serialize_bool>
 801b0ca:	7a23      	ldrb	r3, [r4, #8]
 801b0cc:	4606      	mov	r6, r0
 801b0ce:	b96b      	cbnz	r3, 801b0ec <uxr_serialize_INFO_Payload+0x64>
 801b0d0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801b0d4:	4628      	mov	r0, r5
 801b0d6:	f7f6 fde9 	bl	8011cac <ucdr_serialize_bool>
 801b0da:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801b0de:	4030      	ands	r0, r6
 801b0e0:	b2c6      	uxtb	r6, r0
 801b0e2:	b983      	cbnz	r3, 801b106 <uxr_serialize_INFO_Payload+0x7e>
 801b0e4:	ea06 0007 	and.w	r0, r6, r7
 801b0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0ec:	7b21      	ldrb	r1, [r4, #12]
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	f7f6 fe0a 	bl	8011d08 <ucdr_serialize_uint8_t>
 801b0f4:	b188      	cbz	r0, 801b11a <uxr_serialize_INFO_Payload+0x92>
 801b0f6:	f104 010c 	add.w	r1, r4, #12
 801b0fa:	4628      	mov	r0, r5
 801b0fc:	f7ff f9d8 	bl	801a4b0 <uxr_serialize_ObjectVariant.part.0>
 801b100:	4030      	ands	r0, r6
 801b102:	b2c6      	uxtb	r6, r0
 801b104:	e7e4      	b.n	801b0d0 <uxr_serialize_INFO_Payload+0x48>
 801b106:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801b10a:	4628      	mov	r0, r5
 801b10c:	f7ff fdb8 	bl	801ac80 <uxr_serialize_ActivityInfoVariant>
 801b110:	4006      	ands	r6, r0
 801b112:	ea06 0007 	and.w	r0, r6, r7
 801b116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b11a:	4606      	mov	r6, r0
 801b11c:	e7d8      	b.n	801b0d0 <uxr_serialize_INFO_Payload+0x48>
 801b11e:	bf00      	nop

0801b120 <uxr_serialize_READ_DATA_Payload>:
 801b120:	b570      	push	{r4, r5, r6, lr}
 801b122:	2202      	movs	r2, #2
 801b124:	4605      	mov	r5, r0
 801b126:	460e      	mov	r6, r1
 801b128:	f7fc faba 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b12c:	2202      	movs	r2, #2
 801b12e:	4604      	mov	r4, r0
 801b130:	4628      	mov	r0, r5
 801b132:	18b1      	adds	r1, r6, r2
 801b134:	f7fc fab4 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b138:	4603      	mov	r3, r0
 801b13a:	1d31      	adds	r1, r6, #4
 801b13c:	4628      	mov	r0, r5
 801b13e:	401c      	ands	r4, r3
 801b140:	f7ff fe5e 	bl	801ae00 <uxr_serialize_ReadSpecification>
 801b144:	b2e4      	uxtb	r4, r4
 801b146:	4020      	ands	r0, r4
 801b148:	bd70      	pop	{r4, r5, r6, pc}
 801b14a:	bf00      	nop

0801b14c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b14c:	b570      	push	{r4, r5, r6, lr}
 801b14e:	2202      	movs	r2, #2
 801b150:	4605      	mov	r5, r0
 801b152:	460e      	mov	r6, r1
 801b154:	f7fc faa4 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b158:	2202      	movs	r2, #2
 801b15a:	4604      	mov	r4, r0
 801b15c:	4628      	mov	r0, r5
 801b15e:	18b1      	adds	r1, r6, r2
 801b160:	f7fc fa9e 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b164:	4020      	ands	r0, r4
 801b166:	b2c0      	uxtb	r0, r0
 801b168:	bd70      	pop	{r4, r5, r6, pc}
 801b16a:	bf00      	nop

0801b16c <uxr_serialize_ACKNACK_Payload>:
 801b16c:	b570      	push	{r4, r5, r6, lr}
 801b16e:	460c      	mov	r4, r1
 801b170:	4605      	mov	r5, r0
 801b172:	460e      	mov	r6, r1
 801b174:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b178:	f7f6 fdf2 	bl	8011d60 <ucdr_serialize_uint16_t>
 801b17c:	2202      	movs	r2, #2
 801b17e:	4621      	mov	r1, r4
 801b180:	4604      	mov	r4, r0
 801b182:	4628      	mov	r0, r5
 801b184:	f7fc fa8c 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b188:	4603      	mov	r3, r0
 801b18a:	7931      	ldrb	r1, [r6, #4]
 801b18c:	4628      	mov	r0, r5
 801b18e:	401c      	ands	r4, r3
 801b190:	f7f6 fdba 	bl	8011d08 <ucdr_serialize_uint8_t>
 801b194:	b2e4      	uxtb	r4, r4
 801b196:	4020      	ands	r0, r4
 801b198:	bd70      	pop	{r4, r5, r6, pc}
 801b19a:	bf00      	nop

0801b19c <uxr_deserialize_ACKNACK_Payload>:
 801b19c:	b570      	push	{r4, r5, r6, lr}
 801b19e:	460e      	mov	r6, r1
 801b1a0:	4605      	mov	r5, r0
 801b1a2:	f7f6 fedd 	bl	8011f60 <ucdr_deserialize_uint16_t>
 801b1a6:	2202      	movs	r2, #2
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	4628      	mov	r0, r5
 801b1ac:	18b1      	adds	r1, r6, r2
 801b1ae:	f7fc fadb 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	1d31      	adds	r1, r6, #4
 801b1b6:	4628      	mov	r0, r5
 801b1b8:	401c      	ands	r4, r3
 801b1ba:	f7f6 fdbb 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801b1be:	b2e4      	uxtb	r4, r4
 801b1c0:	4020      	ands	r0, r4
 801b1c2:	bd70      	pop	{r4, r5, r6, pc}

0801b1c4 <uxr_serialize_HEARTBEAT_Payload>:
 801b1c4:	b570      	push	{r4, r5, r6, lr}
 801b1c6:	460d      	mov	r5, r1
 801b1c8:	4606      	mov	r6, r0
 801b1ca:	8809      	ldrh	r1, [r1, #0]
 801b1cc:	f7f6 fdc8 	bl	8011d60 <ucdr_serialize_uint16_t>
 801b1d0:	8869      	ldrh	r1, [r5, #2]
 801b1d2:	4604      	mov	r4, r0
 801b1d4:	4630      	mov	r0, r6
 801b1d6:	f7f6 fdc3 	bl	8011d60 <ucdr_serialize_uint16_t>
 801b1da:	4603      	mov	r3, r0
 801b1dc:	7929      	ldrb	r1, [r5, #4]
 801b1de:	4630      	mov	r0, r6
 801b1e0:	401c      	ands	r4, r3
 801b1e2:	f7f6 fd91 	bl	8011d08 <ucdr_serialize_uint8_t>
 801b1e6:	b2e4      	uxtb	r4, r4
 801b1e8:	4020      	ands	r0, r4
 801b1ea:	bd70      	pop	{r4, r5, r6, pc}

0801b1ec <uxr_deserialize_HEARTBEAT_Payload>:
 801b1ec:	b570      	push	{r4, r5, r6, lr}
 801b1ee:	460e      	mov	r6, r1
 801b1f0:	4605      	mov	r5, r0
 801b1f2:	f7f6 feb5 	bl	8011f60 <ucdr_deserialize_uint16_t>
 801b1f6:	4604      	mov	r4, r0
 801b1f8:	1cb1      	adds	r1, r6, #2
 801b1fa:	4628      	mov	r0, r5
 801b1fc:	f7f6 feb0 	bl	8011f60 <ucdr_deserialize_uint16_t>
 801b200:	4603      	mov	r3, r0
 801b202:	1d31      	adds	r1, r6, #4
 801b204:	4628      	mov	r0, r5
 801b206:	401c      	ands	r4, r3
 801b208:	f7f6 fd94 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801b20c:	b2e4      	uxtb	r4, r4
 801b20e:	4020      	ands	r0, r4
 801b210:	bd70      	pop	{r4, r5, r6, pc}
 801b212:	bf00      	nop

0801b214 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b218:	460e      	mov	r6, r1
 801b21a:	4605      	mov	r5, r0
 801b21c:	f7f7 fc3c 	bl	8012a98 <ucdr_deserialize_int32_t>
 801b220:	4607      	mov	r7, r0
 801b222:	1d31      	adds	r1, r6, #4
 801b224:	4628      	mov	r0, r5
 801b226:	f7f7 f8b5 	bl	8012394 <ucdr_deserialize_uint32_t>
 801b22a:	4680      	mov	r8, r0
 801b22c:	f106 0108 	add.w	r1, r6, #8
 801b230:	4628      	mov	r0, r5
 801b232:	f7f7 fc31 	bl	8012a98 <ucdr_deserialize_int32_t>
 801b236:	ea07 0708 	and.w	r7, r7, r8
 801b23a:	4604      	mov	r4, r0
 801b23c:	f106 010c 	add.w	r1, r6, #12
 801b240:	4628      	mov	r0, r5
 801b242:	403c      	ands	r4, r7
 801b244:	f7f7 f8a6 	bl	8012394 <ucdr_deserialize_uint32_t>
 801b248:	f106 0110 	add.w	r1, r6, #16
 801b24c:	4004      	ands	r4, r0
 801b24e:	4628      	mov	r0, r5
 801b250:	f7f7 fc22 	bl	8012a98 <ucdr_deserialize_int32_t>
 801b254:	4603      	mov	r3, r0
 801b256:	b2e4      	uxtb	r4, r4
 801b258:	4628      	mov	r0, r5
 801b25a:	461d      	mov	r5, r3
 801b25c:	f106 0114 	add.w	r1, r6, #20
 801b260:	f7f7 f898 	bl	8012394 <ucdr_deserialize_uint32_t>
 801b264:	402c      	ands	r4, r5
 801b266:	4020      	ands	r0, r4
 801b268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b26c <uxr_serialize_SampleIdentity>:
 801b26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b270:	4604      	mov	r4, r0
 801b272:	460d      	mov	r5, r1
 801b274:	220c      	movs	r2, #12
 801b276:	f7fc fa13 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b27a:	2203      	movs	r2, #3
 801b27c:	f105 010c 	add.w	r1, r5, #12
 801b280:	4607      	mov	r7, r0
 801b282:	4620      	mov	r0, r4
 801b284:	f7fc fa0c 	bl	80176a0 <ucdr_serialize_array_uint8_t>
 801b288:	7be9      	ldrb	r1, [r5, #15]
 801b28a:	4680      	mov	r8, r0
 801b28c:	4620      	mov	r0, r4
 801b28e:	f7f6 fd3b 	bl	8011d08 <ucdr_serialize_uint8_t>
 801b292:	6929      	ldr	r1, [r5, #16]
 801b294:	4606      	mov	r6, r0
 801b296:	4620      	mov	r0, r4
 801b298:	f7f7 fb66 	bl	8012968 <ucdr_serialize_int32_t>
 801b29c:	ea07 0708 	and.w	r7, r7, r8
 801b2a0:	4603      	mov	r3, r0
 801b2a2:	4620      	mov	r0, r4
 801b2a4:	403e      	ands	r6, r7
 801b2a6:	6969      	ldr	r1, [r5, #20]
 801b2a8:	461c      	mov	r4, r3
 801b2aa:	f7f6 ff43 	bl	8012134 <ucdr_serialize_uint32_t>
 801b2ae:	4034      	ands	r4, r6
 801b2b0:	4020      	ands	r0, r4
 801b2b2:	b2c0      	uxtb	r0, r0
 801b2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b2b8 <uxr_deserialize_SampleIdentity>:
 801b2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2bc:	4604      	mov	r4, r0
 801b2be:	460d      	mov	r5, r1
 801b2c0:	220c      	movs	r2, #12
 801b2c2:	f7fc fa51 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801b2c6:	2203      	movs	r2, #3
 801b2c8:	f105 010c 	add.w	r1, r5, #12
 801b2cc:	4607      	mov	r7, r0
 801b2ce:	4620      	mov	r0, r4
 801b2d0:	f7fc fa4a 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801b2d4:	f105 010f 	add.w	r1, r5, #15
 801b2d8:	4680      	mov	r8, r0
 801b2da:	4620      	mov	r0, r4
 801b2dc:	f7f6 fd2a 	bl	8011d34 <ucdr_deserialize_uint8_t>
 801b2e0:	f105 0110 	add.w	r1, r5, #16
 801b2e4:	4606      	mov	r6, r0
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	f7f7 fbd6 	bl	8012a98 <ucdr_deserialize_int32_t>
 801b2ec:	ea07 0708 	and.w	r7, r7, r8
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	4620      	mov	r0, r4
 801b2f4:	403e      	ands	r6, r7
 801b2f6:	f105 0114 	add.w	r1, r5, #20
 801b2fa:	461c      	mov	r4, r3
 801b2fc:	f7f7 f84a 	bl	8012394 <ucdr_deserialize_uint32_t>
 801b300:	4034      	ands	r4, r6
 801b302:	4020      	ands	r0, r4
 801b304:	b2c0      	uxtb	r0, r0
 801b306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b30a:	bf00      	nop

0801b30c <rcl_client_get_rmw_handle>:
 801b30c:	b118      	cbz	r0, 801b316 <rcl_client_get_rmw_handle+0xa>
 801b30e:	6800      	ldr	r0, [r0, #0]
 801b310:	b108      	cbz	r0, 801b316 <rcl_client_get_rmw_handle+0xa>
 801b312:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b316:	4770      	bx	lr

0801b318 <rcl_send_request>:
 801b318:	b570      	push	{r4, r5, r6, lr}
 801b31a:	b082      	sub	sp, #8
 801b31c:	b1f8      	cbz	r0, 801b35e <rcl_send_request+0x46>
 801b31e:	4604      	mov	r4, r0
 801b320:	6800      	ldr	r0, [r0, #0]
 801b322:	b1e0      	cbz	r0, 801b35e <rcl_send_request+0x46>
 801b324:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801b328:	b1cb      	cbz	r3, 801b35e <rcl_send_request+0x46>
 801b32a:	460e      	mov	r6, r1
 801b32c:	b1e1      	cbz	r1, 801b368 <rcl_send_request+0x50>
 801b32e:	4615      	mov	r5, r2
 801b330:	b1d2      	cbz	r2, 801b368 <rcl_send_request+0x50>
 801b332:	2105      	movs	r1, #5
 801b334:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b338:	f002 fa2e 	bl	801d798 <__atomic_load_8>
 801b33c:	4602      	mov	r2, r0
 801b33e:	460b      	mov	r3, r1
 801b340:	4631      	mov	r1, r6
 801b342:	e9c5 2300 	strd	r2, r3, [r5]
 801b346:	6823      	ldr	r3, [r4, #0]
 801b348:	462a      	mov	r2, r5
 801b34a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b34e:	f7fa fefb 	bl	8016148 <rmw_send_request>
 801b352:	4606      	mov	r6, r0
 801b354:	b160      	cbz	r0, 801b370 <rcl_send_request+0x58>
 801b356:	2601      	movs	r6, #1
 801b358:	4630      	mov	r0, r6
 801b35a:	b002      	add	sp, #8
 801b35c:	bd70      	pop	{r4, r5, r6, pc}
 801b35e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801b362:	4630      	mov	r0, r6
 801b364:	b002      	add	sp, #8
 801b366:	bd70      	pop	{r4, r5, r6, pc}
 801b368:	260b      	movs	r6, #11
 801b36a:	4630      	mov	r0, r6
 801b36c:	b002      	add	sp, #8
 801b36e:	bd70      	pop	{r4, r5, r6, pc}
 801b370:	6820      	ldr	r0, [r4, #0]
 801b372:	2105      	movs	r1, #5
 801b374:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b378:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b37c:	9100      	str	r1, [sp, #0]
 801b37e:	f002 fa77 	bl	801d870 <__atomic_exchange_8>
 801b382:	4630      	mov	r0, r6
 801b384:	b002      	add	sp, #8
 801b386:	bd70      	pop	{r4, r5, r6, pc}

0801b388 <rcl_take_response>:
 801b388:	b570      	push	{r4, r5, r6, lr}
 801b38a:	468e      	mov	lr, r1
 801b38c:	b08c      	sub	sp, #48	; 0x30
 801b38e:	460c      	mov	r4, r1
 801b390:	4616      	mov	r6, r2
 801b392:	f10d 0c18 	add.w	ip, sp, #24
 801b396:	4605      	mov	r5, r0
 801b398:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b39c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b3a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b3a8:	b35d      	cbz	r5, 801b402 <rcl_take_response+0x7a>
 801b3aa:	682b      	ldr	r3, [r5, #0]
 801b3ac:	b34b      	cbz	r3, 801b402 <rcl_take_response+0x7a>
 801b3ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b3b2:	b330      	cbz	r0, 801b402 <rcl_take_response+0x7a>
 801b3b4:	b346      	cbz	r6, 801b408 <rcl_take_response+0x80>
 801b3b6:	2300      	movs	r3, #0
 801b3b8:	4632      	mov	r2, r6
 801b3ba:	a902      	add	r1, sp, #8
 801b3bc:	f88d 3007 	strb.w	r3, [sp, #7]
 801b3c0:	f10d 0307 	add.w	r3, sp, #7
 801b3c4:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801b410 <rcl_take_response+0x88>
 801b3c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b3cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b3d0:	f7fa ffc2 	bl	8016358 <rmw_take_response>
 801b3d4:	4605      	mov	r5, r0
 801b3d6:	b9c8      	cbnz	r0, 801b40c <rcl_take_response+0x84>
 801b3d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b3dc:	f240 13f5 	movw	r3, #501	; 0x1f5
 801b3e0:	2a00      	cmp	r2, #0
 801b3e2:	bf08      	it	eq
 801b3e4:	461d      	moveq	r5, r3
 801b3e6:	f10d 0e18 	add.w	lr, sp, #24
 801b3ea:	46a4      	mov	ip, r4
 801b3ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b3f8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b3fc:	4628      	mov	r0, r5
 801b3fe:	b00c      	add	sp, #48	; 0x30
 801b400:	bd70      	pop	{r4, r5, r6, pc}
 801b402:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801b406:	e7ee      	b.n	801b3e6 <rcl_take_response+0x5e>
 801b408:	250b      	movs	r5, #11
 801b40a:	e7ec      	b.n	801b3e6 <rcl_take_response+0x5e>
 801b40c:	2501      	movs	r5, #1
 801b40e:	e7ea      	b.n	801b3e6 <rcl_take_response+0x5e>
	...

0801b418 <rcl_client_is_valid>:
 801b418:	b130      	cbz	r0, 801b428 <rcl_client_is_valid+0x10>
 801b41a:	6800      	ldr	r0, [r0, #0]
 801b41c:	b120      	cbz	r0, 801b428 <rcl_client_is_valid+0x10>
 801b41e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b422:	3800      	subs	r0, #0
 801b424:	bf18      	it	ne
 801b426:	2001      	movne	r0, #1
 801b428:	4770      	bx	lr
 801b42a:	bf00      	nop

0801b42c <rcl_convert_rmw_ret_to_rcl_ret>:
 801b42c:	280b      	cmp	r0, #11
 801b42e:	dc0d      	bgt.n	801b44c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b430:	2800      	cmp	r0, #0
 801b432:	db09      	blt.n	801b448 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b434:	280b      	cmp	r0, #11
 801b436:	d807      	bhi.n	801b448 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b438:	e8df f000 	tbb	[pc, r0]
 801b43c:	07060607 	.word	0x07060607
 801b440:	06060606 	.word	0x06060606
 801b444:	07070606 	.word	0x07070606
 801b448:	2001      	movs	r0, #1
 801b44a:	4770      	bx	lr
 801b44c:	28cb      	cmp	r0, #203	; 0xcb
 801b44e:	bf18      	it	ne
 801b450:	2001      	movne	r0, #1
 801b452:	4770      	bx	lr

0801b454 <rcl_get_zero_initialized_context>:
 801b454:	4a03      	ldr	r2, [pc, #12]	; (801b464 <rcl_get_zero_initialized_context+0x10>)
 801b456:	4603      	mov	r3, r0
 801b458:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b45c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b460:	4618      	mov	r0, r3
 801b462:	4770      	bx	lr
 801b464:	080258ac 	.word	0x080258ac

0801b468 <rcl_context_is_valid>:
 801b468:	b118      	cbz	r0, 801b472 <rcl_context_is_valid+0xa>
 801b46a:	6840      	ldr	r0, [r0, #4]
 801b46c:	3800      	subs	r0, #0
 801b46e:	bf18      	it	ne
 801b470:	2001      	movne	r0, #1
 801b472:	4770      	bx	lr

0801b474 <__cleanup_context>:
 801b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b478:	4606      	mov	r6, r0
 801b47a:	2300      	movs	r3, #0
 801b47c:	6800      	ldr	r0, [r0, #0]
 801b47e:	6073      	str	r3, [r6, #4]
 801b480:	2800      	cmp	r0, #0
 801b482:	d049      	beq.n	801b518 <__cleanup_context+0xa4>
 801b484:	6947      	ldr	r7, [r0, #20]
 801b486:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b48a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801b48e:	b137      	cbz	r7, 801b49e <__cleanup_context+0x2a>
 801b490:	3014      	adds	r0, #20
 801b492:	f7f8 f845 	bl	8013520 <rcl_init_options_fini>
 801b496:	4607      	mov	r7, r0
 801b498:	2800      	cmp	r0, #0
 801b49a:	d144      	bne.n	801b526 <__cleanup_context+0xb2>
 801b49c:	6830      	ldr	r0, [r6, #0]
 801b49e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b4a0:	b143      	cbz	r3, 801b4b4 <__cleanup_context+0x40>
 801b4a2:	3028      	adds	r0, #40	; 0x28
 801b4a4:	f7fa fb58 	bl	8015b58 <rmw_context_fini>
 801b4a8:	b118      	cbz	r0, 801b4b2 <__cleanup_context+0x3e>
 801b4aa:	2f00      	cmp	r7, #0
 801b4ac:	d03e      	beq.n	801b52c <__cleanup_context+0xb8>
 801b4ae:	f7f9 fe17 	bl	80150e0 <rcutils_reset_error>
 801b4b2:	6830      	ldr	r0, [r6, #0]
 801b4b4:	6a03      	ldr	r3, [r0, #32]
 801b4b6:	b1db      	cbz	r3, 801b4f0 <__cleanup_context+0x7c>
 801b4b8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801b4bc:	2a01      	cmp	r2, #1
 801b4be:	f17c 0100 	sbcs.w	r1, ip, #0
 801b4c2:	db11      	blt.n	801b4e8 <__cleanup_context+0x74>
 801b4c4:	2400      	movs	r4, #0
 801b4c6:	4625      	mov	r5, r4
 801b4c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b4cc:	4649      	mov	r1, r9
 801b4ce:	b1b8      	cbz	r0, 801b500 <__cleanup_context+0x8c>
 801b4d0:	47c0      	blx	r8
 801b4d2:	6833      	ldr	r3, [r6, #0]
 801b4d4:	3401      	adds	r4, #1
 801b4d6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801b4da:	f145 0500 	adc.w	r5, r5, #0
 801b4de:	6a1b      	ldr	r3, [r3, #32]
 801b4e0:	4294      	cmp	r4, r2
 801b4e2:	eb75 010c 	sbcs.w	r1, r5, ip
 801b4e6:	dbef      	blt.n	801b4c8 <__cleanup_context+0x54>
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	4649      	mov	r1, r9
 801b4ec:	47c0      	blx	r8
 801b4ee:	6830      	ldr	r0, [r6, #0]
 801b4f0:	4649      	mov	r1, r9
 801b4f2:	47c0      	blx	r8
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	4638      	mov	r0, r7
 801b4f8:	e9c6 3300 	strd	r3, r3, [r6]
 801b4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b500:	3401      	adds	r4, #1
 801b502:	f145 0500 	adc.w	r5, r5, #0
 801b506:	4294      	cmp	r4, r2
 801b508:	eb75 010c 	sbcs.w	r1, r5, ip
 801b50c:	dbdc      	blt.n	801b4c8 <__cleanup_context+0x54>
 801b50e:	4618      	mov	r0, r3
 801b510:	4649      	mov	r1, r9
 801b512:	47c0      	blx	r8
 801b514:	6830      	ldr	r0, [r6, #0]
 801b516:	e7eb      	b.n	801b4f0 <__cleanup_context+0x7c>
 801b518:	4607      	mov	r7, r0
 801b51a:	2300      	movs	r3, #0
 801b51c:	4638      	mov	r0, r7
 801b51e:	e9c6 3300 	strd	r3, r3, [r6]
 801b522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b526:	f7f9 fddb 	bl	80150e0 <rcutils_reset_error>
 801b52a:	e7b7      	b.n	801b49c <__cleanup_context+0x28>
 801b52c:	f7ff ff7e 	bl	801b42c <rcl_convert_rmw_ret_to_rcl_ret>
 801b530:	4607      	mov	r7, r0
 801b532:	e7bc      	b.n	801b4ae <__cleanup_context+0x3a>

0801b534 <rcl_get_zero_initialized_guard_condition>:
 801b534:	4a03      	ldr	r2, [pc, #12]	; (801b544 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b536:	4603      	mov	r3, r0
 801b538:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b53c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b540:	4618      	mov	r0, r3
 801b542:	4770      	bx	lr
 801b544:	080258b4 	.word	0x080258b4

0801b548 <rcl_guard_condition_init_from_rmw>:
 801b548:	b082      	sub	sp, #8
 801b54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b54e:	b086      	sub	sp, #24
 801b550:	4604      	mov	r4, r0
 801b552:	460e      	mov	r6, r1
 801b554:	4615      	mov	r5, r2
 801b556:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b55a:	f10d 0e04 	add.w	lr, sp, #4
 801b55e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b562:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b566:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b56a:	f8dc 3000 	ldr.w	r3, [ip]
 801b56e:	a801      	add	r0, sp, #4
 801b570:	f8ce 3000 	str.w	r3, [lr]
 801b574:	f7f9 fd76 	bl	8015064 <rcutils_allocator_is_valid>
 801b578:	f080 0301 	eor.w	r3, r0, #1
 801b57c:	b2db      	uxtb	r3, r3
 801b57e:	bb3b      	cbnz	r3, 801b5d0 <rcl_guard_condition_init_from_rmw+0x88>
 801b580:	b334      	cbz	r4, 801b5d0 <rcl_guard_condition_init_from_rmw+0x88>
 801b582:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b586:	f1b8 0f00 	cmp.w	r8, #0
 801b58a:	d11a      	bne.n	801b5c2 <rcl_guard_condition_init_from_rmw+0x7a>
 801b58c:	b305      	cbz	r5, 801b5d0 <rcl_guard_condition_init_from_rmw+0x88>
 801b58e:	4628      	mov	r0, r5
 801b590:	f7ff ff6a 	bl	801b468 <rcl_context_is_valid>
 801b594:	b1f0      	cbz	r0, 801b5d4 <rcl_guard_condition_init_from_rmw+0x8c>
 801b596:	9b01      	ldr	r3, [sp, #4]
 801b598:	201c      	movs	r0, #28
 801b59a:	9905      	ldr	r1, [sp, #20]
 801b59c:	4798      	blx	r3
 801b59e:	4607      	mov	r7, r0
 801b5a0:	6060      	str	r0, [r4, #4]
 801b5a2:	b320      	cbz	r0, 801b5ee <rcl_guard_condition_init_from_rmw+0xa6>
 801b5a4:	b1c6      	cbz	r6, 801b5d8 <rcl_guard_condition_init_from_rmw+0x90>
 801b5a6:	6006      	str	r6, [r0, #0]
 801b5a8:	f880 8004 	strb.w	r8, [r0, #4]
 801b5ac:	ac01      	add	r4, sp, #4
 801b5ae:	f107 0c08 	add.w	ip, r7, #8
 801b5b2:	2500      	movs	r5, #0
 801b5b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b5b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b5ba:	6823      	ldr	r3, [r4, #0]
 801b5bc:	f8cc 3000 	str.w	r3, [ip]
 801b5c0:	e000      	b.n	801b5c4 <rcl_guard_condition_init_from_rmw+0x7c>
 801b5c2:	2564      	movs	r5, #100	; 0x64
 801b5c4:	4628      	mov	r0, r5
 801b5c6:	b006      	add	sp, #24
 801b5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5cc:	b002      	add	sp, #8
 801b5ce:	4770      	bx	lr
 801b5d0:	250b      	movs	r5, #11
 801b5d2:	e7f7      	b.n	801b5c4 <rcl_guard_condition_init_from_rmw+0x7c>
 801b5d4:	2565      	movs	r5, #101	; 0x65
 801b5d6:	e7f5      	b.n	801b5c4 <rcl_guard_condition_init_from_rmw+0x7c>
 801b5d8:	6828      	ldr	r0, [r5, #0]
 801b5da:	3028      	adds	r0, #40	; 0x28
 801b5dc:	f002 fd56 	bl	801e08c <rmw_create_guard_condition>
 801b5e0:	6038      	str	r0, [r7, #0]
 801b5e2:	6867      	ldr	r7, [r4, #4]
 801b5e4:	683e      	ldr	r6, [r7, #0]
 801b5e6:	b126      	cbz	r6, 801b5f2 <rcl_guard_condition_init_from_rmw+0xaa>
 801b5e8:	2301      	movs	r3, #1
 801b5ea:	713b      	strb	r3, [r7, #4]
 801b5ec:	e7de      	b.n	801b5ac <rcl_guard_condition_init_from_rmw+0x64>
 801b5ee:	250a      	movs	r5, #10
 801b5f0:	e7e8      	b.n	801b5c4 <rcl_guard_condition_init_from_rmw+0x7c>
 801b5f2:	9b02      	ldr	r3, [sp, #8]
 801b5f4:	4638      	mov	r0, r7
 801b5f6:	9905      	ldr	r1, [sp, #20]
 801b5f8:	2501      	movs	r5, #1
 801b5fa:	4798      	blx	r3
 801b5fc:	6066      	str	r6, [r4, #4]
 801b5fe:	e7e1      	b.n	801b5c4 <rcl_guard_condition_init_from_rmw+0x7c>

0801b600 <rcl_guard_condition_fini>:
 801b600:	b570      	push	{r4, r5, r6, lr}
 801b602:	b082      	sub	sp, #8
 801b604:	b1f0      	cbz	r0, 801b644 <rcl_guard_condition_fini+0x44>
 801b606:	6843      	ldr	r3, [r0, #4]
 801b608:	4604      	mov	r4, r0
 801b60a:	b163      	cbz	r3, 801b626 <rcl_guard_condition_fini+0x26>
 801b60c:	6818      	ldr	r0, [r3, #0]
 801b60e:	68de      	ldr	r6, [r3, #12]
 801b610:	6999      	ldr	r1, [r3, #24]
 801b612:	b160      	cbz	r0, 801b62e <rcl_guard_condition_fini+0x2e>
 801b614:	791d      	ldrb	r5, [r3, #4]
 801b616:	b965      	cbnz	r5, 801b632 <rcl_guard_condition_fini+0x32>
 801b618:	4618      	mov	r0, r3
 801b61a:	47b0      	blx	r6
 801b61c:	2300      	movs	r3, #0
 801b61e:	4628      	mov	r0, r5
 801b620:	6063      	str	r3, [r4, #4]
 801b622:	b002      	add	sp, #8
 801b624:	bd70      	pop	{r4, r5, r6, pc}
 801b626:	461d      	mov	r5, r3
 801b628:	4628      	mov	r0, r5
 801b62a:	b002      	add	sp, #8
 801b62c:	bd70      	pop	{r4, r5, r6, pc}
 801b62e:	4605      	mov	r5, r0
 801b630:	e7f2      	b.n	801b618 <rcl_guard_condition_fini+0x18>
 801b632:	9101      	str	r1, [sp, #4]
 801b634:	f002 fd40 	bl	801e0b8 <rmw_destroy_guard_condition>
 801b638:	1e05      	subs	r5, r0, #0
 801b63a:	6863      	ldr	r3, [r4, #4]
 801b63c:	9901      	ldr	r1, [sp, #4]
 801b63e:	bf18      	it	ne
 801b640:	2501      	movne	r5, #1
 801b642:	e7e9      	b.n	801b618 <rcl_guard_condition_fini+0x18>
 801b644:	250b      	movs	r5, #11
 801b646:	4628      	mov	r0, r5
 801b648:	b002      	add	sp, #8
 801b64a:	bd70      	pop	{r4, r5, r6, pc}

0801b64c <rcl_guard_condition_get_default_options>:
 801b64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b64e:	b087      	sub	sp, #28
 801b650:	4606      	mov	r6, r0
 801b652:	4c0b      	ldr	r4, [pc, #44]	; (801b680 <rcl_guard_condition_get_default_options+0x34>)
 801b654:	4668      	mov	r0, sp
 801b656:	f7f9 fcf7 	bl	8015048 <rcutils_get_default_allocator>
 801b65a:	46ee      	mov	lr, sp
 801b65c:	46a4      	mov	ip, r4
 801b65e:	4625      	mov	r5, r4
 801b660:	4634      	mov	r4, r6
 801b662:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b666:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b66a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b66c:	f8de 7000 	ldr.w	r7, [lr]
 801b670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b672:	4630      	mov	r0, r6
 801b674:	f8cc 7000 	str.w	r7, [ip]
 801b678:	6027      	str	r7, [r4, #0]
 801b67a:	b007      	add	sp, #28
 801b67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b67e:	bf00      	nop
 801b680:	20016f90 	.word	0x20016f90

0801b684 <rcl_guard_condition_get_rmw_handle>:
 801b684:	b110      	cbz	r0, 801b68c <rcl_guard_condition_get_rmw_handle+0x8>
 801b686:	6840      	ldr	r0, [r0, #4]
 801b688:	b100      	cbz	r0, 801b68c <rcl_guard_condition_get_rmw_handle+0x8>
 801b68a:	6800      	ldr	r0, [r0, #0]
 801b68c:	4770      	bx	lr
 801b68e:	bf00      	nop

0801b690 <rcl_init>:
 801b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b694:	1e05      	subs	r5, r0, #0
 801b696:	b09e      	sub	sp, #120	; 0x78
 801b698:	460e      	mov	r6, r1
 801b69a:	4690      	mov	r8, r2
 801b69c:	461f      	mov	r7, r3
 801b69e:	f340 809f 	ble.w	801b7e0 <rcl_init+0x150>
 801b6a2:	2900      	cmp	r1, #0
 801b6a4:	f000 809f 	beq.w	801b7e6 <rcl_init+0x156>
 801b6a8:	f1a1 0e04 	sub.w	lr, r1, #4
 801b6ac:	f04f 0c00 	mov.w	ip, #0
 801b6b0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801b6b4:	f10c 0c01 	add.w	ip, ip, #1
 801b6b8:	2c00      	cmp	r4, #0
 801b6ba:	f000 8094 	beq.w	801b7e6 <rcl_init+0x156>
 801b6be:	4565      	cmp	r5, ip
 801b6c0:	d1f6      	bne.n	801b6b0 <rcl_init+0x20>
 801b6c2:	f1b8 0f00 	cmp.w	r8, #0
 801b6c6:	f000 808e 	beq.w	801b7e6 <rcl_init+0x156>
 801b6ca:	f8d8 4000 	ldr.w	r4, [r8]
 801b6ce:	2c00      	cmp	r4, #0
 801b6d0:	f000 8089 	beq.w	801b7e6 <rcl_init+0x156>
 801b6d4:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801b6d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b6da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b6de:	6823      	ldr	r3, [r4, #0]
 801b6e0:	a819      	add	r0, sp, #100	; 0x64
 801b6e2:	f8cc 3000 	str.w	r3, [ip]
 801b6e6:	f7f9 fcbd 	bl	8015064 <rcutils_allocator_is_valid>
 801b6ea:	f080 0001 	eor.w	r0, r0, #1
 801b6ee:	b2c0      	uxtb	r0, r0
 801b6f0:	2800      	cmp	r0, #0
 801b6f2:	d178      	bne.n	801b7e6 <rcl_init+0x156>
 801b6f4:	2f00      	cmp	r7, #0
 801b6f6:	d076      	beq.n	801b7e6 <rcl_init+0x156>
 801b6f8:	683b      	ldr	r3, [r7, #0]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d178      	bne.n	801b7f0 <rcl_init+0x160>
 801b6fe:	2178      	movs	r1, #120	; 0x78
 801b700:	2001      	movs	r0, #1
 801b702:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b706:	4798      	blx	r3
 801b708:	4604      	mov	r4, r0
 801b70a:	6038      	str	r0, [r7, #0]
 801b70c:	2800      	cmp	r0, #0
 801b70e:	f000 80b6 	beq.w	801b87e <rcl_init+0x1ee>
 801b712:	a802      	add	r0, sp, #8
 801b714:	f002 fa4c 	bl	801dbb0 <rmw_get_zero_initialized_context>
 801b718:	a902      	add	r1, sp, #8
 801b71a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801b71e:	2250      	movs	r2, #80	; 0x50
 801b720:	f005 fc01 	bl	8020f26 <memcpy>
 801b724:	ac19      	add	r4, sp, #100	; 0x64
 801b726:	f8d7 e000 	ldr.w	lr, [r7]
 801b72a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b72c:	46f4      	mov	ip, lr
 801b72e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b732:	6823      	ldr	r3, [r4, #0]
 801b734:	f10e 0114 	add.w	r1, lr, #20
 801b738:	4640      	mov	r0, r8
 801b73a:	f8cc 3000 	str.w	r3, [ip]
 801b73e:	f7f7 ff19 	bl	8013574 <rcl_init_options_copy>
 801b742:	4604      	mov	r4, r0
 801b744:	2800      	cmp	r0, #0
 801b746:	d144      	bne.n	801b7d2 <rcl_init+0x142>
 801b748:	f8d7 9000 	ldr.w	r9, [r7]
 801b74c:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801b750:	f8c9 0020 	str.w	r0, [r9, #32]
 801b754:	f8c9 5018 	str.w	r5, [r9, #24]
 801b758:	f8c9 801c 	str.w	r8, [r9, #28]
 801b75c:	2d00      	cmp	r5, #0
 801b75e:	d04e      	beq.n	801b7fe <rcl_init+0x16e>
 801b760:	2e00      	cmp	r6, #0
 801b762:	d04c      	beq.n	801b7fe <rcl_init+0x16e>
 801b764:	2104      	movs	r1, #4
 801b766:	4628      	mov	r0, r5
 801b768:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b76c:	4798      	blx	r3
 801b76e:	f8c9 0020 	str.w	r0, [r9, #32]
 801b772:	f8d7 9000 	ldr.w	r9, [r7]
 801b776:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801b77a:	46ca      	mov	sl, r9
 801b77c:	b343      	cbz	r3, 801b7d0 <rcl_init+0x140>
 801b77e:	2d01      	cmp	r5, #1
 801b780:	f178 0300 	sbcs.w	r3, r8, #0
 801b784:	db3b      	blt.n	801b7fe <rcl_init+0x16e>
 801b786:	2400      	movs	r4, #0
 801b788:	3e04      	subs	r6, #4
 801b78a:	46a1      	mov	r9, r4
 801b78c:	e00b      	b.n	801b7a6 <rcl_init+0x116>
 801b78e:	6831      	ldr	r1, [r6, #0]
 801b790:	f005 fbc9 	bl	8020f26 <memcpy>
 801b794:	3401      	adds	r4, #1
 801b796:	f149 0900 	adc.w	r9, r9, #0
 801b79a:	45c8      	cmp	r8, r9
 801b79c:	bf08      	it	eq
 801b79e:	42a5      	cmpeq	r5, r4
 801b7a0:	d02b      	beq.n	801b7fa <rcl_init+0x16a>
 801b7a2:	f8d7 a000 	ldr.w	sl, [r7]
 801b7a6:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801b7aa:	f7e4 fda9 	bl	8000300 <strlen>
 801b7ae:	1c42      	adds	r2, r0, #1
 801b7b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b7b2:	4610      	mov	r0, r2
 801b7b4:	991d      	ldr	r1, [sp, #116]	; 0x74
 801b7b6:	f8da a020 	ldr.w	sl, [sl, #32]
 801b7ba:	9201      	str	r2, [sp, #4]
 801b7bc:	4798      	blx	r3
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801b7c4:	6a1b      	ldr	r3, [r3, #32]
 801b7c6:	9a01      	ldr	r2, [sp, #4]
 801b7c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b7cc:	2800      	cmp	r0, #0
 801b7ce:	d1de      	bne.n	801b78e <rcl_init+0xfe>
 801b7d0:	240a      	movs	r4, #10
 801b7d2:	4638      	mov	r0, r7
 801b7d4:	f7ff fe4e 	bl	801b474 <__cleanup_context>
 801b7d8:	4620      	mov	r0, r4
 801b7da:	b01e      	add	sp, #120	; 0x78
 801b7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7e0:	2900      	cmp	r1, #0
 801b7e2:	f43f af6e 	beq.w	801b6c2 <rcl_init+0x32>
 801b7e6:	240b      	movs	r4, #11
 801b7e8:	4620      	mov	r0, r4
 801b7ea:	b01e      	add	sp, #120	; 0x78
 801b7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7f0:	2464      	movs	r4, #100	; 0x64
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	b01e      	add	sp, #120	; 0x78
 801b7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7fa:	f8d7 9000 	ldr.w	r9, [r7]
 801b7fe:	4926      	ldr	r1, [pc, #152]	; (801b898 <rcl_init+0x208>)
 801b800:	680b      	ldr	r3, [r1, #0]
 801b802:	3301      	adds	r3, #1
 801b804:	d036      	beq.n	801b874 <rcl_init+0x1e4>
 801b806:	461a      	mov	r2, r3
 801b808:	2400      	movs	r4, #0
 801b80a:	600b      	str	r3, [r1, #0]
 801b80c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801b810:	607b      	str	r3, [r7, #4]
 801b812:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b814:	3301      	adds	r3, #1
 801b816:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801b81a:	d034      	beq.n	801b886 <rcl_init+0x1f6>
 801b81c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801b820:	b93b      	cbnz	r3, 801b832 <rcl_init+0x1a2>
 801b822:	3030      	adds	r0, #48	; 0x30
 801b824:	f000 f83a 	bl	801b89c <rcl_get_localhost_only>
 801b828:	4604      	mov	r4, r0
 801b82a:	2800      	cmp	r0, #0
 801b82c:	d1d1      	bne.n	801b7d2 <rcl_init+0x142>
 801b82e:	683b      	ldr	r3, [r7, #0]
 801b830:	6958      	ldr	r0, [r3, #20]
 801b832:	aa18      	add	r2, sp, #96	; 0x60
 801b834:	a917      	add	r1, sp, #92	; 0x5c
 801b836:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b838:	f000 fc38 	bl	801c0ac <rcl_validate_enclave_name>
 801b83c:	4604      	mov	r4, r0
 801b83e:	2800      	cmp	r0, #0
 801b840:	d1c7      	bne.n	801b7d2 <rcl_init+0x142>
 801b842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b844:	b9eb      	cbnz	r3, 801b882 <rcl_init+0x1f2>
 801b846:	6839      	ldr	r1, [r7, #0]
 801b848:	694b      	ldr	r3, [r1, #20]
 801b84a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801b84e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b850:	f000 f9c8 	bl	801bbe4 <rcl_get_security_options_from_environment>
 801b854:	4604      	mov	r4, r0
 801b856:	2800      	cmp	r0, #0
 801b858:	d1bb      	bne.n	801b7d2 <rcl_init+0x142>
 801b85a:	6839      	ldr	r1, [r7, #0]
 801b85c:	6948      	ldr	r0, [r1, #20]
 801b85e:	3128      	adds	r1, #40	; 0x28
 801b860:	3018      	adds	r0, #24
 801b862:	f7fa f843 	bl	80158ec <rmw_init>
 801b866:	4604      	mov	r4, r0
 801b868:	2800      	cmp	r0, #0
 801b86a:	d0bd      	beq.n	801b7e8 <rcl_init+0x158>
 801b86c:	f7ff fdde 	bl	801b42c <rcl_convert_rmw_ret_to_rcl_ret>
 801b870:	4604      	mov	r4, r0
 801b872:	e7ae      	b.n	801b7d2 <rcl_init+0x142>
 801b874:	2201      	movs	r2, #1
 801b876:	461c      	mov	r4, r3
 801b878:	600a      	str	r2, [r1, #0]
 801b87a:	4613      	mov	r3, r2
 801b87c:	e7c6      	b.n	801b80c <rcl_init+0x17c>
 801b87e:	240a      	movs	r4, #10
 801b880:	e7b2      	b.n	801b7e8 <rcl_init+0x158>
 801b882:	2401      	movs	r4, #1
 801b884:	e7a5      	b.n	801b7d2 <rcl_init+0x142>
 801b886:	3024      	adds	r0, #36	; 0x24
 801b888:	f003 fbc6 	bl	801f018 <rcl_get_default_domain_id>
 801b88c:	4604      	mov	r4, r0
 801b88e:	2800      	cmp	r0, #0
 801b890:	d19f      	bne.n	801b7d2 <rcl_init+0x142>
 801b892:	683b      	ldr	r3, [r7, #0]
 801b894:	6958      	ldr	r0, [r3, #20]
 801b896:	e7c1      	b.n	801b81c <rcl_init+0x18c>
 801b898:	20016fa4 	.word	0x20016fa4

0801b89c <rcl_get_localhost_only>:
 801b89c:	b510      	push	{r4, lr}
 801b89e:	2300      	movs	r3, #0
 801b8a0:	b082      	sub	sp, #8
 801b8a2:	9301      	str	r3, [sp, #4]
 801b8a4:	b1b8      	cbz	r0, 801b8d6 <rcl_get_localhost_only+0x3a>
 801b8a6:	4604      	mov	r4, r0
 801b8a8:	a901      	add	r1, sp, #4
 801b8aa:	480c      	ldr	r0, [pc, #48]	; (801b8dc <rcl_get_localhost_only+0x40>)
 801b8ac:	f7f9 fbe8 	bl	8015080 <rcutils_get_env>
 801b8b0:	b110      	cbz	r0, 801b8b8 <rcl_get_localhost_only+0x1c>
 801b8b2:	2001      	movs	r0, #1
 801b8b4:	b002      	add	sp, #8
 801b8b6:	bd10      	pop	{r4, pc}
 801b8b8:	9b01      	ldr	r3, [sp, #4]
 801b8ba:	b113      	cbz	r3, 801b8c2 <rcl_get_localhost_only+0x26>
 801b8bc:	781a      	ldrb	r2, [r3, #0]
 801b8be:	2a31      	cmp	r2, #49	; 0x31
 801b8c0:	d004      	beq.n	801b8cc <rcl_get_localhost_only+0x30>
 801b8c2:	2302      	movs	r3, #2
 801b8c4:	2000      	movs	r0, #0
 801b8c6:	7023      	strb	r3, [r4, #0]
 801b8c8:	b002      	add	sp, #8
 801b8ca:	bd10      	pop	{r4, pc}
 801b8cc:	785b      	ldrb	r3, [r3, #1]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d1f7      	bne.n	801b8c2 <rcl_get_localhost_only+0x26>
 801b8d2:	2301      	movs	r3, #1
 801b8d4:	e7f6      	b.n	801b8c4 <rcl_get_localhost_only+0x28>
 801b8d6:	200b      	movs	r0, #11
 801b8d8:	b002      	add	sp, #8
 801b8da:	bd10      	pop	{r4, pc}
 801b8dc:	080258bc 	.word	0x080258bc

0801b8e0 <rcl_node_resolve_name>:
 801b8e0:	b082      	sub	sp, #8
 801b8e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8e6:	b091      	sub	sp, #68	; 0x44
 801b8e8:	ac1a      	add	r4, sp, #104	; 0x68
 801b8ea:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801b8ee:	e884 000c 	stmia.w	r4, {r2, r3}
 801b8f2:	2800      	cmp	r0, #0
 801b8f4:	d03d      	beq.n	801b972 <rcl_node_resolve_name+0x92>
 801b8f6:	460c      	mov	r4, r1
 801b8f8:	4605      	mov	r5, r0
 801b8fa:	f7f8 f81d 	bl	8013938 <rcl_node_get_options>
 801b8fe:	2800      	cmp	r0, #0
 801b900:	d03a      	beq.n	801b978 <rcl_node_resolve_name+0x98>
 801b902:	4628      	mov	r0, r5
 801b904:	f7f8 f808 	bl	8013918 <rcl_node_get_name>
 801b908:	4606      	mov	r6, r0
 801b90a:	4628      	mov	r0, r5
 801b90c:	ad0b      	add	r5, sp, #44	; 0x2c
 801b90e:	f7f8 f80b 	bl	8013928 <rcl_node_get_namespace>
 801b912:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801b916:	4607      	mov	r7, r0
 801b918:	46ac      	mov	ip, r5
 801b91a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b91e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b922:	f8de 3000 	ldr.w	r3, [lr]
 801b926:	f8cc 3000 	str.w	r3, [ip]
 801b92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b92c:	b30b      	cbz	r3, 801b972 <rcl_node_resolve_name+0x92>
 801b92e:	4689      	mov	r9, r1
 801b930:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b934:	f002 f80e 	bl	801d954 <rcutils_get_zero_initialized_string_map>
 801b938:	ab10      	add	r3, sp, #64	; 0x40
 801b93a:	9008      	str	r0, [sp, #32]
 801b93c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b940:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b944:	2100      	movs	r1, #0
 801b946:	a808      	add	r0, sp, #32
 801b948:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b94c:	f002 f878 	bl	801da40 <rcutils_string_map_init>
 801b950:	4683      	mov	fp, r0
 801b952:	b1a0      	cbz	r0, 801b97e <rcl_node_resolve_name+0x9e>
 801b954:	f7f9 fbac 	bl	80150b0 <rcutils_get_error_string>
 801b958:	f7f9 fbc2 	bl	80150e0 <rcutils_reset_error>
 801b95c:	f1bb 0f0a 	cmp.w	fp, #10
 801b960:	bf18      	it	ne
 801b962:	f04f 0b01 	movne.w	fp, #1
 801b966:	4658      	mov	r0, fp
 801b968:	b011      	add	sp, #68	; 0x44
 801b96a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b96e:	b002      	add	sp, #8
 801b970:	4770      	bx	lr
 801b972:	f04f 0b0b 	mov.w	fp, #11
 801b976:	e7f6      	b.n	801b966 <rcl_node_resolve_name+0x86>
 801b978:	f04f 0b01 	mov.w	fp, #1
 801b97c:	e7f3      	b.n	801b966 <rcl_node_resolve_name+0x86>
 801b97e:	9009      	str	r0, [sp, #36]	; 0x24
 801b980:	9007      	str	r0, [sp, #28]
 801b982:	a808      	add	r0, sp, #32
 801b984:	f003 fcdc 	bl	801f340 <rcl_get_default_topic_name_substitutions>
 801b988:	4683      	mov	fp, r0
 801b98a:	b180      	cbz	r0, 801b9ae <rcl_node_resolve_name+0xce>
 801b98c:	280a      	cmp	r0, #10
 801b98e:	a808      	add	r0, sp, #32
 801b990:	bf18      	it	ne
 801b992:	f04f 0b01 	movne.w	fp, #1
 801b996:	f002 f893 	bl	801dac0 <rcutils_string_map_fini>
 801b99a:	4604      	mov	r4, r0
 801b99c:	2800      	cmp	r0, #0
 801b99e:	d15b      	bne.n	801ba58 <rcl_node_resolve_name+0x178>
 801b9a0:	4651      	mov	r1, sl
 801b9a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b9a4:	47c8      	blx	r9
 801b9a6:	4651      	mov	r1, sl
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	47c8      	blx	r9
 801b9ac:	e7db      	b.n	801b966 <rcl_node_resolve_name+0x86>
 801b9ae:	ab09      	add	r3, sp, #36	; 0x24
 801b9b0:	46ec      	mov	ip, sp
 801b9b2:	9305      	str	r3, [sp, #20]
 801b9b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b9ba:	682b      	ldr	r3, [r5, #0]
 801b9bc:	463a      	mov	r2, r7
 801b9be:	4631      	mov	r1, r6
 801b9c0:	4620      	mov	r0, r4
 801b9c2:	f8cc 3000 	str.w	r3, [ip]
 801b9c6:	ab08      	add	r3, sp, #32
 801b9c8:	f003 fb5a 	bl	801f080 <rcl_expand_topic_name>
 801b9cc:	4683      	mov	fp, r0
 801b9ce:	b9d8      	cbnz	r0, 801ba08 <rcl_node_resolve_name+0x128>
 801b9d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	9009      	str	r0, [sp, #36]	; 0x24
 801b9d6:	a90a      	add	r1, sp, #40	; 0x28
 801b9d8:	4620      	mov	r0, r4
 801b9da:	f002 f985 	bl	801dce8 <rmw_validate_full_topic_name>
 801b9de:	bb50      	cbnz	r0, 801ba36 <rcl_node_resolve_name+0x156>
 801b9e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b9e2:	2d00      	cmp	r5, #0
 801b9e4:	d140      	bne.n	801ba68 <rcl_node_resolve_name+0x188>
 801b9e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b9e8:	a808      	add	r0, sp, #32
 801b9ea:	601c      	str	r4, [r3, #0]
 801b9ec:	f002 f868 	bl	801dac0 <rcutils_string_map_fini>
 801b9f0:	4683      	mov	fp, r0
 801b9f2:	2800      	cmp	r0, #0
 801b9f4:	d043      	beq.n	801ba7e <rcl_node_resolve_name+0x19e>
 801b9f6:	f7f9 fb5b 	bl	80150b0 <rcutils_get_error_string>
 801b9fa:	46a8      	mov	r8, r5
 801b9fc:	f04f 0b01 	mov.w	fp, #1
 801ba00:	462c      	mov	r4, r5
 801ba02:	f7f9 fb6d 	bl	80150e0 <rcutils_reset_error>
 801ba06:	e00a      	b.n	801ba1e <rcl_node_resolve_name+0x13e>
 801ba08:	2867      	cmp	r0, #103	; 0x67
 801ba0a:	bf14      	ite	ne
 801ba0c:	f04f 0800 	movne.w	r8, #0
 801ba10:	f008 0801 	andeq.w	r8, r8, #1
 801ba14:	9c07      	ldr	r4, [sp, #28]
 801ba16:	a808      	add	r0, sp, #32
 801ba18:	f002 f852 	bl	801dac0 <rcutils_string_map_fini>
 801ba1c:	bb50      	cbnz	r0, 801ba74 <rcl_node_resolve_name+0x194>
 801ba1e:	4651      	mov	r1, sl
 801ba20:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba22:	47c8      	blx	r9
 801ba24:	4651      	mov	r1, sl
 801ba26:	4620      	mov	r0, r4
 801ba28:	47c8      	blx	r9
 801ba2a:	f1b8 0f00 	cmp.w	r8, #0
 801ba2e:	bf18      	it	ne
 801ba30:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801ba34:	e797      	b.n	801b966 <rcl_node_resolve_name+0x86>
 801ba36:	f7f9 fb3b 	bl	80150b0 <rcutils_get_error_string>
 801ba3a:	f7f9 fb51 	bl	80150e0 <rcutils_reset_error>
 801ba3e:	a808      	add	r0, sp, #32
 801ba40:	f002 f83e 	bl	801dac0 <rcutils_string_map_fini>
 801ba44:	b998      	cbnz	r0, 801ba6e <rcl_node_resolve_name+0x18e>
 801ba46:	4651      	mov	r1, sl
 801ba48:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba4a:	47c8      	blx	r9
 801ba4c:	4651      	mov	r1, sl
 801ba4e:	4620      	mov	r0, r4
 801ba50:	f04f 0b01 	mov.w	fp, #1
 801ba54:	47c8      	blx	r9
 801ba56:	e786      	b.n	801b966 <rcl_node_resolve_name+0x86>
 801ba58:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ba5c:	f7f9 fb28 	bl	80150b0 <rcutils_get_error_string>
 801ba60:	f7f9 fb3e 	bl	80150e0 <rcutils_reset_error>
 801ba64:	4644      	mov	r4, r8
 801ba66:	e7da      	b.n	801ba1e <rcl_node_resolve_name+0x13e>
 801ba68:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801ba6c:	e7d3      	b.n	801ba16 <rcl_node_resolve_name+0x136>
 801ba6e:	46d8      	mov	r8, fp
 801ba70:	f04f 0b01 	mov.w	fp, #1
 801ba74:	f7f9 fb1c 	bl	80150b0 <rcutils_get_error_string>
 801ba78:	f7f9 fb32 	bl	80150e0 <rcutils_reset_error>
 801ba7c:	e7cf      	b.n	801ba1e <rcl_node_resolve_name+0x13e>
 801ba7e:	4651      	mov	r1, sl
 801ba80:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba82:	47c8      	blx	r9
 801ba84:	4651      	mov	r1, sl
 801ba86:	4658      	mov	r0, fp
 801ba88:	47c8      	blx	r9
 801ba8a:	e76c      	b.n	801b966 <rcl_node_resolve_name+0x86>

0801ba8c <exact_match_lookup>:
 801ba8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba8e:	f102 0708 	add.w	r7, r2, #8
 801ba92:	460b      	mov	r3, r1
 801ba94:	b085      	sub	sp, #20
 801ba96:	4614      	mov	r4, r2
 801ba98:	4606      	mov	r6, r0
 801ba9a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801ba9e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801baa2:	4618      	mov	r0, r3
 801baa4:	4919      	ldr	r1, [pc, #100]	; (801bb0c <exact_match_lookup+0x80>)
 801baa6:	e894 000c 	ldmia.w	r4, {r2, r3}
 801baaa:	f001 ff1b 	bl	801d8e4 <rcutils_join_path>
 801baae:	7833      	ldrb	r3, [r6, #0]
 801bab0:	4605      	mov	r5, r0
 801bab2:	2b2f      	cmp	r3, #47	; 0x2f
 801bab4:	d023      	beq.n	801bafe <exact_match_lookup+0x72>
 801bab6:	f104 030c 	add.w	r3, r4, #12
 801baba:	e893 0003 	ldmia.w	r3, {r0, r1}
 801babe:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bac2:	1c70      	adds	r0, r6, #1
 801bac4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bac8:	f001 ff12 	bl	801d8f0 <rcutils_to_native_path>
 801bacc:	4606      	mov	r6, r0
 801bace:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801bad2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bad6:	4631      	mov	r1, r6
 801bad8:	4628      	mov	r0, r5
 801bada:	e894 000c 	ldmia.w	r4, {r2, r3}
 801bade:	f001 ff01 	bl	801d8e4 <rcutils_join_path>
 801bae2:	4603      	mov	r3, r0
 801bae4:	4630      	mov	r0, r6
 801bae6:	6862      	ldr	r2, [r4, #4]
 801bae8:	461e      	mov	r6, r3
 801baea:	6921      	ldr	r1, [r4, #16]
 801baec:	4790      	blx	r2
 801baee:	4628      	mov	r0, r5
 801baf0:	4635      	mov	r5, r6
 801baf2:	6863      	ldr	r3, [r4, #4]
 801baf4:	6921      	ldr	r1, [r4, #16]
 801baf6:	4798      	blx	r3
 801baf8:	4628      	mov	r0, r5
 801bafa:	b005      	add	sp, #20
 801bafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bafe:	7873      	ldrb	r3, [r6, #1]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d1d8      	bne.n	801bab6 <exact_match_lookup+0x2a>
 801bb04:	4628      	mov	r0, r5
 801bb06:	b005      	add	sp, #20
 801bb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb0a:	bf00      	nop
 801bb0c:	0802590c 	.word	0x0802590c

0801bb10 <rcl_get_secure_root>:
 801bb10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb14:	b085      	sub	sp, #20
 801bb16:	b168      	cbz	r0, 801bb34 <rcl_get_secure_root+0x24>
 801bb18:	4607      	mov	r7, r0
 801bb1a:	4608      	mov	r0, r1
 801bb1c:	460c      	mov	r4, r1
 801bb1e:	f7f9 faa1 	bl	8015064 <rcutils_allocator_is_valid>
 801bb22:	b138      	cbz	r0, 801bb34 <rcl_get_secure_root+0x24>
 801bb24:	2300      	movs	r3, #0
 801bb26:	482d      	ldr	r0, [pc, #180]	; (801bbdc <rcl_get_secure_root+0xcc>)
 801bb28:	a903      	add	r1, sp, #12
 801bb2a:	9303      	str	r3, [sp, #12]
 801bb2c:	f7f9 faa8 	bl	8015080 <rcutils_get_env>
 801bb30:	4605      	mov	r5, r0
 801bb32:	b120      	cbz	r0, 801bb3e <rcl_get_secure_root+0x2e>
 801bb34:	2500      	movs	r5, #0
 801bb36:	4628      	mov	r0, r5
 801bb38:	b005      	add	sp, #20
 801bb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb3e:	9b03      	ldr	r3, [sp, #12]
 801bb40:	781a      	ldrb	r2, [r3, #0]
 801bb42:	2a00      	cmp	r2, #0
 801bb44:	d0f6      	beq.n	801bb34 <rcl_get_secure_root+0x24>
 801bb46:	f104 090c 	add.w	r9, r4, #12
 801bb4a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bb4e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bb52:	4618      	mov	r0, r3
 801bb54:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bb58:	f7f9 fc18 	bl	801538c <rcutils_strdup>
 801bb5c:	4680      	mov	r8, r0
 801bb5e:	2800      	cmp	r0, #0
 801bb60:	d0e8      	beq.n	801bb34 <rcl_get_secure_root+0x24>
 801bb62:	a903      	add	r1, sp, #12
 801bb64:	481e      	ldr	r0, [pc, #120]	; (801bbe0 <rcl_get_secure_root+0xd0>)
 801bb66:	9503      	str	r5, [sp, #12]
 801bb68:	f7f9 fa8a 	bl	8015080 <rcutils_get_env>
 801bb6c:	b160      	cbz	r0, 801bb88 <rcl_get_secure_root+0x78>
 801bb6e:	2600      	movs	r6, #0
 801bb70:	4630      	mov	r0, r6
 801bb72:	6863      	ldr	r3, [r4, #4]
 801bb74:	6921      	ldr	r1, [r4, #16]
 801bb76:	4798      	blx	r3
 801bb78:	4640      	mov	r0, r8
 801bb7a:	6863      	ldr	r3, [r4, #4]
 801bb7c:	6921      	ldr	r1, [r4, #16]
 801bb7e:	4798      	blx	r3
 801bb80:	4628      	mov	r0, r5
 801bb82:	b005      	add	sp, #20
 801bb84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb88:	9b03      	ldr	r3, [sp, #12]
 801bb8a:	781e      	ldrb	r6, [r3, #0]
 801bb8c:	b1f6      	cbz	r6, 801bbcc <rcl_get_secure_root+0xbc>
 801bb8e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bb92:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bb96:	4618      	mov	r0, r3
 801bb98:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bb9c:	f7f9 fbf6 	bl	801538c <rcutils_strdup>
 801bba0:	4606      	mov	r6, r0
 801bba2:	2800      	cmp	r0, #0
 801bba4:	d0e3      	beq.n	801bb6e <rcl_get_secure_root+0x5e>
 801bba6:	4622      	mov	r2, r4
 801bba8:	4641      	mov	r1, r8
 801bbaa:	f7ff ff6f 	bl	801ba8c <exact_match_lookup>
 801bbae:	4605      	mov	r5, r0
 801bbb0:	2d00      	cmp	r5, #0
 801bbb2:	d0dd      	beq.n	801bb70 <rcl_get_secure_root+0x60>
 801bbb4:	4628      	mov	r0, r5
 801bbb6:	f001 fe93 	bl	801d8e0 <rcutils_is_directory>
 801bbba:	4603      	mov	r3, r0
 801bbbc:	2800      	cmp	r0, #0
 801bbbe:	d1d7      	bne.n	801bb70 <rcl_get_secure_root+0x60>
 801bbc0:	4628      	mov	r0, r5
 801bbc2:	6921      	ldr	r1, [r4, #16]
 801bbc4:	461d      	mov	r5, r3
 801bbc6:	6863      	ldr	r3, [r4, #4]
 801bbc8:	4798      	blx	r3
 801bbca:	e7d1      	b.n	801bb70 <rcl_get_secure_root+0x60>
 801bbcc:	4622      	mov	r2, r4
 801bbce:	4638      	mov	r0, r7
 801bbd0:	4641      	mov	r1, r8
 801bbd2:	f7ff ff5b 	bl	801ba8c <exact_match_lookup>
 801bbd6:	4605      	mov	r5, r0
 801bbd8:	e7ea      	b.n	801bbb0 <rcl_get_secure_root+0xa0>
 801bbda:	bf00      	nop
 801bbdc:	08025918 	.word	0x08025918
 801bbe0:	08025930 	.word	0x08025930

0801bbe4 <rcl_get_security_options_from_environment>:
 801bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbe8:	b082      	sub	sp, #8
 801bbea:	2300      	movs	r3, #0
 801bbec:	4606      	mov	r6, r0
 801bbee:	460f      	mov	r7, r1
 801bbf0:	4821      	ldr	r0, [pc, #132]	; (801bc78 <rcl_get_security_options_from_environment+0x94>)
 801bbf2:	a901      	add	r1, sp, #4
 801bbf4:	4690      	mov	r8, r2
 801bbf6:	9301      	str	r3, [sp, #4]
 801bbf8:	f7f9 fa42 	bl	8015080 <rcutils_get_env>
 801bbfc:	b120      	cbz	r0, 801bc08 <rcl_get_security_options_from_environment+0x24>
 801bbfe:	2501      	movs	r5, #1
 801bc00:	4628      	mov	r0, r5
 801bc02:	b002      	add	sp, #8
 801bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc08:	4604      	mov	r4, r0
 801bc0a:	491c      	ldr	r1, [pc, #112]	; (801bc7c <rcl_get_security_options_from_environment+0x98>)
 801bc0c:	9801      	ldr	r0, [sp, #4]
 801bc0e:	f7e4 fb17 	bl	8000240 <strcmp>
 801bc12:	4605      	mov	r5, r0
 801bc14:	b9f0      	cbnz	r0, 801bc54 <rcl_get_security_options_from_environment+0x70>
 801bc16:	9001      	str	r0, [sp, #4]
 801bc18:	f1b8 0f00 	cmp.w	r8, #0
 801bc1c:	d021      	beq.n	801bc62 <rcl_get_security_options_from_environment+0x7e>
 801bc1e:	a901      	add	r1, sp, #4
 801bc20:	4817      	ldr	r0, [pc, #92]	; (801bc80 <rcl_get_security_options_from_environment+0x9c>)
 801bc22:	f7f9 fa2d 	bl	8015080 <rcutils_get_env>
 801bc26:	2800      	cmp	r0, #0
 801bc28:	d1e9      	bne.n	801bbfe <rcl_get_security_options_from_environment+0x1a>
 801bc2a:	4916      	ldr	r1, [pc, #88]	; (801bc84 <rcl_get_security_options_from_environment+0xa0>)
 801bc2c:	9801      	ldr	r0, [sp, #4]
 801bc2e:	f7e4 fb07 	bl	8000240 <strcmp>
 801bc32:	4603      	mov	r3, r0
 801bc34:	4639      	mov	r1, r7
 801bc36:	4630      	mov	r0, r6
 801bc38:	fab3 f383 	clz	r3, r3
 801bc3c:	095b      	lsrs	r3, r3, #5
 801bc3e:	f888 3000 	strb.w	r3, [r8]
 801bc42:	f7ff ff65 	bl	801bb10 <rcl_get_secure_root>
 801bc46:	b170      	cbz	r0, 801bc66 <rcl_get_security_options_from_environment+0x82>
 801bc48:	f8c8 0004 	str.w	r0, [r8, #4]
 801bc4c:	4628      	mov	r0, r5
 801bc4e:	b002      	add	sp, #8
 801bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc54:	4625      	mov	r5, r4
 801bc56:	f888 4000 	strb.w	r4, [r8]
 801bc5a:	4628      	mov	r0, r5
 801bc5c:	b002      	add	sp, #8
 801bc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc62:	250b      	movs	r5, #11
 801bc64:	e7cc      	b.n	801bc00 <rcl_get_security_options_from_environment+0x1c>
 801bc66:	f898 5000 	ldrb.w	r5, [r8]
 801bc6a:	f1a5 0501 	sub.w	r5, r5, #1
 801bc6e:	fab5 f585 	clz	r5, r5
 801bc72:	096d      	lsrs	r5, r5, #5
 801bc74:	e7c4      	b.n	801bc00 <rcl_get_security_options_from_environment+0x1c>
 801bc76:	bf00      	nop
 801bc78:	080258d0 	.word	0x080258d0
 801bc7c:	080258e4 	.word	0x080258e4
 801bc80:	080258ec 	.word	0x080258ec
 801bc84:	08025904 	.word	0x08025904

0801bc88 <rcl_get_system_time>:
 801bc88:	4608      	mov	r0, r1
 801bc8a:	f7f9 bbbd 	b.w	8015408 <rcutils_system_time_now>
 801bc8e:	bf00      	nop

0801bc90 <rcl_get_steady_time>:
 801bc90:	4608      	mov	r0, r1
 801bc92:	f7f9 bbdf 	b.w	8015454 <rcutils_steady_time_now>
 801bc96:	bf00      	nop

0801bc98 <rcl_get_ros_time>:
 801bc98:	7a03      	ldrb	r3, [r0, #8]
 801bc9a:	b510      	push	{r4, lr}
 801bc9c:	460c      	mov	r4, r1
 801bc9e:	b143      	cbz	r3, 801bcb2 <rcl_get_ros_time+0x1a>
 801bca0:	2105      	movs	r1, #5
 801bca2:	f001 fd79 	bl	801d798 <__atomic_load_8>
 801bca6:	4602      	mov	r2, r0
 801bca8:	460b      	mov	r3, r1
 801bcaa:	2000      	movs	r0, #0
 801bcac:	e9c4 2300 	strd	r2, r3, [r4]
 801bcb0:	bd10      	pop	{r4, pc}
 801bcb2:	4608      	mov	r0, r1
 801bcb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcb8:	f7f9 bba6 	b.w	8015408 <rcutils_system_time_now>

0801bcbc <rcl_clock_init>:
 801bcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcbe:	4605      	mov	r5, r0
 801bcc0:	4610      	mov	r0, r2
 801bcc2:	4614      	mov	r4, r2
 801bcc4:	460e      	mov	r6, r1
 801bcc6:	f7f9 f9cd 	bl	8015064 <rcutils_allocator_is_valid>
 801bcca:	b128      	cbz	r0, 801bcd8 <rcl_clock_init+0x1c>
 801bccc:	2d03      	cmp	r5, #3
 801bcce:	d803      	bhi.n	801bcd8 <rcl_clock_init+0x1c>
 801bcd0:	e8df f005 	tbb	[pc, r5]
 801bcd4:	0659301f 	.word	0x0659301f
 801bcd8:	f04f 0c0b 	mov.w	ip, #11
 801bcdc:	4660      	mov	r0, ip
 801bcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bce0:	2c00      	cmp	r4, #0
 801bce2:	d0f9      	beq.n	801bcd8 <rcl_clock_init+0x1c>
 801bce4:	fab6 f386 	clz	r3, r6
 801bce8:	095b      	lsrs	r3, r3, #5
 801bcea:	2e00      	cmp	r6, #0
 801bcec:	d0f4      	beq.n	801bcd8 <rcl_clock_init+0x1c>
 801bcee:	6133      	str	r3, [r6, #16]
 801bcf0:	469c      	mov	ip, r3
 801bcf2:	f106 0514 	add.w	r5, r6, #20
 801bcf6:	4f32      	ldr	r7, [pc, #200]	; (801bdc0 <rcl_clock_init+0x104>)
 801bcf8:	f04f 0e03 	mov.w	lr, #3
 801bcfc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd04:	6823      	ldr	r3, [r4, #0]
 801bd06:	4660      	mov	r0, ip
 801bd08:	602b      	str	r3, [r5, #0]
 801bd0a:	60f7      	str	r7, [r6, #12]
 801bd0c:	f886 e000 	strb.w	lr, [r6]
 801bd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd12:	2e00      	cmp	r6, #0
 801bd14:	d0e0      	beq.n	801bcd8 <rcl_clock_init+0x1c>
 801bd16:	2300      	movs	r3, #0
 801bd18:	f106 0514 	add.w	r5, r6, #20
 801bd1c:	7033      	strb	r3, [r6, #0]
 801bd1e:	469c      	mov	ip, r3
 801bd20:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd24:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bd28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd2c:	6823      	ldr	r3, [r4, #0]
 801bd2e:	4660      	mov	r0, ip
 801bd30:	602b      	str	r3, [r5, #0]
 801bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd34:	2c00      	cmp	r4, #0
 801bd36:	d0cf      	beq.n	801bcd8 <rcl_clock_init+0x1c>
 801bd38:	fab6 f586 	clz	r5, r6
 801bd3c:	096d      	lsrs	r5, r5, #5
 801bd3e:	2e00      	cmp	r6, #0
 801bd40:	d0ca      	beq.n	801bcd8 <rcl_clock_init+0x1c>
 801bd42:	46a6      	mov	lr, r4
 801bd44:	7035      	strb	r5, [r6, #0]
 801bd46:	f106 0c14 	add.w	ip, r6, #20
 801bd4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bd4e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bd52:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bd56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd5a:	f8de 3000 	ldr.w	r3, [lr]
 801bd5e:	2010      	movs	r0, #16
 801bd60:	f8cc 3000 	str.w	r3, [ip]
 801bd64:	6823      	ldr	r3, [r4, #0]
 801bd66:	6921      	ldr	r1, [r4, #16]
 801bd68:	4798      	blx	r3
 801bd6a:	6130      	str	r0, [r6, #16]
 801bd6c:	b320      	cbz	r0, 801bdb8 <rcl_clock_init+0xfc>
 801bd6e:	2200      	movs	r2, #0
 801bd70:	2300      	movs	r3, #0
 801bd72:	46ac      	mov	ip, r5
 801bd74:	7205      	strb	r5, [r0, #8]
 801bd76:	e9c0 2300 	strd	r2, r3, [r0]
 801bd7a:	4a12      	ldr	r2, [pc, #72]	; (801bdc4 <rcl_clock_init+0x108>)
 801bd7c:	2301      	movs	r3, #1
 801bd7e:	4660      	mov	r0, ip
 801bd80:	60f2      	str	r2, [r6, #12]
 801bd82:	7033      	strb	r3, [r6, #0]
 801bd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd86:	2c00      	cmp	r4, #0
 801bd88:	d0a6      	beq.n	801bcd8 <rcl_clock_init+0x1c>
 801bd8a:	fab6 f386 	clz	r3, r6
 801bd8e:	095b      	lsrs	r3, r3, #5
 801bd90:	2e00      	cmp	r6, #0
 801bd92:	d0a1      	beq.n	801bcd8 <rcl_clock_init+0x1c>
 801bd94:	6133      	str	r3, [r6, #16]
 801bd96:	469c      	mov	ip, r3
 801bd98:	f106 0514 	add.w	r5, r6, #20
 801bd9c:	f8df e028 	ldr.w	lr, [pc, #40]	; 801bdc8 <rcl_clock_init+0x10c>
 801bda0:	2702      	movs	r7, #2
 801bda2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bda6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bda8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bdaa:	6823      	ldr	r3, [r4, #0]
 801bdac:	4660      	mov	r0, ip
 801bdae:	602b      	str	r3, [r5, #0]
 801bdb0:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bdb4:	7037      	strb	r7, [r6, #0]
 801bdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdb8:	f04f 0c0a 	mov.w	ip, #10
 801bdbc:	e78e      	b.n	801bcdc <rcl_clock_init+0x20>
 801bdbe:	bf00      	nop
 801bdc0:	0801bc91 	.word	0x0801bc91
 801bdc4:	0801bc99 	.word	0x0801bc99
 801bdc8:	0801bc89 	.word	0x0801bc89

0801bdcc <rcl_clock_get_now>:
 801bdcc:	b140      	cbz	r0, 801bde0 <rcl_clock_get_now+0x14>
 801bdce:	b139      	cbz	r1, 801bde0 <rcl_clock_get_now+0x14>
 801bdd0:	7803      	ldrb	r3, [r0, #0]
 801bdd2:	b11b      	cbz	r3, 801bddc <rcl_clock_get_now+0x10>
 801bdd4:	68c3      	ldr	r3, [r0, #12]
 801bdd6:	b10b      	cbz	r3, 801bddc <rcl_clock_get_now+0x10>
 801bdd8:	6900      	ldr	r0, [r0, #16]
 801bdda:	4718      	bx	r3
 801bddc:	2001      	movs	r0, #1
 801bdde:	4770      	bx	lr
 801bde0:	200b      	movs	r0, #11
 801bde2:	4770      	bx	lr

0801bde4 <rcl_timer_call>:
 801bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bde8:	b087      	sub	sp, #28
 801bdea:	2800      	cmp	r0, #0
 801bdec:	d06c      	beq.n	801bec8 <rcl_timer_call+0xe4>
 801bdee:	6803      	ldr	r3, [r0, #0]
 801bdf0:	4604      	mov	r4, r0
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d062      	beq.n	801bebc <rcl_timer_call+0xd8>
 801bdf6:	f3bf 8f5b 	dmb	ish
 801bdfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bdfe:	f3bf 8f5b 	dmb	ish
 801be02:	2b00      	cmp	r3, #0
 801be04:	d14f      	bne.n	801bea6 <rcl_timer_call+0xc2>
 801be06:	6803      	ldr	r3, [r0, #0]
 801be08:	a904      	add	r1, sp, #16
 801be0a:	6818      	ldr	r0, [r3, #0]
 801be0c:	f7ff ffde 	bl	801bdcc <rcl_clock_get_now>
 801be10:	4605      	mov	r5, r0
 801be12:	2800      	cmp	r0, #0
 801be14:	d149      	bne.n	801beaa <rcl_timer_call+0xc6>
 801be16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	db49      	blt.n	801beb2 <rcl_timer_call+0xce>
 801be1e:	2605      	movs	r6, #5
 801be20:	6820      	ldr	r0, [r4, #0]
 801be22:	9600      	str	r6, [sp, #0]
 801be24:	3020      	adds	r0, #32
 801be26:	f001 fd23 	bl	801d870 <__atomic_exchange_8>
 801be2a:	6823      	ldr	r3, [r4, #0]
 801be2c:	4680      	mov	r8, r0
 801be2e:	f3bf 8f5b 	dmb	ish
 801be32:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801be36:	f3bf 8f5b 	dmb	ish
 801be3a:	6820      	ldr	r0, [r4, #0]
 801be3c:	4689      	mov	r9, r1
 801be3e:	4631      	mov	r1, r6
 801be40:	3028      	adds	r0, #40	; 0x28
 801be42:	f001 fca9 	bl	801d798 <__atomic_load_8>
 801be46:	460f      	mov	r7, r1
 801be48:	4631      	mov	r1, r6
 801be4a:	4606      	mov	r6, r0
 801be4c:	6820      	ldr	r0, [r4, #0]
 801be4e:	3018      	adds	r0, #24
 801be50:	f001 fca2 	bl	801d798 <__atomic_load_8>
 801be54:	4602      	mov	r2, r0
 801be56:	9804      	ldr	r0, [sp, #16]
 801be58:	460b      	mov	r3, r1
 801be5a:	18b6      	adds	r6, r6, r2
 801be5c:	f8dd c014 	ldr.w	ip, [sp, #20]
 801be60:	4692      	mov	sl, r2
 801be62:	eb47 0701 	adc.w	r7, r7, r1
 801be66:	4286      	cmp	r6, r0
 801be68:	eb77 010c 	sbcs.w	r1, r7, ip
 801be6c:	da04      	bge.n	801be78 <rcl_timer_call+0x94>
 801be6e:	ea53 0102 	orrs.w	r1, r3, r2
 801be72:	d12e      	bne.n	801bed2 <rcl_timer_call+0xee>
 801be74:	4606      	mov	r6, r0
 801be76:	4667      	mov	r7, ip
 801be78:	6820      	ldr	r0, [r4, #0]
 801be7a:	2105      	movs	r1, #5
 801be7c:	4632      	mov	r2, r6
 801be7e:	463b      	mov	r3, r7
 801be80:	3028      	adds	r0, #40	; 0x28
 801be82:	9100      	str	r1, [sp, #0]
 801be84:	f001 fcbe 	bl	801d804 <__atomic_store_8>
 801be88:	f1bb 0f00 	cmp.w	fp, #0
 801be8c:	d00d      	beq.n	801beaa <rcl_timer_call+0xc6>
 801be8e:	9a04      	ldr	r2, [sp, #16]
 801be90:	4620      	mov	r0, r4
 801be92:	9b05      	ldr	r3, [sp, #20]
 801be94:	ebb2 0208 	subs.w	r2, r2, r8
 801be98:	eb63 0309 	sbc.w	r3, r3, r9
 801be9c:	47d8      	blx	fp
 801be9e:	4628      	mov	r0, r5
 801bea0:	b007      	add	sp, #28
 801bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bea6:	f240 3521 	movw	r5, #801	; 0x321
 801beaa:	4628      	mov	r0, r5
 801beac:	b007      	add	sp, #28
 801beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beb2:	2501      	movs	r5, #1
 801beb4:	4628      	mov	r0, r5
 801beb6:	b007      	add	sp, #28
 801beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bebc:	f44f 7548 	mov.w	r5, #800	; 0x320
 801bec0:	4628      	mov	r0, r5
 801bec2:	b007      	add	sp, #28
 801bec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bec8:	250b      	movs	r5, #11
 801beca:	4628      	mov	r0, r5
 801becc:	b007      	add	sp, #28
 801bece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bed2:	1b80      	subs	r0, r0, r6
 801bed4:	eb6c 0107 	sbc.w	r1, ip, r7
 801bed8:	3801      	subs	r0, #1
 801beda:	f161 0100 	sbc.w	r1, r1, #0
 801bede:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801bee2:	f7e4 fbd1 	bl	8000688 <__aeabi_ldivmod>
 801bee6:	9b02      	ldr	r3, [sp, #8]
 801bee8:	3001      	adds	r0, #1
 801beea:	f141 0100 	adc.w	r1, r1, #0
 801beee:	fb00 f303 	mul.w	r3, r0, r3
 801bef2:	fb01 330a 	mla	r3, r1, sl, r3
 801bef6:	fba0 0a0a 	umull	r0, sl, r0, sl
 801befa:	1986      	adds	r6, r0, r6
 801befc:	4453      	add	r3, sl
 801befe:	eb43 0707 	adc.w	r7, r3, r7
 801bf02:	e7b9      	b.n	801be78 <rcl_timer_call+0x94>

0801bf04 <rcl_timer_is_ready>:
 801bf04:	b570      	push	{r4, r5, r6, lr}
 801bf06:	b082      	sub	sp, #8
 801bf08:	b380      	cbz	r0, 801bf6c <rcl_timer_is_ready+0x68>
 801bf0a:	6803      	ldr	r3, [r0, #0]
 801bf0c:	4604      	mov	r4, r0
 801bf0e:	b38b      	cbz	r3, 801bf74 <rcl_timer_is_ready+0x70>
 801bf10:	460d      	mov	r5, r1
 801bf12:	b359      	cbz	r1, 801bf6c <rcl_timer_is_ready+0x68>
 801bf14:	f3bf 8f5b 	dmb	ish
 801bf18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bf1c:	f3bf 8f5b 	dmb	ish
 801bf20:	b953      	cbnz	r3, 801bf38 <rcl_timer_is_ready+0x34>
 801bf22:	6803      	ldr	r3, [r0, #0]
 801bf24:	4669      	mov	r1, sp
 801bf26:	6818      	ldr	r0, [r3, #0]
 801bf28:	f7ff ff50 	bl	801bdcc <rcl_clock_get_now>
 801bf2c:	4606      	mov	r6, r0
 801bf2e:	b148      	cbz	r0, 801bf44 <rcl_timer_is_ready+0x40>
 801bf30:	f240 3321 	movw	r3, #801	; 0x321
 801bf34:	4298      	cmp	r0, r3
 801bf36:	d102      	bne.n	801bf3e <rcl_timer_is_ready+0x3a>
 801bf38:	2300      	movs	r3, #0
 801bf3a:	461e      	mov	r6, r3
 801bf3c:	702b      	strb	r3, [r5, #0]
 801bf3e:	4630      	mov	r0, r6
 801bf40:	b002      	add	sp, #8
 801bf42:	bd70      	pop	{r4, r5, r6, pc}
 801bf44:	6820      	ldr	r0, [r4, #0]
 801bf46:	2105      	movs	r1, #5
 801bf48:	3028      	adds	r0, #40	; 0x28
 801bf4a:	f001 fc25 	bl	801d798 <__atomic_load_8>
 801bf4e:	9b00      	ldr	r3, [sp, #0]
 801bf50:	1ac0      	subs	r0, r0, r3
 801bf52:	9b01      	ldr	r3, [sp, #4]
 801bf54:	eb61 0103 	sbc.w	r1, r1, r3
 801bf58:	2801      	cmp	r0, #1
 801bf5a:	4630      	mov	r0, r6
 801bf5c:	f171 0300 	sbcs.w	r3, r1, #0
 801bf60:	bfb4      	ite	lt
 801bf62:	2301      	movlt	r3, #1
 801bf64:	2300      	movge	r3, #0
 801bf66:	702b      	strb	r3, [r5, #0]
 801bf68:	b002      	add	sp, #8
 801bf6a:	bd70      	pop	{r4, r5, r6, pc}
 801bf6c:	260b      	movs	r6, #11
 801bf6e:	4630      	mov	r0, r6
 801bf70:	b002      	add	sp, #8
 801bf72:	bd70      	pop	{r4, r5, r6, pc}
 801bf74:	f44f 7648 	mov.w	r6, #800	; 0x320
 801bf78:	e7e1      	b.n	801bf3e <rcl_timer_is_ready+0x3a>
 801bf7a:	bf00      	nop

0801bf7c <rcl_timer_get_time_until_next_call>:
 801bf7c:	b570      	push	{r4, r5, r6, lr}
 801bf7e:	b082      	sub	sp, #8
 801bf80:	b330      	cbz	r0, 801bfd0 <rcl_timer_get_time_until_next_call+0x54>
 801bf82:	6803      	ldr	r3, [r0, #0]
 801bf84:	4604      	mov	r4, r0
 801bf86:	b33b      	cbz	r3, 801bfd8 <rcl_timer_get_time_until_next_call+0x5c>
 801bf88:	460d      	mov	r5, r1
 801bf8a:	b309      	cbz	r1, 801bfd0 <rcl_timer_get_time_until_next_call+0x54>
 801bf8c:	f3bf 8f5b 	dmb	ish
 801bf90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bf94:	f3bf 8f5b 	dmb	ish
 801bf98:	b9ab      	cbnz	r3, 801bfc6 <rcl_timer_get_time_until_next_call+0x4a>
 801bf9a:	6803      	ldr	r3, [r0, #0]
 801bf9c:	4669      	mov	r1, sp
 801bf9e:	6818      	ldr	r0, [r3, #0]
 801bfa0:	f7ff ff14 	bl	801bdcc <rcl_clock_get_now>
 801bfa4:	4606      	mov	r6, r0
 801bfa6:	b958      	cbnz	r0, 801bfc0 <rcl_timer_get_time_until_next_call+0x44>
 801bfa8:	6820      	ldr	r0, [r4, #0]
 801bfaa:	2105      	movs	r1, #5
 801bfac:	3028      	adds	r0, #40	; 0x28
 801bfae:	f001 fbf3 	bl	801d798 <__atomic_load_8>
 801bfb2:	9b00      	ldr	r3, [sp, #0]
 801bfb4:	1ac0      	subs	r0, r0, r3
 801bfb6:	9b01      	ldr	r3, [sp, #4]
 801bfb8:	eb61 0103 	sbc.w	r1, r1, r3
 801bfbc:	6028      	str	r0, [r5, #0]
 801bfbe:	6069      	str	r1, [r5, #4]
 801bfc0:	4630      	mov	r0, r6
 801bfc2:	b002      	add	sp, #8
 801bfc4:	bd70      	pop	{r4, r5, r6, pc}
 801bfc6:	f240 3621 	movw	r6, #801	; 0x321
 801bfca:	4630      	mov	r0, r6
 801bfcc:	b002      	add	sp, #8
 801bfce:	bd70      	pop	{r4, r5, r6, pc}
 801bfd0:	260b      	movs	r6, #11
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	b002      	add	sp, #8
 801bfd6:	bd70      	pop	{r4, r5, r6, pc}
 801bfd8:	f44f 7648 	mov.w	r6, #800	; 0x320
 801bfdc:	e7f0      	b.n	801bfc0 <rcl_timer_get_time_until_next_call+0x44>
 801bfde:	bf00      	nop

0801bfe0 <rcl_timer_get_guard_condition>:
 801bfe0:	b130      	cbz	r0, 801bff0 <rcl_timer_get_guard_condition+0x10>
 801bfe2:	6800      	ldr	r0, [r0, #0]
 801bfe4:	b120      	cbz	r0, 801bff0 <rcl_timer_get_guard_condition+0x10>
 801bfe6:	68c3      	ldr	r3, [r0, #12]
 801bfe8:	b10b      	cbz	r3, 801bfee <rcl_timer_get_guard_condition+0xe>
 801bfea:	3008      	adds	r0, #8
 801bfec:	4770      	bx	lr
 801bfee:	4618      	mov	r0, r3
 801bff0:	4770      	bx	lr
 801bff2:	bf00      	nop

0801bff4 <rcl_validate_enclave_name_with_size>:
 801bff4:	2800      	cmp	r0, #0
 801bff6:	d049      	beq.n	801c08c <rcl_validate_enclave_name_with_size+0x98>
 801bff8:	b570      	push	{r4, r5, r6, lr}
 801bffa:	4615      	mov	r5, r2
 801bffc:	b0c2      	sub	sp, #264	; 0x108
 801bffe:	b19a      	cbz	r2, 801c028 <rcl_validate_enclave_name_with_size+0x34>
 801c000:	461e      	mov	r6, r3
 801c002:	466a      	mov	r2, sp
 801c004:	ab01      	add	r3, sp, #4
 801c006:	460c      	mov	r4, r1
 801c008:	f7f9 fa8a 	bl	8015520 <rmw_validate_namespace_with_size>
 801c00c:	4684      	mov	ip, r0
 801c00e:	b9b8      	cbnz	r0, 801c040 <rcl_validate_enclave_name_with_size+0x4c>
 801c010:	9900      	ldr	r1, [sp, #0]
 801c012:	b171      	cbz	r1, 801c032 <rcl_validate_enclave_name_with_size+0x3e>
 801c014:	2907      	cmp	r1, #7
 801c016:	d019      	beq.n	801c04c <rcl_validate_enclave_name_with_size+0x58>
 801c018:	1e4b      	subs	r3, r1, #1
 801c01a:	2b05      	cmp	r3, #5
 801c01c:	d83a      	bhi.n	801c094 <rcl_validate_enclave_name_with_size+0xa0>
 801c01e:	e8df f003 	tbb	[pc, r3]
 801c022:	2926      	.short	0x2926
 801c024:	1d322f2c 	.word	0x1d322f2c
 801c028:	f04f 0c0b 	mov.w	ip, #11
 801c02c:	4660      	mov	r0, ip
 801c02e:	b042      	add	sp, #264	; 0x108
 801c030:	bd70      	pop	{r4, r5, r6, pc}
 801c032:	2907      	cmp	r1, #7
 801c034:	d00a      	beq.n	801c04c <rcl_validate_enclave_name_with_size+0x58>
 801c036:	2300      	movs	r3, #0
 801c038:	4660      	mov	r0, ip
 801c03a:	602b      	str	r3, [r5, #0]
 801c03c:	b042      	add	sp, #264	; 0x108
 801c03e:	bd70      	pop	{r4, r5, r6, pc}
 801c040:	f7ff f9f4 	bl	801b42c <rcl_convert_rmw_ret_to_rcl_ret>
 801c044:	4684      	mov	ip, r0
 801c046:	4660      	mov	r0, ip
 801c048:	b042      	add	sp, #264	; 0x108
 801c04a:	bd70      	pop	{r4, r5, r6, pc}
 801c04c:	2cff      	cmp	r4, #255	; 0xff
 801c04e:	d9f2      	bls.n	801c036 <rcl_validate_enclave_name_with_size+0x42>
 801c050:	6029      	str	r1, [r5, #0]
 801c052:	2e00      	cmp	r6, #0
 801c054:	d0ea      	beq.n	801c02c <rcl_validate_enclave_name_with_size+0x38>
 801c056:	23fe      	movs	r3, #254	; 0xfe
 801c058:	6033      	str	r3, [r6, #0]
 801c05a:	e7e7      	b.n	801c02c <rcl_validate_enclave_name_with_size+0x38>
 801c05c:	2306      	movs	r3, #6
 801c05e:	602b      	str	r3, [r5, #0]
 801c060:	2e00      	cmp	r6, #0
 801c062:	d0e3      	beq.n	801c02c <rcl_validate_enclave_name_with_size+0x38>
 801c064:	9b01      	ldr	r3, [sp, #4]
 801c066:	4660      	mov	r0, ip
 801c068:	6033      	str	r3, [r6, #0]
 801c06a:	b042      	add	sp, #264	; 0x108
 801c06c:	bd70      	pop	{r4, r5, r6, pc}
 801c06e:	2301      	movs	r3, #1
 801c070:	602b      	str	r3, [r5, #0]
 801c072:	e7f5      	b.n	801c060 <rcl_validate_enclave_name_with_size+0x6c>
 801c074:	2302      	movs	r3, #2
 801c076:	602b      	str	r3, [r5, #0]
 801c078:	e7f2      	b.n	801c060 <rcl_validate_enclave_name_with_size+0x6c>
 801c07a:	2303      	movs	r3, #3
 801c07c:	602b      	str	r3, [r5, #0]
 801c07e:	e7ef      	b.n	801c060 <rcl_validate_enclave_name_with_size+0x6c>
 801c080:	2304      	movs	r3, #4
 801c082:	602b      	str	r3, [r5, #0]
 801c084:	e7ec      	b.n	801c060 <rcl_validate_enclave_name_with_size+0x6c>
 801c086:	2305      	movs	r3, #5
 801c088:	602b      	str	r3, [r5, #0]
 801c08a:	e7e9      	b.n	801c060 <rcl_validate_enclave_name_with_size+0x6c>
 801c08c:	f04f 0c0b 	mov.w	ip, #11
 801c090:	4660      	mov	r0, ip
 801c092:	4770      	bx	lr
 801c094:	460b      	mov	r3, r1
 801c096:	4a04      	ldr	r2, [pc, #16]	; (801c0a8 <rcl_validate_enclave_name_with_size+0xb4>)
 801c098:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c09c:	a802      	add	r0, sp, #8
 801c09e:	f7f9 f927 	bl	80152f0 <rcutils_snprintf>
 801c0a2:	f04f 0c01 	mov.w	ip, #1
 801c0a6:	e7c1      	b.n	801c02c <rcl_validate_enclave_name_with_size+0x38>
 801c0a8:	08025950 	.word	0x08025950

0801c0ac <rcl_validate_enclave_name>:
 801c0ac:	b168      	cbz	r0, 801c0ca <rcl_validate_enclave_name+0x1e>
 801c0ae:	b570      	push	{r4, r5, r6, lr}
 801c0b0:	460d      	mov	r5, r1
 801c0b2:	4616      	mov	r6, r2
 801c0b4:	4604      	mov	r4, r0
 801c0b6:	f7e4 f923 	bl	8000300 <strlen>
 801c0ba:	4633      	mov	r3, r6
 801c0bc:	4601      	mov	r1, r0
 801c0be:	462a      	mov	r2, r5
 801c0c0:	4620      	mov	r0, r4
 801c0c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0c6:	f7ff bf95 	b.w	801bff4 <rcl_validate_enclave_name_with_size>
 801c0ca:	200b      	movs	r0, #11
 801c0cc:	4770      	bx	lr
 801c0ce:	bf00      	nop

0801c0d0 <rcl_get_zero_initialized_wait_set>:
 801c0d0:	b510      	push	{r4, lr}
 801c0d2:	4c08      	ldr	r4, [pc, #32]	; (801c0f4 <rcl_get_zero_initialized_wait_set+0x24>)
 801c0d4:	4686      	mov	lr, r0
 801c0d6:	4684      	mov	ip, r0
 801c0d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0ea:	6823      	ldr	r3, [r4, #0]
 801c0ec:	4670      	mov	r0, lr
 801c0ee:	f8cc 3000 	str.w	r3, [ip]
 801c0f2:	bd10      	pop	{r4, pc}
 801c0f4:	080259b0 	.word	0x080259b0

0801c0f8 <rcl_wait_set_is_valid>:
 801c0f8:	b118      	cbz	r0, 801c102 <rcl_wait_set_is_valid+0xa>
 801c0fa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c0fc:	3800      	subs	r0, #0
 801c0fe:	bf18      	it	ne
 801c100:	2001      	movne	r0, #1
 801c102:	4770      	bx	lr

0801c104 <rcl_wait_set_fini>:
 801c104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c108:	b082      	sub	sp, #8
 801c10a:	2800      	cmp	r0, #0
 801c10c:	f000 8095 	beq.w	801c23a <rcl_wait_set_fini+0x136>
 801c110:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c112:	4604      	mov	r4, r0
 801c114:	2e00      	cmp	r6, #0
 801c116:	f000 808c 	beq.w	801c232 <rcl_wait_set_fini+0x12e>
 801c11a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c11c:	f002 f9c0 	bl	801e4a0 <rmw_destroy_wait_set>
 801c120:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c122:	1e06      	subs	r6, r0, #0
 801c124:	bf18      	it	ne
 801c126:	f44f 7661 	movne.w	r6, #900	; 0x384
 801c12a:	2d00      	cmp	r5, #0
 801c12c:	f000 8081 	beq.w	801c232 <rcl_wait_set_fini+0x12e>
 801c130:	2700      	movs	r7, #0
 801c132:	6820      	ldr	r0, [r4, #0]
 801c134:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c138:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c13a:	6067      	str	r7, [r4, #4]
 801c13c:	602f      	str	r7, [r5, #0]
 801c13e:	b120      	cbz	r0, 801c14a <rcl_wait_set_fini+0x46>
 801c140:	9101      	str	r1, [sp, #4]
 801c142:	47c0      	blx	r8
 801c144:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c146:	9901      	ldr	r1, [sp, #4]
 801c148:	6027      	str	r7, [r4, #0]
 801c14a:	68a8      	ldr	r0, [r5, #8]
 801c14c:	b120      	cbz	r0, 801c158 <rcl_wait_set_fini+0x54>
 801c14e:	47c0      	blx	r8
 801c150:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c152:	2300      	movs	r3, #0
 801c154:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c158:	f04f 0800 	mov.w	r8, #0
 801c15c:	68a0      	ldr	r0, [r4, #8]
 801c15e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c160:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c162:	f8c4 800c 	str.w	r8, [r4, #12]
 801c166:	f8c5 800c 	str.w	r8, [r5, #12]
 801c16a:	b128      	cbz	r0, 801c178 <rcl_wait_set_fini+0x74>
 801c16c:	47b8      	blx	r7
 801c16e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c170:	f8c4 8008 	str.w	r8, [r4, #8]
 801c174:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c176:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c178:	f04f 0800 	mov.w	r8, #0
 801c17c:	6968      	ldr	r0, [r5, #20]
 801c17e:	f8c5 8010 	str.w	r8, [r5, #16]
 801c182:	b128      	cbz	r0, 801c190 <rcl_wait_set_fini+0x8c>
 801c184:	47b8      	blx	r7
 801c186:	f8c5 8014 	str.w	r8, [r5, #20]
 801c18a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c18c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c18e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c190:	f04f 0800 	mov.w	r8, #0
 801c194:	6920      	ldr	r0, [r4, #16]
 801c196:	f8c4 8014 	str.w	r8, [r4, #20]
 801c19a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801c19e:	b128      	cbz	r0, 801c1ac <rcl_wait_set_fini+0xa8>
 801c1a0:	47b8      	blx	r7
 801c1a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1a4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c1a8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c1aa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c1ac:	f04f 0800 	mov.w	r8, #0
 801c1b0:	69a0      	ldr	r0, [r4, #24]
 801c1b2:	f8c4 801c 	str.w	r8, [r4, #28]
 801c1b6:	f8c5 8018 	str.w	r8, [r5, #24]
 801c1ba:	b128      	cbz	r0, 801c1c8 <rcl_wait_set_fini+0xc4>
 801c1bc:	9101      	str	r1, [sp, #4]
 801c1be:	47b8      	blx	r7
 801c1c0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1c2:	9901      	ldr	r1, [sp, #4]
 801c1c4:	f8c4 8018 	str.w	r8, [r4, #24]
 801c1c8:	6a28      	ldr	r0, [r5, #32]
 801c1ca:	b120      	cbz	r0, 801c1d6 <rcl_wait_set_fini+0xd2>
 801c1cc:	47b8      	blx	r7
 801c1ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1d0:	2300      	movs	r3, #0
 801c1d2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c1d6:	2700      	movs	r7, #0
 801c1d8:	6a20      	ldr	r0, [r4, #32]
 801c1da:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c1de:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c1e0:	6267      	str	r7, [r4, #36]	; 0x24
 801c1e2:	626f      	str	r7, [r5, #36]	; 0x24
 801c1e4:	b120      	cbz	r0, 801c1f0 <rcl_wait_set_fini+0xec>
 801c1e6:	9101      	str	r1, [sp, #4]
 801c1e8:	47c0      	blx	r8
 801c1ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1ec:	9901      	ldr	r1, [sp, #4]
 801c1ee:	6227      	str	r7, [r4, #32]
 801c1f0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801c1f2:	b120      	cbz	r0, 801c1fe <rcl_wait_set_fini+0xfa>
 801c1f4:	47c0      	blx	r8
 801c1f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c1fe:	2700      	movs	r7, #0
 801c200:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c202:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c206:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c208:	62e7      	str	r7, [r4, #44]	; 0x2c
 801c20a:	632f      	str	r7, [r5, #48]	; 0x30
 801c20c:	b120      	cbz	r0, 801c218 <rcl_wait_set_fini+0x114>
 801c20e:	9101      	str	r1, [sp, #4]
 801c210:	47c0      	blx	r8
 801c212:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c214:	9901      	ldr	r1, [sp, #4]
 801c216:	62a7      	str	r7, [r4, #40]	; 0x28
 801c218:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c21a:	b120      	cbz	r0, 801c226 <rcl_wait_set_fini+0x122>
 801c21c:	47c0      	blx	r8
 801c21e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c220:	2300      	movs	r3, #0
 801c222:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801c226:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801c228:	4628      	mov	r0, r5
 801c22a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c22c:	4798      	blx	r3
 801c22e:	2300      	movs	r3, #0
 801c230:	6323      	str	r3, [r4, #48]	; 0x30
 801c232:	4630      	mov	r0, r6
 801c234:	b002      	add	sp, #8
 801c236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c23a:	260b      	movs	r6, #11
 801c23c:	4630      	mov	r0, r6
 801c23e:	b002      	add	sp, #8
 801c240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c244 <rcl_wait_set_add_subscription>:
 801c244:	b318      	cbz	r0, 801c28e <rcl_wait_set_add_subscription+0x4a>
 801c246:	b538      	push	{r3, r4, r5, lr}
 801c248:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c24a:	4604      	mov	r4, r0
 801c24c:	b30b      	cbz	r3, 801c292 <rcl_wait_set_add_subscription+0x4e>
 801c24e:	b319      	cbz	r1, 801c298 <rcl_wait_set_add_subscription+0x54>
 801c250:	681d      	ldr	r5, [r3, #0]
 801c252:	6840      	ldr	r0, [r0, #4]
 801c254:	4285      	cmp	r5, r0
 801c256:	d217      	bcs.n	801c288 <rcl_wait_set_add_subscription+0x44>
 801c258:	1c68      	adds	r0, r5, #1
 801c25a:	6018      	str	r0, [r3, #0]
 801c25c:	6823      	ldr	r3, [r4, #0]
 801c25e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c262:	b102      	cbz	r2, 801c266 <rcl_wait_set_add_subscription+0x22>
 801c264:	6015      	str	r5, [r2, #0]
 801c266:	4608      	mov	r0, r1
 801c268:	f7f7 ff14 	bl	8014094 <rcl_subscription_get_rmw_handle>
 801c26c:	b150      	cbz	r0, 801c284 <rcl_wait_set_add_subscription+0x40>
 801c26e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c270:	6842      	ldr	r2, [r0, #4]
 801c272:	2000      	movs	r0, #0
 801c274:	689b      	ldr	r3, [r3, #8]
 801c276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c27a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c27c:	6853      	ldr	r3, [r2, #4]
 801c27e:	3301      	adds	r3, #1
 801c280:	6053      	str	r3, [r2, #4]
 801c282:	bd38      	pop	{r3, r4, r5, pc}
 801c284:	2001      	movs	r0, #1
 801c286:	bd38      	pop	{r3, r4, r5, pc}
 801c288:	f240 3086 	movw	r0, #902	; 0x386
 801c28c:	bd38      	pop	{r3, r4, r5, pc}
 801c28e:	200b      	movs	r0, #11
 801c290:	4770      	bx	lr
 801c292:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c296:	bd38      	pop	{r3, r4, r5, pc}
 801c298:	200b      	movs	r0, #11
 801c29a:	bd38      	pop	{r3, r4, r5, pc}

0801c29c <rcl_wait_set_clear>:
 801c29c:	2800      	cmp	r0, #0
 801c29e:	d074      	beq.n	801c38a <rcl_wait_set_clear+0xee>
 801c2a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c2a2:	b510      	push	{r4, lr}
 801c2a4:	4604      	mov	r4, r0
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d071      	beq.n	801c38e <rcl_wait_set_clear+0xf2>
 801c2aa:	6800      	ldr	r0, [r0, #0]
 801c2ac:	b138      	cbz	r0, 801c2be <rcl_wait_set_clear+0x22>
 801c2ae:	6862      	ldr	r2, [r4, #4]
 801c2b0:	2100      	movs	r1, #0
 801c2b2:	0092      	lsls	r2, r2, #2
 801c2b4:	f004 fd6a 	bl	8020d8c <memset>
 801c2b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2ba:	2200      	movs	r2, #0
 801c2bc:	601a      	str	r2, [r3, #0]
 801c2be:	68a0      	ldr	r0, [r4, #8]
 801c2c0:	b138      	cbz	r0, 801c2d2 <rcl_wait_set_clear+0x36>
 801c2c2:	68e2      	ldr	r2, [r4, #12]
 801c2c4:	2100      	movs	r1, #0
 801c2c6:	0092      	lsls	r2, r2, #2
 801c2c8:	f004 fd60 	bl	8020d8c <memset>
 801c2cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2ce:	2200      	movs	r2, #0
 801c2d0:	60da      	str	r2, [r3, #12]
 801c2d2:	69a0      	ldr	r0, [r4, #24]
 801c2d4:	b138      	cbz	r0, 801c2e6 <rcl_wait_set_clear+0x4a>
 801c2d6:	69e2      	ldr	r2, [r4, #28]
 801c2d8:	2100      	movs	r1, #0
 801c2da:	0092      	lsls	r2, r2, #2
 801c2dc:	f004 fd56 	bl	8020d8c <memset>
 801c2e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2e2:	2200      	movs	r2, #0
 801c2e4:	619a      	str	r2, [r3, #24]
 801c2e6:	6a20      	ldr	r0, [r4, #32]
 801c2e8:	b138      	cbz	r0, 801c2fa <rcl_wait_set_clear+0x5e>
 801c2ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c2ec:	2100      	movs	r1, #0
 801c2ee:	0092      	lsls	r2, r2, #2
 801c2f0:	f004 fd4c 	bl	8020d8c <memset>
 801c2f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2f6:	2200      	movs	r2, #0
 801c2f8:	625a      	str	r2, [r3, #36]	; 0x24
 801c2fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c2fc:	b138      	cbz	r0, 801c30e <rcl_wait_set_clear+0x72>
 801c2fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c300:	2100      	movs	r1, #0
 801c302:	0092      	lsls	r2, r2, #2
 801c304:	f004 fd42 	bl	8020d8c <memset>
 801c308:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c30a:	2200      	movs	r2, #0
 801c30c:	631a      	str	r2, [r3, #48]	; 0x30
 801c30e:	6920      	ldr	r0, [r4, #16]
 801c310:	b138      	cbz	r0, 801c322 <rcl_wait_set_clear+0x86>
 801c312:	6962      	ldr	r2, [r4, #20]
 801c314:	2100      	movs	r1, #0
 801c316:	0092      	lsls	r2, r2, #2
 801c318:	f004 fd38 	bl	8020d8c <memset>
 801c31c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c31e:	2200      	movs	r2, #0
 801c320:	641a      	str	r2, [r3, #64]	; 0x40
 801c322:	6898      	ldr	r0, [r3, #8]
 801c324:	b138      	cbz	r0, 801c336 <rcl_wait_set_clear+0x9a>
 801c326:	685a      	ldr	r2, [r3, #4]
 801c328:	2100      	movs	r1, #0
 801c32a:	0092      	lsls	r2, r2, #2
 801c32c:	f004 fd2e 	bl	8020d8c <memset>
 801c330:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c332:	2200      	movs	r2, #0
 801c334:	605a      	str	r2, [r3, #4]
 801c336:	6958      	ldr	r0, [r3, #20]
 801c338:	b138      	cbz	r0, 801c34a <rcl_wait_set_clear+0xae>
 801c33a:	691a      	ldr	r2, [r3, #16]
 801c33c:	2100      	movs	r1, #0
 801c33e:	0092      	lsls	r2, r2, #2
 801c340:	f004 fd24 	bl	8020d8c <memset>
 801c344:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c346:	2200      	movs	r2, #0
 801c348:	611a      	str	r2, [r3, #16]
 801c34a:	6a18      	ldr	r0, [r3, #32]
 801c34c:	b138      	cbz	r0, 801c35e <rcl_wait_set_clear+0xc2>
 801c34e:	69da      	ldr	r2, [r3, #28]
 801c350:	2100      	movs	r1, #0
 801c352:	0092      	lsls	r2, r2, #2
 801c354:	f004 fd1a 	bl	8020d8c <memset>
 801c358:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c35a:	2200      	movs	r2, #0
 801c35c:	61da      	str	r2, [r3, #28]
 801c35e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c360:	b138      	cbz	r0, 801c372 <rcl_wait_set_clear+0xd6>
 801c362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c364:	2100      	movs	r1, #0
 801c366:	0092      	lsls	r2, r2, #2
 801c368:	f004 fd10 	bl	8020d8c <memset>
 801c36c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c36e:	2200      	movs	r2, #0
 801c370:	629a      	str	r2, [r3, #40]	; 0x28
 801c372:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c374:	b140      	cbz	r0, 801c388 <rcl_wait_set_clear+0xec>
 801c376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c378:	2100      	movs	r1, #0
 801c37a:	0092      	lsls	r2, r2, #2
 801c37c:	f004 fd06 	bl	8020d8c <memset>
 801c380:	2300      	movs	r3, #0
 801c382:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c384:	4618      	mov	r0, r3
 801c386:	6353      	str	r3, [r2, #52]	; 0x34
 801c388:	bd10      	pop	{r4, pc}
 801c38a:	200b      	movs	r0, #11
 801c38c:	4770      	bx	lr
 801c38e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c392:	bd10      	pop	{r4, pc}

0801c394 <rcl_wait_set_resize>:
 801c394:	2800      	cmp	r0, #0
 801c396:	f000 8180 	beq.w	801c69a <rcl_wait_set_resize+0x306>
 801c39a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c39e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c3a0:	b083      	sub	sp, #12
 801c3a2:	4605      	mov	r5, r0
 801c3a4:	2c00      	cmp	r4, #0
 801c3a6:	f000 817a 	beq.w	801c69e <rcl_wait_set_resize+0x30a>
 801c3aa:	f04f 0900 	mov.w	r9, #0
 801c3ae:	461f      	mov	r7, r3
 801c3b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c3b4:	4688      	mov	r8, r1
 801c3b6:	4616      	mov	r6, r2
 801c3b8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c3bc:	f8c0 9004 	str.w	r9, [r0, #4]
 801c3c0:	f8c4 9000 	str.w	r9, [r4]
 801c3c4:	2900      	cmp	r1, #0
 801c3c6:	f000 80bf 	beq.w	801c548 <rcl_wait_set_resize+0x1b4>
 801c3ca:	008c      	lsls	r4, r1, #2
 801c3cc:	4652      	mov	r2, sl
 801c3ce:	6800      	ldr	r0, [r0, #0]
 801c3d0:	4621      	mov	r1, r4
 801c3d2:	9301      	str	r3, [sp, #4]
 801c3d4:	4798      	blx	r3
 801c3d6:	9b01      	ldr	r3, [sp, #4]
 801c3d8:	6028      	str	r0, [r5, #0]
 801c3da:	2800      	cmp	r0, #0
 801c3dc:	f000 80f6 	beq.w	801c5cc <rcl_wait_set_resize+0x238>
 801c3e0:	4622      	mov	r2, r4
 801c3e2:	4649      	mov	r1, r9
 801c3e4:	9301      	str	r3, [sp, #4]
 801c3e6:	f004 fcd1 	bl	8020d8c <memset>
 801c3ea:	f8c5 8004 	str.w	r8, [r5, #4]
 801c3ee:	4652      	mov	r2, sl
 801c3f0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c3f4:	4621      	mov	r1, r4
 801c3f6:	9b01      	ldr	r3, [sp, #4]
 801c3f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c3fc:	f8c8 9004 	str.w	r9, [r8, #4]
 801c400:	4798      	blx	r3
 801c402:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c404:	f8c8 0008 	str.w	r0, [r8, #8]
 801c408:	689b      	ldr	r3, [r3, #8]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	f000 814a 	beq.w	801c6a4 <rcl_wait_set_resize+0x310>
 801c410:	4622      	mov	r2, r4
 801c412:	4649      	mov	r1, r9
 801c414:	4618      	mov	r0, r3
 801c416:	f004 fcb9 	bl	8020d8c <memset>
 801c41a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c41c:	f04f 0800 	mov.w	r8, #0
 801c420:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c424:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c428:	f8c5 800c 	str.w	r8, [r5, #12]
 801c42c:	f8c4 800c 	str.w	r8, [r4, #12]
 801c430:	2e00      	cmp	r6, #0
 801c432:	f040 809b 	bne.w	801c56c <rcl_wait_set_resize+0x1d8>
 801c436:	68a8      	ldr	r0, [r5, #8]
 801c438:	b128      	cbz	r0, 801c446 <rcl_wait_set_resize+0xb2>
 801c43a:	4649      	mov	r1, r9
 801c43c:	4790      	blx	r2
 801c43e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c440:	60ae      	str	r6, [r5, #8]
 801c442:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c446:	f04f 0800 	mov.w	r8, #0
 801c44a:	19f6      	adds	r6, r6, r7
 801c44c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c450:	f040 80a2 	bne.w	801c598 <rcl_wait_set_resize+0x204>
 801c454:	6960      	ldr	r0, [r4, #20]
 801c456:	b130      	cbz	r0, 801c466 <rcl_wait_set_resize+0xd2>
 801c458:	4649      	mov	r1, r9
 801c45a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c45c:	4798      	blx	r3
 801c45e:	6166      	str	r6, [r4, #20]
 801c460:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c462:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c466:	2600      	movs	r6, #0
 801c468:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c46c:	616e      	str	r6, [r5, #20]
 801c46e:	6426      	str	r6, [r4, #64]	; 0x40
 801c470:	2f00      	cmp	r7, #0
 801c472:	f040 80af 	bne.w	801c5d4 <rcl_wait_set_resize+0x240>
 801c476:	6928      	ldr	r0, [r5, #16]
 801c478:	b138      	cbz	r0, 801c48a <rcl_wait_set_resize+0xf6>
 801c47a:	4649      	mov	r1, r9
 801c47c:	47d0      	blx	sl
 801c47e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c480:	612f      	str	r7, [r5, #16]
 801c482:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c486:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c48a:	2600      	movs	r6, #0
 801c48c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c48e:	61ee      	str	r6, [r5, #28]
 801c490:	61a6      	str	r6, [r4, #24]
 801c492:	2b00      	cmp	r3, #0
 801c494:	f040 8093 	bne.w	801c5be <rcl_wait_set_resize+0x22a>
 801c498:	69a8      	ldr	r0, [r5, #24]
 801c49a:	b120      	cbz	r0, 801c4a6 <rcl_wait_set_resize+0x112>
 801c49c:	4649      	mov	r1, r9
 801c49e:	47d0      	blx	sl
 801c4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4a4:	61ab      	str	r3, [r5, #24]
 801c4a6:	6a20      	ldr	r0, [r4, #32]
 801c4a8:	b128      	cbz	r0, 801c4b6 <rcl_wait_set_resize+0x122>
 801c4aa:	4649      	mov	r1, r9
 801c4ac:	47d0      	blx	sl
 801c4ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c4b6:	2600      	movs	r6, #0
 801c4b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c4ba:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c4bc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c4c0:	626e      	str	r6, [r5, #36]	; 0x24
 801c4c2:	6266      	str	r6, [r4, #36]	; 0x24
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	f000 8098 	beq.w	801c5fa <rcl_wait_set_resize+0x266>
 801c4ca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c4ce:	463a      	mov	r2, r7
 801c4d0:	6a28      	ldr	r0, [r5, #32]
 801c4d2:	4651      	mov	r1, sl
 801c4d4:	47c8      	blx	r9
 801c4d6:	6228      	str	r0, [r5, #32]
 801c4d8:	2800      	cmp	r0, #0
 801c4da:	d077      	beq.n	801c5cc <rcl_wait_set_resize+0x238>
 801c4dc:	4652      	mov	r2, sl
 801c4de:	4631      	mov	r1, r6
 801c4e0:	f004 fc54 	bl	8020d8c <memset>
 801c4e4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c4e8:	463a      	mov	r2, r7
 801c4ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c4ec:	4651      	mov	r1, sl
 801c4ee:	626b      	str	r3, [r5, #36]	; 0x24
 801c4f0:	62a6      	str	r6, [r4, #40]	; 0x28
 801c4f2:	47c8      	blx	r9
 801c4f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c4f6:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c4f8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c4fa:	2c00      	cmp	r4, #0
 801c4fc:	f000 80f2 	beq.w	801c6e4 <rcl_wait_set_resize+0x350>
 801c500:	4620      	mov	r0, r4
 801c502:	4652      	mov	r2, sl
 801c504:	4631      	mov	r1, r6
 801c506:	f004 fc41 	bl	8020d8c <memset>
 801c50a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c50c:	2600      	movs	r6, #0
 801c50e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c510:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c512:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c516:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c518:	6326      	str	r6, [r4, #48]	; 0x30
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	f040 8097 	bne.w	801c64e <rcl_wait_set_resize+0x2ba>
 801c520:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c522:	b120      	cbz	r0, 801c52e <rcl_wait_set_resize+0x19a>
 801c524:	4639      	mov	r1, r7
 801c526:	47c0      	blx	r8
 801c528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c52a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c52c:	62ab      	str	r3, [r5, #40]	; 0x28
 801c52e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c530:	2800      	cmp	r0, #0
 801c532:	d04c      	beq.n	801c5ce <rcl_wait_set_resize+0x23a>
 801c534:	4639      	mov	r1, r7
 801c536:	47c0      	blx	r8
 801c538:	2300      	movs	r3, #0
 801c53a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c53c:	4618      	mov	r0, r3
 801c53e:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c542:	b003      	add	sp, #12
 801c544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c548:	6800      	ldr	r0, [r0, #0]
 801c54a:	b120      	cbz	r0, 801c556 <rcl_wait_set_resize+0x1c2>
 801c54c:	4651      	mov	r1, sl
 801c54e:	47d8      	blx	fp
 801c550:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c552:	f8c5 8000 	str.w	r8, [r5]
 801c556:	68a0      	ldr	r0, [r4, #8]
 801c558:	2800      	cmp	r0, #0
 801c55a:	f43f af5f 	beq.w	801c41c <rcl_wait_set_resize+0x88>
 801c55e:	4651      	mov	r1, sl
 801c560:	47d8      	blx	fp
 801c562:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c564:	2300      	movs	r3, #0
 801c566:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c56a:	e757      	b.n	801c41c <rcl_wait_set_resize+0x88>
 801c56c:	00b4      	lsls	r4, r6, #2
 801c56e:	464a      	mov	r2, r9
 801c570:	68a8      	ldr	r0, [r5, #8]
 801c572:	4621      	mov	r1, r4
 801c574:	4798      	blx	r3
 801c576:	60a8      	str	r0, [r5, #8]
 801c578:	b340      	cbz	r0, 801c5cc <rcl_wait_set_resize+0x238>
 801c57a:	4622      	mov	r2, r4
 801c57c:	4641      	mov	r1, r8
 801c57e:	f004 fc05 	bl	8020d8c <memset>
 801c582:	f04f 0800 	mov.w	r8, #0
 801c586:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c588:	60ee      	str	r6, [r5, #12]
 801c58a:	19f6      	adds	r6, r6, r7
 801c58c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c590:	f8c4 8010 	str.w	r8, [r4, #16]
 801c594:	f43f af5e 	beq.w	801c454 <rcl_wait_set_resize+0xc0>
 801c598:	00b6      	lsls	r6, r6, #2
 801c59a:	464a      	mov	r2, r9
 801c59c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c59e:	6960      	ldr	r0, [r4, #20]
 801c5a0:	4631      	mov	r1, r6
 801c5a2:	4798      	blx	r3
 801c5a4:	4681      	mov	r9, r0
 801c5a6:	6160      	str	r0, [r4, #20]
 801c5a8:	2800      	cmp	r0, #0
 801c5aa:	f000 8084 	beq.w	801c6b6 <rcl_wait_set_resize+0x322>
 801c5ae:	4632      	mov	r2, r6
 801c5b0:	4641      	mov	r1, r8
 801c5b2:	f004 fbeb 	bl	8020d8c <memset>
 801c5b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c5b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c5bc:	e753      	b.n	801c466 <rcl_wait_set_resize+0xd2>
 801c5be:	009c      	lsls	r4, r3, #2
 801c5c0:	464a      	mov	r2, r9
 801c5c2:	69a8      	ldr	r0, [r5, #24]
 801c5c4:	4621      	mov	r1, r4
 801c5c6:	47c0      	blx	r8
 801c5c8:	61a8      	str	r0, [r5, #24]
 801c5ca:	bb40      	cbnz	r0, 801c61e <rcl_wait_set_resize+0x28a>
 801c5cc:	200a      	movs	r0, #10
 801c5ce:	b003      	add	sp, #12
 801c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d4:	00bc      	lsls	r4, r7, #2
 801c5d6:	464a      	mov	r2, r9
 801c5d8:	6928      	ldr	r0, [r5, #16]
 801c5da:	4621      	mov	r1, r4
 801c5dc:	47c0      	blx	r8
 801c5de:	6128      	str	r0, [r5, #16]
 801c5e0:	2800      	cmp	r0, #0
 801c5e2:	d0f3      	beq.n	801c5cc <rcl_wait_set_resize+0x238>
 801c5e4:	4622      	mov	r2, r4
 801c5e6:	4631      	mov	r1, r6
 801c5e8:	f004 fbd0 	bl	8020d8c <memset>
 801c5ec:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c5ee:	616f      	str	r7, [r5, #20]
 801c5f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c5f4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c5f8:	e747      	b.n	801c48a <rcl_wait_set_resize+0xf6>
 801c5fa:	6a28      	ldr	r0, [r5, #32]
 801c5fc:	b120      	cbz	r0, 801c608 <rcl_wait_set_resize+0x274>
 801c5fe:	4639      	mov	r1, r7
 801c600:	47c0      	blx	r8
 801c602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c604:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c606:	622b      	str	r3, [r5, #32]
 801c608:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c60a:	2800      	cmp	r0, #0
 801c60c:	f43f af7e 	beq.w	801c50c <rcl_wait_set_resize+0x178>
 801c610:	4639      	mov	r1, r7
 801c612:	47c0      	blx	r8
 801c614:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c616:	2300      	movs	r3, #0
 801c618:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801c61c:	e776      	b.n	801c50c <rcl_wait_set_resize+0x178>
 801c61e:	4622      	mov	r2, r4
 801c620:	4631      	mov	r1, r6
 801c622:	f004 fbb3 	bl	8020d8c <memset>
 801c626:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801c628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c62a:	464a      	mov	r2, r9
 801c62c:	6a38      	ldr	r0, [r7, #32]
 801c62e:	4621      	mov	r1, r4
 801c630:	61eb      	str	r3, [r5, #28]
 801c632:	61fe      	str	r6, [r7, #28]
 801c634:	47c0      	blx	r8
 801c636:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c638:	6238      	str	r0, [r7, #32]
 801c63a:	6a1f      	ldr	r7, [r3, #32]
 801c63c:	2f00      	cmp	r7, #0
 801c63e:	d04a      	beq.n	801c6d6 <rcl_wait_set_resize+0x342>
 801c640:	4622      	mov	r2, r4
 801c642:	4631      	mov	r1, r6
 801c644:	4638      	mov	r0, r7
 801c646:	f004 fba1 	bl	8020d8c <memset>
 801c64a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c64c:	e733      	b.n	801c4b6 <rcl_wait_set_resize+0x122>
 801c64e:	009c      	lsls	r4, r3, #2
 801c650:	463a      	mov	r2, r7
 801c652:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c654:	4621      	mov	r1, r4
 801c656:	47c8      	blx	r9
 801c658:	62a8      	str	r0, [r5, #40]	; 0x28
 801c65a:	2800      	cmp	r0, #0
 801c65c:	d0b6      	beq.n	801c5cc <rcl_wait_set_resize+0x238>
 801c65e:	4622      	mov	r2, r4
 801c660:	4631      	mov	r1, r6
 801c662:	f004 fb93 	bl	8020d8c <memset>
 801c666:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c66c:	463a      	mov	r2, r7
 801c66e:	4621      	mov	r1, r4
 801c670:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801c674:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c676:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801c67a:	47c8      	blx	r9
 801c67c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c67e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801c682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c684:	2b00      	cmp	r3, #0
 801c686:	d034      	beq.n	801c6f2 <rcl_wait_set_resize+0x35e>
 801c688:	4622      	mov	r2, r4
 801c68a:	4631      	mov	r1, r6
 801c68c:	4618      	mov	r0, r3
 801c68e:	f004 fb7d 	bl	8020d8c <memset>
 801c692:	4630      	mov	r0, r6
 801c694:	b003      	add	sp, #12
 801c696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c69a:	200b      	movs	r0, #11
 801c69c:	4770      	bx	lr
 801c69e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c6a2:	e794      	b.n	801c5ce <rcl_wait_set_resize+0x23a>
 801c6a4:	6828      	ldr	r0, [r5, #0]
 801c6a6:	4651      	mov	r1, sl
 801c6a8:	9301      	str	r3, [sp, #4]
 801c6aa:	47d8      	blx	fp
 801c6ac:	9b01      	ldr	r3, [sp, #4]
 801c6ae:	200a      	movs	r0, #10
 801c6b0:	e9c5 3300 	strd	r3, r3, [r5]
 801c6b4:	e78b      	b.n	801c5ce <rcl_wait_set_resize+0x23a>
 801c6b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c6b8:	68a8      	ldr	r0, [r5, #8]
 801c6ba:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c6be:	4798      	blx	r3
 801c6c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c6c2:	6928      	ldr	r0, [r5, #16]
 801c6c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c6c6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c6c8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801c6cc:	4790      	blx	r2
 801c6ce:	200a      	movs	r0, #10
 801c6d0:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801c6d4:	e77b      	b.n	801c5ce <rcl_wait_set_resize+0x23a>
 801c6d6:	69a8      	ldr	r0, [r5, #24]
 801c6d8:	4649      	mov	r1, r9
 801c6da:	47d0      	blx	sl
 801c6dc:	200a      	movs	r0, #10
 801c6de:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801c6e2:	e774      	b.n	801c5ce <rcl_wait_set_resize+0x23a>
 801c6e4:	6a28      	ldr	r0, [r5, #32]
 801c6e6:	4639      	mov	r1, r7
 801c6e8:	47c0      	blx	r8
 801c6ea:	200a      	movs	r0, #10
 801c6ec:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801c6f0:	e76d      	b.n	801c5ce <rcl_wait_set_resize+0x23a>
 801c6f2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c6f4:	4639      	mov	r1, r7
 801c6f6:	9301      	str	r3, [sp, #4]
 801c6f8:	47c0      	blx	r8
 801c6fa:	9b01      	ldr	r3, [sp, #4]
 801c6fc:	200a      	movs	r0, #10
 801c6fe:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c702:	e764      	b.n	801c5ce <rcl_wait_set_resize+0x23a>

0801c704 <rcl_wait_set_init>:
 801c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c708:	b085      	sub	sp, #20
 801c70a:	4605      	mov	r5, r0
 801c70c:	460e      	mov	r6, r1
 801c70e:	4617      	mov	r7, r2
 801c710:	a812      	add	r0, sp, #72	; 0x48
 801c712:	4698      	mov	r8, r3
 801c714:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801c718:	f7f8 fca4 	bl	8015064 <rcutils_allocator_is_valid>
 801c71c:	2d00      	cmp	r5, #0
 801c71e:	d072      	beq.n	801c806 <rcl_wait_set_init+0x102>
 801c720:	f080 0001 	eor.w	r0, r0, #1
 801c724:	b2c0      	uxtb	r0, r0
 801c726:	2800      	cmp	r0, #0
 801c728:	d16d      	bne.n	801c806 <rcl_wait_set_init+0x102>
 801c72a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c72e:	f1ba 0f00 	cmp.w	sl, #0
 801c732:	d004      	beq.n	801c73e <rcl_wait_set_init+0x3a>
 801c734:	2464      	movs	r4, #100	; 0x64
 801c736:	4620      	mov	r0, r4
 801c738:	b005      	add	sp, #20
 801c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c73e:	f1b9 0f00 	cmp.w	r9, #0
 801c742:	d060      	beq.n	801c806 <rcl_wait_set_init+0x102>
 801c744:	4648      	mov	r0, r9
 801c746:	f7fe fe8f 	bl	801b468 <rcl_context_is_valid>
 801c74a:	2800      	cmp	r0, #0
 801c74c:	d068      	beq.n	801c820 <rcl_wait_set_init+0x11c>
 801c74e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c750:	205c      	movs	r0, #92	; 0x5c
 801c752:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c754:	4798      	blx	r3
 801c756:	6328      	str	r0, [r5, #48]	; 0x30
 801c758:	2800      	cmp	r0, #0
 801c75a:	d063      	beq.n	801c824 <rcl_wait_set_init+0x120>
 801c75c:	225c      	movs	r2, #92	; 0x5c
 801c75e:	4651      	mov	r1, sl
 801c760:	f004 fb14 	bl	8020d8c <memset>
 801c764:	ac12      	add	r4, sp, #72	; 0x48
 801c766:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801c76a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c76e:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801c772:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801c776:	eb03 0e02 	add.w	lr, r3, r2
 801c77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c77c:	f8d9 9000 	ldr.w	r9, [r9]
 801c780:	449e      	add	lr, r3
 801c782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c784:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801c788:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801c78c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801c790:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801c794:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801c798:	44be      	add	lr, r7
 801c79a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c79e:	6823      	ldr	r3, [r4, #0]
 801c7a0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801c7a4:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801c7a8:	f8cc 3000 	str.w	r3, [ip]
 801c7ac:	f001 fe6e 	bl	801e48c <rmw_create_wait_set>
 801c7b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c7b2:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801c7b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c7b8:	b350      	cbz	r0, 801c810 <rcl_wait_set_init+0x10c>
 801c7ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c7bc:	4643      	mov	r3, r8
 801c7be:	463a      	mov	r2, r7
 801c7c0:	4631      	mov	r1, r6
 801c7c2:	9402      	str	r4, [sp, #8]
 801c7c4:	4628      	mov	r0, r5
 801c7c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c7c8:	9401      	str	r4, [sp, #4]
 801c7ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c7cc:	9400      	str	r4, [sp, #0]
 801c7ce:	f7ff fde1 	bl	801c394 <rcl_wait_set_resize>
 801c7d2:	4604      	mov	r4, r0
 801c7d4:	2800      	cmp	r0, #0
 801c7d6:	d0ae      	beq.n	801c736 <rcl_wait_set_init+0x32>
 801c7d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c7da:	bb2b      	cbnz	r3, 801c828 <rcl_wait_set_init+0x124>
 801c7dc:	2600      	movs	r6, #0
 801c7de:	4628      	mov	r0, r5
 801c7e0:	4633      	mov	r3, r6
 801c7e2:	4632      	mov	r2, r6
 801c7e4:	4631      	mov	r1, r6
 801c7e6:	9600      	str	r6, [sp, #0]
 801c7e8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801c7ec:	f7ff fdd2 	bl	801c394 <rcl_wait_set_resize>
 801c7f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c7f2:	2800      	cmp	r0, #0
 801c7f4:	d09f      	beq.n	801c736 <rcl_wait_set_init+0x32>
 801c7f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801c7f8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801c7fa:	4798      	blx	r3
 801c7fc:	4620      	mov	r0, r4
 801c7fe:	632e      	str	r6, [r5, #48]	; 0x30
 801c800:	b005      	add	sp, #20
 801c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c806:	240b      	movs	r4, #11
 801c808:	4620      	mov	r0, r4
 801c80a:	b005      	add	sp, #20
 801c80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c810:	2401      	movs	r4, #1
 801c812:	f001 fe45 	bl	801e4a0 <rmw_destroy_wait_set>
 801c816:	2800      	cmp	r0, #0
 801c818:	bf18      	it	ne
 801c81a:	f44f 7461 	movne.w	r4, #900	; 0x384
 801c81e:	e7dd      	b.n	801c7dc <rcl_wait_set_init+0xd8>
 801c820:	2465      	movs	r4, #101	; 0x65
 801c822:	e788      	b.n	801c736 <rcl_wait_set_init+0x32>
 801c824:	240a      	movs	r4, #10
 801c826:	e786      	b.n	801c736 <rcl_wait_set_init+0x32>
 801c828:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c82a:	e7f2      	b.n	801c812 <rcl_wait_set_init+0x10e>

0801c82c <rcl_wait_set_add_guard_condition>:
 801c82c:	b318      	cbz	r0, 801c876 <rcl_wait_set_add_guard_condition+0x4a>
 801c82e:	b538      	push	{r3, r4, r5, lr}
 801c830:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c832:	4604      	mov	r4, r0
 801c834:	b30b      	cbz	r3, 801c87a <rcl_wait_set_add_guard_condition+0x4e>
 801c836:	b319      	cbz	r1, 801c880 <rcl_wait_set_add_guard_condition+0x54>
 801c838:	68dd      	ldr	r5, [r3, #12]
 801c83a:	68c0      	ldr	r0, [r0, #12]
 801c83c:	4285      	cmp	r5, r0
 801c83e:	d217      	bcs.n	801c870 <rcl_wait_set_add_guard_condition+0x44>
 801c840:	1c68      	adds	r0, r5, #1
 801c842:	60d8      	str	r0, [r3, #12]
 801c844:	68a3      	ldr	r3, [r4, #8]
 801c846:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c84a:	b102      	cbz	r2, 801c84e <rcl_wait_set_add_guard_condition+0x22>
 801c84c:	6015      	str	r5, [r2, #0]
 801c84e:	4608      	mov	r0, r1
 801c850:	f7fe ff18 	bl	801b684 <rcl_guard_condition_get_rmw_handle>
 801c854:	b150      	cbz	r0, 801c86c <rcl_wait_set_add_guard_condition+0x40>
 801c856:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c858:	6842      	ldr	r2, [r0, #4]
 801c85a:	2000      	movs	r0, #0
 801c85c:	695b      	ldr	r3, [r3, #20]
 801c85e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c862:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c864:	6913      	ldr	r3, [r2, #16]
 801c866:	3301      	adds	r3, #1
 801c868:	6113      	str	r3, [r2, #16]
 801c86a:	bd38      	pop	{r3, r4, r5, pc}
 801c86c:	2001      	movs	r0, #1
 801c86e:	bd38      	pop	{r3, r4, r5, pc}
 801c870:	f240 3086 	movw	r0, #902	; 0x386
 801c874:	bd38      	pop	{r3, r4, r5, pc}
 801c876:	200b      	movs	r0, #11
 801c878:	4770      	bx	lr
 801c87a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c87e:	bd38      	pop	{r3, r4, r5, pc}
 801c880:	200b      	movs	r0, #11
 801c882:	bd38      	pop	{r3, r4, r5, pc}

0801c884 <rcl_wait_set_add_timer>:
 801c884:	b328      	cbz	r0, 801c8d2 <rcl_wait_set_add_timer+0x4e>
 801c886:	b538      	push	{r3, r4, r5, lr}
 801c888:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c88a:	4604      	mov	r4, r0
 801c88c:	b31b      	cbz	r3, 801c8d6 <rcl_wait_set_add_timer+0x52>
 801c88e:	b329      	cbz	r1, 801c8dc <rcl_wait_set_add_timer+0x58>
 801c890:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801c892:	6965      	ldr	r5, [r4, #20]
 801c894:	42a8      	cmp	r0, r5
 801c896:	d219      	bcs.n	801c8cc <rcl_wait_set_add_timer+0x48>
 801c898:	1c45      	adds	r5, r0, #1
 801c89a:	641d      	str	r5, [r3, #64]	; 0x40
 801c89c:	6923      	ldr	r3, [r4, #16]
 801c89e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801c8a2:	b102      	cbz	r2, 801c8a6 <rcl_wait_set_add_timer+0x22>
 801c8a4:	6010      	str	r0, [r2, #0]
 801c8a6:	4608      	mov	r0, r1
 801c8a8:	f7ff fb9a 	bl	801bfe0 <rcl_timer_get_guard_condition>
 801c8ac:	b168      	cbz	r0, 801c8ca <rcl_wait_set_add_timer+0x46>
 801c8ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c8b0:	68e3      	ldr	r3, [r4, #12]
 801c8b2:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801c8b4:	3b01      	subs	r3, #1
 801c8b6:	441d      	add	r5, r3
 801c8b8:	f7fe fee4 	bl	801b684 <rcl_guard_condition_get_rmw_handle>
 801c8bc:	b180      	cbz	r0, 801c8e0 <rcl_wait_set_add_timer+0x5c>
 801c8be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c8c0:	6842      	ldr	r2, [r0, #4]
 801c8c2:	2000      	movs	r0, #0
 801c8c4:	695b      	ldr	r3, [r3, #20]
 801c8c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c8ca:	bd38      	pop	{r3, r4, r5, pc}
 801c8cc:	f240 3086 	movw	r0, #902	; 0x386
 801c8d0:	bd38      	pop	{r3, r4, r5, pc}
 801c8d2:	200b      	movs	r0, #11
 801c8d4:	4770      	bx	lr
 801c8d6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c8da:	bd38      	pop	{r3, r4, r5, pc}
 801c8dc:	200b      	movs	r0, #11
 801c8de:	bd38      	pop	{r3, r4, r5, pc}
 801c8e0:	2001      	movs	r0, #1
 801c8e2:	bd38      	pop	{r3, r4, r5, pc}

0801c8e4 <rcl_wait_set_add_client>:
 801c8e4:	b318      	cbz	r0, 801c92e <rcl_wait_set_add_client+0x4a>
 801c8e6:	b538      	push	{r3, r4, r5, lr}
 801c8e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c8ea:	4604      	mov	r4, r0
 801c8ec:	b30b      	cbz	r3, 801c932 <rcl_wait_set_add_client+0x4e>
 801c8ee:	b319      	cbz	r1, 801c938 <rcl_wait_set_add_client+0x54>
 801c8f0:	699d      	ldr	r5, [r3, #24]
 801c8f2:	69c0      	ldr	r0, [r0, #28]
 801c8f4:	4285      	cmp	r5, r0
 801c8f6:	d217      	bcs.n	801c928 <rcl_wait_set_add_client+0x44>
 801c8f8:	1c68      	adds	r0, r5, #1
 801c8fa:	6198      	str	r0, [r3, #24]
 801c8fc:	69a3      	ldr	r3, [r4, #24]
 801c8fe:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c902:	b102      	cbz	r2, 801c906 <rcl_wait_set_add_client+0x22>
 801c904:	6015      	str	r5, [r2, #0]
 801c906:	4608      	mov	r0, r1
 801c908:	f7fe fd00 	bl	801b30c <rcl_client_get_rmw_handle>
 801c90c:	b150      	cbz	r0, 801c924 <rcl_wait_set_add_client+0x40>
 801c90e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c910:	6842      	ldr	r2, [r0, #4]
 801c912:	2000      	movs	r0, #0
 801c914:	6a1b      	ldr	r3, [r3, #32]
 801c916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c91a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c91c:	69d3      	ldr	r3, [r2, #28]
 801c91e:	3301      	adds	r3, #1
 801c920:	61d3      	str	r3, [r2, #28]
 801c922:	bd38      	pop	{r3, r4, r5, pc}
 801c924:	2001      	movs	r0, #1
 801c926:	bd38      	pop	{r3, r4, r5, pc}
 801c928:	f240 3086 	movw	r0, #902	; 0x386
 801c92c:	bd38      	pop	{r3, r4, r5, pc}
 801c92e:	200b      	movs	r0, #11
 801c930:	4770      	bx	lr
 801c932:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c936:	bd38      	pop	{r3, r4, r5, pc}
 801c938:	200b      	movs	r0, #11
 801c93a:	bd38      	pop	{r3, r4, r5, pc}

0801c93c <rcl_wait_set_add_service>:
 801c93c:	b318      	cbz	r0, 801c986 <rcl_wait_set_add_service+0x4a>
 801c93e:	b538      	push	{r3, r4, r5, lr}
 801c940:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c942:	4604      	mov	r4, r0
 801c944:	b30b      	cbz	r3, 801c98a <rcl_wait_set_add_service+0x4e>
 801c946:	b319      	cbz	r1, 801c990 <rcl_wait_set_add_service+0x54>
 801c948:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c94a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c94c:	4285      	cmp	r5, r0
 801c94e:	d217      	bcs.n	801c980 <rcl_wait_set_add_service+0x44>
 801c950:	1c68      	adds	r0, r5, #1
 801c952:	6258      	str	r0, [r3, #36]	; 0x24
 801c954:	6a23      	ldr	r3, [r4, #32]
 801c956:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c95a:	b102      	cbz	r2, 801c95e <rcl_wait_set_add_service+0x22>
 801c95c:	6015      	str	r5, [r2, #0]
 801c95e:	4608      	mov	r0, r1
 801c960:	f7f7 f9f8 	bl	8013d54 <rcl_service_get_rmw_handle>
 801c964:	b150      	cbz	r0, 801c97c <rcl_wait_set_add_service+0x40>
 801c966:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c968:	6842      	ldr	r2, [r0, #4]
 801c96a:	2000      	movs	r0, #0
 801c96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c96e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c972:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c974:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801c976:	3301      	adds	r3, #1
 801c978:	6293      	str	r3, [r2, #40]	; 0x28
 801c97a:	bd38      	pop	{r3, r4, r5, pc}
 801c97c:	2001      	movs	r0, #1
 801c97e:	bd38      	pop	{r3, r4, r5, pc}
 801c980:	f240 3086 	movw	r0, #902	; 0x386
 801c984:	bd38      	pop	{r3, r4, r5, pc}
 801c986:	200b      	movs	r0, #11
 801c988:	4770      	bx	lr
 801c98a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c98e:	bd38      	pop	{r3, r4, r5, pc}
 801c990:	200b      	movs	r0, #11
 801c992:	bd38      	pop	{r3, r4, r5, pc}
 801c994:	0000      	movs	r0, r0
	...

0801c998 <rcl_wait>:
 801c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c99c:	ed2d 8b02 	vpush	{d8}
 801c9a0:	b08d      	sub	sp, #52	; 0x34
 801c9a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c9a6:	2800      	cmp	r0, #0
 801c9a8:	f000 814f 	beq.w	801cc4a <rcl_wait+0x2b2>
 801c9ac:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c9ae:	4605      	mov	r5, r0
 801c9b0:	2e00      	cmp	r6, #0
 801c9b2:	f000 811a 	beq.w	801cbea <rcl_wait+0x252>
 801c9b6:	6843      	ldr	r3, [r0, #4]
 801c9b8:	b983      	cbnz	r3, 801c9dc <rcl_wait+0x44>
 801c9ba:	68eb      	ldr	r3, [r5, #12]
 801c9bc:	b973      	cbnz	r3, 801c9dc <rcl_wait+0x44>
 801c9be:	696b      	ldr	r3, [r5, #20]
 801c9c0:	b963      	cbnz	r3, 801c9dc <rcl_wait+0x44>
 801c9c2:	69eb      	ldr	r3, [r5, #28]
 801c9c4:	b953      	cbnz	r3, 801c9dc <rcl_wait+0x44>
 801c9c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c9c8:	b943      	cbnz	r3, 801c9dc <rcl_wait+0x44>
 801c9ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801c9cc:	b933      	cbnz	r3, 801c9dc <rcl_wait+0x44>
 801c9ce:	f240 3085 	movw	r0, #901	; 0x385
 801c9d2:	b00d      	add	sp, #52	; 0x34
 801c9d4:	ecbd 8b02 	vpop	{d8}
 801c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9dc:	9b04      	ldr	r3, [sp, #16]
 801c9de:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801c9e0:	2b01      	cmp	r3, #1
 801c9e2:	9b05      	ldr	r3, [sp, #20]
 801c9e4:	f173 0300 	sbcs.w	r3, r3, #0
 801c9e8:	f2c0 80f8 	blt.w	801cbdc <rcl_wait+0x244>
 801c9ec:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801c9f0:	2a00      	cmp	r2, #0
 801c9f2:	f000 810f 	beq.w	801cc14 <rcl_wait+0x27c>
 801c9f6:	2400      	movs	r4, #0
 801c9f8:	4613      	mov	r3, r2
 801c9fa:	f240 3921 	movw	r9, #801	; 0x321
 801c9fe:	4632      	mov	r2, r6
 801ca00:	46a2      	mov	sl, r4
 801ca02:	46a3      	mov	fp, r4
 801ca04:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801cc68 <rcl_wait+0x2d0>
 801ca08:	e014      	b.n	801ca34 <rcl_wait+0x9c>
 801ca0a:	2800      	cmp	r0, #0
 801ca0c:	d1e1      	bne.n	801c9d2 <rcl_wait+0x3a>
 801ca0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ca12:	4542      	cmp	r2, r8
 801ca14:	eb73 0107 	sbcs.w	r1, r3, r7
 801ca18:	da03      	bge.n	801ca22 <rcl_wait+0x8a>
 801ca1a:	4690      	mov	r8, r2
 801ca1c:	461f      	mov	r7, r3
 801ca1e:	f04f 0b01 	mov.w	fp, #1
 801ca22:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801ca24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801ca26:	3401      	adds	r4, #1
 801ca28:	f14a 0a00 	adc.w	sl, sl, #0
 801ca2c:	429c      	cmp	r4, r3
 801ca2e:	f17a 0100 	sbcs.w	r1, sl, #0
 801ca32:	d228      	bcs.n	801ca86 <rcl_wait+0xee>
 801ca34:	6928      	ldr	r0, [r5, #16]
 801ca36:	a908      	add	r1, sp, #32
 801ca38:	00a6      	lsls	r6, r4, #2
 801ca3a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ca3e:	2800      	cmp	r0, #0
 801ca40:	d0f1      	beq.n	801ca26 <rcl_wait+0x8e>
 801ca42:	68eb      	ldr	r3, [r5, #12]
 801ca44:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801ca48:	4423      	add	r3, r4
 801ca4a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801ca4e:	f1be 0f00 	cmp.w	lr, #0
 801ca52:	d006      	beq.n	801ca62 <rcl_wait+0xca>
 801ca54:	6913      	ldr	r3, [r2, #16]
 801ca56:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801ca5a:	3301      	adds	r3, #1
 801ca5c:	6113      	str	r3, [r2, #16]
 801ca5e:	692b      	ldr	r3, [r5, #16]
 801ca60:	5998      	ldr	r0, [r3, r6]
 801ca62:	ed8d 8b08 	vstr	d8, [sp, #32]
 801ca66:	f7ff fa89 	bl	801bf7c <rcl_timer_get_time_until_next_call>
 801ca6a:	4548      	cmp	r0, r9
 801ca6c:	d1cd      	bne.n	801ca0a <rcl_wait+0x72>
 801ca6e:	692b      	ldr	r3, [r5, #16]
 801ca70:	2200      	movs	r2, #0
 801ca72:	3401      	adds	r4, #1
 801ca74:	519a      	str	r2, [r3, r6]
 801ca76:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801ca78:	f14a 0a00 	adc.w	sl, sl, #0
 801ca7c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801ca7e:	429c      	cmp	r4, r3
 801ca80:	f17a 0100 	sbcs.w	r1, sl, #0
 801ca84:	d3d6      	bcc.n	801ca34 <rcl_wait+0x9c>
 801ca86:	4659      	mov	r1, fp
 801ca88:	4616      	mov	r6, r2
 801ca8a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ca8e:	4313      	orrs	r3, r2
 801ca90:	f040 80b4 	bne.w	801cbfc <rcl_wait+0x264>
 801ca94:	2300      	movs	r3, #0
 801ca96:	2200      	movs	r2, #0
 801ca98:	460c      	mov	r4, r1
 801ca9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ca9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801caa2:	ab08      	add	r3, sp, #32
 801caa4:	9302      	str	r3, [sp, #8]
 801caa6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801caaa:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801caac:	f106 0110 	add.w	r1, r6, #16
 801cab0:	9300      	str	r3, [sp, #0]
 801cab2:	1d30      	adds	r0, r6, #4
 801cab4:	f106 031c 	add.w	r3, r6, #28
 801cab8:	9201      	str	r2, [sp, #4]
 801caba:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801cabe:	f001 fb81 	bl	801e1c4 <rmw_wait>
 801cac2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cac4:	4680      	mov	r8, r0
 801cac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cac8:	b1e2      	cbz	r2, 801cb04 <rcl_wait+0x16c>
 801caca:	f04f 0900 	mov.w	r9, #0
 801cace:	464f      	mov	r7, r9
 801cad0:	692a      	ldr	r2, [r5, #16]
 801cad2:	f10d 011f 	add.w	r1, sp, #31
 801cad6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cada:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cade:	b160      	cbz	r0, 801cafa <rcl_wait+0x162>
 801cae0:	f88d 701f 	strb.w	r7, [sp, #31]
 801cae4:	f7ff fa0e 	bl	801bf04 <rcl_timer_is_ready>
 801cae8:	2800      	cmp	r0, #0
 801caea:	f47f af72 	bne.w	801c9d2 <rcl_wait+0x3a>
 801caee:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801caf2:	b90b      	cbnz	r3, 801caf8 <rcl_wait+0x160>
 801caf4:	692a      	ldr	r2, [r5, #16]
 801caf6:	5193      	str	r3, [r2, r6]
 801caf8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cafa:	f109 0901 	add.w	r9, r9, #1
 801cafe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801cb00:	454a      	cmp	r2, r9
 801cb02:	d8e5      	bhi.n	801cad0 <rcl_wait+0x138>
 801cb04:	f038 0002 	bics.w	r0, r8, #2
 801cb08:	d176      	bne.n	801cbf8 <rcl_wait+0x260>
 801cb0a:	686f      	ldr	r7, [r5, #4]
 801cb0c:	b17f      	cbz	r7, 801cb2e <rcl_wait+0x196>
 801cb0e:	4602      	mov	r2, r0
 801cb10:	e002      	b.n	801cb18 <rcl_wait+0x180>
 801cb12:	3201      	adds	r2, #1
 801cb14:	42ba      	cmp	r2, r7
 801cb16:	d00a      	beq.n	801cb2e <rcl_wait+0x196>
 801cb18:	6899      	ldr	r1, [r3, #8]
 801cb1a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb1e:	2900      	cmp	r1, #0
 801cb20:	d1f7      	bne.n	801cb12 <rcl_wait+0x17a>
 801cb22:	682e      	ldr	r6, [r5, #0]
 801cb24:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cb28:	3201      	adds	r2, #1
 801cb2a:	42ba      	cmp	r2, r7
 801cb2c:	d1f4      	bne.n	801cb18 <rcl_wait+0x180>
 801cb2e:	68ef      	ldr	r7, [r5, #12]
 801cb30:	b17f      	cbz	r7, 801cb52 <rcl_wait+0x1ba>
 801cb32:	2200      	movs	r2, #0
 801cb34:	e002      	b.n	801cb3c <rcl_wait+0x1a4>
 801cb36:	3201      	adds	r2, #1
 801cb38:	42ba      	cmp	r2, r7
 801cb3a:	d00a      	beq.n	801cb52 <rcl_wait+0x1ba>
 801cb3c:	6959      	ldr	r1, [r3, #20]
 801cb3e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb42:	2900      	cmp	r1, #0
 801cb44:	d1f7      	bne.n	801cb36 <rcl_wait+0x19e>
 801cb46:	68ae      	ldr	r6, [r5, #8]
 801cb48:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cb4c:	3201      	adds	r2, #1
 801cb4e:	42ba      	cmp	r2, r7
 801cb50:	d1f4      	bne.n	801cb3c <rcl_wait+0x1a4>
 801cb52:	69ef      	ldr	r7, [r5, #28]
 801cb54:	b17f      	cbz	r7, 801cb76 <rcl_wait+0x1de>
 801cb56:	2200      	movs	r2, #0
 801cb58:	e002      	b.n	801cb60 <rcl_wait+0x1c8>
 801cb5a:	3201      	adds	r2, #1
 801cb5c:	42ba      	cmp	r2, r7
 801cb5e:	d00a      	beq.n	801cb76 <rcl_wait+0x1de>
 801cb60:	6a19      	ldr	r1, [r3, #32]
 801cb62:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb66:	2900      	cmp	r1, #0
 801cb68:	d1f7      	bne.n	801cb5a <rcl_wait+0x1c2>
 801cb6a:	69ae      	ldr	r6, [r5, #24]
 801cb6c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cb70:	3201      	adds	r2, #1
 801cb72:	42ba      	cmp	r2, r7
 801cb74:	d1f4      	bne.n	801cb60 <rcl_wait+0x1c8>
 801cb76:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801cb78:	b17f      	cbz	r7, 801cb9a <rcl_wait+0x202>
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	e002      	b.n	801cb84 <rcl_wait+0x1ec>
 801cb7e:	3201      	adds	r2, #1
 801cb80:	42ba      	cmp	r2, r7
 801cb82:	d00a      	beq.n	801cb9a <rcl_wait+0x202>
 801cb84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cb86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cb8a:	2900      	cmp	r1, #0
 801cb8c:	d1f7      	bne.n	801cb7e <rcl_wait+0x1e6>
 801cb8e:	6a2e      	ldr	r6, [r5, #32]
 801cb90:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cb94:	3201      	adds	r2, #1
 801cb96:	42ba      	cmp	r2, r7
 801cb98:	d1f4      	bne.n	801cb84 <rcl_wait+0x1ec>
 801cb9a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801cb9c:	b17f      	cbz	r7, 801cbbe <rcl_wait+0x226>
 801cb9e:	2200      	movs	r2, #0
 801cba0:	e002      	b.n	801cba8 <rcl_wait+0x210>
 801cba2:	3201      	adds	r2, #1
 801cba4:	42ba      	cmp	r2, r7
 801cba6:	d00a      	beq.n	801cbbe <rcl_wait+0x226>
 801cba8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801cbaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cbae:	2900      	cmp	r1, #0
 801cbb0:	d1f7      	bne.n	801cba2 <rcl_wait+0x20a>
 801cbb2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801cbb4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cbb8:	3201      	adds	r2, #1
 801cbba:	42ba      	cmp	r2, r7
 801cbbc:	d1f4      	bne.n	801cba8 <rcl_wait+0x210>
 801cbbe:	f1b8 0f02 	cmp.w	r8, #2
 801cbc2:	f47f af06 	bne.w	801c9d2 <rcl_wait+0x3a>
 801cbc6:	f084 0301 	eor.w	r3, r4, #1
 801cbca:	b2db      	uxtb	r3, r3
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	bf18      	it	ne
 801cbd0:	2002      	movne	r0, #2
 801cbd2:	b00d      	add	sp, #52	; 0x34
 801cbd4:	ecbd 8b02 	vpop	{d8}
 801cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbdc:	2a00      	cmp	r2, #0
 801cbde:	d03a      	beq.n	801cc56 <rcl_wait+0x2be>
 801cbe0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cbe4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cbe8:	e705      	b.n	801c9f6 <rcl_wait+0x5e>
 801cbea:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cbee:	b00d      	add	sp, #52	; 0x34
 801cbf0:	ecbd 8b02 	vpop	{d8}
 801cbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbf8:	2001      	movs	r0, #1
 801cbfa:	e6ea      	b.n	801c9d2 <rcl_wait+0x3a>
 801cbfc:	9b04      	ldr	r3, [sp, #16]
 801cbfe:	460c      	mov	r4, r1
 801cc00:	2b01      	cmp	r3, #1
 801cc02:	9b05      	ldr	r3, [sp, #20]
 801cc04:	f173 0300 	sbcs.w	r3, r3, #0
 801cc08:	bfa8      	it	ge
 801cc0a:	f044 0401 	orrge.w	r4, r4, #1
 801cc0e:	b914      	cbnz	r4, 801cc16 <rcl_wait+0x27e>
 801cc10:	4623      	mov	r3, r4
 801cc12:	e747      	b.n	801caa4 <rcl_wait+0x10c>
 801cc14:	4611      	mov	r1, r2
 801cc16:	2f00      	cmp	r7, #0
 801cc18:	da02      	bge.n	801cc20 <rcl_wait+0x288>
 801cc1a:	f04f 0800 	mov.w	r8, #0
 801cc1e:	4647      	mov	r7, r8
 801cc20:	460c      	mov	r4, r1
 801cc22:	4640      	mov	r0, r8
 801cc24:	4639      	mov	r1, r7
 801cc26:	a312      	add	r3, pc, #72	; (adr r3, 801cc70 <rcl_wait+0x2d8>)
 801cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc2c:	f7e3 fd2c 	bl	8000688 <__aeabi_ldivmod>
 801cc30:	a30f      	add	r3, pc, #60	; (adr r3, 801cc70 <rcl_wait+0x2d8>)
 801cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cc3a:	4640      	mov	r0, r8
 801cc3c:	4639      	mov	r1, r7
 801cc3e:	f7e3 fd23 	bl	8000688 <__aeabi_ldivmod>
 801cc42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cc46:	ab08      	add	r3, sp, #32
 801cc48:	e72c      	b.n	801caa4 <rcl_wait+0x10c>
 801cc4a:	200b      	movs	r0, #11
 801cc4c:	b00d      	add	sp, #52	; 0x34
 801cc4e:	ecbd 8b02 	vpop	{d8}
 801cc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc56:	4611      	mov	r1, r2
 801cc58:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cc5c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cc60:	e713      	b.n	801ca8a <rcl_wait+0xf2>
 801cc62:	bf00      	nop
 801cc64:	f3af 8000 	nop.w
 801cc68:	ffffffff 	.word	0xffffffff
 801cc6c:	7fffffff 	.word	0x7fffffff
 801cc70:	3b9aca00 	.word	0x3b9aca00
 801cc74:	00000000 	.word	0x00000000

0801cc78 <rcl_action_take_goal_response>:
 801cc78:	2800      	cmp	r0, #0
 801cc7a:	d039      	beq.n	801ccf0 <rcl_action_take_goal_response+0x78>
 801cc7c:	b570      	push	{r4, r5, r6, lr}
 801cc7e:	4604      	mov	r4, r0
 801cc80:	6800      	ldr	r0, [r0, #0]
 801cc82:	b380      	cbz	r0, 801cce6 <rcl_action_take_goal_response+0x6e>
 801cc84:	460e      	mov	r6, r1
 801cc86:	4615      	mov	r5, r2
 801cc88:	f7fe fbc6 	bl	801b418 <rcl_client_is_valid>
 801cc8c:	b330      	cbz	r0, 801ccdc <rcl_action_take_goal_response+0x64>
 801cc8e:	6820      	ldr	r0, [r4, #0]
 801cc90:	3004      	adds	r0, #4
 801cc92:	f7fe fbc1 	bl	801b418 <rcl_client_is_valid>
 801cc96:	b308      	cbz	r0, 801ccdc <rcl_action_take_goal_response+0x64>
 801cc98:	6820      	ldr	r0, [r4, #0]
 801cc9a:	3008      	adds	r0, #8
 801cc9c:	f7fe fbbc 	bl	801b418 <rcl_client_is_valid>
 801cca0:	b1e0      	cbz	r0, 801ccdc <rcl_action_take_goal_response+0x64>
 801cca2:	6820      	ldr	r0, [r4, #0]
 801cca4:	300c      	adds	r0, #12
 801cca6:	f7f7 f9fb 	bl	80140a0 <rcl_subscription_is_valid>
 801ccaa:	b1b8      	cbz	r0, 801ccdc <rcl_action_take_goal_response+0x64>
 801ccac:	6820      	ldr	r0, [r4, #0]
 801ccae:	3010      	adds	r0, #16
 801ccb0:	f7f7 f9f6 	bl	80140a0 <rcl_subscription_is_valid>
 801ccb4:	b190      	cbz	r0, 801ccdc <rcl_action_take_goal_response+0x64>
 801ccb6:	b1cd      	cbz	r5, 801ccec <rcl_action_take_goal_response+0x74>
 801ccb8:	b1c6      	cbz	r6, 801ccec <rcl_action_take_goal_response+0x74>
 801ccba:	462a      	mov	r2, r5
 801ccbc:	4631      	mov	r1, r6
 801ccbe:	6820      	ldr	r0, [r4, #0]
 801ccc0:	f7fe fb62 	bl	801b388 <rcl_take_response>
 801ccc4:	b148      	cbz	r0, 801ccda <rcl_action_take_goal_response+0x62>
 801ccc6:	280a      	cmp	r0, #10
 801ccc8:	d007      	beq.n	801ccda <rcl_action_take_goal_response+0x62>
 801ccca:	f240 12f5 	movw	r2, #501	; 0x1f5
 801ccce:	f640 0337 	movw	r3, #2103	; 0x837
 801ccd2:	4290      	cmp	r0, r2
 801ccd4:	bf0c      	ite	eq
 801ccd6:	4618      	moveq	r0, r3
 801ccd8:	2001      	movne	r0, #1
 801ccda:	bd70      	pop	{r4, r5, r6, pc}
 801ccdc:	f7f8 fa00 	bl	80150e0 <rcutils_reset_error>
 801cce0:	f640 0036 	movw	r0, #2102	; 0x836
 801cce4:	bd70      	pop	{r4, r5, r6, pc}
 801cce6:	f640 0036 	movw	r0, #2102	; 0x836
 801ccea:	bd70      	pop	{r4, r5, r6, pc}
 801ccec:	200b      	movs	r0, #11
 801ccee:	bd70      	pop	{r4, r5, r6, pc}
 801ccf0:	f640 0036 	movw	r0, #2102	; 0x836
 801ccf4:	4770      	bx	lr
 801ccf6:	bf00      	nop

0801ccf8 <rcl_action_send_result_request>:
 801ccf8:	b390      	cbz	r0, 801cd60 <rcl_action_send_result_request+0x68>
 801ccfa:	b570      	push	{r4, r5, r6, lr}
 801ccfc:	4604      	mov	r4, r0
 801ccfe:	6800      	ldr	r0, [r0, #0]
 801cd00:	b348      	cbz	r0, 801cd56 <rcl_action_send_result_request+0x5e>
 801cd02:	460e      	mov	r6, r1
 801cd04:	4615      	mov	r5, r2
 801cd06:	f7fe fb87 	bl	801b418 <rcl_client_is_valid>
 801cd0a:	b1f8      	cbz	r0, 801cd4c <rcl_action_send_result_request+0x54>
 801cd0c:	6820      	ldr	r0, [r4, #0]
 801cd0e:	3004      	adds	r0, #4
 801cd10:	f7fe fb82 	bl	801b418 <rcl_client_is_valid>
 801cd14:	b1d0      	cbz	r0, 801cd4c <rcl_action_send_result_request+0x54>
 801cd16:	6820      	ldr	r0, [r4, #0]
 801cd18:	3008      	adds	r0, #8
 801cd1a:	f7fe fb7d 	bl	801b418 <rcl_client_is_valid>
 801cd1e:	b1a8      	cbz	r0, 801cd4c <rcl_action_send_result_request+0x54>
 801cd20:	6820      	ldr	r0, [r4, #0]
 801cd22:	300c      	adds	r0, #12
 801cd24:	f7f7 f9bc 	bl	80140a0 <rcl_subscription_is_valid>
 801cd28:	b180      	cbz	r0, 801cd4c <rcl_action_send_result_request+0x54>
 801cd2a:	6820      	ldr	r0, [r4, #0]
 801cd2c:	3010      	adds	r0, #16
 801cd2e:	f7f7 f9b7 	bl	80140a0 <rcl_subscription_is_valid>
 801cd32:	b158      	cbz	r0, 801cd4c <rcl_action_send_result_request+0x54>
 801cd34:	b195      	cbz	r5, 801cd5c <rcl_action_send_result_request+0x64>
 801cd36:	b18e      	cbz	r6, 801cd5c <rcl_action_send_result_request+0x64>
 801cd38:	6820      	ldr	r0, [r4, #0]
 801cd3a:	462a      	mov	r2, r5
 801cd3c:	4631      	mov	r1, r6
 801cd3e:	3008      	adds	r0, #8
 801cd40:	f7fe faea 	bl	801b318 <rcl_send_request>
 801cd44:	3800      	subs	r0, #0
 801cd46:	bf18      	it	ne
 801cd48:	2001      	movne	r0, #1
 801cd4a:	bd70      	pop	{r4, r5, r6, pc}
 801cd4c:	f7f8 f9c8 	bl	80150e0 <rcutils_reset_error>
 801cd50:	f640 0036 	movw	r0, #2102	; 0x836
 801cd54:	bd70      	pop	{r4, r5, r6, pc}
 801cd56:	f640 0036 	movw	r0, #2102	; 0x836
 801cd5a:	bd70      	pop	{r4, r5, r6, pc}
 801cd5c:	200b      	movs	r0, #11
 801cd5e:	bd70      	pop	{r4, r5, r6, pc}
 801cd60:	f640 0036 	movw	r0, #2102	; 0x836
 801cd64:	4770      	bx	lr
 801cd66:	bf00      	nop

0801cd68 <rcl_action_take_result_response>:
 801cd68:	2800      	cmp	r0, #0
 801cd6a:	d03a      	beq.n	801cde2 <rcl_action_take_result_response+0x7a>
 801cd6c:	b570      	push	{r4, r5, r6, lr}
 801cd6e:	4604      	mov	r4, r0
 801cd70:	6800      	ldr	r0, [r0, #0]
 801cd72:	b388      	cbz	r0, 801cdd8 <rcl_action_take_result_response+0x70>
 801cd74:	460e      	mov	r6, r1
 801cd76:	4615      	mov	r5, r2
 801cd78:	f7fe fb4e 	bl	801b418 <rcl_client_is_valid>
 801cd7c:	b338      	cbz	r0, 801cdce <rcl_action_take_result_response+0x66>
 801cd7e:	6820      	ldr	r0, [r4, #0]
 801cd80:	3004      	adds	r0, #4
 801cd82:	f7fe fb49 	bl	801b418 <rcl_client_is_valid>
 801cd86:	b310      	cbz	r0, 801cdce <rcl_action_take_result_response+0x66>
 801cd88:	6820      	ldr	r0, [r4, #0]
 801cd8a:	3008      	adds	r0, #8
 801cd8c:	f7fe fb44 	bl	801b418 <rcl_client_is_valid>
 801cd90:	b1e8      	cbz	r0, 801cdce <rcl_action_take_result_response+0x66>
 801cd92:	6820      	ldr	r0, [r4, #0]
 801cd94:	300c      	adds	r0, #12
 801cd96:	f7f7 f983 	bl	80140a0 <rcl_subscription_is_valid>
 801cd9a:	b1c0      	cbz	r0, 801cdce <rcl_action_take_result_response+0x66>
 801cd9c:	6820      	ldr	r0, [r4, #0]
 801cd9e:	3010      	adds	r0, #16
 801cda0:	f7f7 f97e 	bl	80140a0 <rcl_subscription_is_valid>
 801cda4:	b198      	cbz	r0, 801cdce <rcl_action_take_result_response+0x66>
 801cda6:	b1d5      	cbz	r5, 801cdde <rcl_action_take_result_response+0x76>
 801cda8:	b1ce      	cbz	r6, 801cdde <rcl_action_take_result_response+0x76>
 801cdaa:	6820      	ldr	r0, [r4, #0]
 801cdac:	462a      	mov	r2, r5
 801cdae:	4631      	mov	r1, r6
 801cdb0:	3008      	adds	r0, #8
 801cdb2:	f7fe fae9 	bl	801b388 <rcl_take_response>
 801cdb6:	b148      	cbz	r0, 801cdcc <rcl_action_take_result_response+0x64>
 801cdb8:	280a      	cmp	r0, #10
 801cdba:	d007      	beq.n	801cdcc <rcl_action_take_result_response+0x64>
 801cdbc:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cdc0:	f640 0337 	movw	r3, #2103	; 0x837
 801cdc4:	4290      	cmp	r0, r2
 801cdc6:	bf0c      	ite	eq
 801cdc8:	4618      	moveq	r0, r3
 801cdca:	2001      	movne	r0, #1
 801cdcc:	bd70      	pop	{r4, r5, r6, pc}
 801cdce:	f7f8 f987 	bl	80150e0 <rcutils_reset_error>
 801cdd2:	f640 0036 	movw	r0, #2102	; 0x836
 801cdd6:	bd70      	pop	{r4, r5, r6, pc}
 801cdd8:	f640 0036 	movw	r0, #2102	; 0x836
 801cddc:	bd70      	pop	{r4, r5, r6, pc}
 801cdde:	200b      	movs	r0, #11
 801cde0:	bd70      	pop	{r4, r5, r6, pc}
 801cde2:	f640 0036 	movw	r0, #2102	; 0x836
 801cde6:	4770      	bx	lr

0801cde8 <rcl_action_take_cancel_response>:
 801cde8:	2800      	cmp	r0, #0
 801cdea:	d03a      	beq.n	801ce62 <rcl_action_take_cancel_response+0x7a>
 801cdec:	b570      	push	{r4, r5, r6, lr}
 801cdee:	4604      	mov	r4, r0
 801cdf0:	6800      	ldr	r0, [r0, #0]
 801cdf2:	b388      	cbz	r0, 801ce58 <rcl_action_take_cancel_response+0x70>
 801cdf4:	460e      	mov	r6, r1
 801cdf6:	4615      	mov	r5, r2
 801cdf8:	f7fe fb0e 	bl	801b418 <rcl_client_is_valid>
 801cdfc:	b338      	cbz	r0, 801ce4e <rcl_action_take_cancel_response+0x66>
 801cdfe:	6820      	ldr	r0, [r4, #0]
 801ce00:	3004      	adds	r0, #4
 801ce02:	f7fe fb09 	bl	801b418 <rcl_client_is_valid>
 801ce06:	b310      	cbz	r0, 801ce4e <rcl_action_take_cancel_response+0x66>
 801ce08:	6820      	ldr	r0, [r4, #0]
 801ce0a:	3008      	adds	r0, #8
 801ce0c:	f7fe fb04 	bl	801b418 <rcl_client_is_valid>
 801ce10:	b1e8      	cbz	r0, 801ce4e <rcl_action_take_cancel_response+0x66>
 801ce12:	6820      	ldr	r0, [r4, #0]
 801ce14:	300c      	adds	r0, #12
 801ce16:	f7f7 f943 	bl	80140a0 <rcl_subscription_is_valid>
 801ce1a:	b1c0      	cbz	r0, 801ce4e <rcl_action_take_cancel_response+0x66>
 801ce1c:	6820      	ldr	r0, [r4, #0]
 801ce1e:	3010      	adds	r0, #16
 801ce20:	f7f7 f93e 	bl	80140a0 <rcl_subscription_is_valid>
 801ce24:	b198      	cbz	r0, 801ce4e <rcl_action_take_cancel_response+0x66>
 801ce26:	b1d5      	cbz	r5, 801ce5e <rcl_action_take_cancel_response+0x76>
 801ce28:	b1ce      	cbz	r6, 801ce5e <rcl_action_take_cancel_response+0x76>
 801ce2a:	6820      	ldr	r0, [r4, #0]
 801ce2c:	462a      	mov	r2, r5
 801ce2e:	4631      	mov	r1, r6
 801ce30:	3004      	adds	r0, #4
 801ce32:	f7fe faa9 	bl	801b388 <rcl_take_response>
 801ce36:	b148      	cbz	r0, 801ce4c <rcl_action_take_cancel_response+0x64>
 801ce38:	280a      	cmp	r0, #10
 801ce3a:	d007      	beq.n	801ce4c <rcl_action_take_cancel_response+0x64>
 801ce3c:	f240 12f5 	movw	r2, #501	; 0x1f5
 801ce40:	f640 0337 	movw	r3, #2103	; 0x837
 801ce44:	4290      	cmp	r0, r2
 801ce46:	bf0c      	ite	eq
 801ce48:	4618      	moveq	r0, r3
 801ce4a:	2001      	movne	r0, #1
 801ce4c:	bd70      	pop	{r4, r5, r6, pc}
 801ce4e:	f7f8 f947 	bl	80150e0 <rcutils_reset_error>
 801ce52:	f640 0036 	movw	r0, #2102	; 0x836
 801ce56:	bd70      	pop	{r4, r5, r6, pc}
 801ce58:	f640 0036 	movw	r0, #2102	; 0x836
 801ce5c:	bd70      	pop	{r4, r5, r6, pc}
 801ce5e:	200b      	movs	r0, #11
 801ce60:	bd70      	pop	{r4, r5, r6, pc}
 801ce62:	f640 0036 	movw	r0, #2102	; 0x836
 801ce66:	4770      	bx	lr

0801ce68 <rcl_action_take_feedback>:
 801ce68:	2800      	cmp	r0, #0
 801ce6a:	d038      	beq.n	801cede <rcl_action_take_feedback+0x76>
 801ce6c:	b530      	push	{r4, r5, lr}
 801ce6e:	4604      	mov	r4, r0
 801ce70:	6800      	ldr	r0, [r0, #0]
 801ce72:	b091      	sub	sp, #68	; 0x44
 801ce74:	b378      	cbz	r0, 801ced6 <rcl_action_take_feedback+0x6e>
 801ce76:	460d      	mov	r5, r1
 801ce78:	f7fe face 	bl	801b418 <rcl_client_is_valid>
 801ce7c:	b328      	cbz	r0, 801ceca <rcl_action_take_feedback+0x62>
 801ce7e:	6820      	ldr	r0, [r4, #0]
 801ce80:	3004      	adds	r0, #4
 801ce82:	f7fe fac9 	bl	801b418 <rcl_client_is_valid>
 801ce86:	b300      	cbz	r0, 801ceca <rcl_action_take_feedback+0x62>
 801ce88:	6820      	ldr	r0, [r4, #0]
 801ce8a:	3008      	adds	r0, #8
 801ce8c:	f7fe fac4 	bl	801b418 <rcl_client_is_valid>
 801ce90:	b1d8      	cbz	r0, 801ceca <rcl_action_take_feedback+0x62>
 801ce92:	6820      	ldr	r0, [r4, #0]
 801ce94:	300c      	adds	r0, #12
 801ce96:	f7f7 f903 	bl	80140a0 <rcl_subscription_is_valid>
 801ce9a:	b1b0      	cbz	r0, 801ceca <rcl_action_take_feedback+0x62>
 801ce9c:	6820      	ldr	r0, [r4, #0]
 801ce9e:	3010      	adds	r0, #16
 801cea0:	f7f7 f8fe 	bl	80140a0 <rcl_subscription_is_valid>
 801cea4:	b188      	cbz	r0, 801ceca <rcl_action_take_feedback+0x62>
 801cea6:	b1ed      	cbz	r5, 801cee4 <rcl_action_take_feedback+0x7c>
 801cea8:	6820      	ldr	r0, [r4, #0]
 801ceaa:	2300      	movs	r3, #0
 801ceac:	466a      	mov	r2, sp
 801ceae:	4629      	mov	r1, r5
 801ceb0:	300c      	adds	r0, #12
 801ceb2:	f7f7 f899 	bl	8013fe8 <rcl_take>
 801ceb6:	b160      	cbz	r0, 801ced2 <rcl_action_take_feedback+0x6a>
 801ceb8:	f240 1391 	movw	r3, #401	; 0x191
 801cebc:	4298      	cmp	r0, r3
 801cebe:	d014      	beq.n	801ceea <rcl_action_take_feedback+0x82>
 801cec0:	280a      	cmp	r0, #10
 801cec2:	bf18      	it	ne
 801cec4:	2001      	movne	r0, #1
 801cec6:	b011      	add	sp, #68	; 0x44
 801cec8:	bd30      	pop	{r4, r5, pc}
 801ceca:	f7f8 f909 	bl	80150e0 <rcutils_reset_error>
 801cece:	f640 0036 	movw	r0, #2102	; 0x836
 801ced2:	b011      	add	sp, #68	; 0x44
 801ced4:	bd30      	pop	{r4, r5, pc}
 801ced6:	f640 0036 	movw	r0, #2102	; 0x836
 801ceda:	b011      	add	sp, #68	; 0x44
 801cedc:	bd30      	pop	{r4, r5, pc}
 801cede:	f640 0036 	movw	r0, #2102	; 0x836
 801cee2:	4770      	bx	lr
 801cee4:	200b      	movs	r0, #11
 801cee6:	b011      	add	sp, #68	; 0x44
 801cee8:	bd30      	pop	{r4, r5, pc}
 801ceea:	f640 0037 	movw	r0, #2103	; 0x837
 801ceee:	e7f0      	b.n	801ced2 <rcl_action_take_feedback+0x6a>

0801cef0 <rcl_action_wait_set_add_action_client>:
 801cef0:	2800      	cmp	r0, #0
 801cef2:	d048      	beq.n	801cf86 <rcl_action_wait_set_add_action_client+0x96>
 801cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cef6:	460c      	mov	r4, r1
 801cef8:	2900      	cmp	r1, #0
 801cefa:	d03c      	beq.n	801cf76 <rcl_action_wait_set_add_action_client+0x86>
 801cefc:	4605      	mov	r5, r0
 801cefe:	6808      	ldr	r0, [r1, #0]
 801cf00:	2800      	cmp	r0, #0
 801cf02:	d038      	beq.n	801cf76 <rcl_action_wait_set_add_action_client+0x86>
 801cf04:	4617      	mov	r7, r2
 801cf06:	461e      	mov	r6, r3
 801cf08:	f7fe fa86 	bl	801b418 <rcl_client_is_valid>
 801cf0c:	b3b0      	cbz	r0, 801cf7c <rcl_action_wait_set_add_action_client+0x8c>
 801cf0e:	6820      	ldr	r0, [r4, #0]
 801cf10:	3004      	adds	r0, #4
 801cf12:	f7fe fa81 	bl	801b418 <rcl_client_is_valid>
 801cf16:	b388      	cbz	r0, 801cf7c <rcl_action_wait_set_add_action_client+0x8c>
 801cf18:	6820      	ldr	r0, [r4, #0]
 801cf1a:	3008      	adds	r0, #8
 801cf1c:	f7fe fa7c 	bl	801b418 <rcl_client_is_valid>
 801cf20:	b360      	cbz	r0, 801cf7c <rcl_action_wait_set_add_action_client+0x8c>
 801cf22:	6820      	ldr	r0, [r4, #0]
 801cf24:	300c      	adds	r0, #12
 801cf26:	f7f7 f8bb 	bl	80140a0 <rcl_subscription_is_valid>
 801cf2a:	b338      	cbz	r0, 801cf7c <rcl_action_wait_set_add_action_client+0x8c>
 801cf2c:	6820      	ldr	r0, [r4, #0]
 801cf2e:	3010      	adds	r0, #16
 801cf30:	f7f7 f8b6 	bl	80140a0 <rcl_subscription_is_valid>
 801cf34:	b310      	cbz	r0, 801cf7c <rcl_action_wait_set_add_action_client+0x8c>
 801cf36:	6821      	ldr	r1, [r4, #0]
 801cf38:	4628      	mov	r0, r5
 801cf3a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801cf3e:	f7ff fcd1 	bl	801c8e4 <rcl_wait_set_add_client>
 801cf42:	b9b8      	cbnz	r0, 801cf74 <rcl_action_wait_set_add_action_client+0x84>
 801cf44:	6821      	ldr	r1, [r4, #0]
 801cf46:	4628      	mov	r0, r5
 801cf48:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801cf4c:	3104      	adds	r1, #4
 801cf4e:	f7ff fcc9 	bl	801c8e4 <rcl_wait_set_add_client>
 801cf52:	b978      	cbnz	r0, 801cf74 <rcl_action_wait_set_add_action_client+0x84>
 801cf54:	6821      	ldr	r1, [r4, #0]
 801cf56:	4628      	mov	r0, r5
 801cf58:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801cf5c:	3108      	adds	r1, #8
 801cf5e:	f7ff fcc1 	bl	801c8e4 <rcl_wait_set_add_client>
 801cf62:	b938      	cbnz	r0, 801cf74 <rcl_action_wait_set_add_action_client+0x84>
 801cf64:	6821      	ldr	r1, [r4, #0]
 801cf66:	4628      	mov	r0, r5
 801cf68:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801cf6c:	310c      	adds	r1, #12
 801cf6e:	f7ff f969 	bl	801c244 <rcl_wait_set_add_subscription>
 801cf72:	b158      	cbz	r0, 801cf8c <rcl_action_wait_set_add_action_client+0x9c>
 801cf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf76:	f640 0036 	movw	r0, #2102	; 0x836
 801cf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf7c:	f7f8 f8b0 	bl	80150e0 <rcutils_reset_error>
 801cf80:	f640 0036 	movw	r0, #2102	; 0x836
 801cf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf86:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cf8a:	4770      	bx	lr
 801cf8c:	6821      	ldr	r1, [r4, #0]
 801cf8e:	4628      	mov	r0, r5
 801cf90:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801cf94:	3110      	adds	r1, #16
 801cf96:	f7ff f955 	bl	801c244 <rcl_wait_set_add_subscription>
 801cf9a:	2800      	cmp	r0, #0
 801cf9c:	d1ea      	bne.n	801cf74 <rcl_action_wait_set_add_action_client+0x84>
 801cf9e:	b11f      	cbz	r7, 801cfa8 <rcl_action_wait_set_add_action_client+0xb8>
 801cfa0:	6823      	ldr	r3, [r4, #0]
 801cfa2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801cfa6:	603b      	str	r3, [r7, #0]
 801cfa8:	2e00      	cmp	r6, #0
 801cfaa:	d0e3      	beq.n	801cf74 <rcl_action_wait_set_add_action_client+0x84>
 801cfac:	6823      	ldr	r3, [r4, #0]
 801cfae:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801cfb2:	6033      	str	r3, [r6, #0]
 801cfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfb6:	bf00      	nop

0801cfb8 <rcl_action_client_wait_set_get_entities_ready>:
 801cfb8:	2800      	cmp	r0, #0
 801cfba:	d050      	beq.n	801d05e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801cfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfc0:	460c      	mov	r4, r1
 801cfc2:	2900      	cmp	r1, #0
 801cfc4:	d03e      	beq.n	801d044 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801cfc6:	4605      	mov	r5, r0
 801cfc8:	6808      	ldr	r0, [r1, #0]
 801cfca:	2800      	cmp	r0, #0
 801cfcc:	d03a      	beq.n	801d044 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801cfce:	4616      	mov	r6, r2
 801cfd0:	461f      	mov	r7, r3
 801cfd2:	f7fe fa21 	bl	801b418 <rcl_client_is_valid>
 801cfd6:	2800      	cmp	r0, #0
 801cfd8:	d038      	beq.n	801d04c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cfda:	6820      	ldr	r0, [r4, #0]
 801cfdc:	3004      	adds	r0, #4
 801cfde:	f7fe fa1b 	bl	801b418 <rcl_client_is_valid>
 801cfe2:	2800      	cmp	r0, #0
 801cfe4:	d032      	beq.n	801d04c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cfe6:	6820      	ldr	r0, [r4, #0]
 801cfe8:	3008      	adds	r0, #8
 801cfea:	f7fe fa15 	bl	801b418 <rcl_client_is_valid>
 801cfee:	b368      	cbz	r0, 801d04c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cff0:	6820      	ldr	r0, [r4, #0]
 801cff2:	300c      	adds	r0, #12
 801cff4:	f7f7 f854 	bl	80140a0 <rcl_subscription_is_valid>
 801cff8:	b340      	cbz	r0, 801d04c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cffa:	6820      	ldr	r0, [r4, #0]
 801cffc:	3010      	adds	r0, #16
 801cffe:	f7f7 f84f 	bl	80140a0 <rcl_subscription_is_valid>
 801d002:	b318      	cbz	r0, 801d04c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d004:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d008:	2a00      	cmp	r2, #0
 801d00a:	bf18      	it	ne
 801d00c:	2b00      	cmpne	r3, #0
 801d00e:	9b08      	ldr	r3, [sp, #32]
 801d010:	bf0c      	ite	eq
 801d012:	2101      	moveq	r1, #1
 801d014:	2100      	movne	r1, #0
 801d016:	2b00      	cmp	r3, #0
 801d018:	bf08      	it	eq
 801d01a:	f041 0101 	orreq.w	r1, r1, #1
 801d01e:	2f00      	cmp	r7, #0
 801d020:	bf08      	it	eq
 801d022:	f041 0101 	orreq.w	r1, r1, #1
 801d026:	b9b9      	cbnz	r1, 801d058 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d028:	b1b6      	cbz	r6, 801d058 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d02a:	6823      	ldr	r3, [r4, #0]
 801d02c:	686c      	ldr	r4, [r5, #4]
 801d02e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801d032:	428a      	cmp	r2, r1
 801d034:	4610      	mov	r0, r2
 801d036:	bf38      	it	cc
 801d038:	4608      	movcc	r0, r1
 801d03a:	4284      	cmp	r4, r0
 801d03c:	d812      	bhi.n	801d064 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d03e:	2001      	movs	r0, #1
 801d040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d044:	f640 0036 	movw	r0, #2102	; 0x836
 801d048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d04c:	f7f8 f848 	bl	80150e0 <rcutils_reset_error>
 801d050:	f640 0036 	movw	r0, #2102	; 0x836
 801d054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d058:	200b      	movs	r0, #11
 801d05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d05e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d062:	4770      	bx	lr
 801d064:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801d068:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801d06c:	45f0      	cmp	r8, lr
 801d06e:	4640      	mov	r0, r8
 801d070:	69ec      	ldr	r4, [r5, #28]
 801d072:	bf38      	it	cc
 801d074:	4670      	movcc	r0, lr
 801d076:	4560      	cmp	r0, ip
 801d078:	bf38      	it	cc
 801d07a:	4660      	movcc	r0, ip
 801d07c:	4284      	cmp	r4, r0
 801d07e:	d9de      	bls.n	801d03e <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d080:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d084:	682d      	ldr	r5, [r5, #0]
 801d086:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d08a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d08e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d092:	1a18      	subs	r0, r3, r0
 801d094:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d098:	f103 0c0c 	add.w	ip, r3, #12
 801d09c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d0a0:	fab0 f080 	clz	r0, r0
 801d0a4:	eba5 050c 	sub.w	r5, r5, ip
 801d0a8:	0940      	lsrs	r0, r0, #5
 801d0aa:	fab5 f585 	clz	r5, r5
 801d0ae:	096d      	lsrs	r5, r5, #5
 801d0b0:	7035      	strb	r5, [r6, #0]
 801d0b2:	f103 0510 	add.w	r5, r3, #16
 801d0b6:	1b64      	subs	r4, r4, r5
 801d0b8:	9d08      	ldr	r5, [sp, #32]
 801d0ba:	fab4 f484 	clz	r4, r4
 801d0be:	0964      	lsrs	r4, r4, #5
 801d0c0:	703c      	strb	r4, [r7, #0]
 801d0c2:	1d1c      	adds	r4, r3, #4
 801d0c4:	3308      	adds	r3, #8
 801d0c6:	7028      	strb	r0, [r5, #0]
 801d0c8:	1b09      	subs	r1, r1, r4
 801d0ca:	2000      	movs	r0, #0
 801d0cc:	1ad3      	subs	r3, r2, r3
 801d0ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d0d0:	fab1 f181 	clz	r1, r1
 801d0d4:	fab3 f383 	clz	r3, r3
 801d0d8:	0949      	lsrs	r1, r1, #5
 801d0da:	095b      	lsrs	r3, r3, #5
 801d0dc:	7011      	strb	r1, [r2, #0]
 801d0de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d0e0:	7013      	strb	r3, [r2, #0]
 801d0e2:	e7b1      	b.n	801d048 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d0e4 <rcl_action_take_goal_request>:
 801d0e4:	2800      	cmp	r0, #0
 801d0e6:	d039      	beq.n	801d15c <rcl_action_take_goal_request+0x78>
 801d0e8:	b570      	push	{r4, r5, r6, lr}
 801d0ea:	4604      	mov	r4, r0
 801d0ec:	6800      	ldr	r0, [r0, #0]
 801d0ee:	b380      	cbz	r0, 801d152 <rcl_action_take_goal_request+0x6e>
 801d0f0:	460e      	mov	r6, r1
 801d0f2:	4615      	mov	r5, r2
 801d0f4:	f7f6 fe8c 	bl	8013e10 <rcl_service_is_valid>
 801d0f8:	b330      	cbz	r0, 801d148 <rcl_action_take_goal_request+0x64>
 801d0fa:	6820      	ldr	r0, [r4, #0]
 801d0fc:	3004      	adds	r0, #4
 801d0fe:	f7f6 fe87 	bl	8013e10 <rcl_service_is_valid>
 801d102:	b308      	cbz	r0, 801d148 <rcl_action_take_goal_request+0x64>
 801d104:	6820      	ldr	r0, [r4, #0]
 801d106:	3008      	adds	r0, #8
 801d108:	f7f6 fe82 	bl	8013e10 <rcl_service_is_valid>
 801d10c:	b1e0      	cbz	r0, 801d148 <rcl_action_take_goal_request+0x64>
 801d10e:	6820      	ldr	r0, [r4, #0]
 801d110:	300c      	adds	r0, #12
 801d112:	f7f6 fd41 	bl	8013b98 <rcl_publisher_is_valid>
 801d116:	b1b8      	cbz	r0, 801d148 <rcl_action_take_goal_request+0x64>
 801d118:	6820      	ldr	r0, [r4, #0]
 801d11a:	3010      	adds	r0, #16
 801d11c:	f7f6 fd3c 	bl	8013b98 <rcl_publisher_is_valid>
 801d120:	b190      	cbz	r0, 801d148 <rcl_action_take_goal_request+0x64>
 801d122:	b1cd      	cbz	r5, 801d158 <rcl_action_take_goal_request+0x74>
 801d124:	b1c6      	cbz	r6, 801d158 <rcl_action_take_goal_request+0x74>
 801d126:	462a      	mov	r2, r5
 801d128:	4631      	mov	r1, r6
 801d12a:	6820      	ldr	r0, [r4, #0]
 801d12c:	f7f6 fe18 	bl	8013d60 <rcl_take_request>
 801d130:	b148      	cbz	r0, 801d146 <rcl_action_take_goal_request+0x62>
 801d132:	280a      	cmp	r0, #10
 801d134:	d007      	beq.n	801d146 <rcl_action_take_goal_request+0x62>
 801d136:	f240 2259 	movw	r2, #601	; 0x259
 801d13a:	f640 0399 	movw	r3, #2201	; 0x899
 801d13e:	4290      	cmp	r0, r2
 801d140:	bf0c      	ite	eq
 801d142:	4618      	moveq	r0, r3
 801d144:	2001      	movne	r0, #1
 801d146:	bd70      	pop	{r4, r5, r6, pc}
 801d148:	f7f7 ffca 	bl	80150e0 <rcutils_reset_error>
 801d14c:	f640 0098 	movw	r0, #2200	; 0x898
 801d150:	bd70      	pop	{r4, r5, r6, pc}
 801d152:	f640 0098 	movw	r0, #2200	; 0x898
 801d156:	bd70      	pop	{r4, r5, r6, pc}
 801d158:	200b      	movs	r0, #11
 801d15a:	bd70      	pop	{r4, r5, r6, pc}
 801d15c:	f640 0098 	movw	r0, #2200	; 0x898
 801d160:	4770      	bx	lr
 801d162:	bf00      	nop

0801d164 <rcl_action_send_goal_response>:
 801d164:	b388      	cbz	r0, 801d1ca <rcl_action_send_goal_response+0x66>
 801d166:	b570      	push	{r4, r5, r6, lr}
 801d168:	4604      	mov	r4, r0
 801d16a:	6800      	ldr	r0, [r0, #0]
 801d16c:	b340      	cbz	r0, 801d1c0 <rcl_action_send_goal_response+0x5c>
 801d16e:	460e      	mov	r6, r1
 801d170:	4615      	mov	r5, r2
 801d172:	f7f6 fe4d 	bl	8013e10 <rcl_service_is_valid>
 801d176:	b1f0      	cbz	r0, 801d1b6 <rcl_action_send_goal_response+0x52>
 801d178:	6820      	ldr	r0, [r4, #0]
 801d17a:	3004      	adds	r0, #4
 801d17c:	f7f6 fe48 	bl	8013e10 <rcl_service_is_valid>
 801d180:	b1c8      	cbz	r0, 801d1b6 <rcl_action_send_goal_response+0x52>
 801d182:	6820      	ldr	r0, [r4, #0]
 801d184:	3008      	adds	r0, #8
 801d186:	f7f6 fe43 	bl	8013e10 <rcl_service_is_valid>
 801d18a:	b1a0      	cbz	r0, 801d1b6 <rcl_action_send_goal_response+0x52>
 801d18c:	6820      	ldr	r0, [r4, #0]
 801d18e:	300c      	adds	r0, #12
 801d190:	f7f6 fd02 	bl	8013b98 <rcl_publisher_is_valid>
 801d194:	b178      	cbz	r0, 801d1b6 <rcl_action_send_goal_response+0x52>
 801d196:	6820      	ldr	r0, [r4, #0]
 801d198:	3010      	adds	r0, #16
 801d19a:	f7f6 fcfd 	bl	8013b98 <rcl_publisher_is_valid>
 801d19e:	b150      	cbz	r0, 801d1b6 <rcl_action_send_goal_response+0x52>
 801d1a0:	b18d      	cbz	r5, 801d1c6 <rcl_action_send_goal_response+0x62>
 801d1a2:	b186      	cbz	r6, 801d1c6 <rcl_action_send_goal_response+0x62>
 801d1a4:	462a      	mov	r2, r5
 801d1a6:	4631      	mov	r1, r6
 801d1a8:	6820      	ldr	r0, [r4, #0]
 801d1aa:	f7f6 fe19 	bl	8013de0 <rcl_send_response>
 801d1ae:	3800      	subs	r0, #0
 801d1b0:	bf18      	it	ne
 801d1b2:	2001      	movne	r0, #1
 801d1b4:	bd70      	pop	{r4, r5, r6, pc}
 801d1b6:	f7f7 ff93 	bl	80150e0 <rcutils_reset_error>
 801d1ba:	f640 0098 	movw	r0, #2200	; 0x898
 801d1be:	bd70      	pop	{r4, r5, r6, pc}
 801d1c0:	f640 0098 	movw	r0, #2200	; 0x898
 801d1c4:	bd70      	pop	{r4, r5, r6, pc}
 801d1c6:	200b      	movs	r0, #11
 801d1c8:	bd70      	pop	{r4, r5, r6, pc}
 801d1ca:	f640 0098 	movw	r0, #2200	; 0x898
 801d1ce:	4770      	bx	lr

0801d1d0 <rcl_action_take_result_request>:
 801d1d0:	2800      	cmp	r0, #0
 801d1d2:	d03a      	beq.n	801d24a <rcl_action_take_result_request+0x7a>
 801d1d4:	b570      	push	{r4, r5, r6, lr}
 801d1d6:	4604      	mov	r4, r0
 801d1d8:	6800      	ldr	r0, [r0, #0]
 801d1da:	b388      	cbz	r0, 801d240 <rcl_action_take_result_request+0x70>
 801d1dc:	460e      	mov	r6, r1
 801d1de:	4615      	mov	r5, r2
 801d1e0:	f7f6 fe16 	bl	8013e10 <rcl_service_is_valid>
 801d1e4:	b338      	cbz	r0, 801d236 <rcl_action_take_result_request+0x66>
 801d1e6:	6820      	ldr	r0, [r4, #0]
 801d1e8:	3004      	adds	r0, #4
 801d1ea:	f7f6 fe11 	bl	8013e10 <rcl_service_is_valid>
 801d1ee:	b310      	cbz	r0, 801d236 <rcl_action_take_result_request+0x66>
 801d1f0:	6820      	ldr	r0, [r4, #0]
 801d1f2:	3008      	adds	r0, #8
 801d1f4:	f7f6 fe0c 	bl	8013e10 <rcl_service_is_valid>
 801d1f8:	b1e8      	cbz	r0, 801d236 <rcl_action_take_result_request+0x66>
 801d1fa:	6820      	ldr	r0, [r4, #0]
 801d1fc:	300c      	adds	r0, #12
 801d1fe:	f7f6 fccb 	bl	8013b98 <rcl_publisher_is_valid>
 801d202:	b1c0      	cbz	r0, 801d236 <rcl_action_take_result_request+0x66>
 801d204:	6820      	ldr	r0, [r4, #0]
 801d206:	3010      	adds	r0, #16
 801d208:	f7f6 fcc6 	bl	8013b98 <rcl_publisher_is_valid>
 801d20c:	b198      	cbz	r0, 801d236 <rcl_action_take_result_request+0x66>
 801d20e:	b1d5      	cbz	r5, 801d246 <rcl_action_take_result_request+0x76>
 801d210:	b1ce      	cbz	r6, 801d246 <rcl_action_take_result_request+0x76>
 801d212:	6820      	ldr	r0, [r4, #0]
 801d214:	462a      	mov	r2, r5
 801d216:	4631      	mov	r1, r6
 801d218:	3008      	adds	r0, #8
 801d21a:	f7f6 fda1 	bl	8013d60 <rcl_take_request>
 801d21e:	b148      	cbz	r0, 801d234 <rcl_action_take_result_request+0x64>
 801d220:	280a      	cmp	r0, #10
 801d222:	d007      	beq.n	801d234 <rcl_action_take_result_request+0x64>
 801d224:	f240 2259 	movw	r2, #601	; 0x259
 801d228:	f640 0399 	movw	r3, #2201	; 0x899
 801d22c:	4290      	cmp	r0, r2
 801d22e:	bf0c      	ite	eq
 801d230:	4618      	moveq	r0, r3
 801d232:	2001      	movne	r0, #1
 801d234:	bd70      	pop	{r4, r5, r6, pc}
 801d236:	f7f7 ff53 	bl	80150e0 <rcutils_reset_error>
 801d23a:	f640 0098 	movw	r0, #2200	; 0x898
 801d23e:	bd70      	pop	{r4, r5, r6, pc}
 801d240:	f640 0098 	movw	r0, #2200	; 0x898
 801d244:	bd70      	pop	{r4, r5, r6, pc}
 801d246:	200b      	movs	r0, #11
 801d248:	bd70      	pop	{r4, r5, r6, pc}
 801d24a:	f640 0098 	movw	r0, #2200	; 0x898
 801d24e:	4770      	bx	lr

0801d250 <rcl_action_take_cancel_request>:
 801d250:	2800      	cmp	r0, #0
 801d252:	d03a      	beq.n	801d2ca <rcl_action_take_cancel_request+0x7a>
 801d254:	b570      	push	{r4, r5, r6, lr}
 801d256:	4604      	mov	r4, r0
 801d258:	6800      	ldr	r0, [r0, #0]
 801d25a:	b388      	cbz	r0, 801d2c0 <rcl_action_take_cancel_request+0x70>
 801d25c:	460e      	mov	r6, r1
 801d25e:	4615      	mov	r5, r2
 801d260:	f7f6 fdd6 	bl	8013e10 <rcl_service_is_valid>
 801d264:	b338      	cbz	r0, 801d2b6 <rcl_action_take_cancel_request+0x66>
 801d266:	6820      	ldr	r0, [r4, #0]
 801d268:	3004      	adds	r0, #4
 801d26a:	f7f6 fdd1 	bl	8013e10 <rcl_service_is_valid>
 801d26e:	b310      	cbz	r0, 801d2b6 <rcl_action_take_cancel_request+0x66>
 801d270:	6820      	ldr	r0, [r4, #0]
 801d272:	3008      	adds	r0, #8
 801d274:	f7f6 fdcc 	bl	8013e10 <rcl_service_is_valid>
 801d278:	b1e8      	cbz	r0, 801d2b6 <rcl_action_take_cancel_request+0x66>
 801d27a:	6820      	ldr	r0, [r4, #0]
 801d27c:	300c      	adds	r0, #12
 801d27e:	f7f6 fc8b 	bl	8013b98 <rcl_publisher_is_valid>
 801d282:	b1c0      	cbz	r0, 801d2b6 <rcl_action_take_cancel_request+0x66>
 801d284:	6820      	ldr	r0, [r4, #0]
 801d286:	3010      	adds	r0, #16
 801d288:	f7f6 fc86 	bl	8013b98 <rcl_publisher_is_valid>
 801d28c:	b198      	cbz	r0, 801d2b6 <rcl_action_take_cancel_request+0x66>
 801d28e:	b1d5      	cbz	r5, 801d2c6 <rcl_action_take_cancel_request+0x76>
 801d290:	b1ce      	cbz	r6, 801d2c6 <rcl_action_take_cancel_request+0x76>
 801d292:	6820      	ldr	r0, [r4, #0]
 801d294:	462a      	mov	r2, r5
 801d296:	4631      	mov	r1, r6
 801d298:	3004      	adds	r0, #4
 801d29a:	f7f6 fd61 	bl	8013d60 <rcl_take_request>
 801d29e:	b148      	cbz	r0, 801d2b4 <rcl_action_take_cancel_request+0x64>
 801d2a0:	280a      	cmp	r0, #10
 801d2a2:	d007      	beq.n	801d2b4 <rcl_action_take_cancel_request+0x64>
 801d2a4:	f240 2259 	movw	r2, #601	; 0x259
 801d2a8:	f640 0399 	movw	r3, #2201	; 0x899
 801d2ac:	4290      	cmp	r0, r2
 801d2ae:	bf0c      	ite	eq
 801d2b0:	4618      	moveq	r0, r3
 801d2b2:	2001      	movne	r0, #1
 801d2b4:	bd70      	pop	{r4, r5, r6, pc}
 801d2b6:	f7f7 ff13 	bl	80150e0 <rcutils_reset_error>
 801d2ba:	f640 0098 	movw	r0, #2200	; 0x898
 801d2be:	bd70      	pop	{r4, r5, r6, pc}
 801d2c0:	f640 0098 	movw	r0, #2200	; 0x898
 801d2c4:	bd70      	pop	{r4, r5, r6, pc}
 801d2c6:	200b      	movs	r0, #11
 801d2c8:	bd70      	pop	{r4, r5, r6, pc}
 801d2ca:	f640 0098 	movw	r0, #2200	; 0x898
 801d2ce:	4770      	bx	lr

0801d2d0 <rcl_action_send_cancel_response>:
 801d2d0:	b390      	cbz	r0, 801d338 <rcl_action_send_cancel_response+0x68>
 801d2d2:	b570      	push	{r4, r5, r6, lr}
 801d2d4:	4604      	mov	r4, r0
 801d2d6:	6800      	ldr	r0, [r0, #0]
 801d2d8:	b348      	cbz	r0, 801d32e <rcl_action_send_cancel_response+0x5e>
 801d2da:	460e      	mov	r6, r1
 801d2dc:	4615      	mov	r5, r2
 801d2de:	f7f6 fd97 	bl	8013e10 <rcl_service_is_valid>
 801d2e2:	b1f8      	cbz	r0, 801d324 <rcl_action_send_cancel_response+0x54>
 801d2e4:	6820      	ldr	r0, [r4, #0]
 801d2e6:	3004      	adds	r0, #4
 801d2e8:	f7f6 fd92 	bl	8013e10 <rcl_service_is_valid>
 801d2ec:	b1d0      	cbz	r0, 801d324 <rcl_action_send_cancel_response+0x54>
 801d2ee:	6820      	ldr	r0, [r4, #0]
 801d2f0:	3008      	adds	r0, #8
 801d2f2:	f7f6 fd8d 	bl	8013e10 <rcl_service_is_valid>
 801d2f6:	b1a8      	cbz	r0, 801d324 <rcl_action_send_cancel_response+0x54>
 801d2f8:	6820      	ldr	r0, [r4, #0]
 801d2fa:	300c      	adds	r0, #12
 801d2fc:	f7f6 fc4c 	bl	8013b98 <rcl_publisher_is_valid>
 801d300:	b180      	cbz	r0, 801d324 <rcl_action_send_cancel_response+0x54>
 801d302:	6820      	ldr	r0, [r4, #0]
 801d304:	3010      	adds	r0, #16
 801d306:	f7f6 fc47 	bl	8013b98 <rcl_publisher_is_valid>
 801d30a:	b158      	cbz	r0, 801d324 <rcl_action_send_cancel_response+0x54>
 801d30c:	b195      	cbz	r5, 801d334 <rcl_action_send_cancel_response+0x64>
 801d30e:	b18e      	cbz	r6, 801d334 <rcl_action_send_cancel_response+0x64>
 801d310:	6820      	ldr	r0, [r4, #0]
 801d312:	462a      	mov	r2, r5
 801d314:	4631      	mov	r1, r6
 801d316:	3004      	adds	r0, #4
 801d318:	f7f6 fd62 	bl	8013de0 <rcl_send_response>
 801d31c:	3800      	subs	r0, #0
 801d31e:	bf18      	it	ne
 801d320:	2001      	movne	r0, #1
 801d322:	bd70      	pop	{r4, r5, r6, pc}
 801d324:	f7f7 fedc 	bl	80150e0 <rcutils_reset_error>
 801d328:	f640 0098 	movw	r0, #2200	; 0x898
 801d32c:	bd70      	pop	{r4, r5, r6, pc}
 801d32e:	f640 0098 	movw	r0, #2200	; 0x898
 801d332:	bd70      	pop	{r4, r5, r6, pc}
 801d334:	200b      	movs	r0, #11
 801d336:	bd70      	pop	{r4, r5, r6, pc}
 801d338:	f640 0098 	movw	r0, #2200	; 0x898
 801d33c:	4770      	bx	lr
 801d33e:	bf00      	nop

0801d340 <rcl_action_wait_set_add_action_server>:
 801d340:	2800      	cmp	r0, #0
 801d342:	d04d      	beq.n	801d3e0 <rcl_action_wait_set_add_action_server+0xa0>
 801d344:	b570      	push	{r4, r5, r6, lr}
 801d346:	460c      	mov	r4, r1
 801d348:	b159      	cbz	r1, 801d362 <rcl_action_wait_set_add_action_server+0x22>
 801d34a:	4605      	mov	r5, r0
 801d34c:	6808      	ldr	r0, [r1, #0]
 801d34e:	b140      	cbz	r0, 801d362 <rcl_action_wait_set_add_action_server+0x22>
 801d350:	4616      	mov	r6, r2
 801d352:	f7f6 fd5d 	bl	8013e10 <rcl_service_is_valid>
 801d356:	b120      	cbz	r0, 801d362 <rcl_action_wait_set_add_action_server+0x22>
 801d358:	6820      	ldr	r0, [r4, #0]
 801d35a:	3004      	adds	r0, #4
 801d35c:	f7f6 fd58 	bl	8013e10 <rcl_service_is_valid>
 801d360:	b910      	cbnz	r0, 801d368 <rcl_action_wait_set_add_action_server+0x28>
 801d362:	f640 0098 	movw	r0, #2200	; 0x898
 801d366:	bd70      	pop	{r4, r5, r6, pc}
 801d368:	6820      	ldr	r0, [r4, #0]
 801d36a:	3008      	adds	r0, #8
 801d36c:	f7f6 fd50 	bl	8013e10 <rcl_service_is_valid>
 801d370:	2800      	cmp	r0, #0
 801d372:	d0f6      	beq.n	801d362 <rcl_action_wait_set_add_action_server+0x22>
 801d374:	6820      	ldr	r0, [r4, #0]
 801d376:	300c      	adds	r0, #12
 801d378:	f7f6 fc26 	bl	8013bc8 <rcl_publisher_is_valid_except_context>
 801d37c:	2800      	cmp	r0, #0
 801d37e:	d0f0      	beq.n	801d362 <rcl_action_wait_set_add_action_server+0x22>
 801d380:	6820      	ldr	r0, [r4, #0]
 801d382:	3010      	adds	r0, #16
 801d384:	f7f6 fc20 	bl	8013bc8 <rcl_publisher_is_valid_except_context>
 801d388:	2800      	cmp	r0, #0
 801d38a:	d0ea      	beq.n	801d362 <rcl_action_wait_set_add_action_server+0x22>
 801d38c:	6821      	ldr	r1, [r4, #0]
 801d38e:	4628      	mov	r0, r5
 801d390:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d394:	f7ff fad2 	bl	801c93c <rcl_wait_set_add_service>
 801d398:	2800      	cmp	r0, #0
 801d39a:	d1e4      	bne.n	801d366 <rcl_action_wait_set_add_action_server+0x26>
 801d39c:	6821      	ldr	r1, [r4, #0]
 801d39e:	4628      	mov	r0, r5
 801d3a0:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d3a4:	3104      	adds	r1, #4
 801d3a6:	f7ff fac9 	bl	801c93c <rcl_wait_set_add_service>
 801d3aa:	2800      	cmp	r0, #0
 801d3ac:	d1db      	bne.n	801d366 <rcl_action_wait_set_add_action_server+0x26>
 801d3ae:	6821      	ldr	r1, [r4, #0]
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d3b6:	3108      	adds	r1, #8
 801d3b8:	f7ff fac0 	bl	801c93c <rcl_wait_set_add_service>
 801d3bc:	2800      	cmp	r0, #0
 801d3be:	d1d2      	bne.n	801d366 <rcl_action_wait_set_add_action_server+0x26>
 801d3c0:	6821      	ldr	r1, [r4, #0]
 801d3c2:	4628      	mov	r0, r5
 801d3c4:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d3c8:	3114      	adds	r1, #20
 801d3ca:	f7ff fa5b 	bl	801c884 <rcl_wait_set_add_timer>
 801d3ce:	2800      	cmp	r0, #0
 801d3d0:	d1c9      	bne.n	801d366 <rcl_action_wait_set_add_action_server+0x26>
 801d3d2:	2e00      	cmp	r6, #0
 801d3d4:	d0c7      	beq.n	801d366 <rcl_action_wait_set_add_action_server+0x26>
 801d3d6:	6823      	ldr	r3, [r4, #0]
 801d3d8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d3dc:	6033      	str	r3, [r6, #0]
 801d3de:	bd70      	pop	{r4, r5, r6, pc}
 801d3e0:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d3e4:	4770      	bx	lr
 801d3e6:	bf00      	nop

0801d3e8 <rcl_action_server_wait_set_get_entities_ready>:
 801d3e8:	2800      	cmp	r0, #0
 801d3ea:	d067      	beq.n	801d4bc <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3f0:	460c      	mov	r4, r1
 801d3f2:	b161      	cbz	r1, 801d40e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d3f4:	4605      	mov	r5, r0
 801d3f6:	6808      	ldr	r0, [r1, #0]
 801d3f8:	b148      	cbz	r0, 801d40e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d3fa:	4616      	mov	r6, r2
 801d3fc:	4698      	mov	r8, r3
 801d3fe:	f7f6 fd07 	bl	8013e10 <rcl_service_is_valid>
 801d402:	b120      	cbz	r0, 801d40e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d404:	6820      	ldr	r0, [r4, #0]
 801d406:	3004      	adds	r0, #4
 801d408:	f7f6 fd02 	bl	8013e10 <rcl_service_is_valid>
 801d40c:	b918      	cbnz	r0, 801d416 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d40e:	f640 0098 	movw	r0, #2200	; 0x898
 801d412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d416:	6820      	ldr	r0, [r4, #0]
 801d418:	3008      	adds	r0, #8
 801d41a:	f7f6 fcf9 	bl	8013e10 <rcl_service_is_valid>
 801d41e:	2800      	cmp	r0, #0
 801d420:	d0f5      	beq.n	801d40e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d422:	6820      	ldr	r0, [r4, #0]
 801d424:	300c      	adds	r0, #12
 801d426:	f7f6 fbcf 	bl	8013bc8 <rcl_publisher_is_valid_except_context>
 801d42a:	2800      	cmp	r0, #0
 801d42c:	d0ef      	beq.n	801d40e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d42e:	6820      	ldr	r0, [r4, #0]
 801d430:	3010      	adds	r0, #16
 801d432:	f7f6 fbc9 	bl	8013bc8 <rcl_publisher_is_valid_except_context>
 801d436:	2800      	cmp	r0, #0
 801d438:	d0e9      	beq.n	801d40e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d43a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d43e:	2a00      	cmp	r2, #0
 801d440:	bf18      	it	ne
 801d442:	2b00      	cmpne	r3, #0
 801d444:	bf0c      	ite	eq
 801d446:	2101      	moveq	r1, #1
 801d448:	2100      	movne	r1, #0
 801d44a:	f1b8 0f00 	cmp.w	r8, #0
 801d44e:	bf08      	it	eq
 801d450:	f041 0101 	orreq.w	r1, r1, #1
 801d454:	bba9      	cbnz	r1, 801d4c2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d456:	b3a6      	cbz	r6, 801d4c2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d458:	6821      	ldr	r1, [r4, #0]
 801d45a:	2000      	movs	r0, #0
 801d45c:	692c      	ldr	r4, [r5, #16]
 801d45e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d462:	6a2f      	ldr	r7, [r5, #32]
 801d464:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d468:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d46c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d470:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d474:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d478:	1a64      	subs	r4, r4, r1
 801d47a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d47e:	fab4 f484 	clz	r4, r4
 801d482:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d486:	0964      	lsrs	r4, r4, #5
 801d488:	7034      	strb	r4, [r6, #0]
 801d48a:	1d0c      	adds	r4, r1, #4
 801d48c:	1b2c      	subs	r4, r5, r4
 801d48e:	fab4 f484 	clz	r4, r4
 801d492:	0964      	lsrs	r4, r4, #5
 801d494:	f888 4000 	strb.w	r4, [r8]
 801d498:	f101 0408 	add.w	r4, r1, #8
 801d49c:	1b1b      	subs	r3, r3, r4
 801d49e:	9c06      	ldr	r4, [sp, #24]
 801d4a0:	fab3 f383 	clz	r3, r3
 801d4a4:	095b      	lsrs	r3, r3, #5
 801d4a6:	7023      	strb	r3, [r4, #0]
 801d4a8:	f101 0314 	add.w	r3, r1, #20
 801d4ac:	1ad3      	subs	r3, r2, r3
 801d4ae:	9a07      	ldr	r2, [sp, #28]
 801d4b0:	fab3 f383 	clz	r3, r3
 801d4b4:	095b      	lsrs	r3, r3, #5
 801d4b6:	7013      	strb	r3, [r2, #0]
 801d4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d4c0:	4770      	bx	lr
 801d4c2:	200b      	movs	r0, #11
 801d4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d4c8 <_execute_event_handler>:
 801d4c8:	2002      	movs	r0, #2
 801d4ca:	4770      	bx	lr

0801d4cc <_cancel_goal_event_handler>:
 801d4cc:	2003      	movs	r0, #3
 801d4ce:	4770      	bx	lr

0801d4d0 <_succeed_event_handler>:
 801d4d0:	2004      	movs	r0, #4
 801d4d2:	4770      	bx	lr

0801d4d4 <_abort_event_handler>:
 801d4d4:	2006      	movs	r0, #6
 801d4d6:	4770      	bx	lr

0801d4d8 <_canceled_event_handler>:
 801d4d8:	2005      	movs	r0, #5
 801d4da:	4770      	bx	lr

0801d4dc <rcl_action_transition_goal_state>:
 801d4dc:	b2c2      	uxtb	r2, r0
 801d4de:	2a06      	cmp	r2, #6
 801d4e0:	d810      	bhi.n	801d504 <rcl_action_transition_goal_state+0x28>
 801d4e2:	2904      	cmp	r1, #4
 801d4e4:	d80e      	bhi.n	801d504 <rcl_action_transition_goal_state+0x28>
 801d4e6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d4ea:	b410      	push	{r4}
 801d4ec:	1853      	adds	r3, r2, r1
 801d4ee:	4c06      	ldr	r4, [pc, #24]	; (801d508 <rcl_action_transition_goal_state+0x2c>)
 801d4f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d4f4:	b113      	cbz	r3, 801d4fc <rcl_action_transition_goal_state+0x20>
 801d4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d4fa:	4718      	bx	r3
 801d4fc:	2000      	movs	r0, #0
 801d4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d502:	4770      	bx	lr
 801d504:	2000      	movs	r0, #0
 801d506:	4770      	bx	lr
 801d508:	080259e4 	.word	0x080259e4

0801d50c <rcl_action_get_zero_initialized_cancel_response>:
 801d50c:	b510      	push	{r4, lr}
 801d50e:	4c07      	ldr	r4, [pc, #28]	; (801d52c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d510:	4686      	mov	lr, r0
 801d512:	4684      	mov	ip, r0
 801d514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d516:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d51a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d51c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d520:	6823      	ldr	r3, [r4, #0]
 801d522:	4670      	mov	r0, lr
 801d524:	f8cc 3000 	str.w	r3, [ip]
 801d528:	bd10      	pop	{r4, pc}
 801d52a:	bf00      	nop
 801d52c:	08025a70 	.word	0x08025a70

0801d530 <rclc_action_send_result_request>:
 801d530:	b1d0      	cbz	r0, 801d568 <rclc_action_send_result_request+0x38>
 801d532:	4684      	mov	ip, r0
 801d534:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d538:	b500      	push	{lr}
 801d53a:	b087      	sub	sp, #28
 801d53c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d540:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d544:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d548:	f10d 0e08 	add.w	lr, sp, #8
 801d54c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d550:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d554:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d558:	a902      	add	r1, sp, #8
 801d55a:	3010      	adds	r0, #16
 801d55c:	f7ff fbcc 	bl	801ccf8 <rcl_action_send_result_request>
 801d560:	b920      	cbnz	r0, 801d56c <rclc_action_send_result_request+0x3c>
 801d562:	b007      	add	sp, #28
 801d564:	f85d fb04 	ldr.w	pc, [sp], #4
 801d568:	200b      	movs	r0, #11
 801d56a:	4770      	bx	lr
 801d56c:	9001      	str	r0, [sp, #4]
 801d56e:	f7f7 fdb7 	bl	80150e0 <rcutils_reset_error>
 801d572:	9801      	ldr	r0, [sp, #4]
 801d574:	b007      	add	sp, #28
 801d576:	f85d fb04 	ldr.w	pc, [sp], #4
 801d57a:	bf00      	nop

0801d57c <rclc_action_take_goal_handle>:
 801d57c:	b160      	cbz	r0, 801d598 <rclc_action_take_goal_handle+0x1c>
 801d57e:	6883      	ldr	r3, [r0, #8]
 801d580:	b143      	cbz	r3, 801d594 <rclc_action_take_goal_handle+0x18>
 801d582:	6819      	ldr	r1, [r3, #0]
 801d584:	2200      	movs	r2, #0
 801d586:	6081      	str	r1, [r0, #8]
 801d588:	721a      	strb	r2, [r3, #8]
 801d58a:	68c1      	ldr	r1, [r0, #12]
 801d58c:	621a      	str	r2, [r3, #32]
 801d58e:	849a      	strh	r2, [r3, #36]	; 0x24
 801d590:	6019      	str	r1, [r3, #0]
 801d592:	60c3      	str	r3, [r0, #12]
 801d594:	4618      	mov	r0, r3
 801d596:	4770      	bx	lr
 801d598:	4603      	mov	r3, r0
 801d59a:	e7fb      	b.n	801d594 <rclc_action_take_goal_handle+0x18>

0801d59c <rclc_action_remove_used_goal_handle>:
 801d59c:	b180      	cbz	r0, 801d5c0 <rclc_action_remove_used_goal_handle+0x24>
 801d59e:	b179      	cbz	r1, 801d5c0 <rclc_action_remove_used_goal_handle+0x24>
 801d5a0:	68c3      	ldr	r3, [r0, #12]
 801d5a2:	4299      	cmp	r1, r3
 801d5a4:	d00d      	beq.n	801d5c2 <rclc_action_remove_used_goal_handle+0x26>
 801d5a6:	b12b      	cbz	r3, 801d5b4 <rclc_action_remove_used_goal_handle+0x18>
 801d5a8:	681a      	ldr	r2, [r3, #0]
 801d5aa:	4291      	cmp	r1, r2
 801d5ac:	d003      	beq.n	801d5b6 <rclc_action_remove_used_goal_handle+0x1a>
 801d5ae:	4613      	mov	r3, r2
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d1f9      	bne.n	801d5a8 <rclc_action_remove_used_goal_handle+0xc>
 801d5b4:	4770      	bx	lr
 801d5b6:	680a      	ldr	r2, [r1, #0]
 801d5b8:	601a      	str	r2, [r3, #0]
 801d5ba:	6883      	ldr	r3, [r0, #8]
 801d5bc:	600b      	str	r3, [r1, #0]
 801d5be:	6081      	str	r1, [r0, #8]
 801d5c0:	4770      	bx	lr
 801d5c2:	680b      	ldr	r3, [r1, #0]
 801d5c4:	60c3      	str	r3, [r0, #12]
 801d5c6:	e7f8      	b.n	801d5ba <rclc_action_remove_used_goal_handle+0x1e>

0801d5c8 <rclc_action_find_goal_handle_by_uuid>:
 801d5c8:	b538      	push	{r3, r4, r5, lr}
 801d5ca:	b181      	cbz	r1, 801d5ee <rclc_action_find_goal_handle_by_uuid+0x26>
 801d5cc:	b178      	cbz	r0, 801d5ee <rclc_action_find_goal_handle_by_uuid+0x26>
 801d5ce:	68c4      	ldr	r4, [r0, #12]
 801d5d0:	460d      	mov	r5, r1
 801d5d2:	b914      	cbnz	r4, 801d5da <rclc_action_find_goal_handle_by_uuid+0x12>
 801d5d4:	e009      	b.n	801d5ea <rclc_action_find_goal_handle_by_uuid+0x22>
 801d5d6:	6824      	ldr	r4, [r4, #0]
 801d5d8:	b13c      	cbz	r4, 801d5ea <rclc_action_find_goal_handle_by_uuid+0x22>
 801d5da:	f104 0009 	add.w	r0, r4, #9
 801d5de:	2210      	movs	r2, #16
 801d5e0:	4629      	mov	r1, r5
 801d5e2:	f003 fba9 	bl	8020d38 <memcmp>
 801d5e6:	2800      	cmp	r0, #0
 801d5e8:	d1f5      	bne.n	801d5d6 <rclc_action_find_goal_handle_by_uuid+0xe>
 801d5ea:	4620      	mov	r0, r4
 801d5ec:	bd38      	pop	{r3, r4, r5, pc}
 801d5ee:	2400      	movs	r4, #0
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	bd38      	pop	{r3, r4, r5, pc}

0801d5f4 <rclc_action_find_first_handle_by_status>:
 801d5f4:	b140      	cbz	r0, 801d608 <rclc_action_find_first_handle_by_status+0x14>
 801d5f6:	68c0      	ldr	r0, [r0, #12]
 801d5f8:	b910      	cbnz	r0, 801d600 <rclc_action_find_first_handle_by_status+0xc>
 801d5fa:	e005      	b.n	801d608 <rclc_action_find_first_handle_by_status+0x14>
 801d5fc:	6800      	ldr	r0, [r0, #0]
 801d5fe:	b118      	cbz	r0, 801d608 <rclc_action_find_first_handle_by_status+0x14>
 801d600:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d604:	428b      	cmp	r3, r1
 801d606:	d1f9      	bne.n	801d5fc <rclc_action_find_first_handle_by_status+0x8>
 801d608:	4770      	bx	lr
 801d60a:	bf00      	nop

0801d60c <rclc_action_find_first_terminated_handle>:
 801d60c:	b140      	cbz	r0, 801d620 <rclc_action_find_first_terminated_handle+0x14>
 801d60e:	68c0      	ldr	r0, [r0, #12]
 801d610:	b910      	cbnz	r0, 801d618 <rclc_action_find_first_terminated_handle+0xc>
 801d612:	e005      	b.n	801d620 <rclc_action_find_first_terminated_handle+0x14>
 801d614:	6800      	ldr	r0, [r0, #0]
 801d616:	b118      	cbz	r0, 801d620 <rclc_action_find_first_terminated_handle+0x14>
 801d618:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d61c:	2b03      	cmp	r3, #3
 801d61e:	ddf9      	ble.n	801d614 <rclc_action_find_first_terminated_handle+0x8>
 801d620:	4770      	bx	lr
 801d622:	bf00      	nop

0801d624 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d624:	b170      	cbz	r0, 801d644 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d626:	68c0      	ldr	r0, [r0, #12]
 801d628:	b160      	cbz	r0, 801d644 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d62a:	b410      	push	{r4}
 801d62c:	e001      	b.n	801d632 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d62e:	6800      	ldr	r0, [r0, #0]
 801d630:	b128      	cbz	r0, 801d63e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d632:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801d636:	4299      	cmp	r1, r3
 801d638:	bf08      	it	eq
 801d63a:	4294      	cmpeq	r4, r2
 801d63c:	d1f7      	bne.n	801d62e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d642:	4770      	bx	lr
 801d644:	4770      	bx	lr
 801d646:	bf00      	nop

0801d648 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d648:	b170      	cbz	r0, 801d668 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d64a:	68c0      	ldr	r0, [r0, #12]
 801d64c:	b160      	cbz	r0, 801d668 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d64e:	b410      	push	{r4}
 801d650:	e001      	b.n	801d656 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d652:	6800      	ldr	r0, [r0, #0]
 801d654:	b128      	cbz	r0, 801d662 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d656:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801d65a:	4299      	cmp	r1, r3
 801d65c:	bf08      	it	eq
 801d65e:	4294      	cmpeq	r4, r2
 801d660:	d1f7      	bne.n	801d652 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d662:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d666:	4770      	bx	lr
 801d668:	4770      	bx	lr
 801d66a:	bf00      	nop

0801d66c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801d66c:	b170      	cbz	r0, 801d68c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d66e:	68c0      	ldr	r0, [r0, #12]
 801d670:	b160      	cbz	r0, 801d68c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d672:	b410      	push	{r4}
 801d674:	e001      	b.n	801d67a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801d676:	6800      	ldr	r0, [r0, #0]
 801d678:	b128      	cbz	r0, 801d686 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801d67a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801d67e:	4299      	cmp	r1, r3
 801d680:	bf08      	it	eq
 801d682:	4294      	cmpeq	r4, r2
 801d684:	d1f7      	bne.n	801d676 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801d686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d68a:	4770      	bx	lr
 801d68c:	4770      	bx	lr
 801d68e:	bf00      	nop

0801d690 <rclc_action_find_first_handle_with_goal_response>:
 801d690:	b140      	cbz	r0, 801d6a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d692:	68c0      	ldr	r0, [r0, #12]
 801d694:	b910      	cbnz	r0, 801d69c <rclc_action_find_first_handle_with_goal_response+0xc>
 801d696:	e005      	b.n	801d6a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d698:	6800      	ldr	r0, [r0, #0]
 801d69a:	b118      	cbz	r0, 801d6a4 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d69c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d0f9      	beq.n	801d698 <rclc_action_find_first_handle_with_goal_response+0x8>
 801d6a4:	4770      	bx	lr
 801d6a6:	bf00      	nop

0801d6a8 <rclc_action_find_first_handle_with_result_response>:
 801d6a8:	b140      	cbz	r0, 801d6bc <rclc_action_find_first_handle_with_result_response+0x14>
 801d6aa:	68c0      	ldr	r0, [r0, #12]
 801d6ac:	b910      	cbnz	r0, 801d6b4 <rclc_action_find_first_handle_with_result_response+0xc>
 801d6ae:	e005      	b.n	801d6bc <rclc_action_find_first_handle_with_result_response+0x14>
 801d6b0:	6800      	ldr	r0, [r0, #0]
 801d6b2:	b118      	cbz	r0, 801d6bc <rclc_action_find_first_handle_with_result_response+0x14>
 801d6b4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d0f9      	beq.n	801d6b0 <rclc_action_find_first_handle_with_result_response+0x8>
 801d6bc:	4770      	bx	lr
 801d6be:	bf00      	nop

0801d6c0 <rclc_action_server_response_goal_request>:
 801d6c0:	b198      	cbz	r0, 801d6ea <rclc_action_server_response_goal_request+0x2a>
 801d6c2:	2200      	movs	r2, #0
 801d6c4:	460b      	mov	r3, r1
 801d6c6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d6ca:	b510      	push	{r4, lr}
 801d6cc:	6844      	ldr	r4, [r0, #4]
 801d6ce:	b086      	sub	sp, #24
 801d6d0:	f104 0010 	add.w	r0, r4, #16
 801d6d4:	9205      	str	r2, [sp, #20]
 801d6d6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801d6da:	aa03      	add	r2, sp, #12
 801d6dc:	f88d 300c 	strb.w	r3, [sp, #12]
 801d6e0:	f7ff fd40 	bl	801d164 <rcl_action_send_goal_response>
 801d6e4:	b918      	cbnz	r0, 801d6ee <rclc_action_server_response_goal_request+0x2e>
 801d6e6:	b006      	add	sp, #24
 801d6e8:	bd10      	pop	{r4, pc}
 801d6ea:	200b      	movs	r0, #11
 801d6ec:	4770      	bx	lr
 801d6ee:	9001      	str	r0, [sp, #4]
 801d6f0:	f7f7 fcf6 	bl	80150e0 <rcutils_reset_error>
 801d6f4:	9801      	ldr	r0, [sp, #4]
 801d6f6:	b006      	add	sp, #24
 801d6f8:	bd10      	pop	{r4, pc}
 801d6fa:	bf00      	nop
 801d6fc:	0000      	movs	r0, r0
	...

0801d700 <rclc_action_server_goal_cancel_accept>:
 801d700:	b310      	cbz	r0, 801d748 <rclc_action_server_goal_cancel_accept+0x48>
 801d702:	b510      	push	{r4, lr}
 801d704:	b090      	sub	sp, #64	; 0x40
 801d706:	4604      	mov	r4, r0
 801d708:	a806      	add	r0, sp, #24
 801d70a:	f7ff feff 	bl	801d50c <rcl_action_get_zero_initialized_cancel_response>
 801d70e:	2300      	movs	r3, #0
 801d710:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801d714:	46ec      	mov	ip, sp
 801d716:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801d71a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801d71e:	f88d 3018 	strb.w	r3, [sp, #24]
 801d722:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801d726:	f8cd d01c 	str.w	sp, [sp, #28]
 801d72a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d72e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801d750 <rclc_action_server_goal_cancel_accept+0x50>
 801d732:	6860      	ldr	r0, [r4, #4]
 801d734:	aa06      	add	r2, sp, #24
 801d736:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801d73a:	3010      	adds	r0, #16
 801d73c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d740:	f7ff fdc6 	bl	801d2d0 <rcl_action_send_cancel_response>
 801d744:	b010      	add	sp, #64	; 0x40
 801d746:	bd10      	pop	{r4, pc}
 801d748:	200b      	movs	r0, #11
 801d74a:	4770      	bx	lr
 801d74c:	f3af 8000 	nop.w
 801d750:	00000001 	.word	0x00000001
 801d754:	00000001 	.word	0x00000001

0801d758 <rclc_action_server_goal_cancel_reject>:
 801d758:	b082      	sub	sp, #8
 801d75a:	b530      	push	{r4, r5, lr}
 801d75c:	b08b      	sub	sp, #44	; 0x2c
 801d75e:	ac0e      	add	r4, sp, #56	; 0x38
 801d760:	e884 000c 	stmia.w	r4, {r2, r3}
 801d764:	b188      	cbz	r0, 801d78a <rclc_action_server_goal_cancel_reject+0x32>
 801d766:	4604      	mov	r4, r0
 801d768:	a801      	add	r0, sp, #4
 801d76a:	460d      	mov	r5, r1
 801d76c:	f7ff fece 	bl	801d50c <rcl_action_get_zero_initialized_cancel_response>
 801d770:	aa01      	add	r2, sp, #4
 801d772:	a90e      	add	r1, sp, #56	; 0x38
 801d774:	f104 0010 	add.w	r0, r4, #16
 801d778:	f88d 5004 	strb.w	r5, [sp, #4]
 801d77c:	f7ff fda8 	bl	801d2d0 <rcl_action_send_cancel_response>
 801d780:	b00b      	add	sp, #44	; 0x2c
 801d782:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d786:	b002      	add	sp, #8
 801d788:	4770      	bx	lr
 801d78a:	200b      	movs	r0, #11
 801d78c:	b00b      	add	sp, #44	; 0x2c
 801d78e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d792:	b002      	add	sp, #8
 801d794:	4770      	bx	lr
 801d796:	bf00      	nop

0801d798 <__atomic_load_8>:
 801d798:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801d79c:	4a16      	ldr	r2, [pc, #88]	; (801d7f8 <__atomic_load_8+0x60>)
 801d79e:	4b17      	ldr	r3, [pc, #92]	; (801d7fc <__atomic_load_8+0x64>)
 801d7a0:	f04f 0c01 	mov.w	ip, #1
 801d7a4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801d7a8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801d7ac:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801d7b0:	fb02 f101 	mul.w	r1, r2, r1
 801d7b4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801d7b8:	fba3 2301 	umull	r2, r3, r3, r1
 801d7bc:	091b      	lsrs	r3, r3, #4
 801d7be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d7c2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801d7c6:	b4d0      	push	{r4, r6, r7}
 801d7c8:	1ac9      	subs	r1, r1, r3
 801d7ca:	4c0d      	ldr	r4, [pc, #52]	; (801d800 <__atomic_load_8+0x68>)
 801d7cc:	1862      	adds	r2, r4, r1
 801d7ce:	e8d2 3f4f 	ldrexb	r3, [r2]
 801d7d2:	e8c2 cf46 	strexb	r6, ip, [r2]
 801d7d6:	2e00      	cmp	r6, #0
 801d7d8:	d1f9      	bne.n	801d7ce <__atomic_load_8+0x36>
 801d7da:	b2db      	uxtb	r3, r3
 801d7dc:	f3bf 8f5b 	dmb	ish
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d1f4      	bne.n	801d7ce <__atomic_load_8+0x36>
 801d7e4:	e9d0 6700 	ldrd	r6, r7, [r0]
 801d7e8:	f3bf 8f5b 	dmb	ish
 801d7ec:	5463      	strb	r3, [r4, r1]
 801d7ee:	4630      	mov	r0, r6
 801d7f0:	4639      	mov	r1, r7
 801d7f2:	bcd0      	pop	{r4, r6, r7}
 801d7f4:	4770      	bx	lr
 801d7f6:	bf00      	nop
 801d7f8:	27d4eb2d 	.word	0x27d4eb2d
 801d7fc:	b21642c9 	.word	0xb21642c9
 801d800:	20016fa8 	.word	0x20016fa8

0801d804 <__atomic_store_8>:
 801d804:	b570      	push	{r4, r5, r6, lr}
 801d806:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801d80a:	4916      	ldr	r1, [pc, #88]	; (801d864 <__atomic_store_8+0x60>)
 801d80c:	4c16      	ldr	r4, [pc, #88]	; (801d868 <__atomic_store_8+0x64>)
 801d80e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801d812:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801d816:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801d81a:	fb01 fe0e 	mul.w	lr, r1, lr
 801d81e:	4913      	ldr	r1, [pc, #76]	; (801d86c <__atomic_store_8+0x68>)
 801d820:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801d824:	fba1 510e 	umull	r5, r1, r1, lr
 801d828:	f04f 0501 	mov.w	r5, #1
 801d82c:	0909      	lsrs	r1, r1, #4
 801d82e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801d832:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801d836:	ebae 0e01 	sub.w	lr, lr, r1
 801d83a:	eb04 0c0e 	add.w	ip, r4, lr
 801d83e:	e8dc 1f4f 	ldrexb	r1, [ip]
 801d842:	e8cc 5f46 	strexb	r6, r5, [ip]
 801d846:	2e00      	cmp	r6, #0
 801d848:	d1f9      	bne.n	801d83e <__atomic_store_8+0x3a>
 801d84a:	b2c9      	uxtb	r1, r1
 801d84c:	f3bf 8f5b 	dmb	ish
 801d850:	2900      	cmp	r1, #0
 801d852:	d1f4      	bne.n	801d83e <__atomic_store_8+0x3a>
 801d854:	e9c0 2300 	strd	r2, r3, [r0]
 801d858:	f3bf 8f5b 	dmb	ish
 801d85c:	f804 100e 	strb.w	r1, [r4, lr]
 801d860:	bd70      	pop	{r4, r5, r6, pc}
 801d862:	bf00      	nop
 801d864:	27d4eb2d 	.word	0x27d4eb2d
 801d868:	20016fa8 	.word	0x20016fa8
 801d86c:	b21642c9 	.word	0xb21642c9

0801d870 <__atomic_exchange_8>:
 801d870:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801d874:	4917      	ldr	r1, [pc, #92]	; (801d8d4 <__atomic_exchange_8+0x64>)
 801d876:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801d87a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801d87e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801d882:	fb01 fc0c 	mul.w	ip, r1, ip
 801d886:	4914      	ldr	r1, [pc, #80]	; (801d8d8 <__atomic_exchange_8+0x68>)
 801d888:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801d88c:	b570      	push	{r4, r5, r6, lr}
 801d88e:	4686      	mov	lr, r0
 801d890:	fba1 010c 	umull	r0, r1, r1, ip
 801d894:	4d11      	ldr	r5, [pc, #68]	; (801d8dc <__atomic_exchange_8+0x6c>)
 801d896:	f04f 0001 	mov.w	r0, #1
 801d89a:	0909      	lsrs	r1, r1, #4
 801d89c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801d8a0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801d8a4:	ebac 0c01 	sub.w	ip, ip, r1
 801d8a8:	eb05 010c 	add.w	r1, r5, ip
 801d8ac:	e8d1 4f4f 	ldrexb	r4, [r1]
 801d8b0:	e8c1 0f46 	strexb	r6, r0, [r1]
 801d8b4:	2e00      	cmp	r6, #0
 801d8b6:	d1f9      	bne.n	801d8ac <__atomic_exchange_8+0x3c>
 801d8b8:	b2e4      	uxtb	r4, r4
 801d8ba:	f3bf 8f5b 	dmb	ish
 801d8be:	2c00      	cmp	r4, #0
 801d8c0:	d1f4      	bne.n	801d8ac <__atomic_exchange_8+0x3c>
 801d8c2:	e9de 0100 	ldrd	r0, r1, [lr]
 801d8c6:	e9ce 2300 	strd	r2, r3, [lr]
 801d8ca:	f3bf 8f5b 	dmb	ish
 801d8ce:	f805 400c 	strb.w	r4, [r5, ip]
 801d8d2:	bd70      	pop	{r4, r5, r6, pc}
 801d8d4:	27d4eb2d 	.word	0x27d4eb2d
 801d8d8:	b21642c9 	.word	0xb21642c9
 801d8dc:	20016fa8 	.word	0x20016fa8

0801d8e0 <rcutils_is_directory>:
 801d8e0:	2000      	movs	r0, #0
 801d8e2:	4770      	bx	lr

0801d8e4 <rcutils_join_path>:
 801d8e4:	b082      	sub	sp, #8
 801d8e6:	2000      	movs	r0, #0
 801d8e8:	e88d 000c 	stmia.w	sp, {r2, r3}
 801d8ec:	b002      	add	sp, #8
 801d8ee:	4770      	bx	lr

0801d8f0 <rcutils_to_native_path>:
 801d8f0:	b084      	sub	sp, #16
 801d8f2:	2000      	movs	r0, #0
 801d8f4:	f10d 0c04 	add.w	ip, sp, #4
 801d8f8:	b004      	add	sp, #16
 801d8fa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801d8fe:	4770      	bx	lr

0801d900 <rcutils_string_array_fini>:
 801d900:	b328      	cbz	r0, 801d94e <rcutils_string_array_fini+0x4e>
 801d902:	b570      	push	{r4, r5, r6, lr}
 801d904:	4604      	mov	r4, r0
 801d906:	6840      	ldr	r0, [r0, #4]
 801d908:	b1e0      	cbz	r0, 801d944 <rcutils_string_array_fini+0x44>
 801d90a:	f104 0008 	add.w	r0, r4, #8
 801d90e:	f7f7 fba9 	bl	8015064 <rcutils_allocator_is_valid>
 801d912:	b1c0      	cbz	r0, 801d946 <rcutils_string_array_fini+0x46>
 801d914:	6823      	ldr	r3, [r4, #0]
 801d916:	b1c3      	cbz	r3, 801d94a <rcutils_string_array_fini+0x4a>
 801d918:	2500      	movs	r5, #0
 801d91a:	6860      	ldr	r0, [r4, #4]
 801d91c:	462e      	mov	r6, r5
 801d91e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d922:	68e3      	ldr	r3, [r4, #12]
 801d924:	69a1      	ldr	r1, [r4, #24]
 801d926:	4798      	blx	r3
 801d928:	e9d4 3000 	ldrd	r3, r0, [r4]
 801d92c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801d930:	3501      	adds	r5, #1
 801d932:	429d      	cmp	r5, r3
 801d934:	d3f3      	bcc.n	801d91e <rcutils_string_array_fini+0x1e>
 801d936:	68e3      	ldr	r3, [r4, #12]
 801d938:	69a1      	ldr	r1, [r4, #24]
 801d93a:	4798      	blx	r3
 801d93c:	2300      	movs	r3, #0
 801d93e:	4618      	mov	r0, r3
 801d940:	e9c4 3300 	strd	r3, r3, [r4]
 801d944:	bd70      	pop	{r4, r5, r6, pc}
 801d946:	200b      	movs	r0, #11
 801d948:	bd70      	pop	{r4, r5, r6, pc}
 801d94a:	6860      	ldr	r0, [r4, #4]
 801d94c:	e7f3      	b.n	801d936 <rcutils_string_array_fini+0x36>
 801d94e:	200b      	movs	r0, #11
 801d950:	4770      	bx	lr
 801d952:	bf00      	nop

0801d954 <rcutils_get_zero_initialized_string_map>:
 801d954:	2000      	movs	r0, #0
 801d956:	4b01      	ldr	r3, [pc, #4]	; (801d95c <rcutils_get_zero_initialized_string_map+0x8>)
 801d958:	6018      	str	r0, [r3, #0]
 801d95a:	4770      	bx	lr
 801d95c:	20016fc0 	.word	0x20016fc0

0801d960 <rcutils_string_map_reserve>:
 801d960:	2800      	cmp	r0, #0
 801d962:	d05e      	beq.n	801da22 <rcutils_string_map_reserve+0xc2>
 801d964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d968:	460c      	mov	r4, r1
 801d96a:	6801      	ldr	r1, [r0, #0]
 801d96c:	b082      	sub	sp, #8
 801d96e:	4605      	mov	r5, r0
 801d970:	b129      	cbz	r1, 801d97e <rcutils_string_map_reserve+0x1e>
 801d972:	68cb      	ldr	r3, [r1, #12]
 801d974:	42a3      	cmp	r3, r4
 801d976:	d906      	bls.n	801d986 <rcutils_string_map_reserve+0x26>
 801d978:	461c      	mov	r4, r3
 801d97a:	2900      	cmp	r1, #0
 801d97c:	d1f9      	bne.n	801d972 <rcutils_string_map_reserve+0x12>
 801d97e:	201f      	movs	r0, #31
 801d980:	b002      	add	sp, #8
 801d982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d986:	688b      	ldr	r3, [r1, #8]
 801d988:	42a3      	cmp	r3, r4
 801d98a:	d046      	beq.n	801da1a <rcutils_string_map_reserve+0xba>
 801d98c:	6a0e      	ldr	r6, [r1, #32]
 801d98e:	2c00      	cmp	r4, #0
 801d990:	d033      	beq.n	801d9fa <rcutils_string_map_reserve+0x9a>
 801d992:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801d996:	d242      	bcs.n	801da1e <rcutils_string_map_reserve+0xbe>
 801d998:	00a7      	lsls	r7, r4, #2
 801d99a:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801d99e:	6808      	ldr	r0, [r1, #0]
 801d9a0:	4632      	mov	r2, r6
 801d9a2:	4639      	mov	r1, r7
 801d9a4:	47c0      	blx	r8
 801d9a6:	2800      	cmp	r0, #0
 801d9a8:	d039      	beq.n	801da1e <rcutils_string_map_reserve+0xbe>
 801d9aa:	682b      	ldr	r3, [r5, #0]
 801d9ac:	4632      	mov	r2, r6
 801d9ae:	4639      	mov	r1, r7
 801d9b0:	6018      	str	r0, [r3, #0]
 801d9b2:	6858      	ldr	r0, [r3, #4]
 801d9b4:	47c0      	blx	r8
 801d9b6:	2800      	cmp	r0, #0
 801d9b8:	d031      	beq.n	801da1e <rcutils_string_map_reserve+0xbe>
 801d9ba:	682d      	ldr	r5, [r5, #0]
 801d9bc:	68ab      	ldr	r3, [r5, #8]
 801d9be:	6068      	str	r0, [r5, #4]
 801d9c0:	42a3      	cmp	r3, r4
 801d9c2:	d225      	bcs.n	801da10 <rcutils_string_map_reserve+0xb0>
 801d9c4:	682a      	ldr	r2, [r5, #0]
 801d9c6:	eb00 0c07 	add.w	ip, r0, r7
 801d9ca:	0099      	lsls	r1, r3, #2
 801d9cc:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801d9d0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801d9d4:	45e6      	cmp	lr, ip
 801d9d6:	d203      	bcs.n	801d9e0 <rcutils_string_map_reserve+0x80>
 801d9d8:	eb02 0c07 	add.w	ip, r2, r7
 801d9dc:	4566      	cmp	r6, ip
 801d9de:	d322      	bcc.n	801da26 <rcutils_string_map_reserve+0xc6>
 801d9e0:	1ae3      	subs	r3, r4, r3
 801d9e2:	4670      	mov	r0, lr
 801d9e4:	2100      	movs	r1, #0
 801d9e6:	009a      	lsls	r2, r3, #2
 801d9e8:	9201      	str	r2, [sp, #4]
 801d9ea:	f003 f9cf 	bl	8020d8c <memset>
 801d9ee:	9a01      	ldr	r2, [sp, #4]
 801d9f0:	2100      	movs	r1, #0
 801d9f2:	4630      	mov	r0, r6
 801d9f4:	f003 f9ca 	bl	8020d8c <memset>
 801d9f8:	e00a      	b.n	801da10 <rcutils_string_map_reserve+0xb0>
 801d9fa:	694f      	ldr	r7, [r1, #20]
 801d9fc:	6808      	ldr	r0, [r1, #0]
 801d9fe:	4631      	mov	r1, r6
 801da00:	47b8      	blx	r7
 801da02:	682b      	ldr	r3, [r5, #0]
 801da04:	4631      	mov	r1, r6
 801da06:	6858      	ldr	r0, [r3, #4]
 801da08:	601c      	str	r4, [r3, #0]
 801da0a:	47b8      	blx	r7
 801da0c:	682d      	ldr	r5, [r5, #0]
 801da0e:	606c      	str	r4, [r5, #4]
 801da10:	2000      	movs	r0, #0
 801da12:	60ac      	str	r4, [r5, #8]
 801da14:	b002      	add	sp, #8
 801da16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da1a:	2000      	movs	r0, #0
 801da1c:	e7b0      	b.n	801d980 <rcutils_string_map_reserve+0x20>
 801da1e:	200a      	movs	r0, #10
 801da20:	e7ae      	b.n	801d980 <rcutils_string_map_reserve+0x20>
 801da22:	200b      	movs	r0, #11
 801da24:	4770      	bx	lr
 801da26:	1f0b      	subs	r3, r1, #4
 801da28:	4418      	add	r0, r3
 801da2a:	4413      	add	r3, r2
 801da2c:	3a04      	subs	r2, #4
 801da2e:	4417      	add	r7, r2
 801da30:	2200      	movs	r2, #0
 801da32:	f843 2f04 	str.w	r2, [r3, #4]!
 801da36:	42bb      	cmp	r3, r7
 801da38:	f840 2f04 	str.w	r2, [r0, #4]!
 801da3c:	d1f9      	bne.n	801da32 <rcutils_string_map_reserve+0xd2>
 801da3e:	e7e7      	b.n	801da10 <rcutils_string_map_reserve+0xb0>

0801da40 <rcutils_string_map_init>:
 801da40:	b082      	sub	sp, #8
 801da42:	b570      	push	{r4, r5, r6, lr}
 801da44:	ac04      	add	r4, sp, #16
 801da46:	e884 000c 	stmia.w	r4, {r2, r3}
 801da4a:	b380      	cbz	r0, 801daae <rcutils_string_map_init+0x6e>
 801da4c:	6806      	ldr	r6, [r0, #0]
 801da4e:	4604      	mov	r4, r0
 801da50:	b12e      	cbz	r6, 801da5e <rcutils_string_map_init+0x1e>
 801da52:	251e      	movs	r5, #30
 801da54:	4628      	mov	r0, r5
 801da56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da5a:	b002      	add	sp, #8
 801da5c:	4770      	bx	lr
 801da5e:	a804      	add	r0, sp, #16
 801da60:	460d      	mov	r5, r1
 801da62:	f7f7 faff 	bl	8015064 <rcutils_allocator_is_valid>
 801da66:	b310      	cbz	r0, 801daae <rcutils_string_map_init+0x6e>
 801da68:	9b04      	ldr	r3, [sp, #16]
 801da6a:	2024      	movs	r0, #36	; 0x24
 801da6c:	9908      	ldr	r1, [sp, #32]
 801da6e:	4798      	blx	r3
 801da70:	6020      	str	r0, [r4, #0]
 801da72:	b310      	cbz	r0, 801daba <rcutils_string_map_init+0x7a>
 801da74:	f10d 0e10 	add.w	lr, sp, #16
 801da78:	f100 0c10 	add.w	ip, r0, #16
 801da7c:	e9c0 6600 	strd	r6, r6, [r0]
 801da80:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801da84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801da88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801da8c:	f8de 3000 	ldr.w	r3, [lr]
 801da90:	4629      	mov	r1, r5
 801da92:	4620      	mov	r0, r4
 801da94:	f8cc 3000 	str.w	r3, [ip]
 801da98:	f7ff ff62 	bl	801d960 <rcutils_string_map_reserve>
 801da9c:	4605      	mov	r5, r0
 801da9e:	2800      	cmp	r0, #0
 801daa0:	d0d8      	beq.n	801da54 <rcutils_string_map_init+0x14>
 801daa2:	9b05      	ldr	r3, [sp, #20]
 801daa4:	9908      	ldr	r1, [sp, #32]
 801daa6:	6820      	ldr	r0, [r4, #0]
 801daa8:	4798      	blx	r3
 801daaa:	6026      	str	r6, [r4, #0]
 801daac:	e7d2      	b.n	801da54 <rcutils_string_map_init+0x14>
 801daae:	250b      	movs	r5, #11
 801dab0:	4628      	mov	r0, r5
 801dab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dab6:	b002      	add	sp, #8
 801dab8:	4770      	bx	lr
 801daba:	250a      	movs	r5, #10
 801dabc:	e7ca      	b.n	801da54 <rcutils_string_map_init+0x14>
 801dabe:	bf00      	nop

0801dac0 <rcutils_string_map_fini>:
 801dac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dac4:	b082      	sub	sp, #8
 801dac6:	2800      	cmp	r0, #0
 801dac8:	d03a      	beq.n	801db40 <rcutils_string_map_fini+0x80>
 801daca:	6804      	ldr	r4, [r0, #0]
 801dacc:	4606      	mov	r6, r0
 801dace:	2c00      	cmp	r4, #0
 801dad0:	d032      	beq.n	801db38 <rcutils_string_map_fini+0x78>
 801dad2:	68a3      	ldr	r3, [r4, #8]
 801dad4:	b32b      	cbz	r3, 801db22 <rcutils_string_map_fini+0x62>
 801dad6:	2500      	movs	r5, #0
 801dad8:	6822      	ldr	r2, [r4, #0]
 801dada:	462f      	mov	r7, r5
 801dadc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dae0:	b1e0      	cbz	r0, 801db1c <rcutils_string_map_fini+0x5c>
 801dae2:	6a21      	ldr	r1, [r4, #32]
 801dae4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801dae8:	9101      	str	r1, [sp, #4]
 801daea:	47c0      	blx	r8
 801daec:	9901      	ldr	r1, [sp, #4]
 801daee:	e9d4 3200 	ldrd	r3, r2, [r4]
 801daf2:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801daf6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801dafa:	47c0      	blx	r8
 801dafc:	68e3      	ldr	r3, [r4, #12]
 801dafe:	6862      	ldr	r2, [r4, #4]
 801db00:	3b01      	subs	r3, #1
 801db02:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801db06:	3501      	adds	r5, #1
 801db08:	60e3      	str	r3, [r4, #12]
 801db0a:	6834      	ldr	r4, [r6, #0]
 801db0c:	68a3      	ldr	r3, [r4, #8]
 801db0e:	429d      	cmp	r5, r3
 801db10:	d207      	bcs.n	801db22 <rcutils_string_map_fini+0x62>
 801db12:	6822      	ldr	r2, [r4, #0]
 801db14:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801db18:	2800      	cmp	r0, #0
 801db1a:	d1e2      	bne.n	801dae2 <rcutils_string_map_fini+0x22>
 801db1c:	3501      	adds	r5, #1
 801db1e:	429d      	cmp	r5, r3
 801db20:	d3dc      	bcc.n	801dadc <rcutils_string_map_fini+0x1c>
 801db22:	2100      	movs	r1, #0
 801db24:	4630      	mov	r0, r6
 801db26:	f7ff ff1b 	bl	801d960 <rcutils_string_map_reserve>
 801db2a:	4604      	mov	r4, r0
 801db2c:	b920      	cbnz	r0, 801db38 <rcutils_string_map_fini+0x78>
 801db2e:	6830      	ldr	r0, [r6, #0]
 801db30:	6943      	ldr	r3, [r0, #20]
 801db32:	6a01      	ldr	r1, [r0, #32]
 801db34:	4798      	blx	r3
 801db36:	6034      	str	r4, [r6, #0]
 801db38:	4620      	mov	r0, r4
 801db3a:	b002      	add	sp, #8
 801db3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db40:	240b      	movs	r4, #11
 801db42:	4620      	mov	r0, r4
 801db44:	b002      	add	sp, #8
 801db46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db4a:	bf00      	nop

0801db4c <rcutils_string_map_getn>:
 801db4c:	b378      	cbz	r0, 801dbae <rcutils_string_map_getn+0x62>
 801db4e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db52:	f8d0 b000 	ldr.w	fp, [r0]
 801db56:	f1bb 0f00 	cmp.w	fp, #0
 801db5a:	d01f      	beq.n	801db9c <rcutils_string_map_getn+0x50>
 801db5c:	fab1 f481 	clz	r4, r1
 801db60:	4688      	mov	r8, r1
 801db62:	0964      	lsrs	r4, r4, #5
 801db64:	b1d1      	cbz	r1, 801db9c <rcutils_string_map_getn+0x50>
 801db66:	f8db 7008 	ldr.w	r7, [fp, #8]
 801db6a:	f8db 6000 	ldr.w	r6, [fp]
 801db6e:	b1af      	cbz	r7, 801db9c <rcutils_string_map_getn+0x50>
 801db70:	4691      	mov	r9, r2
 801db72:	3e04      	subs	r6, #4
 801db74:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801db78:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801db7c:	3401      	adds	r4, #1
 801db7e:	4628      	mov	r0, r5
 801db80:	b155      	cbz	r5, 801db98 <rcutils_string_map_getn+0x4c>
 801db82:	f7e2 fbbd 	bl	8000300 <strlen>
 801db86:	4602      	mov	r2, r0
 801db88:	4629      	mov	r1, r5
 801db8a:	4640      	mov	r0, r8
 801db8c:	454a      	cmp	r2, r9
 801db8e:	bf38      	it	cc
 801db90:	464a      	movcc	r2, r9
 801db92:	f003 f910 	bl	8020db6 <strncmp>
 801db96:	b120      	cbz	r0, 801dba2 <rcutils_string_map_getn+0x56>
 801db98:	42a7      	cmp	r7, r4
 801db9a:	d1eb      	bne.n	801db74 <rcutils_string_map_getn+0x28>
 801db9c:	2000      	movs	r0, #0
 801db9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dba2:	f8db 3004 	ldr.w	r3, [fp, #4]
 801dba6:	f853 000a 	ldr.w	r0, [r3, sl]
 801dbaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbae:	4770      	bx	lr

0801dbb0 <rmw_get_zero_initialized_context>:
 801dbb0:	b510      	push	{r4, lr}
 801dbb2:	4604      	mov	r4, r0
 801dbb4:	3010      	adds	r0, #16
 801dbb6:	f7f7 fc73 	bl	80154a0 <rmw_get_zero_initialized_init_options>
 801dbba:	2300      	movs	r3, #0
 801dbbc:	4620      	mov	r0, r4
 801dbbe:	60a3      	str	r3, [r4, #8]
 801dbc0:	64a3      	str	r3, [r4, #72]	; 0x48
 801dbc2:	64e3      	str	r3, [r4, #76]	; 0x4c
 801dbc4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801dbd0 <rmw_get_zero_initialized_context+0x20>
 801dbc8:	ed84 7b00 	vstr	d7, [r4]
 801dbcc:	bd10      	pop	{r4, pc}
 801dbce:	bf00      	nop
	...

0801dbd8 <rmw_time_equal>:
 801dbd8:	b4f0      	push	{r4, r5, r6, r7}
 801dbda:	b084      	sub	sp, #16
 801dbdc:	ac04      	add	r4, sp, #16
 801dbde:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801dbe2:	4603      	mov	r3, r0
 801dbe4:	4925      	ldr	r1, [pc, #148]	; (801dc7c <rmw_time_equal+0xa4>)
 801dbe6:	9d01      	ldr	r5, [sp, #4]
 801dbe8:	4610      	mov	r0, r2
 801dbea:	4299      	cmp	r1, r3
 801dbec:	f04f 0202 	mov.w	r2, #2
 801dbf0:	9e03      	ldr	r6, [sp, #12]
 801dbf2:	41aa      	sbcs	r2, r5
 801dbf4:	d330      	bcc.n	801dc58 <rmw_time_equal+0x80>
 801dbf6:	4c22      	ldr	r4, [pc, #136]	; (801dc80 <rmw_time_equal+0xa8>)
 801dbf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dbfc:	fba3 3204 	umull	r3, r2, r3, r4
 801dc00:	fb04 2205 	mla	r2, r4, r5, r2
 801dc04:	43dd      	mvns	r5, r3
 801dc06:	1a8c      	subs	r4, r1, r2
 801dc08:	4285      	cmp	r5, r0
 801dc0a:	41b4      	sbcs	r4, r6
 801dc0c:	d332      	bcc.n	801dc74 <rmw_time_equal+0x9c>
 801dc0e:	eb10 0c03 	adds.w	ip, r0, r3
 801dc12:	eb42 0106 	adc.w	r1, r2, r6
 801dc16:	4819      	ldr	r0, [pc, #100]	; (801dc7c <rmw_time_equal+0xa4>)
 801dc18:	2202      	movs	r2, #2
 801dc1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dc1c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dc1e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801dc22:	4298      	cmp	r0, r3
 801dc24:	41b2      	sbcs	r2, r6
 801dc26:	d31c      	bcc.n	801dc62 <rmw_time_equal+0x8a>
 801dc28:	4c15      	ldr	r4, [pc, #84]	; (801dc80 <rmw_time_equal+0xa8>)
 801dc2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801dc2e:	fba3 3204 	umull	r3, r2, r3, r4
 801dc32:	fb04 2206 	mla	r2, r4, r6, r2
 801dc36:	43de      	mvns	r6, r3
 801dc38:	1a84      	subs	r4, r0, r2
 801dc3a:	42ae      	cmp	r6, r5
 801dc3c:	41bc      	sbcs	r4, r7
 801dc3e:	d315      	bcc.n	801dc6c <rmw_time_equal+0x94>
 801dc40:	195b      	adds	r3, r3, r5
 801dc42:	eb42 0207 	adc.w	r2, r2, r7
 801dc46:	428a      	cmp	r2, r1
 801dc48:	bf08      	it	eq
 801dc4a:	4563      	cmpeq	r3, ip
 801dc4c:	bf0c      	ite	eq
 801dc4e:	2001      	moveq	r0, #1
 801dc50:	2000      	movne	r0, #0
 801dc52:	b004      	add	sp, #16
 801dc54:	bcf0      	pop	{r4, r5, r6, r7}
 801dc56:	4770      	bx	lr
 801dc58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dc5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dc60:	e7d9      	b.n	801dc16 <rmw_time_equal+0x3e>
 801dc62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dc66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801dc6a:	e7ec      	b.n	801dc46 <rmw_time_equal+0x6e>
 801dc6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dc70:	4602      	mov	r2, r0
 801dc72:	e7e8      	b.n	801dc46 <rmw_time_equal+0x6e>
 801dc74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dc78:	e7cd      	b.n	801dc16 <rmw_time_equal+0x3e>
 801dc7a:	bf00      	nop
 801dc7c:	25c17d04 	.word	0x25c17d04
 801dc80:	3b9aca00 	.word	0x3b9aca00

0801dc84 <rmw_time_total_nsec>:
 801dc84:	b470      	push	{r4, r5, r6}
 801dc86:	b085      	sub	sp, #20
 801dc88:	ac04      	add	r4, sp, #16
 801dc8a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801dc8e:	4603      	mov	r3, r0
 801dc90:	4913      	ldr	r1, [pc, #76]	; (801dce0 <rmw_time_total_nsec+0x5c>)
 801dc92:	9d01      	ldr	r5, [sp, #4]
 801dc94:	4610      	mov	r0, r2
 801dc96:	4299      	cmp	r1, r3
 801dc98:	f04f 0202 	mov.w	r2, #2
 801dc9c:	9e03      	ldr	r6, [sp, #12]
 801dc9e:	41aa      	sbcs	r2, r5
 801dca0:	d311      	bcc.n	801dcc6 <rmw_time_total_nsec+0x42>
 801dca2:	4c10      	ldr	r4, [pc, #64]	; (801dce4 <rmw_time_total_nsec+0x60>)
 801dca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dca8:	fba3 3204 	umull	r3, r2, r3, r4
 801dcac:	fb04 2205 	mla	r2, r4, r5, r2
 801dcb0:	43dd      	mvns	r5, r3
 801dcb2:	1a8c      	subs	r4, r1, r2
 801dcb4:	4285      	cmp	r5, r0
 801dcb6:	41b4      	sbcs	r4, r6
 801dcb8:	d30c      	bcc.n	801dcd4 <rmw_time_total_nsec+0x50>
 801dcba:	1818      	adds	r0, r3, r0
 801dcbc:	eb42 0106 	adc.w	r1, r2, r6
 801dcc0:	b005      	add	sp, #20
 801dcc2:	bc70      	pop	{r4, r5, r6}
 801dcc4:	4770      	bx	lr
 801dcc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dcca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dcce:	b005      	add	sp, #20
 801dcd0:	bc70      	pop	{r4, r5, r6}
 801dcd2:	4770      	bx	lr
 801dcd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dcd8:	b005      	add	sp, #20
 801dcda:	bc70      	pop	{r4, r5, r6}
 801dcdc:	4770      	bx	lr
 801dcde:	bf00      	nop
 801dce0:	25c17d04 	.word	0x25c17d04
 801dce4:	3b9aca00 	.word	0x3b9aca00

0801dce8 <rmw_validate_full_topic_name>:
 801dce8:	2800      	cmp	r0, #0
 801dcea:	d05d      	beq.n	801dda8 <rmw_validate_full_topic_name+0xc0>
 801dcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcf0:	460d      	mov	r5, r1
 801dcf2:	2900      	cmp	r1, #0
 801dcf4:	d05a      	beq.n	801ddac <rmw_validate_full_topic_name+0xc4>
 801dcf6:	4604      	mov	r4, r0
 801dcf8:	4616      	mov	r6, r2
 801dcfa:	f7e2 fb01 	bl	8000300 <strlen>
 801dcfe:	b150      	cbz	r0, 801dd16 <rmw_validate_full_topic_name+0x2e>
 801dd00:	7823      	ldrb	r3, [r4, #0]
 801dd02:	2b2f      	cmp	r3, #47	; 0x2f
 801dd04:	d00e      	beq.n	801dd24 <rmw_validate_full_topic_name+0x3c>
 801dd06:	2302      	movs	r3, #2
 801dd08:	602b      	str	r3, [r5, #0]
 801dd0a:	b146      	cbz	r6, 801dd1e <rmw_validate_full_topic_name+0x36>
 801dd0c:	2300      	movs	r3, #0
 801dd0e:	4618      	mov	r0, r3
 801dd10:	6033      	str	r3, [r6, #0]
 801dd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd16:	2301      	movs	r3, #1
 801dd18:	602b      	str	r3, [r5, #0]
 801dd1a:	2e00      	cmp	r6, #0
 801dd1c:	d1f6      	bne.n	801dd0c <rmw_validate_full_topic_name+0x24>
 801dd1e:	2000      	movs	r0, #0
 801dd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd24:	1e43      	subs	r3, r0, #1
 801dd26:	5ce2      	ldrb	r2, [r4, r3]
 801dd28:	2a2f      	cmp	r2, #47	; 0x2f
 801dd2a:	d041      	beq.n	801ddb0 <rmw_validate_full_topic_name+0xc8>
 801dd2c:	1e62      	subs	r2, r4, #1
 801dd2e:	f1c4 0e01 	rsb	lr, r4, #1
 801dd32:	eb02 0800 	add.w	r8, r2, r0
 801dd36:	eb0e 0702 	add.w	r7, lr, r2
 801dd3a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801dd3e:	f023 0120 	bic.w	r1, r3, #32
 801dd42:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801dd46:	3941      	subs	r1, #65	; 0x41
 801dd48:	2919      	cmp	r1, #25
 801dd4a:	d90f      	bls.n	801dd6c <rmw_validate_full_topic_name+0x84>
 801dd4c:	f1bc 0f0a 	cmp.w	ip, #10
 801dd50:	d90c      	bls.n	801dd6c <rmw_validate_full_topic_name+0x84>
 801dd52:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801dd56:	fab3 f383 	clz	r3, r3
 801dd5a:	095b      	lsrs	r3, r3, #5
 801dd5c:	b933      	cbnz	r3, 801dd6c <rmw_validate_full_topic_name+0x84>
 801dd5e:	2204      	movs	r2, #4
 801dd60:	602a      	str	r2, [r5, #0]
 801dd62:	2e00      	cmp	r6, #0
 801dd64:	d0db      	beq.n	801dd1e <rmw_validate_full_topic_name+0x36>
 801dd66:	4618      	mov	r0, r3
 801dd68:	6037      	str	r7, [r6, #0]
 801dd6a:	e7d2      	b.n	801dd12 <rmw_validate_full_topic_name+0x2a>
 801dd6c:	4542      	cmp	r2, r8
 801dd6e:	d1e2      	bne.n	801dd36 <rmw_validate_full_topic_name+0x4e>
 801dd70:	2301      	movs	r3, #1
 801dd72:	4f1a      	ldr	r7, [pc, #104]	; (801dddc <rmw_validate_full_topic_name+0xf4>)
 801dd74:	e004      	b.n	801dd80 <rmw_validate_full_topic_name+0x98>
 801dd76:	4298      	cmp	r0, r3
 801dd78:	f104 0401 	add.w	r4, r4, #1
 801dd7c:	4613      	mov	r3, r2
 801dd7e:	d91c      	bls.n	801ddba <rmw_validate_full_topic_name+0xd2>
 801dd80:	4298      	cmp	r0, r3
 801dd82:	f103 0201 	add.w	r2, r3, #1
 801dd86:	d0f6      	beq.n	801dd76 <rmw_validate_full_topic_name+0x8e>
 801dd88:	7821      	ldrb	r1, [r4, #0]
 801dd8a:	292f      	cmp	r1, #47	; 0x2f
 801dd8c:	d1f3      	bne.n	801dd76 <rmw_validate_full_topic_name+0x8e>
 801dd8e:	7861      	ldrb	r1, [r4, #1]
 801dd90:	292f      	cmp	r1, #47	; 0x2f
 801dd92:	d01e      	beq.n	801ddd2 <rmw_validate_full_topic_name+0xea>
 801dd94:	5dc9      	ldrb	r1, [r1, r7]
 801dd96:	0749      	lsls	r1, r1, #29
 801dd98:	d5ed      	bpl.n	801dd76 <rmw_validate_full_topic_name+0x8e>
 801dd9a:	2206      	movs	r2, #6
 801dd9c:	602a      	str	r2, [r5, #0]
 801dd9e:	2e00      	cmp	r6, #0
 801dda0:	d0bd      	beq.n	801dd1e <rmw_validate_full_topic_name+0x36>
 801dda2:	2000      	movs	r0, #0
 801dda4:	6033      	str	r3, [r6, #0]
 801dda6:	e7b4      	b.n	801dd12 <rmw_validate_full_topic_name+0x2a>
 801dda8:	200b      	movs	r0, #11
 801ddaa:	4770      	bx	lr
 801ddac:	200b      	movs	r0, #11
 801ddae:	e7b0      	b.n	801dd12 <rmw_validate_full_topic_name+0x2a>
 801ddb0:	2203      	movs	r2, #3
 801ddb2:	602a      	str	r2, [r5, #0]
 801ddb4:	2e00      	cmp	r6, #0
 801ddb6:	d1f4      	bne.n	801dda2 <rmw_validate_full_topic_name+0xba>
 801ddb8:	e7b1      	b.n	801dd1e <rmw_validate_full_topic_name+0x36>
 801ddba:	28f7      	cmp	r0, #247	; 0xf7
 801ddbc:	d803      	bhi.n	801ddc6 <rmw_validate_full_topic_name+0xde>
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	4618      	mov	r0, r3
 801ddc2:	602b      	str	r3, [r5, #0]
 801ddc4:	e7a5      	b.n	801dd12 <rmw_validate_full_topic_name+0x2a>
 801ddc6:	2307      	movs	r3, #7
 801ddc8:	602b      	str	r3, [r5, #0]
 801ddca:	2e00      	cmp	r6, #0
 801ddcc:	d0a7      	beq.n	801dd1e <rmw_validate_full_topic_name+0x36>
 801ddce:	23f6      	movs	r3, #246	; 0xf6
 801ddd0:	e7e7      	b.n	801dda2 <rmw_validate_full_topic_name+0xba>
 801ddd2:	2205      	movs	r2, #5
 801ddd4:	602a      	str	r2, [r5, #0]
 801ddd6:	2e00      	cmp	r6, #0
 801ddd8:	d1e3      	bne.n	801dda2 <rmw_validate_full_topic_name+0xba>
 801ddda:	e7a0      	b.n	801dd1e <rmw_validate_full_topic_name+0x36>
 801dddc:	08025b54 	.word	0x08025b54

0801dde0 <on_status>:
 801dde0:	b082      	sub	sp, #8
 801dde2:	b002      	add	sp, #8
 801dde4:	4770      	bx	lr
 801dde6:	bf00      	nop

0801dde8 <on_topic>:
 801dde8:	4a23      	ldr	r2, [pc, #140]	; (801de78 <on_topic+0x90>)
 801ddea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddee:	6812      	ldr	r2, [r2, #0]
 801ddf0:	b094      	sub	sp, #80	; 0x50
 801ddf2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801ddf4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801ddf8:	9113      	str	r1, [sp, #76]	; 0x4c
 801ddfa:	9312      	str	r3, [sp, #72]	; 0x48
 801ddfc:	b3c2      	cbz	r2, 801de70 <on_topic+0x88>
 801ddfe:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801de02:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801de06:	e001      	b.n	801de0c <on_topic+0x24>
 801de08:	6852      	ldr	r2, [r2, #4]
 801de0a:	b38a      	cbz	r2, 801de70 <on_topic+0x88>
 801de0c:	6894      	ldr	r4, [r2, #8]
 801de0e:	8aa3      	ldrh	r3, [r4, #20]
 801de10:	428b      	cmp	r3, r1
 801de12:	d1f9      	bne.n	801de08 <on_topic+0x20>
 801de14:	7da3      	ldrb	r3, [r4, #22]
 801de16:	4283      	cmp	r3, r0
 801de18:	d1f6      	bne.n	801de08 <on_topic+0x20>
 801de1a:	2248      	movs	r2, #72	; 0x48
 801de1c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801de20:	4668      	mov	r0, sp
 801de22:	f003 f880 	bl	8020f26 <memcpy>
 801de26:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801de2a:	4620      	mov	r0, r4
 801de2c:	cb0c      	ldmia	r3, {r2, r3}
 801de2e:	f7f8 ffdb 	bl	8016de8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801de32:	4607      	mov	r7, r0
 801de34:	b1e0      	cbz	r0, 801de70 <on_topic+0x88>
 801de36:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801de3a:	462a      	mov	r2, r5
 801de3c:	4630      	mov	r0, r6
 801de3e:	f108 0110 	add.w	r1, r8, #16
 801de42:	f7f9 fc91 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801de46:	b930      	cbnz	r0, 801de56 <on_topic+0x6e>
 801de48:	4639      	mov	r1, r7
 801de4a:	480c      	ldr	r0, [pc, #48]	; (801de7c <on_topic+0x94>)
 801de4c:	b014      	add	sp, #80	; 0x50
 801de4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de52:	f000 b8bd 	b.w	801dfd0 <put_memory>
 801de56:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801de5a:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801de5e:	f000 fb33 	bl	801e4c8 <rmw_uros_epoch_nanos>
 801de62:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801de66:	2305      	movs	r3, #5
 801de68:	e942 0102 	strd	r0, r1, [r2, #-8]
 801de6c:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801de70:	b014      	add	sp, #80	; 0x50
 801de72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de76:	bf00      	nop
 801de78:	20016f5c 	.word	0x20016f5c
 801de7c:	20016f4c 	.word	0x20016f4c

0801de80 <on_request>:
 801de80:	4824      	ldr	r0, [pc, #144]	; (801df14 <on_request+0x94>)
 801de82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de86:	6800      	ldr	r0, [r0, #0]
 801de88:	b094      	sub	sp, #80	; 0x50
 801de8a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801de8c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801de90:	9113      	str	r1, [sp, #76]	; 0x4c
 801de92:	2800      	cmp	r0, #0
 801de94:	d03b      	beq.n	801df0e <on_request+0x8e>
 801de96:	461d      	mov	r5, r3
 801de98:	e001      	b.n	801de9e <on_request+0x1e>
 801de9a:	6840      	ldr	r0, [r0, #4]
 801de9c:	b3b8      	cbz	r0, 801df0e <on_request+0x8e>
 801de9e:	6884      	ldr	r4, [r0, #8]
 801dea0:	8b21      	ldrh	r1, [r4, #24]
 801dea2:	4291      	cmp	r1, r2
 801dea4:	d1f9      	bne.n	801de9a <on_request+0x1a>
 801dea6:	2248      	movs	r2, #72	; 0x48
 801dea8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801deac:	4668      	mov	r0, sp
 801deae:	f003 f83a 	bl	8020f26 <memcpy>
 801deb2:	f104 0320 	add.w	r3, r4, #32
 801deb6:	4620      	mov	r0, r4
 801deb8:	cb0c      	ldmia	r3, {r2, r3}
 801deba:	f7f8 ff95 	bl	8016de8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801debe:	4680      	mov	r8, r0
 801dec0:	b328      	cbz	r0, 801df0e <on_request+0x8e>
 801dec2:	4630      	mov	r0, r6
 801dec4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801dec8:	463a      	mov	r2, r7
 801deca:	f106 0110 	add.w	r1, r6, #16
 801dece:	f7f9 fc4b 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801ded2:	b930      	cbnz	r0, 801dee2 <on_request+0x62>
 801ded4:	4641      	mov	r1, r8
 801ded6:	4810      	ldr	r0, [pc, #64]	; (801df18 <on_request+0x98>)
 801ded8:	b014      	add	sp, #80	; 0x50
 801deda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dede:	f000 b877 	b.w	801dfd0 <put_memory>
 801dee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dee4:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801dee8:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801deec:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801def0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801def4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801def8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801defc:	f000 fae4 	bl	801e4c8 <rmw_uros_epoch_nanos>
 801df00:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801df04:	2303      	movs	r3, #3
 801df06:	e942 0102 	strd	r0, r1, [r2, #-8]
 801df0a:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801df0e:	b014      	add	sp, #80	; 0x50
 801df10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df14:	20016f2c 	.word	0x20016f2c
 801df18:	20016f4c 	.word	0x20016f4c

0801df1c <on_reply>:
 801df1c:	4822      	ldr	r0, [pc, #136]	; (801dfa8 <on_reply+0x8c>)
 801df1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df22:	6800      	ldr	r0, [r0, #0]
 801df24:	b094      	sub	sp, #80	; 0x50
 801df26:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801df28:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801df2c:	9113      	str	r1, [sp, #76]	; 0x4c
 801df2e:	b3b8      	cbz	r0, 801dfa0 <on_reply+0x84>
 801df30:	461d      	mov	r5, r3
 801df32:	e001      	b.n	801df38 <on_reply+0x1c>
 801df34:	6840      	ldr	r0, [r0, #4]
 801df36:	b398      	cbz	r0, 801dfa0 <on_reply+0x84>
 801df38:	6884      	ldr	r4, [r0, #8]
 801df3a:	8b21      	ldrh	r1, [r4, #24]
 801df3c:	4291      	cmp	r1, r2
 801df3e:	d1f9      	bne.n	801df34 <on_reply+0x18>
 801df40:	2248      	movs	r2, #72	; 0x48
 801df42:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801df46:	4668      	mov	r0, sp
 801df48:	f002 ffed 	bl	8020f26 <memcpy>
 801df4c:	f104 0320 	add.w	r3, r4, #32
 801df50:	4620      	mov	r0, r4
 801df52:	cb0c      	ldmia	r3, {r2, r3}
 801df54:	f7f8 ff48 	bl	8016de8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801df58:	4680      	mov	r8, r0
 801df5a:	b308      	cbz	r0, 801dfa0 <on_reply+0x84>
 801df5c:	4630      	mov	r0, r6
 801df5e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801df62:	463a      	mov	r2, r7
 801df64:	f106 0110 	add.w	r1, r6, #16
 801df68:	f7f9 fbfe 	bl	8017768 <ucdr_deserialize_array_uint8_t>
 801df6c:	b930      	cbnz	r0, 801df7c <on_reply+0x60>
 801df6e:	4641      	mov	r1, r8
 801df70:	480e      	ldr	r0, [pc, #56]	; (801dfac <on_reply+0x90>)
 801df72:	b014      	add	sp, #80	; 0x50
 801df74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df78:	f000 b82a 	b.w	801dfd0 <put_memory>
 801df7c:	2200      	movs	r2, #0
 801df7e:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801df82:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801df86:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801df8a:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801df8e:	f000 fa9b 	bl	801e4c8 <rmw_uros_epoch_nanos>
 801df92:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801df96:	2304      	movs	r3, #4
 801df98:	e942 0102 	strd	r0, r1, [r2, #-8]
 801df9c:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801dfa0:	b014      	add	sp, #80	; 0x50
 801dfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfa6:	bf00      	nop
 801dfa8:	2001263c 	.word	0x2001263c
 801dfac:	20016f4c 	.word	0x20016f4c

0801dfb0 <get_memory>:
 801dfb0:	4603      	mov	r3, r0
 801dfb2:	6840      	ldr	r0, [r0, #4]
 801dfb4:	b158      	cbz	r0, 801dfce <get_memory+0x1e>
 801dfb6:	6842      	ldr	r2, [r0, #4]
 801dfb8:	605a      	str	r2, [r3, #4]
 801dfba:	b10a      	cbz	r2, 801dfc0 <get_memory+0x10>
 801dfbc:	2100      	movs	r1, #0
 801dfbe:	6011      	str	r1, [r2, #0]
 801dfc0:	681a      	ldr	r2, [r3, #0]
 801dfc2:	6042      	str	r2, [r0, #4]
 801dfc4:	b102      	cbz	r2, 801dfc8 <get_memory+0x18>
 801dfc6:	6010      	str	r0, [r2, #0]
 801dfc8:	2200      	movs	r2, #0
 801dfca:	6002      	str	r2, [r0, #0]
 801dfcc:	6018      	str	r0, [r3, #0]
 801dfce:	4770      	bx	lr

0801dfd0 <put_memory>:
 801dfd0:	680b      	ldr	r3, [r1, #0]
 801dfd2:	b10b      	cbz	r3, 801dfd8 <put_memory+0x8>
 801dfd4:	684a      	ldr	r2, [r1, #4]
 801dfd6:	605a      	str	r2, [r3, #4]
 801dfd8:	684a      	ldr	r2, [r1, #4]
 801dfda:	b102      	cbz	r2, 801dfde <put_memory+0xe>
 801dfdc:	6013      	str	r3, [r2, #0]
 801dfde:	6803      	ldr	r3, [r0, #0]
 801dfe0:	428b      	cmp	r3, r1
 801dfe2:	6843      	ldr	r3, [r0, #4]
 801dfe4:	bf08      	it	eq
 801dfe6:	6002      	streq	r2, [r0, #0]
 801dfe8:	604b      	str	r3, [r1, #4]
 801dfea:	b103      	cbz	r3, 801dfee <put_memory+0x1e>
 801dfec:	6019      	str	r1, [r3, #0]
 801dfee:	2300      	movs	r3, #0
 801dff0:	600b      	str	r3, [r1, #0]
 801dff2:	6041      	str	r1, [r0, #4]
 801dff4:	4770      	bx	lr
 801dff6:	bf00      	nop

0801dff8 <rmw_destroy_client>:
 801dff8:	b570      	push	{r4, r5, r6, lr}
 801dffa:	b128      	cbz	r0, 801e008 <rmw_destroy_client+0x10>
 801dffc:	4604      	mov	r4, r0
 801dffe:	6800      	ldr	r0, [r0, #0]
 801e000:	460d      	mov	r5, r1
 801e002:	f7f9 f905 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 801e006:	b910      	cbnz	r0, 801e00e <rmw_destroy_client+0x16>
 801e008:	2401      	movs	r4, #1
 801e00a:	4620      	mov	r0, r4
 801e00c:	bd70      	pop	{r4, r5, r6, pc}
 801e00e:	6863      	ldr	r3, [r4, #4]
 801e010:	2b00      	cmp	r3, #0
 801e012:	d0f9      	beq.n	801e008 <rmw_destroy_client+0x10>
 801e014:	2d00      	cmp	r5, #0
 801e016:	d0f7      	beq.n	801e008 <rmw_destroy_client+0x10>
 801e018:	6828      	ldr	r0, [r5, #0]
 801e01a:	f7f9 f8f9 	bl	8017210 <is_uxrce_rmw_identifier_valid>
 801e01e:	2800      	cmp	r0, #0
 801e020:	d0f2      	beq.n	801e008 <rmw_destroy_client+0x10>
 801e022:	686e      	ldr	r6, [r5, #4]
 801e024:	2e00      	cmp	r6, #0
 801e026:	d0ef      	beq.n	801e008 <rmw_destroy_client+0x10>
 801e028:	6864      	ldr	r4, [r4, #4]
 801e02a:	6932      	ldr	r2, [r6, #16]
 801e02c:	6920      	ldr	r0, [r4, #16]
 801e02e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e032:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e036:	6819      	ldr	r1, [r3, #0]
 801e038:	f7f9 ff62 	bl	8017f00 <uxr_buffer_cancel_data>
 801e03c:	4602      	mov	r2, r0
 801e03e:	6920      	ldr	r0, [r4, #16]
 801e040:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e044:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e048:	f7f8 ffd0 	bl	8016fec <run_xrce_session>
 801e04c:	6920      	ldr	r0, [r4, #16]
 801e04e:	6932      	ldr	r2, [r6, #16]
 801e050:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e054:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e058:	6819      	ldr	r1, [r3, #0]
 801e05a:	f7f9 fbed 	bl	8017838 <uxr_buffer_delete_entity>
 801e05e:	4602      	mov	r2, r0
 801e060:	6920      	ldr	r0, [r4, #16]
 801e062:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e066:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e06a:	f7f8 ffbf 	bl	8016fec <run_xrce_session>
 801e06e:	4603      	mov	r3, r0
 801e070:	4628      	mov	r0, r5
 801e072:	2b00      	cmp	r3, #0
 801e074:	bf14      	ite	ne
 801e076:	2400      	movne	r4, #0
 801e078:	2402      	moveq	r4, #2
 801e07a:	f7f8 fe93 	bl	8016da4 <rmw_uxrce_fini_client_memory>
 801e07e:	e7c4      	b.n	801e00a <rmw_destroy_client+0x12>

0801e080 <rmw_get_implementation_identifier>:
 801e080:	4b01      	ldr	r3, [pc, #4]	; (801e088 <rmw_get_implementation_identifier+0x8>)
 801e082:	6818      	ldr	r0, [r3, #0]
 801e084:	4770      	bx	lr
 801e086:	bf00      	nop
 801e088:	08025aac 	.word	0x08025aac

0801e08c <rmw_create_guard_condition>:
 801e08c:	b538      	push	{r3, r4, r5, lr}
 801e08e:	4605      	mov	r5, r0
 801e090:	4808      	ldr	r0, [pc, #32]	; (801e0b4 <rmw_create_guard_condition+0x28>)
 801e092:	f7ff ff8d 	bl	801dfb0 <get_memory>
 801e096:	4603      	mov	r3, r0
 801e098:	b148      	cbz	r0, 801e0ae <rmw_create_guard_condition+0x22>
 801e09a:	6884      	ldr	r4, [r0, #8]
 801e09c:	2300      	movs	r3, #0
 801e09e:	61e5      	str	r5, [r4, #28]
 801e0a0:	7423      	strb	r3, [r4, #16]
 801e0a2:	f7ff ffed 	bl	801e080 <rmw_get_implementation_identifier>
 801e0a6:	f104 0314 	add.w	r3, r4, #20
 801e0aa:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801e0ae:	4618      	mov	r0, r3
 801e0b0:	bd38      	pop	{r3, r4, r5, pc}
 801e0b2:	bf00      	nop
 801e0b4:	20016eec 	.word	0x20016eec

0801e0b8 <rmw_destroy_guard_condition>:
 801e0b8:	b508      	push	{r3, lr}
 801e0ba:	4b08      	ldr	r3, [pc, #32]	; (801e0dc <rmw_destroy_guard_condition+0x24>)
 801e0bc:	6819      	ldr	r1, [r3, #0]
 801e0be:	b911      	cbnz	r1, 801e0c6 <rmw_destroy_guard_condition+0xe>
 801e0c0:	e00a      	b.n	801e0d8 <rmw_destroy_guard_condition+0x20>
 801e0c2:	6849      	ldr	r1, [r1, #4]
 801e0c4:	b141      	cbz	r1, 801e0d8 <rmw_destroy_guard_condition+0x20>
 801e0c6:	688b      	ldr	r3, [r1, #8]
 801e0c8:	3314      	adds	r3, #20
 801e0ca:	4298      	cmp	r0, r3
 801e0cc:	d1f9      	bne.n	801e0c2 <rmw_destroy_guard_condition+0xa>
 801e0ce:	4803      	ldr	r0, [pc, #12]	; (801e0dc <rmw_destroy_guard_condition+0x24>)
 801e0d0:	f7ff ff7e 	bl	801dfd0 <put_memory>
 801e0d4:	2000      	movs	r0, #0
 801e0d6:	bd08      	pop	{r3, pc}
 801e0d8:	2001      	movs	r0, #1
 801e0da:	bd08      	pop	{r3, pc}
 801e0dc:	20016eec 	.word	0x20016eec

0801e0e0 <create_topic>:
 801e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0e4:	4605      	mov	r5, r0
 801e0e6:	b084      	sub	sp, #16
 801e0e8:	4822      	ldr	r0, [pc, #136]	; (801e174 <create_topic+0x94>)
 801e0ea:	460f      	mov	r7, r1
 801e0ec:	4616      	mov	r6, r2
 801e0ee:	f7ff ff5f 	bl	801dfb0 <get_memory>
 801e0f2:	4604      	mov	r4, r0
 801e0f4:	2800      	cmp	r0, #0
 801e0f6:	d039      	beq.n	801e16c <create_topic+0x8c>
 801e0f8:	692b      	ldr	r3, [r5, #16]
 801e0fa:	2102      	movs	r1, #2
 801e0fc:	6884      	ldr	r4, [r0, #8]
 801e0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e102:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801e17c <create_topic+0x9c>
 801e106:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801e10a:	1c42      	adds	r2, r0, #1
 801e10c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e110:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801e114:	f7f9 fe8a 	bl	8017e2c <uxr_object_id>
 801e118:	223c      	movs	r2, #60	; 0x3c
 801e11a:	6120      	str	r0, [r4, #16]
 801e11c:	4641      	mov	r1, r8
 801e11e:	4638      	mov	r0, r7
 801e120:	f7f9 f85e 	bl	80171e0 <generate_topic_name>
 801e124:	b1f0      	cbz	r0, 801e164 <create_topic+0x84>
 801e126:	4f14      	ldr	r7, [pc, #80]	; (801e178 <create_topic+0x98>)
 801e128:	4630      	mov	r0, r6
 801e12a:	2264      	movs	r2, #100	; 0x64
 801e12c:	4639      	mov	r1, r7
 801e12e:	f7f9 f829 	bl	8017184 <generate_type_name>
 801e132:	b1b8      	cbz	r0, 801e164 <create_topic+0x84>
 801e134:	6928      	ldr	r0, [r5, #16]
 801e136:	2106      	movs	r1, #6
 801e138:	696b      	ldr	r3, [r5, #20]
 801e13a:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801e13e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e142:	f8cd 8000 	str.w	r8, [sp]
 801e146:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e14a:	6811      	ldr	r1, [r2, #0]
 801e14c:	6922      	ldr	r2, [r4, #16]
 801e14e:	f7f9 fbf1 	bl	8017934 <uxr_buffer_create_topic_bin>
 801e152:	4602      	mov	r2, r0
 801e154:	6928      	ldr	r0, [r5, #16]
 801e156:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801e15a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801e15e:	f7f8 ff45 	bl	8016fec <run_xrce_session>
 801e162:	b918      	cbnz	r0, 801e16c <create_topic+0x8c>
 801e164:	4620      	mov	r0, r4
 801e166:	2400      	movs	r4, #0
 801e168:	f7f8 fe32 	bl	8016dd0 <rmw_uxrce_fini_topic_memory>
 801e16c:	4620      	mov	r0, r4
 801e16e:	b004      	add	sp, #16
 801e170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e174:	20016f6c 	.word	0x20016f6c
 801e178:	20017000 	.word	0x20017000
 801e17c:	20016fc4 	.word	0x20016fc4

0801e180 <destroy_topic>:
 801e180:	b538      	push	{r3, r4, r5, lr}
 801e182:	6985      	ldr	r5, [r0, #24]
 801e184:	b1dd      	cbz	r5, 801e1be <destroy_topic+0x3e>
 801e186:	4604      	mov	r4, r0
 801e188:	6928      	ldr	r0, [r5, #16]
 801e18a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e18e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e192:	6922      	ldr	r2, [r4, #16]
 801e194:	6819      	ldr	r1, [r3, #0]
 801e196:	f7f9 fb4f 	bl	8017838 <uxr_buffer_delete_entity>
 801e19a:	4602      	mov	r2, r0
 801e19c:	6928      	ldr	r0, [r5, #16]
 801e19e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e1a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e1a6:	f7f8 ff21 	bl	8016fec <run_xrce_session>
 801e1aa:	4603      	mov	r3, r0
 801e1ac:	4620      	mov	r0, r4
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	bf14      	ite	ne
 801e1b2:	2400      	movne	r4, #0
 801e1b4:	2402      	moveq	r4, #2
 801e1b6:	f7f8 fe0b 	bl	8016dd0 <rmw_uxrce_fini_topic_memory>
 801e1ba:	4620      	mov	r0, r4
 801e1bc:	bd38      	pop	{r3, r4, r5, pc}
 801e1be:	2401      	movs	r4, #1
 801e1c0:	4620      	mov	r0, r4
 801e1c2:	bd38      	pop	{r3, r4, r5, pc}

0801e1c4 <rmw_wait>:
 801e1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e1c8:	4698      	mov	r8, r3
 801e1ca:	ea40 0301 	orr.w	r3, r0, r1
 801e1ce:	b089      	sub	sp, #36	; 0x24
 801e1d0:	ea48 0303 	orr.w	r3, r8, r3
 801e1d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e1d6:	4313      	orrs	r3, r2
 801e1d8:	f000 8106 	beq.w	801e3e8 <rmw_wait+0x224>
 801e1dc:	4605      	mov	r5, r0
 801e1de:	460e      	mov	r6, r1
 801e1e0:	4691      	mov	r9, r2
 801e1e2:	b16c      	cbz	r4, 801e200 <rmw_wait+0x3c>
 801e1e4:	4ba6      	ldr	r3, [pc, #664]	; (801e480 <rmw_wait+0x2bc>)
 801e1e6:	af04      	add	r7, sp, #16
 801e1e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e1ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801e1ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e1f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e1f6:	f7ff fcef 	bl	801dbd8 <rmw_time_equal>
 801e1fa:	2800      	cmp	r0, #0
 801e1fc:	f000 810b 	beq.w	801e416 <rmw_wait+0x252>
 801e200:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e204:	f7f8 fe74 	bl	8016ef0 <rmw_uxrce_clean_expired_static_input_buffer>
 801e208:	4b9e      	ldr	r3, [pc, #632]	; (801e484 <rmw_wait+0x2c0>)
 801e20a:	681c      	ldr	r4, [r3, #0]
 801e20c:	b14c      	cbz	r4, 801e222 <rmw_wait+0x5e>
 801e20e:	4623      	mov	r3, r4
 801e210:	2100      	movs	r1, #0
 801e212:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801e216:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e21a:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d1f7      	bne.n	801e212 <rmw_wait+0x4e>
 801e222:	f1b9 0f00 	cmp.w	r9, #0
 801e226:	d011      	beq.n	801e24c <rmw_wait+0x88>
 801e228:	f8d9 1000 	ldr.w	r1, [r9]
 801e22c:	b171      	cbz	r1, 801e24c <rmw_wait+0x88>
 801e22e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801e232:	2300      	movs	r3, #0
 801e234:	2001      	movs	r0, #1
 801e236:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e23a:	3301      	adds	r3, #1
 801e23c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e23e:	4299      	cmp	r1, r3
 801e240:	6912      	ldr	r2, [r2, #16]
 801e242:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e246:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e24a:	d1f4      	bne.n	801e236 <rmw_wait+0x72>
 801e24c:	f1b8 0f00 	cmp.w	r8, #0
 801e250:	d011      	beq.n	801e276 <rmw_wait+0xb2>
 801e252:	f8d8 1000 	ldr.w	r1, [r8]
 801e256:	b171      	cbz	r1, 801e276 <rmw_wait+0xb2>
 801e258:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801e25c:	2300      	movs	r3, #0
 801e25e:	2001      	movs	r0, #1
 801e260:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e264:	3301      	adds	r3, #1
 801e266:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e268:	4299      	cmp	r1, r3
 801e26a:	6912      	ldr	r2, [r2, #16]
 801e26c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e270:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e274:	d1f4      	bne.n	801e260 <rmw_wait+0x9c>
 801e276:	b185      	cbz	r5, 801e29a <rmw_wait+0xd6>
 801e278:	6829      	ldr	r1, [r5, #0]
 801e27a:	b171      	cbz	r1, 801e29a <rmw_wait+0xd6>
 801e27c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801e280:	2300      	movs	r3, #0
 801e282:	2001      	movs	r0, #1
 801e284:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e288:	3301      	adds	r3, #1
 801e28a:	6a12      	ldr	r2, [r2, #32]
 801e28c:	4299      	cmp	r1, r3
 801e28e:	6912      	ldr	r2, [r2, #16]
 801e290:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e294:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e298:	d1f4      	bne.n	801e284 <rmw_wait+0xc0>
 801e29a:	b344      	cbz	r4, 801e2ee <rmw_wait+0x12a>
 801e29c:	4622      	mov	r2, r4
 801e29e:	2300      	movs	r3, #0
 801e2a0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801e2a4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801e2a8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801e2ac:	440b      	add	r3, r1
 801e2ae:	b2db      	uxtb	r3, r3
 801e2b0:	2a00      	cmp	r2, #0
 801e2b2:	d1f5      	bne.n	801e2a0 <rmw_wait+0xdc>
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d05f      	beq.n	801e378 <rmw_wait+0x1b4>
 801e2b8:	1c7a      	adds	r2, r7, #1
 801e2ba:	d00d      	beq.n	801e2d8 <rmw_wait+0x114>
 801e2bc:	ee07 7a90 	vmov	s15, r7
 801e2c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e2c4:	ee07 3a90 	vmov	s15, r3
 801e2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e2d0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801e2d4:	ee17 7a90 	vmov	r7, s15
 801e2d8:	68a0      	ldr	r0, [r4, #8]
 801e2da:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801e2de:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	f040 808d 	bne.w	801e402 <rmw_wait+0x23e>
 801e2e8:	6864      	ldr	r4, [r4, #4]
 801e2ea:	2c00      	cmp	r4, #0
 801e2ec:	d1f4      	bne.n	801e2d8 <rmw_wait+0x114>
 801e2ee:	f1b9 0f00 	cmp.w	r9, #0
 801e2f2:	f000 80a1 	beq.w	801e438 <rmw_wait+0x274>
 801e2f6:	f8d9 7000 	ldr.w	r7, [r9]
 801e2fa:	2f00      	cmp	r7, #0
 801e2fc:	f000 80a4 	beq.w	801e448 <rmw_wait+0x284>
 801e300:	2400      	movs	r4, #0
 801e302:	4627      	mov	r7, r4
 801e304:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e308:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e30c:	f7f8 fdc6 	bl	8016e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801e310:	2800      	cmp	r0, #0
 801e312:	d03b      	beq.n	801e38c <rmw_wait+0x1c8>
 801e314:	3401      	adds	r4, #1
 801e316:	f8d9 3000 	ldr.w	r3, [r9]
 801e31a:	2701      	movs	r7, #1
 801e31c:	42a3      	cmp	r3, r4
 801e31e:	d8f1      	bhi.n	801e304 <rmw_wait+0x140>
 801e320:	2701      	movs	r7, #1
 801e322:	f1b8 0f00 	cmp.w	r8, #0
 801e326:	d010      	beq.n	801e34a <rmw_wait+0x186>
 801e328:	f8d8 3000 	ldr.w	r3, [r8]
 801e32c:	b16b      	cbz	r3, 801e34a <rmw_wait+0x186>
 801e32e:	2400      	movs	r4, #0
 801e330:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e334:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e338:	f7f8 fdb0 	bl	8016e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801e33c:	b370      	cbz	r0, 801e39c <rmw_wait+0x1d8>
 801e33e:	3401      	adds	r4, #1
 801e340:	f8d8 3000 	ldr.w	r3, [r8]
 801e344:	2701      	movs	r7, #1
 801e346:	42a3      	cmp	r3, r4
 801e348:	d8f2      	bhi.n	801e330 <rmw_wait+0x16c>
 801e34a:	2d00      	cmp	r5, #0
 801e34c:	d035      	beq.n	801e3ba <rmw_wait+0x1f6>
 801e34e:	682b      	ldr	r3, [r5, #0]
 801e350:	b39b      	cbz	r3, 801e3ba <rmw_wait+0x1f6>
 801e352:	2400      	movs	r4, #0
 801e354:	686b      	ldr	r3, [r5, #4]
 801e356:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e35a:	f7f8 fd9f 	bl	8016e9c <rmw_uxrce_find_static_input_buffer_by_owner>
 801e35e:	b328      	cbz	r0, 801e3ac <rmw_wait+0x1e8>
 801e360:	3401      	adds	r4, #1
 801e362:	682b      	ldr	r3, [r5, #0]
 801e364:	2701      	movs	r7, #1
 801e366:	42a3      	cmp	r3, r4
 801e368:	d8f4      	bhi.n	801e354 <rmw_wait+0x190>
 801e36a:	2e00      	cmp	r6, #0
 801e36c:	d03c      	beq.n	801e3e8 <rmw_wait+0x224>
 801e36e:	6834      	ldr	r4, [r6, #0]
 801e370:	2c00      	cmp	r4, #0
 801e372:	d039      	beq.n	801e3e8 <rmw_wait+0x224>
 801e374:	2701      	movs	r7, #1
 801e376:	e023      	b.n	801e3c0 <rmw_wait+0x1fc>
 801e378:	68a0      	ldr	r0, [r4, #8]
 801e37a:	2100      	movs	r1, #0
 801e37c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e380:	f7fa fb54 	bl	8018a2c <uxr_run_session_timeout>
 801e384:	6864      	ldr	r4, [r4, #4]
 801e386:	2c00      	cmp	r4, #0
 801e388:	d1f6      	bne.n	801e378 <rmw_wait+0x1b4>
 801e38a:	e7b0      	b.n	801e2ee <rmw_wait+0x12a>
 801e38c:	e9d9 3200 	ldrd	r3, r2, [r9]
 801e390:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e394:	3401      	adds	r4, #1
 801e396:	42a3      	cmp	r3, r4
 801e398:	d8b4      	bhi.n	801e304 <rmw_wait+0x140>
 801e39a:	e7c2      	b.n	801e322 <rmw_wait+0x15e>
 801e39c:	e9d8 3200 	ldrd	r3, r2, [r8]
 801e3a0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e3a4:	3401      	adds	r4, #1
 801e3a6:	429c      	cmp	r4, r3
 801e3a8:	d3c2      	bcc.n	801e330 <rmw_wait+0x16c>
 801e3aa:	e7ce      	b.n	801e34a <rmw_wait+0x186>
 801e3ac:	e9d5 3200 	ldrd	r3, r2, [r5]
 801e3b0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e3b4:	3401      	adds	r4, #1
 801e3b6:	42a3      	cmp	r3, r4
 801e3b8:	d8cc      	bhi.n	801e354 <rmw_wait+0x190>
 801e3ba:	b1a6      	cbz	r6, 801e3e6 <rmw_wait+0x222>
 801e3bc:	6834      	ldr	r4, [r6, #0]
 801e3be:	b194      	cbz	r4, 801e3e6 <rmw_wait+0x222>
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	461d      	mov	r5, r3
 801e3c4:	e004      	b.n	801e3d0 <rmw_wait+0x20c>
 801e3c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801e3ca:	3301      	adds	r3, #1
 801e3cc:	42a3      	cmp	r3, r4
 801e3ce:	d00a      	beq.n	801e3e6 <rmw_wait+0x222>
 801e3d0:	6870      	ldr	r0, [r6, #4]
 801e3d2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801e3d6:	7c0a      	ldrb	r2, [r1, #16]
 801e3d8:	2a00      	cmp	r2, #0
 801e3da:	d0f4      	beq.n	801e3c6 <rmw_wait+0x202>
 801e3dc:	3301      	adds	r3, #1
 801e3de:	4617      	mov	r7, r2
 801e3e0:	740d      	strb	r5, [r1, #16]
 801e3e2:	42a3      	cmp	r3, r4
 801e3e4:	d1f4      	bne.n	801e3d0 <rmw_wait+0x20c>
 801e3e6:	b147      	cbz	r7, 801e3fa <rmw_wait+0x236>
 801e3e8:	2000      	movs	r0, #0
 801e3ea:	b009      	add	sp, #36	; 0x24
 801e3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3f0:	b11e      	cbz	r6, 801e3fa <rmw_wait+0x236>
 801e3f2:	6834      	ldr	r4, [r6, #0]
 801e3f4:	462f      	mov	r7, r5
 801e3f6:	2c00      	cmp	r4, #0
 801e3f8:	d1e2      	bne.n	801e3c0 <rmw_wait+0x1fc>
 801e3fa:	2002      	movs	r0, #2
 801e3fc:	b009      	add	sp, #36	; 0x24
 801e3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e402:	4639      	mov	r1, r7
 801e404:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e408:	f7fa fb2a 	bl	8018a60 <uxr_run_session_until_data>
 801e40c:	6864      	ldr	r4, [r4, #4]
 801e40e:	2c00      	cmp	r4, #0
 801e410:	f47f af62 	bne.w	801e2d8 <rmw_wait+0x114>
 801e414:	e76b      	b.n	801e2ee <rmw_wait+0x12a>
 801e416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e41a:	f7ff fc33 	bl	801dc84 <rmw_time_total_nsec>
 801e41e:	2300      	movs	r3, #0
 801e420:	4a19      	ldr	r2, [pc, #100]	; (801e488 <rmw_wait+0x2c4>)
 801e422:	f7e2 f981 	bl	8000728 <__aeabi_uldivmod>
 801e426:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801e42a:	4607      	mov	r7, r0
 801e42c:	f171 0300 	sbcs.w	r3, r1, #0
 801e430:	bfa8      	it	ge
 801e432:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801e436:	e6e5      	b.n	801e204 <rmw_wait+0x40>
 801e438:	f1b8 0f00 	cmp.w	r8, #0
 801e43c:	d00f      	beq.n	801e45e <rmw_wait+0x29a>
 801e43e:	f8d8 3000 	ldr.w	r3, [r8]
 801e442:	b193      	cbz	r3, 801e46a <rmw_wait+0x2a6>
 801e444:	464f      	mov	r7, r9
 801e446:	e772      	b.n	801e32e <rmw_wait+0x16a>
 801e448:	f1b8 0f00 	cmp.w	r8, #0
 801e44c:	d007      	beq.n	801e45e <rmw_wait+0x29a>
 801e44e:	f8d8 3000 	ldr.w	r3, [r8]
 801e452:	2b00      	cmp	r3, #0
 801e454:	f47f af6b 	bne.w	801e32e <rmw_wait+0x16a>
 801e458:	b155      	cbz	r5, 801e470 <rmw_wait+0x2ac>
 801e45a:	461f      	mov	r7, r3
 801e45c:	e777      	b.n	801e34e <rmw_wait+0x18a>
 801e45e:	2d00      	cmp	r5, #0
 801e460:	d0c6      	beq.n	801e3f0 <rmw_wait+0x22c>
 801e462:	682b      	ldr	r3, [r5, #0]
 801e464:	b143      	cbz	r3, 801e478 <rmw_wait+0x2b4>
 801e466:	4647      	mov	r7, r8
 801e468:	e773      	b.n	801e352 <rmw_wait+0x18e>
 801e46a:	b10d      	cbz	r5, 801e470 <rmw_wait+0x2ac>
 801e46c:	464f      	mov	r7, r9
 801e46e:	e76e      	b.n	801e34e <rmw_wait+0x18a>
 801e470:	462f      	mov	r7, r5
 801e472:	2e00      	cmp	r6, #0
 801e474:	d1a2      	bne.n	801e3bc <rmw_wait+0x1f8>
 801e476:	e7c0      	b.n	801e3fa <rmw_wait+0x236>
 801e478:	4647      	mov	r7, r8
 801e47a:	2e00      	cmp	r6, #0
 801e47c:	d19e      	bne.n	801e3bc <rmw_wait+0x1f8>
 801e47e:	e7bc      	b.n	801e3fa <rmw_wait+0x236>
 801e480:	08024528 	.word	0x08024528
 801e484:	20016f3c 	.word	0x20016f3c
 801e488:	000f4240 	.word	0x000f4240

0801e48c <rmw_create_wait_set>:
 801e48c:	b508      	push	{r3, lr}
 801e48e:	4803      	ldr	r0, [pc, #12]	; (801e49c <rmw_create_wait_set+0x10>)
 801e490:	f7ff fd8e 	bl	801dfb0 <get_memory>
 801e494:	b108      	cbz	r0, 801e49a <rmw_create_wait_set+0xe>
 801e496:	6880      	ldr	r0, [r0, #8]
 801e498:	3010      	adds	r0, #16
 801e49a:	bd08      	pop	{r3, pc}
 801e49c:	20016f7c 	.word	0x20016f7c

0801e4a0 <rmw_destroy_wait_set>:
 801e4a0:	b508      	push	{r3, lr}
 801e4a2:	4b08      	ldr	r3, [pc, #32]	; (801e4c4 <rmw_destroy_wait_set+0x24>)
 801e4a4:	6819      	ldr	r1, [r3, #0]
 801e4a6:	b911      	cbnz	r1, 801e4ae <rmw_destroy_wait_set+0xe>
 801e4a8:	e00a      	b.n	801e4c0 <rmw_destroy_wait_set+0x20>
 801e4aa:	6849      	ldr	r1, [r1, #4]
 801e4ac:	b141      	cbz	r1, 801e4c0 <rmw_destroy_wait_set+0x20>
 801e4ae:	688b      	ldr	r3, [r1, #8]
 801e4b0:	3310      	adds	r3, #16
 801e4b2:	4298      	cmp	r0, r3
 801e4b4:	d1f9      	bne.n	801e4aa <rmw_destroy_wait_set+0xa>
 801e4b6:	4803      	ldr	r0, [pc, #12]	; (801e4c4 <rmw_destroy_wait_set+0x24>)
 801e4b8:	f7ff fd8a 	bl	801dfd0 <put_memory>
 801e4bc:	2000      	movs	r0, #0
 801e4be:	bd08      	pop	{r3, pc}
 801e4c0:	2001      	movs	r0, #1
 801e4c2:	bd08      	pop	{r3, pc}
 801e4c4:	20016f7c 	.word	0x20016f7c

0801e4c8 <rmw_uros_epoch_nanos>:
 801e4c8:	4b05      	ldr	r3, [pc, #20]	; (801e4e0 <rmw_uros_epoch_nanos+0x18>)
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	b123      	cbz	r3, 801e4d8 <rmw_uros_epoch_nanos+0x10>
 801e4ce:	6898      	ldr	r0, [r3, #8]
 801e4d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e4d4:	f7f9 bf20 	b.w	8018318 <uxr_epoch_nanos>
 801e4d8:	2000      	movs	r0, #0
 801e4da:	2100      	movs	r1, #0
 801e4dc:	4770      	bx	lr
 801e4de:	bf00      	nop
 801e4e0:	20016f3c 	.word	0x20016f3c

0801e4e4 <std_msgs__msg__String__init>:
 801e4e4:	b538      	push	{r3, r4, r5, lr}
 801e4e6:	4604      	mov	r4, r0
 801e4e8:	b128      	cbz	r0, 801e4f6 <std_msgs__msg__String__init+0x12>
 801e4ea:	f7f8 feb7 	bl	801725c <rosidl_runtime_c__String__init>
 801e4ee:	4605      	mov	r5, r0
 801e4f0:	b120      	cbz	r0, 801e4fc <std_msgs__msg__String__init+0x18>
 801e4f2:	4628      	mov	r0, r5
 801e4f4:	bd38      	pop	{r3, r4, r5, pc}
 801e4f6:	4605      	mov	r5, r0
 801e4f8:	4628      	mov	r0, r5
 801e4fa:	bd38      	pop	{r3, r4, r5, pc}
 801e4fc:	4620      	mov	r0, r4
 801e4fe:	f7f8 fec3 	bl	8017288 <rosidl_runtime_c__String__fini>
 801e502:	4628      	mov	r0, r5
 801e504:	bd38      	pop	{r3, r4, r5, pc}
 801e506:	bf00      	nop

0801e508 <std_msgs__msg__String__fini>:
 801e508:	b108      	cbz	r0, 801e50e <std_msgs__msg__String__fini+0x6>
 801e50a:	f7f8 bebd 	b.w	8017288 <rosidl_runtime_c__String__fini>
 801e50e:	4770      	bx	lr

0801e510 <ucdr_serialize_string>:
 801e510:	b510      	push	{r4, lr}
 801e512:	b082      	sub	sp, #8
 801e514:	4604      	mov	r4, r0
 801e516:	4608      	mov	r0, r1
 801e518:	9101      	str	r1, [sp, #4]
 801e51a:	f7e1 fef1 	bl	8000300 <strlen>
 801e51e:	4602      	mov	r2, r0
 801e520:	9901      	ldr	r1, [sp, #4]
 801e522:	4620      	mov	r0, r4
 801e524:	3201      	adds	r2, #1
 801e526:	b002      	add	sp, #8
 801e528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e52c:	f7f4 bf38 	b.w	80133a0 <ucdr_serialize_sequence_char>

0801e530 <ucdr_deserialize_string>:
 801e530:	b500      	push	{lr}
 801e532:	b083      	sub	sp, #12
 801e534:	ab01      	add	r3, sp, #4
 801e536:	f7f4 ff45 	bl	80133c4 <ucdr_deserialize_sequence_char>
 801e53a:	b003      	add	sp, #12
 801e53c:	f85d fb04 	ldr.w	pc, [sp], #4

0801e540 <uxr_init_input_best_effort_stream>:
 801e540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e544:	8003      	strh	r3, [r0, #0]
 801e546:	4770      	bx	lr

0801e548 <uxr_reset_input_best_effort_stream>:
 801e548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e54c:	8003      	strh	r3, [r0, #0]
 801e54e:	4770      	bx	lr

0801e550 <uxr_receive_best_effort_message>:
 801e550:	b538      	push	{r3, r4, r5, lr}
 801e552:	4604      	mov	r4, r0
 801e554:	8800      	ldrh	r0, [r0, #0]
 801e556:	460d      	mov	r5, r1
 801e558:	f000 fd46 	bl	801efe8 <uxr_seq_num_cmp>
 801e55c:	4603      	mov	r3, r0
 801e55e:	0fc0      	lsrs	r0, r0, #31
 801e560:	2b00      	cmp	r3, #0
 801e562:	bfb8      	it	lt
 801e564:	8025      	strhlt	r5, [r4, #0]
 801e566:	bd38      	pop	{r3, r4, r5, pc}

0801e568 <on_full_input_buffer>:
 801e568:	b570      	push	{r4, r5, r6, lr}
 801e56a:	460c      	mov	r4, r1
 801e56c:	4605      	mov	r5, r0
 801e56e:	8908      	ldrh	r0, [r1, #8]
 801e570:	682b      	ldr	r3, [r5, #0]
 801e572:	7d26      	ldrb	r6, [r4, #20]
 801e574:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e578:	fbb2 f2f0 	udiv	r2, r2, r0
 801e57c:	eba3 0c01 	sub.w	ip, r3, r1
 801e580:	fbbc fcf2 	udiv	ip, ip, r2
 801e584:	f10c 0c01 	add.w	ip, ip, #1
 801e588:	fa1f f38c 	uxth.w	r3, ip
 801e58c:	fbb3 fcf0 	udiv	ip, r3, r0
 801e590:	fb00 331c 	mls	r3, r0, ip, r3
 801e594:	b29b      	uxth	r3, r3
 801e596:	fb02 f303 	mul.w	r3, r2, r3
 801e59a:	1d18      	adds	r0, r3, #4
 801e59c:	4408      	add	r0, r1
 801e59e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e5a2:	b116      	cbz	r6, 801e5aa <on_full_input_buffer+0x42>
 801e5a4:	2600      	movs	r6, #0
 801e5a6:	f840 6c04 	str.w	r6, [r0, #-4]
 801e5aa:	2a03      	cmp	r2, #3
 801e5ac:	d801      	bhi.n	801e5b2 <on_full_input_buffer+0x4a>
 801e5ae:	2001      	movs	r0, #1
 801e5b0:	bd70      	pop	{r4, r5, r6, pc}
 801e5b2:	3308      	adds	r3, #8
 801e5b4:	4628      	mov	r0, r5
 801e5b6:	3a04      	subs	r2, #4
 801e5b8:	4419      	add	r1, r3
 801e5ba:	692b      	ldr	r3, [r5, #16]
 801e5bc:	f7f4 fe74 	bl	80132a8 <ucdr_init_buffer_origin>
 801e5c0:	4628      	mov	r0, r5
 801e5c2:	4622      	mov	r2, r4
 801e5c4:	4902      	ldr	r1, [pc, #8]	; (801e5d0 <on_full_input_buffer+0x68>)
 801e5c6:	f7f4 fe4b 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 801e5ca:	2000      	movs	r0, #0
 801e5cc:	bd70      	pop	{r4, r5, r6, pc}
 801e5ce:	bf00      	nop
 801e5d0:	0801e569 	.word	0x0801e569

0801e5d4 <uxr_init_input_reliable_stream>:
 801e5d4:	b510      	push	{r4, lr}
 801e5d6:	e9c0 1200 	strd	r1, r2, [r0]
 801e5da:	2400      	movs	r4, #0
 801e5dc:	9a02      	ldr	r2, [sp, #8]
 801e5de:	8103      	strh	r3, [r0, #8]
 801e5e0:	6102      	str	r2, [r0, #16]
 801e5e2:	7504      	strb	r4, [r0, #20]
 801e5e4:	b1c3      	cbz	r3, 801e618 <uxr_init_input_reliable_stream+0x44>
 801e5e6:	600c      	str	r4, [r1, #0]
 801e5e8:	8901      	ldrh	r1, [r0, #8]
 801e5ea:	2901      	cmp	r1, #1
 801e5ec:	d914      	bls.n	801e618 <uxr_init_input_reliable_stream+0x44>
 801e5ee:	f04f 0c01 	mov.w	ip, #1
 801e5f2:	6843      	ldr	r3, [r0, #4]
 801e5f4:	f10c 0e01 	add.w	lr, ip, #1
 801e5f8:	fbbc f2f1 	udiv	r2, ip, r1
 801e5fc:	fbb3 f3f1 	udiv	r3, r3, r1
 801e600:	fb01 c212 	mls	r2, r1, r2, ip
 801e604:	fa1f fc8e 	uxth.w	ip, lr
 801e608:	b292      	uxth	r2, r2
 801e60a:	fb02 f303 	mul.w	r3, r2, r3
 801e60e:	6802      	ldr	r2, [r0, #0]
 801e610:	50d4      	str	r4, [r2, r3]
 801e612:	8901      	ldrh	r1, [r0, #8]
 801e614:	4561      	cmp	r1, ip
 801e616:	d8ec      	bhi.n	801e5f2 <uxr_init_input_reliable_stream+0x1e>
 801e618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e61c:	60c3      	str	r3, [r0, #12]
 801e61e:	bd10      	pop	{r4, pc}

0801e620 <uxr_reset_input_reliable_stream>:
 801e620:	8901      	ldrh	r1, [r0, #8]
 801e622:	b1d9      	cbz	r1, 801e65c <uxr_reset_input_reliable_stream+0x3c>
 801e624:	b510      	push	{r4, lr}
 801e626:	f04f 0e00 	mov.w	lr, #0
 801e62a:	46f4      	mov	ip, lr
 801e62c:	4674      	mov	r4, lr
 801e62e:	6843      	ldr	r3, [r0, #4]
 801e630:	f10e 0e01 	add.w	lr, lr, #1
 801e634:	fbbc f2f1 	udiv	r2, ip, r1
 801e638:	fbb3 f3f1 	udiv	r3, r3, r1
 801e63c:	fb01 c212 	mls	r2, r1, r2, ip
 801e640:	fa1f fc8e 	uxth.w	ip, lr
 801e644:	b292      	uxth	r2, r2
 801e646:	fb02 f303 	mul.w	r3, r2, r3
 801e64a:	6802      	ldr	r2, [r0, #0]
 801e64c:	50d4      	str	r4, [r2, r3]
 801e64e:	8901      	ldrh	r1, [r0, #8]
 801e650:	4561      	cmp	r1, ip
 801e652:	d8ec      	bhi.n	801e62e <uxr_reset_input_reliable_stream+0xe>
 801e654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e658:	60c3      	str	r3, [r0, #12]
 801e65a:	bd10      	pop	{r4, pc}
 801e65c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e660:	60c3      	str	r3, [r0, #12]
 801e662:	4770      	bx	lr

0801e664 <uxr_receive_reliable_message>:
 801e664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e668:	4604      	mov	r4, r0
 801e66a:	460d      	mov	r5, r1
 801e66c:	8901      	ldrh	r1, [r0, #8]
 801e66e:	4617      	mov	r7, r2
 801e670:	8980      	ldrh	r0, [r0, #12]
 801e672:	4698      	mov	r8, r3
 801e674:	f000 fcb0 	bl	801efd8 <uxr_seq_num_add>
 801e678:	4629      	mov	r1, r5
 801e67a:	4606      	mov	r6, r0
 801e67c:	89a0      	ldrh	r0, [r4, #12]
 801e67e:	f000 fcb3 	bl	801efe8 <uxr_seq_num_cmp>
 801e682:	2800      	cmp	r0, #0
 801e684:	db0a      	blt.n	801e69c <uxr_receive_reliable_message+0x38>
 801e686:	2600      	movs	r6, #0
 801e688:	4629      	mov	r1, r5
 801e68a:	89e0      	ldrh	r0, [r4, #14]
 801e68c:	f000 fcac 	bl	801efe8 <uxr_seq_num_cmp>
 801e690:	2800      	cmp	r0, #0
 801e692:	da00      	bge.n	801e696 <uxr_receive_reliable_message+0x32>
 801e694:	81e5      	strh	r5, [r4, #14]
 801e696:	4630      	mov	r0, r6
 801e698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e69c:	4630      	mov	r0, r6
 801e69e:	4629      	mov	r1, r5
 801e6a0:	f000 fca2 	bl	801efe8 <uxr_seq_num_cmp>
 801e6a4:	2800      	cmp	r0, #0
 801e6a6:	dbee      	blt.n	801e686 <uxr_receive_reliable_message+0x22>
 801e6a8:	6923      	ldr	r3, [r4, #16]
 801e6aa:	4638      	mov	r0, r7
 801e6ac:	4798      	blx	r3
 801e6ae:	4681      	mov	r9, r0
 801e6b0:	2101      	movs	r1, #1
 801e6b2:	89a0      	ldrh	r0, [r4, #12]
 801e6b4:	f000 fc90 	bl	801efd8 <uxr_seq_num_add>
 801e6b8:	f1b9 0f00 	cmp.w	r9, #0
 801e6bc:	bf08      	it	eq
 801e6be:	4285      	cmpeq	r5, r0
 801e6c0:	bf0c      	ite	eq
 801e6c2:	2601      	moveq	r6, #1
 801e6c4:	2600      	movne	r6, #0
 801e6c6:	d104      	bne.n	801e6d2 <uxr_receive_reliable_message+0x6e>
 801e6c8:	2300      	movs	r3, #0
 801e6ca:	9a08      	ldr	r2, [sp, #32]
 801e6cc:	81a0      	strh	r0, [r4, #12]
 801e6ce:	7013      	strb	r3, [r2, #0]
 801e6d0:	e7da      	b.n	801e688 <uxr_receive_reliable_message+0x24>
 801e6d2:	8922      	ldrh	r2, [r4, #8]
 801e6d4:	6863      	ldr	r3, [r4, #4]
 801e6d6:	fbb5 f0f2 	udiv	r0, r5, r2
 801e6da:	fbb3 f3f2 	udiv	r3, r3, r2
 801e6de:	fb02 5010 	mls	r0, r2, r0, r5
 801e6e2:	b280      	uxth	r0, r0
 801e6e4:	fb03 f000 	mul.w	r0, r3, r0
 801e6e8:	6823      	ldr	r3, [r4, #0]
 801e6ea:	3004      	adds	r0, #4
 801e6ec:	4418      	add	r0, r3
 801e6ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d1c7      	bne.n	801e686 <uxr_receive_reliable_message+0x22>
 801e6f6:	4639      	mov	r1, r7
 801e6f8:	4642      	mov	r2, r8
 801e6fa:	f002 fc14 	bl	8020f26 <memcpy>
 801e6fe:	8921      	ldrh	r1, [r4, #8]
 801e700:	6863      	ldr	r3, [r4, #4]
 801e702:	fbb5 f2f1 	udiv	r2, r5, r1
 801e706:	fbb3 f3f1 	udiv	r3, r3, r1
 801e70a:	fb01 5212 	mls	r2, r1, r2, r5
 801e70e:	b292      	uxth	r2, r2
 801e710:	fb02 f303 	mul.w	r3, r2, r3
 801e714:	6822      	ldr	r2, [r4, #0]
 801e716:	f842 8003 	str.w	r8, [r2, r3]
 801e71a:	2301      	movs	r3, #1
 801e71c:	9a08      	ldr	r2, [sp, #32]
 801e71e:	7013      	strb	r3, [r2, #0]
 801e720:	f1b9 0f00 	cmp.w	r9, #0
 801e724:	d0af      	beq.n	801e686 <uxr_receive_reliable_message+0x22>
 801e726:	89a6      	ldrh	r6, [r4, #12]
 801e728:	2101      	movs	r1, #1
 801e72a:	4630      	mov	r0, r6
 801e72c:	f000 fc54 	bl	801efd8 <uxr_seq_num_add>
 801e730:	8921      	ldrh	r1, [r4, #8]
 801e732:	6863      	ldr	r3, [r4, #4]
 801e734:	4606      	mov	r6, r0
 801e736:	fbb0 f2f1 	udiv	r2, r0, r1
 801e73a:	fbb3 f3f1 	udiv	r3, r3, r1
 801e73e:	fb01 0212 	mls	r2, r1, r2, r0
 801e742:	6820      	ldr	r0, [r4, #0]
 801e744:	b292      	uxth	r2, r2
 801e746:	fb02 f303 	mul.w	r3, r2, r3
 801e74a:	3304      	adds	r3, #4
 801e74c:	4418      	add	r0, r3
 801e74e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e752:	2b00      	cmp	r3, #0
 801e754:	d097      	beq.n	801e686 <uxr_receive_reliable_message+0x22>
 801e756:	6923      	ldr	r3, [r4, #16]
 801e758:	4798      	blx	r3
 801e75a:	2802      	cmp	r0, #2
 801e75c:	d002      	beq.n	801e764 <uxr_receive_reliable_message+0x100>
 801e75e:	2801      	cmp	r0, #1
 801e760:	d0e2      	beq.n	801e728 <uxr_receive_reliable_message+0xc4>
 801e762:	e790      	b.n	801e686 <uxr_receive_reliable_message+0x22>
 801e764:	2601      	movs	r6, #1
 801e766:	e78f      	b.n	801e688 <uxr_receive_reliable_message+0x24>

0801e768 <uxr_next_input_reliable_buffer_available>:
 801e768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e76c:	4604      	mov	r4, r0
 801e76e:	460f      	mov	r7, r1
 801e770:	8980      	ldrh	r0, [r0, #12]
 801e772:	2101      	movs	r1, #1
 801e774:	4690      	mov	r8, r2
 801e776:	f000 fc2f 	bl	801efd8 <uxr_seq_num_add>
 801e77a:	8922      	ldrh	r2, [r4, #8]
 801e77c:	6866      	ldr	r6, [r4, #4]
 801e77e:	fbb0 f3f2 	udiv	r3, r0, r2
 801e782:	fbb6 f6f2 	udiv	r6, r6, r2
 801e786:	fb02 0313 	mls	r3, r2, r3, r0
 801e78a:	b29b      	uxth	r3, r3
 801e78c:	fb03 f606 	mul.w	r6, r3, r6
 801e790:	6823      	ldr	r3, [r4, #0]
 801e792:	3604      	adds	r6, #4
 801e794:	441e      	add	r6, r3
 801e796:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801e79a:	f1b9 0f00 	cmp.w	r9, #0
 801e79e:	d023      	beq.n	801e7e8 <uxr_next_input_reliable_buffer_available+0x80>
 801e7a0:	4605      	mov	r5, r0
 801e7a2:	6923      	ldr	r3, [r4, #16]
 801e7a4:	4630      	mov	r0, r6
 801e7a6:	4798      	blx	r3
 801e7a8:	4682      	mov	sl, r0
 801e7aa:	b300      	cbz	r0, 801e7ee <uxr_next_input_reliable_buffer_available+0x86>
 801e7ac:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801e7b0:	2101      	movs	r1, #1
 801e7b2:	4650      	mov	r0, sl
 801e7b4:	f000 fc10 	bl	801efd8 <uxr_seq_num_add>
 801e7b8:	8921      	ldrh	r1, [r4, #8]
 801e7ba:	4682      	mov	sl, r0
 801e7bc:	6863      	ldr	r3, [r4, #4]
 801e7be:	6820      	ldr	r0, [r4, #0]
 801e7c0:	fbba f2f1 	udiv	r2, sl, r1
 801e7c4:	fbb3 f3f1 	udiv	r3, r3, r1
 801e7c8:	fb01 a212 	mls	r2, r1, r2, sl
 801e7cc:	b292      	uxth	r2, r2
 801e7ce:	fb02 f303 	mul.w	r3, r2, r3
 801e7d2:	3304      	adds	r3, #4
 801e7d4:	4418      	add	r0, r3
 801e7d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e7da:	b12b      	cbz	r3, 801e7e8 <uxr_next_input_reliable_buffer_available+0x80>
 801e7dc:	6923      	ldr	r3, [r4, #16]
 801e7de:	4798      	blx	r3
 801e7e0:	2802      	cmp	r0, #2
 801e7e2:	d01b      	beq.n	801e81c <uxr_next_input_reliable_buffer_available+0xb4>
 801e7e4:	2801      	cmp	r0, #1
 801e7e6:	d0e3      	beq.n	801e7b0 <uxr_next_input_reliable_buffer_available+0x48>
 801e7e8:	2000      	movs	r0, #0
 801e7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7ee:	464a      	mov	r2, r9
 801e7f0:	4631      	mov	r1, r6
 801e7f2:	4638      	mov	r0, r7
 801e7f4:	f7f4 fd60 	bl	80132b8 <ucdr_init_buffer>
 801e7f8:	8921      	ldrh	r1, [r4, #8]
 801e7fa:	6863      	ldr	r3, [r4, #4]
 801e7fc:	2001      	movs	r0, #1
 801e7fe:	fbb5 f2f1 	udiv	r2, r5, r1
 801e802:	fbb3 f3f1 	udiv	r3, r3, r1
 801e806:	fb01 5212 	mls	r2, r1, r2, r5
 801e80a:	b292      	uxth	r2, r2
 801e80c:	fb02 f303 	mul.w	r3, r2, r3
 801e810:	6822      	ldr	r2, [r4, #0]
 801e812:	f842 a003 	str.w	sl, [r2, r3]
 801e816:	81a5      	strh	r5, [r4, #12]
 801e818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e81c:	8920      	ldrh	r0, [r4, #8]
 801e81e:	eb06 0108 	add.w	r1, r6, r8
 801e822:	6863      	ldr	r3, [r4, #4]
 801e824:	eba9 0208 	sub.w	r2, r9, r8
 801e828:	fbb5 f6f0 	udiv	r6, r5, r0
 801e82c:	fbb3 f3f0 	udiv	r3, r3, r0
 801e830:	fb00 5516 	mls	r5, r0, r6, r5
 801e834:	2000      	movs	r0, #0
 801e836:	b2ad      	uxth	r5, r5
 801e838:	fb03 f505 	mul.w	r5, r3, r5
 801e83c:	6823      	ldr	r3, [r4, #0]
 801e83e:	5158      	str	r0, [r3, r5]
 801e840:	4638      	mov	r0, r7
 801e842:	f7f4 fd39 	bl	80132b8 <ucdr_init_buffer>
 801e846:	4638      	mov	r0, r7
 801e848:	4622      	mov	r2, r4
 801e84a:	4903      	ldr	r1, [pc, #12]	; (801e858 <uxr_next_input_reliable_buffer_available+0xf0>)
 801e84c:	f7f4 fd08 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 801e850:	2001      	movs	r0, #1
 801e852:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801e856:	e7c8      	b.n	801e7ea <uxr_next_input_reliable_buffer_available+0x82>
 801e858:	0801e569 	.word	0x0801e569

0801e85c <uxr_process_heartbeat>:
 801e85c:	b538      	push	{r3, r4, r5, lr}
 801e85e:	4611      	mov	r1, r2
 801e860:	4604      	mov	r4, r0
 801e862:	89c0      	ldrh	r0, [r0, #14]
 801e864:	4615      	mov	r5, r2
 801e866:	f000 fbbf 	bl	801efe8 <uxr_seq_num_cmp>
 801e86a:	2800      	cmp	r0, #0
 801e86c:	bfb8      	it	lt
 801e86e:	81e5      	strhlt	r5, [r4, #14]
 801e870:	bd38      	pop	{r3, r4, r5, pc}
 801e872:	bf00      	nop

0801e874 <uxr_compute_acknack>:
 801e874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e878:	8903      	ldrh	r3, [r0, #8]
 801e87a:	4604      	mov	r4, r0
 801e87c:	460f      	mov	r7, r1
 801e87e:	8985      	ldrh	r5, [r0, #12]
 801e880:	b1db      	cbz	r3, 801e8ba <uxr_compute_acknack+0x46>
 801e882:	4628      	mov	r0, r5
 801e884:	2601      	movs	r6, #1
 801e886:	e004      	b.n	801e892 <uxr_compute_acknack+0x1e>
 801e888:	4566      	cmp	r6, ip
 801e88a:	f106 0601 	add.w	r6, r6, #1
 801e88e:	d214      	bcs.n	801e8ba <uxr_compute_acknack+0x46>
 801e890:	89a0      	ldrh	r0, [r4, #12]
 801e892:	b2b1      	uxth	r1, r6
 801e894:	f000 fba0 	bl	801efd8 <uxr_seq_num_add>
 801e898:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e89c:	fbb0 f2fc 	udiv	r2, r0, ip
 801e8a0:	e9d4 1300 	ldrd	r1, r3, [r4]
 801e8a4:	fb0c 0212 	mls	r2, ip, r2, r0
 801e8a8:	fbb3 f3fc 	udiv	r3, r3, ip
 801e8ac:	b292      	uxth	r2, r2
 801e8ae:	fb02 f303 	mul.w	r3, r2, r3
 801e8b2:	58cb      	ldr	r3, [r1, r3]
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d1e7      	bne.n	801e888 <uxr_compute_acknack+0x14>
 801e8b8:	4605      	mov	r5, r0
 801e8ba:	803d      	strh	r5, [r7, #0]
 801e8bc:	2101      	movs	r1, #1
 801e8be:	89e6      	ldrh	r6, [r4, #14]
 801e8c0:	4628      	mov	r0, r5
 801e8c2:	f000 fb8d 	bl	801efe0 <uxr_seq_num_sub>
 801e8c6:	4601      	mov	r1, r0
 801e8c8:	4630      	mov	r0, r6
 801e8ca:	f000 fb89 	bl	801efe0 <uxr_seq_num_sub>
 801e8ce:	4606      	mov	r6, r0
 801e8d0:	b328      	cbz	r0, 801e91e <uxr_compute_acknack+0xaa>
 801e8d2:	f04f 0900 	mov.w	r9, #0
 801e8d6:	f04f 0801 	mov.w	r8, #1
 801e8da:	464d      	mov	r5, r9
 801e8dc:	fa1f f189 	uxth.w	r1, r9
 801e8e0:	8838      	ldrh	r0, [r7, #0]
 801e8e2:	f000 fb79 	bl	801efd8 <uxr_seq_num_add>
 801e8e6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e8ea:	6861      	ldr	r1, [r4, #4]
 801e8ec:	fa08 fe09 	lsl.w	lr, r8, r9
 801e8f0:	6822      	ldr	r2, [r4, #0]
 801e8f2:	f109 0901 	add.w	r9, r9, #1
 801e8f6:	ea4e 0e05 	orr.w	lr, lr, r5
 801e8fa:	fbb0 f3fc 	udiv	r3, r0, ip
 801e8fe:	fbb1 f1fc 	udiv	r1, r1, ip
 801e902:	fb03 001c 	mls	r0, r3, ip, r0
 801e906:	b283      	uxth	r3, r0
 801e908:	fb01 f303 	mul.w	r3, r1, r3
 801e90c:	58d3      	ldr	r3, [r2, r3]
 801e90e:	b90b      	cbnz	r3, 801e914 <uxr_compute_acknack+0xa0>
 801e910:	fa1f f58e 	uxth.w	r5, lr
 801e914:	454e      	cmp	r6, r9
 801e916:	d1e1      	bne.n	801e8dc <uxr_compute_acknack+0x68>
 801e918:	4628      	mov	r0, r5
 801e91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e91e:	4605      	mov	r5, r0
 801e920:	4628      	mov	r0, r5
 801e922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e926:	bf00      	nop

0801e928 <uxr_init_output_best_effort_stream>:
 801e928:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801e92c:	6001      	str	r1, [r0, #0]
 801e92e:	7303      	strb	r3, [r0, #12]
 801e930:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801e934:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801e938:	4770      	bx	lr
 801e93a:	bf00      	nop

0801e93c <uxr_reset_output_best_effort_stream>:
 801e93c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e940:	7b03      	ldrb	r3, [r0, #12]
 801e942:	81c2      	strh	r2, [r0, #14]
 801e944:	6043      	str	r3, [r0, #4]
 801e946:	4770      	bx	lr

0801e948 <uxr_prepare_best_effort_buffer_to_write>:
 801e948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e94a:	4604      	mov	r4, r0
 801e94c:	b083      	sub	sp, #12
 801e94e:	6840      	ldr	r0, [r0, #4]
 801e950:	460d      	mov	r5, r1
 801e952:	4616      	mov	r6, r2
 801e954:	f7fb fa5c 	bl	8019e10 <uxr_submessage_padding>
 801e958:	6863      	ldr	r3, [r4, #4]
 801e95a:	4418      	add	r0, r3
 801e95c:	68a3      	ldr	r3, [r4, #8]
 801e95e:	1942      	adds	r2, r0, r5
 801e960:	4293      	cmp	r3, r2
 801e962:	bf2c      	ite	cs
 801e964:	2701      	movcs	r7, #1
 801e966:	2700      	movcc	r7, #0
 801e968:	d202      	bcs.n	801e970 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801e96a:	4638      	mov	r0, r7
 801e96c:	b003      	add	sp, #12
 801e96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e970:	9000      	str	r0, [sp, #0]
 801e972:	2300      	movs	r3, #0
 801e974:	4630      	mov	r0, r6
 801e976:	6821      	ldr	r1, [r4, #0]
 801e978:	f7f4 fc8c 	bl	8013294 <ucdr_init_buffer_origin_offset>
 801e97c:	6861      	ldr	r1, [r4, #4]
 801e97e:	4638      	mov	r0, r7
 801e980:	4429      	add	r1, r5
 801e982:	6061      	str	r1, [r4, #4]
 801e984:	b003      	add	sp, #12
 801e986:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e988 <uxr_prepare_best_effort_buffer_to_send>:
 801e988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e98c:	4604      	mov	r4, r0
 801e98e:	461d      	mov	r5, r3
 801e990:	6840      	ldr	r0, [r0, #4]
 801e992:	7b23      	ldrb	r3, [r4, #12]
 801e994:	4298      	cmp	r0, r3
 801e996:	bf8c      	ite	hi
 801e998:	2601      	movhi	r6, #1
 801e99a:	2600      	movls	r6, #0
 801e99c:	d802      	bhi.n	801e9a4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801e99e:	4630      	mov	r0, r6
 801e9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9a4:	4688      	mov	r8, r1
 801e9a6:	89e0      	ldrh	r0, [r4, #14]
 801e9a8:	2101      	movs	r1, #1
 801e9aa:	4617      	mov	r7, r2
 801e9ac:	f000 fb14 	bl	801efd8 <uxr_seq_num_add>
 801e9b0:	6823      	ldr	r3, [r4, #0]
 801e9b2:	81e0      	strh	r0, [r4, #14]
 801e9b4:	8028      	strh	r0, [r5, #0]
 801e9b6:	4630      	mov	r0, r6
 801e9b8:	f8c8 3000 	str.w	r3, [r8]
 801e9bc:	6863      	ldr	r3, [r4, #4]
 801e9be:	603b      	str	r3, [r7, #0]
 801e9c0:	7b23      	ldrb	r3, [r4, #12]
 801e9c2:	6063      	str	r3, [r4, #4]
 801e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e9c8 <on_full_output_buffer>:
 801e9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9ca:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801e9ce:	460c      	mov	r4, r1
 801e9d0:	6803      	ldr	r3, [r0, #0]
 801e9d2:	4605      	mov	r5, r0
 801e9d4:	7b26      	ldrb	r6, [r4, #12]
 801e9d6:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e9da:	fbb2 f2fc 	udiv	r2, r2, ip
 801e9de:	eba3 0e01 	sub.w	lr, r3, r1
 801e9e2:	6903      	ldr	r3, [r0, #16]
 801e9e4:	fbbe fef2 	udiv	lr, lr, r2
 801e9e8:	f10e 0e01 	add.w	lr, lr, #1
 801e9ec:	fa1f fe8e 	uxth.w	lr, lr
 801e9f0:	fbbe f7fc 	udiv	r7, lr, ip
 801e9f4:	fb0c ec17 	mls	ip, ip, r7, lr
 801e9f8:	fa1f fc8c 	uxth.w	ip, ip
 801e9fc:	fb02 fc0c 	mul.w	ip, r2, ip
 801ea00:	f851 200c 	ldr.w	r2, [r1, ip]
 801ea04:	44b4      	add	ip, r6
 801ea06:	1b92      	subs	r2, r2, r6
 801ea08:	f10c 0c08 	add.w	ip, ip, #8
 801ea0c:	3a04      	subs	r2, #4
 801ea0e:	4461      	add	r1, ip
 801ea10:	f7f4 fc4a 	bl	80132a8 <ucdr_init_buffer_origin>
 801ea14:	4628      	mov	r0, r5
 801ea16:	4622      	mov	r2, r4
 801ea18:	4902      	ldr	r1, [pc, #8]	; (801ea24 <on_full_output_buffer+0x5c>)
 801ea1a:	f7f4 fc21 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 801ea1e:	2000      	movs	r0, #0
 801ea20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea22:	bf00      	nop
 801ea24:	0801e9c9 	.word	0x0801e9c9

0801ea28 <uxr_init_output_reliable_stream>:
 801ea28:	b530      	push	{r4, r5, lr}
 801ea2a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801ea2e:	8103      	strh	r3, [r0, #8]
 801ea30:	7304      	strb	r4, [r0, #12]
 801ea32:	e9c0 1200 	strd	r1, r2, [r0]
 801ea36:	b1e3      	cbz	r3, 801ea72 <uxr_init_output_reliable_stream+0x4a>
 801ea38:	600c      	str	r4, [r1, #0]
 801ea3a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ea3e:	f1bc 0f01 	cmp.w	ip, #1
 801ea42:	d916      	bls.n	801ea72 <uxr_init_output_reliable_stream+0x4a>
 801ea44:	f04f 0e01 	mov.w	lr, #1
 801ea48:	6843      	ldr	r3, [r0, #4]
 801ea4a:	f10e 0501 	add.w	r5, lr, #1
 801ea4e:	7b04      	ldrb	r4, [r0, #12]
 801ea50:	6801      	ldr	r1, [r0, #0]
 801ea52:	fbbe f2fc 	udiv	r2, lr, ip
 801ea56:	fbb3 f3fc 	udiv	r3, r3, ip
 801ea5a:	fb0c e212 	mls	r2, ip, r2, lr
 801ea5e:	fa1f fe85 	uxth.w	lr, r5
 801ea62:	b292      	uxth	r2, r2
 801ea64:	fb02 f303 	mul.w	r3, r2, r3
 801ea68:	50cc      	str	r4, [r1, r3]
 801ea6a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ea6e:	45f4      	cmp	ip, lr
 801ea70:	d8ea      	bhi.n	801ea48 <uxr_init_output_reliable_stream+0x20>
 801ea72:	4b07      	ldr	r3, [pc, #28]	; (801ea90 <uxr_init_output_reliable_stream+0x68>)
 801ea74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ea78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ea7c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801ea80:	f8c0 300e 	str.w	r3, [r0, #14]
 801ea84:	2300      	movs	r3, #0
 801ea86:	8242      	strh	r2, [r0, #18]
 801ea88:	8403      	strh	r3, [r0, #32]
 801ea8a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801ea8e:	bd30      	pop	{r4, r5, pc}
 801ea90:	ffff0000 	.word	0xffff0000
 801ea94:	00000000 	.word	0x00000000

0801ea98 <uxr_reset_output_reliable_stream>:
 801ea98:	8901      	ldrh	r1, [r0, #8]
 801ea9a:	b510      	push	{r4, lr}
 801ea9c:	b1b1      	cbz	r1, 801eacc <uxr_reset_output_reliable_stream+0x34>
 801ea9e:	f04f 0e00 	mov.w	lr, #0
 801eaa2:	46f4      	mov	ip, lr
 801eaa4:	6843      	ldr	r3, [r0, #4]
 801eaa6:	f10e 0e01 	add.w	lr, lr, #1
 801eaaa:	7b04      	ldrb	r4, [r0, #12]
 801eaac:	fbbc f2f1 	udiv	r2, ip, r1
 801eab0:	fbb3 f3f1 	udiv	r3, r3, r1
 801eab4:	fb01 c212 	mls	r2, r1, r2, ip
 801eab8:	fa1f fc8e 	uxth.w	ip, lr
 801eabc:	b292      	uxth	r2, r2
 801eabe:	fb02 f303 	mul.w	r3, r2, r3
 801eac2:	6802      	ldr	r2, [r0, #0]
 801eac4:	50d4      	str	r4, [r2, r3]
 801eac6:	8901      	ldrh	r1, [r0, #8]
 801eac8:	4561      	cmp	r1, ip
 801eaca:	d8eb      	bhi.n	801eaa4 <uxr_reset_output_reliable_stream+0xc>
 801eacc:	4b08      	ldr	r3, [pc, #32]	; (801eaf0 <uxr_reset_output_reliable_stream+0x58>)
 801eace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ead2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801eae8 <uxr_reset_output_reliable_stream+0x50>
 801ead6:	f8c0 300e 	str.w	r3, [r0, #14]
 801eada:	2300      	movs	r3, #0
 801eadc:	8242      	strh	r2, [r0, #18]
 801eade:	8403      	strh	r3, [r0, #32]
 801eae0:	ed80 7b06 	vstr	d7, [r0, #24]
 801eae4:	bd10      	pop	{r4, pc}
 801eae6:	bf00      	nop
 801eae8:	ffffffff 	.word	0xffffffff
 801eaec:	7fffffff 	.word	0x7fffffff
 801eaf0:	ffff0000 	.word	0xffff0000

0801eaf4 <uxr_prepare_reliable_buffer_to_write>:
 801eaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf8:	4604      	mov	r4, r0
 801eafa:	b091      	sub	sp, #68	; 0x44
 801eafc:	8900      	ldrh	r0, [r0, #8]
 801eafe:	468b      	mov	fp, r1
 801eb00:	89e6      	ldrh	r6, [r4, #14]
 801eb02:	9204      	str	r2, [sp, #16]
 801eb04:	6865      	ldr	r5, [r4, #4]
 801eb06:	6823      	ldr	r3, [r4, #0]
 801eb08:	f894 900c 	ldrb.w	r9, [r4, #12]
 801eb0c:	fbb6 f2f0 	udiv	r2, r6, r0
 801eb10:	fbb5 f5f0 	udiv	r5, r5, r0
 801eb14:	fb00 6212 	mls	r2, r0, r2, r6
 801eb18:	1f2f      	subs	r7, r5, #4
 801eb1a:	b292      	uxth	r2, r2
 801eb1c:	fb05 3202 	mla	r2, r5, r2, r3
 801eb20:	1d11      	adds	r1, r2, #4
 801eb22:	f8d2 8000 	ldr.w	r8, [r2]
 801eb26:	9103      	str	r1, [sp, #12]
 801eb28:	2800      	cmp	r0, #0
 801eb2a:	f000 814a 	beq.w	801edc2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801eb2e:	f04f 0c00 	mov.w	ip, #0
 801eb32:	46e2      	mov	sl, ip
 801eb34:	4661      	mov	r1, ip
 801eb36:	f10c 0c01 	add.w	ip, ip, #1
 801eb3a:	fbb1 f2f0 	udiv	r2, r1, r0
 801eb3e:	fb00 1212 	mls	r2, r0, r2, r1
 801eb42:	fa1f f18c 	uxth.w	r1, ip
 801eb46:	b292      	uxth	r2, r2
 801eb48:	fb05 f202 	mul.w	r2, r5, r2
 801eb4c:	589a      	ldr	r2, [r3, r2]
 801eb4e:	454a      	cmp	r2, r9
 801eb50:	d103      	bne.n	801eb5a <uxr_prepare_reliable_buffer_to_write+0x66>
 801eb52:	f10a 0a01 	add.w	sl, sl, #1
 801eb56:	fa1f fa8a 	uxth.w	sl, sl
 801eb5a:	4281      	cmp	r1, r0
 801eb5c:	d3eb      	bcc.n	801eb36 <uxr_prepare_reliable_buffer_to_write+0x42>
 801eb5e:	4640      	mov	r0, r8
 801eb60:	2104      	movs	r1, #4
 801eb62:	f8cd a014 	str.w	sl, [sp, #20]
 801eb66:	f7f4 fbab 	bl	80132c0 <ucdr_alignment>
 801eb6a:	4480      	add	r8, r0
 801eb6c:	eb08 020b 	add.w	r2, r8, fp
 801eb70:	42ba      	cmp	r2, r7
 801eb72:	f240 80ca 	bls.w	801ed0a <uxr_prepare_reliable_buffer_to_write+0x216>
 801eb76:	7b22      	ldrb	r2, [r4, #12]
 801eb78:	445a      	add	r2, fp
 801eb7a:	42ba      	cmp	r2, r7
 801eb7c:	f240 80b2 	bls.w	801ece4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801eb80:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801eb84:	b2bb      	uxth	r3, r7
 801eb86:	eba2 0209 	sub.w	r2, r2, r9
 801eb8a:	441a      	add	r2, r3
 801eb8c:	b292      	uxth	r2, r2
 801eb8e:	fb0a f902 	mul.w	r9, sl, r2
 801eb92:	9205      	str	r2, [sp, #20]
 801eb94:	45d9      	cmp	r9, fp
 801eb96:	9206      	str	r2, [sp, #24]
 801eb98:	f0c0 80b3 	bcc.w	801ed02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801eb9c:	f108 0204 	add.w	r2, r8, #4
 801eba0:	42ba      	cmp	r2, r7
 801eba2:	f080 80da 	bcs.w	801ed5a <uxr_prepare_reliable_buffer_to_write+0x266>
 801eba6:	f1a3 0904 	sub.w	r9, r3, #4
 801ebaa:	9b05      	ldr	r3, [sp, #20]
 801ebac:	eba9 0908 	sub.w	r9, r9, r8
 801ebb0:	fa1f f989 	uxth.w	r9, r9
 801ebb4:	ebab 0b09 	sub.w	fp, fp, r9
 801ebb8:	fbbb f2f3 	udiv	r2, fp, r3
 801ebbc:	fb03 b312 	mls	r3, r3, r2, fp
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	f040 80c4 	bne.w	801ed4e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801ebc6:	b293      	uxth	r3, r2
 801ebc8:	4553      	cmp	r3, sl
 801ebca:	f200 809a 	bhi.w	801ed02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	f000 80f9 	beq.w	801edc6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801ebd4:	f8cd 801c 	str.w	r8, [sp, #28]
 801ebd8:	f04f 0a00 	mov.w	sl, #0
 801ebdc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ebe0:	f10d 0b20 	add.w	fp, sp, #32
 801ebe4:	9505      	str	r5, [sp, #20]
 801ebe6:	461d      	mov	r5, r3
 801ebe8:	e000      	b.n	801ebec <uxr_prepare_reliable_buffer_to_write+0xf8>
 801ebea:	46c1      	mov	r9, r8
 801ebec:	8922      	ldrh	r2, [r4, #8]
 801ebee:	4658      	mov	r0, fp
 801ebf0:	6863      	ldr	r3, [r4, #4]
 801ebf2:	f10a 0a01 	add.w	sl, sl, #1
 801ebf6:	fbb6 f1f2 	udiv	r1, r6, r2
 801ebfa:	fbb3 f3f2 	udiv	r3, r3, r2
 801ebfe:	fb02 6111 	mls	r1, r2, r1, r6
 801ec02:	463a      	mov	r2, r7
 801ec04:	b289      	uxth	r1, r1
 801ec06:	fb03 f101 	mul.w	r1, r3, r1
 801ec0a:	6823      	ldr	r3, [r4, #0]
 801ec0c:	3104      	adds	r1, #4
 801ec0e:	4419      	add	r1, r3
 801ec10:	2300      	movs	r3, #0
 801ec12:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801ec16:	f8cd c000 	str.w	ip, [sp]
 801ec1a:	f7f4 fb3b 	bl	8013294 <ucdr_init_buffer_origin_offset>
 801ec1e:	464a      	mov	r2, r9
 801ec20:	2300      	movs	r3, #0
 801ec22:	210d      	movs	r1, #13
 801ec24:	4658      	mov	r0, fp
 801ec26:	f7fb f8b3 	bl	8019d90 <uxr_buffer_submessage_header>
 801ec2a:	8921      	ldrh	r1, [r4, #8]
 801ec2c:	6863      	ldr	r3, [r4, #4]
 801ec2e:	4630      	mov	r0, r6
 801ec30:	fbb6 f2f1 	udiv	r2, r6, r1
 801ec34:	fbb3 f3f1 	udiv	r3, r3, r1
 801ec38:	fb01 6212 	mls	r2, r1, r2, r6
 801ec3c:	2101      	movs	r1, #1
 801ec3e:	b292      	uxth	r2, r2
 801ec40:	fb02 f303 	mul.w	r3, r2, r3
 801ec44:	6822      	ldr	r2, [r4, #0]
 801ec46:	50d7      	str	r7, [r2, r3]
 801ec48:	f000 f9c6 	bl	801efd8 <uxr_seq_num_add>
 801ec4c:	4606      	mov	r6, r0
 801ec4e:	fa1f f38a 	uxth.w	r3, sl
 801ec52:	429d      	cmp	r5, r3
 801ec54:	d8c9      	bhi.n	801ebea <uxr_prepare_reliable_buffer_to_write+0xf6>
 801ec56:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ec5a:	9d05      	ldr	r5, [sp, #20]
 801ec5c:	8920      	ldrh	r0, [r4, #8]
 801ec5e:	463a      	mov	r2, r7
 801ec60:	6863      	ldr	r3, [r4, #4]
 801ec62:	fbb6 f1f0 	udiv	r1, r6, r0
 801ec66:	fbb3 f3f0 	udiv	r3, r3, r0
 801ec6a:	fb00 6111 	mls	r1, r0, r1, r6
 801ec6e:	4658      	mov	r0, fp
 801ec70:	b289      	uxth	r1, r1
 801ec72:	fb01 f303 	mul.w	r3, r1, r3
 801ec76:	6821      	ldr	r1, [r4, #0]
 801ec78:	3304      	adds	r3, #4
 801ec7a:	4419      	add	r1, r3
 801ec7c:	2300      	movs	r3, #0
 801ec7e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801ec82:	9700      	str	r7, [sp, #0]
 801ec84:	f7f4 fb06 	bl	8013294 <ucdr_init_buffer_origin_offset>
 801ec88:	9f06      	ldr	r7, [sp, #24]
 801ec8a:	4658      	mov	r0, fp
 801ec8c:	2302      	movs	r3, #2
 801ec8e:	b2ba      	uxth	r2, r7
 801ec90:	210d      	movs	r1, #13
 801ec92:	f7fb f87d 	bl	8019d90 <uxr_buffer_submessage_header>
 801ec96:	f108 0104 	add.w	r1, r8, #4
 801ec9a:	9b03      	ldr	r3, [sp, #12]
 801ec9c:	f1a5 0208 	sub.w	r2, r5, #8
 801eca0:	8925      	ldrh	r5, [r4, #8]
 801eca2:	440b      	add	r3, r1
 801eca4:	eba2 0208 	sub.w	r2, r2, r8
 801eca8:	fbb6 f0f5 	udiv	r0, r6, r5
 801ecac:	4619      	mov	r1, r3
 801ecae:	6863      	ldr	r3, [r4, #4]
 801ecb0:	fb05 6010 	mls	r0, r5, r0, r6
 801ecb4:	fbb3 f3f5 	udiv	r3, r3, r5
 801ecb8:	b280      	uxth	r0, r0
 801ecba:	6825      	ldr	r5, [r4, #0]
 801ecbc:	fb00 f303 	mul.w	r3, r0, r3
 801ecc0:	7b20      	ldrb	r0, [r4, #12]
 801ecc2:	3004      	adds	r0, #4
 801ecc4:	4438      	add	r0, r7
 801ecc6:	50e8      	str	r0, [r5, r3]
 801ecc8:	9d04      	ldr	r5, [sp, #16]
 801ecca:	4628      	mov	r0, r5
 801eccc:	f7f4 faf4 	bl	80132b8 <ucdr_init_buffer>
 801ecd0:	4628      	mov	r0, r5
 801ecd2:	4622      	mov	r2, r4
 801ecd4:	493d      	ldr	r1, [pc, #244]	; (801edcc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ecd6:	f7f4 fac3 	bl	8013260 <ucdr_set_on_full_buffer_callback>
 801ecda:	2001      	movs	r0, #1
 801ecdc:	81e6      	strh	r6, [r4, #14]
 801ecde:	b011      	add	sp, #68	; 0x44
 801ece0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ece4:	2101      	movs	r1, #1
 801ece6:	89e0      	ldrh	r0, [r4, #14]
 801ece8:	f000 f976 	bl	801efd8 <uxr_seq_num_add>
 801ecec:	4605      	mov	r5, r0
 801ecee:	8921      	ldrh	r1, [r4, #8]
 801ecf0:	8a60      	ldrh	r0, [r4, #18]
 801ecf2:	f000 f971 	bl	801efd8 <uxr_seq_num_add>
 801ecf6:	4601      	mov	r1, r0
 801ecf8:	4628      	mov	r0, r5
 801ecfa:	f000 f975 	bl	801efe8 <uxr_seq_num_cmp>
 801ecfe:	2800      	cmp	r0, #0
 801ed00:	dd44      	ble.n	801ed8c <uxr_prepare_reliable_buffer_to_write+0x298>
 801ed02:	2000      	movs	r0, #0
 801ed04:	b011      	add	sp, #68	; 0x44
 801ed06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed0a:	8921      	ldrh	r1, [r4, #8]
 801ed0c:	8a60      	ldrh	r0, [r4, #18]
 801ed0e:	9205      	str	r2, [sp, #20]
 801ed10:	f000 f962 	bl	801efd8 <uxr_seq_num_add>
 801ed14:	4601      	mov	r1, r0
 801ed16:	4630      	mov	r0, r6
 801ed18:	f000 f966 	bl	801efe8 <uxr_seq_num_cmp>
 801ed1c:	2800      	cmp	r0, #0
 801ed1e:	9a05      	ldr	r2, [sp, #20]
 801ed20:	dcef      	bgt.n	801ed02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ed22:	8925      	ldrh	r5, [r4, #8]
 801ed24:	e9d4 7300 	ldrd	r7, r3, [r4]
 801ed28:	fbb6 f4f5 	udiv	r4, r6, r5
 801ed2c:	fbb3 f3f5 	udiv	r3, r3, r5
 801ed30:	fb05 6414 	mls	r4, r5, r4, r6
 801ed34:	b2a4      	uxth	r4, r4
 801ed36:	fb04 f303 	mul.w	r3, r4, r3
 801ed3a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801ed3e:	50fa      	str	r2, [r7, r3]
 801ed40:	2300      	movs	r3, #0
 801ed42:	f8cd 8000 	str.w	r8, [sp]
 801ed46:	f7f4 faa5 	bl	8013294 <ucdr_init_buffer_origin_offset>
 801ed4a:	2001      	movs	r0, #1
 801ed4c:	e7da      	b.n	801ed04 <uxr_prepare_reliable_buffer_to_write+0x210>
 801ed4e:	3201      	adds	r2, #1
 801ed50:	9306      	str	r3, [sp, #24]
 801ed52:	b293      	uxth	r3, r2
 801ed54:	4553      	cmp	r3, sl
 801ed56:	d8d4      	bhi.n	801ed02 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ed58:	e739      	b.n	801ebce <uxr_prepare_reliable_buffer_to_write+0xda>
 801ed5a:	4630      	mov	r0, r6
 801ed5c:	2101      	movs	r1, #1
 801ed5e:	9307      	str	r3, [sp, #28]
 801ed60:	f000 f93a 	bl	801efd8 <uxr_seq_num_add>
 801ed64:	4606      	mov	r6, r0
 801ed66:	8920      	ldrh	r0, [r4, #8]
 801ed68:	6862      	ldr	r2, [r4, #4]
 801ed6a:	fbb6 f1f0 	udiv	r1, r6, r0
 801ed6e:	fbb2 f2f0 	udiv	r2, r2, r0
 801ed72:	fb00 6111 	mls	r1, r0, r1, r6
 801ed76:	b289      	uxth	r1, r1
 801ed78:	fb01 f202 	mul.w	r2, r1, r2
 801ed7c:	6821      	ldr	r1, [r4, #0]
 801ed7e:	3204      	adds	r2, #4
 801ed80:	188b      	adds	r3, r1, r2
 801ed82:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ed86:	9303      	str	r3, [sp, #12]
 801ed88:	9b07      	ldr	r3, [sp, #28]
 801ed8a:	e70c      	b.n	801eba6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ed8c:	8921      	ldrh	r1, [r4, #8]
 801ed8e:	6863      	ldr	r3, [r4, #4]
 801ed90:	9804      	ldr	r0, [sp, #16]
 801ed92:	fbb5 f2f1 	udiv	r2, r5, r1
 801ed96:	fbb3 f3f1 	udiv	r3, r3, r1
 801ed9a:	fb01 5212 	mls	r2, r1, r2, r5
 801ed9e:	6821      	ldr	r1, [r4, #0]
 801eda0:	b292      	uxth	r2, r2
 801eda2:	fb02 f303 	mul.w	r3, r2, r3
 801eda6:	7b22      	ldrb	r2, [r4, #12]
 801eda8:	3304      	adds	r3, #4
 801edaa:	445a      	add	r2, fp
 801edac:	4419      	add	r1, r3
 801edae:	f841 2c04 	str.w	r2, [r1, #-4]
 801edb2:	7b23      	ldrb	r3, [r4, #12]
 801edb4:	9300      	str	r3, [sp, #0]
 801edb6:	2300      	movs	r3, #0
 801edb8:	f7f4 fa6c 	bl	8013294 <ucdr_init_buffer_origin_offset>
 801edbc:	2001      	movs	r0, #1
 801edbe:	81e5      	strh	r5, [r4, #14]
 801edc0:	e7a0      	b.n	801ed04 <uxr_prepare_reliable_buffer_to_write+0x210>
 801edc2:	4682      	mov	sl, r0
 801edc4:	e6cb      	b.n	801eb5e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801edc6:	f10d 0b20 	add.w	fp, sp, #32
 801edca:	e747      	b.n	801ec5c <uxr_prepare_reliable_buffer_to_write+0x168>
 801edcc:	0801e9c9 	.word	0x0801e9c9

0801edd0 <uxr_prepare_next_reliable_buffer_to_send>:
 801edd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edd2:	4604      	mov	r4, r0
 801edd4:	461d      	mov	r5, r3
 801edd6:	460f      	mov	r7, r1
 801edd8:	8a00      	ldrh	r0, [r0, #16]
 801edda:	2101      	movs	r1, #1
 801eddc:	4616      	mov	r6, r2
 801edde:	f000 f8fb 	bl	801efd8 <uxr_seq_num_add>
 801ede2:	8028      	strh	r0, [r5, #0]
 801ede4:	8922      	ldrh	r2, [r4, #8]
 801ede6:	6863      	ldr	r3, [r4, #4]
 801ede8:	fbb0 f1f2 	udiv	r1, r0, r2
 801edec:	fbb3 f3f2 	udiv	r3, r3, r2
 801edf0:	fb02 0c11 	mls	ip, r2, r1, r0
 801edf4:	89e1      	ldrh	r1, [r4, #14]
 801edf6:	fa1f fc8c 	uxth.w	ip, ip
 801edfa:	fb0c fc03 	mul.w	ip, ip, r3
 801edfe:	6823      	ldr	r3, [r4, #0]
 801ee00:	f10c 0c04 	add.w	ip, ip, #4
 801ee04:	4463      	add	r3, ip
 801ee06:	603b      	str	r3, [r7, #0]
 801ee08:	6823      	ldr	r3, [r4, #0]
 801ee0a:	449c      	add	ip, r3
 801ee0c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801ee10:	6033      	str	r3, [r6, #0]
 801ee12:	f000 f8e9 	bl	801efe8 <uxr_seq_num_cmp>
 801ee16:	2800      	cmp	r0, #0
 801ee18:	dd01      	ble.n	801ee1e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ee1a:	2000      	movs	r0, #0
 801ee1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee1e:	7b23      	ldrb	r3, [r4, #12]
 801ee20:	6832      	ldr	r2, [r6, #0]
 801ee22:	429a      	cmp	r2, r3
 801ee24:	d9f9      	bls.n	801ee1a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ee26:	8a61      	ldrh	r1, [r4, #18]
 801ee28:	8a20      	ldrh	r0, [r4, #16]
 801ee2a:	f000 f8d9 	bl	801efe0 <uxr_seq_num_sub>
 801ee2e:	8923      	ldrh	r3, [r4, #8]
 801ee30:	4283      	cmp	r3, r0
 801ee32:	d0f2      	beq.n	801ee1a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ee34:	8828      	ldrh	r0, [r5, #0]
 801ee36:	89e3      	ldrh	r3, [r4, #14]
 801ee38:	8220      	strh	r0, [r4, #16]
 801ee3a:	4298      	cmp	r0, r3
 801ee3c:	d001      	beq.n	801ee42 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801ee3e:	2001      	movs	r0, #1
 801ee40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee42:	2101      	movs	r1, #1
 801ee44:	f000 f8c8 	bl	801efd8 <uxr_seq_num_add>
 801ee48:	4603      	mov	r3, r0
 801ee4a:	2001      	movs	r0, #1
 801ee4c:	81e3      	strh	r3, [r4, #14]
 801ee4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ee50 <uxr_update_output_stream_heartbeat_timestamp>:
 801ee50:	b570      	push	{r4, r5, r6, lr}
 801ee52:	8a01      	ldrh	r1, [r0, #16]
 801ee54:	4604      	mov	r4, r0
 801ee56:	8a40      	ldrh	r0, [r0, #18]
 801ee58:	4615      	mov	r5, r2
 801ee5a:	461e      	mov	r6, r3
 801ee5c:	f000 f8c4 	bl	801efe8 <uxr_seq_num_cmp>
 801ee60:	2800      	cmp	r0, #0
 801ee62:	db07      	blt.n	801ee74 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801ee64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ee68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ee6c:	2000      	movs	r0, #0
 801ee6e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801ee72:	bd70      	pop	{r4, r5, r6, pc}
 801ee74:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ee78:	b940      	cbnz	r0, 801ee8c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801ee7a:	2301      	movs	r3, #1
 801ee7c:	f884 3020 	strb.w	r3, [r4, #32]
 801ee80:	3564      	adds	r5, #100	; 0x64
 801ee82:	f146 0600 	adc.w	r6, r6, #0
 801ee86:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801ee8a:	bd70      	pop	{r4, r5, r6, pc}
 801ee8c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801ee90:	4295      	cmp	r5, r2
 801ee92:	eb76 0303 	sbcs.w	r3, r6, r3
 801ee96:	db04      	blt.n	801eea2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801ee98:	1c43      	adds	r3, r0, #1
 801ee9a:	2001      	movs	r0, #1
 801ee9c:	f884 3020 	strb.w	r3, [r4, #32]
 801eea0:	e7ee      	b.n	801ee80 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801eea2:	2000      	movs	r0, #0
 801eea4:	e7ec      	b.n	801ee80 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801eea6:	bf00      	nop

0801eea8 <uxr_begin_output_nack_buffer_it>:
 801eea8:	8a40      	ldrh	r0, [r0, #18]
 801eeaa:	4770      	bx	lr

0801eeac <uxr_next_reliable_nack_buffer_to_send>:
 801eeac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eeb0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801eeb4:	b197      	cbz	r7, 801eedc <uxr_next_reliable_nack_buffer_to_send+0x30>
 801eeb6:	4680      	mov	r8, r0
 801eeb8:	460d      	mov	r5, r1
 801eeba:	4616      	mov	r6, r2
 801eebc:	461c      	mov	r4, r3
 801eebe:	8818      	ldrh	r0, [r3, #0]
 801eec0:	2101      	movs	r1, #1
 801eec2:	f000 f889 	bl	801efd8 <uxr_seq_num_add>
 801eec6:	8020      	strh	r0, [r4, #0]
 801eec8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801eecc:	f000 f88c 	bl	801efe8 <uxr_seq_num_cmp>
 801eed0:	2800      	cmp	r0, #0
 801eed2:	dd06      	ble.n	801eee2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801eed4:	2300      	movs	r3, #0
 801eed6:	461f      	mov	r7, r3
 801eed8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801eedc:	4638      	mov	r0, r7
 801eede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eee2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801eee6:	8820      	ldrh	r0, [r4, #0]
 801eee8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801eeec:	fbb0 f3f2 	udiv	r3, r0, r2
 801eef0:	fbb1 fcf2 	udiv	ip, r1, r2
 801eef4:	fb02 0313 	mls	r3, r2, r3, r0
 801eef8:	b29b      	uxth	r3, r3
 801eefa:	fb03 fc0c 	mul.w	ip, r3, ip
 801eefe:	f8d8 3000 	ldr.w	r3, [r8]
 801ef02:	f10c 0c04 	add.w	ip, ip, #4
 801ef06:	4463      	add	r3, ip
 801ef08:	602b      	str	r3, [r5, #0]
 801ef0a:	f8d8 3000 	ldr.w	r3, [r8]
 801ef0e:	4463      	add	r3, ip
 801ef10:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801ef14:	6033      	str	r3, [r6, #0]
 801ef16:	f898 200c 	ldrb.w	r2, [r8, #12]
 801ef1a:	429a      	cmp	r2, r3
 801ef1c:	d0d0      	beq.n	801eec0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801ef1e:	e7dd      	b.n	801eedc <uxr_next_reliable_nack_buffer_to_send+0x30>

0801ef20 <uxr_process_acknack>:
 801ef20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef22:	4604      	mov	r4, r0
 801ef24:	460e      	mov	r6, r1
 801ef26:	4610      	mov	r0, r2
 801ef28:	2101      	movs	r1, #1
 801ef2a:	f000 f859 	bl	801efe0 <uxr_seq_num_sub>
 801ef2e:	8a61      	ldrh	r1, [r4, #18]
 801ef30:	f000 f856 	bl	801efe0 <uxr_seq_num_sub>
 801ef34:	b1c8      	cbz	r0, 801ef6a <uxr_process_acknack+0x4a>
 801ef36:	4605      	mov	r5, r0
 801ef38:	2700      	movs	r7, #0
 801ef3a:	2101      	movs	r1, #1
 801ef3c:	8a60      	ldrh	r0, [r4, #18]
 801ef3e:	f000 f84b 	bl	801efd8 <uxr_seq_num_add>
 801ef42:	8923      	ldrh	r3, [r4, #8]
 801ef44:	6862      	ldr	r2, [r4, #4]
 801ef46:	3701      	adds	r7, #1
 801ef48:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801ef4c:	6821      	ldr	r1, [r4, #0]
 801ef4e:	42bd      	cmp	r5, r7
 801ef50:	8260      	strh	r0, [r4, #18]
 801ef52:	fbb0 fef3 	udiv	lr, r0, r3
 801ef56:	fbb2 f2f3 	udiv	r2, r2, r3
 801ef5a:	fb03 031e 	mls	r3, r3, lr, r0
 801ef5e:	b29b      	uxth	r3, r3
 801ef60:	fb02 f303 	mul.w	r3, r2, r3
 801ef64:	f841 c003 	str.w	ip, [r1, r3]
 801ef68:	d1e7      	bne.n	801ef3a <uxr_process_acknack+0x1a>
 801ef6a:	3e00      	subs	r6, #0
 801ef6c:	f04f 0300 	mov.w	r3, #0
 801ef70:	bf18      	it	ne
 801ef72:	2601      	movne	r6, #1
 801ef74:	f884 3020 	strb.w	r3, [r4, #32]
 801ef78:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801ef7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef7e:	bf00      	nop

0801ef80 <uxr_is_output_up_to_date>:
 801ef80:	8a01      	ldrh	r1, [r0, #16]
 801ef82:	8a40      	ldrh	r0, [r0, #18]
 801ef84:	b508      	push	{r3, lr}
 801ef86:	f000 f82f 	bl	801efe8 <uxr_seq_num_cmp>
 801ef8a:	fab0 f080 	clz	r0, r0
 801ef8e:	0940      	lsrs	r0, r0, #5
 801ef90:	bd08      	pop	{r3, pc}
 801ef92:	bf00      	nop

0801ef94 <get_available_free_slots>:
 801ef94:	8901      	ldrh	r1, [r0, #8]
 801ef96:	b1e1      	cbz	r1, 801efd2 <get_available_free_slots+0x3e>
 801ef98:	6843      	ldr	r3, [r0, #4]
 801ef9a:	f04f 0c00 	mov.w	ip, #0
 801ef9e:	b530      	push	{r4, r5, lr}
 801efa0:	fbb3 fef1 	udiv	lr, r3, r1
 801efa4:	6805      	ldr	r5, [r0, #0]
 801efa6:	4662      	mov	r2, ip
 801efa8:	7b04      	ldrb	r4, [r0, #12]
 801efaa:	4660      	mov	r0, ip
 801efac:	f10c 0c01 	add.w	ip, ip, #1
 801efb0:	fbb2 f3f1 	udiv	r3, r2, r1
 801efb4:	fb01 2313 	mls	r3, r1, r3, r2
 801efb8:	fa1f f28c 	uxth.w	r2, ip
 801efbc:	b29b      	uxth	r3, r3
 801efbe:	fb0e f303 	mul.w	r3, lr, r3
 801efc2:	58eb      	ldr	r3, [r5, r3]
 801efc4:	429c      	cmp	r4, r3
 801efc6:	d101      	bne.n	801efcc <get_available_free_slots+0x38>
 801efc8:	3001      	adds	r0, #1
 801efca:	b280      	uxth	r0, r0
 801efcc:	428a      	cmp	r2, r1
 801efce:	d3ed      	bcc.n	801efac <get_available_free_slots+0x18>
 801efd0:	bd30      	pop	{r4, r5, pc}
 801efd2:	4608      	mov	r0, r1
 801efd4:	4770      	bx	lr
 801efd6:	bf00      	nop

0801efd8 <uxr_seq_num_add>:
 801efd8:	4408      	add	r0, r1
 801efda:	b280      	uxth	r0, r0
 801efdc:	4770      	bx	lr
 801efde:	bf00      	nop

0801efe0 <uxr_seq_num_sub>:
 801efe0:	1a40      	subs	r0, r0, r1
 801efe2:	b280      	uxth	r0, r0
 801efe4:	4770      	bx	lr
 801efe6:	bf00      	nop

0801efe8 <uxr_seq_num_cmp>:
 801efe8:	4288      	cmp	r0, r1
 801efea:	d011      	beq.n	801f010 <uxr_seq_num_cmp+0x28>
 801efec:	d309      	bcc.n	801f002 <uxr_seq_num_cmp+0x1a>
 801efee:	4288      	cmp	r0, r1
 801eff0:	d910      	bls.n	801f014 <uxr_seq_num_cmp+0x2c>
 801eff2:	1a40      	subs	r0, r0, r1
 801eff4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801eff8:	bfd4      	ite	le
 801effa:	2001      	movle	r0, #1
 801effc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801f000:	4770      	bx	lr
 801f002:	1a0b      	subs	r3, r1, r0
 801f004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f008:	daf1      	bge.n	801efee <uxr_seq_num_cmp+0x6>
 801f00a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f00e:	4770      	bx	lr
 801f010:	2000      	movs	r0, #0
 801f012:	4770      	bx	lr
 801f014:	2001      	movs	r0, #1
 801f016:	4770      	bx	lr

0801f018 <rcl_get_default_domain_id>:
 801f018:	b530      	push	{r4, r5, lr}
 801f01a:	2300      	movs	r3, #0
 801f01c:	b083      	sub	sp, #12
 801f01e:	9300      	str	r3, [sp, #0]
 801f020:	b1d0      	cbz	r0, 801f058 <rcl_get_default_domain_id+0x40>
 801f022:	4604      	mov	r4, r0
 801f024:	4669      	mov	r1, sp
 801f026:	4815      	ldr	r0, [pc, #84]	; (801f07c <rcl_get_default_domain_id+0x64>)
 801f028:	f7f6 f82a 	bl	8015080 <rcutils_get_env>
 801f02c:	4602      	mov	r2, r0
 801f02e:	b110      	cbz	r0, 801f036 <rcl_get_default_domain_id+0x1e>
 801f030:	2001      	movs	r0, #1
 801f032:	b003      	add	sp, #12
 801f034:	bd30      	pop	{r4, r5, pc}
 801f036:	9b00      	ldr	r3, [sp, #0]
 801f038:	b18b      	cbz	r3, 801f05e <rcl_get_default_domain_id+0x46>
 801f03a:	7818      	ldrb	r0, [r3, #0]
 801f03c:	2800      	cmp	r0, #0
 801f03e:	d0f8      	beq.n	801f032 <rcl_get_default_domain_id+0x1a>
 801f040:	a901      	add	r1, sp, #4
 801f042:	4618      	mov	r0, r3
 801f044:	9201      	str	r2, [sp, #4]
 801f046:	f000 fc8f 	bl	801f968 <strtoul>
 801f04a:	4605      	mov	r5, r0
 801f04c:	b150      	cbz	r0, 801f064 <rcl_get_default_domain_id+0x4c>
 801f04e:	1c43      	adds	r3, r0, #1
 801f050:	d00d      	beq.n	801f06e <rcl_get_default_domain_id+0x56>
 801f052:	2000      	movs	r0, #0
 801f054:	6025      	str	r5, [r4, #0]
 801f056:	e7ec      	b.n	801f032 <rcl_get_default_domain_id+0x1a>
 801f058:	200b      	movs	r0, #11
 801f05a:	b003      	add	sp, #12
 801f05c:	bd30      	pop	{r4, r5, pc}
 801f05e:	4618      	mov	r0, r3
 801f060:	b003      	add	sp, #12
 801f062:	bd30      	pop	{r4, r5, pc}
 801f064:	9b01      	ldr	r3, [sp, #4]
 801f066:	781b      	ldrb	r3, [r3, #0]
 801f068:	2b00      	cmp	r3, #0
 801f06a:	d0f2      	beq.n	801f052 <rcl_get_default_domain_id+0x3a>
 801f06c:	e7e0      	b.n	801f030 <rcl_get_default_domain_id+0x18>
 801f06e:	f001 ff25 	bl	8020ebc <__errno>
 801f072:	6803      	ldr	r3, [r0, #0]
 801f074:	2b22      	cmp	r3, #34	; 0x22
 801f076:	d1ec      	bne.n	801f052 <rcl_get_default_domain_id+0x3a>
 801f078:	e7da      	b.n	801f030 <rcl_get_default_domain_id+0x18>
 801f07a:	bf00      	nop
 801f07c:	08025ab0 	.word	0x08025ab0

0801f080 <rcl_expand_topic_name>:
 801f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f084:	b08d      	sub	sp, #52	; 0x34
 801f086:	4698      	mov	r8, r3
 801f088:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f08a:	9207      	str	r2, [sp, #28]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	bf18      	it	ne
 801f090:	f1b8 0f00 	cmpne.w	r8, #0
 801f094:	bf0c      	ite	eq
 801f096:	2301      	moveq	r3, #1
 801f098:	2300      	movne	r3, #0
 801f09a:	2a00      	cmp	r2, #0
 801f09c:	bf08      	it	eq
 801f09e:	f043 0301 	orreq.w	r3, r3, #1
 801f0a2:	2900      	cmp	r1, #0
 801f0a4:	bf08      	it	eq
 801f0a6:	f043 0301 	orreq.w	r3, r3, #1
 801f0aa:	2b00      	cmp	r3, #0
 801f0ac:	d13d      	bne.n	801f12a <rcl_expand_topic_name+0xaa>
 801f0ae:	fab0 f280 	clz	r2, r0
 801f0b2:	4604      	mov	r4, r0
 801f0b4:	0952      	lsrs	r2, r2, #5
 801f0b6:	2800      	cmp	r0, #0
 801f0b8:	d037      	beq.n	801f12a <rcl_expand_topic_name+0xaa>
 801f0ba:	460f      	mov	r7, r1
 801f0bc:	a90b      	add	r1, sp, #44	; 0x2c
 801f0be:	f000 f945 	bl	801f34c <rcl_validate_topic_name>
 801f0c2:	4605      	mov	r5, r0
 801f0c4:	bb68      	cbnz	r0, 801f122 <rcl_expand_topic_name+0xa2>
 801f0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d137      	bne.n	801f13c <rcl_expand_topic_name+0xbc>
 801f0cc:	4602      	mov	r2, r0
 801f0ce:	a90b      	add	r1, sp, #44	; 0x2c
 801f0d0:	4638      	mov	r0, r7
 801f0d2:	f7f6 fa97 	bl	8015604 <rmw_validate_node_name>
 801f0d6:	bb68      	cbnz	r0, 801f134 <rcl_expand_topic_name+0xb4>
 801f0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d133      	bne.n	801f146 <rcl_expand_topic_name+0xc6>
 801f0de:	462a      	mov	r2, r5
 801f0e0:	a90b      	add	r1, sp, #44	; 0x2c
 801f0e2:	9807      	ldr	r0, [sp, #28]
 801f0e4:	f7f6 fa70 	bl	80155c8 <rmw_validate_namespace>
 801f0e8:	bb20      	cbnz	r0, 801f134 <rcl_expand_topic_name+0xb4>
 801f0ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f0ec:	2d00      	cmp	r5, #0
 801f0ee:	f040 80a2 	bne.w	801f236 <rcl_expand_topic_name+0x1b6>
 801f0f2:	217b      	movs	r1, #123	; 0x7b
 801f0f4:	4620      	mov	r0, r4
 801f0f6:	f001 fe51 	bl	8020d9c <strchr>
 801f0fa:	7823      	ldrb	r3, [r4, #0]
 801f0fc:	4681      	mov	r9, r0
 801f0fe:	bb20      	cbnz	r0, 801f14a <rcl_expand_topic_name+0xca>
 801f100:	2b2f      	cmp	r3, #47	; 0x2f
 801f102:	d122      	bne.n	801f14a <rcl_expand_topic_name+0xca>
 801f104:	ab19      	add	r3, sp, #100	; 0x64
 801f106:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f10a:	ab16      	add	r3, sp, #88	; 0x58
 801f10c:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f110:	4620      	mov	r0, r4
 801f112:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f114:	f7f6 f93a 	bl	801538c <rcutils_strdup>
 801f118:	2800      	cmp	r0, #0
 801f11a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f11c:	bf08      	it	eq
 801f11e:	250a      	moveq	r5, #10
 801f120:	6018      	str	r0, [r3, #0]
 801f122:	4628      	mov	r0, r5
 801f124:	b00d      	add	sp, #52	; 0x34
 801f126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f12a:	250b      	movs	r5, #11
 801f12c:	4628      	mov	r0, r5
 801f12e:	b00d      	add	sp, #52	; 0x34
 801f130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f134:	f7fc f97a 	bl	801b42c <rcl_convert_rmw_ret_to_rcl_ret>
 801f138:	4605      	mov	r5, r0
 801f13a:	e7f2      	b.n	801f122 <rcl_expand_topic_name+0xa2>
 801f13c:	2567      	movs	r5, #103	; 0x67
 801f13e:	4628      	mov	r0, r5
 801f140:	b00d      	add	sp, #52	; 0x34
 801f142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f146:	25c9      	movs	r5, #201	; 0xc9
 801f148:	e7eb      	b.n	801f122 <rcl_expand_topic_name+0xa2>
 801f14a:	2b7e      	cmp	r3, #126	; 0x7e
 801f14c:	d075      	beq.n	801f23a <rcl_expand_topic_name+0x1ba>
 801f14e:	f1b9 0f00 	cmp.w	r9, #0
 801f152:	f000 80c2 	beq.w	801f2da <rcl_expand_topic_name+0x25a>
 801f156:	2300      	movs	r3, #0
 801f158:	46a2      	mov	sl, r4
 801f15a:	461e      	mov	r6, r3
 801f15c:	9508      	str	r5, [sp, #32]
 801f15e:	4655      	mov	r5, sl
 801f160:	9409      	str	r4, [sp, #36]	; 0x24
 801f162:	46b2      	mov	sl, r6
 801f164:	464c      	mov	r4, r9
 801f166:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f16a:	2c00      	cmp	r4, #0
 801f16c:	f000 80ae 	beq.w	801f2cc <rcl_expand_topic_name+0x24c>
 801f170:	217d      	movs	r1, #125	; 0x7d
 801f172:	4628      	mov	r0, r5
 801f174:	f001 fe12 	bl	8020d9c <strchr>
 801f178:	eba0 0904 	sub.w	r9, r0, r4
 801f17c:	4621      	mov	r1, r4
 801f17e:	4869      	ldr	r0, [pc, #420]	; (801f324 <rcl_expand_topic_name+0x2a4>)
 801f180:	f109 0601 	add.w	r6, r9, #1
 801f184:	4632      	mov	r2, r6
 801f186:	f001 fe16 	bl	8020db6 <strncmp>
 801f18a:	2800      	cmp	r0, #0
 801f18c:	d051      	beq.n	801f232 <rcl_expand_topic_name+0x1b2>
 801f18e:	4632      	mov	r2, r6
 801f190:	4621      	mov	r1, r4
 801f192:	4865      	ldr	r0, [pc, #404]	; (801f328 <rcl_expand_topic_name+0x2a8>)
 801f194:	f001 fe0f 	bl	8020db6 <strncmp>
 801f198:	b128      	cbz	r0, 801f1a6 <rcl_expand_topic_name+0x126>
 801f19a:	4632      	mov	r2, r6
 801f19c:	4621      	mov	r1, r4
 801f19e:	4863      	ldr	r0, [pc, #396]	; (801f32c <rcl_expand_topic_name+0x2ac>)
 801f1a0:	f001 fe09 	bl	8020db6 <strncmp>
 801f1a4:	bb38      	cbnz	r0, 801f1f6 <rcl_expand_topic_name+0x176>
 801f1a6:	46d9      	mov	r9, fp
 801f1a8:	ab18      	add	r3, sp, #96	; 0x60
 801f1aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f1ae:	ab16      	add	r3, sp, #88	; 0x58
 801f1b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	4631      	mov	r1, r6
 801f1b8:	cb0c      	ldmia	r3, {r2, r3}
 801f1ba:	f7f6 f909 	bl	80153d0 <rcutils_strndup>
 801f1be:	4604      	mov	r4, r0
 801f1c0:	2800      	cmp	r0, #0
 801f1c2:	f000 80a3 	beq.w	801f30c <rcl_expand_topic_name+0x28c>
 801f1c6:	464a      	mov	r2, r9
 801f1c8:	4628      	mov	r0, r5
 801f1ca:	ab16      	add	r3, sp, #88	; 0x58
 801f1cc:	4621      	mov	r1, r4
 801f1ce:	f7f5 ffdd 	bl	801518c <rcutils_repl_str>
 801f1d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f1d4:	4605      	mov	r5, r0
 801f1d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f1d8:	4620      	mov	r0, r4
 801f1da:	4798      	blx	r3
 801f1dc:	4650      	mov	r0, sl
 801f1de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f1e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f1e2:	4798      	blx	r3
 801f1e4:	2d00      	cmp	r5, #0
 801f1e6:	d06c      	beq.n	801f2c2 <rcl_expand_topic_name+0x242>
 801f1e8:	217b      	movs	r1, #123	; 0x7b
 801f1ea:	4628      	mov	r0, r5
 801f1ec:	f001 fdd6 	bl	8020d9c <strchr>
 801f1f0:	46aa      	mov	sl, r5
 801f1f2:	4604      	mov	r4, r0
 801f1f4:	e7b9      	b.n	801f16a <rcl_expand_topic_name+0xea>
 801f1f6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801f1fa:	1c61      	adds	r1, r4, #1
 801f1fc:	4640      	mov	r0, r8
 801f1fe:	f7fe fca5 	bl	801db4c <rcutils_string_map_getn>
 801f202:	4681      	mov	r9, r0
 801f204:	2800      	cmp	r0, #0
 801f206:	d1cf      	bne.n	801f1a8 <rcl_expand_topic_name+0x128>
 801f208:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f20a:	aa18      	add	r2, sp, #96	; 0x60
 801f20c:	2569      	movs	r5, #105	; 0x69
 801f20e:	6018      	str	r0, [r3, #0]
 801f210:	ab16      	add	r3, sp, #88	; 0x58
 801f212:	ca07      	ldmia	r2, {r0, r1, r2}
 801f214:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f218:	4631      	mov	r1, r6
 801f21a:	4620      	mov	r0, r4
 801f21c:	cb0c      	ldmia	r3, {r2, r3}
 801f21e:	f7f6 f8d7 	bl	80153d0 <rcutils_strndup>
 801f222:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f226:	4798      	blx	r3
 801f228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f22a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f22c:	4650      	mov	r0, sl
 801f22e:	4798      	blx	r3
 801f230:	e777      	b.n	801f122 <rcl_expand_topic_name+0xa2>
 801f232:	46b9      	mov	r9, r7
 801f234:	e7b8      	b.n	801f1a8 <rcl_expand_topic_name+0x128>
 801f236:	25ca      	movs	r5, #202	; 0xca
 801f238:	e773      	b.n	801f122 <rcl_expand_topic_name+0xa2>
 801f23a:	9e07      	ldr	r6, [sp, #28]
 801f23c:	4630      	mov	r0, r6
 801f23e:	f7e1 f85f 	bl	8000300 <strlen>
 801f242:	4a3b      	ldr	r2, [pc, #236]	; (801f330 <rcl_expand_topic_name+0x2b0>)
 801f244:	4b3b      	ldr	r3, [pc, #236]	; (801f334 <rcl_expand_topic_name+0x2b4>)
 801f246:	9603      	str	r6, [sp, #12]
 801f248:	2801      	cmp	r0, #1
 801f24a:	bf18      	it	ne
 801f24c:	4613      	movne	r3, r2
 801f24e:	9704      	str	r7, [sp, #16]
 801f250:	9302      	str	r3, [sp, #8]
 801f252:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f254:	9300      	str	r3, [sp, #0]
 801f256:	1c63      	adds	r3, r4, #1
 801f258:	9305      	str	r3, [sp, #20]
 801f25a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f25e:	9301      	str	r3, [sp, #4]
 801f260:	ab16      	add	r3, sp, #88	; 0x58
 801f262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f264:	f7f5 ff58 	bl	8015118 <rcutils_format_string_limit>
 801f268:	4606      	mov	r6, r0
 801f26a:	b350      	cbz	r0, 801f2c2 <rcl_expand_topic_name+0x242>
 801f26c:	f1b9 0f00 	cmp.w	r9, #0
 801f270:	d005      	beq.n	801f27e <rcl_expand_topic_name+0x1fe>
 801f272:	217b      	movs	r1, #123	; 0x7b
 801f274:	46b2      	mov	sl, r6
 801f276:	f001 fd91 	bl	8020d9c <strchr>
 801f27a:	4681      	mov	r9, r0
 801f27c:	e76e      	b.n	801f15c <rcl_expand_topic_name+0xdc>
 801f27e:	7833      	ldrb	r3, [r6, #0]
 801f280:	2b2f      	cmp	r3, #47	; 0x2f
 801f282:	d01b      	beq.n	801f2bc <rcl_expand_topic_name+0x23c>
 801f284:	9c07      	ldr	r4, [sp, #28]
 801f286:	4620      	mov	r0, r4
 801f288:	f7e1 f83a 	bl	8000300 <strlen>
 801f28c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f290:	4a29      	ldr	r2, [pc, #164]	; (801f338 <rcl_expand_topic_name+0x2b8>)
 801f292:	9301      	str	r3, [sp, #4]
 801f294:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f296:	9604      	str	r6, [sp, #16]
 801f298:	9300      	str	r3, [sp, #0]
 801f29a:	4b28      	ldr	r3, [pc, #160]	; (801f33c <rcl_expand_topic_name+0x2bc>)
 801f29c:	9403      	str	r4, [sp, #12]
 801f29e:	2801      	cmp	r0, #1
 801f2a0:	bf18      	it	ne
 801f2a2:	4613      	movne	r3, r2
 801f2a4:	9302      	str	r3, [sp, #8]
 801f2a6:	ab16      	add	r3, sp, #88	; 0x58
 801f2a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f2aa:	f7f5 ff35 	bl	8015118 <rcutils_format_string_limit>
 801f2ae:	4603      	mov	r3, r0
 801f2b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f2b2:	4630      	mov	r0, r6
 801f2b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f2b6:	461e      	mov	r6, r3
 801f2b8:	4790      	blx	r2
 801f2ba:	b116      	cbz	r6, 801f2c2 <rcl_expand_topic_name+0x242>
 801f2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f2be:	601e      	str	r6, [r3, #0]
 801f2c0:	e72f      	b.n	801f122 <rcl_expand_topic_name+0xa2>
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f2c6:	250a      	movs	r5, #10
 801f2c8:	6013      	str	r3, [r2, #0]
 801f2ca:	e72a      	b.n	801f122 <rcl_expand_topic_name+0xa2>
 801f2cc:	4653      	mov	r3, sl
 801f2ce:	4656      	mov	r6, sl
 801f2d0:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	d1d2      	bne.n	801f27e <rcl_expand_topic_name+0x1fe>
 801f2d8:	7823      	ldrb	r3, [r4, #0]
 801f2da:	2b2f      	cmp	r3, #47	; 0x2f
 801f2dc:	d01e      	beq.n	801f31c <rcl_expand_topic_name+0x29c>
 801f2de:	9e07      	ldr	r6, [sp, #28]
 801f2e0:	4630      	mov	r0, r6
 801f2e2:	f7e1 f80d 	bl	8000300 <strlen>
 801f2e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f2e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f2ec:	9603      	str	r6, [sp, #12]
 801f2ee:	9404      	str	r4, [sp, #16]
 801f2f0:	e9cd 2300 	strd	r2, r3, [sp]
 801f2f4:	4a10      	ldr	r2, [pc, #64]	; (801f338 <rcl_expand_topic_name+0x2b8>)
 801f2f6:	4b11      	ldr	r3, [pc, #68]	; (801f33c <rcl_expand_topic_name+0x2bc>)
 801f2f8:	2801      	cmp	r0, #1
 801f2fa:	bf18      	it	ne
 801f2fc:	4613      	movne	r3, r2
 801f2fe:	9302      	str	r3, [sp, #8]
 801f300:	ab16      	add	r3, sp, #88	; 0x58
 801f302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f304:	f7f5 ff08 	bl	8015118 <rcutils_format_string_limit>
 801f308:	4606      	mov	r6, r0
 801f30a:	e7d6      	b.n	801f2ba <rcl_expand_topic_name+0x23a>
 801f30c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801f310:	4650      	mov	r0, sl
 801f312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f314:	6014      	str	r4, [r2, #0]
 801f316:	250a      	movs	r5, #10
 801f318:	4798      	blx	r3
 801f31a:	e702      	b.n	801f122 <rcl_expand_topic_name+0xa2>
 801f31c:	2300      	movs	r3, #0
 801f31e:	461e      	mov	r6, r3
 801f320:	e7cc      	b.n	801f2bc <rcl_expand_topic_name+0x23c>
 801f322:	bf00      	nop
 801f324:	08025ac8 	.word	0x08025ac8
 801f328:	08025ad0 	.word	0x08025ad0
 801f32c:	08025ad8 	.word	0x08025ad8
 801f330:	08025ac0 	.word	0x08025ac0
 801f334:	08025448 	.word	0x08025448
 801f338:	08024e48 	.word	0x08024e48
 801f33c:	08024e40 	.word	0x08024e40

0801f340 <rcl_get_default_topic_name_substitutions>:
 801f340:	2800      	cmp	r0, #0
 801f342:	bf0c      	ite	eq
 801f344:	200b      	moveq	r0, #11
 801f346:	2000      	movne	r0, #0
 801f348:	4770      	bx	lr
 801f34a:	bf00      	nop

0801f34c <rcl_validate_topic_name>:
 801f34c:	2800      	cmp	r0, #0
 801f34e:	f000 8089 	beq.w	801f464 <rcl_validate_topic_name+0x118>
 801f352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f356:	460e      	mov	r6, r1
 801f358:	2900      	cmp	r1, #0
 801f35a:	f000 8085 	beq.w	801f468 <rcl_validate_topic_name+0x11c>
 801f35e:	4604      	mov	r4, r0
 801f360:	4617      	mov	r7, r2
 801f362:	f7e0 ffcd 	bl	8000300 <strlen>
 801f366:	b1b0      	cbz	r0, 801f396 <rcl_validate_topic_name+0x4a>
 801f368:	f894 e000 	ldrb.w	lr, [r4]
 801f36c:	f8df c160 	ldr.w	ip, [pc, #352]	; 801f4d0 <rcl_validate_topic_name+0x184>
 801f370:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801f374:	f013 0304 	ands.w	r3, r3, #4
 801f378:	d139      	bne.n	801f3ee <rcl_validate_topic_name+0xa2>
 801f37a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801f37e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801f382:	2a2f      	cmp	r2, #47	; 0x2f
 801f384:	d10f      	bne.n	801f3a6 <rcl_validate_topic_name+0x5a>
 801f386:	2202      	movs	r2, #2
 801f388:	6032      	str	r2, [r6, #0]
 801f38a:	b3a7      	cbz	r7, 801f3f6 <rcl_validate_topic_name+0xaa>
 801f38c:	4618      	mov	r0, r3
 801f38e:	f8c7 8000 	str.w	r8, [r7]
 801f392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f396:	2301      	movs	r3, #1
 801f398:	6033      	str	r3, [r6, #0]
 801f39a:	b367      	cbz	r7, 801f3f6 <rcl_validate_topic_name+0xaa>
 801f39c:	2300      	movs	r3, #0
 801f39e:	4618      	mov	r0, r3
 801f3a0:	603b      	str	r3, [r7, #0]
 801f3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3a6:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801f3aa:	461d      	mov	r5, r3
 801f3ac:	4619      	mov	r1, r3
 801f3ae:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f3b2:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801f3b6:	f1b9 0f09 	cmp.w	r9, #9
 801f3ba:	d91f      	bls.n	801f3fc <rcl_validate_topic_name+0xb0>
 801f3bc:	f022 0920 	bic.w	r9, r2, #32
 801f3c0:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801f3c4:	f1b9 0f19 	cmp.w	r9, #25
 801f3c8:	d918      	bls.n	801f3fc <rcl_validate_topic_name+0xb0>
 801f3ca:	2a5f      	cmp	r2, #95	; 0x5f
 801f3cc:	d024      	beq.n	801f418 <rcl_validate_topic_name+0xcc>
 801f3ce:	2a2f      	cmp	r2, #47	; 0x2f
 801f3d0:	d058      	beq.n	801f484 <rcl_validate_topic_name+0x138>
 801f3d2:	2a7e      	cmp	r2, #126	; 0x7e
 801f3d4:	d04a      	beq.n	801f46c <rcl_validate_topic_name+0x120>
 801f3d6:	2a7b      	cmp	r2, #123	; 0x7b
 801f3d8:	d05b      	beq.n	801f492 <rcl_validate_topic_name+0x146>
 801f3da:	2a7d      	cmp	r2, #125	; 0x7d
 801f3dc:	d169      	bne.n	801f4b2 <rcl_validate_topic_name+0x166>
 801f3de:	2d00      	cmp	r5, #0
 801f3e0:	d15c      	bne.n	801f49c <rcl_validate_topic_name+0x150>
 801f3e2:	2305      	movs	r3, #5
 801f3e4:	6033      	str	r3, [r6, #0]
 801f3e6:	b137      	cbz	r7, 801f3f6 <rcl_validate_topic_name+0xaa>
 801f3e8:	2000      	movs	r0, #0
 801f3ea:	6039      	str	r1, [r7, #0]
 801f3ec:	e7d9      	b.n	801f3a2 <rcl_validate_topic_name+0x56>
 801f3ee:	2304      	movs	r3, #4
 801f3f0:	6033      	str	r3, [r6, #0]
 801f3f2:	2f00      	cmp	r7, #0
 801f3f4:	d1d2      	bne.n	801f39c <rcl_validate_topic_name+0x50>
 801f3f6:	2000      	movs	r0, #0
 801f3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3fc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f400:	0752      	lsls	r2, r2, #29
 801f402:	d509      	bpl.n	801f418 <rcl_validate_topic_name+0xcc>
 801f404:	2900      	cmp	r1, #0
 801f406:	bf0c      	ite	eq
 801f408:	2200      	moveq	r2, #0
 801f40a:	f005 0201 	andne.w	r2, r5, #1
 801f40e:	b11a      	cbz	r2, 801f418 <rcl_validate_topic_name+0xcc>
 801f410:	1e4d      	subs	r5, r1, #1
 801f412:	429d      	cmp	r5, r3
 801f414:	d031      	beq.n	801f47a <rcl_validate_topic_name+0x12e>
 801f416:	4615      	mov	r5, r2
 801f418:	3101      	adds	r1, #1
 801f41a:	4288      	cmp	r0, r1
 801f41c:	d1c7      	bne.n	801f3ae <rcl_validate_topic_name+0x62>
 801f41e:	2d00      	cmp	r5, #0
 801f420:	d142      	bne.n	801f4a8 <rcl_validate_topic_name+0x15c>
 801f422:	4628      	mov	r0, r5
 801f424:	2301      	movs	r3, #1
 801f426:	e00c      	b.n	801f442 <rcl_validate_topic_name+0xf6>
 801f428:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801f42c:	d101      	bne.n	801f432 <rcl_validate_topic_name+0xe6>
 801f42e:	2801      	cmp	r0, #1
 801f430:	d047      	beq.n	801f4c2 <rcl_validate_topic_name+0x176>
 801f432:	1c5a      	adds	r2, r3, #1
 801f434:	428b      	cmp	r3, r1
 801f436:	f100 0001 	add.w	r0, r0, #1
 801f43a:	f104 0401 	add.w	r4, r4, #1
 801f43e:	4613      	mov	r3, r2
 801f440:	d22e      	bcs.n	801f4a0 <rcl_validate_topic_name+0x154>
 801f442:	4580      	cmp	r8, r0
 801f444:	d0f5      	beq.n	801f432 <rcl_validate_topic_name+0xe6>
 801f446:	7822      	ldrb	r2, [r4, #0]
 801f448:	2a2f      	cmp	r2, #47	; 0x2f
 801f44a:	d1ed      	bne.n	801f428 <rcl_validate_topic_name+0xdc>
 801f44c:	7862      	ldrb	r2, [r4, #1]
 801f44e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f452:	0752      	lsls	r2, r2, #29
 801f454:	d5ed      	bpl.n	801f432 <rcl_validate_topic_name+0xe6>
 801f456:	2204      	movs	r2, #4
 801f458:	6032      	str	r2, [r6, #0]
 801f45a:	2f00      	cmp	r7, #0
 801f45c:	d0cb      	beq.n	801f3f6 <rcl_validate_topic_name+0xaa>
 801f45e:	2000      	movs	r0, #0
 801f460:	603b      	str	r3, [r7, #0]
 801f462:	e79e      	b.n	801f3a2 <rcl_validate_topic_name+0x56>
 801f464:	200b      	movs	r0, #11
 801f466:	4770      	bx	lr
 801f468:	200b      	movs	r0, #11
 801f46a:	e79a      	b.n	801f3a2 <rcl_validate_topic_name+0x56>
 801f46c:	2900      	cmp	r1, #0
 801f46e:	d0d3      	beq.n	801f418 <rcl_validate_topic_name+0xcc>
 801f470:	2306      	movs	r3, #6
 801f472:	6033      	str	r3, [r6, #0]
 801f474:	2f00      	cmp	r7, #0
 801f476:	d1b7      	bne.n	801f3e8 <rcl_validate_topic_name+0x9c>
 801f478:	e7bd      	b.n	801f3f6 <rcl_validate_topic_name+0xaa>
 801f47a:	2309      	movs	r3, #9
 801f47c:	6033      	str	r3, [r6, #0]
 801f47e:	2f00      	cmp	r7, #0
 801f480:	d1b2      	bne.n	801f3e8 <rcl_validate_topic_name+0x9c>
 801f482:	e7b8      	b.n	801f3f6 <rcl_validate_topic_name+0xaa>
 801f484:	2d00      	cmp	r5, #0
 801f486:	d0c7      	beq.n	801f418 <rcl_validate_topic_name+0xcc>
 801f488:	2308      	movs	r3, #8
 801f48a:	6033      	str	r3, [r6, #0]
 801f48c:	2f00      	cmp	r7, #0
 801f48e:	d1ab      	bne.n	801f3e8 <rcl_validate_topic_name+0x9c>
 801f490:	e7b1      	b.n	801f3f6 <rcl_validate_topic_name+0xaa>
 801f492:	2d00      	cmp	r5, #0
 801f494:	d1f8      	bne.n	801f488 <rcl_validate_topic_name+0x13c>
 801f496:	460b      	mov	r3, r1
 801f498:	2501      	movs	r5, #1
 801f49a:	e7bd      	b.n	801f418 <rcl_validate_topic_name+0xcc>
 801f49c:	2500      	movs	r5, #0
 801f49e:	e7bb      	b.n	801f418 <rcl_validate_topic_name+0xcc>
 801f4a0:	2300      	movs	r3, #0
 801f4a2:	4618      	mov	r0, r3
 801f4a4:	6033      	str	r3, [r6, #0]
 801f4a6:	e77c      	b.n	801f3a2 <rcl_validate_topic_name+0x56>
 801f4a8:	2205      	movs	r2, #5
 801f4aa:	6032      	str	r2, [r6, #0]
 801f4ac:	2f00      	cmp	r7, #0
 801f4ae:	d1d6      	bne.n	801f45e <rcl_validate_topic_name+0x112>
 801f4b0:	e7a1      	b.n	801f3f6 <rcl_validate_topic_name+0xaa>
 801f4b2:	2d00      	cmp	r5, #0
 801f4b4:	bf14      	ite	ne
 801f4b6:	2308      	movne	r3, #8
 801f4b8:	2303      	moveq	r3, #3
 801f4ba:	6033      	str	r3, [r6, #0]
 801f4bc:	2f00      	cmp	r7, #0
 801f4be:	d193      	bne.n	801f3e8 <rcl_validate_topic_name+0x9c>
 801f4c0:	e799      	b.n	801f3f6 <rcl_validate_topic_name+0xaa>
 801f4c2:	2307      	movs	r3, #7
 801f4c4:	6033      	str	r3, [r6, #0]
 801f4c6:	2f00      	cmp	r7, #0
 801f4c8:	d095      	beq.n	801f3f6 <rcl_validate_topic_name+0xaa>
 801f4ca:	2301      	movs	r3, #1
 801f4cc:	e7c7      	b.n	801f45e <rcl_validate_topic_name+0x112>
 801f4ce:	bf00      	nop
 801f4d0:	08025b54 	.word	0x08025b54

0801f4d4 <calloc>:
 801f4d4:	4b02      	ldr	r3, [pc, #8]	; (801f4e0 <calloc+0xc>)
 801f4d6:	460a      	mov	r2, r1
 801f4d8:	4601      	mov	r1, r0
 801f4da:	6818      	ldr	r0, [r3, #0]
 801f4dc:	f000 b802 	b.w	801f4e4 <_calloc_r>
 801f4e0:	200009d8 	.word	0x200009d8

0801f4e4 <_calloc_r>:
 801f4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f4e6:	fba1 2402 	umull	r2, r4, r1, r2
 801f4ea:	b94c      	cbnz	r4, 801f500 <_calloc_r+0x1c>
 801f4ec:	4611      	mov	r1, r2
 801f4ee:	9201      	str	r2, [sp, #4]
 801f4f0:	f000 f898 	bl	801f624 <_malloc_r>
 801f4f4:	9a01      	ldr	r2, [sp, #4]
 801f4f6:	4605      	mov	r5, r0
 801f4f8:	b930      	cbnz	r0, 801f508 <_calloc_r+0x24>
 801f4fa:	4628      	mov	r0, r5
 801f4fc:	b003      	add	sp, #12
 801f4fe:	bd30      	pop	{r4, r5, pc}
 801f500:	220c      	movs	r2, #12
 801f502:	6002      	str	r2, [r0, #0]
 801f504:	2500      	movs	r5, #0
 801f506:	e7f8      	b.n	801f4fa <_calloc_r+0x16>
 801f508:	4621      	mov	r1, r4
 801f50a:	f001 fc3f 	bl	8020d8c <memset>
 801f50e:	e7f4      	b.n	801f4fa <_calloc_r+0x16>

0801f510 <exit>:
 801f510:	b508      	push	{r3, lr}
 801f512:	4b06      	ldr	r3, [pc, #24]	; (801f52c <exit+0x1c>)
 801f514:	4604      	mov	r4, r0
 801f516:	b113      	cbz	r3, 801f51e <exit+0xe>
 801f518:	2100      	movs	r1, #0
 801f51a:	f3af 8000 	nop.w
 801f51e:	4b04      	ldr	r3, [pc, #16]	; (801f530 <exit+0x20>)
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	b103      	cbz	r3, 801f526 <exit+0x16>
 801f524:	4798      	blx	r3
 801f526:	4620      	mov	r0, r4
 801f528:	f7e4 fb06 	bl	8003b38 <_exit>
 801f52c:	00000000 	.word	0x00000000
 801f530:	200171a4 	.word	0x200171a4

0801f534 <getenv>:
 801f534:	b507      	push	{r0, r1, r2, lr}
 801f536:	4b04      	ldr	r3, [pc, #16]	; (801f548 <getenv+0x14>)
 801f538:	4601      	mov	r1, r0
 801f53a:	aa01      	add	r2, sp, #4
 801f53c:	6818      	ldr	r0, [r3, #0]
 801f53e:	f000 f805 	bl	801f54c <_findenv_r>
 801f542:	b003      	add	sp, #12
 801f544:	f85d fb04 	ldr.w	pc, [sp], #4
 801f548:	200009d8 	.word	0x200009d8

0801f54c <_findenv_r>:
 801f54c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f550:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801f5c0 <_findenv_r+0x74>
 801f554:	4607      	mov	r7, r0
 801f556:	4689      	mov	r9, r1
 801f558:	4616      	mov	r6, r2
 801f55a:	f002 fb0d 	bl	8021b78 <__env_lock>
 801f55e:	f8da 4000 	ldr.w	r4, [sl]
 801f562:	b134      	cbz	r4, 801f572 <_findenv_r+0x26>
 801f564:	464b      	mov	r3, r9
 801f566:	4698      	mov	r8, r3
 801f568:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f56c:	b13a      	cbz	r2, 801f57e <_findenv_r+0x32>
 801f56e:	2a3d      	cmp	r2, #61	; 0x3d
 801f570:	d1f9      	bne.n	801f566 <_findenv_r+0x1a>
 801f572:	4638      	mov	r0, r7
 801f574:	f002 fb06 	bl	8021b84 <__env_unlock>
 801f578:	2000      	movs	r0, #0
 801f57a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f57e:	eba8 0809 	sub.w	r8, r8, r9
 801f582:	46a3      	mov	fp, r4
 801f584:	f854 0b04 	ldr.w	r0, [r4], #4
 801f588:	2800      	cmp	r0, #0
 801f58a:	d0f2      	beq.n	801f572 <_findenv_r+0x26>
 801f58c:	4642      	mov	r2, r8
 801f58e:	4649      	mov	r1, r9
 801f590:	f001 fc11 	bl	8020db6 <strncmp>
 801f594:	2800      	cmp	r0, #0
 801f596:	d1f4      	bne.n	801f582 <_findenv_r+0x36>
 801f598:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f59c:	eb03 0508 	add.w	r5, r3, r8
 801f5a0:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f5a4:	2b3d      	cmp	r3, #61	; 0x3d
 801f5a6:	d1ec      	bne.n	801f582 <_findenv_r+0x36>
 801f5a8:	f8da 3000 	ldr.w	r3, [sl]
 801f5ac:	ebab 0303 	sub.w	r3, fp, r3
 801f5b0:	109b      	asrs	r3, r3, #2
 801f5b2:	4638      	mov	r0, r7
 801f5b4:	6033      	str	r3, [r6, #0]
 801f5b6:	f002 fae5 	bl	8021b84 <__env_unlock>
 801f5ba:	1c68      	adds	r0, r5, #1
 801f5bc:	e7dd      	b.n	801f57a <_findenv_r+0x2e>
 801f5be:	bf00      	nop
 801f5c0:	20000000 	.word	0x20000000

0801f5c4 <malloc>:
 801f5c4:	4b02      	ldr	r3, [pc, #8]	; (801f5d0 <malloc+0xc>)
 801f5c6:	4601      	mov	r1, r0
 801f5c8:	6818      	ldr	r0, [r3, #0]
 801f5ca:	f000 b82b 	b.w	801f624 <_malloc_r>
 801f5ce:	bf00      	nop
 801f5d0:	200009d8 	.word	0x200009d8

0801f5d4 <free>:
 801f5d4:	4b02      	ldr	r3, [pc, #8]	; (801f5e0 <free+0xc>)
 801f5d6:	4601      	mov	r1, r0
 801f5d8:	6818      	ldr	r0, [r3, #0]
 801f5da:	f002 bad9 	b.w	8021b90 <_free_r>
 801f5de:	bf00      	nop
 801f5e0:	200009d8 	.word	0x200009d8

0801f5e4 <sbrk_aligned>:
 801f5e4:	b570      	push	{r4, r5, r6, lr}
 801f5e6:	4e0e      	ldr	r6, [pc, #56]	; (801f620 <sbrk_aligned+0x3c>)
 801f5e8:	460c      	mov	r4, r1
 801f5ea:	6831      	ldr	r1, [r6, #0]
 801f5ec:	4605      	mov	r5, r0
 801f5ee:	b911      	cbnz	r1, 801f5f6 <sbrk_aligned+0x12>
 801f5f0:	f001 fc42 	bl	8020e78 <_sbrk_r>
 801f5f4:	6030      	str	r0, [r6, #0]
 801f5f6:	4621      	mov	r1, r4
 801f5f8:	4628      	mov	r0, r5
 801f5fa:	f001 fc3d 	bl	8020e78 <_sbrk_r>
 801f5fe:	1c43      	adds	r3, r0, #1
 801f600:	d00a      	beq.n	801f618 <sbrk_aligned+0x34>
 801f602:	1cc4      	adds	r4, r0, #3
 801f604:	f024 0403 	bic.w	r4, r4, #3
 801f608:	42a0      	cmp	r0, r4
 801f60a:	d007      	beq.n	801f61c <sbrk_aligned+0x38>
 801f60c:	1a21      	subs	r1, r4, r0
 801f60e:	4628      	mov	r0, r5
 801f610:	f001 fc32 	bl	8020e78 <_sbrk_r>
 801f614:	3001      	adds	r0, #1
 801f616:	d101      	bne.n	801f61c <sbrk_aligned+0x38>
 801f618:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f61c:	4620      	mov	r0, r4
 801f61e:	bd70      	pop	{r4, r5, r6, pc}
 801f620:	20017068 	.word	0x20017068

0801f624 <_malloc_r>:
 801f624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f628:	1ccd      	adds	r5, r1, #3
 801f62a:	f025 0503 	bic.w	r5, r5, #3
 801f62e:	3508      	adds	r5, #8
 801f630:	2d0c      	cmp	r5, #12
 801f632:	bf38      	it	cc
 801f634:	250c      	movcc	r5, #12
 801f636:	2d00      	cmp	r5, #0
 801f638:	4607      	mov	r7, r0
 801f63a:	db01      	blt.n	801f640 <_malloc_r+0x1c>
 801f63c:	42a9      	cmp	r1, r5
 801f63e:	d905      	bls.n	801f64c <_malloc_r+0x28>
 801f640:	230c      	movs	r3, #12
 801f642:	603b      	str	r3, [r7, #0]
 801f644:	2600      	movs	r6, #0
 801f646:	4630      	mov	r0, r6
 801f648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f64c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f720 <_malloc_r+0xfc>
 801f650:	f000 f868 	bl	801f724 <__malloc_lock>
 801f654:	f8d8 3000 	ldr.w	r3, [r8]
 801f658:	461c      	mov	r4, r3
 801f65a:	bb5c      	cbnz	r4, 801f6b4 <_malloc_r+0x90>
 801f65c:	4629      	mov	r1, r5
 801f65e:	4638      	mov	r0, r7
 801f660:	f7ff ffc0 	bl	801f5e4 <sbrk_aligned>
 801f664:	1c43      	adds	r3, r0, #1
 801f666:	4604      	mov	r4, r0
 801f668:	d155      	bne.n	801f716 <_malloc_r+0xf2>
 801f66a:	f8d8 4000 	ldr.w	r4, [r8]
 801f66e:	4626      	mov	r6, r4
 801f670:	2e00      	cmp	r6, #0
 801f672:	d145      	bne.n	801f700 <_malloc_r+0xdc>
 801f674:	2c00      	cmp	r4, #0
 801f676:	d048      	beq.n	801f70a <_malloc_r+0xe6>
 801f678:	6823      	ldr	r3, [r4, #0]
 801f67a:	4631      	mov	r1, r6
 801f67c:	4638      	mov	r0, r7
 801f67e:	eb04 0903 	add.w	r9, r4, r3
 801f682:	f001 fbf9 	bl	8020e78 <_sbrk_r>
 801f686:	4581      	cmp	r9, r0
 801f688:	d13f      	bne.n	801f70a <_malloc_r+0xe6>
 801f68a:	6821      	ldr	r1, [r4, #0]
 801f68c:	1a6d      	subs	r5, r5, r1
 801f68e:	4629      	mov	r1, r5
 801f690:	4638      	mov	r0, r7
 801f692:	f7ff ffa7 	bl	801f5e4 <sbrk_aligned>
 801f696:	3001      	adds	r0, #1
 801f698:	d037      	beq.n	801f70a <_malloc_r+0xe6>
 801f69a:	6823      	ldr	r3, [r4, #0]
 801f69c:	442b      	add	r3, r5
 801f69e:	6023      	str	r3, [r4, #0]
 801f6a0:	f8d8 3000 	ldr.w	r3, [r8]
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d038      	beq.n	801f71a <_malloc_r+0xf6>
 801f6a8:	685a      	ldr	r2, [r3, #4]
 801f6aa:	42a2      	cmp	r2, r4
 801f6ac:	d12b      	bne.n	801f706 <_malloc_r+0xe2>
 801f6ae:	2200      	movs	r2, #0
 801f6b0:	605a      	str	r2, [r3, #4]
 801f6b2:	e00f      	b.n	801f6d4 <_malloc_r+0xb0>
 801f6b4:	6822      	ldr	r2, [r4, #0]
 801f6b6:	1b52      	subs	r2, r2, r5
 801f6b8:	d41f      	bmi.n	801f6fa <_malloc_r+0xd6>
 801f6ba:	2a0b      	cmp	r2, #11
 801f6bc:	d917      	bls.n	801f6ee <_malloc_r+0xca>
 801f6be:	1961      	adds	r1, r4, r5
 801f6c0:	42a3      	cmp	r3, r4
 801f6c2:	6025      	str	r5, [r4, #0]
 801f6c4:	bf18      	it	ne
 801f6c6:	6059      	strne	r1, [r3, #4]
 801f6c8:	6863      	ldr	r3, [r4, #4]
 801f6ca:	bf08      	it	eq
 801f6cc:	f8c8 1000 	streq.w	r1, [r8]
 801f6d0:	5162      	str	r2, [r4, r5]
 801f6d2:	604b      	str	r3, [r1, #4]
 801f6d4:	4638      	mov	r0, r7
 801f6d6:	f104 060b 	add.w	r6, r4, #11
 801f6da:	f000 f829 	bl	801f730 <__malloc_unlock>
 801f6de:	f026 0607 	bic.w	r6, r6, #7
 801f6e2:	1d23      	adds	r3, r4, #4
 801f6e4:	1af2      	subs	r2, r6, r3
 801f6e6:	d0ae      	beq.n	801f646 <_malloc_r+0x22>
 801f6e8:	1b9b      	subs	r3, r3, r6
 801f6ea:	50a3      	str	r3, [r4, r2]
 801f6ec:	e7ab      	b.n	801f646 <_malloc_r+0x22>
 801f6ee:	42a3      	cmp	r3, r4
 801f6f0:	6862      	ldr	r2, [r4, #4]
 801f6f2:	d1dd      	bne.n	801f6b0 <_malloc_r+0x8c>
 801f6f4:	f8c8 2000 	str.w	r2, [r8]
 801f6f8:	e7ec      	b.n	801f6d4 <_malloc_r+0xb0>
 801f6fa:	4623      	mov	r3, r4
 801f6fc:	6864      	ldr	r4, [r4, #4]
 801f6fe:	e7ac      	b.n	801f65a <_malloc_r+0x36>
 801f700:	4634      	mov	r4, r6
 801f702:	6876      	ldr	r6, [r6, #4]
 801f704:	e7b4      	b.n	801f670 <_malloc_r+0x4c>
 801f706:	4613      	mov	r3, r2
 801f708:	e7cc      	b.n	801f6a4 <_malloc_r+0x80>
 801f70a:	230c      	movs	r3, #12
 801f70c:	603b      	str	r3, [r7, #0]
 801f70e:	4638      	mov	r0, r7
 801f710:	f000 f80e 	bl	801f730 <__malloc_unlock>
 801f714:	e797      	b.n	801f646 <_malloc_r+0x22>
 801f716:	6025      	str	r5, [r4, #0]
 801f718:	e7dc      	b.n	801f6d4 <_malloc_r+0xb0>
 801f71a:	605b      	str	r3, [r3, #4]
 801f71c:	deff      	udf	#255	; 0xff
 801f71e:	bf00      	nop
 801f720:	20017064 	.word	0x20017064

0801f724 <__malloc_lock>:
 801f724:	4801      	ldr	r0, [pc, #4]	; (801f72c <__malloc_lock+0x8>)
 801f726:	f001 bbf4 	b.w	8020f12 <__retarget_lock_acquire_recursive>
 801f72a:	bf00      	nop
 801f72c:	200171ad 	.word	0x200171ad

0801f730 <__malloc_unlock>:
 801f730:	4801      	ldr	r0, [pc, #4]	; (801f738 <__malloc_unlock+0x8>)
 801f732:	f001 bbef 	b.w	8020f14 <__retarget_lock_release_recursive>
 801f736:	bf00      	nop
 801f738:	200171ad 	.word	0x200171ad

0801f73c <srand>:
 801f73c:	b538      	push	{r3, r4, r5, lr}
 801f73e:	4b10      	ldr	r3, [pc, #64]	; (801f780 <srand+0x44>)
 801f740:	681d      	ldr	r5, [r3, #0]
 801f742:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f744:	4604      	mov	r4, r0
 801f746:	b9b3      	cbnz	r3, 801f776 <srand+0x3a>
 801f748:	2018      	movs	r0, #24
 801f74a:	f7ff ff3b 	bl	801f5c4 <malloc>
 801f74e:	4602      	mov	r2, r0
 801f750:	6328      	str	r0, [r5, #48]	; 0x30
 801f752:	b920      	cbnz	r0, 801f75e <srand+0x22>
 801f754:	4b0b      	ldr	r3, [pc, #44]	; (801f784 <srand+0x48>)
 801f756:	480c      	ldr	r0, [pc, #48]	; (801f788 <srand+0x4c>)
 801f758:	2146      	movs	r1, #70	; 0x46
 801f75a:	f001 fbf9 	bl	8020f50 <__assert_func>
 801f75e:	490b      	ldr	r1, [pc, #44]	; (801f78c <srand+0x50>)
 801f760:	4b0b      	ldr	r3, [pc, #44]	; (801f790 <srand+0x54>)
 801f762:	e9c0 1300 	strd	r1, r3, [r0]
 801f766:	4b0b      	ldr	r3, [pc, #44]	; (801f794 <srand+0x58>)
 801f768:	6083      	str	r3, [r0, #8]
 801f76a:	230b      	movs	r3, #11
 801f76c:	8183      	strh	r3, [r0, #12]
 801f76e:	2100      	movs	r1, #0
 801f770:	2001      	movs	r0, #1
 801f772:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f776:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f778:	2200      	movs	r2, #0
 801f77a:	611c      	str	r4, [r3, #16]
 801f77c:	615a      	str	r2, [r3, #20]
 801f77e:	bd38      	pop	{r3, r4, r5, pc}
 801f780:	200009d8 	.word	0x200009d8
 801f784:	08025ae4 	.word	0x08025ae4
 801f788:	08025afb 	.word	0x08025afb
 801f78c:	abcd330e 	.word	0xabcd330e
 801f790:	e66d1234 	.word	0xe66d1234
 801f794:	0005deec 	.word	0x0005deec

0801f798 <rand>:
 801f798:	4b16      	ldr	r3, [pc, #88]	; (801f7f4 <rand+0x5c>)
 801f79a:	b510      	push	{r4, lr}
 801f79c:	681c      	ldr	r4, [r3, #0]
 801f79e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f7a0:	b9b3      	cbnz	r3, 801f7d0 <rand+0x38>
 801f7a2:	2018      	movs	r0, #24
 801f7a4:	f7ff ff0e 	bl	801f5c4 <malloc>
 801f7a8:	4602      	mov	r2, r0
 801f7aa:	6320      	str	r0, [r4, #48]	; 0x30
 801f7ac:	b920      	cbnz	r0, 801f7b8 <rand+0x20>
 801f7ae:	4b12      	ldr	r3, [pc, #72]	; (801f7f8 <rand+0x60>)
 801f7b0:	4812      	ldr	r0, [pc, #72]	; (801f7fc <rand+0x64>)
 801f7b2:	2152      	movs	r1, #82	; 0x52
 801f7b4:	f001 fbcc 	bl	8020f50 <__assert_func>
 801f7b8:	4911      	ldr	r1, [pc, #68]	; (801f800 <rand+0x68>)
 801f7ba:	4b12      	ldr	r3, [pc, #72]	; (801f804 <rand+0x6c>)
 801f7bc:	e9c0 1300 	strd	r1, r3, [r0]
 801f7c0:	4b11      	ldr	r3, [pc, #68]	; (801f808 <rand+0x70>)
 801f7c2:	6083      	str	r3, [r0, #8]
 801f7c4:	230b      	movs	r3, #11
 801f7c6:	8183      	strh	r3, [r0, #12]
 801f7c8:	2100      	movs	r1, #0
 801f7ca:	2001      	movs	r0, #1
 801f7cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f7d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f7d2:	480e      	ldr	r0, [pc, #56]	; (801f80c <rand+0x74>)
 801f7d4:	690b      	ldr	r3, [r1, #16]
 801f7d6:	694c      	ldr	r4, [r1, #20]
 801f7d8:	4a0d      	ldr	r2, [pc, #52]	; (801f810 <rand+0x78>)
 801f7da:	4358      	muls	r0, r3
 801f7dc:	fb02 0004 	mla	r0, r2, r4, r0
 801f7e0:	fba3 3202 	umull	r3, r2, r3, r2
 801f7e4:	3301      	adds	r3, #1
 801f7e6:	eb40 0002 	adc.w	r0, r0, r2
 801f7ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f7ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f7f2:	bd10      	pop	{r4, pc}
 801f7f4:	200009d8 	.word	0x200009d8
 801f7f8:	08025ae4 	.word	0x08025ae4
 801f7fc:	08025afb 	.word	0x08025afb
 801f800:	abcd330e 	.word	0xabcd330e
 801f804:	e66d1234 	.word	0xe66d1234
 801f808:	0005deec 	.word	0x0005deec
 801f80c:	5851f42d 	.word	0x5851f42d
 801f810:	4c957f2d 	.word	0x4c957f2d

0801f814 <realloc>:
 801f814:	4b02      	ldr	r3, [pc, #8]	; (801f820 <realloc+0xc>)
 801f816:	460a      	mov	r2, r1
 801f818:	4601      	mov	r1, r0
 801f81a:	6818      	ldr	r0, [r3, #0]
 801f81c:	f000 b802 	b.w	801f824 <_realloc_r>
 801f820:	200009d8 	.word	0x200009d8

0801f824 <_realloc_r>:
 801f824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f828:	4680      	mov	r8, r0
 801f82a:	4614      	mov	r4, r2
 801f82c:	460e      	mov	r6, r1
 801f82e:	b921      	cbnz	r1, 801f83a <_realloc_r+0x16>
 801f830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f834:	4611      	mov	r1, r2
 801f836:	f7ff bef5 	b.w	801f624 <_malloc_r>
 801f83a:	b92a      	cbnz	r2, 801f848 <_realloc_r+0x24>
 801f83c:	f002 f9a8 	bl	8021b90 <_free_r>
 801f840:	4625      	mov	r5, r4
 801f842:	4628      	mov	r0, r5
 801f844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f848:	f002 fe98 	bl	802257c <_malloc_usable_size_r>
 801f84c:	4284      	cmp	r4, r0
 801f84e:	4607      	mov	r7, r0
 801f850:	d802      	bhi.n	801f858 <_realloc_r+0x34>
 801f852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f856:	d812      	bhi.n	801f87e <_realloc_r+0x5a>
 801f858:	4621      	mov	r1, r4
 801f85a:	4640      	mov	r0, r8
 801f85c:	f7ff fee2 	bl	801f624 <_malloc_r>
 801f860:	4605      	mov	r5, r0
 801f862:	2800      	cmp	r0, #0
 801f864:	d0ed      	beq.n	801f842 <_realloc_r+0x1e>
 801f866:	42bc      	cmp	r4, r7
 801f868:	4622      	mov	r2, r4
 801f86a:	4631      	mov	r1, r6
 801f86c:	bf28      	it	cs
 801f86e:	463a      	movcs	r2, r7
 801f870:	f001 fb59 	bl	8020f26 <memcpy>
 801f874:	4631      	mov	r1, r6
 801f876:	4640      	mov	r0, r8
 801f878:	f002 f98a 	bl	8021b90 <_free_r>
 801f87c:	e7e1      	b.n	801f842 <_realloc_r+0x1e>
 801f87e:	4635      	mov	r5, r6
 801f880:	e7df      	b.n	801f842 <_realloc_r+0x1e>
	...

0801f884 <_strtoul_l.constprop.0>:
 801f884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f888:	4f36      	ldr	r7, [pc, #216]	; (801f964 <_strtoul_l.constprop.0+0xe0>)
 801f88a:	4686      	mov	lr, r0
 801f88c:	460d      	mov	r5, r1
 801f88e:	4628      	mov	r0, r5
 801f890:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f894:	5d3e      	ldrb	r6, [r7, r4]
 801f896:	f016 0608 	ands.w	r6, r6, #8
 801f89a:	d1f8      	bne.n	801f88e <_strtoul_l.constprop.0+0xa>
 801f89c:	2c2d      	cmp	r4, #45	; 0x2d
 801f89e:	d130      	bne.n	801f902 <_strtoul_l.constprop.0+0x7e>
 801f8a0:	782c      	ldrb	r4, [r5, #0]
 801f8a2:	2601      	movs	r6, #1
 801f8a4:	1c85      	adds	r5, r0, #2
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	d057      	beq.n	801f95a <_strtoul_l.constprop.0+0xd6>
 801f8aa:	2b10      	cmp	r3, #16
 801f8ac:	d109      	bne.n	801f8c2 <_strtoul_l.constprop.0+0x3e>
 801f8ae:	2c30      	cmp	r4, #48	; 0x30
 801f8b0:	d107      	bne.n	801f8c2 <_strtoul_l.constprop.0+0x3e>
 801f8b2:	7828      	ldrb	r0, [r5, #0]
 801f8b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f8b8:	2858      	cmp	r0, #88	; 0x58
 801f8ba:	d149      	bne.n	801f950 <_strtoul_l.constprop.0+0xcc>
 801f8bc:	786c      	ldrb	r4, [r5, #1]
 801f8be:	2310      	movs	r3, #16
 801f8c0:	3502      	adds	r5, #2
 801f8c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801f8c6:	2700      	movs	r7, #0
 801f8c8:	fbb8 f8f3 	udiv	r8, r8, r3
 801f8cc:	fb03 f908 	mul.w	r9, r3, r8
 801f8d0:	ea6f 0909 	mvn.w	r9, r9
 801f8d4:	4638      	mov	r0, r7
 801f8d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f8da:	f1bc 0f09 	cmp.w	ip, #9
 801f8de:	d815      	bhi.n	801f90c <_strtoul_l.constprop.0+0x88>
 801f8e0:	4664      	mov	r4, ip
 801f8e2:	42a3      	cmp	r3, r4
 801f8e4:	dd23      	ble.n	801f92e <_strtoul_l.constprop.0+0xaa>
 801f8e6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801f8ea:	d007      	beq.n	801f8fc <_strtoul_l.constprop.0+0x78>
 801f8ec:	4580      	cmp	r8, r0
 801f8ee:	d31b      	bcc.n	801f928 <_strtoul_l.constprop.0+0xa4>
 801f8f0:	d101      	bne.n	801f8f6 <_strtoul_l.constprop.0+0x72>
 801f8f2:	45a1      	cmp	r9, r4
 801f8f4:	db18      	blt.n	801f928 <_strtoul_l.constprop.0+0xa4>
 801f8f6:	fb00 4003 	mla	r0, r0, r3, r4
 801f8fa:	2701      	movs	r7, #1
 801f8fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f900:	e7e9      	b.n	801f8d6 <_strtoul_l.constprop.0+0x52>
 801f902:	2c2b      	cmp	r4, #43	; 0x2b
 801f904:	bf04      	itt	eq
 801f906:	782c      	ldrbeq	r4, [r5, #0]
 801f908:	1c85      	addeq	r5, r0, #2
 801f90a:	e7cc      	b.n	801f8a6 <_strtoul_l.constprop.0+0x22>
 801f90c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f910:	f1bc 0f19 	cmp.w	ip, #25
 801f914:	d801      	bhi.n	801f91a <_strtoul_l.constprop.0+0x96>
 801f916:	3c37      	subs	r4, #55	; 0x37
 801f918:	e7e3      	b.n	801f8e2 <_strtoul_l.constprop.0+0x5e>
 801f91a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f91e:	f1bc 0f19 	cmp.w	ip, #25
 801f922:	d804      	bhi.n	801f92e <_strtoul_l.constprop.0+0xaa>
 801f924:	3c57      	subs	r4, #87	; 0x57
 801f926:	e7dc      	b.n	801f8e2 <_strtoul_l.constprop.0+0x5e>
 801f928:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801f92c:	e7e6      	b.n	801f8fc <_strtoul_l.constprop.0+0x78>
 801f92e:	1c7b      	adds	r3, r7, #1
 801f930:	d106      	bne.n	801f940 <_strtoul_l.constprop.0+0xbc>
 801f932:	2322      	movs	r3, #34	; 0x22
 801f934:	f8ce 3000 	str.w	r3, [lr]
 801f938:	4638      	mov	r0, r7
 801f93a:	b932      	cbnz	r2, 801f94a <_strtoul_l.constprop.0+0xc6>
 801f93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f940:	b106      	cbz	r6, 801f944 <_strtoul_l.constprop.0+0xc0>
 801f942:	4240      	negs	r0, r0
 801f944:	2a00      	cmp	r2, #0
 801f946:	d0f9      	beq.n	801f93c <_strtoul_l.constprop.0+0xb8>
 801f948:	b107      	cbz	r7, 801f94c <_strtoul_l.constprop.0+0xc8>
 801f94a:	1e69      	subs	r1, r5, #1
 801f94c:	6011      	str	r1, [r2, #0]
 801f94e:	e7f5      	b.n	801f93c <_strtoul_l.constprop.0+0xb8>
 801f950:	2430      	movs	r4, #48	; 0x30
 801f952:	2b00      	cmp	r3, #0
 801f954:	d1b5      	bne.n	801f8c2 <_strtoul_l.constprop.0+0x3e>
 801f956:	2308      	movs	r3, #8
 801f958:	e7b3      	b.n	801f8c2 <_strtoul_l.constprop.0+0x3e>
 801f95a:	2c30      	cmp	r4, #48	; 0x30
 801f95c:	d0a9      	beq.n	801f8b2 <_strtoul_l.constprop.0+0x2e>
 801f95e:	230a      	movs	r3, #10
 801f960:	e7af      	b.n	801f8c2 <_strtoul_l.constprop.0+0x3e>
 801f962:	bf00      	nop
 801f964:	08025b54 	.word	0x08025b54

0801f968 <strtoul>:
 801f968:	4613      	mov	r3, r2
 801f96a:	460a      	mov	r2, r1
 801f96c:	4601      	mov	r1, r0
 801f96e:	4802      	ldr	r0, [pc, #8]	; (801f978 <strtoul+0x10>)
 801f970:	6800      	ldr	r0, [r0, #0]
 801f972:	f7ff bf87 	b.w	801f884 <_strtoul_l.constprop.0>
 801f976:	bf00      	nop
 801f978:	200009d8 	.word	0x200009d8

0801f97c <__cvt>:
 801f97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f97e:	ed2d 8b02 	vpush	{d8}
 801f982:	eeb0 8b40 	vmov.f64	d8, d0
 801f986:	b085      	sub	sp, #20
 801f988:	4617      	mov	r7, r2
 801f98a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f98c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f98e:	ee18 2a90 	vmov	r2, s17
 801f992:	f025 0520 	bic.w	r5, r5, #32
 801f996:	2a00      	cmp	r2, #0
 801f998:	bfb6      	itet	lt
 801f99a:	222d      	movlt	r2, #45	; 0x2d
 801f99c:	2200      	movge	r2, #0
 801f99e:	eeb1 8b40 	vneglt.f64	d8, d0
 801f9a2:	2d46      	cmp	r5, #70	; 0x46
 801f9a4:	460c      	mov	r4, r1
 801f9a6:	701a      	strb	r2, [r3, #0]
 801f9a8:	d004      	beq.n	801f9b4 <__cvt+0x38>
 801f9aa:	2d45      	cmp	r5, #69	; 0x45
 801f9ac:	d100      	bne.n	801f9b0 <__cvt+0x34>
 801f9ae:	3401      	adds	r4, #1
 801f9b0:	2102      	movs	r1, #2
 801f9b2:	e000      	b.n	801f9b6 <__cvt+0x3a>
 801f9b4:	2103      	movs	r1, #3
 801f9b6:	ab03      	add	r3, sp, #12
 801f9b8:	9301      	str	r3, [sp, #4]
 801f9ba:	ab02      	add	r3, sp, #8
 801f9bc:	9300      	str	r3, [sp, #0]
 801f9be:	4622      	mov	r2, r4
 801f9c0:	4633      	mov	r3, r6
 801f9c2:	eeb0 0b48 	vmov.f64	d0, d8
 801f9c6:	f001 fb6b 	bl	80210a0 <_dtoa_r>
 801f9ca:	2d47      	cmp	r5, #71	; 0x47
 801f9cc:	d101      	bne.n	801f9d2 <__cvt+0x56>
 801f9ce:	07fb      	lsls	r3, r7, #31
 801f9d0:	d51a      	bpl.n	801fa08 <__cvt+0x8c>
 801f9d2:	2d46      	cmp	r5, #70	; 0x46
 801f9d4:	eb00 0204 	add.w	r2, r0, r4
 801f9d8:	d10c      	bne.n	801f9f4 <__cvt+0x78>
 801f9da:	7803      	ldrb	r3, [r0, #0]
 801f9dc:	2b30      	cmp	r3, #48	; 0x30
 801f9de:	d107      	bne.n	801f9f0 <__cvt+0x74>
 801f9e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9e8:	bf1c      	itt	ne
 801f9ea:	f1c4 0401 	rsbne	r4, r4, #1
 801f9ee:	6034      	strne	r4, [r6, #0]
 801f9f0:	6833      	ldr	r3, [r6, #0]
 801f9f2:	441a      	add	r2, r3
 801f9f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9fc:	bf08      	it	eq
 801f9fe:	9203      	streq	r2, [sp, #12]
 801fa00:	2130      	movs	r1, #48	; 0x30
 801fa02:	9b03      	ldr	r3, [sp, #12]
 801fa04:	4293      	cmp	r3, r2
 801fa06:	d307      	bcc.n	801fa18 <__cvt+0x9c>
 801fa08:	9b03      	ldr	r3, [sp, #12]
 801fa0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fa0c:	1a1b      	subs	r3, r3, r0
 801fa0e:	6013      	str	r3, [r2, #0]
 801fa10:	b005      	add	sp, #20
 801fa12:	ecbd 8b02 	vpop	{d8}
 801fa16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa18:	1c5c      	adds	r4, r3, #1
 801fa1a:	9403      	str	r4, [sp, #12]
 801fa1c:	7019      	strb	r1, [r3, #0]
 801fa1e:	e7f0      	b.n	801fa02 <__cvt+0x86>

0801fa20 <__exponent>:
 801fa20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fa22:	4603      	mov	r3, r0
 801fa24:	2900      	cmp	r1, #0
 801fa26:	bfb8      	it	lt
 801fa28:	4249      	neglt	r1, r1
 801fa2a:	f803 2b02 	strb.w	r2, [r3], #2
 801fa2e:	bfb4      	ite	lt
 801fa30:	222d      	movlt	r2, #45	; 0x2d
 801fa32:	222b      	movge	r2, #43	; 0x2b
 801fa34:	2909      	cmp	r1, #9
 801fa36:	7042      	strb	r2, [r0, #1]
 801fa38:	dd2a      	ble.n	801fa90 <__exponent+0x70>
 801fa3a:	f10d 0207 	add.w	r2, sp, #7
 801fa3e:	4617      	mov	r7, r2
 801fa40:	260a      	movs	r6, #10
 801fa42:	4694      	mov	ip, r2
 801fa44:	fb91 f5f6 	sdiv	r5, r1, r6
 801fa48:	fb06 1415 	mls	r4, r6, r5, r1
 801fa4c:	3430      	adds	r4, #48	; 0x30
 801fa4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801fa52:	460c      	mov	r4, r1
 801fa54:	2c63      	cmp	r4, #99	; 0x63
 801fa56:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801fa5a:	4629      	mov	r1, r5
 801fa5c:	dcf1      	bgt.n	801fa42 <__exponent+0x22>
 801fa5e:	3130      	adds	r1, #48	; 0x30
 801fa60:	f1ac 0402 	sub.w	r4, ip, #2
 801fa64:	f802 1c01 	strb.w	r1, [r2, #-1]
 801fa68:	1c41      	adds	r1, r0, #1
 801fa6a:	4622      	mov	r2, r4
 801fa6c:	42ba      	cmp	r2, r7
 801fa6e:	d30a      	bcc.n	801fa86 <__exponent+0x66>
 801fa70:	f10d 0209 	add.w	r2, sp, #9
 801fa74:	eba2 020c 	sub.w	r2, r2, ip
 801fa78:	42bc      	cmp	r4, r7
 801fa7a:	bf88      	it	hi
 801fa7c:	2200      	movhi	r2, #0
 801fa7e:	4413      	add	r3, r2
 801fa80:	1a18      	subs	r0, r3, r0
 801fa82:	b003      	add	sp, #12
 801fa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa86:	f812 5b01 	ldrb.w	r5, [r2], #1
 801fa8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801fa8e:	e7ed      	b.n	801fa6c <__exponent+0x4c>
 801fa90:	2330      	movs	r3, #48	; 0x30
 801fa92:	3130      	adds	r1, #48	; 0x30
 801fa94:	7083      	strb	r3, [r0, #2]
 801fa96:	70c1      	strb	r1, [r0, #3]
 801fa98:	1d03      	adds	r3, r0, #4
 801fa9a:	e7f1      	b.n	801fa80 <__exponent+0x60>
 801fa9c:	0000      	movs	r0, r0
	...

0801faa0 <_printf_float>:
 801faa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faa4:	b08b      	sub	sp, #44	; 0x2c
 801faa6:	460c      	mov	r4, r1
 801faa8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801faac:	4616      	mov	r6, r2
 801faae:	461f      	mov	r7, r3
 801fab0:	4605      	mov	r5, r0
 801fab2:	f001 f9a9 	bl	8020e08 <_localeconv_r>
 801fab6:	f8d0 b000 	ldr.w	fp, [r0]
 801faba:	4658      	mov	r0, fp
 801fabc:	f7e0 fc20 	bl	8000300 <strlen>
 801fac0:	2300      	movs	r3, #0
 801fac2:	9308      	str	r3, [sp, #32]
 801fac4:	f8d8 3000 	ldr.w	r3, [r8]
 801fac8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801facc:	6822      	ldr	r2, [r4, #0]
 801face:	3307      	adds	r3, #7
 801fad0:	f023 0307 	bic.w	r3, r3, #7
 801fad4:	f103 0108 	add.w	r1, r3, #8
 801fad8:	f8c8 1000 	str.w	r1, [r8]
 801fadc:	ed93 0b00 	vldr	d0, [r3]
 801fae0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801fd40 <_printf_float+0x2a0>
 801fae4:	eeb0 7bc0 	vabs.f64	d7, d0
 801fae8:	eeb4 7b46 	vcmp.f64	d7, d6
 801faec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801faf0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801faf4:	4682      	mov	sl, r0
 801faf6:	dd24      	ble.n	801fb42 <_printf_float+0xa2>
 801faf8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb00:	d502      	bpl.n	801fb08 <_printf_float+0x68>
 801fb02:	232d      	movs	r3, #45	; 0x2d
 801fb04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fb08:	498f      	ldr	r1, [pc, #572]	; (801fd48 <_printf_float+0x2a8>)
 801fb0a:	4b90      	ldr	r3, [pc, #576]	; (801fd4c <_printf_float+0x2ac>)
 801fb0c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801fb10:	bf94      	ite	ls
 801fb12:	4688      	movls	r8, r1
 801fb14:	4698      	movhi	r8, r3
 801fb16:	2303      	movs	r3, #3
 801fb18:	6123      	str	r3, [r4, #16]
 801fb1a:	f022 0204 	bic.w	r2, r2, #4
 801fb1e:	2300      	movs	r3, #0
 801fb20:	6022      	str	r2, [r4, #0]
 801fb22:	9304      	str	r3, [sp, #16]
 801fb24:	9700      	str	r7, [sp, #0]
 801fb26:	4633      	mov	r3, r6
 801fb28:	aa09      	add	r2, sp, #36	; 0x24
 801fb2a:	4621      	mov	r1, r4
 801fb2c:	4628      	mov	r0, r5
 801fb2e:	f000 f9d1 	bl	801fed4 <_printf_common>
 801fb32:	3001      	adds	r0, #1
 801fb34:	f040 808a 	bne.w	801fc4c <_printf_float+0x1ac>
 801fb38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb3c:	b00b      	add	sp, #44	; 0x2c
 801fb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb42:	eeb4 0b40 	vcmp.f64	d0, d0
 801fb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb4a:	d709      	bvc.n	801fb60 <_printf_float+0xc0>
 801fb4c:	ee10 3a90 	vmov	r3, s1
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	bfbc      	itt	lt
 801fb54:	232d      	movlt	r3, #45	; 0x2d
 801fb56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801fb5a:	497d      	ldr	r1, [pc, #500]	; (801fd50 <_printf_float+0x2b0>)
 801fb5c:	4b7d      	ldr	r3, [pc, #500]	; (801fd54 <_printf_float+0x2b4>)
 801fb5e:	e7d5      	b.n	801fb0c <_printf_float+0x6c>
 801fb60:	6863      	ldr	r3, [r4, #4]
 801fb62:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801fb66:	9104      	str	r1, [sp, #16]
 801fb68:	1c59      	adds	r1, r3, #1
 801fb6a:	d13c      	bne.n	801fbe6 <_printf_float+0x146>
 801fb6c:	2306      	movs	r3, #6
 801fb6e:	6063      	str	r3, [r4, #4]
 801fb70:	2300      	movs	r3, #0
 801fb72:	9303      	str	r3, [sp, #12]
 801fb74:	ab08      	add	r3, sp, #32
 801fb76:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801fb7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fb7e:	ab07      	add	r3, sp, #28
 801fb80:	6861      	ldr	r1, [r4, #4]
 801fb82:	9300      	str	r3, [sp, #0]
 801fb84:	6022      	str	r2, [r4, #0]
 801fb86:	f10d 031b 	add.w	r3, sp, #27
 801fb8a:	4628      	mov	r0, r5
 801fb8c:	f7ff fef6 	bl	801f97c <__cvt>
 801fb90:	9b04      	ldr	r3, [sp, #16]
 801fb92:	9907      	ldr	r1, [sp, #28]
 801fb94:	2b47      	cmp	r3, #71	; 0x47
 801fb96:	4680      	mov	r8, r0
 801fb98:	d108      	bne.n	801fbac <_printf_float+0x10c>
 801fb9a:	1cc8      	adds	r0, r1, #3
 801fb9c:	db02      	blt.n	801fba4 <_printf_float+0x104>
 801fb9e:	6863      	ldr	r3, [r4, #4]
 801fba0:	4299      	cmp	r1, r3
 801fba2:	dd41      	ble.n	801fc28 <_printf_float+0x188>
 801fba4:	f1a9 0902 	sub.w	r9, r9, #2
 801fba8:	fa5f f989 	uxtb.w	r9, r9
 801fbac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fbb0:	d820      	bhi.n	801fbf4 <_printf_float+0x154>
 801fbb2:	3901      	subs	r1, #1
 801fbb4:	464a      	mov	r2, r9
 801fbb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801fbba:	9107      	str	r1, [sp, #28]
 801fbbc:	f7ff ff30 	bl	801fa20 <__exponent>
 801fbc0:	9a08      	ldr	r2, [sp, #32]
 801fbc2:	9004      	str	r0, [sp, #16]
 801fbc4:	1813      	adds	r3, r2, r0
 801fbc6:	2a01      	cmp	r2, #1
 801fbc8:	6123      	str	r3, [r4, #16]
 801fbca:	dc02      	bgt.n	801fbd2 <_printf_float+0x132>
 801fbcc:	6822      	ldr	r2, [r4, #0]
 801fbce:	07d2      	lsls	r2, r2, #31
 801fbd0:	d501      	bpl.n	801fbd6 <_printf_float+0x136>
 801fbd2:	3301      	adds	r3, #1
 801fbd4:	6123      	str	r3, [r4, #16]
 801fbd6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d0a2      	beq.n	801fb24 <_printf_float+0x84>
 801fbde:	232d      	movs	r3, #45	; 0x2d
 801fbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fbe4:	e79e      	b.n	801fb24 <_printf_float+0x84>
 801fbe6:	9904      	ldr	r1, [sp, #16]
 801fbe8:	2947      	cmp	r1, #71	; 0x47
 801fbea:	d1c1      	bne.n	801fb70 <_printf_float+0xd0>
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d1bf      	bne.n	801fb70 <_printf_float+0xd0>
 801fbf0:	2301      	movs	r3, #1
 801fbf2:	e7bc      	b.n	801fb6e <_printf_float+0xce>
 801fbf4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801fbf8:	d118      	bne.n	801fc2c <_printf_float+0x18c>
 801fbfa:	2900      	cmp	r1, #0
 801fbfc:	6863      	ldr	r3, [r4, #4]
 801fbfe:	dd0b      	ble.n	801fc18 <_printf_float+0x178>
 801fc00:	6121      	str	r1, [r4, #16]
 801fc02:	b913      	cbnz	r3, 801fc0a <_printf_float+0x16a>
 801fc04:	6822      	ldr	r2, [r4, #0]
 801fc06:	07d0      	lsls	r0, r2, #31
 801fc08:	d502      	bpl.n	801fc10 <_printf_float+0x170>
 801fc0a:	3301      	adds	r3, #1
 801fc0c:	440b      	add	r3, r1
 801fc0e:	6123      	str	r3, [r4, #16]
 801fc10:	2300      	movs	r3, #0
 801fc12:	65a1      	str	r1, [r4, #88]	; 0x58
 801fc14:	9304      	str	r3, [sp, #16]
 801fc16:	e7de      	b.n	801fbd6 <_printf_float+0x136>
 801fc18:	b913      	cbnz	r3, 801fc20 <_printf_float+0x180>
 801fc1a:	6822      	ldr	r2, [r4, #0]
 801fc1c:	07d2      	lsls	r2, r2, #31
 801fc1e:	d501      	bpl.n	801fc24 <_printf_float+0x184>
 801fc20:	3302      	adds	r3, #2
 801fc22:	e7f4      	b.n	801fc0e <_printf_float+0x16e>
 801fc24:	2301      	movs	r3, #1
 801fc26:	e7f2      	b.n	801fc0e <_printf_float+0x16e>
 801fc28:	f04f 0967 	mov.w	r9, #103	; 0x67
 801fc2c:	9b08      	ldr	r3, [sp, #32]
 801fc2e:	4299      	cmp	r1, r3
 801fc30:	db05      	blt.n	801fc3e <_printf_float+0x19e>
 801fc32:	6823      	ldr	r3, [r4, #0]
 801fc34:	6121      	str	r1, [r4, #16]
 801fc36:	07d8      	lsls	r0, r3, #31
 801fc38:	d5ea      	bpl.n	801fc10 <_printf_float+0x170>
 801fc3a:	1c4b      	adds	r3, r1, #1
 801fc3c:	e7e7      	b.n	801fc0e <_printf_float+0x16e>
 801fc3e:	2900      	cmp	r1, #0
 801fc40:	bfd4      	ite	le
 801fc42:	f1c1 0202 	rsble	r2, r1, #2
 801fc46:	2201      	movgt	r2, #1
 801fc48:	4413      	add	r3, r2
 801fc4a:	e7e0      	b.n	801fc0e <_printf_float+0x16e>
 801fc4c:	6823      	ldr	r3, [r4, #0]
 801fc4e:	055a      	lsls	r2, r3, #21
 801fc50:	d407      	bmi.n	801fc62 <_printf_float+0x1c2>
 801fc52:	6923      	ldr	r3, [r4, #16]
 801fc54:	4642      	mov	r2, r8
 801fc56:	4631      	mov	r1, r6
 801fc58:	4628      	mov	r0, r5
 801fc5a:	47b8      	blx	r7
 801fc5c:	3001      	adds	r0, #1
 801fc5e:	d12a      	bne.n	801fcb6 <_printf_float+0x216>
 801fc60:	e76a      	b.n	801fb38 <_printf_float+0x98>
 801fc62:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fc66:	f240 80e0 	bls.w	801fe2a <_printf_float+0x38a>
 801fc6a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fc6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc76:	d133      	bne.n	801fce0 <_printf_float+0x240>
 801fc78:	4a37      	ldr	r2, [pc, #220]	; (801fd58 <_printf_float+0x2b8>)
 801fc7a:	2301      	movs	r3, #1
 801fc7c:	4631      	mov	r1, r6
 801fc7e:	4628      	mov	r0, r5
 801fc80:	47b8      	blx	r7
 801fc82:	3001      	adds	r0, #1
 801fc84:	f43f af58 	beq.w	801fb38 <_printf_float+0x98>
 801fc88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fc8c:	429a      	cmp	r2, r3
 801fc8e:	db02      	blt.n	801fc96 <_printf_float+0x1f6>
 801fc90:	6823      	ldr	r3, [r4, #0]
 801fc92:	07d8      	lsls	r0, r3, #31
 801fc94:	d50f      	bpl.n	801fcb6 <_printf_float+0x216>
 801fc96:	4653      	mov	r3, sl
 801fc98:	465a      	mov	r2, fp
 801fc9a:	4631      	mov	r1, r6
 801fc9c:	4628      	mov	r0, r5
 801fc9e:	47b8      	blx	r7
 801fca0:	3001      	adds	r0, #1
 801fca2:	f43f af49 	beq.w	801fb38 <_printf_float+0x98>
 801fca6:	f04f 0800 	mov.w	r8, #0
 801fcaa:	f104 091a 	add.w	r9, r4, #26
 801fcae:	9b08      	ldr	r3, [sp, #32]
 801fcb0:	3b01      	subs	r3, #1
 801fcb2:	4543      	cmp	r3, r8
 801fcb4:	dc09      	bgt.n	801fcca <_printf_float+0x22a>
 801fcb6:	6823      	ldr	r3, [r4, #0]
 801fcb8:	079b      	lsls	r3, r3, #30
 801fcba:	f100 8106 	bmi.w	801feca <_printf_float+0x42a>
 801fcbe:	68e0      	ldr	r0, [r4, #12]
 801fcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcc2:	4298      	cmp	r0, r3
 801fcc4:	bfb8      	it	lt
 801fcc6:	4618      	movlt	r0, r3
 801fcc8:	e738      	b.n	801fb3c <_printf_float+0x9c>
 801fcca:	2301      	movs	r3, #1
 801fccc:	464a      	mov	r2, r9
 801fcce:	4631      	mov	r1, r6
 801fcd0:	4628      	mov	r0, r5
 801fcd2:	47b8      	blx	r7
 801fcd4:	3001      	adds	r0, #1
 801fcd6:	f43f af2f 	beq.w	801fb38 <_printf_float+0x98>
 801fcda:	f108 0801 	add.w	r8, r8, #1
 801fcde:	e7e6      	b.n	801fcae <_printf_float+0x20e>
 801fce0:	9b07      	ldr	r3, [sp, #28]
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	dc3a      	bgt.n	801fd5c <_printf_float+0x2bc>
 801fce6:	4a1c      	ldr	r2, [pc, #112]	; (801fd58 <_printf_float+0x2b8>)
 801fce8:	2301      	movs	r3, #1
 801fcea:	4631      	mov	r1, r6
 801fcec:	4628      	mov	r0, r5
 801fcee:	47b8      	blx	r7
 801fcf0:	3001      	adds	r0, #1
 801fcf2:	f43f af21 	beq.w	801fb38 <_printf_float+0x98>
 801fcf6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fcfa:	4313      	orrs	r3, r2
 801fcfc:	d102      	bne.n	801fd04 <_printf_float+0x264>
 801fcfe:	6823      	ldr	r3, [r4, #0]
 801fd00:	07d9      	lsls	r1, r3, #31
 801fd02:	d5d8      	bpl.n	801fcb6 <_printf_float+0x216>
 801fd04:	4653      	mov	r3, sl
 801fd06:	465a      	mov	r2, fp
 801fd08:	4631      	mov	r1, r6
 801fd0a:	4628      	mov	r0, r5
 801fd0c:	47b8      	blx	r7
 801fd0e:	3001      	adds	r0, #1
 801fd10:	f43f af12 	beq.w	801fb38 <_printf_float+0x98>
 801fd14:	f04f 0900 	mov.w	r9, #0
 801fd18:	f104 0a1a 	add.w	sl, r4, #26
 801fd1c:	9b07      	ldr	r3, [sp, #28]
 801fd1e:	425b      	negs	r3, r3
 801fd20:	454b      	cmp	r3, r9
 801fd22:	dc01      	bgt.n	801fd28 <_printf_float+0x288>
 801fd24:	9b08      	ldr	r3, [sp, #32]
 801fd26:	e795      	b.n	801fc54 <_printf_float+0x1b4>
 801fd28:	2301      	movs	r3, #1
 801fd2a:	4652      	mov	r2, sl
 801fd2c:	4631      	mov	r1, r6
 801fd2e:	4628      	mov	r0, r5
 801fd30:	47b8      	blx	r7
 801fd32:	3001      	adds	r0, #1
 801fd34:	f43f af00 	beq.w	801fb38 <_printf_float+0x98>
 801fd38:	f109 0901 	add.w	r9, r9, #1
 801fd3c:	e7ee      	b.n	801fd1c <_printf_float+0x27c>
 801fd3e:	bf00      	nop
 801fd40:	ffffffff 	.word	0xffffffff
 801fd44:	7fefffff 	.word	0x7fefffff
 801fd48:	08025c54 	.word	0x08025c54
 801fd4c:	08025c58 	.word	0x08025c58
 801fd50:	08025c5c 	.word	0x08025c5c
 801fd54:	08025c60 	.word	0x08025c60
 801fd58:	08025c64 	.word	0x08025c64
 801fd5c:	9a08      	ldr	r2, [sp, #32]
 801fd5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fd60:	429a      	cmp	r2, r3
 801fd62:	bfa8      	it	ge
 801fd64:	461a      	movge	r2, r3
 801fd66:	2a00      	cmp	r2, #0
 801fd68:	4691      	mov	r9, r2
 801fd6a:	dc38      	bgt.n	801fdde <_printf_float+0x33e>
 801fd6c:	2300      	movs	r3, #0
 801fd6e:	9305      	str	r3, [sp, #20]
 801fd70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fd74:	f104 021a 	add.w	r2, r4, #26
 801fd78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fd7a:	9905      	ldr	r1, [sp, #20]
 801fd7c:	9304      	str	r3, [sp, #16]
 801fd7e:	eba3 0309 	sub.w	r3, r3, r9
 801fd82:	428b      	cmp	r3, r1
 801fd84:	dc33      	bgt.n	801fdee <_printf_float+0x34e>
 801fd86:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fd8a:	429a      	cmp	r2, r3
 801fd8c:	db3c      	blt.n	801fe08 <_printf_float+0x368>
 801fd8e:	6823      	ldr	r3, [r4, #0]
 801fd90:	07da      	lsls	r2, r3, #31
 801fd92:	d439      	bmi.n	801fe08 <_printf_float+0x368>
 801fd94:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fd98:	eba2 0903 	sub.w	r9, r2, r3
 801fd9c:	9b04      	ldr	r3, [sp, #16]
 801fd9e:	1ad2      	subs	r2, r2, r3
 801fda0:	4591      	cmp	r9, r2
 801fda2:	bfa8      	it	ge
 801fda4:	4691      	movge	r9, r2
 801fda6:	f1b9 0f00 	cmp.w	r9, #0
 801fdaa:	dc35      	bgt.n	801fe18 <_printf_float+0x378>
 801fdac:	f04f 0800 	mov.w	r8, #0
 801fdb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fdb4:	f104 0a1a 	add.w	sl, r4, #26
 801fdb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fdbc:	1a9b      	subs	r3, r3, r2
 801fdbe:	eba3 0309 	sub.w	r3, r3, r9
 801fdc2:	4543      	cmp	r3, r8
 801fdc4:	f77f af77 	ble.w	801fcb6 <_printf_float+0x216>
 801fdc8:	2301      	movs	r3, #1
 801fdca:	4652      	mov	r2, sl
 801fdcc:	4631      	mov	r1, r6
 801fdce:	4628      	mov	r0, r5
 801fdd0:	47b8      	blx	r7
 801fdd2:	3001      	adds	r0, #1
 801fdd4:	f43f aeb0 	beq.w	801fb38 <_printf_float+0x98>
 801fdd8:	f108 0801 	add.w	r8, r8, #1
 801fddc:	e7ec      	b.n	801fdb8 <_printf_float+0x318>
 801fdde:	4613      	mov	r3, r2
 801fde0:	4631      	mov	r1, r6
 801fde2:	4642      	mov	r2, r8
 801fde4:	4628      	mov	r0, r5
 801fde6:	47b8      	blx	r7
 801fde8:	3001      	adds	r0, #1
 801fdea:	d1bf      	bne.n	801fd6c <_printf_float+0x2cc>
 801fdec:	e6a4      	b.n	801fb38 <_printf_float+0x98>
 801fdee:	2301      	movs	r3, #1
 801fdf0:	4631      	mov	r1, r6
 801fdf2:	4628      	mov	r0, r5
 801fdf4:	9204      	str	r2, [sp, #16]
 801fdf6:	47b8      	blx	r7
 801fdf8:	3001      	adds	r0, #1
 801fdfa:	f43f ae9d 	beq.w	801fb38 <_printf_float+0x98>
 801fdfe:	9b05      	ldr	r3, [sp, #20]
 801fe00:	9a04      	ldr	r2, [sp, #16]
 801fe02:	3301      	adds	r3, #1
 801fe04:	9305      	str	r3, [sp, #20]
 801fe06:	e7b7      	b.n	801fd78 <_printf_float+0x2d8>
 801fe08:	4653      	mov	r3, sl
 801fe0a:	465a      	mov	r2, fp
 801fe0c:	4631      	mov	r1, r6
 801fe0e:	4628      	mov	r0, r5
 801fe10:	47b8      	blx	r7
 801fe12:	3001      	adds	r0, #1
 801fe14:	d1be      	bne.n	801fd94 <_printf_float+0x2f4>
 801fe16:	e68f      	b.n	801fb38 <_printf_float+0x98>
 801fe18:	9a04      	ldr	r2, [sp, #16]
 801fe1a:	464b      	mov	r3, r9
 801fe1c:	4442      	add	r2, r8
 801fe1e:	4631      	mov	r1, r6
 801fe20:	4628      	mov	r0, r5
 801fe22:	47b8      	blx	r7
 801fe24:	3001      	adds	r0, #1
 801fe26:	d1c1      	bne.n	801fdac <_printf_float+0x30c>
 801fe28:	e686      	b.n	801fb38 <_printf_float+0x98>
 801fe2a:	9a08      	ldr	r2, [sp, #32]
 801fe2c:	2a01      	cmp	r2, #1
 801fe2e:	dc01      	bgt.n	801fe34 <_printf_float+0x394>
 801fe30:	07db      	lsls	r3, r3, #31
 801fe32:	d537      	bpl.n	801fea4 <_printf_float+0x404>
 801fe34:	2301      	movs	r3, #1
 801fe36:	4642      	mov	r2, r8
 801fe38:	4631      	mov	r1, r6
 801fe3a:	4628      	mov	r0, r5
 801fe3c:	47b8      	blx	r7
 801fe3e:	3001      	adds	r0, #1
 801fe40:	f43f ae7a 	beq.w	801fb38 <_printf_float+0x98>
 801fe44:	4653      	mov	r3, sl
 801fe46:	465a      	mov	r2, fp
 801fe48:	4631      	mov	r1, r6
 801fe4a:	4628      	mov	r0, r5
 801fe4c:	47b8      	blx	r7
 801fe4e:	3001      	adds	r0, #1
 801fe50:	f43f ae72 	beq.w	801fb38 <_printf_float+0x98>
 801fe54:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fe58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fe5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe60:	9b08      	ldr	r3, [sp, #32]
 801fe62:	d01a      	beq.n	801fe9a <_printf_float+0x3fa>
 801fe64:	3b01      	subs	r3, #1
 801fe66:	f108 0201 	add.w	r2, r8, #1
 801fe6a:	4631      	mov	r1, r6
 801fe6c:	4628      	mov	r0, r5
 801fe6e:	47b8      	blx	r7
 801fe70:	3001      	adds	r0, #1
 801fe72:	d10e      	bne.n	801fe92 <_printf_float+0x3f2>
 801fe74:	e660      	b.n	801fb38 <_printf_float+0x98>
 801fe76:	2301      	movs	r3, #1
 801fe78:	464a      	mov	r2, r9
 801fe7a:	4631      	mov	r1, r6
 801fe7c:	4628      	mov	r0, r5
 801fe7e:	47b8      	blx	r7
 801fe80:	3001      	adds	r0, #1
 801fe82:	f43f ae59 	beq.w	801fb38 <_printf_float+0x98>
 801fe86:	f108 0801 	add.w	r8, r8, #1
 801fe8a:	9b08      	ldr	r3, [sp, #32]
 801fe8c:	3b01      	subs	r3, #1
 801fe8e:	4543      	cmp	r3, r8
 801fe90:	dcf1      	bgt.n	801fe76 <_printf_float+0x3d6>
 801fe92:	9b04      	ldr	r3, [sp, #16]
 801fe94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fe98:	e6dd      	b.n	801fc56 <_printf_float+0x1b6>
 801fe9a:	f04f 0800 	mov.w	r8, #0
 801fe9e:	f104 091a 	add.w	r9, r4, #26
 801fea2:	e7f2      	b.n	801fe8a <_printf_float+0x3ea>
 801fea4:	2301      	movs	r3, #1
 801fea6:	4642      	mov	r2, r8
 801fea8:	e7df      	b.n	801fe6a <_printf_float+0x3ca>
 801feaa:	2301      	movs	r3, #1
 801feac:	464a      	mov	r2, r9
 801feae:	4631      	mov	r1, r6
 801feb0:	4628      	mov	r0, r5
 801feb2:	47b8      	blx	r7
 801feb4:	3001      	adds	r0, #1
 801feb6:	f43f ae3f 	beq.w	801fb38 <_printf_float+0x98>
 801feba:	f108 0801 	add.w	r8, r8, #1
 801febe:	68e3      	ldr	r3, [r4, #12]
 801fec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fec2:	1a5b      	subs	r3, r3, r1
 801fec4:	4543      	cmp	r3, r8
 801fec6:	dcf0      	bgt.n	801feaa <_printf_float+0x40a>
 801fec8:	e6f9      	b.n	801fcbe <_printf_float+0x21e>
 801feca:	f04f 0800 	mov.w	r8, #0
 801fece:	f104 0919 	add.w	r9, r4, #25
 801fed2:	e7f4      	b.n	801febe <_printf_float+0x41e>

0801fed4 <_printf_common>:
 801fed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fed8:	4616      	mov	r6, r2
 801feda:	4699      	mov	r9, r3
 801fedc:	688a      	ldr	r2, [r1, #8]
 801fede:	690b      	ldr	r3, [r1, #16]
 801fee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fee4:	4293      	cmp	r3, r2
 801fee6:	bfb8      	it	lt
 801fee8:	4613      	movlt	r3, r2
 801feea:	6033      	str	r3, [r6, #0]
 801feec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fef0:	4607      	mov	r7, r0
 801fef2:	460c      	mov	r4, r1
 801fef4:	b10a      	cbz	r2, 801fefa <_printf_common+0x26>
 801fef6:	3301      	adds	r3, #1
 801fef8:	6033      	str	r3, [r6, #0]
 801fefa:	6823      	ldr	r3, [r4, #0]
 801fefc:	0699      	lsls	r1, r3, #26
 801fefe:	bf42      	ittt	mi
 801ff00:	6833      	ldrmi	r3, [r6, #0]
 801ff02:	3302      	addmi	r3, #2
 801ff04:	6033      	strmi	r3, [r6, #0]
 801ff06:	6825      	ldr	r5, [r4, #0]
 801ff08:	f015 0506 	ands.w	r5, r5, #6
 801ff0c:	d106      	bne.n	801ff1c <_printf_common+0x48>
 801ff0e:	f104 0a19 	add.w	sl, r4, #25
 801ff12:	68e3      	ldr	r3, [r4, #12]
 801ff14:	6832      	ldr	r2, [r6, #0]
 801ff16:	1a9b      	subs	r3, r3, r2
 801ff18:	42ab      	cmp	r3, r5
 801ff1a:	dc26      	bgt.n	801ff6a <_printf_common+0x96>
 801ff1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ff20:	1e13      	subs	r3, r2, #0
 801ff22:	6822      	ldr	r2, [r4, #0]
 801ff24:	bf18      	it	ne
 801ff26:	2301      	movne	r3, #1
 801ff28:	0692      	lsls	r2, r2, #26
 801ff2a:	d42b      	bmi.n	801ff84 <_printf_common+0xb0>
 801ff2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ff30:	4649      	mov	r1, r9
 801ff32:	4638      	mov	r0, r7
 801ff34:	47c0      	blx	r8
 801ff36:	3001      	adds	r0, #1
 801ff38:	d01e      	beq.n	801ff78 <_printf_common+0xa4>
 801ff3a:	6823      	ldr	r3, [r4, #0]
 801ff3c:	6922      	ldr	r2, [r4, #16]
 801ff3e:	f003 0306 	and.w	r3, r3, #6
 801ff42:	2b04      	cmp	r3, #4
 801ff44:	bf02      	ittt	eq
 801ff46:	68e5      	ldreq	r5, [r4, #12]
 801ff48:	6833      	ldreq	r3, [r6, #0]
 801ff4a:	1aed      	subeq	r5, r5, r3
 801ff4c:	68a3      	ldr	r3, [r4, #8]
 801ff4e:	bf0c      	ite	eq
 801ff50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ff54:	2500      	movne	r5, #0
 801ff56:	4293      	cmp	r3, r2
 801ff58:	bfc4      	itt	gt
 801ff5a:	1a9b      	subgt	r3, r3, r2
 801ff5c:	18ed      	addgt	r5, r5, r3
 801ff5e:	2600      	movs	r6, #0
 801ff60:	341a      	adds	r4, #26
 801ff62:	42b5      	cmp	r5, r6
 801ff64:	d11a      	bne.n	801ff9c <_printf_common+0xc8>
 801ff66:	2000      	movs	r0, #0
 801ff68:	e008      	b.n	801ff7c <_printf_common+0xa8>
 801ff6a:	2301      	movs	r3, #1
 801ff6c:	4652      	mov	r2, sl
 801ff6e:	4649      	mov	r1, r9
 801ff70:	4638      	mov	r0, r7
 801ff72:	47c0      	blx	r8
 801ff74:	3001      	adds	r0, #1
 801ff76:	d103      	bne.n	801ff80 <_printf_common+0xac>
 801ff78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ff7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff80:	3501      	adds	r5, #1
 801ff82:	e7c6      	b.n	801ff12 <_printf_common+0x3e>
 801ff84:	18e1      	adds	r1, r4, r3
 801ff86:	1c5a      	adds	r2, r3, #1
 801ff88:	2030      	movs	r0, #48	; 0x30
 801ff8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ff8e:	4422      	add	r2, r4
 801ff90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ff94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ff98:	3302      	adds	r3, #2
 801ff9a:	e7c7      	b.n	801ff2c <_printf_common+0x58>
 801ff9c:	2301      	movs	r3, #1
 801ff9e:	4622      	mov	r2, r4
 801ffa0:	4649      	mov	r1, r9
 801ffa2:	4638      	mov	r0, r7
 801ffa4:	47c0      	blx	r8
 801ffa6:	3001      	adds	r0, #1
 801ffa8:	d0e6      	beq.n	801ff78 <_printf_common+0xa4>
 801ffaa:	3601      	adds	r6, #1
 801ffac:	e7d9      	b.n	801ff62 <_printf_common+0x8e>
	...

0801ffb0 <_printf_i>:
 801ffb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ffb4:	7e0f      	ldrb	r7, [r1, #24]
 801ffb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ffb8:	2f78      	cmp	r7, #120	; 0x78
 801ffba:	4691      	mov	r9, r2
 801ffbc:	4680      	mov	r8, r0
 801ffbe:	460c      	mov	r4, r1
 801ffc0:	469a      	mov	sl, r3
 801ffc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ffc6:	d807      	bhi.n	801ffd8 <_printf_i+0x28>
 801ffc8:	2f62      	cmp	r7, #98	; 0x62
 801ffca:	d80a      	bhi.n	801ffe2 <_printf_i+0x32>
 801ffcc:	2f00      	cmp	r7, #0
 801ffce:	f000 80d4 	beq.w	802017a <_printf_i+0x1ca>
 801ffd2:	2f58      	cmp	r7, #88	; 0x58
 801ffd4:	f000 80c0 	beq.w	8020158 <_printf_i+0x1a8>
 801ffd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ffdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ffe0:	e03a      	b.n	8020058 <_printf_i+0xa8>
 801ffe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ffe6:	2b15      	cmp	r3, #21
 801ffe8:	d8f6      	bhi.n	801ffd8 <_printf_i+0x28>
 801ffea:	a101      	add	r1, pc, #4	; (adr r1, 801fff0 <_printf_i+0x40>)
 801ffec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fff0:	08020049 	.word	0x08020049
 801fff4:	0802005d 	.word	0x0802005d
 801fff8:	0801ffd9 	.word	0x0801ffd9
 801fffc:	0801ffd9 	.word	0x0801ffd9
 8020000:	0801ffd9 	.word	0x0801ffd9
 8020004:	0801ffd9 	.word	0x0801ffd9
 8020008:	0802005d 	.word	0x0802005d
 802000c:	0801ffd9 	.word	0x0801ffd9
 8020010:	0801ffd9 	.word	0x0801ffd9
 8020014:	0801ffd9 	.word	0x0801ffd9
 8020018:	0801ffd9 	.word	0x0801ffd9
 802001c:	08020161 	.word	0x08020161
 8020020:	08020089 	.word	0x08020089
 8020024:	0802011b 	.word	0x0802011b
 8020028:	0801ffd9 	.word	0x0801ffd9
 802002c:	0801ffd9 	.word	0x0801ffd9
 8020030:	08020183 	.word	0x08020183
 8020034:	0801ffd9 	.word	0x0801ffd9
 8020038:	08020089 	.word	0x08020089
 802003c:	0801ffd9 	.word	0x0801ffd9
 8020040:	0801ffd9 	.word	0x0801ffd9
 8020044:	08020123 	.word	0x08020123
 8020048:	682b      	ldr	r3, [r5, #0]
 802004a:	1d1a      	adds	r2, r3, #4
 802004c:	681b      	ldr	r3, [r3, #0]
 802004e:	602a      	str	r2, [r5, #0]
 8020050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020058:	2301      	movs	r3, #1
 802005a:	e09f      	b.n	802019c <_printf_i+0x1ec>
 802005c:	6820      	ldr	r0, [r4, #0]
 802005e:	682b      	ldr	r3, [r5, #0]
 8020060:	0607      	lsls	r7, r0, #24
 8020062:	f103 0104 	add.w	r1, r3, #4
 8020066:	6029      	str	r1, [r5, #0]
 8020068:	d501      	bpl.n	802006e <_printf_i+0xbe>
 802006a:	681e      	ldr	r6, [r3, #0]
 802006c:	e003      	b.n	8020076 <_printf_i+0xc6>
 802006e:	0646      	lsls	r6, r0, #25
 8020070:	d5fb      	bpl.n	802006a <_printf_i+0xba>
 8020072:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020076:	2e00      	cmp	r6, #0
 8020078:	da03      	bge.n	8020082 <_printf_i+0xd2>
 802007a:	232d      	movs	r3, #45	; 0x2d
 802007c:	4276      	negs	r6, r6
 802007e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020082:	485a      	ldr	r0, [pc, #360]	; (80201ec <_printf_i+0x23c>)
 8020084:	230a      	movs	r3, #10
 8020086:	e012      	b.n	80200ae <_printf_i+0xfe>
 8020088:	682b      	ldr	r3, [r5, #0]
 802008a:	6820      	ldr	r0, [r4, #0]
 802008c:	1d19      	adds	r1, r3, #4
 802008e:	6029      	str	r1, [r5, #0]
 8020090:	0605      	lsls	r5, r0, #24
 8020092:	d501      	bpl.n	8020098 <_printf_i+0xe8>
 8020094:	681e      	ldr	r6, [r3, #0]
 8020096:	e002      	b.n	802009e <_printf_i+0xee>
 8020098:	0641      	lsls	r1, r0, #25
 802009a:	d5fb      	bpl.n	8020094 <_printf_i+0xe4>
 802009c:	881e      	ldrh	r6, [r3, #0]
 802009e:	4853      	ldr	r0, [pc, #332]	; (80201ec <_printf_i+0x23c>)
 80200a0:	2f6f      	cmp	r7, #111	; 0x6f
 80200a2:	bf0c      	ite	eq
 80200a4:	2308      	moveq	r3, #8
 80200a6:	230a      	movne	r3, #10
 80200a8:	2100      	movs	r1, #0
 80200aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80200ae:	6865      	ldr	r5, [r4, #4]
 80200b0:	60a5      	str	r5, [r4, #8]
 80200b2:	2d00      	cmp	r5, #0
 80200b4:	bfa2      	ittt	ge
 80200b6:	6821      	ldrge	r1, [r4, #0]
 80200b8:	f021 0104 	bicge.w	r1, r1, #4
 80200bc:	6021      	strge	r1, [r4, #0]
 80200be:	b90e      	cbnz	r6, 80200c4 <_printf_i+0x114>
 80200c0:	2d00      	cmp	r5, #0
 80200c2:	d04b      	beq.n	802015c <_printf_i+0x1ac>
 80200c4:	4615      	mov	r5, r2
 80200c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80200ca:	fb03 6711 	mls	r7, r3, r1, r6
 80200ce:	5dc7      	ldrb	r7, [r0, r7]
 80200d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80200d4:	4637      	mov	r7, r6
 80200d6:	42bb      	cmp	r3, r7
 80200d8:	460e      	mov	r6, r1
 80200da:	d9f4      	bls.n	80200c6 <_printf_i+0x116>
 80200dc:	2b08      	cmp	r3, #8
 80200de:	d10b      	bne.n	80200f8 <_printf_i+0x148>
 80200e0:	6823      	ldr	r3, [r4, #0]
 80200e2:	07de      	lsls	r6, r3, #31
 80200e4:	d508      	bpl.n	80200f8 <_printf_i+0x148>
 80200e6:	6923      	ldr	r3, [r4, #16]
 80200e8:	6861      	ldr	r1, [r4, #4]
 80200ea:	4299      	cmp	r1, r3
 80200ec:	bfde      	ittt	le
 80200ee:	2330      	movle	r3, #48	; 0x30
 80200f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80200f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80200f8:	1b52      	subs	r2, r2, r5
 80200fa:	6122      	str	r2, [r4, #16]
 80200fc:	f8cd a000 	str.w	sl, [sp]
 8020100:	464b      	mov	r3, r9
 8020102:	aa03      	add	r2, sp, #12
 8020104:	4621      	mov	r1, r4
 8020106:	4640      	mov	r0, r8
 8020108:	f7ff fee4 	bl	801fed4 <_printf_common>
 802010c:	3001      	adds	r0, #1
 802010e:	d14a      	bne.n	80201a6 <_printf_i+0x1f6>
 8020110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020114:	b004      	add	sp, #16
 8020116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802011a:	6823      	ldr	r3, [r4, #0]
 802011c:	f043 0320 	orr.w	r3, r3, #32
 8020120:	6023      	str	r3, [r4, #0]
 8020122:	4833      	ldr	r0, [pc, #204]	; (80201f0 <_printf_i+0x240>)
 8020124:	2778      	movs	r7, #120	; 0x78
 8020126:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802012a:	6823      	ldr	r3, [r4, #0]
 802012c:	6829      	ldr	r1, [r5, #0]
 802012e:	061f      	lsls	r7, r3, #24
 8020130:	f851 6b04 	ldr.w	r6, [r1], #4
 8020134:	d402      	bmi.n	802013c <_printf_i+0x18c>
 8020136:	065f      	lsls	r7, r3, #25
 8020138:	bf48      	it	mi
 802013a:	b2b6      	uxthmi	r6, r6
 802013c:	07df      	lsls	r7, r3, #31
 802013e:	bf48      	it	mi
 8020140:	f043 0320 	orrmi.w	r3, r3, #32
 8020144:	6029      	str	r1, [r5, #0]
 8020146:	bf48      	it	mi
 8020148:	6023      	strmi	r3, [r4, #0]
 802014a:	b91e      	cbnz	r6, 8020154 <_printf_i+0x1a4>
 802014c:	6823      	ldr	r3, [r4, #0]
 802014e:	f023 0320 	bic.w	r3, r3, #32
 8020152:	6023      	str	r3, [r4, #0]
 8020154:	2310      	movs	r3, #16
 8020156:	e7a7      	b.n	80200a8 <_printf_i+0xf8>
 8020158:	4824      	ldr	r0, [pc, #144]	; (80201ec <_printf_i+0x23c>)
 802015a:	e7e4      	b.n	8020126 <_printf_i+0x176>
 802015c:	4615      	mov	r5, r2
 802015e:	e7bd      	b.n	80200dc <_printf_i+0x12c>
 8020160:	682b      	ldr	r3, [r5, #0]
 8020162:	6826      	ldr	r6, [r4, #0]
 8020164:	6961      	ldr	r1, [r4, #20]
 8020166:	1d18      	adds	r0, r3, #4
 8020168:	6028      	str	r0, [r5, #0]
 802016a:	0635      	lsls	r5, r6, #24
 802016c:	681b      	ldr	r3, [r3, #0]
 802016e:	d501      	bpl.n	8020174 <_printf_i+0x1c4>
 8020170:	6019      	str	r1, [r3, #0]
 8020172:	e002      	b.n	802017a <_printf_i+0x1ca>
 8020174:	0670      	lsls	r0, r6, #25
 8020176:	d5fb      	bpl.n	8020170 <_printf_i+0x1c0>
 8020178:	8019      	strh	r1, [r3, #0]
 802017a:	2300      	movs	r3, #0
 802017c:	6123      	str	r3, [r4, #16]
 802017e:	4615      	mov	r5, r2
 8020180:	e7bc      	b.n	80200fc <_printf_i+0x14c>
 8020182:	682b      	ldr	r3, [r5, #0]
 8020184:	1d1a      	adds	r2, r3, #4
 8020186:	602a      	str	r2, [r5, #0]
 8020188:	681d      	ldr	r5, [r3, #0]
 802018a:	6862      	ldr	r2, [r4, #4]
 802018c:	2100      	movs	r1, #0
 802018e:	4628      	mov	r0, r5
 8020190:	f7e0 f866 	bl	8000260 <memchr>
 8020194:	b108      	cbz	r0, 802019a <_printf_i+0x1ea>
 8020196:	1b40      	subs	r0, r0, r5
 8020198:	6060      	str	r0, [r4, #4]
 802019a:	6863      	ldr	r3, [r4, #4]
 802019c:	6123      	str	r3, [r4, #16]
 802019e:	2300      	movs	r3, #0
 80201a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80201a4:	e7aa      	b.n	80200fc <_printf_i+0x14c>
 80201a6:	6923      	ldr	r3, [r4, #16]
 80201a8:	462a      	mov	r2, r5
 80201aa:	4649      	mov	r1, r9
 80201ac:	4640      	mov	r0, r8
 80201ae:	47d0      	blx	sl
 80201b0:	3001      	adds	r0, #1
 80201b2:	d0ad      	beq.n	8020110 <_printf_i+0x160>
 80201b4:	6823      	ldr	r3, [r4, #0]
 80201b6:	079b      	lsls	r3, r3, #30
 80201b8:	d413      	bmi.n	80201e2 <_printf_i+0x232>
 80201ba:	68e0      	ldr	r0, [r4, #12]
 80201bc:	9b03      	ldr	r3, [sp, #12]
 80201be:	4298      	cmp	r0, r3
 80201c0:	bfb8      	it	lt
 80201c2:	4618      	movlt	r0, r3
 80201c4:	e7a6      	b.n	8020114 <_printf_i+0x164>
 80201c6:	2301      	movs	r3, #1
 80201c8:	4632      	mov	r2, r6
 80201ca:	4649      	mov	r1, r9
 80201cc:	4640      	mov	r0, r8
 80201ce:	47d0      	blx	sl
 80201d0:	3001      	adds	r0, #1
 80201d2:	d09d      	beq.n	8020110 <_printf_i+0x160>
 80201d4:	3501      	adds	r5, #1
 80201d6:	68e3      	ldr	r3, [r4, #12]
 80201d8:	9903      	ldr	r1, [sp, #12]
 80201da:	1a5b      	subs	r3, r3, r1
 80201dc:	42ab      	cmp	r3, r5
 80201de:	dcf2      	bgt.n	80201c6 <_printf_i+0x216>
 80201e0:	e7eb      	b.n	80201ba <_printf_i+0x20a>
 80201e2:	2500      	movs	r5, #0
 80201e4:	f104 0619 	add.w	r6, r4, #25
 80201e8:	e7f5      	b.n	80201d6 <_printf_i+0x226>
 80201ea:	bf00      	nop
 80201ec:	08025c66 	.word	0x08025c66
 80201f0:	08025c77 	.word	0x08025c77

080201f4 <_scanf_float>:
 80201f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201f8:	b087      	sub	sp, #28
 80201fa:	4617      	mov	r7, r2
 80201fc:	9303      	str	r3, [sp, #12]
 80201fe:	688b      	ldr	r3, [r1, #8]
 8020200:	1e5a      	subs	r2, r3, #1
 8020202:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020206:	bf83      	ittte	hi
 8020208:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802020c:	195b      	addhi	r3, r3, r5
 802020e:	9302      	strhi	r3, [sp, #8]
 8020210:	2300      	movls	r3, #0
 8020212:	bf86      	itte	hi
 8020214:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020218:	608b      	strhi	r3, [r1, #8]
 802021a:	9302      	strls	r3, [sp, #8]
 802021c:	680b      	ldr	r3, [r1, #0]
 802021e:	468b      	mov	fp, r1
 8020220:	2500      	movs	r5, #0
 8020222:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8020226:	f84b 3b1c 	str.w	r3, [fp], #28
 802022a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802022e:	4680      	mov	r8, r0
 8020230:	460c      	mov	r4, r1
 8020232:	465e      	mov	r6, fp
 8020234:	46aa      	mov	sl, r5
 8020236:	46a9      	mov	r9, r5
 8020238:	9501      	str	r5, [sp, #4]
 802023a:	68a2      	ldr	r2, [r4, #8]
 802023c:	b152      	cbz	r2, 8020254 <_scanf_float+0x60>
 802023e:	683b      	ldr	r3, [r7, #0]
 8020240:	781b      	ldrb	r3, [r3, #0]
 8020242:	2b4e      	cmp	r3, #78	; 0x4e
 8020244:	d864      	bhi.n	8020310 <_scanf_float+0x11c>
 8020246:	2b40      	cmp	r3, #64	; 0x40
 8020248:	d83c      	bhi.n	80202c4 <_scanf_float+0xd0>
 802024a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802024e:	b2c8      	uxtb	r0, r1
 8020250:	280e      	cmp	r0, #14
 8020252:	d93a      	bls.n	80202ca <_scanf_float+0xd6>
 8020254:	f1b9 0f00 	cmp.w	r9, #0
 8020258:	d003      	beq.n	8020262 <_scanf_float+0x6e>
 802025a:	6823      	ldr	r3, [r4, #0]
 802025c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020260:	6023      	str	r3, [r4, #0]
 8020262:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020266:	f1ba 0f01 	cmp.w	sl, #1
 802026a:	f200 8113 	bhi.w	8020494 <_scanf_float+0x2a0>
 802026e:	455e      	cmp	r6, fp
 8020270:	f200 8105 	bhi.w	802047e <_scanf_float+0x28a>
 8020274:	2501      	movs	r5, #1
 8020276:	4628      	mov	r0, r5
 8020278:	b007      	add	sp, #28
 802027a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802027e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8020282:	2a0d      	cmp	r2, #13
 8020284:	d8e6      	bhi.n	8020254 <_scanf_float+0x60>
 8020286:	a101      	add	r1, pc, #4	; (adr r1, 802028c <_scanf_float+0x98>)
 8020288:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802028c:	080203cb 	.word	0x080203cb
 8020290:	08020255 	.word	0x08020255
 8020294:	08020255 	.word	0x08020255
 8020298:	08020255 	.word	0x08020255
 802029c:	0802042b 	.word	0x0802042b
 80202a0:	08020403 	.word	0x08020403
 80202a4:	08020255 	.word	0x08020255
 80202a8:	08020255 	.word	0x08020255
 80202ac:	080203d9 	.word	0x080203d9
 80202b0:	08020255 	.word	0x08020255
 80202b4:	08020255 	.word	0x08020255
 80202b8:	08020255 	.word	0x08020255
 80202bc:	08020255 	.word	0x08020255
 80202c0:	08020391 	.word	0x08020391
 80202c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80202c8:	e7db      	b.n	8020282 <_scanf_float+0x8e>
 80202ca:	290e      	cmp	r1, #14
 80202cc:	d8c2      	bhi.n	8020254 <_scanf_float+0x60>
 80202ce:	a001      	add	r0, pc, #4	; (adr r0, 80202d4 <_scanf_float+0xe0>)
 80202d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80202d4:	08020383 	.word	0x08020383
 80202d8:	08020255 	.word	0x08020255
 80202dc:	08020383 	.word	0x08020383
 80202e0:	08020417 	.word	0x08020417
 80202e4:	08020255 	.word	0x08020255
 80202e8:	08020331 	.word	0x08020331
 80202ec:	0802036d 	.word	0x0802036d
 80202f0:	0802036d 	.word	0x0802036d
 80202f4:	0802036d 	.word	0x0802036d
 80202f8:	0802036d 	.word	0x0802036d
 80202fc:	0802036d 	.word	0x0802036d
 8020300:	0802036d 	.word	0x0802036d
 8020304:	0802036d 	.word	0x0802036d
 8020308:	0802036d 	.word	0x0802036d
 802030c:	0802036d 	.word	0x0802036d
 8020310:	2b6e      	cmp	r3, #110	; 0x6e
 8020312:	d809      	bhi.n	8020328 <_scanf_float+0x134>
 8020314:	2b60      	cmp	r3, #96	; 0x60
 8020316:	d8b2      	bhi.n	802027e <_scanf_float+0x8a>
 8020318:	2b54      	cmp	r3, #84	; 0x54
 802031a:	d077      	beq.n	802040c <_scanf_float+0x218>
 802031c:	2b59      	cmp	r3, #89	; 0x59
 802031e:	d199      	bne.n	8020254 <_scanf_float+0x60>
 8020320:	2d07      	cmp	r5, #7
 8020322:	d197      	bne.n	8020254 <_scanf_float+0x60>
 8020324:	2508      	movs	r5, #8
 8020326:	e029      	b.n	802037c <_scanf_float+0x188>
 8020328:	2b74      	cmp	r3, #116	; 0x74
 802032a:	d06f      	beq.n	802040c <_scanf_float+0x218>
 802032c:	2b79      	cmp	r3, #121	; 0x79
 802032e:	e7f6      	b.n	802031e <_scanf_float+0x12a>
 8020330:	6821      	ldr	r1, [r4, #0]
 8020332:	05c8      	lsls	r0, r1, #23
 8020334:	d51a      	bpl.n	802036c <_scanf_float+0x178>
 8020336:	9b02      	ldr	r3, [sp, #8]
 8020338:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802033c:	6021      	str	r1, [r4, #0]
 802033e:	f109 0901 	add.w	r9, r9, #1
 8020342:	b11b      	cbz	r3, 802034c <_scanf_float+0x158>
 8020344:	3b01      	subs	r3, #1
 8020346:	3201      	adds	r2, #1
 8020348:	9302      	str	r3, [sp, #8]
 802034a:	60a2      	str	r2, [r4, #8]
 802034c:	68a3      	ldr	r3, [r4, #8]
 802034e:	3b01      	subs	r3, #1
 8020350:	60a3      	str	r3, [r4, #8]
 8020352:	6923      	ldr	r3, [r4, #16]
 8020354:	3301      	adds	r3, #1
 8020356:	6123      	str	r3, [r4, #16]
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	3b01      	subs	r3, #1
 802035c:	2b00      	cmp	r3, #0
 802035e:	607b      	str	r3, [r7, #4]
 8020360:	f340 8084 	ble.w	802046c <_scanf_float+0x278>
 8020364:	683b      	ldr	r3, [r7, #0]
 8020366:	3301      	adds	r3, #1
 8020368:	603b      	str	r3, [r7, #0]
 802036a:	e766      	b.n	802023a <_scanf_float+0x46>
 802036c:	eb1a 0f05 	cmn.w	sl, r5
 8020370:	f47f af70 	bne.w	8020254 <_scanf_float+0x60>
 8020374:	6822      	ldr	r2, [r4, #0]
 8020376:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802037a:	6022      	str	r2, [r4, #0]
 802037c:	f806 3b01 	strb.w	r3, [r6], #1
 8020380:	e7e4      	b.n	802034c <_scanf_float+0x158>
 8020382:	6822      	ldr	r2, [r4, #0]
 8020384:	0610      	lsls	r0, r2, #24
 8020386:	f57f af65 	bpl.w	8020254 <_scanf_float+0x60>
 802038a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802038e:	e7f4      	b.n	802037a <_scanf_float+0x186>
 8020390:	f1ba 0f00 	cmp.w	sl, #0
 8020394:	d10e      	bne.n	80203b4 <_scanf_float+0x1c0>
 8020396:	f1b9 0f00 	cmp.w	r9, #0
 802039a:	d10e      	bne.n	80203ba <_scanf_float+0x1c6>
 802039c:	6822      	ldr	r2, [r4, #0]
 802039e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80203a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80203a6:	d108      	bne.n	80203ba <_scanf_float+0x1c6>
 80203a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80203ac:	6022      	str	r2, [r4, #0]
 80203ae:	f04f 0a01 	mov.w	sl, #1
 80203b2:	e7e3      	b.n	802037c <_scanf_float+0x188>
 80203b4:	f1ba 0f02 	cmp.w	sl, #2
 80203b8:	d055      	beq.n	8020466 <_scanf_float+0x272>
 80203ba:	2d01      	cmp	r5, #1
 80203bc:	d002      	beq.n	80203c4 <_scanf_float+0x1d0>
 80203be:	2d04      	cmp	r5, #4
 80203c0:	f47f af48 	bne.w	8020254 <_scanf_float+0x60>
 80203c4:	3501      	adds	r5, #1
 80203c6:	b2ed      	uxtb	r5, r5
 80203c8:	e7d8      	b.n	802037c <_scanf_float+0x188>
 80203ca:	f1ba 0f01 	cmp.w	sl, #1
 80203ce:	f47f af41 	bne.w	8020254 <_scanf_float+0x60>
 80203d2:	f04f 0a02 	mov.w	sl, #2
 80203d6:	e7d1      	b.n	802037c <_scanf_float+0x188>
 80203d8:	b97d      	cbnz	r5, 80203fa <_scanf_float+0x206>
 80203da:	f1b9 0f00 	cmp.w	r9, #0
 80203de:	f47f af3c 	bne.w	802025a <_scanf_float+0x66>
 80203e2:	6822      	ldr	r2, [r4, #0]
 80203e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80203e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80203ec:	f47f af39 	bne.w	8020262 <_scanf_float+0x6e>
 80203f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80203f4:	6022      	str	r2, [r4, #0]
 80203f6:	2501      	movs	r5, #1
 80203f8:	e7c0      	b.n	802037c <_scanf_float+0x188>
 80203fa:	2d03      	cmp	r5, #3
 80203fc:	d0e2      	beq.n	80203c4 <_scanf_float+0x1d0>
 80203fe:	2d05      	cmp	r5, #5
 8020400:	e7de      	b.n	80203c0 <_scanf_float+0x1cc>
 8020402:	2d02      	cmp	r5, #2
 8020404:	f47f af26 	bne.w	8020254 <_scanf_float+0x60>
 8020408:	2503      	movs	r5, #3
 802040a:	e7b7      	b.n	802037c <_scanf_float+0x188>
 802040c:	2d06      	cmp	r5, #6
 802040e:	f47f af21 	bne.w	8020254 <_scanf_float+0x60>
 8020412:	2507      	movs	r5, #7
 8020414:	e7b2      	b.n	802037c <_scanf_float+0x188>
 8020416:	6822      	ldr	r2, [r4, #0]
 8020418:	0591      	lsls	r1, r2, #22
 802041a:	f57f af1b 	bpl.w	8020254 <_scanf_float+0x60>
 802041e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8020422:	6022      	str	r2, [r4, #0]
 8020424:	f8cd 9004 	str.w	r9, [sp, #4]
 8020428:	e7a8      	b.n	802037c <_scanf_float+0x188>
 802042a:	6822      	ldr	r2, [r4, #0]
 802042c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8020430:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8020434:	d006      	beq.n	8020444 <_scanf_float+0x250>
 8020436:	0550      	lsls	r0, r2, #21
 8020438:	f57f af0c 	bpl.w	8020254 <_scanf_float+0x60>
 802043c:	f1b9 0f00 	cmp.w	r9, #0
 8020440:	f43f af0f 	beq.w	8020262 <_scanf_float+0x6e>
 8020444:	0591      	lsls	r1, r2, #22
 8020446:	bf58      	it	pl
 8020448:	9901      	ldrpl	r1, [sp, #4]
 802044a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802044e:	bf58      	it	pl
 8020450:	eba9 0101 	subpl.w	r1, r9, r1
 8020454:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8020458:	bf58      	it	pl
 802045a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802045e:	6022      	str	r2, [r4, #0]
 8020460:	f04f 0900 	mov.w	r9, #0
 8020464:	e78a      	b.n	802037c <_scanf_float+0x188>
 8020466:	f04f 0a03 	mov.w	sl, #3
 802046a:	e787      	b.n	802037c <_scanf_float+0x188>
 802046c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020470:	4639      	mov	r1, r7
 8020472:	4640      	mov	r0, r8
 8020474:	4798      	blx	r3
 8020476:	2800      	cmp	r0, #0
 8020478:	f43f aedf 	beq.w	802023a <_scanf_float+0x46>
 802047c:	e6ea      	b.n	8020254 <_scanf_float+0x60>
 802047e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020486:	463a      	mov	r2, r7
 8020488:	4640      	mov	r0, r8
 802048a:	4798      	blx	r3
 802048c:	6923      	ldr	r3, [r4, #16]
 802048e:	3b01      	subs	r3, #1
 8020490:	6123      	str	r3, [r4, #16]
 8020492:	e6ec      	b.n	802026e <_scanf_float+0x7a>
 8020494:	1e6b      	subs	r3, r5, #1
 8020496:	2b06      	cmp	r3, #6
 8020498:	d825      	bhi.n	80204e6 <_scanf_float+0x2f2>
 802049a:	2d02      	cmp	r5, #2
 802049c:	d836      	bhi.n	802050c <_scanf_float+0x318>
 802049e:	455e      	cmp	r6, fp
 80204a0:	f67f aee8 	bls.w	8020274 <_scanf_float+0x80>
 80204a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80204a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80204ac:	463a      	mov	r2, r7
 80204ae:	4640      	mov	r0, r8
 80204b0:	4798      	blx	r3
 80204b2:	6923      	ldr	r3, [r4, #16]
 80204b4:	3b01      	subs	r3, #1
 80204b6:	6123      	str	r3, [r4, #16]
 80204b8:	e7f1      	b.n	802049e <_scanf_float+0x2aa>
 80204ba:	9802      	ldr	r0, [sp, #8]
 80204bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80204c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80204c4:	9002      	str	r0, [sp, #8]
 80204c6:	463a      	mov	r2, r7
 80204c8:	4640      	mov	r0, r8
 80204ca:	4798      	blx	r3
 80204cc:	6923      	ldr	r3, [r4, #16]
 80204ce:	3b01      	subs	r3, #1
 80204d0:	6123      	str	r3, [r4, #16]
 80204d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80204d6:	fa5f fa8a 	uxtb.w	sl, sl
 80204da:	f1ba 0f02 	cmp.w	sl, #2
 80204de:	d1ec      	bne.n	80204ba <_scanf_float+0x2c6>
 80204e0:	3d03      	subs	r5, #3
 80204e2:	b2ed      	uxtb	r5, r5
 80204e4:	1b76      	subs	r6, r6, r5
 80204e6:	6823      	ldr	r3, [r4, #0]
 80204e8:	05da      	lsls	r2, r3, #23
 80204ea:	d52f      	bpl.n	802054c <_scanf_float+0x358>
 80204ec:	055b      	lsls	r3, r3, #21
 80204ee:	d510      	bpl.n	8020512 <_scanf_float+0x31e>
 80204f0:	455e      	cmp	r6, fp
 80204f2:	f67f aebf 	bls.w	8020274 <_scanf_float+0x80>
 80204f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80204fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80204fe:	463a      	mov	r2, r7
 8020500:	4640      	mov	r0, r8
 8020502:	4798      	blx	r3
 8020504:	6923      	ldr	r3, [r4, #16]
 8020506:	3b01      	subs	r3, #1
 8020508:	6123      	str	r3, [r4, #16]
 802050a:	e7f1      	b.n	80204f0 <_scanf_float+0x2fc>
 802050c:	46aa      	mov	sl, r5
 802050e:	9602      	str	r6, [sp, #8]
 8020510:	e7df      	b.n	80204d2 <_scanf_float+0x2de>
 8020512:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8020516:	6923      	ldr	r3, [r4, #16]
 8020518:	2965      	cmp	r1, #101	; 0x65
 802051a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 802051e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8020522:	6123      	str	r3, [r4, #16]
 8020524:	d00c      	beq.n	8020540 <_scanf_float+0x34c>
 8020526:	2945      	cmp	r1, #69	; 0x45
 8020528:	d00a      	beq.n	8020540 <_scanf_float+0x34c>
 802052a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802052e:	463a      	mov	r2, r7
 8020530:	4640      	mov	r0, r8
 8020532:	4798      	blx	r3
 8020534:	6923      	ldr	r3, [r4, #16]
 8020536:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802053a:	3b01      	subs	r3, #1
 802053c:	1eb5      	subs	r5, r6, #2
 802053e:	6123      	str	r3, [r4, #16]
 8020540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020544:	463a      	mov	r2, r7
 8020546:	4640      	mov	r0, r8
 8020548:	4798      	blx	r3
 802054a:	462e      	mov	r6, r5
 802054c:	6825      	ldr	r5, [r4, #0]
 802054e:	f015 0510 	ands.w	r5, r5, #16
 8020552:	d14d      	bne.n	80205f0 <_scanf_float+0x3fc>
 8020554:	7035      	strb	r5, [r6, #0]
 8020556:	6823      	ldr	r3, [r4, #0]
 8020558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802055c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020560:	d11a      	bne.n	8020598 <_scanf_float+0x3a4>
 8020562:	9b01      	ldr	r3, [sp, #4]
 8020564:	454b      	cmp	r3, r9
 8020566:	eba3 0209 	sub.w	r2, r3, r9
 802056a:	d122      	bne.n	80205b2 <_scanf_float+0x3be>
 802056c:	2200      	movs	r2, #0
 802056e:	4659      	mov	r1, fp
 8020570:	4640      	mov	r0, r8
 8020572:	f002 fdd7 	bl	8023124 <_strtod_r>
 8020576:	9b03      	ldr	r3, [sp, #12]
 8020578:	6821      	ldr	r1, [r4, #0]
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	f011 0f02 	tst.w	r1, #2
 8020580:	f103 0204 	add.w	r2, r3, #4
 8020584:	d020      	beq.n	80205c8 <_scanf_float+0x3d4>
 8020586:	9903      	ldr	r1, [sp, #12]
 8020588:	600a      	str	r2, [r1, #0]
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	ed83 0b00 	vstr	d0, [r3]
 8020590:	68e3      	ldr	r3, [r4, #12]
 8020592:	3301      	adds	r3, #1
 8020594:	60e3      	str	r3, [r4, #12]
 8020596:	e66e      	b.n	8020276 <_scanf_float+0x82>
 8020598:	9b04      	ldr	r3, [sp, #16]
 802059a:	2b00      	cmp	r3, #0
 802059c:	d0e6      	beq.n	802056c <_scanf_float+0x378>
 802059e:	9905      	ldr	r1, [sp, #20]
 80205a0:	230a      	movs	r3, #10
 80205a2:	462a      	mov	r2, r5
 80205a4:	3101      	adds	r1, #1
 80205a6:	4640      	mov	r0, r8
 80205a8:	f002 fe44 	bl	8023234 <_strtol_r>
 80205ac:	9b04      	ldr	r3, [sp, #16]
 80205ae:	9e05      	ldr	r6, [sp, #20]
 80205b0:	1ac2      	subs	r2, r0, r3
 80205b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80205b6:	429e      	cmp	r6, r3
 80205b8:	bf28      	it	cs
 80205ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80205be:	490d      	ldr	r1, [pc, #52]	; (80205f4 <_scanf_float+0x400>)
 80205c0:	4630      	mov	r0, r6
 80205c2:	f000 fa87 	bl	8020ad4 <siprintf>
 80205c6:	e7d1      	b.n	802056c <_scanf_float+0x378>
 80205c8:	f011 0f04 	tst.w	r1, #4
 80205cc:	9903      	ldr	r1, [sp, #12]
 80205ce:	600a      	str	r2, [r1, #0]
 80205d0:	d1db      	bne.n	802058a <_scanf_float+0x396>
 80205d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80205d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205da:	681e      	ldr	r6, [r3, #0]
 80205dc:	d705      	bvc.n	80205ea <_scanf_float+0x3f6>
 80205de:	4806      	ldr	r0, [pc, #24]	; (80205f8 <_scanf_float+0x404>)
 80205e0:	f000 fcb0 	bl	8020f44 <nanf>
 80205e4:	ed86 0a00 	vstr	s0, [r6]
 80205e8:	e7d2      	b.n	8020590 <_scanf_float+0x39c>
 80205ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80205ee:	e7f9      	b.n	80205e4 <_scanf_float+0x3f0>
 80205f0:	2500      	movs	r5, #0
 80205f2:	e640      	b.n	8020276 <_scanf_float+0x82>
 80205f4:	08025c88 	.word	0x08025c88
 80205f8:	08025cc8 	.word	0x08025cc8

080205fc <std>:
 80205fc:	2300      	movs	r3, #0
 80205fe:	b510      	push	{r4, lr}
 8020600:	4604      	mov	r4, r0
 8020602:	e9c0 3300 	strd	r3, r3, [r0]
 8020606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802060a:	6083      	str	r3, [r0, #8]
 802060c:	8181      	strh	r1, [r0, #12]
 802060e:	6643      	str	r3, [r0, #100]	; 0x64
 8020610:	81c2      	strh	r2, [r0, #14]
 8020612:	6183      	str	r3, [r0, #24]
 8020614:	4619      	mov	r1, r3
 8020616:	2208      	movs	r2, #8
 8020618:	305c      	adds	r0, #92	; 0x5c
 802061a:	f000 fbb7 	bl	8020d8c <memset>
 802061e:	4b0d      	ldr	r3, [pc, #52]	; (8020654 <std+0x58>)
 8020620:	6263      	str	r3, [r4, #36]	; 0x24
 8020622:	4b0d      	ldr	r3, [pc, #52]	; (8020658 <std+0x5c>)
 8020624:	62a3      	str	r3, [r4, #40]	; 0x28
 8020626:	4b0d      	ldr	r3, [pc, #52]	; (802065c <std+0x60>)
 8020628:	62e3      	str	r3, [r4, #44]	; 0x2c
 802062a:	4b0d      	ldr	r3, [pc, #52]	; (8020660 <std+0x64>)
 802062c:	6323      	str	r3, [r4, #48]	; 0x30
 802062e:	4b0d      	ldr	r3, [pc, #52]	; (8020664 <std+0x68>)
 8020630:	6224      	str	r4, [r4, #32]
 8020632:	429c      	cmp	r4, r3
 8020634:	d006      	beq.n	8020644 <std+0x48>
 8020636:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802063a:	4294      	cmp	r4, r2
 802063c:	d002      	beq.n	8020644 <std+0x48>
 802063e:	33d0      	adds	r3, #208	; 0xd0
 8020640:	429c      	cmp	r4, r3
 8020642:	d105      	bne.n	8020650 <std+0x54>
 8020644:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802064c:	f000 bc60 	b.w	8020f10 <__retarget_lock_init_recursive>
 8020650:	bd10      	pop	{r4, pc}
 8020652:	bf00      	nop
 8020654:	08020b15 	.word	0x08020b15
 8020658:	08020b37 	.word	0x08020b37
 802065c:	08020b6f 	.word	0x08020b6f
 8020660:	08020b93 	.word	0x08020b93
 8020664:	2001706c 	.word	0x2001706c

08020668 <stdio_exit_handler>:
 8020668:	4a02      	ldr	r2, [pc, #8]	; (8020674 <stdio_exit_handler+0xc>)
 802066a:	4903      	ldr	r1, [pc, #12]	; (8020678 <stdio_exit_handler+0x10>)
 802066c:	4803      	ldr	r0, [pc, #12]	; (802067c <stdio_exit_handler+0x14>)
 802066e:	f000 b869 	b.w	8020744 <_fwalk_sglue>
 8020672:	bf00      	nop
 8020674:	20000980 	.word	0x20000980
 8020678:	0802387d 	.word	0x0802387d
 802067c:	2000098c 	.word	0x2000098c

08020680 <cleanup_stdio>:
 8020680:	6841      	ldr	r1, [r0, #4]
 8020682:	4b0c      	ldr	r3, [pc, #48]	; (80206b4 <cleanup_stdio+0x34>)
 8020684:	4299      	cmp	r1, r3
 8020686:	b510      	push	{r4, lr}
 8020688:	4604      	mov	r4, r0
 802068a:	d001      	beq.n	8020690 <cleanup_stdio+0x10>
 802068c:	f003 f8f6 	bl	802387c <_fflush_r>
 8020690:	68a1      	ldr	r1, [r4, #8]
 8020692:	4b09      	ldr	r3, [pc, #36]	; (80206b8 <cleanup_stdio+0x38>)
 8020694:	4299      	cmp	r1, r3
 8020696:	d002      	beq.n	802069e <cleanup_stdio+0x1e>
 8020698:	4620      	mov	r0, r4
 802069a:	f003 f8ef 	bl	802387c <_fflush_r>
 802069e:	68e1      	ldr	r1, [r4, #12]
 80206a0:	4b06      	ldr	r3, [pc, #24]	; (80206bc <cleanup_stdio+0x3c>)
 80206a2:	4299      	cmp	r1, r3
 80206a4:	d004      	beq.n	80206b0 <cleanup_stdio+0x30>
 80206a6:	4620      	mov	r0, r4
 80206a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206ac:	f003 b8e6 	b.w	802387c <_fflush_r>
 80206b0:	bd10      	pop	{r4, pc}
 80206b2:	bf00      	nop
 80206b4:	2001706c 	.word	0x2001706c
 80206b8:	200170d4 	.word	0x200170d4
 80206bc:	2001713c 	.word	0x2001713c

080206c0 <global_stdio_init.part.0>:
 80206c0:	b510      	push	{r4, lr}
 80206c2:	4b0b      	ldr	r3, [pc, #44]	; (80206f0 <global_stdio_init.part.0+0x30>)
 80206c4:	4c0b      	ldr	r4, [pc, #44]	; (80206f4 <global_stdio_init.part.0+0x34>)
 80206c6:	4a0c      	ldr	r2, [pc, #48]	; (80206f8 <global_stdio_init.part.0+0x38>)
 80206c8:	601a      	str	r2, [r3, #0]
 80206ca:	4620      	mov	r0, r4
 80206cc:	2200      	movs	r2, #0
 80206ce:	2104      	movs	r1, #4
 80206d0:	f7ff ff94 	bl	80205fc <std>
 80206d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80206d8:	2201      	movs	r2, #1
 80206da:	2109      	movs	r1, #9
 80206dc:	f7ff ff8e 	bl	80205fc <std>
 80206e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80206e4:	2202      	movs	r2, #2
 80206e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206ea:	2112      	movs	r1, #18
 80206ec:	f7ff bf86 	b.w	80205fc <std>
 80206f0:	200171a4 	.word	0x200171a4
 80206f4:	2001706c 	.word	0x2001706c
 80206f8:	08020669 	.word	0x08020669

080206fc <__sfp_lock_acquire>:
 80206fc:	4801      	ldr	r0, [pc, #4]	; (8020704 <__sfp_lock_acquire+0x8>)
 80206fe:	f000 bc08 	b.w	8020f12 <__retarget_lock_acquire_recursive>
 8020702:	bf00      	nop
 8020704:	200171ae 	.word	0x200171ae

08020708 <__sfp_lock_release>:
 8020708:	4801      	ldr	r0, [pc, #4]	; (8020710 <__sfp_lock_release+0x8>)
 802070a:	f000 bc03 	b.w	8020f14 <__retarget_lock_release_recursive>
 802070e:	bf00      	nop
 8020710:	200171ae 	.word	0x200171ae

08020714 <__sinit>:
 8020714:	b510      	push	{r4, lr}
 8020716:	4604      	mov	r4, r0
 8020718:	f7ff fff0 	bl	80206fc <__sfp_lock_acquire>
 802071c:	6a23      	ldr	r3, [r4, #32]
 802071e:	b11b      	cbz	r3, 8020728 <__sinit+0x14>
 8020720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020724:	f7ff bff0 	b.w	8020708 <__sfp_lock_release>
 8020728:	4b04      	ldr	r3, [pc, #16]	; (802073c <__sinit+0x28>)
 802072a:	6223      	str	r3, [r4, #32]
 802072c:	4b04      	ldr	r3, [pc, #16]	; (8020740 <__sinit+0x2c>)
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	2b00      	cmp	r3, #0
 8020732:	d1f5      	bne.n	8020720 <__sinit+0xc>
 8020734:	f7ff ffc4 	bl	80206c0 <global_stdio_init.part.0>
 8020738:	e7f2      	b.n	8020720 <__sinit+0xc>
 802073a:	bf00      	nop
 802073c:	08020681 	.word	0x08020681
 8020740:	200171a4 	.word	0x200171a4

08020744 <_fwalk_sglue>:
 8020744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020748:	4607      	mov	r7, r0
 802074a:	4688      	mov	r8, r1
 802074c:	4614      	mov	r4, r2
 802074e:	2600      	movs	r6, #0
 8020750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020754:	f1b9 0901 	subs.w	r9, r9, #1
 8020758:	d505      	bpl.n	8020766 <_fwalk_sglue+0x22>
 802075a:	6824      	ldr	r4, [r4, #0]
 802075c:	2c00      	cmp	r4, #0
 802075e:	d1f7      	bne.n	8020750 <_fwalk_sglue+0xc>
 8020760:	4630      	mov	r0, r6
 8020762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020766:	89ab      	ldrh	r3, [r5, #12]
 8020768:	2b01      	cmp	r3, #1
 802076a:	d907      	bls.n	802077c <_fwalk_sglue+0x38>
 802076c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020770:	3301      	adds	r3, #1
 8020772:	d003      	beq.n	802077c <_fwalk_sglue+0x38>
 8020774:	4629      	mov	r1, r5
 8020776:	4638      	mov	r0, r7
 8020778:	47c0      	blx	r8
 802077a:	4306      	orrs	r6, r0
 802077c:	3568      	adds	r5, #104	; 0x68
 802077e:	e7e9      	b.n	8020754 <_fwalk_sglue+0x10>

08020780 <_fwrite_r>:
 8020780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020784:	9c08      	ldr	r4, [sp, #32]
 8020786:	468a      	mov	sl, r1
 8020788:	4690      	mov	r8, r2
 802078a:	fb02 f903 	mul.w	r9, r2, r3
 802078e:	4606      	mov	r6, r0
 8020790:	b118      	cbz	r0, 802079a <_fwrite_r+0x1a>
 8020792:	6a03      	ldr	r3, [r0, #32]
 8020794:	b90b      	cbnz	r3, 802079a <_fwrite_r+0x1a>
 8020796:	f7ff ffbd 	bl	8020714 <__sinit>
 802079a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802079c:	07dd      	lsls	r5, r3, #31
 802079e:	d405      	bmi.n	80207ac <_fwrite_r+0x2c>
 80207a0:	89a3      	ldrh	r3, [r4, #12]
 80207a2:	0598      	lsls	r0, r3, #22
 80207a4:	d402      	bmi.n	80207ac <_fwrite_r+0x2c>
 80207a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80207a8:	f000 fbb3 	bl	8020f12 <__retarget_lock_acquire_recursive>
 80207ac:	89a3      	ldrh	r3, [r4, #12]
 80207ae:	0719      	lsls	r1, r3, #28
 80207b0:	d516      	bpl.n	80207e0 <_fwrite_r+0x60>
 80207b2:	6923      	ldr	r3, [r4, #16]
 80207b4:	b1a3      	cbz	r3, 80207e0 <_fwrite_r+0x60>
 80207b6:	2500      	movs	r5, #0
 80207b8:	454d      	cmp	r5, r9
 80207ba:	d01f      	beq.n	80207fc <_fwrite_r+0x7c>
 80207bc:	68a7      	ldr	r7, [r4, #8]
 80207be:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80207c2:	3f01      	subs	r7, #1
 80207c4:	2f00      	cmp	r7, #0
 80207c6:	60a7      	str	r7, [r4, #8]
 80207c8:	da04      	bge.n	80207d4 <_fwrite_r+0x54>
 80207ca:	69a3      	ldr	r3, [r4, #24]
 80207cc:	429f      	cmp	r7, r3
 80207ce:	db0f      	blt.n	80207f0 <_fwrite_r+0x70>
 80207d0:	290a      	cmp	r1, #10
 80207d2:	d00d      	beq.n	80207f0 <_fwrite_r+0x70>
 80207d4:	6823      	ldr	r3, [r4, #0]
 80207d6:	1c5a      	adds	r2, r3, #1
 80207d8:	6022      	str	r2, [r4, #0]
 80207da:	7019      	strb	r1, [r3, #0]
 80207dc:	3501      	adds	r5, #1
 80207de:	e7eb      	b.n	80207b8 <_fwrite_r+0x38>
 80207e0:	4621      	mov	r1, r4
 80207e2:	4630      	mov	r0, r6
 80207e4:	f000 fa50 	bl	8020c88 <__swsetup_r>
 80207e8:	2800      	cmp	r0, #0
 80207ea:	d0e4      	beq.n	80207b6 <_fwrite_r+0x36>
 80207ec:	2500      	movs	r5, #0
 80207ee:	e005      	b.n	80207fc <_fwrite_r+0x7c>
 80207f0:	4622      	mov	r2, r4
 80207f2:	4630      	mov	r0, r6
 80207f4:	f000 fa0a 	bl	8020c0c <__swbuf_r>
 80207f8:	3001      	adds	r0, #1
 80207fa:	d1ef      	bne.n	80207dc <_fwrite_r+0x5c>
 80207fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80207fe:	07da      	lsls	r2, r3, #31
 8020800:	d405      	bmi.n	802080e <_fwrite_r+0x8e>
 8020802:	89a3      	ldrh	r3, [r4, #12]
 8020804:	059b      	lsls	r3, r3, #22
 8020806:	d402      	bmi.n	802080e <_fwrite_r+0x8e>
 8020808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802080a:	f000 fb83 	bl	8020f14 <__retarget_lock_release_recursive>
 802080e:	fbb5 f0f8 	udiv	r0, r5, r8
 8020812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020818 <fwrite>:
 8020818:	b507      	push	{r0, r1, r2, lr}
 802081a:	9300      	str	r3, [sp, #0]
 802081c:	4613      	mov	r3, r2
 802081e:	460a      	mov	r2, r1
 8020820:	4601      	mov	r1, r0
 8020822:	4803      	ldr	r0, [pc, #12]	; (8020830 <fwrite+0x18>)
 8020824:	6800      	ldr	r0, [r0, #0]
 8020826:	f7ff ffab 	bl	8020780 <_fwrite_r>
 802082a:	b003      	add	sp, #12
 802082c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020830:	200009d8 	.word	0x200009d8

08020834 <iprintf>:
 8020834:	b40f      	push	{r0, r1, r2, r3}
 8020836:	b507      	push	{r0, r1, r2, lr}
 8020838:	4906      	ldr	r1, [pc, #24]	; (8020854 <iprintf+0x20>)
 802083a:	ab04      	add	r3, sp, #16
 802083c:	6808      	ldr	r0, [r1, #0]
 802083e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020842:	6881      	ldr	r1, [r0, #8]
 8020844:	9301      	str	r3, [sp, #4]
 8020846:	f002 fe79 	bl	802353c <_vfiprintf_r>
 802084a:	b003      	add	sp, #12
 802084c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020850:	b004      	add	sp, #16
 8020852:	4770      	bx	lr
 8020854:	200009d8 	.word	0x200009d8

08020858 <_puts_r>:
 8020858:	6a03      	ldr	r3, [r0, #32]
 802085a:	b570      	push	{r4, r5, r6, lr}
 802085c:	6884      	ldr	r4, [r0, #8]
 802085e:	4605      	mov	r5, r0
 8020860:	460e      	mov	r6, r1
 8020862:	b90b      	cbnz	r3, 8020868 <_puts_r+0x10>
 8020864:	f7ff ff56 	bl	8020714 <__sinit>
 8020868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802086a:	07db      	lsls	r3, r3, #31
 802086c:	d405      	bmi.n	802087a <_puts_r+0x22>
 802086e:	89a3      	ldrh	r3, [r4, #12]
 8020870:	0598      	lsls	r0, r3, #22
 8020872:	d402      	bmi.n	802087a <_puts_r+0x22>
 8020874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020876:	f000 fb4c 	bl	8020f12 <__retarget_lock_acquire_recursive>
 802087a:	89a3      	ldrh	r3, [r4, #12]
 802087c:	0719      	lsls	r1, r3, #28
 802087e:	d513      	bpl.n	80208a8 <_puts_r+0x50>
 8020880:	6923      	ldr	r3, [r4, #16]
 8020882:	b18b      	cbz	r3, 80208a8 <_puts_r+0x50>
 8020884:	3e01      	subs	r6, #1
 8020886:	68a3      	ldr	r3, [r4, #8]
 8020888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802088c:	3b01      	subs	r3, #1
 802088e:	60a3      	str	r3, [r4, #8]
 8020890:	b9e9      	cbnz	r1, 80208ce <_puts_r+0x76>
 8020892:	2b00      	cmp	r3, #0
 8020894:	da2e      	bge.n	80208f4 <_puts_r+0x9c>
 8020896:	4622      	mov	r2, r4
 8020898:	210a      	movs	r1, #10
 802089a:	4628      	mov	r0, r5
 802089c:	f000 f9b6 	bl	8020c0c <__swbuf_r>
 80208a0:	3001      	adds	r0, #1
 80208a2:	d007      	beq.n	80208b4 <_puts_r+0x5c>
 80208a4:	250a      	movs	r5, #10
 80208a6:	e007      	b.n	80208b8 <_puts_r+0x60>
 80208a8:	4621      	mov	r1, r4
 80208aa:	4628      	mov	r0, r5
 80208ac:	f000 f9ec 	bl	8020c88 <__swsetup_r>
 80208b0:	2800      	cmp	r0, #0
 80208b2:	d0e7      	beq.n	8020884 <_puts_r+0x2c>
 80208b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80208b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80208ba:	07da      	lsls	r2, r3, #31
 80208bc:	d405      	bmi.n	80208ca <_puts_r+0x72>
 80208be:	89a3      	ldrh	r3, [r4, #12]
 80208c0:	059b      	lsls	r3, r3, #22
 80208c2:	d402      	bmi.n	80208ca <_puts_r+0x72>
 80208c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80208c6:	f000 fb25 	bl	8020f14 <__retarget_lock_release_recursive>
 80208ca:	4628      	mov	r0, r5
 80208cc:	bd70      	pop	{r4, r5, r6, pc}
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	da04      	bge.n	80208dc <_puts_r+0x84>
 80208d2:	69a2      	ldr	r2, [r4, #24]
 80208d4:	429a      	cmp	r2, r3
 80208d6:	dc06      	bgt.n	80208e6 <_puts_r+0x8e>
 80208d8:	290a      	cmp	r1, #10
 80208da:	d004      	beq.n	80208e6 <_puts_r+0x8e>
 80208dc:	6823      	ldr	r3, [r4, #0]
 80208de:	1c5a      	adds	r2, r3, #1
 80208e0:	6022      	str	r2, [r4, #0]
 80208e2:	7019      	strb	r1, [r3, #0]
 80208e4:	e7cf      	b.n	8020886 <_puts_r+0x2e>
 80208e6:	4622      	mov	r2, r4
 80208e8:	4628      	mov	r0, r5
 80208ea:	f000 f98f 	bl	8020c0c <__swbuf_r>
 80208ee:	3001      	adds	r0, #1
 80208f0:	d1c9      	bne.n	8020886 <_puts_r+0x2e>
 80208f2:	e7df      	b.n	80208b4 <_puts_r+0x5c>
 80208f4:	6823      	ldr	r3, [r4, #0]
 80208f6:	250a      	movs	r5, #10
 80208f8:	1c5a      	adds	r2, r3, #1
 80208fa:	6022      	str	r2, [r4, #0]
 80208fc:	701d      	strb	r5, [r3, #0]
 80208fe:	e7db      	b.n	80208b8 <_puts_r+0x60>

08020900 <puts>:
 8020900:	4b02      	ldr	r3, [pc, #8]	; (802090c <puts+0xc>)
 8020902:	4601      	mov	r1, r0
 8020904:	6818      	ldr	r0, [r3, #0]
 8020906:	f7ff bfa7 	b.w	8020858 <_puts_r>
 802090a:	bf00      	nop
 802090c:	200009d8 	.word	0x200009d8

08020910 <setvbuf>:
 8020910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020914:	461d      	mov	r5, r3
 8020916:	4b54      	ldr	r3, [pc, #336]	; (8020a68 <setvbuf+0x158>)
 8020918:	681f      	ldr	r7, [r3, #0]
 802091a:	4604      	mov	r4, r0
 802091c:	460e      	mov	r6, r1
 802091e:	4690      	mov	r8, r2
 8020920:	b127      	cbz	r7, 802092c <setvbuf+0x1c>
 8020922:	6a3b      	ldr	r3, [r7, #32]
 8020924:	b913      	cbnz	r3, 802092c <setvbuf+0x1c>
 8020926:	4638      	mov	r0, r7
 8020928:	f7ff fef4 	bl	8020714 <__sinit>
 802092c:	f1b8 0f02 	cmp.w	r8, #2
 8020930:	d006      	beq.n	8020940 <setvbuf+0x30>
 8020932:	f1b8 0f01 	cmp.w	r8, #1
 8020936:	f200 8094 	bhi.w	8020a62 <setvbuf+0x152>
 802093a:	2d00      	cmp	r5, #0
 802093c:	f2c0 8091 	blt.w	8020a62 <setvbuf+0x152>
 8020940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020942:	07da      	lsls	r2, r3, #31
 8020944:	d405      	bmi.n	8020952 <setvbuf+0x42>
 8020946:	89a3      	ldrh	r3, [r4, #12]
 8020948:	059b      	lsls	r3, r3, #22
 802094a:	d402      	bmi.n	8020952 <setvbuf+0x42>
 802094c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802094e:	f000 fae0 	bl	8020f12 <__retarget_lock_acquire_recursive>
 8020952:	4621      	mov	r1, r4
 8020954:	4638      	mov	r0, r7
 8020956:	f002 ff91 	bl	802387c <_fflush_r>
 802095a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802095c:	b141      	cbz	r1, 8020970 <setvbuf+0x60>
 802095e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020962:	4299      	cmp	r1, r3
 8020964:	d002      	beq.n	802096c <setvbuf+0x5c>
 8020966:	4638      	mov	r0, r7
 8020968:	f001 f912 	bl	8021b90 <_free_r>
 802096c:	2300      	movs	r3, #0
 802096e:	6363      	str	r3, [r4, #52]	; 0x34
 8020970:	2300      	movs	r3, #0
 8020972:	61a3      	str	r3, [r4, #24]
 8020974:	6063      	str	r3, [r4, #4]
 8020976:	89a3      	ldrh	r3, [r4, #12]
 8020978:	0618      	lsls	r0, r3, #24
 802097a:	d503      	bpl.n	8020984 <setvbuf+0x74>
 802097c:	6921      	ldr	r1, [r4, #16]
 802097e:	4638      	mov	r0, r7
 8020980:	f001 f906 	bl	8021b90 <_free_r>
 8020984:	89a3      	ldrh	r3, [r4, #12]
 8020986:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 802098a:	f023 0303 	bic.w	r3, r3, #3
 802098e:	f1b8 0f02 	cmp.w	r8, #2
 8020992:	81a3      	strh	r3, [r4, #12]
 8020994:	d05f      	beq.n	8020a56 <setvbuf+0x146>
 8020996:	ab01      	add	r3, sp, #4
 8020998:	466a      	mov	r2, sp
 802099a:	4621      	mov	r1, r4
 802099c:	4638      	mov	r0, r7
 802099e:	f002 ffa7 	bl	80238f0 <__swhatbuf_r>
 80209a2:	89a3      	ldrh	r3, [r4, #12]
 80209a4:	4318      	orrs	r0, r3
 80209a6:	81a0      	strh	r0, [r4, #12]
 80209a8:	bb2d      	cbnz	r5, 80209f6 <setvbuf+0xe6>
 80209aa:	9d00      	ldr	r5, [sp, #0]
 80209ac:	4628      	mov	r0, r5
 80209ae:	f7fe fe09 	bl	801f5c4 <malloc>
 80209b2:	4606      	mov	r6, r0
 80209b4:	2800      	cmp	r0, #0
 80209b6:	d150      	bne.n	8020a5a <setvbuf+0x14a>
 80209b8:	f8dd 9000 	ldr.w	r9, [sp]
 80209bc:	45a9      	cmp	r9, r5
 80209be:	d13e      	bne.n	8020a3e <setvbuf+0x12e>
 80209c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80209c4:	2200      	movs	r2, #0
 80209c6:	60a2      	str	r2, [r4, #8]
 80209c8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80209cc:	6022      	str	r2, [r4, #0]
 80209ce:	6122      	str	r2, [r4, #16]
 80209d0:	2201      	movs	r2, #1
 80209d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80209d6:	6162      	str	r2, [r4, #20]
 80209d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80209da:	f043 0302 	orr.w	r3, r3, #2
 80209de:	07d1      	lsls	r1, r2, #31
 80209e0:	81a3      	strh	r3, [r4, #12]
 80209e2:	d404      	bmi.n	80209ee <setvbuf+0xde>
 80209e4:	059b      	lsls	r3, r3, #22
 80209e6:	d402      	bmi.n	80209ee <setvbuf+0xde>
 80209e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209ea:	f000 fa93 	bl	8020f14 <__retarget_lock_release_recursive>
 80209ee:	4628      	mov	r0, r5
 80209f0:	b003      	add	sp, #12
 80209f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80209f6:	2e00      	cmp	r6, #0
 80209f8:	d0d8      	beq.n	80209ac <setvbuf+0x9c>
 80209fa:	6a3b      	ldr	r3, [r7, #32]
 80209fc:	b913      	cbnz	r3, 8020a04 <setvbuf+0xf4>
 80209fe:	4638      	mov	r0, r7
 8020a00:	f7ff fe88 	bl	8020714 <__sinit>
 8020a04:	f1b8 0f01 	cmp.w	r8, #1
 8020a08:	bf08      	it	eq
 8020a0a:	89a3      	ldrheq	r3, [r4, #12]
 8020a0c:	6026      	str	r6, [r4, #0]
 8020a0e:	bf04      	itt	eq
 8020a10:	f043 0301 	orreq.w	r3, r3, #1
 8020a14:	81a3      	strheq	r3, [r4, #12]
 8020a16:	89a3      	ldrh	r3, [r4, #12]
 8020a18:	f013 0208 	ands.w	r2, r3, #8
 8020a1c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8020a20:	d01d      	beq.n	8020a5e <setvbuf+0x14e>
 8020a22:	07da      	lsls	r2, r3, #31
 8020a24:	bf41      	itttt	mi
 8020a26:	2200      	movmi	r2, #0
 8020a28:	426d      	negmi	r5, r5
 8020a2a:	60a2      	strmi	r2, [r4, #8]
 8020a2c:	61a5      	strmi	r5, [r4, #24]
 8020a2e:	bf58      	it	pl
 8020a30:	60a5      	strpl	r5, [r4, #8]
 8020a32:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8020a34:	f015 0501 	ands.w	r5, r5, #1
 8020a38:	d0d4      	beq.n	80209e4 <setvbuf+0xd4>
 8020a3a:	2500      	movs	r5, #0
 8020a3c:	e7d7      	b.n	80209ee <setvbuf+0xde>
 8020a3e:	4648      	mov	r0, r9
 8020a40:	f7fe fdc0 	bl	801f5c4 <malloc>
 8020a44:	4606      	mov	r6, r0
 8020a46:	2800      	cmp	r0, #0
 8020a48:	d0ba      	beq.n	80209c0 <setvbuf+0xb0>
 8020a4a:	89a3      	ldrh	r3, [r4, #12]
 8020a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020a50:	81a3      	strh	r3, [r4, #12]
 8020a52:	464d      	mov	r5, r9
 8020a54:	e7d1      	b.n	80209fa <setvbuf+0xea>
 8020a56:	2500      	movs	r5, #0
 8020a58:	e7b4      	b.n	80209c4 <setvbuf+0xb4>
 8020a5a:	46a9      	mov	r9, r5
 8020a5c:	e7f5      	b.n	8020a4a <setvbuf+0x13a>
 8020a5e:	60a2      	str	r2, [r4, #8]
 8020a60:	e7e7      	b.n	8020a32 <setvbuf+0x122>
 8020a62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020a66:	e7c2      	b.n	80209ee <setvbuf+0xde>
 8020a68:	200009d8 	.word	0x200009d8

08020a6c <sniprintf>:
 8020a6c:	b40c      	push	{r2, r3}
 8020a6e:	b530      	push	{r4, r5, lr}
 8020a70:	4b17      	ldr	r3, [pc, #92]	; (8020ad0 <sniprintf+0x64>)
 8020a72:	1e0c      	subs	r4, r1, #0
 8020a74:	681d      	ldr	r5, [r3, #0]
 8020a76:	b09d      	sub	sp, #116	; 0x74
 8020a78:	da08      	bge.n	8020a8c <sniprintf+0x20>
 8020a7a:	238b      	movs	r3, #139	; 0x8b
 8020a7c:	602b      	str	r3, [r5, #0]
 8020a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a82:	b01d      	add	sp, #116	; 0x74
 8020a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020a88:	b002      	add	sp, #8
 8020a8a:	4770      	bx	lr
 8020a8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020a90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020a94:	bf14      	ite	ne
 8020a96:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020a9a:	4623      	moveq	r3, r4
 8020a9c:	9304      	str	r3, [sp, #16]
 8020a9e:	9307      	str	r3, [sp, #28]
 8020aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020aa4:	9002      	str	r0, [sp, #8]
 8020aa6:	9006      	str	r0, [sp, #24]
 8020aa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020aac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020aae:	ab21      	add	r3, sp, #132	; 0x84
 8020ab0:	a902      	add	r1, sp, #8
 8020ab2:	4628      	mov	r0, r5
 8020ab4:	9301      	str	r3, [sp, #4]
 8020ab6:	f002 fc19 	bl	80232ec <_svfiprintf_r>
 8020aba:	1c43      	adds	r3, r0, #1
 8020abc:	bfbc      	itt	lt
 8020abe:	238b      	movlt	r3, #139	; 0x8b
 8020ac0:	602b      	strlt	r3, [r5, #0]
 8020ac2:	2c00      	cmp	r4, #0
 8020ac4:	d0dd      	beq.n	8020a82 <sniprintf+0x16>
 8020ac6:	9b02      	ldr	r3, [sp, #8]
 8020ac8:	2200      	movs	r2, #0
 8020aca:	701a      	strb	r2, [r3, #0]
 8020acc:	e7d9      	b.n	8020a82 <sniprintf+0x16>
 8020ace:	bf00      	nop
 8020ad0:	200009d8 	.word	0x200009d8

08020ad4 <siprintf>:
 8020ad4:	b40e      	push	{r1, r2, r3}
 8020ad6:	b500      	push	{lr}
 8020ad8:	b09c      	sub	sp, #112	; 0x70
 8020ada:	ab1d      	add	r3, sp, #116	; 0x74
 8020adc:	9002      	str	r0, [sp, #8]
 8020ade:	9006      	str	r0, [sp, #24]
 8020ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020ae4:	4809      	ldr	r0, [pc, #36]	; (8020b0c <siprintf+0x38>)
 8020ae6:	9107      	str	r1, [sp, #28]
 8020ae8:	9104      	str	r1, [sp, #16]
 8020aea:	4909      	ldr	r1, [pc, #36]	; (8020b10 <siprintf+0x3c>)
 8020aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8020af0:	9105      	str	r1, [sp, #20]
 8020af2:	6800      	ldr	r0, [r0, #0]
 8020af4:	9301      	str	r3, [sp, #4]
 8020af6:	a902      	add	r1, sp, #8
 8020af8:	f002 fbf8 	bl	80232ec <_svfiprintf_r>
 8020afc:	9b02      	ldr	r3, [sp, #8]
 8020afe:	2200      	movs	r2, #0
 8020b00:	701a      	strb	r2, [r3, #0]
 8020b02:	b01c      	add	sp, #112	; 0x70
 8020b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8020b08:	b003      	add	sp, #12
 8020b0a:	4770      	bx	lr
 8020b0c:	200009d8 	.word	0x200009d8
 8020b10:	ffff0208 	.word	0xffff0208

08020b14 <__sread>:
 8020b14:	b510      	push	{r4, lr}
 8020b16:	460c      	mov	r4, r1
 8020b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b1c:	f000 f99a 	bl	8020e54 <_read_r>
 8020b20:	2800      	cmp	r0, #0
 8020b22:	bfab      	itete	ge
 8020b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020b26:	89a3      	ldrhlt	r3, [r4, #12]
 8020b28:	181b      	addge	r3, r3, r0
 8020b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020b2e:	bfac      	ite	ge
 8020b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8020b32:	81a3      	strhlt	r3, [r4, #12]
 8020b34:	bd10      	pop	{r4, pc}

08020b36 <__swrite>:
 8020b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b3a:	461f      	mov	r7, r3
 8020b3c:	898b      	ldrh	r3, [r1, #12]
 8020b3e:	05db      	lsls	r3, r3, #23
 8020b40:	4605      	mov	r5, r0
 8020b42:	460c      	mov	r4, r1
 8020b44:	4616      	mov	r6, r2
 8020b46:	d505      	bpl.n	8020b54 <__swrite+0x1e>
 8020b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b4c:	2302      	movs	r3, #2
 8020b4e:	2200      	movs	r2, #0
 8020b50:	f000 f96e 	bl	8020e30 <_lseek_r>
 8020b54:	89a3      	ldrh	r3, [r4, #12]
 8020b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020b5e:	81a3      	strh	r3, [r4, #12]
 8020b60:	4632      	mov	r2, r6
 8020b62:	463b      	mov	r3, r7
 8020b64:	4628      	mov	r0, r5
 8020b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020b6a:	f000 b995 	b.w	8020e98 <_write_r>

08020b6e <__sseek>:
 8020b6e:	b510      	push	{r4, lr}
 8020b70:	460c      	mov	r4, r1
 8020b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b76:	f000 f95b 	bl	8020e30 <_lseek_r>
 8020b7a:	1c43      	adds	r3, r0, #1
 8020b7c:	89a3      	ldrh	r3, [r4, #12]
 8020b7e:	bf15      	itete	ne
 8020b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8020b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020b8a:	81a3      	strheq	r3, [r4, #12]
 8020b8c:	bf18      	it	ne
 8020b8e:	81a3      	strhne	r3, [r4, #12]
 8020b90:	bd10      	pop	{r4, pc}

08020b92 <__sclose>:
 8020b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b96:	f000 b93b 	b.w	8020e10 <_close_r>

08020b9a <_vsniprintf_r>:
 8020b9a:	b530      	push	{r4, r5, lr}
 8020b9c:	4614      	mov	r4, r2
 8020b9e:	2c00      	cmp	r4, #0
 8020ba0:	b09b      	sub	sp, #108	; 0x6c
 8020ba2:	4605      	mov	r5, r0
 8020ba4:	461a      	mov	r2, r3
 8020ba6:	da05      	bge.n	8020bb4 <_vsniprintf_r+0x1a>
 8020ba8:	238b      	movs	r3, #139	; 0x8b
 8020baa:	6003      	str	r3, [r0, #0]
 8020bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020bb0:	b01b      	add	sp, #108	; 0x6c
 8020bb2:	bd30      	pop	{r4, r5, pc}
 8020bb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020bb8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020bbc:	bf14      	ite	ne
 8020bbe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020bc2:	4623      	moveq	r3, r4
 8020bc4:	9302      	str	r3, [sp, #8]
 8020bc6:	9305      	str	r3, [sp, #20]
 8020bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020bcc:	9100      	str	r1, [sp, #0]
 8020bce:	9104      	str	r1, [sp, #16]
 8020bd0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020bd4:	4669      	mov	r1, sp
 8020bd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020bd8:	f002 fb88 	bl	80232ec <_svfiprintf_r>
 8020bdc:	1c43      	adds	r3, r0, #1
 8020bde:	bfbc      	itt	lt
 8020be0:	238b      	movlt	r3, #139	; 0x8b
 8020be2:	602b      	strlt	r3, [r5, #0]
 8020be4:	2c00      	cmp	r4, #0
 8020be6:	d0e3      	beq.n	8020bb0 <_vsniprintf_r+0x16>
 8020be8:	9b00      	ldr	r3, [sp, #0]
 8020bea:	2200      	movs	r2, #0
 8020bec:	701a      	strb	r2, [r3, #0]
 8020bee:	e7df      	b.n	8020bb0 <_vsniprintf_r+0x16>

08020bf0 <vsniprintf>:
 8020bf0:	b507      	push	{r0, r1, r2, lr}
 8020bf2:	9300      	str	r3, [sp, #0]
 8020bf4:	4613      	mov	r3, r2
 8020bf6:	460a      	mov	r2, r1
 8020bf8:	4601      	mov	r1, r0
 8020bfa:	4803      	ldr	r0, [pc, #12]	; (8020c08 <vsniprintf+0x18>)
 8020bfc:	6800      	ldr	r0, [r0, #0]
 8020bfe:	f7ff ffcc 	bl	8020b9a <_vsniprintf_r>
 8020c02:	b003      	add	sp, #12
 8020c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8020c08:	200009d8 	.word	0x200009d8

08020c0c <__swbuf_r>:
 8020c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c0e:	460e      	mov	r6, r1
 8020c10:	4614      	mov	r4, r2
 8020c12:	4605      	mov	r5, r0
 8020c14:	b118      	cbz	r0, 8020c1e <__swbuf_r+0x12>
 8020c16:	6a03      	ldr	r3, [r0, #32]
 8020c18:	b90b      	cbnz	r3, 8020c1e <__swbuf_r+0x12>
 8020c1a:	f7ff fd7b 	bl	8020714 <__sinit>
 8020c1e:	69a3      	ldr	r3, [r4, #24]
 8020c20:	60a3      	str	r3, [r4, #8]
 8020c22:	89a3      	ldrh	r3, [r4, #12]
 8020c24:	071a      	lsls	r2, r3, #28
 8020c26:	d525      	bpl.n	8020c74 <__swbuf_r+0x68>
 8020c28:	6923      	ldr	r3, [r4, #16]
 8020c2a:	b31b      	cbz	r3, 8020c74 <__swbuf_r+0x68>
 8020c2c:	6823      	ldr	r3, [r4, #0]
 8020c2e:	6922      	ldr	r2, [r4, #16]
 8020c30:	1a98      	subs	r0, r3, r2
 8020c32:	6963      	ldr	r3, [r4, #20]
 8020c34:	b2f6      	uxtb	r6, r6
 8020c36:	4283      	cmp	r3, r0
 8020c38:	4637      	mov	r7, r6
 8020c3a:	dc04      	bgt.n	8020c46 <__swbuf_r+0x3a>
 8020c3c:	4621      	mov	r1, r4
 8020c3e:	4628      	mov	r0, r5
 8020c40:	f002 fe1c 	bl	802387c <_fflush_r>
 8020c44:	b9e0      	cbnz	r0, 8020c80 <__swbuf_r+0x74>
 8020c46:	68a3      	ldr	r3, [r4, #8]
 8020c48:	3b01      	subs	r3, #1
 8020c4a:	60a3      	str	r3, [r4, #8]
 8020c4c:	6823      	ldr	r3, [r4, #0]
 8020c4e:	1c5a      	adds	r2, r3, #1
 8020c50:	6022      	str	r2, [r4, #0]
 8020c52:	701e      	strb	r6, [r3, #0]
 8020c54:	6962      	ldr	r2, [r4, #20]
 8020c56:	1c43      	adds	r3, r0, #1
 8020c58:	429a      	cmp	r2, r3
 8020c5a:	d004      	beq.n	8020c66 <__swbuf_r+0x5a>
 8020c5c:	89a3      	ldrh	r3, [r4, #12]
 8020c5e:	07db      	lsls	r3, r3, #31
 8020c60:	d506      	bpl.n	8020c70 <__swbuf_r+0x64>
 8020c62:	2e0a      	cmp	r6, #10
 8020c64:	d104      	bne.n	8020c70 <__swbuf_r+0x64>
 8020c66:	4621      	mov	r1, r4
 8020c68:	4628      	mov	r0, r5
 8020c6a:	f002 fe07 	bl	802387c <_fflush_r>
 8020c6e:	b938      	cbnz	r0, 8020c80 <__swbuf_r+0x74>
 8020c70:	4638      	mov	r0, r7
 8020c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c74:	4621      	mov	r1, r4
 8020c76:	4628      	mov	r0, r5
 8020c78:	f000 f806 	bl	8020c88 <__swsetup_r>
 8020c7c:	2800      	cmp	r0, #0
 8020c7e:	d0d5      	beq.n	8020c2c <__swbuf_r+0x20>
 8020c80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020c84:	e7f4      	b.n	8020c70 <__swbuf_r+0x64>
	...

08020c88 <__swsetup_r>:
 8020c88:	b538      	push	{r3, r4, r5, lr}
 8020c8a:	4b2a      	ldr	r3, [pc, #168]	; (8020d34 <__swsetup_r+0xac>)
 8020c8c:	4605      	mov	r5, r0
 8020c8e:	6818      	ldr	r0, [r3, #0]
 8020c90:	460c      	mov	r4, r1
 8020c92:	b118      	cbz	r0, 8020c9c <__swsetup_r+0x14>
 8020c94:	6a03      	ldr	r3, [r0, #32]
 8020c96:	b90b      	cbnz	r3, 8020c9c <__swsetup_r+0x14>
 8020c98:	f7ff fd3c 	bl	8020714 <__sinit>
 8020c9c:	89a3      	ldrh	r3, [r4, #12]
 8020c9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020ca2:	0718      	lsls	r0, r3, #28
 8020ca4:	d422      	bmi.n	8020cec <__swsetup_r+0x64>
 8020ca6:	06d9      	lsls	r1, r3, #27
 8020ca8:	d407      	bmi.n	8020cba <__swsetup_r+0x32>
 8020caa:	2309      	movs	r3, #9
 8020cac:	602b      	str	r3, [r5, #0]
 8020cae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020cb2:	81a3      	strh	r3, [r4, #12]
 8020cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020cb8:	e034      	b.n	8020d24 <__swsetup_r+0x9c>
 8020cba:	0758      	lsls	r0, r3, #29
 8020cbc:	d512      	bpl.n	8020ce4 <__swsetup_r+0x5c>
 8020cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020cc0:	b141      	cbz	r1, 8020cd4 <__swsetup_r+0x4c>
 8020cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020cc6:	4299      	cmp	r1, r3
 8020cc8:	d002      	beq.n	8020cd0 <__swsetup_r+0x48>
 8020cca:	4628      	mov	r0, r5
 8020ccc:	f000 ff60 	bl	8021b90 <_free_r>
 8020cd0:	2300      	movs	r3, #0
 8020cd2:	6363      	str	r3, [r4, #52]	; 0x34
 8020cd4:	89a3      	ldrh	r3, [r4, #12]
 8020cd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020cda:	81a3      	strh	r3, [r4, #12]
 8020cdc:	2300      	movs	r3, #0
 8020cde:	6063      	str	r3, [r4, #4]
 8020ce0:	6923      	ldr	r3, [r4, #16]
 8020ce2:	6023      	str	r3, [r4, #0]
 8020ce4:	89a3      	ldrh	r3, [r4, #12]
 8020ce6:	f043 0308 	orr.w	r3, r3, #8
 8020cea:	81a3      	strh	r3, [r4, #12]
 8020cec:	6923      	ldr	r3, [r4, #16]
 8020cee:	b94b      	cbnz	r3, 8020d04 <__swsetup_r+0x7c>
 8020cf0:	89a3      	ldrh	r3, [r4, #12]
 8020cf2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020cfa:	d003      	beq.n	8020d04 <__swsetup_r+0x7c>
 8020cfc:	4621      	mov	r1, r4
 8020cfe:	4628      	mov	r0, r5
 8020d00:	f002 fe1c 	bl	802393c <__smakebuf_r>
 8020d04:	89a0      	ldrh	r0, [r4, #12]
 8020d06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020d0a:	f010 0301 	ands.w	r3, r0, #1
 8020d0e:	d00a      	beq.n	8020d26 <__swsetup_r+0x9e>
 8020d10:	2300      	movs	r3, #0
 8020d12:	60a3      	str	r3, [r4, #8]
 8020d14:	6963      	ldr	r3, [r4, #20]
 8020d16:	425b      	negs	r3, r3
 8020d18:	61a3      	str	r3, [r4, #24]
 8020d1a:	6923      	ldr	r3, [r4, #16]
 8020d1c:	b943      	cbnz	r3, 8020d30 <__swsetup_r+0xa8>
 8020d1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020d22:	d1c4      	bne.n	8020cae <__swsetup_r+0x26>
 8020d24:	bd38      	pop	{r3, r4, r5, pc}
 8020d26:	0781      	lsls	r1, r0, #30
 8020d28:	bf58      	it	pl
 8020d2a:	6963      	ldrpl	r3, [r4, #20]
 8020d2c:	60a3      	str	r3, [r4, #8]
 8020d2e:	e7f4      	b.n	8020d1a <__swsetup_r+0x92>
 8020d30:	2000      	movs	r0, #0
 8020d32:	e7f7      	b.n	8020d24 <__swsetup_r+0x9c>
 8020d34:	200009d8 	.word	0x200009d8

08020d38 <memcmp>:
 8020d38:	b510      	push	{r4, lr}
 8020d3a:	3901      	subs	r1, #1
 8020d3c:	4402      	add	r2, r0
 8020d3e:	4290      	cmp	r0, r2
 8020d40:	d101      	bne.n	8020d46 <memcmp+0xe>
 8020d42:	2000      	movs	r0, #0
 8020d44:	e005      	b.n	8020d52 <memcmp+0x1a>
 8020d46:	7803      	ldrb	r3, [r0, #0]
 8020d48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020d4c:	42a3      	cmp	r3, r4
 8020d4e:	d001      	beq.n	8020d54 <memcmp+0x1c>
 8020d50:	1b18      	subs	r0, r3, r4
 8020d52:	bd10      	pop	{r4, pc}
 8020d54:	3001      	adds	r0, #1
 8020d56:	e7f2      	b.n	8020d3e <memcmp+0x6>

08020d58 <memmove>:
 8020d58:	4288      	cmp	r0, r1
 8020d5a:	b510      	push	{r4, lr}
 8020d5c:	eb01 0402 	add.w	r4, r1, r2
 8020d60:	d902      	bls.n	8020d68 <memmove+0x10>
 8020d62:	4284      	cmp	r4, r0
 8020d64:	4623      	mov	r3, r4
 8020d66:	d807      	bhi.n	8020d78 <memmove+0x20>
 8020d68:	1e43      	subs	r3, r0, #1
 8020d6a:	42a1      	cmp	r1, r4
 8020d6c:	d008      	beq.n	8020d80 <memmove+0x28>
 8020d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020d76:	e7f8      	b.n	8020d6a <memmove+0x12>
 8020d78:	4402      	add	r2, r0
 8020d7a:	4601      	mov	r1, r0
 8020d7c:	428a      	cmp	r2, r1
 8020d7e:	d100      	bne.n	8020d82 <memmove+0x2a>
 8020d80:	bd10      	pop	{r4, pc}
 8020d82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020d86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020d8a:	e7f7      	b.n	8020d7c <memmove+0x24>

08020d8c <memset>:
 8020d8c:	4402      	add	r2, r0
 8020d8e:	4603      	mov	r3, r0
 8020d90:	4293      	cmp	r3, r2
 8020d92:	d100      	bne.n	8020d96 <memset+0xa>
 8020d94:	4770      	bx	lr
 8020d96:	f803 1b01 	strb.w	r1, [r3], #1
 8020d9a:	e7f9      	b.n	8020d90 <memset+0x4>

08020d9c <strchr>:
 8020d9c:	b2c9      	uxtb	r1, r1
 8020d9e:	4603      	mov	r3, r0
 8020da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020da4:	b11a      	cbz	r2, 8020dae <strchr+0x12>
 8020da6:	428a      	cmp	r2, r1
 8020da8:	d1f9      	bne.n	8020d9e <strchr+0x2>
 8020daa:	4618      	mov	r0, r3
 8020dac:	4770      	bx	lr
 8020dae:	2900      	cmp	r1, #0
 8020db0:	bf18      	it	ne
 8020db2:	2300      	movne	r3, #0
 8020db4:	e7f9      	b.n	8020daa <strchr+0xe>

08020db6 <strncmp>:
 8020db6:	b510      	push	{r4, lr}
 8020db8:	b16a      	cbz	r2, 8020dd6 <strncmp+0x20>
 8020dba:	3901      	subs	r1, #1
 8020dbc:	1884      	adds	r4, r0, r2
 8020dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020dc2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020dc6:	429a      	cmp	r2, r3
 8020dc8:	d103      	bne.n	8020dd2 <strncmp+0x1c>
 8020dca:	42a0      	cmp	r0, r4
 8020dcc:	d001      	beq.n	8020dd2 <strncmp+0x1c>
 8020dce:	2a00      	cmp	r2, #0
 8020dd0:	d1f5      	bne.n	8020dbe <strncmp+0x8>
 8020dd2:	1ad0      	subs	r0, r2, r3
 8020dd4:	bd10      	pop	{r4, pc}
 8020dd6:	4610      	mov	r0, r2
 8020dd8:	e7fc      	b.n	8020dd4 <strncmp+0x1e>

08020dda <strstr>:
 8020dda:	780a      	ldrb	r2, [r1, #0]
 8020ddc:	b570      	push	{r4, r5, r6, lr}
 8020dde:	b96a      	cbnz	r2, 8020dfc <strstr+0x22>
 8020de0:	bd70      	pop	{r4, r5, r6, pc}
 8020de2:	429a      	cmp	r2, r3
 8020de4:	d109      	bne.n	8020dfa <strstr+0x20>
 8020de6:	460c      	mov	r4, r1
 8020de8:	4605      	mov	r5, r0
 8020dea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	d0f6      	beq.n	8020de0 <strstr+0x6>
 8020df2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8020df6:	429e      	cmp	r6, r3
 8020df8:	d0f7      	beq.n	8020dea <strstr+0x10>
 8020dfa:	3001      	adds	r0, #1
 8020dfc:	7803      	ldrb	r3, [r0, #0]
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d1ef      	bne.n	8020de2 <strstr+0x8>
 8020e02:	4618      	mov	r0, r3
 8020e04:	e7ec      	b.n	8020de0 <strstr+0x6>
	...

08020e08 <_localeconv_r>:
 8020e08:	4800      	ldr	r0, [pc, #0]	; (8020e0c <_localeconv_r+0x4>)
 8020e0a:	4770      	bx	lr
 8020e0c:	20000acc 	.word	0x20000acc

08020e10 <_close_r>:
 8020e10:	b538      	push	{r3, r4, r5, lr}
 8020e12:	4d06      	ldr	r5, [pc, #24]	; (8020e2c <_close_r+0x1c>)
 8020e14:	2300      	movs	r3, #0
 8020e16:	4604      	mov	r4, r0
 8020e18:	4608      	mov	r0, r1
 8020e1a:	602b      	str	r3, [r5, #0]
 8020e1c:	f7e2 fecf 	bl	8003bbe <_close>
 8020e20:	1c43      	adds	r3, r0, #1
 8020e22:	d102      	bne.n	8020e2a <_close_r+0x1a>
 8020e24:	682b      	ldr	r3, [r5, #0]
 8020e26:	b103      	cbz	r3, 8020e2a <_close_r+0x1a>
 8020e28:	6023      	str	r3, [r4, #0]
 8020e2a:	bd38      	pop	{r3, r4, r5, pc}
 8020e2c:	200171a8 	.word	0x200171a8

08020e30 <_lseek_r>:
 8020e30:	b538      	push	{r3, r4, r5, lr}
 8020e32:	4d07      	ldr	r5, [pc, #28]	; (8020e50 <_lseek_r+0x20>)
 8020e34:	4604      	mov	r4, r0
 8020e36:	4608      	mov	r0, r1
 8020e38:	4611      	mov	r1, r2
 8020e3a:	2200      	movs	r2, #0
 8020e3c:	602a      	str	r2, [r5, #0]
 8020e3e:	461a      	mov	r2, r3
 8020e40:	f7e2 fee4 	bl	8003c0c <_lseek>
 8020e44:	1c43      	adds	r3, r0, #1
 8020e46:	d102      	bne.n	8020e4e <_lseek_r+0x1e>
 8020e48:	682b      	ldr	r3, [r5, #0]
 8020e4a:	b103      	cbz	r3, 8020e4e <_lseek_r+0x1e>
 8020e4c:	6023      	str	r3, [r4, #0]
 8020e4e:	bd38      	pop	{r3, r4, r5, pc}
 8020e50:	200171a8 	.word	0x200171a8

08020e54 <_read_r>:
 8020e54:	b538      	push	{r3, r4, r5, lr}
 8020e56:	4d07      	ldr	r5, [pc, #28]	; (8020e74 <_read_r+0x20>)
 8020e58:	4604      	mov	r4, r0
 8020e5a:	4608      	mov	r0, r1
 8020e5c:	4611      	mov	r1, r2
 8020e5e:	2200      	movs	r2, #0
 8020e60:	602a      	str	r2, [r5, #0]
 8020e62:	461a      	mov	r2, r3
 8020e64:	f7e2 fe72 	bl	8003b4c <_read>
 8020e68:	1c43      	adds	r3, r0, #1
 8020e6a:	d102      	bne.n	8020e72 <_read_r+0x1e>
 8020e6c:	682b      	ldr	r3, [r5, #0]
 8020e6e:	b103      	cbz	r3, 8020e72 <_read_r+0x1e>
 8020e70:	6023      	str	r3, [r4, #0]
 8020e72:	bd38      	pop	{r3, r4, r5, pc}
 8020e74:	200171a8 	.word	0x200171a8

08020e78 <_sbrk_r>:
 8020e78:	b538      	push	{r3, r4, r5, lr}
 8020e7a:	4d06      	ldr	r5, [pc, #24]	; (8020e94 <_sbrk_r+0x1c>)
 8020e7c:	2300      	movs	r3, #0
 8020e7e:	4604      	mov	r4, r0
 8020e80:	4608      	mov	r0, r1
 8020e82:	602b      	str	r3, [r5, #0]
 8020e84:	f7e2 fed0 	bl	8003c28 <_sbrk>
 8020e88:	1c43      	adds	r3, r0, #1
 8020e8a:	d102      	bne.n	8020e92 <_sbrk_r+0x1a>
 8020e8c:	682b      	ldr	r3, [r5, #0]
 8020e8e:	b103      	cbz	r3, 8020e92 <_sbrk_r+0x1a>
 8020e90:	6023      	str	r3, [r4, #0]
 8020e92:	bd38      	pop	{r3, r4, r5, pc}
 8020e94:	200171a8 	.word	0x200171a8

08020e98 <_write_r>:
 8020e98:	b538      	push	{r3, r4, r5, lr}
 8020e9a:	4d07      	ldr	r5, [pc, #28]	; (8020eb8 <_write_r+0x20>)
 8020e9c:	4604      	mov	r4, r0
 8020e9e:	4608      	mov	r0, r1
 8020ea0:	4611      	mov	r1, r2
 8020ea2:	2200      	movs	r2, #0
 8020ea4:	602a      	str	r2, [r5, #0]
 8020ea6:	461a      	mov	r2, r3
 8020ea8:	f7e2 fe6d 	bl	8003b86 <_write>
 8020eac:	1c43      	adds	r3, r0, #1
 8020eae:	d102      	bne.n	8020eb6 <_write_r+0x1e>
 8020eb0:	682b      	ldr	r3, [r5, #0]
 8020eb2:	b103      	cbz	r3, 8020eb6 <_write_r+0x1e>
 8020eb4:	6023      	str	r3, [r4, #0]
 8020eb6:	bd38      	pop	{r3, r4, r5, pc}
 8020eb8:	200171a8 	.word	0x200171a8

08020ebc <__errno>:
 8020ebc:	4b01      	ldr	r3, [pc, #4]	; (8020ec4 <__errno+0x8>)
 8020ebe:	6818      	ldr	r0, [r3, #0]
 8020ec0:	4770      	bx	lr
 8020ec2:	bf00      	nop
 8020ec4:	200009d8 	.word	0x200009d8

08020ec8 <__libc_init_array>:
 8020ec8:	b570      	push	{r4, r5, r6, lr}
 8020eca:	4d0d      	ldr	r5, [pc, #52]	; (8020f00 <__libc_init_array+0x38>)
 8020ecc:	4c0d      	ldr	r4, [pc, #52]	; (8020f04 <__libc_init_array+0x3c>)
 8020ece:	1b64      	subs	r4, r4, r5
 8020ed0:	10a4      	asrs	r4, r4, #2
 8020ed2:	2600      	movs	r6, #0
 8020ed4:	42a6      	cmp	r6, r4
 8020ed6:	d109      	bne.n	8020eec <__libc_init_array+0x24>
 8020ed8:	4d0b      	ldr	r5, [pc, #44]	; (8020f08 <__libc_init_array+0x40>)
 8020eda:	4c0c      	ldr	r4, [pc, #48]	; (8020f0c <__libc_init_array+0x44>)
 8020edc:	f003 f954 	bl	8024188 <_init>
 8020ee0:	1b64      	subs	r4, r4, r5
 8020ee2:	10a4      	asrs	r4, r4, #2
 8020ee4:	2600      	movs	r6, #0
 8020ee6:	42a6      	cmp	r6, r4
 8020ee8:	d105      	bne.n	8020ef6 <__libc_init_array+0x2e>
 8020eea:	bd70      	pop	{r4, r5, r6, pc}
 8020eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8020ef0:	4798      	blx	r3
 8020ef2:	3601      	adds	r6, #1
 8020ef4:	e7ee      	b.n	8020ed4 <__libc_init_array+0xc>
 8020ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8020efa:	4798      	blx	r3
 8020efc:	3601      	adds	r6, #1
 8020efe:	e7f2      	b.n	8020ee6 <__libc_init_array+0x1e>
 8020f00:	08025f6c 	.word	0x08025f6c
 8020f04:	08025f6c 	.word	0x08025f6c
 8020f08:	08025f6c 	.word	0x08025f6c
 8020f0c:	08025f84 	.word	0x08025f84

08020f10 <__retarget_lock_init_recursive>:
 8020f10:	4770      	bx	lr

08020f12 <__retarget_lock_acquire_recursive>:
 8020f12:	4770      	bx	lr

08020f14 <__retarget_lock_release_recursive>:
 8020f14:	4770      	bx	lr

08020f16 <strcpy>:
 8020f16:	4603      	mov	r3, r0
 8020f18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020f1c:	f803 2b01 	strb.w	r2, [r3], #1
 8020f20:	2a00      	cmp	r2, #0
 8020f22:	d1f9      	bne.n	8020f18 <strcpy+0x2>
 8020f24:	4770      	bx	lr

08020f26 <memcpy>:
 8020f26:	440a      	add	r2, r1
 8020f28:	4291      	cmp	r1, r2
 8020f2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020f2e:	d100      	bne.n	8020f32 <memcpy+0xc>
 8020f30:	4770      	bx	lr
 8020f32:	b510      	push	{r4, lr}
 8020f34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020f38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020f3c:	4291      	cmp	r1, r2
 8020f3e:	d1f9      	bne.n	8020f34 <memcpy+0xe>
 8020f40:	bd10      	pop	{r4, pc}
	...

08020f44 <nanf>:
 8020f44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020f4c <nanf+0x8>
 8020f48:	4770      	bx	lr
 8020f4a:	bf00      	nop
 8020f4c:	7fc00000 	.word	0x7fc00000

08020f50 <__assert_func>:
 8020f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020f52:	4614      	mov	r4, r2
 8020f54:	461a      	mov	r2, r3
 8020f56:	4b09      	ldr	r3, [pc, #36]	; (8020f7c <__assert_func+0x2c>)
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	4605      	mov	r5, r0
 8020f5c:	68d8      	ldr	r0, [r3, #12]
 8020f5e:	b14c      	cbz	r4, 8020f74 <__assert_func+0x24>
 8020f60:	4b07      	ldr	r3, [pc, #28]	; (8020f80 <__assert_func+0x30>)
 8020f62:	9100      	str	r1, [sp, #0]
 8020f64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020f68:	4906      	ldr	r1, [pc, #24]	; (8020f84 <__assert_func+0x34>)
 8020f6a:	462b      	mov	r3, r5
 8020f6c:	f002 fcae 	bl	80238cc <fiprintf>
 8020f70:	f002 fd4a 	bl	8023a08 <abort>
 8020f74:	4b04      	ldr	r3, [pc, #16]	; (8020f88 <__assert_func+0x38>)
 8020f76:	461c      	mov	r4, r3
 8020f78:	e7f3      	b.n	8020f62 <__assert_func+0x12>
 8020f7a:	bf00      	nop
 8020f7c:	200009d8 	.word	0x200009d8
 8020f80:	08025c8d 	.word	0x08025c8d
 8020f84:	08025c9a 	.word	0x08025c9a
 8020f88:	08025cc8 	.word	0x08025cc8

08020f8c <quorem>:
 8020f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f90:	6903      	ldr	r3, [r0, #16]
 8020f92:	690c      	ldr	r4, [r1, #16]
 8020f94:	42a3      	cmp	r3, r4
 8020f96:	4607      	mov	r7, r0
 8020f98:	db7e      	blt.n	8021098 <quorem+0x10c>
 8020f9a:	3c01      	subs	r4, #1
 8020f9c:	f101 0814 	add.w	r8, r1, #20
 8020fa0:	f100 0514 	add.w	r5, r0, #20
 8020fa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020fa8:	9301      	str	r3, [sp, #4]
 8020faa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020fb2:	3301      	adds	r3, #1
 8020fb4:	429a      	cmp	r2, r3
 8020fb6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020fba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020fbe:	fbb2 f6f3 	udiv	r6, r2, r3
 8020fc2:	d331      	bcc.n	8021028 <quorem+0x9c>
 8020fc4:	f04f 0e00 	mov.w	lr, #0
 8020fc8:	4640      	mov	r0, r8
 8020fca:	46ac      	mov	ip, r5
 8020fcc:	46f2      	mov	sl, lr
 8020fce:	f850 2b04 	ldr.w	r2, [r0], #4
 8020fd2:	b293      	uxth	r3, r2
 8020fd4:	fb06 e303 	mla	r3, r6, r3, lr
 8020fd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020fdc:	0c1a      	lsrs	r2, r3, #16
 8020fde:	b29b      	uxth	r3, r3
 8020fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8020fe4:	f8dc a000 	ldr.w	sl, [ip]
 8020fe8:	fa13 f38a 	uxtah	r3, r3, sl
 8020fec:	fb06 220e 	mla	r2, r6, lr, r2
 8020ff0:	9300      	str	r3, [sp, #0]
 8020ff2:	9b00      	ldr	r3, [sp, #0]
 8020ff4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020ff8:	b292      	uxth	r2, r2
 8020ffa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020ffe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021002:	f8bd 3000 	ldrh.w	r3, [sp]
 8021006:	4581      	cmp	r9, r0
 8021008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802100c:	f84c 3b04 	str.w	r3, [ip], #4
 8021010:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021014:	d2db      	bcs.n	8020fce <quorem+0x42>
 8021016:	f855 300b 	ldr.w	r3, [r5, fp]
 802101a:	b92b      	cbnz	r3, 8021028 <quorem+0x9c>
 802101c:	9b01      	ldr	r3, [sp, #4]
 802101e:	3b04      	subs	r3, #4
 8021020:	429d      	cmp	r5, r3
 8021022:	461a      	mov	r2, r3
 8021024:	d32c      	bcc.n	8021080 <quorem+0xf4>
 8021026:	613c      	str	r4, [r7, #16]
 8021028:	4638      	mov	r0, r7
 802102a:	f001 f8c3 	bl	80221b4 <__mcmp>
 802102e:	2800      	cmp	r0, #0
 8021030:	db22      	blt.n	8021078 <quorem+0xec>
 8021032:	3601      	adds	r6, #1
 8021034:	4629      	mov	r1, r5
 8021036:	2000      	movs	r0, #0
 8021038:	f858 2b04 	ldr.w	r2, [r8], #4
 802103c:	f8d1 c000 	ldr.w	ip, [r1]
 8021040:	b293      	uxth	r3, r2
 8021042:	1ac3      	subs	r3, r0, r3
 8021044:	0c12      	lsrs	r2, r2, #16
 8021046:	fa13 f38c 	uxtah	r3, r3, ip
 802104a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802104e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021052:	b29b      	uxth	r3, r3
 8021054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021058:	45c1      	cmp	r9, r8
 802105a:	f841 3b04 	str.w	r3, [r1], #4
 802105e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8021062:	d2e9      	bcs.n	8021038 <quorem+0xac>
 8021064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802106c:	b922      	cbnz	r2, 8021078 <quorem+0xec>
 802106e:	3b04      	subs	r3, #4
 8021070:	429d      	cmp	r5, r3
 8021072:	461a      	mov	r2, r3
 8021074:	d30a      	bcc.n	802108c <quorem+0x100>
 8021076:	613c      	str	r4, [r7, #16]
 8021078:	4630      	mov	r0, r6
 802107a:	b003      	add	sp, #12
 802107c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021080:	6812      	ldr	r2, [r2, #0]
 8021082:	3b04      	subs	r3, #4
 8021084:	2a00      	cmp	r2, #0
 8021086:	d1ce      	bne.n	8021026 <quorem+0x9a>
 8021088:	3c01      	subs	r4, #1
 802108a:	e7c9      	b.n	8021020 <quorem+0x94>
 802108c:	6812      	ldr	r2, [r2, #0]
 802108e:	3b04      	subs	r3, #4
 8021090:	2a00      	cmp	r2, #0
 8021092:	d1f0      	bne.n	8021076 <quorem+0xea>
 8021094:	3c01      	subs	r4, #1
 8021096:	e7eb      	b.n	8021070 <quorem+0xe4>
 8021098:	2000      	movs	r0, #0
 802109a:	e7ee      	b.n	802107a <quorem+0xee>
 802109c:	0000      	movs	r0, r0
	...

080210a0 <_dtoa_r>:
 80210a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210a4:	ed2d 8b02 	vpush	{d8}
 80210a8:	69c5      	ldr	r5, [r0, #28]
 80210aa:	b091      	sub	sp, #68	; 0x44
 80210ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80210b0:	ec59 8b10 	vmov	r8, r9, d0
 80210b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80210b6:	9106      	str	r1, [sp, #24]
 80210b8:	4606      	mov	r6, r0
 80210ba:	9208      	str	r2, [sp, #32]
 80210bc:	930c      	str	r3, [sp, #48]	; 0x30
 80210be:	b975      	cbnz	r5, 80210de <_dtoa_r+0x3e>
 80210c0:	2010      	movs	r0, #16
 80210c2:	f7fe fa7f 	bl	801f5c4 <malloc>
 80210c6:	4602      	mov	r2, r0
 80210c8:	61f0      	str	r0, [r6, #28]
 80210ca:	b920      	cbnz	r0, 80210d6 <_dtoa_r+0x36>
 80210cc:	4ba6      	ldr	r3, [pc, #664]	; (8021368 <_dtoa_r+0x2c8>)
 80210ce:	21ef      	movs	r1, #239	; 0xef
 80210d0:	48a6      	ldr	r0, [pc, #664]	; (802136c <_dtoa_r+0x2cc>)
 80210d2:	f7ff ff3d 	bl	8020f50 <__assert_func>
 80210d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80210da:	6005      	str	r5, [r0, #0]
 80210dc:	60c5      	str	r5, [r0, #12]
 80210de:	69f3      	ldr	r3, [r6, #28]
 80210e0:	6819      	ldr	r1, [r3, #0]
 80210e2:	b151      	cbz	r1, 80210fa <_dtoa_r+0x5a>
 80210e4:	685a      	ldr	r2, [r3, #4]
 80210e6:	604a      	str	r2, [r1, #4]
 80210e8:	2301      	movs	r3, #1
 80210ea:	4093      	lsls	r3, r2
 80210ec:	608b      	str	r3, [r1, #8]
 80210ee:	4630      	mov	r0, r6
 80210f0:	f000 fdda 	bl	8021ca8 <_Bfree>
 80210f4:	69f3      	ldr	r3, [r6, #28]
 80210f6:	2200      	movs	r2, #0
 80210f8:	601a      	str	r2, [r3, #0]
 80210fa:	f1b9 0300 	subs.w	r3, r9, #0
 80210fe:	bfbb      	ittet	lt
 8021100:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021104:	9303      	strlt	r3, [sp, #12]
 8021106:	2300      	movge	r3, #0
 8021108:	2201      	movlt	r2, #1
 802110a:	bfac      	ite	ge
 802110c:	6023      	strge	r3, [r4, #0]
 802110e:	6022      	strlt	r2, [r4, #0]
 8021110:	4b97      	ldr	r3, [pc, #604]	; (8021370 <_dtoa_r+0x2d0>)
 8021112:	9c03      	ldr	r4, [sp, #12]
 8021114:	43a3      	bics	r3, r4
 8021116:	d11c      	bne.n	8021152 <_dtoa_r+0xb2>
 8021118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802111a:	f242 730f 	movw	r3, #9999	; 0x270f
 802111e:	6013      	str	r3, [r2, #0]
 8021120:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8021124:	ea53 0308 	orrs.w	r3, r3, r8
 8021128:	f000 84fb 	beq.w	8021b22 <_dtoa_r+0xa82>
 802112c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802112e:	b963      	cbnz	r3, 802114a <_dtoa_r+0xaa>
 8021130:	4b90      	ldr	r3, [pc, #576]	; (8021374 <_dtoa_r+0x2d4>)
 8021132:	e020      	b.n	8021176 <_dtoa_r+0xd6>
 8021134:	4b90      	ldr	r3, [pc, #576]	; (8021378 <_dtoa_r+0x2d8>)
 8021136:	9301      	str	r3, [sp, #4]
 8021138:	3308      	adds	r3, #8
 802113a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802113c:	6013      	str	r3, [r2, #0]
 802113e:	9801      	ldr	r0, [sp, #4]
 8021140:	b011      	add	sp, #68	; 0x44
 8021142:	ecbd 8b02 	vpop	{d8}
 8021146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802114a:	4b8a      	ldr	r3, [pc, #552]	; (8021374 <_dtoa_r+0x2d4>)
 802114c:	9301      	str	r3, [sp, #4]
 802114e:	3303      	adds	r3, #3
 8021150:	e7f3      	b.n	802113a <_dtoa_r+0x9a>
 8021152:	ed9d 8b02 	vldr	d8, [sp, #8]
 8021156:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802115e:	d10c      	bne.n	802117a <_dtoa_r+0xda>
 8021160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021162:	2301      	movs	r3, #1
 8021164:	6013      	str	r3, [r2, #0]
 8021166:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021168:	2b00      	cmp	r3, #0
 802116a:	f000 84d7 	beq.w	8021b1c <_dtoa_r+0xa7c>
 802116e:	4b83      	ldr	r3, [pc, #524]	; (802137c <_dtoa_r+0x2dc>)
 8021170:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8021172:	6013      	str	r3, [r2, #0]
 8021174:	3b01      	subs	r3, #1
 8021176:	9301      	str	r3, [sp, #4]
 8021178:	e7e1      	b.n	802113e <_dtoa_r+0x9e>
 802117a:	aa0e      	add	r2, sp, #56	; 0x38
 802117c:	a90f      	add	r1, sp, #60	; 0x3c
 802117e:	4630      	mov	r0, r6
 8021180:	eeb0 0b48 	vmov.f64	d0, d8
 8021184:	f001 f92c 	bl	80223e0 <__d2b>
 8021188:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802118c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802118e:	4605      	mov	r5, r0
 8021190:	2b00      	cmp	r3, #0
 8021192:	d046      	beq.n	8021222 <_dtoa_r+0x182>
 8021194:	eeb0 7b48 	vmov.f64	d7, d8
 8021198:	ee18 1a90 	vmov	r1, s17
 802119c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80211a0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80211a4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80211a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80211ac:	2000      	movs	r0, #0
 80211ae:	ee07 1a90 	vmov	s15, r1
 80211b2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80211b6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8021350 <_dtoa_r+0x2b0>
 80211ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80211be:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8021358 <_dtoa_r+0x2b8>
 80211c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80211c6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8021360 <_dtoa_r+0x2c0>
 80211ca:	ee07 3a90 	vmov	s15, r3
 80211ce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80211d2:	eeb0 7b46 	vmov.f64	d7, d6
 80211d6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80211da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80211de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80211e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211e6:	ee16 ba90 	vmov	fp, s13
 80211ea:	9009      	str	r0, [sp, #36]	; 0x24
 80211ec:	d508      	bpl.n	8021200 <_dtoa_r+0x160>
 80211ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80211f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80211f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211fa:	bf18      	it	ne
 80211fc:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8021200:	f1bb 0f16 	cmp.w	fp, #22
 8021204:	d82b      	bhi.n	802125e <_dtoa_r+0x1be>
 8021206:	495e      	ldr	r1, [pc, #376]	; (8021380 <_dtoa_r+0x2e0>)
 8021208:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 802120c:	ed91 7b00 	vldr	d7, [r1]
 8021210:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8021214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021218:	d501      	bpl.n	802121e <_dtoa_r+0x17e>
 802121a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802121e:	2100      	movs	r1, #0
 8021220:	e01e      	b.n	8021260 <_dtoa_r+0x1c0>
 8021222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021224:	4413      	add	r3, r2
 8021226:	f203 4132 	addw	r1, r3, #1074	; 0x432
 802122a:	2920      	cmp	r1, #32
 802122c:	bfc1      	itttt	gt
 802122e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8021232:	408c      	lslgt	r4, r1
 8021234:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8021238:	fa28 f101 	lsrgt.w	r1, r8, r1
 802123c:	bfd6      	itet	le
 802123e:	f1c1 0120 	rsble	r1, r1, #32
 8021242:	4321      	orrgt	r1, r4
 8021244:	fa08 f101 	lslle.w	r1, r8, r1
 8021248:	ee07 1a90 	vmov	s15, r1
 802124c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8021250:	3b01      	subs	r3, #1
 8021252:	ee17 1a90 	vmov	r1, s15
 8021256:	2001      	movs	r0, #1
 8021258:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 802125c:	e7a7      	b.n	80211ae <_dtoa_r+0x10e>
 802125e:	2101      	movs	r1, #1
 8021260:	1ad2      	subs	r2, r2, r3
 8021262:	1e53      	subs	r3, r2, #1
 8021264:	9305      	str	r3, [sp, #20]
 8021266:	bf45      	ittet	mi
 8021268:	f1c2 0301 	rsbmi	r3, r2, #1
 802126c:	9304      	strmi	r3, [sp, #16]
 802126e:	2300      	movpl	r3, #0
 8021270:	2300      	movmi	r3, #0
 8021272:	bf4c      	ite	mi
 8021274:	9305      	strmi	r3, [sp, #20]
 8021276:	9304      	strpl	r3, [sp, #16]
 8021278:	f1bb 0f00 	cmp.w	fp, #0
 802127c:	910b      	str	r1, [sp, #44]	; 0x2c
 802127e:	db18      	blt.n	80212b2 <_dtoa_r+0x212>
 8021280:	9b05      	ldr	r3, [sp, #20]
 8021282:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8021286:	445b      	add	r3, fp
 8021288:	9305      	str	r3, [sp, #20]
 802128a:	2300      	movs	r3, #0
 802128c:	9a06      	ldr	r2, [sp, #24]
 802128e:	2a09      	cmp	r2, #9
 8021290:	d848      	bhi.n	8021324 <_dtoa_r+0x284>
 8021292:	2a05      	cmp	r2, #5
 8021294:	bfc4      	itt	gt
 8021296:	3a04      	subgt	r2, #4
 8021298:	9206      	strgt	r2, [sp, #24]
 802129a:	9a06      	ldr	r2, [sp, #24]
 802129c:	f1a2 0202 	sub.w	r2, r2, #2
 80212a0:	bfcc      	ite	gt
 80212a2:	2400      	movgt	r4, #0
 80212a4:	2401      	movle	r4, #1
 80212a6:	2a03      	cmp	r2, #3
 80212a8:	d847      	bhi.n	802133a <_dtoa_r+0x29a>
 80212aa:	e8df f002 	tbb	[pc, r2]
 80212ae:	2d0b      	.short	0x2d0b
 80212b0:	392b      	.short	0x392b
 80212b2:	9b04      	ldr	r3, [sp, #16]
 80212b4:	2200      	movs	r2, #0
 80212b6:	eba3 030b 	sub.w	r3, r3, fp
 80212ba:	9304      	str	r3, [sp, #16]
 80212bc:	920a      	str	r2, [sp, #40]	; 0x28
 80212be:	f1cb 0300 	rsb	r3, fp, #0
 80212c2:	e7e3      	b.n	802128c <_dtoa_r+0x1ec>
 80212c4:	2200      	movs	r2, #0
 80212c6:	9207      	str	r2, [sp, #28]
 80212c8:	9a08      	ldr	r2, [sp, #32]
 80212ca:	2a00      	cmp	r2, #0
 80212cc:	dc38      	bgt.n	8021340 <_dtoa_r+0x2a0>
 80212ce:	f04f 0a01 	mov.w	sl, #1
 80212d2:	46d1      	mov	r9, sl
 80212d4:	4652      	mov	r2, sl
 80212d6:	f8cd a020 	str.w	sl, [sp, #32]
 80212da:	69f7      	ldr	r7, [r6, #28]
 80212dc:	2100      	movs	r1, #0
 80212de:	2004      	movs	r0, #4
 80212e0:	f100 0c14 	add.w	ip, r0, #20
 80212e4:	4594      	cmp	ip, r2
 80212e6:	d930      	bls.n	802134a <_dtoa_r+0x2aa>
 80212e8:	6079      	str	r1, [r7, #4]
 80212ea:	4630      	mov	r0, r6
 80212ec:	930d      	str	r3, [sp, #52]	; 0x34
 80212ee:	f000 fc9b 	bl	8021c28 <_Balloc>
 80212f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80212f4:	9001      	str	r0, [sp, #4]
 80212f6:	4602      	mov	r2, r0
 80212f8:	2800      	cmp	r0, #0
 80212fa:	d145      	bne.n	8021388 <_dtoa_r+0x2e8>
 80212fc:	4b21      	ldr	r3, [pc, #132]	; (8021384 <_dtoa_r+0x2e4>)
 80212fe:	f240 11af 	movw	r1, #431	; 0x1af
 8021302:	e6e5      	b.n	80210d0 <_dtoa_r+0x30>
 8021304:	2201      	movs	r2, #1
 8021306:	e7de      	b.n	80212c6 <_dtoa_r+0x226>
 8021308:	2200      	movs	r2, #0
 802130a:	9207      	str	r2, [sp, #28]
 802130c:	9a08      	ldr	r2, [sp, #32]
 802130e:	eb0b 0a02 	add.w	sl, fp, r2
 8021312:	f10a 0901 	add.w	r9, sl, #1
 8021316:	464a      	mov	r2, r9
 8021318:	2a01      	cmp	r2, #1
 802131a:	bfb8      	it	lt
 802131c:	2201      	movlt	r2, #1
 802131e:	e7dc      	b.n	80212da <_dtoa_r+0x23a>
 8021320:	2201      	movs	r2, #1
 8021322:	e7f2      	b.n	802130a <_dtoa_r+0x26a>
 8021324:	2401      	movs	r4, #1
 8021326:	2200      	movs	r2, #0
 8021328:	e9cd 2406 	strd	r2, r4, [sp, #24]
 802132c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8021330:	2100      	movs	r1, #0
 8021332:	46d1      	mov	r9, sl
 8021334:	2212      	movs	r2, #18
 8021336:	9108      	str	r1, [sp, #32]
 8021338:	e7cf      	b.n	80212da <_dtoa_r+0x23a>
 802133a:	2201      	movs	r2, #1
 802133c:	9207      	str	r2, [sp, #28]
 802133e:	e7f5      	b.n	802132c <_dtoa_r+0x28c>
 8021340:	f8dd a020 	ldr.w	sl, [sp, #32]
 8021344:	46d1      	mov	r9, sl
 8021346:	4652      	mov	r2, sl
 8021348:	e7c7      	b.n	80212da <_dtoa_r+0x23a>
 802134a:	3101      	adds	r1, #1
 802134c:	0040      	lsls	r0, r0, #1
 802134e:	e7c7      	b.n	80212e0 <_dtoa_r+0x240>
 8021350:	636f4361 	.word	0x636f4361
 8021354:	3fd287a7 	.word	0x3fd287a7
 8021358:	8b60c8b3 	.word	0x8b60c8b3
 802135c:	3fc68a28 	.word	0x3fc68a28
 8021360:	509f79fb 	.word	0x509f79fb
 8021364:	3fd34413 	.word	0x3fd34413
 8021368:	08025ae4 	.word	0x08025ae4
 802136c:	08025cd6 	.word	0x08025cd6
 8021370:	7ff00000 	.word	0x7ff00000
 8021374:	08025cd2 	.word	0x08025cd2
 8021378:	08025cc9 	.word	0x08025cc9
 802137c:	08025c65 	.word	0x08025c65
 8021380:	08025dc0 	.word	0x08025dc0
 8021384:	08025d2e 	.word	0x08025d2e
 8021388:	69f2      	ldr	r2, [r6, #28]
 802138a:	9901      	ldr	r1, [sp, #4]
 802138c:	6011      	str	r1, [r2, #0]
 802138e:	f1b9 0f0e 	cmp.w	r9, #14
 8021392:	d86c      	bhi.n	802146e <_dtoa_r+0x3ce>
 8021394:	2c00      	cmp	r4, #0
 8021396:	d06a      	beq.n	802146e <_dtoa_r+0x3ce>
 8021398:	f1bb 0f00 	cmp.w	fp, #0
 802139c:	f340 80a0 	ble.w	80214e0 <_dtoa_r+0x440>
 80213a0:	4ac1      	ldr	r2, [pc, #772]	; (80216a8 <_dtoa_r+0x608>)
 80213a2:	f00b 010f 	and.w	r1, fp, #15
 80213a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80213aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80213ae:	ed92 7b00 	vldr	d7, [r2]
 80213b2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80213b6:	f000 8087 	beq.w	80214c8 <_dtoa_r+0x428>
 80213ba:	49bc      	ldr	r1, [pc, #752]	; (80216ac <_dtoa_r+0x60c>)
 80213bc:	ed91 6b08 	vldr	d6, [r1, #32]
 80213c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80213c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80213c8:	f002 020f 	and.w	r2, r2, #15
 80213cc:	2103      	movs	r1, #3
 80213ce:	48b7      	ldr	r0, [pc, #732]	; (80216ac <_dtoa_r+0x60c>)
 80213d0:	2a00      	cmp	r2, #0
 80213d2:	d17b      	bne.n	80214cc <_dtoa_r+0x42c>
 80213d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80213d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80213dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80213e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80213e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80213e6:	2a00      	cmp	r2, #0
 80213e8:	f000 80a0 	beq.w	802152c <_dtoa_r+0x48c>
 80213ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80213f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80213f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213f8:	f140 8098 	bpl.w	802152c <_dtoa_r+0x48c>
 80213fc:	f1b9 0f00 	cmp.w	r9, #0
 8021400:	f000 8094 	beq.w	802152c <_dtoa_r+0x48c>
 8021404:	f1ba 0f00 	cmp.w	sl, #0
 8021408:	dd2f      	ble.n	802146a <_dtoa_r+0x3ca>
 802140a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802140e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021412:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021416:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 802141a:	3101      	adds	r1, #1
 802141c:	4654      	mov	r4, sl
 802141e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021422:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8021426:	ee07 1a90 	vmov	s15, r1
 802142a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802142e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8021432:	ee15 7a90 	vmov	r7, s11
 8021436:	ec51 0b15 	vmov	r0, r1, d5
 802143a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 802143e:	2c00      	cmp	r4, #0
 8021440:	d177      	bne.n	8021532 <_dtoa_r+0x492>
 8021442:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021446:	ee36 6b47 	vsub.f64	d6, d6, d7
 802144a:	ec41 0b17 	vmov	d7, r0, r1
 802144e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021456:	f300 826a 	bgt.w	802192e <_dtoa_r+0x88e>
 802145a:	eeb1 7b47 	vneg.f64	d7, d7
 802145e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021466:	f100 8260 	bmi.w	802192a <_dtoa_r+0x88a>
 802146a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802146e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021470:	2a00      	cmp	r2, #0
 8021472:	f2c0 811d 	blt.w	80216b0 <_dtoa_r+0x610>
 8021476:	f1bb 0f0e 	cmp.w	fp, #14
 802147a:	f300 8119 	bgt.w	80216b0 <_dtoa_r+0x610>
 802147e:	4b8a      	ldr	r3, [pc, #552]	; (80216a8 <_dtoa_r+0x608>)
 8021480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021484:	ed93 6b00 	vldr	d6, [r3]
 8021488:	9b08      	ldr	r3, [sp, #32]
 802148a:	2b00      	cmp	r3, #0
 802148c:	f280 80b7 	bge.w	80215fe <_dtoa_r+0x55e>
 8021490:	f1b9 0f00 	cmp.w	r9, #0
 8021494:	f300 80b3 	bgt.w	80215fe <_dtoa_r+0x55e>
 8021498:	f040 8246 	bne.w	8021928 <_dtoa_r+0x888>
 802149c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80214a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80214a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80214a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80214ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214b0:	464c      	mov	r4, r9
 80214b2:	464f      	mov	r7, r9
 80214b4:	f280 821c 	bge.w	80218f0 <_dtoa_r+0x850>
 80214b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80214bc:	2331      	movs	r3, #49	; 0x31
 80214be:	f808 3b01 	strb.w	r3, [r8], #1
 80214c2:	f10b 0b01 	add.w	fp, fp, #1
 80214c6:	e218      	b.n	80218fa <_dtoa_r+0x85a>
 80214c8:	2102      	movs	r1, #2
 80214ca:	e780      	b.n	80213ce <_dtoa_r+0x32e>
 80214cc:	07d4      	lsls	r4, r2, #31
 80214ce:	d504      	bpl.n	80214da <_dtoa_r+0x43a>
 80214d0:	ed90 6b00 	vldr	d6, [r0]
 80214d4:	3101      	adds	r1, #1
 80214d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80214da:	1052      	asrs	r2, r2, #1
 80214dc:	3008      	adds	r0, #8
 80214de:	e777      	b.n	80213d0 <_dtoa_r+0x330>
 80214e0:	d022      	beq.n	8021528 <_dtoa_r+0x488>
 80214e2:	f1cb 0200 	rsb	r2, fp, #0
 80214e6:	4970      	ldr	r1, [pc, #448]	; (80216a8 <_dtoa_r+0x608>)
 80214e8:	f002 000f 	and.w	r0, r2, #15
 80214ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80214f0:	ed91 7b00 	vldr	d7, [r1]
 80214f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80214f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80214fc:	486b      	ldr	r0, [pc, #428]	; (80216ac <_dtoa_r+0x60c>)
 80214fe:	1112      	asrs	r2, r2, #4
 8021500:	2400      	movs	r4, #0
 8021502:	2102      	movs	r1, #2
 8021504:	b92a      	cbnz	r2, 8021512 <_dtoa_r+0x472>
 8021506:	2c00      	cmp	r4, #0
 8021508:	f43f af6a 	beq.w	80213e0 <_dtoa_r+0x340>
 802150c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021510:	e766      	b.n	80213e0 <_dtoa_r+0x340>
 8021512:	07d7      	lsls	r7, r2, #31
 8021514:	d505      	bpl.n	8021522 <_dtoa_r+0x482>
 8021516:	ed90 6b00 	vldr	d6, [r0]
 802151a:	3101      	adds	r1, #1
 802151c:	2401      	movs	r4, #1
 802151e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021522:	1052      	asrs	r2, r2, #1
 8021524:	3008      	adds	r0, #8
 8021526:	e7ed      	b.n	8021504 <_dtoa_r+0x464>
 8021528:	2102      	movs	r1, #2
 802152a:	e759      	b.n	80213e0 <_dtoa_r+0x340>
 802152c:	465a      	mov	r2, fp
 802152e:	464c      	mov	r4, r9
 8021530:	e775      	b.n	802141e <_dtoa_r+0x37e>
 8021532:	ec41 0b17 	vmov	d7, r0, r1
 8021536:	495c      	ldr	r1, [pc, #368]	; (80216a8 <_dtoa_r+0x608>)
 8021538:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 802153c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8021540:	9901      	ldr	r1, [sp, #4]
 8021542:	440c      	add	r4, r1
 8021544:	9907      	ldr	r1, [sp, #28]
 8021546:	b351      	cbz	r1, 802159e <_dtoa_r+0x4fe>
 8021548:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 802154c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8021550:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021554:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8021558:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802155c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021560:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021564:	ee14 1a90 	vmov	r1, s9
 8021568:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802156c:	3130      	adds	r1, #48	; 0x30
 802156e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021572:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802157a:	f808 1b01 	strb.w	r1, [r8], #1
 802157e:	d439      	bmi.n	80215f4 <_dtoa_r+0x554>
 8021580:	ee32 5b46 	vsub.f64	d5, d2, d6
 8021584:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8021588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802158c:	d472      	bmi.n	8021674 <_dtoa_r+0x5d4>
 802158e:	45a0      	cmp	r8, r4
 8021590:	f43f af6b 	beq.w	802146a <_dtoa_r+0x3ca>
 8021594:	ee27 7b03 	vmul.f64	d7, d7, d3
 8021598:	ee26 6b03 	vmul.f64	d6, d6, d3
 802159c:	e7e0      	b.n	8021560 <_dtoa_r+0x4c0>
 802159e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80215a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80215a6:	4620      	mov	r0, r4
 80215a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80215ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80215b0:	ee14 1a90 	vmov	r1, s9
 80215b4:	3130      	adds	r1, #48	; 0x30
 80215b6:	f808 1b01 	strb.w	r1, [r8], #1
 80215ba:	45a0      	cmp	r8, r4
 80215bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80215c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80215c4:	d118      	bne.n	80215f8 <_dtoa_r+0x558>
 80215c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80215ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80215ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80215d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215d6:	dc4d      	bgt.n	8021674 <_dtoa_r+0x5d4>
 80215d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80215dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80215e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215e4:	f57f af41 	bpl.w	802146a <_dtoa_r+0x3ca>
 80215e8:	4680      	mov	r8, r0
 80215ea:	3801      	subs	r0, #1
 80215ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80215f0:	2b30      	cmp	r3, #48	; 0x30
 80215f2:	d0f9      	beq.n	80215e8 <_dtoa_r+0x548>
 80215f4:	4693      	mov	fp, r2
 80215f6:	e02a      	b.n	802164e <_dtoa_r+0x5ae>
 80215f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80215fc:	e7d6      	b.n	80215ac <_dtoa_r+0x50c>
 80215fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021602:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8021606:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802160a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802160e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8021612:	ee15 3a10 	vmov	r3, s10
 8021616:	3330      	adds	r3, #48	; 0x30
 8021618:	f808 3b01 	strb.w	r3, [r8], #1
 802161c:	9b01      	ldr	r3, [sp, #4]
 802161e:	eba8 0303 	sub.w	r3, r8, r3
 8021622:	4599      	cmp	r9, r3
 8021624:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8021628:	eea3 7b46 	vfms.f64	d7, d3, d6
 802162c:	d133      	bne.n	8021696 <_dtoa_r+0x5f6>
 802162e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8021632:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802163a:	dc1a      	bgt.n	8021672 <_dtoa_r+0x5d2>
 802163c:	eeb4 7b46 	vcmp.f64	d7, d6
 8021640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021644:	d103      	bne.n	802164e <_dtoa_r+0x5ae>
 8021646:	ee15 3a10 	vmov	r3, s10
 802164a:	07d9      	lsls	r1, r3, #31
 802164c:	d411      	bmi.n	8021672 <_dtoa_r+0x5d2>
 802164e:	4629      	mov	r1, r5
 8021650:	4630      	mov	r0, r6
 8021652:	f000 fb29 	bl	8021ca8 <_Bfree>
 8021656:	2300      	movs	r3, #0
 8021658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802165a:	f888 3000 	strb.w	r3, [r8]
 802165e:	f10b 0301 	add.w	r3, fp, #1
 8021662:	6013      	str	r3, [r2, #0]
 8021664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021666:	2b00      	cmp	r3, #0
 8021668:	f43f ad69 	beq.w	802113e <_dtoa_r+0x9e>
 802166c:	f8c3 8000 	str.w	r8, [r3]
 8021670:	e565      	b.n	802113e <_dtoa_r+0x9e>
 8021672:	465a      	mov	r2, fp
 8021674:	4643      	mov	r3, r8
 8021676:	4698      	mov	r8, r3
 8021678:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 802167c:	2939      	cmp	r1, #57	; 0x39
 802167e:	d106      	bne.n	802168e <_dtoa_r+0x5ee>
 8021680:	9901      	ldr	r1, [sp, #4]
 8021682:	4299      	cmp	r1, r3
 8021684:	d1f7      	bne.n	8021676 <_dtoa_r+0x5d6>
 8021686:	9801      	ldr	r0, [sp, #4]
 8021688:	2130      	movs	r1, #48	; 0x30
 802168a:	3201      	adds	r2, #1
 802168c:	7001      	strb	r1, [r0, #0]
 802168e:	7819      	ldrb	r1, [r3, #0]
 8021690:	3101      	adds	r1, #1
 8021692:	7019      	strb	r1, [r3, #0]
 8021694:	e7ae      	b.n	80215f4 <_dtoa_r+0x554>
 8021696:	ee27 7b04 	vmul.f64	d7, d7, d4
 802169a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216a2:	d1b2      	bne.n	802160a <_dtoa_r+0x56a>
 80216a4:	e7d3      	b.n	802164e <_dtoa_r+0x5ae>
 80216a6:	bf00      	nop
 80216a8:	08025dc0 	.word	0x08025dc0
 80216ac:	08025d98 	.word	0x08025d98
 80216b0:	9907      	ldr	r1, [sp, #28]
 80216b2:	2900      	cmp	r1, #0
 80216b4:	f000 80d0 	beq.w	8021858 <_dtoa_r+0x7b8>
 80216b8:	9906      	ldr	r1, [sp, #24]
 80216ba:	2901      	cmp	r1, #1
 80216bc:	f300 80b4 	bgt.w	8021828 <_dtoa_r+0x788>
 80216c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80216c2:	2900      	cmp	r1, #0
 80216c4:	f000 80ac 	beq.w	8021820 <_dtoa_r+0x780>
 80216c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80216cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80216d0:	461c      	mov	r4, r3
 80216d2:	9309      	str	r3, [sp, #36]	; 0x24
 80216d4:	9b04      	ldr	r3, [sp, #16]
 80216d6:	4413      	add	r3, r2
 80216d8:	9304      	str	r3, [sp, #16]
 80216da:	9b05      	ldr	r3, [sp, #20]
 80216dc:	2101      	movs	r1, #1
 80216de:	4413      	add	r3, r2
 80216e0:	4630      	mov	r0, r6
 80216e2:	9305      	str	r3, [sp, #20]
 80216e4:	f000 fbe0 	bl	8021ea8 <__i2b>
 80216e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216ea:	4607      	mov	r7, r0
 80216ec:	f1b8 0f00 	cmp.w	r8, #0
 80216f0:	d00d      	beq.n	802170e <_dtoa_r+0x66e>
 80216f2:	9a05      	ldr	r2, [sp, #20]
 80216f4:	2a00      	cmp	r2, #0
 80216f6:	dd0a      	ble.n	802170e <_dtoa_r+0x66e>
 80216f8:	4542      	cmp	r2, r8
 80216fa:	9904      	ldr	r1, [sp, #16]
 80216fc:	bfa8      	it	ge
 80216fe:	4642      	movge	r2, r8
 8021700:	1a89      	subs	r1, r1, r2
 8021702:	9104      	str	r1, [sp, #16]
 8021704:	9905      	ldr	r1, [sp, #20]
 8021706:	eba8 0802 	sub.w	r8, r8, r2
 802170a:	1a8a      	subs	r2, r1, r2
 802170c:	9205      	str	r2, [sp, #20]
 802170e:	b303      	cbz	r3, 8021752 <_dtoa_r+0x6b2>
 8021710:	9a07      	ldr	r2, [sp, #28]
 8021712:	2a00      	cmp	r2, #0
 8021714:	f000 80a5 	beq.w	8021862 <_dtoa_r+0x7c2>
 8021718:	2c00      	cmp	r4, #0
 802171a:	dd13      	ble.n	8021744 <_dtoa_r+0x6a4>
 802171c:	4639      	mov	r1, r7
 802171e:	4622      	mov	r2, r4
 8021720:	4630      	mov	r0, r6
 8021722:	930d      	str	r3, [sp, #52]	; 0x34
 8021724:	f000 fc80 	bl	8022028 <__pow5mult>
 8021728:	462a      	mov	r2, r5
 802172a:	4601      	mov	r1, r0
 802172c:	4607      	mov	r7, r0
 802172e:	4630      	mov	r0, r6
 8021730:	f000 fbd0 	bl	8021ed4 <__multiply>
 8021734:	4629      	mov	r1, r5
 8021736:	9009      	str	r0, [sp, #36]	; 0x24
 8021738:	4630      	mov	r0, r6
 802173a:	f000 fab5 	bl	8021ca8 <_Bfree>
 802173e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021742:	4615      	mov	r5, r2
 8021744:	1b1a      	subs	r2, r3, r4
 8021746:	d004      	beq.n	8021752 <_dtoa_r+0x6b2>
 8021748:	4629      	mov	r1, r5
 802174a:	4630      	mov	r0, r6
 802174c:	f000 fc6c 	bl	8022028 <__pow5mult>
 8021750:	4605      	mov	r5, r0
 8021752:	2101      	movs	r1, #1
 8021754:	4630      	mov	r0, r6
 8021756:	f000 fba7 	bl	8021ea8 <__i2b>
 802175a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802175c:	2b00      	cmp	r3, #0
 802175e:	4604      	mov	r4, r0
 8021760:	f340 8081 	ble.w	8021866 <_dtoa_r+0x7c6>
 8021764:	461a      	mov	r2, r3
 8021766:	4601      	mov	r1, r0
 8021768:	4630      	mov	r0, r6
 802176a:	f000 fc5d 	bl	8022028 <__pow5mult>
 802176e:	9b06      	ldr	r3, [sp, #24]
 8021770:	2b01      	cmp	r3, #1
 8021772:	4604      	mov	r4, r0
 8021774:	dd7a      	ble.n	802186c <_dtoa_r+0x7cc>
 8021776:	2300      	movs	r3, #0
 8021778:	9309      	str	r3, [sp, #36]	; 0x24
 802177a:	6922      	ldr	r2, [r4, #16]
 802177c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021780:	6910      	ldr	r0, [r2, #16]
 8021782:	f000 fb43 	bl	8021e0c <__hi0bits>
 8021786:	f1c0 0020 	rsb	r0, r0, #32
 802178a:	9b05      	ldr	r3, [sp, #20]
 802178c:	4418      	add	r0, r3
 802178e:	f010 001f 	ands.w	r0, r0, #31
 8021792:	f000 8093 	beq.w	80218bc <_dtoa_r+0x81c>
 8021796:	f1c0 0220 	rsb	r2, r0, #32
 802179a:	2a04      	cmp	r2, #4
 802179c:	f340 8085 	ble.w	80218aa <_dtoa_r+0x80a>
 80217a0:	9b04      	ldr	r3, [sp, #16]
 80217a2:	f1c0 001c 	rsb	r0, r0, #28
 80217a6:	4403      	add	r3, r0
 80217a8:	9304      	str	r3, [sp, #16]
 80217aa:	9b05      	ldr	r3, [sp, #20]
 80217ac:	4480      	add	r8, r0
 80217ae:	4403      	add	r3, r0
 80217b0:	9305      	str	r3, [sp, #20]
 80217b2:	9b04      	ldr	r3, [sp, #16]
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	dd05      	ble.n	80217c4 <_dtoa_r+0x724>
 80217b8:	4629      	mov	r1, r5
 80217ba:	461a      	mov	r2, r3
 80217bc:	4630      	mov	r0, r6
 80217be:	f000 fc8d 	bl	80220dc <__lshift>
 80217c2:	4605      	mov	r5, r0
 80217c4:	9b05      	ldr	r3, [sp, #20]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	dd05      	ble.n	80217d6 <_dtoa_r+0x736>
 80217ca:	4621      	mov	r1, r4
 80217cc:	461a      	mov	r2, r3
 80217ce:	4630      	mov	r0, r6
 80217d0:	f000 fc84 	bl	80220dc <__lshift>
 80217d4:	4604      	mov	r4, r0
 80217d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d071      	beq.n	80218c0 <_dtoa_r+0x820>
 80217dc:	4621      	mov	r1, r4
 80217de:	4628      	mov	r0, r5
 80217e0:	f000 fce8 	bl	80221b4 <__mcmp>
 80217e4:	2800      	cmp	r0, #0
 80217e6:	da6b      	bge.n	80218c0 <_dtoa_r+0x820>
 80217e8:	2300      	movs	r3, #0
 80217ea:	4629      	mov	r1, r5
 80217ec:	220a      	movs	r2, #10
 80217ee:	4630      	mov	r0, r6
 80217f0:	f000 fa7c 	bl	8021cec <__multadd>
 80217f4:	9b07      	ldr	r3, [sp, #28]
 80217f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80217fa:	4605      	mov	r5, r0
 80217fc:	2b00      	cmp	r3, #0
 80217fe:	f000 8197 	beq.w	8021b30 <_dtoa_r+0xa90>
 8021802:	4639      	mov	r1, r7
 8021804:	2300      	movs	r3, #0
 8021806:	220a      	movs	r2, #10
 8021808:	4630      	mov	r0, r6
 802180a:	f000 fa6f 	bl	8021cec <__multadd>
 802180e:	f1ba 0f00 	cmp.w	sl, #0
 8021812:	4607      	mov	r7, r0
 8021814:	f300 8093 	bgt.w	802193e <_dtoa_r+0x89e>
 8021818:	9b06      	ldr	r3, [sp, #24]
 802181a:	2b02      	cmp	r3, #2
 802181c:	dc57      	bgt.n	80218ce <_dtoa_r+0x82e>
 802181e:	e08e      	b.n	802193e <_dtoa_r+0x89e>
 8021820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021822:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8021826:	e751      	b.n	80216cc <_dtoa_r+0x62c>
 8021828:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 802182c:	42a3      	cmp	r3, r4
 802182e:	bfbf      	itttt	lt
 8021830:	1ae2      	sublt	r2, r4, r3
 8021832:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8021834:	189b      	addlt	r3, r3, r2
 8021836:	930a      	strlt	r3, [sp, #40]	; 0x28
 8021838:	bfae      	itee	ge
 802183a:	1b1c      	subge	r4, r3, r4
 802183c:	4623      	movlt	r3, r4
 802183e:	2400      	movlt	r4, #0
 8021840:	f1b9 0f00 	cmp.w	r9, #0
 8021844:	bfb5      	itete	lt
 8021846:	9a04      	ldrlt	r2, [sp, #16]
 8021848:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 802184c:	eba2 0809 	sublt.w	r8, r2, r9
 8021850:	464a      	movge	r2, r9
 8021852:	bfb8      	it	lt
 8021854:	2200      	movlt	r2, #0
 8021856:	e73c      	b.n	80216d2 <_dtoa_r+0x632>
 8021858:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802185c:	9f07      	ldr	r7, [sp, #28]
 802185e:	461c      	mov	r4, r3
 8021860:	e744      	b.n	80216ec <_dtoa_r+0x64c>
 8021862:	461a      	mov	r2, r3
 8021864:	e770      	b.n	8021748 <_dtoa_r+0x6a8>
 8021866:	9b06      	ldr	r3, [sp, #24]
 8021868:	2b01      	cmp	r3, #1
 802186a:	dc18      	bgt.n	802189e <_dtoa_r+0x7fe>
 802186c:	9b02      	ldr	r3, [sp, #8]
 802186e:	b9b3      	cbnz	r3, 802189e <_dtoa_r+0x7fe>
 8021870:	9b03      	ldr	r3, [sp, #12]
 8021872:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8021876:	b9a2      	cbnz	r2, 80218a2 <_dtoa_r+0x802>
 8021878:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802187c:	0d12      	lsrs	r2, r2, #20
 802187e:	0512      	lsls	r2, r2, #20
 8021880:	b18a      	cbz	r2, 80218a6 <_dtoa_r+0x806>
 8021882:	9b04      	ldr	r3, [sp, #16]
 8021884:	3301      	adds	r3, #1
 8021886:	9304      	str	r3, [sp, #16]
 8021888:	9b05      	ldr	r3, [sp, #20]
 802188a:	3301      	adds	r3, #1
 802188c:	9305      	str	r3, [sp, #20]
 802188e:	2301      	movs	r3, #1
 8021890:	9309      	str	r3, [sp, #36]	; 0x24
 8021892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021894:	2b00      	cmp	r3, #0
 8021896:	f47f af70 	bne.w	802177a <_dtoa_r+0x6da>
 802189a:	2001      	movs	r0, #1
 802189c:	e775      	b.n	802178a <_dtoa_r+0x6ea>
 802189e:	2300      	movs	r3, #0
 80218a0:	e7f6      	b.n	8021890 <_dtoa_r+0x7f0>
 80218a2:	9b02      	ldr	r3, [sp, #8]
 80218a4:	e7f4      	b.n	8021890 <_dtoa_r+0x7f0>
 80218a6:	9209      	str	r2, [sp, #36]	; 0x24
 80218a8:	e7f3      	b.n	8021892 <_dtoa_r+0x7f2>
 80218aa:	d082      	beq.n	80217b2 <_dtoa_r+0x712>
 80218ac:	9b04      	ldr	r3, [sp, #16]
 80218ae:	321c      	adds	r2, #28
 80218b0:	4413      	add	r3, r2
 80218b2:	9304      	str	r3, [sp, #16]
 80218b4:	9b05      	ldr	r3, [sp, #20]
 80218b6:	4490      	add	r8, r2
 80218b8:	4413      	add	r3, r2
 80218ba:	e779      	b.n	80217b0 <_dtoa_r+0x710>
 80218bc:	4602      	mov	r2, r0
 80218be:	e7f5      	b.n	80218ac <_dtoa_r+0x80c>
 80218c0:	f1b9 0f00 	cmp.w	r9, #0
 80218c4:	dc36      	bgt.n	8021934 <_dtoa_r+0x894>
 80218c6:	9b06      	ldr	r3, [sp, #24]
 80218c8:	2b02      	cmp	r3, #2
 80218ca:	dd33      	ble.n	8021934 <_dtoa_r+0x894>
 80218cc:	46ca      	mov	sl, r9
 80218ce:	f1ba 0f00 	cmp.w	sl, #0
 80218d2:	d10d      	bne.n	80218f0 <_dtoa_r+0x850>
 80218d4:	4621      	mov	r1, r4
 80218d6:	4653      	mov	r3, sl
 80218d8:	2205      	movs	r2, #5
 80218da:	4630      	mov	r0, r6
 80218dc:	f000 fa06 	bl	8021cec <__multadd>
 80218e0:	4601      	mov	r1, r0
 80218e2:	4604      	mov	r4, r0
 80218e4:	4628      	mov	r0, r5
 80218e6:	f000 fc65 	bl	80221b4 <__mcmp>
 80218ea:	2800      	cmp	r0, #0
 80218ec:	f73f ade4 	bgt.w	80214b8 <_dtoa_r+0x418>
 80218f0:	9b08      	ldr	r3, [sp, #32]
 80218f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80218f6:	ea6f 0b03 	mvn.w	fp, r3
 80218fa:	f04f 0900 	mov.w	r9, #0
 80218fe:	4621      	mov	r1, r4
 8021900:	4630      	mov	r0, r6
 8021902:	f000 f9d1 	bl	8021ca8 <_Bfree>
 8021906:	2f00      	cmp	r7, #0
 8021908:	f43f aea1 	beq.w	802164e <_dtoa_r+0x5ae>
 802190c:	f1b9 0f00 	cmp.w	r9, #0
 8021910:	d005      	beq.n	802191e <_dtoa_r+0x87e>
 8021912:	45b9      	cmp	r9, r7
 8021914:	d003      	beq.n	802191e <_dtoa_r+0x87e>
 8021916:	4649      	mov	r1, r9
 8021918:	4630      	mov	r0, r6
 802191a:	f000 f9c5 	bl	8021ca8 <_Bfree>
 802191e:	4639      	mov	r1, r7
 8021920:	4630      	mov	r0, r6
 8021922:	f000 f9c1 	bl	8021ca8 <_Bfree>
 8021926:	e692      	b.n	802164e <_dtoa_r+0x5ae>
 8021928:	2400      	movs	r4, #0
 802192a:	4627      	mov	r7, r4
 802192c:	e7e0      	b.n	80218f0 <_dtoa_r+0x850>
 802192e:	4693      	mov	fp, r2
 8021930:	4627      	mov	r7, r4
 8021932:	e5c1      	b.n	80214b8 <_dtoa_r+0x418>
 8021934:	9b07      	ldr	r3, [sp, #28]
 8021936:	46ca      	mov	sl, r9
 8021938:	2b00      	cmp	r3, #0
 802193a:	f000 8100 	beq.w	8021b3e <_dtoa_r+0xa9e>
 802193e:	f1b8 0f00 	cmp.w	r8, #0
 8021942:	dd05      	ble.n	8021950 <_dtoa_r+0x8b0>
 8021944:	4639      	mov	r1, r7
 8021946:	4642      	mov	r2, r8
 8021948:	4630      	mov	r0, r6
 802194a:	f000 fbc7 	bl	80220dc <__lshift>
 802194e:	4607      	mov	r7, r0
 8021950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021952:	2b00      	cmp	r3, #0
 8021954:	d05d      	beq.n	8021a12 <_dtoa_r+0x972>
 8021956:	6879      	ldr	r1, [r7, #4]
 8021958:	4630      	mov	r0, r6
 802195a:	f000 f965 	bl	8021c28 <_Balloc>
 802195e:	4680      	mov	r8, r0
 8021960:	b928      	cbnz	r0, 802196e <_dtoa_r+0x8ce>
 8021962:	4b82      	ldr	r3, [pc, #520]	; (8021b6c <_dtoa_r+0xacc>)
 8021964:	4602      	mov	r2, r0
 8021966:	f240 21ef 	movw	r1, #751	; 0x2ef
 802196a:	f7ff bbb1 	b.w	80210d0 <_dtoa_r+0x30>
 802196e:	693a      	ldr	r2, [r7, #16]
 8021970:	3202      	adds	r2, #2
 8021972:	0092      	lsls	r2, r2, #2
 8021974:	f107 010c 	add.w	r1, r7, #12
 8021978:	300c      	adds	r0, #12
 802197a:	f7ff fad4 	bl	8020f26 <memcpy>
 802197e:	2201      	movs	r2, #1
 8021980:	4641      	mov	r1, r8
 8021982:	4630      	mov	r0, r6
 8021984:	f000 fbaa 	bl	80220dc <__lshift>
 8021988:	9b01      	ldr	r3, [sp, #4]
 802198a:	3301      	adds	r3, #1
 802198c:	9304      	str	r3, [sp, #16]
 802198e:	9b01      	ldr	r3, [sp, #4]
 8021990:	4453      	add	r3, sl
 8021992:	9308      	str	r3, [sp, #32]
 8021994:	9b02      	ldr	r3, [sp, #8]
 8021996:	f003 0301 	and.w	r3, r3, #1
 802199a:	46b9      	mov	r9, r7
 802199c:	9307      	str	r3, [sp, #28]
 802199e:	4607      	mov	r7, r0
 80219a0:	9b04      	ldr	r3, [sp, #16]
 80219a2:	4621      	mov	r1, r4
 80219a4:	3b01      	subs	r3, #1
 80219a6:	4628      	mov	r0, r5
 80219a8:	9302      	str	r3, [sp, #8]
 80219aa:	f7ff faef 	bl	8020f8c <quorem>
 80219ae:	4603      	mov	r3, r0
 80219b0:	3330      	adds	r3, #48	; 0x30
 80219b2:	9005      	str	r0, [sp, #20]
 80219b4:	4649      	mov	r1, r9
 80219b6:	4628      	mov	r0, r5
 80219b8:	9309      	str	r3, [sp, #36]	; 0x24
 80219ba:	f000 fbfb 	bl	80221b4 <__mcmp>
 80219be:	463a      	mov	r2, r7
 80219c0:	4682      	mov	sl, r0
 80219c2:	4621      	mov	r1, r4
 80219c4:	4630      	mov	r0, r6
 80219c6:	f000 fc11 	bl	80221ec <__mdiff>
 80219ca:	68c2      	ldr	r2, [r0, #12]
 80219cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219ce:	4680      	mov	r8, r0
 80219d0:	bb0a      	cbnz	r2, 8021a16 <_dtoa_r+0x976>
 80219d2:	4601      	mov	r1, r0
 80219d4:	4628      	mov	r0, r5
 80219d6:	f000 fbed 	bl	80221b4 <__mcmp>
 80219da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219dc:	4602      	mov	r2, r0
 80219de:	4641      	mov	r1, r8
 80219e0:	4630      	mov	r0, r6
 80219e2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80219e6:	f000 f95f 	bl	8021ca8 <_Bfree>
 80219ea:	9b06      	ldr	r3, [sp, #24]
 80219ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80219ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80219f2:	ea43 0102 	orr.w	r1, r3, r2
 80219f6:	9b07      	ldr	r3, [sp, #28]
 80219f8:	4319      	orrs	r1, r3
 80219fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219fc:	d10d      	bne.n	8021a1a <_dtoa_r+0x97a>
 80219fe:	2b39      	cmp	r3, #57	; 0x39
 8021a00:	d029      	beq.n	8021a56 <_dtoa_r+0x9b6>
 8021a02:	f1ba 0f00 	cmp.w	sl, #0
 8021a06:	dd01      	ble.n	8021a0c <_dtoa_r+0x96c>
 8021a08:	9b05      	ldr	r3, [sp, #20]
 8021a0a:	3331      	adds	r3, #49	; 0x31
 8021a0c:	9a02      	ldr	r2, [sp, #8]
 8021a0e:	7013      	strb	r3, [r2, #0]
 8021a10:	e775      	b.n	80218fe <_dtoa_r+0x85e>
 8021a12:	4638      	mov	r0, r7
 8021a14:	e7b8      	b.n	8021988 <_dtoa_r+0x8e8>
 8021a16:	2201      	movs	r2, #1
 8021a18:	e7e1      	b.n	80219de <_dtoa_r+0x93e>
 8021a1a:	f1ba 0f00 	cmp.w	sl, #0
 8021a1e:	db06      	blt.n	8021a2e <_dtoa_r+0x98e>
 8021a20:	9906      	ldr	r1, [sp, #24]
 8021a22:	ea41 0a0a 	orr.w	sl, r1, sl
 8021a26:	9907      	ldr	r1, [sp, #28]
 8021a28:	ea5a 0a01 	orrs.w	sl, sl, r1
 8021a2c:	d120      	bne.n	8021a70 <_dtoa_r+0x9d0>
 8021a2e:	2a00      	cmp	r2, #0
 8021a30:	ddec      	ble.n	8021a0c <_dtoa_r+0x96c>
 8021a32:	4629      	mov	r1, r5
 8021a34:	2201      	movs	r2, #1
 8021a36:	4630      	mov	r0, r6
 8021a38:	9304      	str	r3, [sp, #16]
 8021a3a:	f000 fb4f 	bl	80220dc <__lshift>
 8021a3e:	4621      	mov	r1, r4
 8021a40:	4605      	mov	r5, r0
 8021a42:	f000 fbb7 	bl	80221b4 <__mcmp>
 8021a46:	2800      	cmp	r0, #0
 8021a48:	9b04      	ldr	r3, [sp, #16]
 8021a4a:	dc02      	bgt.n	8021a52 <_dtoa_r+0x9b2>
 8021a4c:	d1de      	bne.n	8021a0c <_dtoa_r+0x96c>
 8021a4e:	07da      	lsls	r2, r3, #31
 8021a50:	d5dc      	bpl.n	8021a0c <_dtoa_r+0x96c>
 8021a52:	2b39      	cmp	r3, #57	; 0x39
 8021a54:	d1d8      	bne.n	8021a08 <_dtoa_r+0x968>
 8021a56:	9a02      	ldr	r2, [sp, #8]
 8021a58:	2339      	movs	r3, #57	; 0x39
 8021a5a:	7013      	strb	r3, [r2, #0]
 8021a5c:	4643      	mov	r3, r8
 8021a5e:	4698      	mov	r8, r3
 8021a60:	3b01      	subs	r3, #1
 8021a62:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8021a66:	2a39      	cmp	r2, #57	; 0x39
 8021a68:	d051      	beq.n	8021b0e <_dtoa_r+0xa6e>
 8021a6a:	3201      	adds	r2, #1
 8021a6c:	701a      	strb	r2, [r3, #0]
 8021a6e:	e746      	b.n	80218fe <_dtoa_r+0x85e>
 8021a70:	2a00      	cmp	r2, #0
 8021a72:	dd03      	ble.n	8021a7c <_dtoa_r+0x9dc>
 8021a74:	2b39      	cmp	r3, #57	; 0x39
 8021a76:	d0ee      	beq.n	8021a56 <_dtoa_r+0x9b6>
 8021a78:	3301      	adds	r3, #1
 8021a7a:	e7c7      	b.n	8021a0c <_dtoa_r+0x96c>
 8021a7c:	9a04      	ldr	r2, [sp, #16]
 8021a7e:	9908      	ldr	r1, [sp, #32]
 8021a80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021a84:	428a      	cmp	r2, r1
 8021a86:	d02b      	beq.n	8021ae0 <_dtoa_r+0xa40>
 8021a88:	4629      	mov	r1, r5
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	220a      	movs	r2, #10
 8021a8e:	4630      	mov	r0, r6
 8021a90:	f000 f92c 	bl	8021cec <__multadd>
 8021a94:	45b9      	cmp	r9, r7
 8021a96:	4605      	mov	r5, r0
 8021a98:	f04f 0300 	mov.w	r3, #0
 8021a9c:	f04f 020a 	mov.w	r2, #10
 8021aa0:	4649      	mov	r1, r9
 8021aa2:	4630      	mov	r0, r6
 8021aa4:	d107      	bne.n	8021ab6 <_dtoa_r+0xa16>
 8021aa6:	f000 f921 	bl	8021cec <__multadd>
 8021aaa:	4681      	mov	r9, r0
 8021aac:	4607      	mov	r7, r0
 8021aae:	9b04      	ldr	r3, [sp, #16]
 8021ab0:	3301      	adds	r3, #1
 8021ab2:	9304      	str	r3, [sp, #16]
 8021ab4:	e774      	b.n	80219a0 <_dtoa_r+0x900>
 8021ab6:	f000 f919 	bl	8021cec <__multadd>
 8021aba:	4639      	mov	r1, r7
 8021abc:	4681      	mov	r9, r0
 8021abe:	2300      	movs	r3, #0
 8021ac0:	220a      	movs	r2, #10
 8021ac2:	4630      	mov	r0, r6
 8021ac4:	f000 f912 	bl	8021cec <__multadd>
 8021ac8:	4607      	mov	r7, r0
 8021aca:	e7f0      	b.n	8021aae <_dtoa_r+0xa0e>
 8021acc:	f1ba 0f00 	cmp.w	sl, #0
 8021ad0:	9a01      	ldr	r2, [sp, #4]
 8021ad2:	bfcc      	ite	gt
 8021ad4:	46d0      	movgt	r8, sl
 8021ad6:	f04f 0801 	movle.w	r8, #1
 8021ada:	4490      	add	r8, r2
 8021adc:	f04f 0900 	mov.w	r9, #0
 8021ae0:	4629      	mov	r1, r5
 8021ae2:	2201      	movs	r2, #1
 8021ae4:	4630      	mov	r0, r6
 8021ae6:	9302      	str	r3, [sp, #8]
 8021ae8:	f000 faf8 	bl	80220dc <__lshift>
 8021aec:	4621      	mov	r1, r4
 8021aee:	4605      	mov	r5, r0
 8021af0:	f000 fb60 	bl	80221b4 <__mcmp>
 8021af4:	2800      	cmp	r0, #0
 8021af6:	dcb1      	bgt.n	8021a5c <_dtoa_r+0x9bc>
 8021af8:	d102      	bne.n	8021b00 <_dtoa_r+0xa60>
 8021afa:	9b02      	ldr	r3, [sp, #8]
 8021afc:	07db      	lsls	r3, r3, #31
 8021afe:	d4ad      	bmi.n	8021a5c <_dtoa_r+0x9bc>
 8021b00:	4643      	mov	r3, r8
 8021b02:	4698      	mov	r8, r3
 8021b04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021b08:	2a30      	cmp	r2, #48	; 0x30
 8021b0a:	d0fa      	beq.n	8021b02 <_dtoa_r+0xa62>
 8021b0c:	e6f7      	b.n	80218fe <_dtoa_r+0x85e>
 8021b0e:	9a01      	ldr	r2, [sp, #4]
 8021b10:	429a      	cmp	r2, r3
 8021b12:	d1a4      	bne.n	8021a5e <_dtoa_r+0x9be>
 8021b14:	f10b 0b01 	add.w	fp, fp, #1
 8021b18:	2331      	movs	r3, #49	; 0x31
 8021b1a:	e778      	b.n	8021a0e <_dtoa_r+0x96e>
 8021b1c:	4b14      	ldr	r3, [pc, #80]	; (8021b70 <_dtoa_r+0xad0>)
 8021b1e:	f7ff bb2a 	b.w	8021176 <_dtoa_r+0xd6>
 8021b22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	f47f ab05 	bne.w	8021134 <_dtoa_r+0x94>
 8021b2a:	4b12      	ldr	r3, [pc, #72]	; (8021b74 <_dtoa_r+0xad4>)
 8021b2c:	f7ff bb23 	b.w	8021176 <_dtoa_r+0xd6>
 8021b30:	f1ba 0f00 	cmp.w	sl, #0
 8021b34:	dc03      	bgt.n	8021b3e <_dtoa_r+0xa9e>
 8021b36:	9b06      	ldr	r3, [sp, #24]
 8021b38:	2b02      	cmp	r3, #2
 8021b3a:	f73f aec8 	bgt.w	80218ce <_dtoa_r+0x82e>
 8021b3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021b42:	4621      	mov	r1, r4
 8021b44:	4628      	mov	r0, r5
 8021b46:	f7ff fa21 	bl	8020f8c <quorem>
 8021b4a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021b4e:	f808 3b01 	strb.w	r3, [r8], #1
 8021b52:	9a01      	ldr	r2, [sp, #4]
 8021b54:	eba8 0202 	sub.w	r2, r8, r2
 8021b58:	4592      	cmp	sl, r2
 8021b5a:	ddb7      	ble.n	8021acc <_dtoa_r+0xa2c>
 8021b5c:	4629      	mov	r1, r5
 8021b5e:	2300      	movs	r3, #0
 8021b60:	220a      	movs	r2, #10
 8021b62:	4630      	mov	r0, r6
 8021b64:	f000 f8c2 	bl	8021cec <__multadd>
 8021b68:	4605      	mov	r5, r0
 8021b6a:	e7ea      	b.n	8021b42 <_dtoa_r+0xaa2>
 8021b6c:	08025d2e 	.word	0x08025d2e
 8021b70:	08025c64 	.word	0x08025c64
 8021b74:	08025cc9 	.word	0x08025cc9

08021b78 <__env_lock>:
 8021b78:	4801      	ldr	r0, [pc, #4]	; (8021b80 <__env_lock+0x8>)
 8021b7a:	f7ff b9ca 	b.w	8020f12 <__retarget_lock_acquire_recursive>
 8021b7e:	bf00      	nop
 8021b80:	200171ac 	.word	0x200171ac

08021b84 <__env_unlock>:
 8021b84:	4801      	ldr	r0, [pc, #4]	; (8021b8c <__env_unlock+0x8>)
 8021b86:	f7ff b9c5 	b.w	8020f14 <__retarget_lock_release_recursive>
 8021b8a:	bf00      	nop
 8021b8c:	200171ac 	.word	0x200171ac

08021b90 <_free_r>:
 8021b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021b92:	2900      	cmp	r1, #0
 8021b94:	d044      	beq.n	8021c20 <_free_r+0x90>
 8021b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021b9a:	9001      	str	r0, [sp, #4]
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8021ba2:	bfb8      	it	lt
 8021ba4:	18e4      	addlt	r4, r4, r3
 8021ba6:	f7fd fdbd 	bl	801f724 <__malloc_lock>
 8021baa:	4a1e      	ldr	r2, [pc, #120]	; (8021c24 <_free_r+0x94>)
 8021bac:	9801      	ldr	r0, [sp, #4]
 8021bae:	6813      	ldr	r3, [r2, #0]
 8021bb0:	b933      	cbnz	r3, 8021bc0 <_free_r+0x30>
 8021bb2:	6063      	str	r3, [r4, #4]
 8021bb4:	6014      	str	r4, [r2, #0]
 8021bb6:	b003      	add	sp, #12
 8021bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021bbc:	f7fd bdb8 	b.w	801f730 <__malloc_unlock>
 8021bc0:	42a3      	cmp	r3, r4
 8021bc2:	d908      	bls.n	8021bd6 <_free_r+0x46>
 8021bc4:	6825      	ldr	r5, [r4, #0]
 8021bc6:	1961      	adds	r1, r4, r5
 8021bc8:	428b      	cmp	r3, r1
 8021bca:	bf01      	itttt	eq
 8021bcc:	6819      	ldreq	r1, [r3, #0]
 8021bce:	685b      	ldreq	r3, [r3, #4]
 8021bd0:	1949      	addeq	r1, r1, r5
 8021bd2:	6021      	streq	r1, [r4, #0]
 8021bd4:	e7ed      	b.n	8021bb2 <_free_r+0x22>
 8021bd6:	461a      	mov	r2, r3
 8021bd8:	685b      	ldr	r3, [r3, #4]
 8021bda:	b10b      	cbz	r3, 8021be0 <_free_r+0x50>
 8021bdc:	42a3      	cmp	r3, r4
 8021bde:	d9fa      	bls.n	8021bd6 <_free_r+0x46>
 8021be0:	6811      	ldr	r1, [r2, #0]
 8021be2:	1855      	adds	r5, r2, r1
 8021be4:	42a5      	cmp	r5, r4
 8021be6:	d10b      	bne.n	8021c00 <_free_r+0x70>
 8021be8:	6824      	ldr	r4, [r4, #0]
 8021bea:	4421      	add	r1, r4
 8021bec:	1854      	adds	r4, r2, r1
 8021bee:	42a3      	cmp	r3, r4
 8021bf0:	6011      	str	r1, [r2, #0]
 8021bf2:	d1e0      	bne.n	8021bb6 <_free_r+0x26>
 8021bf4:	681c      	ldr	r4, [r3, #0]
 8021bf6:	685b      	ldr	r3, [r3, #4]
 8021bf8:	6053      	str	r3, [r2, #4]
 8021bfa:	440c      	add	r4, r1
 8021bfc:	6014      	str	r4, [r2, #0]
 8021bfe:	e7da      	b.n	8021bb6 <_free_r+0x26>
 8021c00:	d902      	bls.n	8021c08 <_free_r+0x78>
 8021c02:	230c      	movs	r3, #12
 8021c04:	6003      	str	r3, [r0, #0]
 8021c06:	e7d6      	b.n	8021bb6 <_free_r+0x26>
 8021c08:	6825      	ldr	r5, [r4, #0]
 8021c0a:	1961      	adds	r1, r4, r5
 8021c0c:	428b      	cmp	r3, r1
 8021c0e:	bf04      	itt	eq
 8021c10:	6819      	ldreq	r1, [r3, #0]
 8021c12:	685b      	ldreq	r3, [r3, #4]
 8021c14:	6063      	str	r3, [r4, #4]
 8021c16:	bf04      	itt	eq
 8021c18:	1949      	addeq	r1, r1, r5
 8021c1a:	6021      	streq	r1, [r4, #0]
 8021c1c:	6054      	str	r4, [r2, #4]
 8021c1e:	e7ca      	b.n	8021bb6 <_free_r+0x26>
 8021c20:	b003      	add	sp, #12
 8021c22:	bd30      	pop	{r4, r5, pc}
 8021c24:	20017064 	.word	0x20017064

08021c28 <_Balloc>:
 8021c28:	b570      	push	{r4, r5, r6, lr}
 8021c2a:	69c6      	ldr	r6, [r0, #28]
 8021c2c:	4604      	mov	r4, r0
 8021c2e:	460d      	mov	r5, r1
 8021c30:	b976      	cbnz	r6, 8021c50 <_Balloc+0x28>
 8021c32:	2010      	movs	r0, #16
 8021c34:	f7fd fcc6 	bl	801f5c4 <malloc>
 8021c38:	4602      	mov	r2, r0
 8021c3a:	61e0      	str	r0, [r4, #28]
 8021c3c:	b920      	cbnz	r0, 8021c48 <_Balloc+0x20>
 8021c3e:	4b18      	ldr	r3, [pc, #96]	; (8021ca0 <_Balloc+0x78>)
 8021c40:	4818      	ldr	r0, [pc, #96]	; (8021ca4 <_Balloc+0x7c>)
 8021c42:	216b      	movs	r1, #107	; 0x6b
 8021c44:	f7ff f984 	bl	8020f50 <__assert_func>
 8021c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021c4c:	6006      	str	r6, [r0, #0]
 8021c4e:	60c6      	str	r6, [r0, #12]
 8021c50:	69e6      	ldr	r6, [r4, #28]
 8021c52:	68f3      	ldr	r3, [r6, #12]
 8021c54:	b183      	cbz	r3, 8021c78 <_Balloc+0x50>
 8021c56:	69e3      	ldr	r3, [r4, #28]
 8021c58:	68db      	ldr	r3, [r3, #12]
 8021c5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021c5e:	b9b8      	cbnz	r0, 8021c90 <_Balloc+0x68>
 8021c60:	2101      	movs	r1, #1
 8021c62:	fa01 f605 	lsl.w	r6, r1, r5
 8021c66:	1d72      	adds	r2, r6, #5
 8021c68:	0092      	lsls	r2, r2, #2
 8021c6a:	4620      	mov	r0, r4
 8021c6c:	f7fd fc3a 	bl	801f4e4 <_calloc_r>
 8021c70:	b160      	cbz	r0, 8021c8c <_Balloc+0x64>
 8021c72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021c76:	e00e      	b.n	8021c96 <_Balloc+0x6e>
 8021c78:	2221      	movs	r2, #33	; 0x21
 8021c7a:	2104      	movs	r1, #4
 8021c7c:	4620      	mov	r0, r4
 8021c7e:	f7fd fc31 	bl	801f4e4 <_calloc_r>
 8021c82:	69e3      	ldr	r3, [r4, #28]
 8021c84:	60f0      	str	r0, [r6, #12]
 8021c86:	68db      	ldr	r3, [r3, #12]
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d1e4      	bne.n	8021c56 <_Balloc+0x2e>
 8021c8c:	2000      	movs	r0, #0
 8021c8e:	bd70      	pop	{r4, r5, r6, pc}
 8021c90:	6802      	ldr	r2, [r0, #0]
 8021c92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021c96:	2300      	movs	r3, #0
 8021c98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021c9c:	e7f7      	b.n	8021c8e <_Balloc+0x66>
 8021c9e:	bf00      	nop
 8021ca0:	08025ae4 	.word	0x08025ae4
 8021ca4:	08025d3f 	.word	0x08025d3f

08021ca8 <_Bfree>:
 8021ca8:	b570      	push	{r4, r5, r6, lr}
 8021caa:	69c6      	ldr	r6, [r0, #28]
 8021cac:	4605      	mov	r5, r0
 8021cae:	460c      	mov	r4, r1
 8021cb0:	b976      	cbnz	r6, 8021cd0 <_Bfree+0x28>
 8021cb2:	2010      	movs	r0, #16
 8021cb4:	f7fd fc86 	bl	801f5c4 <malloc>
 8021cb8:	4602      	mov	r2, r0
 8021cba:	61e8      	str	r0, [r5, #28]
 8021cbc:	b920      	cbnz	r0, 8021cc8 <_Bfree+0x20>
 8021cbe:	4b09      	ldr	r3, [pc, #36]	; (8021ce4 <_Bfree+0x3c>)
 8021cc0:	4809      	ldr	r0, [pc, #36]	; (8021ce8 <_Bfree+0x40>)
 8021cc2:	218f      	movs	r1, #143	; 0x8f
 8021cc4:	f7ff f944 	bl	8020f50 <__assert_func>
 8021cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021ccc:	6006      	str	r6, [r0, #0]
 8021cce:	60c6      	str	r6, [r0, #12]
 8021cd0:	b13c      	cbz	r4, 8021ce2 <_Bfree+0x3a>
 8021cd2:	69eb      	ldr	r3, [r5, #28]
 8021cd4:	6862      	ldr	r2, [r4, #4]
 8021cd6:	68db      	ldr	r3, [r3, #12]
 8021cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021cdc:	6021      	str	r1, [r4, #0]
 8021cde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021ce2:	bd70      	pop	{r4, r5, r6, pc}
 8021ce4:	08025ae4 	.word	0x08025ae4
 8021ce8:	08025d3f 	.word	0x08025d3f

08021cec <__multadd>:
 8021cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021cf0:	690d      	ldr	r5, [r1, #16]
 8021cf2:	4607      	mov	r7, r0
 8021cf4:	460c      	mov	r4, r1
 8021cf6:	461e      	mov	r6, r3
 8021cf8:	f101 0c14 	add.w	ip, r1, #20
 8021cfc:	2000      	movs	r0, #0
 8021cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8021d02:	b299      	uxth	r1, r3
 8021d04:	fb02 6101 	mla	r1, r2, r1, r6
 8021d08:	0c1e      	lsrs	r6, r3, #16
 8021d0a:	0c0b      	lsrs	r3, r1, #16
 8021d0c:	fb02 3306 	mla	r3, r2, r6, r3
 8021d10:	b289      	uxth	r1, r1
 8021d12:	3001      	adds	r0, #1
 8021d14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021d18:	4285      	cmp	r5, r0
 8021d1a:	f84c 1b04 	str.w	r1, [ip], #4
 8021d1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021d22:	dcec      	bgt.n	8021cfe <__multadd+0x12>
 8021d24:	b30e      	cbz	r6, 8021d6a <__multadd+0x7e>
 8021d26:	68a3      	ldr	r3, [r4, #8]
 8021d28:	42ab      	cmp	r3, r5
 8021d2a:	dc19      	bgt.n	8021d60 <__multadd+0x74>
 8021d2c:	6861      	ldr	r1, [r4, #4]
 8021d2e:	4638      	mov	r0, r7
 8021d30:	3101      	adds	r1, #1
 8021d32:	f7ff ff79 	bl	8021c28 <_Balloc>
 8021d36:	4680      	mov	r8, r0
 8021d38:	b928      	cbnz	r0, 8021d46 <__multadd+0x5a>
 8021d3a:	4602      	mov	r2, r0
 8021d3c:	4b0c      	ldr	r3, [pc, #48]	; (8021d70 <__multadd+0x84>)
 8021d3e:	480d      	ldr	r0, [pc, #52]	; (8021d74 <__multadd+0x88>)
 8021d40:	21ba      	movs	r1, #186	; 0xba
 8021d42:	f7ff f905 	bl	8020f50 <__assert_func>
 8021d46:	6922      	ldr	r2, [r4, #16]
 8021d48:	3202      	adds	r2, #2
 8021d4a:	f104 010c 	add.w	r1, r4, #12
 8021d4e:	0092      	lsls	r2, r2, #2
 8021d50:	300c      	adds	r0, #12
 8021d52:	f7ff f8e8 	bl	8020f26 <memcpy>
 8021d56:	4621      	mov	r1, r4
 8021d58:	4638      	mov	r0, r7
 8021d5a:	f7ff ffa5 	bl	8021ca8 <_Bfree>
 8021d5e:	4644      	mov	r4, r8
 8021d60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021d64:	3501      	adds	r5, #1
 8021d66:	615e      	str	r6, [r3, #20]
 8021d68:	6125      	str	r5, [r4, #16]
 8021d6a:	4620      	mov	r0, r4
 8021d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d70:	08025d2e 	.word	0x08025d2e
 8021d74:	08025d3f 	.word	0x08025d3f

08021d78 <__s2b>:
 8021d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d7c:	460c      	mov	r4, r1
 8021d7e:	4615      	mov	r5, r2
 8021d80:	461f      	mov	r7, r3
 8021d82:	2209      	movs	r2, #9
 8021d84:	3308      	adds	r3, #8
 8021d86:	4606      	mov	r6, r0
 8021d88:	fb93 f3f2 	sdiv	r3, r3, r2
 8021d8c:	2100      	movs	r1, #0
 8021d8e:	2201      	movs	r2, #1
 8021d90:	429a      	cmp	r2, r3
 8021d92:	db09      	blt.n	8021da8 <__s2b+0x30>
 8021d94:	4630      	mov	r0, r6
 8021d96:	f7ff ff47 	bl	8021c28 <_Balloc>
 8021d9a:	b940      	cbnz	r0, 8021dae <__s2b+0x36>
 8021d9c:	4602      	mov	r2, r0
 8021d9e:	4b19      	ldr	r3, [pc, #100]	; (8021e04 <__s2b+0x8c>)
 8021da0:	4819      	ldr	r0, [pc, #100]	; (8021e08 <__s2b+0x90>)
 8021da2:	21d3      	movs	r1, #211	; 0xd3
 8021da4:	f7ff f8d4 	bl	8020f50 <__assert_func>
 8021da8:	0052      	lsls	r2, r2, #1
 8021daa:	3101      	adds	r1, #1
 8021dac:	e7f0      	b.n	8021d90 <__s2b+0x18>
 8021dae:	9b08      	ldr	r3, [sp, #32]
 8021db0:	6143      	str	r3, [r0, #20]
 8021db2:	2d09      	cmp	r5, #9
 8021db4:	f04f 0301 	mov.w	r3, #1
 8021db8:	6103      	str	r3, [r0, #16]
 8021dba:	dd16      	ble.n	8021dea <__s2b+0x72>
 8021dbc:	f104 0909 	add.w	r9, r4, #9
 8021dc0:	46c8      	mov	r8, r9
 8021dc2:	442c      	add	r4, r5
 8021dc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021dc8:	4601      	mov	r1, r0
 8021dca:	3b30      	subs	r3, #48	; 0x30
 8021dcc:	220a      	movs	r2, #10
 8021dce:	4630      	mov	r0, r6
 8021dd0:	f7ff ff8c 	bl	8021cec <__multadd>
 8021dd4:	45a0      	cmp	r8, r4
 8021dd6:	d1f5      	bne.n	8021dc4 <__s2b+0x4c>
 8021dd8:	f1a5 0408 	sub.w	r4, r5, #8
 8021ddc:	444c      	add	r4, r9
 8021dde:	1b2d      	subs	r5, r5, r4
 8021de0:	1963      	adds	r3, r4, r5
 8021de2:	42bb      	cmp	r3, r7
 8021de4:	db04      	blt.n	8021df0 <__s2b+0x78>
 8021de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021dea:	340a      	adds	r4, #10
 8021dec:	2509      	movs	r5, #9
 8021dee:	e7f6      	b.n	8021dde <__s2b+0x66>
 8021df0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021df4:	4601      	mov	r1, r0
 8021df6:	3b30      	subs	r3, #48	; 0x30
 8021df8:	220a      	movs	r2, #10
 8021dfa:	4630      	mov	r0, r6
 8021dfc:	f7ff ff76 	bl	8021cec <__multadd>
 8021e00:	e7ee      	b.n	8021de0 <__s2b+0x68>
 8021e02:	bf00      	nop
 8021e04:	08025d2e 	.word	0x08025d2e
 8021e08:	08025d3f 	.word	0x08025d3f

08021e0c <__hi0bits>:
 8021e0c:	0c03      	lsrs	r3, r0, #16
 8021e0e:	041b      	lsls	r3, r3, #16
 8021e10:	b9d3      	cbnz	r3, 8021e48 <__hi0bits+0x3c>
 8021e12:	0400      	lsls	r0, r0, #16
 8021e14:	2310      	movs	r3, #16
 8021e16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021e1a:	bf04      	itt	eq
 8021e1c:	0200      	lsleq	r0, r0, #8
 8021e1e:	3308      	addeq	r3, #8
 8021e20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021e24:	bf04      	itt	eq
 8021e26:	0100      	lsleq	r0, r0, #4
 8021e28:	3304      	addeq	r3, #4
 8021e2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021e2e:	bf04      	itt	eq
 8021e30:	0080      	lsleq	r0, r0, #2
 8021e32:	3302      	addeq	r3, #2
 8021e34:	2800      	cmp	r0, #0
 8021e36:	db05      	blt.n	8021e44 <__hi0bits+0x38>
 8021e38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021e3c:	f103 0301 	add.w	r3, r3, #1
 8021e40:	bf08      	it	eq
 8021e42:	2320      	moveq	r3, #32
 8021e44:	4618      	mov	r0, r3
 8021e46:	4770      	bx	lr
 8021e48:	2300      	movs	r3, #0
 8021e4a:	e7e4      	b.n	8021e16 <__hi0bits+0xa>

08021e4c <__lo0bits>:
 8021e4c:	6803      	ldr	r3, [r0, #0]
 8021e4e:	f013 0207 	ands.w	r2, r3, #7
 8021e52:	d00c      	beq.n	8021e6e <__lo0bits+0x22>
 8021e54:	07d9      	lsls	r1, r3, #31
 8021e56:	d422      	bmi.n	8021e9e <__lo0bits+0x52>
 8021e58:	079a      	lsls	r2, r3, #30
 8021e5a:	bf49      	itett	mi
 8021e5c:	085b      	lsrmi	r3, r3, #1
 8021e5e:	089b      	lsrpl	r3, r3, #2
 8021e60:	6003      	strmi	r3, [r0, #0]
 8021e62:	2201      	movmi	r2, #1
 8021e64:	bf5c      	itt	pl
 8021e66:	6003      	strpl	r3, [r0, #0]
 8021e68:	2202      	movpl	r2, #2
 8021e6a:	4610      	mov	r0, r2
 8021e6c:	4770      	bx	lr
 8021e6e:	b299      	uxth	r1, r3
 8021e70:	b909      	cbnz	r1, 8021e76 <__lo0bits+0x2a>
 8021e72:	0c1b      	lsrs	r3, r3, #16
 8021e74:	2210      	movs	r2, #16
 8021e76:	b2d9      	uxtb	r1, r3
 8021e78:	b909      	cbnz	r1, 8021e7e <__lo0bits+0x32>
 8021e7a:	3208      	adds	r2, #8
 8021e7c:	0a1b      	lsrs	r3, r3, #8
 8021e7e:	0719      	lsls	r1, r3, #28
 8021e80:	bf04      	itt	eq
 8021e82:	091b      	lsreq	r3, r3, #4
 8021e84:	3204      	addeq	r2, #4
 8021e86:	0799      	lsls	r1, r3, #30
 8021e88:	bf04      	itt	eq
 8021e8a:	089b      	lsreq	r3, r3, #2
 8021e8c:	3202      	addeq	r2, #2
 8021e8e:	07d9      	lsls	r1, r3, #31
 8021e90:	d403      	bmi.n	8021e9a <__lo0bits+0x4e>
 8021e92:	085b      	lsrs	r3, r3, #1
 8021e94:	f102 0201 	add.w	r2, r2, #1
 8021e98:	d003      	beq.n	8021ea2 <__lo0bits+0x56>
 8021e9a:	6003      	str	r3, [r0, #0]
 8021e9c:	e7e5      	b.n	8021e6a <__lo0bits+0x1e>
 8021e9e:	2200      	movs	r2, #0
 8021ea0:	e7e3      	b.n	8021e6a <__lo0bits+0x1e>
 8021ea2:	2220      	movs	r2, #32
 8021ea4:	e7e1      	b.n	8021e6a <__lo0bits+0x1e>
	...

08021ea8 <__i2b>:
 8021ea8:	b510      	push	{r4, lr}
 8021eaa:	460c      	mov	r4, r1
 8021eac:	2101      	movs	r1, #1
 8021eae:	f7ff febb 	bl	8021c28 <_Balloc>
 8021eb2:	4602      	mov	r2, r0
 8021eb4:	b928      	cbnz	r0, 8021ec2 <__i2b+0x1a>
 8021eb6:	4b05      	ldr	r3, [pc, #20]	; (8021ecc <__i2b+0x24>)
 8021eb8:	4805      	ldr	r0, [pc, #20]	; (8021ed0 <__i2b+0x28>)
 8021eba:	f240 1145 	movw	r1, #325	; 0x145
 8021ebe:	f7ff f847 	bl	8020f50 <__assert_func>
 8021ec2:	2301      	movs	r3, #1
 8021ec4:	6144      	str	r4, [r0, #20]
 8021ec6:	6103      	str	r3, [r0, #16]
 8021ec8:	bd10      	pop	{r4, pc}
 8021eca:	bf00      	nop
 8021ecc:	08025d2e 	.word	0x08025d2e
 8021ed0:	08025d3f 	.word	0x08025d3f

08021ed4 <__multiply>:
 8021ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ed8:	4691      	mov	r9, r2
 8021eda:	690a      	ldr	r2, [r1, #16]
 8021edc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021ee0:	429a      	cmp	r2, r3
 8021ee2:	bfb8      	it	lt
 8021ee4:	460b      	movlt	r3, r1
 8021ee6:	460c      	mov	r4, r1
 8021ee8:	bfbc      	itt	lt
 8021eea:	464c      	movlt	r4, r9
 8021eec:	4699      	movlt	r9, r3
 8021eee:	6927      	ldr	r7, [r4, #16]
 8021ef0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021ef4:	68a3      	ldr	r3, [r4, #8]
 8021ef6:	6861      	ldr	r1, [r4, #4]
 8021ef8:	eb07 060a 	add.w	r6, r7, sl
 8021efc:	42b3      	cmp	r3, r6
 8021efe:	b085      	sub	sp, #20
 8021f00:	bfb8      	it	lt
 8021f02:	3101      	addlt	r1, #1
 8021f04:	f7ff fe90 	bl	8021c28 <_Balloc>
 8021f08:	b930      	cbnz	r0, 8021f18 <__multiply+0x44>
 8021f0a:	4602      	mov	r2, r0
 8021f0c:	4b44      	ldr	r3, [pc, #272]	; (8022020 <__multiply+0x14c>)
 8021f0e:	4845      	ldr	r0, [pc, #276]	; (8022024 <__multiply+0x150>)
 8021f10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8021f14:	f7ff f81c 	bl	8020f50 <__assert_func>
 8021f18:	f100 0514 	add.w	r5, r0, #20
 8021f1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021f20:	462b      	mov	r3, r5
 8021f22:	2200      	movs	r2, #0
 8021f24:	4543      	cmp	r3, r8
 8021f26:	d321      	bcc.n	8021f6c <__multiply+0x98>
 8021f28:	f104 0314 	add.w	r3, r4, #20
 8021f2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021f30:	f109 0314 	add.w	r3, r9, #20
 8021f34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021f38:	9202      	str	r2, [sp, #8]
 8021f3a:	1b3a      	subs	r2, r7, r4
 8021f3c:	3a15      	subs	r2, #21
 8021f3e:	f022 0203 	bic.w	r2, r2, #3
 8021f42:	3204      	adds	r2, #4
 8021f44:	f104 0115 	add.w	r1, r4, #21
 8021f48:	428f      	cmp	r7, r1
 8021f4a:	bf38      	it	cc
 8021f4c:	2204      	movcc	r2, #4
 8021f4e:	9201      	str	r2, [sp, #4]
 8021f50:	9a02      	ldr	r2, [sp, #8]
 8021f52:	9303      	str	r3, [sp, #12]
 8021f54:	429a      	cmp	r2, r3
 8021f56:	d80c      	bhi.n	8021f72 <__multiply+0x9e>
 8021f58:	2e00      	cmp	r6, #0
 8021f5a:	dd03      	ble.n	8021f64 <__multiply+0x90>
 8021f5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d05b      	beq.n	802201c <__multiply+0x148>
 8021f64:	6106      	str	r6, [r0, #16]
 8021f66:	b005      	add	sp, #20
 8021f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f6c:	f843 2b04 	str.w	r2, [r3], #4
 8021f70:	e7d8      	b.n	8021f24 <__multiply+0x50>
 8021f72:	f8b3 a000 	ldrh.w	sl, [r3]
 8021f76:	f1ba 0f00 	cmp.w	sl, #0
 8021f7a:	d024      	beq.n	8021fc6 <__multiply+0xf2>
 8021f7c:	f104 0e14 	add.w	lr, r4, #20
 8021f80:	46a9      	mov	r9, r5
 8021f82:	f04f 0c00 	mov.w	ip, #0
 8021f86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021f8a:	f8d9 1000 	ldr.w	r1, [r9]
 8021f8e:	fa1f fb82 	uxth.w	fp, r2
 8021f92:	b289      	uxth	r1, r1
 8021f94:	fb0a 110b 	mla	r1, sl, fp, r1
 8021f98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021f9c:	f8d9 2000 	ldr.w	r2, [r9]
 8021fa0:	4461      	add	r1, ip
 8021fa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021fa6:	fb0a c20b 	mla	r2, sl, fp, ip
 8021faa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021fae:	b289      	uxth	r1, r1
 8021fb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021fb4:	4577      	cmp	r7, lr
 8021fb6:	f849 1b04 	str.w	r1, [r9], #4
 8021fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021fbe:	d8e2      	bhi.n	8021f86 <__multiply+0xb2>
 8021fc0:	9a01      	ldr	r2, [sp, #4]
 8021fc2:	f845 c002 	str.w	ip, [r5, r2]
 8021fc6:	9a03      	ldr	r2, [sp, #12]
 8021fc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021fcc:	3304      	adds	r3, #4
 8021fce:	f1b9 0f00 	cmp.w	r9, #0
 8021fd2:	d021      	beq.n	8022018 <__multiply+0x144>
 8021fd4:	6829      	ldr	r1, [r5, #0]
 8021fd6:	f104 0c14 	add.w	ip, r4, #20
 8021fda:	46ae      	mov	lr, r5
 8021fdc:	f04f 0a00 	mov.w	sl, #0
 8021fe0:	f8bc b000 	ldrh.w	fp, [ip]
 8021fe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021fe8:	fb09 220b 	mla	r2, r9, fp, r2
 8021fec:	4452      	add	r2, sl
 8021fee:	b289      	uxth	r1, r1
 8021ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021ff4:	f84e 1b04 	str.w	r1, [lr], #4
 8021ff8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8021ffc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022000:	f8be 1000 	ldrh.w	r1, [lr]
 8022004:	fb09 110a 	mla	r1, r9, sl, r1
 8022008:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802200c:	4567      	cmp	r7, ip
 802200e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022012:	d8e5      	bhi.n	8021fe0 <__multiply+0x10c>
 8022014:	9a01      	ldr	r2, [sp, #4]
 8022016:	50a9      	str	r1, [r5, r2]
 8022018:	3504      	adds	r5, #4
 802201a:	e799      	b.n	8021f50 <__multiply+0x7c>
 802201c:	3e01      	subs	r6, #1
 802201e:	e79b      	b.n	8021f58 <__multiply+0x84>
 8022020:	08025d2e 	.word	0x08025d2e
 8022024:	08025d3f 	.word	0x08025d3f

08022028 <__pow5mult>:
 8022028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802202c:	4615      	mov	r5, r2
 802202e:	f012 0203 	ands.w	r2, r2, #3
 8022032:	4606      	mov	r6, r0
 8022034:	460f      	mov	r7, r1
 8022036:	d007      	beq.n	8022048 <__pow5mult+0x20>
 8022038:	4c25      	ldr	r4, [pc, #148]	; (80220d0 <__pow5mult+0xa8>)
 802203a:	3a01      	subs	r2, #1
 802203c:	2300      	movs	r3, #0
 802203e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022042:	f7ff fe53 	bl	8021cec <__multadd>
 8022046:	4607      	mov	r7, r0
 8022048:	10ad      	asrs	r5, r5, #2
 802204a:	d03d      	beq.n	80220c8 <__pow5mult+0xa0>
 802204c:	69f4      	ldr	r4, [r6, #28]
 802204e:	b97c      	cbnz	r4, 8022070 <__pow5mult+0x48>
 8022050:	2010      	movs	r0, #16
 8022052:	f7fd fab7 	bl	801f5c4 <malloc>
 8022056:	4602      	mov	r2, r0
 8022058:	61f0      	str	r0, [r6, #28]
 802205a:	b928      	cbnz	r0, 8022068 <__pow5mult+0x40>
 802205c:	4b1d      	ldr	r3, [pc, #116]	; (80220d4 <__pow5mult+0xac>)
 802205e:	481e      	ldr	r0, [pc, #120]	; (80220d8 <__pow5mult+0xb0>)
 8022060:	f240 11b3 	movw	r1, #435	; 0x1b3
 8022064:	f7fe ff74 	bl	8020f50 <__assert_func>
 8022068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802206c:	6004      	str	r4, [r0, #0]
 802206e:	60c4      	str	r4, [r0, #12]
 8022070:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8022074:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022078:	b94c      	cbnz	r4, 802208e <__pow5mult+0x66>
 802207a:	f240 2171 	movw	r1, #625	; 0x271
 802207e:	4630      	mov	r0, r6
 8022080:	f7ff ff12 	bl	8021ea8 <__i2b>
 8022084:	2300      	movs	r3, #0
 8022086:	f8c8 0008 	str.w	r0, [r8, #8]
 802208a:	4604      	mov	r4, r0
 802208c:	6003      	str	r3, [r0, #0]
 802208e:	f04f 0900 	mov.w	r9, #0
 8022092:	07eb      	lsls	r3, r5, #31
 8022094:	d50a      	bpl.n	80220ac <__pow5mult+0x84>
 8022096:	4639      	mov	r1, r7
 8022098:	4622      	mov	r2, r4
 802209a:	4630      	mov	r0, r6
 802209c:	f7ff ff1a 	bl	8021ed4 <__multiply>
 80220a0:	4639      	mov	r1, r7
 80220a2:	4680      	mov	r8, r0
 80220a4:	4630      	mov	r0, r6
 80220a6:	f7ff fdff 	bl	8021ca8 <_Bfree>
 80220aa:	4647      	mov	r7, r8
 80220ac:	106d      	asrs	r5, r5, #1
 80220ae:	d00b      	beq.n	80220c8 <__pow5mult+0xa0>
 80220b0:	6820      	ldr	r0, [r4, #0]
 80220b2:	b938      	cbnz	r0, 80220c4 <__pow5mult+0x9c>
 80220b4:	4622      	mov	r2, r4
 80220b6:	4621      	mov	r1, r4
 80220b8:	4630      	mov	r0, r6
 80220ba:	f7ff ff0b 	bl	8021ed4 <__multiply>
 80220be:	6020      	str	r0, [r4, #0]
 80220c0:	f8c0 9000 	str.w	r9, [r0]
 80220c4:	4604      	mov	r4, r0
 80220c6:	e7e4      	b.n	8022092 <__pow5mult+0x6a>
 80220c8:	4638      	mov	r0, r7
 80220ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80220ce:	bf00      	nop
 80220d0:	08025e88 	.word	0x08025e88
 80220d4:	08025ae4 	.word	0x08025ae4
 80220d8:	08025d3f 	.word	0x08025d3f

080220dc <__lshift>:
 80220dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220e0:	460c      	mov	r4, r1
 80220e2:	6849      	ldr	r1, [r1, #4]
 80220e4:	6923      	ldr	r3, [r4, #16]
 80220e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80220ea:	68a3      	ldr	r3, [r4, #8]
 80220ec:	4607      	mov	r7, r0
 80220ee:	4691      	mov	r9, r2
 80220f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80220f4:	f108 0601 	add.w	r6, r8, #1
 80220f8:	42b3      	cmp	r3, r6
 80220fa:	db0b      	blt.n	8022114 <__lshift+0x38>
 80220fc:	4638      	mov	r0, r7
 80220fe:	f7ff fd93 	bl	8021c28 <_Balloc>
 8022102:	4605      	mov	r5, r0
 8022104:	b948      	cbnz	r0, 802211a <__lshift+0x3e>
 8022106:	4602      	mov	r2, r0
 8022108:	4b28      	ldr	r3, [pc, #160]	; (80221ac <__lshift+0xd0>)
 802210a:	4829      	ldr	r0, [pc, #164]	; (80221b0 <__lshift+0xd4>)
 802210c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8022110:	f7fe ff1e 	bl	8020f50 <__assert_func>
 8022114:	3101      	adds	r1, #1
 8022116:	005b      	lsls	r3, r3, #1
 8022118:	e7ee      	b.n	80220f8 <__lshift+0x1c>
 802211a:	2300      	movs	r3, #0
 802211c:	f100 0114 	add.w	r1, r0, #20
 8022120:	f100 0210 	add.w	r2, r0, #16
 8022124:	4618      	mov	r0, r3
 8022126:	4553      	cmp	r3, sl
 8022128:	db33      	blt.n	8022192 <__lshift+0xb6>
 802212a:	6920      	ldr	r0, [r4, #16]
 802212c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022130:	f104 0314 	add.w	r3, r4, #20
 8022134:	f019 091f 	ands.w	r9, r9, #31
 8022138:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802213c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022140:	d02b      	beq.n	802219a <__lshift+0xbe>
 8022142:	f1c9 0e20 	rsb	lr, r9, #32
 8022146:	468a      	mov	sl, r1
 8022148:	2200      	movs	r2, #0
 802214a:	6818      	ldr	r0, [r3, #0]
 802214c:	fa00 f009 	lsl.w	r0, r0, r9
 8022150:	4310      	orrs	r0, r2
 8022152:	f84a 0b04 	str.w	r0, [sl], #4
 8022156:	f853 2b04 	ldr.w	r2, [r3], #4
 802215a:	459c      	cmp	ip, r3
 802215c:	fa22 f20e 	lsr.w	r2, r2, lr
 8022160:	d8f3      	bhi.n	802214a <__lshift+0x6e>
 8022162:	ebac 0304 	sub.w	r3, ip, r4
 8022166:	3b15      	subs	r3, #21
 8022168:	f023 0303 	bic.w	r3, r3, #3
 802216c:	3304      	adds	r3, #4
 802216e:	f104 0015 	add.w	r0, r4, #21
 8022172:	4584      	cmp	ip, r0
 8022174:	bf38      	it	cc
 8022176:	2304      	movcc	r3, #4
 8022178:	50ca      	str	r2, [r1, r3]
 802217a:	b10a      	cbz	r2, 8022180 <__lshift+0xa4>
 802217c:	f108 0602 	add.w	r6, r8, #2
 8022180:	3e01      	subs	r6, #1
 8022182:	4638      	mov	r0, r7
 8022184:	612e      	str	r6, [r5, #16]
 8022186:	4621      	mov	r1, r4
 8022188:	f7ff fd8e 	bl	8021ca8 <_Bfree>
 802218c:	4628      	mov	r0, r5
 802218e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022192:	f842 0f04 	str.w	r0, [r2, #4]!
 8022196:	3301      	adds	r3, #1
 8022198:	e7c5      	b.n	8022126 <__lshift+0x4a>
 802219a:	3904      	subs	r1, #4
 802219c:	f853 2b04 	ldr.w	r2, [r3], #4
 80221a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80221a4:	459c      	cmp	ip, r3
 80221a6:	d8f9      	bhi.n	802219c <__lshift+0xc0>
 80221a8:	e7ea      	b.n	8022180 <__lshift+0xa4>
 80221aa:	bf00      	nop
 80221ac:	08025d2e 	.word	0x08025d2e
 80221b0:	08025d3f 	.word	0x08025d3f

080221b4 <__mcmp>:
 80221b4:	b530      	push	{r4, r5, lr}
 80221b6:	6902      	ldr	r2, [r0, #16]
 80221b8:	690c      	ldr	r4, [r1, #16]
 80221ba:	1b12      	subs	r2, r2, r4
 80221bc:	d10e      	bne.n	80221dc <__mcmp+0x28>
 80221be:	f100 0314 	add.w	r3, r0, #20
 80221c2:	3114      	adds	r1, #20
 80221c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80221c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80221cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80221d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80221d4:	42a5      	cmp	r5, r4
 80221d6:	d003      	beq.n	80221e0 <__mcmp+0x2c>
 80221d8:	d305      	bcc.n	80221e6 <__mcmp+0x32>
 80221da:	2201      	movs	r2, #1
 80221dc:	4610      	mov	r0, r2
 80221de:	bd30      	pop	{r4, r5, pc}
 80221e0:	4283      	cmp	r3, r0
 80221e2:	d3f3      	bcc.n	80221cc <__mcmp+0x18>
 80221e4:	e7fa      	b.n	80221dc <__mcmp+0x28>
 80221e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80221ea:	e7f7      	b.n	80221dc <__mcmp+0x28>

080221ec <__mdiff>:
 80221ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221f0:	460c      	mov	r4, r1
 80221f2:	4606      	mov	r6, r0
 80221f4:	4611      	mov	r1, r2
 80221f6:	4620      	mov	r0, r4
 80221f8:	4690      	mov	r8, r2
 80221fa:	f7ff ffdb 	bl	80221b4 <__mcmp>
 80221fe:	1e05      	subs	r5, r0, #0
 8022200:	d110      	bne.n	8022224 <__mdiff+0x38>
 8022202:	4629      	mov	r1, r5
 8022204:	4630      	mov	r0, r6
 8022206:	f7ff fd0f 	bl	8021c28 <_Balloc>
 802220a:	b930      	cbnz	r0, 802221a <__mdiff+0x2e>
 802220c:	4b3a      	ldr	r3, [pc, #232]	; (80222f8 <__mdiff+0x10c>)
 802220e:	4602      	mov	r2, r0
 8022210:	f240 2137 	movw	r1, #567	; 0x237
 8022214:	4839      	ldr	r0, [pc, #228]	; (80222fc <__mdiff+0x110>)
 8022216:	f7fe fe9b 	bl	8020f50 <__assert_func>
 802221a:	2301      	movs	r3, #1
 802221c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022224:	bfa4      	itt	ge
 8022226:	4643      	movge	r3, r8
 8022228:	46a0      	movge	r8, r4
 802222a:	4630      	mov	r0, r6
 802222c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022230:	bfa6      	itte	ge
 8022232:	461c      	movge	r4, r3
 8022234:	2500      	movge	r5, #0
 8022236:	2501      	movlt	r5, #1
 8022238:	f7ff fcf6 	bl	8021c28 <_Balloc>
 802223c:	b920      	cbnz	r0, 8022248 <__mdiff+0x5c>
 802223e:	4b2e      	ldr	r3, [pc, #184]	; (80222f8 <__mdiff+0x10c>)
 8022240:	4602      	mov	r2, r0
 8022242:	f240 2145 	movw	r1, #581	; 0x245
 8022246:	e7e5      	b.n	8022214 <__mdiff+0x28>
 8022248:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802224c:	6926      	ldr	r6, [r4, #16]
 802224e:	60c5      	str	r5, [r0, #12]
 8022250:	f104 0914 	add.w	r9, r4, #20
 8022254:	f108 0514 	add.w	r5, r8, #20
 8022258:	f100 0e14 	add.w	lr, r0, #20
 802225c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022260:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022264:	f108 0210 	add.w	r2, r8, #16
 8022268:	46f2      	mov	sl, lr
 802226a:	2100      	movs	r1, #0
 802226c:	f859 3b04 	ldr.w	r3, [r9], #4
 8022270:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022274:	fa11 f88b 	uxtah	r8, r1, fp
 8022278:	b299      	uxth	r1, r3
 802227a:	0c1b      	lsrs	r3, r3, #16
 802227c:	eba8 0801 	sub.w	r8, r8, r1
 8022280:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022284:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022288:	fa1f f888 	uxth.w	r8, r8
 802228c:	1419      	asrs	r1, r3, #16
 802228e:	454e      	cmp	r6, r9
 8022290:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022294:	f84a 3b04 	str.w	r3, [sl], #4
 8022298:	d8e8      	bhi.n	802226c <__mdiff+0x80>
 802229a:	1b33      	subs	r3, r6, r4
 802229c:	3b15      	subs	r3, #21
 802229e:	f023 0303 	bic.w	r3, r3, #3
 80222a2:	3304      	adds	r3, #4
 80222a4:	3415      	adds	r4, #21
 80222a6:	42a6      	cmp	r6, r4
 80222a8:	bf38      	it	cc
 80222aa:	2304      	movcc	r3, #4
 80222ac:	441d      	add	r5, r3
 80222ae:	4473      	add	r3, lr
 80222b0:	469e      	mov	lr, r3
 80222b2:	462e      	mov	r6, r5
 80222b4:	4566      	cmp	r6, ip
 80222b6:	d30e      	bcc.n	80222d6 <__mdiff+0xea>
 80222b8:	f10c 0203 	add.w	r2, ip, #3
 80222bc:	1b52      	subs	r2, r2, r5
 80222be:	f022 0203 	bic.w	r2, r2, #3
 80222c2:	3d03      	subs	r5, #3
 80222c4:	45ac      	cmp	ip, r5
 80222c6:	bf38      	it	cc
 80222c8:	2200      	movcc	r2, #0
 80222ca:	4413      	add	r3, r2
 80222cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80222d0:	b17a      	cbz	r2, 80222f2 <__mdiff+0x106>
 80222d2:	6107      	str	r7, [r0, #16]
 80222d4:	e7a4      	b.n	8022220 <__mdiff+0x34>
 80222d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80222da:	fa11 f288 	uxtah	r2, r1, r8
 80222de:	1414      	asrs	r4, r2, #16
 80222e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80222e4:	b292      	uxth	r2, r2
 80222e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80222ea:	f84e 2b04 	str.w	r2, [lr], #4
 80222ee:	1421      	asrs	r1, r4, #16
 80222f0:	e7e0      	b.n	80222b4 <__mdiff+0xc8>
 80222f2:	3f01      	subs	r7, #1
 80222f4:	e7ea      	b.n	80222cc <__mdiff+0xe0>
 80222f6:	bf00      	nop
 80222f8:	08025d2e 	.word	0x08025d2e
 80222fc:	08025d3f 	.word	0x08025d3f

08022300 <__ulp>:
 8022300:	b082      	sub	sp, #8
 8022302:	ed8d 0b00 	vstr	d0, [sp]
 8022306:	9a01      	ldr	r2, [sp, #4]
 8022308:	4b0f      	ldr	r3, [pc, #60]	; (8022348 <__ulp+0x48>)
 802230a:	4013      	ands	r3, r2
 802230c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8022310:	2b00      	cmp	r3, #0
 8022312:	dc08      	bgt.n	8022326 <__ulp+0x26>
 8022314:	425b      	negs	r3, r3
 8022316:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802231a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802231e:	da04      	bge.n	802232a <__ulp+0x2a>
 8022320:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8022324:	4113      	asrs	r3, r2
 8022326:	2200      	movs	r2, #0
 8022328:	e008      	b.n	802233c <__ulp+0x3c>
 802232a:	f1a2 0314 	sub.w	r3, r2, #20
 802232e:	2b1e      	cmp	r3, #30
 8022330:	bfda      	itte	le
 8022332:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8022336:	40da      	lsrle	r2, r3
 8022338:	2201      	movgt	r2, #1
 802233a:	2300      	movs	r3, #0
 802233c:	4619      	mov	r1, r3
 802233e:	4610      	mov	r0, r2
 8022340:	ec41 0b10 	vmov	d0, r0, r1
 8022344:	b002      	add	sp, #8
 8022346:	4770      	bx	lr
 8022348:	7ff00000 	.word	0x7ff00000

0802234c <__b2d>:
 802234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022350:	6906      	ldr	r6, [r0, #16]
 8022352:	f100 0814 	add.w	r8, r0, #20
 8022356:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802235a:	1f37      	subs	r7, r6, #4
 802235c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8022360:	4610      	mov	r0, r2
 8022362:	f7ff fd53 	bl	8021e0c <__hi0bits>
 8022366:	f1c0 0320 	rsb	r3, r0, #32
 802236a:	280a      	cmp	r0, #10
 802236c:	600b      	str	r3, [r1, #0]
 802236e:	491b      	ldr	r1, [pc, #108]	; (80223dc <__b2d+0x90>)
 8022370:	dc15      	bgt.n	802239e <__b2d+0x52>
 8022372:	f1c0 0c0b 	rsb	ip, r0, #11
 8022376:	fa22 f30c 	lsr.w	r3, r2, ip
 802237a:	45b8      	cmp	r8, r7
 802237c:	ea43 0501 	orr.w	r5, r3, r1
 8022380:	bf34      	ite	cc
 8022382:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8022386:	2300      	movcs	r3, #0
 8022388:	3015      	adds	r0, #21
 802238a:	fa02 f000 	lsl.w	r0, r2, r0
 802238e:	fa23 f30c 	lsr.w	r3, r3, ip
 8022392:	4303      	orrs	r3, r0
 8022394:	461c      	mov	r4, r3
 8022396:	ec45 4b10 	vmov	d0, r4, r5
 802239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802239e:	45b8      	cmp	r8, r7
 80223a0:	bf3a      	itte	cc
 80223a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80223a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80223aa:	2300      	movcs	r3, #0
 80223ac:	380b      	subs	r0, #11
 80223ae:	d012      	beq.n	80223d6 <__b2d+0x8a>
 80223b0:	f1c0 0120 	rsb	r1, r0, #32
 80223b4:	fa23 f401 	lsr.w	r4, r3, r1
 80223b8:	4082      	lsls	r2, r0
 80223ba:	4322      	orrs	r2, r4
 80223bc:	4547      	cmp	r7, r8
 80223be:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80223c2:	bf8c      	ite	hi
 80223c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80223c8:	2200      	movls	r2, #0
 80223ca:	4083      	lsls	r3, r0
 80223cc:	40ca      	lsrs	r2, r1
 80223ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80223d2:	4313      	orrs	r3, r2
 80223d4:	e7de      	b.n	8022394 <__b2d+0x48>
 80223d6:	ea42 0501 	orr.w	r5, r2, r1
 80223da:	e7db      	b.n	8022394 <__b2d+0x48>
 80223dc:	3ff00000 	.word	0x3ff00000

080223e0 <__d2b>:
 80223e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80223e4:	460f      	mov	r7, r1
 80223e6:	2101      	movs	r1, #1
 80223e8:	ec59 8b10 	vmov	r8, r9, d0
 80223ec:	4616      	mov	r6, r2
 80223ee:	f7ff fc1b 	bl	8021c28 <_Balloc>
 80223f2:	4604      	mov	r4, r0
 80223f4:	b930      	cbnz	r0, 8022404 <__d2b+0x24>
 80223f6:	4602      	mov	r2, r0
 80223f8:	4b24      	ldr	r3, [pc, #144]	; (802248c <__d2b+0xac>)
 80223fa:	4825      	ldr	r0, [pc, #148]	; (8022490 <__d2b+0xb0>)
 80223fc:	f240 310f 	movw	r1, #783	; 0x30f
 8022400:	f7fe fda6 	bl	8020f50 <__assert_func>
 8022404:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8022408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802240c:	bb2d      	cbnz	r5, 802245a <__d2b+0x7a>
 802240e:	9301      	str	r3, [sp, #4]
 8022410:	f1b8 0300 	subs.w	r3, r8, #0
 8022414:	d026      	beq.n	8022464 <__d2b+0x84>
 8022416:	4668      	mov	r0, sp
 8022418:	9300      	str	r3, [sp, #0]
 802241a:	f7ff fd17 	bl	8021e4c <__lo0bits>
 802241e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8022422:	b1e8      	cbz	r0, 8022460 <__d2b+0x80>
 8022424:	f1c0 0320 	rsb	r3, r0, #32
 8022428:	fa02 f303 	lsl.w	r3, r2, r3
 802242c:	430b      	orrs	r3, r1
 802242e:	40c2      	lsrs	r2, r0
 8022430:	6163      	str	r3, [r4, #20]
 8022432:	9201      	str	r2, [sp, #4]
 8022434:	9b01      	ldr	r3, [sp, #4]
 8022436:	61a3      	str	r3, [r4, #24]
 8022438:	2b00      	cmp	r3, #0
 802243a:	bf14      	ite	ne
 802243c:	2202      	movne	r2, #2
 802243e:	2201      	moveq	r2, #1
 8022440:	6122      	str	r2, [r4, #16]
 8022442:	b1bd      	cbz	r5, 8022474 <__d2b+0x94>
 8022444:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022448:	4405      	add	r5, r0
 802244a:	603d      	str	r5, [r7, #0]
 802244c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022450:	6030      	str	r0, [r6, #0]
 8022452:	4620      	mov	r0, r4
 8022454:	b003      	add	sp, #12
 8022456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802245a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802245e:	e7d6      	b.n	802240e <__d2b+0x2e>
 8022460:	6161      	str	r1, [r4, #20]
 8022462:	e7e7      	b.n	8022434 <__d2b+0x54>
 8022464:	a801      	add	r0, sp, #4
 8022466:	f7ff fcf1 	bl	8021e4c <__lo0bits>
 802246a:	9b01      	ldr	r3, [sp, #4]
 802246c:	6163      	str	r3, [r4, #20]
 802246e:	3020      	adds	r0, #32
 8022470:	2201      	movs	r2, #1
 8022472:	e7e5      	b.n	8022440 <__d2b+0x60>
 8022474:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022478:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802247c:	6038      	str	r0, [r7, #0]
 802247e:	6918      	ldr	r0, [r3, #16]
 8022480:	f7ff fcc4 	bl	8021e0c <__hi0bits>
 8022484:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022488:	e7e2      	b.n	8022450 <__d2b+0x70>
 802248a:	bf00      	nop
 802248c:	08025d2e 	.word	0x08025d2e
 8022490:	08025d3f 	.word	0x08025d3f

08022494 <__ratio>:
 8022494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022498:	4688      	mov	r8, r1
 802249a:	4669      	mov	r1, sp
 802249c:	4681      	mov	r9, r0
 802249e:	f7ff ff55 	bl	802234c <__b2d>
 80224a2:	a901      	add	r1, sp, #4
 80224a4:	4640      	mov	r0, r8
 80224a6:	ec55 4b10 	vmov	r4, r5, d0
 80224aa:	ee10 aa10 	vmov	sl, s0
 80224ae:	f7ff ff4d 	bl	802234c <__b2d>
 80224b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80224b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80224ba:	1ad2      	subs	r2, r2, r3
 80224bc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80224c0:	1a5b      	subs	r3, r3, r1
 80224c2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80224c6:	ec57 6b10 	vmov	r6, r7, d0
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	bfd6      	itet	le
 80224ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80224d2:	462a      	movgt	r2, r5
 80224d4:	463a      	movle	r2, r7
 80224d6:	46ab      	mov	fp, r5
 80224d8:	bfd6      	itet	le
 80224da:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80224de:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80224e2:	ee00 3a90 	vmovle	s1, r3
 80224e6:	ec4b ab17 	vmov	d7, sl, fp
 80224ea:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80224ee:	b003      	add	sp, #12
 80224f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080224f4 <__copybits>:
 80224f4:	3901      	subs	r1, #1
 80224f6:	b570      	push	{r4, r5, r6, lr}
 80224f8:	1149      	asrs	r1, r1, #5
 80224fa:	6914      	ldr	r4, [r2, #16]
 80224fc:	3101      	adds	r1, #1
 80224fe:	f102 0314 	add.w	r3, r2, #20
 8022502:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022506:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802250a:	1f05      	subs	r5, r0, #4
 802250c:	42a3      	cmp	r3, r4
 802250e:	d30c      	bcc.n	802252a <__copybits+0x36>
 8022510:	1aa3      	subs	r3, r4, r2
 8022512:	3b11      	subs	r3, #17
 8022514:	f023 0303 	bic.w	r3, r3, #3
 8022518:	3211      	adds	r2, #17
 802251a:	42a2      	cmp	r2, r4
 802251c:	bf88      	it	hi
 802251e:	2300      	movhi	r3, #0
 8022520:	4418      	add	r0, r3
 8022522:	2300      	movs	r3, #0
 8022524:	4288      	cmp	r0, r1
 8022526:	d305      	bcc.n	8022534 <__copybits+0x40>
 8022528:	bd70      	pop	{r4, r5, r6, pc}
 802252a:	f853 6b04 	ldr.w	r6, [r3], #4
 802252e:	f845 6f04 	str.w	r6, [r5, #4]!
 8022532:	e7eb      	b.n	802250c <__copybits+0x18>
 8022534:	f840 3b04 	str.w	r3, [r0], #4
 8022538:	e7f4      	b.n	8022524 <__copybits+0x30>

0802253a <__any_on>:
 802253a:	f100 0214 	add.w	r2, r0, #20
 802253e:	6900      	ldr	r0, [r0, #16]
 8022540:	114b      	asrs	r3, r1, #5
 8022542:	4298      	cmp	r0, r3
 8022544:	b510      	push	{r4, lr}
 8022546:	db11      	blt.n	802256c <__any_on+0x32>
 8022548:	dd0a      	ble.n	8022560 <__any_on+0x26>
 802254a:	f011 011f 	ands.w	r1, r1, #31
 802254e:	d007      	beq.n	8022560 <__any_on+0x26>
 8022550:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022554:	fa24 f001 	lsr.w	r0, r4, r1
 8022558:	fa00 f101 	lsl.w	r1, r0, r1
 802255c:	428c      	cmp	r4, r1
 802255e:	d10b      	bne.n	8022578 <__any_on+0x3e>
 8022560:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022564:	4293      	cmp	r3, r2
 8022566:	d803      	bhi.n	8022570 <__any_on+0x36>
 8022568:	2000      	movs	r0, #0
 802256a:	bd10      	pop	{r4, pc}
 802256c:	4603      	mov	r3, r0
 802256e:	e7f7      	b.n	8022560 <__any_on+0x26>
 8022570:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022574:	2900      	cmp	r1, #0
 8022576:	d0f5      	beq.n	8022564 <__any_on+0x2a>
 8022578:	2001      	movs	r0, #1
 802257a:	e7f6      	b.n	802256a <__any_on+0x30>

0802257c <_malloc_usable_size_r>:
 802257c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022580:	1f18      	subs	r0, r3, #4
 8022582:	2b00      	cmp	r3, #0
 8022584:	bfbc      	itt	lt
 8022586:	580b      	ldrlt	r3, [r1, r0]
 8022588:	18c0      	addlt	r0, r0, r3
 802258a:	4770      	bx	lr

0802258c <sulp>:
 802258c:	b570      	push	{r4, r5, r6, lr}
 802258e:	4604      	mov	r4, r0
 8022590:	460d      	mov	r5, r1
 8022592:	4616      	mov	r6, r2
 8022594:	ec45 4b10 	vmov	d0, r4, r5
 8022598:	f7ff feb2 	bl	8022300 <__ulp>
 802259c:	b17e      	cbz	r6, 80225be <sulp+0x32>
 802259e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80225a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	dd09      	ble.n	80225be <sulp+0x32>
 80225aa:	051b      	lsls	r3, r3, #20
 80225ac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80225b0:	2000      	movs	r0, #0
 80225b2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80225b6:	ec41 0b17 	vmov	d7, r0, r1
 80225ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 80225be:	bd70      	pop	{r4, r5, r6, pc}

080225c0 <_strtod_l>:
 80225c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225c4:	ed2d 8b0e 	vpush	{d8-d14}
 80225c8:	b097      	sub	sp, #92	; 0x5c
 80225ca:	4604      	mov	r4, r0
 80225cc:	920d      	str	r2, [sp, #52]	; 0x34
 80225ce:	2200      	movs	r2, #0
 80225d0:	9212      	str	r2, [sp, #72]	; 0x48
 80225d2:	468a      	mov	sl, r1
 80225d4:	f04f 0800 	mov.w	r8, #0
 80225d8:	f04f 0900 	mov.w	r9, #0
 80225dc:	460a      	mov	r2, r1
 80225de:	9211      	str	r2, [sp, #68]	; 0x44
 80225e0:	7811      	ldrb	r1, [r2, #0]
 80225e2:	292b      	cmp	r1, #43	; 0x2b
 80225e4:	d04c      	beq.n	8022680 <_strtod_l+0xc0>
 80225e6:	d839      	bhi.n	802265c <_strtod_l+0x9c>
 80225e8:	290d      	cmp	r1, #13
 80225ea:	d833      	bhi.n	8022654 <_strtod_l+0x94>
 80225ec:	2908      	cmp	r1, #8
 80225ee:	d833      	bhi.n	8022658 <_strtod_l+0x98>
 80225f0:	2900      	cmp	r1, #0
 80225f2:	d03c      	beq.n	802266e <_strtod_l+0xae>
 80225f4:	2200      	movs	r2, #0
 80225f6:	9208      	str	r2, [sp, #32]
 80225f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80225fa:	7832      	ldrb	r2, [r6, #0]
 80225fc:	2a30      	cmp	r2, #48	; 0x30
 80225fe:	f040 80b8 	bne.w	8022772 <_strtod_l+0x1b2>
 8022602:	7872      	ldrb	r2, [r6, #1]
 8022604:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8022608:	2a58      	cmp	r2, #88	; 0x58
 802260a:	d170      	bne.n	80226ee <_strtod_l+0x12e>
 802260c:	9302      	str	r3, [sp, #8]
 802260e:	9b08      	ldr	r3, [sp, #32]
 8022610:	9301      	str	r3, [sp, #4]
 8022612:	ab12      	add	r3, sp, #72	; 0x48
 8022614:	9300      	str	r3, [sp, #0]
 8022616:	4a91      	ldr	r2, [pc, #580]	; (802285c <_strtod_l+0x29c>)
 8022618:	ab13      	add	r3, sp, #76	; 0x4c
 802261a:	a911      	add	r1, sp, #68	; 0x44
 802261c:	4620      	mov	r0, r4
 802261e:	f001 fa61 	bl	8023ae4 <__gethex>
 8022622:	f010 070f 	ands.w	r7, r0, #15
 8022626:	4605      	mov	r5, r0
 8022628:	d005      	beq.n	8022636 <_strtod_l+0x76>
 802262a:	2f06      	cmp	r7, #6
 802262c:	d12a      	bne.n	8022684 <_strtod_l+0xc4>
 802262e:	3601      	adds	r6, #1
 8022630:	2300      	movs	r3, #0
 8022632:	9611      	str	r6, [sp, #68]	; 0x44
 8022634:	9308      	str	r3, [sp, #32]
 8022636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022638:	2b00      	cmp	r3, #0
 802263a:	f040 8555 	bne.w	80230e8 <_strtod_l+0xb28>
 802263e:	9b08      	ldr	r3, [sp, #32]
 8022640:	ec49 8b10 	vmov	d0, r8, r9
 8022644:	b1cb      	cbz	r3, 802267a <_strtod_l+0xba>
 8022646:	eeb1 0b40 	vneg.f64	d0, d0
 802264a:	b017      	add	sp, #92	; 0x5c
 802264c:	ecbd 8b0e 	vpop	{d8-d14}
 8022650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022654:	2920      	cmp	r1, #32
 8022656:	d1cd      	bne.n	80225f4 <_strtod_l+0x34>
 8022658:	3201      	adds	r2, #1
 802265a:	e7c0      	b.n	80225de <_strtod_l+0x1e>
 802265c:	292d      	cmp	r1, #45	; 0x2d
 802265e:	d1c9      	bne.n	80225f4 <_strtod_l+0x34>
 8022660:	2101      	movs	r1, #1
 8022662:	9108      	str	r1, [sp, #32]
 8022664:	1c51      	adds	r1, r2, #1
 8022666:	9111      	str	r1, [sp, #68]	; 0x44
 8022668:	7852      	ldrb	r2, [r2, #1]
 802266a:	2a00      	cmp	r2, #0
 802266c:	d1c4      	bne.n	80225f8 <_strtod_l+0x38>
 802266e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022670:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8022674:	2b00      	cmp	r3, #0
 8022676:	f040 8535 	bne.w	80230e4 <_strtod_l+0xb24>
 802267a:	ec49 8b10 	vmov	d0, r8, r9
 802267e:	e7e4      	b.n	802264a <_strtod_l+0x8a>
 8022680:	2100      	movs	r1, #0
 8022682:	e7ee      	b.n	8022662 <_strtod_l+0xa2>
 8022684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022686:	b13a      	cbz	r2, 8022698 <_strtod_l+0xd8>
 8022688:	2135      	movs	r1, #53	; 0x35
 802268a:	a814      	add	r0, sp, #80	; 0x50
 802268c:	f7ff ff32 	bl	80224f4 <__copybits>
 8022690:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022692:	4620      	mov	r0, r4
 8022694:	f7ff fb08 	bl	8021ca8 <_Bfree>
 8022698:	1e7b      	subs	r3, r7, #1
 802269a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802269c:	2b04      	cmp	r3, #4
 802269e:	d806      	bhi.n	80226ae <_strtod_l+0xee>
 80226a0:	e8df f003 	tbb	[pc, r3]
 80226a4:	201d0314 	.word	0x201d0314
 80226a8:	14          	.byte	0x14
 80226a9:	00          	.byte	0x00
 80226aa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80226ae:	05eb      	lsls	r3, r5, #23
 80226b0:	bf48      	it	mi
 80226b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80226b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80226ba:	0d1b      	lsrs	r3, r3, #20
 80226bc:	051b      	lsls	r3, r3, #20
 80226be:	2b00      	cmp	r3, #0
 80226c0:	d1b9      	bne.n	8022636 <_strtod_l+0x76>
 80226c2:	f7fe fbfb 	bl	8020ebc <__errno>
 80226c6:	2322      	movs	r3, #34	; 0x22
 80226c8:	6003      	str	r3, [r0, #0]
 80226ca:	e7b4      	b.n	8022636 <_strtod_l+0x76>
 80226cc:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80226d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80226d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80226d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80226dc:	e7e7      	b.n	80226ae <_strtod_l+0xee>
 80226de:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8022864 <_strtod_l+0x2a4>
 80226e2:	e7e4      	b.n	80226ae <_strtod_l+0xee>
 80226e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80226e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80226ec:	e7df      	b.n	80226ae <_strtod_l+0xee>
 80226ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226f0:	1c5a      	adds	r2, r3, #1
 80226f2:	9211      	str	r2, [sp, #68]	; 0x44
 80226f4:	785b      	ldrb	r3, [r3, #1]
 80226f6:	2b30      	cmp	r3, #48	; 0x30
 80226f8:	d0f9      	beq.n	80226ee <_strtod_l+0x12e>
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d09b      	beq.n	8022636 <_strtod_l+0x76>
 80226fe:	2301      	movs	r3, #1
 8022700:	9306      	str	r3, [sp, #24]
 8022702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022704:	9309      	str	r3, [sp, #36]	; 0x24
 8022706:	2300      	movs	r3, #0
 8022708:	9305      	str	r3, [sp, #20]
 802270a:	9307      	str	r3, [sp, #28]
 802270c:	461e      	mov	r6, r3
 802270e:	220a      	movs	r2, #10
 8022710:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022712:	7805      	ldrb	r5, [r0, #0]
 8022714:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8022718:	b2d9      	uxtb	r1, r3
 802271a:	2909      	cmp	r1, #9
 802271c:	d92b      	bls.n	8022776 <_strtod_l+0x1b6>
 802271e:	4950      	ldr	r1, [pc, #320]	; (8022860 <_strtod_l+0x2a0>)
 8022720:	2201      	movs	r2, #1
 8022722:	f7fe fb48 	bl	8020db6 <strncmp>
 8022726:	2800      	cmp	r0, #0
 8022728:	d035      	beq.n	8022796 <_strtod_l+0x1d6>
 802272a:	2000      	movs	r0, #0
 802272c:	462a      	mov	r2, r5
 802272e:	4633      	mov	r3, r6
 8022730:	4683      	mov	fp, r0
 8022732:	4601      	mov	r1, r0
 8022734:	2a65      	cmp	r2, #101	; 0x65
 8022736:	d001      	beq.n	802273c <_strtod_l+0x17c>
 8022738:	2a45      	cmp	r2, #69	; 0x45
 802273a:	d118      	bne.n	802276e <_strtod_l+0x1ae>
 802273c:	b91b      	cbnz	r3, 8022746 <_strtod_l+0x186>
 802273e:	9b06      	ldr	r3, [sp, #24]
 8022740:	4303      	orrs	r3, r0
 8022742:	d094      	beq.n	802266e <_strtod_l+0xae>
 8022744:	2300      	movs	r3, #0
 8022746:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 802274a:	f10a 0201 	add.w	r2, sl, #1
 802274e:	9211      	str	r2, [sp, #68]	; 0x44
 8022750:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022754:	2a2b      	cmp	r2, #43	; 0x2b
 8022756:	d075      	beq.n	8022844 <_strtod_l+0x284>
 8022758:	2a2d      	cmp	r2, #45	; 0x2d
 802275a:	d07b      	beq.n	8022854 <_strtod_l+0x294>
 802275c:	f04f 0e00 	mov.w	lr, #0
 8022760:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8022764:	2d09      	cmp	r5, #9
 8022766:	f240 8083 	bls.w	8022870 <_strtod_l+0x2b0>
 802276a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 802276e:	2500      	movs	r5, #0
 8022770:	e09e      	b.n	80228b0 <_strtod_l+0x2f0>
 8022772:	2300      	movs	r3, #0
 8022774:	e7c4      	b.n	8022700 <_strtod_l+0x140>
 8022776:	2e08      	cmp	r6, #8
 8022778:	bfd5      	itete	le
 802277a:	9907      	ldrle	r1, [sp, #28]
 802277c:	9905      	ldrgt	r1, [sp, #20]
 802277e:	fb02 3301 	mlale	r3, r2, r1, r3
 8022782:	fb02 3301 	mlagt	r3, r2, r1, r3
 8022786:	f100 0001 	add.w	r0, r0, #1
 802278a:	bfd4      	ite	le
 802278c:	9307      	strle	r3, [sp, #28]
 802278e:	9305      	strgt	r3, [sp, #20]
 8022790:	3601      	adds	r6, #1
 8022792:	9011      	str	r0, [sp, #68]	; 0x44
 8022794:	e7bc      	b.n	8022710 <_strtod_l+0x150>
 8022796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022798:	1c5a      	adds	r2, r3, #1
 802279a:	9211      	str	r2, [sp, #68]	; 0x44
 802279c:	785a      	ldrb	r2, [r3, #1]
 802279e:	b3ae      	cbz	r6, 802280c <_strtod_l+0x24c>
 80227a0:	4683      	mov	fp, r0
 80227a2:	4633      	mov	r3, r6
 80227a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80227a8:	2909      	cmp	r1, #9
 80227aa:	d912      	bls.n	80227d2 <_strtod_l+0x212>
 80227ac:	2101      	movs	r1, #1
 80227ae:	e7c1      	b.n	8022734 <_strtod_l+0x174>
 80227b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80227b2:	1c5a      	adds	r2, r3, #1
 80227b4:	9211      	str	r2, [sp, #68]	; 0x44
 80227b6:	785a      	ldrb	r2, [r3, #1]
 80227b8:	3001      	adds	r0, #1
 80227ba:	2a30      	cmp	r2, #48	; 0x30
 80227bc:	d0f8      	beq.n	80227b0 <_strtod_l+0x1f0>
 80227be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80227c2:	2b08      	cmp	r3, #8
 80227c4:	f200 8495 	bhi.w	80230f2 <_strtod_l+0xb32>
 80227c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80227ca:	9309      	str	r3, [sp, #36]	; 0x24
 80227cc:	4683      	mov	fp, r0
 80227ce:	2000      	movs	r0, #0
 80227d0:	4603      	mov	r3, r0
 80227d2:	3a30      	subs	r2, #48	; 0x30
 80227d4:	f100 0101 	add.w	r1, r0, #1
 80227d8:	d012      	beq.n	8022800 <_strtod_l+0x240>
 80227da:	448b      	add	fp, r1
 80227dc:	eb00 0c03 	add.w	ip, r0, r3
 80227e0:	4619      	mov	r1, r3
 80227e2:	250a      	movs	r5, #10
 80227e4:	4561      	cmp	r1, ip
 80227e6:	d113      	bne.n	8022810 <_strtod_l+0x250>
 80227e8:	1819      	adds	r1, r3, r0
 80227ea:	2908      	cmp	r1, #8
 80227ec:	f103 0301 	add.w	r3, r3, #1
 80227f0:	4403      	add	r3, r0
 80227f2:	dc1b      	bgt.n	802282c <_strtod_l+0x26c>
 80227f4:	9807      	ldr	r0, [sp, #28]
 80227f6:	210a      	movs	r1, #10
 80227f8:	fb01 2200 	mla	r2, r1, r0, r2
 80227fc:	9207      	str	r2, [sp, #28]
 80227fe:	2100      	movs	r1, #0
 8022800:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022802:	1c50      	adds	r0, r2, #1
 8022804:	9011      	str	r0, [sp, #68]	; 0x44
 8022806:	7852      	ldrb	r2, [r2, #1]
 8022808:	4608      	mov	r0, r1
 802280a:	e7cb      	b.n	80227a4 <_strtod_l+0x1e4>
 802280c:	4630      	mov	r0, r6
 802280e:	e7d4      	b.n	80227ba <_strtod_l+0x1fa>
 8022810:	2908      	cmp	r1, #8
 8022812:	f101 0101 	add.w	r1, r1, #1
 8022816:	dc03      	bgt.n	8022820 <_strtod_l+0x260>
 8022818:	9f07      	ldr	r7, [sp, #28]
 802281a:	436f      	muls	r7, r5
 802281c:	9707      	str	r7, [sp, #28]
 802281e:	e7e1      	b.n	80227e4 <_strtod_l+0x224>
 8022820:	2910      	cmp	r1, #16
 8022822:	bfde      	ittt	le
 8022824:	9f05      	ldrle	r7, [sp, #20]
 8022826:	436f      	mulle	r7, r5
 8022828:	9705      	strle	r7, [sp, #20]
 802282a:	e7db      	b.n	80227e4 <_strtod_l+0x224>
 802282c:	2b10      	cmp	r3, #16
 802282e:	bfdf      	itttt	le
 8022830:	9805      	ldrle	r0, [sp, #20]
 8022832:	210a      	movle	r1, #10
 8022834:	fb01 2200 	mlale	r2, r1, r0, r2
 8022838:	9205      	strle	r2, [sp, #20]
 802283a:	e7e0      	b.n	80227fe <_strtod_l+0x23e>
 802283c:	f04f 0b00 	mov.w	fp, #0
 8022840:	2101      	movs	r1, #1
 8022842:	e77c      	b.n	802273e <_strtod_l+0x17e>
 8022844:	f04f 0e00 	mov.w	lr, #0
 8022848:	f10a 0202 	add.w	r2, sl, #2
 802284c:	9211      	str	r2, [sp, #68]	; 0x44
 802284e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8022852:	e785      	b.n	8022760 <_strtod_l+0x1a0>
 8022854:	f04f 0e01 	mov.w	lr, #1
 8022858:	e7f6      	b.n	8022848 <_strtod_l+0x288>
 802285a:	bf00      	nop
 802285c:	08025e98 	.word	0x08025e98
 8022860:	08025e94 	.word	0x08025e94
 8022864:	7ff00000 	.word	0x7ff00000
 8022868:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802286a:	1c55      	adds	r5, r2, #1
 802286c:	9511      	str	r5, [sp, #68]	; 0x44
 802286e:	7852      	ldrb	r2, [r2, #1]
 8022870:	2a30      	cmp	r2, #48	; 0x30
 8022872:	d0f9      	beq.n	8022868 <_strtod_l+0x2a8>
 8022874:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8022878:	2d08      	cmp	r5, #8
 802287a:	f63f af78 	bhi.w	802276e <_strtod_l+0x1ae>
 802287e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8022882:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022884:	920a      	str	r2, [sp, #40]	; 0x28
 8022886:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022888:	1c55      	adds	r5, r2, #1
 802288a:	9511      	str	r5, [sp, #68]	; 0x44
 802288c:	7852      	ldrb	r2, [r2, #1]
 802288e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8022892:	2f09      	cmp	r7, #9
 8022894:	d937      	bls.n	8022906 <_strtod_l+0x346>
 8022896:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022898:	1bed      	subs	r5, r5, r7
 802289a:	2d08      	cmp	r5, #8
 802289c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80228a0:	dc02      	bgt.n	80228a8 <_strtod_l+0x2e8>
 80228a2:	4565      	cmp	r5, ip
 80228a4:	bfa8      	it	ge
 80228a6:	4665      	movge	r5, ip
 80228a8:	f1be 0f00 	cmp.w	lr, #0
 80228ac:	d000      	beq.n	80228b0 <_strtod_l+0x2f0>
 80228ae:	426d      	negs	r5, r5
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	d14d      	bne.n	8022950 <_strtod_l+0x390>
 80228b4:	9b06      	ldr	r3, [sp, #24]
 80228b6:	4303      	orrs	r3, r0
 80228b8:	f47f aebd 	bne.w	8022636 <_strtod_l+0x76>
 80228bc:	2900      	cmp	r1, #0
 80228be:	f47f aed6 	bne.w	802266e <_strtod_l+0xae>
 80228c2:	2a69      	cmp	r2, #105	; 0x69
 80228c4:	d027      	beq.n	8022916 <_strtod_l+0x356>
 80228c6:	dc24      	bgt.n	8022912 <_strtod_l+0x352>
 80228c8:	2a49      	cmp	r2, #73	; 0x49
 80228ca:	d024      	beq.n	8022916 <_strtod_l+0x356>
 80228cc:	2a4e      	cmp	r2, #78	; 0x4e
 80228ce:	f47f aece 	bne.w	802266e <_strtod_l+0xae>
 80228d2:	4995      	ldr	r1, [pc, #596]	; (8022b28 <_strtod_l+0x568>)
 80228d4:	a811      	add	r0, sp, #68	; 0x44
 80228d6:	f001 fb45 	bl	8023f64 <__match>
 80228da:	2800      	cmp	r0, #0
 80228dc:	f43f aec7 	beq.w	802266e <_strtod_l+0xae>
 80228e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80228e2:	781b      	ldrb	r3, [r3, #0]
 80228e4:	2b28      	cmp	r3, #40	; 0x28
 80228e6:	d12d      	bne.n	8022944 <_strtod_l+0x384>
 80228e8:	4990      	ldr	r1, [pc, #576]	; (8022b2c <_strtod_l+0x56c>)
 80228ea:	aa14      	add	r2, sp, #80	; 0x50
 80228ec:	a811      	add	r0, sp, #68	; 0x44
 80228ee:	f001 fb4d 	bl	8023f8c <__hexnan>
 80228f2:	2805      	cmp	r0, #5
 80228f4:	d126      	bne.n	8022944 <_strtod_l+0x384>
 80228f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80228f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80228fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8022900:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8022904:	e697      	b.n	8022636 <_strtod_l+0x76>
 8022906:	250a      	movs	r5, #10
 8022908:	fb05 2c0c 	mla	ip, r5, ip, r2
 802290c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8022910:	e7b9      	b.n	8022886 <_strtod_l+0x2c6>
 8022912:	2a6e      	cmp	r2, #110	; 0x6e
 8022914:	e7db      	b.n	80228ce <_strtod_l+0x30e>
 8022916:	4986      	ldr	r1, [pc, #536]	; (8022b30 <_strtod_l+0x570>)
 8022918:	a811      	add	r0, sp, #68	; 0x44
 802291a:	f001 fb23 	bl	8023f64 <__match>
 802291e:	2800      	cmp	r0, #0
 8022920:	f43f aea5 	beq.w	802266e <_strtod_l+0xae>
 8022924:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022926:	4983      	ldr	r1, [pc, #524]	; (8022b34 <_strtod_l+0x574>)
 8022928:	3b01      	subs	r3, #1
 802292a:	a811      	add	r0, sp, #68	; 0x44
 802292c:	9311      	str	r3, [sp, #68]	; 0x44
 802292e:	f001 fb19 	bl	8023f64 <__match>
 8022932:	b910      	cbnz	r0, 802293a <_strtod_l+0x37a>
 8022934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022936:	3301      	adds	r3, #1
 8022938:	9311      	str	r3, [sp, #68]	; 0x44
 802293a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8022b48 <_strtod_l+0x588>
 802293e:	f04f 0800 	mov.w	r8, #0
 8022942:	e678      	b.n	8022636 <_strtod_l+0x76>
 8022944:	487c      	ldr	r0, [pc, #496]	; (8022b38 <_strtod_l+0x578>)
 8022946:	f001 f857 	bl	80239f8 <nan>
 802294a:	ec59 8b10 	vmov	r8, r9, d0
 802294e:	e672      	b.n	8022636 <_strtod_l+0x76>
 8022950:	eddd 7a07 	vldr	s15, [sp, #28]
 8022954:	eba5 020b 	sub.w	r2, r5, fp
 8022958:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802295c:	2e00      	cmp	r6, #0
 802295e:	bf08      	it	eq
 8022960:	461e      	moveq	r6, r3
 8022962:	2b10      	cmp	r3, #16
 8022964:	9206      	str	r2, [sp, #24]
 8022966:	461a      	mov	r2, r3
 8022968:	bfa8      	it	ge
 802296a:	2210      	movge	r2, #16
 802296c:	2b09      	cmp	r3, #9
 802296e:	ec59 8b17 	vmov	r8, r9, d7
 8022972:	dd0c      	ble.n	802298e <_strtod_l+0x3ce>
 8022974:	4971      	ldr	r1, [pc, #452]	; (8022b3c <_strtod_l+0x57c>)
 8022976:	eddd 6a05 	vldr	s13, [sp, #20]
 802297a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802297e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8022982:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8022986:	eea7 6b05 	vfma.f64	d6, d7, d5
 802298a:	ec59 8b16 	vmov	r8, r9, d6
 802298e:	2b0f      	cmp	r3, #15
 8022990:	dc37      	bgt.n	8022a02 <_strtod_l+0x442>
 8022992:	9906      	ldr	r1, [sp, #24]
 8022994:	2900      	cmp	r1, #0
 8022996:	f43f ae4e 	beq.w	8022636 <_strtod_l+0x76>
 802299a:	dd23      	ble.n	80229e4 <_strtod_l+0x424>
 802299c:	2916      	cmp	r1, #22
 802299e:	dc0b      	bgt.n	80229b8 <_strtod_l+0x3f8>
 80229a0:	4b66      	ldr	r3, [pc, #408]	; (8022b3c <_strtod_l+0x57c>)
 80229a2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80229a6:	ed93 7b00 	vldr	d7, [r3]
 80229aa:	ec49 8b16 	vmov	d6, r8, r9
 80229ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80229b2:	ec59 8b17 	vmov	r8, r9, d7
 80229b6:	e63e      	b.n	8022636 <_strtod_l+0x76>
 80229b8:	9806      	ldr	r0, [sp, #24]
 80229ba:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80229be:	4281      	cmp	r1, r0
 80229c0:	db1f      	blt.n	8022a02 <_strtod_l+0x442>
 80229c2:	4a5e      	ldr	r2, [pc, #376]	; (8022b3c <_strtod_l+0x57c>)
 80229c4:	f1c3 030f 	rsb	r3, r3, #15
 80229c8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80229cc:	ed91 7b00 	vldr	d7, [r1]
 80229d0:	ec49 8b16 	vmov	d6, r8, r9
 80229d4:	1ac3      	subs	r3, r0, r3
 80229d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80229da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80229de:	ed92 6b00 	vldr	d6, [r2]
 80229e2:	e7e4      	b.n	80229ae <_strtod_l+0x3ee>
 80229e4:	9906      	ldr	r1, [sp, #24]
 80229e6:	3116      	adds	r1, #22
 80229e8:	db0b      	blt.n	8022a02 <_strtod_l+0x442>
 80229ea:	4b54      	ldr	r3, [pc, #336]	; (8022b3c <_strtod_l+0x57c>)
 80229ec:	ebab 0505 	sub.w	r5, fp, r5
 80229f0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80229f4:	ed95 7b00 	vldr	d7, [r5]
 80229f8:	ec49 8b16 	vmov	d6, r8, r9
 80229fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022a00:	e7d7      	b.n	80229b2 <_strtod_l+0x3f2>
 8022a02:	9906      	ldr	r1, [sp, #24]
 8022a04:	1a9a      	subs	r2, r3, r2
 8022a06:	440a      	add	r2, r1
 8022a08:	2a00      	cmp	r2, #0
 8022a0a:	dd6e      	ble.n	8022aea <_strtod_l+0x52a>
 8022a0c:	f012 000f 	ands.w	r0, r2, #15
 8022a10:	d00a      	beq.n	8022a28 <_strtod_l+0x468>
 8022a12:	494a      	ldr	r1, [pc, #296]	; (8022b3c <_strtod_l+0x57c>)
 8022a14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022a18:	ed91 7b00 	vldr	d7, [r1]
 8022a1c:	ec49 8b16 	vmov	d6, r8, r9
 8022a20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a24:	ec59 8b17 	vmov	r8, r9, d7
 8022a28:	f032 020f 	bics.w	r2, r2, #15
 8022a2c:	d04e      	beq.n	8022acc <_strtod_l+0x50c>
 8022a2e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8022a32:	dd22      	ble.n	8022a7a <_strtod_l+0x4ba>
 8022a34:	2500      	movs	r5, #0
 8022a36:	462e      	mov	r6, r5
 8022a38:	9507      	str	r5, [sp, #28]
 8022a3a:	462f      	mov	r7, r5
 8022a3c:	2322      	movs	r3, #34	; 0x22
 8022a3e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8022b48 <_strtod_l+0x588>
 8022a42:	6023      	str	r3, [r4, #0]
 8022a44:	f04f 0800 	mov.w	r8, #0
 8022a48:	9b07      	ldr	r3, [sp, #28]
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	f43f adf3 	beq.w	8022636 <_strtod_l+0x76>
 8022a50:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022a52:	4620      	mov	r0, r4
 8022a54:	f7ff f928 	bl	8021ca8 <_Bfree>
 8022a58:	4639      	mov	r1, r7
 8022a5a:	4620      	mov	r0, r4
 8022a5c:	f7ff f924 	bl	8021ca8 <_Bfree>
 8022a60:	4631      	mov	r1, r6
 8022a62:	4620      	mov	r0, r4
 8022a64:	f7ff f920 	bl	8021ca8 <_Bfree>
 8022a68:	9907      	ldr	r1, [sp, #28]
 8022a6a:	4620      	mov	r0, r4
 8022a6c:	f7ff f91c 	bl	8021ca8 <_Bfree>
 8022a70:	4629      	mov	r1, r5
 8022a72:	4620      	mov	r0, r4
 8022a74:	f7ff f918 	bl	8021ca8 <_Bfree>
 8022a78:	e5dd      	b.n	8022636 <_strtod_l+0x76>
 8022a7a:	2000      	movs	r0, #0
 8022a7c:	ec49 8b17 	vmov	d7, r8, r9
 8022a80:	4f2f      	ldr	r7, [pc, #188]	; (8022b40 <_strtod_l+0x580>)
 8022a82:	1112      	asrs	r2, r2, #4
 8022a84:	4601      	mov	r1, r0
 8022a86:	2a01      	cmp	r2, #1
 8022a88:	dc23      	bgt.n	8022ad2 <_strtod_l+0x512>
 8022a8a:	b108      	cbz	r0, 8022a90 <_strtod_l+0x4d0>
 8022a8c:	ec59 8b17 	vmov	r8, r9, d7
 8022a90:	4a2b      	ldr	r2, [pc, #172]	; (8022b40 <_strtod_l+0x580>)
 8022a92:	482c      	ldr	r0, [pc, #176]	; (8022b44 <_strtod_l+0x584>)
 8022a94:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8022a98:	ed92 7b00 	vldr	d7, [r2]
 8022a9c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8022aa0:	ec49 8b16 	vmov	d6, r8, r9
 8022aa4:	4a28      	ldr	r2, [pc, #160]	; (8022b48 <_strtod_l+0x588>)
 8022aa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022aaa:	ee17 1a90 	vmov	r1, s15
 8022aae:	400a      	ands	r2, r1
 8022ab0:	4282      	cmp	r2, r0
 8022ab2:	ec59 8b17 	vmov	r8, r9, d7
 8022ab6:	d8bd      	bhi.n	8022a34 <_strtod_l+0x474>
 8022ab8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8022abc:	4282      	cmp	r2, r0
 8022abe:	bf86      	itte	hi
 8022ac0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8022b4c <_strtod_l+0x58c>
 8022ac4:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8022ac8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8022acc:	2200      	movs	r2, #0
 8022ace:	9205      	str	r2, [sp, #20]
 8022ad0:	e076      	b.n	8022bc0 <_strtod_l+0x600>
 8022ad2:	f012 0f01 	tst.w	r2, #1
 8022ad6:	d004      	beq.n	8022ae2 <_strtod_l+0x522>
 8022ad8:	ed97 6b00 	vldr	d6, [r7]
 8022adc:	2001      	movs	r0, #1
 8022ade:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022ae2:	3101      	adds	r1, #1
 8022ae4:	1052      	asrs	r2, r2, #1
 8022ae6:	3708      	adds	r7, #8
 8022ae8:	e7cd      	b.n	8022a86 <_strtod_l+0x4c6>
 8022aea:	d0ef      	beq.n	8022acc <_strtod_l+0x50c>
 8022aec:	4252      	negs	r2, r2
 8022aee:	f012 000f 	ands.w	r0, r2, #15
 8022af2:	d00a      	beq.n	8022b0a <_strtod_l+0x54a>
 8022af4:	4911      	ldr	r1, [pc, #68]	; (8022b3c <_strtod_l+0x57c>)
 8022af6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022afa:	ed91 7b00 	vldr	d7, [r1]
 8022afe:	ec49 8b16 	vmov	d6, r8, r9
 8022b02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022b06:	ec59 8b17 	vmov	r8, r9, d7
 8022b0a:	1112      	asrs	r2, r2, #4
 8022b0c:	d0de      	beq.n	8022acc <_strtod_l+0x50c>
 8022b0e:	2a1f      	cmp	r2, #31
 8022b10:	dd1e      	ble.n	8022b50 <_strtod_l+0x590>
 8022b12:	2500      	movs	r5, #0
 8022b14:	462e      	mov	r6, r5
 8022b16:	9507      	str	r5, [sp, #28]
 8022b18:	462f      	mov	r7, r5
 8022b1a:	2322      	movs	r3, #34	; 0x22
 8022b1c:	f04f 0800 	mov.w	r8, #0
 8022b20:	f04f 0900 	mov.w	r9, #0
 8022b24:	6023      	str	r3, [r4, #0]
 8022b26:	e78f      	b.n	8022a48 <_strtod_l+0x488>
 8022b28:	08025c61 	.word	0x08025c61
 8022b2c:	08025eac 	.word	0x08025eac
 8022b30:	08025c59 	.word	0x08025c59
 8022b34:	08025ccc 	.word	0x08025ccc
 8022b38:	08025cc8 	.word	0x08025cc8
 8022b3c:	08025dc0 	.word	0x08025dc0
 8022b40:	08025d98 	.word	0x08025d98
 8022b44:	7ca00000 	.word	0x7ca00000
 8022b48:	7ff00000 	.word	0x7ff00000
 8022b4c:	7fefffff 	.word	0x7fefffff
 8022b50:	f012 0110 	ands.w	r1, r2, #16
 8022b54:	bf18      	it	ne
 8022b56:	216a      	movne	r1, #106	; 0x6a
 8022b58:	9105      	str	r1, [sp, #20]
 8022b5a:	ec49 8b17 	vmov	d7, r8, r9
 8022b5e:	49be      	ldr	r1, [pc, #760]	; (8022e58 <_strtod_l+0x898>)
 8022b60:	2000      	movs	r0, #0
 8022b62:	07d7      	lsls	r7, r2, #31
 8022b64:	d504      	bpl.n	8022b70 <_strtod_l+0x5b0>
 8022b66:	ed91 6b00 	vldr	d6, [r1]
 8022b6a:	2001      	movs	r0, #1
 8022b6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022b70:	1052      	asrs	r2, r2, #1
 8022b72:	f101 0108 	add.w	r1, r1, #8
 8022b76:	d1f4      	bne.n	8022b62 <_strtod_l+0x5a2>
 8022b78:	b108      	cbz	r0, 8022b7e <_strtod_l+0x5be>
 8022b7a:	ec59 8b17 	vmov	r8, r9, d7
 8022b7e:	9a05      	ldr	r2, [sp, #20]
 8022b80:	b1ba      	cbz	r2, 8022bb2 <_strtod_l+0x5f2>
 8022b82:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8022b86:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8022b8a:	2a00      	cmp	r2, #0
 8022b8c:	4648      	mov	r0, r9
 8022b8e:	dd10      	ble.n	8022bb2 <_strtod_l+0x5f2>
 8022b90:	2a1f      	cmp	r2, #31
 8022b92:	f340 812c 	ble.w	8022dee <_strtod_l+0x82e>
 8022b96:	2a34      	cmp	r2, #52	; 0x34
 8022b98:	bfde      	ittt	le
 8022b9a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8022b9e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8022ba2:	408a      	lslle	r2, r1
 8022ba4:	f04f 0800 	mov.w	r8, #0
 8022ba8:	bfcc      	ite	gt
 8022baa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8022bae:	ea02 0900 	andle.w	r9, r2, r0
 8022bb2:	ec49 8b17 	vmov	d7, r8, r9
 8022bb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bbe:	d0a8      	beq.n	8022b12 <_strtod_l+0x552>
 8022bc0:	9a07      	ldr	r2, [sp, #28]
 8022bc2:	9200      	str	r2, [sp, #0]
 8022bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022bc6:	4632      	mov	r2, r6
 8022bc8:	4620      	mov	r0, r4
 8022bca:	f7ff f8d5 	bl	8021d78 <__s2b>
 8022bce:	9007      	str	r0, [sp, #28]
 8022bd0:	2800      	cmp	r0, #0
 8022bd2:	f43f af2f 	beq.w	8022a34 <_strtod_l+0x474>
 8022bd6:	9a06      	ldr	r2, [sp, #24]
 8022bd8:	2a00      	cmp	r2, #0
 8022bda:	ebab 0305 	sub.w	r3, fp, r5
 8022bde:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8022e38 <_strtod_l+0x878>
 8022be2:	bfa8      	it	ge
 8022be4:	2300      	movge	r3, #0
 8022be6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8022e40 <_strtod_l+0x880>
 8022bea:	ed9f bb97 	vldr	d11, [pc, #604]	; 8022e48 <_strtod_l+0x888>
 8022bee:	9309      	str	r3, [sp, #36]	; 0x24
 8022bf0:	2500      	movs	r5, #0
 8022bf2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8022bf8:	462e      	mov	r6, r5
 8022bfa:	9b07      	ldr	r3, [sp, #28]
 8022bfc:	4620      	mov	r0, r4
 8022bfe:	6859      	ldr	r1, [r3, #4]
 8022c00:	f7ff f812 	bl	8021c28 <_Balloc>
 8022c04:	4607      	mov	r7, r0
 8022c06:	2800      	cmp	r0, #0
 8022c08:	f43f af18 	beq.w	8022a3c <_strtod_l+0x47c>
 8022c0c:	9b07      	ldr	r3, [sp, #28]
 8022c0e:	691a      	ldr	r2, [r3, #16]
 8022c10:	3202      	adds	r2, #2
 8022c12:	f103 010c 	add.w	r1, r3, #12
 8022c16:	0092      	lsls	r2, r2, #2
 8022c18:	300c      	adds	r0, #12
 8022c1a:	f7fe f984 	bl	8020f26 <memcpy>
 8022c1e:	ec49 8b10 	vmov	d0, r8, r9
 8022c22:	aa14      	add	r2, sp, #80	; 0x50
 8022c24:	a913      	add	r1, sp, #76	; 0x4c
 8022c26:	4620      	mov	r0, r4
 8022c28:	f7ff fbda 	bl	80223e0 <__d2b>
 8022c2c:	ec49 8b18 	vmov	d8, r8, r9
 8022c30:	9012      	str	r0, [sp, #72]	; 0x48
 8022c32:	2800      	cmp	r0, #0
 8022c34:	f43f af02 	beq.w	8022a3c <_strtod_l+0x47c>
 8022c38:	2101      	movs	r1, #1
 8022c3a:	4620      	mov	r0, r4
 8022c3c:	f7ff f934 	bl	8021ea8 <__i2b>
 8022c40:	4606      	mov	r6, r0
 8022c42:	2800      	cmp	r0, #0
 8022c44:	f43f aefa 	beq.w	8022a3c <_strtod_l+0x47c>
 8022c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022c4a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	bfab      	itete	ge
 8022c50:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8022c52:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8022c54:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8022c58:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8022c5c:	bfac      	ite	ge
 8022c5e:	eb03 0b02 	addge.w	fp, r3, r2
 8022c62:	eba2 0a03 	sublt.w	sl, r2, r3
 8022c66:	9a05      	ldr	r2, [sp, #20]
 8022c68:	1a9b      	subs	r3, r3, r2
 8022c6a:	440b      	add	r3, r1
 8022c6c:	4a7b      	ldr	r2, [pc, #492]	; (8022e5c <_strtod_l+0x89c>)
 8022c6e:	3b01      	subs	r3, #1
 8022c70:	4293      	cmp	r3, r2
 8022c72:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8022c76:	f280 80cd 	bge.w	8022e14 <_strtod_l+0x854>
 8022c7a:	1ad2      	subs	r2, r2, r3
 8022c7c:	2a1f      	cmp	r2, #31
 8022c7e:	eba1 0102 	sub.w	r1, r1, r2
 8022c82:	f04f 0001 	mov.w	r0, #1
 8022c86:	f300 80b9 	bgt.w	8022dfc <_strtod_l+0x83c>
 8022c8a:	fa00 f302 	lsl.w	r3, r0, r2
 8022c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c90:	2300      	movs	r3, #0
 8022c92:	930a      	str	r3, [sp, #40]	; 0x28
 8022c94:	eb0b 0301 	add.w	r3, fp, r1
 8022c98:	9a05      	ldr	r2, [sp, #20]
 8022c9a:	459b      	cmp	fp, r3
 8022c9c:	448a      	add	sl, r1
 8022c9e:	4492      	add	sl, r2
 8022ca0:	465a      	mov	r2, fp
 8022ca2:	bfa8      	it	ge
 8022ca4:	461a      	movge	r2, r3
 8022ca6:	4552      	cmp	r2, sl
 8022ca8:	bfa8      	it	ge
 8022caa:	4652      	movge	r2, sl
 8022cac:	2a00      	cmp	r2, #0
 8022cae:	bfc2      	ittt	gt
 8022cb0:	1a9b      	subgt	r3, r3, r2
 8022cb2:	ebaa 0a02 	subgt.w	sl, sl, r2
 8022cb6:	ebab 0b02 	subgt.w	fp, fp, r2
 8022cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022cbc:	2a00      	cmp	r2, #0
 8022cbe:	dd18      	ble.n	8022cf2 <_strtod_l+0x732>
 8022cc0:	4631      	mov	r1, r6
 8022cc2:	4620      	mov	r0, r4
 8022cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8022cc6:	f7ff f9af 	bl	8022028 <__pow5mult>
 8022cca:	4606      	mov	r6, r0
 8022ccc:	2800      	cmp	r0, #0
 8022cce:	f43f aeb5 	beq.w	8022a3c <_strtod_l+0x47c>
 8022cd2:	4601      	mov	r1, r0
 8022cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022cd6:	4620      	mov	r0, r4
 8022cd8:	f7ff f8fc 	bl	8021ed4 <__multiply>
 8022cdc:	900e      	str	r0, [sp, #56]	; 0x38
 8022cde:	2800      	cmp	r0, #0
 8022ce0:	f43f aeac 	beq.w	8022a3c <_strtod_l+0x47c>
 8022ce4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022ce6:	4620      	mov	r0, r4
 8022ce8:	f7fe ffde 	bl	8021ca8 <_Bfree>
 8022cec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022cf0:	9212      	str	r2, [sp, #72]	; 0x48
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	f300 8093 	bgt.w	8022e1e <_strtod_l+0x85e>
 8022cf8:	9b06      	ldr	r3, [sp, #24]
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	dd08      	ble.n	8022d10 <_strtod_l+0x750>
 8022cfe:	4639      	mov	r1, r7
 8022d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d02:	4620      	mov	r0, r4
 8022d04:	f7ff f990 	bl	8022028 <__pow5mult>
 8022d08:	4607      	mov	r7, r0
 8022d0a:	2800      	cmp	r0, #0
 8022d0c:	f43f ae96 	beq.w	8022a3c <_strtod_l+0x47c>
 8022d10:	f1ba 0f00 	cmp.w	sl, #0
 8022d14:	dd08      	ble.n	8022d28 <_strtod_l+0x768>
 8022d16:	4639      	mov	r1, r7
 8022d18:	4652      	mov	r2, sl
 8022d1a:	4620      	mov	r0, r4
 8022d1c:	f7ff f9de 	bl	80220dc <__lshift>
 8022d20:	4607      	mov	r7, r0
 8022d22:	2800      	cmp	r0, #0
 8022d24:	f43f ae8a 	beq.w	8022a3c <_strtod_l+0x47c>
 8022d28:	f1bb 0f00 	cmp.w	fp, #0
 8022d2c:	dd08      	ble.n	8022d40 <_strtod_l+0x780>
 8022d2e:	4631      	mov	r1, r6
 8022d30:	465a      	mov	r2, fp
 8022d32:	4620      	mov	r0, r4
 8022d34:	f7ff f9d2 	bl	80220dc <__lshift>
 8022d38:	4606      	mov	r6, r0
 8022d3a:	2800      	cmp	r0, #0
 8022d3c:	f43f ae7e 	beq.w	8022a3c <_strtod_l+0x47c>
 8022d40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022d42:	463a      	mov	r2, r7
 8022d44:	4620      	mov	r0, r4
 8022d46:	f7ff fa51 	bl	80221ec <__mdiff>
 8022d4a:	4605      	mov	r5, r0
 8022d4c:	2800      	cmp	r0, #0
 8022d4e:	f43f ae75 	beq.w	8022a3c <_strtod_l+0x47c>
 8022d52:	2300      	movs	r3, #0
 8022d54:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8022d58:	60c3      	str	r3, [r0, #12]
 8022d5a:	4631      	mov	r1, r6
 8022d5c:	f7ff fa2a 	bl	80221b4 <__mcmp>
 8022d60:	2800      	cmp	r0, #0
 8022d62:	da7f      	bge.n	8022e64 <_strtod_l+0x8a4>
 8022d64:	ea5a 0a08 	orrs.w	sl, sl, r8
 8022d68:	f040 80a5 	bne.w	8022eb6 <_strtod_l+0x8f6>
 8022d6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022d70:	2b00      	cmp	r3, #0
 8022d72:	f040 80a0 	bne.w	8022eb6 <_strtod_l+0x8f6>
 8022d76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022d7a:	0d1b      	lsrs	r3, r3, #20
 8022d7c:	051b      	lsls	r3, r3, #20
 8022d7e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8022d82:	f240 8098 	bls.w	8022eb6 <_strtod_l+0x8f6>
 8022d86:	696b      	ldr	r3, [r5, #20]
 8022d88:	b91b      	cbnz	r3, 8022d92 <_strtod_l+0x7d2>
 8022d8a:	692b      	ldr	r3, [r5, #16]
 8022d8c:	2b01      	cmp	r3, #1
 8022d8e:	f340 8092 	ble.w	8022eb6 <_strtod_l+0x8f6>
 8022d92:	4629      	mov	r1, r5
 8022d94:	2201      	movs	r2, #1
 8022d96:	4620      	mov	r0, r4
 8022d98:	f7ff f9a0 	bl	80220dc <__lshift>
 8022d9c:	4631      	mov	r1, r6
 8022d9e:	4605      	mov	r5, r0
 8022da0:	f7ff fa08 	bl	80221b4 <__mcmp>
 8022da4:	2800      	cmp	r0, #0
 8022da6:	f340 8086 	ble.w	8022eb6 <_strtod_l+0x8f6>
 8022daa:	9905      	ldr	r1, [sp, #20]
 8022dac:	4a2c      	ldr	r2, [pc, #176]	; (8022e60 <_strtod_l+0x8a0>)
 8022dae:	464b      	mov	r3, r9
 8022db0:	2900      	cmp	r1, #0
 8022db2:	f000 809f 	beq.w	8022ef4 <_strtod_l+0x934>
 8022db6:	ea02 0109 	and.w	r1, r2, r9
 8022dba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8022dbe:	f300 8099 	bgt.w	8022ef4 <_strtod_l+0x934>
 8022dc2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8022dc6:	f77f aea8 	ble.w	8022b1a <_strtod_l+0x55a>
 8022dca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8022e50 <_strtod_l+0x890>
 8022dce:	ec49 8b16 	vmov	d6, r8, r9
 8022dd2:	4b23      	ldr	r3, [pc, #140]	; (8022e60 <_strtod_l+0x8a0>)
 8022dd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022dd8:	ee17 2a90 	vmov	r2, s15
 8022ddc:	4013      	ands	r3, r2
 8022dde:	ec59 8b17 	vmov	r8, r9, d7
 8022de2:	2b00      	cmp	r3, #0
 8022de4:	f47f ae34 	bne.w	8022a50 <_strtod_l+0x490>
 8022de8:	2322      	movs	r3, #34	; 0x22
 8022dea:	6023      	str	r3, [r4, #0]
 8022dec:	e630      	b.n	8022a50 <_strtod_l+0x490>
 8022dee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022df2:	fa01 f202 	lsl.w	r2, r1, r2
 8022df6:	ea02 0808 	and.w	r8, r2, r8
 8022dfa:	e6da      	b.n	8022bb2 <_strtod_l+0x5f2>
 8022dfc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8022e00:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8022e04:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8022e08:	33e2      	adds	r3, #226	; 0xe2
 8022e0a:	fa00 f303 	lsl.w	r3, r0, r3
 8022e0e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8022e12:	e73f      	b.n	8022c94 <_strtod_l+0x6d4>
 8022e14:	2200      	movs	r2, #0
 8022e16:	2301      	movs	r3, #1
 8022e18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8022e1c:	e73a      	b.n	8022c94 <_strtod_l+0x6d4>
 8022e1e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022e20:	461a      	mov	r2, r3
 8022e22:	4620      	mov	r0, r4
 8022e24:	f7ff f95a 	bl	80220dc <__lshift>
 8022e28:	9012      	str	r0, [sp, #72]	; 0x48
 8022e2a:	2800      	cmp	r0, #0
 8022e2c:	f47f af64 	bne.w	8022cf8 <_strtod_l+0x738>
 8022e30:	e604      	b.n	8022a3c <_strtod_l+0x47c>
 8022e32:	bf00      	nop
 8022e34:	f3af 8000 	nop.w
 8022e38:	94a03595 	.word	0x94a03595
 8022e3c:	3fcfffff 	.word	0x3fcfffff
 8022e40:	94a03595 	.word	0x94a03595
 8022e44:	3fdfffff 	.word	0x3fdfffff
 8022e48:	35afe535 	.word	0x35afe535
 8022e4c:	3fe00000 	.word	0x3fe00000
 8022e50:	00000000 	.word	0x00000000
 8022e54:	39500000 	.word	0x39500000
 8022e58:	08025ec0 	.word	0x08025ec0
 8022e5c:	fffffc02 	.word	0xfffffc02
 8022e60:	7ff00000 	.word	0x7ff00000
 8022e64:	46cb      	mov	fp, r9
 8022e66:	d15f      	bne.n	8022f28 <_strtod_l+0x968>
 8022e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022e6c:	f1ba 0f00 	cmp.w	sl, #0
 8022e70:	d02a      	beq.n	8022ec8 <_strtod_l+0x908>
 8022e72:	4aa7      	ldr	r2, [pc, #668]	; (8023110 <_strtod_l+0xb50>)
 8022e74:	4293      	cmp	r3, r2
 8022e76:	d12b      	bne.n	8022ed0 <_strtod_l+0x910>
 8022e78:	9b05      	ldr	r3, [sp, #20]
 8022e7a:	4642      	mov	r2, r8
 8022e7c:	b1fb      	cbz	r3, 8022ebe <_strtod_l+0x8fe>
 8022e7e:	4ba5      	ldr	r3, [pc, #660]	; (8023114 <_strtod_l+0xb54>)
 8022e80:	ea09 0303 	and.w	r3, r9, r3
 8022e84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8022e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022e8c:	d81a      	bhi.n	8022ec4 <_strtod_l+0x904>
 8022e8e:	0d1b      	lsrs	r3, r3, #20
 8022e90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8022e94:	fa01 f303 	lsl.w	r3, r1, r3
 8022e98:	429a      	cmp	r2, r3
 8022e9a:	d119      	bne.n	8022ed0 <_strtod_l+0x910>
 8022e9c:	4b9e      	ldr	r3, [pc, #632]	; (8023118 <_strtod_l+0xb58>)
 8022e9e:	459b      	cmp	fp, r3
 8022ea0:	d102      	bne.n	8022ea8 <_strtod_l+0x8e8>
 8022ea2:	3201      	adds	r2, #1
 8022ea4:	f43f adca 	beq.w	8022a3c <_strtod_l+0x47c>
 8022ea8:	4b9a      	ldr	r3, [pc, #616]	; (8023114 <_strtod_l+0xb54>)
 8022eaa:	ea0b 0303 	and.w	r3, fp, r3
 8022eae:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8022eb2:	f04f 0800 	mov.w	r8, #0
 8022eb6:	9b05      	ldr	r3, [sp, #20]
 8022eb8:	2b00      	cmp	r3, #0
 8022eba:	d186      	bne.n	8022dca <_strtod_l+0x80a>
 8022ebc:	e5c8      	b.n	8022a50 <_strtod_l+0x490>
 8022ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022ec2:	e7e9      	b.n	8022e98 <_strtod_l+0x8d8>
 8022ec4:	460b      	mov	r3, r1
 8022ec6:	e7e7      	b.n	8022e98 <_strtod_l+0x8d8>
 8022ec8:	ea53 0308 	orrs.w	r3, r3, r8
 8022ecc:	f43f af6d 	beq.w	8022daa <_strtod_l+0x7ea>
 8022ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ed2:	b1cb      	cbz	r3, 8022f08 <_strtod_l+0x948>
 8022ed4:	ea13 0f0b 	tst.w	r3, fp
 8022ed8:	d0ed      	beq.n	8022eb6 <_strtod_l+0x8f6>
 8022eda:	9a05      	ldr	r2, [sp, #20]
 8022edc:	4640      	mov	r0, r8
 8022ede:	4649      	mov	r1, r9
 8022ee0:	f1ba 0f00 	cmp.w	sl, #0
 8022ee4:	d014      	beq.n	8022f10 <_strtod_l+0x950>
 8022ee6:	f7ff fb51 	bl	802258c <sulp>
 8022eea:	ee38 7b00 	vadd.f64	d7, d8, d0
 8022eee:	ec59 8b17 	vmov	r8, r9, d7
 8022ef2:	e7e0      	b.n	8022eb6 <_strtod_l+0x8f6>
 8022ef4:	4013      	ands	r3, r2
 8022ef6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8022efa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8022efe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8022f02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022f06:	e7d6      	b.n	8022eb6 <_strtod_l+0x8f6>
 8022f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f0a:	ea13 0f08 	tst.w	r3, r8
 8022f0e:	e7e3      	b.n	8022ed8 <_strtod_l+0x918>
 8022f10:	f7ff fb3c 	bl	802258c <sulp>
 8022f14:	ee38 0b40 	vsub.f64	d0, d8, d0
 8022f18:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8022f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f20:	ec59 8b10 	vmov	r8, r9, d0
 8022f24:	d1c7      	bne.n	8022eb6 <_strtod_l+0x8f6>
 8022f26:	e5f8      	b.n	8022b1a <_strtod_l+0x55a>
 8022f28:	4631      	mov	r1, r6
 8022f2a:	4628      	mov	r0, r5
 8022f2c:	f7ff fab2 	bl	8022494 <__ratio>
 8022f30:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8022f34:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8022f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f3c:	d85f      	bhi.n	8022ffe <_strtod_l+0xa3e>
 8022f3e:	f1ba 0f00 	cmp.w	sl, #0
 8022f42:	d166      	bne.n	8023012 <_strtod_l+0xa52>
 8022f44:	f1b8 0f00 	cmp.w	r8, #0
 8022f48:	d14d      	bne.n	8022fe6 <_strtod_l+0xa26>
 8022f4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022f4e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022f52:	2b00      	cmp	r3, #0
 8022f54:	d162      	bne.n	802301c <_strtod_l+0xa5c>
 8022f56:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8022f5a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8022f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f62:	d401      	bmi.n	8022f68 <_strtod_l+0x9a8>
 8022f64:	ee20 db0d 	vmul.f64	d13, d0, d13
 8022f68:	eeb1 cb4d 	vneg.f64	d12, d13
 8022f6c:	4869      	ldr	r0, [pc, #420]	; (8023114 <_strtod_l+0xb54>)
 8022f6e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8023120 <_strtod_l+0xb60>
 8022f72:	ea0b 0100 	and.w	r1, fp, r0
 8022f76:	4561      	cmp	r1, ip
 8022f78:	ec53 2b1c 	vmov	r2, r3, d12
 8022f7c:	d17a      	bne.n	8023074 <_strtod_l+0xab4>
 8022f7e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8022f82:	ec49 8b10 	vmov	d0, r8, r9
 8022f86:	910a      	str	r1, [sp, #40]	; 0x28
 8022f88:	f7ff f9ba 	bl	8022300 <__ulp>
 8022f8c:	ec49 8b1e 	vmov	d14, r8, r9
 8022f90:	4860      	ldr	r0, [pc, #384]	; (8023114 <_strtod_l+0xb54>)
 8022f92:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8022f96:	ee1e 3a90 	vmov	r3, s29
 8022f9a:	4a60      	ldr	r2, [pc, #384]	; (802311c <_strtod_l+0xb5c>)
 8022f9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022f9e:	4018      	ands	r0, r3
 8022fa0:	4290      	cmp	r0, r2
 8022fa2:	ec59 8b1e 	vmov	r8, r9, d14
 8022fa6:	d93c      	bls.n	8023022 <_strtod_l+0xa62>
 8022fa8:	ee18 2a90 	vmov	r2, s17
 8022fac:	4b5a      	ldr	r3, [pc, #360]	; (8023118 <_strtod_l+0xb58>)
 8022fae:	429a      	cmp	r2, r3
 8022fb0:	d104      	bne.n	8022fbc <_strtod_l+0x9fc>
 8022fb2:	ee18 3a10 	vmov	r3, s16
 8022fb6:	3301      	adds	r3, #1
 8022fb8:	f43f ad40 	beq.w	8022a3c <_strtod_l+0x47c>
 8022fbc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8023118 <_strtod_l+0xb58>
 8022fc0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022fc4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022fc6:	4620      	mov	r0, r4
 8022fc8:	f7fe fe6e 	bl	8021ca8 <_Bfree>
 8022fcc:	4639      	mov	r1, r7
 8022fce:	4620      	mov	r0, r4
 8022fd0:	f7fe fe6a 	bl	8021ca8 <_Bfree>
 8022fd4:	4631      	mov	r1, r6
 8022fd6:	4620      	mov	r0, r4
 8022fd8:	f7fe fe66 	bl	8021ca8 <_Bfree>
 8022fdc:	4629      	mov	r1, r5
 8022fde:	4620      	mov	r0, r4
 8022fe0:	f7fe fe62 	bl	8021ca8 <_Bfree>
 8022fe4:	e609      	b.n	8022bfa <_strtod_l+0x63a>
 8022fe6:	f1b8 0f01 	cmp.w	r8, #1
 8022fea:	d103      	bne.n	8022ff4 <_strtod_l+0xa34>
 8022fec:	f1b9 0f00 	cmp.w	r9, #0
 8022ff0:	f43f ad93 	beq.w	8022b1a <_strtod_l+0x55a>
 8022ff4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8022ff8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022ffc:	e7b6      	b.n	8022f6c <_strtod_l+0x9ac>
 8022ffe:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8023002:	ee20 db0d 	vmul.f64	d13, d0, d13
 8023006:	f1ba 0f00 	cmp.w	sl, #0
 802300a:	d0ad      	beq.n	8022f68 <_strtod_l+0x9a8>
 802300c:	eeb0 cb4d 	vmov.f64	d12, d13
 8023010:	e7ac      	b.n	8022f6c <_strtod_l+0x9ac>
 8023012:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8023016:	eeb0 db4c 	vmov.f64	d13, d12
 802301a:	e7a7      	b.n	8022f6c <_strtod_l+0x9ac>
 802301c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8023020:	e7a4      	b.n	8022f6c <_strtod_l+0x9ac>
 8023022:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8023026:	9b05      	ldr	r3, [sp, #20]
 8023028:	46cb      	mov	fp, r9
 802302a:	2b00      	cmp	r3, #0
 802302c:	d1ca      	bne.n	8022fc4 <_strtod_l+0xa04>
 802302e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023032:	0d1b      	lsrs	r3, r3, #20
 8023034:	051b      	lsls	r3, r3, #20
 8023036:	4299      	cmp	r1, r3
 8023038:	d1c4      	bne.n	8022fc4 <_strtod_l+0xa04>
 802303a:	ec51 0b1d 	vmov	r0, r1, d13
 802303e:	f7dd fb8b 	bl	8000758 <__aeabi_d2lz>
 8023042:	f7dd faf3 	bl	800062c <__aeabi_l2d>
 8023046:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 802304a:	ec41 0b17 	vmov	d7, r0, r1
 802304e:	ea4b 0b08 	orr.w	fp, fp, r8
 8023052:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8023056:	ee3d db47 	vsub.f64	d13, d13, d7
 802305a:	d03c      	beq.n	80230d6 <_strtod_l+0xb16>
 802305c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8023060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023064:	f53f acf4 	bmi.w	8022a50 <_strtod_l+0x490>
 8023068:	eeb4 dbcb 	vcmpe.f64	d13, d11
 802306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023070:	dda8      	ble.n	8022fc4 <_strtod_l+0xa04>
 8023072:	e4ed      	b.n	8022a50 <_strtod_l+0x490>
 8023074:	9805      	ldr	r0, [sp, #20]
 8023076:	b1f0      	cbz	r0, 80230b6 <_strtod_l+0xaf6>
 8023078:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 802307c:	d81b      	bhi.n	80230b6 <_strtod_l+0xaf6>
 802307e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8023108 <_strtod_l+0xb48>
 8023082:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8023086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802308a:	d811      	bhi.n	80230b0 <_strtod_l+0xaf0>
 802308c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8023090:	ee1d 3a10 	vmov	r3, s26
 8023094:	2b01      	cmp	r3, #1
 8023096:	bf38      	it	cc
 8023098:	2301      	movcc	r3, #1
 802309a:	ee0d 3a10 	vmov	s26, r3
 802309e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80230a2:	f1ba 0f00 	cmp.w	sl, #0
 80230a6:	d113      	bne.n	80230d0 <_strtod_l+0xb10>
 80230a8:	eeb1 7b4d 	vneg.f64	d7, d13
 80230ac:	ec53 2b17 	vmov	r2, r3, d7
 80230b0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80230b4:	1a43      	subs	r3, r0, r1
 80230b6:	eeb0 0b48 	vmov.f64	d0, d8
 80230ba:	ec43 2b1c 	vmov	d12, r2, r3
 80230be:	910a      	str	r1, [sp, #40]	; 0x28
 80230c0:	f7ff f91e 	bl	8022300 <__ulp>
 80230c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80230c6:	eeac 8b00 	vfma.f64	d8, d12, d0
 80230ca:	ec59 8b18 	vmov	r8, r9, d8
 80230ce:	e7aa      	b.n	8023026 <_strtod_l+0xa66>
 80230d0:	eeb0 7b4d 	vmov.f64	d7, d13
 80230d4:	e7ea      	b.n	80230ac <_strtod_l+0xaec>
 80230d6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80230da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230de:	f57f af71 	bpl.w	8022fc4 <_strtod_l+0xa04>
 80230e2:	e4b5      	b.n	8022a50 <_strtod_l+0x490>
 80230e4:	2300      	movs	r3, #0
 80230e6:	9308      	str	r3, [sp, #32]
 80230e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80230ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80230ec:	6013      	str	r3, [r2, #0]
 80230ee:	f7ff baa6 	b.w	802263e <_strtod_l+0x7e>
 80230f2:	2a65      	cmp	r2, #101	; 0x65
 80230f4:	f43f aba2 	beq.w	802283c <_strtod_l+0x27c>
 80230f8:	2a45      	cmp	r2, #69	; 0x45
 80230fa:	f43f ab9f 	beq.w	802283c <_strtod_l+0x27c>
 80230fe:	2101      	movs	r1, #1
 8023100:	f7ff bbd8 	b.w	80228b4 <_strtod_l+0x2f4>
 8023104:	f3af 8000 	nop.w
 8023108:	ffc00000 	.word	0xffc00000
 802310c:	41dfffff 	.word	0x41dfffff
 8023110:	000fffff 	.word	0x000fffff
 8023114:	7ff00000 	.word	0x7ff00000
 8023118:	7fefffff 	.word	0x7fefffff
 802311c:	7c9fffff 	.word	0x7c9fffff
 8023120:	7fe00000 	.word	0x7fe00000

08023124 <_strtod_r>:
 8023124:	4b01      	ldr	r3, [pc, #4]	; (802312c <_strtod_r+0x8>)
 8023126:	f7ff ba4b 	b.w	80225c0 <_strtod_l>
 802312a:	bf00      	nop
 802312c:	200009dc 	.word	0x200009dc

08023130 <_strtol_l.constprop.0>:
 8023130:	2b01      	cmp	r3, #1
 8023132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023136:	d001      	beq.n	802313c <_strtol_l.constprop.0+0xc>
 8023138:	2b24      	cmp	r3, #36	; 0x24
 802313a:	d906      	bls.n	802314a <_strtol_l.constprop.0+0x1a>
 802313c:	f7fd febe 	bl	8020ebc <__errno>
 8023140:	2316      	movs	r3, #22
 8023142:	6003      	str	r3, [r0, #0]
 8023144:	2000      	movs	r0, #0
 8023146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802314a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8023230 <_strtol_l.constprop.0+0x100>
 802314e:	460d      	mov	r5, r1
 8023150:	462e      	mov	r6, r5
 8023152:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023156:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802315a:	f017 0708 	ands.w	r7, r7, #8
 802315e:	d1f7      	bne.n	8023150 <_strtol_l.constprop.0+0x20>
 8023160:	2c2d      	cmp	r4, #45	; 0x2d
 8023162:	d132      	bne.n	80231ca <_strtol_l.constprop.0+0x9a>
 8023164:	782c      	ldrb	r4, [r5, #0]
 8023166:	2701      	movs	r7, #1
 8023168:	1cb5      	adds	r5, r6, #2
 802316a:	2b00      	cmp	r3, #0
 802316c:	d05b      	beq.n	8023226 <_strtol_l.constprop.0+0xf6>
 802316e:	2b10      	cmp	r3, #16
 8023170:	d109      	bne.n	8023186 <_strtol_l.constprop.0+0x56>
 8023172:	2c30      	cmp	r4, #48	; 0x30
 8023174:	d107      	bne.n	8023186 <_strtol_l.constprop.0+0x56>
 8023176:	782c      	ldrb	r4, [r5, #0]
 8023178:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802317c:	2c58      	cmp	r4, #88	; 0x58
 802317e:	d14d      	bne.n	802321c <_strtol_l.constprop.0+0xec>
 8023180:	786c      	ldrb	r4, [r5, #1]
 8023182:	2310      	movs	r3, #16
 8023184:	3502      	adds	r5, #2
 8023186:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802318a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802318e:	f04f 0e00 	mov.w	lr, #0
 8023192:	fbb8 f9f3 	udiv	r9, r8, r3
 8023196:	4676      	mov	r6, lr
 8023198:	fb03 8a19 	mls	sl, r3, r9, r8
 802319c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80231a0:	f1bc 0f09 	cmp.w	ip, #9
 80231a4:	d816      	bhi.n	80231d4 <_strtol_l.constprop.0+0xa4>
 80231a6:	4664      	mov	r4, ip
 80231a8:	42a3      	cmp	r3, r4
 80231aa:	dd24      	ble.n	80231f6 <_strtol_l.constprop.0+0xc6>
 80231ac:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80231b0:	d008      	beq.n	80231c4 <_strtol_l.constprop.0+0x94>
 80231b2:	45b1      	cmp	r9, r6
 80231b4:	d31c      	bcc.n	80231f0 <_strtol_l.constprop.0+0xc0>
 80231b6:	d101      	bne.n	80231bc <_strtol_l.constprop.0+0x8c>
 80231b8:	45a2      	cmp	sl, r4
 80231ba:	db19      	blt.n	80231f0 <_strtol_l.constprop.0+0xc0>
 80231bc:	fb06 4603 	mla	r6, r6, r3, r4
 80231c0:	f04f 0e01 	mov.w	lr, #1
 80231c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80231c8:	e7e8      	b.n	802319c <_strtol_l.constprop.0+0x6c>
 80231ca:	2c2b      	cmp	r4, #43	; 0x2b
 80231cc:	bf04      	itt	eq
 80231ce:	782c      	ldrbeq	r4, [r5, #0]
 80231d0:	1cb5      	addeq	r5, r6, #2
 80231d2:	e7ca      	b.n	802316a <_strtol_l.constprop.0+0x3a>
 80231d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80231d8:	f1bc 0f19 	cmp.w	ip, #25
 80231dc:	d801      	bhi.n	80231e2 <_strtol_l.constprop.0+0xb2>
 80231de:	3c37      	subs	r4, #55	; 0x37
 80231e0:	e7e2      	b.n	80231a8 <_strtol_l.constprop.0+0x78>
 80231e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80231e6:	f1bc 0f19 	cmp.w	ip, #25
 80231ea:	d804      	bhi.n	80231f6 <_strtol_l.constprop.0+0xc6>
 80231ec:	3c57      	subs	r4, #87	; 0x57
 80231ee:	e7db      	b.n	80231a8 <_strtol_l.constprop.0+0x78>
 80231f0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80231f4:	e7e6      	b.n	80231c4 <_strtol_l.constprop.0+0x94>
 80231f6:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80231fa:	d105      	bne.n	8023208 <_strtol_l.constprop.0+0xd8>
 80231fc:	2322      	movs	r3, #34	; 0x22
 80231fe:	6003      	str	r3, [r0, #0]
 8023200:	4646      	mov	r6, r8
 8023202:	b942      	cbnz	r2, 8023216 <_strtol_l.constprop.0+0xe6>
 8023204:	4630      	mov	r0, r6
 8023206:	e79e      	b.n	8023146 <_strtol_l.constprop.0+0x16>
 8023208:	b107      	cbz	r7, 802320c <_strtol_l.constprop.0+0xdc>
 802320a:	4276      	negs	r6, r6
 802320c:	2a00      	cmp	r2, #0
 802320e:	d0f9      	beq.n	8023204 <_strtol_l.constprop.0+0xd4>
 8023210:	f1be 0f00 	cmp.w	lr, #0
 8023214:	d000      	beq.n	8023218 <_strtol_l.constprop.0+0xe8>
 8023216:	1e69      	subs	r1, r5, #1
 8023218:	6011      	str	r1, [r2, #0]
 802321a:	e7f3      	b.n	8023204 <_strtol_l.constprop.0+0xd4>
 802321c:	2430      	movs	r4, #48	; 0x30
 802321e:	2b00      	cmp	r3, #0
 8023220:	d1b1      	bne.n	8023186 <_strtol_l.constprop.0+0x56>
 8023222:	2308      	movs	r3, #8
 8023224:	e7af      	b.n	8023186 <_strtol_l.constprop.0+0x56>
 8023226:	2c30      	cmp	r4, #48	; 0x30
 8023228:	d0a5      	beq.n	8023176 <_strtol_l.constprop.0+0x46>
 802322a:	230a      	movs	r3, #10
 802322c:	e7ab      	b.n	8023186 <_strtol_l.constprop.0+0x56>
 802322e:	bf00      	nop
 8023230:	08025b54 	.word	0x08025b54

08023234 <_strtol_r>:
 8023234:	f7ff bf7c 	b.w	8023130 <_strtol_l.constprop.0>

08023238 <__ssputs_r>:
 8023238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802323c:	688e      	ldr	r6, [r1, #8]
 802323e:	461f      	mov	r7, r3
 8023240:	42be      	cmp	r6, r7
 8023242:	680b      	ldr	r3, [r1, #0]
 8023244:	4682      	mov	sl, r0
 8023246:	460c      	mov	r4, r1
 8023248:	4690      	mov	r8, r2
 802324a:	d82c      	bhi.n	80232a6 <__ssputs_r+0x6e>
 802324c:	898a      	ldrh	r2, [r1, #12]
 802324e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023252:	d026      	beq.n	80232a2 <__ssputs_r+0x6a>
 8023254:	6965      	ldr	r5, [r4, #20]
 8023256:	6909      	ldr	r1, [r1, #16]
 8023258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802325c:	eba3 0901 	sub.w	r9, r3, r1
 8023260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023264:	1c7b      	adds	r3, r7, #1
 8023266:	444b      	add	r3, r9
 8023268:	106d      	asrs	r5, r5, #1
 802326a:	429d      	cmp	r5, r3
 802326c:	bf38      	it	cc
 802326e:	461d      	movcc	r5, r3
 8023270:	0553      	lsls	r3, r2, #21
 8023272:	d527      	bpl.n	80232c4 <__ssputs_r+0x8c>
 8023274:	4629      	mov	r1, r5
 8023276:	f7fc f9d5 	bl	801f624 <_malloc_r>
 802327a:	4606      	mov	r6, r0
 802327c:	b360      	cbz	r0, 80232d8 <__ssputs_r+0xa0>
 802327e:	6921      	ldr	r1, [r4, #16]
 8023280:	464a      	mov	r2, r9
 8023282:	f7fd fe50 	bl	8020f26 <memcpy>
 8023286:	89a3      	ldrh	r3, [r4, #12]
 8023288:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802328c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023290:	81a3      	strh	r3, [r4, #12]
 8023292:	6126      	str	r6, [r4, #16]
 8023294:	6165      	str	r5, [r4, #20]
 8023296:	444e      	add	r6, r9
 8023298:	eba5 0509 	sub.w	r5, r5, r9
 802329c:	6026      	str	r6, [r4, #0]
 802329e:	60a5      	str	r5, [r4, #8]
 80232a0:	463e      	mov	r6, r7
 80232a2:	42be      	cmp	r6, r7
 80232a4:	d900      	bls.n	80232a8 <__ssputs_r+0x70>
 80232a6:	463e      	mov	r6, r7
 80232a8:	6820      	ldr	r0, [r4, #0]
 80232aa:	4632      	mov	r2, r6
 80232ac:	4641      	mov	r1, r8
 80232ae:	f7fd fd53 	bl	8020d58 <memmove>
 80232b2:	68a3      	ldr	r3, [r4, #8]
 80232b4:	1b9b      	subs	r3, r3, r6
 80232b6:	60a3      	str	r3, [r4, #8]
 80232b8:	6823      	ldr	r3, [r4, #0]
 80232ba:	4433      	add	r3, r6
 80232bc:	6023      	str	r3, [r4, #0]
 80232be:	2000      	movs	r0, #0
 80232c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232c4:	462a      	mov	r2, r5
 80232c6:	f7fc faad 	bl	801f824 <_realloc_r>
 80232ca:	4606      	mov	r6, r0
 80232cc:	2800      	cmp	r0, #0
 80232ce:	d1e0      	bne.n	8023292 <__ssputs_r+0x5a>
 80232d0:	6921      	ldr	r1, [r4, #16]
 80232d2:	4650      	mov	r0, sl
 80232d4:	f7fe fc5c 	bl	8021b90 <_free_r>
 80232d8:	230c      	movs	r3, #12
 80232da:	f8ca 3000 	str.w	r3, [sl]
 80232de:	89a3      	ldrh	r3, [r4, #12]
 80232e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80232e4:	81a3      	strh	r3, [r4, #12]
 80232e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80232ea:	e7e9      	b.n	80232c0 <__ssputs_r+0x88>

080232ec <_svfiprintf_r>:
 80232ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232f0:	4698      	mov	r8, r3
 80232f2:	898b      	ldrh	r3, [r1, #12]
 80232f4:	061b      	lsls	r3, r3, #24
 80232f6:	b09d      	sub	sp, #116	; 0x74
 80232f8:	4607      	mov	r7, r0
 80232fa:	460d      	mov	r5, r1
 80232fc:	4614      	mov	r4, r2
 80232fe:	d50e      	bpl.n	802331e <_svfiprintf_r+0x32>
 8023300:	690b      	ldr	r3, [r1, #16]
 8023302:	b963      	cbnz	r3, 802331e <_svfiprintf_r+0x32>
 8023304:	2140      	movs	r1, #64	; 0x40
 8023306:	f7fc f98d 	bl	801f624 <_malloc_r>
 802330a:	6028      	str	r0, [r5, #0]
 802330c:	6128      	str	r0, [r5, #16]
 802330e:	b920      	cbnz	r0, 802331a <_svfiprintf_r+0x2e>
 8023310:	230c      	movs	r3, #12
 8023312:	603b      	str	r3, [r7, #0]
 8023314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023318:	e0d0      	b.n	80234bc <_svfiprintf_r+0x1d0>
 802331a:	2340      	movs	r3, #64	; 0x40
 802331c:	616b      	str	r3, [r5, #20]
 802331e:	2300      	movs	r3, #0
 8023320:	9309      	str	r3, [sp, #36]	; 0x24
 8023322:	2320      	movs	r3, #32
 8023324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023328:	f8cd 800c 	str.w	r8, [sp, #12]
 802332c:	2330      	movs	r3, #48	; 0x30
 802332e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80234d4 <_svfiprintf_r+0x1e8>
 8023332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023336:	f04f 0901 	mov.w	r9, #1
 802333a:	4623      	mov	r3, r4
 802333c:	469a      	mov	sl, r3
 802333e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023342:	b10a      	cbz	r2, 8023348 <_svfiprintf_r+0x5c>
 8023344:	2a25      	cmp	r2, #37	; 0x25
 8023346:	d1f9      	bne.n	802333c <_svfiprintf_r+0x50>
 8023348:	ebba 0b04 	subs.w	fp, sl, r4
 802334c:	d00b      	beq.n	8023366 <_svfiprintf_r+0x7a>
 802334e:	465b      	mov	r3, fp
 8023350:	4622      	mov	r2, r4
 8023352:	4629      	mov	r1, r5
 8023354:	4638      	mov	r0, r7
 8023356:	f7ff ff6f 	bl	8023238 <__ssputs_r>
 802335a:	3001      	adds	r0, #1
 802335c:	f000 80a9 	beq.w	80234b2 <_svfiprintf_r+0x1c6>
 8023360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023362:	445a      	add	r2, fp
 8023364:	9209      	str	r2, [sp, #36]	; 0x24
 8023366:	f89a 3000 	ldrb.w	r3, [sl]
 802336a:	2b00      	cmp	r3, #0
 802336c:	f000 80a1 	beq.w	80234b2 <_svfiprintf_r+0x1c6>
 8023370:	2300      	movs	r3, #0
 8023372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802337a:	f10a 0a01 	add.w	sl, sl, #1
 802337e:	9304      	str	r3, [sp, #16]
 8023380:	9307      	str	r3, [sp, #28]
 8023382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023386:	931a      	str	r3, [sp, #104]	; 0x68
 8023388:	4654      	mov	r4, sl
 802338a:	2205      	movs	r2, #5
 802338c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023390:	4850      	ldr	r0, [pc, #320]	; (80234d4 <_svfiprintf_r+0x1e8>)
 8023392:	f7dc ff65 	bl	8000260 <memchr>
 8023396:	9a04      	ldr	r2, [sp, #16]
 8023398:	b9d8      	cbnz	r0, 80233d2 <_svfiprintf_r+0xe6>
 802339a:	06d0      	lsls	r0, r2, #27
 802339c:	bf44      	itt	mi
 802339e:	2320      	movmi	r3, #32
 80233a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233a4:	0711      	lsls	r1, r2, #28
 80233a6:	bf44      	itt	mi
 80233a8:	232b      	movmi	r3, #43	; 0x2b
 80233aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233ae:	f89a 3000 	ldrb.w	r3, [sl]
 80233b2:	2b2a      	cmp	r3, #42	; 0x2a
 80233b4:	d015      	beq.n	80233e2 <_svfiprintf_r+0xf6>
 80233b6:	9a07      	ldr	r2, [sp, #28]
 80233b8:	4654      	mov	r4, sl
 80233ba:	2000      	movs	r0, #0
 80233bc:	f04f 0c0a 	mov.w	ip, #10
 80233c0:	4621      	mov	r1, r4
 80233c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233c6:	3b30      	subs	r3, #48	; 0x30
 80233c8:	2b09      	cmp	r3, #9
 80233ca:	d94d      	bls.n	8023468 <_svfiprintf_r+0x17c>
 80233cc:	b1b0      	cbz	r0, 80233fc <_svfiprintf_r+0x110>
 80233ce:	9207      	str	r2, [sp, #28]
 80233d0:	e014      	b.n	80233fc <_svfiprintf_r+0x110>
 80233d2:	eba0 0308 	sub.w	r3, r0, r8
 80233d6:	fa09 f303 	lsl.w	r3, r9, r3
 80233da:	4313      	orrs	r3, r2
 80233dc:	9304      	str	r3, [sp, #16]
 80233de:	46a2      	mov	sl, r4
 80233e0:	e7d2      	b.n	8023388 <_svfiprintf_r+0x9c>
 80233e2:	9b03      	ldr	r3, [sp, #12]
 80233e4:	1d19      	adds	r1, r3, #4
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	9103      	str	r1, [sp, #12]
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	bfbb      	ittet	lt
 80233ee:	425b      	neglt	r3, r3
 80233f0:	f042 0202 	orrlt.w	r2, r2, #2
 80233f4:	9307      	strge	r3, [sp, #28]
 80233f6:	9307      	strlt	r3, [sp, #28]
 80233f8:	bfb8      	it	lt
 80233fa:	9204      	strlt	r2, [sp, #16]
 80233fc:	7823      	ldrb	r3, [r4, #0]
 80233fe:	2b2e      	cmp	r3, #46	; 0x2e
 8023400:	d10c      	bne.n	802341c <_svfiprintf_r+0x130>
 8023402:	7863      	ldrb	r3, [r4, #1]
 8023404:	2b2a      	cmp	r3, #42	; 0x2a
 8023406:	d134      	bne.n	8023472 <_svfiprintf_r+0x186>
 8023408:	9b03      	ldr	r3, [sp, #12]
 802340a:	1d1a      	adds	r2, r3, #4
 802340c:	681b      	ldr	r3, [r3, #0]
 802340e:	9203      	str	r2, [sp, #12]
 8023410:	2b00      	cmp	r3, #0
 8023412:	bfb8      	it	lt
 8023414:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023418:	3402      	adds	r4, #2
 802341a:	9305      	str	r3, [sp, #20]
 802341c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80234e4 <_svfiprintf_r+0x1f8>
 8023420:	7821      	ldrb	r1, [r4, #0]
 8023422:	2203      	movs	r2, #3
 8023424:	4650      	mov	r0, sl
 8023426:	f7dc ff1b 	bl	8000260 <memchr>
 802342a:	b138      	cbz	r0, 802343c <_svfiprintf_r+0x150>
 802342c:	9b04      	ldr	r3, [sp, #16]
 802342e:	eba0 000a 	sub.w	r0, r0, sl
 8023432:	2240      	movs	r2, #64	; 0x40
 8023434:	4082      	lsls	r2, r0
 8023436:	4313      	orrs	r3, r2
 8023438:	3401      	adds	r4, #1
 802343a:	9304      	str	r3, [sp, #16]
 802343c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023440:	4825      	ldr	r0, [pc, #148]	; (80234d8 <_svfiprintf_r+0x1ec>)
 8023442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023446:	2206      	movs	r2, #6
 8023448:	f7dc ff0a 	bl	8000260 <memchr>
 802344c:	2800      	cmp	r0, #0
 802344e:	d038      	beq.n	80234c2 <_svfiprintf_r+0x1d6>
 8023450:	4b22      	ldr	r3, [pc, #136]	; (80234dc <_svfiprintf_r+0x1f0>)
 8023452:	bb1b      	cbnz	r3, 802349c <_svfiprintf_r+0x1b0>
 8023454:	9b03      	ldr	r3, [sp, #12]
 8023456:	3307      	adds	r3, #7
 8023458:	f023 0307 	bic.w	r3, r3, #7
 802345c:	3308      	adds	r3, #8
 802345e:	9303      	str	r3, [sp, #12]
 8023460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023462:	4433      	add	r3, r6
 8023464:	9309      	str	r3, [sp, #36]	; 0x24
 8023466:	e768      	b.n	802333a <_svfiprintf_r+0x4e>
 8023468:	fb0c 3202 	mla	r2, ip, r2, r3
 802346c:	460c      	mov	r4, r1
 802346e:	2001      	movs	r0, #1
 8023470:	e7a6      	b.n	80233c0 <_svfiprintf_r+0xd4>
 8023472:	2300      	movs	r3, #0
 8023474:	3401      	adds	r4, #1
 8023476:	9305      	str	r3, [sp, #20]
 8023478:	4619      	mov	r1, r3
 802347a:	f04f 0c0a 	mov.w	ip, #10
 802347e:	4620      	mov	r0, r4
 8023480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023484:	3a30      	subs	r2, #48	; 0x30
 8023486:	2a09      	cmp	r2, #9
 8023488:	d903      	bls.n	8023492 <_svfiprintf_r+0x1a6>
 802348a:	2b00      	cmp	r3, #0
 802348c:	d0c6      	beq.n	802341c <_svfiprintf_r+0x130>
 802348e:	9105      	str	r1, [sp, #20]
 8023490:	e7c4      	b.n	802341c <_svfiprintf_r+0x130>
 8023492:	fb0c 2101 	mla	r1, ip, r1, r2
 8023496:	4604      	mov	r4, r0
 8023498:	2301      	movs	r3, #1
 802349a:	e7f0      	b.n	802347e <_svfiprintf_r+0x192>
 802349c:	ab03      	add	r3, sp, #12
 802349e:	9300      	str	r3, [sp, #0]
 80234a0:	462a      	mov	r2, r5
 80234a2:	4b0f      	ldr	r3, [pc, #60]	; (80234e0 <_svfiprintf_r+0x1f4>)
 80234a4:	a904      	add	r1, sp, #16
 80234a6:	4638      	mov	r0, r7
 80234a8:	f7fc fafa 	bl	801faa0 <_printf_float>
 80234ac:	1c42      	adds	r2, r0, #1
 80234ae:	4606      	mov	r6, r0
 80234b0:	d1d6      	bne.n	8023460 <_svfiprintf_r+0x174>
 80234b2:	89ab      	ldrh	r3, [r5, #12]
 80234b4:	065b      	lsls	r3, r3, #25
 80234b6:	f53f af2d 	bmi.w	8023314 <_svfiprintf_r+0x28>
 80234ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234bc:	b01d      	add	sp, #116	; 0x74
 80234be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234c2:	ab03      	add	r3, sp, #12
 80234c4:	9300      	str	r3, [sp, #0]
 80234c6:	462a      	mov	r2, r5
 80234c8:	4b05      	ldr	r3, [pc, #20]	; (80234e0 <_svfiprintf_r+0x1f4>)
 80234ca:	a904      	add	r1, sp, #16
 80234cc:	4638      	mov	r0, r7
 80234ce:	f7fc fd6f 	bl	801ffb0 <_printf_i>
 80234d2:	e7eb      	b.n	80234ac <_svfiprintf_r+0x1c0>
 80234d4:	08025ee8 	.word	0x08025ee8
 80234d8:	08025ef2 	.word	0x08025ef2
 80234dc:	0801faa1 	.word	0x0801faa1
 80234e0:	08023239 	.word	0x08023239
 80234e4:	08025eee 	.word	0x08025eee

080234e8 <__sfputc_r>:
 80234e8:	6893      	ldr	r3, [r2, #8]
 80234ea:	3b01      	subs	r3, #1
 80234ec:	2b00      	cmp	r3, #0
 80234ee:	b410      	push	{r4}
 80234f0:	6093      	str	r3, [r2, #8]
 80234f2:	da08      	bge.n	8023506 <__sfputc_r+0x1e>
 80234f4:	6994      	ldr	r4, [r2, #24]
 80234f6:	42a3      	cmp	r3, r4
 80234f8:	db01      	blt.n	80234fe <__sfputc_r+0x16>
 80234fa:	290a      	cmp	r1, #10
 80234fc:	d103      	bne.n	8023506 <__sfputc_r+0x1e>
 80234fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023502:	f7fd bb83 	b.w	8020c0c <__swbuf_r>
 8023506:	6813      	ldr	r3, [r2, #0]
 8023508:	1c58      	adds	r0, r3, #1
 802350a:	6010      	str	r0, [r2, #0]
 802350c:	7019      	strb	r1, [r3, #0]
 802350e:	4608      	mov	r0, r1
 8023510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023514:	4770      	bx	lr

08023516 <__sfputs_r>:
 8023516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023518:	4606      	mov	r6, r0
 802351a:	460f      	mov	r7, r1
 802351c:	4614      	mov	r4, r2
 802351e:	18d5      	adds	r5, r2, r3
 8023520:	42ac      	cmp	r4, r5
 8023522:	d101      	bne.n	8023528 <__sfputs_r+0x12>
 8023524:	2000      	movs	r0, #0
 8023526:	e007      	b.n	8023538 <__sfputs_r+0x22>
 8023528:	f814 1b01 	ldrb.w	r1, [r4], #1
 802352c:	463a      	mov	r2, r7
 802352e:	4630      	mov	r0, r6
 8023530:	f7ff ffda 	bl	80234e8 <__sfputc_r>
 8023534:	1c43      	adds	r3, r0, #1
 8023536:	d1f3      	bne.n	8023520 <__sfputs_r+0xa>
 8023538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802353c <_vfiprintf_r>:
 802353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023540:	460d      	mov	r5, r1
 8023542:	b09d      	sub	sp, #116	; 0x74
 8023544:	4614      	mov	r4, r2
 8023546:	4698      	mov	r8, r3
 8023548:	4606      	mov	r6, r0
 802354a:	b118      	cbz	r0, 8023554 <_vfiprintf_r+0x18>
 802354c:	6a03      	ldr	r3, [r0, #32]
 802354e:	b90b      	cbnz	r3, 8023554 <_vfiprintf_r+0x18>
 8023550:	f7fd f8e0 	bl	8020714 <__sinit>
 8023554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023556:	07d9      	lsls	r1, r3, #31
 8023558:	d405      	bmi.n	8023566 <_vfiprintf_r+0x2a>
 802355a:	89ab      	ldrh	r3, [r5, #12]
 802355c:	059a      	lsls	r2, r3, #22
 802355e:	d402      	bmi.n	8023566 <_vfiprintf_r+0x2a>
 8023560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023562:	f7fd fcd6 	bl	8020f12 <__retarget_lock_acquire_recursive>
 8023566:	89ab      	ldrh	r3, [r5, #12]
 8023568:	071b      	lsls	r3, r3, #28
 802356a:	d501      	bpl.n	8023570 <_vfiprintf_r+0x34>
 802356c:	692b      	ldr	r3, [r5, #16]
 802356e:	b99b      	cbnz	r3, 8023598 <_vfiprintf_r+0x5c>
 8023570:	4629      	mov	r1, r5
 8023572:	4630      	mov	r0, r6
 8023574:	f7fd fb88 	bl	8020c88 <__swsetup_r>
 8023578:	b170      	cbz	r0, 8023598 <_vfiprintf_r+0x5c>
 802357a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802357c:	07dc      	lsls	r4, r3, #31
 802357e:	d504      	bpl.n	802358a <_vfiprintf_r+0x4e>
 8023580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023584:	b01d      	add	sp, #116	; 0x74
 8023586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802358a:	89ab      	ldrh	r3, [r5, #12]
 802358c:	0598      	lsls	r0, r3, #22
 802358e:	d4f7      	bmi.n	8023580 <_vfiprintf_r+0x44>
 8023590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023592:	f7fd fcbf 	bl	8020f14 <__retarget_lock_release_recursive>
 8023596:	e7f3      	b.n	8023580 <_vfiprintf_r+0x44>
 8023598:	2300      	movs	r3, #0
 802359a:	9309      	str	r3, [sp, #36]	; 0x24
 802359c:	2320      	movs	r3, #32
 802359e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80235a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80235a6:	2330      	movs	r3, #48	; 0x30
 80235a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802375c <_vfiprintf_r+0x220>
 80235ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80235b0:	f04f 0901 	mov.w	r9, #1
 80235b4:	4623      	mov	r3, r4
 80235b6:	469a      	mov	sl, r3
 80235b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80235bc:	b10a      	cbz	r2, 80235c2 <_vfiprintf_r+0x86>
 80235be:	2a25      	cmp	r2, #37	; 0x25
 80235c0:	d1f9      	bne.n	80235b6 <_vfiprintf_r+0x7a>
 80235c2:	ebba 0b04 	subs.w	fp, sl, r4
 80235c6:	d00b      	beq.n	80235e0 <_vfiprintf_r+0xa4>
 80235c8:	465b      	mov	r3, fp
 80235ca:	4622      	mov	r2, r4
 80235cc:	4629      	mov	r1, r5
 80235ce:	4630      	mov	r0, r6
 80235d0:	f7ff ffa1 	bl	8023516 <__sfputs_r>
 80235d4:	3001      	adds	r0, #1
 80235d6:	f000 80a9 	beq.w	802372c <_vfiprintf_r+0x1f0>
 80235da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80235dc:	445a      	add	r2, fp
 80235de:	9209      	str	r2, [sp, #36]	; 0x24
 80235e0:	f89a 3000 	ldrb.w	r3, [sl]
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	f000 80a1 	beq.w	802372c <_vfiprintf_r+0x1f0>
 80235ea:	2300      	movs	r3, #0
 80235ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80235f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80235f4:	f10a 0a01 	add.w	sl, sl, #1
 80235f8:	9304      	str	r3, [sp, #16]
 80235fa:	9307      	str	r3, [sp, #28]
 80235fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023600:	931a      	str	r3, [sp, #104]	; 0x68
 8023602:	4654      	mov	r4, sl
 8023604:	2205      	movs	r2, #5
 8023606:	f814 1b01 	ldrb.w	r1, [r4], #1
 802360a:	4854      	ldr	r0, [pc, #336]	; (802375c <_vfiprintf_r+0x220>)
 802360c:	f7dc fe28 	bl	8000260 <memchr>
 8023610:	9a04      	ldr	r2, [sp, #16]
 8023612:	b9d8      	cbnz	r0, 802364c <_vfiprintf_r+0x110>
 8023614:	06d1      	lsls	r1, r2, #27
 8023616:	bf44      	itt	mi
 8023618:	2320      	movmi	r3, #32
 802361a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802361e:	0713      	lsls	r3, r2, #28
 8023620:	bf44      	itt	mi
 8023622:	232b      	movmi	r3, #43	; 0x2b
 8023624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023628:	f89a 3000 	ldrb.w	r3, [sl]
 802362c:	2b2a      	cmp	r3, #42	; 0x2a
 802362e:	d015      	beq.n	802365c <_vfiprintf_r+0x120>
 8023630:	9a07      	ldr	r2, [sp, #28]
 8023632:	4654      	mov	r4, sl
 8023634:	2000      	movs	r0, #0
 8023636:	f04f 0c0a 	mov.w	ip, #10
 802363a:	4621      	mov	r1, r4
 802363c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023640:	3b30      	subs	r3, #48	; 0x30
 8023642:	2b09      	cmp	r3, #9
 8023644:	d94d      	bls.n	80236e2 <_vfiprintf_r+0x1a6>
 8023646:	b1b0      	cbz	r0, 8023676 <_vfiprintf_r+0x13a>
 8023648:	9207      	str	r2, [sp, #28]
 802364a:	e014      	b.n	8023676 <_vfiprintf_r+0x13a>
 802364c:	eba0 0308 	sub.w	r3, r0, r8
 8023650:	fa09 f303 	lsl.w	r3, r9, r3
 8023654:	4313      	orrs	r3, r2
 8023656:	9304      	str	r3, [sp, #16]
 8023658:	46a2      	mov	sl, r4
 802365a:	e7d2      	b.n	8023602 <_vfiprintf_r+0xc6>
 802365c:	9b03      	ldr	r3, [sp, #12]
 802365e:	1d19      	adds	r1, r3, #4
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	9103      	str	r1, [sp, #12]
 8023664:	2b00      	cmp	r3, #0
 8023666:	bfbb      	ittet	lt
 8023668:	425b      	neglt	r3, r3
 802366a:	f042 0202 	orrlt.w	r2, r2, #2
 802366e:	9307      	strge	r3, [sp, #28]
 8023670:	9307      	strlt	r3, [sp, #28]
 8023672:	bfb8      	it	lt
 8023674:	9204      	strlt	r2, [sp, #16]
 8023676:	7823      	ldrb	r3, [r4, #0]
 8023678:	2b2e      	cmp	r3, #46	; 0x2e
 802367a:	d10c      	bne.n	8023696 <_vfiprintf_r+0x15a>
 802367c:	7863      	ldrb	r3, [r4, #1]
 802367e:	2b2a      	cmp	r3, #42	; 0x2a
 8023680:	d134      	bne.n	80236ec <_vfiprintf_r+0x1b0>
 8023682:	9b03      	ldr	r3, [sp, #12]
 8023684:	1d1a      	adds	r2, r3, #4
 8023686:	681b      	ldr	r3, [r3, #0]
 8023688:	9203      	str	r2, [sp, #12]
 802368a:	2b00      	cmp	r3, #0
 802368c:	bfb8      	it	lt
 802368e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023692:	3402      	adds	r4, #2
 8023694:	9305      	str	r3, [sp, #20]
 8023696:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802376c <_vfiprintf_r+0x230>
 802369a:	7821      	ldrb	r1, [r4, #0]
 802369c:	2203      	movs	r2, #3
 802369e:	4650      	mov	r0, sl
 80236a0:	f7dc fdde 	bl	8000260 <memchr>
 80236a4:	b138      	cbz	r0, 80236b6 <_vfiprintf_r+0x17a>
 80236a6:	9b04      	ldr	r3, [sp, #16]
 80236a8:	eba0 000a 	sub.w	r0, r0, sl
 80236ac:	2240      	movs	r2, #64	; 0x40
 80236ae:	4082      	lsls	r2, r0
 80236b0:	4313      	orrs	r3, r2
 80236b2:	3401      	adds	r4, #1
 80236b4:	9304      	str	r3, [sp, #16]
 80236b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80236ba:	4829      	ldr	r0, [pc, #164]	; (8023760 <_vfiprintf_r+0x224>)
 80236bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80236c0:	2206      	movs	r2, #6
 80236c2:	f7dc fdcd 	bl	8000260 <memchr>
 80236c6:	2800      	cmp	r0, #0
 80236c8:	d03f      	beq.n	802374a <_vfiprintf_r+0x20e>
 80236ca:	4b26      	ldr	r3, [pc, #152]	; (8023764 <_vfiprintf_r+0x228>)
 80236cc:	bb1b      	cbnz	r3, 8023716 <_vfiprintf_r+0x1da>
 80236ce:	9b03      	ldr	r3, [sp, #12]
 80236d0:	3307      	adds	r3, #7
 80236d2:	f023 0307 	bic.w	r3, r3, #7
 80236d6:	3308      	adds	r3, #8
 80236d8:	9303      	str	r3, [sp, #12]
 80236da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236dc:	443b      	add	r3, r7
 80236de:	9309      	str	r3, [sp, #36]	; 0x24
 80236e0:	e768      	b.n	80235b4 <_vfiprintf_r+0x78>
 80236e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80236e6:	460c      	mov	r4, r1
 80236e8:	2001      	movs	r0, #1
 80236ea:	e7a6      	b.n	802363a <_vfiprintf_r+0xfe>
 80236ec:	2300      	movs	r3, #0
 80236ee:	3401      	adds	r4, #1
 80236f0:	9305      	str	r3, [sp, #20]
 80236f2:	4619      	mov	r1, r3
 80236f4:	f04f 0c0a 	mov.w	ip, #10
 80236f8:	4620      	mov	r0, r4
 80236fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80236fe:	3a30      	subs	r2, #48	; 0x30
 8023700:	2a09      	cmp	r2, #9
 8023702:	d903      	bls.n	802370c <_vfiprintf_r+0x1d0>
 8023704:	2b00      	cmp	r3, #0
 8023706:	d0c6      	beq.n	8023696 <_vfiprintf_r+0x15a>
 8023708:	9105      	str	r1, [sp, #20]
 802370a:	e7c4      	b.n	8023696 <_vfiprintf_r+0x15a>
 802370c:	fb0c 2101 	mla	r1, ip, r1, r2
 8023710:	4604      	mov	r4, r0
 8023712:	2301      	movs	r3, #1
 8023714:	e7f0      	b.n	80236f8 <_vfiprintf_r+0x1bc>
 8023716:	ab03      	add	r3, sp, #12
 8023718:	9300      	str	r3, [sp, #0]
 802371a:	462a      	mov	r2, r5
 802371c:	4b12      	ldr	r3, [pc, #72]	; (8023768 <_vfiprintf_r+0x22c>)
 802371e:	a904      	add	r1, sp, #16
 8023720:	4630      	mov	r0, r6
 8023722:	f7fc f9bd 	bl	801faa0 <_printf_float>
 8023726:	4607      	mov	r7, r0
 8023728:	1c78      	adds	r0, r7, #1
 802372a:	d1d6      	bne.n	80236da <_vfiprintf_r+0x19e>
 802372c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802372e:	07d9      	lsls	r1, r3, #31
 8023730:	d405      	bmi.n	802373e <_vfiprintf_r+0x202>
 8023732:	89ab      	ldrh	r3, [r5, #12]
 8023734:	059a      	lsls	r2, r3, #22
 8023736:	d402      	bmi.n	802373e <_vfiprintf_r+0x202>
 8023738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802373a:	f7fd fbeb 	bl	8020f14 <__retarget_lock_release_recursive>
 802373e:	89ab      	ldrh	r3, [r5, #12]
 8023740:	065b      	lsls	r3, r3, #25
 8023742:	f53f af1d 	bmi.w	8023580 <_vfiprintf_r+0x44>
 8023746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023748:	e71c      	b.n	8023584 <_vfiprintf_r+0x48>
 802374a:	ab03      	add	r3, sp, #12
 802374c:	9300      	str	r3, [sp, #0]
 802374e:	462a      	mov	r2, r5
 8023750:	4b05      	ldr	r3, [pc, #20]	; (8023768 <_vfiprintf_r+0x22c>)
 8023752:	a904      	add	r1, sp, #16
 8023754:	4630      	mov	r0, r6
 8023756:	f7fc fc2b 	bl	801ffb0 <_printf_i>
 802375a:	e7e4      	b.n	8023726 <_vfiprintf_r+0x1ea>
 802375c:	08025ee8 	.word	0x08025ee8
 8023760:	08025ef2 	.word	0x08025ef2
 8023764:	0801faa1 	.word	0x0801faa1
 8023768:	08023517 	.word	0x08023517
 802376c:	08025eee 	.word	0x08025eee

08023770 <__sflush_r>:
 8023770:	898a      	ldrh	r2, [r1, #12]
 8023772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023776:	4605      	mov	r5, r0
 8023778:	0710      	lsls	r0, r2, #28
 802377a:	460c      	mov	r4, r1
 802377c:	d458      	bmi.n	8023830 <__sflush_r+0xc0>
 802377e:	684b      	ldr	r3, [r1, #4]
 8023780:	2b00      	cmp	r3, #0
 8023782:	dc05      	bgt.n	8023790 <__sflush_r+0x20>
 8023784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023786:	2b00      	cmp	r3, #0
 8023788:	dc02      	bgt.n	8023790 <__sflush_r+0x20>
 802378a:	2000      	movs	r0, #0
 802378c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023792:	2e00      	cmp	r6, #0
 8023794:	d0f9      	beq.n	802378a <__sflush_r+0x1a>
 8023796:	2300      	movs	r3, #0
 8023798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802379c:	682f      	ldr	r7, [r5, #0]
 802379e:	6a21      	ldr	r1, [r4, #32]
 80237a0:	602b      	str	r3, [r5, #0]
 80237a2:	d032      	beq.n	802380a <__sflush_r+0x9a>
 80237a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80237a6:	89a3      	ldrh	r3, [r4, #12]
 80237a8:	075a      	lsls	r2, r3, #29
 80237aa:	d505      	bpl.n	80237b8 <__sflush_r+0x48>
 80237ac:	6863      	ldr	r3, [r4, #4]
 80237ae:	1ac0      	subs	r0, r0, r3
 80237b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80237b2:	b10b      	cbz	r3, 80237b8 <__sflush_r+0x48>
 80237b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80237b6:	1ac0      	subs	r0, r0, r3
 80237b8:	2300      	movs	r3, #0
 80237ba:	4602      	mov	r2, r0
 80237bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80237be:	6a21      	ldr	r1, [r4, #32]
 80237c0:	4628      	mov	r0, r5
 80237c2:	47b0      	blx	r6
 80237c4:	1c43      	adds	r3, r0, #1
 80237c6:	89a3      	ldrh	r3, [r4, #12]
 80237c8:	d106      	bne.n	80237d8 <__sflush_r+0x68>
 80237ca:	6829      	ldr	r1, [r5, #0]
 80237cc:	291d      	cmp	r1, #29
 80237ce:	d82b      	bhi.n	8023828 <__sflush_r+0xb8>
 80237d0:	4a29      	ldr	r2, [pc, #164]	; (8023878 <__sflush_r+0x108>)
 80237d2:	410a      	asrs	r2, r1
 80237d4:	07d6      	lsls	r6, r2, #31
 80237d6:	d427      	bmi.n	8023828 <__sflush_r+0xb8>
 80237d8:	2200      	movs	r2, #0
 80237da:	6062      	str	r2, [r4, #4]
 80237dc:	04d9      	lsls	r1, r3, #19
 80237de:	6922      	ldr	r2, [r4, #16]
 80237e0:	6022      	str	r2, [r4, #0]
 80237e2:	d504      	bpl.n	80237ee <__sflush_r+0x7e>
 80237e4:	1c42      	adds	r2, r0, #1
 80237e6:	d101      	bne.n	80237ec <__sflush_r+0x7c>
 80237e8:	682b      	ldr	r3, [r5, #0]
 80237ea:	b903      	cbnz	r3, 80237ee <__sflush_r+0x7e>
 80237ec:	6560      	str	r0, [r4, #84]	; 0x54
 80237ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80237f0:	602f      	str	r7, [r5, #0]
 80237f2:	2900      	cmp	r1, #0
 80237f4:	d0c9      	beq.n	802378a <__sflush_r+0x1a>
 80237f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80237fa:	4299      	cmp	r1, r3
 80237fc:	d002      	beq.n	8023804 <__sflush_r+0x94>
 80237fe:	4628      	mov	r0, r5
 8023800:	f7fe f9c6 	bl	8021b90 <_free_r>
 8023804:	2000      	movs	r0, #0
 8023806:	6360      	str	r0, [r4, #52]	; 0x34
 8023808:	e7c0      	b.n	802378c <__sflush_r+0x1c>
 802380a:	2301      	movs	r3, #1
 802380c:	4628      	mov	r0, r5
 802380e:	47b0      	blx	r6
 8023810:	1c41      	adds	r1, r0, #1
 8023812:	d1c8      	bne.n	80237a6 <__sflush_r+0x36>
 8023814:	682b      	ldr	r3, [r5, #0]
 8023816:	2b00      	cmp	r3, #0
 8023818:	d0c5      	beq.n	80237a6 <__sflush_r+0x36>
 802381a:	2b1d      	cmp	r3, #29
 802381c:	d001      	beq.n	8023822 <__sflush_r+0xb2>
 802381e:	2b16      	cmp	r3, #22
 8023820:	d101      	bne.n	8023826 <__sflush_r+0xb6>
 8023822:	602f      	str	r7, [r5, #0]
 8023824:	e7b1      	b.n	802378a <__sflush_r+0x1a>
 8023826:	89a3      	ldrh	r3, [r4, #12]
 8023828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802382c:	81a3      	strh	r3, [r4, #12]
 802382e:	e7ad      	b.n	802378c <__sflush_r+0x1c>
 8023830:	690f      	ldr	r7, [r1, #16]
 8023832:	2f00      	cmp	r7, #0
 8023834:	d0a9      	beq.n	802378a <__sflush_r+0x1a>
 8023836:	0793      	lsls	r3, r2, #30
 8023838:	680e      	ldr	r6, [r1, #0]
 802383a:	bf08      	it	eq
 802383c:	694b      	ldreq	r3, [r1, #20]
 802383e:	600f      	str	r7, [r1, #0]
 8023840:	bf18      	it	ne
 8023842:	2300      	movne	r3, #0
 8023844:	eba6 0807 	sub.w	r8, r6, r7
 8023848:	608b      	str	r3, [r1, #8]
 802384a:	f1b8 0f00 	cmp.w	r8, #0
 802384e:	dd9c      	ble.n	802378a <__sflush_r+0x1a>
 8023850:	6a21      	ldr	r1, [r4, #32]
 8023852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023854:	4643      	mov	r3, r8
 8023856:	463a      	mov	r2, r7
 8023858:	4628      	mov	r0, r5
 802385a:	47b0      	blx	r6
 802385c:	2800      	cmp	r0, #0
 802385e:	dc06      	bgt.n	802386e <__sflush_r+0xfe>
 8023860:	89a3      	ldrh	r3, [r4, #12]
 8023862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023866:	81a3      	strh	r3, [r4, #12]
 8023868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802386c:	e78e      	b.n	802378c <__sflush_r+0x1c>
 802386e:	4407      	add	r7, r0
 8023870:	eba8 0800 	sub.w	r8, r8, r0
 8023874:	e7e9      	b.n	802384a <__sflush_r+0xda>
 8023876:	bf00      	nop
 8023878:	dfbffffe 	.word	0xdfbffffe

0802387c <_fflush_r>:
 802387c:	b538      	push	{r3, r4, r5, lr}
 802387e:	690b      	ldr	r3, [r1, #16]
 8023880:	4605      	mov	r5, r0
 8023882:	460c      	mov	r4, r1
 8023884:	b913      	cbnz	r3, 802388c <_fflush_r+0x10>
 8023886:	2500      	movs	r5, #0
 8023888:	4628      	mov	r0, r5
 802388a:	bd38      	pop	{r3, r4, r5, pc}
 802388c:	b118      	cbz	r0, 8023896 <_fflush_r+0x1a>
 802388e:	6a03      	ldr	r3, [r0, #32]
 8023890:	b90b      	cbnz	r3, 8023896 <_fflush_r+0x1a>
 8023892:	f7fc ff3f 	bl	8020714 <__sinit>
 8023896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802389a:	2b00      	cmp	r3, #0
 802389c:	d0f3      	beq.n	8023886 <_fflush_r+0xa>
 802389e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80238a0:	07d0      	lsls	r0, r2, #31
 80238a2:	d404      	bmi.n	80238ae <_fflush_r+0x32>
 80238a4:	0599      	lsls	r1, r3, #22
 80238a6:	d402      	bmi.n	80238ae <_fflush_r+0x32>
 80238a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80238aa:	f7fd fb32 	bl	8020f12 <__retarget_lock_acquire_recursive>
 80238ae:	4628      	mov	r0, r5
 80238b0:	4621      	mov	r1, r4
 80238b2:	f7ff ff5d 	bl	8023770 <__sflush_r>
 80238b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80238b8:	07da      	lsls	r2, r3, #31
 80238ba:	4605      	mov	r5, r0
 80238bc:	d4e4      	bmi.n	8023888 <_fflush_r+0xc>
 80238be:	89a3      	ldrh	r3, [r4, #12]
 80238c0:	059b      	lsls	r3, r3, #22
 80238c2:	d4e1      	bmi.n	8023888 <_fflush_r+0xc>
 80238c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80238c6:	f7fd fb25 	bl	8020f14 <__retarget_lock_release_recursive>
 80238ca:	e7dd      	b.n	8023888 <_fflush_r+0xc>

080238cc <fiprintf>:
 80238cc:	b40e      	push	{r1, r2, r3}
 80238ce:	b503      	push	{r0, r1, lr}
 80238d0:	4601      	mov	r1, r0
 80238d2:	ab03      	add	r3, sp, #12
 80238d4:	4805      	ldr	r0, [pc, #20]	; (80238ec <fiprintf+0x20>)
 80238d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80238da:	6800      	ldr	r0, [r0, #0]
 80238dc:	9301      	str	r3, [sp, #4]
 80238de:	f7ff fe2d 	bl	802353c <_vfiprintf_r>
 80238e2:	b002      	add	sp, #8
 80238e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80238e8:	b003      	add	sp, #12
 80238ea:	4770      	bx	lr
 80238ec:	200009d8 	.word	0x200009d8

080238f0 <__swhatbuf_r>:
 80238f0:	b570      	push	{r4, r5, r6, lr}
 80238f2:	460c      	mov	r4, r1
 80238f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238f8:	2900      	cmp	r1, #0
 80238fa:	b096      	sub	sp, #88	; 0x58
 80238fc:	4615      	mov	r5, r2
 80238fe:	461e      	mov	r6, r3
 8023900:	da0d      	bge.n	802391e <__swhatbuf_r+0x2e>
 8023902:	89a3      	ldrh	r3, [r4, #12]
 8023904:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023908:	f04f 0100 	mov.w	r1, #0
 802390c:	bf0c      	ite	eq
 802390e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8023912:	2340      	movne	r3, #64	; 0x40
 8023914:	2000      	movs	r0, #0
 8023916:	6031      	str	r1, [r6, #0]
 8023918:	602b      	str	r3, [r5, #0]
 802391a:	b016      	add	sp, #88	; 0x58
 802391c:	bd70      	pop	{r4, r5, r6, pc}
 802391e:	466a      	mov	r2, sp
 8023920:	f000 f848 	bl	80239b4 <_fstat_r>
 8023924:	2800      	cmp	r0, #0
 8023926:	dbec      	blt.n	8023902 <__swhatbuf_r+0x12>
 8023928:	9901      	ldr	r1, [sp, #4]
 802392a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802392e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8023932:	4259      	negs	r1, r3
 8023934:	4159      	adcs	r1, r3
 8023936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802393a:	e7eb      	b.n	8023914 <__swhatbuf_r+0x24>

0802393c <__smakebuf_r>:
 802393c:	898b      	ldrh	r3, [r1, #12]
 802393e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023940:	079d      	lsls	r5, r3, #30
 8023942:	4606      	mov	r6, r0
 8023944:	460c      	mov	r4, r1
 8023946:	d507      	bpl.n	8023958 <__smakebuf_r+0x1c>
 8023948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802394c:	6023      	str	r3, [r4, #0]
 802394e:	6123      	str	r3, [r4, #16]
 8023950:	2301      	movs	r3, #1
 8023952:	6163      	str	r3, [r4, #20]
 8023954:	b002      	add	sp, #8
 8023956:	bd70      	pop	{r4, r5, r6, pc}
 8023958:	ab01      	add	r3, sp, #4
 802395a:	466a      	mov	r2, sp
 802395c:	f7ff ffc8 	bl	80238f0 <__swhatbuf_r>
 8023960:	9900      	ldr	r1, [sp, #0]
 8023962:	4605      	mov	r5, r0
 8023964:	4630      	mov	r0, r6
 8023966:	f7fb fe5d 	bl	801f624 <_malloc_r>
 802396a:	b948      	cbnz	r0, 8023980 <__smakebuf_r+0x44>
 802396c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023970:	059a      	lsls	r2, r3, #22
 8023972:	d4ef      	bmi.n	8023954 <__smakebuf_r+0x18>
 8023974:	f023 0303 	bic.w	r3, r3, #3
 8023978:	f043 0302 	orr.w	r3, r3, #2
 802397c:	81a3      	strh	r3, [r4, #12]
 802397e:	e7e3      	b.n	8023948 <__smakebuf_r+0xc>
 8023980:	89a3      	ldrh	r3, [r4, #12]
 8023982:	6020      	str	r0, [r4, #0]
 8023984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023988:	81a3      	strh	r3, [r4, #12]
 802398a:	9b00      	ldr	r3, [sp, #0]
 802398c:	6163      	str	r3, [r4, #20]
 802398e:	9b01      	ldr	r3, [sp, #4]
 8023990:	6120      	str	r0, [r4, #16]
 8023992:	b15b      	cbz	r3, 80239ac <__smakebuf_r+0x70>
 8023994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023998:	4630      	mov	r0, r6
 802399a:	f000 f81d 	bl	80239d8 <_isatty_r>
 802399e:	b128      	cbz	r0, 80239ac <__smakebuf_r+0x70>
 80239a0:	89a3      	ldrh	r3, [r4, #12]
 80239a2:	f023 0303 	bic.w	r3, r3, #3
 80239a6:	f043 0301 	orr.w	r3, r3, #1
 80239aa:	81a3      	strh	r3, [r4, #12]
 80239ac:	89a3      	ldrh	r3, [r4, #12]
 80239ae:	431d      	orrs	r5, r3
 80239b0:	81a5      	strh	r5, [r4, #12]
 80239b2:	e7cf      	b.n	8023954 <__smakebuf_r+0x18>

080239b4 <_fstat_r>:
 80239b4:	b538      	push	{r3, r4, r5, lr}
 80239b6:	4d07      	ldr	r5, [pc, #28]	; (80239d4 <_fstat_r+0x20>)
 80239b8:	2300      	movs	r3, #0
 80239ba:	4604      	mov	r4, r0
 80239bc:	4608      	mov	r0, r1
 80239be:	4611      	mov	r1, r2
 80239c0:	602b      	str	r3, [r5, #0]
 80239c2:	f7e0 f908 	bl	8003bd6 <_fstat>
 80239c6:	1c43      	adds	r3, r0, #1
 80239c8:	d102      	bne.n	80239d0 <_fstat_r+0x1c>
 80239ca:	682b      	ldr	r3, [r5, #0]
 80239cc:	b103      	cbz	r3, 80239d0 <_fstat_r+0x1c>
 80239ce:	6023      	str	r3, [r4, #0]
 80239d0:	bd38      	pop	{r3, r4, r5, pc}
 80239d2:	bf00      	nop
 80239d4:	200171a8 	.word	0x200171a8

080239d8 <_isatty_r>:
 80239d8:	b538      	push	{r3, r4, r5, lr}
 80239da:	4d06      	ldr	r5, [pc, #24]	; (80239f4 <_isatty_r+0x1c>)
 80239dc:	2300      	movs	r3, #0
 80239de:	4604      	mov	r4, r0
 80239e0:	4608      	mov	r0, r1
 80239e2:	602b      	str	r3, [r5, #0]
 80239e4:	f7e0 f907 	bl	8003bf6 <_isatty>
 80239e8:	1c43      	adds	r3, r0, #1
 80239ea:	d102      	bne.n	80239f2 <_isatty_r+0x1a>
 80239ec:	682b      	ldr	r3, [r5, #0]
 80239ee:	b103      	cbz	r3, 80239f2 <_isatty_r+0x1a>
 80239f0:	6023      	str	r3, [r4, #0]
 80239f2:	bd38      	pop	{r3, r4, r5, pc}
 80239f4:	200171a8 	.word	0x200171a8

080239f8 <nan>:
 80239f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023a00 <nan+0x8>
 80239fc:	4770      	bx	lr
 80239fe:	bf00      	nop
 8023a00:	00000000 	.word	0x00000000
 8023a04:	7ff80000 	.word	0x7ff80000

08023a08 <abort>:
 8023a08:	b508      	push	{r3, lr}
 8023a0a:	2006      	movs	r0, #6
 8023a0c:	f000 fba0 	bl	8024150 <raise>
 8023a10:	2001      	movs	r0, #1
 8023a12:	f7e0 f891 	bl	8003b38 <_exit>

08023a16 <rshift>:
 8023a16:	6903      	ldr	r3, [r0, #16]
 8023a18:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8023a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023a20:	ea4f 1261 	mov.w	r2, r1, asr #5
 8023a24:	f100 0414 	add.w	r4, r0, #20
 8023a28:	dd45      	ble.n	8023ab6 <rshift+0xa0>
 8023a2a:	f011 011f 	ands.w	r1, r1, #31
 8023a2e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8023a32:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8023a36:	d10c      	bne.n	8023a52 <rshift+0x3c>
 8023a38:	f100 0710 	add.w	r7, r0, #16
 8023a3c:	4629      	mov	r1, r5
 8023a3e:	42b1      	cmp	r1, r6
 8023a40:	d334      	bcc.n	8023aac <rshift+0x96>
 8023a42:	1a9b      	subs	r3, r3, r2
 8023a44:	009b      	lsls	r3, r3, #2
 8023a46:	1eea      	subs	r2, r5, #3
 8023a48:	4296      	cmp	r6, r2
 8023a4a:	bf38      	it	cc
 8023a4c:	2300      	movcc	r3, #0
 8023a4e:	4423      	add	r3, r4
 8023a50:	e015      	b.n	8023a7e <rshift+0x68>
 8023a52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8023a56:	f1c1 0820 	rsb	r8, r1, #32
 8023a5a:	40cf      	lsrs	r7, r1
 8023a5c:	f105 0e04 	add.w	lr, r5, #4
 8023a60:	46a1      	mov	r9, r4
 8023a62:	4576      	cmp	r6, lr
 8023a64:	46f4      	mov	ip, lr
 8023a66:	d815      	bhi.n	8023a94 <rshift+0x7e>
 8023a68:	1a9a      	subs	r2, r3, r2
 8023a6a:	0092      	lsls	r2, r2, #2
 8023a6c:	3a04      	subs	r2, #4
 8023a6e:	3501      	adds	r5, #1
 8023a70:	42ae      	cmp	r6, r5
 8023a72:	bf38      	it	cc
 8023a74:	2200      	movcc	r2, #0
 8023a76:	18a3      	adds	r3, r4, r2
 8023a78:	50a7      	str	r7, [r4, r2]
 8023a7a:	b107      	cbz	r7, 8023a7e <rshift+0x68>
 8023a7c:	3304      	adds	r3, #4
 8023a7e:	1b1a      	subs	r2, r3, r4
 8023a80:	42a3      	cmp	r3, r4
 8023a82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8023a86:	bf08      	it	eq
 8023a88:	2300      	moveq	r3, #0
 8023a8a:	6102      	str	r2, [r0, #16]
 8023a8c:	bf08      	it	eq
 8023a8e:	6143      	streq	r3, [r0, #20]
 8023a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023a94:	f8dc c000 	ldr.w	ip, [ip]
 8023a98:	fa0c fc08 	lsl.w	ip, ip, r8
 8023a9c:	ea4c 0707 	orr.w	r7, ip, r7
 8023aa0:	f849 7b04 	str.w	r7, [r9], #4
 8023aa4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8023aa8:	40cf      	lsrs	r7, r1
 8023aaa:	e7da      	b.n	8023a62 <rshift+0x4c>
 8023aac:	f851 cb04 	ldr.w	ip, [r1], #4
 8023ab0:	f847 cf04 	str.w	ip, [r7, #4]!
 8023ab4:	e7c3      	b.n	8023a3e <rshift+0x28>
 8023ab6:	4623      	mov	r3, r4
 8023ab8:	e7e1      	b.n	8023a7e <rshift+0x68>

08023aba <__hexdig_fun>:
 8023aba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8023abe:	2b09      	cmp	r3, #9
 8023ac0:	d802      	bhi.n	8023ac8 <__hexdig_fun+0xe>
 8023ac2:	3820      	subs	r0, #32
 8023ac4:	b2c0      	uxtb	r0, r0
 8023ac6:	4770      	bx	lr
 8023ac8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8023acc:	2b05      	cmp	r3, #5
 8023ace:	d801      	bhi.n	8023ad4 <__hexdig_fun+0x1a>
 8023ad0:	3847      	subs	r0, #71	; 0x47
 8023ad2:	e7f7      	b.n	8023ac4 <__hexdig_fun+0xa>
 8023ad4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8023ad8:	2b05      	cmp	r3, #5
 8023ada:	d801      	bhi.n	8023ae0 <__hexdig_fun+0x26>
 8023adc:	3827      	subs	r0, #39	; 0x27
 8023ade:	e7f1      	b.n	8023ac4 <__hexdig_fun+0xa>
 8023ae0:	2000      	movs	r0, #0
 8023ae2:	4770      	bx	lr

08023ae4 <__gethex>:
 8023ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ae8:	4617      	mov	r7, r2
 8023aea:	680a      	ldr	r2, [r1, #0]
 8023aec:	b085      	sub	sp, #20
 8023aee:	f102 0b02 	add.w	fp, r2, #2
 8023af2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8023af6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8023afa:	4681      	mov	r9, r0
 8023afc:	468a      	mov	sl, r1
 8023afe:	9302      	str	r3, [sp, #8]
 8023b00:	32fe      	adds	r2, #254	; 0xfe
 8023b02:	eb02 030b 	add.w	r3, r2, fp
 8023b06:	46d8      	mov	r8, fp
 8023b08:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8023b0c:	9301      	str	r3, [sp, #4]
 8023b0e:	2830      	cmp	r0, #48	; 0x30
 8023b10:	d0f7      	beq.n	8023b02 <__gethex+0x1e>
 8023b12:	f7ff ffd2 	bl	8023aba <__hexdig_fun>
 8023b16:	4604      	mov	r4, r0
 8023b18:	2800      	cmp	r0, #0
 8023b1a:	d138      	bne.n	8023b8e <__gethex+0xaa>
 8023b1c:	49a7      	ldr	r1, [pc, #668]	; (8023dbc <__gethex+0x2d8>)
 8023b1e:	2201      	movs	r2, #1
 8023b20:	4640      	mov	r0, r8
 8023b22:	f7fd f948 	bl	8020db6 <strncmp>
 8023b26:	4606      	mov	r6, r0
 8023b28:	2800      	cmp	r0, #0
 8023b2a:	d169      	bne.n	8023c00 <__gethex+0x11c>
 8023b2c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023b30:	465d      	mov	r5, fp
 8023b32:	f7ff ffc2 	bl	8023aba <__hexdig_fun>
 8023b36:	2800      	cmp	r0, #0
 8023b38:	d064      	beq.n	8023c04 <__gethex+0x120>
 8023b3a:	465a      	mov	r2, fp
 8023b3c:	7810      	ldrb	r0, [r2, #0]
 8023b3e:	2830      	cmp	r0, #48	; 0x30
 8023b40:	4690      	mov	r8, r2
 8023b42:	f102 0201 	add.w	r2, r2, #1
 8023b46:	d0f9      	beq.n	8023b3c <__gethex+0x58>
 8023b48:	f7ff ffb7 	bl	8023aba <__hexdig_fun>
 8023b4c:	2301      	movs	r3, #1
 8023b4e:	fab0 f480 	clz	r4, r0
 8023b52:	0964      	lsrs	r4, r4, #5
 8023b54:	465e      	mov	r6, fp
 8023b56:	9301      	str	r3, [sp, #4]
 8023b58:	4642      	mov	r2, r8
 8023b5a:	4615      	mov	r5, r2
 8023b5c:	3201      	adds	r2, #1
 8023b5e:	7828      	ldrb	r0, [r5, #0]
 8023b60:	f7ff ffab 	bl	8023aba <__hexdig_fun>
 8023b64:	2800      	cmp	r0, #0
 8023b66:	d1f8      	bne.n	8023b5a <__gethex+0x76>
 8023b68:	4994      	ldr	r1, [pc, #592]	; (8023dbc <__gethex+0x2d8>)
 8023b6a:	2201      	movs	r2, #1
 8023b6c:	4628      	mov	r0, r5
 8023b6e:	f7fd f922 	bl	8020db6 <strncmp>
 8023b72:	b978      	cbnz	r0, 8023b94 <__gethex+0xb0>
 8023b74:	b946      	cbnz	r6, 8023b88 <__gethex+0xa4>
 8023b76:	1c6e      	adds	r6, r5, #1
 8023b78:	4632      	mov	r2, r6
 8023b7a:	4615      	mov	r5, r2
 8023b7c:	3201      	adds	r2, #1
 8023b7e:	7828      	ldrb	r0, [r5, #0]
 8023b80:	f7ff ff9b 	bl	8023aba <__hexdig_fun>
 8023b84:	2800      	cmp	r0, #0
 8023b86:	d1f8      	bne.n	8023b7a <__gethex+0x96>
 8023b88:	1b73      	subs	r3, r6, r5
 8023b8a:	009e      	lsls	r6, r3, #2
 8023b8c:	e004      	b.n	8023b98 <__gethex+0xb4>
 8023b8e:	2400      	movs	r4, #0
 8023b90:	4626      	mov	r6, r4
 8023b92:	e7e1      	b.n	8023b58 <__gethex+0x74>
 8023b94:	2e00      	cmp	r6, #0
 8023b96:	d1f7      	bne.n	8023b88 <__gethex+0xa4>
 8023b98:	782b      	ldrb	r3, [r5, #0]
 8023b9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023b9e:	2b50      	cmp	r3, #80	; 0x50
 8023ba0:	d13d      	bne.n	8023c1e <__gethex+0x13a>
 8023ba2:	786b      	ldrb	r3, [r5, #1]
 8023ba4:	2b2b      	cmp	r3, #43	; 0x2b
 8023ba6:	d02f      	beq.n	8023c08 <__gethex+0x124>
 8023ba8:	2b2d      	cmp	r3, #45	; 0x2d
 8023baa:	d031      	beq.n	8023c10 <__gethex+0x12c>
 8023bac:	1c69      	adds	r1, r5, #1
 8023bae:	f04f 0b00 	mov.w	fp, #0
 8023bb2:	7808      	ldrb	r0, [r1, #0]
 8023bb4:	f7ff ff81 	bl	8023aba <__hexdig_fun>
 8023bb8:	1e42      	subs	r2, r0, #1
 8023bba:	b2d2      	uxtb	r2, r2
 8023bbc:	2a18      	cmp	r2, #24
 8023bbe:	d82e      	bhi.n	8023c1e <__gethex+0x13a>
 8023bc0:	f1a0 0210 	sub.w	r2, r0, #16
 8023bc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8023bc8:	f7ff ff77 	bl	8023aba <__hexdig_fun>
 8023bcc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8023bd0:	fa5f fc8c 	uxtb.w	ip, ip
 8023bd4:	f1bc 0f18 	cmp.w	ip, #24
 8023bd8:	d91d      	bls.n	8023c16 <__gethex+0x132>
 8023bda:	f1bb 0f00 	cmp.w	fp, #0
 8023bde:	d000      	beq.n	8023be2 <__gethex+0xfe>
 8023be0:	4252      	negs	r2, r2
 8023be2:	4416      	add	r6, r2
 8023be4:	f8ca 1000 	str.w	r1, [sl]
 8023be8:	b1dc      	cbz	r4, 8023c22 <__gethex+0x13e>
 8023bea:	9b01      	ldr	r3, [sp, #4]
 8023bec:	2b00      	cmp	r3, #0
 8023bee:	bf14      	ite	ne
 8023bf0:	f04f 0800 	movne.w	r8, #0
 8023bf4:	f04f 0806 	moveq.w	r8, #6
 8023bf8:	4640      	mov	r0, r8
 8023bfa:	b005      	add	sp, #20
 8023bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c00:	4645      	mov	r5, r8
 8023c02:	4626      	mov	r6, r4
 8023c04:	2401      	movs	r4, #1
 8023c06:	e7c7      	b.n	8023b98 <__gethex+0xb4>
 8023c08:	f04f 0b00 	mov.w	fp, #0
 8023c0c:	1ca9      	adds	r1, r5, #2
 8023c0e:	e7d0      	b.n	8023bb2 <__gethex+0xce>
 8023c10:	f04f 0b01 	mov.w	fp, #1
 8023c14:	e7fa      	b.n	8023c0c <__gethex+0x128>
 8023c16:	230a      	movs	r3, #10
 8023c18:	fb03 0002 	mla	r0, r3, r2, r0
 8023c1c:	e7d0      	b.n	8023bc0 <__gethex+0xdc>
 8023c1e:	4629      	mov	r1, r5
 8023c20:	e7e0      	b.n	8023be4 <__gethex+0x100>
 8023c22:	eba5 0308 	sub.w	r3, r5, r8
 8023c26:	3b01      	subs	r3, #1
 8023c28:	4621      	mov	r1, r4
 8023c2a:	2b07      	cmp	r3, #7
 8023c2c:	dc0a      	bgt.n	8023c44 <__gethex+0x160>
 8023c2e:	4648      	mov	r0, r9
 8023c30:	f7fd fffa 	bl	8021c28 <_Balloc>
 8023c34:	4604      	mov	r4, r0
 8023c36:	b940      	cbnz	r0, 8023c4a <__gethex+0x166>
 8023c38:	4b61      	ldr	r3, [pc, #388]	; (8023dc0 <__gethex+0x2dc>)
 8023c3a:	4602      	mov	r2, r0
 8023c3c:	21e4      	movs	r1, #228	; 0xe4
 8023c3e:	4861      	ldr	r0, [pc, #388]	; (8023dc4 <__gethex+0x2e0>)
 8023c40:	f7fd f986 	bl	8020f50 <__assert_func>
 8023c44:	3101      	adds	r1, #1
 8023c46:	105b      	asrs	r3, r3, #1
 8023c48:	e7ef      	b.n	8023c2a <__gethex+0x146>
 8023c4a:	f100 0a14 	add.w	sl, r0, #20
 8023c4e:	2300      	movs	r3, #0
 8023c50:	495a      	ldr	r1, [pc, #360]	; (8023dbc <__gethex+0x2d8>)
 8023c52:	f8cd a004 	str.w	sl, [sp, #4]
 8023c56:	469b      	mov	fp, r3
 8023c58:	45a8      	cmp	r8, r5
 8023c5a:	d342      	bcc.n	8023ce2 <__gethex+0x1fe>
 8023c5c:	9801      	ldr	r0, [sp, #4]
 8023c5e:	f840 bb04 	str.w	fp, [r0], #4
 8023c62:	eba0 000a 	sub.w	r0, r0, sl
 8023c66:	1080      	asrs	r0, r0, #2
 8023c68:	6120      	str	r0, [r4, #16]
 8023c6a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8023c6e:	4658      	mov	r0, fp
 8023c70:	f7fe f8cc 	bl	8021e0c <__hi0bits>
 8023c74:	683d      	ldr	r5, [r7, #0]
 8023c76:	eba8 0000 	sub.w	r0, r8, r0
 8023c7a:	42a8      	cmp	r0, r5
 8023c7c:	dd59      	ble.n	8023d32 <__gethex+0x24e>
 8023c7e:	eba0 0805 	sub.w	r8, r0, r5
 8023c82:	4641      	mov	r1, r8
 8023c84:	4620      	mov	r0, r4
 8023c86:	f7fe fc58 	bl	802253a <__any_on>
 8023c8a:	4683      	mov	fp, r0
 8023c8c:	b1b8      	cbz	r0, 8023cbe <__gethex+0x1da>
 8023c8e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8023c92:	1159      	asrs	r1, r3, #5
 8023c94:	f003 021f 	and.w	r2, r3, #31
 8023c98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8023c9c:	f04f 0b01 	mov.w	fp, #1
 8023ca0:	fa0b f202 	lsl.w	r2, fp, r2
 8023ca4:	420a      	tst	r2, r1
 8023ca6:	d00a      	beq.n	8023cbe <__gethex+0x1da>
 8023ca8:	455b      	cmp	r3, fp
 8023caa:	dd06      	ble.n	8023cba <__gethex+0x1d6>
 8023cac:	f1a8 0102 	sub.w	r1, r8, #2
 8023cb0:	4620      	mov	r0, r4
 8023cb2:	f7fe fc42 	bl	802253a <__any_on>
 8023cb6:	2800      	cmp	r0, #0
 8023cb8:	d138      	bne.n	8023d2c <__gethex+0x248>
 8023cba:	f04f 0b02 	mov.w	fp, #2
 8023cbe:	4641      	mov	r1, r8
 8023cc0:	4620      	mov	r0, r4
 8023cc2:	f7ff fea8 	bl	8023a16 <rshift>
 8023cc6:	4446      	add	r6, r8
 8023cc8:	68bb      	ldr	r3, [r7, #8]
 8023cca:	42b3      	cmp	r3, r6
 8023ccc:	da41      	bge.n	8023d52 <__gethex+0x26e>
 8023cce:	4621      	mov	r1, r4
 8023cd0:	4648      	mov	r0, r9
 8023cd2:	f7fd ffe9 	bl	8021ca8 <_Bfree>
 8023cd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023cd8:	2300      	movs	r3, #0
 8023cda:	6013      	str	r3, [r2, #0]
 8023cdc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8023ce0:	e78a      	b.n	8023bf8 <__gethex+0x114>
 8023ce2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8023ce6:	2a2e      	cmp	r2, #46	; 0x2e
 8023ce8:	d014      	beq.n	8023d14 <__gethex+0x230>
 8023cea:	2b20      	cmp	r3, #32
 8023cec:	d106      	bne.n	8023cfc <__gethex+0x218>
 8023cee:	9b01      	ldr	r3, [sp, #4]
 8023cf0:	f843 bb04 	str.w	fp, [r3], #4
 8023cf4:	f04f 0b00 	mov.w	fp, #0
 8023cf8:	9301      	str	r3, [sp, #4]
 8023cfa:	465b      	mov	r3, fp
 8023cfc:	7828      	ldrb	r0, [r5, #0]
 8023cfe:	9303      	str	r3, [sp, #12]
 8023d00:	f7ff fedb 	bl	8023aba <__hexdig_fun>
 8023d04:	9b03      	ldr	r3, [sp, #12]
 8023d06:	f000 000f 	and.w	r0, r0, #15
 8023d0a:	4098      	lsls	r0, r3
 8023d0c:	ea4b 0b00 	orr.w	fp, fp, r0
 8023d10:	3304      	adds	r3, #4
 8023d12:	e7a1      	b.n	8023c58 <__gethex+0x174>
 8023d14:	45a8      	cmp	r8, r5
 8023d16:	d8e8      	bhi.n	8023cea <__gethex+0x206>
 8023d18:	2201      	movs	r2, #1
 8023d1a:	4628      	mov	r0, r5
 8023d1c:	9303      	str	r3, [sp, #12]
 8023d1e:	f7fd f84a 	bl	8020db6 <strncmp>
 8023d22:	4926      	ldr	r1, [pc, #152]	; (8023dbc <__gethex+0x2d8>)
 8023d24:	9b03      	ldr	r3, [sp, #12]
 8023d26:	2800      	cmp	r0, #0
 8023d28:	d1df      	bne.n	8023cea <__gethex+0x206>
 8023d2a:	e795      	b.n	8023c58 <__gethex+0x174>
 8023d2c:	f04f 0b03 	mov.w	fp, #3
 8023d30:	e7c5      	b.n	8023cbe <__gethex+0x1da>
 8023d32:	da0b      	bge.n	8023d4c <__gethex+0x268>
 8023d34:	eba5 0800 	sub.w	r8, r5, r0
 8023d38:	4621      	mov	r1, r4
 8023d3a:	4642      	mov	r2, r8
 8023d3c:	4648      	mov	r0, r9
 8023d3e:	f7fe f9cd 	bl	80220dc <__lshift>
 8023d42:	eba6 0608 	sub.w	r6, r6, r8
 8023d46:	4604      	mov	r4, r0
 8023d48:	f100 0a14 	add.w	sl, r0, #20
 8023d4c:	f04f 0b00 	mov.w	fp, #0
 8023d50:	e7ba      	b.n	8023cc8 <__gethex+0x1e4>
 8023d52:	687b      	ldr	r3, [r7, #4]
 8023d54:	42b3      	cmp	r3, r6
 8023d56:	dd73      	ble.n	8023e40 <__gethex+0x35c>
 8023d58:	1b9e      	subs	r6, r3, r6
 8023d5a:	42b5      	cmp	r5, r6
 8023d5c:	dc34      	bgt.n	8023dc8 <__gethex+0x2e4>
 8023d5e:	68fb      	ldr	r3, [r7, #12]
 8023d60:	2b02      	cmp	r3, #2
 8023d62:	d023      	beq.n	8023dac <__gethex+0x2c8>
 8023d64:	2b03      	cmp	r3, #3
 8023d66:	d025      	beq.n	8023db4 <__gethex+0x2d0>
 8023d68:	2b01      	cmp	r3, #1
 8023d6a:	d115      	bne.n	8023d98 <__gethex+0x2b4>
 8023d6c:	42b5      	cmp	r5, r6
 8023d6e:	d113      	bne.n	8023d98 <__gethex+0x2b4>
 8023d70:	2d01      	cmp	r5, #1
 8023d72:	d10b      	bne.n	8023d8c <__gethex+0x2a8>
 8023d74:	9a02      	ldr	r2, [sp, #8]
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	6013      	str	r3, [r2, #0]
 8023d7a:	2301      	movs	r3, #1
 8023d7c:	6123      	str	r3, [r4, #16]
 8023d7e:	f8ca 3000 	str.w	r3, [sl]
 8023d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023d84:	f04f 0862 	mov.w	r8, #98	; 0x62
 8023d88:	601c      	str	r4, [r3, #0]
 8023d8a:	e735      	b.n	8023bf8 <__gethex+0x114>
 8023d8c:	1e69      	subs	r1, r5, #1
 8023d8e:	4620      	mov	r0, r4
 8023d90:	f7fe fbd3 	bl	802253a <__any_on>
 8023d94:	2800      	cmp	r0, #0
 8023d96:	d1ed      	bne.n	8023d74 <__gethex+0x290>
 8023d98:	4621      	mov	r1, r4
 8023d9a:	4648      	mov	r0, r9
 8023d9c:	f7fd ff84 	bl	8021ca8 <_Bfree>
 8023da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023da2:	2300      	movs	r3, #0
 8023da4:	6013      	str	r3, [r2, #0]
 8023da6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8023daa:	e725      	b.n	8023bf8 <__gethex+0x114>
 8023dac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023dae:	2b00      	cmp	r3, #0
 8023db0:	d1f2      	bne.n	8023d98 <__gethex+0x2b4>
 8023db2:	e7df      	b.n	8023d74 <__gethex+0x290>
 8023db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023db6:	2b00      	cmp	r3, #0
 8023db8:	d1dc      	bne.n	8023d74 <__gethex+0x290>
 8023dba:	e7ed      	b.n	8023d98 <__gethex+0x2b4>
 8023dbc:	08025e94 	.word	0x08025e94
 8023dc0:	08025d2e 	.word	0x08025d2e
 8023dc4:	08025f01 	.word	0x08025f01
 8023dc8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8023dcc:	f1bb 0f00 	cmp.w	fp, #0
 8023dd0:	d133      	bne.n	8023e3a <__gethex+0x356>
 8023dd2:	f1b8 0f00 	cmp.w	r8, #0
 8023dd6:	d004      	beq.n	8023de2 <__gethex+0x2fe>
 8023dd8:	4641      	mov	r1, r8
 8023dda:	4620      	mov	r0, r4
 8023ddc:	f7fe fbad 	bl	802253a <__any_on>
 8023de0:	4683      	mov	fp, r0
 8023de2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8023de6:	2301      	movs	r3, #1
 8023de8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8023dec:	f008 081f 	and.w	r8, r8, #31
 8023df0:	fa03 f308 	lsl.w	r3, r3, r8
 8023df4:	4213      	tst	r3, r2
 8023df6:	4631      	mov	r1, r6
 8023df8:	4620      	mov	r0, r4
 8023dfa:	bf18      	it	ne
 8023dfc:	f04b 0b02 	orrne.w	fp, fp, #2
 8023e00:	1bad      	subs	r5, r5, r6
 8023e02:	f7ff fe08 	bl	8023a16 <rshift>
 8023e06:	687e      	ldr	r6, [r7, #4]
 8023e08:	f04f 0802 	mov.w	r8, #2
 8023e0c:	f1bb 0f00 	cmp.w	fp, #0
 8023e10:	d04a      	beq.n	8023ea8 <__gethex+0x3c4>
 8023e12:	68fb      	ldr	r3, [r7, #12]
 8023e14:	2b02      	cmp	r3, #2
 8023e16:	d016      	beq.n	8023e46 <__gethex+0x362>
 8023e18:	2b03      	cmp	r3, #3
 8023e1a:	d018      	beq.n	8023e4e <__gethex+0x36a>
 8023e1c:	2b01      	cmp	r3, #1
 8023e1e:	d109      	bne.n	8023e34 <__gethex+0x350>
 8023e20:	f01b 0f02 	tst.w	fp, #2
 8023e24:	d006      	beq.n	8023e34 <__gethex+0x350>
 8023e26:	f8da 3000 	ldr.w	r3, [sl]
 8023e2a:	ea4b 0b03 	orr.w	fp, fp, r3
 8023e2e:	f01b 0f01 	tst.w	fp, #1
 8023e32:	d10f      	bne.n	8023e54 <__gethex+0x370>
 8023e34:	f048 0810 	orr.w	r8, r8, #16
 8023e38:	e036      	b.n	8023ea8 <__gethex+0x3c4>
 8023e3a:	f04f 0b01 	mov.w	fp, #1
 8023e3e:	e7d0      	b.n	8023de2 <__gethex+0x2fe>
 8023e40:	f04f 0801 	mov.w	r8, #1
 8023e44:	e7e2      	b.n	8023e0c <__gethex+0x328>
 8023e46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023e48:	f1c3 0301 	rsb	r3, r3, #1
 8023e4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8023e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	d0ef      	beq.n	8023e34 <__gethex+0x350>
 8023e54:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023e58:	f104 0214 	add.w	r2, r4, #20
 8023e5c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8023e60:	9301      	str	r3, [sp, #4]
 8023e62:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8023e66:	2300      	movs	r3, #0
 8023e68:	4694      	mov	ip, r2
 8023e6a:	f852 1b04 	ldr.w	r1, [r2], #4
 8023e6e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8023e72:	d01e      	beq.n	8023eb2 <__gethex+0x3ce>
 8023e74:	3101      	adds	r1, #1
 8023e76:	f8cc 1000 	str.w	r1, [ip]
 8023e7a:	f1b8 0f02 	cmp.w	r8, #2
 8023e7e:	f104 0214 	add.w	r2, r4, #20
 8023e82:	d13d      	bne.n	8023f00 <__gethex+0x41c>
 8023e84:	683b      	ldr	r3, [r7, #0]
 8023e86:	3b01      	subs	r3, #1
 8023e88:	42ab      	cmp	r3, r5
 8023e8a:	d10b      	bne.n	8023ea4 <__gethex+0x3c0>
 8023e8c:	1169      	asrs	r1, r5, #5
 8023e8e:	2301      	movs	r3, #1
 8023e90:	f005 051f 	and.w	r5, r5, #31
 8023e94:	fa03 f505 	lsl.w	r5, r3, r5
 8023e98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e9c:	421d      	tst	r5, r3
 8023e9e:	bf18      	it	ne
 8023ea0:	f04f 0801 	movne.w	r8, #1
 8023ea4:	f048 0820 	orr.w	r8, r8, #32
 8023ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023eaa:	601c      	str	r4, [r3, #0]
 8023eac:	9b02      	ldr	r3, [sp, #8]
 8023eae:	601e      	str	r6, [r3, #0]
 8023eb0:	e6a2      	b.n	8023bf8 <__gethex+0x114>
 8023eb2:	4290      	cmp	r0, r2
 8023eb4:	f842 3c04 	str.w	r3, [r2, #-4]
 8023eb8:	d8d6      	bhi.n	8023e68 <__gethex+0x384>
 8023eba:	68a2      	ldr	r2, [r4, #8]
 8023ebc:	4593      	cmp	fp, r2
 8023ebe:	db17      	blt.n	8023ef0 <__gethex+0x40c>
 8023ec0:	6861      	ldr	r1, [r4, #4]
 8023ec2:	4648      	mov	r0, r9
 8023ec4:	3101      	adds	r1, #1
 8023ec6:	f7fd feaf 	bl	8021c28 <_Balloc>
 8023eca:	4682      	mov	sl, r0
 8023ecc:	b918      	cbnz	r0, 8023ed6 <__gethex+0x3f2>
 8023ece:	4b1b      	ldr	r3, [pc, #108]	; (8023f3c <__gethex+0x458>)
 8023ed0:	4602      	mov	r2, r0
 8023ed2:	2184      	movs	r1, #132	; 0x84
 8023ed4:	e6b3      	b.n	8023c3e <__gethex+0x15a>
 8023ed6:	6922      	ldr	r2, [r4, #16]
 8023ed8:	3202      	adds	r2, #2
 8023eda:	f104 010c 	add.w	r1, r4, #12
 8023ede:	0092      	lsls	r2, r2, #2
 8023ee0:	300c      	adds	r0, #12
 8023ee2:	f7fd f820 	bl	8020f26 <memcpy>
 8023ee6:	4621      	mov	r1, r4
 8023ee8:	4648      	mov	r0, r9
 8023eea:	f7fd fedd 	bl	8021ca8 <_Bfree>
 8023eee:	4654      	mov	r4, sl
 8023ef0:	6922      	ldr	r2, [r4, #16]
 8023ef2:	1c51      	adds	r1, r2, #1
 8023ef4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023ef8:	6121      	str	r1, [r4, #16]
 8023efa:	2101      	movs	r1, #1
 8023efc:	6151      	str	r1, [r2, #20]
 8023efe:	e7bc      	b.n	8023e7a <__gethex+0x396>
 8023f00:	6921      	ldr	r1, [r4, #16]
 8023f02:	4559      	cmp	r1, fp
 8023f04:	dd0b      	ble.n	8023f1e <__gethex+0x43a>
 8023f06:	2101      	movs	r1, #1
 8023f08:	4620      	mov	r0, r4
 8023f0a:	f7ff fd84 	bl	8023a16 <rshift>
 8023f0e:	68bb      	ldr	r3, [r7, #8]
 8023f10:	3601      	adds	r6, #1
 8023f12:	42b3      	cmp	r3, r6
 8023f14:	f6ff aedb 	blt.w	8023cce <__gethex+0x1ea>
 8023f18:	f04f 0801 	mov.w	r8, #1
 8023f1c:	e7c2      	b.n	8023ea4 <__gethex+0x3c0>
 8023f1e:	f015 051f 	ands.w	r5, r5, #31
 8023f22:	d0f9      	beq.n	8023f18 <__gethex+0x434>
 8023f24:	9b01      	ldr	r3, [sp, #4]
 8023f26:	441a      	add	r2, r3
 8023f28:	f1c5 0520 	rsb	r5, r5, #32
 8023f2c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8023f30:	f7fd ff6c 	bl	8021e0c <__hi0bits>
 8023f34:	42a8      	cmp	r0, r5
 8023f36:	dbe6      	blt.n	8023f06 <__gethex+0x422>
 8023f38:	e7ee      	b.n	8023f18 <__gethex+0x434>
 8023f3a:	bf00      	nop
 8023f3c:	08025d2e 	.word	0x08025d2e

08023f40 <L_shift>:
 8023f40:	f1c2 0208 	rsb	r2, r2, #8
 8023f44:	0092      	lsls	r2, r2, #2
 8023f46:	b570      	push	{r4, r5, r6, lr}
 8023f48:	f1c2 0620 	rsb	r6, r2, #32
 8023f4c:	6843      	ldr	r3, [r0, #4]
 8023f4e:	6804      	ldr	r4, [r0, #0]
 8023f50:	fa03 f506 	lsl.w	r5, r3, r6
 8023f54:	432c      	orrs	r4, r5
 8023f56:	40d3      	lsrs	r3, r2
 8023f58:	6004      	str	r4, [r0, #0]
 8023f5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8023f5e:	4288      	cmp	r0, r1
 8023f60:	d3f4      	bcc.n	8023f4c <L_shift+0xc>
 8023f62:	bd70      	pop	{r4, r5, r6, pc}

08023f64 <__match>:
 8023f64:	b530      	push	{r4, r5, lr}
 8023f66:	6803      	ldr	r3, [r0, #0]
 8023f68:	3301      	adds	r3, #1
 8023f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023f6e:	b914      	cbnz	r4, 8023f76 <__match+0x12>
 8023f70:	6003      	str	r3, [r0, #0]
 8023f72:	2001      	movs	r0, #1
 8023f74:	bd30      	pop	{r4, r5, pc}
 8023f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023f7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8023f7e:	2d19      	cmp	r5, #25
 8023f80:	bf98      	it	ls
 8023f82:	3220      	addls	r2, #32
 8023f84:	42a2      	cmp	r2, r4
 8023f86:	d0f0      	beq.n	8023f6a <__match+0x6>
 8023f88:	2000      	movs	r0, #0
 8023f8a:	e7f3      	b.n	8023f74 <__match+0x10>

08023f8c <__hexnan>:
 8023f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f90:	680b      	ldr	r3, [r1, #0]
 8023f92:	6801      	ldr	r1, [r0, #0]
 8023f94:	115e      	asrs	r6, r3, #5
 8023f96:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8023f9a:	f013 031f 	ands.w	r3, r3, #31
 8023f9e:	b087      	sub	sp, #28
 8023fa0:	bf18      	it	ne
 8023fa2:	3604      	addne	r6, #4
 8023fa4:	2500      	movs	r5, #0
 8023fa6:	1f37      	subs	r7, r6, #4
 8023fa8:	4682      	mov	sl, r0
 8023faa:	4690      	mov	r8, r2
 8023fac:	9301      	str	r3, [sp, #4]
 8023fae:	f846 5c04 	str.w	r5, [r6, #-4]
 8023fb2:	46b9      	mov	r9, r7
 8023fb4:	463c      	mov	r4, r7
 8023fb6:	9502      	str	r5, [sp, #8]
 8023fb8:	46ab      	mov	fp, r5
 8023fba:	784a      	ldrb	r2, [r1, #1]
 8023fbc:	1c4b      	adds	r3, r1, #1
 8023fbe:	9303      	str	r3, [sp, #12]
 8023fc0:	b342      	cbz	r2, 8024014 <__hexnan+0x88>
 8023fc2:	4610      	mov	r0, r2
 8023fc4:	9105      	str	r1, [sp, #20]
 8023fc6:	9204      	str	r2, [sp, #16]
 8023fc8:	f7ff fd77 	bl	8023aba <__hexdig_fun>
 8023fcc:	2800      	cmp	r0, #0
 8023fce:	d14f      	bne.n	8024070 <__hexnan+0xe4>
 8023fd0:	9a04      	ldr	r2, [sp, #16]
 8023fd2:	9905      	ldr	r1, [sp, #20]
 8023fd4:	2a20      	cmp	r2, #32
 8023fd6:	d818      	bhi.n	802400a <__hexnan+0x7e>
 8023fd8:	9b02      	ldr	r3, [sp, #8]
 8023fda:	459b      	cmp	fp, r3
 8023fdc:	dd13      	ble.n	8024006 <__hexnan+0x7a>
 8023fde:	454c      	cmp	r4, r9
 8023fe0:	d206      	bcs.n	8023ff0 <__hexnan+0x64>
 8023fe2:	2d07      	cmp	r5, #7
 8023fe4:	dc04      	bgt.n	8023ff0 <__hexnan+0x64>
 8023fe6:	462a      	mov	r2, r5
 8023fe8:	4649      	mov	r1, r9
 8023fea:	4620      	mov	r0, r4
 8023fec:	f7ff ffa8 	bl	8023f40 <L_shift>
 8023ff0:	4544      	cmp	r4, r8
 8023ff2:	d950      	bls.n	8024096 <__hexnan+0x10a>
 8023ff4:	2300      	movs	r3, #0
 8023ff6:	f1a4 0904 	sub.w	r9, r4, #4
 8023ffa:	f844 3c04 	str.w	r3, [r4, #-4]
 8023ffe:	f8cd b008 	str.w	fp, [sp, #8]
 8024002:	464c      	mov	r4, r9
 8024004:	461d      	mov	r5, r3
 8024006:	9903      	ldr	r1, [sp, #12]
 8024008:	e7d7      	b.n	8023fba <__hexnan+0x2e>
 802400a:	2a29      	cmp	r2, #41	; 0x29
 802400c:	d155      	bne.n	80240ba <__hexnan+0x12e>
 802400e:	3102      	adds	r1, #2
 8024010:	f8ca 1000 	str.w	r1, [sl]
 8024014:	f1bb 0f00 	cmp.w	fp, #0
 8024018:	d04f      	beq.n	80240ba <__hexnan+0x12e>
 802401a:	454c      	cmp	r4, r9
 802401c:	d206      	bcs.n	802402c <__hexnan+0xa0>
 802401e:	2d07      	cmp	r5, #7
 8024020:	dc04      	bgt.n	802402c <__hexnan+0xa0>
 8024022:	462a      	mov	r2, r5
 8024024:	4649      	mov	r1, r9
 8024026:	4620      	mov	r0, r4
 8024028:	f7ff ff8a 	bl	8023f40 <L_shift>
 802402c:	4544      	cmp	r4, r8
 802402e:	d934      	bls.n	802409a <__hexnan+0x10e>
 8024030:	f1a8 0204 	sub.w	r2, r8, #4
 8024034:	4623      	mov	r3, r4
 8024036:	f853 1b04 	ldr.w	r1, [r3], #4
 802403a:	f842 1f04 	str.w	r1, [r2, #4]!
 802403e:	429f      	cmp	r7, r3
 8024040:	d2f9      	bcs.n	8024036 <__hexnan+0xaa>
 8024042:	1b3b      	subs	r3, r7, r4
 8024044:	f023 0303 	bic.w	r3, r3, #3
 8024048:	3304      	adds	r3, #4
 802404a:	3e03      	subs	r6, #3
 802404c:	3401      	adds	r4, #1
 802404e:	42a6      	cmp	r6, r4
 8024050:	bf38      	it	cc
 8024052:	2304      	movcc	r3, #4
 8024054:	4443      	add	r3, r8
 8024056:	2200      	movs	r2, #0
 8024058:	f843 2b04 	str.w	r2, [r3], #4
 802405c:	429f      	cmp	r7, r3
 802405e:	d2fb      	bcs.n	8024058 <__hexnan+0xcc>
 8024060:	683b      	ldr	r3, [r7, #0]
 8024062:	b91b      	cbnz	r3, 802406c <__hexnan+0xe0>
 8024064:	4547      	cmp	r7, r8
 8024066:	d126      	bne.n	80240b6 <__hexnan+0x12a>
 8024068:	2301      	movs	r3, #1
 802406a:	603b      	str	r3, [r7, #0]
 802406c:	2005      	movs	r0, #5
 802406e:	e025      	b.n	80240bc <__hexnan+0x130>
 8024070:	3501      	adds	r5, #1
 8024072:	2d08      	cmp	r5, #8
 8024074:	f10b 0b01 	add.w	fp, fp, #1
 8024078:	dd06      	ble.n	8024088 <__hexnan+0xfc>
 802407a:	4544      	cmp	r4, r8
 802407c:	d9c3      	bls.n	8024006 <__hexnan+0x7a>
 802407e:	2300      	movs	r3, #0
 8024080:	f844 3c04 	str.w	r3, [r4, #-4]
 8024084:	2501      	movs	r5, #1
 8024086:	3c04      	subs	r4, #4
 8024088:	6822      	ldr	r2, [r4, #0]
 802408a:	f000 000f 	and.w	r0, r0, #15
 802408e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8024092:	6020      	str	r0, [r4, #0]
 8024094:	e7b7      	b.n	8024006 <__hexnan+0x7a>
 8024096:	2508      	movs	r5, #8
 8024098:	e7b5      	b.n	8024006 <__hexnan+0x7a>
 802409a:	9b01      	ldr	r3, [sp, #4]
 802409c:	2b00      	cmp	r3, #0
 802409e:	d0df      	beq.n	8024060 <__hexnan+0xd4>
 80240a0:	f1c3 0320 	rsb	r3, r3, #32
 80240a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80240a8:	40da      	lsrs	r2, r3
 80240aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80240ae:	4013      	ands	r3, r2
 80240b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80240b4:	e7d4      	b.n	8024060 <__hexnan+0xd4>
 80240b6:	3f04      	subs	r7, #4
 80240b8:	e7d2      	b.n	8024060 <__hexnan+0xd4>
 80240ba:	2004      	movs	r0, #4
 80240bc:	b007      	add	sp, #28
 80240be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080240c2 <__ascii_mbtowc>:
 80240c2:	b082      	sub	sp, #8
 80240c4:	b901      	cbnz	r1, 80240c8 <__ascii_mbtowc+0x6>
 80240c6:	a901      	add	r1, sp, #4
 80240c8:	b142      	cbz	r2, 80240dc <__ascii_mbtowc+0x1a>
 80240ca:	b14b      	cbz	r3, 80240e0 <__ascii_mbtowc+0x1e>
 80240cc:	7813      	ldrb	r3, [r2, #0]
 80240ce:	600b      	str	r3, [r1, #0]
 80240d0:	7812      	ldrb	r2, [r2, #0]
 80240d2:	1e10      	subs	r0, r2, #0
 80240d4:	bf18      	it	ne
 80240d6:	2001      	movne	r0, #1
 80240d8:	b002      	add	sp, #8
 80240da:	4770      	bx	lr
 80240dc:	4610      	mov	r0, r2
 80240de:	e7fb      	b.n	80240d8 <__ascii_mbtowc+0x16>
 80240e0:	f06f 0001 	mvn.w	r0, #1
 80240e4:	e7f8      	b.n	80240d8 <__ascii_mbtowc+0x16>

080240e6 <__ascii_wctomb>:
 80240e6:	b149      	cbz	r1, 80240fc <__ascii_wctomb+0x16>
 80240e8:	2aff      	cmp	r2, #255	; 0xff
 80240ea:	bf85      	ittet	hi
 80240ec:	238a      	movhi	r3, #138	; 0x8a
 80240ee:	6003      	strhi	r3, [r0, #0]
 80240f0:	700a      	strbls	r2, [r1, #0]
 80240f2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80240f6:	bf98      	it	ls
 80240f8:	2001      	movls	r0, #1
 80240fa:	4770      	bx	lr
 80240fc:	4608      	mov	r0, r1
 80240fe:	4770      	bx	lr

08024100 <_raise_r>:
 8024100:	291f      	cmp	r1, #31
 8024102:	b538      	push	{r3, r4, r5, lr}
 8024104:	4604      	mov	r4, r0
 8024106:	460d      	mov	r5, r1
 8024108:	d904      	bls.n	8024114 <_raise_r+0x14>
 802410a:	2316      	movs	r3, #22
 802410c:	6003      	str	r3, [r0, #0]
 802410e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024112:	bd38      	pop	{r3, r4, r5, pc}
 8024114:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8024116:	b112      	cbz	r2, 802411e <_raise_r+0x1e>
 8024118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802411c:	b94b      	cbnz	r3, 8024132 <_raise_r+0x32>
 802411e:	4620      	mov	r0, r4
 8024120:	f000 f830 	bl	8024184 <_getpid_r>
 8024124:	462a      	mov	r2, r5
 8024126:	4601      	mov	r1, r0
 8024128:	4620      	mov	r0, r4
 802412a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802412e:	f000 b817 	b.w	8024160 <_kill_r>
 8024132:	2b01      	cmp	r3, #1
 8024134:	d00a      	beq.n	802414c <_raise_r+0x4c>
 8024136:	1c59      	adds	r1, r3, #1
 8024138:	d103      	bne.n	8024142 <_raise_r+0x42>
 802413a:	2316      	movs	r3, #22
 802413c:	6003      	str	r3, [r0, #0]
 802413e:	2001      	movs	r0, #1
 8024140:	e7e7      	b.n	8024112 <_raise_r+0x12>
 8024142:	2400      	movs	r4, #0
 8024144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024148:	4628      	mov	r0, r5
 802414a:	4798      	blx	r3
 802414c:	2000      	movs	r0, #0
 802414e:	e7e0      	b.n	8024112 <_raise_r+0x12>

08024150 <raise>:
 8024150:	4b02      	ldr	r3, [pc, #8]	; (802415c <raise+0xc>)
 8024152:	4601      	mov	r1, r0
 8024154:	6818      	ldr	r0, [r3, #0]
 8024156:	f7ff bfd3 	b.w	8024100 <_raise_r>
 802415a:	bf00      	nop
 802415c:	200009d8 	.word	0x200009d8

08024160 <_kill_r>:
 8024160:	b538      	push	{r3, r4, r5, lr}
 8024162:	4d07      	ldr	r5, [pc, #28]	; (8024180 <_kill_r+0x20>)
 8024164:	2300      	movs	r3, #0
 8024166:	4604      	mov	r4, r0
 8024168:	4608      	mov	r0, r1
 802416a:	4611      	mov	r1, r2
 802416c:	602b      	str	r3, [r5, #0]
 802416e:	f7df fcd3 	bl	8003b18 <_kill>
 8024172:	1c43      	adds	r3, r0, #1
 8024174:	d102      	bne.n	802417c <_kill_r+0x1c>
 8024176:	682b      	ldr	r3, [r5, #0]
 8024178:	b103      	cbz	r3, 802417c <_kill_r+0x1c>
 802417a:	6023      	str	r3, [r4, #0]
 802417c:	bd38      	pop	{r3, r4, r5, pc}
 802417e:	bf00      	nop
 8024180:	200171a8 	.word	0x200171a8

08024184 <_getpid_r>:
 8024184:	f7df bcc0 	b.w	8003b08 <_getpid>

08024188 <_init>:
 8024188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802418a:	bf00      	nop
 802418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802418e:	bc08      	pop	{r3}
 8024190:	469e      	mov	lr, r3
 8024192:	4770      	bx	lr

08024194 <_fini>:
 8024194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024196:	bf00      	nop
 8024198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802419a:	bc08      	pop	{r3}
 802419c:	469e      	mov	lr, r3
 802419e:	4770      	bx	lr
